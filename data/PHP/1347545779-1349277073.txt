I got inspired to try it out here in /r/php and bought it yesterday.
Yep, just copy your key over when you run v5 for the first time, it should pop up a window asking how you want to run: License or Trial version. That's how it went on my end, anyway.
Don't feed the trolls.
Sorry you're going to have to explain how you got to those conclusions. Who are you talking about with regards to maintainability? For us as programmers there is no difference there. And coupling of what? The functions themselves are already "coupled" by definition. A class (or namespace) doesn't change that, it makes it easier to use. And namespaces goes without saying, didn't think I needed to mention that. Not really related to class vs function though.
Mind did. I bought it Tuesday. EDIT: I had to re-enter the information after the install.
Seems legit. He's nit implying that's the AES encrypted.strung but rather simply using sha to generate the encryption key. He could have simply even not hashed the string to get the key or possibly even did an md5. It's like salting a password with md5. You could store the salt as $config['md5']['salt'], but doesn't mean you have to use md5 to generate the salt. 
I don't know where you got the impression that I disagreed with that ... In fact, I said "What we generally do is encrypted cookie with $_SESSION serialized into memcached or MySQL", meaning we use a cookie to identify help rebuild the session if you bounce session_id between boxes, and then store the actual contents of the session in memcached. There are ways you can do this without worrying about the 'rebuild the session' part, like just trusting the session_id from the client, but they introduce other complexities (security and whatnot) that you must take into consideration. 
oh yeah, it's legit. I just found it funny :)
I tried re-entering it, but it didn't work. I'm using the license of a previous employee though, so I have no idea what was paid for.
And just to be sure I wasn't missing out on some other reference in the code, I had to check ["Hello Mr Smith"](http://www.urbandictionary.com/define.php?term=Hello%20Mr%20Smith)
That could be your problem. It seem that you get free upgrades for a year after the purchase date of the original license.
Yep, looks to be the case. :)
I hope they add CodeIgniter support. I absolutely love PhpStorm.
How exactly a completely wrong definition of MVC is a typo ? Or the addition of global state in patterns which do not need it? 
Teresko, would you please show us a completely right MVC implementation so that I can determine what is wrong with mine? I'd really appreciate some calm, constructive *and accurate* criticism. Actually, is there any hope of you sharing with us how you learned what you learned? 
My understanding of MVC is the following: It stands for Model, View, Controller. I choose to use Data Containers and Managers, so in my version, it's really Managers Views Controllers, but it's largely and functionally the same thing. If you look at the [**source code**](http://bazaar.launchpad.net/~theodore-phpexperts/phpu-mvc/phpu-mvc/files) of my micro-MVC I posted above, you will see the following: * controllers/ * managers/ * models/ * views/ * [web/index.php](http://bazaar.launchpad.net/~theodore-phpexperts/phpu-mvc/phpu-mvc/view/head:/web/index.php) &lt;-- the front-controller. I'm afraid I don't see how you got the impression that my implementation of MVC was a "completely wrong definition". I don't see how you came to that conclusion at all. Are you sure you aren't acting from your gut and just wanting to lash out at me before marginally researching the information?
what?
 public function generateRandomNumber() { for($i = 0; $i &lt;= 6; $i++) { return $i; } } Guaranteed random 0!
I was looking over some code that was sent in with a resume. This guy had a function called "Hot Karl". Don't remember what the code did, just the one function name.
Here, I optimized it for you using a singleton factory pattern class Dice { // I know Dice is plural, you try naming a class Die private static $dice; private $sides; private $zero_index; /** * for some reason you want a zero indexed die? * @param int $sides * @param bool $zero_index */ public static function factory($sides = 6, $zero_index = false) { $this_class = __CLASS__; if (self::$dice instanceof $this_class) return self::$dice; self::$dice = new $this_class($sides, $zero_index); return self::$dice; } private function __construct($sides, $zero_index) { $this-&gt;sides = $sides; $this-&gt;zero_index = $zero_index; } public function roll() { $z = ($this-&gt;zero_index) ? 1 : 0; return mt_rand(1-$z, $this-&gt;sides-$z); } } function generateRandomNumber() { $dice = Dice::factory(7, true); $roll_val = $dice-&gt;roll(); return 0; } EDIT: made zero indexing part of the constructor
PHPstorm is the next best thing after bacon.
Seems to be working for me still...
meh, I thought it was neat. I guess its pretty obvious stuff though.
I have a couple thoughts on this: **The Bad** * Why aren't these functions namespaced? Seriously... We finally have namespaces, and most of us complain about how amazingly cluttered the global namespace is, but new features being added to the core aren't being namespaced. For the love of fucking God, please break the cycle, and do this correctly. * When *everyone* uses the same hashing module, then *everyone* becomes a target when security vulnerabilities are found. This is pretty much true of most PHP extensions, so it's not a big deal. Just a thought. * This method removes the possibility of checking the password in the database, which probably isn't a big deal for most of us. It just means I won't be able to check login credentials using "SELECT * FROM users WHERE username = ? AND password = MY_PASS_FUNC(?) LIMIT 1". * I want to harp on the namespace thing a bit more. Using password\\hash() and password\\verify() is less confusing than password_hash() and password_verify(), because the latter function names create the same kind of confusion that already exists in all PHP functions. "Shit, is that hash_password? Or password_hash? Or passwordhash?". **The Good** * The less time I have to spend thinking about securing passwords, is more time I can spend focusing on the actual business of my app. * I won't have to worry about editing my app when security vulnerabilities are found. I can upgrade my version of PHP, or apply a path, and I'm done. In other words, I can let someone else worry about keeping this stuff secure. * These functions will ensure newly written apps by inexperienced developers will be more secure from the start. Now we have to find and nuke all the password+md5 tutorials floating around on the web. **Final Thought** Please namespace these functions. Namespaces, especially in core PHP functions, aren't going to catch on until developers start using them. Don't be afraid to break from the pack, and be the first developers to draw that line in the sand, and say, "From here on out, all new functions will be namespaced."
Joellarson, I don't see what you're apologizing for ;) Coding live in front of others with no preparation is a form of coding sport for myself. It would have been absolutely fun to do simultaneous screencasts with you and/or others at the same time, on the same problem, and I am going to continue doing just that! 10 AM-1 PM MDT Saturday, 15 September. Participants should: 1. Use http://join.me/ for the screencasts, 2. Post the screencast URLs on reddit somewhere (I usually do this in /r/phphelp so as not to clutter the main subreddit) by no later than 9:45 MDT, 2. Record their screens via something like [CamStudio](http://camstudio.org/). 3. Upload to Youtube (optionally, you should consider cutting out major gaps in typing and time-lapsing it by a factor of 4. I use [VirtualDub](http://www.virtualdub.org/) for this). During these code sporting events, it's more about competing against yourself. You quickly learn where you get stumped, etc., and it really challenges you as a developer. You can't help but get better once you do these sort of things regularly.
Ok, well that makes more sense knowing all of that. Personally, I'm simply not a fan of any self-proclaimed "pro" or "expert". There's a good chance that most of us in this sub are already a "pro" in the literal sense of the word: _professional_, e.g. one who is paid to do the work. But the abbreviation "pro" is not simply an abbreviation, it's a superlative, and when bestowed upon oneself (or by others), you have quite the reputation to uphold. I will admit that I'm ignorant as to your specific skill level, but I will say that there's only a handful of posters here that I'd consider "pro". And then when you add "expert" into the mix, I think you can see how it becomes somewhat of a superlative smorgasbord. While it doesn't seem that you have any ill intentions, perhaps I'm a little sensitive on the subject since I've been burned one too many times by self-proclaimed gurus, to the point that any form of self-adulation causes my hair to bristle. No hard feelings, though. I don't think that what you're doing is deserving of a ban, but you might take criticisms from others here (harsh as they may be) and let them be a learning experience to help you learn how to better approach and interact here. For example, I think much of the hostility is from your self-promotion; this is somewhat of a double-standard, as I know of other users here who do this often -- difference being, their posts are generally well-received. Also, and I think this has parallels to Google's search algos (whereby blatant SEO manipulation is penalized and quality content is rewarded): if you have quality content, your site will get the promotion it deserves without you having to do much on your own, on account of others sharing it for you. So just concentrate on generating good content and the rest should follow. Maybe not instantly, but in time, it should.
I see where you're coming from, but I'm sorry to say that I disagree. I'm not the only one who thinks that he's not qualified to teach. You should get your money back and find a more qualified teacher.
No its not. Composition is about one big object containing other smaller objects. Like a World class having grass and mountain objects. While a Facade is more like a gateway object. It is often used as a simple entry point to a lower end code - like database management, or db object creating object. They are typically named something like ...Manager, for instance UserManager. Im not a really good with words, sorry. They might look the same - but they really arent :P
I wouldn't listen to any information from this individual. [This](http://www.reddit.com/r/PHP/comments/ix1na/phpuniversitys_mvc_a_concise_model_view/) is the reaction he got from the community when he posted his MVC "framework" to r/php.
&gt; Name this Programming Paradigm -&gt; Inheritance Inheritance is not a programming paradigm; OOP is. Some may say, and cite, that it's a fundamental feature; but people like Alan Kay, Joe Armstrong, myself and the group of people that think of composition over inheritance, don't.
I've been using PHPStorm for about three months now, and I couldn't be happier with it. I've been stuck using Notepad++ for PHP/Javascript/HTML development for the past four years, because I was never able to find a powerful, yet unobtrusive IDE to replace it. I've tried every single PHP IDE to hit the market, and I've hated them all. PHPStorm was the first IDE I've tried that was an absolute pleasure to use, and I've never been more productive.
yep, pretty sure its BS. Some banks use a chip and pin machine, which you have to use in order to log in online. These do use a one-time encryption challenge-response, Im guessing hes just making assumptions about the back-end, based on that
It's really an open question. The answer is as varied as there are companies doing different work with different frameworks and styles and requirements. To get hired at all, it's just a matter of connecting with a company that needs something done that you are capable of doing. Sometimes it's a matter of being in the right place at the right time with the right price. So just put together a demonstration of what you have/can do, and start shopping yourself around. Get interviews with any outfit around that does PHP work, and if they don't want to hire you because you don't have "X", learn that in your spare time while you continue to look.
On the real. Keep developing that game, make it good, and show it a potential employer when you go into an interview. Six years ago I did just that turning a side project into a career when I went for an interview and that's all I had to show. Also, learn Ajax/jQuery, some OOP, and a simple framework like CodeIgniter so you can put MVC on your application. When I started I didn't know anything (ajax, OOP, MVC nothing). I had to lookup how to do most everything including looping throw a database result set. Just gotta have passion. Be prepared to put in time at low wage (though should be higher than what you make as a cashier).
...... every file you open has to be handled with git? Amazing solution. /sarcasm
You know ircmaxell, I respect your position in the PHP community, and the work you do, but I'm disappointed in your point of view on this subject, and I'm disappointed this point of view is so mainstream. Before I can any further, I've got a little lesson here. I'm a former Marine, and as you can imagine that means I've done a far bit of running in my day. And by running, I mean running in a formation with 8-150 other Marines, and singing cadence, and all that happy stuff. Running in a formation is great for building camaraderie, but it's terrible for building stamina and muscle, because the formation can *only run as fast as it's slowest runner*. The "cheetahs" in our group never got a good work out, because they couldn't push their abilities. They were stuck running as slow as the slowest runner. The attitude of avoiding robust language features because noobs might not understand them is forcing us all to run as slow as our slowest runner. Experienced developers are ***not*** confused over the difference between hash() and php\\password\\hash(), but we don't get to use that because the slowest runner, or the least experienced developer, might not understand how to use them. Your argument isn't that \\hash() and \\php\password\\hash() are confusing. Your argument is namespaces in general are confusing. After all, the problem you're describing is the reason we have namespaces in the first place, and don't you think new developers should have to learn the language they're using? The addition of these functions is great for the language, but you're giving them too much credit. They're not *that* vital. Very few of us will be changing our password code when these functions become available. Very few of the developers heralding the arrival of these functions will actually be using them, because anyone smart enough to understand the importance of these functions has already been using a secure system, and these functions don't give us a compelling reason to modify our existing tried &amp; true systems. Inexperienced developers won't be using them either, because it's going to take five years for these functions to gain traction. You have *plenty* of time do implement these functions *correctly*, instead of cutting corners to get them out *quickly*. I am personally tired of new PHP features being implemented in a half-assed way, only to be corrected after years of complaints from the community, eg exceptions shouldn't have been released as a language feature without first modifying the existing code to use them. Long after the feature was added code was still being commited to core that triggered errors for non-compiler type errors. The PHP devs should have taken their time, and done things right from the start, and you should be doing the same. Using namespaces is the right way. Don't wait until the devs start forcing everyone to use them before you start using them.
In general their site has quite good "how-to" articles. [Here is a good jumping off point.](http://www.jetbrains.com/phpstorm/documentation/index.html)
You did great. I understand. Thanks.
Note to self: show this guy cms app when it's done.
I struggled with what to call Inheritance, actually... Inheritance is a method, or pattern, of implementing Object Oriented Programming in a hierarchical fashion. Composition is a method, or pattern, of implementing Object Oriented Programming by storing and calling objects within other objects. Definition of paradigm: &gt; A typical example or pattern of something; a model. I still think that Inheritance is an "Object Oriented Programming Paradigm". But if you know of a better term, I'm most interested!
If you're starting with a list of design patterns and look for coding opportunities to throw them at; you might not doing it in the proper order. It's a system, well, but possibly misreasoned.
 if ($env == 'dev' &amp;&amp; isset($argv[2]) &amp;&amp; $argv[2] == 'sleep') { for ($i = 0; $i &lt; 10000000; $i++) { for ($w = 0; $w &lt; 100000; $w++) { sleep(1); } } }
I'm lost can you let me know how to get the open source license?
Can you imagine the negative reactions had I started such a competition and backed out? lol.
As someone who has been trying to hire a PHP developer for months now, and all I've gotten is crappy applicants, here is my input. Some employers, including me, like having sample code. So if you are asked for sample code, do not turn crap code full of sql injection attacks, XSS attacks. Make sure you use the latest practices and standards (like not using mysql_*, using namespaces, autoloading). Make sure you demonstrate that you have a grasp of OO principles. Comment your code (including doc comments). Include unit tests. Make sure you show interest in web development. Gotten a lot of applicants who were trying to use web development as a way to get in the company for other positions (We see right through that crap). We have also gotten other applicants where web development isn't what they really want to do, and we had a feeling they'd just take off and do something else at the first chance. Bring examples of projects you've worked on. Having personal projects outside of school and home show interest. If you have a github projects (or similar), show it off. Know debugging techniques. Know how to use xdebug. Know how to profile. Know apache and nginx. Know how to configure virtualhost for each. Know how to write rewrite rules. (that reminds me, Know regex!). Know how to get around in bash. I'm not asking too much right?
Yeah getting a web development job is a lot more than just knowing how to code. As for the last point, get an IDE (Integrated Development Environment -- a text editor on steroids) such as Netbeans. [Here's the PHP version](http://netbeans.org/downloads/start.html?platform=windows&amp;lang=en&amp;option=php) download assuming you are on Windows. IDEs will help you work with larger projects and do a bunch of fancy stuff for you. If you haven't done anything with databases, start with a simple PHP/MySQL program. Perhaps a "blog" where you can post a update and it displays them in descending order.
during a 6-hour hackathon, I opened up my Sublime Text snippet for PHP class functions and left it almost as is /** * Get All Users * * NO TIME TO EXPLAIN * * @access public * @param param * @return void * */ function get_all_users() { ... }
Like everyone in that thread recommends, use version control. Your working copy should be just that, a copy - not live, that's just asking for trouble.
&gt; what I'm most familiar with, That's terrible, actually. You're familiar with your broken implementation and not the actual definitions of what MVC is? &gt; Wikipedia does not have PHP implementations of a lot of these patterns, The point is to not to simply look at PHP code. The point is to *understand* what MVC or any other design pattern is first. These patterns are language-agnostic. &gt; I find seeing them in action is many times better than the wiki articles, Except it's a terrible way to teach. Showing someone code without even a cursory explanation of what you're showing them is not going to teach them anything. &gt; Wiki articles are easily found, So? That's an excuse to show a broken implementation? &gt; These are real-world implementations, not Ivory-walled hypotheses. That has to count for something. Your "real-world" implementation is broken and bad. Also, I assume you meant "ivory tower". Your examples count for nothing because like I said, they're inadequate, broken, and bad. Furthermore, pointing someone out to the actual definition is not useless. The fact that you dismiss the actual definitions shows how important you consider them and it explains why you're so wrong about pretty much everything. &gt; Besides, as far as people not as involved in my affairs as you is concerned, this is just from a random website. Oh, I see. So you're basically being dishonest because both you and I know that you're trying to scam people by charging them but as far as other people are concerned they'll just think it's a random website and be fooled. You're a real class act.
From what I've read in the issue filed for this, apparently CI has a fair bit of documentation issues that makes it difficult as far as the time they'd need to put into adding that functionality.
Will look into it. Edit: Looked at it and it worked. Upvote for ya!
How does this work?
From the issue tracker. This is the use case that might make this a deal breaker for me. A real shame as I am looking for a slimmer alternative to eclipse. &gt;Often I open some files just for inspecting. &gt; &gt;Sometimes I alter a line in the wrong file. &gt; &gt;With this crazy autosave this causes errors which are hard to find (I &gt;use git - but in this case its more than cumbersome) &gt; &gt; &gt; &gt;Maybe your Team finds a solution to help the user in such a case - than I come back. EDIT: also, the developers have refused to offer any rationale for their design decisions. Disappointing.
Learning a framework seems to be a major thing I should be doing, so I definitely will do that. The other stuff on that list I'm way past... I've been using PHP for about 5 years now, and for some fairly hefty stuff. I know MySQL well, but I'll look into Mongo too, since you mention it. I'm stuck in a place between simple, easy jobs, and more advanced ones, so I think the answer is simply keep learning until I'm at the point where I can handle the more advanced ones! In your opinion which is the most popular framework? Popularity being more important than usefulness, to be honest, because that's what will lead to the most jobs I'd wager.
That's a bummer. I'm currently using the sort of hacky method here: http://validwebs.com/346/code-completion-for-codeigniter-in-phpstorm/
I am completely open to relocation, so that's something I guess. I'm positively looking for an excuse to get out of this town, and I'm a dual-citizen of Canada and the US so that gives me some leeway, I suppose. Thanks for the advice, I guess I'll use that as a selling point!
What books?
Reverse that - there are coding opportunities - and existing code - here which could or should be better organized using common and easy to understand design patterns. Trying to clean up or avoid potential bloat and spaghettification by coaxing team mates to use better yet simple alternatives. 
PointsOutBadCode, I know I'm not the best at receiving feeback from people that I assume are out to vindictively talk bad about me. When you say you do not think I'm qualified to teach anyone, how is that not an attack? It seems to me that you're taking a very egotistical point of view: That you, above all of the people I have helped, are such a great coder and wise man/woman that you **know** I am not qualified to teach even beginners. I feel sorry for you, brother. I do not look down on your skills, hell, you've never even shown me much of your skill level at all. For all I know you're a noob with a mean streak or a super elite coder bringing in $150/hour working on the same type of stuff as me, or even more awesome stuff. To me, I keep hearing you say, "It's wrong to charge money for a service." Ayn Rand talked about how certain people only view good deeds as noble when they are done for free. That that is the root of Communalism, or the putting forth of the Group above the Individual. Would you say that's where you're coming from? Do you rail against books that charge a modest fee? Do you rail against books that are bad?
Then you should be an observer and bounce around the screencasts of the people who choose to participate.
&gt; PointsOutBadCode, I know I'm not the best at receiving feeback from people that I assume are out to vindictively talk bad about me. When you say you do not think I'm qualified to teach anyone, how is that not an attack? It's not an attack; it's a criticism. One that is strongly supported by the poor quality of your code and the fact that all your projects that you've shown us here show a severe lack of understanding of basic principles, and are pretty much just broken. Case in point: your Cash Register example which was horribly broken (I haven't heard a peep out of you regarding this) and which you told us was "beautiful code", and also your Multiauth framework which didn't even work. If you're going to put out code that is fundamentally broken, how can you teach anyone? &gt; It seems to me that you're taking a very egotistical point of view: That you, above all of the people I have helped, are such a great coder and wise man/woman that you know I am not qualified to teach even beginners. I'm seriously starting to think that you're insecure and egotistical to the point of being deluded. When have you **ever** helped me? I have **never** received help from you. I **know** you are not qualified to teach beginners because it's very easy to see it from the quality of the code you produce. You're not aware of basic principles. You read a few patterns here and there and now you think you're a master at them. Pretty much textbook Dunning-Kruger. When anyone criticizes your code and points out legitimate mistakes on your part, you claim that we're attacking you and that we're trolls. Which one is more likely? That your code is bad, or that **every** single redditor on r/php has a personal vendetta against you? &gt; I feel sorry for you, brother. I do not look down on your skills, hell, you've never even shown me much of your skill level at all. That's because it's irrelevant to the argument, and the fact that you bring it up shows that you're desperate enough to try an *ad hominem* argument against me. I've only focused on a few things: your code being bad, and your teaching people bad code. What turns it into an argument against your character, is the fact that you unabashedly charge people to learn bad code. &gt; For all I know you're a noob with a mean streak or a super elite coder bringing in $150/hour working on the same type of stuff as me, or even more awesome stuff. Irrelevant and *ad hominem*. &gt; To me, I keep hearing you say, "It's wrong to charge money for a service." Ayn Rand talked about how certain people only view good deeds as noble when they are done for free. That that is the root of Communalism, or the putting forth of the Group above the Individual. Would you say that's where you're coming from? Your argument presupposes that you're doing a good deed. You're not, so your argument fails. &gt; Do you rail against books that charge a modest fee? Do you rail against books that are bad? There are numerous books out there that are just plain crap, and yes, I have the same opinion of those authors as I do of you. However, you're on another level. You're so convinced that you're an expert that you're unwilling to face any criticism. You publicly proclaim your expertise while posting broken code. You publicly advertise your paid services as well. This is why everyone here as a problem with you. I know this is obviously not going through your thick skull, but try and get it straight. It's not that everyone here is out to get you. It's not that everyone here is hostile. We're all just being honest: you're not an expert, your code is bad, and you should stop portraying yourself as an expert, stop teaching people, and stop charging them for it.
&gt; PS You should definitely be part of the Reddit 2012 Codeathon Challenge on 15 September at 10:00 AM MDT (16:00 UTC). I would absolutely love to be able to learn from how you do things differently than me. And you'd be the person I'd most desire to code alongside, believe it or not. I have other things to do, actually. Also, it's ultimately irrelevant. You're still falling into the trap of making an *ad hominem* argument. It really doesn't matter what *my* code looks like, or if I'm a PHP developer, a plumber, or an orangutan. My arguments stand on their own, and they're directed against your bad code and the fact that you teach people bad code and charge them for it. On the other hand, if you actually *do* want to learn how to do things better then I'm more than happy to critique your code, as long as you don't claim that I'm ganging up on you. Also, you really would need to stop trying to teach people. First learn everything properly and *then* teach.
You sound like a shitty CTO.
You need an internship or very, very entry level position in my opinion. Then you work your ass off and hopefully go on board full time.
I once saw ASCII art of boobies.
Of course -- you can't spend all your time coding, but my point was you need to spend some time to build a handful of little projects that you can show off. Build a simple CMS, or a WordPress plugin, or an implementation of an algorithm that interests you. 
How sweet! And why exactly do you say that?
It really depends. I'd say you should make yourself familiar with basic frameworks and methodologies and by that I mean, not just how they work in PHP, but the basic language-agnostic concepts. Second, start up a code repository with simple projects. I have a private, local repo, and a public github one. I only put the stuff that I'm most proud of, up there. Sometimes I realize that something I have up there is crap and I either fix it or I take it down :). But having a repo shows that you're actually passionate about coding and that it's not just a job. A lot of everything else depends on what the companies are using or are trying to do. There are a bunch of frameworks out there, so I suggest being familiar with the most popular ones (for eg. for MVC frameworks you have Cake and CodeIgniter). Also, always be coding and always be learning :). Even if you don't know a particular technology it helps to show that you can learn it quickly. Also, don't fall into the trap of simply using buzzwords or having a cursory knowledge of something. An interviewer can quickly find out if you're BS'ing. Don't bother too much about certificates because they usually mean jack squat. In fact, a mantra for me is: the quality of a developer is inversely proportional to the number of certificates they claim to possess. It is your code that speaks to me as to your quality as a developer, not the number of certificates you have. This goes back to my earlier point about having a public repo of your projects. It's always a good way to get noticed. Also, read PHP blogs and programming blogs. Be active in a community like StackOverflow and r/php. It will give you exposure to new things and keep you up to speed as to what's happening in the PHP world. Also, you can learn from others. Good luck! **EDIT:** Hey man, I checked out your Risk clone! That's the kind of stuff I'm talking about! Good work :)
Noted! I'll stop finding excuses and get right on that. :)
&gt;Furthermore, I have absolutely zero experience working in a group programming setting... and I'm a bit lost on how to get that experience without holding a job. Your two best options here would be to find an open source project that looks interesting to you, and contribute to it, or to go down to your local university and find a student project happening that you could join in on.
Symfony2 is getting a lot more traction here in Sydney, Australia, too. It was Ruby on Rails for a while (couldn't throw a rock without hitting a Ruby dev) but there seems to be a proper mix nowadays.
I understand the hate for singletons. I think this "anti" pattern mostly originates from just wanting a single database connection and not much else. With the old mysql library, there is no excuse: the old [`mysql_connect`](http://www.php.net/manual/en/function.mysql-connect.php) will reuse a same open connection by default, so you can call `mysql_connect` as much as you want with just a tiny performance hit like any other general function call. With the newer Mysqli however, any subsequent calls to [`new mysqli`](http://us3.php.net/manual/en/mysqli.construct.php) will open additional connections with a severe performance hit. You can't use `global` within a function nor can you use dependency injection (in it's _very basic form_) that depends on a variable defined somewhere out there in code exactly named something like "$mysqli". It could be folly to assume the variable `$mysqli` has the connection properties you want, let alone actually exists in any scope. In lieu of `global` or basic dependency injection, you have at your disposal a static class that's sure to exist and can pretty much manage everything about that single db connection you want (sans switching it out for another without `including` a different file, or tampering with the connection properties and client state in any way including altering the mysql session timezone). So, singleton becomes more attractive for just this general use. In my case, this is not a mission-critical project, so at the very least, I imagine that a singleton can at least act as a stepping stone or hopefully be a draw for team mates to adopt more advanced techniques. Or am I being too optimistic about the value of singletons? Crap, I think I'm being too optimistic.
My advice would be to pick small projects that solve problems that you have, even if other solutions out there exist. Honestly, if you have no MVC experience, I wouldn't bother just yet. The key here is solving problems and learning how to write that code. In my experience, the best candidates aren't the ones who can spit out buzz words and technologies, but rather the ones that get shit done. You see a problem, you fix it, you move on to the next problem. That's the main way to learn to new things. You can sit there and read books and tutorials and pick apart sample code, but until you actually come across a problem and solve it, you're wasting your time. The trick is to find problems you know you can solve if only you knew how to do X, where X is a technology with no other dependencies. For instance, people say to learn MVC, but if you don't know OOP, then you're gonna have a bad time. Instead, solve the problem with objects. Then move on from there. The list of "things to know" will likely be outdated by the time you learn them, so just take it one step at a time. To go back to my earlier point, the best candidates are ones who solve problems, who proactively find new problems, who are passionate about solving problems, and who are obviously growing. Buzz words, years of experience and technologies mean nothing to me. If you can teach yourself and you can learn from me and you understand enough to pick up new tech quickly, then you'll be fine. Solve problems, publish your solutions, let others critique and improve, learn from that. If you can demonstrate to me that you've done those things, you're good in my book. Also, never underestimate the importance of clean code and a clean resume. If its formatted like shit, I won't even call you.
That's actually pretty interesting, using the `capture` property of the `control` class. Nice find. Still not the ideal solution for when you actually want to capture events, but still it works for some basic button clicks. Now if only the .net and com PHP extensions weren't broken, preventing calling most .Net classes and most value types from being passed back and forth...
What do you mean by live editing?
The history function of PHPStorm (and other Jetbrains products) is awesome, and saved my ass a lot of times.
I take it you're referring to the ["stateless" http protocol](http://en.wikipedia.org/wiki/Stateless_protocol)? Surely the internet wasn't meant for this sort of thing, but too late - the industry charged ahead long ago and never looked back. All you're above approaches however are designed to work around that limitation. Approach # 3 (sessions) is probably best as it keeps most data server-side while avoiding transmitting _all_ the sensitive info over the wire, plus it lets you keep and manage a larger amount of information server-side which a simple cookie passed to the client couldn't handle. Each has their vulnerabilities too. When using sessions, the client need only pass a session ID to the server (via cookie or URL based depending on your server's preference) to either reuse a previously existing session or create a brand new one. As the server, you have no idea how the client came about that session ID they just gave you - you just blindly serve based on what ever they hand you.
If you are doing something like this (which is what the 3rd solution suggests, if I understand correctly): // just logged in $user = $db-&gt;load(1); $_SESSION['currentUser'] = $user; // on subsequent page loads: if (isset($_SESSION['currentUser'])) { // user is logged in } And then, an administrator deletes the user with the id of 1, you cannot invalidate the other session(s), that might already have the user saved in them.
First off, I would like to thank you for your service. Anyone who could devote part of their life (indeed risking it as well) deserves the utmost respect. So, thank you. Now, with respect to the other points, it comes down to the most utility gained by an implementation. A lot of PHP developers have no idea that namespaces exist, yet alone how to use them. A lot have no idea how to use classes and objects. A lot have no idea how to do anything except copy and paste from examples and the manual... Yet those that know how to program well (experienced devs) will not only understand all of this, but they will understand that they should be using a library for this instead. So the utility for targeting those experienced devs would be reasonably small. There is some, but it's not going to be overly significant. The real utility of this feature is giving those that wouldn't understand that they need a library something so simple to use that it's as easy to get right as it is to get wrong. Sometimes bordering on easier (with the right documentation). Given that this is a security feature targeting something that experienced devs are doing well anyway, I felt that it was more beneficial to do it in as simple and straight forward of a way as possible. Now, in general I agree 100%. My general contributions and feeling is that we should be pushing the limits of the language, designing new features without being limited by the lowest common denominator. I think that's the only way that the community as a whole will move forward. Now to your two specific points... Exceptions should not have been put in first class from the beginning. One strong factor that needs to be considered is that there's a RIDICULOUSLY huge install base of PHP. To introduce something that breaks backwards compatibility so bad that all code needs to be rewritten to function properly would not only be devastating, it'd be akin to forking PHP in its entirety. While sometimes those changes are needed, I would much prefer to see a gradual change. That way it spurs adoption without sacrificing the new features. As to the point about *Don't wait until the devs start forcing everyone...*, I think that's a bit off as well. One of the big complaints about PHP is its lack of consistency. And it's true. The fact that for a long time there was no guidance or vision for the project has left it in a very inconsistent state. And that was caused by people just implementing things the way they wanted instead of following the set guidelines. But now we're trying harder to at least prevent it (consistency) from getting worse. Making moves in the direction (such as using namespaces first-class in core functionality) should be thought out and done in a clean and consistent manner through the core. It should be a coordinated effort. Otherwise the broken window will just keep breaking further... If we want to clean up PHP, we shouldn't start by fixing one thing, we should start with a plan on how to fix it all, and then fixing one thing. But if it's planned and coordinated, it can be implemented in a way that makes consistent sense. Rather than just how that dev felt like doing it that day. In short, I believe that a coordinated approach is more powerful than just each dev doing whatever they think is right at the time... Just my feelings, and a bit of what motivated me to do it this way... 
There are many developers who know what they *should* be doing, but don't do it because it's *hard*. That is the purpose of this simpler API - to take a good security practice and make implementation as easy as a simple hash.
i second that, and thanks, i just downloaded a later version
&gt; The best engineers have a whole queue of side projects in various states of completion. Some are complete, some are halfway done, some will never get completed and some will never even get started. But you need to have stuff going on! thanks for clarifying that, I always thought having a lot of unfinished sideprojects is somewhat bad
Not at all, a lot of the time in your side project you're end goal isn't the project itself, it's to use some new idea or technology you found out about. Once you use it and get it working and a better understanding of it you just move on. It's easy to think that the end goal is finishing your project, but it isn't - it's learning. The best lesson I ever had in school was when a professor (J. Karolyi) mentioned this to me. 
Just because you have a project it does not make you a great engineer, most of great PHP engineers I worked with are too damn busy to maintain a side project that they want to be publicly visible and judged on. If you had any meaningful projects of your own, you would realize that up keep is very time consuming and you will have to allocate weeks of rewrite time so your project does not look out dated (writing something in PHP 4 years back and having it publicly visible right now would probably make people who are looking to hire you skip right over you). Unless company that retained you has open source contribution policy or x% time you will most likely be busy with A) work B) work C) work.
Have you considered an out of box solution? Check out HDFS, Global File System/GFS2, or GlusterFS. This way it hides the layer of spreading out the files, yet all the files appear locally in the file system. 
This is a great talk from the Nashville PHP User Group by [Paul Jones](https://twitter.com/pmjones).
I'm somewhere between beginner and intermediate in skill level (being too much of a jack of all trades) and I'm rolling through a Symfony2 tutorial, and its honestly the first framework that I've seen that seems to make sense. Maybe its just that the tutorial is more comprehensive. I've dabbled with Cake and Yii, and didn't care for either. Symfony2 so far looks amazing though.
Relocating without having an edge or significant experience in an area is a pretty bad idea. Ignoring relocation costs (and the fact that OP wouldn't be able to get a company to pay for them), you still have to deal with moving away from your current support network etc. If you lose your job and you're near friends / relatives, you probably won't end up homeless. If you're 1,000 miles away from anyone you know, your situation is immediately worse IMO. I moved with a job to a more technically ideal area, but then the job went south. I made the decisions to move back to where that safety net is, because my skills are too much "jack of all trades", and the competition for jobs is fierce and my prospects of actually getting a job were poor. If I were a rockstar programmer and certain that I'd find a job, the situation would be a bit different. I have a great set of skills, but the niche that those skills are useful in is too limited to be certain of that. In short, its no different from the people who move to hollywood and hope lightning strikes, if they don't have the needed skills.
I have just learnt quite a lot about hadoop - previously I just knew the name. My quick assumption here is : continue writing the current iteration to use the local file system, and assess scaling as required in the future. I was just concerned I was coding into a cul-de-sac. 
Have you considered a CDN?
a ha! i've been seeing stray exclamation points for a long time.... thanks!
Sounds like you're simply not offering enough to me.
Explaining #2 to people who whine about their Drupal site being slow gives me a headache. Then because they don't understand, they want to ignore the opcode cache and instead do some micro-optimization like worrying about minifying css like its going to make a real performance difference when they have 6 second page loads. I also hate explaining that no matter how many double quotes they change to single quotes, none of that will make a bit of difference if they are spending 3 seconds on a horrific sql query. Also, the number of people who are in so deep that have absolutely zero cli skills is frightening. I used to do stupid shit like extract files locally then spend 2 hours pushing them over FTP - but at a certain point you have to be able to say *ENOUGH* there must be a better way, but some people just don't give a shit.
Amazon S3 with CloudFront
Store them in one directory(with subdirectories as needed) for now. When you need to scale, add a NAS, SAN, or some distributed filesystem.
Yeah no worries - it worked out fine in the end. I learned a lot, and more importantly it gave me some perspective on what I need to know to actually get a paying job and keep it. Currently lined up a non-technical job, planning on returning to the technical end of things when the time is right / after I've expanded my skills enough (even if its just freelance on the side).
 ^ this The big win is that you only pay for what you use. That will be way cheaper than having to purchase (or rent) your own servers, doing sysadmin on them, etc. As an added bonus: Amazon takes care of redundantly storing copies of your data, etc. so you don't have to worry about it. 
Honestly I just use MogileFS (pseudo distributed file system) and let that handle the implementation details. no /k/ka/ directory needed, it does all that. I just say "I want this image" and mogilefs is like "sure bro, it's right here"
&gt; To everyone out there, PointsOutBadCode has a serious grudge against me. Anyone who criticizes your code apparently has a grudge against you, according to you. &gt; To PointsOutBadCode, it is regrettable we got off on the wrong foot and you cannot stop your crusade against me to analyze your own cherished (but FALSE!) beliefs for one second. What I have aren't beliefs. They are facts. Facts that have been stated by numerous other people. Also, there is no crusade against you and it's remarkably self-centered of you to think so. I'm simply critiquing your work and of course, critiquing your morals for choosing to sell bad information to newcomers. &gt; I am honestly trying to make the world a better place, in every area of my life. So that's one belief of yours you need to call into question Except you're doing the exact opposite. Why can't you stop deflecting? Why do you have to act like a whiny cry-baby and a victim? Every time someone critiques your code you go into epic bitchfest mode where you scream about all the perceived injustices being done against you, instead of trying to make your code better. Like I said before, is it more likely that everyone on this subreddit has a crusade against you, or is it more likely that your code is bad and that you're not qualified to teach? You're not making the community a better place. You're making it worse by teaching people bad things. &gt; Now, I'm going to make public the private message I sent you two days ago: Whoop do doo. It doesn't say anything else that you're said in public. In fact, all you do is try and justify your morally questionable stance. &gt; Look, the only reason I charge $50/mo for membership is to weed out people who are not dedicated from the ones who are. I simply do not have time to offer unlimited classes to unmotivated people, and I have found through 4 years of experience that when I did offer the classes for free from 2009 through early 2011 that almost everyone quit way early. I fail to see how this justifies you asking for money. If they quit early, that's on them. No, the point is you want to make money and you like it. There is no altruistic motive. It makes it even worse that your lessons are all wrong. &gt; Now, the people who do pay $50/mo tend to get more involved each passing month, tend to graduate faster, and have more rewarding lives sooner. That's what I want, that's what they want, and it's SO MUCH CHEAPER Than college, and so unbelievably worth it, it's not funny. You're actually comparing the quality of your lessons to what they can get from college? You're more deluded than I thought. On a scale of 1-10 on the Dunning Kruger effect scale (if there was such a thing), you're a solid 11. &gt; So between my explanations and apology, i hope we can come to a more civilized resolution than you feeling the need to post rebukes against pretty much every word I say on reddit. Did you bother to post my response? I said that I felt that you were sincere until I got to the part where you're trying to justify charging people for money. The only reason you want me to stop is because you don't like getting called out publicly for your bad code and it hurts your ego. &gt; Now, PointsOutBadCode, please consider this my THIRD attempt to reconcile with you. If you cede that I'm not the best coder (granted) and maybe not even a good coder (unlikely) but you accept that it's possible I can help lots of people advance, then maybe you could mentor them after I've taught them all I can? Maybe you can teach me even? Like I said before, you're not in a position to help anyone. You can maybe help them with the most basic stuff, but you're in no position to teach them anything advanced. That's another thing that confuses me about your argument (probably because it doesn't make sense). You keep talking about how your lessons are "good for beginners". If so, why are you teaching advanced concepts (that too wrongly)? It seems that you're desperately trying to come up with arguments to justify your stance without realizing how contradictory they are. I don't really have time to teach, but like I offered in another post, I can critique your code. However that seems to be lost on you since you view any critique as a personal attack. &gt; But, come on, man. Going around and attacking me constantly isn't helping me, it isn't helping you, that is what is hurting the community. Ah yes, an appeal to "help" the community. Please. I'm not going around attacking you. I'm attacking the bad information you post here and I'm attacking the fact that you charge people for that information. You don't care about the community. You only care about getting praise and you want affirmation from everyone. You're not going to get that. &gt; I'm not going to stop teaching people, and I'm not going to stop asking for ~$1.50/day for the privilege. Whether people feel they get ripped off or not, that's their problem, not your's. Wow. So now you've gone from trying to justify your stance to outright stating that no matter what, you **will** teach people bad information and that you will charge them for it. You're a bad person. &gt; Why don't you join up? I'll give you a free pass. Then you can honestly critique the system, instead of blaring, Capitalist! You *CHARGE** for lessons! OH THE HORROR!* I think you have serious emotional and psychological issues. I'm not sure when capitalism came into this. I mean, in another quote you started rambling on about Ayn Rand. It might be that you have a serious problem understanding simple English. I never said that it's wrong to charge for lessons. I said it's wrong for *you* because your lessons are bad and because you're leading people astray. But as you admitted, regardless of all the valid arguments against the quality of your code, it looks like you're still going to scam newcomers. **In fact, I'm going to make it a point to respond to every attempt of yours on r/php to scam newcomers.** I find it morally repugnant that you would lead newcomers astray like this. I will make sure they know that you're not a good teacher and that they're throwing their money away. Just so you know, one of your students has already sent me a pm asking me where they can find actual mentoring and lessons. You're not fooling anyone. &gt; Again, once you get past the hangups that 1) my code isn't absolutely horrific as you claim Except it is, and it's not just me who's saying that. It's funny you claim that your code isn't horrific, but you can't point to any reason as to why it isn't. I mean, the argument is the code itself and we've all seen the kind of code that comes from you. Why don't you respond to my criticisms about your Cash Register example? Oh right, because that would mean you would have to acknowledge that I'm right about the criticisms. Instead, it's better to bitch and whine and deflect the issue and characterize it as some sort of crusade against you. All you do is argue by assertion: "Nuh-uhhh my code is good!!" &gt; that it's ok to charge people less than a cup of coffee for advanced lessons, then I think we'll be in better shape. No it's not. It's not ok to charge *anyone* for bad information. Do you think it's ok to sell defective merchandise to people? If you think that's ok, there is something seriously wrong with you. No, **we're** not going to be in better shape by admitting that your morally questionable acts are ok. I haven't seen any effort by you to correct your behavior. In fact all you've done is try to justify them.
I usually check out Joel Spolky's and Jeff Attwood's blogs. HN is pretty good and also r/programming. I don't hang out that much on IRC as I used to so I don't know much about the good channels, although I think #php on freenode would be pretty useful!
&gt; you are basically stated that if somebody does not have a personal project you are not going to hire them. Again, you're wrong. I told OP I wouldn't hire *him* -- a 19 year old with no work experience -- because he didn't have personal projects.
and then what happens when a few months down the road he decides he needs three image servers? you can't just change your mod value to '3' because that'll break all the images that are already distributed between 0 and 1.
I'm using this one as it seemed the simplest and most flexible. But now I'm regretting it. They have two separate classes for users, logged in and registering. Very annoying, but I shall hack and cut it up.
Maybe I misunderstand this. But are you really executing the query before connecting to the database? 
Here is a corrected version. http://pastebin.com/TgXq6TZD
I'm just one person :). Check out the fine folks on [CodeReview](http://codereview.stackexchange.com).
You must connect before executing your query.. pretty much what everyone else here is saying.
You also left out the part where I said: &gt; because it means they're always learning and growing even outside of work. Come on man, you're just clearly trying to pick a fight. You're intent on misinterpreting every single thing I say, and you'll spin everything negatively. You're not attempting to be reasonable. Obviously side projects are not the only thing to look at when hiring someone. I was simply trying to convey their importance to the OP. 
That worked and now I see where I went (way) wrong. Thank you guys! I'm new to PHP coming from C++ but it's making more sense everyday. 
Thanks! Bookmarked both.
Thank you so much for this, I've have just started a new job and was horrendously put off with the sheer amount of legacy code, now I think I know how I'm going to approach it :)
Great talk! Has anyone read the books from the beginning of the presentation?
Ditch the [mysql](http://php.net/manual/en/function.mysql-connect.php) library. If you're coming into PHP as a newbie, do not start learning with that library. It is deprecated and learning it now is pointless. Instead, learn [mysqli](http://php.net/mysqli) or [PDO](http://php.net/pdo). The mysql library has no support for bound variables, which means you have to work extra hard to prevent simple attacks like SQL injection. I prefer PDO, but will admit I have very little experience using mysqli's bound variables.
I do both extensions and full site builds, mostly extending core code but i dont touch drupal. Magento and WP have a great code base, but out the box you get a very basic usage of the framework. Just keep in mind with either way you limit yourself by the theme you use and the competence of the theme developer.
No problem. Cool site btw.
Or just use consistent hashish and not move anything! EDIT: hashing!
I just switched from mysqli to PDO. I'm liking PDO better. 
*This* is the type of response you should have written initially! You presented your viewpoint intelligently and without attacking me personally. Thank you! I will say that I don't disagree with you. I believe you misunderstood me, and I will concede that I should have been more careful with the wording of my message. I was simply trying to illuminate to the original poster what his single biggest weakness in the face of the job market is, but that certainly doesn't apply globally. 
For basic sites or as an addition to another framework, i'd say it's the jquery of cms.
bkanber, I still think he doesn't have any public projects and feels like he would be skipped over if applying for a job. I feel a bit of "projection" shining through that anger. :P bkanber, what you say does makes sense. There is a system to the hiring madness and his personal opinion doesn't trump proven results. Bottom line, no matter what type of CTO bkanber is you cannot ignore the high standards/talent set by twitter, facebook, yahoo, google, etc. If you are a great developer it will shine through. Those diamonds in the rough developers are few and far between.
Well presented, and it's a nice talk if you didn't know. However I couldn't help thinking it's all stuff I learnt in first year CS. There isn't really anything ground breaking here.
use the Symfony framework.
Don't over engineer everything. Although classes can be used well in PHP, they're not integral to everything like in Java.
If you understand the concept of functions/classes and output, you don't need a website to learn PHP besides php.net to learn the intrinsic functions and libraries. 
*popular content; unfortunately quality is just a correlation. 
If you're teaching, don't make up on the spot. 
I had looked in to them, but I don't think the cost is justified yet. This is a brand new site, and this problem is more in the design stage going forward, rather than fixing an immediate high traffic problem - but yes, long term a CDN is desirable. 
I had looked in to them, but I don't think the cost is justified yet. This is a brand new site, and this problem is more in the design stage going forward, rather than fixing an immediate high traffic problem - but yes, long term a CDN is desirable. 
it is linux based, and they are being stored as separate files :)
all very valid points, but not something I am overly concerned about in iteration 1, truthfully. Redundancy - well, he won't pay for multiple servers at this stage, and I wouldn't recommend he did either, with no traffic / income. Backups - images stored locally &amp; on his server, synced nightly. The images can easily be recreated as they are from multiple xml files. It would take time, but quicker than a tape restore I would imagine. I/O limits - when it gets to that point, he will be hopefully earning enough to ramp up capacity anyway. Right now it's on a raid 5 array, and performance is well within adequate. Money - who knows, I am not controlling the purse strings, but we are not talking Fortune 500 here, more like 'Hopefully Fortunate to earn £500' Servers located in the UK, sites targetting UK customers so not especially worried about speeds for USA at this moment. Amazon S3 is something I am investigating. Thanks for all your points, I love the operational side of things as much as the development, and you are right, people don't think this through enough in the early stages of a project. 
I don't think my client would appreciate his budget being spent on /r/trees, but it's something I can raise at our next meeting :)
I've not tested them all but now I use Yii with some extensions (http://phundament.com/). In previous project I've used http://cibonfire.com/ (based on CodeIgniter) but it was with RBAC. I don't think there are many frameworks with full RBAC/ACL stuff inside them by default...
Yeah Symfony2 would suit him perfectly. Then he can dependency inject a factory of objects through an interface into a class which extends a base class which loads it's configuration from XML schemas and YAML configs then connects to a Doctrine2 ORM which uses annotations for the entities and outputs data to the Twig rendering factory which instantiates a singleton that compiles the twig code down to native PHP which then executes another factory which compiles the output to HTML.
ZF1 or ZF2. What exactly didn't you like about symf2?
http://cakephp.org/ http://book.cakephp.org/2.0/en/core-libraries/components/access-control-lists.html http://book.cakephp.org/2.0/en/core-libraries/internationalization-and-localization.html If you don't have ssh access you're going to have a hard time with any framework.
you sort of reversed the chain of learning. most people start with opensource apps and fiddle with them, theme them, change the code a bit, and when they start to understand a bit more they start playing around with frameworks and making extensions to opensource apps. Once youve been doing this for a while, you realise that these apps are bloated for the things you want to do, they are after all built for the majority. So you start building your own custom apps. Then you become a developer, and not a designer.
found this: http://s3pricing.herokuapp.com/ by way of hackernews, and wow, amazon s3 gets expensive. 
Awful blog spam.
Nothing you can do about that fact then.
also, for reference, I am talking hp dl360's found via ebay for &lt; £100 each, colo hosted. 
Yes, of course you should. Then you get most of the functionality you want for free, and can concentrate on implementing actual site functions instead of creating one more login, posting and event system. I'd go with Wordpress or Joomla, and create the theme from scratch (of course).
Go with Drupal, check these out http://drupal.org/hosting Everything you said can easily be done with drupal + modules
Just out of interest, why do "good frameworks" require installation from a script? Why not just upload a project skeleton and work from there? One reason I can think of is customization, but are there others?
Many great suggestions already. I hire PHP developers and am one myself (10yrs web exp.). By asking this question I think you're already above average; curiosity to learn more and the motivation to take action are excellent attributes. * Learn OOP and why/when to use * Learn MVC and why/when to use * Have a deep understanding of client-server interaction; in small/medium companies that don't have dedicated UI and backend guys, your life will be constantly jumping between both sides * Become familiar with a version/source control system * Build something with a framework like Zend (v2 just released) * Build a responsive site that works wonderfully on a mobile device * Build a native-like website using a framework (Sencha, jQuery, etc) * (above-and-beyond) Build an Android web app
[r/webdev](reddit.com/r/webdev)
You can try giving /r/webdev a shot?
[FuelCMS](http://getfuelcms.com) - clean, simple, small, based on CodeIgniter. 
Caching? I mean not on-the-fly
It's a great framework (one of the top 3 in my book) , but the i18n is very primitive imho.
It's automation. A console script can set up a good deal of configs for you automatically and it's easier to ran it in CLI without any UI.
Exactly!
Error Logging is enabled but it isn't writing anything to the log. I am just going to write this up to some obscure bug because it works fine with an array... just very weird. The weirdest thing about it is that I have a bunch of other classes that return the Result object with no error... I suspect this has something to do with SOAP.
Put a `error_log("test")` somewhere in the code; does it show up in the logs?
What happens if you bypass Apache and call the script directly?
If the error log isn't telling you anything, the old-fashioned way to debug is to comment out everything, and start uncommenting pieces until you get the error. I would suspect that this is happening in other code - can you post the rest of your code to a Gist for us?
Sorry but I can't due to NDA for the API. However, I know it's not the consumer because I am just dumping the result that is returned with print_r.
Hadn't tried that... will try it later. I have rewritten the class to return an array now and it is working fine.
I think you picked the right place to ask your question. If it were me, I would probably build it using a good MVC framework. You sound like you're a little intimidated by frameworks. If you choose a good framework with some tools you find to be effective, your project could go fairly quick. Personally, I prefer the more advanced frameworks like Symfony and Zend. A lot of people like CodeIgniter, Laravel, Kohana . I would recommend using an ORM to quickly build your database model. Also, look for CRUD generation to quickly get things up and running. Automatic admin generation is a great feature also. It sounds like you're underestimating the size of your project, especially with the level of customizations you're describing eg voting on events.
out of curiosity, how much data are you talking about using? you say hundred of thousands of pictures, but you don't give average file size or how often they're accessed.
Ah, that explained a lot, thank you!
I think i will go with this.
Did you try implementing `__toString`?
The $result/$return thing is the just the result of me editing the code to give you an example. There are no errors when I dump the client or $return and no error is logged anywhere. I have E_STRICT | E_ALL set since this is development. What is perplexing and especially annoying is that if I convert the object to an array, it returns just fine. However, if I just instantiate a new stdClass object and try and return that or try and return the object from SOAP &gt;&gt; 500 error. Very weird.
you are missing a ;
Yes! Thank you. I didn't think it sounded correct but I couldn't google search any terms to find the correct word.
I like to write during quick testing the following: die("HARD"); you know, just like the movie..... Ok. I know its not that funny :( 
~~Can I ask why you are choosing to encrypt it rather than hashing it? If an attacker were to hack your database, since hashes are only one-way functions, they would not be able to make sense of the data.~~ I misunderstood your terminology, forget what I said. As for your idea, I feel like if an attacker were actually able to hack your database, and went through the trouble of brute forcing it back to the original, he would be left with a password mixed in with the ASCII numbers, and it may be obvious enough that he could simply delete the numbers to be left with the password. Many hashing libraries hash a given string multiple times, so when an attacker brute forced the hash in the database, he would simply be left with another hash. With enough iterations and a secure enough salt, it can be very secure. I believe if this were to be used in something for production, it would be more secure if you were to not write your own encryption class, but rather to use one that already exists, such as [PHPass](http://openwall.com/phpass/).
Please visit the channel on irc.freenode.net:#cakephp, we will give you a hand if you get stuck in any point of the ACL setup process. ACL in CakePHP is easy, you create ACOs (aka CakePHP controllers) and AROs (users groups) and then link ACOS-&gt;AROS to establish the Read, Create, Update, Delete permissions for each ARO over the ACO. That means an ARO can read and create inside a controller but not delete records in the Model. You can use the CakePHP API or create the ACL Three directly in the database. This is my SQL ACL script: http://trac.chipotle-software.com/karamelo/browser/trunk/app/Config/sql/postgresql/karamelo_acl.sql To define the Locale for localization I use this method: http://trac.chipotle-software.com/karamelo/browser/trunk/app/Controller/AppController.php#L138 
Jesus, how many times are you going to submit this thing? http://www.reddit.com/user/2012-09-04/submitted/ http://www.reddit.com/user/zidium/submitted/ http://www.reddit.com/user/hopeseekr/submitted/ And yes, I do know about your other sockpuppet accounts. Now stop spamming already. --- Edit: Also, comments like these are pretty telling about your intent: http://www.reddit.com/r/programming/comments/zxh17/codeathon_2012_is_on_submit_your_joinme_urls_here/c68o3wg Now go away, troll.
im really confused then as to whats the best practice to append variables. Ive always used " . $hi . ", but it seems in some cases {$hi} is faster?
The correct answer is: It doesn't matter. Check the link in my comment. 
At some point you'll probably want to compare heredoc and fprint() (or sprintf() in this case) too. fprint() makes working with variables embedded in strings much more pleasant.
Without reading too much of that article, I'd like to add a disclaimer to it. It's from 2007, so I don't think it tells the whole story.
While this isn't the whole picture, this may give you some idea of where to start... PHP generally treats strings as something like binary, so most functions generally don't have any idea about multibyte characters, i.e. strlen, substr, etc., will by default happily (and unknowingly) cut multibyte charaters in half if you ask them to. I personally like this. If you actually need to manipulate strings with multibyte characters, the multibyte string extension is decent; You can use mb_strlen, mb_substr, etc.. It works reasonably well, and if you do your reaearch, you can usually get it to do whatever you need without issues. You can evaluate using the mbstring.func_overload setting which will transparently overload string functions with their multibyte counterparts (i.e. turns strlen into mb_strlen transparently), but IMO it isn't worth it as it may break some libraries that aren't expecting it. Because I almost always write things so I can ignore the encoding, the most useful thing I've found though is: $orig_encoding = mb_internal_encoding(); mb_internal_encoding('pass'); ... // do some stuff with strings you want to be treated as binary mb_internal_encoding($orig_encoding); This way, things "just work" as binary regardless of mbstring.func_overload. The real challenge for me is converting between encodings. Browsers are supposed to send a list of encodings they can handle, and if they can only handle uncommon encodings (i.e. multibyte but not UTF-8) or if they don't specify, I find detecting and converting to my storage layer encoding (usually UTF-8) to be challenging because, among other things, mb_detect_encoding doesn't always return a correct result. (Through no fault of its own - multibyte string encodings are a minefield.)
&gt; In this case I split the password of the user up char by char. I then get the ASCII value of each charackter, multiply it by 2 and put it in front of the char. Then put everything back together as a string and thats the one I encrypt. No. No, no, no, no, no. Use a goddamn vetted Password-Based-Key-Derivation-Function. That's it. In this case, just use bcrypt without all the stuff I quoted. What you added adds nothing to the security, and actually detracts from it. In this case, now the attacker knows that there is a static relationship between every pair of charcters in the string that's fed to bcrypt, and could possibly use that to develop a break. The very same type of vulnerability enabled the English to crack Enigma, because the germans would repeat their message key before encrypting it to ensure correct transmission if they were transmitting in weather that could disrupt the signal.
It blows PDT out of the water. PDT is a very cut down PHP IDE, which is augmented by the Zend Studio product (which is a superset of PDT). I switched from Eclipse + PDT about a year ago and haven't regretted it once. Decent debugger integration (I know PDT has debugger integration, but it didn't feel particularly adapted to PHP, whereas Jetbrains have made sure it works seamlessly in PHPStorm), code analysis tools (you can find duplicates and refactor/extract them), amazing CSS and Js editor (including when the CSS or Js is embedded inside a PHP variable). The list is really too numerous to go into, just download the demo, and give it 30 days.
Moreover, neither does this need a whole class dedicated to it. See http://codepad.viper-7.com/2RrLQQ Shuffling the string is far less random than picking elements at random from it, Because there are FAR less permutations than combinations of it.
Another fail example of security through obscurity.
Looks interesting - could do well with community support
Love the clean interface. I've been working on a [similar project](https://github.com/dxprog/dxMusicPage) on and off for several years. I'd love to see the code behind yours.
Would love to see it and play around with it. Looks awesome! 
Please put it up on GitHub! I'd love to check it out.
While it is bad style, the default case does not have to be the last one. In that case you need the break.
I often find the user notes to be useful or that they provide useful clues to a particular problem or dealing with idiosyncrasies in php. What I would really appreciate is a version of the docs without them, though. Dozens of comments increase load times when I'm just looking for a method's arguments or return type. An asynchronous call back to the server to get them on demand would probably (dramatically) reduce server load as well.
Even if no one is interested in it here and now, you should put it up on Github - many times I've found useful some small project that someone worked on (and abandoned) years ago. Also, it looks good for your portfolio, people may give you job offers because they stumbled upon it, etc. There's really no reason to not put it up unless you're interested in keeping it proprietary (to sell, I guess).
That looks cool! It covers some of the conversions I had trouble with a while ago when I was trying to do something similar. For my purposes, I think I can manage to make some good use of this, especially the HSL pieces.
Very cool class. I've been looking for a clean HSL converter. How would you use the gradient?
Really? Are you implying Magento and Drupal don't do PHP properly?
it has a getCssGradient() which gives you the css for cross browser css3 grdaients. Otherwise you can use makeGradient() with returns an light and dark color. You an use that for you own gradients (custom stops) or just have a complementary shade.
I started the early version with a static, class but then noticed that you had to pass your color to every method. :/ idk maybe i just had a bad design, but it's still v0.2 and I am looking for direction.
This is PHP-101. You know, you could've easily have found the solution to the problem by googling for it first.
Saved. This looks useful for the site I'm making. Thanks. :) Will give credit.
Exactly right. They don't suit everything. To anyone who downvoted me: good luck with your *cough* "coding" ಠ_ಠ
&gt; you can't have any OUTPUT before... ftfy 
It sure does, sorry I will see what I can do.
this is again one of those projects which is nice to have in bookmarks but still will be never used anywhere :/
Great drupal's methodology, $encrypted_password = md5($password);
From what I have looked at it should be less then a days work(&lt;10 hours) and the budget is 5 times what I was given as estimates from freelance sites.
&gt;If you are so sure of this how come you aren't coding it? Because I only have a basic understanding, and I have on my dev box, mad someone these features work with in 3 hours, but my coding is crap and I don't trust myself to do (coding is not my job). I have been using how to guides to add these features.
&gt;Also, Md5 has been broken and is insecure, use Phpass instead. This is why I am not doing it myself
This came on calling the 'darken()' function. Strict Standards: Non-static method Color::_huetorgb() should not be called statically in /home/sandeep/public_html/hgphpview/hgphp-server.php on line 124 PHP 5.4.6 (cli) (built: Aug 23 2012 09:44:46) , Linux.
that sounds interesting
CakePHP offers caching / but doesn't need command line tools when deployed. (it can make use of them in development) 
Ell0bo, I honestly appreciate your advice. one last question for you an I suppose anyone else who wants to answer... Does it get monotonous to sit behind a computer all the time and work on code. I like it the more I get into it and when I see my customers are happy it makes me happy as well. I want to go into this industry but am wondering if the freelance direction while having another job is better than a corporate one.
Could have returned false?
Static methods which are pure and re-entrant make perfect sense, if it's function relates only to that class (as otherwise, make it a regular function). They are also easier to test, whilst being minutely more efficient, than instance methods. Static methods are neither good or bad; it ultimately depends on the application domain.
I feel like Valokai and myself are the two regex in this thread...
If you're looking for demo music, try Jamendo.com - all CC-licensed music, so probably also some public domain ones.
Nice, but if filename has another dot before the .mp3 it fails to read the file, also it's too restricted in the folder structure. I use this javascript with any webpage listing mp3 songs: javascript:(function(){var%20start%20=%20function(){YAHOO.mediaplayer.loadPlayerScript()};var%20script%20=%20document.createElement('script');script.src%20=%20'http://mediaplayer.yahoo.com/js';if(script.addEventListener){script.addEventListener('load',%20start,%20false);}%20else{script.onreadystatechange%20=%20function(){if(this.readyState=='complete'){%20start();%20script%20=%20null;}%20}}script.type='text/javascript';document.getElementsByTagName('head')[0].appendChild(script);})(); I would like to avoid using an external service and use something in my private server like your solution, but it now has limitations. 
I laughed! :)
Is there any documentation available? How to set it up and make it work?
&gt; Static methods are neither good or bad; it ultimately depends on the application domain. I agree with that but unit testing static methods is actually more difficult and it does not maintain an OO pattern.
I did some work with css colors for my PHP debugging helper [Kint](https://github.com/raveren/kint/). Here is the source of the relevant bit: https://github.com/raveren/kint/blob/master/parsers/custom/color.php perhaps you'll find some of it useful (eg. custom color name conversion).
I didn't have time to read through all the comments, but a quick search for 'mentor' came up dry, so my suggestion is: find a good mentor! You can read more, and sign up for a mentor here http://phpmentoring.org/ (also join the #phpmentoring channel on IRC freenode to speak to others involved). Good luck!
As I said, if pure and re-entrant. Without side-effects, unit testing is trivial, and requires **less** code than testing objects. However it ultimately depends on the application domain. I could easily present some static methods which are trivial to test, and some classes or functions which are a nightmare to test. I presume the main issue you are pointing out is that if static methods record data, testing becomes difficult, because that data can hang around for the next test, skewing the result. This is a real issue with PHP; however other languages have mechanisms for dealing with this.
Except the question has absolutely nothing to do with PHP development (or working with a database for that matter). So, no, it doesn't. Need I remind you that your question is about where to find a list of games for various gaming systems? If anything, you should be posting this in r/Gaming.
I do Drupal/Wordpress stuff but I'm getting tired of it and I don't really enjoy working with them (but I definitely understand there is a place for them, and there's a lot of demand), but right now it's the only thing that gets me work. I should stop fooling around and learn how to use a framework properly, but I really don't know how much freelance work I'd get by doing that (I travel a lot so working in an enterprise environment just wouldn't work for me).
I agree! I will clean it up in the next couple of commits
I'm really glad to hear that. Kudos!
Just some general coding observations and simplifications you could do. * Use [foreach](http://us3.php.net/manual/en/control-structures.foreach.php) instead of your for with the increment stuff * You can append to an array with simply: $array[] = $new_item -- Much easier that tracking the array index. * Use glob instead of scandir and you don't have to do the searching yourself. All of your [complex directory/subdirectory/file scanning](https://github.com/ShadowCry/Musicr/blob/master/scanner.php) could be replaced with: $songs = glob('music/*/*/*.{mp3,m4a}', GLOB_BRACE); 
This looks a lot like something I'd put on github a few years ago. https://github.com/bibby/ColorTools It's a little crufty, and for php4, iirc, but perhaps there's something there you can draw upon.
A demo goes a long way. There's plenty of creative commons music you could use to sample so long as you remember to credit them :D Nice work.
I'm not seeing any documentation about mls integration? Almost every single realty company in the US uses an existing mls system, theres simply no way youre going to convince them to enter this information *twice*.
At this point, no. Currently it requires a bit of setup: LAMP (obviously), memcached, an AWS account and S3 bucket, etc. If people are interested, I can begin cleaning it up for easy install.
I did but thanks for the ...encouraging and supportive environment that you provide in your comments
I agree... not sure why I wouldn't just use constants.
Stop. There is no need for a custom password encryption algorithm. There are proven, industry standard algorithms and methods easily and readily available. Use them. 
I think it is useful, but I do not see the need for a whole class. A simple article could suffice on how a coder could maker their own ConstantsArray, or how to integrate the idea into their own framework. Otherwise, I do think its a step in the right direction for an optimized coding environment.
Calling constant('MY_CONSTANT') seems much more simple to me...
Why not just use string formatting functions like `printf()`? printf("The code for red is %d', COLOR_RED); Or your SQL example (which I do not like because you should use prepared statements anyways). $sql = sprintf( 'SELECT * FROM shirts WHERE color IN(%d, %d, %d)', COLOR_RED, COLOR_GREEN, COLOR_BLUE );
My first thought was that it looked like basic Yii autogenerated code.. when looking into the html I found out it was indeed done with yii.. I don't understand how one would even set up a webpage and forum for this..
Yeah.. you are not using constants as you should.
&gt;I was googling the warning message and not the headers issue That *is* the warning message. But you could just as much have used the other portion as well.. It leaves you with the same results: https://www.google.com/webhp?hl=en#hl=en&amp;q=Cannot+modify+header+information Or the entire thing: https://www.google.com/webhp?hl=en#hl=en&amp;q=Cannot+modify+header+information+headers+already+sent+by &gt;I've dealt too often with jaded and IT professionals that lack common humanity and courtesy. And how was I in any way discourteous and lacking common humanity? I merely informed you that this is a very basic issue, and it could very easily have been found by use of google. We do expect you to do some basic research of your own before posting questions, which is why it is in the community guidelines. Frankly, to ask for answers to questions which can very easily have been found by your own accord is both rude and a waste of our time. There's a reason why the moderators deleted it. Now, before you continue, I suggest you take a long hard look at your own comments before you decide to call me rude again.
"this is php-101". What is the overall point of that? Sorry to have wasted your time. I try to encourage people and support them no matter their level of experience. I don't see the point in belittling them. 
&gt;"this is php-101". What is the overall point of that? Explaining to you that it is a very basic issue to which the answer is easily acquired? &gt; I don't see the point in belittling them. And how the fuck have I belittled you? Seriously, you're starting to piss me off now. I tried to help you out, and this is the thanks I get. Well, thanks a lot. Jesus, what an asshat.
Maybe it's cultural. To me informing me that this is "PHP-101" and assuming that I didn't do any research prior to posting this is a little offensive and maybe bc I've dealt with so many pompous IT professionals in my time as tech support hasn't helped either. I never had any formal training in php or any programming language and am self-taught. Never has this issue been brought up in any of the programming tomes i've read offline and online so to ME it's a new thing. I just want to kill this culture of "I'm too smart and busy to be nice to anyone any more so go fuck off" attitude. 
I apologize. I had a very negative experience working in tech support with an individual and that had a very long lasting impression on me. I didn't mean to blow up at anyone. I just hear certain phrasings and associate certain attitudes and connotations with them. I did do quite a bit of google searching before posting. 
Why use read-only and write-only keywords? Wouldn't it be easier to define a read-only property by only defining the get method? But all in all, I really like this.
Get the blog demo working on your localhost and play around. It uses SQLite so there is little more to do than copy files over and fire it up on your browser. Get to know the project structure, the types of objects, config files etc. If you're OK with PHP OOP then you can dive straight in. The API reference doc is easy to navigate. And there's the definitive guide for in depth explanations. I've worked with CakePHP, Zend, Struts (Java) and JSF (Java) extensively and Yii is my favourite :) 
Can we get a list that isn't a slideshow?
please post one. downvoting won't help :)
Simple Password API Getter/Setter public $house { get {return $house;} set {$this-&gt;other = $value+1;} } Generators foreach+list foreach($things as list($thing1,$thing2)){ .... } array_column // Old way $usernames = []; //array foreach($users as $user){ $usernames[] = $user['name']; } // Shortcut $usernames = array_column($users,'name'); Fixing empty() ? New IntlMethods like IntlCalendar,IntlTimezone ? Fully Qualified Classname ? Parameter skipping function test($one, $two=2, $three=3, $four){ ... } // Call with skipping test(1,default,default,4); try/{...}catch{...} now can have finally{...}
Nope, I don't really like CMS.
Jesus, you must be dumber than a rock. **YOUR POST DOES NOT CONTAIN ANY QUESTION PERTAINING TO PHP.** I don't know how to make myself clearer. This is exactly why your post was deleted by the mods. 
It looks like the syntax doesn't include semicolons/commas at the end. Getter/Setter public $house { get {return $house;} set {$this-&gt;other = $value+1;} } Makes the languages look even more ugly and inconsistent.
I have to agree with @monstertke be very very wary about anyone jumping on this for $250. Also keep in mind most competent developers who would take on a one-off project like this would charge around $80-150/hr. I have been doing PHP for about 14 years and can tell you I would not touch this project with how few details you have provided. My suggestion will be the same as one below. Find a few developers have them sign an NDA and go over the details. Let them determine the level of effort because if you are not capable of doing the work you are not capable of estimating the level of effort or cost.
I suggest you check out phpmentoring.org :)
Sure enough. Fixed.
 public $house { function get() { return $house; } function set($value) { $this-&gt;other = $value+1; } } And stop trying to use "moot". Maybe you do know the meaning and are just using it in rage.
What's not consistent about that?
PHP needs less "Don't do X because Y" people and more "Do X because you can" people. Who cares why someone does a project, what matters is that they do and take it to completion. All these people saying it doesn't matter because it's not built with *Flavor Of The Week Coding Practice* or *Current Popular Framework* aren't doing anything for the community. What happened to the true spirit of coding :(
&gt;Your assumption that the language is ugly and inconsistent is debatable. It really isn't...
I'm going to go out on a limb here and support you, with what I hope you were getting at: public $house { get {return $house;} set {$this-&gt;other = $value+1;} }; ..should be the proper formatting here. The missing semicolon in the spec is the one at the end of this declaration. This style brings it back in line and consistant with other property definitions. Ex: protected $car; public $house { get {return $house;} set {$this-&gt;other = $value+1;} }; 
This looks unnecessary and would not add anything new.
For me, it would be the difference between: protected $prop; public function getProp() { return $this-&gt;prop; } and protected $prop; public read-only $Prop { get { return $this-&gt;prop; } } which doesn't make a ton of sense. It seems cleaner, but I can see where I would be able to tell at a glance if a property was read or write-only. I guess I'm ambivalent on this feature in general.
I can envision many scenarios in which this would result in more readable code, and therefore, it has my (extremely valuable, I'm sure) blessing.
Agreed. This was my first post here. I just wanted to share a fresh technique. Oh well. \qq
all yours.
where are we supposed to comment? on the wiki? here? I thought this was already a done deal. My comment is I'd prefer a more standard getter/setter approach, which I think could be more easily integrated in to existing code. If $foo-&gt;bar is accessed, look for a getBar() method. If it exists, call it (assuming visibility permits it). If not, try to access the $bar member directly, again, assuming visibility permits it. Same for setting... $foo-&gt;bar= 5 should look for and invoke a setBar($val) method, if one exists. This proposal feels very... I can't put my finger on it. It just feels like it's inventing a lot of extra syntax when something less intrusive could be integrated. 
Sometimes you may want to only intercept either the set or get of a property. You shouldn't need to write an empty pass-through method for that purpose.
 It was deleted by the mods before you deleted it from your stream, you twat.
The newgrounds.com audio portal is a great place to find non-commercial use audio.
In situations like these, I think you have to create new syntax. Your proposal has a huge chance of breaking backwards compatibility, and more importantly, magically calling methods is just an awful idea. The proposed syntax takes less typing, and less commenting than standard getters/setters. Besides, in your idea how would the language know which function to call? When setting $this-&gt;foo_bar, should the method setFooBar() be called, or setFoo_Bar(), or set_foo_bar()? The language can't try them all, and you can't for devs to use a certain naming style.
If you're not sure if you want a framework or a CMS then [PyroCMS](http://pyrocms.com/) would be perfect. Pyro is built using CodeIgniter, which is not the most advanced framework in the world but gives you great functionality with a tiny requirement list. That means PHP 5.2 support and no command-line installations. Instead you have a web installer that works in 12+ different languages. Using the Streams functionality in the Professional version you can build out entire forms and data storage through the interface without touching a line of code, or you can use the Streams API to help you build modules faster. Modules are just MVC components, which help you build applications very quickly. Need a hotel booking website? Make a hotel booking module, and speed the development along with the Streams API. Designers love it too, thanks to its really simple theme structure and basic tag system [Lex](http://docs.pyrocms.com/2.1/manual/index.php/general/basics/pyrocms-tags). Give it a try :)
Have you even tried looking at yii? This what you see there is a combination of two default listings.. Did you wonder about the white space on the right? It is because in default yii there is another navigation bar and he just didn't expand the content to take the now available space. Have you clicked on a house? Do you wonder why the id is there? Do you wonder why it looks so bad? It is because this is generated by default.. if you look closely it is just the list of all fields from the db.. maybe some fields have added information, that they are date-fields.. And this whole listing is default for autogeneration.. So what he did: he combined two generated listviews.. he added a contactform to the view page (looks like the demo contactform).. He forgot to make the listviews sortable (not sure if this wasn't availble by default) He didn't beautify the urls.. which is a damn simple task..
You know about LESS? http://lesscss.org/ 
Ummm.... If you called $this-&gt;foo_bar, look for setfoo_bar(). Why bother having the language try to accommodate for stylistic naming conventions (which change between team/developers)? Also, see above for the Groovy reference. By making all calls to fields look for a get/set, and having those always called, it's not 'magic'. The magic __stuff we have now are glorified error handling. What I'm suggesting wouldn't be. I don't really buy the "there might be BC issues". It's valid in some cases, but with BC being held as the highest criteria, and little work being done to move the core ZE forward to accommodate newer needs, we end up with things like \ as a namespace separator for fear of some edge cases not being supported with : separator syntax. If BC is the primary consideration, all we can have are syntax additions, never changes or corrections.
It works quite well in Groovy. Under the hood, every defined member variable is compiled with a get/set method. Every access to a member variable is *always* looking for a get/set method, because they're always provided at compile time. However, if one is provided as part of a class definition, that one is used (one isn't compiled for that situation). "Then you have a situation where the setter or getter can be disjointed from the property definition." Ummm... so what? It's not really a 'property' definition anyway right now - just a member variable. The 'get/set' behaviour is what's making it a 'property'. For anything beyond the trivial example so far, larger chunks of get/set property code will *need* to be visually separated from the typical grouped list of member variable definitions anyway. If the get/set definitions are just pointing to internal methods where the heavy lifting is done... what have we gained except an extra level of indirection? 
I agree with this and a lot of other things in this topic. My rate would be $125/hr and an NDA would be signed. People that jump at $25/hr, well... be careful what you wish for. Also, how are you going to test out that it is "secure"?
There are a lot of resources to help with CodeIgniter too. Great product.
Make sure you have a working demo. If your target audience is developers, show them some code and run through it with a few prepared unit tests.
VERY interesting - [this](http://www.youtube.com/watch?feature=player_embedded&amp;v=Wl4XiYadV_k#t=147s) is basically the default view and hierarchical ajax-driven view of my CMS - I think I might like Processwire a lot.
The `ArrayAccess` interface allows instances of the class to be accessed like an array. Check out the [docs](http://php.net/manual/en/class.arrayobject.php), there are good examples there. You can also extend the `ArrayObject` class for more full-featured array-like objects. [docs](http://php.net/manual/en/class.arrayobject.php) Hope this helps!
0x5F813C0F
Points for that I used to not test due to not being able to figure out how setup xdebug and etc. Also OP how long do you get? I'd try to stay under the 5min mark on setup. Will this talk be recorded? I'd like to share it with my community, I'm always looking for more ways to get people testing properly.
Neither. They're both a code smell that your code is too complex and needs to be refactored in a way that can prevent the need for that many branches in a single method. Edit: Can someone explain their downvote? [Cyclomatic Complexity](http://en.wikipedia.org/wiki/Cyclomatic_complexity) is a well known concept in computer science and branching a lot is something that quickly increases it.
PHP is compiled to bytecode, not assembly, and the PHP interpreter probably does not differentiate much between if/elses or switch statements in its generated code.
Not having {} does not improve readability, but only makes it worse.
An alternate approach: $method = 'handle_' . $cat; if (method_exists($this, $method)) { call_user_func(array($this, $method)); } else { // failure condition }
&gt; Why bother having the language try to accommodate for stylistic naming conventions Because it matters to people, and the language is used by people. You don't tell people what kind of naming conventions they can or cannot use. &gt; By making all calls to fields look for a get/set, and having those always called, it's not 'magic'. The magic I'm talking about isn't the same as PHP's magic methods. You're assigning or reading a value from a property, which "magically" calls some completely unrelated method, or as someone else put it, "you have a situation where the setter or getter can be disjointed from the property definition". The fact that you say "so what" to that issue is dubious. &gt; I don't really buy the "there might be BC issues". It's valid in some cases It's valid in all cases, and I'd hate to be on a team with someone that so casually shrugs off backwards compatibility. &gt; and little work being done to move the core ZE forward to accommodate newer needs This RFC **is moving the core forward** to accommodate newer needs. The RFC is doing the very thing you're saying isn't being done. Regardless, the proposed property syntax is easy to understand, and writing this: public Field { get { return $this-&gt;_field; } set { $this-&gt;_field = $value; } } Takes far less time and typing than writing this: public function setField($field) { $this-&gt;_field = $field; } public function getField() { return $this-&gt;_field; } Quiet frankly, after years of writing thousands of getters/setters, I'm f'n sick of it, and anything the language can add to make that process easier is okay in my book.
Oh yeah, I'm planning to use CRAP index to show what methods are missing tests.
Actually at the OPCode level, they are quite different. &lt;?php $cat = 'orange'; if($cat == "brown") { } else if($cat == "black") { } else { } compiles to: number of ops: 8 compiled vars: !0 = $cat line # * op fetch ext return operands --------------------------------------------------------------------------------- 2 0 &gt; ASSIGN !0, 'orange' 4 1 IS_EQUAL ~1 !0, 'brown' 2 &gt; JMPZ ~1, -&gt;4 5 3 &gt; &gt; JMP -&gt;7 4 &gt; IS_EQUAL ~2 !0, 'black' 5 &gt; JMPZ ~2, -&gt;7 6 6 &gt; &gt; JMP -&gt;7 8 7 &gt; &gt; RETURN 1 while this: &lt;?php $cat = 'orange'; switch ($cat) { case "brown": break; case "black": break; default: } Compiles to: number of ops: 13 compiled vars: !0 = $cat line # * op fetch ext return operands --------------------------------------------------------------------------------- 2 0 &gt; ASSIGN !0, 'orange' 7 1 CASE ~1 !0, 'brown' 2 &gt; JMPZ ~1, -&gt;5 8 3 &gt; &gt; BRK 1, -&gt;12 9 4* JMP -&gt;7 5 &gt; CASE ~1 !0, 'black' 6 &gt; JMPZ ~1, -&gt;9 10 7 &gt; &gt; BRK 1, -&gt;12 11 8* JMP -&gt;10 9 &gt; &gt; JMP -&gt;11 12 10 &gt; &gt; JMP -&gt;12 11 &gt; &gt; JMP -&gt;10 13 12 &gt; &gt; RETURN 1 
It would still be great to see what you come up with.
Can you elaborate without sarcasm? I'm not sure whether you're implying I don't use OOP or whether you're calling OOP useless.
The setup of having all fields and types being custom, and the jQuery'ish API behind it all, is what puts it in a different class, IMO. Just makes it a lot faster to get stuff done. The system bends to me rather than me having to bend to it. Though I worked around the likes of Drupal and WordPress for far too long, so maybe I'm easy to please. If you decide to spend more time with it, be sure to join their [forum](http://processwire.com/talk/) as it's pretty friendly and helpful. I learn something new every 5 minutes I spend there. That video you linked is a couple years old and the system has come a long way since then, though the video still seems to cover the big picture pretty well. 
The two bottom if-clause-blocks are not semantically the same. Imagine you have this: $cat = "brown"; if($cat == "brown") { echo "Hello\n"; $cat = "black"; } else if($cat == "black") { echo "World\n"; } Here the output would be only "Hello\n", however with: $cat = "brown"; if($cat == "brown") { echo "Hello\n"; $cat = "black"; } if($cat == "black") { echo "World\n"; } The output would be "Hello\nWorld\n". To answer your question, I think it very much depends on what you are doing. I would use switch if it were the same variable I had to check up against a lot of other values e.g. strings or numbers. Think of this example: $number = 5; switch($number) { case 1: case 2: echo "One or two"; break; case 3: case 4: case 5: echo "Three, four or five"; break; case 6: case 7: echo "Six or seven"; break; default: echo "Above seven!"; } contra the same written with ifs: if($number == 1 || $number == 2) { echo "One or two"; } elseif($number == 3 || $number == 4 || $number == 5) { echo "Three, four or five"; } elseif($number == 6 || $number == 7) { echo "Six or seven"; } else { echo "Another number!"; } I think the switch is easiest to read.
Neither. I'm just saying that moving the complexity into a type system doesn't eliminate the complexity. I don't think a switch statement is a code smell. You don't have to factor your code into classes to write quality PHP code.
Well, without the buck, but yeah. I don't care for the write-only and read-only keywords they're proposing, but beyond that, the feature is something I would most likely use.
Perhaps cover practices that make it easy to create testable code, like Dependency Injection?
The big différence, is that you need to pass $constant to your template...
Post your code. How did you split your php? Were you using require statements &amp; variables for repeated names etc?
&gt; I'm going to be using Composer/Packagist and grab the EHER/PHPUnit package for quick, 30 second setup. PHPUnit just got official composer support. I believe it's slightly buggy still, but it's worth trying or at least mentioning in your talk. https://github.com/sebastianbergmann/phpunit/pull/646
[this](http://pecl.php.net/package/vld) package. Use it in conjunction with [this](http://php.net/manual/en/internals2.opcodes.list.php) page to understand what the individual opcodes do.
I build larger Symfony 2 applications for work. First up, following MVC and SOLID (properly) can reduce a *lot* of complexity when it comes to maintenance. Beyond that, I tend to split my Model out to be it's own independent library. This does two things: my actual business logic is not coupled to any framework (other than an ORM or DAL), and I am "forced" (not really, but it helps enforce the separation) to maintain a clear separation of logic and presentation. When it comes time to plug the library into Symfony and build a bundle to provide the C and the V, all I really need to do is wire things up. If the model supports it, it is trivial to implement in the bundle. And again, at this point in development, the physical separation of code helps me to keep things very clear and organized. Also, namespaces are wonderful.
Jawesome!
I'm new to php and wikipedia gave me the impression that you couldn't unit test very well in php, is that a false assertion?
Yep
Yes, that's very incorrect. Here's some unit tests I'm currently writing for a project I'm working on: https://github.com/jtreminio/Yumilicious-Tests
Add a couple of zeros onto the end of that £5 then maybe you'll get some replies.
agree. I've come to the point where it's not worth sacrificing the readability (not only for me, but for others) to save a few bytes. I've also gone away from using &lt;?=$something?&gt; to &lt;?php echo($something); ?&gt; despite it being a little bit longer. When reviewing code or passing it to others, it's just easier to read when it follows conventions.
It's less visual clutter. It might change if you're working in a team and you want to keep things standardized, but for me it's definitely easier to read. In the end everyone has personal preferences and you do what works for you and the project you're working on.
You're arguing what the RFC states vs what I was commenting I would prefer to see. There's obvious disconnect and conflict there - I'm not enamored of the C#-style getter/setter definition, I use a different style in a different language which I feel would map more cleanly to PHP. "and the getters and setters need to be visually right next to each other, even if the actual implementation of your setter might be long." And you're worried about some *other* style of code creating 'code hell'? Complexity in the getters and setters cries out for testing, which cries out for separated methods, vs gobs of code sitting inside one set of curly braces next to each member variable declaration. This is going to get ugly and hard to test, or generally unused by most people. I don't think we'll see much of a middle ground, unless people migrate most of their get/set logic in to separate methods.
I'm really only stating that they're different. I'm not making claims as to which is better. I think for the most part code clarity should be the priority since the use of one over the other will not make a significant difference to execution time.
I use the switch if the logic is light and I forsee having to add more cases, otherwise I use if/else.
I believe PHPs switch statement uses the double equals, instead of the triple equals, to test for equality. That is something difficult to optimise away, due to the extra cases it handles. An if using triple equals will be faster.
Sarcastically, the best way is this: ($cat == "brown" &amp;&amp; (do_something() || true)) || ($cat == "black" &amp;&amp; (do_something_else() || true)) || (default_do_something());
I wasn't offended in any way. I am a huge fan of peer review; I review others PHP code and have my own code reviewed on a daily basis. I perceived "mean" to be referring to the several "you're doing it wrong" comments.
I would imagine the php would be minimal compared to the javascript for all that ajax / frontend effects.
Quick, someone go tell Whitehouse.gov they're using an insecure framework!
I'm really happy to see that this has finally happened! Many thanks to those involved in making this happen. Is anyone else having issues getting this working with Symfony?
Finally! The last reason I had to use PEAR is finally gone!
&gt; Neither. They're both a code smell that your code is too complex and needs to be refactored in a way that can prevent the need for that many branches in a single method. Your claim doesn't make any sense in the context of OP's post. In context, it makes it seem like you're suggesting "if" and "switch" statements are bad coding practices in general, which would actually be a criticism of all code ever created in the history of computers (only slightly exaggerating here). I think such a statement would hurt Alan Turing's feelings were he alive today. LeGrange has two conditions and a default in that example. Not sure that's "too complex". I think your statement is just misunderstood. Can you clarify what you mean, and clarify under what conditions you believe a conditional statement is or is not ideal?
I was just thinking of writing a simple macro processor, which allows me to define color constants in my CSS. I would then preprocess this CSS template, and use PhpColors to generate the gradients, and also make use of the lighter/darker features. Trying not to reinvent the wheel, but my requirements are very basic and Im not sure I want to integrate LESS into my build chain yet
I agree with the visual clutter argument, but I still use braces because being consistent is more important. "When in Rome" etc. I prefer indented languages because I can leave out the visual noise and also be consistent with the rest of the syntax.
Somewhere, somehow, a check of some sort must be done by some level of code to confirm that object is of a particular type...
Well again - you should probably go into more detail than the generalization that "They're both a code smell that your code is too complex", especially when keeping in mind the context of OP's post and given simple examples. I think this is where we - the reader - are confused about your comments.
Well, I guess it's relative to who's writing the check.
Awesome! I've been meaning to get to one of the Dallas PHP meetups one of these days. This is a presentation I'll be sure not to miss; not just because of the topic, but because I found your blog a while ago when searching for some Xdebug/PHPStorm pointers and found it to be top notch. Thanks!
Considering there is likely less than a hundredth of a microsecond difference I wouldnt really concern myself with it. This screams of premature optimization.
That's mostly the point I'm getting at or trying to dig up more information about, and the point I think OP is hinting about at least in terms of which is more efficient. If we're talking a hundredth of a microsecond, then this is a moot point unless we're talking about _several_ thousand page hits a second on average. But still, if using `if` over `switch` gives any performance boost whatsover if proven, might as well go for that from the start.
The way jvc_coder did it is by far the most logical way imo. I can't see why "darken" would return a whole new separate value instead of just acting on the original. Just my two cents. 
Pardon my words, Im not a native speaker. By form, i mean probably structure. Whenever i find a tutorial about Unit testing, its a blog post about how to download it, what command line to put in the console.. and then if im lucky a test case of hello word. Then it ends. No more is discussed in that blog about unit tests. And if i go to stackoverflow or other blogs more advanced its all about the theory of a certain paradigm and if it can be tested in unit form.. why yes, why not. But im not in that level whatsoever so i cant even comprend. What i want is a tutorial like the structure jvc_coder's comments, a way to install phpunit, and a test. add more code, add more tests. I dont care the order, i just want to learn real world examples of types of tests and why they are good or bad. 
Dereferencing is a term used to describe the method of accessing the specific memory address of a variable. PHP, by default for non-object types (arrays and scalars), are often passed around by their values (ByVal). This method of variable passing means that PHP has to create a new variable and copy the original's value into the new variable. Using the ampersand (&amp;) operator tells PHP not to use ByVal referencing, and instead pass the address of the memory location of the variable (ByRef). The advantage to this technique is that when you modify the contents of a ByRef variable, you are modifying only one instance of the variable and all references will reflect this. Here is a simplified example of using ByRef: &lt;?php $foo = 'bar'; // Contains 'bar' $baz = &amp;$foo; // Also contains 'bar' echo '$foo = ' . $foo . PHP_EOL; echo '$baz = ' . $baz . PHP_EOL; $baz = 'bam'; // Both $baz and $foo contain 'bam' echo '$foo = ' . $foo . PHP_EOL; echo '$baz = ' . $baz . PHP_EOL; ?&gt; By using the ByRef method in PHP, the author is only having to loop through the data set once because whenever he modifies a parent node's children property, it is available in the output array automatically. If it helps, and you understand symbolic links, think of a dereferenced variable a symlink to the original variable. The "new" variable only points to the original variable, so any modifications will be made to the original variable. For bonus points, it is worth noting that calling unset() on a dereferenced variable does not unset the original variable's contents. It only removes the reference; just like deleting a symlink doesn't destroy the original file. You would first have to set its contents to null to destroy the original's contents. I've tried to explain this as best as I can. I admit that I am not always the best at explaining things in simple terms. If I've confused you more, or there is something that I can explain better, let me know and I'll do my best to clarify it for you.
I am not really experienced in unit testing. I think test driven development make sure you write tests for all the code you write. I agree it is a huge benefit. But for programmers who are new to unit testing, it wont be too clear. It will feel like a fancy way to do development, unless you show how important unit tests are. That is why I think demonstrating what unit testing can do is important. After that you can introduce development patterns like TDD which makes sure you end up tests for all your functionality. You can also teach them about code coverage analysis and how untested pathways can hide bugs. And how doing TDD can minimize this. Regarding code coverage analysis, this is an article which demonstrates why 100% code coverage is not enough http://blog.caplin.com/2012/05/08/why-100-code-coverage-is-not-enough/
$17k/year * full-time * no college degree, self-taught * PHP, Javascript * 7 years experience * Location: Shanghai, China
quick update on this - did an echo of $picture just before fclose($fp); on faulty and working server, and output is identical. As soon as I do base64_encode on that output, the output is different. 
wow. that was it - for some reason my ftp client for this server was set to ASCII, swapped it to binary = instantly working. I cant send you enough upvotes. Seriously, I spent 9 hours on this yesterday. Thank you so much!
That wasn't also my intention.. in the beginning I mostly wondered if I was missing something or if there was some genius code hidden somewhere and hoped the op would answer me there.. I only got replies that I'm wrong with my assumptions, that's why I defended myself...
Just to add if you do not have a ton of time to learn best practices think of all the time you have already wasted (and are wasting trying to modify this project) because you have not tried to follow best practices.... I think this place has some good tutorials: http://net.tutsplus.com/tutorials/php/ and http://net.tutsplus.com/tutorials/php/30-php-best-practices-for-beginners/
PHP passes everything by value. Even objects. It's just not the object itself, but a reference to the object. Also PHP is smart enough to only copy values when it needs to (copy-on-write). References are just multiple symbols on the same ZVAL. PHP does not allow you access to the memory. So dereferencing is not like in C. $a = 'foo'; $b = 'bar'; // +---+-------+ // | a | 'foo' | // +---+-------+ // | b | 'bar' | // +---+-------+ References $a = 'foo'; $b = &amp;$a; // +---+-------+ // | a | 'foo' | // | b | | // +---+-------+ And it really is the same with objects. $a = new stdClass; $b = new stdClass; // +---+------------------------------+ // | a | &lt;Reference to object #10000&gt; | // +---+------------------------------+ // | b | &lt;Reference to object #10001&gt; | // +---+------------------------------+ $c = new stdClass; $d = $c; // +---+------------------------------+ // | c | &lt;Reference to object #10002&gt; | // +---+------------------------------+ // | d | &lt;Reference to object #10002&gt; | // +---+------------------------------+ $e = new stdClass; $f = &amp;$e; // +---+------------------------------+ // | e | &lt;Reference to object #10003&gt; | // | f | | // +---+------------------------------+ I [blogged](http://bigwhoop.ch/artikel/117/2011-11-30/php-zvals-und-referenzen-erklaert) about ZVALs and references in PHP. It's in German though, but the code/pictures should be self-explanatory. 
It seems my mistake was to assume that people weren't stupid, because if the conclusion people make, as you say, that I criticize all if and switch statement then... shit I don't even know, such a conclusion is too far removed from any form of sane reality. It's really very simple, OP said "I have a complex if, would it be better to use a switch or use many if/else branches?" And then my answer is just as simple: Neither, literally every resource on refactoring by some of the utmost experts in CS (shit who doesn't know Martin Fowler?) state that this is a code smell. 
I just want to add here, that it is possible to shoot yourself in the foot with references: [call_user_func_array](http://www.reddit.com/r/lolphp/comments/ptnlk/call_user_func_array_vs_reference_parameters_vs/) [references](http://www.reddit.com/r/lolphp/comments/s6kqy/when_references_go_bad/) [references2](http://www.reddit.com/r/PHP/comments/v8n3f/php_guidelines_not_psr/c52c0x6) That said I never use references in php because a) I think the timesaving isn't worth it.. (or often there isn't even a timesaving because of the copy on write) b) I don't grasp the cornercases of it
If you have R=301 (or R=anything) in a .htaccess rule, you will lose all data from POST forms. No way around that. If you use post-redirect-get (and you probably should), then just add a rewritecond to make sure it's a GET request before doing a redirect, and then the p-r-g in your scripts will fix the URL once the post has been processed.
How annoying is that! Glad you worked it out though..
FTA: &gt; The common approach is to use a recursive function that finds all the root nodes, then all their sub nodes, then all the sub nodes of their sub nodes, and so on. Wow. No, it's not. That is not at all a common way to turn an adjacency list into a tree. I've only ever once seen a naive problem solver turn to recursion without prompting. And anyone with some experience under their belt is going to notice they're manipulating structured data (viz. "name" and "parent") as an array (i.e. unenforced structure, less expressive) with value semantics; they'll use objects instead (e.g. "Node"), and end up solving the problem without turning to dereferencing at all.
Thank you for that information! This has been driving me crazy! Is there an alternative to R=301, which will preserve the post data? I've read things about !POST and QSA, but nothing that made sense or worked for me.
The only gripe I have against this approach is that the developer doesn't really know the state of his color at any given point. So if I have I page using the css gradients and checking whether the color is light/dark and toggling txt color. I don't want the next dev to come along and darken the instance of that class not knowing he is messing up my styling later down the line. I think, once the object is instantiated with a color the object should constantly stay in context of that color. // Should always return your original color $foo-&gt;getHex(); // Should always return a gradient based on original color $foo-&gt;getCssGradient();
Thank icomefronthenet. I'm going to start on that today after work :D. I hope it won't take me to long to build up a good system for doing mining.
URL?
www.jtreminio.com
I'm afraid you've misread me. I said naive programmers *don't* usually turn to recursion first when trying to solve a problem (one exception I've seen first hand was a Mathematics major doing Fibonacci (without a functional language or memoization)), *not* that programmers who turn to recursion are naive. Completely different statements. &gt; Just because it's obvious to you, does not mean it's always obvious to everyone else Kinda my point: recursion isn't really *obvious* to anyone for this specific task, because new programmers don't even try to apply it, and experienced programmers realize it's not needed or helpful because they can do it in O(n) *just* by using a more suitable data type.
 Ugh, I blame it on the early morning/lack of coffee? haha. Just kidding. You're right though on all accounts -- now that I fully understand your side. Mea culpa. :)
I would learn jQuery and some AJAX essentials, then Rails or Django or CakePHP or Symfony. All of this depends on where you live though. Some areas lean more one way or another. This should widen your horizon a bit.
It gets the job done if you just need a blog and in many cases if you need a stable CMS.
That is definitely a path that a lot of people take, especially in the web agency biz. I spend a lot more time with people who start from scratch. I personally started with a book with game development recipes for my Atari 600 when I was a kid and then progressed to working out ways to improve apps and games that I encountered. WordPress was just a way to get a semi-decent blog up fast.
It is used to improve performances in some cases; it avoids the client to do a request to the server for each image.
Well, I've been playing with Django and I really like it so far... in the PHP ecosystem I've played with CodeIgniter and ZF... Zend seems way too "enterprisy" for me, same with Symfony. I'm currently living in Germany but might move to UK next year... I think the best case scenario for me would be focusing on Django or CodeIgniter, since both seem simple enough to work on apps on my own without too much guidance. I used to have a WP blog, with responsive design and fairly "ajaxified"... maybe I should start by porting it to one of those two frameworks... then take it from there.
nope, but try http://au2.php.net/
http://www.downforeveryoneorjustme.com/php.net
Dude - perfect. I've read about the MVC pattern and used it for small applications, but never really understood how it fit in with PHP. This is great stuff.
I threw melokoton an upvote for you.
You're right, that would work a lot better. I don't know how far I'm going with this, but I'll add that soon.
I'm doing a bit of learning as well based on this article. My methods in PHP thus far have always been bandaid fixes -- too intimidated to tackle the foundation of code as a whole, "Let's just add another isolated function that will fix the problem and worry about it later." I am very new to PHP. I have a good grasp on all the functions such as loops, math actions, basic database connections, forms, and the like. However, I don't have a grasp on "Why would I need to make a class for this when I could just shove it into a random function?" I thought I had a solid grasp on PHP until someone showed me CodeIgniter, and I realized I was not even 2% into the depth of how it works. Oh yea, and my existing code simply did not work. That 1000 line functions.php file where I shoved all my bandaid fixes was now a detriment to my future learning... So What I'm saying is, I'm right there with you. You seem to know a lot more than me, but I'm learning this too. I refuse bandaid fixes... it'll be hard, but I am in it for the long haul :)
The ending of lines doesn't seem to be the problem as I'm getting every line as one variable (I could have made that clearer.) It seems like the array() function is assuming that the $file_line variable is just one field of the array so it add as [0] =&gt; and "" around the string inside so in the MongoDB it looks like this "0": "'fname' =&gt; 'Knoll', 'lname' =&gt; 'Ulydig', 'user' =&gt; 'Viewer'" (tried using both " and ' around the variables in the array, if i use " it the array() function escapes them with \ that I can't trim.) Am I crazy for wanting a string to be handled as an array? edit: I have added trim() now. 
aha, yes they look like that. I wrote them out by hand as a test for importing huge amounts of data later by generating files from my MySQL DB. (was going to make it a converter from MySQL to MongoDB) I just tried using eval() and it just says (Nothing to insert into Mongo collection or insert is not an array) $this-&gt;mongo_db-&gt;insert("$seg", eval('array(' . $file_line . ')')); 
How hard can it be, he recommends you a good ruby book and you do the same with a PHP book. You read it during the weekend and can start working on Monday. 
Its a very different animal in the context of PHP than other web languages, that's for sure...
Did you try restarting it?
well, you might as well start here then... http://www.phptherightway.com/
&gt; What you should learn from Rails user ? Fact that learning framework before language makes you a bad developer, fact that just because you call something "MVC" does not make it so and that's about it. I'm sure that a smug rails developer has enough stereotypes for php developers as well. &gt; It is a prototype based language with aspects of functional programming. I assume you mean prototype based OO (Javascript) as opposed to class based OO (Smalltalk). If so, then you're wrong.
Except it is a blogging platform, not a cms. 
You are right that in most cases it's just semantics. But there are some edge cases. function byValue($b) { $b = new stdClass(); $b-&gt;name = 'Fritz'; } function byRef(&amp;$b) { $b = new stdClass(); $b-&gt;name = 'Fritz'; } $a = new stdClass; $a-&gt;name = 'Phil'; byValue($a); echo $a-&gt;name; // Phil byRef($a); echo $a-&gt;name; // Fritz Why I don't like the term "pointer" in PHP is, because it implies memory handling. But as PHP developer we really don't need to deal with memory (addresses) at all. We don't need to explicitly free memory, dereference variables, look out for overflows, etc. I highly recommend this article by Derick Rethans (the author of xdebug): http://derickrethans.nl/collecting-garbage-phps-take-on-variables.html. It's actually about the garbage collector in PHP but he also writes about ZVALs. Also, IIRC Nikita Popov wrote something where ZVALs were mentioned. Take a look at http://nikic.github.com. I hope that helps. :)
Peachy.
&gt; Have you actually ever used ruby? Yes, Ruby is a great language. Stereo-typically speaking, the Rails community is a hand-holding, screencasting, mac-loving group of brogrammers.
Rails developer might buy a car kit only if they hired a bunch of local experts (oddly enough all named Jim *ahem* Gem) to put together it for them. Then they'd go off bragging to their friends how **they** built something so awesome they are going to get VC funding for their idea! Then you ask them a specific detail. "I dunno, you'll have to ask Jim #45." -- PHP analogy, that's true to some extent. But I don't call those people "developers"... damn cut-n-paste cowboys. 
I was expecting a joke. :(
Another option could be to store all the images on multiple servers uing lsyncd (its on google code). This way you can just write new images to the master server and all the slaves will have it in seconds. Then just use round robin DNS or load balancing to spread the load between the boxes.
I know, so I had to make up a punchline, you can find it as another comment
Well, you might start with '&lt;?' :)
outlook shows the image correctly using this method?
meh, you put content in, you manage it, its a CMS
Balrok, please excuse me. As you can see from here: http://www.reddit.com/r/PHP/comments/zsvvq there are a lot of asses on /r/php who can talk a lot of crap but don't back it up with code (or better yet, videos of them coding), like I have been more than gracious to provide. See http://www.reddit.com/r/Economics/comments/zybge/so_today_i_created_a_federal_personal_income_tax/c6aat3v?context=3 which I created live on 15 September, following up on that challenge by people on /r/php. http://www.youtube.com/watch?v=xJPf7XGDLqo&amp;feature=plcp &lt;-- time-lapsed video of me coding it. I apologize for thinking you in that exclusive bunch.
I don't mean to troll or anything, but could someone explain in layman's terms what is the benefit of using Doctrine? I've tried it and couldn't see any benefit at all. - need to learn a whole new api and - yet another abstraction layer - configuration mess - its own brand of "SQL" - lack of any real and tangible productivity improvements 
Check out Laravel - http://laravel.com/ 
Try considering PODS for wordpress as a CMS. Even thought wordpress is not a epitome of awesome coding. Its simple intuitive UI and perhaps even familiarity with the clients will be something what you are looking for. This is a simple CMS solution based on your requirements. http://podsframework.org/ This was done by our team using symfony2 + pods and wordpress http://webly.co the wordpress backend is simple enough for even our designers to add or remove projects :)
This is something I've been wondering about. Not so much any specific framework, but how rest + PHP work together.
Everyone else seems to have covered the basics, but I must add: [Migrations](http://docs.doctrine-project.org/projects/doctrine-migrations/en/latest/reference/introduction.html). Migrations are the single greatest thing in the web development world since sliced bread. Managing your database versioning is the biggest headache to upkeep and deployment of sites, and Doctrine makes it stupidly easy to deal with. You can even roll them into Capistrano for complete hands-free deployment. A-mazing. There's your productivity improvement!
General usage, common pitfalls, etc. Exposing your application as REST. Model duplication. JS project architecture
Uhm.. Read the documentation? There's not one single way of doing it, it differs from framework and framework, and it's all covered by the documentation. 
IMO, this is an increasingly important part of new frameworks. Here's our take on integrating with Backbone, based on their To Do example app: http://www.elefantcms.com/wiki/Elefant-with-Backbone.js I believe Laravel and others have fairly similar REST API creation too, so some of this may apply there too.
We had a [very nice discussion on this](http://www.reddit.com/r/webdev/comments/zupyg/how_exactly_would_an_application_utilizing_both/) over in r/webdev the other day.
Well, first off, PHP isn't *really* capable of true REST, you have to fake it. The other thing to consider is that most big companies are moving away from traditional REST because it's not a great paradigm for delivering complex content, instead they're loading payloads of different, combined data. Take a look at the network calls on facebook to see what I mean.
I don't think there's a magic phrase for it yet, sorry. :) So far, we've just been combing data from different resources into a single url endpoint (basically the same work you'd be doing if you were doing it all client side, only without the templates), and delivering that as a single JSON payload.
It depends, if you as a consumer of Codeigniter find that bugs and features are not up to snuff then by all means you should bring it to the author(s) attention. If they refuse to move on serious bugs like SQL injections or XSS attacks then I would jump ship completely.
hey jBroadway - this CMS looks nice, but I need something more flexible - for example, if I have a winery website, I want to be able to create the requisite CRUD (create, read, update, delete) operations for wines (and be able to have relationships within those wines to other things like testimonials, reviews, etc.) without having to build a custom module on the backend. Is there any support in your CMS for something like that?
[date_default_timezone_set](http://php.net/manual/en/function.date-default-timezone-set.php)
I don't think you're really familiar with what Doctrine(2) does. &gt; If you are going to work on a project that HAS to support multiple DBs, then Doctrine could help, but one really has to ask why this is needed first. Supporting multiple DB back-ends is certainly possible with Doctrine, but that's not really a reason to choose Doctrine over, say, PDO. &gt; If you're working on an internal project for a company, then you have control over the environment and thus coupling closely to a preferred DB is usually the better way to go in order to fully exploit the strengths of that DB. It depends on your architecture, really; where do you want to draw borders/abstractions. For instance, if you want to abstract things away into stored procedures, then Doctrine is probably superfluous. However, just because you're using Doctrine doesn't mean that you can leverage vendor-specific features when you want to. &gt; ORMs generally tend to be a jack of all trades, master of none, and this is not a bad thing if the failings of the ORM are less important than the ease of use the ORM gives you. This makes no sense to me. Doctrine really has one job: provide a rock-solid data-mapper implementation that just works. If you're writing in PHP, and want your entity objects to be separate from and ignorant of their persistence logic, Doctrine is fantastic. I'm hard-pressed to think of any scenario where using Doctrine makes what would otherwise be possible become unattainable, or even difficult. Now, your criticisms might apply better to certain other ORM patterns, like ActiveRecord, for instance. I was completely turned off to ORM years ago because all that was available was Rails-like ActiveRecord stuff (like CakePHP's ORM, Propel, Doctrine1). Data-Mapper is a whole different beast. Until you've done a medium+ sized project with a solid data-mapper architecture, you really shouldn't knock it. There's a learning curve, to be sure, but once you figure out why things are the way they are, it all gels nicely, and your productivity gets a huge boost. You find yourself not context-switching between objects and relational data all the time. 90% of the time, you're just thinking about objects, and doctrine is dutifully writing your SQL for you. When you need to do something special, or do some kind of optimization, you can still do it. &gt; It depends, as always. You can say that again, though. No tool is right for every job, and there a plenty of times where raw SQL via PDO is exactly the right tool too.
I would encourage every developer to checkout the Doctrine DBAL as an alternative to pure PDO solution. The DBAL extends PDO giving it pleasant experience over the default and provides tools to manage your schema.
What is "true REST"?
GD is old and inflexible. I support the notion to discontinue remembrance of it.
http://silex.sensiolabs.org/ Pick and choose what you want from Symfony2. Extend at will. As for assets and images, check out Assetic, it'll do anything you want with images / css / js. You should be able to roll a small CMS pretty quickly in it. I'm sure someone alreaday has.
Yes, I'll be posting the full, complete article on my website once it's done: www.jtreminio.com
Audience is everything from new PHP developers, to PHP developers who have years of experience but don't know how to/don't understand/don't know why to unit test, all the way to PHP developers who've been testing for years. I'll be aiming for that middle ground, devs who don't unit test but are experienced PHP developers, while also providing newer devs a way to quickly get started.
Since I'll only have an hour, I won't try to get too much into the non-code part of testing, but will quickly gloss over that and provide links to other blogs, or even my own more fully-fleshed out accompanying blog post, that will explain the *why*.
Oh yes, DI and DICs will most definitely be given front row status.
That's great to hear! How have you liked the combination of PhpStorm and Xdebug to be like?
I GET IT, you don't like my post.
Jesus, calm down. That's not the case at all. I just didn't get any substantial information to give you any feedback on, that's all.
I mean this: &gt; parse_str(file_get_contents('php://input'), $put_vars); If youve had the pleasure of working with Rails or Flask or Django, you have to admit that this is a far less than elegant method of getting PUT data, its a kludge at best.
To add to the other replies to this - You're asking the wrong question really. You shouldn't be asking what the benefit of using Doctrine specifically is but rather what the benfit of using a relation-mapped domain model is and by extension what the most robust system for creating such a system is. If you just want a drop-in replacement for "SELECT * FROM foo" then doctrine makes no sense. If you have a complex domain model that must be mapped to a relational persistence layer then doctrine would probably be a good choice.
The original dissertation makes no mention of HTTP verbs like PUT, DELETE, GET or POST. http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm REST is a collection of premises or a style of architecture for services, as I understand it.
ImageMagick/Imagick does pretty much everything, and it's been around forever so it's very tested and there are a lot of examples lurking out there, but it's not easy to get your head around in the beginning. If you plan to do a lot of this stuff it's worth making the mental investment.
GD comes built in to php. ImageMagick is much better, but it's not installed on all servers. 
good to know, i'd rather use Notepad++ than an IDE. Aside from IDE's, are there any tools that it would be a good idea for me to get familiar with?
This is currently what we use. We have an mvc js framework (extjs) on top of a php mvc framework. This has worked out really well for us, its a great separation of concerns, and has made development easier and faster, and allows easier cross platform development as well. (Because all the clients we have on web, mobile and desktop all share the same api back end). In our approach we really need a full featured and complete MVC js framework because we are not using php for creating web pages anymore we rely heavily (and do more coding now in js) for the client to generate the view (which is why we use extjs). Building a rest framework in php is easy, building a soap server in php is easy, in fact dealing with almost any web, database, caching, etc technology in php has been great for us in building our backend (glue like) api. And also php scales effortlessly... (mostly) However more and more we have found that users want real time updates which is where we are having problems with php and finding nodejs better suited to that use case.
I see that performance is not an issue, but using ImageMagick via PHP is not ideal from a ease-of-use standpoint as well. Last year, I had to develop a system to convert tens of thousands of PSD (Photoshop Document) files to an assortment of other image formats and dimensions. I tried the PHP route and it was fraught with gotchas. So my advice would be to use shell scripts for ImageMagick if at all possible.
Yeah, Id agree with that. Usually involves a lot of trial and error until you get the cmdline right. Fortunately the documentation does a great job of covering a lot of common usage. I cant think how the syntax could be improved much, without sacrificing functionality
Can you remember what problems you had specifically? I shell out to ImageMagick from PHP at the moment (its not ideal, but works very well). I have plans to migrate to the native IMagick extension, but now you have me wondering
The library 'imagine' is really great http://imagine.readthedocs.org/en/latest/index.html
You can't run a background process from inside you PHP script (no fork, no thread, no coroutine). But your AJAX request is asynchronous, so it is already a background task. I suppose you use Apache with its PHP module. Then you have no control over processes. But each request is independent, so if you can change php's max running time with `set_time_limit()` (IIRC its default value is 30 seconds), then your asynchronous request will run in the background for 10 minutes. You can use `ignore_user_abort()` to ensure your script won't stop if the user reloads the page. Though it can be done, I suggest to use a separate process. If you have access to the server, then run a daemon that receives orders through a socket or a queue table in the DB. 
The max execution time has already been adjusted to handle the longer script. The problem is that the user is unable to click on a link, or open a new tab until the process is complete, even though it's an AJAX request. Perhaps I'm missing a setting somewhere, but that is the default behavior with apache2 and PHP 5.3+.
I've read about Gearman and will investigate further, thanks. I was hoping there was a quick and dirty way to handle this since it's a one-off.
You can extend the execution limit, close the session and flush the data from your script. After running roughly the below your script will continue execution but the user can browse around and do other things. // set time limit for script execution $timeLimit = 5; set_time_limit(60 * $timeLimit); ignore_user_abort(true); // Clear output buffer and save output; while loop handles potential multiple levels of output buffering. // you can skip this if you don't use output buffering $output = ''; while (ob_get_level()) { $output.= ob_get_clean(); } // Disable gzip compression in apache, as it can result in this request being buffered until it is complete, // regardless of other settings. if (function_exists('apache_setenv')) { apache_setenv('no-gzip', 1); } // If not redirecting, send appropriate headers and output. header('Connection: close'); header('Content-length: ' . strlen($output)); echo $output; session_write_close(); flush();
Yup. If you use the default session handler, it opens a file and keeps a file lock on it until it's closed; only one PHP process can have the session file open at a time, even if they're coming from different apache requests.
Quicker and dirtier than Gearman, you can use the exec command to run another PHP process. You'd have to tell it in the background and dump the output somewhere else.. &lt;?php // Prepare to do long process. exec("/usr/bin/php /path/to/script.php &gt; /dev/null &amp;"); Theoretically, you could channel the output into a log file instead of dev/null. That way, you could check the log file for the output of the long running script and report back to the user when it's done. 
Some comments are for people like me. Having no specific experience with any graphical libs, I still understood something on the page.
I wrote [a blog post](http://www.myintervals.com/blog/2011/04/26/pdf-creation-using-deferred-process-execution-in-php/) related to this exact issue a while back. My company was having problems with generating large (PDF) reports during the normal PHP execution time. Our solution uses all the components you're talking about. 
I wish I could remember the details more crisply. The general highlights are: * I encountered bugs with the preservation of clipping paths and it only worked when converting from shell. * Some command line options were different or not supported which was frustrating. * Ran into issues when running parallel jobs. * And, of course, it was slower and prone to bomb out on memory requirements. I had to punt and kinda flushed the specifics out of my brain. Sorry I couldn't be more helpful. I will admit that my project was very specialized and only needed to be run a few times for a large batch conversion of several terabytes. Incremental changes to the library of images are all done with the IMagick extension. If you're not doing anything too close to the edge, you should be fine. My point was just that PHP's implementation is not perfect, but its still very good good library.
Exactly! There's even pre-written scripts to do it for you, such as: http://www.fmwconcepts.com/imagemagick/autotrim/index.php However OP asked for GD. Perhaps he/she doesn't have access to ImageMagick?
I've always used MVCs like CodeIgniter and CakePHP in the past, but I just started a new job and I really like the way they do it. They use Business Objects (BO), Data Access Objects (DAO), and Value Objects (VO). So we have three or more directories: /bo /dao /vo /views BO's contain the logic. VO's are getters and setters for holding data. DAOs are for data, either mysql, APIs, etc. Views are your HTML.
Columns are an edge case? Also, who monitors their comment karma like that? Yikes.
use ImageMagick. ImageMagick is amazing, and there are lots of online examples of how to use it.
&gt; You can't run a background process from inside you PHP script (no fork, no thread, no coroutine). Yes and no. If you REALLY need PHP to start a background task you can use for example CURL. Just do a URL call of the script you want to run and close the connection (or set a 1s timeout). The script will run "in the background" and your process will finish first.
Also investigate supervisord to keep your gearman workers up and running.
There's a couple of people in this thread saying you can't run a background task from a PHP script? I'm using this with success... &gt;**shell_exec('nohup *MYCOMMAND* &gt; /dev/null 2&gt;&amp;1 &amp;');** I've been using it for a couple of years with a default PHP &amp; Apache2 config. Haven't had any problems. Am I missing something here?
Okay, the Japanese flag.
That your following requests are handled sequentially instead of parallel is not the result of php being single threaded, but probably of phps handling of sessions: http://konrness.com/php5/how-to-prevent-blocking-php-requests/ 
shell_exec is a very dangerous command and in general not the way things should be done. Be VERY careful how you set up shell_exec, prepared statements are your friend, user edited variables are not.
Why is it not the way things should be done? What would you suggest instead? The only arguments that get sent to my commands are ID numbers. And those come from my code pulling them out of the DB, not user input.
This guy gets it. The biggest benefit I saw is you don't need professional data modelers. With some basic skills you can come up with a solid model and translate that into DDLs. Prior to DOCTRINE I had no idea how to properly define database relationships. 
This would also require ignore_user_abort setting in php.ini. By default PHP will terminate the script as soon as it detects client has closed connection
&gt; It's borderline magical. STLScience you pretty much captured it with this statement.
why would you get downvoted for giving a right answer rather than the wrong answer which is to hack concurrency badly into PHP. Which is almost always done wrong and destroys throughput?
I get attacked all the time when I suggest Node to PHP developers :-( 
if ($username == $trueUsername and #password == $truePassword) { you have a # on password instead of $
Not to be a dick, but do you remember that red text when you submitted the post that directed you to /r/php_help instead? Evidently not?
Using exec makes the run time an order of magnitude slower than running code native to php.
Thanks for your time explaining things - if you're interested and you think it'd be helpful, I'd love to show you the CMS I developed; it might give you some ideas or at least a different perspective.
agreed. You know you're in deep when you start arguing about meta-patterns. Just how deep *does* the rabbit hole go?
Probably for the community at large, yes, but that doesn't mean that the OP wasted his time, as some might say.
I'm not sure why you are reccomending that people use this framework. Is there a specific use-case you have in mind? Code seems ugly and disorganized. Not a lot of abstraction. It's more like "here's a bunch of classes that do stuff". What, exactly, is the "bloat" that you feel has been removed in this framework that exists in others? Why do all the php files have closing tags? They need to get rid of these,it is bad practice and creates several security problems. I'm not just being bitchy, its a serious decision to trust a project, and the security of a server, to a new, unsupported framework with no community. Why wouldn't you use an established framework that is battle-tested and well-supported? lulz: if ($form-&gt;isValid()) { // The form is valid. 
&gt; buy melokoton a month of reddit gold
I think, it's good practice to make the tools you use by yourself once, so you better understand how it works... Who hasn't written his own CMS-thingy for the exact same reason as this framework just to find out that it isn't that easy to get a well rounded system as the well-established ones with 1000s of hours work behind. But the experience gained personally, should not be forgotten... I praise him for getting as far as putting a stable release out to the open-source community for review and contribution... I never got nearly as far as that...
You can use CURL or sockets if the script you are trying to trigger does not generate output and you dont need the callback feature of AJAX. I use it in cart checkouts where I don't want to rely on JS being enabled and I can't hold up the checkout for a response from an API. If your script does generate output you will need to use ignore_user_abort(). Here is a article on the sockets method: http://petewarden.typepad.com/searchbrowser/2008/06/how-to-post-an.html If you want to use CURL simply do a normal call and set the timeout to 1ms with CURLOPT_TIMEOUT_MS
Replace the fopen($image,"r", 0) with fopen($image,"rb", 0) and see if it helps
This means the file with that class is not found. I haven't really used symfony but I believe you need symfony classloader which will automatically load the file if it isn't yet included. See php autoloading for more information
What does your auto loader look like? Using namespaces doesn't automatically include files.
use doesn't load the file, it simply assigns everything in the given namespace to the global namespace. You still need to either manually include (require_once) the file libs/Validator/Validation.php or if you are using an autoloader make sure it is looking in the right place. Also, for 'use', you must use the namespace, not the filename. It would still be this regardless of where the file lives: use Symfony\Component\Validator\Validation; use Symfony\Component\Validator\Constraints\Length; 
So are nuclear strikes.
Learning it mostly, and it seems much easier for web development as I learn it. 
I would work on a relational database if I were you. NoSQL databases have their purpose but relational databases are going to be better suited in most PHP applications.
 don't. If you can't point out flaws and/or improvements in their algorithms/architectural decisions, then shut it. And lets be clear, the 'code review' recommendation is generally just a form of bullying, don't stoop to that. It's a truism that you don't like my code, I don't like your code, and they don't like either of our code. Part of maturing as a developer is realizing that the code doesn't really matter, it's the algorithms and the archicture. There's truly beautiful code, truly horrendous code, and everything else is passable. No one in their right mind puts forth the effort to create truly beautiful code unless it's a public API. The cost/benefit ratio just isn't there, so learn to get better at reading code, and stop worrying about it. 
That's interesting, it feels a little like Duffs Device. I'd have to think about it, but it's definitely a use of PHP switch statements I hadn't considered before :)
Sometimes not knowing what you don't know can be a boost in confidence which is all it takes to get past go and collect your $200. I think that startups are often like that.
So the OS caches a 2GB video or 20,000 images in memory?
im not saying you should take that progression, it is however natural. you could jump into apps, and complex ones at that, you may work in the industry and be introduced to complex programming early. All i said, was that it was the usual progression, and probably due to developers being inquisitive about how other things work.
You forgot to mention imo silverstripe's best feature... Beautiful admin scaffolding (automatically generated backend)
I would definitely not do this for the same reason I outlined in my own response. You have literally no idea what the arguments that the method expects without scouring through code or documentation. 
what part are you disagreeing with? It kind of sounds like you're against concept of anonymous functions.
As for the concern about needing to know about the strings, i'd say that as long as you're consistent, that's good enough. Binding to a 'turnKey' event gets called after a turnKey() method, etc. Wouldn't require too much code diving, if any. I get your concern here, but programming is full of this kind of thing. If it's a method name, you have to know that method name. same problem, different form. As for anonymous functions, this is a perfectly legitimate use. What happens if you want to add a second callback to one of those events? would you suggest adding another method, along the lines of afterSeatBelt2()? sure, it'll have a docblock and all that, but it'd be terrible design.
&gt;If it's a method name, you have to know that method name. same problem, different form. It's really not. Method names would be yielded by auto-completion, as well as be enforced by the interface (i.e. if you implement an interface, you **must** implement it fully, or you'll get complaints from PHP). &gt;As for anonymous functions, this is a perfectly legitimate use. Guess we'll just have to agree to disagree, then. &gt;What happens if you want to add a second callback to one of those events? Add a second callback, or add another event? If the former, then it'd simply be a matter of pushing to a stack. If the latter, then you'd add a new signature to the interface. 
i don't agree to that
There are more PHP arrays here : https://github.com/debuggable/php_arrays Not really sure how accurate they are though...
I'd love to take a look at your CMS. Always interested in seeing different approaches :)
Data!
wow, this is good timing for one of my projects. thanks!
If the event system were to have many events, I'd prefer that the events be defined as perhaps constants in a class, and then use those constants to bind to in a similar syntax to calmcamel's. I do like the syntax and relative simplicity of the interface, but I would find it superbly ugly to implement a single method on the interface and just have empty stubs for the rest just to listen for a single event. But I really think it's all down to preference; however, your point about the interface being the very most straight-forward in terms of documentation and usage is a very good one.
Well done, any chance you could add currency symbol into that mix?
Might wanna take a look at [Emergence](http://emr.ge) for the web based IDE. It's also ExtJS with Ace. The source is available on GitHub.
I have always thought that there was a Great Need for a site that curated commonly useful data like this. Need area codes? Here. Need zip codes? Here. Need major world cities? Here. All in one place.
Does anyone else use these techniques to pack their UUIDs?
http://www.commondatahub.com/home e.g. http://www.commondatahub.com/live/geography/state_province_region/iso_3166_2_state_codes
I recently inherited a pretty large codebase that just LOVES singletons. I have yet to discover why it's bad or good, really. Personally I'm a fan of static constructors that can be called from my db layer: class Content{ static function Get($ID){ //returns a db object } static function View(dbObject $Content){ //returns templated view of content item } } class dbObject{ function __call(){ //returns call_user_func() on Content static function "View" in this case } } $Content = Content::Get(123); //gets content by id echo $Content-&gt;View(); //spits out html
I get what you are saying. I read [this article](http://www.fusionswift.com/2010/05/php-concatenation-benchmark-comma-vs-period/) a couple years ago and started using the commas. It just stuck in my head, even though I'm not in a position where I have to fine tune things, now it's a habit.
$tchresult - where are you performing the query for this? What's happening in your code is you're reading all of the results on the first entry, putting the record pointer at the end of the result set for subsequent entries. If you're getting a table of data that relies on information from $editresult, you need to perform that query in each loop (or an INNER JOIN on $editresult). If the values in this box are the same for all, pre-populate an array or string before you start looping over your rows: $options = ''; while($tchrow = mysql_fetch_row($tchresult)) { $options .= '&lt;option value="' . $tchrow[1] . '"&gt;' . $tchrow[0] . '&lt;/option&gt;; } while ($editrow = mysql_fetch_row($editresult)) { // various columns here echo '&lt;select&gt;' . $options . '&lt;/select&gt;'; } EDIT: Just an aside, never forget to put quotes around your HTML attributes.
these are my queries: $editquery= "select distinct test,subject,grade,student,html from tchverify where scode =$scode and tname ='$boxname'"; $tchquery= "select distinct tchteacher,tchtcode from tch where tchcode =$scode order by tchteacher!= '$boxname', tchteacher"; I have a list of students and their teachers in tchteacher. I have a list of teachers in tch. The point of this is if a teacher is linked to the wrong student they need to change the teacher to one from the tch list. I thought about the join but that would ruin the first list as far as I can tell. The first query returns each student with their grade level, subject, teacher... The second query returns the teacher name and id that could be used to replace any faulty links. I am working on your query in each loop to see if that will work right now.
varchar(30) for lat/long? Looks like DECIMAL(9,6) would be enough.
This looks like almost exactly what I need. Only thing I'm curious about it is how many dimensions deep it will allow. By the looks of it, you could go as deep as an array will allow, correct?
We may as well just have posts that praise the echo statement. It wasn't exactly hard to find this information before.
Like I said, I'm wanting to try and make one myself, I am aware of other services out there.
Pretty sure that your problem is that you're not putting your OR statement in a parenthesis. MySQL will read this as "select x where A OR (B AND C AND D AND E)" instead of "select x where (A OR B) AND C AND D AND E", which is what you want. Also - problems like this become easy to spot when you use a lot of indentations in your code - just makes things more visible. Here's how I re-wrote it (note: when joining multiple fields, it's good practice to always identify which field belongs to which table in the query. In the example I'm pasting, I picked what I thought was the likely table to go with each of these fields) SELECT uc.nid, COUNT(uc.nid) AS cuantas, MONTH(uc.created) AS mes, SUM(frfp.field_precio_value) AS total FROM user_compradas AS uc, field_revision_field_precio AS frfp WHERE uc.nid = frfp.entity_id AND (uc.pago = 'tpv' OR uc.pago = 'paypal') AND YEAR(uc.created) = '2012' AND uc.nid IN ( SELECT entity_id FROM field_revision_field_distribuidora WHERE field_distribuidora_tid = 865 ) GROUP BY mes ORDER BY mes DESC
Also - one note about this: If you're going to be running this query a lot, I would recommend creating an index on the `field_distribuidora_tid` field on the field_revision_field_distribuidora table, and a combined index of `pago` and `created` on the user_compradas table. I'm assuming that uc.nid and frfp.entity_id are both primary keys. If not, they should be as well.
Geordi!
back in my day we'd use Grease Monkey or Opera's user defined css option to render our social news sites into looking like code. Lynx in a terminal is pretty covert too. keep up the hard work ;|
Four submissions in four minutes? Quality over quantity, *please*.
This one doesn't even have anything to do with PHP.
jesus, who needs that ? there are enough builds out there which can be used...
I second that.
I earnestly wish you good luck with your project. The reason I push the issue is, we have enough wheels already. Yet people insist on reinventing them time and time again - it's a problem that's *especially* bad in the PHP community. If you're interested in these sorts of technologies, as I said, there are projects already doing what you're thinking about doing - that have been doing it longer and better. Working on a solo project is great for learning, but most people never finish their project, and ones that do rarely gain traction in the community at large. Generally, the community benefits far more from people contributing to existing open source projects than starting their own. And you learn more because you can see good methodologies and new ways of doing things, rather than trying to make up complicated solutions that don't scale well.
I built one into a WordPress plugin to leverage the fact my domain is 4 characters (plus .ca). Turns out to be pretty useful, although I built it without a class. My db has id, shortcode (appended to domain), long url, number of visits and a post_id, so that I can link to a WP post without binding to a permalink. I'll be releasing it in the coming days, but I can probably give Reddit a preview download.
Why the short_code field isn't primary key?
Easier to email the original URL, that way the recipient has some idea what he's clicking on instead of blindly hitting some obfuscated link.
&gt; long_url VARCHAR(255) NOT NULL, Yeah, that'll do.
I made one some time ago: http://mhac.us/ It's actually pretty terrible; all the shortened URLs are a little files with PHP like: $redirect = 'http://dxprog.com/entry/snowpocalypse-2011-finale/'; And the index.php is: // Grab the request string stripping out slashes and periods $request = str_replace(array('.', '/'), '', $_SERVER['REQUEST_URI']); if (!$request || !file_exists('redirects/' . $request . '.php')) { $redirect = 'list.php'; } else { include('redirects/' . $request . '.php'); } header('Location: ' . $redirect);
Omerida's article specifically recommends against using a random index, though. 
Hey a tutorial that uses PDO. Is it from this world ? If only more pple would have arrived 2004 
The difference in this particular use case is so minimal it wouldn't matter what you used. However, you do have a bug in yours. Any time you access the last array key in a set, your function will fail. See: [this snippit](http://viperpad.com/TYJHxZ). The reason this is happening is because you're using array type hints, but on the very last iteration it's not passing an array, it's (as per the pastebin entry) passing a boolean. The easiest solution would be to remove the type hint on the $array argument.
I am curious as to why you would want to use a database for this type of project.
Be a successful programmer 4 easy steps! * Step 1: Copy someone's code * Step 2: Paste the code * Step 3: ???? * Step 4: Profit!!!
I'd say a call to a database with properly index columns/keys would be FAR less overhead than including a file and then using data from that. Just store a key/value pair in Redis with the key being the code and value being the URL. Use MySQL for less called data like created_at, updated_at, who created it, etc.
Yeah, Redis would absolutely be best for this. I was just kidding about the file vs. DB bottleneck.
I kinda thought it was possibly sarcasm, but I wasn't completely sure. :)
That's good. As gargajo mentioned, this is one of the bigger failings of PHPUnit tutorials online. They test super simple cases and theoretically explain complex ones. There's nothing that builds on the super simple cases to take you from "new" to "user". 
Well if you consider that everything can be converted to a Turing machine yes, but ultimately, not all recursions can be _easily_ inlined. I just find it easier to break down functions when they are written in a recursive style.
The amount of useless junk ads and share buttons on that website is beyond ridiculous, even with adblock enabled.
Not to mention it sounds like they're trying to bank off [Hacker News's](http://news.ycombinator.com/) name.
Compared to what other kind of persistent storage?
Use those checksums folks!
PHP 6 ceased to be a "thing" essentially at the same time as PHP 5.3 was released. Everything just exists now as "what's in trunk" (or master, as the case may now be). There just isn't enough wide-spread interest in unicode support for it to happen. It'll break too much, and the benefit is esoteric.
No, not at all costs. Static methods are useful for when the current operation requires no state. Maybe a method that converts a string into a phone number format? You're just plugging in a value via the parameters and expecting a formatted number in return, and don't have to keep anything in memory. The problem would be if that static method then calls other static methods - how would you mock those out? You can't. So your nice unit tests are no longer unit tests, but integration tests since they're testing more than a single unit of code. A single method, regardless of it is static or not, should be small and simple. It should do a single thing and do this thing well. If you follow this mantra, especially when it comes to static methods, it shouldn't be too difficult to test them, and you should not have many issues with using them throughout your code. Just know that unless you're injecting the static method's class via parameters, you'll always be tied into that particular class/method, negating one of the biggest benefits of OOP.
That is from two years and a half ago.
Static methods are acceptable when they maintain [referential transparency](http://en.wikipedia.org/wiki/Referential_transparency_(computer_science\)). That is to say, when a method is given the same input, it *always* gives the same output. If the static method is accessing global state, or calling other non-referentially transparent code, then you have a problem. But in cases where the static method is completely referentially transparent, there is no reason to twist and bend code until you can accomplish the same thing with a non static method.
For factories, I avoid static. What happens when some other service object needs to use the factory? If you use a static factory method, you're in the same tightly coupled boat. For example: class MyFactory { public static function createMe($name) { return new Me($name); } } class MyService { public function getMeAndDoSomething() { $me = MyFactory::createMe(); // etc... } } Terrible pseudo code aside, the above example does not allow for dependency injection. You could, of course, inject the factory class *name*, but IMO it's best to have the factory implement an interface and then inject the concrete factory into the service and wherever else it's needed. edit: it really was terrible
I probably shouldn't have used the word "factory", all I really meant was alternative construction logic, as one would achieve with overloaded constructors in C++, et al.
Then you simply have a function, no?
Yes, static methods should basically be namespaced, non-OO functions.
This reminds me of [gearman](http://gearman.org/). Can anyone explain how DNode is better?
Unfortunately for 99% of people this is just unfeasible.
Why the use of static attributes? public function __construct(PDO $pdo, $table = "short_urls", $chars = "123456789bcdfghjkmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ") public function urlToShortCode($url, $checkUrlExists = true) 
I used to have a project that was similar in the sense that it redirected to affiliate links on a very high traffic adult tgp network that received more than a million clicks a day. I used text files stored on a ram disk. I do remember that there was "[trade/rotator](http://streamscripts.com/)" script that was written by some russian developers that used a database and could handle a lot of traffic. It used a HEAP (now called MEMORY) storage engine.
I wrote a minimal less server in node.js (only for development purposes), so you can request your files with &lt;link href="//localhost:8080/less/style.less" rel="stylesheet" /&gt; maps to */public_html/less/style.less* (you get the idea). https://github.com/Briareos/ServeLess
Statics are only bad if they control access (eg. factory). Nothing wrong using static methods without a state. 
I've been wondering myself the last couple of days. I've been working on a CMS (Gaaah, yeah) which at the moment to my surprise is just a ton of static classes. This is my first time using static classes this much, and sometimes it feels wrong, but it works and looks so much better! Here is the Github page: https://github.com/Tyrotoxism/Gelliom/ go to files/classes/ to view the classes.
Look up .post on the jquery website. Those values are the post params you will be sending to user.php
Why?
Does anyone have an example of why static constructors are untestable? I have no idea why whatsoever, and I use and test mine.
I just added those parameters as pseudo code. However, I quite frequently process all ajax posts through a single "router" method that handles input filtering and then calls the method indicated in the 'function' parameter after checking to see if it exists. For example - user.php (pseudo code): if (isset($_POST['function')) { try { $user = new User; echo json_encode(InputHandler::execute($_POST, $user)); } catch (Exception $e) { echo json_encode(array('success' =&gt; false, 'msg' =&gt; 'Application exception: ', $e-&gt;getMessage())); } exit; } InputFilter class (pseudo code): class InputFilter { public function __construct() {} public static function execute($filter = null, $callback = null)) { if (is_null($filter)) throw new Exception('Null filter target was passed to InputFilter::execute'); $filtered = InputFilter::_applyAutoFilters($filter); if (is_object($callback)) { if (method_exists($callback, $filtered['function'])) { call_user_func_array(($callback, $filtered['function']), $filtered); } else { throw new Exception('Invalid callback method passed to InputFilter::execute'); } } else { return $filtered; } } private static function _applyAutoFilters($filter) { // run input filtering and return } }
 === 'Nuff said. 
Why not just use node exclusively instead of a hybrid node-php system? The logic makes sense to me, use PHP for basic CRUD apps and Node for real-time apps, but linking both languages together just seems like it could get very messy very quickly. Node can handle CRUD applications very quickly, especially when using a framework such as express. I've been using PHP for the past 6 years exclusively and I'm now just getting into node. My plan is to make node my primary language of choice for all web development, but I'm just getting used to how things work with it. My one mistake is that I try to compare it with PHP, but you can't, you need to get out of that mentality. TL;DR: If you need a wrapper to link node and PHP, then chances are you don't need to even be using PHP for that project.
People who wants specific PECL modules and are stuck with Windows. If the company says "develop on Windows", then you develop on Windows or you're fired.
Because I did not know that existed.
The problem with PHP's pack and unpack functionality is that it's not complete in regards to endianness translation. I've done a few utility classes for loading binary data formats in PHP, and I always seem to have to write custom logic to get around endianness issues. There are also issues with signed integers and the like. You can see some of the hacks I had to employ for different situations, [here](https://github.com/TheFrozenFire/PHP-NBT-Decoder-Encoder/blob/master/nbt.class.php#L99).
URI-router... URI!!
When in doubt, check filesystem permissions.
I wish;(. Just 777'd everything just to see, still doesn't work.
Agreed. It should be loaded via controller, e.g. on pre-dispatch. The router is for routing and nothing else. Add other shit to it and it'll become a god object.
Neat. What threw me off was the function variable in the curley braces. Thanks sir!
FWIW, a simple symfony application can accomplish everything you ask for and more.
Did you mean static constructors specifically (as in factory methods maybe)? Or did you just mean static methods in general? If you meant static methods, it is usually not the methods themselves that are untestable. It is other pieces of code throughout your codebase that use those methods that then become untestable. The reason being that it is difficult (and often times not possible) to isolate the object/method being tested from all external dependencies. This is important if you want your tests to truly target just a single unit of code. You can use mock objects for non static calls, since you can provide a mock object instead of the real one to the unit/method you are testing. But if that method being tested is making a call to SomeClass::staticMethod(), it is much more difficult to "unplug" SomeClass from the equation since it is explicitly making that call (rather than $someObject-&gt;method(), where you could replace $someObject with a mock). And that is where my issue stems from. Sometimes it just makes sense that you would want to make a call to SomeClass::staticMethod(). But if you also are aiming for the laudable goal of keeping your code testable, you tend to lean away from it. In other words, a focus on testability could conceivably drive you to avoid writing your code in the best way possible. In other words: code that is written well for tests does not mean it is also written well for the real-world application for which it is needed in the first place.
Of course I read it, and point taken. I guess I was point out the obvious, when I really didn't need to.
So would anyone else agree it would be possible that if you wrote something with the goal of being 100% testable, you would end up with a very different result (line-for-line) versus writing something with the goal of accomplishing a task in the most elegant form possible. I realize "the most elegant form possible" may be a bit subjective, but to some degree I think many of us can agree on at least a few core notions of what makes a piece of code elegant/clean/well-designed. So if we take that core definition and use it here, would the resulting code not frequently be different? (in other words, 100% testable code does not always mean 100% best approach to solving the problem at hand, and vice versa?)
I guess I was meaning in general... Here's kinda what I was thinking, and here's some basic code: class Content{ static function Get($ID){ //returns one db object by id } static function View($Content){ //returns templated html view } } class DBObject{ function __call(){ //returns call_user_func on content } } $Content = Content::Get(123); echo $Content-&gt;View(); //my test: (my own testing framework) if(!get_class($Content)=='DBObject')){ return new TestResult($Title, $Status [pass|fail]); } 
The reason I was looking at the router is because the access control would likely need the same type of addressing. Maybe pre-dipatch is the right idea.
Will do.
What does echoing `ini_get('open_basedir')` say? If you're absolutely sure that the file exists and is readable all the way up the foodchain, only `open_basedir` or `safe_mode` could be affecting `fopen`'s ability to open a local file.
Because different devs get introduced to a language in a certain manner and it'll click for them. I personally prefer Allman style, which promotes code readability over everything else, but PSR-2 goes a different route, so in the interest of people being able to quickly read my code I've adopted it completely.
I'm talking about the combination of the two styles in one standard--not the use of two independent standards.
Because they just want to download and use the software. They don't want to piss around running something else to calculate the checksum and comparing.
Spaces are more uniform than tabs, especially when you're using a monospace font.
In both K&amp;R and 1TBS, the braces for functions and classes appear on the next line. The style you are using is not 1TBS but a variant of it commonly used in Java. http://en.wikipedia.org/wiki/Indent_style 
Exactly. Explicit is better than implicit. Space is a space. Tab can be any number of “spaces”.
I stand corrected. So why the new line with a lonely brace?
To distinguish between control structures and declarations. Personally that's why I like it even if it's not "consistent". 
don't you technically 'write it down' every time you use it consistently?
Spaces also require more backspaces. That I care more about. 
&gt; Pick a style and stay with it. You can even mix and match if you like. Just write it down for future generations. Or, if it doesn't offend you, adopt PSR-2 and join the standard and have it already documented in full.
Are there cases where you can't tell if it is a declaration or a control structure? This is just problem solving for a non existent problem.
There's a better (more intelligible) way of doing that. If you have a value which is supposed to be an unsigned long, which is represented by PHP's signed long, then you can do this: if($value &lt; 0) $value += pow(2, 32); fwrite($fp, pack("N", $value)); This will convert it from a signed to an unsigned before writing. I think this limits the integer range a bit, but there aren't many ways around that.
It comes down to uniform formatting. If I use spaces I’m sure everyone will see exactly what I typed. If I use tabs, it depends on their editor’s settings.
X number of spaces isn’t in any way implicit. It’s just an X number of spaces. It can’t get any more explicit. A tab is implicit by definition: it’s not directly expressed (ie how many columns does a tab take?). [implicit](http://www.thefreedictionary.com/implicit): Implied or understood though not directly expressed 
Ok, I changed it. Although we've all given this topic more time and attention than it deserves. 
Right. 4 spaces is... one level of indent? Two? Four? You really can't tell without looking at the rest of the code. One tab, otoh, is one level of indentation.
Which is exactly the point.
I misspoke, without keybinding it's not supported ootb. Shift+tab is natural to me, stupid to you. It's just a religion. Whatever works for you.
Yes you can. It's in your coding standards.
But why is your way better? There's really no reason to force 4 space indentation on people if they read code better with 2 space indentation. There are literally no problems with your formatting so long as you do not use tabs for alignment of code.
There is no benefit. It's a personal preference. I prefer to do it the second way, but I indent my braces.
I just adopted the Allman style and I'm a big fan of how it not only lines up the braces of the structure, but it also forces a nice space between the control structure and the next line of code. Beforehand (using K&amp;R), I'd inconstantly trade off between adding a space after the control structure and not, and my code would look pretty messy.
No, it's in the coding standards of whoever wrote the code. Which, if you're dealing with various open-source code as much as me, is rarely the same thing. Also, really? You accepted seeing a line of code not in the context of the code surrounding it, but you think that *coding standards* are ok to bring to this argument?
&gt;No, it's in the coding standards of whoever wrote the code. Which, if you're dealing with various open-source code as much as me, is rarely the same thing. The open source projects I work on have defined coding standards. The commercial projects I work on have defined coding standards. If whoever wrote the code doesn't follow them then by definition they're not using a standard.
oh dear. Have my best of luck !
You're suggesting that the factory pattern is the only use for static methods? That is not really the case. I see exactly what rogwilco is getting it. Much like driving, there is "the proper way" to drive which will get you your license, but there is also the way that everybody actually drives. Writing testable components is VERY important, but sometimes making a simple little class with a few static methods that act as a facade for some more complicated crap is absolutely fine.
Don't consider factory pattern to be only use case at all, but I have a bunch that's what op was talking about.
I don't work in a team environment so I set my own standard and I prefer the first one. I can't stand the second example because it is a waste of space and I can't see as much code in my editor. I prefer pragmatism over style.
You don't shift tab to reduce leading spacing? Seems inefficient to backspace all the time.
&gt;Right. 4 spaces is... one level of indent? Two? Four? You really can't tell without looking at the rest of the code. In any piece of code that will be very easy to determine if the programmer was consistent. You don't need to see very much code to figure this out.
Are you fucking serious!!!!?????
404 page not found.
[this is an outrage!](http://www.youtube.com/watch?v=YBCq8XDgrP0)
I use [Jenkins](http://jenkins-ci.org/) and the [PHP Template](http://jenkins-php.org/). For deployment I've started using Capistrano (really Capifony since most of my current work is with Symfony2). Locally, due to work requirements (Lync, VPN) I run WAMP on Windows 7. All of our servers development/production are Xen virtual machines running CentOS. Personally, I prefer ubuntu server.
We use [Atlassian Bamboo](http://www.atlassian.com/software/bamboo/overview) for our CI. I've never tried Jenkins but I'm pretty happy with Bamboo. It's not free, but it was cheap, something like $90 for their whole suite of software (we are a small shop).
idgi
Fantastic! Installed it, ran it, computer crashed, what is it? Well, didn't crash, haven't run it yet ;) &gt;SensioLabsDesktop is a desktop application that runs on your machine to ease the management of your PHP projects. Being sensiolab and all, by the ultra short introduction it sounds very interesting, I certainly do want to manage all my projects, but seriously what is it really?
I love http://travis-ci.org/
&gt;You have launched it No, I hovered my mouse over the "mark for installation" but had just the above thinking, also it says "i386" which inspire some caution :/ &gt;But the idea seems interesting. Yes, though it's not clearly exactly what that idea is.
I always use Jenkins: http://book.cakephp.org/2.0/en/development/testing.html#integration-with-jenkins 
&gt; Yes, though it's not clearly exactly what that idea is. A Symfony/composer dashboard like GitHub for Windows.
They should really emphasize what this is. I've only installed it because of my curios nature.
Should've been called "How to set utf8 in php.ini + the url to composer". I'd like to see more "why" I need it.. everybody writes awesome and so on but I rarely use 3rd Party stuff where I want it autoupdated (I mean most updates destroy the api or are irrelevant).
Just as an FYI, you can make PHP handle "real-time" apps just as easily, even using node-style semantics, via: https://github.com/react-php/react https://github.com/cboden/Ratchet 
Vendor_Package_ClassName -&gt; Vendor\Package\ClassName Also, why on earth would you have a base class? Sounds like you have it just for the sake of having it, which is just plain bad. It doesn't serve a purpose. 
You are here at the conference aren't you?
Factory methods are actually one of the 'ok' example of static methods. They don't have side effects. They always return the same output for the same input. Your example lacks DI in the `MyService` class. That's not a problem of the factory. class MyFactory { public static function createMe($name) { return new Me($name); } } class MyService { public function doSomethingWithMe(Me $me) { // etc... } }
Jenkins deploy?
Just use the SCP/FTP post-build action (plugin) to upload the files (and run some actions) after a successful build. 
Those actions could be database changes or updates?
I get a feeling that you should learn about SOLID principles. Especially the [single responsibility principle](http://en.wikipedia.org/wiki/Single_responsibility_principle) and [liskov substitution principle](http://en.wikipedia.org/wiki/Liskov_substitution_principle), because you have been ignoring them. Also, you seem to be missing the goal of namespaces. A namespace describes which part of application the class belongs to. It **does not** describe `IS-A` relationship. Said relationship is defined when you extend a class. &gt; bad code : namespace Tables; class User extends Table implements ITable{}; &gt; much better: namespace Persistence; class User extends DomainObject implements Parametrized {} 
Ok, I read the Wikipedia article on Continuous Integration, but I still have no idea what it really is. Can someone give a simple explanation of what it is?
I'm in agreement that a base class isn't frequently necessary, but my example was to point out where it might live in cases where it did make sense to have one.
When code is checked in, it is immediately tested by an automatic process. If the tests fail, alerts are sent to appropriate people, often including the person whose checkin introduced the error. That's the long and short of it. Engines exist to provide this functionality, a big one is CruiseControl, others are Hudson and Jenkins.
There is a Selenium component in PHPUnit. I've used it extensively. In fact, you can record/write tests in Selenium IDE and if you use the "Convert to" or whatever menu item it is in IDE, you can pick PHP*, and it will generate (kludgy, but functional) PHPUnit_Selenium code for the same test. *(You used to be able to do this out of the box; but since the PHP API for Selenium was not made by Selenium, they took it out a while back. You can get the functionality back with a plugin if you look for it.) edit: FTR, the PHP API for Selenium -- like all other APIs for Selenium -- are actually Selenium RC (aka Selenium Grid) based. So, you need to have a Selenium RC server running or instantiated for the resulting code to work. Previously I ran a modest VM farm of Selenium servers for this purpose. also, for the daring, the actual language APIs are all just wrappers for the under-the-hood Selenium RC HTTP-based protocol, for which there is hard-to-find documentation.
We use jenkins with phpunit for php and mocha for js 
I could see using it still. Depends on how rigorous your process is. Odds are good though as a single developer you are pretty fast and loose. I.E you check in bad code just so you don't lose the days' work, etc., in which case you'd constantly be getting "YOU BROKE THE BUILD" emails and cursing the stupid CI server. :)
It's just as useful for solo developers as it is for teams; your code gets run through a process and if there's a problem, it lets you know.
It's hard to keep up-to-date, these things are constantly changing... Every year or two there are a few new countries, and a few might disappear. Internal territory is reorganized, renamed, borders are altered, numbering plans are tweaked, and it gets to be a mess to maintain unless you have a large number of trustworthy contributors. Even the US is complicated - school districts, zip codes, CDPs, townships, unincorporated areas, counties, area codes, cities, towns, villages, wards, boroughs, all overlaid on each other, often non-contiguous, defined as different things by different people. It would be a massive undertaking.
I've set up a build server using Ubuntu and use the following stack of tools Git - Version Control [Atlassian Bamboo](http://www.atlassian.com/software/bamboo/overview) - CI building. + Rest of the suite (Jira, Fisheye, etc) for issue tracking, PM, etc (Starter editions are $10 each) [Codeception](http://codeception.com/) + PHPUnit - Unit, functional and acceptance testing automation [Selenium Server](http://seleniumhq.org/download/) - Integrated with Codeception for acceptance testing using Firefox/Chrome [Chef](http://wiki.opscode.com/display/chef/Home) - System Integration. Handles conforming all of my servers to a specific version/environment and also deploys "release" tagged builds that pass testing to live servers Currently the stack is set up to: 1. Issues and project goals managed in Jira, with API making them available to developers to easily browse in PHPStorm 2. Developer commits and pushes changes to their branch to the build server 3. Build server monitors git and automatically starts processing a build whenever a new push is detected. 4. Clean pull, codeception then processes the projects Unit tests, followed by functional, then connects to Selenium Server and runs through all the acceptance testing. 5. Builds automatically appear with related issues in the rest of the Atlassian suite (i.e jira), and the commiting developer is immediately notified on build success/failure over google talk. 6. On failure of acceptance tests, selenium is set to automatically screenshot the failing tests and include them as assets for the developer to review. 7. Chef automatically converges all of the production servers every 6 hours. Once a build has been reviewed and tagged as release Chef automatically picks up the build and deploys it to the production servers. Custom scripts + Doctrine handle migration on each server from that point on.
Jenkins is the best CI server I've ever used. I also really appreciate Maven for project management. http://php-maven.org/
It's a preview. I think they rushed it out for Symfony Live. I'm sure we will be seeing a lot more very soon.
To be honest, I'm not quite sure even after installing it. Seems to be a tool for managing your projects but also the desktop version of the sensiolabs network. I didn't really get the time to look more into it..
&gt;And I actually owe an apology to Nicoon. I was very rude to him after letting me know that I could just go to google for the stupid question that I was asking. I then found out that he had responded to a few of my previous posts with helpful replies. Sorry for being a douche man! That's alright. And it's not that you ask stupid questions, it's just that some questions are more common than others and are likely to have been answered before, which is why it is a good thing to look those up on google. &gt;After all of this I got my first job in the field as a web developer and I finished my project. Congrats.
http://www.agileinfoways.com/technical-expertise/php-open-source-developments/
Cool cool! if you click multiple times on login etc, it will spawn the same box over and over and over :-)
Only .edu probably also means only North Americans.
Incorrect sir. We have added quite a few email suffixes for individual schools per request and also some suffixes for the UK and Australia. Just let me know and I'll throw it in there.
What's your school's email look like at the end? I'll add it to the list. Also if anyone here wants an account, just say the word and I'll pm you some credentials.
Yes, they can be what ever you need them to be. Some of mine are clearing cache, recombining and minifying assets, updated the build number in the app for cache busting.
Consider using a minimum value when scaling the boxes. That or lock them
I recently gave a presentation on Continuous Integration at the AmsterdamPHP meetup. At my current work we also use the PHP Template. [You can find the slides here](http://www.slideshare.net/willemstuursma/continuous-integration-at-mollie). Contains some background, our experiences and some tips. Most important tip is to get fast hardware.
Expect a Zend equivalent coming soon, yours for only $19,995 I gotta say, the more I use Sensio's stuff, the more I love them. Not tried this yet, still grasping Symfony 2, don't need more on my plate just yet. 
This was suggested for 5.4, but was shot down.
Oh, you're kidding? They've resisted that forever. We usually roll with this as a workaround - does anyone do anything different / better? function function_name($options=array()) { // }
heh - http://www.reddit.com/r/PHP/comments/yfa8a/whats_the_best_way_to_do_this/ this was my follow on to that :D
Symfony needs at least PHP 5.3, you probably have 5.2.
I was always curious about this. Short of automating testing when you push a change.. what else can CI do in PHP? I understand in compiled languages you can actually... well.. build it, but what is the point in PHP?
[Previous discussion #1](http://www.reddit.com/r/PHP/comments/wruku/a_question_for_senior_php_developers/) [Previous discussion #2](http://www.reddit.com/r/PHP/comments/u6uti/what_constitutes_a_senior_level_php_programmer/)
There are many engineer types who would say that so long as all you know language-wise is php then you will always be a beginner. A lot of them at my former place of employment could write fluently in three or more languages. In my experience the 'advanced' skills originate in other compiled languages (like c, java, c#), or in languages initially conceived as object oriented (python) and then migrate into php. Certainly the newer php object oriented language features are advanced. But other things too like unit testing, integration testing, automated deployment, server-oriented 'cloud' architectures which are designed to be asynchronous (with message queues serving the role of data tanks during handoff) and parallel and cached (with integration of nosql dbs like memcache or Redis ) are advanced.
Hi 50k€ in Paris =&gt; Tax Free 38k€ =&gt; By Month Tax Free 3.1k€ * Bac + 3 * Pure PHP, Zend FW, Managing Postgres/Linux/Apache * 8 years on PHP * Location : Paris France
Have you tried following this: http://symfony.com/doc/current/book/installation.html The Symfony Book is actually very solid documentation.
If you're using suexec then you need to make sure you `chown` your files as well to the correct user. Is this setup as a virtualhost in apache? There is a directive for suexec that will tell suexec which user to run PHP as. If these don't match you will get these errors
Thanks for your input - that's actually kind of how I've always viewed it - the language is kind of secondary, it's the thinking processes that make you a programmer. Languages come and languages go, but problem solving skills are perennial... 
Thank you, I'll check those links out! 
i'd like an account to poke around. btw, what'd you do for marketing to get so many people at the onset?
It can automatically re-deploy to your testing server on each code push. At my shop, we use Behat (behavior-driven testing framework) and Jenkins (with github hook to deploy upon push).
Made me think this post was about [chef](http://www.opscode.com/chef/), not PHP.
Repository pattern. 
When you look back at old code you written and feel ashamed.
kk thank you.. i will probably pass the word along to the other half of the development team. he does most of the front end stuff. good catch tho! i never even noticed that.
thank you. 
Ha! I like that definition, too! If that's what you go by, then I've been a senior coder for a long time now. &lt;g&gt;
Concerning markdown: Please also add then pros and cons of creating views in another language than php.. personally I prefer php over some strange syntax which in the end gets parsed to php anyway (first con ;) )
Ah ... see ... you don't have to convince yourself you have advanced PHP skills, you need to convince THEM. All that takes is confidence. Are you confident you could implement "just about anything" using PHP? How'bout without a framework? What if you need to talk to oddball binaries with system calls? You good? Need authentication from an LDAP server? No problem. How about remote API's? SOAP? RPC? XML? JSON? Some other data exchange some idiot on the other end made up? A senior level programmer says, what's your problem? I can do that.
I'm relieved to hear that, 623 is the correct answer. To change that would brake the fact that assignments return a value, leading to it working in two different ways.
every 3-6 months for me. cringeworthy.
A solid understanding of why PHP is an awful language that nobody should use and why we use it anyways. I'm not just making a dig at PHP here, there are a lot of odd, subtle, brain damaged behaviors in PHP which are important to understand if you're doing any serious work with it. Understanding them requires a deeper knowledge of the language than most possess.
Not sure if this helps but I wrote this little guide. Http://alanhollis.com/php-installing-symfony2-with-composer/ Should have you up and running in no time.
If it ever stopped I would be worried.
When pragmatism outweighs paradigm in your code... you have reached senior level. Millions of dollars get wasted every year because of standards based on trends.
I like it in a language I speak.
A whole day and we still dont know wtf does this do.
I don't think it's that they've resisted it. According to Rasmus and implementation the core team likes hasn't been submitted.
Sadly I don't have access to a command prompt :( Thanks anyway though!
There's also this, that I just ran across today: [Stackexchange: How to really master a programming language](http://programmers.stackexchange.com/questions/165380/how-to-really-master-a-programming-language/) Some really great info there.
Sorry man I don't have access to a shell :\ However, your guide worked great for my dev environment!
front page looks sick! credentials for your openleaf account are in your inbox as well as my email address.
Thanks for checking! I quickly became aware of a few security flaws after posting to /r/compsci. I got one friendly pm about my .htaccess file missing the index ignore * and then one dude posted a comment with script tags for a meatspin.com popup. I ended up talking with him on the phone later and he was pretty cool. 
thank you... i almost gave up a few times but it was worth the struggle. i felt so accomplished after getting it up and running on the real internet.
SQL injection involves more than that though, like multibyte sequences to trick escaping functions.
none of those are really 'PHP', and a few are more of a sysadmin duty. Not that the two are mutually exclusive.
"old" being that package you put together two weeks ago.
OOP, Reflection, magic methods, closures.
TIL I'm an advanced programmer in every single language.
I think you have to do (null,null,6). the only way to do what you're doing is to pass in all arguments as a single array argument. If you like playing with func_get_args(), you can actually do this and accept both ways.
Maybe look into CodeIgniter if you're just looking to learn MVC and get used to frameworks. Should run on a shared hosting without shell access.
Maybe you could use mongodb as Database... GridFS and sharding should do the trick... Has anyone experienced it? http://ryanangilly.com/post/1091884265/3-reasons-to-use-mongodb
So I just set up two parallel examples and would be curious to hear thoughts on them: https://c9.io/wilco/namespacing
Yeah. I love PHP for quickly making websites, but I also know all the horrid flaws. I could rant at you for a several minutes about the design of its parser, its function naming, stupid things about the Zend engine, its overall lack of philosophy, etc. But I still like PHP.
I'd think a plugin exists for this already but if you have your heat set on doing it yourself you can md5(email_address + secret_password) and send it off to the new user via a link in an email . They click the link which points to a script on your end that verifies the hash +email combo and you've confirmed them. There are a million ways to do user confirmation. Keep in mind the secret password above is set on your end in the registration script. Do not use the users password since you want to use something they can not guess or brute force easily. 
to be fair, there is an ongoing standardization effort by the php developers. i do agree that dynamic typing has potential of making funky stuff happen. but all languages have their problems, java has good syntax ideas but they lead to lazy execution and the programs become cluttered - basically just layers and layers of abstraction wanking. the other languages i can't speak for, as i havent used them.
Parameter order drives me nuts. We have: array_key_exists($key, $array); in_array($needle, $haystack); then there is: stristr($haystack, $needle); strpos($haystack, $needle); ...which I always screw up. I always think "find needle in haystack", not "have haystack, find needle."
Other languages have it
Then why make this topic, looks like you just want a circlejerk :)
The ability to finish a project. As a project manager that uses a lot of freelance workers finishing is the most important. Anyone can learn more about a topic they enjoy, not everyone can finish what they start. 
Good point. 
Actually, I'm learning something, and seems like others are as well. So rather than a "circle jerk" I'd call this - dare I say it? - a "conversation?" 
Function names being hard to guess isn't something that I would call a "behavior" of the language. Memorizing the (admittedly non-conventional) names of various helper functions is not a barrier for entry into "serious work" and certainly does not require a deeper understanding of the language than anyone possesses. Based on what you said I thought you were going to come out with some actual issue with how code gets executed or at least something substantive, but you were just talking about odd function names.
I would say the opposite. When you look at code you wrote a year ago and DON'T feel ashamed.
Dude, congrats. 
SELECT * FROM image_Name WHERE name = 'monster\r\n' LIMIT 1; monster is a placeholder of the actual name 
That's what I do but with my fingers crossed behind my back.
Yes, this.
Then you're one of those developers that gets stuck in the same patterns and resists change. I'm not saying you always have to feel ashamed, as you can still take pride in your old work, but the advanced developer will consider a multitude of solutions using a process of elimination.
No, I think if you have that many optional arguments you're doing something wrong and/or should just be passing a dictionary object (array)
I hate, hate, hate when people do this. 
I think it's much cleaner than declaring variables within the parameters of a function call, and $opt = 'val' already has a nature in function calls, I believe it would return the result of setting it. though, if you want to be nitpicky about "extra syntax" it could just as easily be func(['opt' =&gt; 'val']);
http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/
Fair enough, it's just that as someone programming for 18 years I very much doubt you need to worry about not qualifying as advanced php programmer. Maybe the circlejerk comment was uncalled for though, sorry.
Thank you. A bit hard to explain because there were a lot of ideas being thrown around but I guess the "Organic Internet" was going to be kind of like our unofficial slogan. Sort of like the opposite of "Viral Internet", was meant to imply that natural goodness that comes from the community making it what it is I guess. It also kinda went with the whole nature theme and the word leaf, which coincidently is supposed to be synonymous with a document. Open document, open information, open source, natural growth... lol. 
You're right. All those short comings you just listed are exactly why it's only used for web development. When it was created the authors didn't have a real good use for it, so they're like "hey, this language is only going to be good for web development." If only they had designed the language to be SPECIFICALLY FOR web development, they probably would have saved a lot of time.
I dont mean to offend you or something. But "Organic Internet, College." is lame for a tag line. 1) doesnt make sense, non-intuitive 2) Organic Internet and College doesnt go well in a... clause? is that a clause? Sorry. On the other hand, Open Leaf is a badass name for that. Although my first impression is something that promotes freedom or open source, the Leaf in there is what makes it social, it gives an education feel, and somewhat impresses me as institutional. Goodluck! (I apologize if this is in no way related to PHP)
You can kind of do this with extract() function foo($a){ Extract($a); Echo $bar; Echo $baz; } Foo(array('bar'=&gt;'named','baz'=&gt;'parameters'); Sorry for formatting, on my phone 
Precisely what I'd expect someone who doesn't know anything to say.
Many of his points have been refuted so many times it's a wonder anyone posts this at all.
Really? Awesome! Thanks for the tip!
&gt; PHP objects? PHP regular expressions? Frameworks? Security measures? Ability to use PHP to do cool things like recursive node walking of XML files? Use of third party libraries? Or would you add something else entirely? Nah, I can do most of those things, and I'm a fairly shitty web dev. I think it's not what you can do, but how you do it. 
One does not simply code php well. 
because operations is now being scripted/automated with tools like puppet and chef, operations starts to collapse into development; hence 'devops'. 
Lol.. not offended. We live on the beach and mostly just smoke weed and play music when we're not on the computer. Also, open source is my life. I think somewhere in the back of my mind I was thinking that the leaf symbolizes the freedom of information as well as intellectual growth. I might stick with that.. unofficially. Take it easy!
I assure you I'm not. I've been coding PHP for well over ten years and my latest code is all lithium / mongo based. However, I can look at code I've done a year or two ago or more in older frameworks or in our own MVC and still think "this is pretty nice to maintain" rather than "who the fuck wrote this shit?". It hasn't always been that way of course.
Lots of different issues here. Going back to the start, I would revert your autoload, keep the include in your composer file, and then just run `php composer.phar install` and see where that gets you. The uncommitted changes is a warning that something in that directory has been updated and it's trying to keep you from blowing away those changes. Update only updates if there's new files.
I have Zend Server CE deployed on several servers. The product is pretty cool, but the CE version is more limited than I feel it should be, given the price and subscription model of the commercial stack. I've spoken to Zend staff in sales, product management, and engineering for Zend Server a number of times about their positioning for ZSCE, and I'm told they have plans to address some of my concerns. We'll see how that goes. There are few cons to the stack, honestly. It's quite solid. Zend is quick to update PHP when issues are identified. In fact, there was a major security issue identified in PHP some time ago, and Zend rolled out a patched version of PHP a full day ahead of the PHP core team. I've also noticed a few smaller issues which affect the main PHP branch, but the Zend patched version seems to already have addressed. Zend says the community edition doesn't receive the security patches as quickly as the commercial stack, but I've not found that to be true at all. An engineer tells me if you're managing your installation through apt or yum you'll get the updates the same time as the commercial stack. The slower updates may be true for the other installation mediums, though. The main con I've found is that Zend is slow to update PHP versions for non-security related fixes. They've gotten better at it, but they still focus on 5.3. The 5.4 distribution is still considered a "tech preview" and is stuck at 5.4.0. If you plan on needing PHP 5.4 in the near future, Zend Server won't work for you. In case you haven't seen it yet, here's a chart from Zend which compares the available Zend Server editions: http://www.zend.com/en/products/server/editions EDIT: I'll also add that for some stupid reason I'm still trying to nail down with Zend, their PHP distribution does not use the MySQL native driver. That fact may or may not be important to you.
There's no vhost management. If you're using it for one dedicated project, it's fine (and has pros). Trying to use it for multiple projects/hosts is a pain, I find, because you're having to use the control panel for some things and commandline for others (or iirc just commandline for everything).
I'm a "Clean Coder," too! Loved that book. 
Guilty as charged. ;-)
From the end-dev's perspective, Zend Server runs on Apache. It accepts mod_rewrite, almost every Apache module you can think of, etc., and it uses Apache config files and syntax. On the operation side, however, it uses Lighttpd and FastCGI FPM and is in many ways far superior to typical apaches. The solution I found best is to continue this abstraction to its logical conclusion: Have Zend Server CE listen on localhost:8001, and then have a standard HTTP server (it could be anything; I have used Apache and Nginx in the past, but it could even probably be Node.js lol) and mod_proxy the requests to/from Zend Server as appropriate. That system will also let you scale a LOT better, capping you, largely, at the bandwidth level, as all you have to do is modify your routing rules (via mod_rewrite if you're using Apache) and add in additional servers. Disclosure: This is how [redditmirror.cc](http://www.redditmirror.cc/) is setup.
&gt; From the end-dev's perspective, Zend Server runs on Apache. It accepts mod_rewrite, almost every Apache module you can think of, etc., and it uses Apache config files and syntax. &gt; &gt;On the operation side, however, it uses Lighttpd and FastCGI FPM and is in many ways far superior to typical apaches. This isn't quite true. Depending on where it's deployed, Zend Server / Zend Server CE uses lighttpd for the management console only. This is done so the management console will continue to be accessible even if the main httpd process dies. Everything else uses vanilla Apache httpd configured to use mod_php from the Zend Server distribution. It uses Apache modules and config syntax because it is using Apache httpd. Deployed on an RPM or DEB-based Linux system using the package manager (the recommended method), Zend Server will use the default Apache httpd instance for the OS. If installed on OSX or on Linux using the tarball, it uses its own local Apache httpd instance. The Windows package can be configured to use its own Apache installation or Microsoft's IIS if it's installed.
Well, this is usually considered bad practice, but not because you don't echo the html (you should avoid echoing html): if you embed php in html (or vice versa) you will soon end up with an unmaintainable application. The best thing you can do is to use a template engine. With a template engine you can keep your html and php completely seperated. In your html file you can use special tags to specify where variables should go and you can create those variables in a php file. One example for a template engine is [twig](http://twig.sensiolabs.org/), but there are many more out there.
PHP is a template friendly language itself. I wouldn't be confusing OP with a new technology. If anything, he should be learning how to template his code with PHP and using includes.
Hmm... Then how come its lighttpd.exe that uses 100% of the CPU when benchmarking is run on web apps? Also, why would they go to the trouble of bundling a completely extra HTTP server for just the management GUI? That would make absolutely no sense. Third, why does it get much better performance on static assets than apache?
Even though PHP is a template friendly language I wouldn't use it as a template engine. When you use PHP itself as a template engine it is far too easy to embed business logic in PHP, and especially beginners will do that. Therefore I think it is better to start using a decent template engine right away.
If it stopped much longer than another 6 months, I can **assure** you that you have serious problems. What I have found remarkably helpful is to post your code repository online for critiques. But be careful... people look at [mine](http://repo.phpexperts.pro/source/) and only point out the stuff I did years ago that I'm already ashamed of and treat it like it's the best I can do now ;p
So you can get help trying to bullshit them that you are capable of stuff that you are not?? I've seen that so many times, and many times it works!
yeah, echo'ing HTML in PHP gets annoying and very difficult to maintain when you need to change or move things. Eventually as your site gets bigger, it's beneficial to look at template systems like Twig, which I had a fun time using on one site. 
&gt; "vendor/stfalcon/tinymce-bundle/..." Yes, that's how composer's autoloader works.
You can't really control not having loop structures and other iterations in your views. In reality that is the best place for it as it's code that directly correlates to the view itself. I prefer that in my views than trying to solve a non-existent problem by trying to segregate display logic. Not incorporating business logic is a matter of programmer experience and ability. All of that should be in your controller/model.
&gt; Hmm... Then how come its lighttpd.exe that uses 100% of the CPU when benchmarking is run on web apps? This seems to be a well known issue with lighttpd and fastcgi. It's not isolated to Zend Server. I'm not sure why it would correlate to a Web app running on the Apache server. Could be related to the debugger, but without knowing your configuration it's impossible to really know. &gt; Also, why would they go to the trouble of bundling a completely extra HTTP server for just the management GUI? That would make absolutely no sense. On Windows platforms, it's because Zend Server can run with either Apache httpd or IIS. It's easier to have an embedded lighttpd process for the management console than to configure the console app for two different environments on the same platform. Also, as I mentioned in my original reply: "This is done so the management console will continue to be accessible even if the main httpd process dies." Both the management console and the API need to be accessible even in these cases. &gt; Third, why does it get much better performance on static assets than apache? There are a lot of factors which might influence this. I'm not familiar with Apache on Windows or what benchmarks you used to reach this conclusion. Zend Server and Zend Server CE both use lighttpd for the management console and API, and either Apache or IIS for serving applications. There are apparently plans to support nginx in the future, but I've only heard that mentioned once and it was quite a while ago.
Like already suggested, try to keep your HTML and PHP code separated. I find the best way to do this, is to adapt the MVC ([Model-view-control](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)) pattern. However, this of course depends largely on the scale of this project. If it is just to output some small HTML pages, I would just have the PHP code at the top of the page, and then accumulate a string, which gets outputted at the end.
Nice. I wondered how long it would be before the redditrolls would start to come out of the woodwork. Apparently it was just about an hour ago...
It's not all teaching experience - because honestly, that's just teaching the same things over and over again for the most part. I've used the language a fair bit on projects of various sizes, including a very large intranet/hr portal for a mid-size hospital campus. I doubt I've used it 10000 hours worth, tho. That would be, what, five years of straight nothing-but-PHP-coding, 8 hours a day, 50 weeks a year? 
&gt;It's a sign of not being an egotistical know-it-all dick to everyone else. So is not trolling. You know, there's a lot more to programming than just coding. There's teamwork, and communication, and being able to just get along like adult people should. You might want to work on that last one. 
Try to call as little PHP as possible inside your HTML code. Do the majority of the work in either separate files or above the HTML altogether!
You might want to look into using a templating engine like [Twig](http://twig.sensiolabs.org/)
Isn't it considerably slower for PHP calls to be inside HTML and for HTML calls to be inside PHP? I know it's unavoidable sometimes, but I thought I read somewhere its best to keep the switches to a minimum? 
Well i definitely feel i'm constantly improving; i just feel my older ways of doing things hold up. I run an open source project called sabredav; and a conference speaker. Even though i feel like i would do stuff differently than i would today, the older choices seem to be good enough. I do learn new stuff every month or so, which i would love to apply to my older projects. But I have no regrets.. I made good choices leading to maintainable projects. 
Several years old? Irrelevant. Why are you wasting your time? You were bringing the same thing up in another thread on here recently, your reply was far below the threshold, obviously it's not appreciated. Every language has it's shortcomings, including C# and Ruby. I'm pretty sure a lot of people understand this. Get off the campaign you're on spreading the gospel. A quick look at your post history shows more in the PHP subreddit than another other language (as a matter of fact, I went 5 pages deep, nothing except PHP posts). So instead of focusing on telling everyone how bad PHP is, focus on something else.
An image can be made using the [GD Library](http://php.net/manual/en/book.image.php) 
Are you referring to [clean URLs?](http://wettone.com/code/clean-urls)
php is a perfectly valid templating engine already: &lt;?php if (someTest): ?&gt; &lt;p&gt;Only show this paragraph and list if someTest is true&lt;/p&gt; &lt;ul&gt; &lt;?php foreach($books as $bookName): ?&gt; &lt;li&gt;&lt;?php echo $bookName; ?&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;/ul&gt; &lt;?php endif; ?&gt; easy to read for non programmers too. http://php.net/manual/en/control-structures.alternative-syntax.php 
When did r/php become like preschool for people learning PHP? There is a subreddit for you if you are just beginning to learn PHP: /r/phphelp . It's like r/learnprogramming but for PHP.
How do you expect us to debug this? A) don't know what a zpid is B) Haven't given us an example XML document. Or do you expect the average /r/PHP redditor to be with familiar with / have an account with Zillow?
I then did a clean install which appears to work (must have done a ton of funny stuff the first time): curl -s http://getcomposer.org/installer | php php composer.phar create-project symfony/framework-standard-edition path/to/install cp composer.phar path/to/install/ cd path/to/install php composer.phar install #don't know if this is needed Add this to composer.json: "require": { ... "stfalcon/tinymce-bundle": "dev-master" ... }, ... php composer.phar update php composer.phar install Doing exactly in this sequence installed tinymce without errors - haven't tried it out yet but it's there and there are no errors. So I suppose you run php composer.phar update php composer.phar install Or php composer.phar install php composer.phar update php composer.phar install before and after you're going to change composer.json. I'm going to check this out in more detail at a later time.
It's a little hard to give a good answer because of the lack of information really. But my first response is. Yes. If they are willing to risk their site (and your server) then you can't really charge them for something they don't want. Besides you mentioned VM, why not throw the legacy people who refuse to upgrade in a separate VM. As long as there is no VM exploit that allows them to break out of the VM it's fine if it gets totaled. Be sure to explain the consequences of not upgrading though.
I'd make them pay, honestly. PHP 5.3 came out four years ago and now we have 5.4. Your clients should know that the world around them is evolving and that something coded many years ago is going to need refactoring.
How to make effective use of composer, integrate with it, it's autoloading system, and playing along with other libraries nicely by default.
(Assumption: you're talking strictly about upgrading the server(s) hosting these sites, not the code of the sites themselves. Next time, don't mix contexts; when you do, we don't know what you're talking about.) Yes, it is wrong of you. They're paying you for managed, shared hosting; this is what is involved as part of that management. Backwards-compatibility in PHP is good enough that unless the scripts were remarkably shoddily-coded, they should keep running just fine under a newer version of PHP. This should just be a matter of Also, Gentoo on production servers? What the hell is *wrong* with you?
No, it is not wrong. They should be paying for the upgrades. Also, bake it into your contract next time.
I think it's a bleeding edge distro, so could be unstable. 
&gt;They're paying you for managed, shared hosting; This is what I do. We basically provide Drupal hosting which includes basic updates / backups / troubleshooting, and something like this is part of it. If they no longer want hosting, we will move the site for free (barring any absurdity). Makes things far easier for us in the end. As far as version compatibility, in Drupal (and I assume other projects), such upgrades are not always reasonable or possible. If I had a client who for some reason had a compatibility issue, off to a host of their choice they go. This is a bit fabricated though, since Drupal has been mostly 5.3 compatible since 6.16 iirc. Its completely possible that someone has something like a Drupal 5 site, which wouldn't run on php 5.3. At that point, you'd be looking at a potentially massive amount of work the client doesnt want to pay for, as the best course of action would be rebuilding the entire site in Drupal 7 (or just waiting for 8), and thats essentially the same amount of work if not more than creating a new site. Clients are great at not wanting to pay for shit though. Thats why its important to be able to say "Thanks for the fish! Let me know where you want me to put your site!"
It's only bleeding edge if you configure it that way. By default, it's quite reasonable.
What does your contract with them say? Do what your contract says you will. Also you should think about what you make from these clients, $10 a month hosting plan? Probably not worth it. $1000 a month client? Do what it takes.
Makes sense... Thanks for the reply. I remembered where I read that though, Big Al's PHP book that's available for Kindle. It literally says it in 1 line with no further explanation. Great book though. 
If they're paying you for hosting, then it's your job to manage these things - that's *exactly* what they're paying you for. You can't charge them extra for an upgrade that you're voluntarily making without them requesting it, that's unethical. What you *can* do however, is present each client the option of migrating to a newer box, explaining the security benefits, and tell them that you charge a *nominal* fee for that service. Try not to make it sound like a protection racket.
ZPID is a unique identifier that Zillow assigns to each property. The structure of the XML document can be seen through this link: http://www.zillow.com/webservice/GetDeepComps.htm?zws-id=X1-ZWz1blspervm6j_3v2ae&amp;zpid=84074482&amp;count=25
I had similar issues with loyal clients. I didn't want to force them to upgrade, but sacrificing security of all clients isn't viable, either. In my case, I took a look at each site and assessed the time needed to upgrade the site. I then gave them a quote for the work with an explanation and an option to move their site off my servers if that was their choice. It's not fun, but it's certainly necessary. 
So this api i was working with last week, first required you contact an ftp server to get 'current' import scripts. these import scripts were sql and shell files. calling these files downloads zips of csv files. then you have to set up or verify a temp db schema. unzip the files and run each csv which loads 3 gigs of arbitrary data into a database. of that 3 gigs of bs, i extract and validate the data, appending (or updating) my own database with the few MBs of data that actually is relevant. same time, i gotta send additional requests for assets and copy them to my media directory and set up the paths. Their documentation is a page and a half and once the data is in the tables, its up to you to figure out how the associations work (no foreign keys). Anyway, re-worked the whole damn process in 30-40 lines of php, using many instances of shell_exec. (most of the lines are actually echoing the progress / error handling)
Have you tried having it run without the database insert query just to see if it's able to fully parse through the file?
It sounds like you haven't written a proper contract that outlines exactly what is included in their shared hosting package. I don't know how much you charge them but if it's a typical shared hosting plan then you can't afford to debug their code, shared hosting customers are to be perfectly blunt often completely ignorant of everything web. They have no idea what they're doing and often have their 15-year-old son or cousin do their code. If you allow them to they will take as many hours of your day as you will let them without any concept of what it actually costs you to provide that support. Here's a bit of an alternative perspective: When you do work for free you fuck over your other customers. Money is what makes your business run around and what allows you provide a good service of fast servers and speedy support responses. The less money you make the worse service you can provide. Free support outside the scope of your servers does not help your business, all it does is keep you from spending time on issues that affect your entire customer base and implementing new awesome features. It really sounds like your contract is lacking. If I were you I would write a proper contract that covers your obligations to users **as well as their obligations to you**. A hosting relationship is a 2 way relationship, especially in a shared hosting environment. Your users should keep their code safe and performant, if they use 90% of a servers resources then you should have the contractual right to throw them off your service effective immediately (though with a refund for time not used) as they affect your entire customer base. At the same time you also have a responsibility to keep your servers updated and fast. A contract just helps keep everything clear. Write that contract, email them and if you lose customers then know that overall you're better off because the customers who can't accept that contract are ones who most likely cost you too much time and give you no profit.
You could try changing `db-&gt;query` to `db-&gt;simple_query` From [codeigniter docs](http://codeigniter.com/user_guide/database/queries.html): "... nor does it set the query timer, or compile bind data, or _store your query for debugging_..." This last thing might be the problem with `db-&gt;query`.
When was that book published? It likely teaches you some bad practices if it's more than a few years old. Particularly any books that teach you the `mysql_` functions are to be mostly shunned. [This one](http://www.sitepoint.com/books/phpmysql5/code.php) uses PDO (recommended), and has code sample of projects available for download, so it looks relatively practical as well. If you buy [it](http://shop.oreilly.com/product/9780987153081.do) and [this one as well](http://shop.oreilly.com/product/9780987090874.do) from OReilly you can get a third book for your choosing for free, as well. Say, a nice one on HTML5 &amp; CSS3 or something.
$db-&gt;query does execute. So I'm executing every pass through the loop.
try at the line 25 write unset($line);
This, my friend, was the issue. A side-effect I missed. Awesome catch.
I had tried that, but that doesn't force garbage collection. The problem turned out to be a side-effect of the database library I was using. It was keeping the SQL statements for debugging. This file was 500,000 entries, so it was blowing up trying to preserve the queries.
It's a source-based distro, meaning every time the system has to be updated, it will require an extensive amount of time (in comparison to just installing prebuilt binaries) to compile the packages, putting excess load on the server and possibly resulting in non-trivial periods (in excess of several minutes) of downtime for some services while dependencies are updated.
Not sure if this is your problem, but from the manual: "Setting a language isn't enough for some systems and the putenv() should be used to define the current locale."
That's why you cross-compile on a different machine. Or, most preferably, bring up a new machine, update it, swap machines.
Can you write a templating engine with inheritance in PHP?
Unless it's ridiculously expensive, I upgrade deprecated stuff and charge for it. *nota bene* the first thing I said. If you can't move along while programming on 5.2, and it requires work to move it over to 5.3/4 (which it does,) then you charge money for it.
That's the whole point of Gentoo. Compiling always gives you a 10-15% boost on performance and you get to pick and choose what extensions you want in your final build. I've been using it in production on big and small sites for years. There's nothing wrong with it. Plus unlike precompiled distros like Ubuntu you can upgrade it forever. You never hit a wall like you do with Ubuntu. Compiling in the background doesn't kill anything unless your VM is incredibly tiny. Furthermore we run it in Xen images so if I need to do the upgrade separately I will and then move the sites to the new upgraded images before shutting down the main one. Nothing goes down while a compile is happening. I've recompiled PHP/Apache before while a site was running with no ill effects and only had to do an /etc/init.d/apache2 restart to make the recompile live.
The locale has to match one that's available on your system. Are you sure "fr" is valid? (check against the system locales). I got this working recently (I wasn't that easy as debugging is very hard) but I recall the locales had names like en_GB.utf8 not just two chars. Also it doesn't work at all on Windows but I guess you know that.
Why does it have to match? I don't actually want to use any of the translations the system has provided... I want to use my own locale files... Edit: Holy bananas this is retarded. I just changed "fr" to "en_CA.UTF-8" (used that name just as a test) and it worked... wtf?? Such a stupid rule.
Yep, that definitely did the trick.
&gt; Compilations don't take long on modern servers Uh, that depends. The base image I use on our servers takes about an hour to compile PHP, Apache, and a few other smaller things. Particularly in these days, people may be using a number of small virtualized servers rather than one large hunk of hardware.
The rule is not stupid because translating strings is only one component of setlocale. It also deals with money, time, etc (ref php.net).
When you put setlocale('fr_FR') for instance, the system needs to know what it means (how the french write dates, etc.). Your os (debian i.e.) knows what fr_FR so it is okay. What would be awesome is to make gettext independant of the locales of your system so you can do what you want to do. When my colleagues and I installed gettext, it completely broke the accounting system because of the way money is handled with one locale and another.
I don't believe that as a host you are obligated to upgrade their systems. In my opinion, it should be presented as an option to upgrade and the OP's responsibility is to maintain a VM with 5.2 to keep legacy sites running. Also recommend amending the hosting agreement to be explicit on whatever route OP does end up taking. 
I never had the problem because the app has not enough stress I guess but it appears that setlocale is not thread safe. The best course of action would be that you test your environnement (with a couple of scripts and sleep). :)
I'm thinking I might have to use a big array with translations instead instead of gettext, since I get enough hits per second that this will likely become an issue...
I guess it depends on the number of strings you have to deal with. Remember that gettext is likely faster than a really really big array.
Good article
I don't support copyright, but are you sure it's yours to share?
What you're describing isn't development though, it's routine maintenance. If you modify the server environment their sites are being hosted in while they're still under contract with you, then you may be liable for any resulting breakages. You'll need to be fairly careful with how you proceed, depending on how the contract with your client is worded. If you don't already have it, what you need is a clause in your TOS that says that any time you wish to perform this kind of maintenance you will give some amount of notice, and that any site that is not compatible after the upgrade takes place is the responsibility of the sites owner; additionally, if a vulnerability in their site is leaving your entire server open to exploitation, you need to have terms that say that such sites will can and will be taken down at your discression until such time as their issues have been rectified.
Personally, that's how I would create my tables. They are normalized well and allow for expansion in future. Don't forget to properly index the relevant fields to keep things running quickly.
Thanks, it's standard stuff, but i wanted to check if there was something else!! :)
LOL what? I'm not maintaining your shitty website for life just cause you paid me a grand to work on it while I was still a Junior in college. Lazy? That's why I'm a coder. I get paid to stare at a computer monitor all day.
Are your server processors 64b? Either way, I doubt running a 64b OS with 512MB of RAM will help much over a 32b OS. That's a meager amount of RAM.
Use this at your own server's peril.
Are any of the sites using code that may only function properly on 5.2? You should be able to migrate to 5.3 and 5.4 without anything breaking or changing. While they make mistakes, the PHP development community tries to prevent BC breakage. 
I think you missed the point of my post... it's not that by developing their site you're eternally beholden to their support requests, it's that by providing a hosting environment for them to host their site in, they are legally (I guess this might depened on where you're operating from) entitled to have certain reasonable expectations met in your provision of service. One of those is that the environment they rely on you to maintain doesn't break compatibility and/or interupt their sites availability unreasonably. The definition of 'unreasonably' here depends upon the service contract you established when taking them on as a customer. Unless you specifically address these issues in it, then they can realistically argue that they had a reasonable expectation of (close to) uninterupted service for the period of their agreement with you, and could potentially sue you for lost income, reputation, etc. edit: I say these things having gone through similar issues in the past... I ran a hosting operation between 2000-2006, and went through the php3 -&gt; php4 -&gt; php5 transitions. 
I don't think anything has changed... stick with x86.
No, there are indeed 64-bit builds of PHP. I believe the version shipped with OSX is one example. Everything compiles and works as expected. The main difference is that integers can be much larger on 64-bit builds, and some minor gotchas with some bit-level operations.
PHP compiles as 64bit and is probably used more than 32bit builds now. There are even subtle differences due to the increase in integer size. 
Your clients are paying you for 5.2 hosting. If you don't want to host 5.2 anymore, you can give them the option to pay for you to help upgrade their app, or offer to help move them to a compatible host. It doesn't have to be any more complicated than that.
Excellent suggestions. I love reading physical books (even my kindle doesn't have the same feel), but with the web especially, things evolve so fast. It's tough to rely on things one or two years old, let alone five or six...
The GPL always scares me... i hate that actitude that anything that it touches should be open source.
A 64 bit OS doesn't use twice the RAM.
64-bit integers. Give the ability to operate integers bigger than +- 2147483647.
Pretty much what I thought when I saw the code. 
I wrote it. It is the last incarnation of the homegrown framework I used before switching to standard frameworks like Cake/Joomla. I found it sitting on my disk, and thougt it was too good to not share. 
I really don't like the GPL either, but I'm pretty sure it's a bit more flexible on that. For instance my code just talks to GPL code, it doesn't ship it or embed it so I don't need to open source any of my code, only what changes I make to Sphinx.
Thanks for visiting. I am hoping that the list of topics will create a discussion point. For example, you mention that you find the native environment difficult to manage: was there any particular aspect that you've found problematic, or are you just talking generally? 
I see this going down with a query that looks for any recipe containing the ingredients, and then orders it by the number of specified ingredients in the recipe. If the count matches the number of ingredients queried, you have a de-facto exact match. Given a recipe, ingredient, and recipe_ingredients many-to-many setup, this should be pretty easy to query. 
&gt; The example where he is passing $driver based on type to one of the methods then checks if $driver is not instance of particular type of class is pretty bad. What would be a better more concise example? (BTW, I realize the ctor is not complete, after the exception throwing block of code, it should be something like $this-&gt;driver = $driver, or doing something interesting with the new $driver.) &gt; He should probably pass it to a single method that actually throws an exception and leave all that logic outside of constructor. What is your reasoning here? &gt; Also not agreeing with multiple $variables as part of constructor.. Database adapter and table name as parameters? Why? Anytime you have all dependencies and configuration passed only into the constructor, that guarantees that you have a statefully "valid" and "ready-to-go" object directly after construction (new call). Since that is a goal of this particular class, with this particular constructor, this code meets that goal.
*But 64 is 32 twice, why not?*
I have a contribution that will hopefully aid you as you become more experienced. I suggest checking out books that are more timeless. Jeff Atwood said this well in his blog. The book I'm currently reading and really enjoying is [Code Complete 2](http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670/ref=sr_1_1?ie=UTF8&amp;qid=1349105229&amp;sr=8-1&amp;keywords=Code+Complete2). This is per his recommendation. This isn't your typical step-by-step book. Instead it's more about teaching principles and implementation which will help you grasp real-world use cases for code. I stopped bothering with code teaching books because they become outdated so quickly. IE: there is a Android section at Indigo in town that only covers Gingerbread. There is only 1 that covers Jellybean... I think online tutorials and viewing Git Repositories is a great place to try and see code in practice. Using that you should try and implement your own scaled down version of these projects. I hope this helps! Good luck on your PHP journey. :)
I do it all the time and have never regretted it. Main advantage: makes debugging a hell of a lot easier. That being said... "The amount of money you pay in child support each month" is a fairly long key... I'd never put that as a database field haha
Ha! Of course. I'll edit it ...
Personally, I see nothing wrong with this approach; but, if you want one alternative, you might try something along the lines of: &lt;?php $array = array( array( 'label' =&gt; 'The amount of money you pay in child support each month', 'value' =&gt; 26.50 ), array( 'label' =&gt; 'Some other really long, but human-readable label', 'value' =&gt; 12.63 ), // ad infinitum ); foreach ($array as $data) { echo $data['label'] . ': ' . $data['value']; } ?&gt; Granted, the downside to this approach would be that searching for specific label/value pairs would require an O(n) iteration over your array (vs. direct access using the label key name). That may or may not be an issue for you, but worth considering. There is nothing wrong with being "hacky", as long as it suits the business needs and is documented well enough to be understood by yourself and other developers.
One step further (and how I do it) is to go: &lt;?php $fields = array( 'name'=&gt;array( 'text'=&gt;'name', 'subtext'=&gt;'your full, God-given name, damnit', 'data'=&gt;'George S. Patton' ), 'child_support'=&gt;array( 'text'=&gt;'the amount of money you pay in child support each month', 'subtext'=&gt;'quite a bit, isn't it?', 'data'=&gt;'$1,234,567.89' ) ); foreach ($fields as $field_name=&gt;$field_ar) { echo "&lt;div id=\"$field_name\"&gt; &lt;span class=\"text\"&gt;{$field_ar['text']}&lt;/span&gt; &lt;span class=\"subtext\"&gt;{$field_ar['subtext']}&lt;/span&gt; &lt;span class=\"data\"&gt;{$field_ar['data']}&lt;/span&gt; &lt;/div&gt;&lt;!--#$field_name--&gt;\r\n"; } ?&gt; Then you can using the truncated field name as an id value allows you to do field-specific CSS and stuff.
There are a lot of people buying cheap VPSes out there- is there a good guideline for what qualifies as "very little RAM?" Some VPS providers still recommend picking 32-bit when provisioning a VPS.
I can see 2 solutions: * extend each item structure, as already proposed, by making the value an array; * create a mapping from the keys to labels. If your structure is constrained because it is built from XML file, then the second way seems better suited. And don't forget to escape the text if your output is HTML. BTW, you should avoid the "br" tag most of the time, and use a table, a definition list, or whatever structure suits you. If you're not sure, try applying CSS on a "br-list"... $labels = array("name" =&gt; "User Name", ); echo "&lt;dl&gt;"; foreach ($array as $k =&gt; $v) { if (isset($labels[$k])) { $label = $labels[$k]; } else { $label = $k; } echo "&lt;dt&gt;" . htmlspecialchars($label) . "&lt;/dt&gt;" . "&lt;dd&gt;" . htmlspecialchars($v) . "&lt;/dd&gt;\n"; } echo "&lt;/dl&gt;"; 
This is exactly my thoughts. There's nothing wrong with what's in the OP as long as it's understood by the development team and fits the needs of the business. Besides, for something as simple as this, it would be incredibly easy to convert the data to the alternate format you posted in the future if they keep expanding, the key names get out of hand, bring on additional developers, or whatever.
These are definitely both workable for my situation. I will have to ponder how much refactoring I should do, and to what extent it's worth the effort. I might keep it as it is because the person who takes over my job (I'm angling for a better one) is not likely to know much PHP, and it seems a lot simpler to comprehend. But I'm not sure. Thanks very much!
i don't know how they do it, but i would end up having an additional table which joins "users" with "users". the table would have two columns: "user_id" and "friend_id". so for each friend a user has, you add a row with the user id and with the id of the friend.
Someone else can provide better criticisms, but here's a few problems I picked out: * [Homegrown security in the session management](https://github.com/geon/Puppy-CMS/blob/master/puppy/class_login.php); use PHP's sessions or a session system that you know is secure. Homegrown security is pretty much *never* a good idea. * [wwForm.php defines tons of classes in one file.](https://github.com/geon/Puppy-CMS/blob/master/puppy/wwForm.php) This isn't a security flaw, it just makes it hard to read the source. You should split the classes up into separate files, you aren't charged by the inode :) * [Redirect using request-controlled - read: attacker-controlled - variables in puppy/index.php](https://github.com/geon/Puppy-CMS/blob/master/puppy/index.php) - specifically this line (it should be configured by the site owner instead): header('Location: http://'.$_SERVER['HTTP_HOST'].dirname($_SERVER['PHP_SELF']).'/../'); Like I said this is a probably unnecessarily scathing set of criticisms from a cursory glance. 
What I would personally do: printf('%s: %s'.PHP_EOL, $key, $value); I use printf/sprintf when I am defining a template of some sort. It's also good practice to use PHP_EOL instead of "\r\n" or "\n" unless you require one or the other.
Take a look at http://www.infoq.com/presentations/Evolution-of-Code-Design-at-Facebook . It's a presentaion by Nick Shrock, and is a pretty good overview of data fetching at Facebook
Maybe its working for this guy, but its not a design I'd ever use. By using text as keys, you are implicitly defining them as unique. Unless the data is coming from a system which guarantees they are unique, then sooner or later you will stumble across a short key which is being overwritten by accident, and my hunch it will probably be quite difficult to detect or troubleshoot 
Looking at FB's graph API, I bet there is less tables than you think and more of a thing/data type mapping similar to Reddit. On the other hand, you export your data and you see it organized by what seems to be table names.
That is a great point and I will add notes to the documentation to warn future devs to avoid this problem. 
thanks for this reply. i'm going to give it a shot tonight!
switch($key)
This isn't particularly bad practice. The two situations where this has a downside: * You can't have repeated keys * You can't control what order the keys go in For most uses, neither of those are important, and in most cases, having an array as a value covers for repeated keys.
I hope you take the time to properly validate those variables, otherwise you'll be leaving yourself open to SQL injection. 
I'll be the lone voice of dissent and say that I think this is not a great way to do this. Good code should be easily readable and editable, and this code is neither. Just imagine yourself getting this code and needing to work with it without any knowledge of the code base. This code is pretty opaque, and if you want to do things like style certain fields only, or any number of other edits to the view, it's going to be a hassle. It's also simply not semantic, which I think is pretty obvious. That said, this doesn't mean this is the wrong thing to do. There's a time for best practices, and there's a time for cowboy code that just makes things work. That's going to depend on what kind of project this is and what the future plans are for the project.
I use sphinx extensively for my sites. Sphinx works by creating a static index that you can then query. It does this by running an expensive, time consuming query on MySQL every so often (I have cron tasks running ever 5 - 15 minutes depending on need). Sphinx would be great for searching for a given ingredient since it's got a built-in, extremely fast text searching mechanism. This will be very useful for searching for similar ingredient names on the occasion where someone enters something that doesn't match exactly. To set it up, you would give it a general query that would suck up all of the ingredients. Something like: "select * from ingredients". Next, you would set up a cron task to run this query every so often, like... I don't know... 15 minutes or longer, depending on how frequently you expect new ingredients to make their way into the db. After that, it's a matter of doing a 2-part query. See - sphinx will search for a given ingredient name, then spit out a primary key. You will then need to query mysql with the primary key you received from sphinx to return everything else. This is, as it turns out, much faster in many cases than just doing the text search on mysql itself and cutting sphinx out of the loop. Here is an example mysql query: SELECT recipes.*, ingredients_recipe.quantity FROM recipes, ingredients, ingredients_recipe WHERE ingredients_recipe.ingredient_id = ingredients.id AND ingredients_recipe.recipe_id = recipe.id AND ingredients.id = {sphinx_return_key} Send me a PM if you need help setting it up. :)
are there some built-in validation functions?
One thing to keep in mind is that integer indexes are faster than string indexes. see: http://nikic.github.com/2012/03/28/Understanding-PHPs-internal-array-implementation.html It can make a difference if you are sending a million emails, or if you are rendering a million uncached HTML pages from string indexed template variables. The other reason to keep string keys short and identifiable is the same reason as with database column names, to make them easy to remember, thus avoiding bugs through oversight. For eg you may set: $p['this is a long string:'] = 'test'; and then down the page print: echo $p['this is a long string:']; find that it doesn't print and pull your hair out not realizing that you have a double space in the key name, or a tab instead of a space, etc. string indexes also require that you check that the key exists before accessing it, which adds more logic and a further read. A solution with a list of arrays (which are both the same datastruct in PHP): $a = array( array('Name', 'Eric'), array('Address', 'Wherever') ); foreach($array as &amp;$field) { printf("%s:\t%s%s", $field[0], $field[1], PHP_EOL); } the *&amp;* before *$field* will access by reference, PHP5 or later. That is the fastest and most efficient way to access a simple data struct, also the safest since you don't have to check if the index exists before calling.
&gt; to display information on an email [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) Page 5, 2nd para. 
If you can use a DB, store your key labels in table 'label' and retrive by key association. BAM! foreach($theArray as $k =&gt; $v) { echo getKeyLabel($k) ?: $k . ": " . $v . "&lt;br/&gt;"; } function getKeyLabel($key) { $row = $databaseModel-&gt;find('label', array('key' =&gt; $key)); return $row['key']; }
pdo is initialized like this $db = new PDO('mysql:host=localhost;dbname=DATABASE_NAME', $user, $pass); statements are prepared normally, or since we're binding values (next step), we can write it like this $sql = 'SELECT * from tablename where colname1 = :something'; $statement = $db-&gt;prepare($sql); for validation, bind the values to the query $something = "something"; $statement-&gt;bindParam(':something', $something, PDO::PARAM_STR); then you execute the query and handle the result if ($statement-&gt;execute() &amp;&amp; $row = $statement-&gt;fetch()){ echo "something = ".$row['colname1']; } there are so many ways to use pdo, lots of fun methods.
XHTML? Yes.
*slaps over head* That won't help him here. They're using limit and offset. PDO isn't a validation function. 
Cheap and dirty, depending on what kind of code is in your subpages (mmddyyyy.php), but can you just do an include(mmddyyyy.php) and then just reference $title?
The difference between 64bit and 32bit is how much room it can allocate on the system. In particular, you are able to allocate 2^64 registers, rather than 2^32. Referencing export02's original comment, it doesn't use twice the ram, but allows you to use more ram than the 32bit build.
It'd probably benefit you to look into the "right" way of doing this - storing your blog entries (date, title, content) in a database table. It may sound complicated, but you'd get the hang of it pretty quickly given the number of tutorials aimed at exactly what you want to do.
Really interesting, thanks for that!
If you want to deal exclusively with flat files, rather than with a database, how about having your blog posts each in an XML or JSON file? This would be easier to parse than a PHP file. Then you could just have an index.php file, which lists your title from each file, and a view.php file, which you could pass a filename to: view.php?file=20121002
Not to mention Joomla's documentation which was **terrible**.
What dohpaz said, make an array of arrays
From the site: _"Bolt is a tool for Content Management, which strives to be as simple and straightforward as possible. It is quick to set up, easy to configure, uses elegant templates, and above all: It’s a joy to use. Bolt is created using modern open source libraries, and is best suited to build sites in HTML5 with modern markup."_ 
I made it work using this function : function getBlogs() { $blogs = array(); $list = glob('blogs/[0-9]*.php'); foreach ($list as $file) { include($file); $blogs[ basename($file, '.php') ] = $title; } return $blogs; } Then, in my index.php I can easily loop on the getBlogs return : $blogs = getBlogs(); foreach ($blogs as $key =&gt; $title) { echo sprintf('&lt;a href="?article=%s"&gt;%s&lt;/a&gt; &lt;br /&gt;', $key, $title); } Quite simple and easy, actually. That being said, I can only agree with pskipw. This is not the good way to make a blog. Once you'll get a lot of article, PHP will have to stat and open all files in order to build an article index which would become very expensive.
Can you tell us a little about how it works. Eg does it use Symfony2, do you connect to database with PDO, is it an MVC framework, what template language do you use, does it use Sass, etc ???
A 64 bit compile *does* use twice the ram for pointers. And PHP's core uses a lot of pointers. So while "actual data" usage won't increase, the memory overhead will. So it may not purely double, but it will increase significantly...
The difference being that *they* are the host that is being paid and *they* are voluntarily upgrading. They could just not-upgrade.
Pleeease up your body font-size to 18px, it's hardly readable otherwise :)
It's probably much better just build a custom framework or use an existing (i.e. zend framework, codeigniter, etc) for that.
Good stuff. Sounds like you're doing it all with solid solutions. 
[Yes!](https://github.com/AntonioCS/View)
By the error message, i'm guessing your PHP version does not have Curl support. If this a server you're running yourself, or is it a common distro? 
Thanks for holding the internet back.
I definitely agree with you there. To me, the biggest offender of this is database communications, especially when the database resides on a different host than the web application. I also believe that SSL/TLS is not always needed, and when liberally applied to everything, it can make things worse (performance, maintenance, etc.), rather than better; for example, when transmitting sensitive information such as login credentials and credit cards, all communications should be encrypted. I know this is probably what you're referring to, but I wonder how many people would go overboard and make all communications encrypted, just for the sake of "security".
Thanks, that was our intention. :-)
Make it so. PNLP is one hot mama
I took pity on you - it's now 12.5pt Ubuntu :P. I agree, the text can be hard to read (I'm just used to small print).
This is actually pretty cool. Got it set up on my dev server to play around with and I'm liking all the pretty charts. Does anyone know what kind of impact this kind of profiling will have on a server? It's all fun and games on dev, but I am not sure I would put this on a production server.
I don't think the design is bad, I prefer simple designs myself. Less 'stuff' to distract the user from internalizing the actual content. But I've always been a minimalist I guess
May i humbly offer some alternatives Linux ngInx postgreSql Php LISP liNux ngInx Php poSgresql NIPS poSgresql pHp linUx nginX SHUX
The guy must really hate Cloud9 and the like. 
As said by others, I like the simplistic design - buying a design makes it look a lot worse to people that know it's been bought. I say keep the simplistic design just touch up a couple of areas.
How does using PDO instead of a native db handler NOT help the man when it comes to injections? PDO does a good job of mitigating injections by properly escaping query params. 
thanks for all the responses. i read a lot of tech news and it seems like so many of the "hacks" or security compromises that garner national and international attention employ the exact methodology you are advocating to protect against. I find it really crazy that these big corporations aren't validating and sanitizing the data being submitted by users. why do you think that is? 
Because neither a native db handler nor PDO handles prepared statements for stuff like LIMIT and OFFSET clauses. See the rest of the thread. Prepared statements is **only for actual data**, not keywords, fields, or, like stated, LIMIT and OFFSET. 
Well, eventually it boils down to personal preference, but also suitability for a given job. If you enjoy building and maintaining websites using Drupal, that's fine. However, a lot of our clients (who work with content in a site) get really confused by drupal's interface. I, personally, really dislike the way Wordpress templates work, but others might really like it. What we're trying to do is not build _one_ single tool that you should use to build all of your sites. For some of the jobs that we encounter often, Bolt hits the sweet spot between flexibility for us, and ease of use for the eventual client. For larger projects we still use something like Drupal, or something built from scratch in something like Symfony. Why _you_ would want to use it, is not for me to say. I can only try to convince you to give it a go, and you might like to use it for a project that one of your other preferred tools isn't optimally suited for. ;-)
&gt;I, personally, really dislike the way Wordpress templates work How do you mean?
I like web IDEs now that ace and codemirror seem to work in Opera, previously there were issues with the cursor and inputting text. I have always used [Shiftedit](https://shiftedit.net) but I finally got [Koding](https://koding.com) and I've been trying it out, it's nice. Any plan on hosting yours when it matures?
I think that templates should _not_ be written in PHP, but in a specifically designed template language. This allows for cleaner, more elegant templates. If the templates do not allow for PHP statements to be included, it also helps prevent lazy shortcuts, and at the same time it benefits the seperation of style/markup and code. Other people feel that "PHP _IS_ a templating language". I disagree, though. But, like i said, that's personal. Here's an article on the matter, that i recommend reading: http://fabien.potencier.org/article/34/templating-engines-in-php 
Oh, you're one of *those*. I have infinite respect for Fabien, but on this, we must disagree. I've spoken about this topic at length in this community, so I'll summarize. The simple fact of the matter is, adding *another* language to your View layer doesn't actually do anything to preserve your layers, you've only added more that has to be parsed and reinterpreted. It's in no way more "pure" than keeping PHP right in your templates, it just makes people feel good in *thinking* that they're isolating things when they're not. It's like single-stream recycling. The amount of work you have to go through to **re-implement** all of the language-native features is unnecessary and **redundant**. And now both your dev and design teams must learn yet another new language. There is precisely *one* instance where I recommend an alternate language for your templates - and that's if you're mixing multiple languages. Say, if you have a really thick JS layer on a site that you're using JS templates for, you can share those templates with the underlying language. That's a great time to pick a single, universally supported template language like Mustache. Otherwise, it's a complete waste.
Would you actually code on a tablet?
&gt;I think that templates should not be written in PHP Okay, I'll bite. Why shouldn't templates be written in PHP? Because I've yet to see an argument which actually holds water. &gt;This allows for cleaner, more elegant templates. As does PHP. The elegance of the code is up to you, not the template language. This holds true regardless of whether we're talking about PHP or not. &gt;If the templates do not allow for PHP statements to be included, it also helps prevent lazy shortcuts Here's a thought: Only use presentational logic in your presentation. If you limit your templates to printing out variables, using if-statements for conditional blocks, as well as for loops for data sets, it works just fine. &gt;and at the same time it benefits the seperation of style/markup and code. This is a strawman. You can have separation between your business logic and your presentation in PHP too. Here's an example: http://www.reddit.com/r/PHP/comments/v0041/help_with_template_engine_without_str_replace/c503yed Oh, and if you intended to say that it creates a separation between presentation and logic, that's just plain false. Presentational logic is still logic, regardless of whether it is implemented in PHP or some other templating language. &gt;"PHP IS a templating language". I disagree Well, then you'd be wrong. Rasmus originally designed PHP to be a template language with a set of libraries. &gt;Here's an article on the matter, that i recommend reading: I'm not impressed.
&gt;There is precisely one instance where I recommend an alternate language for your templates - and that's if you're mixing multiple languages. So I managed to convince you of that from that discussion we had a while back, eh? ;) Edit: scratch that, the discussion was with [SkepticalMaritan](http://www.reddit.com/r/PHP/comments/uxnyz/thickmustache_an_extension_to_mustachephp_it/c4zn12u?context=3). My bad. 
&gt;Not a programming language that can also be used as a templating language. Again - by using a meta language, *that is precisely what you have created*. It's a waste of everyone's time. Teaching your designers a bit of PHP isn't too hard. It's a hell of a lot easier than getting a design working in IE, that's for sure.
I clearly disclaimed it as a personal preference. &gt; &gt; obviously: spaces is the only correct answer &gt; &gt; ಠ_ಠ Haha, I was almost absolutely sure that you'd bite. ;-)
Right, and I agree with you fully. There's basically no real argument not to use PHP for templating other than that one use case. 
That they _could_ learn is not the point. They feel (and I, personally, agree) that a dedicated templating language creates cleaner code that's easier to maintain. And since somebody else already did all the hard work on parsing, lexing, compiling and caching, for me and my team there are really no significant drawbacks. 
That's probably the greatest lie people who use a templating language built on-top of PHP tell themselves. Using a meta language does not make it easier for front-end developers to use. It's only an additional layer, wrapping the PHP functionality. The truth is, the front-end developers would still have to learn a language, and it doesn't matter if that language is PHP or a meta language you invented. &lt;?= $variable ?&gt; This isn't any harder to learn than this: {variable}
Clever boy ;). When you gain access to the server be sure to disrupt all the important critical systems not installed on it. It's a throwaway virtual for a reason.
&gt;a dedicated templating language creates cleaner code that's easier to maintain. One last point and I'll leave this alone. This is completely related to the language you've chosen, not the fact that you've chosen to use a template language. PHP is *ugly*. Not all languages are as bad. Using short tag syntax improves this but causes other problems.
&gt; &lt;?php echo $variable ?&gt; &gt; &gt; This isn't any harder to learn than this: &gt; &gt; {variable} Well, perhaps. Not going to argue. But, can you honestly say that this doesn't look much cleaner to a person without (programming language) coding experience: &lt;?php echo htmlspecialchars($var, ENT_QUOTES, 'UTF-8') ?&gt; than this: {{ var }} Or, if we add a simple if statement. You must agree that this looks nicer (again, to the eyes of a non-coder): {% for item in items %} * {{ item }} {% else %} No item has been found. {% endfor %} than this: &lt;?php if ($items): ?&gt; &lt;?php foreach ($items as $item): ?&gt; * &lt;?php echo $item ?&gt; &lt;?php endforeach; ?&gt; &lt;?php else: ?&gt; No item has been found. &lt;?php endif; ?&gt;
**Bonus**: It rhymes with "Machu Pichu"!
Are you serious? &gt;But, can you honestly say that this doesn't look much cleaner to a person without (programming language) coding experience: This one barely ever happens, and it's questionable whether that logic even belongs in the presentation layer to begin with. It's a dishonest argument which Fabien Potentier has presented. &gt;Or, if we add a simple if statement. You must agree that this looks nicer (again, to the eyes of a non-coder): No, I don't. Furthermore, that code example has made the PHP snippet more slightly more complex than it needs to be. Again, dishonest. &lt;?php foreach ($items as $item): ?&gt; * &lt;?= $item ?&gt; &lt;?php endforeach; ?&gt; &lt;?php if (empty($items): ?&gt; No item has been found. &lt;?php endif; ?&gt; Now, you might argue that this code is *longer* than a meta language, but that's really a non-issue. Fact of the matter is, the above PHP syntax isn't any harder to learn than what a meta language would be.
&gt;You're the one that's whining about me voicing my personal opinion No, I'm not. I'm contending the points you've presented. &gt;that i've clearly disclaimed as personal opinion. Except you cannot disclaim claims once you've made them. Whether they are your personal opinion or not, they are points which can be contended.
&gt;Using short tag syntax improves this but causes other problems. Worth noting that &lt;?= is always available since 5.4.0. 
Once we get closer to a 1.0 release, there will absolutely be a 'demo' site with an autoreset and a big red button. &gt;GitHub is quickly growing a reputation for being a dump of half-assed abandonware. Really? I've not heard that before. In fact, I only see more and more reputable projects moving towards github. If you have links, i'd be interested to read about it.
Funny thing is Google was trying to have a web browser replace desktop applications with the chrome book (and all the google apps such as google docs). It's an interesting concept and I for one like the idea of my computer being an amorphous web entity that I connect to using multiple interfaces (work computer, home computer, phone, tablet, etc.) We have tried to bridge the multi-computer gap with programs like dropbox that sync files between the computers but it seems the future is to just house our files somewhere on the internet and our computers connect to them.
Me too. I haven't seen increase in CPU/memory increase ;-)
Needless to say, I agree with you on those points. What I think some people in here seem to forget is that we often make tools in PHP, just to make the lives of people who _don't_ know PHP a tiny bit easier. :-)
I like the look. It reminds me a little of the Sublime Text site. I think they're both simple and to the point, as buzzword-y as that sounds. They showcase a product that speaks for itself. 
Then explain better what it is that you want to do. Your description wasn't really that intelligible. 
You shouldn't. You're potentially opening up a security hole on another person's website by demanding that they include remote scripts. There's a reason why such a feature is disabled on many installations. 
Well, if you tell us what it is, there might be other better options which could be used. 
You're looking for an iframe. Its either that or copy pasta.
LN2P has a nice flow to it. Also *Alain Toupée*.
A nice way would be to write some javascript that makes an ajax call to _your_ website which hosts the script, returns the content, and then injects that content into the document where they want. This seems a whole lot better than giving them PHP code to put on the server and has the added bonus that they don't have to be running PHP and they only have to add one line of html (A script tag whose source is the JS file on your server)
&gt; GitHub is quickly growing a reputation for being a dump of half-assed abandonware. I think it's in the same vein as the argument that applies to PHP: It's easy to use so you have a lot more people on it, which means a more public display of terrible code. 
That's a bit too much to fit in a comment reply. But something quick can be thrown together with jquery. http://api.jquery.com/jQuery.ajax/ So you'd write the PHP that lives on your server like /stuff.php which you would hit via ajax and it would return a JSON response like { content: "&lt;html stuffs here&gt;" } (Or it could just return the html and you dump it straight in, up to you. Then once you have the content you'd just do `$('&lt;element they want the content in&gt;').html(&lt;your content here&gt;);`
DokuWiki (https://www.dokuwiki.org/dokuwiki). Their default design is responsive. (And of course it's a pretty nice wiki, too.)
So this is what happens: 1. Person includes javascript on their pages 2. Javascript makes a request to your server to get the _output_ of your PHP script via AJAX 3. Javascript takes that output and insert it into the document. Now, if you want to get _really_ fancy you could do this 1. &lt;script&gt; tag's src is your PHP file 2. Your PHP file will output Javascript that will write the contents to the document The second method is probably your better bet in hindsight
well, I read this recently and I was kind of surprised - http://typicalprogrammer.com/?p=143 &gt;It started as a place for mothballing unmaintained and unnecessary projects, and that is still most of what is hosted there. But it’s turned into a kind of World of Warcraft universe for programmers, where they are ranked by their commits and which projects they have trunk privileges on. I read about a recruiting company built around the idea that github reputation means something, so I guess if you aren’t committing to github you won’t be getting a job at the coolest startups. The good old days of writing FizzBuzz and moving Mt. Fuji during your interview are over. The majority of stuff on github *is* unmaintained and unnecessary, and a lot of it is just shit, it's very high signal-to-noise. It just looks more professional to host your own code, or at least use Sourceforge or something - IMHO. Although Linus' admission that git is difficult and unwieldy by design makes me feel better. I've never really been able to get used to it, I use [Fossil](http://fossil-scm.org/index.html/doc/trunk/www/index.wiki) and it's so much easier.
...or you can just list out the technologies you use, like everyone else; you're going to have to explain any acronym other than LAMP, anyways. What's the point of this post again? Perhaps you were looking for /r/fossworldproblems?
I think it's a fantastic name, and what a coup to own a four-letter dictionary word dot com.
I'm going to save you a bunch of headaches and recommend right now that you ditch ImageMagick in favor of GraphicsMagick. Fuck IM and their constant regressions and weird-ass bugs. We have a home-made dartboard in our office with the IM wizard on it. There are a lot of holes.
why don't you just serve that up, then? No PHP, just XML. 
&gt;You could spend 5 years here and never see Nicoon agree to disagree. He's got an ego the size of a small galaxy, so you're better off making your point and then ignoring him. What the shit, mate?
&gt;A nice way would be to write some javascript that makes an ajax call to your website You've clearly never done this, because you'd get stopped in your tracks by the Same-Origin Policy. You cannot communicate between domains via AJAX. At least not without invoking CORS, which doesn't work across browsers. 
My main priority was getting out a working beta on oct. 2. In the coming months, leading up to the 1.0 version, we're going to refactor these things, to make them cleaner and more maintainable. 
I don't know you, but judging from your attitude in this thread, i'd say that senormoll is spot-on with his description of you.
&gt;I don't know you Exactly. Neither of you do. I've not seen any of you before today. &gt;but judging from your attitude in this thread, i'd say that senormoll is spot-on with his description of you. Why, because I'm defending a position? Gosh, the two of you are assholes. It's not my fault that you decided to take the criticism of the points you presented as a personal attack on yourself. 
Who cares. This is a shit post.
Found it interesting over [this article about Symfony Live in London](http://deeson-online.co.uk/blog/symfony-and-drupal-8-lowdown-symfony-live-london) and thought you guys might like.
1. phpdoc is an established tool which pretty much everyone knows about. 2. It's been months since v2.0 was announced. ... which leads me to ask: What's the purpose of you submitting this? If it is to spread the word, you're preaching to the choir. If it's for some other reason, I'd like to know. 
That won't do, I'm afraid. Bolt will definitely not run on servers with PHP 5.2, because the underlying code relies heavily on PHP 5.3 features.
But PHP is server-side and the front-end is client-side. 
1. I just found it and think it's awesome 2. cool, I did not see it then I am a slow singer in the choir, sorry for the noise. Otherwise, let's sing this again?
PHP is one hell of a templating language. You seemed to miss another very important use case for templating engines: When you allow for third-party templates. Think of services like Shopify, etc. There is no way you'd want random template authors to e.g., do: &lt;?php exec('horrible things'); ?&gt; PHP isn't a very good templating language either; the biggest missing piece for me is the lack of template inheritance. &gt; And now both your dev and design teams must learn yet another new language. Learning templating languages like Twig or Smarty would literally take any competent developer less than half a day to master.
Good point.. The moment you allow &lt;?php .. ?&gt; in your templates, you have literally no control over what people can do in the templates. 
Which doesn't have anything to do whether the code base is written in PHP or not. You can find countless of responsive template packs for wikimedia for instance. If you're choosing the wiki based on what the CSS looks like, you're doing it wrong. 
That is their problem. The checksums are there for a reason
&gt;Well you're just being obtuse. You're the one being obtuse. &gt; I am looking for a PHP responsive wiki The responsive part has nothing to do with PHP, nor whether it is a wiki. It's up to the template. &gt;which is not basing it on what it looks like, it's basing it on it's UI for a range of devices, which is doing it exactly right. No, you're doing it wrong. You're not deciding upon a wiki based on functional requirements, you're deciding on one based on graphical requirements. Pretty much every popular wiki, such as, as previously mentioned, mediawiki, is wholly decoupled from the presentation. You're deciding upon a wiki not because what the underlying engine can do, but what the templates look like. 
Except it's a question which has absolutely nothing to do with the scope of this subreddit, which I explained to you in the initial post. &gt;Again you're equating the capabilities of the front end with respect to dealing with loads of different devices with 'graphics' I said graphical requirements, i.e. presentation. &gt;It takes a special kind of engineer - i.e. an arrogant knob jockey - who answers a perfectly legitimate question with the response 'No that's not what you want at all I know best!'. That's a complete strawman and you know it. All I was saying is that plattform choices should be done from your functional requirements. Find a wiki that you're comfortable with and does what you want, and then find a responsive template which you can transform. &gt;Let's make sure we never meet. Yes, let's.
&gt; Except it's a question which has absolutely nothing to do with the scope of this subreddit, which I explained to you in the initial post. Apart from the fact that I want a PHP one. Which I explained to you in my second post. So yes I didn't make it clear initially, but then I did. So there's that. 
Which still doesn't make it fall within the scope of this subreddit. We handle questions and content related to PHP. This question isn't. Anyway, I've said what I came to say. There's no point in continuing this. 
You should try netbeans when you start writing code, it has a great built in dictionary. Saves my ass when I can't remember built in php functions. http://netbeans.org/
You'll learn through repetition, so don't worry about memorizing things. Just keep the [PHP manual](http://www.php.net/manual/en/index.php) handy, and I would suggest creating a bookmark folder that you can use to organize other resources so that you can quickly navigate as you go. Any IDE that offers autocomplete will definitely help you out. In addition to netbeans, as shyne151 pointed out, there is also Eclipse - specifically PDT (PHP Developer Tools) which is free, or Zend Studio (the "paid" version of PDT - but offers a 30-day trial). You might try a few IDEs out to get an idea of which one works best for you. Thankfully in this day and age, most everything you'd want to do in PHP has already been done, and a blog written about it - so Google is your best friend, aside of PHP.net. As for your memory, well - based on a few assumptions, you might want to make sure that you get enough sleep (go to bed and wake up at the same time every day), eat healthy (take supplemental vitamins if necessary), exercise, and remove as many unnecessary distractions from your working environment as possible - personally, I find playing classical music at a low volume tends to help my mind focus when I want to study something. Best of luck to you! And remember that /r/PHP and /r/PHPhelp are here when you need us.
At that point... I would just use symfony
If only their personal license was $40 cheaper. $100 is a lot to spend on one piece of software for personal use. $60 is justifiable. $100 is what I spend on my operating system...
No, I don't think that's fair, since this is still a slimmed down framework. You're just better organizing your controllers a bit (I linked to a different method in the article).
Get work to pay for it. First thing my boss asked me was what IDE I used and that he'd buy me a license for whatever if he didn't already have it. 