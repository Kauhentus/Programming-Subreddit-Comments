You're absolutely right. The submission isn't very good, but anyone downvoting that statement is a fucking imbecile and would get shot down at /r/netsec or any other security-conscious community. Most of these are just sane default settings. `register_globals`, for example, can make a perfectly secure application suddenly vulnerable. Limiting the privileges of your code is best practice. Most exploits *are* due to flawed code, and this is about mitigating the damage when it gets broken. To put this in terms you (mardix) can understand: Would you run your code as root? Why not? After all, your application is secured, right? Downvote and move on, but for the love of god go learn about defense in depth. Your code will never be bulletproof, and believing it is displays staggering ignorance to security. /nerdrage
I wrote something like this about 5 years ago - it was really messy but it was quite easy as XMPP is very well documented. I can't remember what I used now; but have you checked http://code.google.com/p/xmpphp/
huh, i saw this earlier but it actually slipped my mind while i was looking for other solutions. I assume i will need to set up BOSH for this right?
Personally i don't recommend to write one from scratch, you'll end up with a time-consuming task that could be solved with an existing library. In the last 3 months I have built an application that manages remote devices through xmpp. I searched for all libraries for php, and found out that [JAXL](https://github.com/abhinavsingh/JAXL) is the most complete and it is not dead, comparing to the competition. The only problem is the lack of good documentation, but reading the code (even though its far from perfect) is enough to understand it. The [author's blog](http://abhinavsingh.com/blog/) has many posts with useful information.
Thanks I understand. So first I have to check if he/she has a child and for that I need to ask database. I already use header for non links to home page. Thanks again.
Memory is something you should consider, absolutely. Be careful with creating static things, but request-level static variables are usually not huge things that require any signficant memory. A typical singleton database class has very little that persists. Also, if conserving system resources is a concern, the alternative of opening a new database connection or creating a new object instance every time it's used is much, much worse.
Not sure what you're looking for but [Restler](http://luracast.com/products/restler/) can be a big help. 
Good question, Simple answer, no. Write one yourself so at least it feels clean.
[Frapi](http://getfrapi.com/) may help
http://www.infoq.com/articles/API-Design-Joshua-Bloch and http://www.infoq.com/presentations/effective-api-design
I was afraid someone might say that. I seem to have reached the same conclusion.
Zend is a framework. A framework is a set of libraries that have a structure and utilities that cover the most common or hardest tasks. MVC or Model-View-Controller is a paradigm that many popular frameworks use today. The idea and purpose of MVC is to separate out your code into the three categories making your project loosely coupled, more readable, and easier to maintain. For example you will have classes that represent models that you will pull from a data source likely a relational database. View is sometimes considered your front-end or HTML and design code that the user will interact with. Controller is all of the business logic that responds to requests and manipulates the models.
I mean obviously I may be wrong, but right now I am developing an eCommerce website with a few special requests such as multiple languages. I found it much easier and less time consuming to just write a new one from scratch than to use something off the shelf, especially with the substandard APIs that some developers churn out these days. I've heard more Zencart horror stories than I care to repeat. 
Okay so, framework is pretty clear (though I find the name framework to be perhaps misleading). About MVC; Model represents information gathering? Could you maybe give a bit more information (or examples) of what would fall under this aside from database interactions? View is responsible for anything sent to the browser? I imagine that would be something like template systems and making sure the appropriate css/js files are being called? Or is there more. Controller sounds like the main chunk that 'does everything else'? Does that include input processing? (ie: process $_GET for navigation or $_POST for something like posting a comment? How separate are they? Are they only separate in terms of files/classes or are they also separate in having little direct interaction with one another?
Looking primarily for documents on good API-writing techniques, things to avoid, etc. I will look at "API Builders" like Frapi and Restler to see how they work and get ideas, but I won't be using them; I prefer to write the whole thing myself, since it will essentially be a single PHP class that hooks into my existing classes.
There isn't really a concrete definition for MVC and each framework interprets it differently. Your understanding MVC is on track with my concept at least. Often Models can be implemented using an ORM like Doctrine2 or Propel. I've only used doctrine myself. The separation of the code is something that is a matter of taste and leads to debates. Some people say that no code at all should go into a template (as in the View) but something are easier or necessary to do in a view such as looping over an array to create a table of data. Sometimes it's helpful to have methods in a model's class that either initialize, validate data, or spit out a special format. Being an MVC purist can become too difficult. Personally I like the way that Symfony2 is structured. But I'm getting more experience with Zend and it works well.
Not really, bosh would be in the javascript. This is a php implementation. If you wanted two web browsers to communicate with the server then bosh would be the way to go but you could also write your own implementation of long polling and keep all the xmpp server interactions in the php. Theres tons of different ways to do browser to browser messaging like that, but all face the same problem of http being a non persistent protocol. 
I've been working on a CMS for a while, and I think that maybe it'd count as an MVC. Or rather- I made a module loading framework without any other default functionality. But I created CMS modules for it that are essentially separate in function and could be separated into MVC categories. For my own sake though, I should probably spend some time soon looking into other products that are out there. As a sort-of side question; what is a good place to get feedback/input on a CMS you've created (is r/php a decent place to ask for that kind of feedback at all?)?
I started using MVC and the MC part is really already in form of an api, ill just need to duplicate some functions on the controllers, to make them use a view that is pure json/xml/whateva but the api functionality is already there.. 
I'd say put your code on a free project hosting site like google code or github. Then you could start posting links to appropriate places for feedback. People often submit code review requests here, but often get some backlash. You could try /r/phphelp or /r/learnprogramming.
Short list for RESTful frameworks in PHP: http://blog.programmableweb.com/2011/09/23/short-list-of-restful-api-frameworks-for-php/ PHP Component and Library API Design Overview by Ralph Schindler http://ralphschindler.com/2011/01/18/php-component-and-library-api-design-overview/ A large collection of more generic API design resources http://theamiableapi.com/api-design-resources/ 
This is essentially what I have. Half of my API is done because I have very nice classes with functions that don't depend at all on where I use them in the application. I just need to write the API controller and want to make sure I start off on the right foot.
warning: I have never write an API, and im starting with MVC, and im a junior php developer What i have to access my site is something like this site.com/&lt;Controller&gt;/&lt;View&gt; What i Would do is site.com/&lt;Controller&gt;/&lt;ApiView&gt; Same controller, same acces, just a different view.. so it send Json instead of html.. then you document the use of Apiview, and you got yourself a nice API This would mean an Unrestricted access api (im talking about abuse of the resource, not securing access trought authentification), if you need to set a cap like 1000 uses of the api, the controller can interact with a new model that keeps track of the use of specific user/ip/country/whateva
You made me laugth :DD, But I still like Pyro CMS
If I understand Factory correctly (disclaimer: probably not) then it would work well for DB abstraction: class DBFactory { public function load( $driver ) { //code here } } $driver = 'MySQL'; $dbf = new DBFactory(); $db = $dbf-&gt;load($driver); $db-&gt;connect(); $db-&gt;query("SELECT `ohHiMark` FROM `theRoom` WHERE 1"); $driver could then be switched to something like 'PostgreSQL' to load a different DB type.
If you're going to make it an actual RESTful API, at least have the basic following properties: * Correct HTTP Response Codes (so 200, 201, 400, 403, 404, 406, 409, 500, 501 are probably you're most common) * Responds to Accept headers. If I say I Accept: application/json, I better get JSON returned (with the Content-Type being application/json) OR a 406 Not Acceptable * You said POST, but it should respond at a minimum to GET, PUT, POST, and DELETE * GET's are idempotent and have no real lasting effects on the server. * It's stateless. That about covers the basics. 
Look at this post, and write your own Framework: http://anantgarg.com/2009/03/13/write-your-own-php-mvc-framework-part-1/ You will understand how the things work in about two days, then you can try to use Codeigniter, YII, Cake, Symfony, Zend or whatever you want. Don't reinvent the wheel! Sorry for my english :)
change the htaccess file so you can get rid of the index.php portion: &lt;IfModule mod_rewrite.c&gt; RewriteEngine On RewriteBase / #Removes access to the system folder by users. #Additionally this will allow you to create a System.php controller, #previously this would not have been possible. #'system' can be replaced if you have renamed your system folder. RewriteCond %{REQUEST_URI} ^system.* RewriteRule ^(.*)$ /index.php?/$1 [L] #When your application folder isn't in the system folder #This snippet prevents user access to the application folder #Submitted by: Fabdrol #Rename 'application' to your applications folder name. RewriteCond %{REQUEST_URI} ^application.* RewriteRule ^(.*)$ /index.php?/$1 [L] #Checks to see if the user is attempting to access a valid file, #such as an image or css document, if this isn't true it sends the #request to index.php RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php?/$1 [L] &lt;/IfModule&gt; &lt;IfModule !mod_rewrite.c&gt; # If we don't have mod_rewrite installed, all 404's # can be sent to index.php, and everything works as normal. # Submitted by: ElliotHaughin ErrorDocument 404 /index.php &lt;/IfModule&gt; this will make your urls instead of: YOUSITE.com/index.php/CONTROLLER/FUNCTION now it will turn it to: YOURSITE.com/CONTROLLER/FUNCTION
Cool. Yeah, I think I might be leaning towards the observer pattern. I'd basically just add a static call in certain places to define events. I'd probably prefer to use a db table rather than xml config files.
How can you not know this if you are Zend certified?
Ease of use for someone new? CodeIgniter. Looking for an enterprise-class framework that many large companies will use? Symfony2. Looking for something you can understand quickly, and actually go through most/all of the code yourself and figure most of the framework out without any of the *magic* feel? Kohana/FuelPHP Looking for something very similar to .net? Yii
Singletons have always confused me. Not on the actual code or what's going on, but on when or where to use the pattern (I don't come from a C/Java background). For example, i noticed that CodeIgniter is basically one huge singleton. Since everything you do based from the CI super class, there is no need to ever have it instantiated twice since everything you'll use is a sub class of it. Am I correct on this (as far as that's what CI is doing)? What if you have something like a router class, that it will never be necessary to have it instantiated more than once? In PHP, is there a design pattern you should use, or just make sure you never create more than one? Thanks for the help.
Because it is not (Or was not back in '06) part of what the certification was about. It was about core php functionality. PHP syntax, functions, classes, regexp/date, etc. I could link my name in the yellow pages if you want 'proof'.
I've been helping convert a shopping cart to Symfony2. Originally it started as a set of libaries on top of zencart, but is now coming into it's own. There's still some kinks to work out, but it's been a fun project. Sadly, t still requires a bit of ZenCart inside. but hopefully not for much longer. Here it is. [ZenMagick](http://github.com/DerManoMann/ZenMagick) PS: I never got involved with magento or prestashop because i found the licensing unfit. 
It already is. It started as a set of libraries on top of ZenCart, but then ended up becoming it's own thing. I didn't start it, but i've been working on it. I still have clients who use ZenCart, so i've been keeping some of the integration working until all the mods i need are implemented it. It still requires some bits of ZenCart internally, but it's slowly moving towards deeper integration with Symfony2. It is called [ZenMagick](http://github.com/DerManoMann/ZenMagick) and is currently licensed under the GPL (still v2 until all zc code has been cleansed). I think we are planning on relicensing it under the MIT license afterwords. 
Personally I'm incredibly excited about ZF 2 and I can't wait to dig into the beta. I've been using ZF since the very first alpha releases back in the day, and in those early days of alphas and betas they were breaking BC left and right. For the sake of the framework's quality they broke BC after the official 1.0 release and now as well.
The most important things to have are good documentation and a test suite which will validate the response formats/error codes. Once implemented, you're stuck with it. If you want to make changes you should look into Versioning.
Just a quick friendly hint: MVC is a pattern, not a software product in itself. With a software product such as an ORM, you might refer to it as "an ORM". But with MVC, even though it's a noun, it's used more like an adjective. Saying "an MVC" sounds a bit odd. Edit: I love these kinds of posts btw. They're a nice kind of "explain stuff to me" posts, and a million times better than "how do I append to an array" questions.
In an ideal world you want to handle those four verbs, but there are far too many clients that simply don't understand PUT and DELETE, so I recommend sticking to GET for requesting information where nothing is changed, and POST for updating, creating and deleting. Sucks, but those are the compromises we have to make. 
If you have an application at example.com, put the API at api.example.com, rather than example.com/api. It might never be an issue, but it's a lot easier to scale if your API is set up from the start to be easy to put on its own server. In addition, version your API, so it can all be under api.example.com/1/methods. Down the line, you'll thank yourself for doing it. 
This is a pretty dreadful article. It makes a note at the top that the author came to these conclusions by making the mistakes himself so it's rather arrogant of him to say "I made these mistakes once and now I am a programmer. If you make them you should become an artist or something.". A lot of the topics seem more indicative of inexperience than a fundamental lack of ability for example saying someone should give up on programming because they aren't competent at regexs is a pretty bold statement to make. I general I though this was an article written to stroke the authors ego rather than to offer legitimate advice to other programmers. 
Most designers "dream up" their projects in the following order: View -&gt; Model -&gt; Controller. 1) We draft up an idea (physically or mentally) for what we want the end product to "look like". At this phase we probably do a mock-up version of what the end product will be (the View). 2) We decide upon the most appropriate way to store the data, which might by MySQL or SQLite, and then we start writing the necessary code to write to/read from the database (the Model). 3) Finally we connect the mock-up to the database and start populating our view with data from the database. The "glue" that holds everything together (the Controller). These three aspects make up the foundation for how applications work, whether that's a website, a web app, or a system application. Simply separating the code into different files would be one step, but building together a set of classes (or "objects") and implementing Object-Oriented Programming (OOP) allows you to write code much more efficiently. This allows us to do things like: // Let's pretend this code is in your Controller. $model = new DataClass(); $userlist = $model-&gt;getAllUsers(); /* We let our model handle all of the database pieces. All we really want here in our controller is a list of users. We don't want to do any SQL queries in here! */ // And if we want to add data back to the database? $model-&gt;addUser(array("first" =&gt; "Brent", "last" =&gt; "Spiner")); So let's say in a few months you decide you want to switch from SQLite to MySQL. If you've separated your code into MVC you just need to update your Model. The View will still display things the same and the Controller still communicates between the Model and the View exactly the same way, no change of code is required there. All you need to do is update your Model and ensure it spits out the data in the same way and nothing changes. This also allows you to be more efficient at collaboratively working on projects. It doesn't matter what methods are used by the Model to collect the data, so long as it returns it to the Controller in a predictable/consistent way. **TL;DR:** * View implements methods to display stuff. * Model implements methods to manage data. * Controller communicates between View &amp; Model.
This was a very useful post, though I'm a bit skeptical about the writing functions with such specific functionality. On the other hand I can kind of see the use of it, it just seems incredibly inflexible. [edit] Just to be clear- I'm not disagreeing with your post at all and I very much appreciate the input.
Thanks - I have versioning on my application and wasn't planning on doing it for the API. Instead, I'll also do this for the API. Also, good call on using a subdomain.
ohh well that makes sense, thanks
Is there any downside to doing things like: api.example.com?module=users&amp;action=create_user&amp;name=cindy api.example.com?module=users&amp;action=delete_user&amp;id=12 api.example.com?module=users&amp;action=get&amp;id=12 All of those would be POST/GET (in PHP I would just use $_REQUEST so it doesn't matter). I don't see a real advantage in using different techniques to do different types of actions...doesn't that just complicate it?
I am actually extremely terrible at reading other peoples code without it being documented, unless i really take more time than i should to read the code and think very slowly. i saw jaxl, and i'd rather avoid it.
I could see a potential issue if it was hosted on the same domain as the login where cookies would mess things up.
Model - usually a data object class, interfaces with the database. View - the actual HTML, sometimes run with a templating language before display Controller - Logic code that handles all data needed for the page and subsequently executes page display I like short definitions :)
I don't know where you live or how old you are, but if it's an option for you to still go back to college I would recommend it. I don't know exactly how things are going to be where you live, but at least over here (Netherlands)- having a college level education is a requirement more often than not.
My advice (which I am following myself). Pick a framework and learn the shit out of it (I picked Zend because a) it seems to be the most widely used b) it's got some nice features c) it makes a nice change from Drupal) Build up your portfolio and references and *network*. I got my full time development job through networking, it's a cliche but also a truism "It's not always what you know but *who* you know". ymmv.
Don't be a PHP programmer, be a web developer. This is the web, and there are many languages and technologies to learn. If your work speaks for itself, nobody cares that you never graduated college. However, college never hurts. Learn what you don't know. If you don't know what that is, check out the programmer competency matrix: http://www.indiangeek.net/wp-content/uploads/Programmer%20competency%20matrix.htm This will give you some general ideas of things to explore. Finally, if you want to do web development, do web development. Do more freelance work until it becomes a full-time job, or someone hires you full-time.
...and it clicks, you have the best TLDR *ever*.
Well, cURL handles PUT and DELETE fine, so ideally if you're making an API, you'd be accessing it from a client that isn't a browser and one that supports those verbs.
If you're fine with it not being RESTful, I suppose. You're building an RPC API that way, and that's fine, but far too many people would call that a RESTful API and it's not. However, if you allow DELETE's and creates (POST's generally) to be made with GET requests, that's VERY bad. You can pass in the actions via GET, but api.example.com?module=users&amp;action=create_user should only respond to POST request, and the data should be passed in through POST, not GET. Also, at least add a mod_rewrite rule to make the URL prettier: api.example.com/users/create, api.example.com/users/delete/12, api.example.com/users/12
[My tutorial](http://voloreport.com/learn-kohana-mvc-php-in-under-an-hour1). However, this uses the Kohana MVC platform to demonstrate. Lately, however, I've switched from Kohana MVC to [Faster MVC](http://github.com/volomike/faster). The explanation why is [here](http://voloreport.com/faster-a-minimalist-zero-config-php-mvc-framework) and [here](http://voloreport.com/qa-feedback-faster-mvc). A short login demo with Faster is [here](http://voloreport.com/faster-login-demo).
go freelance, no one ever asks me whether or not I have a degree(I do), they just care that I can get the work done (I can). whore yourself out on some of the freelance sites (vworker.com, freelancer.com) to get a decent rep, try and find a few folks who will give you regular income for stability (live cheaply). From there, use the stability to up your rates and go after local work. In our industry, a degree isn't required, don't let that fear hold you back.
Broken expectations mostly. GET methods are universally expected to be read-only. That's why search engines will follow GET URLs but not POST (usually), for example. Browsers will also use different caching policies based on those verbs. It's more likely to be okay to cache a GET request, while caching a POST request is almost always a bad idea. Generally, I'd recommend to define strictly what your API is, and reject requests that don't comply. That'll help you down the line. Don't use $_REQUEST. If your API defines something to be on the query string, use $_GET. If it's in a PUT or POST body, it's probably defined as part of a JSON payload, so you'll have to slurp the body, parse the JSON payload, validate it and grab the keys you need. Also, worry about security issues. In particular, worry about evil sites making your users do things through your API. (i.e. &lt;img src="//api.example.com/v1/users/create/cindy"&gt;. Sad example, but even once you switch to POST for this action, which you should, an attacker site will often still be able to use an auto-submitting form to hit your API. ) To prevent that, add an API that issues a token that other authenticated APIs must pass. Match that token against cookies before allowing access. Other random things that come to mind: - Version your API. At some point, you're going to want to redesign your APIs to be much better. Unfortunately, your redesign will be backward incompatible. save yourself a headache and put a version in your URL up front. - Keep your URLs clean. /v1/users/get/12 is altogether friendlier than /api.php?version=1&amp;module=users&amp;action=get&amp;id=12. Don't overdo it though. Query strings have their use. Are you sure you don't want to use a framework that would enforce various levels of sanity for you? Doing all this manually is great when you already know all the pitfalls that lie ahead. Otherwise, it can be hard to get things just right. *edit: Oh, I forgot, you also have to care about how your API is getting used. If it's meant to be used from a web page on other sites, you have to provide some cross-domain mean of access, and think carefully about what an authenticated request means in that case. If it's meant to be used server to server, then plain old RESTful is just fine.
it's a troll article meant to bring in advertising dollars.
If you don't mind some feedback despite me not having read the whole thing... The big giant bunch of text at the start should somehow get broken up, as a slow reader that piece of text is too "intimidating"; if that makes sense. 
start with the freelance sites, odesk, elance, etc... sign up on all of them and use them. start contributing to some large open source projects. jquery, wordpress, etc... make some cool plugins people want to use. get your name out there. make an awesome portfolio site for yourself. be active on forums, join (or start) a local PHP user group, get your name out there. start searching for positions locally on craigslist, etc... there's a start off the top of my head. if you put 8 hours a day into this for a few months, you should come up with something.
Lots of good advice here, but let me add this: One of the easiest/best ways to make sure that you have a good API is to use it. Use it as much as you can. All of your frontend code should be hitting the API. If possible/logical, have some of your backend code working with your API as well (maybe without the HTTP overhead). Also, go RESTful. Once you understand REST, you understand the internet. The HTTP spec is your friend and you don't need to reinvent it. Think in terms of HTTP verbs/methods (GET, POST, PUT, DELETE), and always make use of the proper [HTTP statuses](http://httpstat.us) and you'll go far without having to overthink things. A lot of the hard implementation questions are already addressed by good RESTful standards.
First, while a college degree /always/ makes it easier to get a job, don't fret it. If you have time/$ to get it, do. If you don't, do the best you can anyway. As somebody who's 99.9% self taught, doesn't have a degree, but a 30+ yr successful career in software development (currently vp sw dev at my company), I understand what you're up against. My advice- 1) learn everything you can - you never know what obscure thing you've done in the past helps you get that next job 2) set yourself a goal that you /want/ to achieve but don't yet know how, and learn what you need to do it. It's amazing how easy it is to pick up new stuff while you're enjoying building something. 3) know how to find information. Nowadays that's super easy with Google. When I started out: books, manuals. It doesn't matter whether you've memorized the order of arguments to preg_match, only how fast you can look it up and get the job done. 4) don't fear what you don't yet know. Somebody asks you "can you do X", your answer is, I think so - let me research a few details and get back to you. Go learn enough to know how tough it's going to be, take the job if you're fairly certain it's workable. 5) what you learn on this job teaches you the skills you're going to need for the next - I can't tell you how many times I've looked back and thought how lucky I was to have done that boring annoying task, because it taught me something I'm now using - even if only how to automate it so it's a piece of cake 6) consider multiple ways that you /could/ do the same thing, and pick the one that is going to work best. Never EVER write it the first way it comes to you. Write some test programs to figure out if various approaches even work, get the interfacing right, etc. 7) test programs. You will never write enough test programs. Stuff that isn't part of the end product, but helps you figure out where the problems are and validate assumptions about the operation of 3rd party libraries, etc. It's better to spend time on throwaway test programs than to waste even more time debugging a supposedly finished product that doesn't work. 8) your best and final version is the 3rd rewrite. The first version is mostly to test how you interface to the outside world. The second has guts that work and kinda mostly sorta gets the job done but is inelegant. In the third version you've learned where the real design problems are and worked them through. 9) be lazy. That needs some explanation. I'm not saying you should actually be lazy about getting the job done, just the code. Lots of code typed in but a bad design looks like you've been working hard but really isn't. On the other hand, lots of time spent thinking (not coding) about the design means you'll have a better program and actually take less time to write it. The design+code time may actually be longer than the just write code time, but when consider that design+code+debug time &lt; code+debug+code+debug+code+debug... 10) if you want to be a web developer, then be a web developer. If you want to be a programmer, and you're serious about it, write real programs. I know a lot of people who can write php that can't write programs. There is a 2x difference in income between the two. 11) seriously, check all return values. If you ever use mysql_query(); and do not check the return value and at least log the failure, you are wasting your time trying to be a real programmer as you'll be in the code+debug+code+debug loop too often. You've got a perfectly good library/api that gives you a nice text explanation of the problem like mysql_error() - there is no excuse for not checking it. 12) most of the style guidelines out there are crap. If somebody wants the code formatted a particular way then a filter can be written to do that. The compiler/interpreter doesn't care. It doesn't make your program work or not work. Use the style that works for you - with one caveat. Nearly every "chunk" of code needs a comment above it. The comment doesn't say what the code does - that's obvious to anybody versed in the language. The comment says what you originally intended this code to do, or what you learned that changed it - the key bit of information that keeps you from having to rediscover how your program works 2years later when you have to fix something. For example, a comment that says "can't increment this variable until that condition or it causes xyz to blow up". Comments may seem like a waste of your time now, but properly done, they are a huge saving of your time later... 13) resume should list everything you've done. Doesn't have to fit on a page (but have a single page reduced content version for those that insist). Should include even your personal projects, as they are no less your experience than paid gigs. 14) Basically, don't be afraid to break the rules if it makes you a better programmer. Programming is an art, regardless of it's position in the science department. Good programs are elegant. Crappy programs are well, you know, very brown. A good programmer makes colorful paintings that people want to use. Be a good programmer. Gotta go get some dinner now. AMA if I can be of any help.
TIL I absolutely suck at programming... I sit somewhere between level 1 and level 2... damn I need to graduate already...
Get your ZCE (Zend Certified Engineer). It's relatively inexpensive and if you work through the study guide you will have a good grasp of the language. Having the piece of paper will help you land a job without a degree and I've received multiple job offers just from being listed in the Zend professionals directory.
Art school (Web Development and Multimedia Design) drop out here, listen to izzy. I took a job as a Web Designer while still in school to help pay bills using what knowledge I had of HTML and CSS at the time (2004). After landing that job I told the powers that be that I'm interested in programming more and would love to help wherever possible. It got to the point where I was learning so much on my own and at work that school was just a series of expensive review courses (often teaching horrible coding practices and outdated design patterns). Been working full time as a "professional" developer since about 2005. Learn various languages, not just PHP, learn JavaScript, ActionScript, Python, shell scripting, etc. Get familiar with your development environment not just the language. Sign up for an Amazon developer account, it comes with a free virtual server instance, learn Linux, learn how to install Apache, PHP, nginx, MySQL, etc. If you're serious about becoming a developer the language you choose is just the tip of the iceberg, especially in Web technologies because of the overall amalgamation of software and technologies that makes everything _work_. Hit craigslist, monster, dice.com, find an internship or junior developer position, don't lie to them, let them know you're still green and take a shit pay job to get some real world experience and resume fodder. Realistically you'll learn more with a can do attitude and general curiosity in regards to technologies and how things work on your own than you will at work. Just when you think you have it all figured out, find something you don't understand and try to wrap your head around it... 
I agree with you insomuch as having a function that gets EVERYTHING from a table is not only useless but a potential security threat, but it's *up to you* to decide what getAllUsers() actually does. Maybe getAllUsers() performs a "SELECT COUNT('name') FROM `users`" to determine **how many** users there are, and isn't just a dump of the table. But since it's a function that interacts with the database we nest it as a method in our Model class.
Learn OOP. then learn a framework.
You can have a single object that represents a single database connection and not use singletons, contrary to what a lot of developers say. Nobody that suggests abandoning singletons also suggests opening a new database connection for every database select/insert/etc.
A Framework is a collection of user-defined functions that handle repetitive tasks. If you've ever had to write the same block of code more than 2 times, so you decided to put that code into a function, that's what a Framework is at its core. &gt; I find the name framework to be perhaps misleading Think of building a house. If you started from the ground up and did everything by yourself, it would take forever. But if the [Framing](http://en.wikipedia.org/wiki/Framing_%28construction%29) had already been made for you, all you would need to do is "fill in the gaps". When you think of it this way, "Framework" really does make sense.
Those top 5 "symptoms" of a bad programmer gave me daymares. I'm not sure I could restrain myself from facepalming in the presence of someone that coded this way.
I think what you're trying to do is [extend](http://php.net/manual/en/keyword.extends.php) the AccountsList class.
&gt; One thing I am glad however is that I didn't go with a framework. I think what you meant to say was that instead of going with a currently existing framework, over time you developed your own. A lot of frameworks implement their own design patterns, and if you want full control over how something is going to look and feel, there's a good chance you're going to want to build your own framework from the ground up. **EDIT:** Other than load balancing and failover are there other ways in which multiple webservers are beneficial?
Did you scroll down to programming?
EDIT: D'oh, this is wrong. spz is spot-on. I could have sworn the first thing I did was variable name checking, but I guess it slipped by me as well. :) ~~Hmm, I think this is how to fix it (PHP novice chiming in here):~~ ~~Are you sure array $r is not being indexed numerically instead of associatively? $r[0] and such may be required with your current code. Either change variables to $r[0...2] or change your mysql_fetch_array to use parameter MYSQL_ASSOC for the result type:~~ ~~while($r = mysql_fetch_array($q, MYSQL_ASSOC)){~~
Everything I learned about PHP itself was self-taught, despite my computer science college degree. You really don't need a degree to get into professional/mainstream web development these days. The focus has shifted from credentials to experience and knowledge. If you are passionate, willing to learn, and a good team player, that's much more important than whether you got a college degree or not. One thing I would highly recommend is to broaden your knowledge in the area of computer science and application design, and apply that knowledge back on PHP (and other languages). Study object-oriented design patterns and some popular PHP frameworks. Dive in and figure out how they work, and ideally, build your own (even if its just for practice). As some other commenters mentioned, I wouldn't focus 100% of your time on PHP. The fun part about web development is that it encompasses so many different languages, and gives you many different choices for each project you do.
You didn't capitalize the L in the declaration, variables are case sensitive. Also you should look into using [PDO](http://php.net/manual/en/book.pdo.php) for the database interaction, lookup some examples of [prepared statements](http://php.net/manual/en/pdo.prepared-statements.php). I don't really understand your friend system though, you shouldn't need two queries, something like 'SELECT * FROM friends WHERE userA_id = $user_id OR userB_id = $user_id', and then sort them in php.
As opposed to the majority of advice here, I say you can be incredibly successful as a PHP Developer. I see about 1 or 2 job postings for that exact title coming at me every month with pay ranges between $85k-$125k. The absolute most important thing you can be doing with your time right now is developing a very strong portfolio that showcases your ability. When you interview for a developer position the first thing they're going to quiz you on is the software you've used. The next thing they're going to want to know is: "What have you done?" Being able to back up your resume with physical examples of your work will be far more important than an education. No company that I've ever worked for has ever asked me "Where did you go to school?" **TL;DR**: PHP Developers make a pretty penny. A solid portfolio trumps a degree.
&gt; I never graduated college, so I've got that one against me. I didn't either, and now I run my own development company. Passion beats qualifications, in my opinion, and having 6 years experience is a massive plus.
yeah, i was generally a lot better in that area, scoring in the highest level a few times but throughout the rest of the page, not so good.
I'm 24 years old and have been doing PHP for roughly 7 years - I have worked for companies doing the normal client web dev stuff and more recently startups in the social media and advertising industries. Here are my 2 cents: Fuck having a college degree - being a competent, established programmer is worth way more then a comp sci degree is, especially doing PHP and it's prevalence of being used by small businesses and startups who rarely give a shit about a BS in Comp Sci. You just have to apply for difference companies - specifically, companies looking to fill Junior positions. When I got hired at my first programming job at a web development company I had never used a framework and had very little experience with OO methodologies. I worked under a contractor who came from a Java background into PHP and forced me to use CakePHP - Despite hating it and wanting to rip my eyes out, I look back at that being one of the biggest turning points my programming career. So the short of it is - dive in. If you really feel like your not up to snuff then take on a few personal projects. Not anything for clients, just something that has some interest to you - preferably doing things you haven't done before - make an effort to broaden your programming horizons.
\#1 is better, but its more relatively complicated and requires more work to maintain. \#2 isn't the best option, but it's easy and cheap to implement. If your site is going to be heavy in user submitted images, I would go with #1. If the only images you were going to store were 60x60 avatars for users, I'd go with #2. You also have to consider how database heavy your non-image content will be. You probably don't want to be spending all your time reading 128k+ data blobs while waiting to read your text content as well, when you could have simply tossed the images on Amazon S3 and forgot about them.
I would go with option 1, storing the images on the file system and just backing them up daily when you do the DB backup. Keeps your DB smaller and easier to work with, and you can always write a utility to quickly check the for invalid db entries or missing files. Also if you want to migrate your images to a sub domain or to the cloud you would only need to alter the db path values.
It's unlikely that you're going to use the image as structured data.
#1. Trust me. I once went with option #2 and I regretted it. Was more of a pain to show images, and had no real advantage. Performance-wise, there's no reason your server should have to use mod_php and hit the database just to show an image. In fact, if your site really takes off, you might want to segment your traffic. For instance, all .js, .css, .gif, .png, etc, requests get served from "assets.yoursite.com", which is served by lighttpd, which has a much smaller footprint than apache. Or go one step further: If your site REALLY takes off, you can put those images on a CDN. And you can backup a directory of images just as easily as you can a database.
The fact that you know PHP is almost irrelevant. What you need to know is how to program (maybe you already do, who knows). PHP is just a language. The key is to know how to program, then you can pick up any language given some time to become familiar with its particular unique traits. It's the understanding the concepts and principles behind programming that make you good at your job or, not what language you use.
Sorry, I think CI is one of the few frameworks that doesn't need 3rd party tutorials on getting up and running.
I would say there's not a good reason in the world to put images/files into a DB over the OS's file system. The OS was created specifically to store and serve files, a DB was not.
I went to UTD for a semester and a half. I dropped out, haven't looked back since. Sure when I'm browsing HN or r/programming and the uber guys start talking about which sorting algorithm is fastest for a given scenario, or anything to do with log functions, my eyes glaze over, but for the most part I'm doing fairly well.
Here's what I do in production. We process and serve literally hundreds of thousands of images. 1. Save original image and metadata in the DB. 2. Make various copies of the image: resized versions, cropped versions, etc. 3. Upload the processed version to a CDN, store the locations of each in the DB. 4. Keep only the original version in the DB; the processed version that actually gets served is stored and served from the fast, cheap CDN. 5. If for some reason the CDN upload failed, then the server instead serves the DB version (which is slower to serve than the CDN, obviously). This happens &lt;1% of the time. I landed on this approach because: 1. CDNs are cheap and really fast. 2. Keeping the original in our redundant DB ensures that even if the CDN upload failed, we still have a copy of the image we can serve from *any* app server. 3. I stopped storing images on the file system because our app servers are under a load balancer, and so we had different sets of images on different app servers. Existence of any given image was not guaranteed for any given app server. 4. Having the images in the DB allows you to backup images along with the rest of your data. I'm very happy with this approach, and if you have the resources would strongly recommend it. We serve a very high volume with very low error using this technique. 
If you have more than one app server, existence of any given image is not guaranteed for any given server. This is a major problem in large systems. If you run one and only one app server, then I wholly agree with you.
Put the images on a CDN regardless. There's no reason not to :)
You're right. There isn't a good reason, but that doesn't make the option invalid. 
Unless you're doing it on the ultra-cheap. Which I usually am.
Which is why larger systems tend to use some sort of shared storage solution, or a distributed filesystem.
Number one, reasons covered below. Tier the directories so you don't wind up with tens of thousands of images in the same dir.
I did the blob approach once . I did not like restoring that mysql dump and just passing it around is such a chore. Plus you must likely have to encode / decode the file information to fit on a table. I consider it a mistake now. The only "advantage" is somewhat having ratings or permissions not depending on the file system but usually is easier to maintain (learn) a file system than trying to make sense of a non standard permission scheme. Plus you probably wont find all that much help on the net when dealing with a storage "engine" of your own. 
I guess I'll reply [with this](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags)...
My CDN is 15 cents per GB per month, and 15 cents per GB transferred. If you're using it for just hobby work, that can be as low as pennies a month!
Yep. Exactly what I'm talking about. I use my DB layer as a distributed, redundant file system for assets. 
Thanks, I'll check it out now. I have this question posted there too without a reply.
Go down to Programming, section: "code organization within a file"... View Source. You be the judge.
Just googled Cthullu.... Looks like a bad thing I don't want to be calling out. I know it's terribly slow/inefficient to use regex (from my reading). But as one learns, they scour the internet for code snippets which will accomplish their task. This happens to be 90% working for me, and if I could only block it from running if the text is wrapped in certain tags, I'd use it. I'm not opposed to doing it without regex, I just don't knowhow.
Every web developer needs to read this, and yet these sorts of questions get asked all the time. So pay attention: DO NOT PARSE HTML WITH REGEX. YOU MUST USE AN XML PARSER. FOR PHP THIS MEANS ONE OF THE FOLLOWING... 1. Use DomDocument with DomXpath. 2. Use SimpleXML with xpath(). End of discussion. 
Thank you. This is like greek to me, but I'll look at your code, and the code you put on pastebin and see what I can come up with tomorrow. It's getting late here. I honestly will look at it and try to get it to work.
As a php I programmer with 7 years experience and no degree either, I can say a degree is irrelevant after so many years. I still say I want to get one and that is enough for most employers to look past it. So far i've never been turned down because of bit having a degree. I also know I have beat out degree wielding candidates on more than one occasion for 
If you're parsing HTML, check out [PHP Simple HTML DOM Parser](http://simplehtmldom.sourceforge.net/). It's pretty nice.
And what benefits does this offer to the built in functionality?
&gt; slow/inefficient No. Our objections against regexp HTML parsing are not because of speed, but because that is very prone to mistakes, and impossible if there are any mistakes in the source HTML.
I think the syntax is a lot nicer.
simplemachines.org phpbb.com mybb.com
Do you have an actual implementation of that? The only one I've come across so far is where you refrain ffrom opening more than one, but without anything that actually limits you. The way I see it, this requires more work than restricting instantiation in the code with a singleton and not caring about it in the rest of the code.
There's the problem, "not caring." It's a virus among PHP developers. It's more work only if you lack the self control.
Don't give me that crap. Programming is all about not having to care about things. Why do you put code in a function? To not care what happens between between calling it and receiving the return value. Modularity? Not having to care exactly what a class or function does. Etc, etc. I'm all for discipline and strictness, but not for making my job unnecessarily hard. You're basically telling me "just do it the hard way", since you didn't give any alternative pattern or solution.
VanillaForums.org - Really clean :)
Seconding SMF (simplemachines.org).
Which CDN are you using?
But then HTML5 comes out and breaks all the rules again, allowing tags to be left open etc. HTML5 looks great at some levels, but not enforcing a strict XML format makes me cringe.
Take a look at some SMFfiles before using it and if you still want to use it I'd be surprised. The whole thing is a total clusterfuck with random SQL being executed all over the place like "SELECT * FROM topics WHERE id=$_REQUEST['id']". I think they're doing some global input sanitization or something but the security is extremely suspect at best. The entire project reeks of legacy code (I think they're trying to support PHP4) and because of this everything seems to be in global scope with a million functions that are used to build pages and such. Schools could use SMF as either an example of how to write a forum in PHP4 or how you should under no circumstances write a forum in PHP5. My vote would go for PhpBB. I haven't spent as long poking around in the code as with SMF but it seems to be written much more robustly and doesn't break half as easily as SMF. Or vBulletin is probably still the best but not free.
Download a copy of Netbeans for PHP (or Eclipse) and it will underline any unused variables in orange as well as pointing out a whole load of other potential issues.
you could always use mongodb
When comparing it to building a house I would consider pre-made functions more similar to the dishwasher, the washing mashine, the computer, bathroom- etc. The framework would be more like a module loading system. Regardless, this is semantics- it really doesn't matter if the name is fitting; even less so whether or not I personally find it fitting :) 
f*king browser vendors :@
What I meant wasn't "this specific task is a bad one", I meant that defining tasks at such a specific level seems like a questionable thing to do. I'd personally rather try create a more complex function that could simply output queries into different languages. I realize that having even this type of functions helps in that you have all your database queries in one place- but it feels strange to create a new function for every query you might use. I see the usefulness, I just need to get over the lack of flexibility of such functions.
How do you know if someone is a pot smoker? .... don't worry, they will tell you one way or another.
another option would be use something like mod_drizzle/mod_mysql or equivalent for your webserver. Cherokee and Nginx both support it. I'm not saying i recommend that approach, because i've never tried it. It's still neat though.
The underlying code is a thing of nightmares, but it's still pretty nice to work with and mod.
Huh! Is that a commercial CDN? You mind if I ask who it is?
As a follow up to some of the other comments here: In my view, saying that you know PHP /implies/ that you also know enough HTML, XML, and MYSQL, etc. to get by. You've probably also picked up some REGEX also. Maybe you're not at an expert level in these, but the same applies: you need to know enough to know when to use it, what it does for you, and where to look up information on the details later to get the job done. On top of that, you probably want to know some common frameworks/libraries - for example jQuery probably needs to be thrown into the list above. So yes, PHP is a language, but it's also more than that. It's the glue logic that allows you to build amazing tools by putting several other technologies together to solve a problem. And it's really great - better than a lot of other languages - at having good libraries built-in to provide that interface. But at the end of the day, it's still programming. You can start like a script kiddie taking examples and tweaking them to do something you want, but to make a career of building PHP applications, you still end up needing to learn the art of software development. Which BTW, is a never ending learning process. I'm 45+ and have been doing this for 30+ years and I'm still learning new things (only picked up PHP 3 yrs back, just now getting into jQuery). 
Nothing to do with browser vendors. 
Rackspace Cloud Files. I believe Rackspace resells Akamai for Cloud Files, which is awesome because Akamai is great (firsthand experience) but really expensive because their overhead is huge ($1000/mo min or something). I couldn't be happier with them. But also amazon s3 (storage) plus cloudfront (their edge servers) is similarly priced. 
Copied from above: Rackspace Cloud Files. I believe Rackspace resells Akamai for Cloud Files, which is awesome because Akamai is great (firsthand experience) but really expensive because their overhead is huge ($1000/mo min or something). I couldn't be happier with them. But also amazon s3 (storage) plus cloudfront (their edge servers) is similarly priced. 
LOL, you work at a company in Houston, huh?
.... No?
wrong, the WHATWG group was created and is composed primarily by browser vendors, in fact the main editor is Ian Hixie from Opera, they killed XHTML overrided the W3 and created the current HTML5 as a continuation of the unholy tag-soup created ages ago, also by browser vendors. truth is they being the main consumer of HTML documents have decided the rules and they chose to continue the draconian parser way.
I've always really liked PunBB.
It's not breaking any rules. The rules on which tags can and can't be left open are very clear and strict.
Vanilla 1 = Yes, Vanilla 2 = No. They botched the new version beyond belief. 
Software Engineer 3 Programmer 3 Experience 1 
Man, markup ain't code. It's coded, but we speak of it as formatting. Besides, a more important point is that HTML "code" can be done via a WYSIWYG interfaces; programming can be not done that way.
upvote for logic
Is it really that difficult to refrain from typing `$db = new Db();`?
FluxBB. Very light and works really well.
fluxbb.org
[](/)
That's a noob meme on SO. Apart from that [it's invalid](http://stackoverflow.com/questions/4231382/regular-expression-pattern-not-matching-anywhere-in-string/4234491#4234491), it just goes to show that nobody reads past the joke answer. Not even the title is understood, hence often linked where not appropriate.
Sounds a lot like http://stackoverflow.com/questions/7857131/using-php-pregreplace-to-turn-specific-words-in-my-text-into-links-if-they-aren You should have read through the provided links or searched a little.
I have searched... that is my own post at stackoverflow. They are where I found the code I am using now... by searching... No one has answered that post there. I edited that post, look at the very end of the original post... :)
You already got a lot of bulletin board advises. If you want an actual forum (those that have threads like reddit), then look at [MyLittleForum](http://mylittleforum.net/). The code is likewise dated and difficult to extend, but it's functional, and even allows optional user profiles. (Easier to build a community if people aren't pestered with forced registrations.)
Look again. Your post there is now diamonds. Rescoping the question is always a bad idea. The SO attention span is less than the one on reddit.
Thanks! Have yourself a new voicemail greeting... on me! http://www.oldspicevoicemail.com/male.html I saw your code, haven't put it in yet as I'm wrapping up another coding thing right now, but will put it in and see how it works for me.
There's almost never a good reason to store a file in a DB. Option 1 should be pretty much the only way to ever do it. On another note, if you're using MySQL, you shouldn't ever store files in the DB. I went to a session at a conference with an engineer from MySQL a couple years back and he spent a considerable amount of time discussing why you should never, ever store files in the DB, especially when using MySQL. 
I would say [XenForo](http://xenforo.com/) is probably the best looking product out there right now, but its not free. The main free alternative is [phpBB](http://www.phpbb.com/)... But it may be a little heavy for your needs. IMHO, I suggest that [PunBB](http://punbb.informer.com/) or [FluxBB](http://fluxbb.org/) (a fork of PunBB) are the way to go.
As a former C5 user I can say with great confidence that if you spent an afternoon building a proof of concept site with Pyro you'd fall in love. Personally I love how easy it is to integrate Pyro into a an existing html template. The time it takes from html =&gt; deployment has been greatly decreased by making the switch. Give it a try, its worth an afternoon of your time ;)
As a former SMF Customizer, I agree with your statements. As for liking phpBB, not so much. It is just as much a clusterfuck as SMF with what it takes to modify and use it properly. I personally like MyBB for a free forum software. vBulletin is ok. For a paid software, it's horrible. I'd rather go with IPB or XenForo.
jQuery type selectors.
Wow, are you really that dense?
As a programmer I'd suggest Phorum. Not sure if there are any decent themes for it though.
(SMF Consulting Dev and former team member here, working on the secret stuff now.) That's what happens when it takes 5 years to get to a final release of 2.0. The current dev team (entirely changed from the team that started it) really just had to keep going with what was there, but from now on we're on track with the rest of the modern PHP world. PHP4 compatibility is on its way out, and we are modernizing the entire code base for 3.0. We do sanitize all variables going into SQL queries; 2.0's database layer is very strict about data types, and there are no known issues at this time. We're always keeping an eye on how to make sanitization easier and more thorough, and I personally like how Inspekt handles things, though it hasn't been updated in a while. Oh, and no more global scope - we're going with object oriented code in 3.0 instead of procedural. Thanks for the feedback. I hope we don't disappoint you going forward :)
Hi Jason!
What's wrong with XPath?
Been doing PHP since 1996, and for the better part of a decade, much of my sales have been uphill, with Java being something that many companies preferred (mainly because they'd already invested way too much in it). I started with Grails about 4 years ago, as I really love the GORM/domain stuff for prototyping ideas (easier for me than Rails' philosophy). But today, trying to push Grails (a Java platform) to people is harder, because many of them want/need PHP. :) I say this because this seems cyclical at best. "Recently" been hearing about Java being "possibly better" for web stuff? It *really* depends a huge amount on who you're hearing that from and what use cases they consider 'normal'. For most standard web apps, there's no major win, and plenty of small to medium pains you'd have to go through to use Java over PHP. If the app needs integration with existing Java components, certainly Java as the main system will be a better choice, but the same could be said of .net requirements, or ruby, or anything else. Really would need far more context to judge whether the statements you're hearing make much sense or not.
http://fluxbb.org/ I like fluxbb, if you looking for a shit load of features look elsewhere though. 
Lot's of good answers, so I'll jus add this old saying, because it rings true: A programmer has a problem. He decides to use a regex to solve it. Now he has two problems.
I wanted to endorse SMF in particular over the others...
That was a great rundown, sounds like a great assortment of speakers &amp; topics. Gotta get myself to a PHP conference someday. Also, wisdom right here: &gt; Use PDO instead of the MySQL extension.
thanks a lot man. 
Hi Steven!
[I took your code there, and tried to modify it, this is what I came up with](http://pastebin.com/AqdxEtiU). My strings aren't that long or complex just articles. What did I not get from your example that caused it not to work?
I use invisionboard. You didn't specify if you meant free or not. I was horrified from the code of phpBB and the like
Nothing, but that was the one slight benefit I could think of.
Claiming it can be done by linking to a post that uses a 400-line Perl 5.10 recursive regex that basically contains an entire HTML4 DTD really isn't going to help a PHP user.
Neither? Store the image on S3 or related service, then save the generated URL in your DB.
Is there some way you could use the [gzuncompress](http://www.php.net/manual/en/function.gzuncompress.php) function rather than messing with the streams? 
My first inclination would be to do with disk thing that you're referring to, just to get it working and to know it'll work, albeit slower than you'd want. I suspect that you may end up fiddling quite a lot and find you can't get the right combination, and you'll be wasting a lot of time. AFAIK there's no way for filters to be applied to just *part* of a stream - it's all or nothing. 
While that's actually a step up from "not working at all", it's still rather resource-hungry, because I would have to load the entire compressed stream into memory before decompressing it. My hope was to be able to read the data in and process it at the same time.
Well, the frustrating thing is that the manual is worded such that you'd think you could apply a filter mid-stream. It speaks of the difference between append and prepend, which is that with append, any data still in the read buffer will have the filter applied to it, while with prepend it'll not. I'm definitely going to have to do some testing with that, just to make sure I'm not mistaken about the garbled nature of the inflated data. It wouldn't surprise me, because the rest of the container format uses weird integers such as 3-byte big-endians to indicate offsets and sizes. I may have mucked up somewhere with that.
WAT
Mind blown?
Well I log in and there is this chat thing (Which has crazy double scrollbar action in Opera) Then at the top there are all these bars with no text that have hover effects and show pointer cursor, that when clicked on inserts some dark gray text that is hard to read on the black that simply says "content" Also it has issues where if you go to certain pages when not logged in it will throw you an error, also when I clicked login without filling in any fields, I got a blank screen. How do I log out aside from manually deleting cookies. I'm guessing there is a command-line command. I tried /logout, and /help didn't display any such command. Edit: I should say I've never seen a command line in a CMS before and I kind of like the idea as well as the chat which would be good for collaboration, it just feels like something that was hacked together over the weekend.
Try Firefox? I haven't been testing in other browsers. Logout is /bye. Help should have displayed /bye. Also the version on github is more recent than the demo, so you're better off installing it locally to test it out. edit: Just installed Opera on Ubuntu, works fine on my local instance of the github version. I think the problem was the access level on Documentation/Glossary was set to admin on the demo.
Honestly, if that's how you feel you ranked, I'd suggest also "Overestimation of Ability, 3" as well. There's really no way you are fully knowledgeable in a complex field in which you have no practical experience. I'm sorry if this hurts your feelings.
I believe the most beneficial aspect of MVC Frameworks is the http request/response routing. This routing enables the page www.site.com/videos to call the index function in the controllers/videos.php file and the display code would be in views/video/index.php. This logical organization of code is helpful. Lithium Frameworks ['Quintessential Blog Tutorial'](http://dev.lithify.me/drafts/source/en/00_quickstart/blog.wiki) highlights the benefits of using an MVC Framework well. Aside from the logical separation of code you can see other benefits such as having a form builder. There are many good MVC Frameworks, Fuel PHP, Lithium, Symfony2, Cake PHP, Yii, Code Igniter, Zend, etc. As a full time PHP developer on a custom framework I think it is awesome I can look at the top open source PHP frameworks and learn from what they are doing. I encourage other developers to do the same. 
Post title: "Best **free** forum software?" :)
Not looking for something I really need to customize a lot.
Not sure if [this](http://php.net/manual/en/function.set-time-limit.php) is your answer.
Should have mentioned that it's set to 0 (no limit)
hmm. I haven't looked at the demo but I've noticed a lot of your source code doesn't have comments or comment blocks in them. You should eventually write information about what certain things do so developers can understand what is going on.
Yes, but I try to write self-documenting code. If you want me to explain any part / file, just ask, and I will add my explanation to the source. Edit: Documentation is clearly lacking, yes.
I may be having a mild Dunning-Kruger effect all over my self assessment. I'm not that foreign on functional (lazy evaluation, currying and all that listed "languages with professional experience"), but never done it professionally (as in paid for). My domain knowledge is 2 (this is my 3rd year consecutively working on applications in the same domain) so I've rounded it to 1. As for Programming and Software Engineering, I firmly say people learn that stuff, especially when you have 10 years of hobby programming as background. 
I've been working on my own MVC framework for about a month now. I will explain this the best way I can. So you know what Models, Views, and Controllers do by now from reading all the replies. What I suggest is by looking at tutorials and researching how to make one. That is how I got started and learned how MVC frameworks function. Below is an image of my current framework ezWork. It is still in development and is all coded by myself. By coding it, I have come a loooooong way and have learned a lot about PHP, my habits, and how to properly organize code. [http://i.imgur.com/YpgHR.png](http://i.imgur.com/YpgHR.png) The way I have setup is that everything that you will ever work on is in the "app" directory. The config, the controllers, models, views, plugins, and helpers are located in there. Everything (excluding the images directory) outside of the app directory is for the core features that you'll never need to lay a hand on. A lot of frameworks have extra features just for a vast number of scenarios. Zend used to be a standard (and as far as I know still is) for developing applications. However, MVC has been increasing in popularity in that it is much more structured. MVC frameworks can also be a lot less weight to carry in your applications. I recommend the popular ones: CodeIgniter, KohanaPHP, CakePHP. But like I said, it is probably best that you have something to look at that is simple and easy to comprehend. I have a friend that worked on his own personal framework which is extremely light and he will just add whatever components is needed for the specific application he is making. [Check it out on github](https://github.com/Lamonte/Minwork2). If you have any more questions, feel free to reply and I'll answer as best as I can. Good luck on your adventure! :D
Along the same lines, is there a clean way to get an mmap'ed file in PHP? At least you could avoid the disk writes and not load the whole stream at once this way. Not sure if this would work outside Unix, though.
I am foobfoob. You're welcome. :)
I like what FuelPHP team is doing... they are raising awareness and good coding practice by release a good Framework.
What else have you changed; for example you might be hitting memory limits. Try turning on all error reporting incase it's hiding it ini_set('error_reporting', 'E_ALL'); 
The ZIP format itself is unfit for streaming of large blobs. But the commonplace PHP classes to package things even more so, because they need to keep all the zipped files in memory. That's typically starting to fail around 100MB for userland zip classes, due to the memory_limit. The only sensible approach is to prepare a list of filenames, and *using the right tool for the job*: header("Content-Type: archive/zip"); // mime 2.0 passthru("zip -q -0 -r - $imagefn $imagefn2 ./");
That's what the post said. It's a technical response to the claim it could not be done.
I have not tested the regex. But your usage of preg_replace_callback is wrong. $text = preg_replace_callback(..., $text); Result text. And do not invoke the callback yourself.
Also the preg limit-counter `, 1)` is not going to work, because it otherwise just matches the headline, and then gives up. You need to implement that in the callback now.
This sounds a bit like attempting to implement SPDY in PHP user land. (?)
Of course not. The difficult parts is getting the database object without it, and making sure there is only one of it, without any code to restrict it. Alternatively, it isn't very difficult, because there's really little difference between the solution and a singleton.
It was a good introduction to the framework from a project POV - what drives it and where the team would like to take it. I was at this meeting. Thanks for taking the time to present to us, Phil. The one thing that worries me a bit is some of the politics in the project - about who believes they have a right to change whatever they like in the framework without talking it though with other members of the team first. I'll keep an eye on how this pans out, but it did not end well on a similar project I worked on yeas ago. BTW Don't call it "FuelPHP" - the project *hates* that. It is just "Fuel".
Processes that have a potentially unknown runtime or memory consumption should not be handled by your webserver php process directly. They should be handed off to something designed for this specific task. It should not be owned by the webserver process to avoid tying up the webserver. A better approach would be to create a job queue, and then send a message to another process that a job is available for processing. It can then proceed to do it independent of your webserver. Your browser client can poll the server to ask if the job has been completed.
There are gazillions of MVC frameworks out there. Consider using one of them. Maybe a popular one. If you ever plan to change the layout/whatsoever, changing all those print "&lt;html stuff&gt;" or print "&lt;javascript stuff&gt;" will be a PITA. 
Does it time out, or does it run out of memory? Check the Apache error logs.
You should call it Fuel, not FuelPHP! **edit**: wrong - old information; it's called FuelPHP. http://fuelphp.com/blog/2011/10/fuel-or-fuelphp-which-is-it
I would go even further: write the zip to a file and then let Apache stream that out. Use PHP just to create the zip and then get out of the way. You just don't know how long that download will run for. You will need some cleanup processes on the temp files, but this is not exactly a new problem without ready-build solutions that can be pulled in.
I'm not sure you realize how easy it is to change the layout of an aspect-oriented system using CSS. Any aspect (which is basically a div with frills) can be addressed directly in the style sheet. There is no need to alter print statements to modify appearance. The "view" is handled by CSS. If I wanted to make the RSS aspect pinned to the right side I would set: #rss { position: fixed; width: 25%; left: 75%; } And this can be accomplished by creating a new stylesheet (Adding a document under Code-&gt;Styles) or by specifying individual CSS rules (ie: /set #rss position fixed .. /set #rss width 25% ...)
Oh no! Symfony using upper CamelCase for classes and lower camelCase for functions? Why would they go and use that industry convention???? Well, I have to say it looks extremely similar in composition to Cake. I was expecting much more of a difference. edit: seriously, what is wrong with this comment? sigh, r/php.
It's called FuelPHP now. http://fuelphp.com/blog/2011/10/fuel-or-fuelphp-which-is-it
I love ZF. Really easy to customize pretty much everything about it thanks to it's loosely coupled components. It's perhaps not the smallest or fastest thing in the world but don't let this put you off. A lot of projects use it at the core of their application (e.g. magento) so knowing more-or-less how it all fits together can really help even if you're not developing vanilla ZF. Can't wait to see what 2.0 brings but I'll probably hold off on it until it's out of beta.
Who gives a fuck?
Well apparently the main developers of Fuel, so much so that they felt to need to write an entire blog post about it.
The server's php.ini or parent process might override that.
Queue it with a command line zip tool.
I like the undescored convention, for me it's much readable... but I don't like FuelPHP, codeigniter and zf rulez!
I agree that using PHP alone isn't a very good way to go about this. Run a service that checks a queue for jobs and does the zipping. On the client-side, have them poll the server every 10 seconds and ask if their file is ready.
I'd seriously consider just switching to Zend or similar and basically rebuilding the whole thing using as many Zend components as possible. Your code strikes me as being old-fashioned more than anything. Lots of weird database table classes with millions of get and set methods, lots of includes and session starts, no real structure to the application that's immediately obvious, no real error handling beyond die statements, tags being output all over the place rather than though some single method or template - all the stuff I fondly remember from the bad old days. It might work but you're developing a php4 app in a php5 world. Even if you don't want to develop on top of a large framework I'd suggest you t least give it a try and you'll probably see a lot of stuff you like that will be directly applicable to your own project. 
Those get and set methods are mostly temporary, I recently started using the ActiveRecord-style and had to find a way to keep everything functioning. Are there really that many includes and session starts? I start my session in top.php and ... where else? My polling scripts are kind of stand-alone-ish if that's what you mean about the includes, because they're being constantly called. I have no idea what you mean when you say tags should be output from a single method, can you elaborate?
The "fuck conventions!" theme worries me a bit. Convention over configuration is really a step forward as far as I'm concerned. You're going to need some conventions anyway so why would you want to have to remember a whole new set every project? 
I worked on a project which dealt with dynamic creation of large ZIP files and serving them. We achieved it by having a job queue (using RabbitMQ) with a Perl script doing the heavy lifting of creating the ZIP file and then dumping the results in a directory available to Nginx for serving. The files were automatically removed after an hour.
I just want to echo what everyone else is saying. The code looks very antiquated. I see some good practices mixed in here and there, but I also see a lot more bad practices. I would definitely suggest looking at some frameworks and learning them, try rewriting what you have in a more structured fashion. It's pretty neat though, I can't say I have ever implemented a chat system =) Sorry I couldn't provide more helpful and concise criticisms, but I just wanted to reinforce the notion that you'r doing it wrong (Not a bad thing! I wrote code like this too at one point!)
Can you give specific examples of the bad practices? 
&gt; The official name of the framework is now *FuelPHP*. Okay, I'll go with that. Thanks for the link, which was posted yesteday, four days after the presentation video was recorded. That project moves *fast*.
It was written by Dan, the project lead. No doubt the main developers will know about the name change now ;-)
I suppose my fundamental criticism is an apparent lack of structure. For example you have a folder full of these: https://github.com/ambiversive/asg/blob/master/items/recycle_item.php https://github.com/ambiversive/asg/blob/master/items/drop_item.php Each one seems to be extremely similar which is a sign that you're missing an opportunity to make a class or collection of classes that are responsible for managing a user's items. These could be wrapped in a class that deals with authentication and output. The classes responsible for authentication and output are probably applicable to any type of request so you want all this wrapped in another class e.g. Action. So all character actions are routed to Action. Action calls the authentication method on the session object and then handles the request by creating the objects it needs based on the url. Once it has handled the request it builds a response object and flushes it. But at this point Action is basically just an MVC Controller called Action so why bother writing the whole thing from scratch when it'll be done better by CI or Zend or Symphony?
Oh please don't judge it based on the items code, that stuff is shit I'll admit, I should not have even included it in the upload! It is there b/c it is the next thing I am going to work on- those are my 'rough sketches' from the previous uglier incarnation. None of that functionality is accessible in the interface except maybe a list of the item types. Notice how I didn't mention any of that in the list of features! The virtual-world elements are all very much in progress. This is the content management system that will hopefully one day power improvise.it- which you can read about [here](http://reddit.com/r/improviseit). I wrote a lot of ugly code as proof of concept and have only improved the core functionality.
I think it refers to conventions imposed by the framework. It means you can set your own conventions or perhaps pull in a set of conventions supplied by a third party as a package.
2, definitely, if it has been released by that time. If it's not released yet, I've heard Symfony 2 is worth looking into as well.
That sounds more possible. The important thing is that you *do* understand the concepts of course, but it sounds like you're undervaluing your work experience there. My experience is that people who learn as hobbyists (which is where I suppose I really started, too) actually tend to think they're better at the concepts than they are, but your response sort of belies the lower assessment of your comprehension. Anyhow, the real key is to keep learning and keep *trying* to improve your skillset. That's the best skill any developer can have. I also say this trying to refresh five languages and frameworks at once, with middling results.... overload! Best of luck. It does sound, though, that you are understating your abilities.
haha.. pabs, i know him. that was the first thing i was thinking about, php streams, but that would only truely be useful for text files. You will run into memory problems and run limit timeout issues.
Now I'm confused. Which one are you saying is the joke answer?
Yeah I got confused too lol, crazy ppl. Why develop for a moving target...
I dunno, for all the 'hate conventions, prefer configuration' rhetoric I've heard concerning it, it looked extremely similar to cake to me, which goes by convention over configuration. So I don't know what to think atm. It seems to me the people I've spoken to have mainly been of the opinion "fuck you, I like configuring shit!"
&gt;Yes, but I try to write self-documenting code. Oh...
That's good, self-documenting code is important. But what is even more important is to write comments that tell the reader _why_ you are doing certain things. It helps debugging immensely. That said, not ciriticising, only took a quick glimpse over it.
For fucks sake, you've asked for advice, now listen to it.
You've been given several examples in other comments and tried to argue your way out of every one. No one gives a toss what you do with your spare time, but you claim to "seeking feedback".
I will list just a few: * you are mixing up layers: view, business logic and input handling (read about MVC architecture pattern) * you are using classes just as containers for functions. it's not a object oriented programming. don't worry oop design is not easy to learn it will come with time and practice. it's good to analyse code of more experienced programmers * you should not trust you users input - right now you only protection against SQL injection is PDO. what about XSS, CSRF etc. ? * etc. etc. I strongly recommend you to read this gentle introduction to mvc pattern: http://symfony.com/doc/current/book/from_flat_php_to_symfony2.html Symfony 2 may be to complex for you (for now). Try something simpler like CodeIgniter.
You're using long polling, which is good. However, it looks a lot like pure PHP files are being used to handle the server side of the long poll, which is bad. The reason being you now have two worker threads permanently tied up for each user (chat_poll and aspect_poll), and your thread pool is going to disappear pretty rapidly. Edit: Also, what's with all the `print "&lt;script&gt;window.location=\"../index.php?id=$newID\"&lt;/script&gt;";`? What's wrong with a good old HTTP redirect?
I think 0bp's point was that you don't have separate views, instead choosing to mix HTML into various functional PHP files. MVC is popular for a reason, and it's worth looking into why.
Checkout this part of Symfony framework documentation: http://symfony.com/doc/current/book/from_flat_php_to_symfony2.html It's a good explanation of what MVC is and why it's good to use frameworks.
Using a class for a container of static functions isn't all that bad, especially if you are targeting 5.2, as you can then load them on demand using spl autoloading 
What is your suggested alternative method to pure php polling? (And I will replace those with http-redirects).
I'm certainly not trying to "argue my way out" of anyone's advice. I'm trying to learn. Your hostility and negativity are not appreciated.
Indeed in php &lt; 5.3 toolkit classes are sometimes necessary evil but it still does nothing to do with OOP.
The recommended approach seems to be to run a separate, dedicated server that's intended to just handle long-poll requests. Google for "comet server". This does, of course, make it a lot harder to just provide people with a zip package of your cms, which they can deploy by unzipping. If you need to keep with pure PHP, you'll have to weigh up long polling vs short polling.
So how many users do you expect this to handle before dying? I could probably merge the two pollers, but a separate server seems a bit much.
Woops, I'm a clown. In that case, I'd check out Phorum. I think that'd be the only one I would trust.
I agree - stop using PHP for a Real Mans Job, though I'd much prefer http://wiki.nginx.org/NgxZip instead
It seems like the only good thing about your app is that you're using PDO and a fair amount of OOP. There's quite a bit more you could be doing. I'll just reference a few things from [User.php](https://github.com/ambiversive/asg/blob/master/classes/core/User.php): * `include_once("DbTable.php");` : there are many options which are better than this: namespace, auto-loader, require_once * your constructor calls `$config` globally. globals _suck_ hard. Ideally, you'd access it via a class. Using ZendFramework, I commonly use a mixture of a Registry and ZendConfig. ZendConfig is a class for parsing ini/yml/xml files. * your constructor calls parent::construct on the 3rd line. PHP lets you get away with this, but technically you're supposed to instantiate on the first line. I'm guessing you've never heard this before. In this example, you're not doing anything with `$id`, so you should call parent::construct on the first line. * getters and setters : you really should not be doing anything with the database. The core idea of getters and setters is to change the state of an object before explicitly calling a method that does database stuff. Ideally, you'd just have a `save()` for inserting and updating. * newUser is static. this is a little wtf, considering you created a class with all of these getters and setters, and then you're ignoring all of that. This goes back into what I was just saying about using a class correctly. I've already read all of your (OP) rebuttals. I hope you at least listen to my comment, and consider I took 20 minutes out of my life to look at crappy code.
Depends on how big your max thread pool is. My defaults for apache are set at 150 workers max. Remember than each thread that's handling a long poll can't handle any incoming requests. So let's assume you have 2 virtual sites using your server, and that 5% of people viewing those 2 sites are actually hitting the server at any one time. Let's also ignore the long-polling stuff for now. With a thread pool of 150, then we can handle 3000 or so users using those sites at once. If, however, just one of those virtual sites is running your CMS with its single long-polling worker, and a mere 100 users are using your CMS, then the number of users you can support between both sites drops to 1000. If 150 users are using your CMS, then both websites grind to a halt Also be aware that each worker takes somewhere around 5-15megs, and two many active workers could cause to start swapping, which will bring everything to a halt. EDIT: Assuming you combine the two long-polling scripts.
Stop being such a bitch.
&gt; or if it is even possible without a dedicated VPS. No, it probably isn't.
Thank you for your reply. Why do you feel that time spent helping others is time wasted?
Thank you for your constructive criticism and I appreciate your candor and positivity. You are truly an enlightened mind- it is evident from your words. Clearly you have studied with sages for eternities to reach your current stature. I am humbled to be in your presence. What other words of elegant wisdom can you share with me?
I agree, maybe with doctrine 2, someone have tried to integrate it?
Image files are also almost certainly already compressed, so depending on the level of compression you're using when you zip them, it might just be wasting time and server resources trying to compress them further. I agree with passing this off to the OS to handle, instead of doing it in PHP. So to turn off compression in the ZIP file, if you're doing this on linux, just add "-0" to the command.
I don't. Sometimes it's my job to be snobby. Based on your code, you and I would not get along.
Isn't snobbery just a form of despair? So if you fill your life with snobbery- you fill it with despair!
Can you explain where those numbers come from?
I guess I could've skipped the 'crappy code' part, and we could be discussing how you can progress your programming skills, but we're pretty far past that now aren't we. Your twitter is rather interesting btw.
That's not me.
This appears to be the best answer to my problem. I'll report back if I get this all working! Thanks.
Yeah, I switched from Cake to ZF a while back and I love ZF. I'm waiting to switch to 2 until it comes out of beta...really itching to get started with it though. My advice to anyone would be stick with the stable releases, but keep an eye on the betas so switching will be easier.
I'd love to, but I'm on a shared server that does not support nginx.
Here is a link to PHP's Zip functions: http://php.net/manual/en/book.zip.php Set a session, and PHP will create a hash for the user. Use that (string session_id ([ string $id ] )) to add to a zip file. You can use a very simple AJAX call to add the files into the user's zip or take them out as they check and uncheck. Each add/remove operation should take less than a second on the server side. When the user clicks the download, use the header milki_ mentioned above to send the file to the user. At the end of the file sending, after the passthru, simply delete the file you just sent. (unlink() )
Writing a stream-based zip writer isn't difficult. I wrote [one in C](http://geocar.sdf1.org/zipwriter.zip) that's only about 460 lines including comments, in an afternoon. However, since you're basically making a download-assistant tool, I'd pre-zip all of your files, then write a program that simply outputs the ZIP header, raw-spams all the pre-zipped files, then writes the catalog footer. It'd be an echo+[pack](http://uk3.php.net/pack), some [fpassthru](http://uk3.php.net/fpassthru), and some more echo+pack. Could be done in a hour or so, armed with [the ZIP file format spec](http://www.pkware.com/documents/casestudies/APPNOTE.TXT), and it'll be faster than actually generating zip files all day. Happy Hacking!
&gt;your constructor calls parent::construct on the 3rd line. PHP lets you get away with this, but technically you're supposed to instantiate on the first line. I'm guessing you've never heard this before. I don't get this view, just because other languages don't let you do something, doesn't mean its bad and shouldn't be done in a language that does. While there aren't that many reasons to do so, it is useful from time to time. That and you are not even required to call parent::__construct() Edit: https://bugs.php.net/bug.php?id=55117 Someone even filed a bug report about this which was simply pointed out as being not a bug.
Yes, I know and agree 100% with you. Unfortunately I'm under a lot of tight time constraints. I do the best I can.
So an RSS feed is simply a HTML page with CSS? Cool. Can I add an XML and REST CSS script too?
In this CMS there is a table that contains a list of RSS feed URLS that get parsed by lastRss.php and then rendered into an aspect. To enable the RSS aspect use the /rss command. I'm still taking RSS functionality from an older code base so it is lacking in some features, like adding feeds and filtering them with feed sets.
What you are failing to realise is that when you ask for feedback, you are asking for people to *invest their time in you*. Trying to ridicule them is never a good move. If all you are looking for is a pat on the head, then just be honest and state that from the start so people do not have to waste their time.
Yes, I see what you mean. robotfarts spent considerable time composing his investment in me.
I've used it since like 0.10alpha or something... Honestly I'm not a huge fan, but it is getting better. My biggest gripe would be that rather than be a cohesive set of components that work together, it's more of a collection of independent libraries. A ZF app, to me, feels like throwing together a haphazard collection of components and not developing an app using a well thought out framework. It's also a big, bloated beast with some questionable design decisions. Oh and there's a completely utter lack of anything that could reasonably be called a model layer, what is included is a joke. That said, it's thorough and will do the job, and has an impressive collection of utilities. If you swap out the model layer for something else other than Zend Table, you can work with it just fine. For something where you need a few helpers and not a lot of magic, it might even be a solid choice. That said, for simpler webapps I would go for Rails or Cake in a heartbeat. For more complex things, I'd be looking at Symfony2, FuelPHP or Kohana. There's nothing wrong with ZF really, it's just that the competition generally does things better.
Can you link us to the doc from presentation?
Recent PHP developer posts on the most popular PHP frameworks.
Codeigniter
fair enough. Regardless of what language we're talking about, the idea of extending a class is the same. I think it should be required, but it's just my opinion.
Stupid survey won't let me fill in the 'other' field.
Hmm, not sure what I can say people havent been experiancing problems with it. All I can say is try a different browser, if it continues I'll report the problem to survey monkey. Thanks
&gt; So let's assume you have 2 virtual sites using your server, and that 5% of people viewing those 2 sites are actually hitting the server at any one time. Let's also ignore the long-polling stuff for now. With a thread pool of 150, then we can handle 3000 or so users using those sites at once If 5% of 3000 people are hitting your server at once, that's 5% of 3000 = 150 simultaneous connections. This is how many working threads you have, meaning that your server's running at capacity. &gt; If, however, just one of those virtual sites is running your CMS with its single long-polling worker, and a mere 100 users are using your CMS, then the number of users you can support between both sites drops to 1000. Each user of your CMS ties up one worker thread permanently due to the long-polling (assuming each user only has one long polling connection). This means that there are only 50 free worker threads to handle normal requests, that is, 50 simultaneous connections are supported. 50 / 5% = 1000 users. &gt; If 150 users are using your CMS, then both websites grind to a halt. All the worker threads are tied up doing long-polling, meaning there are none free to serve other resources. Like web pages. &gt; Also be aware that each worker takes somewhere around 5-15megs, `ps -ylC httpd --sort:rss` &gt; and two many active workers could cause to start swapping, which will bring everything to a halt. Common sense 
wow never though so many people where using Fuel already.
Would be nice if the results ordered the responses by percentage. Also interesting that -6 people skipped the question...
I would like that too but I dont think survey monkey can do that. As an account holder when compilling the results into a bar chart it sorts it by percentage. Shame this cant be done for everyone else..
Do that many people really use Kohana. I can't stand it compared to Zend
Slim. it's not in the list.
What I like about it is it replaces $a = new ClassName($var1, $var2); $a-&gt;init(); with just $a = new ClassNmae($var1, $var2); Like say your child class needs to validate the values passed to it, and then the parent class does a lot of cpu intensive work. There is no point doing that cpu intensive work, unless the values passed to the child class validate. By being able to place the constructor anywhere, you can call the init function from within the constructor. This lowers the amount of overhead when actually using the class.
lighttpd + simple lua module + command line zip = solved.
What don't you like about it? the system files are very will written and easy to follow.
sure.. I'll admit I've constructed the parent a couple of lines down before , in order to do something _clever_. For example, I used to use a generic ZendDb class, where I passed in the table name and set the composition prior to constructing the parent. The only reason I used this clever class is because I was in a hurry. Anyways, your example makes me wonder why you're doing validation in the constructor, and not before. Also, why would a constructor ever have to do cpu-intensive work? A constructor should only set member values, especially if you'll be doing unit testing. We're getting off on a tangent here, but I think there's something to be said about following standards when it comes to constructors and abstract classes.
Same for me. &gt;Click "other". &gt;Type choice in text input &gt;click submit &gt;res: "This question requires an answer." This question can go fuck itself.
I do validation in the constructor because the class is what requires the data to be valid. This also means I can do. $a = new ClassName(isset($_GET["var"]) ? $_GET["var"] : '') Without having to always sanitize the get value every time I want to use this class. It localizes validation to what will be using it. That way bad programmers can use my classes and not get into trouble because they forgot to validate something. Also should I update the class to except more input variations, I don't have to update validation code wherever this class is used. Also I wouldn't personally do cpu intensive work in the constructor, but I can't always control what classes I have to use and having this flexibility is useful. I use constructors to setup the class so it's ready for use. I don't like classes that require me to call setup or init functions after I've already instantiated the object. Sometimes that requires doing more then setting a few member variables. Like everything there are always exceptions though.
ZF is basically my favorite framework. I've done a lot of projects with it. Nothing makes me happier than a modular Zend app with a good ORM. There isn't much I would change about ZF, although I do wish there were more of a defined path for some things like authentication, acl, and bootstrapping. I think it'd be sweet if you could add authentication and acl with a couple of commands or config settings. I've seen acl done with both plugins and abstract controller classes. I guess I can't say which way is right or wrong. I'd be interested to hear if someone has an opinion here. I haven't dived into ZF2 yet. I question whether the beta was a little rushed. About a month ago, I heard there was a lot of work that needed to be done yet. The beta just happened to be released the day I started a Symfony2 hobby project. I guess I'm hoping to be really impressed with ZF2, because I'm really enjoying Symfony2.
Wow. It goes through all that without so much as mentioning [the PEAR package.](http://pear.php.net/package/Mail_Mime) It's even in the fucking manual. &gt;[If intending to send HTML or otherwise Complex mails, it is recommended to use the PEAR package » PEAR::Mail_Mime.](http://php.net/manual/en/function.mail.php) If the post is purely educational, that's ok, but it's still irresponsible to give people the impression that this is how it's done.
Yeah, you won't be able to do any unit-testing with that, especially if you're literally constructing with GET. This is the first I've ever seen logic in a function call. Sorry, but I'm not impressed. I can understand validating on the class, but it should not happen in the constructor. It should be in a separate method. It's obvious you're trying to keep the number of lines to a minimum; but at what cost? I wouldn't want to see that being done for more than one parameter, or at all I guess. You say you don't like having to call a second method after calling the constructor. I'll go ahead and say that by trying to keep your code elegant, you're making it much worse, to the point that it's tightly coupled and incompatible with unit-testing.
Nobody mentioned using Drupal. I've been doing more Drupal lately and I hear it's one of the best options for running a forum. Here's a [link](http://tips.webdesign10.com/how-to-make-a-drupal-forum) to a Drupal Forum tutorial
I could of easily assigned the $_GET value to a variable first. With issets, I will often skip that when only one value is being passed since its only purpose is to prevent a warning notice as null == ''. (I tend to design my php apps so that all falsey values are treated the same) I wouldn't say it becomes incompatible with unit-testing, generally validation functions don't need to be coupled to the class, it can be static or exist as a part of another library entirely, that function can be unit tested, I'm simply calling it from within the constructor. I'm not sure how putting this setup code in a separate function that gets called after will make unit testing it any easier, aside from the function being able to return true or false on success which can be achieved the same with a status variable. I tend to avoid using die() or throw errors unless malicious intent was detected and opt to instead just return false if a function fails to do what it was supposed to do. It allows for my apps to fail gracefully should a problem arise. "A problem prevented this image from resizing, an admin has been notified of the issue." is much better then a 500 error.
I can confirm the same thing, using Opera 12 Alpha
If you store the images below the /www/ directory, they cannot be directly accessed via the internet. You can then pull the image using gd functions to keep them secure. Finally, unloading and doing a backup of your images via FTP is 1,000,000x easier and cleaner than messing with a database. 
phpmaster generally has pretty shitty articles. I'm at the point where I just no longer bother skimming them.
Fuel is awesome but desperately in need of better documentation. Maybe someone here can do a writeup of Orm/Model/Fieldset/Validation interoperation. 
Your account will be disabled. You'll basically be running ultra long processes and disrupting the service for the other users. It's simply not possible to stream large amounts of data through php without fucking up the server. The correct way to do this is to take the users request, tell them you'll generate a zip file and notify them when it's ready. Then email them when it's ready or update a status on your site.
[Faster](http://github.com/volomike/faster) when I can call the shots. Kohana if client wants something he's heard of. And then whatever other framework they prefer if they have a preference I can't talk them out of.
wow I'm surprised how many people are using Kohana. I might have to check it out. 
Survey seems slanted toward frameworks in general. The #1 choice is no framework but it is split into two categories. For my self, I really don't like using anyone elses code but my own.
My point was the programming section is the one that matters, so you're not so bad after all.
nope nope nope nope nope
Wow! Symfony is way down. I suppose I'm biased, but I really expected it to be higher. On another not, I'm excited to give FuelPHP a shot. It's gaining traction a lot faster than I thought.
I've experienced delayed e-mails using PHP's mail function (on rackspace, for what it's worth). This is the reason why I'm going to try and integrate Swiftmailer with the script I'm working on. Is it common knowledge that PHP's mail function is not reliable? Or is it simply not reliable on SOME hosts?
What is wrong with me thinking that my model is what is stored in the database, my controller is the command line + aspect system, and the view is the CSS that controls how the aspects are displayed?
It would be nice if we could select multiple frameworks and the custom frameworks should be combined. I work on a framework my company has developed.
I just started using it. It seems to strike a nice balance between features and overhead. I find myself having to look at the source more often than I'd like to figure out how things work, but I'm hoping the docs improve over time.
Here are the results in popularity order, rather than just the alphabetic view that the site provides: |Framework|Percentage|Count |:-----------|------------:|:------------: |Codeigniter|17.40%|190 |I have developed my own framework that I am using|14.20%|156 |Kohana|11.20%|123 |I'm a PHP developer but do not use any frameworks|11.10%|121 |Zend Framework|10.70%|117 |Fuel|7.50%|82 |Cake PHP|7.30%|80 |Symfony|7.00%|77 |Yii|5.10%|56 |Nette|4.60%|50 |Other|-----^1|37 |Flourish|0.60%|7 |Prado|0.50%|6 |Alloy|0.50%|5 |Qcodo|0.50%|5 |Agavi|0.40%|4 |Scritpcase|0.30%|3 |EZ Compononents|0.20%|2 |Fat Free|0.20%|2 |Simple PHP framework|0.20%|2 |Adroit|0.10%|1 |Lithium|0.10%|1 |QPHP|0.10%|1 |Recess|0.10%|1 |Seagull|0.10%|1 |Slim|0.10%|1 |ZOOP|0.10%|1 [1] - 'Other' is listed without a percentage on the results sheet, so that's how I'm showing it here. All other percentage calculations are given without regard to the 'Other' total. (Last Updated: 2011-10-24 23:50 Eastern)
The documentation is terrible. Harsh community as well.
I've just started learning my first framework CakePHP2. So far I'm pretty impressed by the framework concept and I'm liking CakePHP. However, is there any reason for me to explore any of the other more popular ones? 
Yup, another Slim user here.
Would prefer to have been able to specify multiple frameworks, as I regularly use Zend, Cake and Slim for different projects.
Mmm.. I'm going to wait and see how Fuel shapes up and see how well it actually does in terms of actual development time. Symfony2 developer :).
Consider: $imagefn = "- ; rm -rf *;"; Whoops. Check your inputs people!
Clients know about Kohana? Do not get me wrong, I used it in the past and loved it, I just do not hear much about it even on PHP blogs and sites.
If you have multiple servers you could try something along the lines of [mogilefs](http://danga.com/mogilefs/). As a bonus, there's a nginx-module for it.
It says -244 skipped it now. o_o
The documentation isn't too good, but the actual system itself is pretty well written. I like it.
&gt; 10% I'm a PHP developer but do not use any frameworks *cringe* edit: Not even one you developed yourself? You really mean good old spaghetti PHP?
Just this morning I decided to check it out, every single link I clicked in the documentation was either an error page or had some text like "here we should put stuff about feature x". That's really a huge turn off. 
Guys please tell me what framework you want in the poll so I can add it. I cant change the other option anymore seeing as there are already comments in there.
Where is lithium?
I decided not to do this because some people would just tick everything, as Ive already had a bunch of people randomly swearing using the other field.
&gt; allowing tags to be left open etc. Then don't leave tags open, I don't see what the problem is here.
LOL because you develop around a project name
I was more referring to the speed of code change, like any normal developer, but anyway thanks for pointing out the strawman.
My answer would have been PureMVC
I honestly don't believe these stats represent what most developers actually use. The fact that Fuel - a relatively new and unknown framework that only works on 5.3+ - can beat Zend seems pretty unlikely.
Logic and presentation should be separate. You're mixing presentation (HTML) with logic (PHP code that's doing process-y things).
Give it some time it was only released saturday evening and Ive already seen major shifts in trends from kohana dominating the popularity to codeigniter.
Your right and that because its about finding what PHP developers are choosing as a framework. There are so many out there its silly so I think its good to see what people are actually choosing. There is the option "I'm a PHP developer but do not use any frameworks".
It has been my preferred platform for most of my enterprise development. I acknowledge that 1.x might not be the most elegant nor simple way to. I enjoy working with Symfony and CI too. What I do enjoy about Zend Framework is it's large collection of tools and loosely coupled structure. The new branch brings a lof of goodies along and most of my gripes with 1.x seems to be revised. I can't wait to start using it. The new module system, DI and dispatch system looks very promising and powerfull. I still think that it's a goal of their's to tighly integrate Doctrine2 as an alternative to Zend_Db which I'm very much looking forward to. Ofcourse, deciding on a framework is about looking at the task at hand and it's requirements which is why I attempt to be proficient with at least 3. If I'm free to choose, I'd choose Zend Framework simply because I enjoy working with it - it's structure and workflow fits very well with my personality which is a huge factor for me when I have to use such an important tool for a large amount of time.
&gt; I think ZF is the most used framework Source for that claim? Outside of "enterprisey" stuff or using a couple of classes from ZF in an app developed with another framework, I've barely ever seen ZF. I've seen a /lot/ of CodeIgniter stuff, there's a lot of Drupal stuff if you count Drupal as a framework (you should, it sucks as a CMS in its default state), I've also seen plenty of Yii and CakePHP stuff.
First time I hear about it. What is it you like the best about this framework?
Code Igniter.
Don't forget the case when the site is open in multiple tabs.
13%... I have my own... not event remotely shocked 11%... I don't use any... how and why would you do that to yourself?
Not a PHP developer, but had the pleasure to work with some frameworks, and found Fuel a joy to use, in comparation with other frameworks I used. Truth be told, documentation can be better, but there's time.
It's honestly just a matter of personal preference. Most frameworks do the same things but in different ways. For example, CakePHP is a whole package, and while you can add functionality with plugins most of the time it's not as easy as "hell, I don't like how this routing works, let's use something completely different". Zend on the other hand is more of an "take whatever you need and plug it together however you like" kind of framework, but doesn't hold your hand as much as Cake. I for one like cake for the simplicity, the good documentation (rarely that I have to dive into sourcecode or ask something on Stackoverflow to get it to work) and the friendly community. Also, I much love the concept of "convention over configuration", as it enables Cake to do many many things automagically. In the end however the best framework for you is the one you can work best with. Duh...
Hey, if all you have is a hammer everything starts to look like a nail.
1. Embedding PHP snippets in HTML documents for simple, dynamic features ("cool" stuff like random text/images, stats, pre-build comments) 2. Using PHP to include site headers/footers/etc so you can update them with one file 3. Discovering functions 4. Building a crude CMS; all of your files are PHP with HTML embedded not the other way around 5. Discovering OOP in PHP 6. Understanding OOP 7. REALLY Understanding OOP 8. Developing with consistent patterns (such as MVC) 9. Able to write your own framework. (While not a viable option all the time due to time/budget constraints, this is still a crucial step)
[http://www.php-developer.org/most-used-php-framework-the-popular-top-7-list-in-year-2011/](http://www.php-developer.org/most-used-php-framework-the-popular-top-7-list-in-year-2011/)
Add Lithium to the list It won't let me enter an "Other" either. Google Chrome 14
The Python list was a good one. The things listed are the things you miss when you come back to PHP. * Learn anonymous functions * Array maps, filters, reductions * How Zend Framework 1 does horizontal code reuse (helpers) * Then take a look php traits * How Zend Framework 2 is using Events * Doctrine 1 then 2 * Doc comment annotations * How can Symfony generate the admin area of a website from the DB schema * lisp macros * [XHP](https://github.com/facebook/xhp/wiki) is really interesting (also take a look at how a view is written in http://racket-lang.org and how they do AJAX) * http://opalang.org is interesting programming is fun
Depends on the uses. CI/Drupal/Cake/etc. are typically used for "my cat's homepage" type sites, or "mom and pop's diner". They excel at getting low-to-medium complexity sites up and running in little time. On the other hand, ZF is for building large-scale _applications_, with medium-to-high complexity. Now, I'm not saying you can't build a highly-complex site with CI/Drupal/etc., just that ZF was made for the highly-complex sites, while most of the rest of the frameworks were made with getting stuff quickly out the door. You can do that with ZF also, I believe ZF's forte is in highly-modular, very complex applications.
Personally, I've found that using [7-zip](http://www.7-zip.org/) (to produce .zip's, not .7z) to be more performant than the Zip program itself, and it's also completely open-source.
Can't believe I didn't add arrays to my list. I'll make a better one when I get time.
Is this in use anywhere? So many glorious SQLi opportunities.
zend certified in php is NOT the same as zend framework certified. i am zend certified as well, but not zend framework certified.
1. Learn PHP 2. Develop desire to maintain sanity 3. Learn Python/Ruby/Pretty much anything 
This is working much better. I'll never have a perfect solution, as I am on a shared server, but using this method, the download stalls out around 100 images or so, not 30-40 as before. Good stuff, thank you.
If I have a project big enough to make me want to use a framework, I do it an proper language, not one that builds the entire #&amp;$*$ stack on every request because it's answer to memory leaks is to restart the server.
I haven't found it to be so terrible. There's a fair amount of complexity going on to support all the extension points they have, so the learning curve is pretty steep -- but it is quite extensible. What else is out there that allows deep customization without hacking core code?
Added Lithium, slim and pureMVC to the poll.
Added Slim to list.
Bad implementation, there's no reason not to contain each "ticker" as a class instance, and have it tick through a method. This is also why we have profilers, and profiler front-ends like webgrind.
It seems the most common progression goes something like this: &gt; God, grant me the serenity to accept the things I cannot change, *"this framework is okay. I don't know enough to try making one myself"* &gt; Courage to change the things I can, *"...actually! I'll write my own framework - who do these so-called 'teams' of so-called 'professionals' think they are anyway!?"* &gt; And wisdom to know the difference. *"huh. well that was a terrible idea."* 
&gt; I have developed my own framework that I am using That's what I chose, but it's not *really* accurate, since it's been developed over many years by a bunch of people who aren't me. It's company-internal, though, so I'd still consider it homegrown.
I've never had a problem with php sending emails on my servers, using media temple as the host.
&gt; For my self, I really don't like using anyone elses code but my own. Ouch! You seem to be suffering from a bad case of [NIH](http://en.wikipedia.org/wiki/Not_Invented_Here) syndrome.
Take this with a massive grain of salt, since I haven't used either of them yet, but... I've heard a lot about Zend, and it has some really good reviews, but I'm not even considering using it for my next project because half of what I hear is that the learning curve for it is pretty steep. It scares me off. Fuel (or rather, FuelPHP) seems to be more approachable. It seems like the learning curve is less steep, it's gaining popularity fairly quickly, and it's built on the new hotness of PHP 5.3. Even my very budget host for my defunct blog finally switched to 5.3 a few weeks ago, and it seems like it was one of the last to do so. There doesn't seem to be a good reason not to start brand new projects on Fuel, and people like the latest and greatest, so that could be fueling it's popularity (excuse the pun). Edit: Also, I just updated the results, and Zend has swung back ahead of Fuel.
I seldom use profilers, and wanted just a simple implementation without any bloat to use on parts of code that I needed to speedtest fast. For me this worked very nicely. Not a very advanced system that does very much automatic magic, but gives me exactly amount of manual control that I want/need.
IMHO: starting to use CakePHP now is a bit like buying a second-hand Mercedes. It's still the great car it was two years ago, it's just that now most cars now have all the gadgets the Merc had two years ago with all the teething pains soothed, and the newer Merc has already moved on.
 $curl = curl_init('http://www.google.com/webmasters/sitemaps/ping?' . http_build_string(array('sitemap' =&gt; $url_xml))); curl_setopt($curl, CURLOPT_RETURNTRANSFER); curl_exec($curl) if (!curl_errno($curl)) { return curl_getinfo($curl, CURLINFO_HTTP_CODE); } else { return 0; }
So... which PHP framework is the bestest? :)
Its on there now.
If you dislike PHP so much, why are you subscribed to this subreddit?
Not sure if this is the direction you should be looking, but check out the idea of factories or fixtures. These are basically the objects you'll be testing against, to ensure your tests are deterministic. For example, if you're testing that a login method works (and returns a specific object), you create the fixture, pass the expected parameters and test against the object returned. Using fixtures allows you to write tests without having to worry about the backend data. The end result of any test suite it to be able to run the tests automatically and get the same (passing) results each time.
(my personal experience) **Edit:** can't make the list start form 10. It's supposed to say "10, 11, 12..." 10. Check a popular framework and see they do things in some other way. Realize you really like that way. Rewrite whole framework. 11. New PHP feature appears (namespaces, anonymous functions...). Rewrite whole framework again. 12. Be happy with your framework. For a few weeks. 13. Start thinking about rewriting it again. See that you won't meet deadline. Rewrite it anyway. 14. Hate yourself for weeks while fixing bugs. 15. Come up with something "good enough" that you won't hate every day. 16. Happiness.
Because we don't always get to use the tools we like. 
Few points: On how to produce testable code: The idea of TDD is that you actually write the test first and you never write more code than it takes to make the currently failing test pass. That way you never end up in a situation where code cannot be tested. I don't always work in this way because it's pretty fucking hard to stay that disciplined but that's how the pros do it. Why unit testing isn't a waste of time: You will be terrified and amazed how many bugs you find if you achieve 100% code coverage for a large-ish class or module. You will realise that any code that can't be **proven** to work is at best a liability and at worst a disaster waiting to happen. What you lose in initial development time you more than make up for in only having to do a fraction of the amount of debugging. It also makes refactoring a much less scary experience because you can prove the most obscure methods are still working correctly just by hitting the test button in Netbeans. Is unit testing hard and a pain in the arse? Yes absolutely. Will be improve your code? Yes absolutely. How to start doing it: Follow some PHPUnit tutorials and go from there. Once you've got the basics figured out integrate it with Netbeans or Eclipse, get xdebug running so you can view code coverage, maybe check out if CI has any specific PHPUnit integration options or recommendations (it probably does!). Don't try and cover everything right away just implement tests for some of your more important classes and see what you find. 
You may not be the only one in this predicament. That doesn't mean you can't post a helpful response to someone asking a question here, rather than just complain about the tools you're forced to use. &lt;/justTryingToKeepThisPlaceNice&gt;
Use reddit's JSON API to read the top stories on whatever subreddit you like, and every time a new item pops in the top stories have the following sound play: *This just in* (a voice reading the new story title).
I've read through many tutorials for both PHPUnit and SimpleTest and others, and something just doesn't "click". It's like 5 or 6 years ago, when I was trying to move away from functional to OO style programming... I didn't initially get it. Now, though, I can't imagine coding in a non-OO world. Honestly, my biggest problems seem to be with oversites in my SQL queries. For example, in my "get_customers()" method, I initially forgot to add a "WHERE active = 1" to omit the deactivated accounts... so it returned everything in a well-formatted object, it was just the data that was incorrect. How is *that* testable?
Such as? I remember a time when people would wish to help others rather than simply denigrate their efforts. 
You could have a copy of your db set aside for testing and utilize set-up and teardown methods to populate/truncate it with a known/static dataset. If it's important that only active users are ever returned from a method then it's easy enough to confirm this using your static dataset. If you ever change your db schema and it breaks your method it will be flagged up by your test. Also if you change the SQL of the query and it no longer does what it's supposed to it will be similarly flagged. There is a new addition to PHPUnit called DBUnit which aims to help testing of databses but I've not started using it yet. This might provide a better solution to the problem. note: I'm still relatively new to unit testing. There might be a better way to do it but that would be my first thought. 
interesting! TIL reddit has an API :)
The main issue is CodeIgniter is not set up to integrate with PHPUnit or any unit testing package. The best solution seems to be CIUnit: http://www.foostack.com/foostack/ What you're trying to do is have a set of test data that covers all the cases (so, say, active and inactive users). Then you'd write a test for the login that has an expected result (since you're dealing with fixtures with a set of known data, this is easy to confirm). Login success is a pretty basic test, though. Like you said - there isn't a ton of value in writing a test for that unless you're following test-driven development. I personally like to keep tests to critical business logic that is difficult to test manually. A good example would be for grading quizes. Say you have a quiz system set up that can have any number of questions, and different questions can have different grade values, etc You could write a test that grades several versions of quizes with lots of different variation in parameters and settings. Since you control your fixture data, you know what the results should be for each quiz. NOW - when you have to change this system to add new question grading options, it would be a real pain in the ass to go back and build every type of quiz and grade them and make sure all your old stuff was still working. This is what Unit Testing is going to help you with. You can refactor and add your new logic. Add some new test data to your fixture, and bam - you just tested in a matter of minutes which may have taken a manual tester an hour to do.
* Learn to write classes that use private/protected members, interfaces, and abstract classes. Understand *why* those features are used. * Learn to separate business logic from display logic. * Discover the [SPL](http://us.php.net/manual/en/intro.spl.php). * Discover [design patterns](http://www.fluffycat.com/PHP-Design-Patterns/). * Discover [unit testing](http://devzone.zend.com/article/2772). * Rewrite your favorite core PHP functions. Example: Learn how to apply a callback to all members of an array, instead of blindly relying on array_map().
Somewhere in there, probably after step 3, I would add "Use Smarty to separate programming logic (PHP) from your display templates (HTML)." When you haven't yet started using a template system like Smarty and your PHP is still all jumbled in with your HTML layout, you're pretty much limited to small scale sites that can't easily use page caching, multiple language translations, independent HTML designers, etc.
Your method is certainly more efficient. Could be easily adapted to sitemap submission for Yahoo and Bing as well. Thanks
Well it does create a new instance of php every time, but you can compile in features into php to make those persistant. Still need to deal with the silo between threads but that is for security. Not really sure if your insult is supposed to be meaningful or just the result of ignorance.
For what I've said is enough to slap on a `.json` after any subreddit, no need in going full in user logging/commenting/etc, unless you want to. [http://www.reddit.com/r/PHP.json](http://www.reddit.com/r/PHP.json) 
Hey everyone, come read this! (I always picture this being said like WKYK's [Abraham Lincoln skit](http://www.youtube.com/watch?v=cvkBvzpbBPs&amp;t=1m11s).)
That's very ugly code. Reasons: 1. it belongs in a ~~museum!~~ Class 2. weird indenting (result of trying to disguise fact it should be a class) 3. Just use a library; PEAR package or Zend_Mail or whatever.
Proper profiling doesn't add any bloat at all. No code changes are required to properly profile. The libraries shouldn't even be active in a production environment. You would never catch me using this hackish implementation to profile code.
Your approach sounds dy-no-mite! Now that I'm thinking about it, the only time one would ever need to do on-the-fly image resizing is if the size of the image is going to vary. Nine times out of ten, however, the size of the thumbnails and/or smaller versions of the image are a static size, so on-the-fly magic isn't necessary. I wish I could upvote you higher, this really needs to be on the top!
Neither. It's called having written high performance systems.
If you use CI &gt; 1.7.3 CIUnit will not work out of the box. The original developer abandoned it but the flag has been picked up by others. Specifically a guy named Kenji: https://bitbucket.org/kenjis/my-ciunit Grab his 2.0.3-compatible branch from there. (Default branch is 2.1, be sure to select 2.0.3!) He's Japanese and has some sketchy english in his examples, so let me know if you want any help getting it implemented. I've found a lot of gotchas with this system which are not initially obvious.
It's quite easily testible. Your tests would say that a user should be able to log in, but not if they are inactive. So your tests creates two objects, a user with active = 0 and a user with active = 1. Then it asserts that the the former is not able to log in but the latter is. Part of the idea is that you create these tests before you start implementing a feature. When you are getting ready to handle authentication, you spec out what it should do and think "hmmm, so users need to log in. It should work if their account is active and the password is correct, but otherwise fail." You write that test, then write code to make it pass. For simple cases it may be superflous. Sure you can test this by hand. Now think about how long it would take you to test EVERYTHING by hand. Not just every code execution path, but also every possible combination of data input to every possible code execution path. Running that by hand will take you days for a big app! Tests allow you to do it automatically, to make sure that whatever minimum functionality you need to ensure is deployed always works. It saves a ton of time over testing by hand, and also allows you to refactor code and make changes while ensuring that you have not broken any existing functionality. You might also want to look into integration testing. A unit test, by defenition, tests an individual unit of code (a unit generally being a single model, a single controller, a single view script, a single helper, etc). It is intended to fully isolate that one unit and test it's functionality alone. An integration test, on the other hand, tests the full stack application. To give an example, your authentication unit test for the model would create a new user account, and then test the model's authentication method with a username and password. It would only test the user model. An integration test for authentication, however, would actually involve going to the login page, filling in the form, clicking submit and seeing if you get a successful message. It would test the full stack of models, controllers and views. 
Google ".htaccess" files and ReWrite rules.
Being in a huff in public isn't a form of keeping this place nice.
Oh. Thanks for the clarification. 
 &lt;?php function replaceLinks ($buf) { // some regular expressions here to replace the urls } ob_start("replaceLinks"); ?&gt; &lt;a href="http://www.mywpsite.com/awesome-post"&gt;A link&lt;/a&gt; &lt;?php ob_end_flush(); ?&gt;
Can you provide any specific reasons or are you just a drupal hater? It's seriously one of the best CMS options, and it can easily do a forum without mashing together 2 different packages. Does single sign-on matter?
If you're going to release your work to the world, you're going to need to [learn how to deal with criticism](http://www.losethos.com/). If someone suggests it's vulnerable to SQLi, then you politely ask for an example, suck it up and show some humility with an apology, and then promise to fix things. What you don't do is accuse someone like KishCom, who is coming to you with valuable information, with 'denigrating your efforts.'
If he saw them and chose not to inform me of their location, then his intentions were just to denigrate.
Markup. Fact you have to install 50 modules per functionality.
If you use any interpreted language for anything beyond a thin front presentation layer, you're doing it horribly wrong. Hence why Facebook came up with Hip Hop and they are [working on this](http://www.php-compiler.net). Still, even with a thin layer, frameworks can save you a lot of time.
How are you going to be using this data? Can you guarantee that each parent will only have at max two children? Do you need to access nodes from any part of the tree at any time, or can you simply recursively interact with the "head" node?
The data will be used for conversion into actual PHP and for mutations/crossovers. Each parent can have more than 2 children. I do need to be able to access nodes from any part of the tree, as I will be selecting random nodes at random depths for mutations/crossovers. 
Sounds like you're going to need to use iterators. I've never worked with them in PHP, but check out [the iterator page](http://php.net/manual/en/class.iterator.php) to get an idea of how to use them in PHP. You'll have to implement a custom class that defines your tree's behavior during various operations. Once the example on that page makes sense, take a look at [the RecursiveTreeIterator](http://php.net/manual/en/class.iterator.php), which implements some of the basic functions for you in a manner that turns the iterator into a tree. Can you explain what you mean by "conversion into actual PHP" a little more?
I'll take a look at those links. Thanks for the advice. By "conversion into actual PHP", I mean that whatever data the tree is storing will be converted into a PHP class or function. For example [this](http://i.imgur.com/2gWGQ.png) would become this: function organism1(){ return x + (3 * 2); } Of course, it'd be a bit more complex than that, but I think it makes the idea clear.
Is PHP what you really want to use here? PHP has grown as a general purpose language, but still lags behind languages like Python in it's expressiveness and, as you're about to find out, applications when trying to do things that aren't strictly procedural or basic OO. Programming with trees/graphs is starting to enroach in the area of functional programming and you might have an easier time elsewhere. WRT the question, as mentioned elsewhere, you're probably going to be relying on arrays or implementing the Iterator interface/pattern with some custom classes.
Ill take the 150k
HA! I was just coming in here to ask if this could be better simplified with cURL? Also, I wonder if it would make any difference if your user-agent in the request was setup to the GoogleBot UA?
Certifications from w3schools.com
You are wasting time... I know DHTML pretty good
&gt; "huh. well that was a terrible idea." Story of my coding life.
Can you use any language you want, or additional languages? If you're willing to add some Javascript into the mix... Setup a page with a Javascript timer, which does an ajax callback to a PHP script every second. The PHP script then takes the 3rd word from the 3rd most recent tweet using the Twitter API, and passes the value back to Javascript . The Javascript then uses the Google images API to search for that word. Using some nice jQuery effects, display the 3rd image in the Google image search results. Fade them in, cascade them in, something like that. You not only get collaboration between yourself and a single network, but you also get a collaboration between networks, and it creates a visual design that depicts the musing of the world in real time. On top of that, it wouldn't be that hard to write at all. Less than 50 lines of code.
And if I told you I enjoy writing in PHP? I'm not disparaging Python or Ruby, but I do think that people on reddit give PHP a harder time than it deserves.
The idea is that you write some code somewhere else, seemingly unrelated, that somehow breaks your login code. Maybe you integrated facebook authentication and it broke normal user sign up. If your code is unit-tested, you immediately know that your normal login code broke, and that the facebook code that you just wrote is what broke it; and the only work you did to find this out was to click a button to run all your tests.
He's using PDO - why would you want to start messing about with SQLi???
"university Computation Arts program" ...no comment. other than this quote and no comment, comment.
http://en.wikipedia.org/wiki/Nested_set_model There are also MySQL tutorials and such for it.
Awesomesauce!
Thanks for the comment, the plan was to actually go into creating an admin system to integrate dynamic news/testimonials etc with a website. Kind of like a "real life uses for codeigniter". I do agree though, the setting up part has well and truely been covered.
Some like it, some do not. I do understand the critique. I think profilers often profile too much giving you a list of every call made in long stacks when you just want to compare two or three parts of the code. I know it's a good practice to not have profiler turned on at a live site, but often live code has bugs that can be fixed on the spot(especially id site is on a linux server and local enviorment is windows) - and instead of turning on a profiling tool, using a solution like this is easy. 
I gave up on Drupal with so many problems in 7. The have yet to be fixed and people are talking about Drupal 8. Good luck. 
Agreed, PHP is definitely not a language I'd try to do something like this in. For what it's worth, there's a book on genetic type algorithms in Ruby available free online: http://www.cleveralgorithms.com/nature-inspired/index.html
I'm not sure what kind of problem you have. You can easily create node objects with children in arrays, and iterate from the root(s). Personally, I often make a FooTree and FooTreeNode class to separate highlevel tree and lowlevel node operations. The only problem I ever had was PHP's 2 GiB allocation limit while working on a huge dictionary. 
What kind of problems do you encounter in 7?
I think that might have been part of the problem. They (and many others) wrote too much code for a team of their sizes to maintain. Reusing popular components mean they can be freed from some of the burden.
Well does creating a Wordpress count as using a framework?
For genetic programming, a compiled language will kill your speed. Having to compile every new program you generate will take a lot of time and will lessen the amount of generations you have. I may be using Python as the control language that performs the genetic operations and fitness evaluations, but it wouldn't make for a very good object language of GA. It isn't nearly as liberal as PHP is in formatting and doing things. With PHP, I can create a string that looks like this: $code[12] = "class a12{public function run(){return x + (3 * 2);}}"; eval($code[12]); array_push($organisms, new a12()); While with Python, it would be much more difficult to handle the formatting and creating new custom classes
Check out my reply to chrismsnz on why I'm using PHP over Python. Thank you for the link, I'll check it out.
I'll check that link out. Thanks
One of the possible solutions I was thinking about was just having it class-based with each node class having the array of it's children and parents, but I was wondering if there was another method that was more efficient. Thanks for taking the time to reply though.
You beat me to it.
I'm not sure if this may help, but check out [SPL Datastructures](http://php.net/manual/en/spl.datastructures.php) and [SPL Iterators](http://www.php.net/manual/en/spl.iterators.php)
Why not use sha1() with a salt?
Openwall has a good read on managing passwords in PHP, [here](http://openwall.com/articles/PHP-Users-Passwords). The key takeaways are that you should use salting, password stretching, and use a strong block-cipher instead of a simple hashing algorithm. I highly recommend a combination of HMAC + bcrypt. With this model, you first hash the password string via your preferred HMAC algorithm and a global, application specific shared key. You then create a derived key of that hash using bcrypt and unique salts. This is the technique used by Mozilla in their [Secure Coding Guidelines](https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines#Password_Storage). Another commonly advocated password hashing method is [PBKDF2](http://en.wikipedia.org/wiki/PBKDF2). You can use Openwall's [PasswordHash](http://openwall.com/phpass/) class, or if you're using PHP 5.3, I wrote my [PHPass](https://github.com/rchouinard/phpass/) library specifically for this type of secure password storage.
*EDIT* did i misread your question? class Node { public $node_data; public $leftmostchild; public $rightmost_Sibling; } now lets say you have equation "X = 3 + 4 * 5". it would break your tree down to : * + 5 3 4 save it like this: // $root = new node(); $root-&gt;node_data = " * "; $node1 = new node(); $node1-&gt;node_data() = " + "; $node2 = new node(); $node2-&gt;node_data() = " 5 "; $node3 = new node(); $node3-&gt;node_data() = "3"; $node4 = new node(); $node4-&gt;node_data() = " 4"; //now link them $root-&gt;leftmostchild = $node1 so we have : * + $node1-&gt;rightmostsibling = $node2; we now have: * + 5 $node1-&gt;leftmostchild = $node3; * + 5 3 $node3-&gt;rightmostsibling = $node4 * + 5 3 4
I am not knowledgeable about genetics, but after reading all that you have posted here, I believe I understand in essence as to what you are trying to do. I handled a pretty similar situation in PHP long ago and here is how I implemented it successfully. What I implemented was in essence a tree structure that was supposed to be stored in a database. Simply go like this: 1) Assign an ID to each newly inserted NODE. If you are using a database, this is the primary key which is auto-incremented. 2) Another field in the database will indicate the ID of the node's PARENT. For the top node, let this value be 0 (zero). 3) Of course, you will need a field to store information about the node itself - the nodes name or description etc. That's it, that is EXACTLY how I implemented the 'tree' concept successfully If you still do not understand, ask me, coz I have done this before. I implemented Web Menus like this. The php CODE is not as important as planning the whole thing beforehand. Since I wrote it ages ago, I will struggle in understanding it myself, I think! Tell me if you need a piece of it. Implementation will differ though, based on what you need.
I would like to say thank you to everyone who voted but unfortunately I had to close the voting because after 1,000 responses I started to get charged £0.10 every vote and seeing in the past 48hours the votes doubled over night I don’t think I would be able to sleep at night lol. I’m sure for the people seeing this page for the first time would like to see the results so take a look below. The poll started 22/10/2011 17:54:26 GMT and ended at 25/10/11 7:46 GMT. I wanted to move everything over to Google docs however the data exported is completely different and I don’t fancy rearranging 1,116 votes individually. http://imagine-that.co.uk/other/ChartExport.png
I've had many problems with TinyMCE, CKEditor and FCKeditor (changes wouldn't be saved into the DB). Also, there is still not one module for most common SEO needs (you need Meta Tags, Meta Descriptions, Page Title module and so on...). These are the main inconveniences I've experienced using Drupal 7 and coming from Wordpress. Wordpress is a lot more "hackish" which is the reason I needed something more professional, however having to install and configure so many modules doesn't really make development easier. It's great if you don't have a PHP background and want to build a website, otherwise it takes way too much time and effort.
One of the huge problems is that so many MAJOR modules are still in beta/dev stage. It seems like the community has died way down from previous versions.
Nested dictionary arrays, or as serialized classes with a common base class? No database? Seem like it would need some sort of database (even sqlite) to retrieve them later on. Running eval() (like I saw in a comment below) isn't the best idea... (since you're talking about speed)
I've deployed 5 or 6 Drupal 7 sites so far and haven't encountered any significant issues. Or rather, no more issues than I've experienced working with Drupal 5 or 6. I think the problem is people rely too heavily on contrib modules and will actively use beta/dev/alpha modules and then complain they are buggy. Drupal 6 is still very stable and supported. If D7's contrib pool isn't going to satisfy the type of site you want to build, D6 is still perfectly viable an option.
Or, if you like PHP 5.3 era stuff, but still don't want to have an entire library to accomplish what ~20 lines of code can do, just throw [this in with your auth adapter](https://gist.github.com/1053525)
This is, and was, because of the API changes. Many commonly-used hooks were renamed which made it harder to keep both a 6x and a 7x codebase. I run into that all the time at work where we want to use stable modules but the 7x code is still in dev. I think they are going in the right direction, but it will be all for naught if the developers don't come along. Many are very against turning Drupal into an OOP project as they see no gain.
You don't store this data in php. You might consider a database of some kind.
imho, crypt() with a salt() (ie, the salt is a function of the person's username, etc) is all the security anyone needs. Add a requirement that their username be 12+ characters, and ensure nobody else is privy to their username, and you're really in the money. The more important thing here is to know that you could have the most elaborate 512 byte encryption system in the world, and it would be totally worthless if you let users register with "password" or "12345" as their password. Make it a minimum 7 characters, contain 1 number and 1 Uppercase/Lowercase letter, and you should be fine. From my experience, people tend to over-do password schemes. You're more likely to fall victim to sql injection or other exploits in the way your form processing scripts are set up. 
Swiftmailer is quite good, I just used it on a project. They have several mail transport methods, including one that uses the mail() function. Check out what they have to say about mail() in their documentation: http://swiftmailer.org/docs/sending.html#the-mail-transport
Because you can still decrypt those without an enormous amount of resources. May take awhile, but it's doable. If you simply use bcrypt in a solution like [this](https://gist.github.com/1053525), you go from having hashes that are difficult but possible to crack, to passwords that require an enormous amount of money and resources to decrypt even a single hash.
ZF is good (but not as intuitive as I've like it to be, especially the view/helper/filter/form layer) but it's the best of the bunch. I recently worked on a project w/ Symfony 1.x and it was so bad I still have nightmares about them. And Doctrine (the 1.x) was just a complete failure. 
Congratulations!
For some reason there's a lot of misinformation out there on the best way to hash a password. Many people will tell you it's sufficient to do `sha1($password . $salt)`.. which if it *actually* made development easier, i'd probably say "sure, go ahead." But bcrypt is more difficult to decrypt by several orders of magnitude, doesn't require a salt field in your db, and simply requires a [drop in class somewhere](https://gist.github.com/1053525) (this is basically just a simplified version of [phpass](http://www.openwall.com/phpass/) that takes advantage of PHP5.3's built in bcrypt stuff, and doesn't have the php 4 style mannerisms that irritate many of us forward thinkers). Probably the only caveat? You can't use MySQL's nice SHA1 / MD5 functions, you have to authenticate application side. This means if you're using a framework that has some sort of setCredentialTreatment() method that lets you do stuff like `setCredentialTreatment("SHA1(CONCAT(?, salt))")`, you may have to roll your own solution for an adapter (or find one on the internet as I'm sure a zillion people have made an adapter for whatever framework you're using if it doesn't have a bcrypt adapter built in). // Store this (60 characters) in the db when you set the password: $hash = Bcrypt::hash($_POST['password']); // authenticate like this when a user attempts a login: $is_the_correct_password = Bcrypt::check($_POST['password'], $password_hash_stored_in_database); Done. At least when it comes to password hashing, you're now easily in the top 1% most secure sites on the internet. And that's all it took.
How much reliance is "too heavy" though? Are you making the argument that you need to be a developer to use Drupal? Its functionality is pretty limited without *a lot* of contrib modules IMO. If I had the skill or time to construct a website without them, I'd probably just use a mature framework instead. I can see the argument to continue using 6, since its more mature and supported and have no issues with that.
Whatever works. The point is to use something which properly implements whatever method you choose (bcrypt, pbkdf2, or something entirely different). I've seen some very broken implementations floating around out there. 
I like to point out the existence of tools like [ighashgpu](http://www.golubev.com/hashgpu.htm). On my local system (Radeon HD 5770), a fairly complex salted string hashed with SHA1 took a little under an hour to crack. Using simple message digest algorithms just gives a false sense of security. The best methods today use some form of key derivation combined with unique salts and key stretching. See [bcrypt](http://en.wikipedia.org/wiki/Bcrypt) and [PBKDF2](http://en.wikipedia.org/wiki/PBKDF2).
I think he means "too heavy reliance on modules that are still alpha in D7". I tried to replicate a pretty complicated site with lots of modules from D6 to D7 and the modules just aren't ready in D7 yet. I've stuck with D6 and am happy. When D7 is more mature I'll jump over.
Not sure why you think hiding and/or forcing long usernames makes the passwords more secure, but okay. Choosing a _sane_ password policy and using proper back-end storage methods are both pieces to the same puzzle. You need to have everything in place in order to have the complete picture.
Check out installation profiles. You pre-configure the type of site you want and it will automatically install all the modules for you. You still need to know which modules you want - which is another whole issue.
http://framework.zend.com/manual/en/zend.translate.introduction.html
I didn't mean to be a dick, it's a cool and obviously well designed from an oo perspective (probably more tightly packaged and full featured than anything I've ever seen, much less written myself), but unfortunately it's probably useless for most people since the vast majority of projects only need one method of authentication. This would make a ton of sense merged into a larger framework / library where it might be useful to have a static `Phpass\Adapter\Base::factory('Pbkdf2')` method which can create a `Phpass\Adapter\Pbkdf2` object which might throw a `Phpass\Exception\UnexpectedValueException` :-p
I meant relying heavily on modules without a stable release. Although I think there is an argument that if you're adding a bunch of trivial little modules to do things you can easily accomplish in the theming layer, you're probably over doing it (eg share buttons, analytics, Facebook like button, etc).
The thought is, we're not talking about encrypted messages that are being produced by the enigma machine and being broadcasted via radio for all to hear. We're talking about a PHP application in which the traditional approach requires transmitting a username and password via SSL to gain acceptance into the site. That being said, there are 2 exploits at play. 1) use brute tour-de-force random username/password attacks in hopes that something goes through or 2) getting into the server, finding the stored encrypted password, then reverse engineering it. However, if the assailant can get into your server, you're already totally fubar. So, our main concern is protecting against option 1. Thus, having a long and unpublished username exponentially increases the effort required for a brute force attack . 
I also did that: http://code.google.com/p/web-dot-php/source/browse/trunk/src/password.php
We are starting to look at Drupal 7 for some projects where I work. Previously we have used Wordpress as a CMS (writing our own plugins by the truckload to get things just so) but now are thinking about giving Drupal a test drive. There just doesn't seem to be any other, solid, well supported, ultra-customizable CMS out there. We have also used Zend Framework to build a complete system of our own (which we still use for things that need to built from the ground up) but really want a tool that fills the middle ground between the DIY nature of frameworks and the "out of the box" nature of something like Wordpress. If anyone has any suggestions I'd love to hear them (I'm speaking from a programmers point of view here so things like Joomla and its ilk can be left out of the discussion).
Or you could just do this to protect against #1: $recent_attempts = SELECT count(*) FROM login_attempts WHERE ip='$_SERVER['REMOTE_ADDR]' AND createddate &gt; DATE_SUB(NOW(), INTERVAL 30 SECONDS) if ($recent_attempts) { sleep(5); } 
Certainly took no offense. I know my approach doesn't work for everybody, and I have a (bad?) habit of writing "enterprise" code (comes from spending the last few years of my career in that space). I just meant to say that whatever code you end up with, it's important to do some research and make sure it's implemented correctly or all you'll get from it is a false sense of security (at best) or a security nightmare (at worse). I appreciate feedback on my work, positive or otherwise. It's the only way we can learn and grow as developers. :-)
That may work against a single session, but since each brower (ie, firefox, chrome, etc) gets its own session, I'm 100% sure there are ways to get multiple sessions on the same IP. Open 10,000 sessions, and that wait time is meaningless. 
good advice, thanks I didn't know about it.
The trend in Web applications these days is to be (at least somewhat) social. In these cases, it's very hard if not impossible to keep user names secret. I agree that a bank shouldn't flaunt their customer user names, but hiding them in other practical applications becomes burdensome. There are other ways to go about securing your user accounts. For one, your application or web layer should guard against on-line attacks with flood controls. The application should also guard against information leakage and timing attacks on your registration and authentication forms. For the second, it's not true that you're "fubar" if somebody gains access to your servers. In a small environment where the web and database tiers are on the same system, this is _more_ true, sure. Proper password (and other sensitive data) storage mitigates the damage. Just because somebody gets a dump of your database doesn't make it useful to them.
That code has nothing to do with sessions, it checks against floods from a single IP. While this can be worked around, it does slow down potential attackers. If your application is so sensitive that you feel an attacker would actually spend time bouncing around on different IPs to evade flood controls, proper logging + alerting would go a long way. You're right though, putting these controls in a session would be stupid.
&gt;I agree that a bank shouldn't flaunt their customer user names, but hiding them in other practical applications becomes burdensome. A bank typically makes you choose a username and password, and the username does not have to be firstname+lastname. Rather, it can be something semi-random that you pick. This is much safer than using firstname+lastname for each account. &gt;The trend in Web applications these days is to be (at least somewhat) social. In these cases, it's very hard if not impossible to keep user names secret. There are ways of dealing with this. I worked on several bbg games in which the persons email was the username. The email address of a player was never shown in game. Thus, you had a fairly lengthy username that was easy to remember and could not be easily guessed unless the assailant knew you. FB does this too, though I'm not sure if emails are made public or not (i believe its only to those on your friends list). &gt;For the second, it's not true that you're "fubar" if somebody gains access to your servers. If you're on a 3rd party host, and they're using a management software such as cpanel, a user will have limitless access to change or erase your database if they can guess your admin username/password. If this were a bank, and I got into the admin for cpanel, I would instantly go to phpmyadmin and update my balance to the highest int value the column could hold. 
Do you live in a bubble? http://imagine-that.co.uk/other/ChartExport.png This was recently tweeted by Envato. Note where Kohana is in the list. 
&gt; If this were a bank, and I got into the admin for cpanel, I would instantly go to phpmyadmin and update my balance to the highest int value the column could hold. If I had even a slight suspicion that my bank was using cPanel, I'd find another financial institution. But I guess you shouldn't expect much from "Billy Bob's Second Fed'ral Saving n' Loan (and Bail Bonds)" :-)
Session was the wrong word.. Sleep(5); doesn't stop command execution for the whole server, just for the current request. Other request would typically be fork()'d around the sleep(); So, I could spam the sever with 5M requests, and just wait 5 seconds before all the responses started coming back in. Imagine it as opening 5M browser tabs and putting in a different request to the sever on each one. 
This certainly shouldn't be your final defense, and was only an example. In practice, you might rate limit (as this example does), and then simply begin to drop the connection altogether. you can either tie in to your firewall to do this (best method), or cache the blacklist and exit() in your front controller (still has overhead, but not nearly as much). I've never seen an auth attack turn into a full-on DoS like that, though. Typically, if they're really trying to get in, they'll back off when they see rate limiting before they bring the full attention of the sysadmin. If they begin to DoS, then you've got them frustrated and they've likely given up on their goal of gaining systems access. :-)
I've had a great experience with the [WYSIWYG](http://drupal.org/project/wysiwyg) module (a library to manage any kind of wysiwyg plugin to drupal) with [CKeditor](http://ckeditor.com/) in Drupal 7. Take a look at it from that approach: an overall wysiwyg manager with the specific editor plugin.
right. :D Add in a line to see if failed attempts &gt; 15 in the last hour, then do a 1 hour ban. that is certainly a good solution to brute force attacks. my whole intent with this line of thought was to point out to the OP that there are ways to gain access to a user's account without decrypting their password. though, the conversation hasn't exactly gone as i had imagined it would...
This is extremely exciting. One of the biggest criticisms tilted at Drupal is that it "does its own thing". It's great to see it fitting into a much wider ecosystem and standards base.
Try this: $sql="INSERT INTO \`calendar\` (\`date\`, \`desc\`) VALUES ({strtodate($date)}, '{$desc}')";
I believe "desc" is a forbidden column name. Try changing it to "description" or something.
Its not a column, it is seeing his variable, read it again.
&gt; INSERT INTO calendar (date, **desc**) "desc" in this case is a column name. no?
His error has a ' in it, so would it be that or is it pointing to the error near $desc? Or better yet, did he type in the error message wrong. Ohhh, so many options lol!
I think this is the correct answer actually. desc is a reserved word AFAIK due to it being used in ORDER clauses. You could probably still use it if you enclosed it in back-ticks: $sql="INSERT INTO calendar (\`date\`, \`desc\`) VALUES (FROM_UNIXTIME($date), '$desc')";
The fact that 'test event' is appearing in the error demonstrates that $desc is being interpreted correctly. The offending part of the query is single-quoted by the error handler.
Yes, true. Back-ticks should work.
error and code were both copy pasted to keep out fat finger errors, which I figured I had elsewhere in this. heh
Agreed, I was reworking mine and refreshed after updating and you had similar to mine. Agreed, it would work.
bingo! back-ticks around the column names worked. thanks.
Touche, take a few upvotes in return!
it was the back-ticks around the column names that did it. I had already run a strtodate() to get the value of $date. Thanks.
Ok, then can I ask why you feel the need to convert it again in mysql? Being strtodate already converts it to a unix time, you shouldnt need to convert it again.
This will probably break in a very similar way for any type of query so I'd still be inclined to just change the column name for an easy life. Or use an ORM that automatically sorts out column name quoting. Also see: http://dev.mysql.com/doc/refman/5.5/en/reserved-words.html 
Of course there would be some way of saving the data when a stopping point is reached, such as in a file or in a db, but the main thing I'm focusing on now is how it's handled in PHP itself. Do you have any alternative to eval that would work with what I'm doing?
With that example code you really just proved that PHP has poor expressiveness when it comes to the type of metaprogramming you're trying to do. If you're eval()ing strings, you're doing it wrong. You're treating code as data which really is the domain of FP. Your example would be much more clearly expressed using closures or anonymous functions. GP in Python is a lot more common and enforcing whitespace and layout really isn't a big deal. I came across this small project which may be of use to you: https://github.com/blaa/PyGene I'm going to leave it alone now as the downvotes indicate to me that this opinion isn't wanted here, but I just wanted to let you know that there are better options instead of trying to shoehorn your genetic programming square peg into the PHP round hole.
I've used phpass and it did the job very well. Was pretty easy to plug into Zend_Auth. Also, remember that the reason that bcrypt is so secure is that you can very easily jack up the security of your hashes on the fly by scaling up the work factor and saving the new hash to the DB after authentication
This. Don't use reserved words if you can at all help it. One day down the road you'll go to make an adjustment to your code and stuff will break. It will take you all kinds of time to figure it out and frustrate you because you forgot to work around a reserved word. Not like I've done that or anything... :o]
Here is small piece of code to help you out: &lt;?php /* The names of two nodes could be the same. Their unique identifier is the "id" field in the mysql table. Names are just to add significance to the element. A rough identifier. The "parent id" tells us, well, the parent node's id. This is how the whole thing is linked together. */ $conn=mysql_connect("localhost","root",""); class elements_tree { public $db="your_database"; public $table="nodes"; public $table_ref=""; function __construct() { $this-&gt;table_ref="`" . $this-&gt;db . "`.`" . $this-&gt;table . "`"; } function node_add($node_name,$parent_id) { $sql="INSERT INTO $this-&gt;table_ref (`node_name`,`parent_id`) VALUES ('$node_name','$parent_id')"; mysql_query($sql) or die(mysql_error()); echo "Element $node_name added as a child of $parent_id. The id of this node is " . mysql_insert_id() . "&lt;br /&gt;"; } function node_remove($node_id) { //$sql="DELETE FROM $this-&gt;table_ref WHERE `id`=$id"; //mysql_query($sql) or die(mysql_error()); //Also, add code to update all children of $node such that their parent is updated from $node to $node's parent } //Plenty more functions are required for a complete working class } $tree=new elements_tree(); //$tree-&gt;node_add("Top",0); //0(zero) because it is the topmost element. Won't be needed as it has been inserted $tree-&gt;node_add("John",1); //Only one parent available to add any child to. The id returned will be 2 in this case. $tree-&gt;node_add("Meg",1); //Can add to 1 or 2 as parent. 1 has been chosen. //There is no provision in the above functions to know if the parent id you are giving is correct or not. //Acceptence of a wrong parent id will result in errors $tree-&gt;node_add("Shannon",2); //Note that you do not decide id of the element you are adding - only the name, and more importantly, which node's child it is. $tree-&gt;node_add("Paul",2); mysql_close($conn); ?&gt; The MySQL Table: -- -- Table structure for table `nodes` -- CREATE TABLE IF NOT EXISTS `nodes` ( `id` int(11) NOT NULL AUTO_INCREMENT, `node_name` varchar(50) NOT NULL, `parent_id` int(11) NOT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=6 ; The explanation: http://imageshack.us/photo/my-images/838/treeg.png/ 
&gt; saving the new hash to the DB after authentication How would that make any difference? I mean, if someone got ahold of your hash and decrypted it, wouldn't they have the password which means they could also authenticate it against that hash as well? Curious, I don't know much about how this stuff works - just that it works.
Yea... had a nice little brainfart when naming that column... amazing what 26 hours of coding and no sleep will do for the quality of your code.
a) get a real IDE like PhpStorm that highlights sql queries. b) when mysql throws up an error, the wrong part is at the beginning of the reported part (i.e. the "near 'xxx' " in the error text). My custom error handler actually prints the whole query and hilights the reported bad part.
because unless I'm mistaken, a datetime field in mysql is stored as yyyy-mm-dd hh:mm:ss, not as the number of seconds that have passed since midnight UTC, January 1, 1970.
The bcrypt hashing algorithm is different than normal hashing algorithims because it's _slow_. That means it takes a lot more time to brute-force (i.e. find a plaintext that will give a certain hash). But, computers are always getting faster. So bcrypt allows you to adjust a "work factor" that's embedded in the salt to make it _even slower_. Since the work factor is stored in the salt, it doesn't matter if some of your database is hashed with WF 8 and some with WF 10, when it comes to checking the hash it will know. Since your only storing the hash and salt, you don't actually have the plaintext to rehash your entire database at once, which is why if you want to crank up the Work Factor's on your bcrypt hashes you need to do it when the user logs in (i.e. when you have a copy of the plaintext password to check it's validity). HTH :D
Also, just about this bit: &gt; if someone got ahold of your hash and decrypted it That's why we use one-way hashes for storing passwords. Given the hash, it's non-trivial to find a plain text that results in that hash. Doing so is called "brute forcing" and, even then, you don't actually know if it's the same plain text that was used to create it due to the hash function intentionally discarding information from the plain text to create the hash. Two plaintexts that result in the same hash are known as a _collision_.
Bunch-of-crap-to-create-content-article. A bad programmer is a lazy one; nothing to do with all he said since we all have to 'patch' certain part of the code with exactly those solutions from time to time to stay in production. Time is what matters in a good or a bad programmer and sincerely not even that since most situations require more time to come up with a better solution. 
I use hash with sha512, a unique salt per user (around 32 chars), and 1000 iteration stretching.
 &gt;you don't actually know if it's the same plain text that was used to create it due to the hash function intentionally discarding information from the plain text to create the hash. Ah yes, that makes sense now.
I think you first define the way you're storing it; once you do that, the way you should handle it in PHP will become much more apparent. Having a proper datamodel will solve 90% of your issues. It's hard to tell what a good solution is without seeing the underlying model and the way it's being stored. It could be that one class with a base class could be all you need to work with your data. I've worked with some extremely complicated and entangled data, and often it would be a system like that. The problem with storing that data and running through eval is that it's a nasty practice, and doesn't lend itself to any future customizing or if things need changing
&gt; if failed attempts &gt; 15 in the last hour Just thought I'd point out that if you're defending against brute force attacks directly to your server, sleeping for even a few microseconds should provide all the defense you need.. at that point I'd consider the bruteforce attack more effective as a DDOS than a password cracker, as mathematically, it doesn't take much of a delay to make a bruteforce attack take 100 years to complete, whereas your users being locked out for an hour because they legitimately forgot their password might not be something you want to do from a marketing standpoint :-p
Why not use JSON (Javascript Object Notation). It is very versatile, and can easily be used in php using the json_encode and json_decode functions. You can write something to construct the JSON files and then another file to parse and do what you want with the data. I know this is very broad, but I think it is a great option
I would stay away from storing image binaries in a database, mainly because of scalability issues. It seems convenient at the time of development, but I can almost guarantee it will cause problems somewhere down the road. Stick with option #1 and store metadata and such on the db side. Also; I recommend using a CDN as bkanber already stated.
You might want to look into [Pressflow](http://pressflow.org/) and [Pantheon](https://getpantheon.com/). The former is an optimized, robust build of Drupal intended for heavily used sites (currently used by the Economist, iVillage, Al Jazeera, Zero Hedge, the World Bank, etc.), and the latter is a management/development environment for Drupal, specifically the Pressflow distribution.
On a separate note, does anyone else prefer to use the same syntax for updating to insert? $sql = "INSERT INTO calendar SET `date`=FROM_UNIXTIME($date), `desc`='$desc'";
SET == VALUES ?
Was that a question? SET followed by key/value pairs.
I'm asking if SET works the same as VALUES A typical insert statement is like: INSERT INTO calendar(a,b) VALUES (c,d)
They are functionally the same. VALUES is SQL standard, where SET is a MySQL extension. I guess for compatibility its better to use VALUES, I just like the SET version as often the UPDATE string is the same as the insert only with an added WHERE clause.
I do - it's just so much easier. You no longer need to update the statement in two parts - just change it as you would change an UPDATE statement.
My favourite is "INSERT INTO `table` SET [...] ON DUPLICATE KEY UPDATE [...]" - insert and update query in one, provided you have the correct indexes set. For example: "INSERT INTO `table` SET `id` = 'X', `some_field` = 'Y' ON DUPLICATE KEY UPDATE `id` = 'X', `some_field` = 'Y'" If X is set to 0, you'll create a new entry, but if X is set to an id existing in the DB (provided that there is an index on id column that is either PRIMARY or UNIQUE), then that row will be updated.
Step 1 to understanding oauth: yes it's convoluted, accept it and move forward. 
just call it an upsert
Cool, with this information you can go back in time two years when twitter had a 3rd party developer prospect and put it to good use.
you are very much correct, ignore him
My response is a loud high-pitched squeal. I've wanted this feature ever since I learned about closures.
Looks good. Can I read about this somewhere else? You know, get a secondary opinion and not just blindly trust some redditor's code? :)
That was a great read. Makes me wish I was using code like this in my own projects. Just bookmarked the hell out of that guy's blog.
This is great. It looks like the closure is automatically bound to the object from which it was created. Example: &lt;?php class A { protected $word = 'hello reddit'; public function getClosure() { return function() { echo $this-&gt;word; }; } } $a = new A(); $foo = $a-&gt;getClosure(); $foo(); // Displays 'hello reddit' Which is really cool. Too bad though that this doesn't work though: &lt;?php class A { protected $word = 'hello reddit'; } $s = new A(); $s-&gt;foo = function() { echo $this-&gt;word; }; $s-&gt;foo();
It's not that we hate all conventions, it's for silly things like the fact you have to tell rails NOT to load a view, instead of telling it you would like to load one. You can extend the Controller_Template class and this sort of behavior is available. We basically give the app developer the ability to do things however they like and by adding a little verbosity to this process any developer can jump in and see exactly what is happening, much the way CodeIgniter does - but with much nicer syntax and all 5.3 :)
Actually I gave this talk Tuesday the 18th and that post was Saturday 22nd. It was comments and feedback from my talk which led to the question being raised about the name, and in the end got us deciding to use FuelPHP everywhere.
The source code does not change that quickly at all now we're on stable. New features come and benefits are added under the hood but I've been building client applications using Fuel for the last year and I am not having to rewrite anything because of it. API changes are deprecated for two minor versions before being removed, so your applications are safe.
None of us have ever used cake for any period of time because we don't agree with how a lot of it works. Apparently FuelPHP is a clone of Rails, a clone of Kohana, a clone of some frameworks I have never heard of and somebody else says it's a clone of Node.Js.... (um what?) I was pretty open in the talk about what inspiration we have taken from where, and CakePHP is not on that list in the slightest. It's all PHP and its an MVC framework so there are parts that look like everything, but do not base the frameworks merits on a quick scan of the code. Please, go and have a play before you judge it.
I know exactly what you're talking about here and it's really not the same as shadowhand vrs zombor on the Kohana project. Me and Dan fight like cat and dog about certain issues but it always leads to a good solution. The latest was about scaffolding using ORM or Model_Crud and it has since been peacefully resolved. The benefit of having a whole team, git-flow style development branches and a smart community means we can have discussions about what happens. Sometimes they get a bit heated but they are always resolved before a launch, meaning unless you follow me and Dan on Twitter you probably won't see any problems or even know that any exist :)
That's odd... wonder if that's a bug? Seems like it to me.
You would think so, huh? I mean, even if $this doesn't get automatically bound to $s with the assignment, you would still expect $s-&gt;foo to be a normal property, which happens to be a closure, which should be callable.
Goes to show how similar they can be. I wouldn't pretend that it's anywhere near a clone, though.
I do not see the direct link between persistent storage and the way you handle your data in memory as the constraints and requirements are quite different.
Because the general "rule" is to design your data structure before you do anything - the data structure in your case is how you're going to store that data. Without a well defined data structure, you're just making things up as you go along, and you waste a lot of time, code, memory and cycles in doing needless transformations between formats. If you store your data string classes running through eval, how are you going to store that? As a key/value pair? Or if you have nested data in a normalized database, then the way you query will easily determine how it's held/handled in memory. Perhaps a single or double linked list will be the best way to load the data from the database. For example, if it's two tables that are normalized, you can do something with nested arrays, or parse that data into a class with parent/child variables. But seeing how your data is layered, will first, help you visualize more clearly the best way of handling it, and also, give anyone helping you (us or coworkers) a clear view of what's going on. You need a clear mapping of your data. Storing fixed classes and strings running through eval() is probably one of the worst ways (no offense) or storing or handling anything. Any any developer, that will be a complete nightmare to work with - think about how you're going to store that data. Someone posted this link before: http://en.wikipedia.org/wiki/Nested_set_model I would also check out MPTT data as you'll want ways to traverse those nodes and be able to look up any arbitrary value. This problem's been solved before, so I would start the requirements first with the data model. It's just how it's always done.
You did not answer my question. Yes, you do design your data structures, but in memory structures can be (safe for the lame CRUD webapps) quite different from persistent storage. I highly doubt OP asked for persistent storage. edited to add: In the nested set case, you might use the nested set model to store a Trie, but you'd almost certainly build an actual Trie (with nodes and edges) in memory when you operated on the data.
Might I suggest [Modx CMS](http://modx.com/)?
Eew. If you are going to work with expression trees, why not simply evaluate them (eg for infix trees postorder) ? 
There's no direct link, but in the OPs case, I was suggesting that planning his persistent storage will give him a much clearer path/picture on how to handle it in the script, since they were completely lost on how to do it. Right, he'd have to build a trie, but seeing it layed out in storage might support that route even more than just guess-work and then having to go back and change it all over Sorry, I thought you were OP.
&gt; Thanks TheldeaMan, I needed the opposite so I thought I would post it here as well: Indexed by the fullname lowercased. Unbelievable. `$state_list = array_flip(array_map('strtolower', $state_list));`
but you are not defining the function within the context of the class, you are just assigning it to a property of the class. where you define it determines context, unless you specifically bind it to a new context (at least that is how closures work in javascript). 
[phpass](http://www.openwall.com/phpass/) is pretty widely known. Look at the code, it's not all that complicated.. it's just a fancy wrapper around crypt() that also generates some random stuff. Or if you wanna just use phpass, go right ahead. Personally, though, I'll take the simplified version since I don't care whether or not my code runs on PHP 3 - 5.2 as long as it runs on php 5.3.
I keep each file in its own class. I'm not sure about performance related issues, but it sure make things like autoloading much easier, which you can tie a class name to a file path, the way a lot of frameworks (like Zend Framework, etc) do. Also, to me it just makes it cleaner, prettier, and nicer to work with.
Your posts were bad enough, and repetetive enough, that you had to come up with a second account to post them after your first one got banned?
That's not what puzzles me. I understand the closure doesn't gain context by simply being assigned to an object property. What I don't understand is why this code doesn't work: &lt;?php $s = new stdClass(); $s-&gt;foo = function() { echo "Hello World"; }; $s-&gt;foo(); Apparently you can't assign a closure instance to an object property.
He never said it was a datetime field.
You've almost got it. The MVC pattern represents more than just a naming convention to distinguish between database records, PHP file structure and CSS rules. Instead, it's a set of conventions and practices (but without hard-and-fast rules) which allow you to achieve a more streamlined and efficient application design. With that in mind, here's (roughly) what is intended when developers refer to models, views and controllers: * **Model** - Instead of thinking about this as simply being the database records, your model code should provide an interface with the database to your app. That way, whenever your code needs to manipulate the data, it doesn't have to deal with the SQL details each time. A good example would be if you have a complex join query that you need to execute every time you retrieve a blog post, which could happen at multiple stages of your application. You'd want to write this query only once and put it in a function in your "post" model file, ideally within a class which provides other useful, common functions for dealing with blog posts. Grouping these functions together creates a "model" representing a data object - just like any other model in any other discipline, it allows you to interact and change the data without worrying about the actual implementation of that change. * **View** - CSS is certainly a big part of how your content is displayed, but a view generally also dictates the structure of your content, and even the format of your content (i.e. RSS, JSON, XML, HTML). In fact, you generally want to separate out your CSS from your views, because you may have different views which take advantage of the same CSS rule structure. A view file contains mostly markup, with PHP only being used to fill in the dynamic data (passed to the view through the controller, which in turn retrieves the data with the help of the model). This is better for many reasons, the most apparent being: That your HTML structure is all in one place rather than scattered through dozens of PHP files, making it easy to implement a change; If you're working with HTML/CSS designers, you limit their exposure to your PHP code, where they're either going to be confused or unintentionally destructive (or both :-/); It encourages you to think generally about data presentation and make your layouts more flexible, rather than writing up a new structure for representing each section of your site. * **Controller** - These are what tie your models to your views. A controller's job should be to simply interpret what the user is requesting to see, and how they want to see it, then load up the appropriate models through which they obtain the data, load up the appropriate views to present that data, then pass the data to the view for rendering. Typically, you group controllers into logical sections of your site (i.e. have a controller class which interprets requests for user pages, then have another controller which interprets requests for blog posts), which you then load up from a central index file which routes requests to the appropriate controller. Hopefully some of this has made sense. Of course, there's no obligation to adopt this as *your* design pattern, but as canton7 suggested, it is popular for a reason. I've worked with it for a while now, and compared with the anguish and confusion I lived in before MVC, I'm 10 times the programmer I was, and happier for it too.
If you are doing that then why not store it as a INT as it would be much less space occupied and it would accomplish the same task or heck why not use a timestamp? Both int and timestamp are 4 bytes, while a datetime is 8...
I'd say the best thing to do at this point is to get some more eyes on your code. Share it with us, or with a small circle of people (feel free to pop by the stackoverflow.com PHP chat), and get some opinions and tips - to be capable of correctly detecting vulnerabilities you must first understand them, and what causes them.
This sounds overly easy... so I must be missing something. Can you provide more details on what you're looking to do?
I am also curious, saved for later!
So what you're saying is that, automatically, a closure encloses its enclosing scope but only when it's created inside an already-enclosed scope? Am I the only one who thinks that's a bit ridiculous?
Do if isset post request before the foreach 
[Probably not](http://www.youtube.com/watch?v=9pxjnl1yuXk)
 if (count($_POST['request'])) { $reqarr = join(', ', $_POST['request']); }
One should instead rely upon a more sensible method, such as the [Net_Whois](http://pear.php.net/package/Net_Whois) PEAR package.
You really should catch all exceptions. Exposing stack traces to the user is both undesirable and potentially a security risk. Exceptions should be caught and in a production environment a user friendly response should be given (e.g. "There has been a technical problem. Please try again and if the problem persists contact us on 01234567"). In addition it may be deemed necessary for a stack trace or other form of bug report to be sent by e-mail to a member of the development team. You should also be able to put the code base into a developer or debug mode which will then, and only then, give you the stack trace.
There's a distinct difference between exception handling and error handling. An unhandled exception is an error, which you can keep from being exposed to the user by using set_error_handler to define a non-output means of logging errors. Exceptions should not be caught unless you expect to do something with them.
&gt; error_logging = "on" &gt; display_errors = "off"
Do you mean [set_exception_handler](http://uk3.php.net/manual/en/function.set-exception-handler.php)? An uncaught exception will immediately halt all further processing and call a custom exception handler if you register one. Even then, the script execution terminates after the handler is called. I don't see how this can be a desirable state for any production application to find itself in?
With an uncaught exception this will leave the user with a white screen. Is this really acceptable?
Err, yes, it didn't occur to me that PHP would treat handling of errors and exceptions different in that way. In any case, if there are going to be exceptions coming from a piece of code, then yes, catch them if you can resolve them. Otherwise, leave them be. You can log uncaught exceptions in the same way you log errors.
Instead of using WHOIS which can be unreliable, why not use a nice JSON API for domain availability checks? http://www.name.com/reseller
I wouldn't trust any site which acts as a registrar to handle my domain availability lookups. It wasn't long ago that it came out that many of those sites were grabbing the domain before you could buy it, so that they had the exclusive right to sell it to you.
If you're not already familiar with www.owasp.org then you should start there. They have great resources for securing web applications. Principles, tools, listing of the top ten attacks used on the web with explanations as to how they work as well as how to protect yourself against them. Great stuff.
I think I understand you now - you are saying not to catch an exception and do nothing - which I agree with. Otherwise things can happen and you would be none the wiser. I've never actually had an exception that was unrecoverable which is probably why I'm used to catching and handling every exception.
Handle the exception before it goes to production. If your code is still generating exceptions when it goes to production, then you're probably doing something wrong.
Exactly. At the top level, an unhandled exception should be caught and logged so that it can be reviewed. This is the best way to go about it in my opinion.
I am confused. The main post says not to handle all exceptions but then here you are saying that exceptions should be handled. Have I misunderstood the original post?
My original post is about not catching exceptions just for the sake of catching them, only to leave them unhandled. There are very few exceptions which you will not be able to handle in some worthwhile way.
Gotcha. Makes sense. Sorry for the confusion.
There's not really a single best way to check for vulnerabilities. There are different things you must do to prevent them, beginning with following good coding practices (e.g. naming variables in a way that makes it obvious whether or not they are safe, having specific points in the data flow where you deal with specific tasks, etc), then trying to break your own code, having others look at it, and having others try to break it. In most cases, the best way to *avoid* vulnerabilities is to rely on mature, extensively tested libraries for potentially dangerous tasks. Encryption, authentication, scrubbing data, preparing MySQL statements - they're all things that have tried and tested solutions available. Learning about vulnerabilities is a good thing, but don't just rely on your own knowledge.
Just logged. Not caught. To catch an exception is to say to the PHP engine "Hey, I know there's something hinky going on, and I'd like to try to deal with it before you kill execution".
Or array dns_get_record ( string $hostname [, int $type = DNS_ANY [, array &amp;$authns [, array &amp;$addtl ]]] ) I'm guessing OP's script didn't use it as it looks very PHP4. Nothing says eww like global $extension;
I've been impressed with Netbeans features such as this. They generally work really well and are able to detect if a parent class has the same method and will automatically include a call to the parent function a long with the required arguments.
Here is a [guide using the Zend Library](http://framework.zend.com/manual/en/zend.session.savehandler.dbtable.html) It probably is a bit overkill if you only have a small project given that you need 3 or 4 Zend components to pull it off. I would suggest using whatever DBAL you currently have in combination with your own custom [session handler functions](http://php.net/manual/en/function.session-set-save-handler.php). Are you forced to store in a db for any particular reason or similarly to avoid the standard implementation? Just that moving sessions to the db will slow down your project.
I assume it's because properties and methods have separate namespaces. E.g. &lt;?php class Foo { public $bar; public function bar(){} } Is perfectly valid. There's no way for PHP to know if it should call a method or a property of the same name that happens to contain a closure. *However*; if you *really* want this to work, you can force it: &lt;?php class ClosureTest { public $someClosure; public function __call($method, $args){ return call_user_func_array( $this-&gt;$method, $args ); } } $foo = new ClosureTest(); $foo-&gt;someClosure = function(){ return 'I am a closure'; }; echo $foo-&gt;someClosure(); //I am a closure Disclaimer: I'm not suggesting you use this code for anything outside of experimenting.
Are you allowed to access doc.php.net during the "interview"?
how far away is ZF 2? is there a ZF subreddit and if not why not? I have questions god damnit
You mean like how in javascript I used to see try...catch like this a lot? try { //do something ... } catch(e) { }
A lot of people are conflating the idea of letting exceptions "bubble up" through your code and having an "uncaught exception" error occur. An "Uncaught exception" in PHP is a fatal error and will either barf a backtrace to your screen or simply display a white screen of death if display_errors is off. Within a web framework, there should be an error handler that intercepts these exceptions before they become fatal errors and displays a customer-friendly message and returns a 50x HTTP error code. For instance, if you have a model object and you ask it to save, but the PDO layer raises an exception... the model has just been asked to save itself, does it care about this exception? No. In this case, the model should allow the exception to bubble up and the code which called save() on the model should handle the error appropriately. There are a number of anti-patterns with exceptions including exception swallowing (hiding the exception completely), the "log and throw" which can create confusing, duplicated log messages, throwing a too-broad exception and catching exceptions too broadly. Unsurprisingly, PHP's exception handling is half-arsed with no finally clause, crappy default exception heirachy in the SPL and no in-code notation besides some 3rd party supported PHPdoc comments.
Agreed, one file per class for both autoloading and general organization. I don't want to have to wonder next year whether Dog is in Animals.php or Animals/Dog.php.
I've not used it before, but a company called acunetix produces a [product](http://www.acunetix.com/vulnerability-scanner/download.htm) which it calls a "web vulnerability scanner". In my opinion, the best way to avoid vulnerabilities is to have others review your code. Use of best practises such as parameterization of SQL queries is essential.
Technically speaking... it depends. There's nothing stopping you from using ZF1 components in a ZF2 app, but most of the code is being replaced, so I don't see a reason why you would use Zend_View or any of the MVC components with the new MVC code. I'd suggest looking at the MVC release Zend just made and start preparing for the upgrade to your applications if you plan on porting them over. If you are using the framework as a component library you will run into less issues I think than someone that uses it as a full stack framework.
ci seems to have that covered . i'd say CI is a super light weight compared to symfony2/cake/zend . 
\#zftalk.2 on freenode
I personally am more verbose with my scoping. I think your while loop without a semi-colon is actually this: while () while () Also that `else` you have is superfluous
forgive my ignorance... but... Huh?
1. The lynda.com videos with Kevin Skoglund are very good for total beginners. A subscript for lynda is about 20 dollars per month... that's not to say you can't find those videos elsewhere... 2. http://www.tizag.com/phpT/index.php - might be just what you're looking for. Seems beginner enough, explaining things like variables and echo and onwards toward more advanced concepts like files. Also, having some understanding of html is necessary. 
Do you honestly believe this yourself? You're an experienced PHP developer and like to hang out in #phpc, obviously you must have some real world experience. In an ideal world you'd never actually generate an exception and stuff would just work, but in the real world that's just no realistic. So you might be "doing something wrong" but you should most certainly be accounting for that in your code. Which means no, a white screen is not acceptable at all, and "fixing it before production" is not a valid option.
Thanks a ton. I also neglected to mention that I have a decent understanding of html.
That's a pretty good solution. It seems like PHP should be handling scoping issues at run time though. You shouldn't be allowed to have a method and a property with the same name. So when calling $s-&gt;foo(), PHP should look to see if the method foo exists, if not check to see if the property foo exists, and if it's callable. While they're at it, they should bind the closure to the object owning the property being assigned to. I think that would open a lot of interesting inheritance possibilities.
Please post this to pastebin or something similiar, I'd rather tear out my eyes than attempt to debug this :S Also, don't use mysql_* use either mysqli or PDO (recommended).
What do you need to learn to get an A in this class? I have not read through all of these articles but net.tutsplus.com is generally good so this is probably worth checking out http://net.tutsplus.com/tutorials/php/the-best-way-to-learn-php/ My first experience with PHP was making a website for a Software Engineering class. We chose our own requirements and I decided to use PHP. I picked the framework CodeIgniter because they had a bunch of decent tutorials http://codeigniter.com/tutorials/ The project went very smoothly and I learned a lot about PHP. Many will tell you to avoid using a framework at first. I don't agree because they'll enable you to create something functional quickly and it's nice to get stuff done.
Our classed don't run on that sort of grading system. Instead its a Pass/Merit/Distinction system where you have to achieve certain criteria in order to get a better grade. we got our first task over the holidays which is to create a site in html that features a bit of php that will tell you what browser you are visiting the site from. this isn't much of a challenge but I still need to learn what to do because the damn lecturer hasn't even taught us how to create variables... But thank you, I will look into those tutorials immediately.
He's saying that it's confusing that you've put two while loop statements right next to each other at the same indentation level, without a clear indication of where each starts and ends. You do the same thing with your if-else statement. Compare your code style to this: &lt;?php $connect = mysql_connect('localhost','user','pass'); if (!$connect) { die('uh oh' . mysql_error()); } else { echo "Establishing" . "...connected!"; } mysql_select_db("otahakn1_game", $connect); $result = mysql_query("SELECT * FROM users"); $getop = mysql_query("SELECT * FROM npcs"); while($row = mysql_fetch_array($result)) { while($enm = mysql_fetch_array($getop)) { echo &lt;long string&gt;; } } ?&gt; Much easier to read, right? As for why your code is breaking, it's hard to tell what's going wrong here without an example of what your program prints, but if I had to guess, I imagine it's because of the nested looping through two different query results. Think about what each while condition is doing - it's looping through the entire set of results returned from the database. On the first iteration of the outer loop, you loop through the entire $getop result set. Once there are no more records in the $getop set, the inner loop finishes and control passes back to the outer loop for the next iteration. But on the next iteration, there are no more records left in the $getop result set, so nothing gets done for that iteration of the outer loop, or any more iterations. Make sense?
If not I'll have my laptop out just in case.
It's crazy how many people still do this. Here's some code from Google AdWords API... try { $this-&gt;GetLastResponseDom(); } catch (DOMException $domException) { //TODO(api.arogal): Log warning that DOM could not be created. } 
For a more direct link to some useful information building from what garcialo said. https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet
You want to set an error handler, something that forwards to an error page for the user. That way the user won't get a white screen, they'll get something like a giant whale being held up by a hot air balloon. Error handling and exception handling are two different things. 
valid point, some registrars will do anything to make a buck, but I don't think they are all that way. what about a DNS lookup? (dig) unless your ISP is [DNS hijacking](http://en.wikipedia.org/wiki/DNS_hijacking) you'll get a NXDomain response for domains that do not exist. Should be crazy fast with no rate limits. (Unlike whois) There would be possible inaccuracies for domains without dns records or nameservers. 
Oh my my, there's so much wrong, my eyes, they bleed. Please do any of the following: * Use a framework (Symfony, CodeIgniter, Zend, whatever) * Separate your logic into classes and/or files * Factorize your code into functions * Use a proper database layer (Doctrine, Propel) * Use PDO or mysqli * Indent and use consistent syntax * Use long &lt;?php ?&gt; tags, not the short hand * Use a PHP IDE (at least to start), it highlights common mistakes and helps indent the code Sorry man, but looking at this, I doubt you can go right away for a big project. Try something a bit smaller before: like doing a tutorial on building a blog. 
Seriously, you can find examples of most basic things (such as display the User-Agent string) just by adept use of google. Then it's just a matter of playing with putting together different pieces to achieve certain results. Also, liberal use of php.net for explanations of various functions. So long as you've got a server with php to test code on, and some time, you can really learn it on the net. I could also suggest using BT to download some PDF's on the subject, but I wouldn't want to deprive authors of their income.
What is the output, and how is it wrong? BTW, your two nested fetch'es won't work right. You need to do each individually, doing something like pulling the data into an array, and then process the data. Otherwise, if you really mean to repeat the entire set of npcs records for each instance of a users record, then you need to move the npcs query down inside the first while loop, so that it resets to the beginning of the record each time. Again, horribly inefficient and should be replaced with a routine to read the records into an array(), then process them.
html doesnt help you out much though, because it doesnt have flow control. My advice would be to read through a short tutorial documenting the basics, then make some small programs (21, guess the number) and go from there.
Google "php variable" or "php get browser version". Google is your best friend. The sooner you move out of the "I need to be taught" and into the "Where do I find the documentation I need" mode, the easier most simple things will be. Thats what 90% of basic programming is: syntax, boolean statements / flow control, built in functions. Where having a teacher can be helpful is with the more complex shit like encapsulation, OOP, and things of that nature. If you have not done so, I'd make sure you have access to a computer running a *AMP stack of some sort. WAMP is great for Windows.
Two things: * Use a framework * Skipfish
My problem with a framework is that too much ends up being "magic". Its about like googling and doing a copy / pasta on a large chunk of code and not understanding it.
Check out [php.net](http://php.net/) [Mozilla's Develop Network](https://developer.mozilla.org/en-US/) is quite good too. Some people are suggesting CodeIgniter as a beginner's framework, I think that's fine to say but that is all it really is, I wouldn't stay on CI for a duration, once your skilled in using a framework try out Zend or Yii. Built so much better and the documentation and community is amazing 
technically, the class names are different in a couple of different ways. ZF1 uses an autoloader with a naming scheme based on the directory structure. class names in ZF1 look like `Zend_Controller_Action`. The underscores represent directory structure. ZF2 uses namespaces, so it doesn't need to use the naming scheme. Instead of `Zend_Controller_Action`, it could use `Zend\Controller\Action` or just `Action`. Actually, it looks like `Zend_Controller_Action` is now `ActionController`, so it wouldn't be compatible regardless of anything. [link](https://github.com/zendframework/ZendSkeletonApplication/blob/master/modules/Application/src/Application/Controller/IndexController.php) to skeleton app on github
http://devzone.zend.com/article/627 looks like it's really good. 
[redmine](http://www.redmine.org/) The only down side is that redmine is ruby on rails.. and the shared host I use doesn't have the right version of ruby, so I host it myself.
&gt; In my class our lecturer for PHP hasn't wrote a single PHP program in her life and doesn't know anything to do with the language at all. Because of this our entire class is failing. Gather up your classmates and file an official complaint. That shit is not acceptable. Apart from that, [PHP 101](http://devzone.zend.com/article/625-PHP-101-part-1-Down-the-Rabbit-Hole) would probably be a good start for you.
I agree that exception handling is half-assed, but not for the reasons you specify. The biggest issue with php and exception handling is that the majority of things which should throw exceptions don't.
This person is clearly a beginner. You don't jump in the deep end, I think the points * Indent and use consistent syntax * Factorize your code into functions are all that they should listen to right now.
&gt; If your code is still generating exceptions when it goes to production, then you're probably doing something wrong. That's just silly, as you've said it yourself: &gt; If you're executing some code that you find is throwing, for instance, a PDOException, you should only catch it if you can recover from it. Recovering from it can be anything from re-trying your connection There is no way you can be 100% sure that there wont be any PDOException on production 
thanks man this is what i was looking for !
Absolutely. It's shit, but that's a fault of their standard library which is a whole other kettle of fish. The SPL is a good start and I find myself using quite a lot of stuff from it, but the majority of things you need to do is still tied up in their procedural library that does not take advantage of the newer, better language features.
Well if you really wanna restrict those for beginners, I say an IDE is clearly a way to go. I don’t use them anymore because they are get too bloated when the code goes beyond 1-2k files but it do helps learning the syntax and the library
&gt;Use a framework (Symfony, CodeIgniter, Zend, whatever) He's learning. It is really stupid to try to use a framework to learn a language. &gt; Use a proper database layer (Doctrine, Propel) Seriously? You know very little about what he's doing. An ORM may be a completely inappropriate solution. &gt; Use a PHP IDE (at least to start), it highlights common mistakes and helps indent the code Also irrelevant for starting out. &gt; Use long &lt;?php ?&gt; tags, not the short hand Though it could be weakly argued that not using short tags makes your code slightly more portable, it is irrelevant for a personal project where he's learning. Some of your suggestions make my eyes bleed.
&gt; your two nested fetch'es won't work right. That is entirely wrong. It is possible to have more than one result set on the go at the same time.
That's like saying it's the C standard library that prevents you from using exceptions in C. PHP didn't always have exceptions. While you may not like that PHP has a history, your statement is silly.
We have been using FogBugz but for what you get I don't think it is worth the cost. At my previous employer we used Jira which I thought was great but again it isn't free. 
http://lmgtfy.com/?q=detect+browser+php
I guess an IDE probably can't hurt given a good tutorial. When I first started coding I felt mostly overwhelmed by IDEs.
A while back, I found this really useful. It's not terribly out of date, fairly clearly written, somewhat in depth... It's a good introduction, especially if your first projects are very procedural. The first chunk of this guide will teach you enough to do plenty of interesting things. I'd combine it with other references too, though. [Practical PHP](http://tuxradar.com/practicalphp) Also, good on you for taking it upon yourself to learn something. It's a shame you don't have a better instructor. Be careful about taking what they say as useful information - It's extremely easy to learn awful habits with php.
OP: for added clarity, can you post some example code of how you think it _should_ be done?
Not sure what you're arguing as, if you read my comment, I never said we shouldn't use exceptions in PHP. Also, you probably meant to say C++ because the C language does not support exceptions.
If you're still learning, I agree. Frameworks should be avoided. But once you know what you're doing, they are a valuable tool/time-saver. 
C doesn't have exceptions. That was the entire fucking point.
I've just been using Github's issue tracking, which is not amazingly robust or anything, but it's right there with the rest of the project assets and is sufficient for my needs.
He wants the exceptions to be handled, not simply caught for the sake of catching them. Catch them and handle the exceptions properly if you are able to, and if you cannot, let it bubble up to the general exception handler so you can log it and display an error message. 
 Here is a great tool for running against your web applications. We use this in pre-production systems before any releases and have been quite happy with the results. https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project For prevention, like many of the other commentors mentioned, owasp is definitely the place to start. There is also a security extension for PHP called "Suhosin". ( http://www.hardened-php.net/suhosin/ ) Additionally, check out these libraries: http://code.google.com/p/owasp-esapi-php/ http://htmlpurifier.org/ 
Redmine, bit of a pain to get it installed on Apache, but so far the best I've tried, as even the clients seem to understand how to use it.
As far as OSS self hosted goes Redmine is really the only one worth mentioning. For SaaS the list is very long, [Atlassian just launched their new ondemand service](http://www.atlassian.com/software/ondemand/overview/) that starts at $10. We use this at the company I work for and it's awesome. Of course there is also Github, BitBucket, Assembla, and Unfuddle, all of which offer free accounts to start.
http://www.php.net/manual/en/ You didn't look very hard.
You don't provide much context to your problem :) The way I usually handle problems such as these starts by blacklisting all access rights for all users. Then a user is assigned rolls which give access to certain resources. This way, all resources are inaccessible per default unless the user has a roll which states otherwhise - put it another way, no roles deny access to any resources, they only grant access. With this, you wont stumble into the situation where you need to resolve these kinds of conflicts. By doing it the way I describe above, you can have roles concentrating on only **granting** access to the resources needed since everything is assumed to be restricted. The only overlaps you'll encounter in this case will be multiple roles which grant access to the same resources which wont really matter. Ofcourse, whether or not you can apply this principle to your problem highly depends on your application. If you don't have the option to structure your ACL this way, I think I'd implement a prioritized order in which the roles are applied to the user. The priority will then be used, when generating the ACL, to resolve potential conflicts. This will ofcourse add another layer of complexity to your application and also require some extra thought from your users when working with the access rights. I don't know if you can use anything from my advice but if there's anything I'd like to stress it would be that when working with ACL **always** blacklist per default! AvengingSyndrome raises some good points although I don't completely agree with him - this might be because I haven't covered all the details in the way I'm handling it - so I'll give it a shot. Users are individual entities representing a single person. Users can be member of groups which are just a grouping of users which can represent an organizational structure and have security roles applied to them. Individual users can also have roled applied to them individually so when resolving a specific user's ACL tree I need to considder the roles applied to the user as well as the roles applied to the groups the user belongs to. I lied a bit in my simplistic example above which leads to the flaw which AvengingSyndrome points out since in my system I do handle blacklisting. As I also stated above this is done by prioritizing user specific ACL permissions over those inherited by group memberships (which are all granting access to resources, no blacklisting going on here). Then specific modifiers can be created and applied to individual users. So resolving a user's individual ACL permissions is, simply put, a 3-step process: * Resolve ACL for the groups the user is a member of (no collisions, only whitelisting) * Resolve ACL for the roles applied to the individual user (again, no collisions since it's only whitelisting) * Apply the ACL modifiers for the specific user. It's in the final step shits be going down. I know modifiers are a bit of a broad term for them but screw that for now, I'm not a creative person :) The modifiers are used to narrow down any access which has been granted to the user due to applied roles and group memberships. It is meant as a tool to handle individual exceptions in the organizational structure, such as the case AvengingSyndrome describes. I don't allow modifiers to be applied to groups nor do I allow modifiers to be grouped. This is due to the way we work in our oganization - if we stand before a situation where we're thinking to ourselves that we need to apply these restrictive modifiers to a bunch of people then we're better off revising our group structure and perhaps making it more fine-grained. This is a business rule specific for us - it may not apply to everyone else. I like this limitation in our system and discovering such details is an important step in designing an ACL system. Analyze your business/organization/application structure and be aware of the limitations which should apply - don't attempt to make yet another 100% generic-one-size-fits-all ACL system because in my experience, you'll regret it later :) An added effect to the way with dealing with our user's this way is that our access administration is much simpler. We simply don't have situations where we might be confused about a user's access rights since he's member of 47 groups which allow access to a given resource, 203 groups which restrict access to the same resource and a handfull of pourly named modifiers doing God knows what. We simply revise our groups accordingly and focus doing accurate and concise whitelisting. Across over 2000 users we only currently have in the excess of 20 modifiers in our system where almost all of them are applied to a maximum of 2 users each. They're being used for what they are meant for - organizational **exceptions**. If an exception is to be applied to 40 people - it's not an exception anymore, it's a formal change to the organization's structure and we treat it as such. Hope that clarifies things a bit. Sorry for the gibberish and poor examples but English isn't my mother tongue :) And thanks to AvengingSyndrome for reminding me of why I designed this system the way I did ;) EDIT #1: Clarity. EDIT #2: Further example for debate with AvengingSyndrome. 
I don't understand the need for an IDE in PHP. A coding text editor works better for me. Sublime Text 2. &lt;3
For me W3Schools always started from the ground up with very clear examples http://www.w3schools.com/php/default.asp php.net is a more detailed resource but not so handy for absolute beginners 
If you're Sony, just push to production.
Firstly, class properties are class-specific *variables* and they are bound to the object. To further understand why you have to have a *defined* class property , take this hypothetical example: $my_class = new Test(); //assuming that our construct does nothing class Test is now instantiated and $my_class contains all class variables of class Test(). So object is so to speak loaded in the memory. However it make no sense, as it has properties that are referencing another variable that has no value (that is not set). echo $my_class-&gt;value1; //oops? error! we don't know the value of $value1 ; //because we don't know the value of $enabled. //In fact $enabled is not set at all!(no allocated memory block) This is in simplest terms as to why you can't use this behavior, more complex woudl involved how interpreter/complier works. edit:formating. **Edit2:** just noticed in BTPL example that you have declared $enabled after all. Similar principle applies - a basic OO principle. When declaring a class you are making a *blueprint* of an object. Class properties, if we use same analogy, are properties of *a blueprint* (let's say thickness of a paper, size, pencil colour, etc) by defining a property of a blueprint to be another property or a function... you are essentially saying I don't know the properties for my blueprint *yet*... but let's make it anyway, which in turn makes no sense for interpreter/complier or in RL if you were to use blueprints 
This. Another method is to only allow a user a single role/permission level. One model I've worked with recently had things set up like this: A user had a level which assigned a set of default permissions. Each user then had an individual set of overrides (which default to empty, of course) which could grant permissions not present in their level, or deny permissions which were. All of this is done by bitmap. So: ((Level ^ UserWhitelist) &amp; ~UserBlacklist)
Maybe it's so, because you're wrong? &lt;?php $enabled = true; class Test { public $value1 = $enabled; // Valid - this is line 5, for easier reference public $value2 = !$enabled; // Not valid public $value3 = some_func(); // Not valid } Results in: &gt; ( ! ) Parse error: syntax error, unexpected T_VARIABLE in (...)/test.php on line 5 Edit: wow, downvoted for pointing an error in the supplied example on whitch OP bases his wrong assumption? Stay classy reddit.
I agree with your post, but I think it could have been clearer. Some programmers seem to think that if you call a function that might emit exceptions of type X, Y and Z, that each of those exception types must be caught and handled. This is not true. They're ignoring the architectural benefit of bubbling exceptions up to be dealt with as appropriate. People seem to like conflating the issue by talking about whether users see exception traces or not. This has absolutely fuck all to do with your thread. These people have learnt by rote that "exceptions are good, but don't let the user see them!" -- which is fine, but they missed the talk on why exceptions are good, and what they actually address. It's like religion: nice simple rules so you don't have to think about anything too much. You should probably have predicted this in your original post and headed-off their silly replies. It doesn't help that you're talking about PHP, which has a weird mix of errors and exceptions. One thing you can do is add a custom error handler that will emit some sensible exceptions: that way you can deal with everything in pretty much the same way, get the benefit of backtraces, and build better applications. A start is actually [exemplified in the manual](http://php.net/manual/en/class.errorexception.php) but it could do with emitting more useful [exception types](http://docs.python.org/library/exceptions.html). *Edit: I wrote a [simple example](http://www.reddit.com/r/PHP/comments/lq4ot/leave_those_exceptions_be/c2uuv9m) to illustrate (some of) the original post.*
Well, I thought it was funny anyway :) Upvote!
I wrote up a quick example: https://gist.github.com/1319228 Comment out line 23 to remove the exploit. Uncomment line 10 to see the exceptions.
Holy fuck that's wonderful. Now the huge __call/Facade mess I put together to support this in 5.3.0 can probably be replaced! (Assuming there isn't some stupid restriction on this. Not counting my chickens yet...)
While I get your point, I don't completely agree with you. Applying your example to the principles I described above, you would simply have think through your roles. The systems I have built using this system use a very fine-grained access control. With your example, I feel that you describe a kind of coarse access control since you imply that being a member of the group "board members" you are implicitly given access to the resource "board documents". In my own little world, I wouldn't view "board members" as one monolithic group nor would I considder "board documents" a single resource. It would be split up into sub groups and resources types thus allowing for fine grained control of individuals. EDIT: For the sake of a good and highly relevant debate, I've added some further details to my original post.
That's just how the language and the parser are designed. (It could be possible in other languages). Class declarations only allow for constant values when defining attributes. Or as the `zend_language_parser.y` would explain it: class_variable_declaration: class_variable_declaration ',' T_VARIABLE { zend_ | class_variable_declaration ',' T_VARIABLE '=' static_scalar { zend_do_declare_prope | T_VARIABLE { zend_do_declare_property(&amp;$1, | T_VARIABLE '=' static_scalar { zend_do_declare_property(&amp;$1, &amp;$3, CG(access_type) TS ; 
Here's a few reasons to use an IDE: * Syntax checking for the language. Everyone makes typos, and this saves time. * Working with code that exists in more than one file, any solid IDE will include the context. Was that class your coworker wrote called formatResult or resultFormatter? * embedded tools for profiling and benchmarking * context sensitive code expansion. If you're perfect and have an eidetic memory you'll see this as useless. If not, even if you don' need it 99% of the time, having it there is highly useful. Case in point: order of arguments for array functions if you're writing for PHP 5.2 or earlier. * easy integration with your *own* preferred tools for benchmarking and profiling * multiple contexts for switching between languages (flipping between JS and PHP all the time? ake it easier on your brain). * Templating for context-sensitive macros and code completion. Some of the code text editors do this to a limited degree, but without full contextual parsing they're going to be limited to a macro-works-the-same-everywhere. An IDE is a development *environment*, not just an editor. Preferring a plain editor means you're losing all of the environment, which exists to make your code better. Not knocking your choice, to each his own and they're all tools. I write (moderately well, I won't say I'm an expert in all of them) in half a dozen languages and contexts, and having my development environment able to shift contexts with my needs at the moment is a real boon.
Keep it separate for development purposes, but combine it for release (similar to what [RedBean](http://redbeanphp.com/) does). Doing development with it all in one file sounds like a huge pain in the ass, but makes deployment much easier. To the best of my knowledge, the performance penalty for having those classes in the file if they're not used is the extra time spent tokenizing and parsing the additional code, and a small amount of additional memory adding it to the symbol tables and stuff. No huge loss. Option two is separate files and having them all require/include'd at the top of your main file. That's fine for development, but for distribution and deployment it's a hell of a lot easier to simply toss a single file into the project and include it rather than try and keep a whole package organized within your project. (Again, I'll refer to RedBean.) Option three is to conditionally load the classes from the separate files, or load them with an autoloader, but that will [cause a performance hit](http://stackoverflow.com/questions/1396501/do-php-opcode-cache-work-with-autoload/1397160#1397160) versus just having them all in the file for anyone using any sort of opcode caching (APC, for instance), and anyone that seriously concerned about the performance is going to be using that. Of course, you could go back to unconditionally including everything, but then you're no further ahead on speed or memory, really - you may as well just combine the files. Separate files for dev, combine for release: * Easy to work with. * Easy to deploy. * Minimal performance hit without opcode caching. * Better performance versus conditionally including with any opcode caching.
Jira is $10 for first 10 users. I like Jira out of most of the offerings out there, but you need also most server horsepower to run but that is what I have seen and used in the bigger corps. I use Mantis which isn't the best looking but pretty straight forward and easy to setup and written in PHP. Also, look into web2project.net as well that is a bit more project management over bug tracking.
*Facepalm*. Just because whois says that the record about the domain name was not found doesn't mean that the domain name is available. The same applies to DNS records. It is possible for a domain name to be registered for some time and not have whois record, which makes this script incorrect. Unfortunately the only right way to do this is through one of the registrars, but if you are making a form for people to register domains you are going to automate it anyway, and use some registrar's API for domain registration, so you can use same API to check the availability. The key here is to choose normal registrar: there are crazy ones like godaddy, and then there are more reliable ones.
My guess is it's probably a vestige of PHP being an interpreted language, so you don't really have a big difference between constants, variables, and define. If they disallowed variables completely there would probably be too much stuff breaking from the older versions of PHP.
Please define what you mean by UPC.
Most likely because they are expressions, not values.
[Codepad agrees](http://codepad.org/IU2j9rXW).
Brag on 4Chan about your "unhackable" website.
But the inner fetch will only produce results on the first iteration of the outer fetch. By wrong, I presume that is not the desired result, and in either case is bad code. 
Use namespaces and separated files for each class. Why are you using static method to get an instance? Form is unique across the application? (Singleton is an anti-pattern and it's a sign of bad design). I would suggest to change it to: $form = new Form(); $form-&gt;addWidgets(array( 'inputName' =&gt; new TextInput('inputLabel', new InputValidator), 'textAreaName' =&gt; new TextArea('textAreaLabel',new TextAreaValidator), // etc ... )); I would also throw title and submit button value completely to view.
The class definition is also static until instantiated. If the return value of sum_func() changed over time, say for example it just returns time(), you wouldn't understand why a new Test() had the same $value1 as one you created ten seconds ago. !$enabled looks like it should be fine at first glance, but then $enabled could contain a class, and that class could react to being negated. Rojaro's method works because the constants are constant, so the compiler doesn't need to worry about them changing between PHP compiling the class and your code instantiating it.
Very dirty.
If you ever want to store a date less than 1970...
It's true, the example is wrong. It should read something like `$value1 = true;`. But the question is still the same: why `true` and not `$enabled`? Other languages allow it, why not PHP? &gt; Edit: wow, downvoted for pointing an error in the supplied example on whitch OP bases his wrong assumption? Stay classy reddit. I don't base my assumption on that, that's why you're probably downvoted. The example was wrong, the question wasn't.
Why can't they assign the returned value at the time of definition? $bar = "Hi."; class Test { public $foo = $bar; } $bar = "Bye."; $test = new Test; echo $test-&gt;foo; // Output "Hi." I agree it could lead to confusion. But damnit, it'd be more useful than the current option. PHP's OOP is definitely broken. Why can't I do: class Test { public $value = function(){}; } There are so many things to be fixed...
Generally I logically OR the permissions together, so in this case permission 1 would be true. This is because the permissions are describing what the user has access to (in aggregate via roles), not what they're restricted from accessing. 
I would bloody love to file a complaint but she is the head of the IT department in my college. There isn't much that can be done about it.
Give us a reason why you should be able.
Find a local user's group and get in touch with local developers. Here's a well maintained list: http://www.zend.com/en/community/local-php-groups This way you can get some local help as well as what you learn from tutorials. 
You either define them in the constructor, of it you're doing something like that, which this should then be a static class, you create an init function that initializes all the values. So you have something like: class staticClass{ static protected $value1; // never make them directly public unless they are constants static public function getVar( $var ){ init() return self::$var; } static protected function init(){ if ( !self::someSentinal ){ // load your variables } } }
don't be such a dick. explain what they should do instead of just saying "because you are wrong". None all of us were born with god given abilities to write glorious code from birth.
I've pointed out the error - you CAN'T use a variable to init a class member. OP was wondering why can you use a variable, but not a expression. Turns out, you can't use a variable and thus the whole question makes no sense.
Trac is used in one of my work places- it is pain to install and it is very slow (Python) but also it is quite advanced piece of opensource software and many popular projects use it (http://trac.edgewall.org/wiki/TracUsers). For private projects I use Github/Bitbucket- both are more than enough for me.
 define('__DEVELOPMENT__', true); // Production or development server class Site { private $useSSL = __DEVELOPMENT__ ? false : true; }
There are workarounds, but they are precisely that: workarounds. Edit: for example, sometimes I'm extending a class that I don't know if it has a constructor, but I only want to change a single value. It's terribly annoying to use those techniques, but I **do** use them because they are the only way available.
Ok, now it is my turn to point out he is syncing his calendar. Do you really think he has upcoming events in the 70's? Seriously dude, get off my back, I've been doing this for years.
&gt;Singleton is an anti-pattern and it's a sign of bad design [Not always](http://www.reddit.com/r/PHP/comments/lbm73/what_is_the_reasoning_for_instantiating_a_class/c2rddty)
Well you obviously don't use these work around because they're not valid in PHP... It's the difference between compile time and run time binding. You can't bind expressions in a declaration in this language at compile time because their values won't actually be known. You can always extend the constructor, there's no reason you wouldn't be able to do so, even if there is no explicit constructor defined in a parent class. I guess this is the old C++ person coming out in me, but you should almost always have a constructor.
Java allows this and always has. The semantics are completely simple: members declared as expressions (e.g. String foo = "foo ".trim();) are evaluated in declared-first order before the constructor. That is to say this: public class Bacon { private String narwhal = Narwhal.newInstance(); public Bacon() { System.out.println("bacon!"); } } is exactly the same thing as this: public class Bacon { private String narwhal; public Bacon() { narwhal = Narwhal.newInstance(); System.out.println("bacon!"); } } It doesn't increase complexity anywhere at all, really. I can't imagine what the excuse for not allowing this in PHP is.
You are still skirting his actual question, though, by splitting hairs and being pedantic.
It's not singleton. Singleton would return the instance not the *always* new instance. I been asking the question because the method is called ::instance not the getInstance or newInstance so it's hard to indicated what pattern is used.
We really needed a live demonstration to prove this? Do you guys not have a copy of PHP to run locally or something?
&gt; People seem to think that, but I find them useful for keeping code neat and tidy. And they think so because some reason. It's just a type of super-global. Good object workflow and you won't have to use it.
It's annoying because other languages have shown it's possible (Javascript for example). Personally, I prefer to set values in their definition rather than in a constructor. It makes things more clear for everyone.
Anyone have a practical use case for similar_text(), aside from professors trying to catch plagarist term papers?
1. What's the point of storing a static definition in a variable? Just use `__DEVELOPMENT__`, not `$useSSL`. 2. If you really need to assign it to a class variable, you should be doing it in the constructor. Also, you can replace `__DEVELOPMENT__ ? false : true` with simply `!__DEVELOPMENT__`
I agree. First it was OOP, and now it's function expressions and their definition of "closures" that has been bolted-on as an afterthought much like you would bolt-on a tacky spoiler to your economy-class car. They are trying to be more like JS in making functions more useful, but they won't go the full step of making functions first-class citizens.
Which is exactly what happens when you have a language without a specification, a clear direction, a goal or even a vision. 
Voting would be nice, but comment nesting would be *really* nice. Most of the comments are replies to or code corrections for previous comments.
I'm assuming he means Universal Product Code, the bars that are on groceries and store items.
One of the first results in Google: http://stackoverflow.com/questions/4759348/how-to-make-a-php-xml-rpc-call-to-upc-database
What would be even better is if the comments were moderated for sanity and correctness.
Do want curation/gardening. Or a "hide all comments" feature.
I honestly don't know why PHP doesn't allow this behavior. Other languages (Java for example) have no problems with the semantics, and it can be annoying at times writing a constructor just to initialize a single property, that could have been easily initialized where it was defined. Sometimes I feel the PHP devs cringe at the idea of having to modify their grammar rules, and won't add a feature for that reason alone.
The comments are definitely moderated, but I gather it's more with the aim of reducing spam and noise. [Policies](http://www.php.net/manual/add-note.php?sect=function.similar-text&amp;redirect=http://www.php.net/manual/en/function.similar-text.php). If you spotted a factually incorrect comment that slipped through I'm *guessing* you may be able to report it the way you report bugs in documentation...
I began writing a proper answer explaining why it would be a bad idea but seeing as reddit dosen't give a fuck about anything that is not a meme I gave up.
Wow, that policies page. Just wow. &gt; Complaints that your notes keep getting deleted. Sometimes the content of your note may be fine, but we might just hate your face for no good reason. (More likely, though, you didn't bother to read this page, and you violated one of these rules.) ... &gt; Your disdain for PHP and/or its maintainers. Go learn FORTRAN instead. ... This is just childish. I guess professionalism is dead? 
could you not just do that in the constructor?
www.google.com/search?q=simbilar+tetx
&gt; I've pointed out the error - you CAN'T use a variable to init a class member. I think you're stuck. Forget about the variable, it was only an example, and it's already fixed. I'm asking **why can't I use something that is not a direct value.** Is it better worded for you now?
I think it did have all that at one time, say, when Rasmus made it for his own needs and purposes. Now that Zend is involved and everything is decision by committee, things seem to be much less focused.
&gt; 1- What's the point of storing a static definition in a variable? Just use `__DEVELOPMENT__`, not $useSSL. I'm not storing `__DEVELOPMENT__`'s value, I'm using it to produce a boolean one (the negative to be more exact). &gt; 2- If you really need to assign it to a class variable, you should be doing it in the constructor. Right now, yes. But why can't I? **That's the question.** I shouldn't be using a constructor. Other languages allow for this usage, but not PHP. &gt; Also, you can replace `__DEVELOPMENT__` ? false : true with simply `!__DEVELOPMENT__` **I can't.** That's what I'm asking here today. **Why can't I perform this single task?**
Short answer: design choice Long answer: Because by using variables you are changing the data an object would contain when created. Each object should be identical when created unless told not to be by either passing a value to its constructor. If you're creating an object that will have different values of it's members without pasing those values in the constructor you are just asking for trouble. The value could be overwriten somwhere else, resource could be closed etc. Furthermore, you can create an object without calling it constructor via Reflection API. By initializing a member with untrusted data you can end up in a place where code like this: $obj1 = new MyObj(); $obj2 = new MyObj(); and the constructor would change the outside variable with whitch it's members are initialized (by means of *global* or any other) both create objects of the same class but would be different, and that would ba a perfect example of poor porgramming. You're arguing that there are other languages that let you do that - and I would say that those languages are doing it wrong. All members, aside from static ones, should not be defined in class declaration/definition but at runtime by either constructor, class methods or setters.
That's what I've been doing all this time. But I use it everytime in Javascript, so I thought I'd ask why I can't do the same in PHP.
No. No voting system. Panel of experts who review submissions and just outright delete the ones that suck.
http://www.webmonkey.com/2011/10/discover-whats-new-in-css-4/
Ohhh. Of course. Thanks.
&gt; If you're creating an object that will have different values of it's members without pasing those values in the constructor you are just asking for trouble. Javascript and other languages prove you wrong. &gt; both create different object, and that would ba a perfect example of poor porgramming. If you expected both objects to be equal, but offered different values, that would be poor programming. This, for example, is not poor programming: class MyObj { public $useGzip = clientAcceptsCompression(); } &gt; and I would say that those languages are doing it wrong. Javascript example: var foo = function(){}; foo.prototype = { useModals: isBrowserIE() ? false : true }; Can't see the wrong.
Or how about a blind voting system, and any comments with an anomalous score gets reviewed?
My problem is that I don't think the majority of people who frequent those areas are qualified to decide what is a good idea. You see it sometimes even on sites like stackoverflow - extremely bad ideas are voted up because the people reviewing the idea are just as clueless as the person submitting the idea.
There are many people out there (comming from C++ and other such language backgrounds) that would argue with you that using JavaScript is a poor example. public $useGzip = clientAcceptsCompression(); That's a poor implementation - the class MyObj should not gather knowledge about the outside enviroment by its own, it should be told that the client does not accept gzip. Otherwise you need to make sure that the function clientAcceptsCompression is defined and that way you're defeating the concept of OOP (your class is no longer modular and independent).
&gt; the class MyObj should not gather knowledge about the outside enviroment by its own, it should be told that the client does not accept gzip What's the difference between gathering in its definition and gathering through a `__construct`? Setting `$this-&gt;useGzip = clientAcceptsCompression();` has been widely accepted as correct. &gt; your class is no longer modular and independent I could be using `$_GET` and it would be independent, but the concept would remain. As per the modular part, I guess many objects call plain functions and that doesn't defeat anything. Edit: I'm going offline for a few a hours, excuse me if it takes long for me to reply.
What college is this? I would like to apply for the position
I use Trac and the git plugin. We can then review code changes through the Trac. 
You've not said whether you have any programming experience so forgive me if I'm being too basic. While a dry read, the [language reference](http://www.php.net/manual/en/langref.php) manual pages are really handy for those times when you know what you *want* to do, but not how to do it, it'll cover grassroots stuff like variables and loops etc. I usually find that picking up a new programming language is much easier once you don't have to look up syntax, then you can get your brain around the actual problem. Hope this helps.
But I admit, Jira does kind of suck without the GreenHopper agile plugin
you sound a little too touchy, I'm sure you've been doing it wonderfully for years.
It could be done, but they'd need to use some kind of tool for making dynamic web site content. And it'd probably need to be able to connect to a database, too. At the moment I can't think of anything like that.
The devs and maintainers of the site have addressed this issue several times before. The *biggest* issue with a voting system is the large number of php.net mirrors on the web. Any time someone casts a vote on a comment, that vote would need to be echoed to all the mirrors too. The feature has a lot of potential to get very messy, very fast. That being said, I would *love* to have a voting system.
In PHP, the code is completely compiled into byte-code before being executed. Your class definition has to be static because at the time of definition, *no code is running*. Sure there are lots of ways they could complicate the engine to make expressions work but this way the language presents itself exactly the way it works -- no confusion or leaky abstractions. 
&gt; This, for example, is not poor programming: &gt; class MyObj { public $useGzip = clientAcceptsCompression(); } Actually, it is. Because now the definition of MyObj can't be cached between requests. Or, if it is cached, it'll be wrong for half the users. JavaScript doesn't have a build step -- everything is done at runtime. The equivalent in PHP is to define *no* public variables and do all the work in the constructor. That's what JavaScript is doing. 
As a fledgling PHP programmer, a person who knew more than I did saw me reading through these comments while trying to solve a problem. He said 'If you want to learn PHP, that's exactly what you *don't* want to read read". I scan through occasionally, but man, there is some questionable stuff in there.
Yes, I've watched some excellent answers get buried in a heap of awful answers on SO. It's not even that uncommon, particularly when you get into lower level questions. Then you're in the realm where anyone could answer with limited experience. Q: "How do I get the time in PHP" A: Scrape a site you know that has the time like your local weather station website, using this 100 line block of code!
I see what you did there.
... trying to come up with something humorous about how you'd be better off just globalizing everything. failing though, so just imagine your own funny joke right here, and pretend i told it.
You *are* storing `__DEVELOPMENT__`'s value, just the inverse. Instead of using `if ( $useSSL )` you could instead use `if ( !__DEVELOPMENT__ )`, that was my point. And IMO the constructor is the best place for dynamic code. And the latter was just a general point about simplifying code (if you were doing it in your constructor). How about this - what do you think should happen in the case of `some_func`, let's say that function returns a random number. Does it: 1. Call the function the first time the code is parsed and store the result (e.g. 3). 2. Call the function each time the class is instantiated and store a static result for each object created (e.g. 3 for one class, 7 for another). 3. Store the function as a sort of pointer/reference, then every time you access $test-&gt;variable it executes the function? They each have their problems. For #1, what happens if you change the original value at some point? It may be unclear exactly which gets assigned to your class variable. In the case of #2, what is the class is static and you don't instantiate it? #3 is kinda bogus since it should just be a function in the class, not a variable, but it's another option. P.S. what other languages allow dynamic code in class constructors?
I'm gonna drop this, because from what I have concluded, you started off a few comments up like a dick and continue to be one.
Here's also a quick installation guide done in deck.js: http://jien.jaequery.com/docs/introduction/
Thanks!
If you don't like it, feel free to post there and get it deleted.
&gt; Instead of using if ( $useSSL ) you could instead use if ( !__DEVELOPMENT__ ), that was my point. I think about it as $useSSL having a coherent default value (suited to the environment, not just `true`or `false`) which can obviously be overriden later on specific cases. From the numbered options you give, I think the most coherent behaviour should be number 2. Its static version though should be constant and be set at time of parsing. &gt; P.S. what other languages allow dynamic code in class constructors? You can check [oorza's reply](http://www.reddit.com/r/PHP/comments/lqse2/why_cant_i_use_expressions_when_defining_class/c2uwhes) for an example.
I agree that I'm not taking caching into account, but I don't think this should change much in accepting this functionality. Take for example [oorza's reply](http://www.reddit.com/r/PHP/comments/lqse2/why_cant_i_use_expressions_when_defining_class/c2uwhes): why is it ok for Java? 
I can't tell if this is what you have done from the snippet posted, but do not have the class automatically read from $\_POST or $\_GET. Always have the post data sent into the class via a method such as: $form-&gt;setData($_POST); Some people may be doing funky stuff with $\_POST and $\_GET that your class cannot anticipate which the person consuming your class can deal with. Also, it allows you to create unit tests for your objects without requiring a web server environment and actual post/get data -you could just pass in an associative array.
I agree, it would be possible for PHP to implement this as pure syntactic sugar by executing the expressions before the constructor is run. But that isn't a simple task to undertake and so it's not likely to happen because it isn't worth the effort. However, if feel very strongly about it, the source code to PHP is available and I'm sure if correctly implemented they would accept the change. 
The commenter above me was being downvoted for pointing this out, so obviously people hadn't been running it.
I'm not a fan of fogbuzs. Neither are the makers of keep it simple stupid.
This is nice - I'm a big fan of netbeans. I was using StarUML for a while because it would generate a basic model (getters,setters, constructors, and methods) based off of class diagrams. Unfortunately StarUML does not run on nix systems. I now use my own base model I developed in codeigniter that automatically does most of the bare bones CRUD boiler plate code by reading the table schema. It even automatically does the joining if the relations are defined in your INNODB schema.
Yeah, I don't really like it that much either. My boss loves it though which means I have to use it.
I left it without context so that my context didn't influence anyone's answer. :) You ended up describing the system I use most often down, almost to the tee. 1. Everything is blacklisted by default 2. Roles (groups as you call them) are only white lists 3. Individual user permissions can contain 'allow' and 'deny' entries I was mainly curious to see how other people were tackling the problem and if I was approaching it the right way. When you say you use "acl modifiers" how do you implement those? I just at a bit flag to my users_permissions rows that signifies if it is black or white. Do you do something different?
The comments ARE moderated, but that being said, comment moderation is one of the most boring, thankless job on php.net. I have great admiration for [those that do it](http://news.php.net/php.notes). If you feel that comment moderation is not up to scratch, please contribute.
An upvote/downvote system is a system of moderation. And one that doesn't rely on an overworked volunteer.
No, I think he was downvoted because, as the author admits, the code _is expected to throw errors_. I guess it's not as obvious to some, but when I see "Why can't I..." followed by a code example, then it's pretty much guaranteed to be non-working code. Why would he post a "Why can't I..." post if the code actually worked?
Makes sense. More code means more productivity, right?
http://www.openerp.com/
Python?
It's interesting. I'm a little impressed with the simplicity. The frontend work looks pretty good. There's a small amount of inline css, but not too much. The model layer looks pretty good, although I'm not usually a fan of home-made models/orm's based on ZendDb. You might get a little more interest if you leveraged an ORM like Propel or redbean. Maybe I overlooked it, but I didn't see any info about how to create or add a user-contributed plugin.
Unfortunately it wouldn't be much help if their user base is anything like r/PHP. You see some awfully bad things upvoted and a lot of common sense downvoted around here. A submission about secure configuration and frozenfire's submission about exception handling come to mind. Both great (although a little obvious) bits of advice where the author was downvoted into the negatives for no good reason.
sigh at referral...
Submit a patch :) I love open source people :)
you might have better luck posting the final html to /r/javascript , and mentioning whether you can use jquery or not . It seems jquery will be the key to this if you just need to change location with an Id. You should be able to utilize a combination of hasClass() and rel="", along with a click/change event handler
jquery is already used on the site. I'll crosspost this there, thanks!
You should rely on the form values and not use Javascript to generate your URLs. What happens when you disable Javascript? Your form should look something like [this](http://pastebin.com/G9waYvY8) and go to a URL like this: /desinations?destination=368&amp;family[]=370&amp;family[]=364&amp;romantic[]=365 You'll now have the values you want and the form will take care of adding and removing values for you.
You should use arrays for input names. Here is some code I threw together that should solve your problem. http://pastebin.com/HhZ6ehT1
Love the account name. Confused though, which lines of my code do I replace with your code? Is is drop in ready, or do I need to modify the rest of my code to accept your new variables?
This is using a drupal setup, the numbers have to be in that order to present drupal with the proper information it needs. They have to be in the destinations/123,456,789,101112 format.
I assumed the 3 arrays were coming from a database and you omitted that code. If that assumption was correct you will need to add my code to the page, position the forms where they need to go, and modify your queries to use the array parameters. Edit* You will also need to add the javascript code to submit the form automatically when a checkbox is clicked. Give the form an ID and using jQUery add something like $('#form-id.input).change(function( parent form submit code ); 
Whatever. They really are an awesome host, I use them myself as a reseller package.
Putting it anywhere should suffice, as long as you have LoadModule php5_module /usr/lib/apache2/modules/libphp5.so in your apache's configuration (replace /usr/lib/apache2/modules with the actual path to libphp5.so). Make sure to check that the module is readable for everyone.
The OP's given example which he stated would work didn't, and that's what the grandparent is pointing out.
It's been kicked around. The technical issues are there, but surmountable. The bigger problem is what other people have alluded to: that there's not much guarantee that the voted up answers would actually be any good. Personally, I'm on record as just wanting to get rid of user notes altogether. I think they cause more pain than gain.
If the entry being edited already has a file associated with it, then the file upload field is not required. All other validators (file size, mime-type, whatever) remain. If a valid file is uploaded any existing file should be deleted. It's just a question of changed the required validator from TRUE to FALSE.
If I was the OP, I'd ignore cases where Levenshtein distance is smaller than X instead of complaining about similar_text.
Let me run through the logic process with you and let me know if I'm going in the right direction: When the server queries the database and looks for an entry in it for the file, I would then alter the file input validation script to have validation applied or not. That means that I would have to set up conditions whereby validation is applied based on the return from the database being either true or false?
In that case try [Icecat](http://icecat.us/index.htm).
There's simply too many articles for this to work. Imagine one person moderating every single post on reddit. Ok it wouldn't be quite that massive, but it would still be impossible.
I originally compiled php without the --with-apxs2=/usr/local/apache2/bin/apxs flag, looks like rebuilding worked, libphp5 popped up in the php libs folder. Thanks!
I'd back you up
I'd personally recommend [BrainTree](http://www.braintreepayments.com/). They have a monthly fee as well, but they aren't the big corporate behemoth that Ebay is.
The best at this very moment: http://samurai.feefighters.com and http://stripe.com .I use both of them in production. **Edit** Why didn't anyone warned me that I got the samurai URL wrong?! *Fixed*
Stripe looks perfect. Thanks.
we've used paypoint, simple to integrate and not too expensive.
You don't need to pay a monthly fee to use Paypal, but they take a small percentage of the money you receive.
My first thought is don't reload the page every time you select a new option. Especially if you are using form fields, because when clicking a checkbox/radio button it's completely not expected. You'd be better of with a submit button underneath the checkboxes. Then you just deal with one request, with the variables posted to your script.
I do CC processing for an institution. Word of warning: whatever provider you go with, make sure you read up on PCI requirements for your servers that will be involved with this. The potential penalties are huge.
FWIW, Website Payments Pro charges a base of $30 per month, and then a percentage of what you earn on top of that. Standard doesn't charge. Edit: Clarity. 
Upvoted for the heads up. Another question though as I'm completely new to this. If I embed/integrate code from stripe or paypal into my site, do I require an SSL certificate? I've already checked, and my server is PCI compliant, and I have no plans to store CC data, and the SSL cert. is about the only thing I know that I might require. Other related comments would be much appreciated.
[Here's a quick 10 minute rework](http://pastebin.com/1MNw8HSk). Points to note: * I don't know how to use drupal so this code may not be compatible but it should be because this is really basic form usage for a framework to handle. * I've changed the structure of the URL to make it cleaner and easier to use. * You should always check for the existence of variables and never assume they are present. * This includes my preferred way of dealing with request variables which is to get them at the top of the script and assign them to a variable. This means changes to the URL structure do not affect code any lower than when you get them from the URL. * Use the HTML label tag, makes UX so much nicer. 
Wikipedia likely gets more traffic than php.net and reddit.com combined. They don't seem to have a problem. I would also argue that php.net and reddit.com likely don't get the same amount of traffic.
Thanks! Going to save this code and test it.
While I can't say that a SSL cert is PCI required, it's only because I would not consider not having one for a web store in the first place. I would say that an SSL cert is an absolute requirement. Re the store CC data word choice: the advantage of tools like paypal is that you never even see the CC data. Storing CCs is a massive liability, but even taking it and passing it off to a processor without storing is huge (we don't do that specifically because we can't afford the cost of security inspections which I recall was over $10k a year). We use "simple integration" with authorize.net, meaning that we shuttle people off from an SSL machine over to their site where they actually enter their financial info. For the record, I work at a educational institution which is a weird hybrid of being required to follow the laws to the absolute letter, and having no money for fancy solutions so my experience is probably not similar to people in for-profit .coms.
I'm guessing you're accepting/storing user social security numbers, which is why you require SSL. I'm really not sure I'll need it for what I'm doing as I am not storing/transmitting any 'sensitive' information. The only step I was worried about is passing credit card info. 
Braintree tends to come very highly recommended here on reddit, and their API is amazingly well put together, so we were excited to use them the first time on a site we're building right now. Integrating their PHP library into the site was a breeze, I wish every payment gateway was this well documented and easy to use. On the business side, however, they've been a total pain in the ass. They made a lot of demands for documentation and required access to the website using the gateway with instruction on how to use the site to activate every instance of where their API is being used. After a week of back and forth my bosses finally decided it was too much of a hassle and dropped BrainTree entirely. At the moment our next best chance is probably Authorize.net, which we've used in the past.
Nope, just finding out which level of membership they want and sending them to a payment page. I would say that if this is just a tip-jar button, then use paypal and don't worry about it, but if you intend to have a shopping-cart type system then an SSL cert is absolutely necessary so that people can't abuse it in some injection way which might make you financially and legally liable.
@jesse: hello there, thanks for checking it out. the project is very new, maybe started 2-3 weeks ago so things are pretty raw right now. due to that, there are no plugin system yet but it definitely is one of the priority. 
It depends. If you host the credit card form, you'll want SSL. It doesn't matter if you're storing the data or not. If you transmit it, you encrypt it (SSL is about transmission, not storage).
Upvotes for Stripe. A very nice solution for getting off the ground in e-commerce. I use Stripe online and [Square](https://squareup.com/) for personal sales, and I highly recommend both.
Which is why I use it as well. However - its is better than nothing :-/
Indeed, both awesome services, though haven't used Square myself I had friends that are crazy about it. About Stripe/Samurai, hell yeah, from a programmer standpoint it's heaven, I personally hated to create any site that involved payment processing, because 2-3 years ago, it took 2-3 months to actually set up a solution, now, 10 minutes tops. The only thing I don't "like" about Stripe is that they aren't open in Europe (should've pointed that in my first comment) but they are working on it. About PayPal, I worked with them since they first began to offer these kind of services, I still don't feel confortable and I am switching everything to Samurai/Stripe (still haven't made my mind of which one is my favorite ^^)
They will all charge you. Authorize.net is a well known name that many places use. They also have code OOP libraries you can download. Very easy to implement just a few method calls to implement in your code.
[Authorize.net](http://www.authorize.net/) has an easy API to use. There are fees, but depending on how much you process through it they can work with you on the rates.
I wouldn't use unit tests for this; I don't even think you can. I would probably just run a regular expression search on my file(s) to make sure that anywhere "function something(" is declared, there's a public, protected, or private before it. If its something you think you'll need to do more than once, then you can make a function to do the search/replace and save it (I use emacs, so I'd make an elisp function real quick and save it). Also, I'd be more careful to declare functions properly in the future, or if its not your fault, beat the good habit into those who are at fault. tl;dr: Regular expression search and replace.
Are there any advantages/disadvantages to using stripe for all payments over signing up individually for a gateway and merchant account? Stripe seems like an all-around win and love the simplicity but wondering if comes with any limitations. Samurai seems to have a much more in depth API though with them I'd need the gateway and merchant account plan. I'm still new to credit card processing since finally need to use it for some new projects so still learning what options are out there.
&gt; I wouldn't use unit tests for this; I don't even think you can. Well I certainly *could*, at least by using regex (and perhaps taking advantage of [ReflectionMethod::getStartLine](http://nl.php.net/manual/en/class.reflectionmethod.php)) as you said, I can see why someone might argue I shouldn't though. That said.. PHPUnit does make some similar assumptions about good / bad practice.. for instance, if you override a method and change the conditions of the parameter, it will complain: class foo { function myfunc(array $myarr) {} } class bar extends foo { function myfunc($myarr) {} // PHPUnit doesn't like this because I'm not explicit about it being an array } I figured if PHPUnit can be so bold as to presume the above is bad practice and will make a unit test fail, I can feel free to be nitpicky about my code base as well, and enforce more rigid and consistent coding standards via unit tests. At any rate, I was hoping for a more foolproof solution if there is one.. but I suppose regex will work.
And the stripe url, there's a . on the end. I wouldn't think a . on the end would confuse the browser (I thought it was implicit anyway), but chrome on ubuntu certainly does get confused.
Both of those only allow US customers. Crying shame.
How about $this-&gt;assertFalse($cls-&gt;getMethod('novis')-&gt;isPublic()); $this-&gt;assertTrue($cls-&gt;getMethod('vis')-&gt;isPublic());
Well, so far the limitations with Stripe are: * It's limited to US for now * If the user has JS disabled, you get no payments * And I am still not confortable with their .js way of doing things Limitations with Samurai: * You need a merchant account (they provide those too for plus $15 per month) * Price wise, I think they are the same, if you don't need a merchant account, personally I prefer to pay $10 per month + $.10 per transaction rather than 2.3% + $.30. Story on short, Stripe seems to be the choice if you're in US and need something fast and you don't process $100+ per transaction. Will edit later if I remember something else.
I'm by no means an expert. I just suggest what I would do. If you find a better solution for you, please use it and share it as well! I'd be interested to learn such a technique, especially if its some functionality of PHPUnit that has somehow remained hidden from me thus far.
That would return if its public or not, but wouldn't return specifically if there is any declaration typed in the source code at all.
I use Samurai with my Romanian bank account. Just Stripe is limited by this.
Oh yeah. Punctuation reflex :)
Hmm yeah I'm learning towards Samurai... later down road some transaction amounts may be quite large so 2.3% is too much. I don't mind the JavaScript method that Stripe uses although I prefer posting straight to their ssl url like Samurai does and like being able to then interact with the account via tokens. But knowing Stripe exists for small quick and dirty e-commerce sites is fantastic. Thanks for the advice!
Yup, exactly my thought. My pleasure, good luck!
What you are looking for a lint tool for PHP. Something like this: http://www.icosaedro.it/phplint/ (Google for more tools). Unit tests are for testing the functionality of the code but lint tools check the style of the code. 
Stay calm. Keep it simple.
That looks cool.. that actually led me to this: http://pear.php.net/package/PHP_CodeSniffer
Yeah, that's a better choice!
Stripe
One example are simple template systems. Imagine your template is something like: &lt;h1&gt;&lt;?= $title ?&gt;&lt;/h1&gt; &lt;div&gt; &lt;?= $page ?&gt; &lt;/div&gt; Now, when you grab this page and run it as PHP, it'll send output directly to the browser (or whatever is listening on the other end). If you want to capture this output (to, for example, return the rendered template from the method that renders it), you'd use output buffering: ob_start(); require 'template.php'; return ob_get_clean(); // returns the contents of the output buffer, and ends it Another example: ob_start(); print "hello "; // captured by output buffering print "world"; // also captured $foo = ob_get_clean(); // stops buffering output print $foo; // prints "hello world" 
Let's say you're building a framework and want to implement caching. Data object caching isn't good enough for you and you want to cache HTML output. You can use buffering to catch the output and write it to disk. You can also use buffering for when you want to capture a scripts output and do some sort of processing task with it. Before you ask "why can't you just.. Build that in?" keep in mind that an application may have many layers of controllers, view files, includes and whatnot that contribute to the output. Instead of integrating these tasks into each of your scripts and views and includes, you can use output buffering to capture it all from one command.
Paypal doesn't monthly fee for less than 3k in transactions.
Hint: stop building your CMS right now, and implement a hook system. Add hooks everywhere you think it makes sense to. Document the hooks in something like a hooks.txt file in the repo, and a note to create an issue on github if there's a hook anyone wants; this is because even if you add hooks everywhere it makes sense, there'll be /somebody/ wanting to do something you haven't thought of. Make sure you respond to these issues as quickly as you can. Think the issues through, and if there's a more general hook possible, implement that instead of whatever the issue submitter asked for. Then, write a very simple plugin system based on your hook system; just a directory full of files, each should contain a class, each class should have a method that hooks onto everything it wants to. You can expand on this if necessary. Then you can get back to writing your CMS, except now plugin developers can start writing useful things, even if they don't want to contribute to the core code. This will be incredibly useful if you ever intend to market this, as it'd mean you have a small plugin development community from the start, and that's one of the things people look for in a CMS.
It's helpful for generating CSV (or other dynamic resources) files on the fly, saving them to disk, and serving just the URL to the CSV resources.
what? css4? but if the css3 is still far from ready and supported!
And then if their DNS server is down, or they just haven't set one up yet, you'll get NXDOMAIN anyway.
Thanks to everyone for their great examples, this one helped me grasp it. I didn't realize it buffered the "HTML", and not the programming code.
In addition to the templating situation that filiped mentioned, you may want to trap error conditions and display special content. For example, you're happily humming along, echoing all kinds of stuff, and then you run into some situation where you can't continue displaying the page. Rather than displaying the partial output and then an error message at the bottom, it would probably look more professional to throw away the partial output and display a "sorry, things aren't working now" page (and alerting the admin via email or SMS). With output buffering you can easily do this.
It's good if you want to be able to trigger a redirect from parts of your code that run after the first echo is called.
[`var_dump`](http://us3.php.net/manual/en/function.var-dump.php), being the well-designed function it is, *always* prints output. Sometimes I want it in a string (for instance, to send in an error email).
Session data and cookies are sent in headers for one. If you find out that you need to set a cookie or header partway through, buffering lets you do that.
Not so sure about this.
My first crack at this (based on some sample code on php.net): function error_handler($output) { $error = error_get_last(); $output = ""; foreach ($error as $info =&gt; $string) $output = 'FAIL_WHALE.png'; return $output; } ob_start('error_handler'); will_this_undefined_function_raise_an_error();
Let me know if you do. Sounds interesting.
I don't think you'll find a better deal than what [CDG Commerce](http://cdgcommerce.com/internet-services.php) offers.
Aside from caching, imagine you by some reason want to capture complex html into a variable, instead of escaping inside php, just use output buffering, close php tag, put all your html, reopen php tag, and you can get all that code inside a variable.
I find myself using it when running long scripts that use large queries to constantly output rows to the screen instantly by flushing the ob after every line rather then letting php decide when its ready to output
Output buffer is used for compression like gzip as well. Need to build up the output buffer and then compress it.
I think that was supposed to be more like "If your code is still generating exceptions you don't expect [...]". Definitely keep an eye out for PDOExceptions, but when it's something super generic like the base Exception class all you can do is log it for later debugging and show a nice error message. Edit: nevermind, he really does mean it :|
How is that bad? I do that and return a nice error message. You said elsewhere to set an exception handler instead. How is that any better? Edit: to clarify, I am talking about catching the exception at a high level.
Setting an exception handler allows the exception to bubble up. If you catch it, you don't allow any code higher than that context to catch the exception. By setting an exception handler, you're catching the exception just before the engine throws an uncaught exception error.
Another reason to buffer output is so you can send the content-length header. HTTP 1.0 only allowed one request per connection; the browser would open a TCP/IP connection send a request for a single resource and then close. However, it's expensive time/resource wise to open a new connection for each request, so in HTTP 1.1 they allowed connections to support multiple requests. However, for that to work, the browser needs to know when one request ends and the other begins. This is handled by the content-length header; You send that header with the length the content and the browser will know when it's received everything you've sent so it can start the next request on that connection. Of course, the only way you can send a content-length header is if you know the entire length of the content you are sending. One way to do this is buffer all the output, send the header, and then send the output. Now the connection can be reused for the next request. 
wepay, similar to paypal, but lets your users stay on your site the whole time by just embeding and iframe https://www.wepay.com/developer?ref=footer
Are you taking into account multiple instances of the same percentage?
A well-kept secret that I'm now passing on: http://php.net/var_export
I've gotten hooked on [Foxycart](http://www.foxycart.com) over the past year or so. The community is responsive, and support is solid. 
This is the same way Wordpress uses, I think.
I use it most frequently in functions that generate html for templates. Like Wordpress shortcodes, where you need to return that html, rather than echo it.
I asked samurai in their support chat room; they said they couldn't help Australians. What services do you have with them? 
Why are you using wget with php?... you should be using curl to get this accomplished... as far as redirects.. you can use curl's built in option to get to the redirect or just check for 301 or 302 http code.
Why should I be using curl? I'm using wget because it was suggested previously here and was trivial to implement.
mmm.. I think I misread your question.. but the answer still stands... you should be using curl because you have control over what you sent and what you get. In your case you can see the http headers being sent back.. and for a redirect it is often with a 301 or 307 http code along with the location of the redirect. This may or may not be also accomplished using wget but am not too familiar with it to be honest. 
curl is a PHP component, wget is a cli tool. It just offers you more control over what you are doing.
http://www.php.net/manual/en/ref.curl.php#93163
&gt; Curl is not a web site mirroring program. Curl is not a wget clone. That is a common misconception. Never, during curl's development, have we intended curl to replace wget or compete on its market. Curl is targeted at single-shot file transfers. http://curl.haxx.se/docs/faq.html#What_is_curl_not Just throwing that out there.
I love how you get downvoted by two people without anything offered as a solution or provide why you were downvoted.
How do you localize javascripts? js gettext seems interesting.
I was wondering the same thing. I don't know whether the code was horrible or something else?
Why not use OO? $bar = new bar(); class extends_bar extends bar... $extends_bar = new extends_bar(); try{ $bar-&gt;vis(); echo "Public"; }catch(Exception e){ try{ $extends_bar-&gt;vis(); echo "Protected"; }catch(Exception e2){ echo "Private"; } } Or whatever you need.
cURL is a **library** that just so happens to be implemented as a PHP library (and it has a command line tool as well). When you're configuring it for usage, you can tell it how many times to follow redirects (from http://www.php.net/manual/en/function.curl-setopt.php): CURLOPT_MAXREDIRS - The maximum amount of HTTP redirections to follow. Use this option alongside CURLOPT_FOLLOWLOCATION. So, you can set that to, say, 5 max redirects, and after that, just have it fail. In short, use cURL.
Use -o &lt;somewhere/log.txt&gt;. Then parse log.txt and either look for one or more ^Location: http(.*) [following] lines (and then extract the ultimate destination URL from the final one), or look for the final Converting cache//(.*)... line (the regex's above are not correct, and the exact text might be different in your version of wget). Not saying this to be a smart-ass, but bear in mind that mirroring content for non-personal use can be against the TOS of sites so you might want to check any that you plan to do this on to make sure that it isn't going to cause you problems. For those that do allow it you might also want to specify -t (limit retries), -T (timeout), and --limit-rate (to limit the download rate) to be nice to their servers.
Because ambiversive is not just getting the html page, the -p option to wget makes it also retrieve other assets (css, images, etc) used in the page, and the other options make it fix up the HTML to correct paths (ie it makes a local mirror copy). To do that in code means parsing html, fixing up relative paths, doing multiple http gets, handling errors and retries, etc, all of which wget does for you. But yeah if it was just a case of grabbing the html then I'd also use libcurl.
Slightly different, they do two things which (IMHO) are a better idea: 1. They use a pure PHP implementation of Gettext (called [Pomo](http://glotpress.trac.wordpress.org/browser/trunk/pomo) ), which means you don't have the reliance on the Gettext extension. 2. They use the actual strings as the IDs (i.e. `_('Some text');` instead of `_('SOME_TEXT');`). This means you don't have to write an English translation, since it just returns the ID if no translation is found.
[print_r](http://www.php.net/manual/en/function.print-r.php)
Study how its done in linux, I think its a pretty good example. Its also practical as a web developer because having some insight in that area will tell you why things are not working (when you can't write to a certain folder etc.)
I've been using Linux as my main OS for 5ish years now, I don't know why I didn't make the connection. I feel pretty stupid now haha.
Gzip compression is the best reason for using output buffering, definitely shrinks the amount of data you're sending back to the client and speeds up the page download. It's a shame this answer is so far down the page.
curl is a cli tool and has a much slower php module implementation.
How is gettext better then php files of key/value pairs?
I think gettext performs slightly better (read an article comparing methods awhile back), but kv pairs is my method since it's more flexible IMO.
You could output them via PHP with a JavaScript content type header. That's how I localize my is most of the time.
I'm not sure but using setlocale affects the PHP process for every request that process is being used. If one french user sets the locale to French, then the remaining of the english user's pages might get translated to french. setlocale is not thread-safe.
Ive just send a email asking for mexico.. 
[A simple function to follow all types of redirects using CURL](http://www.php.net/manual/en/ref.curl.php#92848) instead of wget.
Not quite. In fact, someone addressed this [already](http://www.reddit.com/r/PHP/comments/lsybp/so_im_using_wget_to_fetch_a_backup_for_my_link/c2vdspc).
well, either way, its compiled and i dont need a php module to run it. btw. test it exec() call on curl vs. curl module. exec() is way faster.
I wasn't, but that's a good point. In this specific project, two percentages won't ever be repeated, but if I want to ever extend it, I should consider it. I like doing solo projects, but it's always nice to have another set of eyes to offer advice.
I'm also using gettext in my framework but one has to keep in mind that the locale must exist on the server OS as well. Which makes sense if you think about date/timeformatting etc. but might not be that easy to circumvent if you use a bad hoster and just want to do simple translating.
Did you even read my question?
If you put the code on the same page as the form, just test to see if you have data posted to it before you run that code: if ($_POST) { // code for processing form goes here } This is a good thing to do anyway, even on a separate processing page, because it'll avoid errors caused by someone or thing browsing to your processor. In the olden times of a few years ago, most PHP folks scattered their code all through the site, so each form would have a single file it submitted to and that file did nothing else. There's nothing wrong functionally with this, it will work, but it makes managing the code on a large site somewhat more difficult than needs be. It also contributes to code duplication. Most people that I know who build large sites use MVC, even if they aren't using frameworks, MVC is a convenient way to lay out the files.
yes u can run that. just make sure to call the PHP file and pass in the POST (or get) from the ajax request. if your using jquery ajax, its ALOT easier.
Please dont do if($_POST) As _POST can be set, but empty. Add a field &lt;input type="submit" name="sendMyEmail" /&gt; And check for it: if(isset($_POST['checkMyEmail'])) Other than that, carry on ;)
 if ($_SERVER['REQUEST_METHOD'] === 'POST') { // your code here }
I wouldn't do this either.
But you can use this: $isPost = $_SERVER['REQUEST_METHOD'] == 'POST'; if you don't want to be specific about names of submit buttons.
Please dont do if( isset( $_POST['checkMyEmail'] ) ) As _POST['checkMyEmail'] can be set, but empty. Add a value check: if( isset( $_POST['checkMyEmail'] ) &amp;&amp; !empty( $_POST['checkMyEmail'] ) ) Or rather check with a regex: if( isset( $_POST['checkMyEmail'] ) &amp;&amp; preg_match("/^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$/", $_POST['checkMyEmail'] ) ) Other than that, carry on ;)
What is the difference between ob_get_clean() and ob_flush()? Is this correct: ob_get_clean() clears the buffer, while ob_flush() does not? Other than that, they provide the same functionality? EDIT: I've read that, if you use ob_flush, need to call flush(); &gt;flush(); &gt;ob_flush(); I think I may end up just using ob_implicit_flush(true) wherever I can. 
Again, this is something I let the framework do for me.
If you're trying to get a backup of all the pages, use httrack - it will follow links.
I'm just trying to mirror articles.
How about &lt;input type="hidden" name="sendMyEmail" value="spaghett" /&gt; $hidden = $_POST[sendMyEmail]; if($hidden == 'spaghett') Is this ok? EDIT: accidentally wrote "submit" instead of "hidden"
To post to self leave the "action" field empty &lt;form method="post" action=""&gt;
No, please note that I've named the submit button, not the e-mail field one, so: 1) if it's set, it will not be empty 2) it will not contain the email address Also, your REGEXP will mark valid email addresses (like this+that@gmail.com, this@localhost, this) as invalid. [This is an example of valid regexp](http://www.ex-parrot.com/pdw/Mail-RFC822-Address.html)
Care to explain exactly why?
Indeed.
No use something random and prevent CSRF at the same time. 
Something like this? $random = rand(1,9); $hidden = $_POST[sendMyEmail]; if(isset( $_POST['sendMyEmail'] ) &amp;&amp; ($hidden == $random)) &lt;input type="hidden" name="sendMyEmail" value="&lt;?php echo $random ; ?&gt;" /&gt; EDIT: accidentally wrote "submit" instead of "hidden"
I replied to parent, but its what $_SERVER['REQUEST_METHOD'] is for.
Care to explain?
I generally use OB most often when I'm trying to get an unfamiliar platform to cooperate. Get the output, run ten regexes on it, feel like a terrible programmer, but get the job done.
Or don't use the action parameter at all.
I don't see how $_SERVER["REQUEST_METHOD"] is any better than just checking if $_POST isset(). In fact, I like BTMPL's method, as it doesn't just check "is this a POST request?", but "is the a POST request of a particular kind?" -- specificity is good.
Off the top of my head, ob_flush() basically outputs the current buffer to PHP's internal buffer, then cleans the ob buffer. flush is different in that it asks the web server to output PHP's current internal buffer to the client (browser), but to wait for further output (i.e. don't close the connection). So basically, both functions clear the buffer, but ob_get_clean() returns the buffer's contents and ob_flush() pushes it to PHP's internal buffer (probably the same as `print ob_get_clean();`).
Sorry to hear that. I use their gateway + merchant account. Are they gonna open in Australia anytime soon?
Yeah, that's better. You should've went to their chat, possible faster answer there.
You are comparing two different random numbers: On post request your controller will get the previously generated number. You just have to save the number in the session and than compare this number to the value in the post array.
He's just trollin'. Downvote and move on.
&gt; If the user has JS disabled, you get no payments This is only if you use their JS library for handling payments. They also have [server-side libraries](https://stripe.com/docs/libraries) for all the major languages.
Damn it, that always slips my mind. So what's the best way then? Just check if isset and preg_match or check against a random number set in session?
Strongly agree on BrainTree and just an upvote wasn't enough. Here are some of BrainTree's customers: 37Signals (Basecamp, Ruby on Rails creators), Mozilla, GitHub, Disqus, Shopify, airbnb, zendesk, getsatisfaction. Clearly they're doing something right.
Mostly because I see people doing all kinds of odd things with other methods. Creating "fake" values to check to see if a post has happened, referencing post when you don't know whats in it etc. This just directly asks "Is this a POST?". It just seems cleaner. One particular anti-pattern I saw checked for specific POST values because the form submitted to itself and had several possible scenarios it handled. The hidden fields were essentially handling flow control for a monolithic php page where the outcomes were completely different. I'm also wary of doing things which could be security issues in the absence of good documentation, and even after searching I can't really find anything definitive for any of the three ways of doing it.
You have to use a hidden field with a e.g. generated random number, which you will also store in the session. This should eliminate double-posting (browser "back"-button). $rns = $_SESSION['check_number']; $rnp = isset($_POST['check_number']) ? $_POST['check_number'] : -1; // this is ok if you have only one form in your page $isPost = $_SERVER['REQUEST_METHOD'] == 'POST'; if($isPost &amp;&amp; $rnp == $rns) { // handle user request } // update your random number $rn = $_SESSION['check_number'] = rand(1,9); // and put it in a hidden field &lt;input type="hidden" name="check_number" value=" . $rn . " /&gt; &lt;input type="submit"/&gt; Don't forget to start the session on the top of the .php page (before any other output) To enable browser navigation you can use post &amp; redirect (After every post requerst you make a redirect via get request) 
Thanks, much appreciated.
Thanks for the info.
No your CSRF token should be a lot longer and be checked against the session. Just look it up and please sanitize your post inputs. 
Yeah it was just a simple example. How do you suggest sanitizing a contact form? Right now it checks the email input for valid email and stripslashes for rest (not sure how effective stripslashes is, if at all. It was in a tutorial I followed a long time ago).
Paypal Express Checkout is good if you want users to be able to buy with their credit card and not need a PayPal account. They can also pay with their PayPal account too. Costs about 3% per transaction from memory. At some point when you reach a certain number of average transactions per month it may make sense to move to a merchant account with a set monthly fee and smaller amounts per transaction.
Yes. I had someone get full cPanel access from a contact form when I was just starting. All it did was send an email. He was a very good hacker and the exploit probably still isn't public. Once I fixed the form he wasn't able to do it. A framework like Code Igniter has CSRF blocking built in and will automatically add it to your forms. 
@vertex-four: thank you, it's a very novel idea. and also, do you have experience with writing plugins/hooks? if so, which platform did you like best for it? wp?
A little-known functionality of form element names is that you can create "arrays" within your form. That is, instead of using a wholly-distinct name for each form element, you can use the format name="myFormName[element]". So, this way, you can group your form data into an array. Having done this, you can then check that array_key_exists("myFormName", $\_POST) &amp;&amp; is_array($\_POST["myFormName"]).
Thats if the page/url you are currently on is the one that will process the post/get request. Generally this is the case...but not always. For instance, with RESTful interfaces this is often not the case...but then I also don't think this is what the OP was referring to.
Actually, my favourite hookable system is Phorum. I've used their hook system to develop a wiki addon that uses Phorum's template system, user management, etc. I haven't released this addon though, it was for a private site. Check out the [developer docs](http://www.phorum.org/docs/html/developer/), specifically the Modules and Module hooks sections, for how the interface looks to a plugin developer. Also, the [API docs](http://www.phorum.org/docs/html/api) show how the API works, although it's not object-oriented or MVC; you can probably do better than that. For an API, the best idea is probably to give plugins direct access to your model layer, at least at first; that way, they can read/create/update/delete whatever your own CMS can. This also gives you an incentive to keep your model layer clean, so that the plugins can use it to do things you didn't anticipate.
I think you'd need to use the tokenizer for this, rather than reflection, which makes it a pain.
Yeah, it seems that way. Luckily [CodeSniffer](http://pear.php.net/package/PHP_CodeSniffer) seems to take care of all the nastiness I don't even want to think about that goes into such a task.
These days, if you handle any information that is the least bit sensitive (rule of thumb: anything that individually identifies a person), you should probably run everything under SSL. Regarding payments - if credit card details are ever transmitted to or from your server - you need to do a bunch of PCI work (including but not at all limited to using SSL). Some payment gateways (I like Braintree), get around this using a mechanism called "transparent redirect". With [transparent redirect], you host the payment form, but the form's action points at the payment gateway provider's server. The user clicks submit, and sends their details directly to the payment gateway, who collects the info and redirects the user back to a page on your site, with a nice token passed via a query-string parameter. You take that token, and make a server-to-server call to the paymenet gateway to get the transaction result. Thus, you never see the credit-card data, which mostly takes your system out of scope for PCI standards.
I'd just use CURL, but isn't there a -o parameter on wget that lets you specify the output name? Or do an output redirect: wget -E -H -k -K -p $url &gt; ../cache/$url
Update: My problem was not what I thought it was. It was a combination of my chat script truncating the links and/or URLS with question marks causing wget to fail... I think.
This is not "little known."
The easiest thing to do here is this: 1- Rename contact.html to contact.php and put this at the top of the file: &lt;?php $message = ""; if(isset($_POST['message']) &amp;&amp; !empty($_POST['message'])) { // PUT the code from emailme.php here $message = "Thanks for contacting us! We'll get back to you as soon as we can!"; } ?&gt; Put the contents of emailme.php into where I mention above. You'll need to pull its &lt;?php and ?&gt; tags off though. Also, $_POST['message'] is working on the assumption that 'message' is the name of the form field with the message. So change it if need be. e.g. &lt;textarea name="message"&gt;&lt;/textarea&gt; 2 - Then put this where you want the 'success' message to be shown on the page: &lt;?php echo $message; ?&gt; 
your response was nonsense so i responded accordingly.
Why was my response nonsense? 
Trac + Mylynn on Eclipse
However, this will not validate. All versions of HTML require an action attribute for the FORM element.
Right, `print_r` takes an optional second parameter to return the output as a string. First, though, `print_r` is not `var_dump`. Secondly, it's still a retarded design decision, albeit a slightly better one.
`var_export` is essentially a wrapper around `var_dump` with output buffering (if you pass it true for the second parameter), so technically it's still a valid use of ob.
If you use jQuery and Ajax, you don't even need the form element at all. :P I prefer this method.
$value = filter_var($value, FILTER_SANITIZE_STRING); [filter_var](http://php.net/filter_var) [filter types](http://php.net/manual/en/filter.filters.php) To verify that it is a certain type, use the Validate filters from the second link.
&gt;YOUR favorite way to sanitize input for inserting, updating, or selecting from a database? Use mysqli, because that's what its for.
Brilliant, thank you so much.
All input goes through one of the filter functions (filter_var, filter_input, etc.) first thing: filter_input(INPUT_POST, 'value', FILTER_SANITIZE_SPECIAL_CHARS); Just make sure to use the correct filter type as JOHNREDCORN linked to. Without a filter type you aren't filtering anything (I saw someone commenting somewhere that thought it was optional). As for putting things into the DB... [read this.](http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/)
Use parametrised queries for databases.
"Sanitizing data" and ensuring that it's database-safe are two completely different things. Sanitizing data is you ensuring that only values that you expect to be present are present. Making input DB-safe using real_escape_string (or other variants) just means that it can be inserted into the DB without causing problems such as SQL-injection. Something can be 100% database safe, but still be invalid for what your processes/functions are expecting.
[MySQLi Real Escape String](http://www.php.net/manual/en/mysqli.real-escape-string.php) Be careful just using mysql_real_escape_string, it doesn't consider the character set being used and could be vulnerable to injection. 
For newer projects I'm ensuring that no unsanitized data gets in unnoticed by using http://sourceforge.net/p/php7framework/svn/60/tree/trunk/php7/input.php?force=True -- It's a terser syntax and allows to combine filters: $_POST-&gt;sql-&gt;text["field"] But I wouldn't bother for the DB. Parameterized queries are so much easier to use.
 function clean( $str ) { $str = strip_tags( $str ); $str = htmlspecialchars( $str ); $str = trim( $str ); return $str; } I used to use this a lot and would just add mysql_real_escape_string() when it was going into a SQL string. Now I just rely on frameworks and prepared statements. 
I'll look into that, the only problem is that I'm constrained by the the school's servers which probably only have the basics (*AMP). The alternative is to host it myself through a cheap/free webhost, which school administrators are always weary of... Thank you for the suggestion though, I might use that for my own products.
Right, and I experienced that while penetration testing my inputs. On a side-note, a very similar conversation with my friend about this (while walking behind an english teacher) led me to believe that most of the teaching staff actually has a very dirty mind...
Thank you.
Wow, that looks incredibly useful, I'll have to look at that more later, thank you.
AMP = Apache / Mysql / PHP (most of the time). Chances are *very* good if you are running anything that has been updated in the last decade, you can use mysqli. PDO also offers similar functionality. http://www.php.net/manual/en/intro.mysqli.php The mysqli extension allows you to access the functionality provided by MySQL 4.1 and above. More information about the MySQL Database server can be found at » http://www.mysql.com/
The problem with this function is that when outputting data, you can't easily see in the template what data needs to be escaped and what is already HTML escaped. Also, what if you need to output your data using json_encode? Then you have the ugly situation of turning the escaped characters back into HTML to escape them for JavaScript.
Ironically I had a function named clean() as well...although now that I think about it, that's probably a obvious choice, anyways I digress... I'm not sure I fully understand the usage of trim($str) (the fact that you are only providing one parameter) I assume this method is used to...escape...and escape characters before they are used? So \t in $str will be "converted" to 5 spaces before it is ever used...?
I don't really use it anymore but it's intended to be used on specific variables before going into a query.
&gt; I'm not sure I fully understand the usage of trim($str) My own personal OCD of wanting to trim off extra spaces at the end of a string. &gt; I assume this method is used to...escape...and escape characters before they are used? I had not thought of that at the time, so I do not think it does. I never bothered updating it since I let the framework do my sanitizing now.
My point was that storing HTML-escaped strings in the database is a risky way to approach security, rather than just keeping the unescaped version.