Any particular reason why you rolled your own? Genuinely curious if your package solves something new. [PHP CodeSniffer](https://github.com/squizlabs/PHP_CodeSniffer) has been around for a while with robust Rules and ways to create your own "Sniffs"
Ye i know about PHP CodeSniffer, there is not any particular reason, and it doesn't solve anything new at this moment. We wanted to roll out with something ours so people can contribute in free time and feel like developing one product from bottom to top.
I noticed that you use regular expressions for detection of unwanted constructs. This causes quite a high probability of of false positives, i.e. https://github.com/PhaseComponents/Finch/blob/master/src/File/File.php#L97 will also trigger on lines with a comment that contains the word 'goto'. A more robust approach would be to use a stream of tokens, like [PHP_CodeSniffer](https://github.com/squizlabs/PHP_CodeSniffer) does. You could even improve upon PHP_CodeSniffer's approach by doing detection based on the Abstract Syntax Tree of a file, as can be generated by e.g. [PHP-Parser](https://github.com/nikic/PHP-Parser).
Thanks for suggestion, will look at this.
It will be purely a performance related one, Node is far more performant out of the box than PHP. It will crush PHP in requests per second and response times, even more so when the API is under high load. Then again if performance is the driving factor in your decision then I can think of many languages that will also out perform Node in this aspect so its not a silver bullet. There is always a trade off, if PHP is your language of choice and you're not very good at Javascript then PHP is the obvious choice here. Ultimately no matter how good the defaults are it will always be hindered by the developer(s) working on it. If you API will be handling around 60 concurrent rqs or less then PHP should be fine on a single server. Pros: * High request rate and low response times out of the box. * You will get much higher performance on the same hardware. Cons: * JS eco system is not very stable at all. * You will have to write Javascript
I did in fact overlook it. (It appears some of the other defenders of PSR-7 here did as well. ;-) I have reviewed the spec again, and AFAICT that point is mentioned only once, and only in that method. The missing language from getAttribute() and withAttribute() might mean an oversight on those methods, *or* its presence on getAttributes() is itself an oversight on that method. Further, the discrepancy with withAttribute() sets up a mutually-contradictory situation: withAttribute() must maintain immutability, but getAttributes() allows mutability ... ? Tricky. Regardless, the withParsedBody() remains susceptible as described. I'll update the blog post with this; thanks for pointing it out.
[removed]
&gt; I've been a professional PHP developer for 15 years and have worked for some of the biggest clients in the world. Wow. You must be really good. That being said, you still write things like, `$code == (string) $voucher` because you haven't discovered strict equality yet. I'm sure after 16 years working for even bigger clients it will dawn upon you, though.
Hi SobakPL, I worked on the redesign of php.net with Levi Morrison. I've been considering moving our work over to bugs.php.net for some time now. Thanks for putting things into motion with your posts. Keep it up! :) If you need technical help with the code you can reach out to me on github as "dragoonis" (tagging on issues) I can review/merge any pull requests you want to me to on github. Once you've collected design and functionality input, reach out to the team by way of github or the php-webmaster mailing list. If you do the mailing list route I probably won't see it so best to nudge me on twitter or something. Cheers! 
If you replace the word FTP by database, you will see that you can write tests without a database, that would be an Unit Test, you mock the database and never connect to a real DB. You can also have integration tests that connect to a test database, not the development one, but an empty database that will be seeded. So you can have Unit Tests with FTP too, or you can have an integration test with a test FTP, not the production FTP, but a local FTP server you setup for your tests
internetbadass.jpeg
The safest would probably be to use a JavaScript implementation of GPG. It would allow encryption/decryption based on a key only the user would know. Plus it would probably allow securely sharing that password with a fellow user if they know their public key (you could safely share/store the public key part)
Why not just use an established issue tracker, such as YouTrack or Jira, instead of building your own (worse) tool?
&gt; but also to have a "group password safe" with an other user. Not sure how to achieve the group safe in a secure manner. &gt; ... &gt; But then again I don't see how to make group password safes that way. This is actually a more challenging problem than it sounds, and is somewhat relevant to some cryptography research I'll be publishing once I receive feedback from one of the experts I asked to review it. I'm not even confident that my answer here is adequate. It's a hard problem. &gt; SHA512 login password in JavaScript and send it through the web. * https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded * https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016 &gt; Use the (hash + someString) as encryption passphrase for all encrypted user passwords; so symmetrical encryption. * https://blog.skullsecurity.org/2012/everything-you-need-to-know-about-hash-length-extension-attacks 
I mentioned Express. You want me to list out my whole package.json or what? Everything being async is actually a significant difference that node/javascript have over php. NPM is the largest code repository in the world which is obviously a positive thing for developing in node. It seems like you don't actually have anything significant that you don't like about node but you just want to circlejerk which is fine. 
My real opinion: I really hope this is just some kind of exercise/homework or similar. Any kind of online/cloud/shared password manager, even if it is in some kind of closed network, is really stupid idea. Keep your passwords strong and for yourself only. And you are putting other people in danger because THEY WILL store really important password and sooner or later, you will face some really serious problems. YEAH LET'S DO IT opinion: This is complicated stuff, and I can see this done properly with some kind of Chrome and Mozilla plugin. Still, this does not meant perfect protection, but you could force user to go through your addon. You could generate key pair for each group and then for each pass or something similar and do some juggling with them. That's just my current brainfart that I can come up with. Also, sarciszewski has some good points.
I'm experienced in PHP and rather fledgling in JavaScript, but there's a few things about the JS ecosystem I do not like. I say this in the spirit of constructive criticism - I am opposed to language/framework flame wars in general. It is possible that I may am yet to experience the 'eureka' moment with server-side JavaScript. The first issue is the `require` device. I understand why it is useful - modules pull in functions or classes they need, and expose the ones they want to make available to others. I understand also this is useful when mocking in unit tests - it makes things very easy to swap out, say when using Tape. But in comparison to PHP's autoloader, it feels a bit clumsy, and that each blob is wired to all the other blobs - it brings back memories of PHP with `require_once`. If I move or rename a file, I have to repair the references. I have to add a bunch of boilerplate to each module that feels unnecessary. I'm worried, as a JS newbie, that I am creating a big ball of mud without a definable, maintainable structure. My other gripe at present is getting to grips with promises, and debugging issues inside a promise chain. I'm new here too, but I've spent hours staring at a simple console program wondering why a promise chain is preventing the program from finishing, and finding some strange error inside it has prevented something getting resolved (a colleague took over at that point, and I think the resolution was that something could be appended to the chain to echo the error to the console, which I would expect to see for free). I have other issues to do with the complexity of the dependency tree even in a smallish project (my API with 20 dev deps and 20 run time deps needs to fetch 489 libraries, taking 106M of space!). I don't yet know if these are justifiable complaints, since they could mostly be due to my not knowing the language and its ecosystem very well. But notwithstanding they are still things that may put off people sticking with it. 
/r/tfidry said it right: it's all about the complete ecosystem, not just the runtime. Node might be a good runtime (it's definitely fast), but as a whole, Node ecosystem is miles behind PHP's. Full disclosure: we've inherited this app from a USA based dev studio (we're based in Croatia, not that it matters) and have been working on getting it in shape for quite some time. It seems these guys tried every blogpost they found. So, Node+Loopback was pre-chosen. Starting from the package manager: NPM vs Composer. NPM is, from my experience, much slower than Composer. Other than that, it often silently fails to do what you thought it would do, on multiple occasions it would behave weirdly after an `npm install`, but would work as expected after deleting `node_modules/` and re-doing it, with no changes to my code. A lock file is optional so you can have rolling updates on production if not careful. If you do use the lock file (shrinkwrap), it will fail to update it while updating packages and just leave it to you to go figure it out. I'd expect my dependency manager to, you know, manage dependencies. NPM fails there. Yarn seems to fix a lot of these problems, but I have little experience with it. Composer is basically a zero-issue tool for me. Note: NPM also didn't have a namespace notion for quite some time and this has lead to a lot of problems in the past. Somewhat related: Javascript has no (established) notion of classes. With that, you can't have something equivalent to PSR0/PSR4 or an autoloader. Instead, *you load files*, not classes. This means you do stuff like `require('module')` on top of all your other files do load dependencies. That works for 3rd party modules, but you need to have this whole thing for local dependencies / modules so [it gets quite complex to manage](https://gist.github.com/branneman/8048520). Everything is async: yes, but turns out this sucks (I wrote about this before). In request/response architecture, you end up with quite a bit of sequential work before you can do anything in parallel: 1) new web request,who dis? 2) oh it's /r/dkarlovi, so you want to delete the article, let me check if you're allowed to do that 3) turns out you are, let me try to delete it 4) yes, success If you check the steps, you'll see that you can't do step N without having N-1's results. This is literally definition synchronous execution. What would be great is that everything was sync by default and then I can have parallel blocks which run concurrently. I've had chances to use async handling which was awesome, but I feel it's the wrong way around. BTW, you need a special library to handle all this async stuff for you in many cases, because some functions are sync by default (like `Array.map`) for whic you sometimes need an async variant (like `async.map`). Also: callback hell -&gt; promise hell -&gt; async/await hell (probably?) Error handling in Node is a mess: you write everything like this: `someAsyncThing(param, param, param, function(err, cb) {});` In your callback handler, your first line is most often `if (err) return cb(err);` (which passes control back up the callback, passing the error, which gets handler somewhere, probably. This, when paired with "everything is async" part, has severe drawbacks: if you (or a lib you're using) omits the "error handling line", [it will swallow the error without you knowing about it](https://github.com/strongloop/loopback-datasource-juggler/pull/954/files) which might be an error about a failed database INSERT/UPDATE which never gets to your error handler, your code is 100% sure everything was correct. Stacktraces are useless in 50% of the time because, if an error is triggered by an event listener, it will not mention the event invoker (which is probably your code) but instead only the handler (which is probably not your code). So, by stacktraces alone, you can debug roughly 50% of the errors. I've also had trouble adding a catchall exception handler to log everything to Sentry (which we do on all PHP projects) because of this whole mess. Edit: forgot: Node works by loading up the the bootstrap file and its dependencies on startup, even on development, there's no "hot reload" when you edit a file like with PHP, you need to restart the entire Node process. If you're not used to it, your development experience might be quite bad just because of the slow development feedback loop alone. Then we get to the state of affairs in libraries: they're mostly meh. Some of them are really good (I'd say, Symfony level good), most is mediocre. We're using [Strongloop Loopback](https://github.com/strongloop) which is one of the stronger API frameworks (company was sold to IBM for $8m so they're worth something), it's built on top of Express (a Strongloop framework too) which is state of the art HTTP framework for Node. Basically, everything works until you try to do something a bit unusual, like foreign key constraints (it doesn't do it because not all underlying systems can do it), managed database migrations (it wants to sync your database schema with the models, ad-hoc), [custom joins](https://github.com/strongloop/loopback/issues/3049) or [caching](https://github.com/strongloop/loopback/issues/2076). We had to rewrite large parts of the app to use a custom `ORDER BY` and implement a complete (caching|migration|foreign key constraint) subsystem by ourselves. I'm not saying Loopback is THE library, but it's A library, it's obviously developed and maintained by a large number of people, it's just not a good fit for medium or advanced use cases. So, Node is not completely bad, but it's young, immature and unpredictable, with parts outright bad. If you're OK with that and like the excitement of working with a young platform, then do it. I'd use Node as an event loop for websockets, everything else would be handled by something else.
http://symfony.com/blog/one-api-to-rule-all-product-data
I don't see the word "fuck" anywhere on here.
It is for an excercise. I use 1Password for high level passwords like Googlemail, Domain Service. The rest I remember, generated by a random password generator. I know xkcd doesn't approve.
Wow, thank you very much; those linke are incredibly helpful - eager to hear back from you!
Does it really have to be that hard? Simply call password_needs_rehash(), and rehash if needed. The algorithm and iteration count differences will be matched for you. Add this check to the user login submit handler, and you are good to go forever. 
Nicely said. There are often many tiny mom packages that you can easily install and run without an actual FTP server. I use bunch of http servers to test some of my apps, and tests still pass under a minute. 
Oh! Thanks. Somehow I forget about that. Shame on my ass.
It's this: https://en.wikipedia.org/wiki/XSL_Formatting_Objects But I think his parser picked up some XML files as SQL files and that's where this came from.
Wow. Thanks for the details response. I hope you enjoy what you are doing because it sounds a little bit like hell to me.
You are totally right. 
Ugh. I'm working on a legacy system right now that makes extensive use of `require_once`. It's a big pile of spaghetti. Good times.
I appreciate you taking a look at the package and providing feedback, thanks! Initially I did look into making use of the `indices`, however, these values become invalid when you begin to replace parts of the tweet text with the HTML counterparts. Of course, I could add in the math to calculate the new `indices` of the entities, however, my decision was to make this package simple to understand for future development so I opt'd with the `preg_replace`. If you've any ideas for using the `indices` and not adding in complex math, please feel free to suggest!
Are you talking about the X on it's side in a fancy font?
for the same reason they exist when instantiating any class using "new": if the class accepted constructor arguments, they'd go in those parentheses. In this particular example, there is no _construct() . But when there is, that's where you pass those arguments for the new object. Have a look at the second example on the documentation page for a better example: http://php.net/manual/en/language.oop5.anonymous.php
My thought would be that it's templating EX: &lt;span&gt;&lt;?php echo $foo; ?&gt;&lt;/span&gt;
&gt; but also to have a "group password safe" with an other user. One way you could achieve this functionality is to allow individual passwords to be shared with other users, then a user can select who else can see the password (and perhaps whether they can edit it). If you login as one of the other users, you then see any passwords that are shared with you and can edit them (if you have permission). If you want to extend it further, you could have groups which users are attached to and you can share a password with the group. ---- Aside from everyone else's comments about encryption security **make sure you pay attention to general security**. For example, if when I click to retrieve my password for, say, Facebook, you make a call to `/password/retrieve/46`, then I might be like, hey, what happens if I type `/password/retrieve/47` or `/password/retrieve/46'; DROP TABLE Users; 1='`. You have to be suuuper careful to watch out server side for permissions, SQL injection and other attacks when retrieving a password from the database! Make sure to read up on prepared statements and always use them. I would also strongly recommend setting up a test environment that has a fake user setup and allows you to do automatic testing for whenever you do an update, to ensure you never accidentally expose information or allow people to get passwords that they shouldn't have.
&gt; Salary does seem a little lower than what I see in the States. In Toronto it's pretty good. Most senior devs are making around $120k a year. As you move outside of the city the rate drops a little. well since i am mexican for me thats a lot of pesos because of the current exchange rate and it will increase. can you put me in contact with canadian companies? can i send you my cv?
[removed]
Most make way less than 120, don't get his hopes up too much. Seniors make more like 80-100, 'most' seniors don't work for big tech.
Cool. In the meantime, I'm writing a post to put an end to all this dated advice once and for all.
maybe you could try some from this https://packagist.org/search/?tags=country&amp;page=3
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Weird... http://imgur.com/HdTVqGT
this is indeed a blatant spam, and should be reported as well
&gt; but also to have a "group password safe" with an other user. Not sure how to achieve the group safe in a secure manner. Do you mean different users can have access to the same secret? If so, here is a [copy](https://www.reddit.com/r/PHP/comments/2liomd/secure_file_storage_for_multiple_users/clvkzsx/) from an older answer of mine to similar question: &gt; One approach is to store users' public keys and encrypted private keys (which are AES encrypted using user's, say, PBKDF2 derived password) and when one user shares a file, create a random AES key used to encrypt the file itself. &gt; &gt; Encrypt this AES key for each recipient using their public key. When someone with access to the file wants to read it, decrypt the AES key using their private key (which you can decrypt as the user must supply his password). &gt; &gt; If user B's access to the file must be revoked, do the above again but do not give the new AES key to the user B. &gt; &gt; Also, you may consider adding an extra server side AES encryption layer to the encrypted data (so that the data is not only behind "user's passwords", but is being protected by a strong server side key). &gt; &gt; This method requires a trust to the server (if an adversary has an active control over the server the data will be lost), but is as strong as the weakest user password against "full backup leak".
Probably you're being served by different mirror but the issue is weird indeed.
I'm from Singapore so it's probably a mirror server here in Asia.
most probably, yes.
just FYI - you used the term "brown-nosing" completely incorrectly. http://www.urbandictionary.com/define.php?term=brown+nosing
I can think of a few ones, namely: &gt; disable_functions =exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source &gt; allow_url_fopen=Off &gt; allow_url_include=Off
You are assuming I'm not still trying to get the 5.6 upgrade through ...
Yes, this post was directed solely at you based only on assumption. Pfft, it's more of a *"hey guys, just to let you all know if you don't monitor the PHP versions, php5.6 which is used a lot, is now only being upgraded for security patches, so you should think about upgrading to php7 now"*
Thanks; I was thinking something similar too when it comes to "group password safes", but I'm not a fan of trusting the server with the critical logic, since it's the easiest attack vector.
I have a list of systems that are not yet on 5.6, but trying to get resources (developer time, tester time, etc) hammered through the board to upgrade when they are working well is always an adventure.
Again you are trying to repost a weekly PHP Reddit Top back on Reddit Let me remind you that a recursion could lead to stack overflow ;)
Yes, but would you volunteer your free time to add features to PHP 5.6? I wonder if you could justify it for yourself.
Heh, nostalgia, maybe! I'd wrap some basic functional/browser tests around it, as much as time allows, and then start adding in an autoloader piece by piece. Converting a legacy app to better practices can be very satisfying. 
I JUST upgraded our system to 5.6. It was quite involved due to the need for upgrades constantly being put off (8 year old code base). 7 is my top priority as soon as possible. 
I don't think these are actually helping security much: - allow_url_include is always deactivated by default, so there is nothing to "change" - allow_url_fopen as well as the disabled functions lead to more problems then they solve security problems, in my opinion, because most applications will need some of these. You even included curl_exec, which I use in every project and which is used in so many libraries. It just shows how arbitrary this list can be. I also need exec sometimes. So if you include this kind of configuration there is a good chance that you then need to spend a lot of time trying to find out why parts of the application don't work anymore or how to make it work again, and then have to enable some of these functions after all (I'm speaking from experience here...). That is also lost time for minimal gain.
This article sums up exactly what I thought recently when these "security tips" started popping up here.
&gt; I did not read the link but it appears that these functions are still vulnerable even is turned off? Some sort of mail exploit. It's security theater. Go ahead and disable these functions. Any competent attacker will find a way to get their payload on your server, and from there, execute it. Keith Makan's strategy: 1. Figure out what email software is used server-side, and more importantly, how emails are stored in the filesystem. 2. Send an email to the server. 3. Use the knowledge from step 1 to execute your payload. Also worth noting: Mail servers were also used in the DROWN attack on TLS. Disabling these functions does nothing to most real world systems. If you have a LFI vulnerability, fix the vulnerability, don't try to dance around it.
Fuck me. I've worked for places like that. Treating "business requirements" more importantly than things like security and an easier upgrade path in the future boggle my fucking mind. I'll pour a beer for you tonight (I mean, I'll drink it myself, but it's meant for you in spirit).
7.1 has dropped some APIs, 5.6 probably has them deprecated?
Interface is a bit of a loaded term isn't it (am I referring to a front-end User Interface? Can be hard to tell from the context.); maybe we all need to start calling Interfaces Contracts. 
I work outside of Toronto - London Ontario. And this city is starving for good PHP devs. There isnt a day that goes by where I dont hear from someone looking for a good dev. The pay is not nearly as much as you would make in Toronto [100k] vs [65k] but the cost of living is roughly about 1/2... so in the end I think makes up for the lack of base salary.
I feel anger... every day I hear that our 5.2 "isn't that bad and old"... and we still run some production code on PHP 4! 5.6... 7.... yeah, maybe...
OK, so now are you referring to a legal contract?
See [relevant tweetstorm](https://twitter.com/CiPHPerCoder/status/822451652686966785). &gt; It takes max 15 minutes to tweak php.ini, not 20 hours. We can argue until we're blue in the face over the time cost of "milliseconds for Puppet to do it for me everywhere" versus "hours spent learning while doing" or "15 minutes on each deploy, manually, against a checklist" because it's going to depend largely on the maturity of the organization following these advice articles. The intended audience for most of the configuration-based security articles? Novices. So I erred on the longer estimate. &gt; Stopping "incompetent" attackers is not worthless (especially since you are likely to get *more* of those types of attacks). There is an economic force at work here. How can we maximize ROI for preventing attacks? What is a better use of your time? * A: Fix the damn vulnerability in the damn code base so it stops unskilled and skilled attackers alike, OR * B: Make sure to set register_globals to Off in a PHP 5.6/7.0/7.1 application because a blog post from last decade said it was important &gt; As you should know being a so-called security expert, security is about layers. If simply telling people to focus on relevant advice (where context matters) downgrades me to "*so-called* expertise" status, I'm clearly involved in the wrong community.
Ah, you're right. I guess I meant something closer to "looking down your nose at". Good catch. 
But PHP doesn't scale!!! /s
Here is my 5 cents: * Learn about databases * Learn about validating user input * Learn about debugger(s) * Learn about unit testing * Learn about caching 
Whats the advantage of using Facebooks McRouter + memcache over say a redis cluster? I always thought that redis superseeds memcache in both performance and features. Whats the advantage of coupling yourself to facebooks implementation?
Oh sorry, i thought since i wasn't asking for help just trying to get a conversation with older coder. should i repost there ? or my thread will get closed ?
Learn HTML and HTTP, I know it seems obvious but most people overlook this.
the course i'm following ask for a good knowledge of html, im still gonna carry with it for a while until i might need to go check the html course. But Thanks for letting know about http too, im gonna add it on my list. 
I wouldn't call this question a career-related at all, but well :)
Well, the title specifies he's looking at the possibility of coding as a job in the future. That's 'career' enough for me I spose. &gt; Any experienced PHP-er here able to give me some good tips like There may not be a question mark but at the least I would call that a request.
If you're coming from nothing and want to get into web development start with the fundamentals like HTML, CSS, and Client Side JS. Once you have a good grasp on those basics then go into the basics of PHP and start learning how to structure your app. Then start building things for your self and you'll start to learn from experience as you build more and more. We could throw all of the jargon at you now, use DI Containers And Template Engines And Prepared Queries Through PDO!!!, but it wouldn't do any good and you wouldn't benefit from it because you don't have a foundation YET. The best way to get that foundation in my experience has been building small apps for my self and then just expanding from there as I found problems and learned how to fix them.
Resources for Beginner in PHP https://gist.github.com/odan/a0dd66bf681fae46d0df14b103108f23
So regarding another comment here, Should i check html and css etc before checking your book ? Or does your book could compromise in the fact that i don't have real hand on experience ? 
We are currently dockerising our dev environments to help the move to PHP 7
Cool, thanks for this.
Yeah the goal is to become enough fluent to make this my carrier. otherwise it's gonna become a nice thing to know. 
Yes! If not working you can get a refund.
EventHandler:: register() only checks that the passed params are objects. It's very easy to just pass anything to it and break the package: $listener = new StdClass(); $eventHandler-&gt;register('page.viewed', PageViewEvent::class, $listener , 'onAction'); You would be better off either Type hinting against the Class Name and then extend the class, or by having a ListenerInterface and type hint against that. 
Along these same lines, it'd be nice if there was a doc block in the code. Currently, you have to read the exceptions to figure out what you need to pass to the function. 
I was thinking of doing this, Making an abstract class called Listener and Event that you extend from, how ever the issue with this is that now I have an empty abstract class you are forced to from only for type hinting. Would that be an issue in your books? Is that common practice?
Everything scales with resources.
Well 5.6 -&gt; 7.0 is easier than 5.x -&gt; 5.6. So you might be in for a pleasant surprise :)
Dammit, sometime i wished there was like a don't do X or follow this path for glory ahah. but yeah indeed. i'll have gut feeling if thing get weird and i don't understand. Thanks a lot for the info rob.
Its fairly low risk if you are just reselling them.. but probably not worth the dollar and time to try to resell them. I fell for it many years ago.. barely made my money back lol they are probably crap sites and/or the same site 1000 times with different colors ;-)
&gt; The reason it is called "Contracts" instead of "Interfaces" is because it is not strictly interfaces. I remarked back in 2014 that the packaging of "contracts" in this way is a neat form of decoupling, and the first really interesting thing I've seen come out of Laravel. (One nitpick is that maybe the Exception classes ought to be interfaces instead; but then, Exceptions that don't implement new behavior might be exempt from coupling rules. Probably not a big deal.)
Try to choose a tangible project you can both finish and learn a lot from. Something that triggers your imagination, but also something that you already can judge upfront what it takes to deliver. Focus on trying and learning. Don't care when you throw the end-result away as it were personal notes/annotations. Things that come to mind: a calculator, todo-app, a data-scraper. Use and read 'good/popular' php-software like Laravel, https://packagist.org/explore/popular .
I've only built a small wrapper before, and something that abstracts the storage mechanism away from the repositories, so maybe take my opinion with a bit of salt. I'd start with defining the API that I want to use. Define the API and decide on what you want done, then start with the more basic features first and work your way up. Rather than trying to figure out the more complicated things like lazy-loading and units of work right from the start, reduce what you have to think about so you can consider them one at a time. Here's how I would start * Basic fetching/persisting API. Just stores simple data, doesn't do any actual ORM stuff. * Add in hydration. So what does this consist of? Well, I'd start with a simple table to class map, then column to property map. Very simple. * Move on to relational mapping. Simple "this field relates to this table" kind of things. Just simple conditions * Look in to maybe lazy-loading the relationships, that would be cool * Maybe nicer ways of configuring the fields. My initial implementation from above would use simple arrays, but yaml and annotations would be nice * I'd consider looking in to unit of work by now, unless I've discovered other things that seem more important Basically, start with the simple things, work your way up. Start with something you can just get functional, even if it's well featured. The more you get to know these things, the simpler they'll seem, and the more you'll be able to understand how other systems work. I find most systems look a lot more complex when you look at them as one whole system, rather than when you pull the features apart and start working on them one by one. But I could also be wrong about that
Yeah, Stack Overflow often is unfriendly place for newcomers, nothing new here. It has useful resources, but the overall atmosphere is quite toxic.
Trolling : /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required). --- More seriously, I always go to more specialised forums to post. I still read stuff on SO sometimes, but I didn't post there in 4 years.
It's a serious place where people are trying to search for answers so they can conduct their business and get on with their day. Imo the rules may have warts but are necessary to stop it from turning into amateur hour. Source: I'm an amateur.
While that is very smart, it doesn't allow the user to set his/her own password.
😂😂😂 But really. 😔
I don't know why you're building things you don't understand. Just like with your connector, you're bound to end up with something that only looks like a connector on the surface, but isn't one, and it teaches you very little about either building connectors or using them. People usually build something when they have an idea how to improve on it. Make something you understand, not something where you have to come ask us "where do I start".
&gt; One nitpick is that maybe the Exception classes ought to be interfaces instead An exception class may contain factory methods for each error types, constants for the error codes and so on, so they're probably best as classes. 
...and no autoloader nor any libraries (since most of them are 5.3+).
I don't want to buy it, I only thought that if someone put more hours into a project why sells it for less than a half bread? :)
They say that these are separate project, but as I see the screenshot these are maybe crap :D I don't want to buy it, I only thought that if someone put more hours into a project why sells it for less than a half bread? :)
Users are prefixed with /u/ friend! :D
Allowing a user to set their own password is the single most insecure aspect of the password model. It sucks, but it's secure.
What are these forums? :)
My first question was specified: I wrote down, that what I want with the code, pasted the code and what it's doing right now.
&gt; If the best example you can pick out of my code is that then lol. It's just the first thing I came across scanning for something trivial. I do not plan to broach the serious issues because you've already indicated you aren't interested in my tutoring and you are not going to be successful taunting me into giving anything significant away for free.
I think building things you don't quite understand is a good idea for learning. I understood how to use psr-7 middleware, but I thought a middleware runner would be much much simpler to write than it turned out to be (not that it was hard in the end). I thought containers were a lot more complicated before I wrote a quick one myself. Same with event buses and command buses, and many other things. Some people can read the theory of how something works, but not quite understand it until they actually build it themselves. I think building something to understand it is a great learning mechanism
I suggest you start by making a list of: * What workflows or features your ORM *must* support * What workflows or features your ORM will *never* support * How you plan to let people bypass the ORM when they really need to I say this because ORMs are particularly prone to becoming big and messy as people try to solve too many different needs with one project.
Not that dude, but similar boat. A lot of people are being forced to upgrade from PHP 5.4 and lower due to CentOS5 EOL. Mountains of old code is easier to upgrade to 5.6 than it is to 7.x in our case (definitively) 
Always be sure to read the comments. &gt; if (mysqli_num_rows($conn, $sql) that is invalid syntax. RTM Should be more than enough to answer your question. It is a bit strange that the same person who posted the above comment also closed the question as being a duplicate. The linked duplicate question concerns common error messages. Your question did not have any error messages. Oh well. I know this sort of thing is new to you but hundreds of these sorts of questions get posted each day. I suspect you could probably find dozens of the same duplicate question if you knew what to search for. I know you might have expected a more fleshed out reply like: $result = mysqli_query($conn, $sql); if (mysqli_num_rows($result)) { ... But the above does not fit nicely into a comment. It is a bit unfortunate that no one was nice enough to come along and spell it out for you. Another problem with your particular question is that your code is insecure and poorly written. There is always the issue that if someone gives you an answer then they might be seen as approving of your code. For myself, I tend to just ignore these sorts of questions. 
I'm also in Vancouver, with 10+ years experience and while I have had a few recruiters on linkedin message me they've all had not a whole lot to offer me job wise. Everyone of their clients seems to just be collecting resumes,. I've only had a couple of interviews so far within the last 5 months. From what I've seen though the market is varied salary wise. I've been in small companies that only paid out 35k for junior devs to mid range at 55k. Based on the recent job postings I've been going through for senior devs it ranges from 70-100k. It's also a mix between backend dev and fullstack dev positions. 
well... with the lack of mssql support. not gonna happen too soon.
mysqli_num_rows only accepts one parameter, the result of a either a mysqli_query(), mysqli_store_result(), or mysqli_use_result(). so change: mysqli_query($conn, $sql) or die ('SQL Error! ' . $sql. ' '. mysqli_error($conn)); to $result = mysqli_query($conn, $sql) or die ('SQL Error! ' . $sql. ' '. mysqli_error($conn)); and if (mysqli_num_rows($conn, $sql) != 0){ to if (mysqli_num_rows($result) != 0){ That should fix it. If not, I'm sure you or someone else will let me know. I know the one person did point you to the documentation, but I know how it can be starting out and trying to quickly get something going. And missing details is easy when you're not used to them. 
Maybe I'm just the exception then, I don't know. I'm a full stack dev and the recruiters won't leave me alone. I have noticed that it seems to be all about the acronyms, here, and if you don't have the right acronyms, you don't get anywhere.
No problem. If you manage to tackle some interesting problems and solutions, a write up would be very interesting
I always do blog posts on my new components that I release and I feel that once I write something, be it a thin layer that can be built on later, I will be able to start stiching things together and see where solutions and complexity comes in :D
Have you ever heard the phrase "I apologise for sending such a long letter. If I had more time I would have sent a shorter one." ? Reading your question, it appears that you haven't spent much time trying to isolate what your actual problem is, and making a [short simple self-contained](http://sscce.org/) example. Instead it looks like you've dumped all of the code you think is relevant and hoping that people will debug it for you. Learning how to ask precise questions is a skill that does need to be practiced to be learned. And it's possible that you will find stackoverflow 'hostile' until you do. 
If you really want to dig into this, google 'object-relational impedance mismatch' and immerse yourself in that first. An ORM is just one approach to solving the mismatch problem. What we really need, if you're so inclined, is other novel ways of solving it. We have enough ORMs, we don't need another one.
I see you don't have more valid arguments, than insulting me
as we speak i am preparing to publish an api-based application to write services in php using yii2 and ROA architecture. Honestly the most difficult part is the documentation to make it all easy to understand because most of the parts will work like magic, thanks to the yii2 modularization
Plenty. Not for PHP in this case, but I would charge $250 for every major release for Magento. So if you were on 1.4.2 and wanted to upgrade to the latest stable (so let's say 1.9.x) that would be $1,250 for something that typically took 1-2 hours. The rare times it took longer was from extensions they installed that were either deprecated or not supported for the version I was upgrading to, but I would always check what they had installed first before even doing an upgrade. Doing a PHP upgrade on the server would be easy. If you have to fix their code though to make it compatible, that's an entirely different story. So you'd likely just charge a systems administrator hourly fee (with a clause that a minimum of 3 or whatever hours is required even if it took you 10 minutes to do it). So at maybe $150-250/hour with a minimum 3 hours built-in, it's not that bad for what you have to do.
Try a different editor. Atom or Sublime text has some good PHP extensions Having auto complete was a huge help when learning.
Here's a down and dirty php code that should get you most of the way there. Please note, this is not secure at all and could result in injection attacks against your website or your users. // get the user input (you'll want to sanitize this) $in_name = $_GET['name']; $in_score = $_GET['score'] // open the file of name/scores and store the contents $file_contents = file( '/path/to/file' ); foreach( $file_contents as $line ) { list( $name, $score ) = explode( '|', $line ); $output[$name] = $score; } // add the new pair to the list $output[$in_name] = $in_score; // sort the file (from highest to lowest) arsort( $output ); // print the results print "Name : Score"; foreach( $ouput as $name =&gt; $score ) { print "&lt;br&gt;$name : $score"; $store .= "$name|$score\n"; } // store the results in the file file_put_contents( '/path/to/file', $store );
Sounds familiar to a previous job. You don't work for a large affiliate network do you?
8 years old code base. Was it a Drupal 6 site? I updated a Drupal 6 site to use PHP 7.1 and holy cow it worked pretty well after a few fixes here and there. 
"It follows the Model View Controller, which makes it more useful than PHP." What? You should really consider having someone proof read what you write.
That's a textbook off topic. "Look at my code and tell me what's wrong with it" questions are against the rules. There is nothing hostile, just a wrong door. Only a question that could be useful for anyone else is on topic. Mens if you asked "how can I find what's wrong with my code" would be more appropriate. I re-closed your question with a link to an answer which explains how to make yourself aware of every error in your code.
RHEL provides PHP 5.4 (base) and 5.6 and 7.0 (RHSCL optional channel) ;)
sqlsrv is now available on both Windows and Linux env.
https://blog.remirepo.net/post/2016/09/20/Microsoft-SQL-Server-from-PHP
These extensions are also not in base RHEL (only available in EPEL). As EPEL doesn't allow SCL for now, additional extensions are available in centos-scl repository, see https://wiki.centos.org/AdditionalResources/Repositories/SCL - memcached have no stable version for 7, and rely on a library (libmemcached which seems dead) - redis... well... no stable version for 7 BTW, as soon as a stable version exists, they will very probably be available there.
ORM (Active Record) is an anti-pattern It is OK to use Active Record if your application does not have these complexities; but there is a good chance that it will grow beyond your expectation. So before choosing Active Record make sure you know the project, the scope and your stakeholders very well. * http://www.mehdi-khalili.com/orm-anti-patterns-part-1-active-record/ * http://www.yegor256.com/2016/07/26/active-record.html * http://softwareengineering.stackexchange.com/a/119354 * http://seldo.com/weblog/2011/08/11/orm_is_an_antipattern
We are currently using https://github.com/overblog/graphqlbundle for our remake of an old php4 era browser game. Its a symfony bundle and works quite well, but it is a bit configuration heavy. 
Not a bad guide, but he shouldn't squat in the Twitter namespace. Namespace names should follow Vendor\Package too.
ORM !== Active Record
No, it was completely custom (and showed).
Yes you are correct, the amount charged will vary every month. Therefore I can not assign any subscriptions
Yeah but how much expenses you have to pay from that 120k a year? I mean how much you really have after paying taxes, health insurance, rent, etc? Assuming you're having a moderate lifestyle and supporting a small family.
[removed]
My company has contracts, which also refer to a table and an entity. Different domain perhaps, but still same code base 
Yes I know. But the Active Record pattern is commonly used by object persistence tools and in object-relational mapping (ORM). Edit: Active Record is an Offensive Anti-Pattern.
I don't undestand your problem. If you want to build an ORM look at the use cases and problems that you want to cover and solve/implement those. The worst thing you can do is to get lost in the details of other frameworks. Try to understand the concepts what they do and especially why. But you should solve them your own way. Of course the first shot will likely be awful.
Some people cannot move without training wheels :P
I see the name Laravel thrown a lot here and there, is laravel an editor ? 
Unfortunately the Symfony folks really like Star Wars and thus do speak Yoda. And I suspect Symfony will be around for as long as php is so we are pretty much stuck with it. At least in the vendor directory.
Definitely has benefits. Just make sure the objects are *actually immutable*, which is difficult in PHP without some restrictions. Cf. [Avoiding Quasi-Immutable Objects in PHP](http://paul-m-jones.com/archives/6400). tl;dr: - Only use scalar and null properties. - If you use array properties, recursively check them to make sure they contain only scalars and nulls. - If you use object properties, make sure those objects are also immutable. Immutability can still be subverted with references, which can be plopped into an array and are undetectable in userland. One workaround is to loop through incoming array elements and copy them into properties, which will retain values by copy instead of reference. Oh, and you have to disable the constructor somehow after the object is created, otherwise someone might call `__construct()` on the instance and redefine all the properties on that instance.
I was thinking the other day how debuggers used to help me a lot, but in the past 5 years I've barely used them. With php's inbuilt linting (runs automatically on file save, one line config change) and usually a codesniffer too has been enough. I like to thinks it's because of better use of SOLID principles and OOP in general. Less moving parts to worry about, smaller units. I dunno, maybe the code I'm writing is just not as complex as before.
&gt;Who’s doing it? There is a lot of people using immutable objects in PHP. Whilst it cannot be rock solid immutable objects, one cannot do it innocently either. Also unlike /u/pmjones, I think quasi-immutable objects are fine depending of the context. For example if you have class which is a collection of object (i.e. wrap an array of objects and provide some convenient methods for manipulating that array), it is fine to implement the collection as quasi-immutable: it should not, IMO, do extra work to guarantee the immutability if the objects of the array are not immutable.
&gt; In PHP for example you can use SplFixedArray which actually is an immutable implementation of the PHP standard array How is SplFixedArray immutable? It contains methods that will change its state, such as public void offsetSet ( int $index , mixed $newval ) public void offsetUnset ( int $index ) public int setSize ( int $size ) If it were immutable, those methods wouldn't exist and [assigning a value to an index with an existing value](https://3v4l.org/mlZov) would not be possible.
This advice isn't accurate. Everything you say about properties only applies if these values are injected from outside (via constructors, setters, etc.), or exposed to outside callers. If an immutable object contains a mutable object, but doesn't expose that object directly, then it's entirely up to the immutable object whether their property will mutate or not, as no one else has access to it. Additionally, you've been told before that your definition of immutability, which is "immutability at depth", is not the industry's definition of immutability, as applies in mainstream OOP languages. A reference is in itself immutable. If I inject an immutable object with a mutable object, and mutate the latter, nothing changes in the former. The reference stays the same. This is also how immutability works in Java/C#. When you declare a property as "final"/"readonly", it's said that it becomes immutable. But if the reference is exposed publicly, then the object the reference points to can still be mutated.
It seems that immutable objects seem to be the php trend du jour? I feel that articles like this do a good job of explaining the how, but they miss the why. The three features listed are all good and well (although the explanation of failure atomicity could be better written to explain what failure atomicity actually is), but it does not tell me why and when I would want to use immutable objects. If I wasn't familiar with DDD and value objects and where to use them, I may end up coding myself into a corner by using immutable objects where they are not necessary...
I've rewritten the code, not the post. I started a new job this week and havent had much time to write. I'll be sure to get that up soon and I'll share a link with you here once I do. Sorry to make you wait!
&gt; Service locator.. is it really easier to ditch compared to just teaching people: "read the string, go to where the services are defined, now you know which class it is" ? I don't know if it's easier to "ditch", but I'll have a hard time being convinced you need `Locator.get("ServiceName")` when `Locator.getServiceName()` is simpler to implement, simpler to read, typesafe, and faster to execute. 
&gt; /** @var App\Mailer $mailer */ &gt; $mailer = $container-&gt;get('mailer'); Or... $mailer = $container-&gt;getMailer(); ... and now your IDE automatically knows what $mailer is. 
It will know, because you can specify a return type for your getServiceName() method. Or for most IDEs you don't even need to specify it as it can infer it from what you return in the method. But when you start involving strings, the IDE can't help you.
Yeah if you are doing that it means if you are changing the class of the service `mailer`, you should also look for its usage in service locators to update such phpdoc. In a sense this is ok: if you change your `mailer` service to be private in Symfony for example, you won't be able to retrieve your service in a service locator like that so this piece of code will break. So I don't think it's a bad habit to take. Another solution is to rely on your IDE with say the Symfony plugin in phpStorm for example... but then you become IDE dependent which some people don't lake. Alternatively, don't use service locators ;)
or just inject it ;)
&gt; $mailer = $container-&gt;get('mailer'); On the hand, this kind of service locator code should be (in my opinion) discouraged. So having to add a var statement to keep the IDE happy is a good thing. It encourages the developer to seek an alternative approach.
&gt; Correct, which is generally how immutable objects get constructed. No, that's entirely contextual. For example you may walk an array given to you, using the values, but not the array. Or you may use a builder: $auth = (new AuthBuilder()) -&gt;addUser($user, $pass) -&gt;addUser($user, $pass) -&gt;addUser($user, $pass) -&gt;build(); &gt; I give you https://docs.oracle.com/javase/tutorial/essential/concurrency/imstrat.html , to wit: "If the instance fields include references to mutable objects, don't allow those objects to be changed." Yes, and the two sub-bullet points there refer to not accepting or exposing these mutable objects outside, which is what I said in my first comment. This is different than not using mutable objects at all as properties.
Laravel has many cool features other frameworks are lacking but this list just applies actually to any php framework..I have not come across a php framework which would not have had these 9 features..
So when you change your mailer class you have to go through code and change every instance? Lots of files changed for one change in functionality. Whereas being able to change your classes with config means you can fake emails in your dev environment (or send them to log file or whatever) or swap classes with minimal fuss. Of course, should be coding to the interface rather than the concrete, so, probably, the comment typehinting should actually be for that interface (IMailer not MyMailer, so you can seamlessly switch to DevMailer.
&gt; engaging in proxy fights Long as they're not "facade" fights. ;-)
&gt; So when you change your mailer class you have to go through code and change every instance? Of course not. Don't be silly. I'm saying that dependency injection should be encouraged over using a service locator. And yes, type hint against interfaces when practical. 
In PHP, objects are always passed by reference.
it seems sg2.php.net has this problem: http://sg2.php.net/ChangeLog-5.php#5.6.30 I've just dropped an email to the contact for that mirror, in the meanwhile you can use sg3.php.net edit: should be fixed now
The odd thing with making an Exception an Interface (such as FIG do) is that technically you can make a class that implements the contract without actually being an Exception
Regarding #2, if properties of your objects are in an invalid state, then you're writing your classes wrong. The reason classes and encapsulation even exist in the first place is to enforce valid object states (see [Classes Should Enforce Invariants](http://www.artima.com/intv/goldilocks3.html) from the guy who created C++).
From PHP5 and forward objects are passed by reference by default.
I read this three times and I'm still not sure what the problem is and how you propose it's fixed.
Ah, now *that* is an interesting point, one I had not considered. Thanks for noting it!
Typically there's a root factory/container in applications that does what you say. Unless some framework helpfully suggests you scatter this information around XML and YAML files.
Aye, I realised my mistake in another comment. 
It's very unfortunate that the word "reference" has become ambiguous depending on which language we're talking about, but the way PHP uses the word, I think /u/morerokk is right. For example: $o = new stdClass; $o-&gt;x = 42; function fn_by_reference(&amp;$arg) { $arg = new stdClass; } function fn_by_not_reference($arg) { $arg = new stdClass; } fn_by_not_reference($o); print_r($o); // ([x] =&gt; 42) fn_by_reference($o); print_r($o); // () Also, http://php.net/manual/en/language.oop5.references.php &gt; One of the key-points of PHP 5 OOP that is often mentioned is that "objects are passed by references by default". **This is not completely true**. This section rectifies that general thought using some examples. &gt; **A PHP reference is an alias**, which allows two different variables to write to the same value. As of PHP 5, an object variable doesn't contain the object itself as value anymore. It only contains an object identifier which allows object accessors to find the actual object. **When an object is sent by argument, returned or assigned to another variable, the different variables are not aliases**: they hold a copy of the identifier, which points to the same object. In other words, PHP objects are passed by ***pointer***, not by reference. EDIT: But on re-reading the thread, it actually sounds like morerokk was implying that objects in PHP were copied when passed or assigned, which isn't right either, so.... yeah....
You should give everything a chance. Odds are once you learn more you wouldn't want to touch it with a 20 foot pole, unless you must. But you might also learn a lot about the structure and capabilities of a CMS. So, feel free to be curious.
I didn't know that /r/php/ is now officially the new /r/phphelp/, but if you like this sort of content here, fine.
He's showing us junior homework level components that nobody would use, and the entire thread is pointing out the mistakes he did and helping him fix them. This has turned into precisely /r/phphelp/. Once again, if you like this sort of content, I don't own /r/php/ or anything, so have at it. But let's not fool ourselves.
&gt;[**Shakira - Try Everything (Official Video) [3:23]**](http://youtu.be/c6rP-YP4c5I) &gt; [*^shakiraVEVO*](https://www.youtube.com/channel/UCGnjeahCJW1AF34HBmQTJ-Q) ^in ^Music &gt;*^235,235,566 ^views ^since ^Mar ^2016* [^bot ^info](/r/youtubefactsbot/wiki/index)
I personally don't like Drupal but sometimes I have to work code on that. Test everything, even if you don't like it you can find any use of it in the future.
Drupal 8's pretty good. All runs of symfony2. Still has legacy issues as would any web project that's been around for a decade. But it's a solid CMS, with a huge demand for work and good salaries. Why wouldn't you give it a chance?
To clarify, Drupal 8 doesn't use the Symfony Framework, it just utilises Symfony components for some of the core features such as HTTP request handling, and dependency injection/service providing.
What's wrong with grav? Just set up a site to try it out this week. 
They have a second key, yes. Key exchange and creation is done within the app and via their servers.
I am working on a interaction between Laravel and GraphQL. It'll be released soon-ish, but if you're interested I may be able to give early access to you in exchange for feedback :)
&gt; I'm still not sure what the problem is You can create PHP objects which resemble arrays in most respects *except* for their lazy copy on write semantics. Consider this method: function doubleItem($items, $index){ $items[$index] = $items[$index] * 2; } And then: $x = new MyLinearCollectionClass(); $x[] = 5; doubleItems($x,0); assert($x[0] === 10); Works fine. Now try: $x = array(); $x[] = 5; doubleItems($x,0); assert($x[0] === 10); Whoops, the change didn't come back out of `doubleItem()`. Of course, you can do this: function doubleItem(&amp;$items, $index){ $items[$index] = $items[$index] * 2; } But then people start saying: "Hey, I'm always passing objects into this method, that ampersand is superfluous."
What do you mean a "second" key?? Do you know how the signal protocol works?? Or are you saying that the private keys are send to their servers? 
I've never seen a visual website builder that isn't buggy as hell.
Whoops, I think I edited-after-reply. My main frustration is that the line between the kinds of payloads (and how they move around) is blurred, and compounds with PHP's relatively weak type-control. Java doesn't have that problem, because even when you *ignore the type-checking* aspect, nobody blurs object/array access syntax like this: MyCollection x = new MyCollection(); x[0] = 5;
[Nope](http://pokecharms.com/data/attachment-files/2014/05/81505_grumpy_cat__nope_by_imwithstoopid13-d624kvl.jpg) 
Indeed if you have mixed structures it becomes strange. This is one more reason why immutable objects are handy: they behave identically whether passed by value or by reference. This means if you have array trees, where some of the values are others arrays, some are scalars, some nulls, and some *immutable value objects*, there won't be inconsistencies.
There's a certain level of ambiguity that comes from mixing value objects and generators together. That's why I prefer to separate out the job to factories or builders whenever feasible. That way you'd get a much more obvious: $request = $requestBuilder -&gt;withRequest($request) -&gt;withMethod('OPTIONS') -&gt;withRequestTarget('*') -&gt;withUri(new Uri('https://example.org/')) -&gt;build();
&gt; I'd expect the abstraction to leak a little and keep arrays by reference in all C-inspired languages. In C++, on the other hand, std::vector and std::array behave as values, not pointers or references.
Wysiwyg is the bane of any website storing text data. Leverage it for website design expecting anything other than pandemonium and source code that looks like a child wrote it is just naive.
That's true, but it's also a bit like saying if nobody ever left their house there'd be no car-crashes. My problem isn't with the choice of (im)mutable data structure, my problem is with the language.
give laravel a chance.
I tried some CMS in my life, but every WYSIWYG editor would-be to know HTML better than my mom always failed to generate code without empty &lt;p&gt;&lt;/p&gt; and &lt;span&gt;&lt;/span&gt; tags and other garbage. Also, I shared many wonderful moments with CMS internal caching. I've stopped to use CMS some years ago and created a pretty simple site engine that I use for small sites with nearly static content. (if someone want to look at it: [pinpie](https://github.com/pinpie/pinpie)). After that my life became much more easer, because now I use IDE with good and smart syntax highlighting and version control. During that experiment I noticed, that these people who maintain and edit site contents, but have no IT knowledge, they are OK to learn 5-10 HTML tags (e.g. h1-h3, &lt;a&gt;, table tags, etc) and use them wherever they want, instead to learn 2-5 different CMS interfaces with all that buttons and menus. 
How do you feel about something like markdown instead? It's easy to not generate useless spans and elements, you don't need excess amounts of xss checking and element whitelisting, but it still allows a user to have a friendly designer with enough capabilities for average Joe Blogger. 
I am a native PHP dev who wandered into a Drupal job recently. The learning curve to use hooks and theme suggestions and build custom modules is reasonably steep, but once you've traversed it you find that you get a lot of stuff for free because of all the contributed modules. It's not bad for websites... I wouldn't use it for a system of any great complexity though.
Curl is not "cached" whatever it means. To avoid breaking ratelimits you just have to avoid repetitive queries - that's all.
Due to the fact that you're having trouble understanding what caching is I might take your opinion with a grain of salt.
Dunno if you can make it better than Martin Fowler, but for the moment the value of your contribution is next to none. Ask yourself a question, why would you write that series and why it would be better than existing canonical resources. If the answer is "to promote my blog using common buzzwords", then just remember that on Reddit it won't do.
Your fantasies are amusing :)
In a 7.0+ targeted context they can extend Throwable now, of course, which effectively forces the implementor to extend Exception or Error
Well, that's not a very helpful comment. How about you give a reason, just one, why not? 
Yeah, I had that idea to use markdown. In my engine (I call it engine, because it's not a CMS or a framework) I made possible to use any parser and tested it with markdown parser. I wrote a documentation for my engine and it's first version used markdown parser with caching. But for me HTML is enough simple, so currently I'm using pure HTML. I love markdown, it's quite simple and convenient. It fits some blog or post site. But I can't find it enough flexible to cover all possible cases I've met during administrating sites content. On the other hand, I don't want to limit people with that choice. My main goal was to make it dead simple, and I did. There were some ideas and functions that I refused to implement to keep it 100% predictable. So, yes, if someone want to use my engine - it is up to you to use pure HTML, markdown, twig or even bbcode.
The popularity of immutable objects is on the rise as if they are a kind of new and revolutionizing concept. Really? I mean it's like praising integers. Wow look what an integer can do! 5 ways to correctly use an integer here! Top Ten benefits of integers versus strings there! If I want to use an integer (immutable object) I will, I don't need 100 articles about them to explain this very basic concept. But maybe that's just me and this really is s new concept: Don't write functionality (e. g. setters) of you don't need them and especially if you don't want them. D'uh.
The question provide no information to make a choice and decide should one use some tool or not. Up to me sarcastic "nope" with a cat fits well.
I start my objects as immutable and then think about what I need for them. Is this a read only class? No setters! Do I want to perform an action with it that requires the setting of multiple arguments (e. g. customer ID and order ID) then I'll add a function for this action with the necessary parameters. Objects as part of your business logic (that's what DDD is I think).
I don't think I understand correctly, but I would define my own interface, find a library that does what you want and create an adapter, implementing that interface and calling that library. Akin to hexagonal architecture / ports and adapters, you invert your dependencies and depend on your own interfaces in your code instead of on implementations, making it easier to swap or mock implementations. It gives you control. Meanwhile, some standardization is happening in the form of PSRs.
Very true, I've never used group by in DQL, I think it's supported but I'm not sure how it'd be mapped out at that point 
I've just said: IF your application does have more complexity, then Active Record becomes an anti-pattern. Please reread my first post. $activeRecord = 'GOOD'; // default if($complexity &gt;= HIGH) { $activeRecord = 'BAD'; }
You millennials should definitely stay away from this sub
The link is broken, shouldn't it be https://github.com/brendt/stitcher I am on mobile, so I can't really go through this but a couple issues - code style convention. Braces should be on the next line not the same line. - Another thing is the namespacing, shouldn't the first letter be capitalized. `namespace brendt\stitcher\adapter;` Should be `namespace Brendt\Stitcher\Adapter;`
Those are hard problems to solve. PHP has made gigantic improvements over the last couple of years. The team is doing a good job of keeping new features consistent which isn't always easy considering PHP has been developed over so many years. Also, you can always fuel discussion in the internal mailing list or create RFCs of features you feel would enhance the language.
Hi! The link was broken indeed :( Thanks for pointing that out! Also, thanks for the feedback! I will refactor naming and braces.
If you wanted to check code standard you can just use code sniffer and tell it which standard to use. I usually go PSR-2 but symfony has its own (it's for contributions but perfectly fine for development too, based on psr-2) I have my editor, vim, sniff and lint my code after every PHP file save. 
Nice work!
You're blaming the language for having a feature that every modern language has or is trying to have. You'll have to adapt. Passing everything by reference simply isn't the best idea for everything.
Using a 'group by' like colshrapnel suggests is certainly better than your current situation. For future use you may also want to consider storing the totals in a separate table and updating them every time you add/update/delete a row in your first table. Or if they don't need to be 100% accurate at all times, cache the results of the group query using memcached etc. 
Thank you. Code sniffer however cannot find problems in reasoning, which I think code reviews are very useful for.
I think what we have here is a failure to communicate. &gt; You're blaming the language for having a feature that every modern language has or is trying to have. No, syntax which blurs the lines between pass-by-reference datatypes and pass-by-value datatypes is **not** a feature. It is a conduit for subtle runtime bugs. &gt; You'll have to adapt. Passing everything by reference simply isn't the best idea for everything. No, I am **not** asking for pass-by-reference arrays. FFS, I already gave a *code sample* showing how easy it is to do it! My complaint is that allowing `Object` instances to use `array` syntax was a mistake.
You could just give a link at wikipedia: https://en.wikipedia.org/wiki/Software_design_pattern Instead of just enumerating patterns, it will be better to show best use cases for them. Developers shouldn't know patterns, they should know how to structure/encapsulate code, how to reduce coupling and why it's matters.
Read the commentary above that setting: /* |-------------------------------------------------------------------------- | Composer auto-loading |-------------------------------------------------------------------------- | | Enabling this setting will tell CodeIgniter to look for a Composer | package auto-loader script in application/vendor/autoload.php. | | $config['composer_autoload'] = TRUE; | | Or if you have your vendor/ directory located somewhere else, you | can opt to set a specific path as well: | | $config['composer_autoload'] = '/path/to/vendor/autoload.php'; | | For more information about Composer, please visit http://getcomposer.org/ | | Note: This will NOT disable or override the CodeIgniter-specific | autoloading (application/config/autoload.php) */ And I have it set like this: $config['composer_autoload'] = FCPATH.'../vendor/autoload.php'; 
&gt; As a matter of personal preference I don't like the withProperty approach that's often utilized with Immutable Objects. Thats probably something where smart people outsmarted themselves. The syntax is error prone itself if you are not familar with it. It is just bad trying to enforce concepts in such a weird way. I have the feeling that framework coders think that everyone wants to break their framework in any possible way.
Are you saying this because of my grammar mistake ? i'm sorry i'm not a native english person. :S
Curl doesn't cache requests for you. What you are confused about is http caching. This simply communicates caching instructions via headers, but in the common case they are ment to be interpreted by YOU, but they are completely optional and curl will just pass them, not act according to it. If you want more help try /r/phphelp
And anyway, learn some goddam formating.
Cool, I used curl in 2010 or so. Now I'm using wrappers like guzzle I think. 
Laracasts.com has a beginners section that is good, as does codecourse.com
PHP is a very popular language but you shouldn't worry about a particular language, library, or framework being replaced because once you learn one it's far easier to learn subsequent ones. PHP is fine today but if it suddenly evaporates in 10 years you should be able to work with whatever is popular then.
Much as I love Laravel and it is a great framework (and this sub has an irrational hate for it), it's not actually the correct choice for the OP's needs. 
I just want to learn more from this. I don't consider myself cool, just because i write these articles. I do that, because I want to get other point of views for people smarter than myself. I want to be the stupidest guy in the room. So that i can learn more about this topic. But for learning i need constructive comments. You for example, you are part of those kind of people that only insult others without any constructive comment. Please do a favor to humanity, start writing about stuff also, or post constructive comments. Thanks
Thanks /u/pmjones I do these articles, also to get opinions from people smarter than me. Really appreciated
Why are you using both Smarty and Twig? Surely one should be enough.
Drupal is an extremely powerful, and therefore extremely complex tool. What you want to do is *not* complex. So I'd recommend not using a complex tool to accomplish it. If you want to use it as an opportunity to learn Drupal, go for it, but it's like hammering in a nail with a Buick.
Great , thanks for sharing
i see that you didn't use $app-&gt;run($app-&gt;request); in your code , Or $app-&gt;run( $app-&gt;make('request') ); because the default installation throws a NotFound exception without this lines of code , and this issue is mentioned on stackoverflow : http://stackoverflow.com/questions/29728973/notfoundhttpexception-with-lumen
I love it, too bad you can't have a size bigger than 500 (but I understand it would take too much time and ressources) I'm not a fan of how the gas planets look like with a size of 500. It's like the pattern is too small or something, it repeats too much. When the size is smaller it looks good though. It could be nice to be able to manually submit a seed to generate a planet
&gt; Whether its PHP, Java, C#, Python, Go, Ruby, Node, what's the difference? All of those just spit out HTML, CSS and JavaScript. this guy fucks. 
oof. The miscommunication and misunderstandings in this post are painful to read. Clearly the subject - and the specifics pertaining to curl - really can't be 'splained away in a few sentences. Hope you're on your way to a better understanding of HTTP cache - and a better understanding of what others try to tell you. 
Uh thanks? Of course I know that's a very close minded statement of me, but remember: I was talking from the point of view of websites and web applications.
Thanks! A lot of great things I'll remember and use in this project!
http://blog.capterra.com/the-top-8-free-and-open-source-time-clock-software-systems/
i'm not sure, i'm using Ubuntu 16.04.1 LTS (Xenial Xerus) on a vagrant machine with PHP7 and i use this hack in order to run the App, i'm not sure why this exception is thrown exactly but they didn't fix it. I included the link in case someone faces this problem. it is the only frustrating thing about lumen that i faced so far :).
Good luck with that attitude.
&gt;[**Silicon Valley - This Guy Fucks [1:20]**](http://youtu.be/_uMEE7eaaUA) &gt;&gt;From HBO's Silicon Valley, Season 2 Episode 3. No copyright infringement intended. Airs on Sky Atlantic in the UK and Ireland. &gt; [*^Brian ^Sexton*](https://www.youtube.com/channel/UCXnoQwMiwzkYOKbbtuIHUVA) ^in ^People ^&amp; ^Blogs &gt;*^527,309 ^views ^since ^May ^2015* [^bot ^info](/r/youtubefactsbot/wiki/index)
&gt; Typically one module needs to expose one service, I was tempted to stop reading right here but I did finish your post. It is clear that we have significantly different approaches to large applications.
Oh well.. Yeah I guess I'm a bit like Jared :)
This series will never be completed.
&gt; I was tempted to stop reading right here but I did finish your post. Is this supposed to make me feel bad? Because it only demonstrates a low tolerance to learning and ability to have a professional discussion. I'm trying to justify my PoV, rather than throwing up my hands in the air with "I give up right here, what you're doing is different". If you have an example of a module exposing several services, and what they'd be like, I could tell you how I'd apply what I said to your scenario, **or** I'd admit you have a point. I'm open minded when it comes to architecture, and I judge on merit. All things equal, the merit of having a tight, fast, type safe container is higher than the merit of a container which is a runtime string-based hashmap soup, *unless* there is a point to it all. Which so far we've been unable to identify. 
This is an "issue" related to the router that lumen uses (lumen uses FastRoute). As far as i know, it happens on windows only (Linux and OSX seem to work fine). I have opened an issue, but it seems like it will not be fixed. https://github.com/nikic/FastRoute/issues/110 
One thing you should be aware of that just because you use Doctrine ORM does not rule out dropping down to SQL for certain high performance simple queries. Doctrine ORM is built on top of the Doctrine Database Abstraction Layer (DBAL) which in turn is just a very thin wrapper for PDO. // Get the low level database connection object $conn = $entityManager-&gt;getConnection(); // Execute what SQL you want. I know it is tempting to want to stick with just SQL or DQL and not mix them but if performance really is a factor then it might be worth it. On the other hand, databases are pretty good at caching simple requests. I'd be surprised if dropping down to SQL would actually speed Count type queries up.
"Millennials" refers to an age group of (currently) 13 to 35 year olds. I think you're casting your net a bit too widely :P
Lynda.com wouldn't be my first choice, I would go with Laracasts if your brand new to development. They have everything from beginner to advanced courses. Start with this, https://laracasts.com/series/php-for-beginners. I see people in this thread mentioning Laravel, don't even look into that until you have at least a decent understanding of OOP.
Ankur, I think you were clearly told last time your content is unsuitable for /r/php/.
Izverg I was posting in /r/phplearn and just got it landed here. However, does not see anyone strong disagreeing directly or may I know if there is any spam in the post/content which I have posted. If there is any kind of quality or standard is poor, please do let me know, I will definetly try to up my standard. Currenty I am writting on basics becuse I have seen most of the beginners strugling to get the basic information.
Again, as you were told last time, this subreddit is for PHP news and intermediate to advanced topics, not for 5 year olds, whose first programming language is PHP. We have no beginners here, who are struggling to figure out `foreach`. Don't play dumb.
http://php.net/manual/en/control-structures.foreach.php (Notice the Edit button)
Apologies for making you feel bad. As explained in a previous post my view is to avoid using the service locator pattern whenever possible. Which makes get('something') vs getSomething() irrelevant. There are times when I do need access to the container. For example, I map routes to their actions via an action service id key. Adding a getSomeAction() method makes little sense to a lazy son of a bitch such as myself. And since I code actions in different areas of my code (and in some cases different modules) then I am perfectly content using runtime string-based hashmap soup. I do consider myself being willing to learn but there is a caveat. I'm simply not smart enough to translate certain concepts into concrete code. Hence I use tools such as Symfony for which numerous examples are available online. I would ask you to show your approach but I understand that your work is all top secret proprietary stuff and cannot be shared. 
My controllers aren't in the container, hence the container doesn't need methods for every controller. So the problem doesn't exist in the first place. Nothing I do is "top secret", but I can't link you to a complete manual + community, like Symfony has. So if you're not specific in your questions, I can't be specific in my answers. Keep doing what Symfony tells you, I guess. Nothing against that.
If I am not mistaken, what you described is exactly how objects in Java work too. moreokk was saying they work differently which is incorrect. 
&gt; Instead of just enumerating patterns, it will be better to show best use cases for them. Best use case for patterns: driving people to your blog.
This seems overly complicated for something PHP does very easily natively.
Or: `choco install php`
Ive had it before, but I have not used Lumen in a few months, so you may have resolved it. 
If you are using Win10, I much prefer `sudo apt-get install php` https://msdn.microsoft.com/commandline/wsl/about https://conemu.github.io/en/BashOnWindows.html
Great article. You should also note that sometimes gettext compiled format (.mo) changes, so your .mo compiled on your latest Ubuntu release might fail to load on your redhat/debian stable release. Plus if gettext is not available you can overwrite gettext functions with the "use" statement at the top of your PHP files, eg. "use \MyApp\Gettext\_;". This works with PHP 5.6+. In PHP 7+ you can even use shorhand. Eg: "use function \Translate\{_, gettext, ngettext, dgettext, dngettext, bindtextdomain, textdomain, setlocale};"
`$app-&gt;get('dev', function() { return response()-&gt;json(Dev::all()); });` What if you have over 50,000 database records. Won't that be a bit too much data?
I used it in my previous position. I liked it.
I use NetBeans primarily but i have to say - I'm starting to really like phpstorm.
I'm about to try it too!!!
+1 for sublime. Lightweight and straight to the point
I thought you were being sarcastic for a second. Forgot about Windows bash.
I don't really get the question. You can use net beans on osx if you want. 
More people use Doctrine than CI, so I would go with Doctrine. Learning it is a skill that will be useful in the future.
PhpStorm - Best tool 
I mean, technically "retarded" doesn't describe it at all.
Never used sublime, but based on what I've seen from it, it's inferior to PhpStorm by quite a bit
of course you should use pagination. https://laravel.com/docs/5.3/pagination
no. php doesn't do that very easily , try to do a router that handle every possible request in php natively.or to make sure that every SQL request is properly escaped and checked or try to do pagination or seeding the database , migrations etc .., that's a lot of headache that a simple framework can abstract for us and provide us with a simple api to work with . do see that we are only using a line of code in our code to get a set of records from the database in a json format. $app-&gt;get('dev', function() { return response()-&gt;json(Dev::all()); });
Fixing this line of code when it fails is easier then fixing pages of spaghetti code 
I belive they mean it's not good because unlike node it's less intuitive when dealing with individual connections, since most of the time your php would run on apache which handles the sockets in background. But I disagree, php is quite a language and it has its perks just like node.You can use websockets just like node and pretty much use the same approach node uses when dealing with connection to, say, serve a client some data through your api. Check Ratchet, it's quite fun imo http://socketo.me
Wow. That's great. I didn't know about http://socketo.me 
[removed]
Does any one have a good tutorial on using Deployer ? I have 3 repositories that need to be uploaded to 3 different servers on deploy, and I need to be able to deploy and rollback all 3 atomicly. Also is there a web front end or hooks that can cause deployer to run on push ?
Just to throw another option out there. Any reason you're using CodeIgniter? It's a pretty dated framework and there are others out there now that are considered much better and just as easy to learn.
For me the best one is PHPSTORM, but i'm also a Sublime fan... :)
You could defer from making any decisions by introducing the [repository pattern](http://shawnmc.cool/the-repository-pattern) . Simply put, you hide all your interaction behind a layer, which will make it easy for you to change whatever is behind that layer. So for instance you could start out with CI AR (although I would generally not recommend using it at all) and if you feel you need something else, you just change the implementation.
Maybe this can help you ? https://lonelypullrequests.com/
Drupal is horrible. Don't do it. 
Most of this article can be replaces with 'use Object Calisthenics' http://williamdurand.fr/2013/06/03/object-calisthenics/ Obviously since software development is still a somewhat emerging discipline, it's debatable what can be defined as 'good' code.
Here is a tutorial about [deploying Laravel](https://deployer.org/blog/how-to-deploy-laravel). Maybe it will help you. Also for deploy on push you can use any CI provider, i hope soon this functionality will be available on deployer.org 
That makes a lot more sense. Thanks for clearing that up!
&gt; executing count on a MySQL table with over 6.9 million records came back with a number within 2 seconds, which I thought was ridiculously quick 2 seconds is very long time for a single query if it's something you want to do often on page load.
Please note that the multiplexing only works with the native SSH client, so you have to set type to native if you want to enable multiplexing. I am seeing a boost from 1 minute 13 seconds down to 39 seconds. set('ssh_type', 'native'); set('ssh_multiplexing', true);
they suggest to use invironment variables. An example can be found in https://laravel.com/docs/5.3/configuration
I think by default eloquent limits the all() method to the first 1000 records.
Well, this question is quite irrelevant. You store in the same place as any other data - first defense line: backup - second defense line: your head/system administrator/configuration habits
Yes, you are right. You need to set ssh_type to `native`. Speedup depends on different deploy scenarios, we was benchmarking deployment of laravel app with common Deployer recipe.
&gt; backup where? Everyone just have text files stored on dropbox? &gt; your head haha &gt; system administrator/configuration habits what does the sys admin do? what habits? this is what im trying to ask
Sorry just noticed your moniker. Have a nice day
maybe you should discuss/join https://github.com/bernardphp/bernard? It seems to have the same goals and have support for a decent number of queue systems already as well.
It's like Capistrano but on PHP with some PHP related features. 
I use Lumen (and Laravel) on Homestead on a Windows 10 box and do NOT have this issue. So it must be more than *just* a Windows issue...
Interesting, that's news to me! More info:https://chocolatey.org/
Change `die()` to `trigger_error()` and then it could be recommended to all those helpless folks [who have trouble connecting to database on hostinger](http://www.google.com/search?q=mysql+hostinger+site:stackoverflow.com). 
 I was once a heavy XAMPP user. It tended to lag behind (current WAMP is 7.0.10 I installed 7.1.1), comes with a lot of stuff that I didn't really need, and upgrading or tweaking the configuration was not as straightforward as replacing a single zip file IMHO.
Ok, but even if it will be later, still D7 is not developed that much anymore.
Hopefully this goes without saying, if you're developing on windows, for windows - this is fine. If you're developing on windows for a linux/unix based host, don't do this. Use a vagrant box and match the environment you're working for. It makes absolutely zero difference to your development flow, but eliminates the potential OS based issues.
Yeah that should be easy to complete in a few hours. Whats your budget? 
Means cool kids don't use hostinger.
You have a greenfield project and you're decision is to use CI? Why would you use something so out of touch with modern PHP development? You're coding your self into a legacy bottomless pit. Maybe reconsider using something that supports PSR's, composer and heck even bloody namespacing.
PhpStorm - you can try it for free for a couple of weeks before committing to buy. It's not particularly expensive if you buy the personal version ... I found phpstorm far more responsive than netbeans. It's far cheaper moving to phpstorm than getting a new PC anyway.
Perhaps you didnt notice which thread you are in? &gt; This is a safe, non-judging environment for all your questions no matter how silly you think they are. All I wanted was a "concrete" best practice. Not some vague handwavy response. If you don't have an answer, ie you just populate your .env and forget about it, you don't need to respond. 
Well dunno, as a lambda user I would prefer to see one robust, popular and well maintained package doing the job well than several ones all missing something.
I really like how it works, but without seeing the code its a little bit hard to give competent feedbacks :/ do you have a github where we can see it?
Heres one: http://lmgtfy.com/?q=php+help+forum
"Writing good code" ... And there there is shit like the WordPress coding standard. [Want a good laugh? Read it ...](https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/) Hint: Don't code like that!
Thank you... -_- Can the a.holes keep quiet?
I think you may be trying to compare apples and orangutans here. The Doctrine Object Relational Mapper (ORM) layer has the entity mapping stuff which you rather explicitly stated you don't want to use. The ORM is what allows you to persist and retrieve entities. It is an alternative approach to Active Record. But it seems you have already rejected it. The Doctrine ORM uses the Doctrine Database Abstraction Layer (DBAL) to connect to a database and perform assorted operations. The DBAL is actually pretty cool with lots of good features. But the DBAL is not an Active Record implementation nor does it really have any significant features for managing relations and what not. The DBAL is not a replacement for Active Record. There are other active record implementations that you might want to look at such as Eloquent. Or I suppose you could write your own using DBAL. But you really need to decide just what it is that you are asking for. On a slightly different topic, decide in advance if you really need to eventually support another database and then test you app against all proposed databases as you develop. It is extremely difficult to switch a completed non-trivial app to another database. Too many subtle differences.
No, I mean hooks the other way. So that I can start a deployment on a git push, or from a website.
I wish it came true. 
The "website" was built in 2010, too. I'm trying to figure out if I should put the code on GitHub or not even bother doing that. Since I would have to check the code for DB passwords and other things, I'm trying to figure out if it's worth it before wasting my time doing that.
&gt; Nope it doesn't What doesn't? It "doesn't" worth it..?
Make it happen :P
Thanks. The learning experience would be for me mostly, though. I don't think I can't teach that much to many people :-) Do you think having a simpler API over RedBean would be enough for people to get excited about the project?
You can easily do this using PHP, just have a file that executes Deployer?
I think your suggestion can only be classified as over-engineering and I would advice OP to stay far away from those solutions. If OP adds an index to his status column and a view using the GROUP BY clause, as suggested elsewhere in this thread, it will be infinitely faster, always return the 100% correct result, code free, maintenance free and all he has to do in PHP or any other language is: SELECT * FROM StatusView ...or whatever equivalent Doctrine provides. A good database product will not even touch the tables if there's an index covering the status column. There are some people complaining about slow COUNT() perfomance using MySQL/MariaDB with InnoDB tables on StackOverflow but these people are complaining about COUNT() taking a few seconds on their tables with 100 million+ rows. I'm not a big fan of those two database products but I fail to believe their performance is nothing but adequate for the foreseeable future with the amount of data OP is working on. An externally updated totals table is a never ending story of technical debt. There are a million ways which totals tables can end up out of sync and every DML access now needs to be followed DML to update the Totals table and both statements needs to be wrapped in a transaction unless OP wants concurrency problems. So now OP, who doesn't know about the GROUP BY clause, has to start programming database triggers to maintain a product without concurrency problems. Without the Totals table being updated by triggers, a small bash script to import records into the table with the status column or anyone updating the table manually will put the Totals table out of sync. The same goes for implementing a memcached solution when OP doesn't even know how to use SQLs GROUP BY clause. it's complete madness and adds an completely unreasonable amount of technical debt to solve a very very simple problem. 
[NO GOD! NO GOD, PLEASE NO, NO, NO, NOOOOO](http://giphy.com/gifs/the-office-no-steve-carell-12XMGIWtrHBl5e)
That's pretty great. Good progress.
My development flow is self contained Docker images deployed through Kubernetes. (trollface) But yes, good advice. 
I hope it will land in Visual Studio Code in some form, some day. Makes sense, since their main goal is error tolerance so that incomplete and not always valid code still can be parsed for the purpose of IDE's "inteligence"/autocompletion etc
I have trouble with PHP on Bash on Windows 10 though. If I target a directory in my user folder `/mnt/c/Users/user/project` then I get a permissions error even when changing to the correct permissions. However, when I upload it to `/var/www/project` and ensure all permissions are correct, it gets served correctly, but when I try to edit any files within that directory using PHPStorm, it simply won't let me. :/
CodeCourse on YouTube is what got me started years ago. Honestly, don't worry about good, just do everything you have time for. PHP isn't that complicated of a language, and if you don't know how to program, learning syntax shouldn't be your goal, if you do know how to program, you don't really need to study PHP syntax over using the documentation. Also, the PHP documentation is as good as docs get.
&gt; In MySQLi, the letter i stands for improved and it means an updated version of MySQL which is most widely used now. Laughing so hard. Please don't teach anyone in 2017 to use mysqli for database operations. And please don't make tutorials if you're still a beginner.
I switched from NetBeans to IntelliJ, PHPStorm's granddaddy, though I've used most of JetBrains' editors. I highly recommend them all :) Except DataGrip, I find that one weird still...
KomodoEdit is free and works well on Linux, Mac, and Windows http://www.activestate.com/komodo-edit. I haven't tried Komodo IDE yet but it looks promising. 
Google Microsoft Web Platform Installer, add PHP and any other stacks you want installed, go get coffee.
Report report report. Only requires 3 reports to be auto-removed into a list for review!
I do agree, so I'm thinking of utilizing that doctrine second level caching mechanism. I've never used it before but it sounded promising Last resort I'll use a real cache 
What URL are you running your app from? I noticed that Lumen doesn't work from subdirectories (`app.com/somewhere`) and [opened an issue](https://github.com/laravel/lumen-framework/issues/533) for it. I wrote a fix but it's not as robust as the ~400 lines of code Symfony uses to get the path when you pass the request in. 
And a Linux port please
 &gt; I can tell you that I don't know if the AMQP extension, .. or the ZMQ extension, .. or that one pure php implementation .. I bet they aren't going to interop into React's Async library. Or God forbid I wanted to use hhvm/hack for the async? https://github.com/jakubkulhan/bunny &gt; Bunny supports both synchronous and asynchronous usage utilizing ReactPHP. I've used that before, for writing daemons that process queue messages and spawn some tasks or write to a database, and it's fairly stable. Seems that after a certain amount of time, the queue will automatically disconnect and it throws an exception, this was a problem with ext-amqp as well, so I ended up using systemd to manage automatically respawning the processor whenever it would shut down. With that setup, it was pretty stable. But yeah as far as things having different interfaces to accomplish the same task. Well, it sucks but that's life in most programming languages. Until the language itself implements a native interface, or some group like the php-fig creates a standard that gains wide adoption, there's nothing you can do but either write a bunch of adapters for each different interface, and have your own generic version for internal use at your org. Then this creates an Nth standard, on top of the others, so often times it's just best to deal with 5 different ways of doing the same thing inline in your code, than to try and abstract it away. 
Oh, and this 100% http://www.phptherightway.com/
I thought it was easier than setting up Capistrano too. 
i'm not assuming anything, frameworks them self are written using native php code and they are well written with 0 spaghetti code . i'm just saying : frameworks are here to help us and force writing good code , divide our application to different modules and flexible parts , using patterns etc .. ;)
It's just public education. Seat belts being many decades old doesn't mean there shouldn't be "buckle up" campaigns educating people about their advantages.
Why not use mysql workbench (community edition is free)
Some frameworks actually allow you to sprinkle app-specific dependencies across unrelated classes in some type of bizarre global scope. Is this good coding practice in your mind? What you're saying is entirely subjective and this type of blind framework fanboyism is garbage.
Thanks - I've given it a little more polish but it's good to go now - 1.0.0 released :)
maybe , but i'm speaking about popular frameworks that respect coding principals and follow the guidelines not poor written libraries . 
&gt; Doctrine is a more powerful and more widely used. And also heavier on resources and slower, too much overhead imho, specially considering a super simple CRUD app. Pros and cons need to be considered, definitely. 
&gt; Why would you use something so out of touch with modern PHP development? Because maybe for his project size, timelines and resources, it just works? Also, CI does support composer, I have a big project running and we're using composer to extend codeigniter's functionality in a 'modern way'.
Please note that OP is talking about using Doctrine's DBAL, which is almost identical in performance to PDO (see, eg, [here](https://github.com/jbroadway/php-dbal-bench)). &gt; Pros and cons need to be considered Yes, but if you care about performance you 1) should refer to actual numbers, preferably generated by profiling your code and *NOT* a pointless micro benchmark and 2) need to consider whether the impact is meaningful. &gt; specially considering a super simple CRUD app That's probably one of the places where a bit of overhead from an ORM—if you're even planning on using one, which again, OP is not—would probably matter *least*.
The rule that is being discussed here is "don't store sensitive data in your main git repo". It's a good rule. You're asking "what should I do instead", and the answer is *literally anything except storing it in your main git repo*. There are no concrete best practices because there are literally a thousand options depending on your project, your team, and your preferences. Yes, you can use dropbox. Or a google doc. Or a password manager. Or a separate git repo. Or write them on paper and put them in a safe. Or put them on a USB key and put them in a safe. Or the AWS Key Management Service. Or Hashicorp's Vault. Or any of hundreds of other options, or more likely, a combination of several. And all of them have at least the potential to be a best practice for your particular use case.
Oh cool, I guess you are right. Is it easy to connect to a remote DB with PHP Workbench? Heres a screenshot I have of for the project I am having a developer make. Its a modifcation of PHPMyDataGrid. http://imgur.com/a/jfdHB I dont want to have to rely on raw SQL statments and would like AJAX searches and modifcation so inline edits reflect other columns live. Interactive buttons as well which change boolean columns to Yes from No. Button to copy selected rows. 
&gt; Is it easy to connect to a remote DB with PHP Workbench? Yep. Ideally your db server doesnt allow remote connections so mysql workbench can setup its own tunnel over ssh. If your mysql server is allowing remote connections you can use it to connect directly. Id also say you should re evaluate that server's settings.
Seems like you could just connect on port 22 to each of the servers you're monitoring. Don't try to login or anything - just see if the port is open and if so assume that SSH is running. If you wanted to be a /little/ more thorough you could look for the server identifier. eg. $fsock = fsockopen('website.com', 22); echo fgets($fsock, 255); If the server returns something like 'SSH-2.0-whatever' then you're golden.
As a preson who worked with both Intelij platform (mostly PhpStorm - for php, ofc) and Visual Studio (For C# and C++) I wouldn't say that VS is so great. Well, it is for certain types of projects, has really great debugging a lot of great visual tools, but working with code is in my opinion worse than Intelij - and basing on ReSharpers popularity - I am not the only one who thinks so. 
Your post is totally bullshit, I can connect to ssh, I own more than 30 servers in different countries, I just wanted a library to monitor all of them. Are you serious?!
Everything about the server, I want a library that can help me see everything of my servers using it's functions like top/apache status/tcp/udp dump and other related stuff, general monitoring.
https://github.com/Munroenet/ServerStatus This one is fucking gold, love ya!
I might suggest Vue.JS, from what I've heard it's very easy to start with compared to other javascript frameworks. More like jQuery than learning a data model and view layer rendering and stuffs.
I'm an idiot. The linked document has update step at the bottom. ``` dep self-update ```
Would like to share this project I'm working on 'll appreciate some feedback https://github.com/leocavalcante/siler
Symfony and Angular are both known for being very complicated, high-overhead, "enterprisey" packages. For a lot of projects that's great (especially big, complicated, enterpisey projects with an entire team of devs working on it). For you, probably not so good. CI3 is not that bad a choice, although I suspect almost any micro-framework (not Symfony!) would be better. On the frontend, you might want to look at Vue as others have recommended. Or you *can* just hack some simple behaviour in with jQuery; as a solo dev you need to look at making your life easy. Another option I think is very much overlooked my people in your situation is [Intercooler](http://intercoolerjs.org/), which is a really nice way of adding dynamic client-side behaviour based on a simple backend API.
To make your app look and function nicely, you don't need a framework, and for sure not a massive one like Angular. Learn HTML5, CSS3, and vanilla JavaScript. Then you can move on to frameworks (if you feel the need).
&gt; https://github.com/leocavalcante/siler What am I looking at?
Nagios (or similar) as mentioned by /u/WalrusSoup is what you want. The above ServerStatus looks like it polls a webservice (uptime.php). Rather than having a single lightweight daemon on a dedicated port for monitoring, you're relying on a heavy multi layer service (webserver, php). However, if there's any conflicts between the uptime.php and the site it's piggy-backing on, then your going to have to dis-entangle that mess for each server.
It depends on how you store your sessions. If there is no central session storage (or distributed, but still single pool) it won't work. If you store your sessions file based on each server, then each page refresh in a load balanced environment will have that user session on one page load, then it won't be found on the next. Memecached, DB sessions would work fine... because regardless of the web server it hits, it'll still querying a specific session storage that's available to all web servers.
Thanks. Will go check it out. :)
Yeah, that's the official website for Swift Mailer. I clicked just about every link I could find while logging all http requests I haven't been able to trigger that popup nor have I seen anything malicious. As far as ads/trackers/pixel, nothing out of the ordinary. I saw calls to Google Analytics, Doubleclick and Criteo.
I have no idea why no one is suggesting JQuery if your just looking to make it pretty. It's mature, does pretty animations and makes Ajax easy. I suggest learning a little vanilla javascript first just so you know what your dealing with. Angular is overkill for what your trying to do. You need to use PHP to get the html and data on your page and to handle Ajax calls, then use javascript and jquery to handle all the interactions on that page like animations and posting Ajax calls. Frameworks are just that, a way to organize your code. In the end they are coded in the vanilla version of the language. What your learning when you learn a framework is a library of methods created to help you use the file structure and simplify common tasks. In most cases your not going to use 95% of the methods available. Overkill. Not to mention the hot framework changes every 6 months. Write your stuff in the vanilla with maybe a mature library like jquery to help and you won't have to migrate in the future for no perceptible reason.
Most definitely. You definitely should use some form of pagination! My goal was to get people setup with the HTTP Requests and different verbs ASAP. The eloquent code can probably use a bit of work and should definitely be optimized. I can write another post on implementing pagination, too, if it'd help you or I'd be happy to talk it out on Reddit!
You're right! The goal is to get people setup with a framework that they can grow with patterns they can follow. If you want to literally just build the application that I've built, just write it in plain PHP. Hopefully this will show people the basics of using these two great tools to build bigger projects.
There's definitely a lot of benefits to these tools (lumen &amp; eloquent). Like I said earlier, if your goal is to build the exact application (or a simple todo list or something), you can just write it in plain PHP and probably be fine. But if you're working with a group of people to build something bigger than this, it makes a lot of sense to consider tools like Lumen and Eloquent for the integrity of the codebase over many commits and iterations.
PhpStorm is DAMN slow on Windows... I really feel pain while comparing how it works on Windows and on macOS. ...and I'm not even talking about git.
Here's ours: https://github.com/bolt/bolt/blob/release/3.3/.travis.yml
Here is mine https://github.com/REBELinBLUE/deployer/blob/master/.travis.yml
Both of your points seem to share a common misconception. The point of programming is to *get stuff done*, and best practices are ones which promote getting stuff done in the context of your task, team, skills, and existing code. &gt; why is using symfony for a small project not a great idea? Because you'll end up with more code configuring Symfony than actual code in your actual project. The smaller the project, the more you need to minimise overheads; that means using tools which already do what you want if at all possible, or failing that, tools which require the minimal amount of configuration. As your task becomes larger you'll start needing to build on top of the simple tool; at that point you might even need Symfony. For my day job I work on a very large PHP project that started life as a CI application, but rapidly outgrew it and really should have been written as a Symfony app. Of course, it's the result of...I dunno, 6+ people, years of work, and handled a pretty high volume of e-commerce transactions. [Bullet](http://bulletphp.com/) would be a bad choice for our app; Symfony would be a bad choice for a little one-man shop trying to churn out code to meet customer demands. &gt; you're telling him to stick to bad habits. Using jQuery for what jQuery is good at is not a "bad habit"; using the wrong tool for the job is a bad habit. If you want to do some form validation on an otherwise static page, and your first response is to reach for Angular, you're not focused on *getting stuff done* because (just with Symfony) you'll end up with more Angular boilerplate than actual code. jQuery is bad when you use it for too *large* a project (my rule of thumb is, the moment you start to need a client-side model, you need to step away from jQuery), but it's absolutely the right tool when you need to do some quick manipulation of the DOM. Finally: &gt; he wants to improve his skills Actually I think you'll find he said: &gt; features that my users would notice and that would affect my bottom line... Sounds like he wants to ship stuff, and that means not spending the rest of the decade learning and building a massive enterprise-grade Symfony + Angular masterpiece solo. (Not to mention which, the tools would be working at complete cross purposes.) By all means OP needs to learn, but he needs to learn stuff that's going to help him with his goals. And I rather suspect that's leaning more towards something like Bullet or Lumen + Vue or Intercooler. And maybe even some jQuery. :)
External FastCGI - Apache: http://serverfault.com/questions/320535/how-to-create-a-very-simple-external-fastcgi-configuration-in-apache Or for my case: Lighttpd: https://redmine.lighttpd.net/projects/1/wiki/HowToSetupLoadBalancedFCGIBackends
&gt; I have no idea why no one is suggesting JQuery if your just looking to make it pretty. Because in 2017, you don't need jQuery &gt; does pretty animations You should use CSS for that &gt; and makes Ajax easy Fetch makes it even easier! ([Polyfill available](https://github.com/github/fetch) if needed) &gt; In most cases your not going to use 95% of the methods available. Overkill. The same can be said of jQuery ;)
&gt; Symfony and Angular are both known for being very complicated, high-overhead, "enterprisey" packages They are? Because I don't feel Symfony is complicated at all. Maybe because it has _a lot_ of documentation, people feel it is somehow more complicated than it peers, but if you stick to the basic stuff, it's actually pretty simple.
PhpStorm seems to run just fine here on Windows 10.
Here's Amp's: https://github.com/amphp/amp/blob/master/.travis.yml
&gt; wow, wait, more than 10k lines? Nope here, good bye." To be fair, that's an absolutely retarded number of lines. If you ever create a source file that large, you deserve the incompatibility that comes with it. And if you're tasked with maintaining a legacy one, priority #1 should be splitting it up.
One for a PHP extension: https://github.com/mkoppanen/imagick/blob/master/.travis.yml And a couple of supporting scripts that are too big to inline into the travis file: https://github.com/mkoppanen/imagick/blob/master/configure-cflags.sh https://github.com/mkoppanen/imagick/blob/master/imagemagick_dependency.sh 
Which was suggested by someone.
It says 30k, and you can ignore obviously irrelevant directories (e.g. vendor, node_modules, etc.), so I still don't see the problem. There's something terribly, terribly wrong if you legit have 30k source files in a single project. Perhaps consider that you have multiple projects hiding inside there, aren't splitting up internal dependencies, etc.
What a shit article; I can't even be bothered to elaborate.
it seems the malware is in your computer, not in swiftmailer website
Dude, don't post here until you can tell a good article from an old fossilized piece of shit
I know you're mad. Don't cry
Then don't use php and switch to nodejs asap. /r/lolphp
Sounds to me like you're implementing solutions without having any problems. If you're learning/building new frameworks for the educational reasons then that's great, but don't expect your application to magically start providing new business value in the process.
looks like CURL request in any PHP application.. 
Even in 2013 this article is outdated.
i don't know why it has to be my opinion or yours , good style isn't about personal preferences it's about making code work and improve it as much as you can since there is no such a thing called perfect code . and i didn't say don't write plain PHP if you see your self a php master write PHP the way you like , i just said why not work in a clean way in a common and share a common coding style, but i see that you are completely against this idea of frameworks and MVC even PSR . i'm not sure maybe my experience in PHP is limited i have only 4 years with language .but my Apps are working fine.
I found the PHP League skeleton project was a great starting point: https://github.com/thephpleague/skeleton/blob/master/.travis.yml
1. Post a homework-type question 2. Insult anyone that tries to help 3. Profit
Hi!. I think the 'using tools that are overkill for your projects' answers are correct; I started using Symfony some 3 years ago and I'm still learning new things every once in a while. Took me almost 3 months of intense study to feel like I actually understood what its most complicated components (security, forms) did. Also: I don't have to have a pretty interface because the project I work for is for a medium-size company and others handle the 'pretty pages', I just have to make an app that *works good and works fast* so to speak. To give you an idea of what I do with Symfony, among other things my app has to: * Allow users to log in and handle one-by-one permissions to view menus, actually enter some pages regrardless of the menu visibility, and differentiate between simple employees and clientes entering the system. * Have the functionality of a CRUD application * Receive image files, resize them, store them, and show them together with other database information * Receive Plaintext, PDF and Excel files, analyze them, and depending on info contained in them, store them and/or create database entries * Generate all kinds of files: Plaintext, PDF, Excel documents, with information generally on the database * Generate reports of business processes * Run scripts automatically on certain dates or intervals * Send emails * Allow API authentication The app handles the majority of proceses of the company and, sincerely, I think Symfony is a great choice for all that and I trust and love the Framework. But I hope this helps explain why people are saying stuff like you're 'shooting bees with a cannon'. I don't have good advice on what to use instead and, like you, think learning to use these big frameworks is great in itself but I think you should give yourself a gift in the form of stopping the learning process for now, taking a step back in the complexity of the tools you use, and just do things that work maybe with plain HTML5 + CSS + JavaScript (either pure or made more powerful/simply by jQuery). And maybe let the complexity of new things you try to do in the future (log users, send emails, analyze files, generate files, use a database a lot so you may need an ORM, etc) drive you into more complicated tools!. Anyway that's my 2 cents on this matter.
The most important thing you can teach a new developer just getting started with databases is pagination in my opinion.
After seeing your other posts in this thread I decide to take a quick glance at your comment history. Porn, Naruto, and bitching at people who try to answer your questions. I think you might be an asshole dude.
I'm in a similar boat. I develop exclusively on Windows 7 and deploy PHP projects for RHEL7 and Perl/Python/Shell scripts for RHEL5/6 and have no OS related issues. Very very rarely I'll have a line ending issue, but never with existing projects.
Even better. I've been holding off on ES6 until full adoption, but nows the time.
If your primary concerns are cost &amp; time, will Google Forms not fulfill your needs? It supports all the features you've mentioned, is a SaaS, so therefore essentially removes any maintenance &amp; security responsibilities (To a degree). You can store all the responses in Google sheets which is very extensible, and there is an official PHP SDK to extend it with: https://developers.google.com/sheets/api/quickstart/php &amp; https://github.com/google/google-api-php-client should the need arise in the future I realize this is in /r/PHP but if that's all you want / need... If would free up your limited dev resource to work on other projects.
Thanks! I took a look earlier and didn't see anything that supported the uploading of documents to a Google Form. I may have been mistaken. I'll dig into this as well. Thank you,
Document uploads were added recently: https://sites.google.com/site/scriptsexamples/home/announcements/google-forms-file-upload-feature They are placed into Google Drive, and the response in Google Sheets contains the URL to the asset :)
Dude. It's complicated. However, I would say the learning curve is steep but not high. If that makes sense. After a couple small projects you really get a feel for it. It can still be very different if you haven't worked on a similar framework. Another thing I found to be problematic for a n00b is the flexibility. You can do the same thing in different ways and it's not always easy to pick up when and why you should do this or that way.
 # add your changes git add -A # amend your previous commit (not editing the message) git commit --amend --no-edit # force-push to your feature branch git push -f origin $FEATURE_BRANCH # lather, rinse, repeat
That predicament is exactly why I have a job with my current employer as a solo programmer with one intern in a distributed IT department. Most of the applications my office develops are exactly what you are describing. We really wanted to get away from our old codeigniter custom ticketing app, especially one that could integrate with other departments, but we have yet to find anything that really fits our way of doing business. Our central IT department tried implementing an enterprise ticketing system about three years ago. Yet the enterprise solution was cumbersome and time consuming to configure and maintain and ultimately was not adopted. In the end though we find with good agile project management TDD and Laravel, and using the [module pattern with jQuery](https://learn.jquery.com/code-organization/concepts/) keeps our code maintainable even when requirements get messy, big and complicated. Just make sure you are focusing on a minimal viable product that solves your business needs. I'm super excited to hear if anyone has some good suggestions, we are constantly searching for great open source software that can replace our time consuming custom apps. 
&gt; Dude. It's complicated. What part exactly? If you use it as a standard MVC framework, not much is happening really. I'm curious if this is a genuine problem, or it's just perception. Most teams I've worked with who have never worked with Symfony, were quite comfortable in just a few hours to days. &gt; I would say the learning curve is steep but not high I would agree that Symfony introduces a lot of jargon (Service Locator, DIC etc), which if you are not familiar with it, might be overwhelming. Then again, I don't feel this is a Symfony problem perse. If you are new to these concepts, _any_ framework would feel overwhelming. Luckily, the documentation goes into quite some detail introducing these concepts. &gt; Another thing I found to be problematic for a n00b is the flexibility. You can do the same thing in different ways and it's not always easy to pick up when and why you should do this or that way. This is exactly why I feel Symfony is easy. Most of the framework is not dictated: you can use whatever works for you, in a way that works for you. You are not bound by or to the framework in any way. There is no ONE-TRUE-WAY in software, and I feel a framework should reflect that. What works for you might not work for me and vice versa. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Well since you are already violating concerns ... it makes sense, might as well throw everything onto an object, what could go wrong. Oh right, everything.
get ==&gt; fetch ?
Haven't heard of mutation testing and [Humbug](https://github.com/padraic/humbug) before. That's really interesting, thanks for sharing!
Just curious, but does anyone know why Tinker got moved to its own library and not a dependency anymore?
Why would you go through such great lengths to point out the bad design of the DateTime object, only to then use the same design principles in your own code? If we did in fact have a built-in DateTimeFormatter(Interface), we might at least have a better way to localize the formatting of our dates. Just configure the formatter once to use the correct locale and inject it everywhere you need it. Or you could even configure it in your controllers based on the incoming request and whatever info that might contain about locales. The only advantage you give is... discoverability? But at the same time you lose a lot flexibility. Depending on a global dispatch() function in your Announcement example, you can't decide HOW the announcement is dispatched in specific situations. Maybe you need to send an e-mail, or maybe send a push notification, depending on the user's preferences? You say you can solve this by injecting the dispatcher as a parameter in the broadcast() method on your model, but what purpose would your broadcast method have then? What is its added value? I'd have to inject $dispatcher in my controller anyway, so I might as well use it directly like this: $dispatcher-&gt;dispatch(new BroadcastAnnouncement($announcement)); The whole thing just seems like extra code to maintain without any clear advantage, and like /u/pmjones said, an inappropriate combination of concerns (likely based on Active Record). 
Upgraded these two projects in less than an hour. https://github.com/spatie/dashboard.spatie.be https://github.com/spatie/blender
No, you wouldn't have to inject the dispatcher. As noted in my response to Paul, you could make it an optional argument that is either A) optionally injected when necessary or B) located at runtime via a container using service location. Important to note that service location should not always be written off as a "bad" thing in certain scenarios (as is the current trend in "code by numbers" PHP). Note that even Martin Fowler indicates this in his article on dependency injection: &gt; A common reason people give for preferring dependency injection is that it makes testing easier. The point here is that to do testing, you need to easily replace real service implementations with stubs or mocks. However there is really no difference here between dependency injection and service locator: both are very amenable to stubbing. I suspect this observation comes from projects where people don't make the effort to ensure that their service locator can be easily substituted.
&gt; If you've read about enough patterns and principles, there's a decent chance you saw this line: &gt; `Announcement::create(request(['subject', 'message']))-&gt;broadcast();` &gt; ...and immediately thought to yourself: &gt; "What?! An announcement shouldn't be able to broadcast itself!" &gt; I used to think that too, but over the last few years I've started to think differently. You thought better previously, trust me. You can spin it however you please, but this factoring is not only awkward logically, but it's also awkward technically. You have two things here: 1. An object holding an open connection to an email server and sending announcements. 2. The actual announcement content (subject, message). If you merge both, it means you instantly create two problems: 1. An announcement, once created (especially by this factory), can't be sent any other way except via that *specific email server*. Why? I can think of other ways to send an announcement. I might want to send the *same announcement* over *multiple different channels*. You should see more than 5 inches in front of your nose when doing OOP design. 2. Every announcement has to open its own connection, so if you're sending multiple announcements, that's just stupid. Of course you can side-step the above issues, by making a mess of your create() method with settings for how the announcement is announced, and throwing in more static state for keeping a persistent connection open. Needless to say, this makes the design even more obscure and awkward, so it wouldn't speak well for the approach. Also what's with the static factory. This thing is definitely tied to an email server login, which should be injectable. If it's static, it's either set statically, or it's hardcoded into the class. Both of which would be hilarious. So, how would this look semi-correctly? $factory-&gt;newAnnouncer()-&gt;announce(request(['subject', 'message'])); I'm not too fond of that word, maybe it can be Notifier, Sender, but anyway, that's a detail.
&gt; In this example, the job dispatcher is resolved out of Laravel's Service Container, so it's trivial to use a different implementation per environment, or when running our tests. Oh, rly. And how did that static Announcement factory get access to the Laravel container, again?
Monitoring of core server metrics (like CPU usage) should be done with an suitable tool: https://en.wikipedia.org/wiki/Comparison_of_network_monitoring_systems If you want to monitor application metrics you may want to look at graphite.
Sure. I will pull from my recent project at work rebuilding a notification platform... The input for the domain is an Event [ReviewWasCompleted]. Our EventHandler[ReviewWasCompletedEventHandler] then has the task of determining whom inside a Business needs to have this notification. We solved this problem via Subscriptions and Rulesets. In short the handler pulls all Subscriptions for a Business and does `isValidFor($event)` ... If it returns true, we queue a Command... [SendReviewWasCompletedEmailToBusinessUser] with the appropriate context information. ... there's a command handler then that localizes the review and fires off an email via MailChimp. If successful another event is Emitted [ReviewWasCompletedEmailSent]. Each Event is persisted, our Commands go to a RabbitMQ exchange for processing. If we talk about Persistence, we use Doctrine here, and for-every Repository we have 2 Concrete objects with 1 Repository Interface. We write InMemoryRepos for Unit/Integration Testing. We have a nice scaffolding setup that generates a bunch of fake data that we can use for testing. In our Classes we always type-hint the Repository Interface, that way it doesn't matter if we get a Doctrine or InMemory version. All of this is completely testable and code coverage is 100%. Is it crazy Overkill? I don't think so. Why? With this subscription sub-system by using some doctrine magic [Descriminator mappings] we can easily extend our Persistence infrastructure into other domains. We started with a ReviewWasCompleted subscription... now we can have Other types of subscriptions as well for other Events in our system. So how would I do this with Eloquent. This seems harmless on the surface... `Announcement::create(request(['subject', 'message']))-&gt;broadcast();` But it leads me to think of how you could possibly test this... What would you really be testing... Testing the model's ability to raise itself? Why would a Model even be considered an Event. Is the event being fired PostCreate? What does it actually mean. Is it persisted already or is it being persisted... There's so many questions. I'm sure I can go through the doc's and find out exactly what it does b/c I know you have great documentation. This line of code is, persisting the model, and raising an event. But what if the ::create method fails? Do we still broadcast the Model even tho the create failed? I would guess not... I believe Eloquent Throws an Exception... I would call this very fragile. How do I catch and try again? I will draw a parallel to using a command bus, commands that fail can be queued again. Failure's happen all the time for whatever reason. How your system deals with it is the key. I would call this type of design Optimistic design. In that in a perfect world it works wonderfully! However in an imperfect world you are going to be banging your head against the wall. I just hope people out there realize this point. Some of us do have super complicated Domain Models where stuff like this just wont work. 
Awesome, been looking for a team dashboard that wouldn't take me too much time to setup. Thanks!!!
You can pull things from a container by interface name. Your concerns of moving across frameworks can be evaluated on a per-project basis.
&gt; Is that object really broadcasting itself? I don't think I would say the object has the "responsibility" of broadcasting. The object does't even need to change when the broadcasting logic changes. One thing that very specifically happens is that the broadcaster is coupled with the announcement and I can think of about a million ways this is undesirable. Your example `broadcast($broadcaster = null)` changes that, but I have to question the use cases of having a "default" broadcaster. Usually the channel of broadcasting is just as important as the message. In different scenarios, having a default strategy for "doing the deed" might be more acceptable. I think it's related to how pure the "doing" is. If it's doing IO, chances are that having a default IO effect is kind of silly. But if it's more "pure", like OP's "formatter" example (i.e. transform of data), one could have a default.
In [the real Command Pattern](https://en.wikipedia.org/wiki/Command_pattern), commands *do* have an `execute` method. This excellent book by Uncle Bob devotes a great deal of time to that pattern if you'd like to learn more about it: https://www.amazon.com/Agile-Principles-Patterns-Practices-C/dp/0131857258
&gt; Does Array.map mean the array is mapping itself? No, it means the array can be mapped. &gt; Does String.downcase mean the string is converting itself to lowercase? No, it means the string can be converted to lowercase. &gt; Does Thread.kill mean the thread is killing itself? No, it means the thread can be killed. Frankly this all makes it seem like you don't grasp the first thing about an object being encapsulated state and behavior. The behavior invoked by a method on an object is *within the object*, and it's implemented by the object, even if public methods are typically invoked by outside parties. So basically yes, an array maps itself, a string returns a lowercased copy of itself, and a thread terminates itself. Is that seriously up for debate? The problem with an announcement sending itself is that it's like a phone call that's "calling itself", without a phone being present, because there's an invisible "default phone". It's just stupid design coupling two distinct concerns: a ValueObject (announcement) definition, with a channel for broadcasting it. Ask yourself: can you send the same announcement over two different channels? Like two different emails? Or maybe also throw in Twitter, Facebook, SMS etc.? Why yes *you fucking can*. When you model objects you need to differentiate entities from values, because if you don't, you'll have a bad time. Entities are pure "objects" in the classic OOP sense. And values are simply a part of a message that another object will receive or produce. The fact all of those are modeled as objects is usually a shortcoming of the language, if it doesn't offer value types (like structs) for the purpose, or an intentional design choice by the developer. But values and entities are as different as day and night.
&gt; can you send the same announcement over two different channels? Like two different emails? Or maybe also throw in Twitter, Facebook, SMS etc.? Why yes you fucking can. Not in my app ¯\\_(ツ)_/¯ Edit: In my opinion, this sort of speculative design is dangerous. Fantasizing about as many "what if" situations as possible and trying to accommodate them in advance is a bad idea. It's really easy to change that *one line of code* if I do need to support multiple channels, than it is to change 5 layers of indirection that ends up not quite supporting the one requirement I couldn't guess. I'm a big fan of Kent Beck's [Four Rules of Simple Design.](https://martinfowler.com/bliki/BeckDesignRules.html) &gt; At the time these rules were formulated there was a lot of design advice around adding elements to an architecture in order to increase flexibility for future requirements. Ironically the extra complexity of all of these elements usually made the system harder to modify and thus less flexible in practice.
From 0 to Symfony can be a difficult. If you already have some idea of what to expect from modern frameworks then it's just a matter of figuring out how to do it the Symfony way and is no way difficult. The older CI2 held me back for awhile - what's a request life cycle/middleware? Dependency Injection (`$this-&gt;load('model')`)? I have to manually define routes? What? I take my share of the blame, but I didn't need any of that to get an app working on CI2. Love it or hate it - Laravel was the natural stepping stone (for me) from the CI world to more modern frameworks. I then dipped into Lumen, Silex, and Slim. Now-a-days when I start a project for myself I just include "symfony/console" and write all I can without a framework then wire it all up when I'm ready. 
ITT: Adam Wathan managed to name drop Kent Beck, Martin Fowler, and Uncle Bob all inside of 30 minutes.
&gt; "What?! An announcement shouldn't be able to broadcast itself!" A question for my fellow PHP devs. I'm curious as to why some seem to come to the conclusion above. What reasons do you have for why a class "should not" answer to a particular message? Why should the Announcement not respond to a message "broadcast"?
&gt; Attributing this line of thinking to Active Record shows a tremendous lack of exposure to object oriented programming Your attempt at baiting me is noted. (There's a "master" joke in there somewhere, maybe something with "exposure" thrown in. ;-) &gt; Here's a great post by Martin Fowler that touches on this: &gt; &gt; https://www.martinfowler.com/bliki/AnemicDomainModel.html &gt; &gt; &gt; "The fundamental horror of this anti-pattern is that it's so contrary to the basic idea of object-oriented design; which is to combine data and process together." &gt; &gt; Objects with no behavior and a bunch of Do-er services that act on them is just procedural code badly disguised as OO; it's not object orientation. As you say, it's a very good article; one I've read many times. Of course, the opposite is the obese domain model, where the domain element does too much. So, is your argument (per Fowler) that the Announcement is part of the domain model? If so, what's your argument for integrating infrastructure elements within it, or making it dependent on particular infrastructure elements? (There's a tradeoff to make here, of course; what is "practical" in a particular situation depends on what it is you want to practice.)
&gt; In my opinion, this sort of speculative design is dangerous. Maybe. On the other hand, for some of us, that kind of design is not "speculative." It is born of remembering our past experiences, and attempting to make allowances for them. In this particular case, splitting the "thing being announced" and the "thing doing the announcing" seems like a relatively low-effort piece of work, especially when one knows in advance that two or more channels are very likely.
That's what I get for being snarky. ;-) There's another excellent book called [Design Patterns](https://smile.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/) that predates the Uncle Bob one, if you'd like to learn some history on the pattern.
While this is better than an "invisible default broadcaster" it's still a poor factoring. You can send one announcement over different broadcasters, but with this approach, you'll have to create separate announcements with the same content, only so you can set a different broadcaster at construction time.
&gt; I think an interesting discussion to have is if you have an object with an API like: &gt; &gt; `$announcement-&gt;broadcast();` Indeed, or one like this on the Announcement: public function broadcastVia(BroadcasterInterface $broadcaster) { $broadcaster-&gt;broadcast($this); } Is that the "right" thing to do? Maybe, maybe not. But is does satisfy Wathan's point about affordances ("this object can be broadcasted'), and makes the Announcement construction independent of infrastructure. 
&gt; Here's a post by Mathias Verraes that defines methods the same way: &gt; http://verraes.net/2014/09/objects-as-contracts-for-behaviour/ I believe that in his article Verraes is saying that the Invoice is not paying itself but is allowing its state to be changed without exposing its internals. Not the same thing as in yours. Edit: He said so while [replying a comment](http://verraes.net/2014/09/objects-as-contracts-for-behaviour/#comment-1789933765)
https://github.com/thunderer/Shortcode/blob/master/.travis.yml
For me, fetch is more like "go over there and bring something back." It seems more appropriate for database work than for object creation.
You'd have to inject a broadcast in every instance of a model that way. That's not necessarily bad as you can share the same service across multiple instances. But the factory creating the model object ("announcement") also has to know about that broadcasting service (for example a repository class with a load() method). So now you're injecting the broadcasting service in that class as well, and the complexity grows and grows. How is this any better than just injecting the broadcasting service in your controller (or wherever you need to broadcast an announcement), and using it directly there?
Not really. The problem we faced was that the initial team thought "hey we'll just use the D8 service locator everywhere because why overengineer this", and 3 months later it turned out the same code had to be reused inside a Silex application. And I'm not talking about just a few classes here. It took us weeks just to clean up all the usages of the service locator. But hey I get it, there's a lot of over-engineering going on in general. But on the other hand it's really not that hard or even much work to use dependency injection instead of a service locator, and you save yourself a lot of trouble when you need to reuse all or part of your code in another framework.
Very nice writeup. Thanks for taking the time.
If you can't go back to use integers you could use bcmath to get more reliable results: https://3v4l.org/fllcA
Well, I have been sidetracked by the comment about default services. I can see your point. I think /u/pmjones’s suggested [broadcastVia method](https://www.reddit.com/r/PHP/comments/5px0lq/methods_are_affordances_not_abilities/dcuv80u/) is a better illustration of this affordances idea while eliminating the responsibility of tracking particular services. 
Yep. I think it's a decent solution when you're aiming for an expressive API. The benefits of injection while still allowing for maximum flexibility. Whether that approach is chosen over alternatives will probably come down to personal tastes.
&gt; I think an interesting discussion to have is if you have an object with an API like... It's a no brainer for me, I feel any discussion would only reveal scepticism/arrogance rather than any real insights. 
I think an interesting benefit of this solution is that you now have access to private properties of the Announcement. If you take your announcement as a barebones previous DTO, you might have some getters to access its data. Now you may not need any of those getters, since you have access to the private properties of the announcement.
I would also suggest that it can be implied that a NotifierFactory probably makes notifier instances. I avoid using new as a method name even though I think it might be legal in PHP 7. Hence NotifierFactory::create() seems sufficient. Also made a few using the invoke method so: $notifier = $notifierCreator(); Not sure if I like that or not though it does avoid the whole issue of what to name the method. 
I've been to my share of dev interviews. Here's a few things I remember being asked: - "Advanced" SQL stuff. Show us how to join into the result of a select statement, etc.. - What is / Write an example of a Singleton. - What is / Write an example of the Observer pattern. - What is / Write an example of a Trait. - What are common web application bottlenecks? (SELECT *, n+1 problem, etc..) - Do you know how to use Caching / Redis? (not tested, just asked) - Do you have any experience working with large datasets? (not tested, just asked) - Do you have any experience working with unit testing? (not tested, just asked) - General "whiteboard fizz-buzz" stuff. The best way to prepare for a dev interview is to go to a lot of dev interviews. Don't just keep applying for the same place once every few years. Get on LinkedIn, call a talent agency, and just start going to them. Once you've been on a few, you'll know what you need to learn. Good luck! Always keep learning! 
Np. I'm glad it came across as readable, I wasn't entirely sure it would.
It really depends on the company. What frameworks are they using? Is this a junior or senior position? "Object Orientated skills" covers a lot of ground from knowing what the difference between a public and private method is, all the way up to explaining how SOLID principles apply when doing TDD. Similarly in one interview, I've been asked about my SQL abilities, and after rattling on for a bit that while I was comfortable with normalisation and complex joins and sub queries, but didn't really have as in-depth knowledge of the hard core aspects such optimisation of indexes and cache sizing. "That's good, we actually just want to know if you knew how to do the basic four operations, and hopefully an inner join."
If I understand correctly, so I would store 0.00345 as 345 then just / by 10000?
&gt;I was invited for a second interview which lasted **8 hours**. Am I the only one thinking an 8 hour interview is excessive? Even FB/Google don't interview you for 8 hours.
Thanks. The recruiter wanted to know and the company recruits exclusively through them so not sure I had much choice but noted in future! The first time I was interviewed for the job years ago, their HR manager asked me my salary expectations. How would I answer that if asked again?
Thank god I'm hearing this is a rather trivial upgarde. My team is upgrading from 4.x right now to 5.2 and it's not so trivial...
I'm about to dive into this myself (from 4.2 -&gt; 5.3). Any advice?
It really depends on how you'd say them, your confidence level, but I'm coming up 15 years and honestly I've helped build systems that have delivered millions in revenue (probably over 200m at a guess) so I become rude, borderline belligerent if asked stupid questions of any kind. * "We're not in a casino" * "I Find it hard to take that question seriously, lets bring this back on track with an offer." * "What is your budget, and the offer you are going to make." Better to insist upon salary before you go to interview as it's your time is the golden rule. I've never interviewed for a job where I didn't know, but I have interviewed and then raised the rate by listening and arming myself with what they tell me. "Well you've got no documentation|tests|clue so it's really a problem for getting things done which changes things." I Have an hourly, weekly, monthly and customer established rate, but that doesn't mean I won't charge you more for non-standard service; that means that I charge that for standard work like travel, etc. I recently had someone apologise to me for not being able to pay more than £2500/week (~$3000) for my time without materials or other workers.
Howdy, Just a guess, but I don't think you can post to a relative url like that. Apache has a document root set and you can only post to URIs nested deeper into that root. so when you say this in your angular url: '../php/mail.php', I think thats wrong. say you are able to hit that php script directly in the browser by navigating to www.server.com/php/mail.php I think you need update your url in angular to be url: '/php/mail.php', or maybe: url: 'php/mail.php', I haven't tested it, just a hunch. Have fun with Bangular :)
`route:cache` seems to not include the new `routes/channels.php`
No mention of checking mime types? Is that not a thing anymore?
Yes, it's a good practice to divide static content and backend. I'm doing that for years. But not every one doing that. It seems to me that many people believes that renaming the file can protect the server and is enough. Certainly it is a must to rename a file. At least it helps to prevent the situation when one file will overwrite another. I wrote that article to make php-newbies scared for good. =) Because one have to be paranoid when it's about the Server Security.
Looks like they doubled down on all the features I don't like. Auto-facades of things that didn't need facading? More magic method invocations? Way to shit all over my IDE. Maybe this is all a clever ploy to sell this new testing framework, because that's the only way we'll ever catch any bugs. Static analysis is out the window.
It shouldn't. Those are not HTTP routes that go through the routing engine.
Use laravel shift: https://laravelshift.com/
I like the idea. Though there is some awkwardness with the no-braces style. 
Here's an example of a `try_map` function... but it's not the best example: function (callable $fn, iterable $iterable) { foreach ($iterable as $value) { yield $fn($value); } else { throw new \EmptyException(); } }
Part of (potentially) resurrecting this RFC would be addressing the reasons it stalled and any new issues raised. So yeah, applying it to any Traversable in the foreach use cases would be wholly appropriate.
I'll write insecure and broken code even when your 3 pages are covering everything, because at this moment i'm just bodging stuff together. i'm well aware that crypto is slipery slope but everybody has to start somewhere, be asured i wont hold anybody responsible for my shitty implementation of my shitty code/concepts. In this case i just want to store a textfile encrypted. 
The short answer then, is going to be that it tends to pass the cipher choice directly through to openssl, so it can vary depending on your OpenSSL version. You can use [this](http://php.net/manual/en/function.openssl-get-cipher-methods.php) to find what your server supports. There are a lot of choices. If we start by assuming AES-256, your likely cipher choices are AES-256-CBC or aes-256-ctr. Both of these must have unique IVs, so you'll need to be absolutely sure you pull in random data for this. Don't let the word "password" fool you. It needs to be a key, which means it needs to be the right size, and should use a separate KDF if you started with a password. Then it'll still be vulnerable unless you use an HMAC. Since I don't have time to write pages of advise - please consider this a very minor starting point and one likely to lead to insecure code if you stop there.
I was going to mention Python but I see the RFC already has. In my experience with Python the for-else construct is quite rare. I don't think I've seen it used in any of the open source projects I've had to spelunk into. A quick Google search for "Python for else" gives me [this SO thread mentioning how rare it is](http://stackoverflow.com/questions/9979970/why-does-python-use-else-after-for-and-while-loops) as the second hit and a few other links to pages describing it as rare or unusual. Of course Python's construct operates differently from this proposal but given that language's experience and that other languages haven't adopted a similar thing despite needing to solve the same problems indicates to me that it really isn't as useful as the bug reports would lead us to believe.
It sounds to me like you have a bad case of imposter syndrome. I think you need to apply a bunch of places, and for some of them ask for significantly more than you think you are worth. You are worth whatever someone is willing to pay you, why not find out exactly how much that is? Instead of putting your eggs in one basket and possibly undervaluing yourself, explore the possibilities. One of the most exciting days of my career was when I walked into a job I felt totally under-qualified for. Turns out I did great.
The question looks irrelevant and inconsistent to me. I don't see how all your "problems" are related to each other and to mysqli in particular. Mysqli is just a DB API in php, similar to any other db API, without any specific drawbacks or advantages regarding your question. And especially Mysqli has absolutely nothing to do with whatever access stuff. It won't "ultimately" help you (what do you mean here? to overcome a restriction or what?) nor it have any "drawbacks" (save for usability problems compared to PDO). It's simply an API that is doing its job, just like any other api, no more, no less. Looks like you are overthinking in advance, as usual. Start doing and ask particular questions you will encounter with.
This is Angular troubleshooting 101. If you're using Angular, that AJAX call is visible in the Network tab of Chrome's web inspector. Open it up (filter by XHR if needed) and check the HTTP response code, first of all. Is it 404 (can't find the API endpoint) or 500 (found some endpoint, but threw an error) or something else entirely? Check the headers. Is it POSTing the expected data? If not, start console.logging everything to find out where it's gone wrong. Find out exactly what URL it's trying to POST to. Does that URL exist? If not, double-check your URL settings in that POST call. Once you're sure it's POSTing the right data to the right URL, start at the top of your script and step through it bit by bit. If you have Xdebug set up, that's ideal, but var_dumps are the quick and dirty option if you don't have it. Add var_dump(); die; to check what variables are doing. Every step you do is a matter of writing in the var_dumps, then going back to Chrome, right-clicking on the AJAX call, and clicking 'Replay XHR'. It does exactly what it says. Check the output, verify that it's doing what it's supposed to do, move the var_dump+die to the next line and next variable and repeat. Dump everything and keep replaying the AJAX call, or use XDebug to step through everything. You'll figure it out eventually.
Big fat companies suck a big one in interviews. They want to hire a ready geniuses by a formal procedure, but fail to recognize bright fellows. There is a well known story about the author of Homebew that failed an interview with Google. The procedure is too formal and as a result it's too toilsome for the pretender and too inaccurate for the employer. As Joel Spolsky said in his book, there are only two things that are really required from an emploee: - being smart - gets the job done All other things are irrelevant. The particular tricks required for the current company cold be learned in the process. To resume: don't overthink this. Be calm and confident. Be yourself. It is not a problem if you don't know something - it is more important if you can learn. You never know where you gain and where you lose. May be a big company refused you has terrible bureaucracy (like they always have) while an agile small startup that hired you would become an unicorn.
What a lot of fuss only to say that one shouldn't include based on user input. Reduce your rant fivefold to make it any useful. 
May be I should write just "don't trust user, don't trust database, don't trust files - trust no one". Thanks for the advice. Next time I'll write "do nothing wrong, do everything right". I suppose that's enough to understand the topic. 
yep, i'm such a badass PS: thanks for reading anyway!
As a brief response: it's a 404 error, and I have no idea why it can't even locate the endpoint. Going to bed now but will comment again.
won't help
I'm definitely in favour of this functionality.
Correct, but also make sure the amounts you deal with are not prone to integer overflow.
Indeed, that is my preferred pattern too. And this is what a foreach+else pattern would look like (this is Laravel Blade): &lt;table&gt; &lt;tr&gt;&lt;th&gt;No&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;/tr&gt; @forelse ($products as $product) &lt;tr&gt;&lt;td&gt;...&lt;/td&gt;&lt;td&gt;...&lt;/td&gt;&lt;td&gt;...&lt;/td&gt;&lt;/tr&gt; @empty &lt;tr&gt;&lt;td colspan="3"&gt;No products found lol&lt;/td&gt;&lt;/tr&gt; @endforelse &lt;table&gt; It is less clear, you have to change the colspan if you add columns and be careful if you happen to style your tables in one way that is not appropriate for the "None found" message. Your pattern doesn't add any dependencies between the table and the message. --- An even better example from [the manual](https://laravel.com/docs/5.4/blade): @forelse($users as $user) &lt;li&gt;{{ $user-&gt;name }}&lt;/li&gt; @empty &lt;p&gt;No users&lt;/p&gt; @endforelse They conveniently left out the ul/ol tags.
So, I've started this: https://github.com/paragonie-scott/public-projects The idea is that I do a lot of open source security stuff and have a lot of blog posts in early draft state. If anyone has anything they're interested in getting reviewed or covered in a future blog post, that seems like a manageable place to put it.
Take a look at https://grafana.net . You can use with graphite server, or influxdb + telegraf 
Why I like it, is becuase many of the template engines [Smarty](http://www.smarty.net/docs/en/language.function.foreach.tpl), [Twig](http://twig.sensiolabs.org/doc/2.x/tags/for.html#the-else-clause), [Blade](https://laravel.com/docs/5.3/blade#loops) have this functionality (though Blade are doing it on a oddly way imo) So why not also have this directly in the core? - I cant count how many times I have used it. Also what about `generators` ? foreach(buildData() as $data) { } else { echo "No data" } function buildData() { $i = 200; while($i &lt; 100) { yield $i; } } 
I usually rename the files, store them above the web root (preferably set it so none of my folders within the web root can be written to by php). I then store the original filename (basename) for the file in a database and only allow the file to be accessed via a download script that sets the headers. The request usually looks something like download.php?file=original_name.original_extension&amp;hash=valid_request_hash I agree completely that realpath and basename are both invaluable functions that users shouldn't attempt to reinvent simply because they did not know about them. The Drupal approach to this is somewhat interesting as well, create an htaccess file that prevents php from parsing files in the directory. edit - renaming the files simply ensures that the user is unaware of where his file is or what it is called on disk. The hash is also paired with the file name and salted so that people can not use the download script to crawl around peeking at stuff.
Yeah we should all be using FTP. /sarcasm
We have solved little inconveniences like this every so often, and I personally don't see a lot achieved with this RFC either. Most templating systems do have the if/else syntax, and for me, the example code in the RFC the one without curly braces is a bit awkward. Also, please correct me if I'm wrong: Python's for/else executes the "else" block if there were no "break" calls inside the "for" block. That is not what this RFC is about?
hi, can you elaborate on that n + 1 bottleneck, pls? Thx
Laravel is irrelevant.
I prefer the good old shortcut. if (count($array) === 0) return 'No records found!';
Then again the "gets the job done" part can mean a lot.
It's when you iterate through a list and do a database query for each element to load some child records. Something that's done a lot with modern ORMs. https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/
[removed]
wufoo.com is another solution where you build the forms online, they get the data into the cloud and can summarize / report on it and/or send it to you. Original author was Chris (and team) from csstricks.com You can also just use wufoo or gravity forms to design the forms then bring the source code inhouse and use them with your PHP code to save the data internally. There are also a bunch of online existing cloud-based ticket/helpdesk applications so run a google search for these - they can be anything from free to a low monthly cost to a fixed price and might have 90% of what you need. There are some you can download and run from your own server and modify. Typically a bespoke form (custom developed) to save to a database will only take a day or 2 to develop, so you could also look at /r/forhire and find a developer (or do it inhouse) - estimate number of forms needed * 2 days per form + 30% for test/overage and you will have rough ballpark of time needed (and cost) for development. A decent programmer will be able to give you a much more accurate estimate based on the specific forms and if they are single page/ multi page or master/detail etc. Re the HR form, the actual uploading of documents is quite simple but you need to consider you infrastructure of how they are stored, how they are kept secure and which regulatory rules you need to follow (Data Protection Act, HIPPA, PCI compliance etc.) So this may be a little more complex and you may want to consult an outside firm or at least get legal advice. Hope this helps a little - take a look at wufoo - its quite easy to start designing your own forms and (almost) fun !! 
Please don’t create features aimed for invalid inputs. The behaviour of `foreach / else` should be unspecified for non-traversable inputs, and it would be best to throw an error in this case.
I get how this works for `Traversable` but a generic for or while loop? It doesn't even begin to make sense when put into the English language PHP and many other languages seem to borrow keywords from... IMO not a terrible idea, but not one I'm fond of either.
gdb / strace are the two tools you can use ... both are a painto use but its basically the only way to debug segfaults in apache - and technically it is a fault of apache or the underlying system, not of php. and usually its wrongly interconnected locking/unlocking of system resources (files, streams, etc)
see empty makes sense in a way that else never could. I prefer the laravel blade syntax to what is being proposed as it makes sense. Unfortunately as /u/zanthraxnl points out it is still nicer with an if
Shortercut: if (!$array) { return 'No records found!'; }
Plot twist: You're that guy and you need money for beer! :P :D
Unknown guy who is totally not me.
Wait a second why does that work if `$array` is set to an empty array?
I expected such reaction as "you are that guy". I am not. I actually am the author of this issue : https://github.com/OAuth2-Framework/server-bundle/issues/51. And even if I was that unknown guy, asking for a beer, would that be bad ?
This configuration shows how to [correctly test your Composer dependency constraints](https://github.com/ScriptFUSION/Porter/blob/378c8d7170540af8f700e7409b0dba8175e0206f/.travis.yml) by testing both the newest and oldest set of dependencies permitted. Not enough projects are currently doing this and thus potentially shipping invalid Composer configurations.
I'm sure you're that unknown guy
It works because an empty array is a falsy value.
Gotta love people who compulsively start paths with `./` because they don't understand why this is required for executing commands in the current working directory, so they just apply it to every path, always and forever, in a flourish of ignorance.
I use `./` even in CLI to avoid having to think of whether `$PATH` is involved or not. It's not ignorance: it's a choice.
Well he is Jesus and looking to be praised. Story checks out :)
the first two con arguments basically express what i think about this.
not sure why you're getting down-voted, it's a legitimate question.
&gt; should it execute itself or should it rather lookup (or get injected) some executor I usually prefer the latter. &gt; why literally every database access layer available does the former Not "literally every." ;-) I give you [Aura.SqlQuery](https://github.com/auraphp/Aura.SqlQuery) as query object, and [Aura.Sql](https://github.com/auraphp/Aura.Sql) (or even just plain PDO!) as executor. See also &lt;https://github.com/auraphp/Aura.SqlQuery#issuing-the-query&gt;.
I have a question about chacha20. The second parameter passed into the encrypt method is meta data that doesn't get encrypted right? I think it's a bit weird that you can't pass null to that but you can pass in an empty string. To decrypt, you need to pass in the exact meta data again. What kind of usage would someone get out of this? What's a practical example that someone might use this for?
With gdb.
https://github.com/OAuth2-Framework/server-library/blob/CQRS/composer.json shows "License MIT". It's confusing indeed ; I belive he meant he's the author, and share under MIT. I've opened an issue to figure it out : https://github.com/OAuth2-Framework/server-library/issues/120
You cannot easily (at all that I've seen) execute PHP stored remotely on a Dropbox your server doesn't have read access to so you either cannot read or are being asinine. Dropbox was not the method of storage, it was a trivial example of how you could access &amp; keep data synced to authorised user PC's for non-technical access (personally I prefer rsync, but I'm a technical user!). So given the CONTEXT presented in the first comment you've been an imbecile
I think you're confused as to what a license and a copyright is. An author always retains copyright, no matter the license. The license specifies how the copyrighted work can be used.
You should not get downvoted. Depends on your project and dependencies, after 3 hours of trying to upgrade, adding custom forked repos, pul requests and composer aliases to dev branches ....I gave up as I have to move with project , and will wait until others do an update session-&gt;set breaks Laravel Collective HTML When providing a service, app-&gt;share (vs app-&gt;singleton) brakes few packages. route()-&gt;getUri() vs route()-&gt;get() breaks few packages Some packages needed dependency upgrade in their composer.json Out of the box, sure not more than 30 minutes. a bit complex project with extra packages? Good luck 
It could be a bug, I just went through the PHP github source and the offset was added in 7.1.0. Also this: https://3v4l.org/VYBv3
This should only show in the reflection API as the function itself only expects 2 required parameters and one optional (pack.c). The arginfo is wrong.
Yea, i guess it's reflection api bug. But weird is that in php 7.1.0 number of parameters returns 2 in relfection api too.
Yea, i guess it's reflection api bug. But weird is that in php 7.1.0 number of parameters returns 2 in relfection api too.
Why? If there are already existing solutions in the wild it's possible they've come across the various problems people are reporting here and decided on a good solution. It's at least worth considering. 
"did a huge work" that gave me a little lol
Oh, really? 
Yes, good advice. To expand, basically, if you want to work with russia/easter europe or asia, Yii is a very good pick, market wise. In the rest of the world it would be harder. And if you are french, Symfony. (Or Wordpress -_-. Or Java).
I'm actually curious about what issues you have had with Views across databases. Was that issues migrating Views across database products or database types eg. relational to NoSQL? I usually keep as far away from manufacturer-specific SQL extensions as I can and the migrations I have done have usually been to newer versions of the same product. The reason I ask is that I would consider a View as a "primitive component" of relational databases and therefore a "safe" bet, compatibility and migration wise.
Yii2 is pretty great.
Fun* fact, the information reflection uses to reflect internal functions and methods does not actually come from the functions or methods. It is a completely separate structure that needs to be updated separately from the code inside a function or method that handles the parameters. The definition for the args in 7.1.0 has 2 entries. https://github.com/php/php-src/blob/PHP-7.1.0/ext/standard/basic_functions.c#L1813-L1816 The definition for the args in 7.1.1 has 3 entries. https://github.com/php/php-src/blob/PHP-7.1.1/ext/standard/basic_functions.c#L1813-L1817 And yes, the code that actually parses the parameters expects 3 in both 7.1.0 and 7.1.0 https://github.com/php/php-src/blob/PHP-7.1.0/ext/standard/pack.c#L557-L560 https://github.com/php/php-src/blob/PHP-7.1.1/ext/standard/pack.c#L730-L733 &gt; Maybe it's reflection bug? In the sense of 'someone forgot to update that arginfo data structure' error. Oh, the arginfo data structure is also missing the fact that the last parameter is optional. Someone needs to replace ZEND_BEGIN_ARG_INFO(arginfo_unpack, 0) with ZEND_BEGIN_ARG_INFO_EX(arginfo_unpack, 0, 0, 2) &gt; Why php changes api stuff in bugfix version? PHP doesn't follow semver strictly. Semver is great for small libraries that do very specific things, but as the project size gets larger and larger, the trade-off between following semver and the engineering effort needed to support that because a harder trade-off to make. *actual amounts of fun may vary. Reading the php code base may lead to nausea, vomiting, hair-loss, loss of consciousness. Consult a doctor if any of these symptoms last more than 4 hours.
Some issues I see with this approach. * It also results in potential bug when a new developer comes along and tries to treat false as an object/array. This keeps your application fragile. * You've added in an extra statement, therefore by simple deduction it's more complex since there is now more logical code. * Since the table is only there sometimes the increase in complexity could affect your frontend javascript.
**laravel/dusk** ([Repository](https://github.com/laravel/dusk)) ([Packagist](https://packagist.org/packages/laravel/dusk#)) **Stars** 483 - **Language** PHP - **License**: MIT - **Release** v1.0.0 *(3 days ago)* Laravel Dusk provides simple end-to-end testing and browser automation. *** ^(by /u/AtroxDev |) [^(Telegram Bot)](http://t.me/LibrariesBot) ^| [^(Something went wrong?)](https://www.reddit.com/message/compose/?to=AtroxDev&amp;subject=[LibrariesBot]%20Something%20went%20wrong)
Thanks for clarifying this :D
Let me suggest you to learn some arithmetic and manage to calculate the appropriate scale for the displayed values automatically. Like, if there are 1024Mb RAM available, your code would print 1Gb without asking the user to enter the scale manually. 
I think you're getting the two mixed-up: one of the reasons for WordPress' popularity is the multitude of cheap LAMP hosting providers, WP is not single-handedly keeping PHP in use.
"actual amounts of fun may vary" (regarding vomiting etc)
&gt; My advice though would be look at the job market before investing your time into it. This is great advice. Im in the UK and TBH, I would be suprised to see many job positions using it. I think I will just build my own side projects with Yii for now.
Sure! As I said in the article, it will not be executed, if you will not create a possibility to execute it. In most cases there the only php files included are those with filenames hardcoded into the code (e.g. namespaces). But some times there is a need to include something dangerous. And direct including is not the only way to shot ourself in the foot. If one stores user files keeping their original name, even inside a specific folder using simple code like move_uploaded_file($filename, $folder . '/' . $filename); and if it happens without a basename() check - that code can be tricked to overwrite any file in the site folder or even in the system. I wrote that article to scare newbies, because those who start learning PHP sometimes forgot to protect the server from user uploads.
Totally agree.
Or use docker! 
You're making some terrible choices. Use Laravel and Vue.js There's no reason to use anything else.
I was asked once "what are the 3 pillars of OOP programming"... I answered Beer, Licorice, and Chips... they didn't hire me... their loss. Please note questions like that are usually asked by non programmers, HR and managers and such who found some "questions to ask" 
I first created an "app" where my wife can keep a record of our son sleep and eating cycle, which included the CRUD etc. But by the time I was finished with it it became a clusterfuck of code and it didn't make me happy, but it does work. Then I created a tiny tiny "CMS" which had the CRUD for main pages and sub-pages, and also for users which were supposed to have roles as in user, editor, admin etc. but I never finished that part... It had a way better code than the baby cycle app. Now I want to make another app for a national handball team, where you'd have all of the info in one place (something like this doesn't exist in my country, so why not). But I want to have a good code, MVC, use libraries etc. But I have no idea where to start... Note* I haven't used any libraries or frameworks so far... Oh, and thanks for your input
Might be worth looking at LaravelShift.com I believe they offer incremental upgrades from 2.x to 5.x
He's been setting things to false for years... for no reason. 
&gt; PHP doesn't follow semver strictly. Semver is great for small libraries that do very specific things, but as the project size gets larger and larger, the trade-off between following semver and the engineering effort needed to support that because a harder trade-off to make. I mean, you could've stopped after the first sentence. PHP is free to choose their release model, and SemVer does have a somewhat fuzzy border, regarding what represents a BC break (especially when you involve meta-APIs like reflection). But SemVer is plausible for projects of any size, because no matter how large your project is, you won't *run out of numbers*. SemVer is just a number (well, a sequence of numbers and strings), after all.
Of course, but I want to show how you can configure manually PHP7 with Nginx easily.
Shortest-er cut: app() Where app() implements the entire application.
Let's say you have an eCommerce store, and would like to show a product count on each category available in a dropdown. Something like: - Cakes - - Chocolate (5) - - Vanilla (5) - - Strawberry (5) - - Mixed (5) A jr. dev might do something like... foreach ($categories as $category) { echo //SQL QUERY LIKE SELECT COUNT(*) FROM products_to_categories WHERE category = "$category" } The problem with this approach is that the # of SQL queries that need to execute increases with each category you add. **n+1**. With enough categories it's not unreasonable to think this could add SECONDS to page load time. A Sr. dev, aware of the n+1 problem would write something like this... $count = //SQL QUERY LIKE SELECT COUNT(*) FROM products_to_categories GROUP BY category foreach ($categories as $category) { echo // now you use something like $count[$category] to display this value. } So now we've consolidated into one query, making this function of the website much faster and not having to worry about the performance hit involved in something as trivial as adding a category.
I've used it a few times and I don't do that much python programming.
I'd use it a bit
&gt; If PHP was using semver more precisely, then we'd either be dropping support for older versions of PHP much faster, as their wouldn't be people to support them, or we'd have to hold off adding new features and BC breaking bug fixes for an annoyingly long time. I don't mean to argue about this, as it's not really important (what PHP does is fine, I think, you could say it follows SemVer already), but still... I have to mention the fix for the problem you're talking about is very simple. Let's say you're releasing a new major version every 6 months (not saying I'd recommend that, but let's say). You can designate a LTS release every few years, and do very short term support of every other major version. No need to support everything for years.
I think Marco considers this a [rebuttal] to Adam Wathan's [post], but I don't seem to see it that way. Yes, Marco doesn't advocate grabbing the dependencies via service location or a static call, but that's neither here nor there for me... [rebuttal]: https://twitter.com/Ocramius/status/824353422140985346 [post]: https://adamwathan.me/2017/01/24/methods-are-affordances-not-abilities/
I had this queued up [since december](https://github.com/Ocramius/ocramius.github.com/issues/103). Today was just the perfect day for releasing it, since since I [strongly disagree](https://twitter.com/Ocramius/status/824165914136473600) with relying on global shared mutable state. Instead of making a rant blogpost, I made one that could be useful to those that are already trying to improve themselves with new architectural patterns. 
TL;DR: $paymentService-&gt;pay($parameters, $invoice); can be $invoice-&gt;pay($parameters, $paymentService); In this scenario, `$invoice` decides whether the parameters are correct or not, and what has to happen on failures. In absolutely NO CASE EVER you should have $invoice-&gt;pay($parameters); 
Ok, clear enough :-) First two are better than the last. Although, ideally, I'd... $invoiceService-&gt;pay($invoice, $paymentService); Because I always think about batching, and atomic operations on multiple entities... $invoiceService-&gt;pay([$invoice1, $invoice2, $invoice3], $paymentService);
Frameworks come in varying sizes, some are small, i.e. they only include a couple tools to make your life easier. Others are large, and include a bunch of tools usually intended for larger applications. Some tools you may never use. Frameworks often have their own opinions on how your app should be structured as well. Slim/Silex/Lumen are some of the smaller ones that are well-used. Symfony/Laravel/Yii/Zend are some of the larger ones. Reddit will give you 1000 opinions on each one, I've only really used Laravel &amp; Slim myself. It's hard to know which one is "best" for you, unless you have a bunch of experience in each. You could always go with which one has the preferred job market and/or community.
&gt; If the batching is not semantic, yes, but if it is, then you need to be able to express the semantic group the operation is performed on, throughout the chain. I.e. if I want to actually make one payment to cover N invoices. I'd really just fire N commands, and then collect the results when the batch job in the backend is done. Work time will depend on the efficiency of my read models, as well as the amount of workers (throw it at lambda, if you want). This is a solved problem, there is absolutely no need for making it explicit API, especially not in the domain. &gt; Additionally, to batch by accumulating similar entities implies a lag (waiting for at least N items or at least N milliseconds, before processing a set of homogeneous commands), which is a problem when you have an API at the top level that's not completely mute to client's commands, the way your CQRS layer within is. Not following here: 1. batch processing in most DDD apps is an edge-case scenario, and is generally dealt with by ETL and with specialized tools rather than with API signatures that match the domain 2. the execution time is the execution time of the longest interaction across all batch items, since each item is thrown at a command bus. You have 500 invoices to pay? Send them all 500 at the command bus, then wait for the read model to state that all 500 are done (with a timeout, obviously). 
&gt; NO CASE EVER In your heavily CQRS/ES, Java, "all hail" static types inspired opinion. There are plenty of very talented programmers who would disagree with you. Take the creator of the Elixir language for example. Are you asserting that you are a more knowledgable, skilled, and talented programmer than that person? It seems pretty clear you have kind of sold your soul to a certain view of programming when you approach the whole issue with "NO CASE EVER". You are beyond reason at that point. Beyond trade-offs. Beyond any rational thought. Just a machine slapping the heaviest of solutions on the simplest of problems. Note: I am not speaking against your particular view, but only for **freedom**. The freedom for individual developers to make the choices that best fit their application.
&gt; I'd really just fire N commands, and then collect the results when the batch job in the backend is done. Work time will depend on the efficiency of my read models, as well as the amount of workers (throw it at lambda, if you want). This is a solved problem, there is absolutely no need for making it explicit API, especially not in the domain. As I said sometimes the group being processed is semantic. For example, it can be a part of the domain that Payment #6 covers exactly invoices #10 #12 #16 and #29. I mean this can be for business logic reasons, not simply performance reasons. If it's not, then the solutions are more flexible. But if it is, then tying the commands as methods on individual entities means you can't express the domain operation, basically. This is why I prefer to separate entities from operations in APIs like that, because it tends to bite me in the ass over time when I don't. &gt; Not following here... batch processing in most DDD apps is an edge-case scenario, and is generally dealt with by ETL and with specialized tools rather than with API signatures that match the domain. Again, depends if the "batch" is just an optimization, or something relevant to the domain. If the former, sure, if latter, then no. &gt; the execution time is the execution time of the longest interaction across all batch items, since each item is thrown at a command bus. You have 500 invoices to pay? Send them all 500 at the command bus, then wait for the read model to state that all 500 are done (with a timeout, obviously). Well, there are two ways to get an update on the read model. One, polling, and that's very inefficient, and comes with an inherent lag. Two, push notifications, and that implies we have some window (in time, and in batch size) that we need to set before a notification is fired, and that also comes with inherent lag. The lag sometimes doesn't matter, but it's in general poor UX, and your SLA may require a response, and a reasonable response time. Having CQRS doesn't mean that throughout the pipeline right from end client, to command processing, to read model, back to end client it's all CQRS. That's... in fact almost never the case (despite with the rise of popularity of CQRS, people have started treating it like a silver bullet).
 &gt; As I said sometimes the group being processed is semantic. For example, it can be a part of the domain that Payment #6 covers exactly invoices #10 #12 #16 and #29. I mean this can be for business logic reasons, not simply performance reasons. There are many scenarios where DDD doesn't apply at all: if the performance reasons outwin the DDD reasons, then just build a specific piece of code that solves the batching problem. I think we simply misunderstood each other there... If a scenario is highly focused on batching, then business is also talking in terms of batching, and you may be in luck then (DDD-oriented API matches batching API). &gt; This is why I prefer to separate entities from operations in APIs like that, because it tends to bite me in the ass over time when I don't. It does bite me too, especially when I work on things heavily relying on persistence abstractions. What I would do there is see how many scenarios are batch- and performance-oriented, and how many aren't, and then decide how to center application development. &gt; The lag sometimes doesn't matter, but it's in general poor UX, and your SLA may require a response, and a reasonable response time. Since we were talking about a batch job, remember that it is generally OK to respond with longer times, and that is also accepted by users. I wouldn't tweak further unless there's an actual business requirement that causes lag = loss of money. Both inefficient models described above work well in the 80/20 split. &gt; Having CQRS doesn't mean that throughout the pipeline right from end client, to command processing, to read model, back to end client it's all CQRS. That's... in fact almost never the case (despite with the rise of popularity of CQRS, people have started treating it like a silver bullet). No, it obviously doesn't solve everything, but it really removes a load of headaches that are just not needed. Besides low-latency scenarios (and I'd need to check up with Greg Young's approach, since his domain was in fintech, and they worked with ridiculous latencies), most user-click-speed-scenarios have a command-bus-to-read-model latency being so low that they it isn't really affecting anything. Again: remember to think 80/20 about it. So far, the abstraction provided by an async "trashbin" command bus worked good enough for me for what we as PHP devs commonly do (web form submission, send an email, upload a picture, do some API calls, download few gigs of github repos).
Yea, I guess I'll have to start with one and go from there...
Why? What for? Surely organisations solve that need?
&gt; Are you asserting that you are a more knowledgable, skilled, and talented programmer than that person? I don't see where he ever said or implied that. Sure, /u/ocramius made an _"absolute"_ statement there, but your question is ridiculous. &gt; It seems pretty clear you have kind of sold your soul to a certain view of programming when you approach the whole issue with "NO CASE EVER". You are beyond reason at that point. Beyond trade-offs. Beyond any rational thought. Just a machine slapping the heaviest of solutions on the simplest of problems. I'm not a huge fan of breaking things into such "black and white" statements either, but damn you're getting a bit unnecessarily dramatic here.
One of the things I learned early on is to extend the base Yii classes in order to modify/override any default functionality. This ensures that any supplementary code or edge cases handled in the core are preserved while only changing the necessary bits.
&gt; keep in mind we (Laravel shops I keep in touch with) have also refactored, and not only refactored, but had to totally rewrite applications by developers who were personally influenced by you. That's kind of awkward to lay the blame on /u/ocramius for someone else rewriting their app. What thing so horrible did he impress on those poor souls, supposedly?
No. There is literally no good reason to learn Yii2 in 2017. Laravel or Symfony.
Terrible over-complication of even the simplest of tasks, as I mentioned.
&gt; Alternatively, if you're so insistent that /u/ocramius is wrong about saying there's no case where the third example makes sense, then I'm sure it would be trivial for you to explain a case where it does make sense? Sometimes it can be a handy shortcut in APIs, as /u/utotwel/ mentioned in another thread. Usually, it's superfluous, yet there are examples where you invoke a certain sequence so frequently, the shortcut makes sense, for example: // What you type. domNode.remove(); // What actually happens. domNode.parent.removeChild(domNode);
He's implying OP is faking with two GitHub accounts, but more likely so trolling.
People who had to rewrite their apps from Laravel to something else, or just kind of refine their Laravel apps :-)?
`parent` is accessible to `domNode` in this scenario, since the DOM is basically a tree. The utility method has no hidden dependencies, and encapsulates the concept of `remove()` correctly. I'm not blaming shortcuts that make sense, and actually, DDD is mostly about naming those shortcuts like the business does ;-)
Conceptually in your example the parent would have been passed to `domNode` when it was instantiated. It's not a global at all, so it's not an example of the pattern under discussion.
Of course you have! *Every* framework and *every* language will have *a multitude* of absolutely horrific code written on top of it. I've worked on large applications in COBOL, ASP, ASP.NET, VB.NET, C#, and now PHP and good code has been the exception, not the norm, in all of the languages I've worked in. Probably because good programmers are the exception. Laravel shops will rewrite Symfony and Zend apps / Symfony shops will rewrite Laravel apps, etc. Everyone will take it as proof positive that the other side just "has it all wrong" and will grow in smugness and superiority. Fact is most programmers just aren't that good at what they do. Sounds sad but in my experience it's just the truth. Not everyone is as intensely interested in programming as me or you or Marco, and their code will show it, regardless of the ecosystem or tool.
TBF who cares if OP has... IDGAS
You're not thinking about this carefully. I am criticizing his blind devotion to his views *in all programming scenarios*. His approach is perhaps perfectly valid for some projects. I just don't think it should be forced upon other devs as the "one true way" of doing PHP development.
I must say that I saw some code with `FactoryFactoryImplementorFactoryDelegatorAbstractConcreteSubjectObserverDoerThinger` stuff, and I wrote some of it [myself too](https://github.com/zendframework/zend-mvc/blob/9b705d5d5c7ed3808f8d52b440f612d9dc28c395/src/Service/DiStrictAbstractServiceFactoryFactory.php), and sometimes I still do, [when I don't find a proper English word](https://twitter.com/Ocramius/status/788388696777105408)). I don't think that it reflects my *current* views, since they evolve, when people tell me I'm wrong. I currently view simplicity in decomposing code into more atomic named components that do just one thing. If you don't like having many tiny files, then we most probably disagree anyway. The aim of my current dev practices is to build software that lasts, even while being developed, since the last generation (first-gen ZF, SF, CI, Cake) of stuff didn't really do that. If I do write crap, please feel free to point at it, and describe an alternate approach that is *better*. I own my crap: if it's crap, I don't put Arbre Magique on it and hide it or defend it to the point of initiating a crusade (except with [friends](https://twitter.com/Ocramius/status/818546125078720512)). I simply add it to my repo of crap that I can't fix due to BC compliance, and hope to do better next time.
The full quote was &gt; The approach described here fits any kind of application where there is a concept of Entity or Aggregate. [...] don't inject or statically access domain services from within an entity. I don't think `parent`, in this case, qualifies as a domain service. Nor is `domNode` an Aggregate. And while in some circumstances you could view it as an entity, in context I believe he meant something that is persisted to a database (eg, an Entity as Doctrine deals with them), and it's certainly not that. And if you dig into the argument more, he was arguing against injection on the principle that a newwable type shouldn't have non-newwable dependencies, which is certainly arguable, but in any case clearly doesn't apply to the `domNode` example. So I really don't read anything /u/ocramius wrote in that post or the comments here as arguing against the example you gave.
&gt; I just don't think it should be forced upon other devs as the "one true way" of doing PHP development. No doubt you have an example of /u/ocramius forcing his views upon other devs. Did he break into your office and rewrite some of your code once or something? 
"NO CASE EVER"
FWIW, my "Extremely defensive PHP" talk starts with something like ["these practices are not good for everyone"](https://youtu.be/8d2AtAGJPno?t=71) and ends with ["these are just suggestions"](https://youtu.be/8d2AtAGJPno?t=1645).
Good to hear.
behaviors are an even simplier way to modify internal behavior of a model without overriding existing methods. For example lets say you have a `Ticket` model which when you create it, or update it its supposed to send an email to the person responsible and the person who wrote the ticket. Instead of editng the `Ticket::afterSave()` method you can write a behavior and use it like this. public function behaviors() { return array_merge(parent::behaviors(), [ [ 'class' =&gt; EmailBehavior::class, 'receiverRelation' =&gt; 'creator', 'layout' =&gt; 'ticket/creator', ], [ 'class' =&gt; EmailBehavior::class, 'receiverRelation' =&gt; 'responsible', 'layout' =&gt; 'ticket/responsible', ], ]); } That way if later you need to use the same functionality for another model, lets say 'Purchase' model will send an email to the seller or the buyer you don't have to write any line of actual code. [READ MORE](http://www.yiiframework.com/doc-2.0/guide-concept-behaviors.html) 
I was using it on windows with a windows stack (Laragon to be specific). You say that you are using homestead, but that creates an ubuntu environment to run lumen, thus that would support the theory that it doesn't work on windows but does work on linux and mac
phpper codes a heckin' big bundle
And I've had to come into 2 separate companies with code written in Laravel. Where it was a pain in the ass to refactor because it was so coupled to the framework, that the only way to clean it up a complete rewrite to get rid of all the "magic". Now they are actually written in something where it was simple to remove bundles and port the code to other projects. There's also a difference between doing something easy and doing something maintainable, scalable and smart.
I think the people who would find this helpful would find knowing what some of the commands/config settings do helpful
It is very easy to write portable code on Laravel. You just need moderately competent programmers who set out with that goal in mind. Somehow, despite Laravel being such a terrible tool, I've been able to maintain now 3 successful products built on it with 10,000+ paying customers and me alone as the only programmer. It's been great actually. A joy to maintain.
Keep in mind Composer/Packages concept is a major addition to many frameworks, and gives you the ability to include many libraries from thousands of developers. Second item to consider is ORMs vs straight MySQL commands. Something like Redbean ORM plus Slim (Micro framework) make for an easy match, where Laravel has Eloquent ORM built in. Then you have to decide if you like Template engines like Twig (Symfony) and Blade (Laravel) , but you could bring those engines into other frameworks using Composer. Also a note that MVC in something like Codeigniter is pretty linear, where your url will match directly to a controller method vs others that rely heavily on Routes that can point to various controllers. Then there are some compiled frameworks like Phalcon, Ice, and HHVM if speed is your thing. 
I've dabbled in Yii and have always found its documentation extremely unhelpful and confusing, whereas I love Laravel's docs. You'll have to go code diving from time to time no matter which framework you choose. It's interesting that you had the exact opposite experience.
Mixing types is a bad idea in 99.9% of the cases.
Here is quite massive list of shortcuts as it was discussed here a few months ago https://www.reddit.com/r/PHP/comments/4m5zzk/what_are_your_tips_on_phpstorm/
Ctrl+g let's you jump to a line number.
Drupal or GTFO
Well thanks for this elaboration, it's kinda overwhelming to start with these frameworks and libraries because everywherev I've read it says choose depending on what you need. But I don't know what I need lol, though this helps out a bit. Thanks
Doesn't implement all the specs, not even the majors one (I'm especially thinking about Implicit Grant), more than a hundred issue open and increasing, author has left the project and it's basically forsaken now.
&gt; Nor is `domNode` an Aggregate. I'd argue that the closest aggregate-root would probably be the whole DomDocument (or possibly fragment.) 
Had to implement Varnish at work and handling the Cookies was an interesting topic to master in Varnish. Luckily we are using extensively ESI tags and that helps
Genius!
Ctrl+Alt+M ..refactor a certain code chunk into a new method (automatic return statements, parameter passing) 
You can take a look at https://twitter.com/phpstormtips
my favorite is: ctrl+ctrl (keep holding) then simultaneously arrow up / down -&gt; lets you get multiple cursors on multiple lines
I'm using PHPStorm 2016.3, and it's working fine for me. I'm using docker-compose locally to start multiple machines. PHPStorm doesn't integrate with docker-compose, so I have to manually start my linked containers first. My project is plain PHP (with a MySQL DB + Memcached), so there is no webserver. 1. Add a remote interpreter for Docker: https://i.imgur.com/UpnNaC9.png 2. Once created, you need to edit the settings to link the containers and set the correct network: https://i.imgur.com/ASZCVa5.png 3. Run PHPUnit like you would normally with a remote interpreter. One problem I have is that I'm no longer able to use the 'Rerun failed tests', but I'm haven't tried the latest EAP builds.
Thanks I'll be trying that soon! 
And im sure she earns PHP as well
laws can be chosen empirically. Examples: - Law of demeter - Liskov Substitution Principle - etc..
[removed]
This is written on India's national flag: mysql_injection() or die(); 
Okay.
"Miss Universe" is so racist! There are only women from Earth are winning!
That's business for you buddy. People lie, cheat and screw everyone out of their way to make a buck. Sorry to hear about your bad experience. Let your client burn and come back to you. 
I love SEO spam articles :)
Oh wow, nice! What's your most common use for this?
If they didn't want to do it in PHP, then what were they proposing as an alternative?
I think when people say app they mean web-app as opposed to something like a static web site. 
That's pretty cool! Kudos to anyone who can make programming seem sexy.
The API could be powered by PHP.
i've seen this kind of shit too many times, but fun fact every time we proved php was better. We won over a big client by being able to develop a simple csv merger in less then a week, while another big company was telling them we would fail and php was bad. They spend 2 months creating the same tool, is was slow, ugly and hard to work with :) So don't let these thing bother you too much, it sucks but nothing we can do about it except educating our clients. 
With my company I am currently doing work for a Fortune 500 company, mostly back-end. Another coworker is taking care of the front-end. Originally when we were hired to do their work, it was front-end only. They had another team that did all the back-end work. It was completed in C#; however, our client really dislikes that other company as they are pretty incompetent and take weeks to do the simplest change or bug fix. So they asked us if we could start building full solutions for them. We said we're a PHP shop so our back-end development would not be in C# or any other .NET language. They came back and told us that PHP was banned there. We asked why and our contact said he didn't know, it was just banned. We eventually convinced them that PHP is not bad, and so we did a pilot project for them (which brought me into the mix) which ended up exceeding their wildest expectations and now they have almost phased out the other company as all new solutions are going through us. I don't understand the PHP stigma either. I think at one point we heard that it was banned because it was open source and there could be unpatched security vulnerabilities. To which I face palmed because that implies closed source software is bulletproof, which of course is not even close to being true. EDIT: Coincidentally we do a lot of work with CSV files, too. =]
I recently used it to change the visibility of a bunch of properties in one go. I also use it when I'm trying to clean up array-based configuration files.
I like ctrl+shift+(up or down arrow) for moving a selection or current line around. I use this re-order my use statements for no other reason than to make it look cleaner. Also I use it to move my private methods to end of the class, as well as, move my properties to match the order they are in within the constructor.
I want to commend on this RFC so bad right now :)
I have no idea what they use but based on previous exports I've done where I had to speak to the developer on the other end it seems the realm of real estate websites is full of graduates from 1 year Ruby on Rails courses who have only been working as full time developers for less than 3 years. Not that that's a bad thing. I've had good experiences working with such people 75% of the time.
Personally, I found it rather difficult to get it working as well (despite what others have said) until Jetbrains updated PHPStorm to use a Docker container in the remote interpreters as /u/giggsey pointed out.
"I do all the coding for the app". What about the two guys in the room? They must be the arm candy.
I don't like to get into these kinds of discussions as a developer who's grown with PHP since v3. PHP has the right to be misjudged, as it is only recently that it has started coming together and showing maturity (compared to Java, for instance) This misjudgement will continue for a while. Get used to it. The BCC you got was from someone who doesn't know what they are talking about. As mentioned, possibly business shit-talking is to blame there. OP, keep coding and making awesome software in PHP, it's the only way to get the language to stop suffering from these bullshit accusations. 
Then there is (sorry) a valid reason they were so easily convinced to check another solution. It's easier than you think to rely on a framework, especially when you have the experience of hand-coding everything. 
if she works in the philippines for sure she would.
(You're) (not) (my) (real) (mom)!
So you think this comment contributes to the discussion?
Frankly, it contributes to this discussion exactly as much as this entire post contributes to the subreddit.
&gt; All frameworks are by definition slower than no-code as there's more going on. Mind. Blown.
I wrote an article about [fixing bugs in the PHP core](https://www.sitepoint.com/contributing-to-php-how-to-fix-bugs-in-the-php-core/) that you may be interested in. It does sound like the segfault you're receiving will be more difficult to track down than the simple example I gave though, so I'm not sure how useful it will be.
Don't know... I will still be able to concentrate though because as a geek, I tend to ignore the presence of hot chix whenever I'm in the zone...
So what?!
I had the same experience yesterday about a PDF splitter. PHP solution ~40 hours using FPDI. Java solution ~3 weeks and requires licenses.
I don't like it.
Ouch.
In no particular order, and not a complete list: 1. Get comfortable with [Composer](https://getcomposer.org/download/), the goto PHP package manager. Browse through packages on packagist.org. You'll learn very quickly that you don't have to reinvent the wheel with every single new task. 2. Get comfortable with the git command line tool for version control. 3. Especially when starting out, reference phptherightway.com often. 4. Learn about the model-view-controller (MVC) pattern. It's not the only way to go, but it's very common across PHP frameworks 5. Speaking of PHP frameworks, I believe that once you have advanced your base coding knowledge to a certain point, you should start trying out some different frameworks. They do all of the heavy lifting for you and can really speed your projects up. Personally, Symfony is my favorite. Laravel is another very popular choice. 6. Do yourself a favor right now and make sure you're using PHP 7, not 5.x. There's no reason not to. If nothing else, the speed boost alone is worth it. 7. Try using Sublime Text and exploring the many packages and options available for it. Also give PHPStorm a shot. The former is a text editor with some plugins that can make it function more like an IDE. The latter is a full-blown PHP IDE that will really make your life easier.
Check out PHPStorm as an IDE. Learn how to use XDebug and learn to embrace your debugger. Check out http://www.phptherightway.com/ 
You cannot blame the tech department of the other company. Larger companies have usually aggressive salespersons that promise you everything imaginable in very short time, even if they totally do not support any of these and the tech guys would riot. They just want a contract, trying to grab some money or lock you in. Nobody really cares if they can get it up and running. On the other hand the customer is usually too forgiving, they likely do not want to give up on all the time and money that went into it. It sucks, but you cannot change it because humans who make the decisions are ignorant and dumb. PS: What you should do is making an offer and ping the client about it every 1-2 months.
I typically use ~~ctrl+alt+shift+left click~~ alt+left click for the same type of thing. EDIT: I don't know why I was using all those buttons, apparently alt+left click does it.. I don't use the feature all the time so I just start trying combinations until it works.
Upvoted for having MemAvailable in there.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I would strongly suggest to inverse the logic. Instead of removing unneeded cookies you should keep those you need. In many cases only the session id is important, which is just one but client side cookies are an uncontrollable moving target.
It is not a solution to prevent including. It is a solution to allow including from a specific path.
Good luck making it fast. You may squeeze a few miliseconds off but something impressive like "just" 2x slower than baseline will be impossible without extreme changes or cheating.
I've been with php since v4 and yeah I totally agree. The barrier to entry being so low cause a lot of idiots to give php a bad name. Though I use another language now I still know it's possible to do things correct in php and like always use the correct tool for the job.
Facebook is a PHP shop... Pretty sure they have data mining down pat.
Can't say how long you'll need. But for a refresher, I'm using the php docs chm file and the book Programming PHP (Rasmus is one of the authors). I've seen that Treehouse and Laracasts have good videos for PHP.
As a Ubuntu 16.04 user, after reading this, I kept digging. Alt+Click, the default binding in PHPStorm 2016.3.2 can select many different selections on many different lines, but Ubuntu has that keybinding mapped to Move Window. In PHPStorm I changed: Setting -&gt; Keymap -&gt; Add or Remove Caret -&gt; Alt+Shift+Button1 Click It's a festivus miracle.
Doesn't everyone run phpOS on their phones?
Sounds like you need a database
That's not really what she said. They could have skipped over the fact that she also uses Java.
You don't need to go backwards. Key into the name of the template (at the top level), see what's there, and those are your template variables. You're probably making this more complex than it has to be. In short, go into the array, not out of the array, and the problem goes away...
i like her less if she's being used by US businesses to undercut wages of US developers
`Alt + J` - Works like `Ctrl + D` in Sublime. That is it selects the next occurance of whatever you have highlighted. Works well with `Ctrl + W`, which expands a selection from your cursor. Also, normally you'd use `Ctrl + Left Arrow` to move the cursor to the previous word, but you can also bind the same thing in "CamelHumps" mode, which can move the cursor to different words in a CamelCase word. I have it bound to `Ctrl + Shift + Alt + Right/Left Arrow`
You sound like you have a sort of base already, so [PHP The Right Way](http://www.phptherightway.com) should be an excellent refresher.
nothing wrong with a quick peek
I must've become smarter this morning because I figured it out: function normalizeTemplateVars($vars,$templates) { $expand_vars = function($parent_key,$parent_value) use($vars,$templates,&amp;$expand_vars) { if(!is_array($parent_value)) return $parent_value; $tmp = []; foreach($parent_value as $item_index =&gt; $item_value) { foreach($item_value as $k =&gt; $v) $parent_value[$item_index][$k] = $expand_vars($k,$v); //mergeAndPurge just replaces variables in template $tmp[] = mergeAndPurge($parent_value[$item_index],$templates[$parent_key]); } return implode($tmp,PHP_EOL); }; $ret = []; foreach($vars as $k =&gt; $v) $ret[$k] = $expand_vars($k,$v); return $ret; }
I'm populating a shipping confirmation email...email can have multiple shipments...each shipment has a list of items in it which is why I was trying to resolve nested templates for both shipments and items in the shipment. I figured it out here if you're curious: https://www.reddit.com/r/PHP/comments/5qc3gu/is_it_possible_to_work_backward_from_leaves_of/dcy6rjm/
Ok, but no tongue. 
That's super complicated. You could use a templating language and your life would be easier.
Are you wanting to refresh PHP in general, or in the context of a framework? I personally use the Laravel framework and based off your experience with Symfony it would be a fairly easy transition. If that's the case, check out Laracasts. Othewise, I'd hit YouTube as they have quite a few courses that focus on the many aspects of PHP development and even have an app they/you build as you watch and learn. 
I have enjoyed reading Rob Allen's blogs for many years now. I think someone may have hijacked his account. The more a code does the slower it runs? This revelation is worth a blog post?
have just started working at a PHP shop after 3 years at a Python shop. don't be under any illusions. PHP is a much worse language than Python. it's one of the worst languages I've ever used. that said, it doesn't actually matter very much. it's worse in ways that are merely annoying and not really crippling. the language deserves its bad reputation because it is poorly designed. it still works ok though. it's still the lowest cause of concern on my list of concerns. management, prioritization, team dynamics, and company culture are all vastly more important than which programming language you're using. what you're dealing with here, however, is a third party developer that is bullshitting you because they think that's less bad than telling you the truth which is that they are probably understaffed and have incompetent developers. 
Thanks for the response! I can get things done SO fast with codeigniter, I can prototype stuff so easily with the HMVC extension that I felt so unproductive moving to doctrine/symfony... I still want to learn it but for now the schedule demands CI. 
Funny you should mention it, but Bootstrap and jQuery-&gt;ajax are giving me huge bang for buck right now. Thanks for the comment.
You are absolutely right.
Looks absolutely brilliant, cant wait to try it out!
wat
&gt; The low barrier to entry (ease of use, availability of hosting) means it is easy for beginners to shoot themselves in the foot I think this one has the most effect because there are even paid people who write bad code, which makes PHP look bad. It's really frustrating when I have to explain the difference between a bunch of PHP scripts with zero OOP vs using a framework and the whole MVC setup to a manager who just sees it as "it's just PHP isn't it?" It's like yes, but it's a school kids poem vs Shakespeare.
"There are just two kinds of languages: the ones everybody complains about and the ones nobody uses."- Bjarne Stroustrup 
Excellent! And, you could now share templates between front end and back end, so you could pre-render some content and defer other content rendering until later.
&gt; PHP is a much worse language than Python. it's one of the worst languages I've ever used. Now that's a solid argument right there.
obviously this is subjective. do I really need to preface everything I say with "this is my opinion"? if it makes you feel any better, PHP in 2017 is fine and all of my issues with it are aesthetic. That wasn't true 5 years ago, where I found the language to actually be missing important features. 
Actually there is no meaning in comparing how much is something slower..for example the Symfony full stack framework takes 12ms to load on my mac..no one cares if it is 10 times slower than plain PHP..because it is 12ms..no one will ever notice the difference with human eyes :)
Is it HER fault if businesses do that? You think her goal in life is fucking over American workers? I don't think you should hold a business's hiring practices against someone who decided on an in-demand career in a country with 180 million people below the poverty line.
She also does all the graphic design, project management and server admin?
Because today's coder isn't allowed to admit he finds women attractive. Or that women can even be attractive. Or that they're women. Or feminine. Or any other fucking thing, because we're all delicate, androgynous flowers.
Isn't C# also open source now?
It is the worst ... out of two!
country's official MLS... Damn I wish the USA had one of those...Dealing with RETS data from multiple MLSes has got to be one of the worst developer experiences in the milky way. For a standard, it sure isn't very standard except for the fact that it returns glorified XML
~~Yeah, and some random person who just says "I don't like it" gets upvoted.~~ ~~How about the community shows some maturity and professionalism and gets over their past grievances with you.~~ edit: Nevermind
[did someone say sexy?](https://imgur.com/a/1EKg1)
At what point did I say it was her fault? If our roles were reversed, I'd do exactly the same thing. My real problem *is* the stupidity and shortsightedness of US business but that's not what we're talking about here
You said you like her less. So you either blame her, which is bad enough on its own, or you understand her situation and still like her less, which is actually worse.
I can't dislike someone for their involvement in a situation I don't like? 
It's not that great. They rent the software from americans so I assume the interface used to manage it is overflowing with stuff irrelevant to us. Also every realty company has their own personal opinion on how best to organize the heirarcy of locations within our country. Imagine if everyone had their own slightly different opinion on how cities, counties, and states should be nested. Half of them have opinions that are the equivalent of making Manhattan island it's own state and always listing it at the top of &lt;select&gt; options instead of alphabetically. This is further complicated by the MLS having both subdivisions and gated communities and wards and voting districts and something else and some users use one or the other or none. 90% of my import code is about deciding what to do when a particular place name appears in a particular field, oh and handling typos. I read some of the RETS stuff. I understand why it is what it is. Thousands of realty companies already had their own from scratch system with different variations of the same ideas.... everyone has fields that do the same job but they all use a different name. So to a certain extent it makes sense but trying make something soooo flexible to allow all those bespoke systems to be imported into it creates a massively complex document. And the writing style and formatting just makes it worse. There's probably a very well thought out system buried in there but it needs a human's touch to brush away the layers of xml purist chicken choking and expose only the most relevent information simply.
YOLO!
Which is not native either.
*They took our jooobs!*
&gt;PHP was banned Usually, it's because companies like these like to have some big shot name behind the language and ecosystem they're using. Makes them feel safe. C# - Microsoft or Java - Oracle. Hell, look how long it took Linux to enter the enterprise... not in my country, though... while everyone's developing web applications with PHP, Python or JavaScript (maybe a bit of RoR) here, the government strictly uses ASP for their stuff, along with early 2000s web design.
Which part of "joke" did you not understand?
Nah, we gave them away
How are you reading from the website? Are you forgetting to check the status code before adding data to the database?
I don't know php that well and I found snippets of code through stackoverflow. Basically this is my code to load the webpage. $itemUrl = "URL HERE"; $handle2 = curl_init($itemUrl); curl_setopt($handle2, CURLOPT_RETURNTRANSFER, true); $html2 = curl_exec($handle2); libxml_use_internal_errors(true); $itemDoc = new DOMDocument(); $itemDoc-&gt;loadHTML($html2); 
Have you worked at a Python shop or at a Flask/Django shop? Did you really write vanilla Python and then switch over to vanilla PHP?
You need to use [curl_getinfo](http://php.net/manual/en/function.curl-getinfo.php) to find the status code of the request.
Codes from 200 - 299 are all success codes.
curl_exec will also return false if the request failed.
I did. PHP is worse.
&gt; Let's face it: PHP is a language with a very low entry barrier which means there are many incompetent PHP devs out there, very likely more than with other languages. While I shudder at this fact, it's also what made the web dynamic for the masses. Before that, websites were merely used for business contact info, and maybe a "webmaster" would edit an html file here and then with some news. Dynamic websites before that were reserved for the big shots. PHP is also one of the first languages out there which made stuff that was easily visible and accessible to billions. Wrote a shitty C application? Scanf-ed your way to a buffer overflow? Yeah, who cares, it's just on your PC. Wrote some software in Delphi to read from the disk and didn't implement correct error handling? Eeerp... but who cares, the app just crashed. Made some godawful accounting application in VB6? Yeah, 10 people are gonna use that and no one is going to even dare complain about it... C#.net type error in your winforms project? Meh. With web development, everything you fuck up can explode in your face big time. The data on your server can be accessed, your server can be 0wned, embarrassing errors will pop up for millions to see. It's a whole different world, and a scary one for noobs to be in. Hell, I just tried to grab a new health insurance card for my mom online so she can get it by post, and our government website (ASP.net) just spat out an error at me after choosing a field from a combo box and hitting "submit". Works fine in Edge and IE, so I'm guessing a javascript plugin is misbehaving and sending bad data, and the poor backend ASP application is shitting its pants.
I don't follow... You wrote *vanilla* Python for what purpose exactly? And you switched over to a web-oriented language such as PHP?
This is the right analysis of the situation. Very well put.
Hack is backward compatible with PHP. Also, I don't think they've rewritten everything they have. Hell, a local who worked for Facebook a year ago said he exclusively wrote PHP daily. &gt;Plus they don't use PHP exclusively. You *think*? If you wrote a web application in RoR, you're not gonna write face recognition software in it, are you?
You can't be smart AND use PHP. At least this is what my mother told me when I was graduating my college. "Learn Java or leave my house, you filthy ape". "But mom, my friend's gf became miss universe and she uses PHP to build her success!" #/s
Ctrl-F12 - list of methods or fields in database table view
 python is pure shit no really, it sucks shit, I hope these whitespaces are correct
I think it's Javascript now.
I want to say something about your git repo organization but I really don't know what to type. So I'll just say that it might look great and organized, but it must be painful to have to edit the same file 9.10^3 times the same thing on all files.
The framework is rarely a bottleneck. If it is, you already know that from the get go, and you're likely exploring other languages or not using a framework at all. For most people, being concerned with framework speed is beyond silly. Hardware is cheap, and you won't need it until you have tons of users. At that point, you're likely a few years in and know a lot more about what your architecture should look like than you do when you start.
Still, you can scale it and increase your capacity. You can't scale out to increase your single request response time. Not saying it's not a potential issue, but it's solvable when it crops up. 
Another thing I find common is complaints about the standard library function names and inconsistencies. But what is interesting, is PHP has one of the best fucking standard libraries you can ask for in a programming language. I presently work mainly in JS, and JS is like a fucking wasteland in comparison. You need 2mb worth of userland libraries just to get close to what PHP gives you for free. I was trying to give Elixir a go a while back, and they still didn't have a proper datetime library. PHP's standard library may be ugly and inconsistent, but it's ridiculously robust.
Shazbot!
Well thats what our uni professor always told us. He told horror stories about PHP, hence named "PHP- The toilet language"
Cringe
Any text editor will fix your spacing issues.
I agree that Python is better for coding but I don't understand why anyone would switch from Python to PHP (or the other way around for that matter). They are to similar to warrant that change. You are not going to gain much. 
Use something like KeePass. Make sure to use a long and user friendly password to encrypt the file because the only place it should be kept is in people's heads.
If you've already used Zend and Symfony (Which versions btw?), Then you could probably pick up the newer versions of those with relative ease, a few things have changed since the 5.3 days thought, you can find more information about that [here](http://php.net/manual/en/appendices.php)
&gt; country's official MLS Major League Soccer? Please stop using unclear abbreviations on international forums.
Boilerplate your code bro =p
User agent strings are totally fucked, but nobody wants to risk being the first one to replace them
It has nothing to do with past grievances. I earnestly do not like it.
This is quite an unfair, perhaps dishonest, comparison. You are the creator of Laravel. You are the one that single-handled reviews, rewrites, and merges all pull requests against Laravel. You are the one that knows Laravel from top to bottom, and probably remembers every single line of code. You probably add new features to the framework as you need them in your applications, and refactor the applications as the same time new features are added. Of course you will have no problem maintaining it. Your framework is targeted at beginners, said multiple times. And moderately competent programmers won't write applications in Laravel because they know the pain of keeping it up-to-date with the framework, as everything (domain and framework code) is a tangled mess.
which library you use? and styling a pdf file is boring and hard at every language.
Why not AWS and an EC2 instance - it's got some nice management tools and pretty easy to configure. But it's a VPS and you'd need to know sysadmin stuff, but there's resourced to learn all this. I find DigitalOcean have the best tutorials. https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-redis-on-ubuntu-16-04 https://www.digitalocean.com/community/tutorials/how-to-upgrade-to-php-7-on-ubuntu-14-04 ---- **Edit** I'd choose [Heroku](https://www.heroku.com/) or [IBM Bluemix](https://www.ibm.com/cloud-computing/bluemix/) - those are focused on the developer being the developer and sysadmin role is fulfilled by them - to some extent. Heroku is my preferred out of the two.
Why? https://imgur.com/3uBJVk4
That's hilarious, who is this dude?
Aaa what a great article. The last part was 5/5. "And then Google built Chrome, and Chrome used Webkit, and it was like Safari, and wanted pages built for Safari, and so pretended to be Safari. And thus Chrome used WebKit, and pretended to be Safari, and WebKit pretended to be KHTML, and KHTML pretended to be Gecko, and all browsers pretended to be Mozilla, and Chrome called itself Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13, and the user agent string was a complete mess, and near useless, and everyone pretended to be everyone else, and confusion abounded."
The only ones who dare use a different user agent string are bots.
I actually got my 45+ years of programming awesomeness uni prof (brilliant lad that worked in theoretical and bleeding edge practical stuff in his carrer) to revise his judgement on php last year. php5.6/php7.0/php7.1 aren't the nightmare php3/4 were. And the tooling/frameworks are mature now.
We all know the platitudes, but it never stops being annoying browsing the site of a local business whose Wordpress site has response time of five seconds, on average. 
So many "and", i'm gonna dream about that word tonight. Good read though, 4/4 would read again.
Any criticism is greatly appreciated. Can you maybe elaborate a bit? =)
Richard Stallman. You really haven't heard about him?
Java is still **not** a native language. It compiles to bytecode.
Oh, sorry, it's the other way around. I code vanilla PHP 5.4 on a daily basis (gotta maintain those legacy systems) and I know Python without the fancy django/flask stuff. I prefer Python by far. PHP 7 is pretty decent although I still don't like the type coercion rules. I like Python's strict typing (altough static type hints would be a great addition).
&gt; How about the community shows some maturity and professionalism and gets over their past grievances with you. AFAIK dracony didn't even admit or apologize for what he did. Or take any steps to demonstrate that he grew past using immoral tricks to manipulate developers into using his framework. What I have seen him doing instead is denying things for which we've seen irrefutable proof. Like the obviously computer-generated reviews, the fake github stars, and the artificially inflated packagist download count. He's also known to use more lies to cover up lies. Like that time when a russian developer wrote a confession for artificially inflating those packagist numbers, but that russian developer's IP address was the same one as dracony's. Did he apologize or show remorse after that episode? Nope, he kept on lying. He's an [unprincipled narcissist](https://en.wikipedia.org/wiki/Narcissism#Masterson.27s_subtypes_.28exhibitionist_and_closet.29), and if you can't see that, you're the one with a problem, not the rest of the community. Think of it this way. The people who use that framework he keeps trying to push, do so on false pretense. They probably checked its reputation and usage to make sure it was tested by the community and that other developers/companies have a stake in it. They concluded that should dracony abandon it, or get hit by a bus, there are a few thousand developers out there who use the framework and would likely take over the maintenance. And that there are other users out there sharing the burden of finding bugs and security flaws. Which turned out to be false. For dracony it was more important to be seen as an important figure in the community than that the users of his framework know the huge risk they're taking in adopting an otherwise unused framework. If you don't think it was their right to know the real usage and the real reviews of that framework, then you might be as psychopatic as he is. If you're sane, stop white knighting for a narcissist.
https://en.m.wikipedia.org/wiki/Multiple_listing_service 
Hi troll. Yes I am embarrassingly noobish. But in this particular case I know that I have the experience to do what the client needed in a fraction of the time.
I don't. Every time I suggested doing so I'd get a stern speech about how I better know how every line in the library works or else when something breaks my ass is grass. Off the top of my head I can only think of 2 3rd party libraries that might be in all of our projects and those are things the boss chose. I don't do the presenting or the businessing. I'm just the code monkey who gets sent outside whenever company comes over. So I just kind of stopped learning things so I would stop having the urge to suggest things long ago.
Got a pm from somone who knew exactly who I was talking about. According to them they company uses a 3rd party library with a web ui that loads the xml data on the left and shows their desired data structure on the right and allows dragging and dropping fields from one side to the other to indicate "xml.baths data should go into our full_bathrooms field" and where necessary apply simple filters like "force this to be an INT". But if that's the case then I **really** think they had no idea what a csv file was because they could have simply converted the csv file to an xml file that is simply an xml version of exactly the same flat data from the csv file and then used that with their xml import gui tool.
this is the only comment that matters 
&gt; performance wise Dude... HHVM runs Hack. Yes, that very same HHVM that runs PHP which is just a bit slower/a bit faster than PHP7.x. It has nothing to do with the language itself. Hack was created for easier and more powerful development, not performance. (not *my* claim, but the claim of Facebook developers)
Jesus effin' Christ... I'd expect a professor to be at least somewhat in tune with the latest releases of various programming languages and technologies.
&gt; Actually even with the heaviest frameworks you can do about 600 r/s That kind of depends on your hardware, and what your framework-using-app is doing, but I suppose if we'll pull out numbers from out behind, it doesn't matter :-)
Because PHP core is taking its sweet time adding it, and we need to make an example. Also I've seen some horrible syntax proposals for this in RFCs... like `|$x, $y| $x + $y`. That's the real "why". :-) It doesn't matter if the array operator collides, we can have precedence.
Should have added a little context to the title. tl;dr for anyone out there: one man show, 14 years strong, but his focus isn't on the php ecosystem atm. So if you aren't already, switch to https://deb.sury.org/ for PHP 7.X installs/upgrades.
Ohh really? What you write abut semicolons in 10 pages. Very curious to know.
What were you using before Node?
&gt; PHP5 has just more keywords to keep you busy. I'm going to say this as calmly as possible, they have a reason to exist beyond keeping you busy...
Thanks for the explanation. It's definitely not my intention to stand up/champion for someone who is unapologetic for their wrongdoings.
This is more poorly written than Indian blogspam.
This makes your company and your codebase sound *horrible*. I get it that it's ironic that the company that's trashing you guys can't seem to get the job done, but... ...stuff like this is *why* the anti-PHP views exist. :( I don't mean that as a criticism of you; obviously you have to follow corporate policies. But as a PHP developer working in a PHP shop who enjoys writing PHP, this is just horrifying. If one of our clients asked our opinion about using your company for a future project, and showed us examples of your coding style, we'd tell them to avoid you guys at all cost. Sometimes it's not the language. :(
It sounds like you need a new job. Writing bad php code and not learning new things is only hurting yourself. There are plenty of well paying php jobs out there that use newer technologies/frameworks. By sticking to the "old" way of coding you will have a harder time finding another job later.
bazinga!
If I wanted to read 1 Chronicles, I'd read 1 Chronicles. Just kidding, I enjoyed it.
:-) 
Here's the summarized drama with sources, if anyone wants to verify what I said above: /u/AndrewCarterUK exposed that he [faked 95% of the PHPixie installs](http://andrewcarteruk.github.io/programming/2016/05/09/phpixie-fraud.html). He used this fake rise in popularity as an argument [when he applied for FIG membership](https://groups.google.com/d/msg/php-fig/zrEvMBOL_TU/oBnyb_kwDwAJ). When this was brought to the attention of FIG, someone showed up [to confess](https://groups.google.com/d/msg/php-fig/cjLBp2weYaA/BDwa8y8QDgAJ), but then Andrew [proved that the e-mail was sent from dracony's IP](https://groups.google.com/d/msg/php-fig/cjLBp2weYaA/rAAubJQqDgAJ). Then there's the [sitepoint survey fraud](https://groups.google.com/d/msg/php-fig/cjLBp2weYaA/oijWaSGeDQAJ). 60% of PHPixie users had more PHP experience than programming experience, and they all had rand(1, 6) in both. This guy's [analysis cements that allegation](https://www.reddit.com/r/PHP/comments/4iju97/95_of_phpixie_installs_on_packagist_are_fraudulent/d2zlhlx/) Dracony [bragged about those results on twitter](https://mobile.twitter.com/phpixie/status/582490126137294848) And lastly, there's using [sockpuppets to respond to his own threads](https://gist.github.com/AndrewCarterUK/96bf6fae02ef8b93f93b). The ultimate irrefutable proof here being the fact that reddit admins (not subreddit moderators) have temporarily suspended him for doing that. To this day he's yet to admit to or apologize for any of that. Anything to add, /u/dracony?
I think you're looking for /r/phphelp
tnx, I'll resubmit..
Cool, please let me know how it goes and if there are any issues/suggestions!
Would be for actual program code. But sometimes you might want to open big mysql dumps or similar.
Okay. You do you, man.
and?
I don't. I was talking about the languages themselves. Php got far more quirks, that's my point.
&gt;I don't. Every time I suggested doing so I'd get a stern speech about how I better know how every line in the library works or else when something breaks my ass is grass. Oh, I thought you owned the business. Sounds like you work for one. That changes a few things. I suggest you start looking for another job ASAP.
Looks like you're using the simple membership plugin. A quick look at the documentation shows that the filter you're trying to use adds hidden fields to a form (the one used to checkout via paypal). The idea of the hidden fields then, will be to pass additional information over to Paypal when a user buys something/checks out. Is this what you're trying to do? Anyway, if you look at this page: https://simple-membership-plugin.com/simple-membership-filter-hook-reference/ There is an example at the top, showing how to use filters. In a nutshell though, you call 'add_filter' passing in 2 values. The first is the filter you wish to use, and the second is the name of the function you wish to call when the filter executes/is called (this is the bit youre missing currently and your call to 'add_filter' is probably doing nothing).
Thanks for being calm, but I won't help you with that. Best example is namespaces. If you think deep about what problems they solve and how much more work they cause they are - at this state - just inefficient.
Put it in a table, it'll look better
You say you have good rules, but I can see no good examples? Something that Julian Assange said to Eric Schmidt in his interview: &gt; So we all have words for different objects, like "tomato." But we use a simple word, "tomato," instead of actually describing every little aspect of this god damn tomato because it takes too long. And because it takes too long to describe this tomato precisely we use an abstraction so we can think about it so we can talk about it. I think the problem is simplified and not even a problem of namespaces. Humans are really bad at coming up with sensible names and even worse at categorizing things or even talking about all of those. Even if one person would be good at it, it is probably impossible for him to teach a whole team to do it. We want to have a simple name that we can talk about, but also a descriptive name that tells us more details. It is a inner conflict not easy to solve. The only thing that recently touched these problems are Bounded Contexts of DDD. 
Anyway I actually challenge you to prove that there was anything wrong with the statistics when I applied for membership. Andrews post showed spikes only months after I was already a FIG member. The meme that it has anything to do with my entrance vote was just started by some off the rails comment like yours. Check your sources before making such claims.
&gt; Instead of the client typing in their login info on our page, they can instead click buttons on our page that will popup a login page from the respective social media service, they login, and will let us know if it was successful without ever sharing their login details with us? Precisely. Make sure to also request the permissions for the things that you plan to do with users accounts (post to facebook wall, tweet, etc).
Double-shift short is similar to the Find File, but works pretty fast, and orders recent files first.
You certainly can. Does it make you a bad person? Yeah. It really does.
I think I proved enough actually. 90% of what I said above could be bullshit and you'd still be the asshole.
Now what part of this entire exchange has left you with the mistaken impression I care that you think I'm a bad person?
I don't really plan on performing any actions through the API from our site besides verifying their credentials. I really just want to be able to access their account on the social media platform and perform my actions directly once we know their login credentials are correct. Is that possible? I don't necessarily need to know their plaintext password, just for them to enter it and once access is granted, I can get onto their social pages.
And?
/r/lolphp
No, you made a claim that I cheated FIG when I applied for membership. You cant just handwave it away with "I think I proved it", either stand by your statement and proce it or withdraw it and admit to making shit up. Instead of any kind of proof you just linked to my application thread and thats it. Come on, dont chicken out now.
I'll take that back as soon as you admit to the rest.
Why should I waste effort on somebody who doesnt stay by his words?
I would say Sury is *the* deb package for PHP and has been for some time now. 
Did you try it? What happened? Check your JavaScript console. 
can I Launch PHP command in Heroku? 
Yes, I believe so
I know not everyone's uses IDEs but with a good one I find it doesn't really matter for vendor libraries
Well, I said "think", and that 10 are still perfectly valid. 100 sounds extreme but in comparison I agree: &gt; I'd rather work with 100 properly named classes in a single namespace than with 100 non descriptive ones scattered around 20 namespaces. Emphasis on "properly named"
Well put, thanks both of you &gt; You say you have good rules, but I can see no good examples? I guess I'll better add some, but hope the idea was still clear.
and then?
I liberally violate the "don't put classes where you have subnamespaces" though :-) I actually have a pattern that requires it: ModuleName.php // &lt;-- Public API class for a given module or project. ModuleName/Internal.php ModuleName/Implementation.php ModuleName/Of.php ModuleName/The.php ModuleName/Module.php In a way, it makes sense. Instead of making users dig through docs to find which the "main" class is, just put it at the top, and "tuck" all the rest in a namespace. 
We actually picked up something in a US customers Google Analytics for UA and other browser / client defined strings https://twitter.com/LewisCowles1/status/805042696092053505 It's essentially a pump for trump although I'm not sure who it was aimed at? Surely anyone with the IQ to read it, likely wouldn't be swayed by a user-agent string...
The default name tends to matter more with IDEs, as by default most IDEs will import the namespace (i.e. add the "use" statement) and use that default name.
I don't think you understand the problem namespaces some then. They're not perfect but they're vastly better than not using them. And on any non-trivial project it is *absurd* to suggest that they create more work than they solve. 
Well, some things ZF1 did were technically bad, or have become technically bad with namespaces after the fact. Doesn't follow that everything that reminds of ZF1 is automatically bad. In this case, it'd be hard to bring objective reasons as to why the scheme should be avoided. Also, in a way, you're coming closer to violating your own article's conclusions by using a generic name like ModuleFacade (yes, I can come up with a better name, and I did, but why can't you :-)). In a real world example, a module like this would be, say, a Blog of some sort (sorry for the tired example). So if I call the class after the module: ShinyBlog, then when I use this class, its name will be clear in context: $blog = new ShinyBlog($config); It's also obvious with no explanation that a namespace ShinyBlog in the same location would contain ShinyBlog related classes. Before I started using this scheme, I used something else, but it required repetition: /Vendor/Project/ShinyBlog/ShinyBlog.php So my instantiation would look the same, but my use clause would look a touch odd: use Vendor\Project\ShinyBlog\ShinyBlog; It doesn't matter that much that it repeats, but why repeat, when it can not repeat? But much more importantly, the right class to use sticks out immediately, when it's one level higher, than if it's mixed with implementation files.
I have use that guys packages on Ubuntu for years now, in production, with zero issues that were his fault. 
&gt;Is this a feasible thing to do? No. Not because it's technically difficult. Users should never be giving out passwords. Asking users to violate this rule puts you significantly outside your depth. I gave [this company a slaughtering on this blog](https://lolware.net/2016/11/17/requesting_bank_login.html) and would apply the same sort of wording to what you describe. Edit: How do you plan on handling customers with two factor enabled? Because a business with two factor disabled on a social media account is asking for trouble. Tell me how you'll help your customers social media when [this happens](https://mic.com/articles/145337/kylie-jenner-s-twitter-hacked-troll-sends-vile-tweets-about-justin-bieber-and-tyga).
We can assemble micro-micro-services back through Composer. If you have more than 20 entries in your `composer.json`, consider making a new composer package that has your other packages and include that. ^^/s
The array operator is less likely to collide, as the macro requires parameter brackets and body braces. Don't see many arrays that contain `($key) =&gt; {$value}`...
Typically closure syntax doesn't require the brackets if there's a single parameter. Although it wouldn't be a big loss if PHP requires them always (Swift does, for ex.). It's technically be a BC break, though, because for those who for some reason have thrown brackets around their key, will now have a syntax error (or worse... different code behavior).
What problems have namespaces caused you? They've solved the major problem of conflicting class names when using multiple libraries. 
I have absolutely no idea what to make with PHP. Vanilla PHP. I have been reading Laravel source code and am hoping to contribute but my mind is blown by the code. 
Well categorization was just a word that I used for grouping things together in a way. Yes probably it is bad in general, but what is better? How to name things that are coupled in a specific usecase? Even worse, how to get around confusion with orthogonal or overlapping features and functionality without becoming too detailed or fragmented?
Okay could have been clearer; how can you "cheat" in code? It sounds like you are applying a sense of rules or morality that doesn't exist; unless you mean fake for some inputs like an adding function that only returns answers to hard-coded sums (which is weird and I've never seen)
May be I'm too stupid today, but I just can't understand the purpose of that check. Could someone help me? 1. If `error_reporting()` and `$errno` are filled with zeros (0000 &amp; 0000 = 0000), so the result of &amp; will be zero, and !zero is `true`. 2. If `error_reporting()` and `$errno` have some bits enabled (0100 &amp; 0010 = 0000), but not the same at all, so the result is zero again and is `true`. 3. If they have some **same** bits enabled, one or all (0011 &amp; 1110 = 0010), the result is not zero, so !number is `false`. So that check will be skipped only if `error_reporting()` and `$errno` are not filled with zeros only and have some any random same positioned bits enabled. Does it have any sense?
In this case it wouldn't change anything. You could have renamed all functions and calls for each project pre merge with a unique name. Namespaces would require you to rename a namespace segment to fix it. Expecting that the coders would use a specific namespace segment in the first place would been naive. The same way naive to expect that the coders would add a project specific prefix to all the functions. Classes or functions, the names are all just strings. Namespaces just give you tools to break the name parts apart eventually acting as one, they carry the very same information like an old school named function.
Conflicting class names are not an issue. Where is the difference between acme_Godclass and acme\Godclass? The information is the same. What namespaces enable is that you can write Godclass after namespace import. But that is honestly just cosmetic, nothing game changing.
That doesn't sound like they've caused you any problems, and if you want to write long concatenated names, fine. But most folks want to use simpler names, and since they are at risk of clashing, a namespace system is necessary. This system also allows classes to be renamed, which is useful if two conflicting classes must be used at the same time. 
I never said that namespaces caused me problems. 
&gt; Keep namespace depth as flat as possible Why? Nothing in the blog post explains what issue this is intended to solve. &gt; The class name should always be descriptive enough to work without the namespace (i.e. ProductRepository instead of Product\Repository) Again no explanation for why this is a good idea. Nothing about namespaces requires you to refer to a class by its plain, non-namespaces name, so why do I care about how descriptive it is? The difference between `ProductRepository` and `Product\Repository` is *one character*, and it gives me the flexibility to omit the `Product\` part if that ever leads to clearer, more concise code. &gt; If the number of classes in a namespace reaches 5, think(!) about breaking it apart At the risk of sounding like a broken record, again, there's no explanation of why. &gt; Avoid namespaces that contain both, classes and sub-namespaces And again. And in fact, I think that's an excellent pattern to follow. What problem is this meant to be solving? It's an interesting list of suggestions but: 1. It goes directly against my experience of what works bestwhen dealing with a very large project 2. There's essentially zero discussion of what problems any of these rules are meant to solve, much less how these rules address them. 3. I'm not sure you could possibly follow them all. If you limit how deeply you can nest, AND how broadly you can branch, you rapidly "run out" of room for classes. On the other hand: &gt; Think of each sub namespace as a separate component and keep coupling between the components small Agreed. And for me that's the real issue with the Magento example. Personally, my rules would be something like: 1. Make sure all all classes and sub-namespaces logically belong in that namespace. 2. If it starts to get difficult to figure out which class or sub-namespace you're looking for within a namespace, split it into multiple new namespaces (making sure to observe rule 1). 3. Where possible, try to reduce the distance in your class hierarchy between logically coupled classes.
[removed]
[removed]
&gt; &gt; "If the number of classes in a namespace reaches [...]" If the number of classes in a namespace matters to you, you're probably following cargo-cult advice instead of organizing based on actual business needs.
[removed]
[removed]
It is faster to find specific class in big projects for example in Phpstorm Ctrl+N. You dont want there appear Mail Mail Mail Mail Mail but MailController, MailService, MailEntity, MailRepository, MailEvent, MailForm
Thanks, but it doesn't add a sense to that check =)
After the first click on a blob the map is so much better.
Why do you assume that people that didn't use prefixes back in the days will use namespace now?
&gt; 1. Make sure all all classes and sub-namespaces logically belong in that namespace. &gt; 2. If it starts to get difficult to figure out which class or sub-namespace you're looking for within a namespace, split it into multiple new namespaces (making sure to observe rule 1). &gt; 3. Where possible, try to reduce the distance in your class hierarchy between logically coupled classes. These are good rules and I think they don't contradict anything what I wrote. &gt; Nothing about namespaces requires you to refer to a class by its plain, non-namespaces name, so why do I care about how descriptive it is? The difference between ProductRepository and Product\Repository is one character, and it gives me the flexibility to omit the Product\ part if that ever leads to clearer, more concise code. Of course you can write `use Product` and then `Product\Repository` or `use Product\Repository as ProductRepository`, but I like to write code in a way to get most out of IDE assistance: * finding classes by name * automatically import classes Also, if `Product` and `ProductRepository` are coupled, don't they logically belong in the same namespace? Why should there be a `Product` namespace but without the product class? I'll write a bit more explanation later, I see that without reasoning, the post is not quite convincing ;)
Test driven development or rather unit testing usually only tests public methods because those are the parts of your class that other units will interact with. If those internally call private methods you'll get their results in the test too (because they affect the public one's outcome). And you basically can have them tested all for the price of one.
I am not taking arguments from authority. I think namespaces are great from personal experience, and I use them nearly every day. Having thought about it a lot `:-)` I think they are indispensable. Ultimately it is you who is trying to communicate a bold claim here, so if you want people to _understand_ your claim, you'll need to explain it further. It may not be important in the scheme of things though - you can continue to not use namespaces if you wish. 
When we decide to make the methods private we then refactor the test so that all of the assertions are done via the public method test?
In PHPStorm with you can also search for the directory of the file. So instead of MailRepository you can search for Mail/Repository. 
Are you saying that business that get offshore companies to make their shit don't get value for money and are too stupid to see it? If that is true, what stops another company from spending a little bit more on inhouse development and outdoing the competition? Sounds like offshoring should decrease if it was bad... instead it is only increasing. MAYBE, just MAYBE, the companies who are offshoring are largely outdoing the competition? &gt;read about businesses experiences with offshored software Should I read about Intel, Cisco, Qualcomm, IBM, Microsoft, Amazon, Nvidia, Facebook etc. who have offshore teams... or should I just stick to reading about first time experience of some small company who got their software built by some shady Indian consultancy company?
The main point why people use namespaces is because they can now re-use generic symbols like "File". Fine it cuts off the prefix, but you have to do an import, which is essentially is just moving the prefix to another place. You only start to save bytes if you repeat "File" multiple times in the same file. This is usually only the case if you use typehints in various methods per file. But the majority of class names in a project aren't used in that way that much, many class names appear just two or three times. Even worse if you have extremely abstract code which maybe has a mad rule that a class should have only 5 methods you will save even less bytes. Using namespaces for saving bytes is off balance imho, they add more complexity and more celebration. Only typhint heavy code can have an advantage from it. (Yes I don't use typehints either.) On your last point. Yes I can continue to not use certain language features in personal green field projects. But if I want to depend on third party code, I cannot. The majority of packages out there uses namespaces, there is no way around it. This is a point that I saw coming when internals started talking about namespaces and it is holding ground.
Reminds me that the other day my peer created a quite complex class with 5 methods each mutating the initial input. There was just one public method but he made all methods public via reflection and tested each on its own. Any change in the class, even if it doesn't influence the result, would make a test fail. The worst thing about it was that the test against the public method was really basic, but it would have been justified to have like 10-20 tests with various inputs. I was so mad :(
Your point is good but poorly conveyed. Explain what is bad about the "wrong" way and what the benefits are of the "right" way. Until you can do that few will be convinced.
Pre namespace PSR autoloaders were simpler ;) &gt; but they are industry standard for good reason Cannot argue that!
That first talk /u/fesor gave you ([The Magic Tricks of Testing by Sandi Metz](https://www.youtube.com/watch?v=URSWYvyc42M)) is what make TDD click in my mind. You really want to look that one. It's a ruby talk, but you will follow easily.
The only exception being protected methods of abstract classes that will be used by extended classes later. I think those should be tested, and it can be done by making them directly accessible through reflection.
"Are you saying that business that get offshore companies to make their shit don't get value for money and are too stupid to see it?" no. too greedy to care. "If that is true, what stops another company from spending a little bit more on inhouse development and outdoing the competition?" this is a management trend. company management tend to follow one another like sheep. very little independent thought going on. a great deal of ... "well, if it worked for Intel/Cisco/Qualcomm etc, then it HAS to work for us" "Sounds like offshoring should decrease if it was bad... instead it is only increasing." greed and short sighted management. "Should I read about Intel, Cisco, Qualcomm, IBM, Microsoft, Amazon, Nvidia, Facebook etc. who have offshore teams... or should I just stick to reading about first time experience of some small company who got their software built by some shady Indian consultancy company?" read about whoever you want. just know that offshoring is not the huge success its touted as in business circles. the first offshoring companies? yes, they were good. they were visionary, they changed the playing field because of their skill. those that have come after? cashing in on the talent, skill and hard work of the first. 
tnx! I'm actually reading it now
The features of PHP7 are fairly enough for advance web application development and making use of latest resources to boost your development. There are lot of talks about PHP5.7, PHP6 or PHP 7. But the problem is PHP7 and PHP6 have not reached to a stable version.
Possibly because you're assuming the body of that `if` does the opposite of what it actually does - it's actually an early-exit condition. Check the page in question to see the full context: http://php.net/set_error_handler#refsect1-function.set-error-handler-examples
I'm not sure why you're confused. This latest job I'm working isn't the first or only time I've used PHP. I've been doing web development for 8 years. And yes, PHP is aesthetically awful. It's ugly and unpleasant to work in compared to Python (or any number of other similar scripting languages). 
&gt; There are lot of talks about PHP5.7, PHP6 No there aren't. &gt; But the problem is PHP7 and PHP6 have not reached to a stable version. PHP6 doesn't exist. PHP7 has been stable for well over a year. It's baffling that you're making a PHP tutorial when your PHP knowledge is extremely lacking. 
You obviously have absolutely no idea what you're talking about - further evidence you shouldn't be attempting to produce tutorials on the subject. PHP 5.6 (the last PHP 5.x release) [has now reached security updates only](http://uk1.php.net/supported-versions.php) - the last lifecycle phase before it's no longer supported at all. It will receive no new features, and will only receive bug fixes if those fixes affect security. All previous PHP 5.x releases are completely unsupported by the PHP developers (distro's may attempt to monkey-patch, but personally I don't trust this as it's often done by people who do not intimately know the PHP code base and as such you risk unintended side-effects or incomplete fixes) As already stated, PHP 7 has been stable for over a year and we're now up to PHP 7.1 on stable releases!
&gt; I'm trying to learn MVC Please learn [separation of concerns](https://en.wikipedia.org/wiki/Separation_of_concerns) first. &gt; folder structure and routing to improve my php programming skills Just use some existing framework which has well defined best practices (Symfony for example or Laravel, something popular). Then just try to understand them.
Was the quickest and easiest way I could think of to share an array of strings.
Currently it rebuilds each class file every time one is autoloaded. I guess that's ok for development, but opcache support is essential for production. I was thinking of making it an actual Composer plugin (hence the name), which builds every class file, and disables the autoloader, if `composer dump-autoload --optimize` is run. I guess that would need to create a lock file, which the custom autoloader would use to exit early...
No support for this yet, but it is something I've thought about. Perhaps I can extract the heavy lifting from the autoloader to a function that takes a file path, and then it can be used either to compile the autoloaded files or as needed, for single files.
Ok, thanks, now I got it. $errno should be named $errtype :D because it is a type
&gt; so basically there's no standard folder structure? Well, kind of. There's the [pds/skeleton](https://github.com/php-pds/skeleton) standard for the top level directories and files of your application package, but it does not specify how subdirectories therein should be structured.
Tnak you I'll use this as reference
Could you give a little more detail what you already do with PHP/SQL?
directory structure has nothing in common with design concepts. I also proposed Symfony, it has well defined directory structure and well defined best practices. I belive in [three stages of education](https://en.wikipedia.org/wiki/Shuhari).
I don't know why, but I find this very amusing.
Not sure if you posted to make people think the nav was running php.. It's not running php, someone tried loading up one of the pages of the nav (Does it show the news/weather?).. which just acts as a glorified web browser. BMW's web server was obviously having issues at the time. Would have gotten that error from any browser. 
Please provide alternative when you are disagree with something.
I didn't take OP's title to think they thought that the NAV was running PHP... But my question is, how privileged is the Nav system, and how protected is it? Can an attacker disable the car, for instance, if they were able to sneak past whatever server its running? Or does the dash only have read access to the rest of the car?
What do you mean? The way one works with a database from PHP or some SQL skills? For the former, learn PDO, then some ORM with a query builder. For the latter learn database normalization, joins, transactions, table locking, foreign keys, indexing and EXPLAIN.
wait, this thing has access to the rest of the car? They usually just show maps, play music, that kind of stuff. Why would it have access to the car's engine/locks?
Wow! Shitty runtime stays shitty
do you have to pay a separate data plan just for the car?
[So that's it. You've grown a mustache!](https://www.youtube.com/watch?v=utGXF5orynk#t=1m50s)
Part of your motor plan. There's agreements between mobile carriers and car manufacturers for connectivity.
Washed up hack.
Assuming this unit does all of that.. GPS is accurate enough for speed. The GPS Chips i've played with just output ascii that has that data already along with your location. I highly doubt they rolled their own solution and calculated it all manually. e: i guess users will want the engine sounds to roar even when not moving, then that would need access to the pedal position for sure. That's an edge case, and pretty mental if the device that does that also has internet access. 
Why would they ask the GPS chip, when the speedometer already has that data? For instance, would the DVD player (constrained to engine speed) spring to life?
Nice read.
Haters gonna hate.
Because it's cheaper? Connecting to the canbus network of the car requires more hardware. 
Why is this the runtimes fault? 
Scary
Wow - i cannot imagine any scenario in which this feature could be abused! /s
Can't remember which movie it was where a kid calls BMW and makes a story about his dad having a heart attack and needing to drive him to the hospital. The car gets remotely unlocked and started for the kid. 
Die Hard 
StarTrek Timeline for Android has given me numerous Ruby (possibly Rails Framework) exception errors that were a lot more enlightening than this one. It's likely that the car client has absolutely no clue what server status is being returned or the server errors at 20X... (better point why is this the error?) What I'd be more interested in is how much of revenue has been put towards long-term maintenance for the web-app part of this car and secondly how easy it is to change the URL (hopefully trivial).
This sort of thing is just basic human nature. I wouldn't worry about it.
You could make an interface for each thing that interacts to provide the full markdown implementation though, pass them in and then you have tests the whole way down! Confined responsibilities and from the point of the main probably facade to text transformer, you'd have one input, one output; with potentially more tests for each facet of transformation isolated to those parts (which would exist separately).
4, to be presice ;)
&gt; the node.js version requires grunt alpha so its far from being stable for a production server. Grunt isn't needed on your production server. It's a bad idea to have grunt on your production server sure; you should be building elsewhere, then distributing a snapshot / artifact of a build that passed all tests. I think the speaker was probably just talking to a crowd that might never use PHP; maybe it's mostly JS competency. I wasn't there so I don't know but I'm assuming they have good skills at room reading, and it may be a little tongue-in-cheek.
SOAP and PHP... Glad I'm not working on that application!
[removed]
Believe it or not, its possible to get reasonable plans at a large scale like this. Im pretty sure I still have free 3G on my Nook, even after 6-7 years. 
Most cars do indeed have the radio on CAN, and have for ages. My '99 Saab stock stereo read the steering wheel controls off of the bus, and used the bus to display information on the instrumentation LCD. But yeah, if the radio has a link to a cell network, it should be granted access to any vehicle buses with extreme care.
[removed]
I went to a meetup last week and when I said PHP was main language a few were like "oh" and not in a good way. Then they said JS was their core language. I know a ton of JS but what can you do with it really? You can make games sure and do cool stuff in browser, but eventually you need to hook it up a server-side language even if its Node or at the very least something like FireBase. Still it has its limitations. JS fan boys are the fucking hipsters of development. I'll take shit from a python developer and a ruby developer all day. Those languages do have a few things over PHP and its fun to have debates while understanding the beauty of each. But the JS wankers need to chill the fuck out. And again, I use JavaScript damn near every day and have been since before jQuery and whatever hot new fuckity-fuck JS library is hot right now. The second I walked in that room and saw a Angular and Node stickers on laptops I just knew I would get some shit. There ya go, but then I sat down and showed them what I was working with on phone-gap + react w/ a PHP backend doing all the real work and they were like "OH" in a good way.
In order to understand the so-called "prejudices" against PHP, you have to get the context that comes with PHP, which is, unfortunately pretty dreadful (keep reading for the reasons...). Take a look at /r/lolphp to understand part of the PHP-bashing culture. I dare say, however, that there are two layers of PHP-bashing: a) the one composed of people that just parrots bad words about PHP, and b) those that actually understands something about programming languages that make harsh, yet, valid criticisms to PHP. This is one part of the problem, people creating structured arguments about the flaws of PHP, and a huge legion of parrots parroting what former says. This is the root of all PHP-bashing. These aspects alone, however, are not enough to explain the whole problem. The real problem comes from a very fragmented ecosystem whose barrier of entrance is really low. Both in good and bad ways. Recently someone posted here a rant about PHP being a great language and unsung among enterprise customers - even one comment going as far to say that a certain company banned PHP altogether. So when you hold the pen to sign a contract, you have a problem. You really don't know beforehand, even with an intense due diligence, that the company or professional you're hiring is really good. You see, in all programming languages ecosystem, you expect to find good and bad contractors... PHP, unfortunately, has a much larger groups of bad (or simply inexperienced) professionals and contractors, and on average it is more likely to be disappointed that happy (remember that old statistics that overwhelming majority of IT projects fail or overrun time and budget? And also that other statistics that says PHP powers a high percentage of the Internet? Connect the dots...). So you get a well structured community of PHP bashing, and a constant stream of PHP nightmares and you pretty much get the bulk of the prejudices against PHP. Pay attention! I am not saying that there aren't good professionals or contractors in PHP ecosystem, I am just saying that is way way harder to find one of them when you jump into PHP market... Namely when quality isn't the only thing you're looking for (there are so many PHP developers and contractors that there's a steady downward salary spiral in the most dense hiring markets. Fortunately this is countered by the fact that many php developers are all round professionals and PHP is just one tools of their tools etc...) And PHP reputation spreads across the IT world... PHP is perhaps safe now, but it wasn't for many years. PHP nowadays don't have a series of flaws it had in the past, but it once did... Sorry. We cannot help that... PHP 4 was a disaster, PHP 5 was slow In catching up with improvements. PHP 6 simply failed (remember the metrics I mentioned above?) and PHP 7, except for the major overhaul on the type system, is all about minor modules and syntax changes. Put all this together and you will be able to understand 99% of the criticism, legitimate or not, about PHP. Personally, I always bashed PHP lacks of good concurrency tools, disappointing ecosystem (lots of people use PHP code, but they don't pay or contribute back in case of OSS) and disappointing job market. Prejudices, perhaps... In the most pure sense of the word, a judgment done before... Or more precisely, acquired with past experiences with it. 
What do you mean by services? Like a REST service?
yup i mean exactly that.
So your business is to snatch content from Stack Overflow?
The only thing "worth" hating is using the wrong tool/language for the wrong domain.
As you can see its attempting to get telematics data to show on the screen but obviously exception/error handling was never thought of.
Once you decide on a language from all the hate, then you end up seeing all the people within that language hate on which framework is better.
My thought exactly. Someone should have their wrist slapped.
http://www.phpthewrongway.com/
Shameless promotion of my unworthy works dockerizing some of php tools. * https://hub.docker.com/r/herloct/composer/ * https://hub.docker.com/r/herloct/php-cs-fixer/ * https://hub.docker.com/r/herloct/phpcs/ * https://hub.docker.com/r/herloct/phpcbf/ Some review and/or feedback are much appreciated...
.NET is pretty good, fam.
^ what he said.
&gt; PHP 4 was a disaster, PHP 5 was slow In catching up with improvements. PHP 6 simply failed (remember the metrics I mentioned above?) and PHP 7, except for the major overhaul on the type system, is all about minor modules and syntax changes. PHP 7 is a lot about performance.
Yeah, we should just let all exceptions go unchecked. What?
I'm not sure that in a modern framework it would matter so much if you leave the fat seeing as the code is only auto-loaded when called and the various caching mechanisms make up for it. My point is that as long as it was deliberate and not something like `rm -rf /{$dir}` (where `$dir` might be a blank string ''), there are few problems removing cruft
This stuff used to annoy me and I guess sort of pushed me to go out and learn a couple of other languages, which I should be grateful for. However it comes down to can I make good money with PHP? And the answer to that is consistently yes. NodeJS seems to come and go in popularity, Go is a brilliant tool that I enjoy working in but I still don't see that many jobs requiring it.
Sure, Java pays more. But I've found it hard to self teach without knowing all about the build pipelines, dependencies, etc and yeah as you say, a lot of the shops using it aren't exactly appealing. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Doing what? Promoting their site with a stolen content?
I like it. 
Sites I've worked on had actually broken in Edge because it was saying it's Chrome. 
I need to start a list with all illiterate folks here, so I wouldn't bother to notice their blabber 
[File Headers](https://codex.wordpress.org/File_Header) are what Wordpress uses. Specifically, its [get_file_data()](https://codex.wordpress.org/Function_Reference/get_file_data) function is what's responsible for pulling out theme and plugin information. You can view the source code [here](https://core.trac.wordpress.org/browser/tags/4.5.3/src/wp-includes/functions.php#L4566) All it's doing is reading in a small amount of data at the beginning of the file and parsing out the comments at the beginning to pull in the metadata. That said, do *not* use this approach. Comments should serve no functional purpose. If you simply must use some kind of commenting system that adds metadata functionality to your files, look into [annotations](http://php-annotations.readthedocs.io/en/latest/UsingAnnotations.html). It's a much more widely accepted standard, and generally looks cleaner.
About 2 years ago I was working at an agency and tasked with writing an API to act as a middleware between 2 different mobile applications - a client app where users could, for example, order a drink, and an administrative app, where hosts would receive the order, get the drink, deliver it, and mark it completed. Of course there was a lot more to it, but that gives you the general idea. I researched micro-frameworks and narrowed it down to either using Slim or FlightPHP. I decided to give FlightPHP a try, and I found it very intuitive and easy to get going quickly. I loved working with FlightPHP. It was quick, easy, simple, intuitive, and even fun to use. I will say, in the time since then, I've moved towards using Silex for similar applications. Not to take anything away from FlightPHP, but I like Silex because it's built using Symfony components and is extensible, easily testable, etc.
Other people with a similar issue seem to be suggetsing to delete the plugin. http://wordpress.stackexchange.com/questions/240571/fatal-error-call-to-undefined-function-wp-cache-get-in-home-thes7314-public See if any of that advice helps Also, might be worth going to /r/PHPhelp 
I don't follow the lists closely, but you can [see for yourself](https://externals.io/thread/489#email-13083) (I'm sure there are other threads too) The only bit that stuck out to me is this: &gt; High breakage potential: &gt; &gt; each() - I've seen a lot of code using each. Yes, it's not the best way. A lot of people write code not in absolutely best way but in a way they like to. Argument about list() proposed in RFC makes little sense to me &gt;since problem is with list() and not each() why each() should be deprecated because of it? And I certainly object its removal. Some topics were the subject of endless discussion (strict types/scalar type hints comes to mind), others are going to be fairly non-controversial.
i use both php and .net and tbh i love both for their specific uses. people always say how slow and insecure php is - security defintely can be a problem sometimes, but its really not that bad. and slow? php 7 is faster than hhvm, so thats that. ive been following this other project that compiles php to dotnet and i really like it because it has no prejudice against php, it tryes to take whats good in it and allow it access to the .net world. anyways, also the biggest prejudice i hear is that php devs are dumber than node.js or python or especially c# devs. programmers too often hate on the technologies they dont use, they are so narrow minded.
https://twitter.com/Kruithne/status/825737133252018177
You're welcome :) Thanks for using Dotdeb. It was a hard decision to make, but it makes more sense fore everyone.
`unset()`, the function, isn't being depreciated. `(unset)`, the cast, is.
Ah, I see, I didn't even know that was a thing.
Thanks for the gold :)
You need to contact your administrator and ask for an upgrade to the version you need.
I'm the admin. It's my personal FTP account.
This might be a setting you need to change in your godaddy cpanel. 
The remote host needs to have PHP updated on it. Whoever runs the remote host will need to update PHP on it.
i dont think i even did. but everything was working locally so i guess i must have.
so godaddy?
Yes, if you contact Godaddy support, somebody there will be able to assist you in upgrading the version. Or use this guide: https://uk.godaddy.com/help/view-or-change-your-php-version-16090
If they are providing your web hosting then yes. They maybe have some sort of management interface you can change the version in?
Yes.
Yeah, I've never seen that in the wild but looking at it, it has an extremely limited use case. That being said that lone vote seemed to believe (these arguments are way over my head) the operation was basically free. I doubt it will make difference in 99.99% of code.
Why do people look down so much on PHP?
What do you gain by dockerizing something like composer?
Do you even code?
My instructor is a masochist. He likes to put all of the html in a single string and echo it out at the end. Then tell us to add dynamic content through 4 other layers of pages and abstraction. You learn everything the hard way. Like, you can't simply target a cookie set from another page that you know exists without declaring the variables for it. This is why I hate php. It has nothing to do with php and points out how terrible I am with strict logic. As a beginner in the language, it is absolutely terrifying from a security point of view. I find javascript, python, and heck, even powershell a lot more forgiving and sensible with what they let me get away with. I struggled a bit with SQL as well though. Substrings were a real biatch to wrap my head around when combined with GROUP and HAVING. I am beginning to enjoy what php can do for me but I don't think I'm smart enough to really make anything someone hasn't already made and open sourced. :( TLDR: PHP gives me confidence issues.
This discussion seems to go in circles but the fact is you are not the admin. Someone who knew what they were doing built this remote server, and I get the impression that wasn't you.
I've read this post with my full attention once. And it seems to make sense. Don't replace your session with a JWT. As for an API token the post speaks nothing of that. I just want to verify my reading of the post with you, this strictly covers replacing session mechanisms with JWT.
#\#PHPCodeMatters
&gt; Currently installed version is: 5.3.24 [Im just leaving this here](http://php.net/supported-versions.php)
I have bash scripts that do a mysqldump and transfer to another server with scp. Pretty simple. 
Can it check for superfluous use statements? I can't seem to find anything regarding this in the readme.
What do you consider as superfluous use statement? Unused use statements can be checked by a coding standard, they are not a bug per se. See: https://medium.com/@ondrejmirtes/slevomat-coding-standard-861267de576f and https://medium.com/@ondrejmirtes/three-pillars-of-static-analysis-in-php-f3f5d7bfd61b.
&gt; The latest version of PHP is PHP7.0.3 php -v PHP 7.1.1-1+0~20170120094658.14+jessie~1.gbp69d416
Right now __autoload is faster than the SPL version, so I hope the long term plan is to improve the SPL version, otherwise that's a bit sad.
When they mentioned that they do js, you needed to say "oh, im so sorry".
Considering OP, you might as well link something written in a mix of exotic languages.
I wouldn't call a dead language exotic ...
What things does one catch the other does not? Genuinely curious, I don't use either, kinda rely on php lint (or rather whatever phpstorm uses.. which i think is lint)
&gt; Ideally combined with https://wiki.php.net/rfc/functional-interfaces Oh man... this was proposed and it **failed**? Why would it fail, have those people never used closures in another language with a type system before?
It is not fixed. Nor banners, nor shitty content. 
I'm not sure why it failed, and I'm super bummed out about it. But I'm sure they had a good reason maybe^this^time^they^did but yeah I'm getting a super heavy anti-functional-programming mentality from the community every time these RFC's are up for discussion. 
My workaround is to accompany every functional interface with an AnonInterface, and keep hoping one day I'll be able to call it natively: $foo-&gt;setComparator(new AnonComparator(function ($a, $b) {...})); Anon classes help a bit, but when you need to capture variables from the declaration scope it becomes unusable, because you need to declare them as fields, and assign them in a constructor, which is far more verbose than the above wrapper, unfortunately.
Tkx for the link, I will take a look at it :)
It's crazy and fascinating that ~35 voting members or less are making decisions on a language that powers a huge percentage of the web.
One has a cool buzz feed article title and the other doesn't. 
Some people need basic posts to get started 
There are severe problems with the content while you are nitpicking on quotes. 
&gt; you example will not print Hello World - it will echo it (and yes, those are two completely different things). &gt;those are two completely different things &gt;completely different things ????????????????????
We have to start somewhere ...
I assume you don't understand. (We're in a technical subreddit so consider writing a proper question instead of spamming question marks) Here is a very recent, very exhaustive and very well-written answer: http://stackoverflow.com/a/7095292
One thing I would mention is that microservices can introduce a huge amount of Ops work, which if you like the dev and not the ops can be soul destroying. 
tl;dr: use `echo`
Seriously, what’s wrong with using `get_defined_vars` / `extract` in this example? You’re not looking at this code anyway.
Because i think it a bit better than using something like this $ curl -L https://getcomposer.org/download/1.3.2/composer.phar &gt; composer $ chmod +x composer $ docker run --rm -it \ -u $(id -u):$(id -g) \ -v $(pwd):/project \ -v $(pwd)/composer:/usr/local/bin/composer:ro \ -w /project \ php:7.1.1-alpine composer --version
Isn't that one of the branches core problems? businesses going "we need to solve a problem, this is how we would solve it, now hire experts, don't ask them about the problem, but task them with the implementation of the solution" I've seen it so often... Asking for a stupidly complex solution, just to figure out that it could be done with a fraction of the effort if they just started with the problem in the first place... 