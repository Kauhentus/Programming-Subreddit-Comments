The same way it was done before ORMs, manually.
Don't forget that it's only Composer installs. A lot of legacy projects aren't using composer :/ 5.6 is probably used a bit more that that
I like that you have dependency injection in the docs but it still comes after tight coupling. Looking at the largest Laravel based projects on Github most *are* using facades. Even those using DI more are still leaning heavily on helper functions like ```view```. And honestly that coupling is probably the killer feature for most developers adopting Laravel. It's not for me but I can see how it makes the framework so popular from a certain perspective.
Here be dragons.
Keyword is "sanely". Of course you can use joins on foreign keys, but then what about columns with the same name? You can alias them, but now you have to know in which parts of your application a row is referred to as e.g. `post_name` vs just `name`. Then there's serializing rows to business objects, which becomes infinitely more of a pain. Why do all of this yourself when you can just use an ORM?
Honestly the frustration that comes with Doctrine magic supersedes the amount of pain incurred with doing things manually (for myself anyway). As for how to sanely do it, you can simply implement a naming convention that prevents colliding. I create mappers for business objects to be converted to/from rows. I also made an instantiator package that takes care of creating object instances easily (lgse/php-object-builder). Then created an entity repository which handles a lot of the heavy work for joins/aliasing/using the mappers I created (not open source). I‚Äôm not saying everyone should do that. As I said, In my case the pros of doing it outweighed the cons of using Doctrine or something similar.
&gt; A lot of legacy projects aren't using composer :/ That's probably true but also disturbing. For me composer is the greatest thing that happened to PHP in the last 10 years (I believe it's more important than even PHP 7), and I can't imagine working on a project without composer.
I don't have a use for the tool itself, but I have a question. How do you create a documentation like that?
I think you're stuck in a bind. Either break with the project and use Python or somehow bring this over to the PHP ecosystem. The simpler bet may be to build an extension to PHP by wrapping libpcap.
Here's the file format, if you attempt to go it yourself: [https://wiki.wireshark.org/Development/LibpcapFileFormat](https://wiki.wireshark.org/Development/LibpcapFileFormat)
[https://php-ucms.com/features/](https://php-ucms.com/de/features/)
Well we're talking legacy projects. Why spend money on technical debt when we can have more featuuurreesss
I just learned it an hour ago. Never had an idea it is possible.
That seems backwards to me. Even if changes suggested by review are minor, they still have a good chance to introduce bugs. This devaluates QA done a lot.
More important than 7? No, not even close. If 7 didn't come out when it did people and companies would have been jumping ship. 7 made a much needed improvement in speed.
what did you learn exactly, php?
It looks great.
A nice one https://3v4l.org/DQVtN
here are the stats about servers where wordpress are installed https://wordpress.org/about/stats/ It is almost half for 5.x and half for 7.x 1/4 of the web runs on WordPress ( https://digital.com/blog/wordpress-stats/ )
A nice one https://3v4l.org/b81dn
A nice one https://3v4l.org/NggkT
Have a look at [https://fatfreeframework.com/3.6/databases#VirtualFields](https://fatfreeframework.com/3.6/databases#VirtualFields), which is how the ORM handles mapping 'external' tables - sub-select queries. It works good but might start to chug on larger data-sets. [https://fatfreeframework.com/3.6/databases#ProsandCons](https://fatfreeframework.com/3.6/databases#ProsandCons) goes into some detail as to the limitations of this approach, and makes some suggestions for alternative (namely SQL views).
Not everything that doesn‚Äôt use Composer is strictly legacy, but it‚Äôs pretty hard to avoid it these days. As much as it‚Äôs crapped on, Joomla has been using Composer to manage dependencies for a few years now but there‚Äôs no hope in sight if you expect to be able to use Composer to manage a site (whereas Drupal is embracing it more and more). While I‚Äôm here, as of late April of all Joomla sites reporting stats in the previous 6 months, close to 60% were running PHP 7.2 with 7.1 and 5.6 being close in metrics at 2nd and 3rd (with a rather sharp decline to the next branch). So even ‚Äúlegacy‚Äù projects aren‚Äôt doing too bad at staying relatively up-to-date if people pay attention.
Hey, it still makes more sense than Wordpress.
66.5 of Wordpress installations are using unsupported PHP versions :(
Kohana and FuelPHP follow the same philosophies, but even with their problems, they each have a heap of extendable files that seem inappropriate for the use case.
And every other article in their blog is SEO related....
Educating people on how to write insecure, dangerous web apps?
At the company I started working at in March, NOT ONE of the 11 "senior devs" (average years of PHP experience: 11.5) had ever HEARD of composer! When I asked "Where's the autoloader?" they're like "What's that?" when I asked if they knew about composer? they said, "What?!"
That is so cool.
It feels weird using modern PHP to interact with WordPress ;) &amp;#x200B; Also, I can't fucking stand their ( damn style )!
But I did not see that anyone who has commented here has his own written code.
I worked for a startup that didn't make use of composer, their employees didn't wanted either. it's a lot more common than you think.
Well, I pass that "11 years of experience and don't know about composer", but, if they don't know about autoloading in PHP. PHP has their autoload\_registers from a long time ago :/
&gt; Also, I can't fucking stand their ( damn style )! Finally found someone saying that, I thought I'm the only one. The code looks terribly verbose to me because of this and even though it sounds strange it's one of the things that stops me from doing WP development - purely subjective, not even close to most WordPress flaws but it really bothers me
Exactly. Good that WP authors are trying to change this.
source?
Yes people looking for raw speed would look to ruby &amp; python. languages known for their focus on speed... /s
Yes?
Those are not senior devs. Try to never be impressed by titles
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I mean: - ‚úîÔ∏è Improves readability of big integer constants. - ‚úîÔ∏è Supported by plethora of other languages, too, so apparently not so bad idea. - ‚úîÔ∏è No one forces you to use it, if you don't want to.
Ajex ü§£
14/7 now :)
Equally people with no experience outside of a package manager ecosystem can also be problematic as they might fail to induct system or platform issues, or things that are lower level. More dangerously they may not appreciate things like flakeyness of network, BigO notation of implementations used. Composer does not solve system level dependencies, it can leave you open to vulnerabilities because you've done everything the application programming language needs. I'm not saying not to use composer. There are of course solutions to all these problems and you are better off with than without. But understanding there are other ways that get the same end result, and the boundaries of what a specific tool solves. I think that is worth knowing
[removed]
It certainly doesn‚Äôt look appealing. It‚Äôs has that going for it. I‚Äôm guessing commas aren‚Äôt a standard and maybe the parser can‚Äôt handle them either? I don‚Äôt know, feels like I‚Äôm changing it into some other primitive.
* All IDE's will have an Hick up with this! * Automatic Tools for Code Checking, will think of Strings/Constants * It is not more readable, because the underscore is not meant for that * Type Errors will happen (O there is a underscore, it's a Constant, no it's a Number....) * Tools which are not PHP specific will have a hard time with this also...
I personally use 10 * 1000 * 1000
&gt; What's so frickin' controversial about this RFC?! I mean, the RFC lists a couple of reasons: * Possibility of making numbers harder to find * It not being the languages job to make numbers easier to read * Being easier to use it for bad use cases (even in the internals someone touted a phone number as a use case for easier to read numbers before everyone jumped in and told them phone numbers shouldn't be stored as numbers But another point raised in the internals, which I think is probably the reason for a few votes against, is that it doesn't really add much to the language so some won't vote for it because they want to be conservative regarding any changes to the language, which is a fair reason
Java uses underscores. It's fine. I mean, don't expect to start seeing it everywhere, people just won't. But for really large numbers, it'll help.
Might as well use 10\^7.
I am on my phone so exploration has to wait, but I would update the readme to include some quick start guide for the field. I find these very useful as it answers basic questions for the interested user: - Does this achieve what I am looking for? - Does it make sense how one would use it? - Do I like the style? I know, the last one is a little odd, but let's be honest, it's a factor
This looks horrible
Link for those interested: https://wiki.php.net/rfc/number_format_separator
&gt; I‚Äôm guessing commas aren‚Äôt a standard. International Standards basically state the following: &gt; The symbol for the decimal marker shall be either the point on the line or the comma on the line. &gt; Numbers may be divided in groups of three in order to facilitate reading; neither dots nor commas are ever inserted in the spaces between groups. &gt; When there are only four digits before or after the decimal marker, it is customary not to isolate a single digit
Maybe. I‚Äôve got a few options now, thanks
Why can't IDE's just do this? Put some whitespace between every 3rd number or something.
What about code reviews?
That wouldn't simulataneously work for standard numbers `13_500` and arbitrary positioning like in the dollars stored as cents example: `135_00 === 13500`. I can't see a good way to implement that at the IDE level as it will depend on the specific literal how, or even if it should be separated.
Minor title corrections for YouTube - AJAX (all caps, misspelling) and JSON (all caps). I watched the first half, and noticed you add `bootstrap.css` and `bootstrap.min.css` - I think you only need one of these (the latter is the minified version of the former). Same also with `jquery.js` and `jquery.min.js`.
I find that a lot of changes in PHP are things like the spaceship operator, which in my view don't really add a lot. They just mean that you need to know more about PHP to be able to read code and this is another good example of that. There are also things like closures and arrow functions that do add a lot. But still every time something like this comes along I think, why in the world are people focusing on this instead of on finally getting generics in PHP? That's what people actually want.
Nothing controversial here, or shouldn't be. It needs to be a unanimous no.
Let's just make it easier for php to be the most reviled language, then. Can you even imagine the horror people will produce with this? From a maintenance perspective, this is going to suck when someone dies craft shit because they think they're clever. That's, well, just about everyone at some point.
... servless, AI controlled clustered nano mico serverices.
So all those other languages that have this - _from the maintenance perspective (and various other perspectives)_ - you're saying that they are fucked because they have numeric constant separators, right?
That's not what I'm saying, and I'll thank you to not put words in my mouth. I'm saying PHP is already considered fucked. This adds nothing useful to the language. It seems that the problems in system design bleed over, here. They think adding things that aren't necessary will make the language better, but it's just more cruft. it's a study in YAGNI.
I'm curious when composer will be able to stop supporting PHP5.
Wouldn't work since that's the XOR operator. You'd have to use `pow`.
Javascript has the same feature, and I've never seen it used in a bad way so far.
You're going to defend PHP language features with javascript? That's a bold play, cotton. Look, it's probably going to get in, and then people will mostly not use it, and only use it because they want to be "elegant". It'll add cruft to the lexer, and it'll all be par for the course. I just don't like it. It's stupid to add things to a language that you don't need.
10**works too ;)
(Meta-tip: if you wish to post a text body with your question on Reddit, then make a "text post" rather than a "link post". The former is intended for posts that are essentially link-only, and stand on their own merits without explanatory material).
Is there a reason why simple space wasn't chosen? This looks unintuitive.
I don't care which language has the feature. I'm saying that I've worked with a number of codebases with said feature, and it has helped and was not used in a bad way in my experience.
&gt; Possibility of making numbers harder to find Searching for specific numbers throughout a codebase is already unreliable (especially in PHP when a number can be made by `'123' . '456'` etc). Even assuming all your numbers are written out straight, they‚Äôre easy to search for with regex (`123_?456`). &gt; It not being the languages job to make numbers easier to read Of course it is. Nearly all language features are designed to make your code easier to read (eg a for loop is easier than variables + goto).
Ok, so we just disagree. I find unnecessary additions annoying, and you maybe think it's necessary. It's just not the job of the programming language, in my opinion.
That‚Äôs most useful for times, eg `60 * 60 * 24` for a day. (Although all programmers should recognise 86400 pretty quickly)
Does it? the RFC only links to a proposal that says it's only in the chrome beta.
&gt; why in the world are people focusing on this instead of on finally getting generics in PHP? 1. PHP contributors are not a single entity. They each can do whatever they like simultaneously, and this isn't holding up other features. 2. Different people use PHP for different things and will run into their own particular bugbears. What's wrong with addressing those?
We already use commas for other things. Spaces could work actually, interesting that we haven't done those yet.
IDEs can do all sorts, but I don't think we should use that as an excuse to ignore the basic readability of the language. Ideally you shouldn't need an IDE.
Wondering that myself, I don't think there's a technical reason that couldn't be done.
That's a good point, and I do understand that. When I think that, it's more like a split reaction. Also generics are probably a very very complex thing to implement and that doesn't escape me either. What I was trying to convey was that I sometimes think, "aw man, not *another* operator" when they come up with stuff like this, but then a split second later I do realize there is evidently a demand for them because the RFCs get voted in, and people respond to them positively on here. So I'm not actually complaining.
It's already been usable through Babel for quite some time.
It reminded me of this - [https://3v4l.org/YNjsZ](https://3v4l.org/YNjsZ) This is also curious - [https://3v4l.org/sKEEm](https://3v4l.org/sKEEm) &amp;#x200B; It's not adding much functionality, so I can understand why conservative people would oppose it. Plus, in the real world, wouldn't it be better to just pass numbers through something like [NumberFormatter](https://www.php.net/manual/en/numberformatter.parse.php), where you could support commas, decimals, spaces, currency, scientific formats, etc.
&gt; Searching for specific numbers throughout a codebase is already unreliable (especially in PHP when a number can be made by '123' . '456' etc). &gt; Even assuming all your numbers are written out straight, they‚Äôre easy to search for with regex (123_?456). This was a point brought up in the internals as well, though more in the direction that numbers can already be expressed in many different ways so it should be fine as long as you have a consistent codebase. I don't really have an opinion, I'm just surfacing what I read in the internals since OP asked the question in the title
[removed]
Anyone else not find this helpful at all?
Thanks! Will try to do that, by adding some snippets from tests directly in readme and some real-life scenarios.
Why not `for ($var = 1, $i = 0; $i &lt; 7; $var *= 10, ++$i);` /s
To stay simple, I'd say : * mysqli &amp; PDO are ways to access your database, to execute queries, read data and so on * PDO is object oriented * ORM stands for Object Relational Mapping, ORM are used to "translate" your raw data from your database to easy to use object * Query builder helps you to avoid to write SQL and offer you a more "codish" way of querying your database &amp;#x200B; ORM &amp; Query builder are bundled together most of the time
Thank you kind sir! :)
My future plans include add ~~support for php7.1+ with strict types (during next one month)~~, implement event hooks, add more DMS. &amp;#x200B; Stripe-through has been done. :) Now it fully supports php7.1+ with strict typing.
&gt;stable lol, CI has been happy with PHP7+ for years in my apps...
Well said. Regarding which ORM to use - it depends on your DMS. One of the most popular one is Doctrine, but it also is the one least tested and with the biggest overhead, that's why I open-sourced my own ([https://github.com/janisbiz/light-orm](https://github.com/janisbiz/light-orm)) recently, as it is fast, well tested and I am using it in few work related projects w/o issues.
To me it depends very much on use case. ORM seems right for high level domain entities and things like that PDO or simple database abstraction seems more appropriate for utilities. I'm writing some code now to replace an old less flexible synchronizer system between two SQL databases. The source and target will be PDO instances. When I get to repositories, I'm injecting doctrine object managers and working with the ORM and query builders. This is partly because I may want to use the synchronizer in other contexts. The repositories are much more application specific.
A quick cheat sheet. - mysqli is a database driver. Quite a basic one, practically a raw API. You should never use it in the wild but only to build a database wrapper (a function or a class that simplifies the routine repetitive tasks). - PDO is a database driver *and* a database wrapper, its usage is much simpler than mysqli. It is justified to use PDO as is in your code, but a simple wrapper is still preferred. To demonstrate the above lets get configuration options in key-value pairs mysqli $stmt = $mysqli-&gt;prepare("SELECT name, value FROM config WHERE site=?"); $stmt-&gt;bind_param("s", $site); $stmt-&gt;execute() $result = $stmt-&gt;get_result(); $options = []; while ($row = $result-&gt;fetch_assoc()) { $options[$row['name']] = $row['value']; } PDO $stmt = $pdo-&gt;prepare("SELECT name, value FROM config WHERE site=?"); $stmt-&gt;execute([$site]) $options = $stmt-&gt;fetchAll(PDO::FETCH_KEY_PAIR); An ORM is a program that sort of automatizes the above. Let's compare PDO and ORM this time PDO $stmt = $pdo-&gt;prepare("SELECT * FROM user WHERE id=?"); $stmt-&gt;execute([$id]) $user = $stmt-&gt;fetch(); ORM $user = User::get($id); And a query builder is an OOP way to write queries, it comes handy with ORMs when you need a more complex query than a simple lookup.
* ORM - This probably should be the default for most situations. * PDO - When you need to optimize or if you have really complex queries. * mysqli - Basically never.
That's an empty statement. It can be said for any controversial topic. "Abortion shouldn't be controversial, it needs to be unanimously opposed" "Climate change shouldn't be controversial. It needs to be unanimously acknowledged." "Gun ownership shouldn't be controversial. It needs to be unanimously supported." Guess what? That's the definition of controversial. You say "no" to numeric separators. Some people say "yes".
So, you make an empty statement to refute mine? Ok.
I totally agree with this. A long while back I had the thought that I wanted to get the best of both worlds, the speed of raw SQL, but have the ability to use models when I feel fit. Even take a SQL result and turn it into a model object when needed. So I started to develop a model layer. I guess you can see this comment as self promotion, but I never finished the project. There's actually not too much work left to do, so if someone is interested of using it, I can spend some time an finish the project üôÇ here's the URL: https://github.com/EmasXP/laborious
There is no v3 brach/tag for doctrine/orm and this blog post from 2017 says nothing about the future: [https://www.doctrine-project.org/2017/12/21/orm-2-6-0-and-next.html](https://www.doctrine-project.org/2017/12/21/orm-2-6-0-and-next.html) &amp;#x200B; But there is another interessing blog about this topic: [https://www.tomasvotruba.cz/blog/2017/03/27/why-is-doctrine-dying/](https://www.tomasvotruba.cz/blog/2017/03/27/why-is-doctrine-dying/) *Opinion*: The active-record pattern became an anti-pattern. Move your focus away from active-record (and ORM's in general). Today you have better options (like the real Data Mapper pattern).
Doctrine _is_ a data-mapper ORM, not Active Record.
That's not what he did; he *explained* to you through precise examples how your comment was nonsensical.
Referring to your ‚Äúopinion‚Äù comment: doctrine2 is not active record; it is an ORM that implements the data mapper pattern, so, I‚Äôm not sure exactly what you‚Äôre getting at? Also, even the blog you link to has added a ‚Äúdeprecation‚Äù notice due to all the improvements in Doctrine since it was written. I‚Äôm not saying Doctrine doesn‚Äôt have things I wouldn‚Äôt change (e.g., personal preference, I think deferred_explicit makes way more sense as a default tracking policy), but whatever its shortcomings, it is not an active record implementation.
He also taught me the word controversial. I stand corrected.
I'm with you. This is way more confusing than it is helpful. If you really have a hard time understanding numbers without commas, write a comment in your code with an easier-to-read number. It'll take you exactly .8 seconds more than underscoring a integer. This is so ridiculous, it looks ridiculous and t_h_e p_o_t_e_n_t_i_a_l f_o_r m_i_s_u_s_e i_s t_o_o d_a_m_n h_i_g_h
/u/Ocramius might be able to help
What really hit me were the hex and octal examples. I don't think this ends well.
Enough with the "but Javascript supports it so it must be good!!1!" This is one of those solutions looking for a problem. It's more confusing than it is helpful.
Meh just do what ada95 does: A_num := 123_456#8 Where _ is a units separator and # denotes the Base. Given that PHP uses # for comments, picky any sane symbol for the base.
I'm writing this article series to serve as a support when helping PHP beginners relating dos and don'ts in PHP. Any advice welcome!
There are no series yet. I would suggest to post this link after you get some content other than just one remark. That aside, thank you for posting a sensible advise - a rare specimen in this sub.
On a second glance, it seems you need to put more work in your ideas. - dunno how much it's reliable, but there is `htmlspecialchars_decode`. I would say HTML encoding is reversible, but it could apparently spoil the input data. - your `$comments` variable is an array.
That's a good remark. In fact, I have 7 written but not yet published articles. I'll edit the post when I'll finish publishing all of them.
I created this lib to use for a local dns server on my pi, but ended up using it for quite a bit more. Enjoy and feel free to contribute if there's something you'd like!
&gt; your $comments variable is an array. derp. &gt; about `htmlspecialchars_decode`. `htmlspecialchars` is a formatting operation. A well-known golden rule of data is to *always* store the raw data, to be able to format it at will, everywhere.
Eloquent is closer to Active Record, despite the fact that it calls itself an ORM.
It is an ORM - it maps object data to persistence records. The methodology it uses is Active Record, but it‚Äôs still an ORM.
Right, that's why I said it was *closer*. The methodology being Active Record can present some unexpected gotcha's for devs who both actually know programming outside of Laravel *and* don't know about how Eloquent works internally.
Check out these resources for folks looking for help: * https://www.firsttimersonly.com/ * https://yourfirstpr.github.io/ * https://github.com/MunGell/awesome-for-beginners
Personally, I dislike the short echo tag.
Ha, I think [I suggested that to you](https://github.com/taniarascia/laconia/issues/5) already, and offered help - did you miss it? `:=)`
I think they are using GitHub Projects to track the progress: [https://github.com/doctrine/orm/projects/1](https://github.com/doctrine/orm/projects/1)
Well, that's just for example's sake, you can use whichever method you want to echo `htmlspecialchars`'s result.
I know, Just giving my 2 cents.
My guess would be to not coincide with the token parser. A space means "okay, done this, let's move onto something else." Even though the language could be constructed to understand a space between two number literals should be stripped, that still changes the meaning of the space. For an aesthetic change, that's probably too much of an expectation and unlikely to convince most of internals, especially those already opposed to the change. At least underscores have and always will be a character used for aesthetics (e.g., in function names) so applying the logic to numeric literals is more reasonable.
Honestly, storing values like this in the code seems like the real issue. But are you really saying you‚Äôd prefer to see 175372628846 instead of 175_372_628_846? I find the latter far easier to read, aesthetically I don‚Äôt have any distinction, but legibility &gt; aesthetics anyway.
&gt; If you need really great performance then you should stick with raw SQL and get low level API like PDO. Just thought I'd plug doctrine/dbal - it's PDO with a much better API and a querybuilder.
This is only for numbers in code, which you would never want to use a `NumberFormatter` for.
&gt; https://github.com/EmasXP/laborious $user = new User( $db, $db-&gt;query("SELECT * FROM `dogs` LIMIT 1")-&gt;fetch() ); your user-&gt;id is now mapped to dog id?!
Nice, I'll give it a go.
#What * `mysql_query` was the original method, just executes a raw query against the db, do not use this * `mysqli` and `pdo` replaced this by adding prepared statements (google it if you don't know), but these are still just executing queries against the db. The main difference between them is pdo is object oriented, you can safely ignore mysqli, pdo is the standard. * `DAO` or data access object is usually a thin wrapper on the above that you will see in most ORMs * `ORM` is a pattern that abstracts the database away from your domain code so that you can think in terms of objects and graphs rather than joins and relations. There are two main ORMs in PHP, Eloquent and Doctrine, each based on the Active Record and Mapper implementation respectively. You should research those, but tl;dr is that AR is shit and you should just use Doctrine. * `Query Builder` is just one of the methods used to translate your database tables into your ORM objects. It is the preferred method to do complex queries for data as it allows queries to be built up programatically over multiple methods/conditions. # When You should use Doctrine for pretty much everything non trivial. You should use the repository methods it provides for simple fetching, and use the query builder for more complex queries. You can always get lower level access from an ORM, so if you come across some problem that just can't be solved with your ORM you can easily drop out of it and do whatever you need there.
Yes, I would rather see a long string of numbers, especially when the RFC calls out doing something like this $price = 135_00; Now I need to check the trailing digits to know significance. Which seems more painful than better variable naming or context defining. What about something like this $price = 2_959 Is that 2,959 or 2.959? No idea and this change doesn't help. Also, if we're hard coding numerical values into the system there had damn well better be tests validating they work as expected which would help give better context to someone touching the code in the future. Personally, I think this just makes the code harder to read and I would be very reluctant to all my devs to use this for production code without a much better example of value add than is expressed in the RFC.
Holy shit this is cool
Was gonna say grep, but this seems better, if you can remember the api
What happened to NotORM? That seemed really handy.
I am not questioning the premise (with which I agree), I am just pointing out that your reasoning doesn't pass the reality check.
This is a solution looking for a problem. This isn't a problem for more than 99% of PHP developers and it's ripe for abuse. Exactly what PHP doesn't need.
Citations would be nice &gt; A well-known golden rule of data is to always store the raw data, to be able to format it at will, everywhere. If it's a comment on mutability when processing then. I suppose it's not bad general case advice. I'd touch it up and say always store the most information feasible, including a copy of the original information and processing context. One of my software has the ability to transform data that it saves, but it also saves to a meta-data (key-value) store, the original request. We use this to get a history of all data saved, and to provide a means to restore (PATCH semantics) records. This has cost implications as the key-value store (by default) has a strategy to keep all history since the beginning of time. The design is not desirable for say a website CMS where you want a pool of the most recent edits. It also requires a lot of up-front design to not just be wasting a lot of resources following preservation of raw data. You may need to keep dead, or non-user-facing code around to cope with it if an extreme stance was taken.
Yes, that is correct. But you need to be equally as careful when using only PDO.
Really nice write up. I‚Äòve been using composer for so long, I totally forgot how to implement my own autoloader. Just remembered what a huge step forward it was for me discovering the original __autolaod() back in php5.0 days. Must have been at least 10 years ago. How much better my own framework got after this.
Go with `2.x`. `3.x`, while appealing, is not going to be massively different from an operational and high level API perspective. My suggestions: * stick to current `EntityManager`, repository and DQL APIs * avoid `EntityManager#detach()`, `EntityManager#merge()` and `EntityManager#flush($withParameter)` usage: we got rid of those in the dev branch * avoid relying too much on ClassMetadata internals - also something that will change substantially * avoid relying too much on the listener API - also changed a lot Besides that, ORM 2.x will remain stable for a loooooong time after this (over 4000 dependants only in OSS packages is huge - can't break that). As for the timeline: there ain't any, sorry. My gut feeling says that we can manage this year, but it is nothing but just hopes. Some folks inside the Doctrine Project organisation are trying to focus on making development sustainable (by seeking [funding/sponsorship](https://www.patreon.com/phpdoctrine)), but we're all very time-crunched by our daytime jobs. Thanks for the ping, /u/ntzm_!
you don't need to use only pdo ... you're solving a problem that doesn't exist by creating problems that do
Thanks for the support, /u/Isinlor! &amp;#x200B; Indeed, our aim is to start getting developers fully funded to work on the project full-time, as it is core to so many parts of the ecosystem, OSS or not.
The only thing with less safety than this is a US election.
I see your point, and I realize that this library is not for everyone. The problem it solves however is the ability to have methods on models.
The only purpose of this reddit account is to promote the youtube channel with shitty videos.
lol your browser history @10:15
It's really simple: https://developer.wordpress.org/rest-api/extending-the-rest-api/adding-custom-endpoints/#bare-basics Untested, but this is your example using the REST API: ``` add_action('rest_api_init', function () register_rest_route('myplugin/v1', '/dostuff', [ 'methods' =&gt; 'GET', 'callback' =&gt; function(){ // Do your stuff here, don't forget to sanitize user inputs in real case scenario $username = $_POST['username']; // JSON Response sent back return [ 'message' =&gt; "Hello {$username} !", ]; }, ]); }); ``` I like your implementation but I see no reason to use it in a world where the WP REST API exists.
Although I already had an understanding, this is a great resource to add to any developers resources. Well done.
Thanks kasnhasn!
Thanks, dude :)
I can only agree. I thought it's going to be yet another one crappy post from fresh programmer looking for self-promotion (though they tend to make YT videos) and I was pleasantly surprised. &amp;#x200B; Bit about not throwing exceptions from the autoloader to ensure the interoperability was a nice touch, IMO. I'm not sure if I would have though about it myself. &amp;#x200B; Congratulations on the good job! I'm going to check the other chapters (which I didn't expect as well) and maybe it'll be a place I can reference some beginners to.
Oh well, this is far more cleaner that the "old" way of handling things within Wordpress I must admit. Like I said, I hadn't really much time to look into WP REST API, but I definitely should give it a try ! &amp;#x200B; Thanks a lot for your example !
Certainly a solution for IDEs to solve, not the language itself.
I recommend this article about names: https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/
Well, "this" bit is explicitly stated in the corresponding psr, but nevertheless it is good the OP included it in their write-up :)
This is good in general, albeit a bit too much repetitive to my taste. I was quite surprised though, not to find any mention of PSR-4. Any article mentioning php autoload must include a link and a short description for this psr. I didn't check k it thoroughly, but on the first glance examples featuring $root variable are inconsistent. Each expression 8n your example could return a different path, and I am not sure what it should mean. The rest is a good basic write up
could you explain why are you moving from Django ? We are considering options to build mini booking system and looking and Django and Symfony. Could you please talk about your experiences ? Our needs are: -REST API which our ecommerce site will talk to (mostly check availability, but also update/change) -create google calendar events once booking is placed -send notification to guide when booking was received so he can accept or reject the event -rating system for guides (so it will offer events to best guides first ) -UI (admin) so we can change availability manually -UI (guides) so they can set their availability, so they get offered events only when they are available
There is unspoken habbit of passing skills form elders to youngsters. That's why I'm so grateful to PHP community, that didn't ask for any money, when I learned my first 10 years from the internet and experience of freinds. In few years your might find yourself as the one passing these skills.
How is this this better than PSR-4 style autoloading with `composer`?
If you didn't already know about `phpize; ./configure; make; sudo make install`, then you're not pro enough to risk doing this. Just rely on your distro's PHP extensions as normal.
I don't like the way how PHP images are handled. Every extension needs to be compiled which takes time. When one builds Docker image and fails on some steps this compilation steps may take even more time to finish the build. I don't see any reason to do this since, in general, every Linux distro has binary packages of those extensions.
True story. No one of the 8 devs who are at my current company in 2019 knew what PSRs were, not 0, 1, 2, 4. Only ONE of them knew what autoloading was. He attempted to implement it via `__autoload()` just to have it blow up cuz their ONE dependency (PHPMailer from 2009) had its own `__autoload()`. I told him, "Well, why not use `spl_autoload_register()`? and he went "What's that?" The VERY NEXT DAY, my 3rd one on the job, he tindered his resignation and walked out the door just 5 minutes later. Apparently, one hour before this, he had rewritten and/or created a dozen or so new stored procedures on the PRODUCTION database, without telling anyone, and we all spent the next 72 hours (into the weekend) diffing the huge prod DB by hand to the backup copy trying to find and reverse all the changes. But yeah. To this day, the code base is littered with 172 `require_once`s and more `include`s and `require`s. I wrote a PSR-4 autoloader and ported 1/4 of the site to it in my first month there, but the QA difficulties in doing a full-scale audit of the website are so great that it's never been able to be scheduled for testing.
This is the first RFC in forever that aims to make PHP more readable! Most of them do the opposite.
I'm going to say it again: PHP Voting should be reserved for those members of the community who have managed a team of at least 5 PHP developers (not counting themselves) for at least 3 of the last 5 years. Only then will the creators of PHP be in step with the USERS of PHP.
Yeah, I agree with that.
Doesn't seem like a really big application, pick the framework you are most comfortable with. That being said here are some considerations that could help you: 1. in my opinion Symfony has a better modular architecture. You can swap components at will to adapt to your requirements. Django is a monolithic monster, everything is deeply coupled to everything else, especially the ORM 2. The django ORM has builtin advanced Postgresql features like PostGIS and json query 3. Symfony runs on managed PHP hosting 4. you have an admin in your requirements so you may be tempted to use Symfony's EasyAdmin or Django Admin. If this is a end user admin using automatic admin solutions is probably a bad idea. If you don't know why it could be a bad idea then if surely is a bad idea. Rule of thumb: treat automatic admins as glorified database editors. If you want to build end-user admins check react-admin instead: [https://marmelab.com/react-admin/](https://marmelab.com/react-admin/) 5. you appear to need some kind of notifications, I don't understand what kind. Be aware that both django and symfony suck at REALTIME notifications because of multiple reasons. Django has the ongoing django/daphne/channels effort and Symfony has Mercure. Both have their quirks and are not battle tested as node.js counterparts like socket.io 6. Symfony has api-platform with builtin react-admin support
If you don't know the basics of composer in 2019, you surely are not a senior developer then.
You picked the most horrible "open source" license for this! It's better just to make it a proprietary read-only one! No one wants the FSF contagion anymore!
True, but layer caching means you shouldn‚Äôt be rebuilding from scratch every time.
Aye. Yet what about the changes in Dockerfile which invalidate those cache layers? :) I've lost lots of time due this...
Hey there! Good work on your library! It inspired me to create the same functionality, but with a different architecture. Feel free to PM me OP if you're interested in seeing it. I don't wanna hijack your thread by posting my own URL here.
Add extensions at the beginning? The only time I have to recompile them is if I bump PHP‚Äôs version. I‚Äôm not claiming the way it‚Äôs done is ideal (it‚Äôs not) but personally I don‚Äôt find it much of a problem. Certainly not compared to the Haskell images I have to maintain, which needed some real nasty hacks to not take two hours to rebuild if a dependency changes.
."I don't use composer" "So, you don't know what BigO notation is." LOL
Please do not do this people. Please only use PSR-4 which is done through composer. Anything else is considered "bad" - DO NOT DO THIS
Pay it forward.
Yeah. You're right. Still, the time required to compile vs. the time required to install the package makes big difference. In CI env this may be serious issue. Specially when it doesn't store cache layer, or it's not possible to use existing images as cache layers.
Yeah, I'm not pro enough, so I use "docker-php-ext-install" and similar commands.
Isn't that what `docker-php-ext-install` is doing?
OK, so I spent about an hour trying to get this project to work. The most important thing is that the project requires a `PROJECT_KEY` to work. https://github.com/apioo/fusio/blob/0cb96d558210c825adf6f2c025ee241b5d189558/.env The real wealth of the project (the so-called fusion-backend) is provided as a SaaS and its repo contains literally no steps on how to get it working or what the user/pass is. https://github.com/apioo/fusio-backend/blob/master/README.md I'd avoid this.
As I mentioned in the article, the Dockerfile presented is for a base image. The final image is built on top of it: ``` # This is the docker file to create ahoy/staging/production images FROM quay.io/hellofresh/recipes-service:fpm-base LABEL quay.expires-after=8w RUN echo '\ opcache.consistency_checks=0\n\ opcache.file_cache_consistency_checks=Off\n\ opcache.validate_timestamps=Off\n\ ' &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-opcache.ini COPY . /app ``` We've been building docker images for 4 years now. If there's a solution that doesn't involve recompiling extensions, I'd love to know about it. Especially because it's not mentioned in the [official documentation](https://hub.docker.com/_/php/#other-extensions).
I don‚Äôt know why you‚Äôre not obtaining these from your distribution. Compiling from source a dependency as common as this is a slippery slope. I know Alpine has all these packages. Don‚Äôt know about Debian but wouldn‚Äôt redis and the other one be in non-free?
Yeah, CI absolutely sucks at using layer caches properly. It‚Äôs not a huge issue for my PHP images, but I‚Äôve had to take some crazy steps so other languages finish in a reasonable amount of time.
Hehe. I thought you disappeared! I‚Äôve been in JavaScript land for the past year or two but I‚Äôm going back and solidifying the project. üòÅ
I was quite surprised not to find any mention of PSR-4. Any article about php autoload must include a link and a short description for this cornerstone standard.
Hey, it's a good point. I'm thinking to create a separate chapter for PSR standards. From the title of the OOP tutorial, I have focused for beginners. When I was a beginner, it was quite awful when I saw the terms like PSR-0, PSR-4.
This would have been great advice in 1995. I can't believe Wordpress developers still think this is what you're supposed to do.
Hey, thanks! Would love to see what you did. Feel free to hijack, and thank for asking :) ( internet etiquette is a fleeting art form ).
Author mixed together autoloading and instantiation terms, which should be obvious at first glance. Besides. It doesn't have to be better than any other library serving same purpose, because it rarely will be like that in an objective way. For example I'll take a look at it later only to analyse used techique (I don't play with wordpress anyway), because usage looks clean indeed.
What drugs were you taking when you wrote this?
You could have multi-stage builds or just separate docker builds for each extension, which you upload to an S3 or SFTP / SSH server, network store, then download when you need them.
I would advise against a cover article on PSR standards. It will be either too big and too sketchy. Almost each PSR is a distinct own standard that have nothing in common with others and some require crapload of prior understanding and explanations. There is nothing scary in standards. Even if some reader will be scared by a mere link to the underlying standard that defines everything which is written in your article, you must put it nevertheless. Not only because your essay is arbitrary whereas the standard is mandatory, but also you must provide the braver with a link for the further reading.
I disappeared from the Slack channel, but still lurking on Reddit a bit `:-)`. I should be able to get a bit of time next week to refactor a class and create some unit tests. I'll do it in a branch so you can see if it fits in with your preferred approach. Then, if you like, you can do the same on another class, and I can give feedback, if that's helpful.
Sounds great! :)
Roger that!
This sounds inconvenient. For each extension this would require to add \`FROM\` statement and then know exactly which files have to be copied to the resulting image. IMO hard to maintain.
Nice! Here you go: https://github.com/dugajean/wp-hook-annotations
&gt; pro enough Your 12 is showing.
It's a single .so + a single .ini per self-contained library what imagined maintenance burden are you inferring? Someone else has rightly suggested you could pull from package maintained versions if you seek to shed any burden of effort.
Can't stand the style either. Thankfully there are tools to automate most of the conventions if you want to adhere to it. eg: phpcs
&gt;It's a single .so + a single .ini per self-contained library what imagined maintenance burden are you inferring? Multiple base images you need to maintain and keep correct versions of packages. If you're using different versions of PHP each of those images will have to have a separate image. Also, some of the extensions require external dependencies so you need to make sure that you will provide them in resulting image. &gt; Someone else has rightly suggested you could pull from package maintained versions if you seek to shed any burden of effort. Yeah, I think it was me :-)
 [https://github.com/initx/querabilis/blob/master/src/Exception/IllegalStateException.php](https://github.com/initx/querabilis/blob/master/src/Exception/IllegalStateException.php) \&gt;create method instead of constructor Bruh
Please tell me it‚Äôs a joke... this is straight from PHP4 era and with globals and exits.
_esistgut_, thank for you reply! "3 Symfony runs on managed PHP hosting" -do you mean that hosting Symphony will be cheaper/easier than Django or that regular apache/nginx hosting will not cut it for Symfony ? Don't understand what managed means "4" very smart point! know that you said it it makes total sense "5" we don't need real time once. On our current old school solution we just have cron every 5 min. Not sure if it's good practice with Symfony.
pe ha pe, pe ha pe pe pe, pe ha pe pe pe, pe ha pe pe
&gt; Multiple base images you need to maintain and keep correct versions of packages. If you're using different versions of PHP each of those images will have to have a separate image. Docker has build args you know &gt; Also, some of the extensions require external dependencies so you need to make sure that you will provide them in resulting image. I'll be honest, some do, but it could therefore be a sign to work out what their dependencies are, or change linker options &gt; &gt; Someone else has rightly suggested you could pull from package maintained versions if you seek to shed any burden of effort. &gt; Yeah, I think it was me :-) And you'll pay the cost of that in terms of flexibility, control, waiting for patches. This is trade-off's all the way down. There is no right or wrong
I use multi-stage builds for MongoDB because it requires stuff that are not available in the current image. I don't see the point of doing this for the others extensions, especially because they install in a couple of minutes. Keep in mind this Dockerfile is for a base image, it will be updated every quarter at best.
Do you have an example? I'd love to find a simpler solution.
As far as I know, most of them are conference organizers and some of them are PHP developers.
&gt;Docker has build args you know Yes, I'm aware of that. Can you imagine having Dockerfile based on multiple conditions passed as a build args? I can and I know that this is something I'd rather not have. &gt; And you'll pay the cost of that in terms of flexibility, control, waiting for patches. This is trade-off's all the way down. For a couple of years I've been building docker images for various projects. Not even once I had to wait for some patches being pushed to the packages. I think that this is an edge case, not worth considering (unless you work with highly critical infrastructure). &gt;There is no right or wrong In terms of Docker images there surely is :-) in case of PHP extensions I'd say that it depends on convenience and security - those are the factors which could help determining better solution.
This is my first attempt at a proper well-planned tutorial. If you have any feedback you can provide, I will be more than happy to hear it. I'm always looking to improve myself.
Not sure I understand correctly, but Models should absolutely have methods, they should also maintain their own integrity (validation?) but filters belong at the repository level.
Would have totally been futuristic...
I am holding out for an under 14 minute tutorial. And if you aren't satisfied you get the 15th minute for free.
But, but.. but!! :D
No! No I said 15, not 14. Who learns php in 14 minutes?
Great vid. I may have to start working with PHP again. I stopped because I was somehow convinced that php was insecure. ü§ï
Learn woodworking in under 10 seconds... Saws, lathes, hammers, nails, screws, screwdrivers, paint, stain, measuring tape.
But what will you do with the remaining 7 seconds?
Measuring tape under 10 seconds seems legit. What do you think? :D
Build a cabinet?
Depends on whether they need to go to home depot for their apache install...
Well played, sir. Well played.
Depends on whether you need to go to home depot fir an apache server...
Thanks for your feedback! PHP has been updated quite a lot recently. It's no longer the insecure mess PHP 5 was (compared to PHP 7).
Nice I watched the whole thing, I'm off to find a job guys.
Why would you reach into the distro if you are using the PHP provided images? PHP recommends the approach the OP is using, see https://hub.docker.com/_/php
Thanks!
Our dockerized production builds stopped working due to this :D
Ditto! Step 5/14 : RUN pecl install memcached &amp;&amp; docker-php-ext-enable memcached ---&gt; Running in f6b8b13279c7 No releases available for package "pecl.php.net/memcached"
PECL is such a disaster. God have mercy on you if you ever need an account t.
LOL
That's like saying: "Maybe you were a senior developer 5 years ago, but not now because you missed some big improvement".
PECL and [PEAR](https://www.zdnet.com/article/mystery-still-surrounds-hack-of-php-pear-website/) in the same year. Oof.
Same thing with the wiki. [They're aware](https://twitter.com/official_php/status/1135359219107008512) and should hopefully have it fixed soon.
Also, the bug reports page at https://bugs.php.net/report.php is returning 500 Internal Server Error [500 Error](https://imgur.com/a/ZZNoHp4)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/BzqUIv8.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)
Thanks for the link to twitter!
Perhaps you should just fork PHP and make your own rules.
Thank you!
And so this video convinced you otherwise?
You sure about that? $ psysh Psy Shell v0.9.9 (PHP 7.3.4 ‚Äî cli) by Justin Hileman &gt;&gt;&gt; true &amp;&amp; false =&gt; false &gt;&gt;&gt; true and false =&gt; false
Try assign it to a variable
 $ psysh Psy Shell v0.9.9 (PHP 7.3.4 ‚Äî cli) by Justin Hileman &gt;&gt;&gt; $a = true &amp;&amp; false =&gt; false &gt;&gt;&gt; unset($a) &gt;&gt;&gt; $a = true and false =&gt; false
Yes. I miss the simplicity of php. Didn‚Äôt know it got updated and patched a lot of known vulnerabilities.
Now add `echo $a` at the end.
echo the content of $a and see what's there
That's literally what the last line is.
Why? Because PHP copied these operators from Perl. Perl likes using these literal operators for checking certain operation results: # open file or exit open HANDLE, "&lt; :encoding(UTF-8)", "filename" or die "Can't open: $!\n"; # get file stats or exit @info = stat($file) or die;
Erm. Can you name at least one vulnerability that made you drop PHP earlier and which is now fixed?
No.
The last line evaluates the and operator which results to false but the = operator was called first which means that TRUE is assigned to $a now $a becomes true regardless h of what the AND operator returns
Short answer: never use `and` unless you really know what you're doing. `and` and `or` were inherited from Perl. They have lower precedence `&amp;&amp;` and `||` so you could do stuff like: $fh = fopen($file, 'a+') or die 'could not open for appending'; However you shouldn't be doing that, and you probably shouldn't be using `or` (or `and`).
The last line in psysh is the result of the expression.
The result of the expression !== the value of `$a`. That's the bloody point. That's why I said you should `echo $a`.
It could have just be removed since they literally perform the same function
üòÄ He just wants to argue
I can't help it but there is something fishy about comments and voting here.
Xss attack‚Äôs was a big one. And I did a lot of mysql stuff with web apps. I remember having to always escape every string and a lot of other stuff to sanitize data. Front end and back. I honestly don‚Äôt know what all has been fixed, but after reading the new docs, it seems very modern now.
Just ignore the certificate? I mean the odds of it not being them are kind of slim. And do it now because as time progresses people will take advantage of this fact.
XSS is not a vulnerability of PHP as a language. It's, so to say, a PHP user's vulnerability. You had the means of writing the secure code even 20 years ago. Incidentally, the code posted in this video, is XSS vulnerable. I still don't get it how this 15 minute sketch that addressed no security at all managed to convince you.
It broke the PECL command line application. The cert has been updated.
feedback: change the title
No, they plainly were NEVER a senior developer.
&gt; &gt; Docker has build args you know &gt; Yes, I'm aware of that. Can you imagine having Dockerfile based on multiple conditions passed as a build args? I can and I know that this is something I'd rather not have. :facepalm: the args are the version numbers, it doesn't have to be multiple conditions as the build sans the sent in versions should be the same, but certainly if you wanted to go that way it's possible. What you're saying is very much like "can you imagine interpolating a string?" Yes... Yes I very much can &gt; For a couple of years I've been building docker images for various projects. Not even once I had to wait for some patches being pushed to the packages. I think that this is an edge case, not worth considering (unless you work with highly critical infrastructure). Unless you happened to be incredibly lucky I call bullshit. For one thing there are multiple sources for these patches. You'll always be behind the author and each line between you and the author is a cause for delays. What I think is a lot more likely is that every month or so you updated, which is fine, but as I'd hope you'd recognise a very low sampling rate, which could lead to higher confidence than there should be. You got lucky if it's true, and I'm not sure it is. &gt; &gt; [omission in your quote!] This is trade-off's all the way down. There is no right or wrong &gt; In terms of Docker images there surely is :-) We'll have to agree to disagree then. I think the advice you're giving is lazy at best, will lead to stunted developers who have an old-style over the wall to ops attitude. They will always infer a trusted third-party exists and is infallible which significantly increases their chance of failure in a given thing. You're not alone in feeling I'm wrong, but you'd be the first to make something I didn't laugh at when it goes tits up.
Thanks! I definitely agree that some constructs become intimidating as syntax diagrams. That is a great word for it. The subexpression diagram is really circuitous just because of how overloaded `(?` is. I almost thought of breaking that up into many sections but ultimately kept it as one. This doc was experimental. I think it works best with quantifiers, character classes, and branches. Others, not so much.
To be clear I seem to not encounter these problems at all. I'm just providing solutions. I do think more than every quarter would be nice, but at least you're not leaving machines to rot for years, so... meh
&gt; The precedence of ‚Äò&amp;&amp;‚Äô operator is high and the precedence of ‚ÄòAND‚Äô operator is low. Is how it is usually explained and it makes not a slightest sense. The proper answer is "the precedence of `&amp;&amp;` operator is *higher than of `=`* and the precedence of `AND` operator is *lower than `=`*".
They might perform the same function, but overall semantics is different, since they have different precedence. Also, removing them would be a major breaking change.
&gt; :facepalm: the args are the version numbers, it doesn't have to be multiple conditions as the build sans the sent in versions should be the same, but certainly if you wanted to go that way it's possible. What you're saying is very much like "can you imagine interpolating a string?" Yes... Yes I very much can In basic cases it's just a number switch. When things get complex you need to use different repos/dependencies etc. That's the moment when one needs to use conditional statements. I'd rather have two separate Dockerfiles rather then one with build args switches. I think that almost all official Docker images for various projects don't rely on build arguments. Instead they provide a separate Dockerfile for each version and platform. &gt; Unless you happened to be incredibly lucky I call bullshit. All I'm saying is that I never had to relay on a patch which was missing in binary package. I'm aware of the fact that those patches may land later in those packages, yet this didn't affect my projects. &gt; I think the advice you're giving is lazy at best I want my Docker images to build fast. This saves time in lots of cases so yeah.. I think you can call my advice lazy. &gt; They will always infer a trusted third-party exists and is infallible which significantly increases their chance of failure in a given thing. As I understand you're referring to matter of trust for package builders? Yes, there's a point that one should consider all pros and cons on relying to third-parties. &gt; You're not alone in feeling I'm wrong I believe we have simply a different approach to things and different priorities. &gt; but you'd be the first to make something I didn't laugh at when it goes tits up. English is not my native so I'm not sure if you try to insult me or give a compliment of sort. Either way I'll assume the latter :)
I used random API just to illustrate the behavior of the program. You can try any other API, the logic will dump that into SQL. And It can also construct the same response back from the database.
It fetches any given API and dumps that into SQL. And It can also construct the same response back from the database. I don't know much about Json column type.
[Meanwhile me](https://i.imgur.com/97wXTL9.jpg)
Do you mind sharing the Dockerfile of one of your services? It would help me understand how your company is dealing with this.
I'm waiting for v0.2alpha to make any comments
And is it closed source? Because if not you can fix it.
People who upvoted this comment, what are your reasons?
Hi guys, currently working with a large multistore on Magento 1 and deciding whether or not to take the plunge to Magento 2 or Bigcommerce or Prestashop. Due to having over 10 000 SKUs across multiple stores, we have already ruled out Shopify due to its limitations on API calls/requests. Magento 2 we've read nothing but negative experiences and a third of the speed in terms of implimented development changes successfully when compared to M1. &amp;#x200B; Has anyone here taken the plunge of moving from Magento 1 to Prestashop and are you happy with it? &amp;#x200B; Thanks in advance
Have a look at the documentation and you know why: &amp;#x200B; * [https://www.php.net/manual/en/language.operators.precedence.php](https://www.php.net/manual/en/language.operators.precedence.php) &amp;#x200B; &gt;The following table lists the operators in order of precedence, with the highest-precedence ones at the top. Operators on the same line have equal precedence, in which case associativity decides grouping. The table is perfect for beginners.
&gt; The problems for me start with the ability to use the bootstrapped application to resolve services using its make() method: [...] This is a power that belongs not to the user, but to the framework. The only place where make() should have to be called is inside the framework kernel, [...] I disagree. The container should absolutely expose public `make`/`get` methods. They can be very useful in certain situations, like when writing factories that need to return a specific implementation of an interface, based on a parameter you pass. [Here's a simple example](https://gist.github.com/AegirLeet/e0babf199770793a8e3e0b608043a516). I agree that constructor injection is way better than using the container in a service locator fashion, but there are definitely legitimate use cases for a `make`/`get` method!
You can still get your point across without yelling
No, the performers were not. Only the people announced to the stage at the end.
We don't provide those images, I'm not sure what gives the author the authority to claim they are official images, I think it's referring to official docker community images.
I don't think any distribution is providing PHP 7.4 or 8 images, and if they are they shouldn't be, these branches are changing every hour ...
Checkout Shopware 6, it is Symfony based and API driven. Multiple shop are nicely done with selling channels. Currently its in beta. [https://www.shopware.com/en/products/shopware-6/](https://www.shopware.com/en/products/shopware-6/) PS: Don't go for shopware 5
It's still too dangerous and an overkill. You can simply reduce that example using a specific container for your usage, like using this Symfony contract: https://symfony.com/doc/current/service_container/service_subscribers_locators.html
Thanks! I'm new to github and packagist, so I sort of modeled mine after yours. Thanks for the help!
Idk. It just did. Do you have any resources longer than this video to suggest?
The internet is literally filled with them.
Feedback: You can't learn things like PHP in 15 minutes, its just absurd.
https://laracasts.com/series/php-for-beginners is better structured, voiced over without a thick accent, and covers a wider range of topics
We looked at both. Went with CS Cart in the end. Not regretted that decision yet...
My 15 minutes is currently in it's 21st year...
Imma check this out. Thanks
This will make my job harder: &lt;? if( $checked &amp;&amp; count($checked) &gt; 0 ): ?&gt; &lt;table class="table table-condensed"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;in&lt;/th&gt; &lt;th&gt;checked&lt;/th&gt; &lt;th&gt;&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;? foreach( $checked as $line =&gt; $item ): ?&gt; &lt;tr&gt; &lt;td&gt;&lt;?=$item['in']?&gt;&lt;/td&gt; &lt;? if( $item['out'] instanceof \User ): ?&gt; &lt;td&gt;&lt;?=$item['out']-&gt;getId()?&gt;&lt;/td&gt; &lt;td&gt;&lt;?=$item['out']-&gt;getName()?&gt;&lt;/td&gt; &lt;? else: ?&gt; &lt;td&gt;not a valid id or erna&lt;/td&gt; &lt;td&gt;-&lt;/td&gt; &lt;? endif; ?&gt; &lt;/tr&gt; &lt;? endforeach; ?&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;? else: ?&gt; &lt;p&gt;No results&lt;/p&gt; &lt;? endif; ?&gt; or this: &lt;?php if( $checked &amp;&amp; count($checked) &gt; 0 ): ?&gt; &lt;table class="table table-condensed"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;in&lt;/th&gt; &lt;th&gt;checked&lt;/th&gt; &lt;th&gt;&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;?php foreach( $checked as $line =&gt; $item ): ?&gt; &lt;tr&gt; &lt;td&gt;&lt;?=$item['in']?&gt;&lt;/td&gt; &lt;?php if( $item['out'] instanceof \User ): ?&gt; &lt;td&gt;&lt;?=$item['out']-&gt;getId()?&gt;&lt;/td&gt; &lt;td&gt;&lt;?=$item['out']-&gt;getName()?&gt;&lt;/td&gt; &lt;?php else: ?&gt; &lt;td&gt;not a valid id&lt;/td&gt; &lt;td&gt;-&lt;/td&gt; &lt;?php endif; ?&gt; &lt;/tr&gt; &lt;?php endforeach; ?&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;?php else: ?&gt; &lt;p&gt;No results&lt;/p&gt; &lt;?php endif; ?&gt;
Dangerous and overkill how exactly? Your Symfony example seems way, way more complicated.
Here. [https://3v4l.org/oJ4U6](https://3v4l.org/oJ4U6)
There is also Sylius
If you are going to pretend to teach something in a short time at least don't start by saying "I'm assuming you already have installed..."
You could still provide the factory with an associative array of concrete indexed services and leave the creation of the factory to the container. No need to expose the container. https://gist.github.com/finwe/39c15fce99e61b10a1f9e64fb0f7f717 The only thing to be aware of this is lazy creation of concrete services for better performance - but the container should be also able to help you with that, ideally.
Injecting actual instances is obviously undesirable for performance reasons. Lazy loading through proxy objects or something like Symfony's Subscriber/Locator pattern works, but again, that's more complicated and requires more work - what's the upside?
 &lt;script src="https://www.paypal.com/sdk/js?client-id={{ paypal_client_id }}"&gt;&lt;/script&gt; &lt;script&gt; paypal.Buttons({ createOrder: function(data, actions) { return actions.order.create({ purchase_units: [{ amount: { value: "{{ build.price }}" } }] }); }, onApprove: function(data, actions) { window.location.replace(window.location.origin + '/download/{{ build.id }}'); } }).render('.paypal-payment-buttons'); &lt;/script&gt; I have this on my page, but I want to "hide" this code because I have the `{{ paypal_client_id }}` which is exposing my paypal client id in the source code. So I want to transfer this code inside a controller where it is hidden.
https://3v4l.org/jhNMR
 Magento‚Äôs market share is growing in many key markets. ‚Äì Magento is long sought after as a leading e-commerce platform across the world. Many large e-commerce players leveraged on it take off their business. There are two reasons for this level of influence Magento enjoys, its community and technical expertise. While the community is a topic for another day, let us discuss technical expertise and why budding e-commerce players must choose to upgrade / migrate to Magento 2 today. The technical aspects are important to discuss in the light of the recent development i.e. Adobe‚Äôs takeover. When Adobe paid $1.68 Billion for Magento, it paid for fore mentioned points, community and code base. Hence, it is interesting to see how Adobe will steer the company in the upcoming months. However, let us look at the key technical reasons to choose Magento 2 or [migrate to the latest Magento 2 version](https://www.i95dev.com/migration-to-magento-2-reasons/). Read more: [https://www.i95dev.com/why-migrate-to-magento-2-today/](https://www.i95dev.com/why-migrate-to-magento-2-today/)
`and` and `or` exist so you can do things like: $fp = fopen('somefile', 'r') or die("Failure!"); In all other situations use `&amp;&amp;` and `||` respectively.
It's meant to be a public information. You are not exposing any secrets.
well if you only change `or die()` to `or trigger_error()` the behavior will be changed dramatically. It will remain exactly the same for your local dev system but will be suitable for the online server as well.
Thanks, makes sense. I'm used to thinking API keys need to be secret. Do you know one thing too. The code: onApprove: function(data, actions) { window.location.replace(window.location.origin + '/download/{{ build.id }}'); } is going to download a specified file for the user when he completed the payment, but now I have a public path that a user can go to and download the file without paying. Is there a better way of doing this? Simply, I want to sell digital products that people download when they pay.
So in conclusion, what framework do you use now? u/nschoellhorn
Add a value in the user's session on successful payment and check that value in the download path. If it doesn't match, they didn't pay.
You‚Äôre missing the very important *assignment operator*. Your comment is a textbook case of why the other comments are saying not to use it unless you *really* understand it.
Just a remainder [PayPal-PHP-SDK](https://github.com/paypal/PayPal-PHP-SDK) is talking to [v1 api](https://developer.paypal.com/docs/api/payments/v1/) which is deprecated to use [v2 api](https://developer.paypal.com/docs/api/payments/v2/) you need [Checkout-PHP-SDK](https://github.com/paypal/Checkout-PHP-SDK)
Yes, or some other function. I use die() mostly just as an example.
Nope, I acknowledge my fault here. I was wrong.
I've used a rather funky implementation for something like this, by having the socket handling done outside of PHP. I set up a xinetd service on the host Machine, which accepted the connection, and redirected it to a PHP script. In my case it was a Yii2 Console application, but it's a relatively universal approach and would work with any PHP CLI entry point into your application. That application then simply uses it's Standard in/out as input/output. You obviously have to handle all the actual data yourself, as well as exception handling for things like broken pipe. In this case we were throwing encrypted line-seperated string values around. It was very low latency (milliseconds with the most latency at connection time), low-load (as heavy as you make your PHP script, or as light). I'm not saying it's a great solution, but it works, is rather easy to setup and has very few dependencies. That said, it's been live for years without any downtime or hickups, and was written entirely in an afternoon. It also held up against an external security audit.
&gt; I mean the odds of it not being them are kind of slim. I'm glad this isn't a common sentiment when it comes to security.
I have php code (actually ffmpeg in a php file) where I have added the 'report' parameter, however when the php file runs, I don't see an output, so it was suggested ‚Äúrun command from the shell and check‚Äù. Can you provide any guidance with 'run command from the shell', here is the code in question, any ideas/suggestion are welcomed: &amp;#x200B; \`$ffmpegCommand =''.$ffmpeg\_b.' -y -i '.$video\_file\_full\_path.' -i '.$watermark\_image\_full\_path.' -filter\_complex "\[0\]scale=426:-2\[vid\];\[1\]\[vid\]scale2ref='oh\*mdar':'ih/10'\[wm\]\[vid\];\[vid\]\[wm\]overlay=5:5:format=rgb,format=yuv420p" -vcodec libx264 -preset '.$pt-&gt;config-&gt;convert\_speed.' -crf 26 -report'.$video\_output\_full\_path\_240.' 2&gt;&amp;1';$shell = shell\_exec($ffmpegCommand);\`
I have php code (actually ffmpeg in a php file) where I have added the 'report' parameter, however when the php file runs, I don't see an output, so it was suggested ‚Äúrun command from the shell and check‚Äù. Can you provide any guidance with 'run command from the shell', here is the code in question, any ideas/suggestion are welcomed: &amp;#x200B; \`$ffmpegCommand =''.$ffmpeg\_b.' -y -i '.$video\_file\_full\_path.' -i '.$watermark\_image\_full\_path.' -filter\_complex "\[0\]scale=426:-2\[vid\];\[1\]\[vid\]scale2ref='oh\*mdar':'ih/10'\[wm\]\[vid\];\[vid\]\[wm\]overlay=5:5:format=rgb,format=yuv420p" -vcodec libx264 -preset '.$pt-&gt;config-&gt;convert\_speed.' -crf 26 -report'.$video\_output\_full\_path\_240.' 2&gt;&amp;1';$shell = shell\_exec($ffmpegCommand);\`
That React plugin looks its not using Event Source at all, even when available... Weird... A "polyfill" should only fill when support is not available (in case of Server Sent Events IE/Edge only). If going with 1. Mercure, use original polyfill instead, the one you linked only seems to provide a \`removeAllListeners()\` method while removing native SSE support when available, I'm amazed it reached 80 stars.
The polyfill I linked is the one suggested for react-native in Mercure's README.
`php -a`
Your #4 is easiest in my opinion. You can load balance the WS like normal HTTP requests (so you use the same HA setup you already have), and since your nodejs wrapper can just push stuff to redis, you can work with the rest of the stuff in PHP only if you want. And your network will only transfer data when it needs to (full-duplex communication) &amp;#x200B; Also, it falls-back on your #2 if the client doesn't support WS, with the added benefit that the service is always up, so much faster than PHP alone to ping for changes. (Equivalent to a "isset()" check vs "connect to the db/redis/etc and whatever else your PHP script does at startup)
Thanks for your reply of: php -a I'm not clear on what you're telling me. Any additional clarification, or an example, would be greatly appreciated
Oh, nevermind that's probably just me not knowing React Native environments :( Sorry for the rant... I found this which recommend another more widespread package though: [https://github.com/react-native-community/discussions-and-proposals/issues/99](https://github.com/react-native-community/discussions-and-proposals/issues/99)
I thought Mercure is using web sockets for mobile clients as well since they do support it without many problems. This would be my first choice for such problem. Mainly because of go client which will easily deal with scaling. Another example I saw is https://github.com/emitter-io/emitter Polling will be quite a lot of overhead so I wouldn't do it. Better to stick to websockets and have a server that can handle multiple connections easy (nodejs, go). I used a custom solution with Redis pubsub to communicate with many clients. Clients connect to nodejs server via websockets and subscribe to Redis channel. Backend sends messages to the channel and the clients know how to deal with them.
Not for one of our private services, but a base image which builds deps for in-house matrix CI you can google for. Warning we do a lot to the base image before using it in prod. I think it's about a build every week
&gt; &gt; :facepalm: the args are the version numbers, it doesn't have to be multiple conditions as the build sans the sent in versions should be the same, but certainly if you wanted to go that way it's possible. What you're saying is very much like "can you imagine interpolating a string?" Yes... Yes I very much can &gt; In basic cases it's just a number switch. When things get complex you need to use different repos/dependencies etc. That's the moment when one needs to use conditional statements. I'd rather have two separate Dockerfiles rather then one with build args switches. Not really, just another string for the branch to pull or argument to run. Arguably it doesn't even need to be a string. &gt; I'm aware of the fact that those patches may land later in those packages Right that was all I was saying. So they are not available, but you don't care. &gt; I'm not sure if you try to insult me or give a compliment of sort. Either way I'll assume the latter :) Neither, I was being smug, but take the compliment anyway ;) I have no idea why I cared about this in the morning. I don't care right now
echo \`ffmpeg...
 Thanks for your reply of: echo 'ffmpeg... I'm not clear on what you're telling me. Any additional clarification, or an example, would be greatly appreciated
As I understood, you want to debug your ffmpeg command by looking at output. When you call shell command it's stdout returns as result. So, my suggestion is echo result of the command
What is your operation system?
Thanks again. Can you please give me an example using: `$shell = shell_exec($ffmpegCommand);\``
API keys can manipulate data, so they should be treated as passwords. That ID is just an account reference to tell the money where to go.
linux
I used https://github.com/ghedipunk/PHP-Websockets as my starting point for setting up a websocket server that could use my existing php code base. It took several steps though. I let the websocket server run on port 9000, but I have apache rewrite traffic on 443 to port 9000 if it contains a specific string with ProxyPass and ProxyPassReverse. The main api is served over 443. A cron job makes sure the websocket server is kept up and loops through. You might be better served going with a separate think like socket.io, I'm not sure of the weaknesses of my implementation and I'm only using it to pushing notifications to the client to then securely request the updated data from the api.
And you are still asking what does run a command from shell mean? Are you sure it is Linux? Do you know what a terminal program is? How to run commands there?
Because my CI doesn't store layer caches, I have a "base" php image and a deployment image. The base image has all the php dependencies and compilations in it. the stuff that changes rarely. &amp;#x200B; The php deployment image uses that "base" image in the "FROM:" line and only brings in the source code and runs composer and npm stuff. So effectively, I'm just using the repository as my caching layer.
Thanks for sharing!
I am trying my best to offer something worthy. I am glad if it helps.
If you don't know how to run a command from the shell, it might be difficult to explain to you online. It's far, far easier to show you, than to explain it to you. [https://www.youtube.com/watch?v=xcKXD7v06SE](https://www.youtube.com/watch?v=xcKXD7v06SE) This is basic stuff. It's things I expect my 8 year old daughter to be able to do. (Of course, she has a father who writes software professionally. I would *not* expect other 8 year olds to be able to do this.)
Great videos.
Thank you
Take a look at [https://github.com/centrifugal/centrifugo](https://github.com/centrifugal/centrifugo). I used it for one of my projects and it worked great.
declaring a construct method in an interface is a very weird decision tbh. Dunno how I feel about it, it looks weird and I can't think of any real world usage. Why would you do it? What is the benefit of forcing implementers to have a construct method? &amp;#x200B; btw, the background behind your head on the small circle makes you look like Jesus lol. With that golden ring and black cross.
I sort of had the same situation as you. Symfony backend, React front-end and it needed real time updates either by changes done on different clients of server sided changes. I ended up using a normal REST API for everything that isn't real time. Then I used Ratchet [https://github.com/ratchetphp/Ratchet](https://github.com/ratchetphp/Ratchet) to only handle events. All clients connect to the PHP Websocket server and events are just small JSON messages so the server knows to whom to send it. When a Client receives a message that forces it to update it's data it would just fetch it with the REST API. Why this? Well the nice thing is that polling could always be used as a fallback if shit hits the fan. You already have the REST API and the Websockets are only used as a trigger. If for example the client can't connect tot he Websocket you could make it fetch updates every 5 seconds. In your case scalability might be an issue with PHP though the application I developed has several hunderd users and the load is very minimal. A clear advantage over option 4 is that this approach keeps your codebase together. The way I built it the Websocket server is integrated with the rest of the API. Same entities, same services can be used. I just made a new command which starts a websocket server and it'll just listen for new connections and run in the background forever. I encapsulated the command with a couple of bash scripts to register it as a service (though this is not required). To make sure it keeps running you could also just use a cronjob who checks if the command is still running. A few things were a little tricky to get right so I'll list them quickly: * A PHP process doesn't reload it's classes of course, so after every deployment you need to kill the websocket server and restart it. I did this by using `ps` and filtering the output grabbing the right PID. Sending a halt signal and wait for the port which had my Websocket running to clear up. Sometimes the PID goes away before the port is actually free. * Don't expose the PHP Websocket server directly, getting it to work with SSL is a pain in the ass so just bind it to localhost on a certain port of your choice without SSL. Then use NGINX or even Apache as a reverse proxy. The webserver handles the SSL stuff so everything is nice and secure. * Since it's a long running PHP process you'll have to clear the `EntityManager` manually since it caches objects fetched from the database. Normally this isn't an issue since the cache is gone as soon as a request is finished. This can easily be achieved by calling the clear method of the `EntityManager` first thing when receiving a new message. * MySQL connections time out after a while which isn't a big deal but with a long running PHP process it upsets Doctrine. Also very easy to fix by using `getConnection` in the `EntityManager`. The object returned has a `ping` method. if it returns false you can simply call `-&gt;close();` and `-&gt;connect();` to reset the connection.
200 reads and 20 writes per second is easily achievable on a raw database jobbie, but it obvs depends on your particular data schema. The heavier the writes and the more data you add to your tables, the longer it'll take for reads too, especially if you toss replication and locking in the mix. Redis and some sort of SQL database, which API platform already does very well, is a combination that never gets old. If writing to the dB is a problem in terms of speed (eg you need low latency at both ends), you can write immediately to redis then defer dB writes into a queue to process them in batches in the background. There's a lot you can do with a combination of those ideas that are relatively easy to implement and will help keeping load down.
Was in the exact same boat as you. I dropped polling, since more real-time features were upcoming i needed a solution for it anyway. I forfeit on php doing things its not made for, bundles making async stuff happen or even with swoole/ratchet/react. Saw it as an opportunity to learn something new, so i went for node + express + typescript, loved it. Mercure wasnt around back then, it seems cool, but it should get a non-biased opinion from the community on when to go for a websockets based setup or mercure, because according to their readme they make it seem like there is no reason at all to use websockets, which is kindof a red flag to me.
I have a file that will vary in size, anywhere from 1,000 lines to 5,000+ lines of XML. How should I go about parsing the XML document?
Foo, bar, baz.
Don‚Äôt bother with xmlreader with files under 50MB and just use simplexml
&gt; I can't think of any real world usage. It could be something that would be appropriate for a plugin system, where there class constructor must have a particular signature. However I would probably use a proper injector (http://www.github.com/rdlowrey/auryn) to create the object rather than do that.
It's sometimes helpful. For example, I often have string =&gt; class map arrays so I can create a new instance on demand (ORM, plugins etc) and having a reliable constructor works well for it where I don't have a need to build a factory for each one. Once that's done I can hand it off to some other control pattern to inject any other dependencies.
I have added this to the php code, and attempted to upload again, same result echo shell\_exec("/usr/local/bin/ffmpeg -report log.txt 2&gt;&amp;1"); &amp;#x200B; any additional help is appreciated
just going to drop a suggestion for [Laravel Web Sockets](https://docs.beyondco.de/laravel-websockets/) for #4. Super simple implementation and needs next to no hardware to handle large amounts of traffic.
Thanks, i liked it so much.
Good god, by 10th minute my telephone rang: I received an offer of a senior developer position. Good money. What should I do? Should I accept or continue watching?
This seems nice, I'll take a look.
I've always felt that the point of an interface is to declare *what* to expect and not *how* it is handled. To me, a constructor is the best place to state *how* to do something, usually through dependency injection. So while there certainly could be use cases for a constructor in an interface, I think it's an anti-pattern. If you care *how* something is done, use an abstract class and inheritance. Just my 2c
Thanks for your help!
Full disclosure, I'm the author of this package. I made [XML Streamer](https://github.com/TBPixel/xml-streamer) specifically to handle streaming XML in a friendly to use way. It accepts a classmap so you can cast a list of XML elements to PHP classes for type safe use. I've found it allows me an even better experience than SimpleXML (thanks to typehints and IDE support) without the headache that working with XMLReader brings. It still uses XMLReader under the hood so you'll get some memory efficiency too.
kasnhasn, i know it's and old comment, but could you explain what are the advantages of api-platform over FOSRestBundle ? What are the pros/cons of each solution and when each should be used ?
Thank you. This is one of the most pertinent posts recently. As a fellow Maker, I salute you!
The only purpose of this reddit account is to promote the youtube channel with shitty videos. In normal subs they are removed, but in /r/php they prosper, serving for the purpose of shaming the PHP language. I wonder if /r/php become /r/lolphp of lately
Oh and I just checked the second video because there is not single PHP operator in the first one. Surely, beside the usual spaghetti PHP 3 style, there is an SQL injection, a trademark feature of such youtube channels.
sorry, this is terrible. The Creator of the video is clearly a beginner and should in no way be teaching anyone else.
I agree that declaring a constructor in an interface is a weird decision. But it can be useful in some scenarios. For example if I extend one of the examples in video and create Application interface and implement it inside Application class, I can declare a constructor in Interface and accept an instance of LoggerInterface which will force the Application class to implement it. BTW. I am working to improve my recordings.
Nice job, my old packages are finally superceded it seems: [https://github.com/prewk/xml-string-streamer](https://github.com/prewk/xml-string-streamer) (even older: [https://github.com/prewk/XmlStreamer](https://github.com/prewk/XmlStreamer))
Sorry, but I agree. Bad video quality. Annoying background noise. Annoying keyboard sounds.
The ease of use was one of the reasons I built yet another XML stream reader. To be honest I'm still not fully satisfied with mine either. One of my objectives was to be PSR-7 `StreamInterface` compatible, and while I sort-of am I also sort-of am not. My current implementation meets some of the behavior, but not all of it. I figure the only way to meet all of it is to fully commit to using [the PHP XML Parser lib](https://www.php.net/manual/en/ref.xml.php), but it's kinda a headache so it's on my todo list for a version 2.
You could also take a look at sabre/xml. http://sabre.io/xml/
\[source\]([https://media3.giphy.com/media/loG0AwfYdF44M/giphy.gif](https://media3.giphy.com/media/loG0AwfYdF44M/giphy.gif))
Continue watching and you'll get CTO position
No! Pls no! Nooooooooooo!
He is not even trying to teach. Someone just planted an idea in his head that he can make his living in a poor Indian village. So he is just trying his best. I doubt that the idea of *sharing the knowledge* had any voice in this enterprise.
Please tell me that's a joke? :O
My design would be: \- Push messages to Redis Pub/Sub with PHP \- Have a websocket NodeJS instance somewhere (socketIO/NestJS) that listens to Redis and push messages to clients
Is there a PHP installation WITHOUT opcache o.O Hell, the first thing I do when setting up a new server is to copy over the opcache settings for the application. Like, that shit is more important to me than the PHP version itself (as long as it is PHP7) If the goal was to make a valid comparison of gains while using opcache, you could use literally anything and it will run faster. Before OPCache was a thing, we used APC cache, which worked similarly but wasn't an official extension. That was back in the PHP4-5 days iirc. It was the first thing to break when you updated your installation of PHP. Sad times.
Why someone in 2019 will use php without opcache?
This post should just make aware and demonstrate _how_ much faster an application with OPcache enabled is.
&gt;I disagree. The container should absolutely expose public make /get methods. &amp;#x200B; It shouldn't, that is really bad idea. Not only you cannot see the dependencies, it is also easier to make god-classes. Unit testing is also harder. &amp;#x200B; &gt;like when writing factories that need to return a specific implementation of an interface &amp;#x200B; This is actually very simple to implement in Symfony. Most used case is probably GaufretteBundle where you use same interface for different filesystems (like local, S3, Dropbox...). I use global config like this: [https://symfony.com/doc/current/service\_container.html#binding-arguments-by-name-or-type](https://symfony.com/doc/current/service_container.html#binding-arguments-by-name-or-type) &amp;#x200B; If PHP gets parameter annotations (like Java and TS), then it will become obsolete. User could do this: public function __construct(@Inject('gaufrette.my_local_fs') FileSystemInterface $fs) { ... } and that would be enough information for compiler to know what to inject when there are multiple instances of same interface, no need for services.yaml. &amp;#x200B; The other way is this: [https://symfony.com/doc/current/service\_container/factories.html](https://symfony.com/doc/current/service_container/factories.html)
I don't know. I just wanted to test the performance benefits of opcache and show the results.
Echo the command string rather than passing it to shell\_exec, and attempt to run the command in the terminal yourself to see if there are any errors in or from the command you're trying to run. echo $ffmpegCommand; copy-paste the result of that into the terminal for the server you're running the script on, see whether it works or not. If it does work, then try running it as a sudo -u \*phpuser\*, as it might be permission differences between your user and the PHP/web server user.
this is the everyday life of /r/php
Fair enough. To be honest, it's not a bad benchmark, it was just a well-known thing. It's funny seeing that it still makes loads of difference with PHP7, which doubled performance on its own
Exactly. I was curious and just wanted to see how big of a difference opcache makes for me. I thought you guys would also appreciate the results.
&gt; It shouldn't, that is really bad idea. Not only you cannot see the dependencies. You can't see the dependencies either way, because they're dynamic. That's why we're using a factory in the first place. &gt; it is also easier to make god-classes So? Bad developers are gonna write bad code, you can't prevent that just by omitting a `make`/`get` method from your container. If someone wants to write a god-class, they're gonna do it whether you have `make`/`get` or not. &gt; Unit testing is also harder. How so? Please elaborate. &gt; This is actually very simple to implement in Symfony. [...] Isn't that just binding one specific implementation though? We're talking about cases where you need to decide which implementation to use based on some value at runtime. &gt; The other way is this: https://symfony.com/doc/current/service_container/factories.html Again, I fail to see how this applies here. We need to dynamically instantiate some class based on runtime values. --- Here's a real-world example, maybe that will make it easier to understand: We have an application that needs to import data provided by some other companies. There are no APIs or standardized formats for this, so every company sends us their data in their own special format (usually csv, xlsx or xml files) as an email attachment. Before further processing that data, our applications needs to convert it to some common format. To do this, we have a bunch of "Converter" classes, all implementing the same `Converter` interface. Every time we receive one of those emails, we need to decide which Converter to use based on the source email address. If it's from foo@example.com, use `FooConverter`. If it's from bar@example.org, use `BarConverter` etc. So we wrote a `ConverterFactory` with a `make` method like this: `public function make(string $sourceEmailAddress): Converter`. The method basically just does an array lookup and calls `$container-&gt;make(SomeConverterClass::class)`. This way, our Converters can receive their individual dependencies through constructor injection, but we don't have to instantiate all of them when we're only going to need one. Maybe there's a better solution I haven't thought of, but that sounds like a perfectly valid use case for a `make`/`get` method to me.
&gt; I can declare a constructor in Interface and accept an instance of LoggerInterface which will force the Application class to implement it. what's the benefit of it? You can't call the constructor manually (unless with the reflection tricks) and knowing that it accepts instance of X will gain you nothing (you dunno how it uses it really).
I did something similar in a Laravel app backend that implemented chat. The messages were submitted to an API endpoint via POST as usual, but they triggered a broadcast event that was sent via Redis. A separate Node.js script picked up that event and used Socket.io to push the message to the recipient. The Node.js script was behind Nginx and was extremely basic.
When you create an instance you call the constructor manually, don't you? So you have to give an instance of LoggerInterface. You can not create without it.
I am really sorry but this code is nightmare. I know how it is hard to start with programming but maybe if you are not sure about your skills you shouldn't try to "teach".
Just curious, why would you use this instead of something like Guzzle?
It's Symfony's official. Maybe you'll find answers there https://symfony.com/blog/new-in-symfony-4-3-httpclient-component
You can also check the official docs, which explain all its features and contains lots of examples: [https://symfony.com/doc/current/components/http\_client.html](https://symfony.com/doc/current/components/http_client.html)
If you already have experience with Guzzle, you can quickly check out the docs for HttpClient ([https://symfony.com/doc/current/components/http\_client.html](https://symfony.com/doc/current/components/http_client.html)) to compare both of them and see if you'd prefer to use it or not.
Again, he is not trying to "teach". All he is aspiring for is a few penny from youtube ads. From the way it is shoot I would say he is just re-shooting existing tutorials barely understanding what he is doing.
OMG, it is not the bloody sound that makes this video bad.
Wow, yesterday those were empty, now it's full of goodies! YAY!
The video he posted in /r/lolphp is already removed. Seriously, moderators. What the fuck?
Yay spam. Also known as 'Do not touch this company with a 10ft barge pole'
My thought was "Why not just use curl itself". Matter of taste.
Why not having one interface for the final class GoogleAPI? IMO, we should mark classes as final, if they implement an interface, and no other public methods is defined. My 2 cents about it: People should only use what is defined in the interface, if they want to use other classes/methods, the open source creator should not care about it.
Huh. Seeing these docs I don't understand why I had so much trouble with it. I must've been using the wrong search terms. Ended up using Guzzle :')
Ehhh.... I‚Äôd say these libraries facilitate better practices than going straight to curl. And they handle a lot of headaches for you, if you do a lot of http requests. Some people only do a couple and that‚Äôs fine!
My initial impression is that it's slightly more opinionated, less advanced, and easier to use - perfect if you don't need all the complex bells and whistles Guzzle provides. Don't get me wrong, Guzzle is a fantastic library, but Symfony's HttpClient should cover 80% of my use cases. Plus you get the same backward compatibility promise and long-term support from Symfony if that's important to you.
Having used sabre/xml in the past to build payment gateway integrations that required XML to be passed back and forth, this is what I would generally suggest. It allows you to write custom (de)serializers with mapping into DTO objects, which greatly helps with testing.
Your videos have value to me
You are correct! With curl, try writing integration E2E test every time instead of unit. In such a case, do you test against a stage env or actually hit the service you're talking to? If you want to write unit type tests against curl calls, prepare for flakiness and headache. Besides the HTTP client abstraction killing a lot of curl boilerplate it's a lot easier to handle errors from transfer protocol layer abstractions too. A specific transfer protocol being baked in as an assumption to any architecture is no fun. &amp;#x200B; So I'd say the TLDR benefits are: testability, more SOLID code choices with emphasis on LID, future changeability, and much easier / advanced error handling.
Last time I checked, Guzzle is not PSR18 compliant whereas the symfony HttpClient is. So if you're looking to take advantage of that PSR, I don't think Guzzle can get you there yet. &amp;#x200B; [https://www.php-fig.org/psr/psr-18/](https://www.php-fig.org/psr/psr-18/)
lol dude, you're using this subreddit like it's google
OS Project: "We're looking for maintainers" Maintainers of projects using said project: "OS Project is looking for maintainers and we're betting it won't find'em, so let's look for replacement instead of help/call for help". &amp;#x200B; Damn.
Thank you. It means a lot for me.
I get around this by supporting a stand alone PHP docker image. I build my projects on top of that. The base PHP image can have as many tags as you need different configurations. That way you're only ever rebuilding PHP when you need to change the PHP build (or update it). Then using whatever CI/CD platform you're on, you just trigger automatic rebuilds of your base image when the parent PHP image revs, and projects rebuilds when your base image revs.
hey I know these guys, they work in the same city as us.
All too common in the open source world. Everyone wants to consume, too few pay it forward or even pay for it at all.
&gt;\&gt;The HttpClient component was introduced in Symfony 4.3. &gt; &gt;Oh. This is why You couldn't tell that from the class not found error? Are you nuts?
No. It was because I couldn't find any real documentation of value on it, at all. Hence my wrong search queries
Oh okay. Sorry I misunderstood lol :facepalm:.
No worries :D
Curl is great, but its API is so low-level and generally unfriendly that I really can't see a good reason to justify using it directly in application code these days. Libraries like Guzzle let you write code that's _much_ more readable, testable (there's basically no good way to test curl code that doesn't involve writing your own little abstraction around curl), and lets you take advantage of standards like PSR-7 and PSR-18, if you need/want to. Given all that, I can't help but feel that writing plain curl code today is not dissimilar to refusing to use any frameworks or libraries simply because you prefer it that way.
I just use a namespace for that: \name\project\internal\myClass Sure it's still public, but people will always see that it's "internal" before they're able to use it.
I used to work for these guys, long ago.
Iirc the Symfony client has support for a psr-18 adapter, but the client itself is not psr-18 compliant.
&gt;You can't see the dependencies either way, because they're dynamic. That's why we're using a factory in the first place. Well it is not a dependency then, if it is dynamic. &gt;So? Bad developers are gonna write bad code, Yes, but having 10 parameters in constructor would make them think twice. &gt;Isn't that just binding one specific implementation though? We're talking about cases where you need to decide which implementation to use based on some value at runtime. &amp;#x200B; Above applies here as well. If it is dynamic, it is not dependency. You may as well instance them in constructor. &amp;#x200B; &gt;Maybe there's a better solution I haven't thought of, but that sounds like a perfectly valid use case for a make/get method to me. &amp;#x200B; That's the issue. There is far better way, using inversion of control. Example: you have class Converter. In constructor, you will receive services tagged with `app.converter`. class Converter { public function __construct(iterable&lt;ConverterInterface&gt; $converters) { $this-&gt;converters = $converters; } public function convertFromEmail(string $email): string { foreach($this-&gt;converter as $converter) { if ($converter-&gt;supports($email) { return $converter-&gt;convert(); } } throw new InvalidArgumentException('Unsupported email'.$email); } } (I used generics syntax for readability) &amp;#x200B; &gt;but we don't have to instantiate all of them when we're only going to need one &amp;#x200B; Above example will instantiate them one-by-one, until supports() returns true. To avoid it, it can be done like this: [https://github.com/symfony/symfony/pull/29598](https://github.com/symfony/symfony/pull/29598) &amp;#x200B; Basically you get locator, a very small service container only dealing with your tagged services. In your example, key can be email that is accepted: &amp;#x200B; class Converter { public function __construct(ServiceLocator&lt;ConverterInterface&gt; $converters) { $this-&gt;converters = $converters; } public function convertFromEmail(string $email): string { return $this-&gt;converters-&gt;get($email); // will throw exception if not found } } and real converter in this case: &amp;#x200B; class FirstConverter implements ConverterInterface { public static function getName() { return 'foo@example.com'; } public function convert(): string { return 'Hey, I am converted! Did I forget parameter? Yes, sorry :)'; } } I hope you understand the idea. Hope you worked with generics, makes things easier to explain.
Ah, thanks for the clarification!
After 2 years work experience I am at 42k .. you?
So glad you announced yourself with an alert
Now that there is a psr standard, it's time to add a concurrent standard !
42K euro?
I dread the day i'll have to work without detach tho
https://insights.stackoverflow.com/survey/2019#salary Not just Germany but at least you actually break down titles here. "PHP Programmer" is a broad term.
PHP programmers is as broad as Germany. I guess that payscale is different in Berlin than in Frankfurt?
You can always \`EntityManager#clear()\` ;-)
https://cdn.sstatic.net/insights/Img/Survey/2019/salary_language-1.svg?v=d63c4a852014 PHP.... ouch
&gt; Average LLOC per class: 8 Insane if you ask me.
Dear author - @internal is not a PHP tag, it's a part of [phpDocumentor](https://docs.phpdoc.org/references/phpdoc/tags/internal.html). This is effective only assuming that all the developers use PhpStorm and actually have this inspection turned on.
65k
Yeah, i know, but that mean i can't keep other entities during batches. I guess i'll loose some perfs reloading what i need
Does your company look for senior devs? which part of Berlin if I may ask :)?
Relevant xkcd: https://xkcd.com/927/
Not when using the [state pattern](https://en.m.wikipedia.org/wiki/State_pattern) (wiki) Better explained [here](https://github.com/kamranahmedse/design-patterns-for-humans/blob/master/README.md#-state)
**State pattern** The state pattern is a behavioral software design pattern that allows an object to alter its behavior when its internal state changes. This pattern is close to the concept of finite-state machines. The state pattern can be interpreted as a strategy pattern, which is able to switch a strategy through invocations of methods defined in the pattern's interface. The state pattern is used in computer programming to encapsulate varying behavior for the same object, based on its internal state. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
This looks like extreme example of overengineering. If you take good advice "keep classes small" and use it ad absurdum you get bad design. **Classes are meant to group things that belong together and separate them from rest of the system.** Big classes tends to group loosely related thing and thos is why they are bad. **But extremely small classes does not group even closely related things that should not be separated and should be encapsulated.** This leads to leaky abstractions, broken encapsulation and unnecessary complexity.
How does state pattern explain this?
Last job was 65k in cologne, as a senior software developer, mostly backend in PHP
See the code example on [linked page](https://github.com/kamranahmedse/design-patterns-for-humans/blob/master/README.md#-state): ``` interface WritingState { public function write(string $words); } class UpperCase implements WritingState { public function write(string $words) { echo strtoupper($words); } } class LowerCase implements WritingState { public function write(string $words) { echo strtolower($words); } } class DefaultText implements WritingState { public function write(string $words) { echo $words; } } ```
And what should I see? State pattern is pretty common but it cannot be use as silver bullet in every single class of whole system. Also given example lacks any real world business logic, algorithm or data structure which would requiry code and even with simplest possible contetn each class is 6 liner.
 System with good design shoumd have 15-25 lloc per class IMHO in case it does not contain any complex algorithms.
1) Not saying `$whatever` should be used as a silver bullet. Not saying the "state pattern" is fantastic. 2) he code example is a copy/paste from the linked article to **explain** the pattern. No shit it "lacks any real world business logic". 3) LOC !== LLOC Just tried to come up with a reasonable explanation for parent poster's question: &gt; How does state pattern explain this?
It depends... ;)
But State pattern does not explain this if it is not used by almost all classes and if it would not get to 8 lloc even with simple real world logic.
Sure it is not logical that the butler killed the guy. But isn't it fun to try and figure out who dunnit? Geez...
Obviously yes xD
Bear in mind that this is just an average and so not particularly useful when including every class in the number. They might have a large amount of custom exceptions (0 LLOC), lots of events (1 or 2 LLOC). The average class that actually contains logic might be more like 10-30 LLOC, but this will be brought down by classes that are just used for message passing. I'd be more interested in seeing the separated average LLOC for sub-sections of the application and specific types of class (controllers, models, etc).
This explanation makes sense. I would like to see actual codebase ro see how they did it.
That plus the lack of curl's baggage. No more having to wade through a decade plus of questions on how to PUT xml to find the one post 8 years ago where someone figured out you have to set postfields to a non-url-encoded string (instead of an array or encoded string from http_build_query()) and then change the method back to PUT since setting the postfields made curl change it to POST.
It's also picked up by Psalm and Phan, two static analysis tools for PHP.
Gross?
Cool
Monthly
Monthly?
42/12 done
Getting locked into a "We value your privacy" pop-up that soft-locks the screen, plus a request to allow notifications always manages me to block a particular website for future reference. What a great way to never read another article from the same website.
Original article: [http://phpmagazine.net/2019/05/roadrunner-the-php-application-server-written-in-golang.html](http://phpmagazine.net/2019/05/roadrunner-the-php-application-server-written-in-golang.html)
I love the idea of using ELK, but since it's Java, it's just way too resource-hungry to use on small projects. I'm still waiting for a good lightweight alternative.
https://github.com/phpexpertsinc/RESTSpeaker
Why would you use Guzzle instead of https://github.com/phpexpertsinc/RESTSpeaker? it's so much more concise.
This IS using guzzle.
lllll
Came here to say exactly this.
Properties are at the bottom classes. =(
Yeah, if I wanted notifications, give me a button I can choose to click... Even a little modal in the corner with a button that still allows me to scroll and interact with your website would be better.
Black magic... I feel like we are approaching peak PHP performance these days. PHP 7 not fast enough on nginx...? Here's a multi threaded PHP server written in go.
+1 for not saying *my-sequel*.
Mind to share some stats from your code?
The author of a horrible yourtube channel strikes again. This time the code is not dangerous but fabulously, grotesquely stupid. https://imgur.com/a/LBiuyBe Seriously moderators, *why*?
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/TTATWsz.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20eq1hrlk)
As far as PHP is concerned, it doesn't involve multi threading at all. RoadRunner basically spawns a bunch of PHP worker processes and forward the requests to them. Each of the workers still handles only one request at a time.
Even it maybe is good server, to make it popular it needs integrated with linux systems as apache and nginx are, that will make it more reliable.
Interesting, need to try this for my blog =)
I thought you would be a fan of internals ‚Ä¶ ‚Ä¶ ü•Å
&gt;nunomaduro.com/posts/... &lt;insert why not both gif here&gt;
How about PHP extensions? Do they work with this?
Yes, all the extensions works. xDebug is also possible.
Correct, this is multi-process task balancer. However, we are currently working on a solution to utilize amp-php and multiplexing multiple tasks per worker.
Maybe I'm an old fart, but it seems odd that in 2019 the basics of how autoloading needs to be explained, but I guess I come from a place of privilege, since I've been developing on PHP for a long time - way back when automoading was new and I even implemented my own autoloader before it got standardised and codified and composer didn't even exist. I guess I forgotten that a lot of devs these days never experienced that and take autoloading for granted and have no idea how it works under the hood, because they never needed to.
So it's basically php-fpm?
It does not clear the process state after the request to speed up all consecutive calls by elliminating the need to reload your application. Plus its not HTTP specific allowing you to create daemons to consume binary payloads from any provider (i.e. grpc, queue, lambda).
Original website: https://roadrunner.dev/
How can it be monthly man, 65000 Euro monthly ... It' all gross per year.
I see, interesting, but definitely needs a specifically coded app, since usually we rely on process to be killed so we don't have to handle memory leaks and other GC operations.
Memory leaks itself are not that critical, the server can detect them and safely replace the worker. Data leaks are more important, so yes, you have to properly design your application to avoid user context leak. &amp;#x200B; It's not that hard actually with modern frameworks, but you might get issues around user session and security provider if they are made global.
Yes, but with a webserver built-in. So instead of having NGINX + PHP-FPM you could just have RoadRunner.
It sounds to me like you're just inserting one more layer of abstraction. My version: 1. Code calls `$factory-&gt;getConverterByEmail(...)` 1. Factory calls `$container-&gt;get(...)` Your version: 1. Code calls `$factory-&gt;getConverterByEmail(...)` 1. Factory calls `$serviceLocatorContainer-&gt;get(...)` 1. Service locator container calls `$container-&gt;get(...)` What's the benefit?
A better way of handling the processes is using SupervisorD, it's specifically designed to manage long-running processes. We use it extensively for Queue Consumers. It's really nice because you can do things like `supervisorctl restart &lt;job_name&gt;` to restart all consumers. No messing about with PIDs or anything like that.
Thank you. Fuck that site.
&gt;A PHP process doesn't reload it's classes of course, so after every deployment you need to kill the websocket server and restart it. I did this by using ps and filtering the output grabbing the right PID. Sending a halt signal and wait for the port which had my Websocket running to clear up. Sometimes the PID goes away before the port is actually free. Look into http://supervisord.org/ you can make nice configs and it can monitor the process and restart it. You can also call various methods to restart, stop, run.
Am I the only one that finds (properly formatted) JSON easier to read than YAML? &amp;#x200B; Been working with Helm/Kubernetes a lot recently and I find YAML hard on the eyes
You're not alone. Similarly I tend to prefer C-style languages with braces over languages like Python and Ruby. I find it faster to understand the code at a glance, but there's almost certainly a level of familiarity involved there as my commonly used languages (PHP, JS, Go, C#) are all C-style.
I love the "we value your privacy" screen because it's such a blatant lie. If they value my privacy they can figure out a way to build their site without needing to ask my permission to store my personal information.
https://stackoverflow.com/questions/8787893/what-is-some-number-next-to-objectsomeclass-in-var-dump-of-an-object-i-hav As always, Stack Overflow has the answer you are looking for.
It's the object ID that you can get with [spl_object_id](https://www.php.net/manual/en/function.spl-object-id.php).
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Ohh thanks! didn't know about that one, it looks perfect :D
Thanks! I didn't know about that one, that's way better
Yeah I know I was asking how much per month then I did a 65/12
Not sure I understand, there are no 3 calls. &amp;#x200B; Converter service itself only has this public function convertFromEmail(string $email): string { return $this-&gt;converters-&gt;get($email)-&gt;convert(); } From outside (controller), you use it as: $converter-&gt;convertFromEmail('some email here'); The advantages are that you can easily make new converter just by implementing ConverterInterface, Symfony will tag it and can optimize access (due to compiled container)... and you follow rules of injecting dependencies to constructor. Very easy to spot. &amp;#x200B; Keep in mind that ServiceLocator class is part of Symfony, not something you have to make. Maybe that part was confusing. This way, you can have 1000 converters and no impact on performance.
Oof, at this time, the comment I am going to agree with is -9 on fake Internet points... which is a lot in this thread. Is there a .deb, a PPA, or a .rpm? That would go a long way to boosting people trying it.
Write a php script to do that /s
I appreciate your enthusiasm for sarcasm, but to become a master you mustn't use /s. *I'm a human being, and this action was performed manually.*
You really are the worst bot. As user Pelt0n once said: &gt; God shut up *I'm a human being too, And this action was performed manually. /s*
&lt;?php $yearlyIncome = filter_var($_POST[‚Äòincome‚Äô], FILTER_SANITIZE_FLOAT); echo ($yearlyIncome/12);
But then why do the last two objects have the same identifier? They are separate objects but their number is the same. I don't understand how that can be.
The first sentence on the docs page linked by /u/llbe explains it pretty clearly: &gt;This function returns a unique identifier for the object. The object id is unique for the lifetime of the object. Once the object is destroyed, its id may be reused for other objects. After the var\_dump call has endet the lifetime of the object ends, because it is not referenced anywhere else, so it gets destroyed and the id can be reused for the next object.
Because the class created in the first of those dumps is garbaged instantly after the var\_dump, it's never assigned or used after that - thus the new object takes it's freed id
60k for senior, as a start. up to 75k when you are here long enough, then 75k+ for leads.(In berlin)
Makes sense. Thanks!
Makes sense. Thanks!
So is this another alternative PHP engine to Zend? like HHVM? But instead of written in brain-dead C, it's written in Go Lang? THAT IS FUCKING AWESOME!!
Blogspam, now in video form! Seriously though, FuelPHP? Did you just google "PHP Frameworks" and paste the first 10 results into your video?
Top 10 Frameworks for 2019 * Laravel 5.7 * &amp;#x200B; * And an old copy of Laravel * And a framework that it's essentially Laravel. * And the rest.
Surely Symfony deserves more credit than that
I never liked these "I think this is the best ..." posts. &amp;#x200B; Instead of that I prefer real data created by mayjority of PHP community. My 2 cents: \*Top 5 frameworks\* in packagist downloads numbers: [https://www.tomasvotruba.cz/php-framework-trends/](https://www.tomasvotruba.cz/php-framework-trends/)
I never did this, I only worked with microsoft graph query (which is also an API to perform many actions, such as fetching mails). I think there is no built-in methods to fetch "incoming" emails through an API, because the API won't notify you, so all the part that consists of knowing if an email you fetched has already been fetched is on you. &amp;#x200B; From that, you might want to do something not far from that: &amp;#x200B; 1. Set the last fetch date to today (let's say, when the user first create his account) 2. Set up a cron job that will fetch emails filter by stored on gmail after (or equal) to the last fetch date 3. Store them in your database If you do this, you will want to uniquely identify your emails as well (in case you need to re-run a cron for example, or if you loose some emails in the process). Usefull to make a difference (emails you have vs emails you missed). For that, use the &lt;Message-ID&gt; attribute on the email (with microsoft graph query I can get this attribute, this is part of the RFC related to email processing, so Gmail should also be able to provide this data for you). It guarentees the uniqueness of the email for Gmail server. &amp;#x200B; Hope it helps.
I always shill psysh and chance I get as it's incredibly helpful in ways var\_dump is not...but if you want to tinker with this you can see very clearly how this behavior works: [https://psysh.org/](https://psysh.org/) Psy Shell v0.9.7 (PHP 7.3.4 ‚Äî cli) by Justin Hileman New version is available (current: v0.9.7, latest: v0.9.9) &gt;&gt;&gt; class AClass {} &gt;&gt;&gt; $object = new AClass() =&gt; AClass {#216} &gt;&gt;&gt; $object =&gt; AClass {#216} &gt;&gt;&gt; $object = new AClass() =&gt; AClass {#212}
Interesting. I would bet the "database" Laravel package would have been more download than that. Anyway very instructive thank you for sharing.
\* inserts calm yo laravel meme here \*
That's a good idea. I will look into gmail api.
What about juniors, 1yr experience?
Sure, I guess you could "learn" PHP in 15 minutes, in the same manner one can "learn" how an RBMK nuclear reactor works by watching an episode of *Chernobyl*. But depending upon your prior programming experience, it could take you 15 weeks, 15 months or even 15 years to become truly *competent* in it.
Laravel is not a framework, it is literally the religion. If I find something better and more versatile than Symfony; bam, I am out. Especially if it is in Typescript or Java. But not Laravel users.
Highly depends on the company, and that highly depends on if you speak German. If you don't you'll probably join a new company or a startup. They pay i guess around 40k. If you speak German then you can join consulting firms, or bigger corporations, then you would get a lot more. That's for Berlin though.
I expect it is suited to trying in a Docker container. So you can do a self-compile _and_ it is safe to try.
You need to create a subscription inside Google Console for events and write an endpoint to receive notifcations from the Gmail API. You also need to keep track of the point you last read emails and copy most of the data to your database. I wrote a ticket system based on a Gmail Inbox we had where we could reply to email chains (grouped) from the platform. I just dont think I have the code anywhere anymore since I left the company over a year ago.
I can't understand how those circular/hexagonal diagrams help. This is just an "architectural layers" diagram, except now over half the text is sideways and hard to read.
Well, it should help understand what types of code we can have in a project, and how they should relate to each other. &amp;#x200B; If you read the posts, I'm sure you will start understanding it better. :)
My point is you can "unwrap" that circular diagram so it bottom to top instead of inside out.
Ummmm, I understand now. But the point is to really make it with concentric layers. In the old days we had n-tier architecture and that would be a set of horizontal layers, where the top layers depended on the bottom layers, as \`UI -&gt; Application -&gt; Domain -&gt; Infrastructure\` however, that meant that the domain layer would know about the persistence layer. &amp;#x200B; Then ppl started making it with concentric layers (I think the first one was Onion Architecture by Jeffrey Palermo), do make the point that the Domain, being in the center, doesn't know about infrastructure like the ORM, although the ORM knows about the Domain. &amp;#x200B; I hope this make sense now. :)
Need waaaaaaay more information. I assume you're using some kind of forum software with all this profile stuff, what software is it? Also, you'll probably want to ask a forum specific to whatever software you're using.
No pure php .. Or is there any other better way i can implement that?
It still doesn't, because in either diagram the dependency goes in one direction. There's no situation, as we know, where bi-directional dependencies makes sense (it simply means both layers are... one layer). In flat diagrams top depend on bottom, but bottom don't depend on top. In circular diagrams outer depend on inner, but inner don't depend on outer. It's the same exact diagram, except it's a more complicated, less legible way of presenting it.
This type of post is not allowed here. Your question is basically "how do I program".
You're asking to build a mansion without even having some lumber or a foundation yet. With no experience, I'd suggest starting with an existing forum software that already implements users and admins and posts and profiles and almost certainly has some kind of badges and such that can be awarded. For instance [PhpBB has a plugin for user flairs and badges](https://www.phpbb.com/customise/db/extension/profile_flair/)
Yes, but it's about which layers depend on which layers. &amp;#x200B; So, instead of this: UI -&gt; Application -&gt; Domain -&gt; Infrastructure We have this: UI -&gt; Application -&gt; Domain &lt;- Application &lt;- Infrastructure &amp;#x200B; And, of course, we could make it also with horizontal layers, but it wouldn't be so expressive. &amp;#x200B; Anyway, I respect your opinion and I appreciate you took the time to write it, tkx. :)
&gt; Anyway, I respect your opinion and I appreciate you took the time to write it, tkx. :) I appreciate your effort to kindly end this conversation, but watch me persist. :-) &gt; UI -&gt; Application -&gt; Domain &lt;- Application &lt;- Infrastructure &gt; And, of course, we could make it also with horizontal layers, but it wouldn't be so expressive. If you believe this is more expressive, what does it "express" really? What is the difference between "Application" on left and the one on right?
HAHAHA! okok, fair enough! &amp;#x200B; \&gt; What is the difference between "Application" on left and the one on right? This is exactly the point, there is none. But if in a horizontal diagram you put 2 Application layers as in UI -&gt; Application -&gt; Domain &lt;- Application &lt;- Infrastructure Ppl will start asking why are there 2 layers with the same name? Are they the same? Are they different but have the same name? Is it a typo? Making it a concentric layer makes it clear that it is the same layer.
&gt; Ppl will start asking why are there 2 layers with the same name? But you don't need to put two layers with the same name. Let me draw it: https://i.imgur.com/XEr77IA.jpg
I really appreciated that the diagram was SVG or had SVG export ability. So many diagrams are raster only and are therefore hard to drill into. I also like the separation, but I'm not sure on Driving / Driven metaphor What are you using in PHP for domain models divorced from ORM? How are you handling crossing from persistence to domain?
Ummm!! Nice one indeed! Still, in concentric layers the flow of control goes from linearly from left to right while your example it goes from the top-left corner to the bottom-centre, to the top-right corner, which for a newbie it might make it less immediate to understand. Also, it loses the intentionality of communicating that the Domain is the most core part of the application, its at the centre of everything. &amp;#x200B; But your option is also perfectly acceptable, and indeed has the advantage of not skewing the text. &amp;#x200B; Anyway, I still think the concentric layers look cooler! :D :D
There are 2 ways of doing it: 1. Create a port (abstraction) for the persistence, and an adapter to translate from the port to the actual ORM and vice versa. This is a bit complicated to do though. 2. Use the repositories as the adapers, and the repository interfaces as the ports. This one is easier. I implemented the first one in a pet project, just cozz I wanted to see how I could do it. :) You can see the persistence adapters [here](https://github.com/hgraca/explicit-architecture-php/tree/master/src/Infrastructure/Persistence), and the persistence port [here](https://github.com/hgraca/explicit-architecture-php/tree/master/src/Core/Port/Persistence).
Flow of control goes left to right, but we have a circle where dependencies go outside in... I mean you realize this is getting terribly confusing isn't it :) Here's how I'd fix the above diagram to both represent dependency and flow of control: So maybe this is a better way to show it: https://i.imgur.com/w4p8tBd.jpg And this can't be expressed in a circle. So a circle is ironically less expressive.
Well, flow of control is different than dependency direction. Flow of control is the order in which the code is ran, while dependency direction is what classes depend on what classes. Now in this new diagram you gave, I find it worse, cozz 1. the application layer does not depend on the infrastructure 2. the flow of control would be top-centre, bottom-left, middle-centre, bottom-right, top-centre.
Correct me if I'm wrong but... - You open your mobile app (UI). - It contacts app services (App). - It contacts the domain (Domain). - Which may interact with the persistence (Infrastructure). How is your app different.
There are 2 main patterns used for persistence, one is Active Record, and another is Data Mapper. With Active Record, indeed the entities are aware of the ORM. An example is Propel. With Data Mapper, the entities are unaware of the ORM. An example is Doctrine, which is basically a port of JAVA Hibernate. &amp;#x200B; With a Data Mapper, the flow goes like: 1. The user presses a button in the UI 2. UI triggers a use case in an Application service 3. Application service uses a repository (injected through the service constructor) to get an entity from the DB (the repository is also part of the application layer, so the service can know about the repository, or at least its interface) 4. Application service tells the entity to do some logic 5. Application service uses the repository to persist the entity (although this is not always necessary cozz the ORM can know what entities were changed and can, therefore, persist them automatically at the end of the HTTP request) 6. Application service returns (or not) something to the UI 7. UI is sent back to the user
Here it is:) [https://github.com/initx/querabilis/releases](https://github.com/initx/querabilis/releases)
Yup, removed
Consider getting help on r/phphelp instead - see the sidebar.
I'ma ware of these patterns, but both of them make the domain extremely aware of the persistence layer because it's baked into the actual entities. The idea of being "unaware" becomes so vague honestly what's the point. In order for something not to depend on something it shouldn't use it at all. Not to mention simply knowing what entities changed and didn't change is entirely insufficient for persisting a complex real-world application.
The numbers are correct. Doctrine is a industry standard and as only a few more DLs.
Agreed, but it is far too broad for _any_ help forum - the OP would repost there only to find that it is unanswerable there also!
Im sorry that that is your experience but, for example, at my current company we are doing this in production, we have a big application, and the entities are unaware of the ORM, they have no reference to any ORM code at all. We are using Doctrine.
OK, so your entities use no annotations?
That is configuration and can be done with Yaml files. Here's an [example](https://github.com/hgraca/explicit-architecture-php/tree/master/config/doctrine).
Yes, but so you *do not use annotations*. Or do you use annotations. Let's get to the bottom of this.
No, the bottom of this is that you said it couldn't be done, and I just told u how it can be done, and I work with it in production every day. Even if the entities would have annotations, it is not code, they can not create a dependency mess, being in the entity class or not is irrelevant and you are smart enough to know it, you just don't want to admit it!! :D :D.
&gt; Even if the entities would have annotations, it is not code, they can not create a dependency mess See, this is the problem with meta programming. It's still programming. And putting Doctrine-specific "configuration" in your entities still means your entities are extremely aware they're persistent in Doctrine. This is why this architecture diagram doesn't make sense and why it doesn't reflect how the application works. Because many folks like you shuffle around syntax and suddenly declare stuff like "it's not code, it's configuration" and pretend as if that's different. Code is configuration. Configuration is code. "Awareness" and "Dependency" doesn't strictly refer to PHP code, it refers to a component your domain "works with" and "it requires in order to work". Good architecture is not achieved through handwaving. What you have here is a persistent layer coupled with your domain. And that's not necessarily bad. But it's bad when your architectural diagram lies about it and then people like me wonder WTF is going on, because you're clearly not doing in code (and "configuration") what you purport to be doing.
I have to disagree. That configuration has absolutely no impact on the entity behaviour. It only impacts the ORM behaviour, it is only used to tell the ORM what tables it should build and how it should persist specific classes. So, I repeat, the ORM knows about the entities, but the entities know nothing about the ORM. So no, the diagram is not telling lies. The application uses an ORM but it's not tied to a specific ORM, and the entities are surely not aware of any ORM. Good architecture is not achieved by not thinking about how to make code decoupled, which is essential for modularity, which is essential for maintainability. It is definitely not achieved by many folks like you that suddenly declare that code is and should always be aware of each other. I trully hope one day you can understand this, even if you still prefer to do things differently, which is also fine, I mean, there are also plenty of successful applications out there that don't use these ideas.
I think you're a little confused. &amp;#x200B; There are a few RFCs for the structure/layout of an email. &amp;#x200B; If there's no API / webhook interface to gmail, then you'll want to presumably poll it using POP3 (or IMAP) and download mails from gmail (almost as if you were an email client like thunderbird). Once you've downloaded the mails (I'm sure there are a number of pop3 or imap libraries for PHP) you need to think about how you're going to store them in MySQL. &amp;#x200B; php-mime-mail-parser can read an 'email' and help you parse it (extract subject, attachments, text bodies etc). You will only need to use php-mime-mail-parser if you actually want to be able to add additional meta data in your database. &amp;#x200B; php-mime-mail-parser is not tied to Postfix. You can feed it the source of any email you have on your desktop.
&gt; That configuration has absolutely no impact on the entity behaviour. It only impacts the ORM behaviour By that logic PHP code is not aware or dependent on PHP, as it doesn't affect the text code in your PHP files, it just affects how the PHP runtime works. As I said, I'm not a fan of handwaving. "Not aware" and "not dependent" means also "does not refer to". &gt; It is definitely not achieved by many folks like you that suddenly declare that code is and should always be aware of each other. I've never said anything like that. In fact, I'm the one calling you out for having dependencies and coupling you refuse to acknowledge, because you tucked it into comments and metaprogramming. I do this precisely because I'm strongly in favor of decoupling. But real one, not fake one that relies on subtle distinctions like "code vs configuration" which your application can't make for itself.
Ok, you got me, I don't know how an ORM can persist entities without we configuring it. Again, the entities know nothing of the ORM and the ORM knows about the entities. This is an undeniable fact. If you choose to deny it, that's your problem :) &amp;#x200B; \&gt;By that logic PHP code is not aware or dependent on PHP, as it doesn't affect the text code in your PHP files, it just affects how the PHP runtime works. &amp;#x200B; Seriously?! Is this the best you can come up with?! I really think we are done here!! :D :D :D
&gt; Again, the entities know nothing of the ORM and the ORM knows about the entities. &gt; This is an undeniable fact. If you choose to deny it, that's your problem :) If it's an "undeniable fact" that the entities "know nothing about the ORM", then what exactly are those annotations doing in the ORM again? You're like a husband who was caught with mysterious female underwear in his wardrobe and you're "it's undeniable fact that I do not know anything about Susan from work whose underwear that is". What bullshit is this? How can you sit down and type out that those entities were written out with **zero expectation or knowledge Doctrine will be used and they just randomly have bunch of Doctrine annotations in them**. That's your "undeniable fact"? What honestly jedi shit are you trying to pull off here?
HAHAHAHA!! I told you, there are no annotations in the entities, and the configuration, tells the ORM what to do, it tells nothing to the entities. I'm not sure if you are having a hard time understanding this or if you are trolling me... I'm starting to feel you are really getting annoyed cozz you can't find any reasonable way to contradict my arguments...
I asked you a few very simple questions and you can't make up your mind. First you said "yes I'm using annotations, but I don't have to" Second you said "I don't use annotations, I use YAML" I told you very clearly how both wreck the independence of both modules. The annotations are clearly Doctrine-specific code in a file supposedly "unaware of Doctrine". The YAML files have a different problem - they describe how to handle an entity's internal state which is supposed to be off-limits due to encapsulation. Which means your domain is no longer encapsulated, instead it's state is wide open like a bunch of plain records for everyone to mess with. Those are two distinct issues, but both are pretty major violations of basic OOP design.
Don't lie, that's not allowed in a serious discussion. I said it's irrelevant if its annotations of yml or xml. \`your domain is no longer encapsulated, instead it's state is wide open\` Seriously?! HAHAHAHA!!! Outside of the ORM there is no way to get the data inside the entities if the entity doesn't allow it. How is that \`wide open\` ????!!!! HAHAHAHA
TANKS!!! :-)
Thanks. I've never used 2 in PHP. Very well done
I agree, I was just trying to be diplomatic. :)
They don‚Äôt have to be aware of the persistence layer. You can invert that dependency with interfaces so that the domain is only aware that some object exists that has the necessary data. At that point, metadata or not, active record or not, the domain is no longer aware of the persistence layer. Even if the entities themselves are part of the domain, using data mapper would in fact allow you to configure the persistence layer outside of the domain. Real world use cases never lend themselves to achieving this level of decoupling but it is possible. For practical uses it is unfeasible though.
I had to communicate between system using emails once (lol) and used this lib [https://github.com/barbushin/php-imap](https://github.com/barbushin/php-imap)
I mean, if you‚Äôre just wrapping things in facades...
Real-world example: https://github.com/phpexpertsinc/MoneyType/blob/master/src/Internal/BCMathCalcStrategy.php
Like mine: https://github.com/phpexpertsinc/MoneyType/blob/master/src/Internal/BCMathCalcStrategy.php
That's why we also use it with an `internal` namespace.
Here's an internal final class that implements an interface: https://github.com/phpexpertsinc/MoneyType/blob/master/src/Internal/BCMathCalcStrategy.php Here's a public final class that does NOT implement an interface: https://github.com/phpexpertsinc/CSVSpeaker/blob/master/src/CSVWriter.php Here's another public final class that does NOT implement an interface: https://github.com/phpexpertsinc/RESTSpeaker/blob/master/src/RESTSpeaker.php In all of the cases, I wish to prevent developers from shooting themselves in the foot by inheriting classes which they shouldn't and doing shenanigans. Remember, composition is almost always the better alternative to inheritance. Just look at my RESTSpeaker. One of the *very few* instances where I *had* to use inheritance was with my NestedDTO class: https://github.com/phpexpertsinc/SimpleDTO/blob/master/src/NestedDTO.php The reason is that it treats every `protected` property as a DTO property. Thus, I *could* make it `protected $data` and then do an if-statement to not allow that value to be fetched or set, but I just decided to use composition instead, even tho every NestedDTO is-a [SimpleDTO](https://github.com/phpexpertsinc/SimpleDTO/blob/master/src/SimpleDTO.php) in practice.
better than writing it from scratch
&gt; You need to create a subscription inside Google Console for events and write an endpoint to receive notifcations from the Gmail API. They will push any incoming email to you. thanks for the info
&gt; php-mime-mail-parser is not tied to Postfix. You can feed it the source of any email you have on your desktop. Yea, I thought so as well as I read the documentation. &gt; If there's no API / webhook interface to gmail According to others, there is gmail api for this, I will probably use it
* https://developers.google.com/gmail/api/quickstart/php * https://developers.google.com/gmail/api/guides/push
You can leave time() out of there. It's the shortest way. Other way is to use DateTime, but it's way longer: (new DateTime())-&gt;modify('-10 days')-&gt;format('U')
Noted. 1 reason i wanted to know about this is bcos the php manual say dont use strtotime for mathematical operations but if strtotime can give the correct unix timestamp ... then what is the issue ?
I believe it's because leap year, differenting amount of days in month, daylight savings etc. You should be safe if the result is always "absolute". It's way easier to mess up with timestamps.
They are meant to illustrate the smaller core of your application vs more expansive layers and also the direction of access allowed. It makes perfect sense and cannot be represented the same way by your vertical stack. Sideways text is not hard to read.
This is funny. Most the people doing shoddy work like that have no idea what they're doing. Case in point, friends sister doesn't know too much about computers, but she makes money clicking buttons in wordpress.
What? I thought wordpress is the best ecommerce shop system out there. It has even a commentary featureset for products inside!
Wordpress devs are a case of getting what you pay for. They are cheap and will give you something that kinda looks and works right (at least until they disappear when you ask for something that doesn't come as a plugin). If someone wanted a web application and they went the WP route, odds are they did it because they were being cheap. They will continue to be cheap. Web application development is expensive.
Excellent. I really wanted to see more examples :)
You need only 10 wrappers for a bigger class to get the average count down. Simple enough.
I don't like when this kind of people are called WordPress devs. WP devs are guys who develop the WordPress itself, submit patches to wp core etc. People who build sites composed from WP, theme and plugins - downloaded, not bespoke - should be called WP site builders, CMS experts or something like that. For me dev is a word restricted for people who know how to code. Someone said here or there recently that customers should stop looking for WP developers. What they actually need - if they need anything beyond blog or brochure site and they still require WP - is PHP developer who knows WordPress.
Its not. Its only because these devs dont know how to build up a good working project with some thoughts about the future of it. It wont be much more if you use an actual shop system to build a shop. Thrust me. Thats their use case.
While I agree with you completely that some (a lot) of WordPress devs just glue plugins together, there are also a few developers who work for a WordPress agency but know how to build an actual custom plugin. &amp;#x200B; The app your client needs _could_ be built in WordPress by writing a custom plugin that handles his specific use case. Obviously this does not mean it _should_ be built in WordPress, it depends a lot on the specifics. &amp;#x200B; By building something that's tailored to your client's specific use case, form plugins like Gravity Forms and what not can be avoided. Moreover, management of information gathered can be simplified (and not stuck in a form plugin) and tailored to the client's wishes. By building a plugin like this, you'll only use WordPress for management of 'normal' pages. Everything else will be handled by the custom plugin, which basically 'breaks out' of WordPress.
WP devs. Hilarious
I'm sorry. Wh-wh-HWOT?
If you work in the finance sector in frakfurt you make probably more.
Use an online interpreter. You will save a lot of time not learning how to set up an actual application.
You have to escape all the things. In every language all the time since 01.01.1970 until today. Don't expect that this is "fixed". This will never be "fixed" because it is no vulnerability from the language itself. It comes from people who learned php in 15 minutes and thought its now safe.
Can u make a 15 minute video about the diffrences to push php further?
Why do i need go in my php application stack. That thing is made multiple times with reactphp/amp/swoole etc...
1. Why? It provides nothing over the official manual: [https://www.php.net/manual/en/function.explode.php](https://www.php.net/manual/en/function.explode.php) 2. The very first example is wrong, making it hard to take it seriously. explode(" ", "PHP explode.") will include the period after "explode" and as such will be \[0 =&gt; "PHP", 1 =&gt; "explode."\] (notice the period). The period isn't in the example.
The problem with the @internal tag is that it doesn't quire resolve how one imagines it would. You get the "crossed out" look on your own library, which is annoying. And you have no guarantee people will use your library through an IDE that shows them the tag.
&gt; My 2 cents about it: People should only use what is defined in the interface, if they want to use other classes/methods, the open source creator should not care about it. Depends if you can create the class directly, in which case every public method on the class is kind of your "interface". This can be avoided through anonymous classes.
Your argument is that there is a decent shop system outside of wordpress? You are missing the point entirely. If you can mimic the same result on a page by smashing 5 plugins in. You can fix it in a hour. It might take a dev 5 hours to code it. Which one do you think is cheaper? This has nothing to do with systems available, it has something to do with how easy it has become to actually get what the client is asking for. You have to realize that the client does not have the foresight, that a properly built page is cheaper in the long run. The devs often know perfectly well what they are doing. They make money.
Out of curiosity - why would you post that tutorial here? To score SEO points? It's incorrect, worse than PHP's foreach documentation and the code posted there is not formatted and difficult to read. &amp;#x200B; No, foreach is not used to iterate over **associative** arrays. It is used to iterate over **arrays**.
I have a feeling they would be a major breaking change only for shitty code.
I mean, it's blogspam, and we can see that from his recent history, but foreach to loop over associative arrays is super useful if you're indexing by a useful value.
&gt; but foreach to loop over associative arrays is super useful if you're indexing by a useful value. Thanks man, after 20 years of programming I, like, had no clue about this until you taught me! I appreciate it, amazing advice! Got some more?
arrays and anything traversable
DateTime variant can be shorter `(new DateTime(-10 days))-&gt;format('U')`
[removed]
Maybe try to be clearer in the points you're presenting? Because I read that as 'it's not for using on associative arrays'. Perhaps your vaunted 20 years development experience hasn't done much for your communication skills?
Yup: Even after 20 years of programming you can learn something new, or realise you were doing something incorrectly for 20 years. Acting kinda immature about it mate.
If you're a programmer, then you know that associative array is a subset of ARRAY. How's it my fault that you interpreted what I wrote wrong? Do you know what word subset means?
I never wrote you can't learn something new, you learn new things every day until you die. You just assumed I meant that. I didn't. But knowing what foreach does is kind of basic of basics, I wouldn't even label it as mandatory how fundamental it is. Acting kinda patronizing mate.
40 y/o going on 4... and we wonder why our profession has a reputation for being difficult to talk to ;)
He didn't say anything wrong. You choose to nitpick over a trifle matter, on the phrasing that you misunderstood. Find yourself ba better thing to care for
&gt; WordPress is for brochure sites and blogs. That's it. Stop telling people you can build anything beyond that and fucking it all up. While i hate WP as much as anyone, this is simply not true. You CAN build anything with WordPress, you can treat it as a framework and write your custom functionality.
Nothing to see here. Report as spam and move on
You can, but you shouldn't. There's real frameworks out there. Use them.
Yes, I misunderstood. But then he let rip with the sarcasm, and I'm a firm believer in treating others how you want to be treated, so I kind of assumed that's how he wanted to be treated. Hard to say that I care about it, but it is pretty funny watching the guy explode.
Yes, it always happen in such topics about most basic things. Usual Reddit frequenters flood in to troll.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This is NOT how you do it. Also: The formatting is completely messed up.
ü¶ó
WRONG.
Our profession requires constantly being up to date with new technologies and best practices. One of the few professions in which having more experience only means you're less likely to stay relevant and not be jaded by many years of repeating the same (Unless you're a bit humble). So you can see people like this, with 20 years of experience, blowing a gasket over something so trivial without even considering it.
No, this is completely wrong. You are JavaScript developer if you developer sites using js, not if you work on js core.
They're just divorced on paper. Or should I say "on diagram". From what I got from my conversation in this thread, we have classic Doctrine coupling with the domain. It's not necessarily bad, or good. But it's just not what's on the diagram. And maybe we should ask ourselves, what is our goal in achieving that separation. If the supposed "ports and adapters" are so highly specific to Doctrine, they literally can't be pragmatically implemented via anything other than Doctrine, did we achieve something here? I'd argue, hell no... And I fail to see the counter-argument.
You have WP devs who create their own themes and devs who install plugins for every fart needed
k
As for laravel/database, just see https://packagist.org/packages/illuminate/database/stats. Daily downloads are around 10 k. &gt; Anyway very instructive thank you for sharing. Glad you like it! If you have any ideas on how to improve this, just write [me under the post](https://www.tomasvotruba.cz/blog/2019/04/11/trends-of-php-frameworks-in-numbers/).
Does anyone else hate WordPress??! Y'all aren't even using it on an enterprise level. If you want to get all elitist or some shit with it just use Bedrock and Sage as your foundation for WP development. Or hell, just use WP-API and use it as a headless system with a React frontend.
Do you know any other DLs? I'd like to add them to prevent *Doctrine-bias* if they're popular enough. I've added Doctrine to the list of checked frameworks, so it will be part of 2019-06 stats further on.
Here is the update with Doctrine: https://github.com/TomasVotruba/tomasvotruba.cz/pull/793
To give input from the employer side. I own a small startup in Bonn/Cologne and our potential salary range currently contains the steps 42.000, 48.000, 54.000, 65.000, 72.000, 78.000 gross yearly salary depending on experience. &amp;#x200B; Junior salary is for right out of university or "Ausbildung" with little practical experience. &amp;#x200B; Senior positions are expected to also be comfortable to work in Typescript+React or Go at a decent level besides PHP and have experience in databases and systems administration including 1 week of on-call every month. The highest salary is for someone skilled and productive across our technology stack with domain experience (‚Äûthe perfect fit‚Äú), but I don't have somebody for that role at the moment.
Alright, here goes: I'm 37. I've been getting paid since I was 17 to program (with prior initial learning curve since age of 14 to 17). &amp;#x200B; You're looking at this communication from your POV only and not from mine. If you re-read what you wrote it looks like this: Person A (programmer) uses terminology (eg. word array which encompasses all flavors of arrays). Person B (also a programmer) feels the need to nitpick and explain something that's basic to another programmer, who, by implication and text written - gives away he knows it (eg. I can to to [php.net/foreach](https://php.net/foreach)). Implication: person B deduced person A doesn't know something and goes into explanation mode, without asking or confirming person A has no idea about it, while displaying how superficial he read the comment (eg. had you not been superficial, you'd understand that \*\*array\*\* means \*all arrays\*) &amp;#x200B; Person A sarcastically comments, person B gets offended and acts entitled, blaming the older programmer for being hard to communicate with, concluding that our IT world is falling apart because older guys are dicks. &amp;#x200B; You see, you're not alone on this planet and yes - this is internet where we can be douchebags and dicks. Of course I acted sarcastically, it was because you assume things since you think you're by default - right. You continue trying to be right, and I do know it SUCKS to admit you're wrong. It kind of takes something we call a man of character who's capable of swallowing hard pills to admit their mistake. &amp;#x200B; Had there not been ego involved in this, we wouldn't be typing walls of texts on a blogspam post. I'm not hard to talk to, from my POV - you're impervious to anything unless you're catered to. &amp;#x200B; Ironically, you even wrote: &gt; 40 y/o going on 4... and we wonder why our profession has a reputation for being difficult to talk to ;) I'm not 40, you assumed, but that's ok. But did you think your comment meant you are.. easy to talk to? You egoistically looked down and went to explain something to a person who is apparently capable of googling the info on their own. How would you call that? How'd you feel when you read my question when I asked you whether you know what a **subset** is? Was that a nice feeling? I speak this way to people who are green and full of ego (like I assumed you are). We are programmers. We are doing useful things for people who don't know about computers as much as we do. We make something out of nothing in a virtual world. And no, I don't patronize those or speak to them sarcastically. That would be evil. We're here to help people, not laugh at their lack of knowledge in one specific area that they pay us to help them with. TL;DR: don't assume, ask. You're a programmer. Act like one.
This post is laughable. &amp;#x200B; "Waaaaaaaaaaa bad devs make the job hard for the rest of us. Waaaaaaaa" &amp;#x200B; People doing a job badly is part of every industry ever. Crying about it on the internet won't make shitty devs better, and won't make your job of fixing their mess easier.
Yes, that is the current state with naming, but I am only seeing it makes misunderstandings when it comes to hiring professional.
You awfully don't care by mashing that downvote button and constant replying :) I'm very sorry that your ego got hurt by my sarcasm, will you be ok? I'm amazed by your ability to completely misunderstand written word, from "exploding" to what array is. &amp;#x200B; We sure are bringing up new generations right - unable to read, unable to conclude, assuming (wrong) left and right. Didn't we fuck up real good, ha? &amp;#x200B; Take care my young programmer internet friend, you're in for a world of shattered ego glass if you continue this way. Ta-ta.
My point is that the wp devs got their job wrong if they are making ecommerce. If the "dev" would know the other system, the dev would see that he could stick 5 plugins together in a different system. Thats completly diffrent than "The devs often know perfectly well what they are doing". The devs only know how to login in a wp backend and nothing else.
Hey, secretvrdev, just a quick heads-up: **completly** is actually spelled **completely**. You can remember it by **ends with -ely**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
what misunderstandings? if you are looking for php developer, you are looking for someone who is familiar with php, not an actual php core developer. there is nothing confusing about that.
&gt; I'm a firm believer in treating others how you want to be treated Oh my dear internet friend, that's exactly what I did to you. How'd you miss that? I can't say I was amused watching you explode, I kind of feel bad by how much you "don't care" :) I suggest we stop here, what do you say? OP blogspammed, we're both aware of what foreach is, there are way better sites where you can flame people and think they're mad at you. I think this behavior is beneath both of us. &amp;#x200B; I'll extend friendly hand first - what say you, shake on it?
Fuck of im realy pissed of from these shit bots.
I worked on a wordpress site that had an 18 second load time because of the 78 plugins. I'm not exaggerating on either count. By worked on, I mean rebuilt in laravel.
First things first, JavaScript isn't a framework or a CMS, it is a programming language. If you develop websites using JS, you are a JS developer. Frameworks such are Laravel, Symphony etc require you to code A LOT. I have yet to see a website developed with a framework with no or minimal coding involved. Magento isn't a programming language or a framework, it's a content management system, or a CMS, much like Drupal, Joomla and WordPress. If your certificate says your are a developer, without verifying you know how to code, I would doubt the authority of the certificate issuer. It may sound harsh to you, but you need to write programming code to be called a developer. The rest are designers / builders / masters etc.
But he client picks them anyway. You are hung up on a thought that the the devs are doing something wrong. They are doing what the clients asks dem the cheapest way possible. The cheapest way possible is not learning multiple systems. Its learning one system that you can force into whatever the client asks. This is both the benefit and the error of wordpress. wp devs are not just making e-commerce sites, they are just making sites whatever the pretext may be. There is a huge difference in making a site for 250$ or 5000$. And for all that I care, they can do it. Someone has to fix it eventually or totally redo it and it is my experience that its far easier to get paid for someone who has gotten stuck with a terrible system.
Is this covenant written down somewhere? Do you know how asinine this sounds on a forum dedicated to PHP, considering that PHP was not considered a "real" programming language by "real" software developers for most of its life?
magento developer exam consists of a lot of programming questions, e.g. how to correctly override core classes, how to extend functionality, how to use models and collections properly. solutions specialist exam is the one that does not involve programming questions. magento is both, a cms and a framework, same as wordpress. it already have some content management functioanality, but it also has tools to develop new functionality on top of that in a framework specific way (like in a laravel you are expected to use elequent, in magento you use collections and xml configs to define things), where pure framework only have tools. Last time I checked you have to write code when developing worpress sites. modularity let's you use someone else code (npm, composer, wordpress plugins), but you still have to write something anyway. so yea, they are developers, some are just very bad ones.
Man ... i did not know of this snippet .... Thankx !!!
Thankx. Noted.
Do you need a jr php dev experienced in OOP and mvc pattern ?
&gt;I mean rebuilt in laravel When you rebuild a WordPress site in laravel. What do you use for the backend that the client can modify the site with? Do you build a custom CMS interface for them to use?
Nova is a no-brainer for that these days. US$100 is peanuts and it will usually save enough time to pay for itself.
Agreed, use the `DateTime` objects instead, you'll get much more predictable, consistent results
Off, not of.
The last one I used was OctoberCMS, I'd like to try some others as time goes by but we'll see. If they're not extremely active I try to just steer them away from a full CMS and build a small admin section that adds/removes what they need.
&gt;Web application development is expensive. Sweet lord Jesus thank you for this. Amen!
Damn, where did your essay-like comment go? I only managed to skim read it. Did you remove it in favour of this more graciously toned one for some reason? Lets consider the imaginary hatchet buried. Thinly veiled jabs aside ;) &amp;#x200B; &amp;#x200B; P.S. You've only got two years on me. And 40 wasn't a bad guestimate for education + 20 years work experience.
Yea I removed it, it kind of sucked, I got tired of typing it - it's unrealistic someone will read that amount of text these days :) 40 wasn't a bad guesstimate at all!
The internet is a terrible place for any sort of civilised conversation, far too much is lost in translation without body language and intonation. I can't actually tell if you're taking a poke at me or not.
/r/PHP is usually a nice place, everything is understood, unless the topic is something stupidly simple, everyone consider themselves an expert in. Then with such people swarming, it becomes a mess
Not at the moment, sorry. We just hired a few month ago.
Okay
you missed that realy to trigger a diffrent bot.
Being an installer / configurator does not make you a developer.
The clients never said that the dev should make a wp site. Its the fault of the dev who dont want to make good things. I cannot see why the devs are doing anything right here. They deliver low quality work for the same amount of money they would get to do it in a better way. But they stick with wp because of "nobody pays my learning". Thats the problem here.
Really, not realy.
Hey, malicart, just a quick heads-up: **realy** is actually spelled **really**. You can remember it by **two ls**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Here he is!
I think there needs to be a delineation between devs (the ones who write code and build things) and the installer / configurators (those piecemealing plugins from all over into a big mess).
The WP code is not enterprise ready. Is it production ready? I dont think so. I know php and the wp source is shit. No sorry.
People who defending this shit are shitty people themselves. :)
Just use a propper cms no blog software if you want a customer editing the stuff.
WOW WOW a dev is creating a from for a backend? unreal! That must cost thousands... or wait its just a form.
Explain why?
sage.... wordpress theme trying to be laravel... badly. Why dont use laravel straight?
Laravel admin, statamic .... plenty of "admin" backend for laravel
I'm not overly familiar with Laravel so I was curious. With that said, what benefit is there over doing what @coffee\_pasta said, using WordPress as a backend via WP-API and building a completely separate front-end? I say this because I've worked with CMS' a lot over the years and it takes a long time to refine them despite what others say. WordPress, despite it's warts, is a highly refined CMS. Ignoring poorly built plugins, it's a solid CMS that is quite secure. Rebuilding the wheel is often seen as a step backward than building on something that works. Again, no slight to OctoberCMS or whatever, just wanted your opinion.
Agreed \^
Laravel needs more resource hours. Can't meet the budget requirements for the same features, we can get a whole lot more website out the door for a 100k budget using WordPress than if we built from the ground up using Laravel. Also, content authoring doesn't require any user guides or training with WordPress. For the really complicated stuff we do use Symfony or React at my agency, but there's absolutely nothing wrong with WordPress either. If it's set up correctly its very extendable and can handle large volumes of traffic with acceptablely good page load times. It won't be top of the line but it's not worth looking down on.
Why would he explain why? I keep finding more and more devs on here who just go "shit is bad" and then never say why, or just link to some 5 year old article complaining about one feature. Just ignore their shit. No language is bad, Wordpress isn't "bad". They can be configured and built badly, yes, but that's just because most developers are "bad" and even then it's freaking relative because if the site converts, the client's making money and all the forms work, no one , literally NO ONE gives a shit that there's a function in there that doesn't do things "properly". Bah, /rant.
I must say, in web development there's just A LOT more of it, because the barrier to entry is so low nowadays. Any idiot can go online and "build a website" in under and hour. Wix lets you do that shit in 5 minutes \[no joke\] So the sheer amount of crap that gets put out there is vastly larger than say "bad plumbers" or "bad electricians" can do. So often we do need to just unload the anger of dealing with other people's crap :)
You convinced them to let you rebuild...that's nice. Most of the time i have to convince them to disable 20-30 plugins and then find a way to improve it with the rest still running :) Worst i've seen is a site with 108 plugins, keeping that record until i find the next one.
You clearly don't work with a UI team, a design team, a dev team, a QA team, with management sprinkled on top. That shit does cost thousands.
UI team is a cuttie blond girl whos doing great shit. QA is my boss!
Also. WP didnt have all of that while developing kek. They missed the target a lot.
[removed]
You are making alot of assumptions here. A. Its fairly common for a client to specifically ask for a Wordpress site. B. Its not the same amount of money that they would get. Where did you get that idea? C. If it would make sense for them to change, they would. But it doesn't. Look at it this way, if I asked you to deliver me a car and I gave you 10.000$ Would you give me a Fiat or a Ferrari? There is a huge market for cheap Wordpress sites just accept it. If you dotn want to create such sites, then don't. There is also work for more refined devs. It is false to assume that the former dev is making the new dev's life harder. They could just take on another assignment. This is why you always vet the code before you give your estimate.
In this case, with those mentions of other comments, it makes sense. PagerFanta solved a problem that Doctrine didn't have a solution to. It now does, and developers likely feel this is just forcing their hand to upgrade to something newer and actively supported.
Ok let me rant here properly and waste my time for you. Just look into the code. The architecture is not there. Its a pile of code. there are no common standards at all. there is no plugin infrastructure (its "just put your own framework code here"). Its not about the functions which weren't working/ I wasnt aware of that. Its about they declare functions in global space. /discussion end
Why bother with wordpress? A simple html file could be delivered 1000x times more faster. But thats not what anybody needs.
&lt;?php if(isset($\_POST\['submit'\])){ $name = $\_POST\['name'\]; $cmd = shell\_exec('[busca-smtp-bloqueado.sh](https://busca-smtp-bloqueado.sh)'); } ?&gt; &amp;#x200B; &lt;html&gt; &lt;body&gt; &lt;form id="smtp" action="" method="post"&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h3&gt;SMTP Bloqueado? \&amp;nbsp;\&amp;nbsp;&lt;input type="text" name="name" value="Insira o email/dominio aqui"&gt;&lt;/h3&gt; &lt;input type="submit" name="submit" value="Buscar "&gt;&lt;br /&gt; &lt;br&gt; &lt;/form&gt; &lt;textarea rows="20" cols="150"&gt;&lt;?php echo $\_POST\['cmd'\]; ?&gt;&lt;/textarea&gt; &lt;/body&gt; &lt;/html&gt;
Pagerfanta has loads of adapters, doctrine is just part of what it does. I've looked at doctrine paginator and it wouldn't cover some of my needs and especially needs of someone working with mongo/elastic etc. I'd rather help maintain Paregfanta ;)
My assumptions are that the devs arent shit and wont sell fake shit. Ok? Why cant the dev (or consultant) explain why a different system is better and does not cost more? Why should they get less money when they use explain to use a better opensource product for that software? &gt; &gt; &gt;Look at it this way, if I asked you to deliver me a car and I gave you 10.000$ Would you give me a Fiat or a Ferrari? A ferrari of course. But im no sales person, im a dev. I sell good stuff. Why should i stick my live to wordpress? Thats not good for the future. Learn different stuff and youre gonna make a lot of more money... &amp;#x200B; I also didnt said that the former dev only wants to make anything harder. He is only an idiot in the line of shitty wp devs who doesnt care about their produrts and future. There is no reason to make wp to an ecommece site. &amp;#x200B; Imagine you go to your haircutter and he just puts a pot on your head. Yes you get your new haircut but you would expect something else from a professional. you can cut yourself the hair that way. Its fraud if you sell a 100$ job for 10k.
Eh, I believe Wordpress can be pushed a little further than brochure sites and blogs-- but, yes. For smaller &amp; mostly "static" projects. --There is a threshhold where you should be looking at Laravel and the like.
You're on the right track Once you get your shell_exec working, the output is put in `$cmd`. I was about to write all this out but the documentations page on this has an example on how to print this output: https://www.php.net/manual/en/function.shell-exec.php One thing I have to remark is that what you are making is very very insecure, a user could put in malicious commands after your command with full access to your server, so it's not a good idea to ever make this page publicly available (but for local use it's fine)
Says you.
Just read this: [https://www.optimizesmart.com/wordpress-ninja-15-minutes/](https://www.optimizesmart.com/wordpress-ninja-15-minutes/) Wordpress is not the problem. Devs who don't understand it and don't build things correctly are the issue. The platform is too forgiving since it's PHP so you can kinda build things however you want to. That's why so many jump on it, and why there's a lot of badly built sites out there. The platform itself gets reviewed and updated constantly and they've put in a lot of effort to structure it and set standards for it. /not really arguing, just wanted to share.
This gate-keeping bullshit is a bit stupid in a PHP forum of all places.
Thanks, i'll try. &amp;#x200B; It's only for internals purposes.
Work like a charm! &amp;#x200B; Can you help me with another thing... &amp;#x200B; Need to pass variable $name into a shell cmd, like &gt;shell\_exec('\[busca-smtp-bloqueado.sh | grep $name\])');
The entire site is down.
This isn't a problem with "Wordpress Devs". This is a problem with shitty developers who don't actually know how to develop and rely on a broken system to make some easy money. These kinds of developers exist everywhere and across MANY languages and disciplines. You're not griping about anything new, and these kinds of situations aren't going away any time soon. Do your job, do your best, and quit your bitching. If you can't deal with it, you're in the wrong line of work.
Awesome! That should work, you're just adding more characters then needed I think: &gt; shell_exec('busca-smtp-bloqueado.sh | grep '.$name); Perhaps I don't see it but, what do you need the brackets for in your command? Adding a variable to that command is nothing more then just basic adding 2 strings together. You can also do: &gt; $command = 'busca-smtp-bloqueado.sh | grep ' . $name; &gt; $result = shell_exec($command); if that makes it more readable for you
In this thread i ranted more about WP. Its about the devs and the software. The software is so basic and has no structure so that everybody wants to program with it. the "standards" the wp team makes are not good and they are luring in "new devs". They basically have to rewrite the whole codebase if this project wants some good attention. This will take years.
I'm not defending bad development, rather attacking the use of complaining about it.
Nice. You just introduced a shell injection. If youre helping someone else this should not happen. They should be for sure that a explanation here is "safe". So please help properly. &amp;#x200B; @kbruno89 please read this documentation: [https://www.php.net/manual/de/function.escapeshellarg.php](https://www.php.net/manual/de/function.escapeshellarg.php)
I agree with everything you say and yet here we are. Posts like the above do nothing other than help the OP feel like they've done something when in fact they have simply vented, much as my comment did above. One may as well write an appeal in their facebook status 'Stop raping people'. The offenders are a) not reading the post and b) will not stop offending due to reading it.
I already commented on that. Don't be a dick.
I read it. But nobody answering was helping the real unsecure question here. He could add it to the answer easy.
You actually helped him shipping unsecure software. Thats the point here. It works now. Its in production now. Never change production. RIP piece of software.
And after I made sure it wasn't an issue I chose to not overload a newbie with things that don't matter as of right now. To each their own.
Awesome! &amp;#x200B; That's running! Many thanks!
Wont you complain if your barber gives you the cheapest haircut he can do? Or do you expect this skilled man to use his skills? &amp;#x200B; Its fraud and youre defending it.
If you dont say anything about it it wont change? Why do you have to shut up if you want to speak out? Its a real problem
This page is enough to get started.... When else? He cant make unsecure software. NO NO NO NO Why did you decide it wasnt an issue at all? it is an issue!
"Developers" can mean many things. There are real-estate developers. "Programmers" means people who write code. "WP Developers" also do write code, they just write basic code and typically suck at it.
I suggest you exert energy on changing the way you handle the problem, in order to make it less of a problem, rather than wasting energy complaining and expecting the world to get better.
I'd go to a different barber, mate.
&gt; Why did you decide it wasnt an issue at all? Because I asked and he answered my question to my satisfaction. A question and an answer which you did not read. Have fun!
I only want the fake devs to stop. Its my problem when i fix this stuff. MY personal problem. I dont want it but the customer asks for fixing the bad work. Thats a real job opportunity. GREAT. But i want to make good products and dont want to fix your bad work? I waste none of my energy posting here against shitty developers who dont care about their work. This is work for my future. How my future will work out and with which software i will work in the future. But typo3 stands 10levels above wp now. WP is not a cms!
&gt;I only want the fake devs to stop. Me too buddy, me too. I also want all animals and children on the planet to not experience suffering, I want all people to be treated with respect and love, and I want world peace and happiness in general. &amp;#x200B; Unfortunately, we live in the real world, where shitty devs dev shittily, and suffering exists, so what are we going to do about it? Waste the day wishing and posting on the internet, or roll up our sleeves and do good work?
Yes. But in the dev environment they wont find a barber so fast like you. So they stick with their shit dev.
amen!!! this is my life story. some guy that learned to use wordpress plugins comes in and charges a 1/10 of what i do. uses at least 15 plugins for a simple site. page is slow af. and then when its your time to fix stuff you have to spend at least an hour to figure out where that extra div is coming from.
&gt; So they stick with their shit dev. Indeed. And has your posting on the internet complaining changed any of that? Or have you just wasted your time and energy?
I really did not see that answer here. There is no to that topic. OP doesnt care.
Probably some people reading the stuff switching to other stuff or are now interested in other stuff?
If you believe you have made a difference, then good for you, continue. I'm more sceptical, I'm afraid.
If were shitposting all day about wp devs and this meme will export to the cfos, no one will use wordpress anymore. Its just some posting work. Posts have their impact in the real world. Today i dont work. So i dont have to roll up my sleeves. Im just securing my future
Internet Posts make a difference. I feel like i can even do political work on my chair. I only need enough shitpostings but it works.
I truly hope that your complaining posts change the world. Until then, I'll be dealing with the situation as it is.
In that case, Godspeed my son.
Just send him to the internet soon. He will learn.
Also you just wasted your time defending this post. What is your point here? Why was it worth your time?
These WP projects aren't always cheap either though. My company has taken over complete rebuilds of systems originally built on WP that were never going to run properly on the plugin soup monstrosity that was originally attempted by the WP devs. They get sold on a bunch of BS from an agency with a price tag on the work that resembles what a real development company would charge. Then the agencies subcontract out the work to a WP development group in India that they use and the results are terrible. &amp;#x200B; So not only are there people trying to get cheap work done who end up working with cheap WP "developers", there are agencies out there who charge premium prices and then turn around and pay cheap WP developers to do the work.
There's a lot of Wordpress devs, calling themselves PHP devs, bringing that down. Likewise, there's not too many massively paid PHP devs to bring that avg up. &amp;#x200B; I work in the North of England (where salaries are generally lower) and we don't pay anyone less than 30k for PHP, flip side, our best paid dev is in the low 50's.
I was waiting for you to call me out on that, and you're right, me complaining about complaining is probably more of a waste of time than the complaining. &amp;#x200B; I think I just wanted to make the point that complaining about the bad work of others (especially in web dev) is like screaming at the wind: you'll just tire yourself out and the wind will still be blowing. Instead of wasting energy complaining, spend energy on handling the problem effectively. &amp;#x200B; Believe me when I say there will always be bad developers, and you will always have to deal with their mess. Therefore it is better to make yourself better, rather than hoping they get better. &amp;#x200B; I hope that makes sense.
What I meant by that was good luck on your quest, I wish you the best.
Another guy called them configurations. I like that term as well.
What sort of work do you do?
Thats meta meta meta. And i dont care. I want to attack the problems. Thats my life. I work to attack problems. I dont care about meta meta meta phases. WP just needs a bad reputation so it will change. Thats the plan here.
Right. Just because I can pound a screw through two pieces of wood with a brick to hold them together doesn‚Äôt mean that‚Äôs what I should do.
&gt; Some of you guys are killing people. Are you serious? Like legit killing or you just being a drama queen. &gt; Someone built it for him in WordPress. It was shit and any modification was a dance in plugin hell. How do I know? After huge expense and little results he hired me to fix stuff. Doesn't sound like it's WP, it sounds like its lack of competence on the developer side of things. &gt; Because my client perceived that he is "stuck" with his original creation and would not heed my rebuild advice he has bounced from WordPress dev to WordPress dev trying to get things working to his liking. Every dev I have consulted with thinks the same thing. "I'll use Gravity forms here, some shit plugin there and another fucked up plugin over here." Sounds like the client is the issue more then anything else. While yes WP code base and the way things are built are a cluster fuck of stupidity - if you actually know what you are doing, you can make some cool shit with it. Now in this case, with the boss not wanting to re-write, I would just do it any ways, behind his back and release it into the system. If it's huge and too complex, then work with whats there, just massage it. &gt; I see this several times a year. unknowing clients hire a "Developer" to build an app and they get a WordPress monstrosity. Then I become the asshole that has to tell them it is not worth it to "fix" it. It needs to be re-built at twice the original cost. Just because it's WordPress doesn't mean it has to be re-written. Sounds like what you are dealing with is the classic he said/she said, where the client doesn't know what they want, so they hire a dev for super cheap and as a result they create some crappy rushed bullshit. So dev failed and client is an idiot. &gt; WordPress is for brochure sites and blogs. That's it. Stop telling people you can build anything beyond that and fucking it all up. You're really wrong there, you can build some amazing, epic shit. You just have to know what you're doing. That's like me building shit with laravel and bitching laravel sucks.
Awesome. Good luck with that.
It can be but it shouldn‚Äôt be. It‚Äôs slower than my wife‚Äôs potty time while playing uno.
Would you like to omit all the JavaScript from the home page used by the plugins on the backend? Welcome to functions.php hell. As well as thirty different tutorials and methods for accomplishing but not really accomplishing just that.
Same goes for frameworks. Now‚Ñ¢ there are "real" frameworks so use them.
Sometimes we need to vent :) I don't disagree with you though that it's a waste of time and accomplishes little. Then again, so do mosts protests, and people just keep walking around holding "funny" signs, achieving nothing. It's human nature i guess.
\&gt; **WordPress is for brochure sites and blogs. That's it. Stop telling people you can build anything beyond that and fucking it all up.** &amp;#x200B; That is definitely not true, there's a lot of stuff you can reasonably do with Wordpress as a base, if you're willing to put the work in. If you're just gonna slap together some plugins though? Then no. But it's that attitude of "There's a plugin for that" that ruins wordpress' reputation, imho...
OctoberCMS, Laravel Nova, Backpack, Voyager (kinda), don't only provide your client with what they need to manage their web app but are extremely dev-friendly so building the front-end and customizing things such as roles and CRUDs aren't quite a matter of reinventing the wheel as you might think. These packages are built with that in mind so they integrate with the rest of your back-end workings quite well and in my experience fit right into most projects however far into development they are
How is it gatekeeping? I felt it was more deterring
Thanks for this scream. I'm also often encounter this problem. But. I think it's not a problem of Wordpress or its simplicity. It's problem of education, even we talk about such resources as Youtube and etc. Newbies are not reading any basic recommendations how to cook CMS. They doesn't know, that any manipulations in core, in third-party modules are restriced, and any layout constructors, "that are useful", are killing speed of such CMS as Wordpress. Also, they doesn't know that "such easy" CMS as Wordpress can be staffed with modules, that makes Wordpress as universal, as latest version of Drupal. And finally, as I spoke about Drupal - they doesn't know, that there is a lot of other CMS or CMF around of Wordpress. So, they haven't skills to think enough and hold a high-level of developing any web-applications, to be Developer.
A small addition to what vvvex noted, there are also date libraries that make things a bit more intuitive and semantic if you're manipulating dates, instead of having to use interpreted strings. An example is [Carbon](https://github.com/briannesbitt/Carbon). $unix_time_stamp = Carbon\CarbonImmutable::now()-&gt;subDays(10)-&gt;timestamp;
[removed]
We migrated the project's namespace, but the composer install and composer update regenerates the old url in composer.lock even if we delete that file and runs composer clearcache Becouse of this on a new install we always got package not found errors. What we should do?
To be fair, WordPress is a blog/CMS system that people made into something more. Laravel and the like are frameworks.
&gt; I don't like when this kind of people are called WordPress devs. WP devs are guys who develop the WordPress itself, submit patches to wp core etc. It's not like there's much to choose between them.
It is not the same to code for Wordpress than to configure Wordpress. If a "developer" configures Wordpress (installing, adding plugins and templates and adding content) then it is not a developer but an **end-user**.
Thanks ... Will check it out ...
DateTime still has the same issues such as strtotime in \+1 month from Jan 31st -&gt; 3rd March ?
If I understood your question right, you need information on setting up the webhook/endpoint. &amp;#x200B; A webhook/endpoint is just a URL in your own server that Stripe will send a request every time an event your system may be interested in. &amp;#x200B; For learning purposed, you can simple set up a route to respond to the following URL: [https://example.com/hook/stripe.php](https://example.com/hook/stripe.php) (change [example.com](https://example.com) to your own domain, of course, and adjust the URL depending on framework you're using) in that route handler, either email yourself $\_REQUEST, $\_POST arrays to see what data Stripe is sending. Let me know if that helps, or if I wasn't clear enough
I used to build Phonegap apps with Laravel API's, and knocking out an efficient REST API in Laravel is trivial. It's certainly quicker than creating custom post types, adding custom fields and exposing them via the WP API would be.
Thanks! Will respond shortly
A senior developer is somebody that could deliver results. Composer could help but it is not a requirement, while there are so many codemonkey that spend most of the time adding libraries, updating dependencies and configuring CI (and docker) instead of coding real code.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
That helps. &amp;#x200B; How difficult is it to set up the other way of connecting to stripe via Oauth?
Oh man, you've vocalized exactly what I've been thinking for the past decade. You could replace WordPress with Drupal and get the same effect!
```$d = new DateTime("now"); $d-&gt;add(new DateInterval('P1M'));```
Yup because you didn't read the thread
This is all one needs for microservices in PHP. So many built in bells and whistles - I would not go back to developing microservices without this framework.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Worst software in history of software. Period.
and.... as I'm reading this, I'm seeing a rotating ad with "create amazing web apps without writing a single line of code" next to the post. the other thing to do if you're building someone an "application" of any sort in Wordpress - which you're welcome to do - is to understand the limitations and tell the client that this should be enough to get them going, but they will need to upgrade/overhaul to get to the next level at some point. Set expectations. Except... most people who only work in WP don't \*know\* what the limitations are, as they've never done anything else. So... we hit this recurring problem.... :/
I believe you. I inherited a site with 65 plugins - almost no one believed me. "No way, no one ever needs more than 5 - I never need more than 5!" Argument from ignorance at its finest....
[removed]
https://laracasts.com/ and/or https://symfonycasts.com/ and https://phptherightway.com/
Traversy Media on YouTube is my go-to channel for web development tutorials. Or if you prefer books, check out [this one](https://www.amazon.com/PHP-MySQL-Development-Developers-Library/dp/0321833899/ref=sr_1_7?keywords=php+mysql&amp;qid=1559853745&amp;s=gateway&amp;sr=8-7)
Have you done any software development?
Is there a "repositories" section in composer.json?
None, mostly just web stuff.
if ($x = getDbResults() and !$y) { doSomethingWithResults($x); }
Thanks! I will check both of these out, they both appeal to me really!
Thanks for such extensive resources! I look forward to getting into these!
+1 for Laracasts, Jeffery Way is very thorough and is excellent at breaking down complex topics into digestible bits.
I'm not sure these relate to the moodle platform...
I'm a WP dev and charge $150/hr. I don't think the problem is WP here, the problem is the developer...
WP-API isn‚Äôt going to address shitty plugins and the ancient lurching architecture of WordPress itself is it? It just makes the front end process more up to date.
With Nova, are you also spending your time building in WYSIWYG functionality with galleries, attachments etc? Are you also building in easy extensibility where you can just put a shortcode in somewhere? What about all the settings and options pages? What about SEO and other types of things? Are you custom building that too? &amp;#x200B; My point with all of these questions is that Nova is extremely limited. I've recently worked on it and it's not even close to replacing a well built CMS that has been proven time and time again.
To be honest I have the front end of Moodle administration pretty well in hand, I've been helping take care of a different moodle site for a while, but the back-end stuff is where I am kind of in the dark. I've never had to do anything on that level with it.
Laracasts and that php link above should help. Make sure you get a good understanding of classes, arrays, and general OOP patterns
True that! I suppose I was just venting at the venting which is even more useless.
Delete the vendor directory before running the 'composer update'.
cancer_type
The basic syntax used to add a column to an already existing table is shown below `ALTER TABLE \`table_name\` ADD COLUMN \`column_name\` \`data_type\`;` **HERE** * **"ALTER TABLE \`table\_name\`"** is the command that tells MySQL server to modify the table named \`table\_name\`. * **"ADD COLUMN \`column\_name\` \`data\_type\`"** is the command that tells MySQL server to add a new column named \`column\_name\` with data type \`data\_type'. from [https://www.guru99.com/alter-drop-rename.html](https://www.guru99.com/alter-drop-rename.html)
For a plug-in system one should create an interface for a factory, or have a separate initialization method. Constructors are a sacred.
Just as I had completely forgotten Laravel's butchered reinterpretation of what's a "facade" you remind me.
Ironically your the one wasting time and energy moaning about people moaning about other people. Get a grip.
Web software development, or server admin? They're 2 different animals.
When you create an instance the class is either statically references (so you make no use of the interfaces it implements), or you are given a class name as a string. You can't typehint a string classname against an interface, the way to check it implements an interface is through the reflection API which is really cumbersome. And then there's the fact it's simply a bad practice to pass class names as string around your code. It's better to pass a factory, and have an interface on *that* factory. So in a nutshell... honestly that constructor on an interface can't really participate in your code in a natural way. So if it can't, why define it? Plus, most commonly different implementations of the same interface will have different constructors. It's an essential feature enabling the flexibility of implementations.
And / or backticks?
&gt; With Nova, are you also spending your time building in WYSIWYG functionality with galleries, attachments etc? Quite frankly, there are far, far better WYSIWYG options that Wordpress (Concrete5 is a much better example of this). And my experience is that WYSIWYG in a CMS is a massive minefield. Users paste content in from Word or elsewhere, put in a load of weird formatting, and generally run the risk of messing it up. I'd much rather have something more locked down that required me to edit HTML to change the layout, and left the site owners to just edit Markdown or something for text blocks. There are Markdown-based rich text editors, so it's not like the user experience suffers, it just keeps it more locked down than it would be otherwise. &gt; Are you also building in easy extensibility where you can just put a shortcode in somewhere? There are packages for that, but why would I need that? I'm perfectly capable of knocking out a decent form in a few minutes, and unless I'm doing a very form-heavy website it's not worth it. &gt; What about all the settings and options pages? Those are a bad thing. Configuration like that should never be in a database unless unavoidable. Server-specific settings should be defined in a manner specific to that install, such as a `.env` file, while common settings should be kept in a way that can be added to version control, such as a YAML file. That way, if someone fucks it up, you can just revert the changes with a single command. &gt; What about SEO and other types of things? Are you custom building that too? That's not exactly rocket science. There's enough packages for any modern framework to cover that, and if there aren't I'm perfectly capable of publishing my own. I'm sure as hell not going to be stuck redoing that over and over. &gt; I've recently worked on it and it's not even close to replacing a well built CMS that has been proven time and time again. Maybe, maybe not, but Wordpress is not remotely that. I personally actually haven't had the occasion to use Nova yet as right now I work almost exclusively on a Zend legacy application right now, but it would certainly be worth a look if I were building a Laravel application at work. In the past, I spent a good deal of my time building Phonegap apps, which necessitated building an API first, and some of them used Django, which has a similar admin out of the box. Later, I switched to Laravel and generally built an admin that consumed the API with Angular. Now, Nova would be worth my time to investigate if I did a similar project, and even if it didn't fit, there are other options such as React Admin. I sure as hell wouldn't spend as much time and effort building an admin interface as it would cost me beating Wordpress into shape for the overwhelming majority of projects I've worked on, Phonegap and otherwise.
I think our experiences might just differ quite a bit. I do recommend Nova for a lot of things, but I believe Wordpress as a CMS works very well. It works for millions of people for years! Wordpress is definitely not for everything, but if you need a small application, why not put it in Wordpress so your client doesn't have to spend lots of money on you reinventing the wheel with a custom CMS that would be subpar to those that are already built. The other benefit someone might get from using Wordpress is that you don't have to worry about building something every time. It's nice to use a CMS to add a form, or add a new page. At least in my opinion.
1) Who died? 2) If he thinks Wordpress is only appropriate for brochureware sites, his opinion on everything is invalid.
strtotime('-10 days') And the reason you can't really use it for exact math is because that's seconds elapsed since since midnight January 1, 1970 UTC. And as much as we love to say there are 60 sec in a minute, 60 minutes in an hour and 24 hours per day, that's wrong. It does not count leap seconds, and those can go up or down. It's probably fine for 99.9999999998% of the stuff you would need to use during your lifetime tho.
Why Wordpress, though? There are better CMS's for that, even for brochure sites. Take Grav, for instance. It's easier to theme as it uses a proper templating system, and it has a form builder and an admin. It's no harder to use than Wordpress.
Well, one of the best reasons is for all of the plugins. There's some crappy ones out there, but there are also some really really good ones. Woocommerce for example. That plugin is really well made and can turn a plain website into an ecommerce site in a few minutes!
Yeah. We have the same rate. I prefer to build my projects from scratch but the budget rarely allows it. I feel like I can pretty much build anything with WP or Drupal. So I don't technically agree with OP here. The problem is when you get to a project that another WP developer built. It's usually super Plugin reliant and figuring what they hacked up to make it work is 90% of the problem.
I 100% agree with that statement. I've gotten so many WP sites that are just horrible. I just think we should promote good practices rather than just being like, "Hey man, you suck" lol.
i just think that web app development costs more because web is kinda duct tapped especially in front end
what about west germany 1500 gross for a fresh ?
But not much further. Yet people ask for woomerce "developers". PHP development and wordpress imo are two different things.
I don't understand the downvotes as above post is pretty much spot on.
Woomerce is an absolute abomination. Just look at the code.
Must be all the WordPress developers getting upset for being called not developers lol.
That's not my experience of using Woocommerce. In 2015 I saw it produce a site so painfully slow it was unusable without a caching plugin, Memcached and Varnish. A year later the client had replaced the site again. And the quality of Wordpress plugins could be very charitably described as "mixed". It's often the case that they do one or two things differently to what you need, few are properly tested, and some are known to deliberately misbehave. Not to mention that building them yourself requires you to use some very dodgy code. Most other CMS's have some sort of plugin system, and most are technically superior to Wordpress. Also, the plugin ecosystem leads to a common miscomprehension that Wordpress can be turned to any task, leading to monstrosities with tens of plugins that can break at the drop of a hat.
Mostly these dev happen to be in php. Mostly because php is relatively easy to learn.
Personally I think it's a good solution if someone who isn't a developer wants a nice diy system they can manage, but if you're gonna pay someone to make you a website then you might as well pay for something that uses a framework and allows for more customizability/developer freedom
You aren't seriously suggesting that Wordpress is the only CMS written in PHP that does basic HTML optimizations and SEO, are you? That also depends heavily on the template you use with Wordpress, it's almost never plug and play with real world client requirements.
My point was moodle doesn't use laravel or symfony, and you will find it doesn't do a lot of what phptherightway recommends (or at least does it in a weird and different way). Unfortunately I don't really have any good moodle resources to give you though.
Ooh, gotcha, thank you for informing me of that, I'll have to look into figuring that out then, I guess.
You can actually use dates from 1901-12-13T20:45:54+00:00 to 2038-01-19T03:14:07+00:00 on 32bit systems. 1st Jan 1970 midnight UTC is the moment zero, and values before this moment are just negative. For example: date('c', -500000000) == '1954-02-26T23:06:40+00:00'. On 64bit systems you can go, um..., way more far, like almost 300 billion years both ways. But otherwise true: timestamps are "absolute durations" as seconds and it's up to date library used to judge leap years, seconds, daylight savings and other stuff.
DateTime has same "issue", yes. This can be avoided by only handling start of the month: \+1 month from Jan 1st = 1st Feb Limiting DB queries is easy this way (WHERE \`event\_date\` &gt;= "Jan 1st" AND \`event\_date\` &lt; "Feb 1st")
&gt; WordPress is for brochure sites and blogs. That's it. Stop telling people you can build anything beyond that and fucking it all up. I said it on the original post and I'll say it here: this opinion is just wrong. How do we know this? The massive number of plugins that exist for it. People have needs beyond Core. They build plugins to meet those needs and WordPress core is robust enough to provide the API's and hooks to do so. The problem is that non-developers try to put WordPress + off-the-shelf plugins way too far and cause this sort of understandable, but not entirely correct perspective. WordPress is NOT the ideal solution for every single problem, but its a great solution for more than just brochure sites and blogs. Particularly if you're not a crazy plugin-installing idiot.
Correct, but you missed the most important thing. The Unix time number is zero at the Unix epoch, and increases by exactly 86400 per day since the epoch. There should be a leap second there at Mon Jun 30 23:59:60 UTC 1997 (and other), but not in unixtime. ( Sometime the OS corrects for this in the date command) So it doesn't represent exactly the date, and if you divide by 86400 to calculate the date, you will be a few seconds off. See here https://en.m.wikipedia.org/wiki/Leap_second
You aren't an engineer, stop pretending.
I don‚Äôt remember saying that word
No argue there, you are right. I personally have kept following as "prime directive": If duration is longer than a day, use dates. Been working on penny auctions in past which were based on some tens of seconds as auction time; can confirm: timestamps hurt. Daylight savings were worst. Thank god industry died :D
I'm replying in context of using "sage" which mimic laravel blade, controller, etc. if you already "built" that from scratch, why not use laravel instead? for 100k budget and you cannot have the same feature in laravel comparing to wordpress? wow.. if I may ask what is the feature that is so costly to build under laravel comparing to wordpress?
 /** * @param string $rightOperand It must be a float-like * @param string $iAmStupid Do you really want an imprecise modulus with a precision package?? * @return string */ public function modulus(string $rightOperand, string $iAmStupid = ''): string { NumberHelper::assertIsNumeric($rightOperand); if (NumberHelper::isFloatLike($rightOperand)) { throw new InvalidArgumentException('Cannot compute non-integer moduli: Install ext-bcmath.'); } if ($iAmStupid !== self::I_AM_A_DUMMY) { throw new BadMethodCallException( 'You CANNOT get precise a modulus answer via Native PHP. ' . "\n" . 'Install ext-bcmath (preferred) or set $iAmStupid to true.' ); } return (string) (($this-&gt;leftOperand / 100) % $rightOperand); } This just made my day.
This has nothing to do with being a senior developer. Even a junior should be able to code something that delivers results
ports can have types. You're right it makes them less flexible, but it doesn't make them less-than. A coder I know was telling me about how coders where he works have achieved full separation and the words "shaman", "undocumented" and laughter were all included. They basically highly coupled their code to their own resolver in order to skip making decisions on coupling.
PHP outputs html. Your browser parses the HTML/JS and your browser never knows the page came from PHP. So search your problem in the resulting HTML, not the php code (use the devtool's network tab)
Yes. PHP gets executed way before the html/js, so you can echo out JS includes. You should use something like http://pastebin.com and show us your code, it's most likely a syntax error somewhere.
I use bootstrap which relies on js and css in my php pages. I use php and mysql to handle data and js to make some clever things happen.
So, if I link a JS file it will actually work? Thank you btw! I'll check the js, probably did something wrong there
I tried doing that. But for some reason on r/PHP I wasn't getting the post body (?) option only the option to fill in the title. Would you know if this is coz I am not active on this sub ?
Thanks!
The irony is not lost on me. We both lose.
It depends on what you mean by 'link'. Would be best to give us some code to look at. But generally speaking, echoing out JS in PHP is absolutely possible.
Seems a bit skewed considering Laravel pulls from Symfony.
Interesting. I briefly checked the "methodology" part and it seemed legit, but now I see. And not only Laravel, but many other frameworks as well. Wonder if it could be taken into account somehow.
I meant like &lt;script src="..."&gt;&lt;/script&gt; I'll post some code ASAP
You could adjust the download count for dependencies using the dependency list for dependents - so if frameworkA/foo (100 downloads) depends on frameworkB/bar (500 downloads), you negate 100 download count from frameworkB/bar, giving an adjusted figure of 400. This won't give a completely true adjusted figure - if someone / CI downloads frameworkA/foo from version control, then uses composer to pull in dependencies, this won't be accounted for.
But we do this all the time. PHP runs server-side and outputs the page we send to the client. Use the 'view source' at the client to see what arrived. If your Java Script arrives broken sort out the PHP so what you want arrives.
Just start with html: https://www.w3schools.com/Js/ Once it works do the same in a php page. The main difference is that in php you output (echo) html. So, either you close the php tag before outputing the code or you echo it. &lt;html&gt; &lt;head&gt;&lt;title&gt;HTML+PHP&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;My HTML page&lt;/h1&gt; &lt;?php echo '&lt;p&gt;With some echoed by php&lt;/p&gt;'; ?&gt; &lt;h2&gt;More HTML here...&lt;/h2&gt; &lt;p&gt;&amp;hellip;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;
Laravel is almost 50% of Symfony, so a part of Symfony become "popular"
It's not the WordPress that killed the project, it's the developer who (probably) used wrong thing in the wrong place. The question is, it's not what you use but how you use it. I'm a web application developer, not a WordPress or Laravel or NodeJs or VueJs developer. I use WordPress a lot (custom plugins) but Laravel is my first choice and also Nodejs whenever I need. It doesn't mean that, my WordPress plugin will shitty because of WordPress, I can make worse thing using Laravel as well because those are tools and tools don't produce products but the developer. So, keep calm and try to solve the problem you've got (if possible) because that's what we do, fixing problems or we quit. All the best :-)
&gt;to make it popular it needs integrated with linux systems as apache and nginx are What? That makes no sense, you can install this on a Linux system the same way you can apache or nginx.
Both Laravel and the Symfony *Framework* use the Symfony *Components*. Laravel does not pull from the Symfony *Framework*.
english? laravel made symfony popular?!?
Ports are SPIs. To make them specific to a given technology that would implement them is to defeat their purpose.
And ruby, python and javascript. They all have similarly low barriers to entry.
Good point, that would be useless :) It's cleared from this data: https://github.com/TomasVotruba/tomasvotruba.cz/blob/5bdbc5894e3e5f0351d3801eb76b27f0441f1798/src/Packagist/Purifier/InterveningPackagesPurifier.php#L66-L85
Actually it does, it's right in the composer. Imagine nobody would use Symfony, just Laravel. Laravel would have e.g. 10 k downloads/day. But both would have the same 10 k :)
Thanks, I try to make it as legit as possible. **If you have any ideas how to make it even better, please share**. I'm very limited by my brain, and I'd like to get as close to objective as possible. Laravel "cleanup" is here: https://github.com/TomasVotruba/tomasvotruba.cz/blob/5bdbc5894e3e5f0351d3801eb76b27f0441f1798/src/Packagist/Purifier/InterveningPackagesPurifier.php#L66-L85
Exactly! :)
It's Symfony downloads are cleaned from Laravel here: https://github.com/TomasVotruba/tomasvotruba.cz/blob/5bdbc5894e3e5f0351d3801eb76b27f0441f1798/src/Packagist/Purifier/InterveningPackagesPurifier.php#L66-L85
Perfect!
I see based on comments here this information should be right above the table (and not in my replies). Thanks for feedback y'all!
link? are you confusing the components with the framework? these are just components that any framework might use: "symfony/console": "^4.2", "symfony/debug": "^4.2", "symfony/finder": "^4.2", "symfony/http-foundation": "^4.2", "symfony/http-kernel": "^4.2", "symfony/process": "^4.2", "symfony/routing": "^4.2", "symfony/var-dumper": "^4.2",
The package for the Symfony framework is symfony/symfony - [that package isn't present in Laravel's dependencies](https://github.com/laravel/framework/blob/5.8/composer.json)
You say issue, but it's about what you would expect. Are you hoping to get the last day in the month? But then you've gone forward 28 days rather than 30, unless it's a leap-year and then you go forward 29 days. That's very inconsistent
These kind of metrics will also always favour frameworks that have more automated testing etc. Not sure how it works with packagist, but with NPM every download is counted... so the things used in larger projects with more automated devops type shit going on will have many more downloads than things where the devs are actually manually triggering a download.
why are you cleaning the symfony dependencies from laravel? I'm not sure you understand the difference between a library, a framework, and a github account.
If I delete the vendor, I got a lot of "package not found errors"
yes
For a CS student there's a lot of theory you don't know. Some days I wonder if LAMP/WAMP stacks aren't hurting more than they help. Start from the scratch, see how a request is made. What is it your browser is doing when you type in http://domain.com. The shorter version is, your browser (the thing that executes the javascript later on and has no knowledge whatsoever about your PHP) sends a HTTP request (bunch of plain-text data) and awaits for response from the server. This response could be anything, but the browser expects a static resource, be it an HTML document or image or something else and proper headers so that the browser would know how to operate this response. Today's browsers are smart and they do some guess work too if the headers are bad but thats besides the point. However, when you send a request to your web server, which could be apache, nginx or you name it, receives it and decides how to operate on it and it largely depends on the settings of the webserver. Is the virtual host existing? Is there a document root? Are you requesting a file? Or are you hitting a page that requires the webserver to offload the request to a CGI interface (like PHP). In your case, you are hitting the CGI interface so the webserver is like "Jesus, take the wheel" the PHP then takes that request does its magic and returns response to your webserver which it dispatches back to your browser. See what I did there? From the perspective of your browser, there was no PHP in the equation. It sent a request and received an (hopefully) HTML response, which the browser likes and starts acting upon it. It starts parsing the HTML from top to bottom, blocking execution here and there (mainly loading of styles and **scripts**) and once it reaches your `&lt;script&gt;` tag, it starts executing the javascript that you've returned alongside your HTML. So, no. Javascript can absolutely work on echoed page or whatever page. Browser doesn't give the slightest fuck, as long as it is a valid javascript. Which you can undoubtedly check by pressing F12 on your Chrome and see if there are any errors there.
Thanks !
Thanx. How have you personally handled such things ?
Thanks.
Interesting ...Thankx.
Hahahahahahahhahahah :)
There is even pecl extension for same purpose, see https://www.sitepoint.com/theres-a-gender-extension-for-php/ Perhaps you could visit articles like these and add a reference to your library
This would still have the 1st Jan-&gt;= 1month-&gt;3rd March issue ? Or am i wrong ? What is you approach on this ? You use external libraries ? p.s -Newbie programmer here - really wanna learn
Yes: php &gt; $date = new DateTime("31.01.2019"); php &gt; $date-&gt;add(new DateInterval("P1M")); php &gt; echo $date-&gt;format("d.m.Y"); 03.03.2019 But why is this "wrong"? Which specific scenario are you looking to solve?
This is pure gold.
Not anymore, there is even talks of removing `symfony/symfony` in Symfony 5.0.
Agreed; the same goes for Laravel btw. Laravel framework: `laravel/framework` Symfony framework: `symfony/framework-bundle` The rest are components (which are used by the frameworks among others)
50%? I know it is off-topic but I'd like to see how that figure was derived. Laravel does use some Symfony components but, off the top of my head, I'd say it was more like 5% at most.
https://medium.com/@javiereguiluz/30-of-laravel-code-is-symfony-a49dcf30e809 30% a year ago, and since they added the CLI, security and another component from tweet I saw, pretty sure we're close to 50% right now
Web development for a Marketing company. &amp;#x200B; Mostly the PHP work is writing/maintaining APIs.
Interesting, do you have a link about this?
Wat
That's how I remember it. Back in the day we used to do trades, and take decisions based on averages and whatnot, sometimes in a few sec intervals. During those leap seconds the graphs were way way off, panic mode type of thing lol Currently I'm in the air industry, dealing with time-zones and daylight savings in the same time...
Technically its not "wrong" bcos of different month lengths / leap years ... &amp;#x200B; With regards to Jan 31-&gt;3 March issue , I found a solution at [https://www.php.net/manual/en/datetime.add.php](https://www.php.net/manual/en/datetime.add.php) \----------------------------------------------------------------------------------------------------------------------------------------- Another simple solution to adding a month but not autocorrecting days to the next month is this. (Also works for substracting months) $dt = new DateTime("2016-01-31"); $oldDay = $dt-&gt;format("d"); $dt-&gt;add(new DateInterval("P1M")); // 2016-03-02 $newDay = $dt-&gt;format("d"); if($oldDay != $newDay) { // Check if the day is changed, if so we skipped to the next month. // Substract days to go back to the last day of previous month. $dt-&gt;sub(new DateInterval("P" . $newDay . "D")); } echo $dt-&gt;format("Y-m-d"); // 2016-02-29 \-----------------------------------------------------------------------------------------------------------------------------------------------
I found at solution ... posted above ...
Using DateTime 1st Jan + 1 month = 1st Feb. I believe PHP's implementation works like this: `31-01-2019 + 1 month` `= 31-02-2019 - last day is 28-02-2019 -&gt; 3 day overflow` `-&gt; 03-03-2019` By using any day above or equal to minimum of days in month (28), you should be always safe. For example: `28-01-2019 + 1 month` `= 28-02-2019 (valid)`
Do you know how is called a junior that delivers results fast and efficiently: a senior.
Dump Apache and use Nginx with X-Accel-Redirect
I'm using PHP and Swoole (kind of awesome addition to arsenal). I also use Vue + Vuetify + Nuxt. Both stacks are used at the same line of products I'm working on. It's not a case of one or the other when you can have both.
Wow, that's nice. I found that Apache has an `x-Accel-Redirect` module also, with the restriction that it can only be used for filesystem resources (which is what I need). It's in the Debian repo as `libapache2-mod-xsendfile`. Thanks!
[https://media1.tenor.com/images/2b6d254d7bbdfd42583e6080ac327d0f/tenor.gif?itemid=5268083](https://media1.tenor.com/images/2b6d254d7bbdfd42583e6080ac327d0f/tenor.gif?itemid=5268083)
Legit use-case? * You know PHP * You know that PHP can do the job
Here is an ideaL **STOP METHOD-CHAINGING !!!**
Uhm. Yeah? Look this is a really poor question, for a language that runs over half the web. Maybe you should tell us what projects you're considering and I'll be 100% honest about where PHP fits and where it doesn't (I have no particular love for PHP, but it works for many things).
Yes. Easier to host, even free hosts have php.
Is that last sentence a question or an exclamation? Can you give an example of a "legit use case"? This post just feels like weak ass bait. Take a down vote
Seriously... Languages are just tools for the task at hand, why try to say my screwdriver is better than your hammer? the fuck type of statement is that.
I've done this in the past by storing the videos on Amazon S3 storage and requiring a time-limited authorization token to access the file. That way, when you provide a link to the end user, their token is valid only for a short while. To get another valid token, they would need to be logged in. Then I just played the video with JW player.
&gt;Just curious if there are any legit use-cases for starting a new project in PHP still! For me, comparing PHP to all the languages I have developed in professionally and also ones I have used for hobby projects (take those with a pinch of salt), PHP by far has one of the best and most mature toolchains. Probably C# is the only language I've found comparable on this matter. So yeah PHP is very much still relevant and for me it's toolchain and ecosystem is unmatchable.
Legit use case? Make a or graphql api over a relationdatabase. PHP7+ will beat almost anything on speed and security. The recent updates has been staggering and it would be foolish not to atleast check it out again.
&gt;Dump Apache and use Nginx with X-Accel-Redirect No need to change the entire server stack for this one module. You can simply use mod\_xsendfile in Apache to achieve the same results.
Haha what? Are you really asking if one of the biggest languages in the world is still used for new products? Laravel is enormously popular alone and used for a massive amount of products. My particular branch at my company uses Laravel/Lumen for APIs that don't need to scale beyond a few thousand concurrent users. For everything else we use C# (.NET Core).
&gt;Here is an idea: STOP METHOD-CHAINIGING !!! Interested to know the technical reasons for not using them in PHP? P.S I don't have an informed opinion for or against, so interested in knowing the technical reasons not to do it. In the C++ projects I've worked on they often used iostreams to construct named parameter idioms, maybe there is a technical issue in PHP on why this isn't good?
Store it on S3. Set the permissions so you can only access objects in this folder with your key. &amp;#x200B; Have middleware in your application which prevents users from accessing video pages which make calls to S3 to retrieve the file.
Noted. Thanks.
Agreed ...
For Packagist is different: they don't take into account the downloads generated by the most common CI services.
https://github.com/symfony/symfony/issues/31484
Please dont work in security please dont.
&gt; some variant of fread($handle, CHUNK_SIZE) and echo, and serving it through PHP. That might be OK for image files but seems problematic resource-wise and maybe execution time for audio/video files. Something similar like that might be sufficient for your use case, and is nice and simple. You can also look at/start with [readfile()](https://php.net/readfile) to just dump the contents of some file to output (after sending headers, and turning off output buffering). That said, you're potentially keeping a heavy PHP process around for most of the time it takes the client to download the file. &gt; using a third-party service with access control You could store the files in a non-public S3 bucket, and use the AWS SDK to go generate [pre-signed URLs](https://docs.aws.amazon.com/sdk-for-php/v3/developer-guide/s3-presigned-url.html). They can expire: ``` //Creating a presigned URL $cmd = $s3Client-&gt;getCommand('GetObject', [ 'Bucket' =&gt; 'my-bucket', 'Key' =&gt; 'your-eyes-only.mpg' ]); $request = $s3Client-&gt;createPresignedRequest($cmd, '+20 minutes'); // Get the actual presigned-url $presignedUrl = (string)$request-&gt;getUri(); ```
&gt; symfony/* downloads are cleared from laravel/* downloads. 1 download of Laravel packages = 0 downloads of Symfony packages.
If you use Symfony or any Symfony based framework you can use `BinaryFileResponse`. It is quite flexible and supports range header which is especially useful for videos. - [Documentation](https://symfony.com/doc/current/components/http_foundation.html#serving-files) - [Souce code](https://github.com/symfony/symfony/blob/4.3/src/Symfony/Component/HttpFoundation/BinaryFileResponse.php)
i just released a malicous package on npm to test that. Its sending me the location where it was installed to check where the downloads came from. The package does nothing. Really nothing. Its empty on github (only there :P). Also the eadme say that it will call home to report the install. 80 downloads in the first day... Not only automated testing does push the count. Even all the "analytic" tools. They are downloading the package like hell.
Law of demeter ?
While at first it can seem like a good idea, chaining can restrict how you can evolve the library / class. If you want to start returning a value from a method, you create a backwards compatibility break (and have to update the code everywhere it's used) because it no longer returns 'self'. You also have to check which methods can and can't chain when using it. I would say, as a general rule, "method chaining" should be reserved for immutable objects (value objects) (see, for example, DateTimeImmutable). You could also use it on "builders" such as query builders, but I think I personally would err on the side of avoiding it. I would also say that method chaining, except in the above 2 cases, tends to indicate that setters are being overused. People want it because they're using setters for everything, all the time. You don't need to use setters for every property. You should prefer to pass values to an object on the behavior method they're involved with. Instead of writing: $obj-&gt;setSomething($a); $obj-&gt;setSomethingElse($b); $obj-&gt;doSomething(); Prefer: $obj-&gt;doSomething($a, $b); Note that, as with most concepts in programming, none of these are "rules" - they are "guidelines". Futher reading: * https://martinfowler.com/bliki/FluentInterface.html * http://wiki.c2.com/?AccessorsAreEvil * https://ocramius.github.io/blog/fluent-interfaces-are-evil/
notice the yellow box near the top? " symfony/\* downloads are cleared from laravel/\* downloads. 1 download of Laravel packages = 0 downloads of Symfony packages. "
 notice the yellow box near the top? " symfony/\* downloads are cleared from laravel/\* downloads. 1 download of Laravel packages = 0 downloads of Symfony packages. "
For the next guy to complain that laravel loads symfony stuff: notice the yellow box near the top? " symfony/\* downloads are cleared from laravel/\* downloads. 1 download of Laravel packages = 0 downloads of Symfony packages. "
I'm curious as to why? I'd rather use ``` $u = new User() -&gt;setName('Foo') -&gt;setSurname('Bar') -&gt;setEmail('foobar@baz.com') -&gt;setAge(42) -&gt;save(); ``` than ``` $u = new User(); $u-&gt;setName('Foo'); $u-&gt;setSurname('Bar'); $u-&gt;setEmail('foobar@baz.com'); $u-&gt;setAge(42); $u-&gt;save(); ```
What I have noticed, and I am western so maybe the conversion makes it more, but in the west I can make 90-120k as a senior developer. How comes you guys are so "under paid"? Again not taking into consideration conversion of currency.
(thanks for replying with more details on what you went with for future finders of your thread)
Wasn't there at the time of my comment :p Notice the comments on this thread and how the author of said page said he added it? yeah see, I can be a passive aggressive shithead too.
fuck yea! you must be a dev too :) I just got here and saw like 4 people asking the same thing, so i copy/pasted my response to all of you. Can't help it the author didn't do it right the first time around lol
If revoking access is not necessary then variant 1 should be ok. If secret filename part is longer than session id then it would be easier to guess session id a get access thid way.
I use the old Reddit layout, and it gives me both options in the sidebar: * https://old.reddit.com/r/PHP/submit * https://old.reddit.com/r/PHP/submit?selftext=true
I agree with your sentiment completely, but - I mean this to be helpful - your coarse and sweary tone is not constructive. The folks you need to deliver this to are the ones you're abusing, and they surely won't listen to this!
Awesome! Will do this next time.
I find it absolutely disgusting that you make $150/hour on wordpress when most of the great devs I know barely crack $60/hour in Texas.
I wanted to ask about that Jordi. How do you know? Any reference I could share with others later?
Monorepo's are excluded for that exact reason
+1 for Ocramius' post, on point.
Thanks for your opinion, but the people you know don‚Äôt charge enough. I also don‚Äôt just work on Wordpress. I work with lots of different frameworks when building applications. $150/hr pays for my expertise and experience not for the platform I‚Äôm building in.
&gt; To make them specific to a given technology that would implement them is to defeat their purpose. Straight up nonsense &gt; In this case our SPI here is not only specific to SQL persistence, not only to ORM SQL persistent, but Doctrine ORM SQL persistence Pretty sure that grants the big-5 SQL implementations - postgres - sql server - mysql - oracle - sqlite &amp; db2
See https://www.reddit.com/r/PHP/comments/bxut62/creating_a_fluent_library_under_php/eqa7qym/. While method chaining can be useful, I'd probably avoid using for setters. I'd even argue that setters themselves should generally be avoided in favor of methods that actually express the domain logic and object behavior. P.S. In your example, `User` is possibly in an invalid state until all of the properties are set which is never a good idea.
Dropping this here: [https://ocramius.github.io/blog/fluent-interfaces-are-evil/](https://ocramius.github.io/blog/fluent-interfaces-are-evil/) &amp;#x200B; 'bit old, but exactly made for this.
45k in the Netherlands with 5 years experience. Including vacation money excluding bonuses (not that I'm expecting much) I feel a tad underpaid though I did see a lot of growth, my first year was about 20k.
Uhmm. You would have the **exact** same allowance without a port, and directly coupling to Doctrine, genius.
The short answer: because it violates CQS. Also, as a side note: never use ActiveRecord pattern :P
The layer between you and doctrine provides control. You not understanding that is not the authors problem. I haven't had a chance to look a lot, but I can think of several reasons for superflous layers. You don't have to agree or understand.
&gt; The layer between you and doctrine provides control. Unspecified control. &gt; I haven't had a chance to look a lot, but I can think of several reasons for superflous layers. Unspecified reasons. BTW, it's spelled "superfluous" and it means "unnecessary". &gt; You don't have to agree or understand. The funny thing is you agree while you've made it pretty clear you don't understand. With me it's the opposite situation. I understand what ports/adapters are for, and I see it flew both over yours and the authors' head. So therefore I don't agree.
A look at my navel.
&gt;isset() will return true if a variable is undefined OR if its value is null. It will return "false", no ? Or am I so tired I can't read properly ?
Honestly the part about it breaking encapsulation because the language semantics don't guarantee the same instance is returned is... kind of a stretch. 99% of what you do is not guaranteed by the type system of PHP. Otherwise we'd just be declaring some types and not write imperative code at all. Encapsulation is also not about expectations, it's about isolating internal state &amp; behavior from external interface.
That's not what law of demeter is about.
I prefer using `!empty()`
Warning. It's a bike-shedding topic, you won't find informed reasons on either side. TLDR is that you're giving up your return channel (returning things from methods) in order for gaining conciseness for DSL-like APIs. Sometimes it's good. If unsure, err on the safe side and don't.
D'oh, such a fundamental part of it that I've typoed. I've fixed that, thanks for pointing it out üòÖ
I prefer `!!!isset()`
No big deal. Everyone does it sometimes. I knew most of it, but a) it was a good refresher and b) I'd never thought to check `$var['a']['b']['c']` all at once rather than a step at a time! Thanks for that, it will make some of my conditonals look a **lot** cleaner.
Who pissed in your cornflakes? &gt; Superflous &gt; adj. Being beyond what is required or sufficient. i.e. you could cope without it. There are a lot of things you could cope without, but don't. Cars, computers, in your case manners &gt; The funny thing is you agree while you've made it pretty clear you don't understand. I'll save us both the effort. * You have an opinion which you've not communicated well enough for anyone to agree. * I'm not the author, so you can stop being mad at me for what they did, which you don't understand. * As far as I can tell they are not forcing you to use it so shut the fuck up and get back in your box. Man... Some people. Got some bullshit name like LogicUpgrade and they think they are the arbiter of all coding.
It's not quite the same though, `empty()` does loose type juggling. ```php $a = '0'; isset($a) === true; !empty($a) === false
medium.com ....can i just read the fucking thing and not be annoyed with sign up dialogs? im not on cnn.com
&gt; As far as I can tell they are not forcing you to use it so shut the fuck up and get back in your box. And am I forcing you or anyone to change their architecture, dipshit? The author is giving a bad lesson and I'm trying to improve on it. They have a right to say what they say, so do I.
Neato. :) I, too, enjoy "abusing" PHP into doing things very different from building web pages.
As someone maintaining a library about decorators, this "stretch" hits me 100% all the time. I had to design a specific hack just to make it less impactful, and it ain't nice.
So if we're to interpret the stats in this manner, turns out: - Symphony dwarfs Laravel. - Yet in online forums everyone keeps yapping about Laravel. Interesting.
I'm not saying the differentiation between mutable and immutable objects is a stretch. I'm saying calling it an "encapsulation break" is a stretch of the term "encapsulation". Whether an object is immutable or not is not an implementation detail. It should be clearly specified on the public interface. Therefore this can't be considered a "detail". And when you implement a mutable interface in an immutable way, what happens isn't "breaking encapsulation". What happens is the interfaces was implemented incorrectly (which is always possible, fluent interfaces or not).
Why is this so complex? Javascript has some wonky behavior with true/false-ness of variables. C# and Java seem to do this "correctly"
&gt; This is why it's nice when someone asks for clarification, you can explain your choices and dig deeper under the surface. That tells apart good architects from imposers. I can explain everything I do at work. You clearly haven't explained it very well. You've just adopted an attitude and been a complete cock. I work with people who think they explain everything they do and who believe they have a good understanding of software architecture. Yet it's me who has to fix their shit. I've been interested in systems design and paid to design, build and manage delivery of systems for 17 years. For such an architecture prodigy you seem to lack real-world experience. People build ports that are protocol and syntax specific all the time. On the spectrum of jizzing in a corner making things only you care about vs delivering real world product this is objectively better than * procedural code * untested code * poorly separated code (presentation, control, logic) If I were to pick on what I had read it wouldn't be their choice to require a syntax that fits the type of service they were adapting for. If you were to asset your expertise as an architect I'd expect you to pick on the academic design of what could be a small system. I'd expect you to look for artifacts of why decisions were made, not just that people had a predilection for the grandiose. I Liked the diagram and bookmarked two pieces of code to read when I was not at work. Perhaps if I feel like it, I will choose to read it at the weekend. Take the stick out of your ass and either make substantive convincing arguments or refer to my last post.
&gt; one should create an interface for a factory That just moves the problem up one level. You still need to create create the factory and pass in it's dependencies.
The argument has already been made. Writing an **implementation-specific abstraction** is an oxymoron. There's no purpose to it. It doesn't help you avoid "procedural" or "untested" code, and obviously it's not a separation, because on one side of this port can only be this specific domain, and on the other side, only Doctrine. To separate code doesn't mean to put more files in-between them. It means to reduce coupling by making every individual part replaceable, and hence your code more reusable and flexible. Adding more files between domain and Doctrine achieves nothing if you can't put another persistence layer on Doctrine's side. There are no parts you can replace here. Flexibility not achieved. Reuse not achieved. If this is not "convincing" enough, then you parrot words you don't understand, which unfortunately has already been established, while you were trying to impress me with the fact this port can work with all... Doctrine RDBMS drivers (funny one, BTW).
We would've simply moved the problem one level with zero results if then I have to pass the factory class name statically, yes. But if I pass an instance of the factory, then we've solved the problem. And my point was: no static class name references. We only pass instances. But a factory is only necessary if multiple instances have to be created "on demand" by the host. So we can skip the factory have an "init()" method feed the plugin and activate it. But the point is to avoid the static references. Because you may be writing tons of "slightly different" classes when you have no opportunity to configure an object after instantiation. Let's say we have a game of billiard and we need add three "plugin" balls to the game. Red, green and blue. If we have a "static" classname system, we need to write four classes for the balls so we can pass them to the game: abstract class AbstractBall { private $color; function doBallThings() { ... } } class RedBall extends AbstractBall { private $color = 'red'; } class GreenBall extends AbstractBall { private $color = 'green'; } class BlueBall extends AbstractBall { private $color = 'blue'; } $game-&gt;addPlugin(RedBall::class); $game-&gt;addPlugin(GreenBall::class); $game-&gt;addPlugin(BlueBall::class); But if we avoid the dreaded `::class` refernces, and stick to instances, we can do the same in one class, and achieve much more flexibility and code reuse: class Ball { private $color; function __construct($color) { $this-&gt;color = $color; } function doBallThings() { ... } } $game-&gt;addPlugin(new Ball('red')); $game-&gt;addPlugin(new Ball('green')); $game-&gt;addPlugin(new Ball('blue')); There's no factory here, but now imagine the game has an arbitrary number of balls. Then we want to pass to the game an *instance of a ball factory* which is preconfigured and injected as necessary. Then the game can call a method on this factory with additional config, to create balls on demand. Those balls will feature both runtime configuration from the caller side (injected when the factory was instantiated), and runtime configuration from the game side (injected when the "make()" method of the factory is invoked). Best flexibility and reuse. And we also avoided specifying any constructors in any interface.
I build something familiar to. We have voip phones in which you can enter a web url for specific actions. We have 10 phones at our company, in one phone, I entered a ‚Äúcalling‚Äù url which is a webhook to our server. This webhook puts the callerId in the database. If one of the phones is picked up, that particular phone calls a ‚Äúpickup‚Äù webhook. The webhook knows who picked up the phone, and knows who is calling and stores that info in the database. When the phone is hang up, a ‚Äúhangup‚Äù webhook is called by the phone that hangs up. Now I even know how long the conversation took. The most beautiful thing is, with a socket server, I created a plugin for chrome. When someone picks up his phone, a message is send to his particular chrome extension and a notification of the browser pops in the screen of the person who answers the phone. Since we have a database of our customers, I can find the customers account page I our back office. So the notification in the screen shows who is calling and gives him / her directly a link to the account page of the customer. Webhook is all PHP. Socket is node / php Plugin is all JS
May I ask, where do you get your clients? Some online platform? Contacts? Or like a consultant company like toptal
Thought it was Edgar Allan Poe in the thumbnail...
I really don't want to be salty, but has this article been written just for the sake of writing an article and posting it on your medium? I mean... isset is just a construct in php language, it is neither new nor very tricky, it has been discussed million times already, why making an article about it?
Very nice, so many years and I had no idea isset() was variadic. I have so much (isset($a) &amp;&amp; isset($b)) in my code. &amp;#x200B; One addition I would make is more on the null coalesce operator. I am really not using isset() nearly as much now that I have the null coalesce. &amp;#x200B; I use something like this to evaluate if a variable is not null AND not empty AND not zero and doesn't require you the check isset() : `if ( $a ?? false )` and of course it works to check multiple variables and you don't even need the ?? false part on the end. `if ( $a ?? $b ?? $c )`
&gt; It can accept multiple arguments I have to say that that's definitely something helpful that I wish I knew earlier
Upvote because I stumbled into this exact case in the past, and had to change empty for isset
You are right. I read this wrong.
There is no specific reason why they are worse in PHP. It‚Äôs same as any language.
I never say that fluent is for every situation. In fact, I was explicit about it. For example, if the function must return a value then it couldn't be fluent. &gt; $result=library-&gt;sum(a+b); However and sometimes (and it depends on the library, it could be really handy) It is an example of a code that crawls a website. ```php $spider-&gt;setDebug(true) -&gt;readContent("https://www.roastycoffee.com/coffee-types/") -&gt;enterLevel('&lt;h2&gt;Coffee Drinks&lt;/h2&gt;','&lt;h2&gt;Conclusion&lt;/h2&gt;') -&gt;if() //-&gt;showmessage('List of coffee drinks 1') -&gt;loop("loop") -&gt;enterLevel('&lt;p&gt;','&lt;/p&gt;') -&gt;if() -&gt;enterLevel('&lt;b&gt;',' ‚Äì &lt;/b&gt;',false,true) -&gt;push('','coffee','@_value.a._content@') -&gt;if('coffee=""') -&gt;enterLevel('&lt;b&gt;',' ‚Äì &lt;/b&gt;',false,false) -&gt;pull('','coffee') -&gt;push('','coffee',"@_value@") -&gt;exitLevel() -&gt;endif() -&gt;exitLevel() -&gt;enterLevel('',"",true,false) -&gt;push('','desc') -&gt;exitLevel() -&gt;else() -&gt;break() -&gt;endif() -&gt;exitLevel() -&gt;endLoop() -&gt;else() -&gt;showmessage('h2 not found') -&gt;endif() -&gt;showmessage('LIST OF exit') -&gt;exitLevel() -&gt;closeContent() -&gt;run(); ``` It requires a declarative code so while it is possible to do it with simple methods, it's more explained when it is fluent (also called procedural)
I haven't used isset for years precisely because returns false on nulls. Same goes for empty. There are better ways to check. There are no good use cases for either IMO.
Because?
&gt; P.S. In your example, User is possibly in an invalid state until all of the properties are set which is never a good idea. So, something like this one ```php $u = new User() -&gt;setName('Foo') // -&gt;setSurname('Bar') -&gt;setEmail('foobar@baz.com') -&gt;setAge(42) -&gt;save(); ``` But it is also invalid with methods. Also, fluent also works with procedural without changing the code.
A few months ago I started learning PHP. I started my apprenticeship with a course in Udemy and I took the responsibility to develop a web project that involves the use of PHP, but as I'm progressing in it I find that my knowledge of the language is deficient, which has led me to Feeling a little insecure about whether I'm going down the correct path to be able to handle PHP developments decently, that's why I dared to post this for advice on the way or the way I can go to learn PHP, know your experience about the way you learned or that you would recommend me to continue learning in the best possible way, can be in specific books that helped them and could help me, or if I should continue with online courses, search the web, etc. I know that it is almost impossible to master a language perfectly, but sometimes I worry about not doing it the right way. Seriously, thank you for the help you can give me.
In my country seniors make 10-13k a year
dafuq? is this a joke? isset already returns a bool.
Double exclamation point is ‚Äúmake faster‚Äù operator. It optimizes performance.
I have no idea what‚Äôs going on, jr here
oh..okay. TIL
When occasionally Symfony vs Laravel comes up in my shop there is a colleague who invariably pulls up the Google Tends graph of the two and uses that to support the idea that Laravel is in much wider use. Unless I misunderstand, your data suggests the opposite. Do you know or have any theory on why that might be?
doing a project. get a job on elance or do work on an open source project. you'll learn just because you'll have to get the job done. the best way to learn anything is just to start doing something that requires the knowledge you wish to have.
JESUS .... the fuck
...
Google Trends is as reliable as "my 5 top friends think it's the best, so everyone uses it".
I never knew you could put multiple arguments in isset.