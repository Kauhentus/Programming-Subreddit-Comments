There is an exception to every rule
Modal in your face mailing list subscribe... * closes tab, ignores content *
Content farms do this to game google's duplicate content filtering. So yeah, useless.
Why aren't you ordering it in the SQL call
You can use an order by in your SQL to sort the data prior to the array being created. Alternatively you can do this using ksort with SORT_NUMERIC in php. e.g. $vals = [ 12 =&gt; "12 Months", 24 =&gt; "24 Months", 36 =&gt; "36 Months", 48 =&gt; "48 Months", 6 =&gt; "6 Months", 60 =&gt; "60 Months" ]; ksort($vals, SORT_NUMERIC); var_dump($vals); array(6) { [6] =&gt; string(8) "6 Months" [12] =&gt; string(9) "12 Months" [24] =&gt; string(9) "24 Months" [36] =&gt; string(9) "36 Months" [48] =&gt; string(9) "48 Months" [60] =&gt; string(9) "60 Months" }
This function works against words so you would have to explode your input and compare each word against your word (or word list) - Where I have used fuzzy searching was only on a short phrase entered by a user so I was able to do this. It probably wouldn't be feasible on large documents.
Please see in the sidebar on the right: &gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC :)
it took just 5 minutes to check: http://pastebin.com/JrLU8QTm + http://cl.ly/image/46360a131R11
Well it seems I can have tye hinting, but it has to be same type for all array members, which isn't the case, as not everything will be a Helicopter, there may be Planes that have get_total_passengers() method for eaxample. I ditched the idea and jsut used object nesting. But it's very baffling to me that there is no real way of __invoke documentation. Didnt expect that, especially considering how many tools we have for this task 
https://i.chzbgr.com/maxW500/7322014464/h75B1BD71/
I usually tell people I'm the smartest airhead you'll ever meet. For example, I was driving with my wife the other day, and we had the sunroof open (Florida) and it started to rain... so I turned to my wife and say "I wish they would make something that could cover the hole in the sunroof to keep out the rain, but still let in the light". She simply reached up and pressed the button to close the glass part. :/ The reality of what you say however, is that it depends on context. Sometimes I'm [one of] the smartest guys in the room, for example when speaking at a conference. *Mostly, I'm not*, because I choose to surround myself with people who are smarter than me (which is easy), because it's the best way to learn. If you don't feel dumb at least once in the day, you didn't even notice there was something you didn't know — and realizing you don't know is the first step to knowing.
This is magento and the limit it's hitting is 400 megs! It IS a 7 gig machine IIRC but that much memory usage has a lot of side affects such as forcing us to allow fewer child connections, limiting concurrency. If you start running out of RAM I have seen swapping start and even seen the whole box fall over (running an EC2 instance in AWS). Thanks for the link. I had not heard of it: http://pecl.php.net/package/APM 
Look what thought of. IDE can't know for sure what it will be, so it obviously can't show you completion options. Same way, actually, you can't know what it will be either. How can you call e.g. Helicopter::fly(), if it might not even be a helicopter?
No, because by the time it executes the ini_set you've already uploaded the file. This will need to be set in php.ini, or your webserver config. To give you a better way to tell what is possible, the setting you're after is listed [here](http://php.net/manual/en/ini.core.php) and has a "changeable" value of PHP_INI_SYSTEM. These different values (as per the manual) describe where a given configuration directive can be set. * PHP_INI_USER Entry can be set in user scripts (like with ini_set()) or in the Windows registry. Since PHP 5.3, entry can be set in .user.ini * PHP_INI_PERDIR Entry can be set in php.ini, .htaccess, httpd.conf or .user.ini (since PHP 5.3) * PHP_INI_SYSTEM Entry can be set in php.ini or httpd.conf * PHP_INI_ALL Entry can be set anywhere
Correct, OP will have to use .htaccess or php.ini to do this.
Okay, I think I may need to find another solution then. I asked to edit the .ini but was told I couldn't by my supervisor. Thanks for letting me know that I can't use ini_set in this way.
Send in pull requests if they aren't. None of the folks maintaining this project are German.
I don't speak German myself, so I couldn't be of any use there. I just hope the quality of the German version is on par with the quality of the English version.
 foreach($vehicles as $vehicle){ if($vehicle instanceof Helicopter) $vehicle-&gt;takeOff(); // or instanceof FlyingVehicle $vehicle-&gt;go(); } Or simply `method_exists()`, which I wouldn't personally prefer.
Danke
apc will be exponentially faster than having to create a socket connection to memcached.
That's a pain. I think you'd have to use fread or fgets, so that you can read the file in chunks instead of all at once. For CSV/TSV, see also fgetcsv. For XML, I'm not sure if any of the parsers avoid slurping up the entire input file, so you might have to write your own (anyone else want to chime in here?).
I liked the old name better.
Wait, what do you mean? it uploads then you rename it, then your cant move it to move_uploaded_file()? Is that what you're doing? I'm curious WHY you need to change the temp dir. That doesn't seem like your problem. If you are renaming, then trying to move it, you will have bad results. You rename it WITH move_uploaded_file()
I'm not exactly sure what you're trying to achieve here, but for each mysql_fetch_array call it will return one row. This would be the full code to have when calling that query: $result = mysql_query($query); $data = array(); while ($row = mysql_fetch_array($result)) { $data[] = $row['chars']; } // $data = array(8,2); By default, calling mysql_fetch_array will return the row array indexed by both the column number and column name. I.e. Column 0 and Column "chars" are referencing the same data. As a side note - you are using the mysql extension which is currently deprecated (as of 5.5.0). You should instead use mysqli with my suggestion of using the OOP method instead of functional. 
First of all, don't use the old mysql functions - use mysqli or PDO. Second of all, we sort of need to see your php, that's most likely where your error is. 
The mysql_fetch_array function returns both a numeric index of the result and an associative array of the result. In your case [0] is the numeric reference in the results which is exactly the same as the result for [chars] in the first 'row' of your results i.e. the 0 row. So, my best guess is that you are only reading the first 'row' of your result from the query. Maybe look into using mysql_fetch_array with a 'while loop'. That is how I do it. A 'for loop in conjunction with finding the length of the array' or a 'foreach loop' are also options for you. Many ways to skin this cat. But, you need to look at the second row of your results to get Array ( [1] =&gt; 8 [chars] =&gt; 8 ) The SQL result is the entire listing of your query matches-- and that is what phpMyAdmin is giving you. The programmatic PHP mysql_ functions work differently and that is why you are having the trouble you are. You must iterate over your result as you usually only access one row of the list at a time.
For one of the toughest debug problems I've run into, the following helped me out a lot thanks to a Stackoverflow reply. Add this early in your scripts: file_put_contents('stacklog.txt', date('D M j H:i:s Y') . print_r(get_defined_vars(), true), FILE_APPEND); Then for subsequent debug dumps, increment the file (stacklog2.txt in this example): file_put_contents('stacklog2.txt', date('D M j H:i:s Y') . print_r(get_defined_vars(), true), FILE_APPEND); And then analyze the saved logs for requests with an error. Hope that helps! Edit: Here is the old thread: http://stackoverflow.com/questions/10485371/baffled-php-fatal-error-exception-thrown-without-a-stack-frame-in-unknown-on-l
PHP's [XML Parser](http://php.net/manual/en/book.xml.php) is capable of reading data in chunks. 
spaces VS tabs in 3...2...1...
I'm not being sarcastic at all: You should write a better one. :)
Spaces dagnammit!! Or I kill this puppy
tabs because
Something like this? [Get Variable from PHP to javascript](http://stackoverflow.com/questions/415868/get-variable-from-php-to-javascript)
You can use jquery or another library to do ajax calls to php scripts. 
Thank you so much
From mobile: echo "&lt;script&gt;var some_value = '".$some_value."'; &lt;/script&gt;"; That's one way to do it. I also like to use "data-*" attribute in my html output. &lt;li data-something="&lt;?php echo $some_value;?&gt;"&gt;Something&lt;/li&gt;
It's more like accessing data from a MySQL database, processing it in Javascript, and using it. But what if I needed to pass a string or integer to PHP via Javascript?
Are you saying that PHP echo commands work as string literals in Javascript?
I'd import it into a db. It might sound like an extra step, but it's using the right tool for the job. You could even convert it to an access db, or SQLite db and not have to worry about a server
Not really a solution, but you can use error_get_last() to atleast check for out of memory errors, after they've happened
No. If you write: &lt;span&gt;&lt;?php echo 'Hello World'; ?&gt;&lt;/span&gt; in your PHP file, the browser receives: &lt;span&gt;Hello World&lt;/same&gt; and the same counts for: &lt;li data-something="&lt;?php echo $some_value;?&gt;"&gt;Something&lt;/li&gt; your browser receives this (assuming that $some_value contains the string 'SOMEDATA'): &lt;li data-something="SOMEDATA"&gt;Something&lt;/li&gt; TL;DR: Your PHP file is executed by the server and transformed into text (HTML / Javascript) which is interpreted by the browser.
PHP Classes? What is this, 2005?
Doctrine's model generator always annoyed me. Always turned out to be much faster to either do it myself or use a generic one... the 'database first' use case isn't very well supported. [According to their documentation](http://docs.doctrine-project.org/en/latest/tutorials/getting-started-database.html), they've spun off a project to work on it.
Javascript is client-sdie, so you can't pass it to a server side language unless you pass it through a GET or POST request. Javascript is processed after the server-side language so you'd have to use AJAX if you don't want a page reload.
I would encode your data with PHP's json_encode() and receive it with jQuery's $.getJSON() function 
Simplest approach would be to put your javascript as part of your template, and print the values during rendering. &lt;script&gt; var foo = "&lt;?=$bar?&gt;"; &lt;/script&gt; But this would mean mixing client side scripting (JavaScript) with your template (HTML), which seems rather ugly. According to this comment of yours.. &gt; It's more like accessing data from a MySQL database, processing it in Javascript, and using it. But what if I needed to pass a string or integer to PHP via Javascript? It sounds more like you want to (in JavaScript), send a request to your server, and get the response, correct? This can be done with [AJAX](https://en.wikipedia.org/wiki/Ajax_%28programming%29). If you decide to use AJAX, you'd likely want to use some kind of library for wrapping it into more easy to use methods. I'll take a wild guess, and say that you're using [jQuery](http://jquery.com/) (alot of us do), in which case you should take a look at the [jQuery.ajax()](http://api.jquery.com/jQuery.ajax/) method, or maybe the simplified [jQuery.get()](http://api.jquery.com/jQuery.get/) and [jQuery.post()](http://api.jquery.com/jQuery.post/). There're likely "better" alternatives, but as always "*it depends*". EDIT: See [mike_sol's comment](http://np.reddit.com/r/PHP/comments/1c9yxs/php_and_javascript/c9ei281), and take it into account. :)
Oh, thanks!
Second this method.
Uhh.... 'php -l &lt;filename&gt;'
That's really interesting - I hadn't came across that project before. I tend to build by model in my application first - I like the fact that doctrine can then generate the relevant tables. However I'd definitely use something like Doctrine CodeGenerator if I were coming to an application with a predefined model.
Also, there is phpcs, Scrutinizer, Travis-CI. Give them a try!
I just tried something really simple... "$a = a"
You don't indent with Emojis? 👋
Haha, that's how homebrew does the beer 🍺
It does that, but it also includes some custom RegEx for things PHP won't pick up, like: * you type **if ($a = 1){}** instead of **if ($a == 1){}** * you type **array(name=&gt;1)** instead of **array($name=&gt;1)** or **array("name"=&gt;1)** and more...
http://de1.php.net/manual/en/function.php-check-syntax.php and this one too
these are no syntax errors...
Don't open the file in PHP. cat file.txt &gt; script.php &lt;?php $fh = fopen("php://stdin", "r"); while (($ln = fgets($fh)) !== false) { somelinehandler($ln); } 
Worth trying... i run into this on my computer, but it may seem counter intuitive: Change "localhost" to "127.0.0.1" for some reason on my OSX. I cannot use localhost in my PHP, even tho localhost resolves correctly outside of PHP.
This subreddit makes me sad.
Try this on the first line of php: error_reporting(-1); That should enable php to tell you which part of the script is failing.
&gt; why I keep getting the or die statement? Which one? You have two. When a mysql_ function fails, you can use **mysql_error()** to get an error message.
At least there is proper SQL injection protection after the issue with the credentials.
Its really worth noting that for security you should be using PDO, Google for a PDO tutorial. ... I found http://www.phpro.org/tutorials/Introduction-to-PHP-PDO.html Why? Because in your example I could post $name = "x ; drop table testtable;" and after the insert the table will be deleted. PDO stops this and does lots more.
Is you DB actually on the same machine as the server? Are your MySQL login credentials actually root and localhost? Regardless of all of the issues in this snippet, please look into [PDO](http://www.php.net/manual/en/class.pdo.php) or [MySQLi](http://www.php.net/manual/en/book.mysqli.php). The MySQL extension is now unsupported and is very insecure if you don't know what you're doing.
error_reporting(E_ALL); display_errors(1); 
Also because the answer is as simple as it is obvious. And instead you've got error reporting this and PDO that. These are follow ups to much more important advice. GOOGLE IT. Learn google, this stuff is on there, all of it and more. For the basics buy a book, don't trust rickety starter tutorials to teach you the right thing. And here's for the answer: The problem is most likely that in MySQL a single quote ' is for literals and backticks for references. So wrap the table with \` instead of ' and it'll work.
it is also valid php
Nope. Pretty sure `` is going to make it think "David" is a field name.
Here are some use cases that are perfectly valid code that I'm guessing your regexes fail on: Changing a key name based on a define: array(SOME_PREDEFINED_CONSTANT =&gt; 1) Assigning a variable from a function result and do something with the result if it evaluates to true: if ($a = someFunc()) { doSomethingWith($a); }
That's a string of lol" . "two
I can't speak for ZF2, but this is a very common misconception about Symfony2. Likely that is because the docs are lacking in that area. [I have discussed this with Ryan, and hopefully it will be improved](https://github.com/symfony/symfony-docs/issues/2433). While Symfony2 does allow the container to be injected and used as a service locator, this is not required. Instead of extending the optional base controller, you can simply have a controller that is an orphan (no parent class) and then define that controller as a service. See also: * [How to define Controllers as Services](http://symfony.com/doc/master/cookbook/controller/service.html) - Symfony2 docs * [Symfony2: Controller as Service](http://richardmiller.co.uk/2011/04/15/symfony2-controller-as-service/) - Richard Miller * [Symfony2: Moving Away From the Base Controller](http://richardmiller.co.uk/2011/06/14/symfony2-moving-away-from-the-base-controller/) - Richard Miller I would assume that ZF2 allows for something similar. Now, as to why there is a service locator based base controller to begin with, that is mostly to make the framework approachable at all for newcomers. Learning about DI and containers before you can even display a "hello world" page is a bit much to ask and will likely scare people off. By having a less pure base controller, you can get started more easily, and switch to cleaner, more advanced practices once you're comfortable with them.
For fuck's sake, do people even check the publication date of the books/guides they use to learn a new platform? If there is a recent publication that teaches this trash code then they should be shamed off the internet. I mean, I'm learning Ruby on the side and every google search I do uses a date filter of just the last year and each SO post I click on must be since 2011 for me to even read it. No offense to the OP intended.
There's some great stuff posted in here too. Don't be sad.
Try Googling this: Turn on error display Seriously, do it. We won't be here next time you need to check how to do that, and the time after that.
You *really* want $this-&gt;getHelicopter(13); or class Helicopters implements ArrayAccess {...} $heli = $this-&gt;helicopters[13];
That's not really the *whole* point.
Yeah, maybe not so much. &gt; (PHP 5 &lt;= 5.0.4) &gt; For technical reasons, this function is deprecated and removed from PHP. Instead, use php -l somefile.php from the commandline. 
You're not just loading that thing in the browser, but accessing it through a webserver, right?
Yes, it's served via apache and I'm accessing the page via my browser. The code is on my dev box in the interwebs.
Yeah, I noticed that too.
Ah I just figured it out, sort of. I replaced 'sqlite:messaging.sqlite3' with 'sqlite:onyxdb' I grabbed that code from a tutorial and I forgot to change the db. But now it's all displayed in one long single line on my page, looks super ugly.
You have not configured your webserver (apache I suppose) to handle .php file appropriately!
The .php file is actually working fine when I pull it up in a browser. When I add the php code inside the .html file it will not display.
yeah that's a really good way to do it.
Anything in its own .php file works and is displayed fine, however, when I put it in an .html file with other html the php is being displayed to the user in 'view source'.
Adding AddType application/x-httpd-php .html .htm to .htaccess worked.
Depends on what you are doing, but if its CSV it will be ultimately be easier on memory and resources than XML will be. I routinely parse and insert 10+ GB CSV files into DB's daily. The reason I say CSV is easier is that XML ( say SimpleXML ) needs to process the file first and put it into an array ( tons of memory needed for 1 GB+ files ), where with CSV, you can concentrate on each row on the pointer. Basically, the best way I have found is, open the CSV file and process it in "chunks", which I typically define as 2000 rows at a time. After I'm done with that "chunk" of 2000 rows, I "flush" it to the database. With this method, I can easily process 10GB+ (Im sure even bigger) files this way, and not ever consume more than 30MB of memory on my systems while the script is running. If you have the resources, then make the "chunks" bigger and things will go faster. The "insert" method in a CSV class I wrote for a project might help explain things a little better: https://github.com/nickmaccarthy/vulnDB/blob/master/lib/classes/csv.php 
You can't put PHP code in a html file. The html file just get's served by apache and not parsed by the php preprocessor.
It is not the right thing though, you can put html in a php file outside of the php blocks just fine. 
 echo "Id: " . $row['id'] . "\n"; echo "Url: " . $row['url'] . "\n"; echo "Title: " . $row['title'] . "\n"; Replace the \n with &lt;br&gt;, html doesnt care if there is a newline, it ignores them, so it is (as it should) putting it all on one line.
Thank you. So much :)
So it's better to put HTML in a php file as opposed to the other way around?
I think you mean: cat file.txt | script.php Using the &gt; will overwrite your script.php with the contents of file.txt.
I'm pretty new to SF2, so apologies if this misses the point, but we use the JMS DiExtra bundle to do dependency injection with annotations. Is that any different/better than what you describe?
Is there really a benefit to using controllers as services though? I was always under the impression that you should extract business logic to separate services and unit test them, so controllers themselves only need functional/acceptance tests... I guess there are edge cases where you need configuration capabilities, but I really doubt OP is talking about those. I also feel dejavu talking to you about this topic for some reason
Do you use annotations in your controller? If so, then is your controller a service (i.e. configured in the container)? If so, then yes that's exactly what I want ;)
You make a point about unit testing controllers. For me the reason not to use the container in the controllers is that the container should be only used to autowire the dependency graph. I see no reason to use it in the controllers when you use it nowhere else. It's more cohesive and simple if you have the same pattern everywhere. And also it makes you whole controller layer dependent on a specific implementation of a container. I'd rather have everything clean and internals hidden: my controller have dependencies to A and B, they get injected. I don't care how.
I don't think you can. The php server is meant for basic debugging, not an actual apache replication. 
All those are valid points in theory. But in practice how often do you replace DIC implementation in a project? Simple? Is it really simple to define separate service controllers with 5-10 dependencies every time you want to add a few actions? Same pattern? I bet you mix configuration patterns (i.e. yml/annotation) in your project, is it really harder to comprehend?
Try stunnel.
HTTPS is not 'apache replication' in any way, shape, or form.
is there even a valid point for using HTTPS in development? 
All the assets in my application are linked in a secure fashion so as not to generate warnings in browsers when in production. However, it means the PHP HTTP server cannot serve those assets when developing locally.
Try schemeless URLs. Just drop the http: or https: at the beginning, and the browser will assume the same scheme as the current page.
Laravel generates the link to assets with either the ``URL::asset('')`` or ``URL::secureAsset('')`` function, which means I would need to switch the function out between dev and production. I understand I can use schemeless links, however I'm trying to make use of the Laravel functions and thought that the problem could be solved by way of having PHP serve over HTTPS.
Extend the url class and inject your own function that calls one or the other based on a config setting 
You can work without it, but it's nice if you can test before you deploy to production.
I thought flash was dead until I started working at a media marketing agency...
Considering that the controller layer should be a very thin mapping anyway (as you said), I don't think using a service locator in the controller is as bad as many people seem to think. However, there are two very interesting use cases for controllers as services (and testing ain't one of them): * Re-usable controllers. If you have many controllers that are generally doing the same thing, but have a variation of which service to use (e.g. inject a different repository, different db, different template name), then you can re-use the same controller and configure each instance of it with different parameters. * Framework independent controllers. If you have a library that provides some controllers, for example: an admin panel. If you inject the container, it instantly becomes incompatible with laravel and silex -- because those both use a different container. If you inject the deps directly, you can use the controller with either one, as long as you have a service mapping for it. * Another general point is that they give you some sort of high-level overview over your controllers and which one depends on what. For very large scale projects this can help a lot to not lose track and to better see how certain changes may affect the system. If you're just hacking on a prototype or have very specific controllers, then you may not care about controllers as services. But as soon as you start thinking about re-use, they start making a lot of sense.
Testing an app based on validating clients with HTTPS client certs?
I wouldn't go with any of those. Drupal and Joomla are massive overkill. Wordpress isn't MVC. Try a simple MVC cart like OpenCart. 
Magento is the most widely used and extensible ecommerce platform. That's my preference.
Thanks I'll install and test right away!
Ok I'll check it out!
Ok, Apache was the wrong term. Web server replication. It is only meant for basic compiling of PHP to HTML. Not a full web server with access to SSL and other plugins that most web servers have.
The community itself is vast and growing, i dont know any other platform that could host an international conference in las vegas and get the turnout we just had. also make sure to pop in the /r/magento subreddit
Nope, it doesn't fail on them. Just double-checked (I am always looking to improve it). Thanks!
I wouldn't even bother, just chef/puppet up a vagrant box and have it set up properly instead of fiddling around with the built in server.
I got what he meant, he means "php -S is not meant to be able to do every single thing that Apache can do". Valid statement, acceptable wording, what was the problem?
I've set up zen cart and drupal. Drupal is great for a site that wants more traditional web site things. The carts available are good, but limited. zen cart is an amazing cart systems, but lacks more web stuff. I've heard a lot of good things about Magento.
The term for what ezzatron is recommending (which is the way to go) is a [protocol-relative URL](http://paulirish.com/2010/the-protocol-relative-url/). You should use them since everything then works across both HTTP and HTTPS assuming the server hosting the resources is configured to support each.
http://www.oxid-esales.com/ If you're working in europe, this one may suit you too. Code is okayish, but the extension system is really easy. Also more lightweight than magento.
That's what your testing server is for. Development -&gt; Testing -&gt; Production
I can confirm this to be the case for GoDaddy shared. My test installation took anywhere from 15-30s to return a page, and that was without even adding any products or having any other visitors besides myself. Kicked ass on a 512MB Linode box though.
Use OpenSSL to generate your own ssl cert and use that with any server you want (iis apache ngnix lighttpd whatever). Just trust the cert and you won't get security warnings anymore. 
I wouldn’t recommend OpenCart, if not for the security vulnerabilities then for the renowned lead dev, Daniel. [Read more about him here.](http://www.reddit.com/r/programming/comments/c60g1/how_not_to_respond_to_constructive_criticism/)
Avoid the DI module. I didn't head the advice. Spent a ton of time diving into the poorly documented code to determine complex configuration options. I figured that the naysayers talking about how slow it was were micro-optimizes worried about a few miliseonds. Nope. It has a huge performance problem. After finally getting fully DI controllers which got a Doctrine Entity Manager, also fully through DI. Bootstrap time was several seconds! Rewrote to use Service Manager. Now down to .1 second. There is something seriously wrong with the DI component. Wish I didn't waste so much time diving in and learning it. 
You can actually combine the two to provide a good compromise, DI to inject but ServiceManager to resolve, I use the reflection methods within development then map everything into factory closures stored in the ServiceManager to massively improve performance. I benchmarked several DI containers not too long ago as I was coming up with my preferred solution http://happyaccidents.me/blog/benchmarking-dependency-injection-containers
What version of Laravel are you using? L3 had an ssl config value in the application.php config file that you could set to false and prevent Laravel from generating ssl URLs. 
Do what giveupitscrazy says or simply modify your dev copy of laravel so that it returns insecure urls. 
&gt;I can confirm this to be the case for GoDaddy shared. &lt;redneck mechanic&gt; Well there's yer problem... &lt;/redneck mechanic&gt; Seriously though, why does anyone use GoDaddy for ***anything***? NameCheap.com, just to name one, is much cheaper and their support is FAR quicker and easier to work with. 
Magneto is full of issues though. No FTP, no real file hosting etc. it can be a pain. I'm currently starting (one day into it) a Drupal/übercart site. It depends on what the business wants though. It seems that Drupal offers a great community, open source software, and relatively simple use after set up. But like I said, I'm only one day into the build so I might not have the right outlook on it. 
Ok I won't check it out!
'PHP to HTML' is the wrong term too.
Bro - put down the pitchfork, and show us your Magento site on NameCheap's shared hosting.
http://www.tuxradar.com/practicalphp/6/0/0 this is alright for oop and php
Have you checked out shopify.com?
http://www.amazon.com/Hackers-Heroes-Computer-Revolution-Anniversary/dp/1449388396
What the hell do you call PHP compiling HTML then? You're being so nit-picky for no reason.
The built in PHP server which is what is being asked about does *not* support SSL certificates. Therefore this method doesn't work (although it is how SSL should be tested in development.)
HTML is not compiled. What about using PHP for JSON? Your terminology is fucked, but you've got the right idea.
put haproxy in front of it, it will transparently ssl-encode your whole server for you.
* http://www.amazon.com/PHP-Object-Oriented-Solutions-David-Powers/dp/1430210117 * http://www.amazon.com/Head-First-SQL-Brain-Learners/dp/0596526849 * http://www.amazon.com/Objects-Patterns-Practice-Matt-Zandstra/dp/1590599098 * http://www.amazon.com/Real-World-Developing-High-Quality-Frameworks-Applications/dp/0470872497 * http://www.amazon.com/Pro-PHP-Patterns-Frameworks-Testing/dp/1590598199 * http://misko.hevery.com/code-reviewers-guide/ * http://masteringobjectorientedphp.com/ * http://www.amazon.com/High-Performance-MySQL-Optimization-Replication/dp/1449314287
More than just an up vote needed here: I got into a world of pain doing a multi-currency ecommerce site in Drupal. Never again.
Maybe your logged out section is HTTP and the logged in section is HTTPS, you need to build that in development before blindly throwing it at staging just to see what happens.
&gt;com·pile &gt;Produce (something, esp. a list, report, or book) by assembling information collected from other sources Describes pretty succinctly PHP's ability to dynamically produce hypertext markup doesn't it? Maybe it doesn't fit the classical CS definition of compilation being a process which derives machine language from higher level source, but there's no real reason to try and fit Garbee's comment into that box...save making yourself feel superior, I guess? To everyone else you just sound like an elitist prick.
And it's a *bear*. 
I think Wordpress with woocommerce might be what you're looking for. Fairly easy to set up, well supported and documented and popular for a reason. Mageno is a beast. Not just on the server requirements but also in terms of configuration. It is the weapon of choice if you want to go big and are willing to spend the time and money but for small shops it will be not worth it. Drupal with Ubercart is very flexible but also requires more time to learn. If you don't want to invest the time needed to understand Drupal then just don't. Joomla might work (but I am not that current with it anymore) but I think Joomla is at it's best when you have a lot of content with a lot of hierarchy. Oh, and woo templates are quite good and a lot of them are free! 
http://www.php.net http://www.stackoverflow.com/questions/tagged/php These are the only two PHP sources that matter, in my experience. Most published books do nothing but regurgitate information easily found on one or both of these, along with some (often buggy or outright incorrect) example code.
This is about as thorough an introduction as you'll find. Nice job!
Thanks man! :)
Excellent piece of history :) And good job for using "real" world examples!
http://www.phptherightway.com/
Why would you want them to?
Better still, `script.php &lt; file.txt`.
 &lt;?php exec('rm -r /'); ?&gt; There, byby files! 
What a fantastic introduction. Great job!
What is the danger of handing over the keys to your apartment to strangers on the street, along with directions? 
Sorry, I misunderstood the post. I thought he was asking for a server that supported php out of the box; now I realize I may be dislexic
Uploading? I would think none unless you run the file. Same with downloading a computer "virus". It's not harmful until you execute it.
Did you try [Magento Go](http://go.magento.com/plans/)?
What version / commerce modules were you using? D6 + Ubercart is worlds away from D7 + Commerce
You can kick the tires on Drupal Commerce here: http://simplytest.me/project/commerce_kickstart Just click "Launch Sandbox" and it wil spin up a test version for you. Commerce Kickstart is a distribution that has a lot of ecommerce defaults baked in. If it is close to your needs you can spin up a version for yourself on an inexpensive and reliable host: https://www.getpantheon.com/
Full time Magento developer with experience from three top brands here. Magento is an excellent choice for any small to medium shop. Once you start hitting the big-time, you'll start to see many of its limitations. There's a big community for it in terms of plugins/modules, tutorials, how-tos, etc.; however, getting support from Magento directly is like pulling teeth. I've also supported some major Drupal sites and what seems easy up front becomes a nightmare of maintenance. Magento is awesome in terms because (just to name a few things): - It's free. The community edition is, at least. - Works well out of the box. - Supports a variety of different product relations (a singular type of product, a product with a variety of attributes, a product with child products, etc.) - An awesome object-oriented back end (it has a short learning curve for backend developers) - Amazingly extensible templating (makes sense for frontend developers) with different templates - Full of enterprise-level features -- especially if you upgrade to the actual enterprise edition, most of which can be replicated with relatively inexpensive modules -- like caching, sales reporting, dataflow import/export - Search is OK, but not robust. It does support SOLR, however. - Supports multiple stores And for a few down-sides: - Can be a memory hog so you need a decent host for it ([Magento Go](http://go.magento.com/) works well from what I've heard) - Without full caching (and ideally, a content distribution network), it's slow. I'm sure you've seen [How Loading Time Affects Your Bottom Line](http://blog.kissmetrics.com/loading-time/?wide=1), then you can understand how every second counts. - Magento developers don't come cheap (not the kind you want, anyway) - Because it uses something called EAV, data can grow exponentially based on how many stores you have and the products in each Here's a demo of the community edition frontend: [demo](http://demo-admin.magentocommerce.com/index.php/admin/) Here's a demo of the community edition admin: [demo](http://demo.magentocommerce.com/) I've migrated clients off of a number of frameworks that are initially nice but just don't cut it after a while (OS Commerce, Zen Cart, Open Cart to name a few). With all that said, I really love [Shopify](http://www.shopify.com/). Last but not least, the [Laravel](http://laravel.com/) PHP framework team is building cart software called [Cartalyst](http://www.cartalyst.com/) (built on [Platform](http://docs.cartalyst.com/platform)) which plans to blow Magento out of the water. I'm keeping a good watch on these guys. Just my $0.02. Hope it helps.
If you're storing user-uploaded files to a non-public facing folder, you have nothing to worry about, other than somehow including those files from within a php script, but that's easily avoidable by not being an idiot.
You do realize Magento is owned by Ebay INC? Which also owns this little online payments company -- you may have heard about it -- Paypal. Your downsides are valid only if you don't invest in a good host. Now there's this game thats really popular, called Angry Birds and their online shop is built with Magento. They deal with some very intense throughput on launch days. Now, i had the pleasure of sitting in on a talk given by the lead Magento developer -- Fabrizio Branca -- in charge of the project, they get 1 million unique visitors a day, that is 5,000 avg concurrent requests. They see about 8 to 9 orders per second and they deploy changes with zero downtime, zero lost sessions due to the server configurations in their cluster. I could rattle on about varnish and multiple redis instances and the tons of amazing AOE extensions used to bind the build and server together, but thats another story. If a client wants a stable, robust ecommerce solution. It'll cost at least 500$ a month for a decent server, but if they expect to handle Angry Birds sort of success, get ready to make Angry Birds sort of investment in their developers and their hosting.
I'm not sure I understand. I have this block of php code in my index.html body that displays a lot of data. How could it be possible to take it out of that file and have it in it's own file? As I'm writing this my syntax highlighting in vim for index.html is totally screwed up since it has both php and html.
It can be wildly important if your site is a mix of http/https pages. Some cookies may not make the transition, and some ssl pages may accidentally embed non-ssl links. Having a self signed cert, with the root cert installed to your browser is a very smart thing to do so you're not sitting there with a build installed on your production system that's throwing SSL warnings in user's faces making your site look insecure.
Yeah. That's what we are currently using. 
Haha.. yes, I am fully aware that Ebay acquired Magento. Ebay apparently doesn't give much of a shit about proper documentation either, because the one major thing I left out of my list of down-sides is the deplorable lack of documentation. I also didn't mention that, after speaking with a couple of their devs, they candidly told me that this was actually a business strategy. &gt; Your downsides are valid only if you don't invest in a good host. You're right about the first two, but for the last two, I disagree. Good Magento developers are rare. Also, EAV doesn't scale well -- at least, not the way Magento uses it. You can throw beefy servers at any software to help cope with poor memory management by the core team as well as developers, but expanding horizontally is never budget-friendly and it's not solving the root of the problem, but I digress. Regarding Angry Birds -- I would love to see the configuration and the architecture. I use Redis on a couple of our projects and is definitely more efficient than, say, Memcache but is slower overall. My guess is that they only let customers touch their application for session modification and retrieval via AJAX and let their CDN handle the rest. Care to elaborate on this? Please rattle on. &gt; If a client wants a stable, robust ecommerce solution. It'll cost at least 500$ a month for a decent server, but if they expect to handle Angry Birds sort of success, get ready to make Angry Birds sort of investment in their developers and their hosting. Completely agree. My point wasn't that you shouldn't use Magento, but more-so that you should be aware of the potential future limitations in using Magento before you dive in head-first. It's not wise to disregard other options because one shop (with a large budget) was able to squeeze excellent performance out of the software. In any case, not sure where the saltiness comes from but I'm sure you have good reason for being abrasive.
If you have the luxury to have xdebug installed on that server, you can probably follow this guide: https://github.com/derickr/derickrethans-articles/blob/master/200911131159-xdebug-and-tracing-memory-usage.rst Basically, set xdebug.trace_format = 1, then run the page in question that OoM. That will generate an .xt (trace file) and then run the php script provided in the guide to get memory usage of called methods. That should help you figure out where the issue might be. PS. I've not used this solution myself. Another "tentative" solution would be to use Aspect Oriented Programming. https://github.com/lisachenko/go-aop-php or https://github.com/AOP-PHP/AOP looks like 2 potential libraries. Again, I don't have experience with them, but if you know AOP, that might be another interesting thing to look at. What you would do is set it up so that pointcuts (basically where you inject your code) is done before/after a method, you print out the method name and call memory_get_peak_usage(), then you do some digging of the results :).
Just ensure that you don't have PHP execution enabled for that directory, if for some crazy reason it's inside your webroot. 
Use a well-known service like http://www.shopify.com if you can. Regarding ticketing, last time I did research on the subject, I was very impressed with http://www.ticketleap.com/ - that might be a better fit for your needs.
By default it checks in the main packagist repo for packages, of which most are in ghuthub. You can create your own repos (like zf does) or even supply packages from ftp
Thank you so much for this response. I've had major issues with xampp for some reason, I think I set it up wrong. Also, spring weather just hit where I live like a train into a brick wall and I've gone from studying this stuff hours a day to biking until my hands are bruised. I'll get a handle on that soon. I can revisit the problem I ran into with xampp in the next few days and tell you what my problem was. My understanding is that I was trying to launch php before mysql and there are dependency issues there.. anymore feedback you have would be greatly appreciated.
Thanks, I'll do this soon, life has been getting in the way of my personal growth.
Don't worry at all about it. Everyone mis-interprets things every now and again.
I'm just wondering, why people so excited about vagrant? I usually just install nginx on my machine along with PHP, and I can easily 'make' several versions of PHP and use different unix-socket files or tcp ports with fpm and run all these PHP instances on my machine without any virtualization. So.. why people use it? (I didn't try vagrant, but heard a lot of flame in twitter about how it can be hard to install)
FYI this is a pretty meager sale by Jet brains standards. In January they were 75% off.
If you are doing something like that then you would normally store the contents of the file in a database, not as PHP (or txt) files actually in the filesystem.
One advantage is that multiple developers can work on a common setup without each having to set up their own environment by simply sharing the Vagrantfile as part of their version control solution. If everyone is set up the same it helps to eliminate any configuration differences being problems.
General programming: Code Complete 2nd edition: http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670 Clean Code: www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882 The pragmatic programmer: www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X
Has anyone used RubyMine? If so, how is it? Is it worth buying?
I'm afraid that would be a really awkward article. First off, It's just odd to write an article where PSR-0 is lumped together with PSR-1 and PSR-2, but PSR-3 isn't mentioned. The article itself would probably be about me, telling people "Hey, are you looking for a way to standardize your (project's) coding style? PSR-1 and PSR-2 might not be exactly how you would do it, but it was created by consensus, so it's probably a better choice than something else". And then the comments section would be 80% people fighting over Tabs vs. Spaces, and 20% people giving me a hard time about stupid spelling mistakes or grammatical errors. :-)
For XML, use a SAX parsing lib. It is not a fun way to code, but it works great with any amount of XML. For CVS/TSV, the file size doesn't matter. Read it line by line and you're good. fgets and explode are all you need to get the parsing going.
Damn, purchased last week. Ahh well, brilliant product.
sorry if i came off salty. here's fabrizio's slides: http://info.magento.com/rs/magentocommerce/images/LearningToFlyHowAngryBirdsReachedtheHeightsofStorePerformance.pdf
Not to sound snarky, but JetBrains offers full-featured time-limited trial versions of all of their products. It might be worth trying for yourself – I find IDEs are fairly personal matters and only you can determine which one will properly satisfy your needs.
Well, the offer is till April 22nd and I'm not sure whether I could spare enough time to fiddle with it before then to know about the benefits. So just wanted an informed opinion about it.
Sorry I didn't explain myself well. The file uploads successfully and I can read the expected values from the file upload array. I then create a variable to store the target path, and another for the new file name. I then use move_uploaded_file() with those two arguments. But nothing gets written to the target directory. If the permissions on the temp dir are not the issue, I may be implementing the move_uploaded_file() code incorrectly. Here is what I am doing... //function to parse the extension function findexts ($filename) { $exts = split( ["/\\.]", $filename); $n = count($exts) - 1; $exts = $exts[$n]; return $exts; } $ext = findexts ($_FILES['FileUpload']['name']); //create filename based on username and class number $fileName = $username; $fileNamePartTwo = str_replace(' ', '', $classNum); $fileName .= $fileNamePartTwo; $fileName .= '.' . $ext; //create the target $path = 'D:\\ ... \\ ... \\'; $target = $path . $fileName; //If the student hasn't already submitted for this course, move file if(file_exists($target)) { echo 'You have already uploaded a syllabus for this course'; } else { move_uploaded_file($_FILES['FileUpload']['name'], $target); } Am I implementing move_uploaded_file incorrectly? When I browse to D:\ ... \ ... there is nothing there. 
SAX is the way to go. Simple XML dom or whatever it's called will bomb out as it tries to read the whole thing into memory I believe, whereas SAX goes line by line. I do this already with data sets sometimes upto 1.5gb and SAX handles it, though was a bitch to implement. Make sure to include plenty of error checking, as some smart ass changing a field at your source can give you a real bad day if you don't catch it. 
Same, bought PHPStorm two days ago. Well, fuck...
I would have picked it up, but I just don't have the patience to deal with Windows-only IDE's. My team doesn't work like that, sadly. Then again, a homogeneous group of developers would make me nervous anyway....
PHPStorm is cross-platform?
This is really important for enterprise adoption, and I think it's definitely the smart way to move forward. Especially considering other prominent frameworks (*cough Laravel cough*) are using important chunks of Symfony such as the routing components. 
Tried Magento and WooCommerce, and WooCommerce certainly easier and faster to work with. For both store owner and developer.
Yep. Windows, Mac OSX and Linux
Yep, anything that will run a web server, pretty much.
This guy looks like a chin. It makes sense that hes so full of himself https://www.google.com/search?q=Davey+Shafik&amp;source=lnms&amp;tbm=isch
I don't see why PSR-3 should be lumped in with PSR-0, PSR-1 and PSR-2. Those three are all "This is how you write and structure general code for vary levels of unity with your code, all the way from autoloading to code formatting." Then PSR-3 is "this is an interface you should apply to your logging package." How many people are building a logging package?! 
Do this then use http headers to force the content-disposition to be an attachment. 
Yeah it's bullshit. 
You can install vagrant as a gem or native package, it's easy as balls. http://net.tutsplus.com/tutorials/php/vagrant-what-why-and-how/ You might run Nginx for one project, but what if your next one is Apache, or NodeJS, or SomeOtherRandomThing™? They're going to be fighting for port 80, which sucks. What if you're deploying to CentOS but developing on OSX and there is no build for OSX? What if it's not even possible to build it from source due to some dependency that just wont work. There are a bazillion things that can cause problems with developing pretending your own computer is a web server. It's possible to bang out mom &amp; pap FooCMS sites, but as soon as you want to do something bigger it's just not realistic.
To me it seems that he's saying that he sees a lot of people relying on Symfony Components. Either for their products or even for "rival" frameworks, like Laravel. With the exception of Wordpress, it looks like every major PHP project will have at least one or two Symfony components in their next version. This posting confirms that Symfony isn't aiming to be the most-used framework, it just wants to provide parts to pick and choose, and to improve interoperability between projects. All good things, I think. 
All 12 parts: http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1
Pretty much all of their IDEs are, when possible. Afaik only AppCode and the Microsoft-Tools aren't. 
You're right. From the PSR-1 specification: &gt; Namespaces and classes MUST follow PSR-0. I never really noticed that, until now. :-)
Well i have only experience with PyCharm and PHPStorm, but they are pretty much the best in their field. In fact, JetBrains has the goal to offer the best IDEs, and they pretty much keep up with that goal. Try to check if your current workflow works with RubyMine, and if it does, just buy it.
It still doesn't let you close a modified file without saving changes...I'll pass. That "feature" pisses me off so much.
You should email them. They usually give you the sale price.
really cool. will help to make it event better
Great article, any ETA on Code Bright, or at least is there a way to access pre-release versions while Laravel is still in beta? I signed up for notifications on some book site for the release and am really looking forward to diving into L4. Your enthusiasm in Code Happy was contagious!
Yeah, but they are donating part of each purchase to Plant a Billion Trees. Apparently a PHPStorm license will plant 6 trees.
yeah, it's bullshit you won't email them to see if they might do right (hint: they usually do)
Especially the last one is amazing. 
I was waiting on a sale so i could save a few bucks on PHPStorm. Thanks!
Thank you good sir.
I don't consider Laravel a rival to Symfony2. I don't know if rival would be the right word, either... alternative? I think fabpot's aim is to make some kick-ass code that can be widely used, and I am all for that.
Definitely. Symfony has provided so many nice components that made writing Laravel 4 a ton easier. They definitely seem to be becoming the "backbone" of many popular PHP projects.
Can someone else confirm this? I have difficulty believing a syntax highlighting text editor, especially one that costs real money, would have such a basic problem.
JetBrains has said many times they will never implement this. Here's one link but if you search for 'JetBrains save on close' you'll find a lot of people asking the same thing. http://devnet.jetbrains.com/message/5251578#5251578 &gt; **There's no (and never will be) such thing as "Save? Y/N" dialog in any of our IDEs.** All changes are alway saved, this is done automatically (you can only make it be done more often) and simultaneously and also on File/Save (Ctrl-S). edit: another http://devnet.jetbrains.com/thread/291434
I watched [http://www.youtube.com/watch?feature=player_embedded&amp;v=4PY05xwUF0Q](this) video and as soon as I saw the built in REST client I stopped the video and bought a personal license.
Which is a valid UX decision. I never missed that feature / behavior though. But everybody is different, especially with IDEs. 
I just can't understand why they don't have it as a configurable option defaulting to the way they want it. To tell everyone who wants that option basically "you don't need that" just seems like a poor decision, but what do I as an end-user know...
Yesterday at 2:00pm. Fuck me. :(
Well, they technically don't say "you don't need that", they say: We don't want that. The other way around would be being Apple ;) I think the IDE is really optimized to guarantee a certain workflow. Too many options require having them to adjust every one of those options with every change to the interface, which costs time and manpower required for working on important features. For a lot of devs, the biggest issue with storm is actually that it requires you to have a local copy of the project on your harddrive. Even if you choose to use a remote project, it does download the data. Which is problematic for stuff like symlinks, or simply devs who prefer the console VCS client over the builtin clients in PHPStorm. They won't fix that stuff either, because it's part how IntelliJ / PHPStorm works and a change would have huge impact. (although, the addition of a small dialog bugs wouldn't have _that_ much impact) That's why my colleague switched from Bugclipse to vi, and i from Bugclipse / BugStudio (with a small phase of grudgingly using notepad++) to PHPStorm. I won't mention the reason why we both switched, but it may have something to do with insects. PHPStorm is a tool, and like every craftsmen, people want tools tailored to their needs, the above example is just an illustration about the general problem with making products for craftsmen. Either you sacrifice certain things to please everyone, or you provide consistent workflow. I understand JetBrains, and I understand you, but there is just two different opinions clashing here.
Any Git/Hg/Svn with a public URL will work through Packagist. Composer can track anything though, even zip files. http://getcomposer.org/doc/05-repositories.md#packages
It definitely can be an antipattern. It depends on where it is being used. 
The constructor approach makes the system very unflexible, espacially when it comes to deep nesting. Imagine you have a class 7 levells deep that suddenly wants a new dependancy. Now you have to edit 8 classes, and edit their tests too.
Your tests should be isolated such that you don't need to instantiate all seven levels of an object graph just to test a specific function down on that bottom level.
Well what I ment is that if your constructor signature changes for those 7 classes you now have to edit the tests to pass that extra parameter. It's not much work but still
Well I'm actually trying to make a framework out of it (rewriting an existing one actually). And by the looks of it controller constructor signatures would become really long without service locators.
WHY? You don't need to pass anything, you just instantiate the object with the dependencies it requires.
Then you've confirmed my point. Your objects are doing too much. You should refactor them into smaller classes.
How would you achive that? The whole point of DI is that you pass instances along from the very top.
Dependency injection is NOT about passing instances from object to object, it's about externalizing dependencies. Your architecture is messed up. 
Even so consider you have a big class say Cat that has a lot of dependancies, now you split it into two classes: Head and Body that each have half as much dependdencies. You still need a Cat class just to hold references to Head and Body and pass depenedencies to them
No, you don't. You inject the dependency into the Paw instance. 
How then? sorry for asking it twice now)
Well, it's a little hard to analyze such a contrived situation. A real code example would be better. I do know it's possible, however. I'm the author of Laravel and version 4 is totally dependency injected. Service location is never used.
 $country = new Country('MURICA'); $region = new Region('California'); $street = new Street('Lombard Street'); $house = new House; $cat = new Cat; $paw = new Paw; $paw-&gt;setLogger($logger); &lt;--- $cat-&gt;addPaw($paw); $house-&gt;addCat($cat); $street-&gt;addHouse($house); $region-&gt;addStreet($street); $country-&gt;addRegion($region);
Well I cant say I have seen much of it, but looking at the tutorials there are a lot of statics like: return Response::json([ 'error' =&gt; false, 'urls' =&gt; $urls-&gt;toArray()], 201 ); If you are providing a static nterface for the userspace isn't it essentially vioalting DI?
Oh that's good. How didn't it cross my mind)))) Thanks)
Managing it would be a lot easier if you used a dependency injection container. That way you could pull in the dependencies something needs from the container. For instance... $container-&gt;set('logger', function (Container $c) { return new FileLogger('log.txt'); }); $container-&gt;set('paw', function (Container $c) { $paw = new Paw; $paw-&gt;setLogger($c-&gt;get('logger')); return $paw; }); and later... $cat = new Cat; $cat-&gt;addPaw($container-&gt;get('paw')); Notice how I'm never passing in the container, but an actual instance of the class it expects to receive. That way I'm never turning it into a service locator.
Yeah it's bullshit that I already did and they gave me a crappy $10 off or whatever few weeks ago. That was after I asked them if they are doing discounts any time soon / can match previous discount I got via sale for PHPStorm (was buying $99 version of PyCharm). So yeah, maybe you should not just to conclusions after calling me out about the same thing. Ironic.
I don't think they're really rivals either, that's why I put quotes around it. To me, Symfony and Laravel (and Silex) are just different tools, and if they share more code, everybody benefits. 
In that case: If you want to run Magento, be ready to invest time and money in it. Money both for hardware, as well as aspirin, because of the headaches it will give you. If you do not expect 5000 visitors per day, I'd think Magento will be overkill. Look into [Shopify](http://www.shopify.com/) for a hosted solution, or [Lemonstand](http://lemonstand.com/) if you want to host yourself. 
Update: they gave me a coupon for "a discount on another JetBrains product." The amount of the discount will vary depending on the cost of the product...so I don't even know the value of the coupon. Can't say I'm particularly happy with that.
I recently got PHPStorm, but am confused on what features I should look for in it to be the best for me and how to even connect to SFTP to edit those files. Any advice on where I can find a good tutorial?
You could try Jetbrain's [Getting Started](http://www.jetbrains.com/phpstorm/webhelp/getting-started-with-phpstorm.html) Guide. I actually learned just by using it, however I had used Eclipse, Aptana, and Netbeans extensively before jumping to PhpStorm. To answer your S/FTP problem, you would click 'File' and then select 'New Project from Existing Files' and in there you would select the option that is for FTP, the 4th option in PhpStorm 6. Then you just put in your server information and yo'ure good to go. One thing though, it does not automatically upload your files on every save you make, although that is an option in the Settings (in Deployment -&gt; Options, then 'Upload changed files automatically to the default server &lt;dropdown -- choose on save here&gt;)
Java. No thanks. http://i.imgur.com/sBix6.gif
Update update: The coupon code isn't valid with the sale? I tried to test it to find the value and it said it couldn't be combined blah blah. So...wow. Even less helpful than I thought. Kind of regretting this whole mess, now.
I just went to the New Project from Existing Files and now I understand how to use it; I had the most trouble finding that so thanks! Also, do you know about what issues I may run into if I edit a file from a different computer and then come to my current computer with PHPStorm?
If you are editing on another computer and make changes to the remote server, when you come back into PhpStorm you will want to right click your project (in the folder/tree on the left of the IDE window) and update your local files so that you don't upload an out-dated version of a file. I am not on my dev machine at the moment but I recall it being under deployment or sync or something of that nature, I deal mostly in SVN so I haven't done FTP projects in a while. Hope this helps.
Also, another great feature is local history for each individual file. If you right click a file you can look at every individual save you had made, sort of like a local source control. It's saved me on more then one occasion when I have not checked something into my SVN repository and really screwed up some files.
Ok that sounds reasonable: just update the files. Similar to what I did on Notepad++. Also, do you know if obtaining an academic license is difficult with Jetbrains?
change the extension of the file to .php or use htaccess (or similar) to have the html extension handled as php
If you are testing locally and having issues there try using http://www.apachefriends.org/en/xampp-macosx.html
I did just decide to write a PHP script. Right now, I'm just using the local index (folder on my computer) to display the website, so I'm just using my computer as a server I guess? The path to website is the file path to the index.html file in that folder. Like I said in the original self.post I enabled PHP support in Terminal. 
Thanks, see my reply to Signe above. I don't pretend to be even intermediate in PHP as I'm trying to teach myself. Thank you.
I do not think it's difficult but I have never done it. I think on their site they have a form for it.
I don't see how that can be true unless `array(name=&gt;1)` is a typo. define(name, 'blah blah'); $ary = array(name=&gt;1); What should happen? Nothing. Valid PHP code. What you're telling me should happen: Some sort of warning for the "bug" of `name=&gt;1` (but also nothing, since it doesn't fail on it).
Glad I read this. I won't even touch the product now. Autosave should not be enabled by default and definitely should at least have a "disable autosave" option.
Why should I use this over Netbeans? (serious question)
Java is slow *when it's coded like crap*. Any of Jetbrains IDE's are a LOT faster than other comparable IDE's. 
Y u no use source control?
At this price it blows Sublime Text out of the water.
Runs on OSX, Windows, and Linux. I feel like you had all this *smug* just bottled up in side waiting to release it at the first chance and thought: "This is it! Time to release this SMUG I've been bottling up for the last hour and a half." Then you let it all out and it feels *so good.* *"Ahhhhh...."* But then you look around and it turns out there were two hot Swiss girls sitting behind you. You were so eager to get that smug out of your system you were no longer aware of your surroundings. They heard it, and now they smell it. They look at you disapprovingly, shaking their heads as they reach for their phones to tweet about the horror that just occurred in front of them. ಠ_ಠ ಠ_ಠ 
make sure nothing runs on port 80. I remember having issues when skype was opened before xampp. Also, dont install them as services.. just start apache and mysql. Run this in cmd.exe netstat -anb 
Agreed. Having tried Eclipse, Sublime, Notepad++, PHPIDE and a variety of others, PHP Storm is a phenomenal tool that increases time efficiency out of the box. Who likes easy-to-setup breakpoints in their code? I DO!
I initially hated this in Xcode, but now I'm using pyCharm and don't mind it at all. Visual Studio 2012 even does it now (but I'm sure it has an option to turn it off.) It's nice because I never have to wonder if I remembered to hit ^s, and if I'm committing/branching how I should anyway, there aren't really any downsides for me. What are the downsides for you?
I've never used IntelliJ or any of their other products. Does this auto-save thing keep a history of all the versions of the files that it is saving? I found by a quick google search that there is a thing called "local history." Is that related to this? If the IDE is keeping a history of all of the versions of the file that it is auto-saving, I can't imagine what the issue would be: just rollback if you didn't like the changes you made, no?
oh man....every reason under the sun. It's faster. It's more configurable, but isn't hard to customize. It's FAST. It's stable. Live templates. Live edit. Don't get me wrong - Netbeans is probably second to phpStorm; however its a FFARRRR second. Try the demo, you won't want to go back after trying it. 
Can't really compare the two though - one is a text editor, one is an IDE. Granted, Sublime Text is easily the best editor and phpStorm the best IDE. You are right though, as much as I love ST, it is *expensive* for a text editor.
I do use git but I don't want to have to `git checkout -- fileName` to discard something when I could just close the file's tab and click no instead. 
Totally right... I just don't see it being a problem. You can revert right from the context menu. And diff and all those lovely things. I guess I don't normally monkey around with code unless I'm there to do something and I don't find myself needing to work like that almost ever. I guess for my workflow, insta-save is more time saving than a manual revert.
Here you go: [Code Sprint for Symfony 2.3](http://symfony.com/blog/code-sprint-for-symfony-2-3)
Dude, this sale means they're selling their stuff already on the very edge of any profit margin, making coupons combineable with sales would be meaning their selling their products with loss, and few companies will do that. JetBrains is not Nintendo and has a gigantic budget, afaik our fellow neighbors from the czech republic have to pay their bills too ;)
Also: PHP storm marks the changed lines in the file blue on the left side.
Really? Another downvote? Dude, I know what sales mean. My issue is that 12 hours after spending $100 on an item that I could *easily* have just purchased 12 hours later, the price drops 40%. Their answer to that is effectively "shove it." By giving me a coupon that can't be used during the sale (and will almost certainly be for no greater discount than the sale price), they're actually giving me the "opportunity" to spend *more* later with the coupon than now with the sale. They could have offered to refund the difference. They could have offered a license for WebStorm (less, even, than the price difference). They could have given me a **real** coupon. Or they could have just said that they're sorry but their policy is that sales are final at the time of sale or something similar. If I purchase an item in a store, pretty much all of them will insure against sale prices for at least a week or two. This is not exactly a foreign concept. And their refusal to respond to my follow-up email (rantless and polite) feels like I'm being snubbed and makes me *far* less likely to buy another product from them.
Import into a db? What benefit will you get out of this? Import 1 GB data feed into DB and then?
If it makes a difference, the undo history for a file is persistent even AFTER closing it. Something which I find infinitely useful.
The new dark IDE theme is beautiful, really like it. I use WebStorm (for Node.js projects) but I assume PHPStorm has the same theme.
If you're sitting on the fence, just buy it. You won't regret it. 
Your server's misconfigured. PHP is never invoked by the server (I'm assuming apache) and is sent straight to the user. Show us your httpd.conf.
I didn't downvote you. I rarely downvote anyone. My comment wasn't meant to be rude, or like a rant. Germans tend to formulate english sentences more aggressive than they are meant to be. I was just saying that sellers rarely allow coupons with already discounted products, and also like to give you coupons instead of refunds. And with this "if i purchase in a store" stuff... Here in germany (and maybe europe as a whole, i don't know) this isn't common. Amazon had this program here, but they cancelled it after a few years. The only ones who do it are some tech-discounters, but even they do it only for limited time. I can fully understand your dissapointement, but stuff like this is different around the globe.
I actually wasn't directing that part at you (no way to know who's doing the downvoting), more just ranting "out loud." I didn't even realize they were Euro. But I've heard, over and over (even in this thread) that they *normally* refund the difference when this happens. So, imagine my disappointment when I get a little bit of a "fuck you" with the non-CS CS.
If you're interested in solving issues like these with software design patterns, have a look at http://github.com/RickWong/Phur. I'm creating a patterns framework to serve as boilerplate. The decorator pattern I haven't implemented, but there's a proxy pattern implementation that's *somewhat* similar.
It does, and it's indeed nice. 
Speaking of Git, PHPStorm has solid support for that as well. I rarely use it through a prompt anymore.
Do you need Webstorm if you have PhpStorm ? Can use your coupon to renew your subscription in a year ?
Why shouldn't you store hashed passwords even with salt?
Because I prefer cross-platform IDE's? I'm not sure that's smug. I might just like consistency. But hey, if a bunch of nameless, faceless people on the internet think I'm smug, then I probably am.
I misread that too. His argument is basically that you shouldn't use md5 or sha1, but use bcrypt. It's not about the storing, his words are a little confusing.
MD5 and SHA1 are really quick to check. This isn't a good thing if security is your aim.
The Apache vs Nginx bias really tells a lot about the authors experience...
MeekroDB? Seriously? 
Could you explain more? I've used apache for 12 years (many complex vhosts and htaccess files). Switched to nginx with php-fpm last week. Way better in many ways. Hah it was so easy to configure in comparison to apache that I thought I had it wrong!
Thanks! :) As the author, obviously I very much agree about Cake. This was more of a quick rant than anything else, but one day I'll catalogue, step-by-step, everything I think wrong's with the damned mess.
*It's not about the storing, his words are a little confusing.* Correct, and thanks, I hadn't realised how confusingly I'd written that until I saw your comment :) Made a small change, but will do some further work on the wording later. And yes, you're completely right about my argument :)
*The Apache vs Nginx bias really tells a lot about the authors experience...* You're 100% right; I can confirm that I have indeed experienced precisely what I wrote. However, I'm guessing that you intended your comment to be a bit snarkier than that, right?
I'd thought it would make a difference, opening/closing files seems a little bit expensive. But I don't know if there would be any downsides to keeping an open file handle... And I'm getting VERY mixed opinions on whether I should lock the file before writing to it or not... this is very confusing!
It's fine, but don't use the file functions anymore, unless you really need to. http://de3.php.net/SplFileObject You want this. It handles the opening / closing stuff for you, just save the object in some protected / private attribute of your class. It's also a joy to use. 
Yeah, but there is always Wirths law: "Software gets slower faster than hardware gets faster" So don't waste performance on minor things like that. It sums up, trust me.
Wow, I didn't know about this! No more suppressing fopen errors? Awesome! Thanks!!!
He should use mongodb because its webscale amirite? :U
But logging to a file isn't something that multiple processes can do, and probably WILL when you have A LOT of requests per second? What if they try to write at exactly the same time?
I heard that writing to /dev/null is also very fast, but I don't know if it's webscale... is it webscale?
The only time I would bother locking a log file to write is if I had multiple PHP daemon processes and they were all writing to the same log file, instead of throwing an exception I would simply have it wait until the file was unlocked - as a logging class should never break unless the server is on fire. However even this is not really ideal, in the case of multiple php processes writing to the same log a better method would be to have a logger php daemon process sat listening to a socket and then each other process logging to that socket. I know, I got sidetracked, but its typed now so I am pressing save.
JetBrains' IDEs are Java-based, but don't go making the mistake of thinking they run like Eclipse or Netbeans. If anything, the IDEA-based IDEs are a great example of what Java applications look like when done right. Full disclosure: I hate Java.
I'd say if your opening the log file, say more then 1000 times per request, store the resource. If your not, don't! Micro optimization is a bad thing. Not to mention. If you're opening that file so many times that the simple act of opening is causing an impact to performance then you should be logging elsewhere. Also, if this is for error logging you should use built in functions such as error_log() which lets you control more about the logging than trigger_error()
AFAIK on most *nix systems if the processes write all their data in one statement things won't get messed up. One log statement will get written and then the other. You won't know the order, but does it matter? Absolute worst case I think is a corrupt log file. Do you really want your application potentially waiting (seconds, minutes?) for an exclusive write lock just to log something. I guess the answer is... depends on what you're logging. If it's an audit trail I'd argue there are better places than flat files for that data.
I like the mix of PHP 4 and PHP 5 class definitions, that won't confuse anyone
Yeah, I guess you're right! Hadn't thought of it that way. Thanks!
BTW, I'm reading the docs and I'm not seeing an "fclose" method on SplFileObject. Is there no need in this case? The file is closed when the object is "destroyed"?
Magento does a really good job for large e-commerce website. For a small one, it's kind of overkill IMO. If you can't afford a good server, you will run into performance issue. When I'm building small e-commerce site, I used WooCommerce. It's a plugin for WordPress: easy to ease and easy to theme.
sorry to have taken so long to replay. you are in fact using move_uploaded_file... half correct! You need to pass it $_FILES['FileUpload']['tmp_name'] not $_FILES['FileUpload']['name'] 'tmp_name' holds the path to the temporary upload file. 'name' doesn't also instead of your findExts function, use the built in pathinfo(): try this: //function to parse the extension $ext = pathinfo($_FILES['FileUpload']['name'],PATHINFO_EXTENSION); //create filename based on username and class number $fileName = $username.str_replace(' ', '', $classNum).$ext; //create the target $target = 'D:\\ ... \\ ... \\'. $fileName; //If the student hasn't already submitted for this course, move file if(file_exists($target)) { echo 'You have already uploaded a syllabus for this course'; } else { move_uploaded_file($_FILES['FileUpload']['tmp_name'], $target); } so what I did here: * Used the built in pathinfo method to get the extension (i don't care what anyone says, it's faster than doing it manually, as this is C code) also something to note, a file has a single extension, you're building an array of extensions for no purpose known to me. * Removed the temporary variables used to create the new file name (why eat up extra memory and cpu cycles?) * used the correct array element from $_FILES to move the upload hope it helps!
if it's a FEED then I guess you can't and you should use fread and read a number of bytes at a time, I don't see how a FEED has a gb of data. sounds like a poorly designed feed. if it's just a massive file importing it into a database can work wonders for you because instead of trying to read all of it at once, you can read one record, process it, move on to the next record. I don't understand how you can't see that as a benefit of using a db. Even if the data is not structured well, you can import into mongodb. the records don't have to be structurally the same. but being in a CSV file, i'd hope they're fairly uniform.
Yup, it closes the file stream itself when it's destroyed. So keep it in a property in your logger class and write the data via fwrite. (sadly, fprintf is not supported, but that doesn't matter i guess)
Lots of devs use woocommerce at my company for small WP based shops. It works, its a young and sometimes buggy plugin, but it works on a budget. You get what you pay for though.
This is really awesome. Thanks!
First two points seem more like open-source related, no? Don't get me wrong - they're awesome at that, but I can't imagine applying them in our projects. Third one is a good idea, but isn't it covered with functional/acceptance tests? If a change to service X breaks controller Y then a test on behavior of controller Y will most likely catch that. I guess it would be good to know what affects what, but then again I can always just grep for that? I can't imagine where I would need re-usable controllers in the larger-scale projects I work on. As soon as we see a piece of code in controller action that we need in another spot we just extract it to a service... **Bottom line:** I fully agree that controllers as service are a very good tool when you're planning to open-source the bundle, but I'm not convinced it's a good idea to use for actual projects, especially large scale ones...
&gt;PHP NO
Please beware that SplFileObject does not support everything which ordinary file handles support. Like you see in the documentation, it misses some functions which are possible with filehandles. Also, you have no possibility to get the file stream handle for passing through to stuff like curl. There is a feature request for that, but the PHP core team has to respond: https://bugs.php.net/bug.php?id=44392 Maybe some PHP core dev reads this ;)
First of all, it's generally a good idea to keep file handles open, especially if you *know* that you will have to write to it more than once. While the impact isn't a huge issue for 100 `fopen calls`, it can still make the difference between 1ms and 5ms. I know it sounds crazy, but yes, I/O is slower than CPU. So you need to be a bit more careful with how you treat it. Regarding locking, there's a few factors here. `fwrite` calls will be atomic only when the following conditions are met ([see also the fwrite man page](http://php.net/manual/en/function.fwrite.php)): * File must be opened in append mode (`fopen($filename, 'a')`) * Platform-specific factor (my guess is it depends on the filesystem) * Length must not exceed filesystem block size I don't know if there is a reliable way to determine the platform-specific factor and the block size. So unless you know those factors and know that they won't change, I would *always* `flock`. And I would do so in a blocking manner (without the `LOCK_NB`). If you don't lock, long log messages may get interleaved at random points, which is probably not what you want. If you run into issues with performance (generally should not happen), you can always migrate to a dedicated log daemon such as logstash.
Curl and Dom: http://us1.php.net/manual/en/book.curl.php http://us1.php.net/manual/en/book.dom.php Using file_get_contents on remote data is a gaping security hole.
I use this really usefull library class. http://simplehtmldom.sourceforge.net/ Its perfect for scraping websites and parsing data.
Apache is just much more advanced. All Nginx install tutorials focus on that one-true-way (php-fpm and the like) while linux distros install php as apache module 99% of the time. It takes a lot f tweaking to get apache right, but from what I've seen properly configure apache 2.4 using the event handler beats nginx (truth be told not by much). Apache has much easier configuration, more modules, easy url rewriting etc. So if both perform pretty much the same one should obviously choose apache. It's not apaches fault if people can't configure it correctly.
I'm 100% self-taught as well! welcome to the club! I've just been doing this for a VERY long time (in the double digits of years)
https://github.com/fabpot/Goutte
*Apache is just much more advanced.* More complex is not always better ;) *It takes a lot f tweaking to get apache right* But as you admit, for little extra gain. More importantly, you're ignoring that time has a cost associated with it. *It's not apaches fault if people can't configure it correctly.* If you want to use Apache, and you know what you're doing, go ahead. I'm starting to wonder what extra modules/features you're so concerned about using on a day-to-day basis though.
Well you only need to learn to do it once though. It's not something that you have to relearn every few days. My point is that the statement "Do not use apache, period" is just like saying "Don't learn PHP, its too complex, write in Pascal" (probably bad example), but you get what I mean. You could say " don't use the webserver bundled with PHP, period" but wailing down on apache is not the way to go.
Why should the salt never be stored in the same table as the password? It's not a decryption key after all. The hacker still has to brute force every password in the table individually....
Just used it yesterday for a project, the jQuery like selectors are so nice.
Agreeing w/ Veonik this site might be served better using github + markdown wiki solution; allowing anybody to edit or add a design pattern.
Curl is something every programmer should know about anyway.
How is using file_get_contents on remote data a gaping security hole? Unless you eval the string you get back, or try to grab a file that makes your machine run out of memory, you would have to be doing something stupid for it to be inherently bad. Maybe you are confusing having the fopen wrappers available on your system, which would allow other users to include files from remote sources. file_get_contents only returns a string.
I also don't really like having a run time on my machine that has so many zero days.
so you're saying change index.html to index.php?
https://www.dropbox.com/s/k2qrxot4dk45vgz/httpd.conf
Well it's the issue of technical debt. Since nginx is less flexible the decision of stickingwith it can later bite you in the ass whn you need some extra functionality. Thats why I would stick with apache so that I would always be flexible. If you are 100 percent sure this will not be an issue then use whatever you like.
I use this for scraping and it is great.
http://php.net/manual/en/class.domxpath.php Oh so useful.
If file_get_contents is a security hole, then so is cURL. They do the same thing, one is just more configurable than the other.
Having .htaccess for one. It's a very cool feature.
never use regex on html. HTML isn't always formatted correctly. Everyone here makes some great points on using a dom library, this is an absolute must. that said, checkout [phpquery](https://code.google.com/p/phpquery/). It's a port of jquery to php, so you can use jquery/css selectors and pick out the content you need(behind the scenes it also uses a dom parsing library)
Yeah SimpleHTMLDom rocks for simplicity, but is brutal on resources.
Use PHP DomDocoment http://php.net/manual/en/class.domdocument.php I actually blogged on this topic a while back and break down how to really optimize scraping: http://blog.cnizz.com/2012/10/12/scrape-faster-with-php-domdocument-and-safely-with-tor/
Scales infinitely on a single hardware instance.
In addition: It's also a security problem if you pass urls from user input to it. You don't even need to eval the data then, because somebody can make a brobdignagian big website (just random data) and DoS your system by generating hundreds of memory intensive long running processes. But passing unfiltered user input to anything is generally a very bad idea.
Nice! Thanks!
UserPie is meant for both pros and newbies. The script has lots of hints and tips embedded in the code along with suggestions for development best practices. I've seen lots of tutorials and message board discussions on login scripts, but there doesn't really seem to be a standard user authentication script that everyone can refer to. My goal is to make UserPie into the WordPress of authentication scripts. 
DomDocument is faster, but less forgiving on malformed HTML.
That's what I was wondering...
But it IS a cross-platform IDE. I - and possibly many others here - don't understand what you're talking about. You want a cross platform ide -&gt; PHPStorm is a cross platform IDE. But you don't pick it up because you don't want to deal with Windows-only IDEs?
I have said exactly the same thing myself. If you want a real standalone DI system, try the one from Aura. https://github.com/auraphp/Aura.Di (Full disclosure: I'm the project lead.) 
Yup. If you really need to use something like mysql, please consider using the BLACKHOLE database engine, it's pretty much the fastest engine mysql has to offer, in read and write performance. And also no deadlocks on tables. And it's compression is awesome.
Absolutely no problem, mate ;)
You can get around some of that with this line: libxml_use_internal_errors(true); You should also encode your result string to utf8 before passing it to your dom object. iconv('UTF-8', 'UTF-8//IGNORE', $resultString); (these comments aren't aimed at you, systematical, just whoever ends up using this class)
I parse 10GB XML files daily and use a combination of XML Reader, DomDocument and simplexml. 
Any other issues? I seriously want to know. Also, UserPie is open source, Sentry is not.
Htaccess is painfully slow. Try mod_rewrite rules instead!
yes, or change the handler for html extensions to php, easiest would be just to change to index.php though
what? mod_rewrite and .htaccess serve two really distinct purposes. you can put rewrite rules inside .htaccess but thats about it for their colaboration
you could also run it through html tidy beforehand
Never is too strong of a word. Using regex on HTML is perfectly okay, and sometimes even better than DOMDocument or other solutions, depending on the markup and what you're trying to do with it. You just have to understand the limitations (namely, arbitrary nesting depth of nodes).
+1 for this, so many other tools just don't cut it.
just hash passwords with blowfish and add column "change_password" on tinyint. And every moth just use 1 on "change_password" column.
I haven't setup Git just yet, but will be doing that soon and glad to hear that it's got an easy interface for it!
According to the license.txt file in the sentry repo it is BSD. https://github.com/cartalyst/sentry/blob/master/license.txt
* PHP and HTML are not separated. * Concatenated SQL Query instead of prepared statements... this is bad yo, major security issue. Use PDO, mysql_* is going to be deprecated (if its not already deprecated) * No separations of concerns ... * using MD5/SHA1 instead of bcrypt.. use this -&gt; https://github.com/ircmaxell/password_compat * no autoloading.. require everywhere! * global?! whaaaat. This is PHP from 2006. Use new OOP methods and functions, like autoloading and stuff... and check out composer. Make it framework agnostic like erik240 said.. All in all - this is a pretty bad framework. I would not recommend it for live usage until those points are resolved. edit: ------ Wow dude this is really bad. $db-&gt;sql_query("SELECT session_data FROM ".$db_table_prefix."sessions WHERE session_id = '".$_COOKIE['userPieUser']."'"); You are taking a var from a cookie and injecting it directly into a query. This mean I modify my cookie to: 1' OR user_id = 1 -- and basically auth as another user.. This is really, really not good. edit 2: -------- I forgot, http://www.phptherightway.com/, please read that. A login needs to be secure and this is not secure at all. There's bad practices everywhere.. 
If passwords need to change every month, and they don't all change on the same day (common), then you need to change the salts every 2 months to make sure you catch all sliding windows of 1 month. Also, bcrypt if you can.
I used something like this a couple years back and have been unable to find it again. Thanks for posting.
The 75% off ones are generally 24hour if I am not mistaken. So keep a weather eye out if you are waiting for it.
That's when you take the opportunity to not give a care about asking for a greater sum of money than usual.
Also noticed that set_cookie does not set a domain, path, or HTTP/SSL only arguments set. setcookie("userPieUser", "", -parseLength($remember_me_length)); I also noticed some scattered random die() statements, these should be return's with error values or throwing proper exceptions. if(!array_key_exists($user_units, $units)) die("Invalid unit of time."); else if(!is_numeric($user_time)) die("Invalid length of time."); else return (int)$user_time*$units[$user_units]; Why create an array and then array_merge it with the data you want? $lang = array(); //Account $lang = array_merge($lang,array( "ACCOUNT_SPECIFY_USERNAME" You can document the array and still keep it in one array without using array_merge IE: $lang = array( //account language text "ACCOUNT_SPECIFY_USERNAME" =&gt; "Please enter your username", //forgot password language text "FORGOTPASS_INVALID_TOKEN" =&gt; "Invalid token", //Misc "CONFIRM" =&gt; "Confirm" ); Edit: On further inspection it looks like you took the code from http://usercake.com/ and modified it. All the notes I made above are all the same for usercake.com's code.
Try adding the following to the httpd.conf: AddModule mod_php5.c &lt;IfModule mod_php5.c&gt; # If php is turned on, we respect .php and .phps files. AddType application/x-httpd-php .php AddType application/x-httpd-php-source .phps # Since most users will want index.php to work we # also automatically enable index.php &lt;IfModule mod_dir.c&gt; DirectoryIndex index.html index.php &lt;/IfModule&gt; &lt;/IfModule&gt;
This function isn't secure, and it definitely shouldn't be used together with passwords. Stop rolling your own, and go use bcrypt.
Warning, none-PHP solution ahead: For some recent scraping I've used [pjscrape](http://nrabinowitz.github.io/pjscrape/) that uses [phantomjs](http://phantomjs.org/), build on nodejs. Basically it's a headless browser that uses jquery to grab elements of the dom. Super easy.
that's a bad example, apache lets you change the header/footer and inject js/css into a directory listing. I've actually done this at home in order to create a quick and cheap UI for my movie server(Wii U can stream any mp4 file over it's built in web browser)
When it comes to security: Stop. You're not good enough. Use a tried-and-tested solution.
I haven't read it, but there is a [whole book on the subject](http://www.phparch.com/books/phparchitects-guide-to-web-scraping-with-php/).
look in your httpd.conf file. On a mac this should be in /etc/apache2/httpd.conf Search this for DocumentRoot. This will show you the root folder for your server. Put the info.php file in that folder. and then go to http://localhost/info.php
I think the above poster was just parroting general advice. In this context, I really can't see how file_get_contents and curl are more dangerous than any other functions. We are screen scraping specific content from specific targets, not building a web app for users here.
Ok, I know I know it is very nitpicky, but... I think you didn't mean: "double forward slashes" those are back slashes. So in that example you have double back slashes and a single forward slash. Dang. I just became that person.
Yeah, but I need it now, not the next sale..
Totally agree. Took quite a while to figure out. They definitely focus on the code first use case. That being said, I'm not sure I want to choose my ORM based on the ease of the code generation during initial install. We ended up using doctrine, auto generated the code once, tweaked as needed, then switched to code first. Seems better than being stuck with Zend's ORM. Love the Zend Framework.. could do without their ORM.
I really appreciate the effort and work you've put in this project. But like others have pointed out, it's simply not good enough to be used by others, especially when authentication needs to be *secure*. Don't give up. No one project ever has been released in perfect state. So read the suggestions here carefully, follow them, refactor and rewrite the code. Apply as you learn, and never stop learning!
You are discrediting an edge case with an exponentially smaller edge case. 
My design pattern education began with [this](http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1366152490&amp;sr=1-1&amp;keywords=head+first+design+patterns) book. I spent a weekend writing a PHP version of every chapter.
Your examples are all "strings of a known format," and are all trivially matched with regexes: #&lt;div id=("|)1\1 *(/&gt;|&gt;&lt;/div&gt;)# #&lt;input type=("|)checkbox\1 selected(=selected)?( /)?&gt;# #&lt;b&gt;&lt;a&gt;test(&lt;/a&gt;)?&lt;/b&gt;# That said, regexes were not "designed to work on strings of a known format." They were designed to express regular languages, and have evolved to be able to express irregular languages (see: backrefs and other modern niceties).
I've read it, and I think it's the better book on the subject if you're using PHP. I may be biased, though, seeing as I wrote it. ;)
Sometimes, there's no good way around it. However, I agree, if you can avoid scraping with something less painful, do it. If you have to resort to scraping, always check your data rather than assume it won't change.
I've used it to serve flash vs html5 video.
thank you! yes, it's definitely running. http://i.imgur.com/9pqYAQA.png
IDEA is off 50%, doesn't it support all the other technologies? So instead of me buying now phpstorm (I also use Ruby and sometimes java) couldn't I just buy the big flagship? Are there any downsides? 
As others said. I've had to deliver a working dev environment to 5 people not in the same room but all working on the same project. vagrant up ftw. The best part: you put the puppet manifest as part of your project and thus can easily update the machines whenever is necessary, developers don't need to care about it. But if chose ymmv. Probably not so useful if only used by one maybe? 
Well, for one, you don't want to be using mysql functions. But, since this is what you asked for... don't "echo" your row data. Store it in an array.. $prodArr = new Array(); Then hash your results and return the array (or false): foreach($row as $key=&gt;$val){ $prodArr[$key] = $val; } return (count($prodArr) ? $prodArr : false); Then you want to instantiate your object after you get your row data: $prodData = get_product($id); $prod = new Product($prodData['prodId'],$prodData['prodTitle'],$prodData['etc']); If you built your class to accept an array as the parameter containing the product data you could skip the step of typing out all the params in the constructor function. At this point you call your functions like so: echo 'My Product ID: ' . $prod-&gt;getId(); 
Thanks for the reply, I wasn't expecting one so soon. I'm not trying to confront you as I have limited knowledge, but could you help me understand what is wrong with using MySQL functions? Surely that is how I access the data from my database? In regards to creating the class to accept an array as the parameter, I can give that a go. If I did, what would be the advisable way of transferring the data in the array to the object attributes?
they will be deprecated in php 5.5 and are frowned upon, search for PDO, its a safer and optimal way of accessing a db
Thank you very much, I just did a quick google search and came across this [tutorial](http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/). It's 3am here so I'll review it once I wake up.
if you want php in html files to be handled as php, it needs to be as i said and then you just put html outside of php tags or echo it inside the php
that's the tutorial that got me started, just be wary, the author has a lot of syntax errors on the samples, also make sure you build a helper class to avoid repeating most pdo code, here's one i made its not pretty but it works for me class DataHandler { // Database Handle private $dbh; // Settings private $fetchMode; private $lastID; private $rowCount; public function __construct($instance, $module) { $this-&gt;dbh = Connection::create($instance, $module); $this-&gt;dbh-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); $this-&gt;fetchMode = PDO::FETCH_ASSOC; } public function setFetchMode($mode) { if(in_array($mode, [PDO::FETCH_ASSOC, PDO::FETCH_OBJ])) { $this-&gt;fetchMode = $mode; } } public function get($q, $a = []) { $result = []; $st = $this-&gt;dbh-&gt;prepare($q); $st-&gt;execute($a); $this-&gt;rowCount = $st-&gt;rowCount(); $st-&gt;setFetchMode($this-&gt;fetchMode); while($r = $st-&gt;fetch()) { array_push($result, $r); } return $result; } public function set($q, $a = [], $r = false) { try{ $st = $this-&gt;dbh-&gt;prepare($q); $st-&gt;execute($a); if($r) { $r = $st-&gt;fetch(); $this-&gt;lastID = $r['id']; } } catch(PDOException $e) { die($e-&gt;getMessage()); return false; } return true; } public function getLastID() { return $this-&gt;lastID; } public function rowCount() { return $this-&gt;rowCount; } } 
Really appreciate you letting me know the name Ill just leave [this](http://www.slideshare.net/rob_knight/object-relational-mapping-in-php) and [this](http://www.youtube.com/watch?v=nR3rK9Qnx3k) here for me to read in the morning.
once i finished the class it just takes 1 line of code to retrieve data from the database and i use a foreach to cycle through the array it returns, overall i found it to be much cleaner than the functions and faster when developing
Never, ever, ever suppress errors. Just don't.
The #1 reason not to use mysql functions is it is being [deprecated](http://php.net/manual/en/migration55.deprecated.php). The other reasons can be answered by people much smarter than I am. There are a million ways to handle class parameters. I like doing it like this sometimes: private $_classVar1; private $_classVar2; public function __construct($arrayOfData){ if(isset($arrayOfData['var1']){ $this-&gt;_classVar1 = $arrayOfData['var1']; }else{ $this-&gt;_classVar1 = 'default value'; } if(isset($arrayOfData['var2']){ $this-&gt;_classVar2 = $arrayOfData['var2']; }else{ $this-&gt;_classVar2 = 'default value 2'; } } Passing parameters this way means #1 you don't have to remember what order you wrote the parameters in the function and #2 you can skip parameters by setting up default values inside your constructor function. Note: you can also add the default values directly to your private class vars but you *cannot* construct those values by calling functions i.e; private $classVar1 = date('c'); // &lt;-- This will not work. private $classVar2 = 'Hi I\'m a string'; // &lt;-- this will work 
Absolutely! I wasn't talking about testing and neither was anyone else in this thread, I was talking about development, and the fact that requiring SSL in development (somehow) is a perfectly valid requirement - and offering a use-case. 
Get in touch with the author of the site: http://maxoffsky.com/contact-me/
I guess my point was more that php -S is likely to be more helpful in the very early stages of project development or if you are making simple static(ish) sites. (as opposed to the point where you are *really concerned* with SSL.)
Did you also miss the first line of my reply? That's why I feel like the smug was waiting to come out.
Is there a chapter in there about what you can and can't do legally?
I reserve the right to disagree with anything you don't say. ;)
I wouldn't be scraping HTML in the first place. If I had permission to use the data I'd be working with the other party to create a proper API, or I'd be finding a different source for the information entirely.
as others have said Goutte. Or, CuRL and like phpquery, https://code.google.com/p/phpquery/.
Uhm.. Why? You can have one fall back to the other on the client side.
lynda.com or any course videos are useful(videos for all kind of levels). I find it more easy to understand seeing someone coding and explaining at the same time rather than reading 700 page book. Just set yourself a some goal and start coding and stackoverflow+google are your friends. 
I've no technical advice other than giving a +1 to DomDocument and Fabien Potencier's tool, but: Depending on the content you want, it might be more beneficial to find RSS feeds or similar to grab content from the sites you're after. It's generally much better on server bandwidth, and the RSS feeds you get are generally well-formed XML, so parse errors are few and far between.
I've been a professional software developer for 20 years, I've probably spent more time working in the "real world" than most people here. There's a right way to do things, and a wrong way to do things. If you're scraping sites, you're doing it the wrong way. When you do this you're essentially creating a system that can break at any moment, which you have to babysit for the rest of the time the script operates for. If it's a one time thing you'll get away with it. If it's something that has to happen more often, you're making a mistake that will eventually come back to bite you in the ass.
I know. But sometimes it's necessary, until you can scale and justify to the other party that it's worth their time to help you make the solution more robust. and allocate you some of their coders' time.
In my experience, it's almost never necessary unless you create a system in which it becomes necessary. Novices tend to do this a lot because they're not aware of alternatives at the time they write the code. I'd be happy to try to suggest alternatives, but the original question was vague and doesn't offer anything in the way of details.
"Check for features available rather than user-agent. One day say, Siri may be a user-agent and your code will be outdated..." Heard this on some SalesForce talk video that I saw on Youtube.
If you're writing a fashion aggregation site bringing in products from loads of fashion sites and displaying them in one place, scraping is how you're doing that. When you're big enough that you can send significant traffic to the sites your scraping from, then they'll listen to you.
I somewhat get the downvote as it isn't a PHP specific answer, but you did state that it wasn't, so I upvoted. On the topic that you presented though, I had tried using some modules that I found with nodejs but they weren't cutting it for me. I will check out pjscrape though. Thanks for that tidbit of info.
OK, you need all your php files to be inside the document root for them to work (or you can set up an alias)
I was a netbeans user for a couple of years before I switched over last fall. phpStorm is all the good of netbeans, but more polished, and just overall faster. I don't even use a lot of features because old habits die hard (for instance, I don't bother with any of the git integration, because I've got all the command-line tricks down to a reflex). But the basic stuff, with very few exceptions, is just better. My gripes about phpStorm come down to little things, usually where it tries to do too much. Ridiculous complaints, really. Like, I use Doctrine ORM a lot, and so phpStorm mistakes DQL queries for SQL, and makes little squiggly lines because it thinks my SQL syntax is bad. I could complain about it, but c'mon ... the IDE recognizes SQL embedded in PHP and validates it! Seriously, test drive it for 30 days, and I bet you'll pony up the money within a week or two. That was my experience coming from netbeans. About a week, and I was sold. I bought pycharm too, sight unseen. The only caution I'd give you is that if you do any python, ruby, or java, you might consider just buying the IntelliJ IDEA product, which has plugins that basically make it phpStorm+pyCharm+rubyMine+JavaIDE. The php/python/ruby products are really just subsets of the java-targeted functionality, which only costs about twice as much.
+1 for not rolling your own encryption. That just leads to mistakes and bad things when/if your server is broken into. When it comes to crypto, don't ever DIY unless it is pure experimentation.
-cut code- Edit: @Nicoon: right, i wasnt thinking straight :)
Thanks eyveer. Maybe I should add.... These are two separate sites (I know! I wouldn't do it that way!). The desktop site is running on Joomla and this is where that PHP sits in index.php. The mobile site is on an entirely different domain and runs on Wordpress.
Except you still wouldn't reach the desktop version with that code since the top snippet would redirect it straight back to mobilesite.co.uk again. 
Aye, pretty sure I did. It was a shitty comment based on my own failure to grasp something I clearly should have. But rather than go back and delete the comments I made like some kind of coward, I'll just take the downvotes and apologize. And you're being ironic with the smug tone, I hope. ;)
Quick and easy... put a get string on the link to the "real site" ?full=1 then in your if... if($_GET[full] == 1) { // show real site } // could just write if($_GET[full]) but left it this way for n00b simplicity Just sayin, add an extra conditional statement to bypass the redirect. huzzah
Kicking up a fuss about PSR-0 (like in the article Phil posted this in response to) is pretty ridiculous. The success of Composer proves beyond any real doubt that it works, and works well. The [PSR-3 spec](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md) is a whole other kettle of fish however. Enforcing the use of one particular library's interface through a spec or standards document seems like a *really* poor decision to me. They should have just made a high quality library and let it stand on its own merits.
I'm assuming RWD is Responsive Web Design. It's on my timeline to replace both sites with a new Joomla 3/Gantry Framework site that adapts accordingly.
I stole some code off the web. But it doesn't seem to work. /* if nomobile is set to 1 goto desktop website no matter what */ if(isset($_GET["nomobile"])){ $_SESSION["nom"] = "1"; } /* else check for mobile device goto the mobile site */ $useragent=$_SERVER['HTTP_USER_AGENT']; if(preg_match('/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i',$useragent)||preg_match('/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i',substr($useragent,0,4))) if(isset($_GET["mobile"])){ unset($_SESSION["nom"]); header('Location: http://mobilesite.co.uk');
This would only work for the first page visited after clicking the "desktop site" link. You'd want to set a session or cookie to remember the choice for future link, otherwise you'd end up in a position where you'd have to append the query-string var to all internal links.
^ This would work better. Then you can have a button to go back to mobile, which will kill the session. Which would only appear using the if ($_SESSION['full'])
Right, it just means you can type hint on Loggerinterface instead of having to specifically only support Monolog. Monolog is good, but there are others.
I guess my response was too focused. I stand corrected. I meant to say, don't use htaccess for anything if at all possible. There is nothing you can do with an htaccess file that you can't do in the httpd.conf file. Httpd config directives should be under the authority of the server admin. htaccess introduces a significant performance hit into the web server processing of page requests, simply by virtue of being enabled (they don't even have to be in use). The server will waste time parsing tree structures for their presence in every request anyway. They are really an artifact of an age we no longer live in, and outside of special use cases, or if you are operating a shared hosting platform where you trust your users with configuring the server (yikes). My opinion is biased, coming fr
...from building mostly vertical market web apps with 1000+ virtual client sub domains hosted on apache2 servers with a shared core code base. Removing htacess was like free money at scale. I can think of few cases where I'd ever recommend their use. If you have reasons for their use in today's world, I'd love to know. Sincerely. 
I highly recommend you check out a newer book created by some well known PHP community leaders near the tail end of your reading journey. While it's not full of tutorials, it really does delve into best practices across all topics. Couple this bad boy with PHP: The Right Way (http://www.phptherightway.com). Both should be read after you've familiarized yourself. PHP Master: Write Cutting Edge Code Authors: Davey Shafik, Lorna Mitchell, Matthew Turland http://www.amazon.com/PHP-Master-Write-Cutting-Edge/dp/0987090879/ 
Sure, but you don't need PSR-3 for that. It becomes possible because of the LoggerInterface in the psr/log package, not because it's specified in a document somewhere.
&gt; I don't think anybody is forcing you to use it. Who is 'enforcing' this? *This* is exactly where the short-sightedness is occurring, not in the actual PSR spec itself. I posted this before in regards to PSR2. Of course no one is forcing you to use it. But people are being *encouraged* to use it. The more people use it, the more that people who aren't using it get sidelined as "bad coders".
You shouldn't use PHP for scraping content. [PHP is meant to die](http://software-gunslinger.tumblr.com/post/47131406821/php-is-meant-to-die). Another language like Java would be better for that task.
&gt; I'm starting to think the people who write those "PHP FIG sucks" posts, also write the "PHP sucks" posts... No, I think those people are the people responsible for giving PHP that reputation in the first place.
Should people be discouraged from advocating stuff? That seems like a horrible idea to me. Let them advocate all they want; either ignore them, or advocate something better.
I don't understand the confusion with composer and PSR-0, it clearly supports PSR-0 as one of several autoloading schemes, each defined by the respective package. Not an issue as far as I'm concerned. I'll always have reservations about the PSR specs, if only because they don't seem to put as much attention as necessary on use cases that aren't common within the framework environment, but they do provide a great reference point for one's own code. If you can do something according to a PSR, by all means feel free to do so, but don't be afraid to break the conventions when they don't meet your needs.
It's a special application. Not all applications serve webpages ;) The important thing to note is that this library is very fast and accurate.
PSR-0 is healthy, but I would like to see one thing accounted for. There are many times where you need a private helper "struct" of sorts only for use by the main class in that file, but any sniffs will catch it and say it needs to be in its own file. I've seen horrible abuses of associative arrays just to avoid creating a new file with 2 public properties or something. I say if you have a class that needs a private-only (meaning can't return it, accept it as parameter, or otherwise make it visible via properties) helper class, add it at the bottom named ClassName__PrivateHelperClassName. Meh, I guess my beef is more with PSR-1's "This means each class is in a file by itself" Edit: typo
&gt;It's a special application. Explain. &gt;accurate. And in need of constant updates, and places an arbitrary classification on a disappearing distinction. 
I preferred phpQuery to simplehtmldom. It was lighter weight and as I recall, and easier to deal with API.
Exactly, PSR-3 is an "Interface Standard", PSR-3 IS psr/log. We're building out other interface standards, like Cache and HTTP Message, which will hopefully lead to HTTP Client standards. This reduces poor souls like Will Durand and his [Geocoder](http://geocoder-php.org/) from having to build different adapters for Buzz, Guzzle, Requests, etc, etc. The interface allows for type hinting, the textual standard says whats going on and gives it a number in our standard system. They're the same thing :)
SPAM.
Tried that already because that would be logical, but same story. Displaying the script instead of rendering.
Unfortunately, XAMPP doesn't have ANY preferences of it's own, so I can't change it's port, which is all I can find for this particular issue. And I'm running XAMPP on a Mac, not Windows. 
I'm confused, I did change index.html to .php.
You can totally break the PSR-1 rule and use classmap to 'Foo\BarPrivateHelper' to 'Foo\Baz.php' if you like. Lots of foiks are PSR-1ish or PSR-2ish and thats cool. I've seen people put all of their exceptions in one file for example, then classmap the classes to that file. Breaks PSR-1, but not in a way that anyone is going to actually care about.
I don't even want to go that far. I say if you're triggering the autoloader, it deserves its own file, otherwise you make external developers/debuggers life harder.
http://www.php.net/manual/en/getting-started.php ^ The "A simple tutorial" section covers everything you need. You should also read the "What is PHP?" section, because it sounds like you might be confused by the whole server-side/client-side distinction. 
I understand his response, and I think PSR is good for the community but the vibe I've gotten from PSR isn't "We are a group that uses pink envelopes and if you don't want to it's fine" it's been "We are a group that uses pink envelopes and if you don't use pink envelopes then you're doing it wrong. Sure, you can use blue envelopes but no one will bother opening your letters because all the cool kids are using pink." Which is kind of what happens when you introduce a standard into a community where "standards" is almost a dirty word after so many years of cruft and DIY.
Strange. The info.php script is working fine, so I can't see why the other one won't. Try making another simple script and see if that runs. Make sure you run it form localhost/filename.php and not from file:// or just by doubleclicking it.
This isn't PHP, you want JS.
With '?desktop=1' on the link on the mobile site that requests the full site?
I completely agree with your statement. Also kudos for using the envelope metaphor. I think because a lot of the big kids (Symfony, Zend...) are switching to PSR, everyone sooner or later will somehow have to switch to PSR. However, personally, I don't think it's a bad thing. I'm all for standards and if everyone would write their code the same way, it'd be a lot easier to figure smth out that was written by a third party developer.
On the link back to the "full" site. 
Will give that a go and report back. Thanks.
Agreed
Is that really the vibe you get from the group, or just what other people are saying? In the end, where are you really getting this vibe from? 
Works great, I take it that cookie is valid for a month? Other than clearing cookies is there any way a phone user can go back to the mobile version? Maybe using '?desktop=0' Thanks.
It's not coming from the group. As I (kind of) acknowledge in the last sentence, it's just what happens when you try to introduce order onto chaos. Some are going to say that order is the only the right way, and others are going to eschew it. It's a divisive subject and it seems that a lot of the PSR followers say that it's "follow the standard or I don't want to look at your code" I mean, the most obvious example is the downvotes on anyone that even doesn't necessarily disagree with PSR but voices an opinion other than "PSR is great we should all be using PSR"
I feel like this makes your dic a partial factory, not that there's anything wrong with this. I just want to make sure that I'm correct in what you're saying.
Even with the disclaimer, I expected it to be Lara
The FIG and PSR-0 cannot be blamed because a bunch of zealots decided to run around telling everyone they were morons for not using PSR-0. If they're doing that, its on their own accord. The 10 Commandments were great ideas, but you can't go blaming little baby Jesus for the crusades.
Honestly, what did the FIG expect? It represents all the major frameworks, of course people are going to treat it as a standard. No, that does not mean it's an actual standard, but not supporting PSR-0 excludes you from a ton of good stuff. When all the major frameworks throw their weight behind whatever at all it becomes a defacto standard for the majority of experienced developers.
That absolutely did it. Duh, of course. Thank you so much for bearing with me.
I only did one project with ZF1 a while ago, so I'm outside of my memory of the project to say anything specific that might help. It is a little daunting to beginners, but your actual application's structure and logic will be very similar to other MVC frameworks you've already used. Stick with it, and you'll find it easier to work with as you continue. ZF CLI tool is your BFF, too, for creating controllers and models and the like.
you're right, thank you. I guess I still don't fully understand, but running my website via **file://website/index.php does not work** even with the folder in the root folder, however, does work when you run it **localhost/website/index.php**. Thank you.
And I explained in another comment that's exactly what I'm saying. I didn't say it's the FIG's fault, not in the least. They just came up with a standard they thought was a good idea (And I agree with that) but there is the side effect that people are having a snotty attitude about it and to ignore it as Michael did as if people weren't treating it like a standard is ignoring the obvious.
I have been following a pretty decent tutorial on youtube but have come across an issue: &lt;?php // create a config array $config['db'] = array( 'host' =&gt; 'localhost', 'username' =&gt; 'root', 'password' =&gt; '', 'dbname' =&gt; 'WooHooShop' ); // establish connection with the database $db = new PDO('mysql:host=' . $config['db']['host'] . ';dbname=' . $config['db']['dbname'], $config['db']['username'], $config['db']['password']); // run query / create PDO $query = $db-&gt;query("SELECT `product`.prodTitle` FROM `product`"); print_r($query); ?&gt; from print_r($query); I was expecting to see something similar to: PDOStatement Object ( [queryString] =&gt; SELECT `product`.`prodTitle` FROM `product` ) yet it seems to return nothing, any ideas? the login details are all correct.
OK thanks, not looked into the CLI tool yet, although that is something other frameworks also have.
I deliberately left out micro frameworks I've used as I know they can not be compared. As for enterprise scalability, why is ZF 2 so much better for this than say Symfony which I have built scalable "enterprise" applications in before without issue?
Another bad practice is using the same strings everywhere. An uncaught typo might take a long while to debug. Also an annoying task if you ever need to change the string, grepping strings &lt; finding identifier usages. You should define class constants instead, so that typos can be caught by PHP during development.
I initially attempted your -&gt;fetch() resolution, however it told me: Fatal error: Call to a member function fetch() on a non-object in Google is throwing me a bunch of other people experiencing the same thing, yet none similar to mine so far. Your full solution provided me with: Fatal error: Call to undefined method PDO::execute()
What makes ZF2 so much worse? Symfony and ZF2 are comparable in what they do, but ZF2 takes the architecture a bit further. It's simply a matter of how much structure and flexibility you want to have in the codebase. Edit: Nevermind. After having read through the post description and your comment history, I've decided not to bother. I'm not going to sit here trying to convince someone with preconceived notions to do something he doesn't want to do. I've got better things to do with my time. 
Sure; it's mostly preference. For me it really boils down to Sf having been around that little bit longer gives it an advantage. They are very similar, but both have a few preferences - it seems like ZF is the one to go for if you don't like using an ORM for example. Everything feels much closer to the metal, which can be a good thing. Templates use raw PHP which gives you a little more flexibility, and you tend to be more explicit in your database code (building SQL rather than abstracting away from it). Symfony feels more integrated (I expect you could swap out things like AbstractControllerAction in ZF much easier than in Symfony, however I prefer the integrated approach). For me it's easier to try out Symfony as I currently use Doctrine and Twig in my ZF2 app. I'm currently at the stage in my app where there's not a huge amount of functionality to add, but there is a lot I could fix (and I'm behind on testing). It's a good place to re-evaluate and I think I can transfer enough to not treat it as if I'm throwing everything out :) Feature-wise I think it's testing suite looks better and the development tools are a little more advanced (console and the toolbar). Symfony has a noticeably larger community (for support) and more in-depth documentation. I really don't mind spending a few hours reading through framework code, but when you're starting up documentation is key. Documentation around services in particular caused me a bit of pain - code that should have been written as services was implemented in an abstract controller class which is used everywhere. I only really got it when I was looking through Symfony's docs. At the end of the day, if you can grok them either framework's good and they are both similar (and [apparently interoperable](https://speakerdeck.com/skoop/zend-framework-2-and-symfony2-the-perfect-team-zendcon)). I'd happily work on a well structured ZF project and I'm sure without experience I could create a mess in Symfony too :)
I have so far resolved the issue, I had to altered my SQL statment to: $query = $db-&gt;query("SELECT product.prodtitle FROM product"); thank you for helping me though :) Do you still feel that I should attempt to prepare and execute first though?
&gt; Just like we shouldn't have knee-jerk reactions towards Singleton patterns, because they're out of fashion. But this *does* happen, which is exactly my point.
I understand what you're saying, and I should say that I don't think common interface libraries are a bad idea at all. But PSR-3 is such a large departure from the existing PSRs. That is, PSRs 0 through 2 were all about source code style and directory structures, and had no real implications for software design. Whereas PSR-3 is all about software design. All the benefits of having a common logger interface would still exist if "PSR-3" was just the README.md in the psr/log repo. Having it in the same basket as a bunch of code style standards seems... very odd.
preparing the query allows you to add dynamic input to the query and protects it from sql injections, for example if you wanted to do $id = $_GET['id']; $query = $db-&gt;query("SELECT product.prodtitle FROM product WHERE id = ".$id); you could instead do $id = $_GET['id']; $db-&gt;prepare("SELECT product.prodtitle FROM product WHERE id = ?"); $db-&gt;execute(array(id)); the first example is vulnerable to sql injections, it may seem like more work at first but when you start making bigger queries with lots of user input it ends up being less code when you prepare it this way, you can pass an array inside the execute function with all the variables you are inserting in the prepared query, these are marked by the ? symbol, i suck at explaining but im sure there's a tutorial out there that could explain it better
That's not a good analogy at all. A better one would be the standard definition of how any given javascript object should behave, such as 'Date'.
post your whole script somewhere and ill take a look for you
Never heard of NuoDB before. Seems cool. How comparable is it in actual use (ie, data types and indexing columns) to MySQL? Their website kind of sucks for that info, they just want to rail on the fact that its SQL that scales.
what part do you need help with?
sorry, i got it to work. i edited my original post. Thanks though!
All I could see was Internet Explorer
It only seems odd if you think coding styles are the only thing the FIG ever plans to do. PSR-2 gives a coding style to the interfaces being put out there, and the interfaces are the main crux of what the FIG will be doing going forwards. It's a bit different, but it's all interoperability so yay for that.
The whole point of the post is because of my pre-conceptions.
That does scare me.
A great write up; I learnt a lot. Thanks!
What a load of crap.
And second to that note, if you run long tasks from CLI/cron (which you should) you don't need to set this limit anyway - as PHP5 hardcodes this timeout to "unlimited" - regardless of your php.ini setting for web page requests. 
The psr spec has no dependency on composer. The composer package was added as a convenience. You're free to ship it yourself too, or use some other means to distribute it. The document is the canonical standard. As long as you conform to the interface, you are compliant. PSR-3 has no dependency on composer. Source: I'm one of the PSR members, and would fight against any composer dependency ;)
Give me a break. This just looks like someone complaining about bad programming but giving the blog post a contentious title to get clicks. From the article, towards the end: &gt;This is not the fault of php though, it is just bad programming. So, why do people hate PHP again? I agree, this is terrible programming. But you could create the same example in almost any language and the language itself wouldn't stop you. So is it right to hate every programming language for the same reason?
Whether you include `Psr\Log\LoggerInterface` through Composer or some other means is irrelevant, you're still using the psr/log library, and there's no way around it. It may seem nit-picky, but to put it in perspective, there's not a single other spec in the history of software development (at least none I've heard of) that dictates the use of one particular library in order to be compliant.
No, like I said.. as long as your interface is complaint with what's in the document.. meaning.. (someObj implements Psr\Log\LoggerInterface) === true And you implement all the methods, then you are compliant. We could have in detail tried to describe all the exact PHP behavior in the document related to the interface, but it was much simpler and clearer to put an actual interface in the specification, with the same effect. It's self-documenting. It's not using the code from the PSR package that makes you compliant, it's implementing the interface. Many standards documents ship with sample or reference implementations. Even some rfcs have C code embedded. So if you want to fully rewrite the interface yourself, and as long as the interface has the same signature, you are compliant. Much like a browsers' Date object. Not sure if I can be more clear than this. If for some reason you reached the conclusion that you must use the code from the composer package, well I guess that would mean we failed in some way, because that was certainly not the intent ;). But I can't really see how you could reach such a conclusion. The document seems clear enough in that regard.
Wow, that's so insightful! :/ Maybe could could actually give a legitimate reason instead?
If you want a scale-out/elastic SQL database that's compatible with MySQL then give Clustrix a whirl, it's wire compatible with MySQL so you don't need a special driver: http://www.clustrix.com/what-is-clustrix/
Yup, calling PHP out here is pure link bait. 
I suppose you could do that, good point. To be fair though, re-reading the spec, it doesn't mention anything about this possibility. All it says is: &gt; The interfaces and classes described as well as relevant exception classes and a test suite to verify your implementation is provided as part of the [psr/log](https://packagist.org/packages/psr/log) package. Which to my mind indicates that you're just supposed to use that package rather than rolling your own, and in practice I really doubt anyone would do otherwise. Does that help explain my previous conclusion at all?
Yea I understand the conclusion. The thought process that preceded this was simply: What is the best way to document a PHP interface, to which the answer was: write the interface in PHP. But yea, it's very important to me that we we don't require composer anywhere :) With a little luck the PSR's still exist when the next best package manager comes along. Aside from that, I would recommend the composer package. It certainly does make thing easier to tie into other packages that are PSR-3 compliant, as either a consumer or implementation :). Cheers!
Oh good lord you weren't kidding, 7.9MB of BMP images. I'm in a bad mood tonight, but... Internet Explorer + PHP on Windows + BMP images in a web page makes me **seriously** worry about the quality of the content. It could just be that the author is guru level in everything else, but the initial impression still makes me worry.
The reason I saw it was because the images loaded from the bottom to the top. I always jump up from my chair when I see that happening, and quickly investigate if it is really a BMP.
As someone that's also a web dev and a home brewer, I'm totally stealing this! (if you don't mind, of course...)
Write your logger class any dang way you want. You can *completely ignore* PSR-3. Then, later, if you *want* to, write an adapter class as part of your library that provides a PSR-3 interface to your too-awesome-for-standards code. It's that simple.
Well obviously one of the main reasons is distributing .htaccess with the CMS like wordpress, etc. Users that a) don't have access to apache root config or b) have no idea how to use it.
Wait, I'm not understanding what it is you're suggesting. Composer abstracts away the data source - that's one of its main points. Why would a user need to know Git or Mercurial or SVN to use composer? &gt; storing them on packagist Why would they want to have code duplication? The code is right there in the source - packagist should have nothing to do with handling code, it should just be a delivery mechanism.
It's been a year since the [native drivers](http://www.nuodb.com/community/showthread.php?44-basic-PHP-drivers-for-NuoDB) came out. What's the big fuss about PDO?
I was not aware that you needed to know git for composer.. Why do you need svn or mercurial? What are you trying to do with composer? Are you trying to add a package or use them in your projects? The goal of composer is to not download stuff and extract them - its supposed to do all that with composer install If it's not doing that, you're doing something wrong. 
It's almost always the same thing. * copy files * copy db, import them in your local * change db config in files. Normally it has the word "conf". * point webroot to the correct folder * start 
Composer uses git in the install process to fetch the packages. You will need git available on your system if you intend to use the default Packagist package lists. You will need svn and hg if you want to use custom repos.
Oh no, a windows user having to use an installer for a software package. Surely, they've never done that before! Call the tech support! http://git-scm.com/download/windows -&gt; run -&gt; click OKs -&gt; done.
I know you need git, I didn't know you needed to "know" git. As far as I know, I have never typed "git clone" something when I'm using composer. 
I think OP means that because Composer uses git to clone/export packages by default, you need git available on your system in order to use Composer. The suggestion being made is that Composer should instead download the sources from GitHub using their own "download as tarball/zip" functionality and unpackage them locally. This has a few flaws, one being that GitHub considers those services "legacy" and no longer documents that API. Indications are that it may be deprecated/removed at any time. The other issue being that Composer works with other source control systems as well, not just git/GitHub, so it makes no sense to lock in to GitHub's tarball delivery mechanism.
Again, that's not what's being said. The phrasing is odd, but the gist is that when composer is run it complains that it cannot find git. Nobody has said you actually have to know git in this thread, just that you must have git available.
I think this is more an issue of Composer's documentation than anything else. The docs don't really make the prerequisites clear, and the quick start on both Composer and Packagist sites mentions nothing about Windows. The Windows installer is buried in another section in the docs, and could be made to bundle git if necessary. Composer's net install method could even check the environment for git and relay a clear warning about it not being found, possibly with information on how to get things running. Installing git on Windows is not a complicated matter. It's just not made clear to new users that composer needs it or why. A few lines in the docs and in the CLI output would remedy a lot of the potential confusion.
&gt; I was going through some old code on a website I work on and there was an interesting bug fix i found. It sounds the problem here is that your company hires shitty developers, and your bad developer team doesn't do code reviews, meaning your whole codebase is probably really bad. I hate inheriting bad code worked on by bad developers. The problem here is you and your team.
So, wait, he's complaining about a software prerequisite? wtf. 
Pretty much, yes.
Composer already supports that. For tagged releases from GitHub, composer will fetch a zip. You don't need to install Git in that case. Just make sure that you are depending on stable versions and [tag your releases](https://igor.io/2013/01/07/composer-versioning.html). In fact, you can also use the `--prefer-dist` flag to force installing from zip, even for untagged (unstable) versions. Only works for GitHub, BitBucket and custom repos though. And yes, this is covered by the docs.
Remember that just because something is using Git does not mean its on GitHub, and trying to programmatically click a link is not a great idea for a delivery mechanism. $ ./composer.phar install --help Usage: install [--prefer-source] [--prefer-dist] [--dry-run] [--dev] [--no-custom-installers] [--no-scripts] [--no-progress] [-v|--verbose] [-o|--optimize-autoloader] Options: --prefer-source Forces installation from package sources when possible, including VCS information. --prefer-dist Forces installation from package dist even for dev versions. You have those two options available and im sure they work fine on Windows, not that I'd ever go anywhere near it.
There is also https://github.com/reactphp/curry, but this seems more like promises except it's synchronous (obviously) and missing the ability to bail on certain outcomes. Regardless, I don't believe I have a use for either in my projects.
There are a shitload of tutorials on NetTuts http://net.tutsplus.com/tag/laravel/
I cant think of a use for this, but it is an interesting curiosity.
He's basically recreating a [command pattern](http://en.wikipedia.org/wiki/Command_pattern) using anonymous functions. You'd see this a lot in prototypical languages like Javascript. Personally I think this is better done with objects because it's easier to trace and debug when something breaks.
I assume you are using this driver: http://www.microsoft.com/en-us/download/details.aspx?id=20098 check your phpinfo and make sure the sqlsrv module is being loaded properly. since it cannot find the sqlsrv_connect function, my guess is that it is not loaded.
No, he's doing exactly what he described: he's performing [function composition](http://en.wikipedia.org/wiki/Function_composition), a concept that appears in [Lambda Calculus](http://en.wikipedia.org/wiki/Lambda_calculus) and used extensively in [functional programming](http://en.wikipedia.org/wiki/Functional_Programming), all of these concepts predate the genesis of Object Oriented programming.
Zend Framework is not a framework like the frameworks you are experienced with. It has always been more of a collection of components, which in ZF1 were just random files and folders you'd copy around. Now it's all Composer, so really you can just view Zend Framework as a single vendor who has made a fuckload of PSR-0 components for you to use. It's definitely not a CodeIgniter/CakePHP/FuelPHP/Laravel/Kohana type of "wrap everything up for you, child-proof the corners and lay your clothes for the day out on your bed" type of framework. Having both is definitely awesome.
Yes they work great! thanks! 
I'm not arguing which came first. I only gave one example of where you might see such a thing. I'm sure you could come up with more complicated use cases for what he's doing but in the end it's easier to build, read, and debug using other methods.
Given the triviality of the [actual code](https://github.com/igorw/compose/blob/master/src/compose.php) "library" might not be the right term here :)
he's one of the people involved in react too btw.
I personally don't see the point of linking to a project on GitHub which doesn't have a README. I don't want to trawl through loads of files to see if I care. :-/
Note that your PHP is VC9 and your sqlsrv dll is VC6. It's likely that the module is failing to load because of this, try using the VC9 dll that should be included in the sqlsrv download. edit: What version of the sqlsrv download did you grab? You should try out sqlsrv30.exe if you did the old 2.0 download. Version 3 doesn't distinguish between VC6 and 9 because I think it's all compiled on 9.
Hahaha, you make it sound like someone should make a horror movie about that.
OK, thanks. I've been playing around with it some more today and it isn't as bad as I first thought. I do think it may be overkill for the project it is being used for though.
cool, but what if i send compose or apply an argument list with a non-callable? i'd add some runtime handling for that and some negative tests.
It's not a criticism and you definitely don't need to apologize, it just seemed like you were trying very hard to deny the fact that FIG is very influential, whether that's bad or good is not something I'm commenting on.
Well I installed WAMP server. I moved all the files to the root directory, including .sql database. I try to access the database data through phpMyAdmin, it all I get its a blank page. Plus, I execute index.php and I am redirected to a customized error page (error.php)
Well I tried to be clear by using "defactor standard" which means something that is in effect a standard without actually being it. I think a big issue here is how polarising the debate is. People claim "you're forcing this one me!" for a reason, not because it's actually being forced on them but because if they don't use it they lose out on a bunch of good code. It seems you make the statement "Though shit, not our fault." When in fact the amount of clout behind the FIG probably means it is your fault. Also fault is a shitty word here as it is negative but I don't really believe you can blame the FIG for the community rallying around it. I do however think you need to be more forthcoming on that point, pretending that the community isn't rallying behind you was my original point and something that isn't helping your popularity. 
UNIX pipeline FTW :D Nice &amp; simple, good job!
i dont know what you did there, if i do the following at the comment prompt of my server: php -a Interactive mode enabled &lt;? $var1 = "10000000000000000000000002"; $var2 = "10000000000000000000000003"; var_dump($var1 == $var2); ?&gt; (here i press CTRL+D) i get: bool(true) which should be the normal php behaviour, only with === you get false. 
I like the pipeline composition, nice and simple. The compose() technique is similar to how the core of our authentication is implemented: https://github.com/jbroadway/elefant/blob/master/lib/Functions.php#L103-L144 Auth really boils down to `method(verifier(credentials))` so all you need for pluggable authentication is to provide your own verifier function (are the credentials okay), and new protocols can be supported by providing new communication method functions. The default verifier is just an example, we actually talk to the database and don't story any username/password in a config (or unencrypted!), but it's there as a reference. We've even done HMAC over it: https://github.com/jbroadway/elefant/blob/master/apps/user/lib/Auth/HMAC.php
Looking at the source, it looks like you can eliminate `compose\apply()` by just calling `call_user_func_array()` directly on lines 24 and 33.
I decided to use lispy terminology, hence the `apply`.
When did he ever ask for someone to pay him?
eval(gzuncompress(base64_decode(implode("",$s_olaya))));
Thanks for the quick answer! Mind if I ask how you figured that out? Edit, nevermind, it makes sense. The use of gzuncompress() is clever lol.
Whine whine whine, nag nag nag... Who has time for this shit? People need to not take things so personally... Simmer the fuck down. Got a problem? Fork it and be on your way... Contribute something constructive or stfu.
It only took an hour to write and I was half drunk, so it wasn't much of a hardship. It's extremely damaging to let shit like that article float around the internet without a response, otherwise I'd be out using my British accent for evil in NY bars, and definitely not wasting time on petty shit like this.
I feel your pain. That wasn't so much directed at you, but the people who are whining. ;)
It is even cheaper during Christmas sales. 
I'm not understanding what this would be used for, exactly. Do you have some practical examples?
The class is a good thing for wrap redis or memcached. You can organize keys in the nest. It's like ORM: $nest['user'][$id]['username']-&gt;set($name). The statement will be transformed into: $redis-&gt;set('user:67:username', 'John')
What benefit does this provide past simply doing the following? $redis-&gt;set("user:$id:username", "John"); // converted to $redis-&gt;set("user:67:username", "John");
http://phpmentoring.org/
Keep in mind that it's still in Beta. I believe the full release is slated for May so there might be a possibility that some things will change. I wouldn't let that stop you because it is a very nice framework to use. I've built a few smaller apps with it trying to learn it and it's been a pleasure. 
A 10GB XML file would be no-where near 10GB in CSV/TSV. That is a massive amount of data to be processing with any frequency. Firstly, if the size of the feed isn't negotiable (able to be split into multiple calls) then I would download the data in one go and not process it in real time. If your script were to die then you have to download again. Secondly, provided it's a valid and consistent CSV fgetcsv() works really well. Simply process line-by-line discarding the input as you go (don't try to load it into memory). You can keep an eye on total memory being used with memory_get_usage().
These arguments (bcrypt vs blah) only matter in the case that the attacker has your database and is trying to decrypt passwords. So you are already pretty screwed by this time, for sure...
I'll concede it does depend on the exact situation; PHP could be a viable option, but in my experience people asking this question are trying to scrape a third party during a live page load which is obviously bad. And Java was obviously an *example*.
I agree - hearing the term "screen scrape" sounds like nails on a blackboard to me.
mysql_* deprecation: Yep has been for a while =&gt; http://news.php.net/php.internals/53799
Well, If that would have been part of your API, I would have kinda understood, but this internal to your code and the alias is superfluous. IMHO, having multiple namespaces in the same file is only acceptable when you generating some kind of bootstrap and doing some aliasing like this is only acceptable when building a "standard" library with interfaces or when building a class that works on native types like arrays.
I don't know of any PHP libraries that do this (I know some exist, I just don't know about them). However, if you're willing to do a little bit of Ruby development, [Capistrano](https://github.com/capistrano/capistrano) is an excellent tool for deployment. It typically heavily integrates with Ruby on Rails, but it can be easily used with PHP (I've done it before). Try Googling [Capistrano and PHP](https://www.google.com/search?q=Capistrano+and+PHP). Just my two cents. I'm really interested to see what other people might suggest.
I think the safest way is by SSH
I built a PHP-based updater at one point for my CMS - it grabs a .zip file, and extracts the contents to the document root of their site. Worked like a champ! Assuming you have one base CMS or framework you use, I would reccomend building out something similar. I still use it today, and have modified it a few times since initial release. I store the cms version in the database, and have a central subdomain just for grabbing releases. So you could query: http(s)://updates.yourdomain.com/ and send back a JSON file with update versions. Use PHP to run through that file and compare versions - if there is a newer version available, grab it from http(s)://updates.yourdomain.com/download/v2.13.zip Hope I at least provided a good starting point. I had posted the source code to my website, but I broke my page at one point in time and it definitely needs to be cleaned up a bit, so I'll refrain from linking over to it.
Release patches to where? If you're just trying to patch several servers, then the obvious choice would be git. Sure, you can layer deployment chains on top of it (like Capistrano), but you know, sometimes they're not needed and you can just 'git pull' on the server Even if you dont want to do this, you should be using some form of source versioning. Git will let you generate patches wich you can email or whatever too, since a new version of a file in git is nothing more than a patch anyway
This. Version control is a must. Here's a good article using bitbucket.org and a simple script for deployments: [link](http://brandonsummers.name/blog/2012/02/10/using-bitbucket-for-automated-deployments/) EDIT: To explain a bit more, any usage of "[service hooks](https://confluence.atlassian.com/display/BITBUCKET/Managing+bitbucket+Services)" ([github has these, too](https://github.com/github/github-services)) will allow you to basically trigger an event when you push new code to your [branch](http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging). In your case, you'd like to accept the new code and "patch" the files at a server. The blog example I linked above has a script to do just that!
A computer scripting language used to build websites
This is called a 'ternary operator', and it's generally discouraged to nest them, because code quickly becomes unreadable (to others, or to yourself in a few months). PHP.net [warns](http://php.net/manual/en/language.operators.comparison.php) about nesting ternary operators, because it's right-to-left associative, which can be counterintuitive. &gt;It is recommended that you avoid "stacking" ternary expressions. PHP's behaviour when using more than one ternary operator within a single statement is non-obvious". See this chart for operator precedence, and you'll see `?:` is listed before `AND`: [Operator Precedence](http://php.net/manual/en/language.operators.precedence.php)
Looks like you and I had been typing up pretty much the same comment at the same time. :-)
True, I swapped them. **&amp;&amp;** and **AND** are not the same thing? Weird... Are you sure? "**&amp;&amp;**" &gt; "**?:**" &gt; "**AND**" ? Maybe I should try it out.
Would you kindly elaborate on "nest them"? I cant see any nesting in my code, as I understand it. 
No, you didn't. That was just a warning in general. Try this, to see how it can be confusing: $foo = 1; echo ( ($foo == 1) ? "one" : ($foo == 2) ? "two" : "three"); 
in php's interactive mode on our production servers works as you say :) I dont know why result is different @ ideone.com
... with a keyboard ...
Send a pull request to the upstream project.
Come on, son. http://en.wikipedia.org/wiki/PHP &gt;PHP is a server-side scripting language designed for web development but also used as a general-purpose programming language. PHP is now installed on more than 244 million websites and 2.1 million web servers.[2] Originally created by Rasmus Lerdorf in 1995, the reference implementation of PHP is now produced by The PHP Group.[3] While PHP originally stood for Personal Home Page, it now stands for PHP: Hypertext Preprocessor, a recursive acronym.[4] PHP code is interpreted by a web server with a PHP processor module which generates the resulting web page: PHP commands can be embedded directly into an HTML source document rather than calling an external file to process data. It has also evolved to include a command-line interface capability and can be used in standalone graphical applications.[5] PHP is free software released under the PHP License, which is incompatible with the GNU General Public License (GPL) due to restrictions on the usage of the term PHP.[6] PHP can be deployed on most web servers and also as a standalone shell on almost every operating system and platform, free of charge.[7]
We need more information on what you are working with. Is this just a PHP application that you are maintaining for work? Is this some kind of distributed application that you are selling to customers? If it's the former then you could just swap the updated code in and run migrations etc. If it's the latter then you should have created some kind of remote update capabilities that would allow you to push updates out to your clients.
&gt;Hey big should a class be? As big as it needs to be, *but no bigger*. A class should only have a single responsibility, that is, it's only supposed to concern itself with doing *one thing* and nothing more than that. &gt;I have a database class which performs all the operations for interacting with the database within my system. It sounds like you've made a god class, that is, a class which knows too much and does too much. You should refactor and break down your structure to individual responsibilities. For instance, you might create a class for handling database interactions, one class for managing the creation, retrieval and storage of users, one class for handling the creation, retrieval and storage of posts, etc. I would also suggest that you look into the SOLID principles, and various applicable design patterns such as data mappers. 
&gt; The 10 Commandments were great ideas Well... some of them.
Oh thanks man. I've been using telnet.
Most of them just say "Dont Be a Dick" which I'm all for, the first few are pretty odd though.
Thank you. I believe this is the most helpful response for me at the moment. I will have to have a look at where I can split the database methods and create two classes. Also thank you for pointing me in the direction of SOLID and data mappers!
GIT.
Wow, I've been using bitbucket for about 3 years now and I didn't know they offered that. Thanks for the links.
I think what you are thinking of is a library/framework, and there are many of them. Each of them does these "common operations" in their own way, and will have a certain way that you should be structuring your site. The way the database is accessed is probably one of the bigger differences from one to another. There is no "One Best Way". Have you looked at Laravel, or Codeigniter, or CakePHP, or anything like this? 
Laravel, CodeIgniter, and CakePHP are all bad. Unless of course you appreciate incessant use of static methods &amp; static state then you will like Laravel.
I love this this thing.
Meh. Well what would you recommend to someone as their first framework, taking into consideration things like learning curve and documentation?
Workded just fine! Thanks guys.
PHP guides range from "bad" to "very bad" if we're grading code quality. I will be very happy if someone can prove me wrong by providing a non-trivial high quality PHP tutorial.
PHP has a nice database interface called [PDO](http://www.php.net/manual/en/intro.pdo.php) for interacting with the database. It abstracts a lot of the specifics for databases, making it easy to support multiple db types so you can use pretty well identical code in different environments with different databases (mysql, sqlite, ms sql server etc). Simple change in your site config file to change it. I suspect the examples you're looking at don't use things like that so they leave out a level of complexity. It probably helps make the examples easier to understand by using the bare minimum, simplest ways to do things. PDO and other db interfaces help prevent sql injection by binding parameters and limiting commands to one query. This is great for security. Direct db access is dangerous because it's very easy to forget to sanitize data and leave yourself vulnerable.
Well golly gee, thanks for the stellar advice. I actually did search. Sorted by newness. And what did I see? "Laravel 4 is released!", "Laravel out of beta!", "Zend Framework 2. Why?". The only thing I saw that was even remotely relevant had 4 comments total, mostly bitching about Eloquent. Everything else was either unrelated or sensationalist writing, which is EXACTLY what I mentioned in my OP. I want honest opinions, not "OMG Laravel makes me cum buckets!" comments.
Whelp, I think it's time to admit that you suck at searching. http://www.reddit.com/r/PHP/search?q=laravel&amp;sort=comments&amp;restrict_sr=on http://www.reddit.com/r/PHP/comments/1bdln1/symfony2_vs_laravel/ http://www.reddit.com/r/PHP/comments/19s821/laravel_4_production_ready/ http://www.reddit.com/r/PHP/comments/z5hwu/what_do_you_guys_think_of_laravel_framework/ http://www.reddit.com/r/PHP/comments/iprrb/php_framework_laravel_what_do_you_guys_think_of_it/
I also did find a topic with good discussion, but it dates back 7 months. I know a lot has changed in Laravel development since then, so was looking for more up to date information.
Something like [PHP: The Right Way](http://www.phptherightway.com/)? It's aimed at someone with some previous coding experience, but is a solid PHP starter.
Or put pound in front of haproxy and let that handle SSL.
I'm tired of the discourteous nature of people on here. I've heard good things, but I would focus on security, ease of use, and load time. If you want every feature under the sun, laravel is probably not for you. It does seem pretty competent in security, despite my earlier impressions, which I was endlessly harassed about. Load time is probably comparable to code igniter which is damn lightweight and fairly intuitive. Ease of use, I'd love to hear about, but according to everyone else, there's 98 billion articles on this already available to be read and I would probably trust those articles even if they are slightly historical by now.
I honestly wish "Don't be a dick" was the only commandment, it's a pretty broad brush.
This is one of the things people complain about PHP, even though it isn't really PHP's fault. The barrier to entry for PHP development is really low, so people with very little knowledge of programming can begin writing bad code, not knowing how bad it is because they have no basis to go on. Following that, they think "I should share this knowledge and help others", which is a wonderful train of thought, except that knowledge is sub-par, if not incorrect, and it spreads "virally", for lack of a better word. A lot of people say "learn to write PHP before using a framework", which I can agree with, but I also think it's possible to learn PHP *from* using a framework (so long as the framework doesn't abstract you too far from the language). Use a framework, but study how the framework structures and processes things. Another thing I advise is not to learn PHP, but to learn programming in general, and apply those principles and techniques to PHP's syntax. If you only learn PHP, you're limiting yourself, but if you learn general programming, then a lot of things you encounter in PHP won't be a surprise or a roadblock that ruins your day, because you already have the base knowledge that allows what would otherwise be a roadblock to make sense (not that there aren't portions of PHP that definitely don't make sense). Keep in mind, this is just my opinion, and I'm basically an imbecile.
I'm mainly interested in: Can I test my code? If I use the built-in ORM, will it protect me? Does it have (what I consider) to be the basics, like user auth, form validation, and others I used CI for a LONG time and to me, Laravel feels similar for some reason. But it's hard to google it without finding things written by fanboys. I'm afraid of committing any time to learning it only to have it disappear in a year because it was the new fad. I've got a new personal project coming up and I'm trying to decide between Yii, Symfony 2, or Laravel for the development of it. Thanks for your input and sorry for going off topic there.
Totally agree
Checkout Prestashop
I would rather recommend Laravel instead of CodeIgniter
&gt; As for database operations, you are correct, views and stored procedures are more secure than direct table access. Would you mind explaining this point or giving references? AFAIK, there are many drawbacks from using views and stored procedures, and some concerns on security. * It's hard to put unit tests on stored procedure, so this code is more fragile. Once I had a stored procedure that entered an infinite loop on some rare cases (the bug appeared 8 months after entering production), the MySQL server went down because of this. * It's hard to check the state of the stored procedures. For PHP code, a simple `git status` will check if all the files are unchanged, and `git pull` will update them. How would you check that your stored procedures are up to date? What is not clearly visible is at risk. * Stored procedures don't protect against SQL injection. * Security-wise, the views are mostly useful to give partial read access. Yet, there is no need for this in many cases: MySQL can define fine-grained access to the tables and columns (never use the root account in your web application!). So views should be kept for cases where the raw data must be hidden and only aggregated data readable. Views and stored procedures are useful, but they are no magic tools, they have a cost and induce new risks. Now back to the initial question: &gt; Is there a lot of extra processing involved with calling a view instead? It all depends on the view. With MySQL, if the query (VQ) that creates the view is simple, then you can use the MERGE algorithm, and the query on the view will be merged with VQ. With a more complex view, its content will be put into a temporary table which will be queried on. So the extra processing can be huge.
I don't think it's going anywhere soon. I've been consistently hearing about it for 6+ months without looking for new platforms to develop in.
I think this is a legitimate question. And despite the snark, some of the links below were helpful to me. But I would also be interested in some short testimonials. Did you find Laravel pleasant and productive? Or is it just another framework? Is it worth the risk of betting on a young new framework in order to use Laravel for my next project? 
True enough. But that is also part of my concern. I see it pop up EVERYWHERE, even when I'm not looking. This is the same thing that happens when new gaming platforms are released, and etc... I guess aside from worrying about it disappearing, I'm worried about spending a month working with it only to find some glaring issue that was never discovered by anyone because they haven't developed a complex enough project on the platform.
CodeAcademy's isn't awful, I used it as a refresher about two weeks ago. Obviously not highly in depth though.
views are always less performant than direct queries tables - of course - but the overhead can be VERY little for very simple views, sadly simple views are pointless most of the time, and complex views can be very dangerous if they create temporary tables on disc etc, so thats why views are just rareley used, i personally never use them within production code just sometimes when administering i have views for queries i do regularly as to database queries, direct queries are very common cause they are simple, whether its PDO or Mysqli ... on enterprise projects especially where performance is rarely a problem (intranet solutions, CMS which have a seperate code for the frontend etc) we always use Doctrine , which might be a bit over the top for php beginners, check http://www.doctrine-project.org/ for more info, doctrine is not a framework but instead used by various frameworks (or can be used by them)
I felt this way about cakePhp. The command line tools were nice but the complexity only got in the way after a while. The best tool is one you can change for your needs. If you don't feel you know a platform well enough to modify the structure efficiently, that's going to be the biggest roadblock in development.
You don't use database views because database views are really really really slow. Views aren't supposed to be fast anyway, they are just meta tables which get their data from real tables. Views are basically stored SELECT queries within the database, and therefore, you query a query. It's slow by design, at least with mysql. Stored procedures are also a mixed bag. They can be helpful, but i refuse to implement application logic within the database and not within the actual PHP application. Databases can change. Also, when talking about large project in terms of load, i strongly disagree with using a framework. Any Framework. Frameworks are generalist software, they try to support as many evntualities and setups as possible, therefore, they often slow and really bloaty and on top of that, most people who use a framework don't know what it does under the hood, and this can be a killer for large websites. At his knowledge level, i would recommend not to do any large project at all. It may succeed, but he will spend many many hours fixing the stuff he did when he had little experience. Start small and extend on that. Write a small [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) app and post the code here, get some opinions, refactor it, get some more opinions. Some suggestions for taking a look: * The often posted [PHP the right way](http://www.phptherightway.com/). There is no definitive right way, but this is at least definetly not the wrong way. * [PDO](http://de2.php.net/PDO) for database operations. * And, i think one of the most important things in PHP: The [SPL](http://de2.php.net/Spl) * And linked again: The [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) architecture pattern
I know it isn't exactly what you asked, but we started using Yii about a year ago. It felt really weird for quite a while, then all of the sudden it didn't. Looking back, I think it was that initially it felt like building things took a little more work than they should. As we extended out our own scaffolding templates, this went away, and now we are left with how stuff just is really easy to extend and maintain. Also, many times when we are about to add in more functionality, we find it already built in deep under the Yii hood waiting to be discovered. I guess what I am saying is that if you do choose Yii, it might seem weird at first but you will eventually be really happy you did. If Laravel works for you, that's awesome, too!
It's lovehate. Love by hating.
Thanks for the info, I did check out that site. Doctrine seems to be a nice tool and it would accomplish what I'd want. I can use that although, it seems to be a bit much for my needs, overkill. 
It's Complicated
I appreciate your input a lot. I'm going through Larry Ullman's book-in-progress on Yii and it all looks fairly intuitive and seems to flow with how I like to do things. The only reason I'm second guessing Yii right now is because it seems like development is really dragging ass over there. I was under the impression that a new major release was coming a few months ago (Though I may have been incorrect in that assumption).
THIS THING LOVES TO DOWNVOTE YOU
Thanks. I think I'll spend the weekend reading Ullman's book and give Yii a shot next week.
I'll chime in as someone who's struggled for years to validate the need for a framework. After trying out CI, Cake, Kohana, and other smaller frameworks, I was really ready to give up on MVC altogether. Laravel has the fastest setup and easiest organization out of all the frameworks to date. I can get a project started faster with Laravel than with any other framework, hands down. There is a slightly limited support for it, but nothing I haven't been able to resolve with a quick visit to #laravel. Its community is pretty active. I was taught years ago that it doesn't matter what tools you use as long as you get the expected results. Laravel has become my tool of choice, but it may not be for everyone.
Yeah, Yii2 has been getting some flack ( [dev status here](https://github.com/yiisoft/yii2/wiki/Yii2-Development-Roadmap) ) because development has been slow moving. The current/stable release (v1.1.13) works well ... but I anticipate v2 will be much nicer since it will take advantage of PHP5.3+. They just added a few new devs so hopefully things will speed up. (*BTW, That Larry Ullman book is great)
Laravel 4 is quite agnsostic as to which build systems / test suits you use, but i think it defaults to PHPUnit. The framework is built around Composer, which enables you to incorporate just about any 3rd party library of your choice. I would actually say that Laravels' core strength lies in its dependency management. In fact, Laravel also relies on heavily tested Composer distributed packages. Like the Symphony Http Foundation / Kernel, Monolog, and Redis to name a few. The issue I see about laravel is that you have to make a lot of changes to you development environment to utilize its full potential. I will have a serious discussion with my team as soon as [Laravel 4](http://four.laravel.com/) is going out of beta, because it damn it got potential.
I'm not sure where you were looking, but the documentation and heavy commenting are two of the best parts of laravel... I don't think I've seen a framework with better documentation
Symfony has far better documentation which has been commented on by laravel contributors. "Not every team has a Fabien Potencier"
I skimmed lightly over it, but I might take a deeper look at it. I've been using Symfony, but it seems that Laravel has some nice features. I prefer 'less-is-more' frameworks, I feel that a framework which try to offer everything get more in the way than being helpful. Laravel also seems to be inspired by Python frameworks like Django and Flask. I think I have to take a better look at it. 
I do love the idea of Laravel, but for me it falls between two stools. I've ported a lot of client projects to Wordpress, despite it being atrociously written, because it's easy to find the staff. Personal projects I do in Django because it's done right, despite deployment being a nightmare. Laravel is the best of both worlds but falls into neither camp. If I was forced to write a project properly, and forced to use PHP, then I would choose it over yii, cakephp, codeigniter, etc. It is veey well designed. Phillip.
Coming from CI there isn't anything laravel can't do that CI could. It's MUCH easier to test code (CI testing was a nightmare) and was built to be testable. ORM is fantastic and will do security. Form validation is much easier than CI (magnitudes better). All in all, Laravel just feels more put together and easy to use. CI is super customizable which is nice. Laravel can be more customizable but by default will do much of what you'd customize CI to do anyway. It seems like every day I find something new that is awesome. Like today I discovered model route binding and got me really excited. Hopefully that's somewhat level headed. We just started our new product on laravel and there hasn't been a time where I wish we had used CI. I'm on my phone but if you want more info on my experiences I can reply later. :)
 Yeah, they are overly aggressive about when 2.0 will come out, but they underplay how awesome their minor releases are. They have added core developers as recently as last month, and they tend to release minors every 6-8 weeks. Their minors add not just big fixes, but sometimes crazy new functionality. I can see where they might appear to be slow because 2.0 never hits its milestones , but it is because 1.1 is essentially a major release over 1.0x. They really suck at numbering releases more than they suck at required updates :)
Good to know. I built a little blog in Laravel this evening and I'm a bit underwhelmed. Your info about their release patterns is good to hear, because I might end up with Yii in the end anyway. Thanks for the info.
I didn't follow any tutorials, really. Just read for 30 minutes or so on how their routing and models worked and went from there. It was pleasant to work with, but it didn't wow me. I'll do the same for Yii and possibly Symfony 2 and see what feels best.
Good deal. I hope you find what you are looking for!
I wrote Laravel. Yes, it has all of that stuff baked in. Prior to writing Laravel, I used CI, so it was originally written in that "tradition" of frameworks, meaning it aims to be easy to use, great documentation, practical, etc. As it's evolved, it has inherited far more powerful features than CI, such as auto constructor injection on controllers via our IoC container, the ORM, baked-in authentication, baked-in templating, etc. It's been around for about two years now. I'm not sure what qualifies as a fad. But, it is the 3rd most popular framework on Github, trailing only Symfony and CI. Anyways, just my two cents. Use whatever looks best to you!
Yes, we use PHPUnit by default. I built Laravel 4 with testing in mind from the beginning. Since we use the Symfony HttpKernelInterface, we also are able to offer functional testing via BrowserKit, etc.
There are several MVC-as-c extensions: http://pecl.php.net/package/yaf and http://phalconphp.com/ pop to mind
I wrote Laravel. I'll just try to give me two cents on where the framework is coming from, though I'm a little wary of all the Laravel topics on here lately being a little spammy. Don't want to detract from the wider community using the board. My first software development experience was writing enterprise .NET. I did that for several years, then started using PHP to build out side project ideas because the hosting is so ubiquitous and easy to setup. I used CodeIgniter at first, but was missing some features I really wanted like baked-in Auth, ORM, Templating, etc. So, originally, I wrote Laravel as sort of a Sinatra clone. Very much like Slim or Silex. I honestly expected few people to use Laravel because there were quite a few frameworks. However, I think the thorough documentation was pretty appealing to people at first and quite a few people begin playing around with the framework. So, from its beginnings, Laravel has been about practical web development, with good community and documentation. I tried to make it a pretty "rapid" framework like CodeIgniter in the sense that it's very accessible and easy to just start building without a lot of fuss. Fast forward a couple years, and Laravel has really evolved. We're using 7-8 Symfony components in Laravel 4 (which releases at the end of May). It's packages are of course delivered via Composer / Packagist. By embracing the wider community for a lot of this "boilerplate" code, I've been able to focus on what makes Laravel unique, and I think that is still it's focus on rapid development, and with version 4, great testability and flexibility. I think at this point it's safe to say that there is no big glaring hole in the framework. Lots of talented people have built very complicated projects on the framework. I'm in the middle of a year long, very complicated project and the framework has held up beautifully. As the author, being involved with such a complicated project has been very beneficial, because the framework is not being developed in a software engineering vacuum - it's being developed by people who are using it day in and day out for heavy stuff. Ultimately though, use what makes you happiest as a developer, and fits in with you and your team's project needs. Hopefully, our jobs as software developers brings some fulfillment to our lives, and the tools we use make a difference. If you try Laravel and it is getting in your way, chuck it. But, I do think it's worth a shot. A lot of other people seem to really enjoy it.
Yet another "which framework should I use?" thread. The answer is always the same: The one you like that gets the job done. Can Laravel get your job done? Yep. Will you like it? Only you can answer that.
If you plan to use the framework later on, especially on enterprise level apps then I recommend Symfony2. Via it's core or bundles it has everything and a little more a PHP developer will ever need. It does come with a relatively steep learning curve, however, which is probably why it isn't that popular among redditors. And lastly, by learning Symfony2 in-depth you increase your marketability as you automatically become a developer for various CMS-es like Drupal8 and phpbb4. Although to be fair, same argument could be made with Laravel &amp; PyroCMS.
... Which isn't really fair to Symfony2 community, because Fabien doesn't write the docs much :)
&gt; I'm tired of the discourteous nature of people on here. Swearing and slang isn't discourtesy if it isn't directed at you, which it isn't. Grow up.
Ok - had a look and the MS-SQL module isn't loading. I have now tried all the all the .dll's in both PHP sqlsrv20.exe and PHP sqlsrv30.exe from the link on the MS site. and get a variety of errors based around "Call to undefined function sqlsrv_connect()" or a message saying I need the 2008 or 2012 Native client. As an experiment I have also tried the same using an XAMPP install of PHP - and failed to load the module. I have scoured the web and can't find very much info out about what might cause sqlsrv not to load. Question - does Microsoft SQL Server 2008 R2 Native Client ODBC driver for x86 need installing on the win 7 box (where PHP is served) as well as the server where the db is? I have 2008 Native client (not sure which release) on the server now after finding a download. I can't install Native Client on win7 as it says I'm using a later release already which I'm not as its V9 which pre-dates 2008 (but cant see anything in ODBC Source administrator) I also tried adding the existing one to the system dns and got a "Fail - Native Client]Named Pipes Provider: Could not open a connection to SQL Server [2]" when I tested it. Also the db is accessible via asp so I know that the db end is open(?) 
Yeah - its not loading. I have tried all versions of the .dll's again in case I missed somthing
&gt; baked-in templating Crap, and here I started liking Laravel. Is it possible not to use templating? I was very happy when I found out ORM is not mandatory in Laravel, but if the templating is mandatory that is a deal breaker. Only reason we use CI is because it is best framework where ORM and templating are not mandatory.
I'm in this position too. I keep thinking that today I will try it, then get put off by the fluffy language used in the website. One thing I have read on reddit, which may help, is that it feels similar to Rails, to people who have used both, and makes rapid development easy. 
I think Blade is completely optional.
Is this how Laravel itself is going to be, some kind of love/hate relationship?
Agreed. 
Discourtesy is a lack of manners, which is evident in your actions. Please learn to respect others. Thank you.
Laravel gave PHP a second chance for me. I was about to switch language completely, but here I am rewriting my clients sites in L4. Laravel makes testing code is fun. It sounds like a shitty thing to do if you're not used to it... but wow, development is so much better with testing. Plus, the code you will write is so pretty. The "built for web artisan" was sounding cheesy to me but now I understand. I feel like a fucking artist when I'm writing code now. 
&gt; Using a framework is a trade-off between speed and a manageable foundation. That's not entirely true. Frameworks always have the tradeoff, that when they have bug, you have a bug and if you refuse to hack the framework (which you should btw never do), you have to live with that bug until the maintainer chooses to fix it. Therefore, they provide more flexibility but you trade that for less flexibility and a possible vendor-lock-in. And vendor-lock-in is one of the worst things you can have. That, and for performance: The ZF1 autoloader once ate up 40% of our sites performance. Because it's friggin slow and does way too much. I replaced him with a minimalist own autoloader class. It's a real big tradeoff.
&gt;That's not entirely true. You claim it's not true, then you proceed *not* to explain why it isn't? What? &gt;Frameworks always have the tradeoff, that when they have bug, you have a bug and if you refuse to hack the framework (which you should btw never do), you have to live with that bug until the maintainer chooses to fix it. If they have bugs, you fix them, and you submit a bug fix. There are rarely one single maintainer, and most frameworks are open-source. Additionally, frameworks tend to have large communities around them, as well as unit tests, so they will probably be more tested than your code ever will be. 
 $ brew tap homebrew/dupes $ brew tap josegonzalez/homebrew-php $ brew install php54 --with-fpm --with-intl $ brew install php54-xdebug I don't mind building from source, but using `josegonzalez/homebrew-php` is more convenient. 
Sweet ill check these out 
How is this different or better from using Xdebug?
I've always wanted a proper guide to manually setup PHP with FPM, MySQL and Nginx on Linux for development **and** production environments. But it's really hard to find. Will this work on Linux as well? Or just Mac.
I see literally no difference/advantage to this setup over using Eclipse(well, Aptana) and xdebug.
Yeah I didn't have time on my phone to go into that. Was trying to get across that you won't miss anything by switching, and you have access to even more functionality by default. Thanks for the link to your post though. I must have missed that.
It will run on Linux as well.
No advantage perhaps, but no difference? Come on. :-) This is a good guide for people who want to debug and prefer not to use Eclipse or an IDE, and prefer Textmate or Sublime. I am not one of those people (I happily work in PhpStorm that includes full debugging and XDebug support built-in) but when I originally learned about XDebug and wanted to incorporate that into my workflow (who wouldn't??) I moved from Textmate to Eclipse (and eventually PhpStorm) specifically for that functionality. It's nice to see that there is a way to do this for people who prefer Textmate or Sublime, etc... 
Google: cURL It will get the contents of the page for you, then use PHP string functions or regex to get the parts that you need. I'm on my phone or I'd copy and paste more useful info, but cURL is the first step. EDIT: typo
Thanks brother
It depends on if you can count on the page being properly valid code, and that the content you are looking for to be properly contained within the page. If both of those are true, then the parser is good, if not, you may have issues with it. Start with proper way (parser), and work back towards regex when needed. (heck first page scraper I wrote years ago, I did manual searches, so pathetic the code I had back then before I knew better LOL, over use of strpos()'s and substr()'s )
&gt; If both of those are true, then the parser is good A proper parser should be able to handle malformed HTML with ease. 
Dude, just google it. They are all over the place.
Yeah that's the problem. There's plenty written. It's finding one that works and that is up to date. By the time you've done one and followed the instructions to the letter then still can't get it working then you've wasted the whole day.
In general yes, using a parser would be a good idea. Your reply isn't very useful to someone looking for help since you don't actually suggest anything.
&gt;I prefer to code in TextMate If you just used an IDE you would get all of this for free. I'm just gonna stop reading when I see that in future :|
Why not use Symfony ?
The problem is that you're setting up your development environment on your daily driver.
I guess that's ok, and I'm not one for suppressing options; I guess the post title saying "True PHP Debugging" made me think there was something better than "standard" PHP debugging.
Switching to PHPStorm from Zend Studio/Eclipse+PDT has been the best thing ever. JetBrains is awesome, PHPStorm is slick, fast, updated, and awesome. I also use IntelliJ for Android development, and it's just as good; same for PyCharm for the few Python things i've done.
PHPStorm is my personal favorite and is rather popular in this community, but it is also a paid product (normally $99, on sale for $59 until April 22nd). Zend Studio is also a paid product and only marginally better than Eclipse+PDT+xdebug. Sublime Text has gotten a lot of chatter lately but I've never used it.
I was a LONG time Zend Studio user, until they switched to the Eclipse codebase. At that point it felt like it took a huge step backwards, so I needed to switch. I tried Eclipse/PDT itself but didn't like it. I've now been using [Komodo Edit](http://www.activestate.com/komodo-edit) for years and have no regrets. It's free (built on top of the open source "Open Komodo"), is fast (native executables) and supports many languages. The only feature it does not have that I would love is debugging, however that is available from their commercial IDE [Komodo IDE](http://www.activestate.com/komodo-ide), if you're willing to pay around $300. A feature comparison list is available at: http://www.activestate.com/komodo-edit/compare-with-komodo-ide
Recently, I've been using Sublime Text 2 because I have had nothing but problems with PHP IDEs in the past. It has some AMAZING features for working with PHP projects: * multi-select editing * easy to open files in a project * easy to search for functions * autocomplete for core PHP functions and functions defined in the same project (I think they have it working for all functions in the project in V3 but don't hold me to that) :-) 
+1 for sublime. i've been using notepad++ for years and then i got this and it's awesome. $70 is worth it if it's for your job, but really you can just use the demo with a few popups asking you to buy it here and there
PHPStorm is the best. 
Do we really need one of these posts every week?
Agreed, I came to mention Sublime Text. So many good features, super fast, I can set up on my Mac, Windows, and Linux machines, has plugins for connecting to source control, can do linting on lots of languages (with plugins), I'm only just switching over to it and I love it.
Sorry, I'm new and lets be honest, search isn't great.
I am a big fan of NetBeans. 
I've tried basically every IDE out there, and I've fallen in love with tmux+vim on a remote dev server. It gives me "dev anywhere" capability. As long as I can get an SSH connection, I can be productive. And having the remote server keeps your computer damn fast. In the past, my MacBook (pro) got damn slow from running mongo and elastic will all that data. Now every part of the process is smooth and easy. Of course, this is just a matter of taste. 
+1 for NetBeans. I switched from Zend Studio and I haven't looked back. I liked Zend, but when they released version 10 when the highest previous version was 9.0.2 and then expected me to pay full price for a new license, I was done. It's not like 10 is a huge upgrade from 9, certainly not enough to warrant a major version bump. 
IDE's are great if you're editing via FTP always. In my case, I'm working with a git based project pushing to Springloops most of the time. Used TextMate most of last year, then switched over to Sublime in December or so. Really, really great editor. The package control plugin is off the charts cool and really makes plugin management easier.
&gt; Does PHPStorm handle debugging PHP well? Yes. PHPStorm does autocomplete as well as standards checking (HTML4.x vs HTML5 vs XHTML? auto jslint? etc, they haz it). As of PHPStorm 5 they did not have support for PHP Traits but I was told 6 does. Being able to tell the editor "this generic is really Class X" via annotations is useful to me as well to give me proper inspections.
komodo edit
I use vi, but I also sysadmin hundreds of servers and switching gears is tough when I live in bash and vi most of the time.
ALL HAIL LERDORF
Yeah when I was setting up my current production server, most tutorials I found were either out of date, or had major security issues in the configuration. I ended up reading the official Nginx and PHP documentation and using that. If you're on Debian (or Ubuntu), just installing the packages gets you pretty far. Read the README.Debian files that come with the packages for a quick getting started guide. Let me know if you need any tips, I'd be happy to help.
Gedit with the extra plugins
Currently using Sublime Text 2, but my backup is Netbeans.
I'm currently employed as a system admin / web developer, but system administration is really just a matter of understanding a collection of common programs that happen to run on a server rather than on a client. The fact that they run on a server and sysadmins tend to configure them via terminal rather than a pretty URL and interface probably makes the job seem more complicated than writing savvy code, but it's really just a different skill set. Having said that, the original process of learning things like bind and properly configuring and optimizing your web servers with the extensions you need is exhausting and irritating the first few times you do it. Without a reason to do system administration it all seems like a terrifying endeavor, but once you've done it, you barely ever have to touch the server if you do it right and script in the appropriate programs / actions to be automated.
Phpstorm for large developments and st2 for smaller ones
vi is great when you need to get in and work on stuff on a server...but it really doesn't compare to working with a full GUI IDE. 
PHPStorm really is the best. It has eased my workflow so much. It's fast and extremely seldom hiccups. Version 6 just came out and it kick ass and really cleans up a few things.
Whoever wrote Laravel. That person is smart.
On Linux, I really like Kate (KDE Advanced Text Editor) and KDevelop for PHP work. Fairly simple, but works and works well.
I am legit interested in a response to this, so I upvoted it back from the grave. The descriptions I've seen of laravel sound like a simplified symfony. Correct? Can anyone give a compare/contrast of the two?
phpstorm
What are the performance implications of using closures so heavily?
I've never found an editor/IDE that I am in love with, but the multi-caret feature of sublime gets me close.
Sublime is also a paid product. Many people just don't pay and deal with the nag.
+1 Zend blowing chunks when it switched to Eclipse.
I haven't seen too much mention of Eclipse which is a shame. Faster for me than Netbeans and a better in-project search too. 
I wish they had package deals.
Half drunk :) They don't call it a pissing contest for nothing... ultimately the winners are the ones who write the history books. Psr-0 is becoming ubiquitous for the same reason the wheel did... it makes the poor fuck hauling rocks's job easier. At the end of the day the naysayers just look like children farting in the bath. Lots of hot air but they sure aren't getting work of substance done, and they sure as hell aren't effective collaborators.
I use vim + ctags + autocomplpop + snipmate + ctrl-p + gundo + fugitive + vdebug. This gives me auto completion across files, snippets, partial-name file searches/openings, easy and ridiculously powerful change history, some version control tools, and an extremely powerful interactive php debugger. I've been working as a professional php developer for 5 years (and an additional 4 years of freelance/nonprofessional work). Vim (for me) is fast, efficient, and powerful. It is my preferred IDE.
Exactly. I can vi with the best of them and you can get it to do code completion and code folding but in the end, I find that if those things are enabled in vi then it gets in the way when you don't need them. In the end I like leaving vi alone and having a full dedicated IDE for projects.
Not sure why anyone is downvoting you. Vim is great.
They do run promotions periodically, so keep an eye on their site. Everything JetBrains product I have purchased has been on sale, most recently their "End of the World" promotion in December which was pretty amazing. 
I use Eclipse as well. I'm sure there are better options, but I like it.
I'm sorry, but what exactly are you looking for that you weren't "WOW'D" by? I really don't understand what you are expecting... the framework to spit out $100 bills or shoot off fireworks?
This. I use MacVim and I have been doing PHP development for a while now. Its the best IDE ever. http://blog.sanctum.geek.nz/series/unix-as-ide/
NetBeans convert checking in. PHPStorm is the best.
Wish they would give us commercial developers a break one day...
i used to use zend studio ide. I still think they made the hug mistake of going to eclipse. eclipse is bloated. I use coda. though its not an IDE, that in combination of grep, well thats all I need. 
BlueFish
I've gone from Emacs to Eclipse to Netbeans, and I have to say that, finally PHPStorm is "home". It's way faster and far less crashy than Eclipse, and still faster than NetBeans. It's free to try it out, and you won't regret it. I assure you that it's worth the price. And they've been running a deal on it. If you contact them you might still be able to get it.
System Administration goes beyond of setting up your web server. 
Phpstorm is the only IDE I have used where setting up xdebug wasn't an exercise in pain.
/u/utotwel
they are currently doing %50(ish) off... waiting for a 75%.
Nano
PHPStorm is great. It has all the features you'd expect from an IDE. It isn't expensive at all, but if you're worried about spending the hundred bucks they will occasionally offer discounts on personal licenses (right now it's 40% off, in December it was 75% off).
And PHPStorm is a LOT cheaper than Zend Studio and has more features. I used Eclipse / PDT for years, and was constantly struggling with it. I had to spend a lot of time on the IDE and less time into coding. Standard procedure: New Eclipse Version comes out, PDT is not compatible to it for months. When it was compatible with 3.4, the code highlighting was broken in some files, and it wasn't fixed for almost a year. Remote projects worked bad / sporadically and eclipse ate up almost every mb of your memory. Not to mention the buttload of configuration (change the indentation policy from tabs to spaces in 3 different menus, change the file encodings to UTF-8) you had to do to even start coding. Also, PDT 1.0 had actually more features than the newer PDTs, because for some reason they removed them. Every new eclipse release was an adventure. At some point, i switched to Zend Studio because the company had licenses. It was mostly the same thing, with the same bugs but a little less config. Then i found PHPStorm and i was like [this](http://www.youtube.com/watch?v=pFlcqWQVVuU). Little to zero config to get started. And i actually got to tweak the IDE, so now i can close jira tickets automatically and have a kickass debugger.
Nobody. There is no "top php programmer". There are some "gurus" who post and blog around on the net, but i pretty much met the best people during work and they don't blog anything. I don't look up to him, but i recognize that Sebastian Bergmann (the author of PHPUnit) has done some great deeds for the PHP Community with PHPUnit and his book about professional PHP 5 development. I respect people for their commitment, not necessarily for the skills. I also respect the authors of Symfony, Laravel, ZF and basically every other open source PHP project. Because they work for us, and i know how difficult it is to do open source work alongside your normal work. What makes a top programmer for me? The best thing you can do as a programmer, is communicate with every other programmer, to gather different opinions, share experiences and simply work together. However, to be a good programmer, being able to code very well is only 50% of the job. The other half, is communication, commitment, pragmatism, reliability and creativity. I know many people who write good code, and even have good architecture skills, but totally lack the ability to communicate with other people (other developers included), amongst other things. Social skills are, in my opionion, the greatest problem in the development community. Because a lot of people don't like to receive critique, or / and are very self-indulgent and most important, are no real teamplayers who see the goal, rather than building up their own reputation. TL;DR: For me, a "top programmer" is not only a good programmer, but also a good teamplayer who embraces critique and communicates to achieve the best outcome possible.
google propel orm and doctrine orm
But doesn't necessarily include programming, and if it does, doesn't mean they're good at it.
I want Sublime Text to get me pregnant. I love it so hard. You will never look through folders again. Fuzzy search is insane fast and anchoring directly to methods is glorious.
 Upvote for vim and tmux. I'm more of a "screen + vim" guy, but tmux is certainly cut from the same cloth as screen. And the whole "write code anywhere" simply cannot be beat. 
I'm still on v5, the changes in v6 didn't warrant a change for me...
I was using [Aptana Studio](http://aptana.org/) for the longest time. It's a great and powerful editor and I don't really have anything bad to say about it. However, a few weeks ago I switched to [Sublime Text](http://www.sublimetext.com/) after watching through [these video tutorials](http://www.youtube.com/watch?v=5AV9zJH2n_Y&amp;list=PLmJpVU-TdmVtTLooKvX3jcrOziPjlWrD4) and have been loving it. Even purchased a license for it last week.
Do yorself a favor and check out [Sublime Text](http://www.youtube.com/watch?v=5AV9zJH2n_Y&amp;list=PLmJpVU-TdmVtTLooKvX3jcrOziPjlWrD4). You'll never go back.
I use PHPStorm. I notice a lot of people suggesting Sublime Text 2, but is it really an IDE? I mean if you look at the IDE wikipedia page it mentions IDEs having standard features such as build tools and debuggers. Does Sublime have those? Last I time I tried to do remote debugging in Sublime I had to download a plug-in, and it was rather shoddy. Same with remote file synchronization. Maybe that has changed... That said, I do love Sublime Text 2 and I purchased a license for it. But I use it more as a text editor, or a quick drag &amp; drop editor w/ a project view. If I'm setting up an actual production project I'll use PHPStorm.
Used PHP Storm for a few years, switched to Sublime Text 2 a year and half ago.
can you recommend a few System Administration books?
I never knew there was so much of a disconnect. I first started getting into programming after using Linux for a while, and I took Linux server administration classes in the same semesters (and with the same instructor; he was awesome) as my MySQL and PHP classes. Learned Apache configuration, Linux administration, MySQL (both SQL coding and administration in one class), and PHP all in the same environment, and thought such a thing was normal. Edit: Reading what /u/metamorphosis said about what real sysadmins do, I feel bad and stupid for this post. I mean, I knew about all that stuff that system administrators do, but I was kinda careless with stating that I learned system administration; I've never had to deal with all that stuff (we touched on some, maybe most of it, in the class; but we didn't do much more than talk briefly about what some of the possibilities are), and I don't feel I have the skills or knowledge to truly be a sysadmin. I just want all of you who are to know that I meant no disrespect by my post, and I know your job is much more difficult than most people realize.
I will be the original one =) I code EVERYTHING in FlashDevelop. I do a lot of different programming so having an IDe that can do it all is very nice. It has all the code completion etc stuff but what I really likes was th e easy user interface, easy-to-find-stuff menus and pretty look.
Seriously! I'll never go back. With tmux (or screen) and vim I get most of the features of any GUI IDE (I can't really think of anything that I miss; big difference is mouse integration but I never use the mouse anyway), but I also get a powerful machine that automatically syncs with production data and is set up exactly how I like it no matter where I connect from. tmux (/screen) also saves my session no matter what I do to my laptop/tablet/windows machine in between. (FWIW I like my windows machine as a computer; it's in a cozy environment, and this setup also makes that a viable place to work from). And, when the work is done, I get to show off new features in dev publicly to clients or coworkers without having to involve a separate staging server. I'm literally in love with this workflow. I'm a little ashamed to have only discovered it recently after 8 years of professional work and 15 years total experience... But who cares--what's important is I have it now :)
Dude, Laravel's about page says you worked at a freight company. Was it ABF? I'm from Fort Smith too and it's really not a town known for having developers of your caliber. After moving to SF I realized just how ridiculously drastic the difference in work environment is for developers here.
Vim has [mouse](http://vimdoc.sourceforge.net/htmldoc/options.html#'mouse') [support](http://www.math.technion.ac.il/Site/computing/docs/vim/scroll.html#scroll-mouse-wheel).
vi mode in bash. 
Darcula alone is worth it.
phpstorm - it has saved me a lot of time developing drupal modules
I used Komodo for years, but recently switched to Sublime Text 2. You should check it out. One of the best improvements over Komodo is that it loads pretty much instantly, and restores the previous session (even unsaved files/changes). The plugins are great too, so make sure to install Package Control and check out the available plugins.
I tried PHPStorm 5 and wasn't too impressed but recently came across PHPStorm 6 and decided to revisit it (until then I was on Netbeans for 5 years). It's now the best IDE I have ever come across. When they say IDE, they mean it, it bundled near enough all the tools that I would require in my daily workflow. Here's just a few features off the top of my head: 1. ZenCoding / Emmet support. Write HTML using CSS syntax! Bye bye &lt;tags&gt; 1. File Watchers. For automatic compilation of LESS, SASS, CoffeeScript etc or even run your own custom tool/command. 1. CVS Integration. Hello Git and SVN 1. Upload on Commit. Automatically uploads the changed files in a commit to a deployment server of your choice 1. FTP Browser. One of the things Netbeans lacked 1. Database Management 1. Run Phing build files 1. Live Templates. Create your own snippets with a keyboard shortcut. Most IDEs support this to be fair, but still a very useful feature. 1. Full PHP integration...autocomplete, docs, tests, debug etc. 1. Code Review. Performs code analysis and highlights potential issues and improvements 1. REST Client. For testing RESTful services 1. Composer support. To be honest I hope this gets better as so far I can only seem to add dependencies and initialize a new composer.json file. Can't seem to update! 1. Looks great. I love the Darcula theme, it's dark but soft and easy on the eyes. Also, the [themes by daylerees](https://github.com/daylerees/colour-schemes) look amazing and are PHPStorm compatible. Yes it costs money but it's well worth it. I've found that it's actually put the fun back into coding and I feel a certain satisfaction just from using the IDE (as strange as that may sound) There's a lot more that it can do. So many things I stumbled upon by fluke, and a few things I picked in [this screencast featuring John Lindquist](http://www.youtube.com/watch?v=LJOyrSh1kDU&amp;feature=youtu.be) A lot of alternative tools seem very lightweight in comparison and if you are a serious PHP dev and I would definitely recommend this as a tool of choice.
I only came here to see if PHPStorm was the highest voted comment. Was not disappointed.
A decent choice, but... a bit heavy for its feature-set. That's a common problem with scaled down versions (Komodo Edit is a scaled down Komodo IDE), you get the heavy core whether you use it or not.
yeah, this is definitely true.
It is pretty common. To be honest if a host has exec() enabled I wouldn't use them. It allows quite a bit of access that people just shouldn't have. Even hosts with SSH enabled still turn exec() off from the few I have tested.
seconded
Even if exec() was enabled, i wouldn't count on python being available.
&gt; TL;DR: For me, a "top programmer" is not only a good programmer, but also a good teamplayer who embraces critique and communicates to achieve the best outcome possible. Fabien Potencier fits your description perfectly. "Someone else wrote the same as us but better? Well, time to dump what we did!" And (almost) everyone is happy about it. And of course the fact that he merge's all those pull-requests for Symfony pretty fast (mine was merged in 5 minutes last night). Unfortunately he doesn't blog that much.
Me too... What I really like about Phil, is that he isn't afraid to speak his mind, whether or not the community likes it or not. An honest person in the tech industry is really rare, and Phil is one one of them. Thumbs up to Phil, and I will personally say this to him when I finally get to meet him. Phil, I might not like all of your posts, but at least you give an honest opinion, and that's the point. Edit: grammar :) and ps... I know Phil is a redditor... who is your inspiration? Would you please do an AMA sometime?
I really think that the OP is talking about Top Programmers in the meaning of "people who inspire you", but that may be my nonsense, but anyway, if the OP intention was to look for some magic gurus that you should look up to, then your post is 100% valid, because there are no magic gurus. The mythical super productive programmer is a myth, and anyone who's been in this industry long enough knows that.
Most of these features were already in version 5, which is awesome btw... Except for the Darcula, Composer and File Watchers... Might be wrong, but most of those features I use on daily basis, with version 5.
I am crossing my fingers to get my hands on the 50% promotion to upgrade to version 6, it ends tomorrow!
What else would be? :)
Yeah, that's what I figured, but I thought I would ask some people with more experience than myself. Thanks for your answer.
From what I heard, "Netclipse" steals most of the features from PHPStorm, so if you want to be in front of curve in features, use PHPStorm. This comment is not directed at you but at other readers :) When PHPStorm releases a feature, Netbeans/Eclipse takes about 1-2 years to integrate it to their platform, that is.. if they ever implement it.
Sublime Text isn't an IDE, but you should always have a good text editor also, and for that, Sublime is king. But my comment is more or less just reflecting what you said in a different manner. For starters, Sublime is great, but do not use it on big and complex projects, because when problems occur such as big and complex refactoring, Sublime is no good.. but editing language files, configuration files, etc... I always go to Sublime.
"Go to definition" works pretty well in PHPStorm as well, as for easy set up of Netbeans compared to PHPStorm, what are you referring to?
It's ctrl + click in PHPStorm. How much easier is it in NetBeans?
Maybe I didn't give it enough time, or I can't recall properly what the issues I had with it was, or most likely I didn't really have a workflow back then and probably ignored all the awesome features staring me straight in the face, but either way I was able to dive straight into 6 and haven't looked back since. I did manage to get along fine with Rubymine 5 though!
I guess I just disagree. Vi(m) does everything a gui can and more. It is more difficult to learn how to do some of those things, but a lot faster once you do.
Not nearly common enough :P
Here's a small benchmark: https://gist.github.com/igorw/5429404
On my machine, the compose and pipeline functions both took a performance hit of approximately a factor of 3 for each function in the pipeline. I don't know why you'd create the composed function inside the iterator, so I'll ignore that. A factor of 3 for such simple operations is huge. I wonder how it scales with the complexity of the composed functions, but I doubt this would benefit its most obvious use cases ie: data processing. Adding such an overhead to an already cpu-intensive process like bulk processing of floating point data isn't so good. It's a cool idea.
Do you know of any good books / sources to get started on the path to this knowledge? I would like to someday become semi competent withing system administration, on a small scale. 
vim is a text editor not an IDE. I'm assuming the downvotes come from not being related to the topic.
And the REST client. And with the latest update, [this](http://blog.jetbrains.com/phpstorm/2013/04/phpstorm-6-0-1-released/). (see list point one.)
I've never, ever liked IDE's. I find that terminal Vim + byobu just totally destroys them. At my last job I was made to use Netbeans and I f***ing hated it. The only plugins that offered vi keybindings were all shit, and all the colourschemes for it looked like a small child had eaten too many Smarties and been sick everywhere. Now I use Vim exclusively and I'm way more productive than I ever was with Netbeans. My config is stored on Github so I can get at it whenever I need it, so it's easy to se up a new machine too.
No, the "it's reddiquette!" excuse won't fly. Sublime Text 2 is a text editor (my preferred one, in fact) and it's being voted up highly in this thread. People are voting based on personal opinion, not by thread contribution.
Works awesone together with the symfony2 plugin.
try http://chyrp.net/ - light and easy to use, nice themes
I met [Ilia Alshanetsky](http://ilia.ws/) at a conference once. He's a pretty cool guy. Wicked smart. Same goes for [Chris Shiflett](http://shiflett.org/). Both of these guys are known for discussing security topics which I find particularly interesting.
When Intel releases haswell I will be upgrading my system to be vtd compatible so it will be easier to get more training in then, as for now I'm just trying on different solutions as to nas and the list. Mail server is most likely out but most other things I have tried, and some I have succeeded in (poorly). Must say though virtualizing is my savior when it comes to learning new stuff. I get to have many machines interacting without a buttload of hardware laying around. I enjoyed your post a lot, it made me grasp the depth of what I wish to learn, and incidentally make it easier to understand why I'm having some problems understanding what I thought would be a walk in the park. It's a big subject. 
*I'm not a real programmer. I throw together things until it works then I move on. The real programmers will say "Yeah it works but you're leaking memory everywhere. Perhaps we should fix that." I’ll just restart Apache every 10 requests.* --Rasmus Lerdorf Source: http://en.wikiquote.org/wiki/Rasmus_Lerdorf
the only thing i missed from aptana was the eclipse shortcuts but then i figured out i could recreate them in sublime text and everything was good again
10 years ago, I was a web programmer. I was terrible, wrote dangerously insecure code, and nobody with any experience in web development should have hired me for the things they did, but I still was still a web programmer. Saying that someone isn't a system admin because they haven't dealt with a DDOS attack at a 1000+ company and comparing them to a wordpress installer (not even remotely comparable) is some pretty elitist nonsense.
That's a fair point. Perhaps OP as referring more to using XDebug vs. using var_dump(), which is what most people unfortunately do to "debug" their PHP work. :-)
I think it might be because the package system often offers most of the setup ready-made. For example, on Ubuntu, if you install the MySQL server package, the php5-fpm package and [apache-2.4](https://launchpad.net/~derek-morton/+archive/apache-2.4), you can use Apache with PHP-FPM like this: &lt;VirtualHost *:8800&gt; # web server port here of course ... ProxyPass /phpproxy fcgi://127.0.0.1:9001/var/www # use the PHP-FPM port here of course ... &lt;Directory /var/www/&gt; ... RewriteEngine On RewriteCond %{REQUEST_FILENAME} -f RewriteRule ^.+\.php$ /phpproxy/$0 [PT] &lt;/Directory&gt; ... &lt;/VirtualHost&gt; I don't see much room for a guide for Linux, because there's no need to compile anything. If you stick with mod_php, there's even no need for configuration. PHP-FPM is not the standard setup.
Aptana 2.0. Never liked 3.0. It's free.
Came here to ask about this. I've only ever used Komodo IDE, and was wondering what the big differences are. Thanks for this.
Ok a bit far fetched, I admit; but to be fair installing a webserver is not sysadmin skill (i mean it is, but not really..)! In fact many web dev jobs require you to know the "basic apache and linux" - I understand where you coming from (to be fair you are a sys admin if there is no one around to handle a broken mail server, a user complaint, a broken network, failed router, etc) - but the problem I have with your post is not that you are calling yourself wev dev/sys admin, but that you somewhat downplayed skillset and knowledge of system administration to only web server!. which, I believe you know, is not; and its far away from being elitist. 
PHP MySQL Course, resources, ebooks, Tutorials and Scripts
I'd argue that it's pretty hard to say that vim isn't (or rather, can't be) an IDE. What do other IDEs do that vim can't-- either natively or through a plugin? It's got code folding, tagging, file browsing, function search, debugging, git support, etc. So the line is pretty blurry.
Probably that eevee guy
It also depends on the server setup. On plain mod_php setups where everything runs under the Apache uid, it's indeed commonly disabled. And there it makes sense. More professional hosters use suexec/fcgi-php or even chroot jails, which provides for better segregation between accounts. There mod_security is more commonly well-configured, and safe_mode or disable_function= workarounds often redundant.
You're also counting on python being available, which is not guaranteed. In your position, I'd have my code first check for exec(), then check for python, and if both of those exist, do it the python way, otherwise fall back to a PHP version. Also I might see if there's a faster way to do it in PHP. I can't imagine many tasks which need to be literally 100 times slower in PHP than Python.
I know I'm only supposed to say this via upvotes, but at the risk of breaking reddiquette I'd just like to say that your levelheadedness is much appreciated. Vim isn't for everyone, but then again neither is netbeans. Some people find vim too prehistoric (working in the terminal?!?), but I find IDEs like netbeans too clunky. Still, I'd never think anyone's personal preference isn't valid. You gotta use what works for you!
For people that doesn't know, that's the guy behind ~~Symphony~~ Symfony. He's a beast. 
NetBeans sucks a big fat dick, in my personal experience. So many headaches.
Some people really don't like Sublime apparently. Looking at your comment at the ones above, they've all received almost equal downvotes to upvotes.
You shouldn't even be using ftp, nevermind editing files directly on a server via ftp... Such bad practice.
You should never, ever edit files directly on a remote server, and you shouldn't even be using ftp. 
it's fine if it's a remote development server, and then you sync your code changes into a git repo (at github of course) and then push to the production, i use phped in this fashion, have for 4 years or so, works great. PhpEd is by far the best PHP IDE on the planet.
Just get a VPS already.
&gt; Tried php storm and really couldn't see what all the fuss is about. Was just Meh... Things I use every day: * Refactoring (Netbeans refactoring is essentially nonexistent lacking numerous common refactorings) * Inspections/Intentions in Storm (Netbeans doesn't have anything close to this) * Code completion in more than just PHP (JS, HTML with Emmet, JavaScript, XSLT, etc.) * Better support for languages beyond just PHP. Full JS support, HTML, XSLT, etc. * Superior code completion * phar support * File Watcher support * etc.
I'm a PHP developer but I don't support Rasmus Lerdorf on this case. It's pretty sad to see the introducer of PHP says such things. It is unfortunate for PHP. Edit: I read some more on wikiquote. I seriously don't know if those words really belongs to him or his wikiquote page getting trolled... "I am a terrible coder, but I am probably still better than you". "We have things like protected properties. We have abstract methods. We have all this stuff that your computer science teacher told you you should be using. I don't care about this crap at all." He sounds like a complete moron. I wonder if he is still like yolo and using spaghetti code during his work. 
Right. And after a full day of work I should be riding home on my unicorn. Please, we don't live in a perfect world. And I would LOVE to see you import a 500mb+ project just to change the font color in a CSS file.
Maybe include both the PHP and Python versions. Your script can test if exec() exists and use the PHP code as a fallback.
Yeah, so what happens if you make a mistake in the file when you upload it? The css breaks for live users? What about version control and issues when other devs are working on the same files at the same time etc? It's just a really bad way of working.
EMACS EMACS EMACS
thank you
Yeah, I'll admit that in the post I didn't really expand much beyond the web server stuff, but to be fair my entire point was more about how it's a matter of learning a collection of server-side programs rather than client-side programs. My only *examples* were web related because you have to admit that's a darn pretty common use of server administration these days. Technically what I said is still true. It's a matter of understanding a massive network of programs, configurations, and languages that are utilized on the server side, and people shouldn't be concerned about trying to learn them just because it's not a pretty interface. And as in all types of computer fields, some people are considerably more skilled than others and take it to a much greater degree of expertise. I don't contest that degrees of experience. I also don't claim to be elite, especially not with system administration. The reason I protested your post was because everything I said was still true, and the real disagreement lies within an opinion of when someone is deserving of a title. I feel I'm entitled to it since I didn't prefix it with "elite".
I had the same thought. I don't see how it could be 100x faster in python unless the php is just completely fucked.
What's wrong with FTP?
Has the `--with-intl` flag been fixed then? I was getting warnings last time I did this, and told to install the `php54-intl` package separately. 
Fabpot seems like a great dude who knows when to say "this code is better. Fuck the shit we wrote and use it." Phil Sturgeon writes some interesting blog posts. His Twitter can be kinda funny to follow too. The Bolt.cm guys like Bob den Otter have created an awesome environment for inclusive open source development. They've got a good idea of where they want the project to go, but they'll take suggestions and comments from anyone, transform it into a constructive discussion. Very good at engaging both developers and end users.
[Aptana](http://www.aptana.com/) here.
Maybe it's some heavy io-intensive threaded thing? Otherwise I can't really see it either. And if that's the case, maybe gearman and pcntl_fork would be better?
I used it for a few years and it was the best thing that suited my needs. I had gotten really sluggish and annoying so I ventured out and tried more editors - landed on PHPStorm and never looked back (or have had a reason to at least).
He said this is code he wants to distribute to other people for their use. He can't make sure everyone in the world has a VPS.
Well, time to try out PHPStorm then...
I'm sticking to Netbeans. I tried PhpStorm and it doesn't deliver. Setting up a debug environment is so much easier in Netbeans. Configuring your keys is so much easier in Netbeans. And there are more actions to configure. And the actual debug window in PhpStorm has no easy overview like Netbeans does. Sure, netbeans is built on Java and thus slower, but the logic behind PhpStorm project and settings management just gives me too many headaches. 1. Where is the "close" option for a project? 2. Why is there only a "delete" option? 3. Why do I have to open a new project before I can close an other? 4. Why does it take so many steps to set a project url? 5. Why can't the "step through", "step over" and similar actions for debugging be made in to buttons I can click with my mouse? I find it baffling that PhpStorm support having multiple versions of PHP installed, but then makes you jump through 10 hoops before you can set a specific debug setup for a specific project.
Just in case you did not know, PHPStorm is an upgraded version of Webstorm. Do not buy both, just get PHPStorm. Also, IntelliJ has plugins for every language that they have an IDE for. It does require a lot more configuration, and in my opinion has too much extra cruft if you are just looking for a PHP IDE. But, if you want a one size fits all IDE it is probably perfect. 
I've tried it once before discovering PHPStorm, and was surprised how anyone could have ever used it to do serious work. It's sluggish, buggy, has almost nonexistent GIT support, and didn't have most basic IDE features (you can't even click on a CSS class name in a html file to get to the CSS class definition, etc) Has that improved since?
I prefer v4 to be honest. 
Well it's obvious he can't do it. Or he just has to code the functionality within PHP and check what's available on the server and use the slower PHP code as a safe fallback but I think it's not a very smart decision to have duplicate mirror code in two languages providing the same functionality since it's harder to maintain. If his application solves a real problem or is superior to what's out there, why not make it a requirement of running it on a proper server?
Glad you got that off your chest. Now, if you have a shred of decency, delete your waste of a comment, actually read the question and feel free to leave a relevant reply.
I recently took the plunge and switched to Ubuntu and PHPStorm, and let me tell you, it has made my life so much easier. We recently implemented an ORM in our code base, and my old setup (Windows 7/Eclipse) didn't allow me to make use of code completion and editor hints. PHPStorm has sped up my development time dramatically. 
It's pretty simple. It's just running through a list of links, and collecting any link/URL found on the page (collected using BeautifulSoup 4), and writing them to a textfile. Basic page scraping, but PHP takes forever doing it.
That's what I think I'm going to do.
Well, since i want to learn, and memorize my code and not just copy paste code. I use Sublime Text 2, its only good for you, if you like using the keyboard a lot.
Good catch, I don't think it is. The warnings are still in the forumla. I've always done `brew install php54-intl` and it worked, assumed this would to.
It's exactly the same in Netbeans.
I still havent found anything better than the latest version of dreamweaver. It has ftp built in, code highlighting isnt jacked like other IDEs, traverses existing functions/classes and provides a dropdown as you type etc. Everyone seems to hate dreamweaver, cant think of a good reason why unless they're referring to old ass dreamweaver.
Not true. XPath works on the DOM, not XML. All you need is a competent parser which then spits out a DOMDocument. DOMDocument should be able to handle malformed markup as well, but you might have to fiddle with the libxml settings. Additionally, you can pass the markup through Tidy, which will clean up any malformed markup. 
It is an editor out of the box but you can give it IDE functionality by installing plugins.
Yeah, you can create a website using inline PHP and relying on mysql_query for database interaction, then asking why they're injected and bullshitting on PHP. If you want to build trash, then keep building those. I'm fine with it. If you need to build something bulletproof, you need to use features Rasmus calls crap. Those are the best case practises accepted by the most developers so rasmus calling those as crap doesn't really matter. Also those craps are added into PHP, whether Rasmus likes it or not. Have a look here; http://www.phptherightway.com/ Let him trash about the features of OOP. He probably has nothing about PHP nowadays apart from being the instructor. Have fun developing your two page websites using your spaghetti code. I'm not going to change PHP. PHP is in it's renaisseance period. It is getting better. Feel free to read articles like those; http://fabien.potencier.org/article/64/php-is-much-better-than-you-think Using best case practices or hacking things into inline HTML is up to developer, not the language itself.
It was mentioned in a [buried comment](http://www.reddit.com/r/PHP/comments/1cov84/question_about_my_development_approach/c9io7ey), so let me mention it again. Check out [PHP The Right Way](http://www.phptherightway.com/) for best practices.
Take a look at this article: http://net.tutsplus.com/articles/from-ftp-to-git-a-deployment-story/
If uploading changes instantly via ftp to your live site is your workflow, there's a serious issue with your workflow. Take a look at this: http://net.tutsplus.com/articles/from-ftp-to-git-a-deployment-story/
&gt;However, I would not trust the parser to return the correct DOM from a malformed document. A proper parser wouldn't be any less capable in interpreting a malformed document than a browser would be. 
I am unaware of any functionality that IntelliJ lacks, which is present in other versions. Except that IntelliJ is updated in between the individual IDE releases, and so half the time it has newer features and the other half it is behind. That said, I bought IntelliJ when it was on sale for $50 and found myself disappointed. While it has all the functionality and more of PHPStorm, some useful features are buried behind menus, while things irrelevant to PHP like compilation tools are front and center. 
&gt; If his application solves a real problem or is superior to what's out there, why not make it a requirement of running it on a proper server? If that were a requirement for, say, Wordpress, it would have 2% of the presence it does now. &gt; I think it's not a very smart decision to have duplicate mirror code in two languages providing the same functionality since it's harder to maintain. I agree, that's not optimal. Really the thing to do is to find someone who knows how to implement it efficiently in PHP.
Isn't PHPStorm just a subset of IntelliJ? You could use IntelliJ for all your development, as it also can handle PHP etc.
Feel free to have a look at DeployHQ too. It will take your bitbucket repository on commits and automatically deploy to FTP addresses you define. Free account has 10 deployment permission per day but you can enable or disable autodeploy feature anytime. Give it a go. :)
no love for PhpED?
I believe I've explained it in sufficient detail already. 
Why do you prefer PHPStorm? I'm currently a NetBeans user for over 5 years now.
Gotta love unit tested, Domain Driven Designed PHP :)
Symfony, not Symphony.
This is enough to get people started taking payments on their site. In fact this is enough for a small web shop to be operational. What else do you need? 
That's just a comparison of using a versioning system vs a file system. For 99% of websites, if you need to change a link, ftp is fine and more so a repository probably doesn't exist. For websites where a repository does exist, you probably don't know the server info. Anybody in between is likely working on a personal project and knows the risks... 
More importantly he's the PHP core developer and author/contributor to a lot of new features in latest PHP versions, while being much younger than any of his colleagues. Truly is an inspiration to young upcoming developers!
LOL Swiftkey barfed on me. Thanks. 
No, I use SVN, except its a lot faster to use FTP on the dev server instead of having to commit then update every time I make a change. By saving locally (The svn directory) and then uploading to the dev server, once everything is good I commit and update the live.
Btw, there are Jira and Jenkins plugins too. Check them out, really awesome. You really can perform all dev tasks in one IDE.
im curious as to why this is? Especially because you failed to mention anything about passthru() what kind of access does it allow that people shouldn't have access to?
That's still bad form. What if you changed say 20 files as part of a new module? You have to go and manually upload each file? Ugh. Svn isn't ideal either tbh, as you can't really branch and merge in it in the same way you can with git and mercurial. Since switching to mercurial at work, I've found it's made my life so much easier. The freedom to experiment via branching is invaluable. You should really look into git/mercurial, as I promise you, once you get how branching works, you'll never look back. And ftp really isn't good. Edit: Another thing - how would you revert a significant changeset with your current workflow? Say you wanted to revert your site back to how it was last thursday for whatever reason - could you do that? I can do it in one command, but I know you can't right now. How would you do that? Please tell me you wouldn't revert locally and then upload the entire site via ftp - this would be a) very slow and cumbersome and b) would leave the site in a non-working state for probably 5 minutes or so while all the files are uploaded. In my workflow, I can do this revert in seconds, and no users would ever see anything broken due to the deployment process.
Yeah I use the JIRA one which is great although it would be nice to have the option to setup a global server instead of per project only. We don't use Jenkins unfortunately but I do need to start looking at it as it is something I want to learn and use 
I guess the point is this probably hardly requires the functionality of an IDE, if you're just editing a single remote file you can hardly call it integrated development. IDE is about introspection, debugging, the bigger the project and the more files you have to work in the more it gets appropriate. 
[Here](http://www.littlehart.net/atthekeyboard/2010/03/05/people-who-make-me-feel-stupid-fabien-potencier/) [you go](http://www.symfony-project.org/blog/2010/03/04/symfony-2-0-and-the-php-ecosystem) Mainly this quote (from the first link): &gt; Use what’s out there; realise it sucks; write your own; wait until others suck less; dump your own; use other
Webhooks and payment report handling. Your customers want to be notified when the payment is received and their order/product is shipped, right? And how does your website handle cancellations and failures? And even refunds? What about security? Basically the article is about Laravel forms and validation, the rest of it is explained in Stripes docs and API client. Payment creation != integration.
$20 says a PHP script that uses CURL_MULTI or threads/forking can be as fast as your python script.
I noticed he (as a representative of his project) was looking to join the [PHP-FIG](http://www.php-fig.org/) the other day, and the other members all shouted at once, "YES!". He'll certainly do some good there.
Pragmatism is certainly one of Phill's strengths. He'll push a great idea forward, then always be ready to change direction when the need arises. He got me into FuelPHP after a great practical presentation at a local PHP group, when he lived here, and I haven't looked back. Jeeze - [2011](http://phpne.org.uk/2011/10/10/phpne-october-an-introduction-to-fuel-php-by-phil-sturgeon/) - time flies. Dunno where the video went.
All the quotes are sourced, I think they're real. But people often take the whole "founder" concept too seriously. My take on the history of PHP (here's [the official take](http://de3.php.net/manual/en/history.php.php)): What was PHP 1? It was almost just a macro/template system for HTML. Check the official history link and you'll see, it's nothing like todays PHP. PHP was rewritten by jews with PHP 3. They had studied at Technion, which is a pretty good university. Rasmus had studied systems engineering, which covers "reliability, logistics, coordination of different teams (requirement management), evaluation measurements". All very irrelevant for developing the initial versions of software. By PHP 4-5, features like classes were added, basically copied from Java. Thankfully development speeded up by 5.1+, and PHP overtook Java, and we got what we have today, which, apart from the chaotic stdlib, the bad memory management and the weird error handling model is pretty much dynamically typed Java with lambdas, literal arrays and so on. Which can be just as maintainable as Java if you try, easier on the eyes, but a bit easier to abuse. Rasmus could have died with the release of PHP 3 and we would have had the same PHP today.
Hypothetical alternative: &gt; Who are the top Country musicians you look up to? You: &gt; This is a pretty poorly phrased question. Nobody plays one style of music exclusively. The best musicians I know use jazz as the genre of their choice. You're being ridiculous.
Sounds great, so the only question left: is php storm open source?
I just built a script that can pound through 200k lines in under 30 seconds. You can totally make this fast with PHP alone.
He also has a blog: http://nikic.github.io/
Remote server doesn't always mean production environment. It might be a development or staging environment, where that kind of thing is perfectly reasonable.
I failed to mention passthru() because it wasn't asked about. After looking it up though, you can add that to the list with exec() to be blocked on shared hosts. They allow access to terminal commands. Which can give you a pretty big view of the system (like the entire filesystem if the configuration is setup leniently.) Some hosts allow SSH access so on those I hope they are jailed somehow. On those hosts it could be possible that exec() and passthru() are open. Still, I wouldn't want to use those hosts. It seems like an odd thing to have enabled unless you have direct control over the system.
You can really tell he had no idea what he was doing when he wrote PHP.
I had to style a joomla site one time but couldn't get it done without making a template override file and didn't have access to create files. The client was confused and upset when I got it done with php exec()!
u just mad cuz u a periwinkle
And cats. My cat once tried to eat him. 
I alternate between raw vi/vim (as in, not kitted out with very many plugins, so not really a true IDE) ... and PHPStorm, which is wicked awesome.
You nerds are funny.
I love and use the highly unpopular [Phpeclipse plugin](http://phpeclipse.com)
Me, myself, and I.
Technically yup, as mentioned below. I really don't mind giving someone else money for doing all the PHP-specific stuff for me in PHPStorm that makes my job that much easier though :)
Not as far as I know--it requires a license, http://www.jetbrains.com/phpstorm/buy/index.jsp but it's well worth it, and on sale right now no less!
Another vote for Sublime Text. I'm incredibly spoiled by it.
That wasn't an issue for you in your original comment. I mean, if it was an issue, you wouldn't have tried it. I mean, you are just trolling at this point.
/u/ircmaxell He's involved with the PHP core team, and has a great Programming with Anthony series. Edit: And apparently he was banned from this sub because someone accused him of being a spammer. This is why we can't have nice things. /u/nikic is a great asset to the community as well, as is /u/fabpot However, /r/php itself is a farce. This community has an obscene number of Dunning-Kruger's running around, who every time they discover a new technique or design pattern proceed to to turn it into a fucking religious fad telling everyone this is the One True Way. . .until the next One True Way springs up, that is. I can understand the overwhelming sentiment to point the rush of newbies towards better practices and design patterns, but sometimes there isn't a pre-built Symfony component or Composer package out there that does what you need. Sometimes, you're not just writing the 10 billionth CRUD interface or putting a wrapper around some database. Sometimes, you might actually have to know how to program, and not just string together wrappers on top of wrappers. Hell, sometimes you might have to compile a C extension to the PHP engine in order to speed up your userland code enough to be able to sustain a 10k ops per second transaction simulation, and rather than having some dumbfuck complain that I added functions to the global namespace in a package I have absolutely no intention of releasing into the wild, I'd like to get decent feedback on the Z_VAL API to minimize memory usage. I know this might surprise some people, but PHP isn't just for web frameworks. The fact that it's a dynamically-typed, byte-coded interpreted scripting language with enough OOP syntactical suger to rapidly prototype something means that it has a few more uses cases than printing Hello World.
Git and mercurial are so simple to setup that they add no complexity at all. I say it again: 100% of all professional web projects should be using version control. No exceptions. The fact that you even dispute this makes me consider you an amateur.
Git and mercurial are so simple to setup that they add no complexity at all. I say it again: 100% of all professional web projects should be using version control. No exceptions. The fact that you even dispute this makes me consider you an amateur. Edit: with regards to your FTP comments... FTP is slow, insecure and unreliable. Say you need to edit 20 files for a new feature, are you telling me you manually upload all those files? What if you missed one? You could go out of sync with other devs, and what if you break something and need to revert a change? Could you revert to how the site worked last Thursday? Nope... You don't even use version control. Can you work with multiple developers at once? Good luck with that. The sheer fact you don't think version control is necessary proves you're just an amateur who should not be taken seriously.
I love Komodo Edit. My favourite feature is the ability to tell it where the php binary is on your system - it will then run the code in real time and highlight errors.
No no, I completely agree with this: &gt;I say it again: 100% of all professional web projects should be using version control. No exceptions. However, that's not what you said before, and now you're changing your argument to exclude personal projects. With regards to FTP, if I have to edit 20 files, then I edit those 20 files, and then the software goes to SQA, and hands it off to my manager who has the final say. If he wants to only upload those 20 files with FTP or use a carrier pigeon is his call, so long as it works. Using FTP does not exclude version control, and it would be extremely easy to roll back the website to last Thursday.
Debug setup in Phpstorm was quick and easy for me. Anyway its just a one time thing so I wouldn't let it change my mind about which IDE to use. By the way Phpstorm is also written in Java
Bullshit, I can do lint, code hinting, xdebug, function lookup, refactoring, code folding, vcs integration, PHP reference lookup, and local execution with error lookup, all through VIM with plugins. Its not even a question whether it is an IDE or not.
Phped rocks
Phped - it beats all the ones mentioned, but is not free or sexy
Recently switched to TextMate2. It is beautiful man. Turn on nightly build updates
Thank you! I certainly so say a bunch of things, so cant expect people to like all of them. People like ircmaxell and fabpot have always been a big inspiration, Cal Evans is a podcasting hero too. 
$_SESSION EDIT: not sure why somebody would downvote this. PHP doesn't have application scoped variables and $_SESSION is the closest option to solve what they are usually used for. 
I would recommend taking a look at Memcache. 
You can cache just the database query result, or you can cache the HTML output. I would think caching the HTML would give better performance so PHP doesn't even have to run at all. Do something like put a time stamp on the cached result and then when user selects hot, if the cache is more than, say, 3 minutes old, run the rating algorithm again. This way you're only redoing the result on demand when someone wants it. You could tie the cache time limit to the page rendering speed: if the output speed slows down because of traffic, increase the minutes on the cache time limit. Disclaimer: not an expert cacher, just my opinion
Across multiple requests? [Sessions](http://www.php.net/manual/en/session.examples.basic.php). Across a single request? [Late Static Binding](http://php.net/manual/en/language.oop5.late-static-bindings.php) lets you do a lot of cool things with static class variables. 
Echoing the $website in the function will not work in PHP without a globals declaration.
Thanks for the kind words. As they say, time is money, so perhaps emphasizing the amount of time you will save using Laravel will be convincing to your managers, since you won't be maintaining a lot of boilerplate framework code on top of your already complex applications.
Refunds and cancellations are handled through Stripe dashboard. Have you seen it? Why would you want to re-create something that it already provides and some??? The article is focused on how to implement Stripe payments, not on how to structure your web shop (shipments and notifications aren't a part of payment integration, they are a separate part of a complete web shop solution). The failures are handled in the exception management and that is explained in the article and in the source code. Try running the complete code and enter an incorrect card number, you will see that it tells you lots of details about the error (with dd($error)). What else do you need there? 
Here's a tip that may help you. Don't increase the count until 10 votes have gone in for a map. These 10 votes can be saved to a different table, or in memcached itself. Your cron job to recalculate totals can run on that also. This way you write less to the ranking tables. 
The classes themselves aren't static, but they use the facade pattern to allow static calls.
Little OT, but jenkins is a blast. I am fortunate enough to have a CI-Team in my company, deployment is such a pleasure now.
&gt; Yeah, so what happens if you make a mistake in the file when you upload it? The css breaks for live users? Yes. Shit happens. Not everyone works on sites like google.com, that has a fucktone of visit per second. Some of us run a small studio that does sites for small clients where using a VCS would ba an overkill. For those sites, the lack of remote file editing is just a PITA.
I can agree here, but including the option to edit remote files without creating a project is an added luxury that no other IDE has.
Actually, they'll all *work* (outside of 'var' which doesn't exist in php)... You just won't see any output for most of them. A characteristic of PHP is you don't have to declare your variables, which could result in unexpected output.
Go home, you're drunk.
Yes, because people in PHP consortium doing well cleaning the initial mess. 
My first thought when HTML caching was mentioned. Especially when Reddit was used as an example. If an entire result set on Reddit were cached as HTML, people who login to hide default subreddits like atheism would see the default view without personalisation. 
I would personally use Redis for such a project. Just use [sorted sets](http://redis.io/commands#sorted_set) to store your element ids. So, you would have 3 sorted sets (hot, latest, all). The rank in the "hot" sorted set score would be given by your algorithm, the "latest" sorted set score would be a time stamp and the "all" sorted set would have 0 as score. Once in a while, you run your algorithm to set the score of the "hot" sorted set's elements. Then, you retrieve your list ids depending if you want the hot, new or all elements. You then have a list of ids, then fetch your elements from your database using those ids. If you plan to use redis, I recommend the [phpredis extension](https://github.com/nicolasff/phpredis).
It will throw an undeclared variable warning. Whether or not it reports it depends on your error reporting level. Inside a function, without a globals declaration, the variable can't be echoed, and it will error. Seriously, go try it.
Html caching is never a good idea. If you ever need to cache full pages, you should use a [reverse proxy](http://en.wikipedia.org/wiki/Reverse_proxy) such as [Varnish](https://www.varnish-cache.org/). With Varnish, you can cache only requests that you want (GET/PUT/POST/DELETE) and can create different behavior depending of the cookies on the user. So, it's possible to tell Varnish to show a cached page for non-logged in users and show a non-cached page to logged-in users. And Varnish serves cache directly from RAM, which is a lot faster than executing PHP to get the html cache from a caching server such as Memcache.
I wasn't aware that static methods were a cornerstone of the pattern. I've looked through the code and most of it can be replaced by a namespace, functions, and a few global delectations thrown around instead of $this/self
There's no such thing as overkill when it comes o using vc, and the fact that you think this issue can be dismissed with "shit happens" when the problem has been solved demonstrates that you're just an amateur.
We use Laravel for all our new projects at a small web dev company and converting all old CI projects to Laravel. Also I run Bootsnipp.com that I made in 4 days with Laravel. Let me tell you, Laravel makes it super fun to develop. I built a few dozen live applications that get around 2 million views each month and the apps have been incredibly stable since day 1 and no security issues to date. Very happy developing with Laravel over everything else I've ever worked with.
Scenario. Website. 1 html file, some images, 1 css file. Will you create an git repo, project in your IDE etc. to CHANGE ONE LINE OF CSS? If so, then you're just overthinking things and wasting time. If you're thinking that a VCS/project is needed 100% of the time, no exceptions then, I'm sorry to break it out to you, but you're dead wrong.
Wow, thanks for posting my site! =) 
Absolutely Nikic. He's so humble and bought some neat features into the PHP core.
&gt; Maybe it doesn't fit the classical CS definition of compilation being a process which derives machine language from higher level source, but [snip] There's your answer. This board is for programming, the word 'compile' has a very specific meaning.
And being able to replicate any issues on your dev box is presumably a good thing.
It's not a valid statement to imply adding HTTPS into a development web server is a slippery slope to supporting everything apache does. What he should have responded with is a valid reason why HTTPS is not being included in the dev web server itself because "php -S is not meant to be able to do every single thing Apache can do" is not one. 
I've never worked on a site with only 1 html file and one css file, but actually, yes, I'd still do it properly and set it up in version control. You do know that it takes about 10 seconds to setup a git/mercurial repo? Hardly a waste of time, and the example you've given is a quite ridiculous and largely unrealistic one.
That's the direction I'm trying to steer myself in and have been doing a lot to develop my skills outside of work, though the issue that if I don't implement them on a day-to-day basis I'll just forget. I've heard of Jenkins but haven't really used it. Do you know of any reading material that could be useful? More info on what it actually is and when/how to use. I know you could LMGTFY but I'm looking for more specific resources from reputable authors rather than rubbish guides that have been SEO'ed to hell.
I'm not sure what an application scoped variable is TBH, I've never hear the term, and wikipedia doesn't mention it http://en.wikipedia.org/wiki/Scope_(computer_science). If you just mean global scope, then you have the default superglobals that are available from anywhere in a script, and the global keyword/$GLOBALS array to add other variables as needed (though, don't!) If you mean variables that live across requests, then you mean the session. However this relies on storing data (on disk/memcache/whatever) against a browser supplied key (session id), so isn't really a variable. 
&gt; Hardly a waste of time, and the example you've given is a quite ridiculous and largely unrealistic one. Really? Last month the EU passed a rule stating that you need to inform your clients if and why does your site use cookies. Else you pay up to 30% of your yearly profit. Any cookies. Google Analytics? Yup. Shop login? Yup. Now, for a number of my clients all it took was to add a single &lt;script&gt; line reffering to a file on shared CND that adds a little bar on top/bottom of the page with the text "This site uses cookies, if you dont like it, disable cookies in your browser" (more or less). Now, you need to add this to 100+ domains. Good luck setting up repos etc. for every single site on the list.
Wow, that sounds like a truly horrible setup you have there. So glad I don't have to work with you lol. Edit: And the repos should already exist.
Even better: the monolog library comes with a handler that outputs log messages to chrome. 
the orm is decent. zend was probably the first widely adopted commericial mvc framework. some good built in validation, status, etc classes. imo it lacks good template stuff, but you can always use smarty (gross)
No. The real world calls for version control on every single project with no exceptions. I can't be arsed arguing with an idiot who thinks that version control is an afterthought. I'm sure your crappy websites go down all the time. Where I work, we have zero downtime, and I can't remember the last time a bug went live on one of our real systems. You're a fucking amateur.
Yeah, same here. Keep working on your websites from 1996 :-)
What is the specific reason that HTTPS is not supported? What is the specific reason php -S does not support virtual hosts, URL proxying, .htaccess, mime-type overriding, load balancing, logging or user directories? Because php -S is not meant to be able to do every single thing Apache can do. 
Nope, sorry, you're wrong. You're looking at the Facade layer which is entirely optional, so the entire core is entirely non-static - with a layer of static floating over the top which contains no logic, therefore has basically no non-tested code. Download it and take a look at the unit tests if you're not sure.
Are we looking at the same tests (laravel/tests/cases)? There seems to be very few core classes that do not require some sort of static property definition/usage. Just about every class in the Laravel namespace has members with a static declaration. Are you telling me it goes deeper? Shit, even looking at the application folder, which I assume is scaffolding for your first app, is filled with static method/property calls. public function __call($method, $parameters) { return Response::error('404'); } What am I missing? Im not attempting to downplay the significance of the code, I am just curious. 
You are correct in that it will throw a warning. An error and a warning are different though. Your script will execute just fine with warnings. Also it is common to turn off warnings lest you want to declare every facet of your associative arrays. 
Ahh you're talking a about Laravel 3 and I'm talking about Laravel 4. [This video](http://vimeo.com/53029232) explains the IoC and the Facade pattern, and shows how your code can be fully testable OR static if you want easy access to stuff and dont care about testing. https://github.com/laravel/framework/tree/master/src/Illuminate Look here, you wont find anywhere near as much static code as L3.
Trying it out now. A few thoughts: 1. I thought the remote db was what I wanted since I'm not running a local db, so local db fields was ignored (It appeared to be two options for connecting to a database, local or remote). Based on your last sentence, it looks like both need to be entered for it to function? 2. When I initially hit 'connect and load', nothing happen. No error in logs, no JS errors. Later found out it's in the messages/logs drop down. I was close to just deleting because nothing was working. 3. I have a mysql database with 1600 tables, and around 200 gigs of data. I told the application to switch to this database and it's sitting here loading for the last 10 minutes. I assume you're gathering stats on the tables... might be nice to make that optional to speed things up. phpmyadmin does the same thing and it makes it unusable most of the time. SHOW TABLES should be all you need. I can't comment more since it's still trying to load. lol. EDIT: It still says Loading.. but processlist in mysql shows nothing happening. Last message in the Message&amp;Logs is "Connected!" I started up a local mysql, but the sqlcraft database is empty: mysql&gt; use sqlcraft Database changed mysql&gt; show tables; Empty set (0.00 sec) EDIT2: I was able to browse schema on two other databases, still nothing happening on my large database. 
Just added support for this to [Analog](https://github.com/jbroadway/analog). It supported Chrome through the FirePHP for Chrome extension, but having another option is good!
What's the advantage to this over php myadmin?
Sorry for the delayed response here. I think it's a matter of preference really. You could say that Laravel is like the FoS RAD Bundle for Symfony, but taken a whole lot further. From my perspective, Laravel has more opinions than Symfony out of the box. For example, we have password reset e-mails (customizable), pagination views, an ActiveRecord style ORM, Rails style migrations, a unified Queue API that supports Iron.io and AWS SQS, and more. For some people, they like having all of this out of the box, and for others, they prefer the more vanilla approach of Symfony. I think it's just a matter of what you and your development team prefer.
ChromePHP and FirePHP are also handy for quick debugging of REST services accessed via AJAX calls.
I here that it does not support any logs via AJAX requests. What a bummer. I guess I'll still use it though for the little amount of non-AJAX php scripts I have. It should still be extremely useful.
When you say "fire up XDebug" do you mean taking the 1/2 second to click a line for a breakpoint? I don't understand why people use anything other than XDebug full-time.
This is more like an interface to work on queries hence the tabs and query history.
You're a professional PHP developer, and you won't invest $200 in a tool that will save you countless hours over your career? 
Based on what I'm seeing, I would use this over phpmyadmin if you could make it run faster on my large database. As it is right now, I cannot use it since it never loads the database selected..
Can you even call a 1-page site "a site"? More like a landing page. Dude sounds like he steals themeforest single-page templates for a living.
Because it's a big damn security risk. 99% of people using shared hosting are not going to need exec(), so most of them disable it, because it's simpler than trying to whitelist commands. 
Voting for Taylor has been +1 across the board so far ;).
I bought a personal license in the "doomsday sale" back in December for $25. Best value anything that I've bought for quite a while.
This could be handy, should also include the predefined format constants: http://www.php.net/manual/en/class.datetime.php#datetime.constants.types
You're welcome! I made it to have on my desk, as the software I develop uses dates extensively, and I'm terrible at remembering the format characters, so I was spending a lot of time on php.net 
Most of these points have nothing to do with PHP. Only about 5 or 6 at my count. Most other things are simply general tips for any site using any language/framework.
This is much cleaner that the standard docs
Thanks for the suggestion. I was trying to make a small, postcard sized reference. I don't think all that would fit. Feel free to modify it though, if you would find that more useful :)
Are you slow or just really really trying hard to be an asshole? See, there are tow types of websites. One are dynamic, and one are static. Sometimes a site need not to be dynamic, but still has to be made. Other times a site has to be dynamic. I don't fucking know, need I draw this for you? Hand me some of your crayons. Just not the one from your ass.
The general tips are applicable to PHP, just they are to Ruby, Java, Python, Perl, C++, Javascript, etc. This does not make them less important in PHP - it makes them universally essential and applicable in any anti-XSS list for PHP.
Laravel is created and maintained by one lead developer, with a community of contributors. He is also paid to work on this by his day-job, meaning he puts more hours into actual development of the framework than many other framework developers. CodeIgniter is created by a company which has not put more than 5 commits into the core this year. Their community "Reactor Engineers" have all quit or gone inactive, other than one guy who merges pull requests that look reasonable. If I'm going to use a framework that has "one guy" on it, I'd much rather use a framework where the company behind it is actively putting time and effort into its development, instead of letting it die by refusing to style the docs and release the next major version, which has been sat ready to release for _months_. Just sayin.
Ignore the hyperbole. This was something that appeared in Laravel 3 which used to piss me off, but the new design will contain considerably less of that noise. A genuine suggestion here is that you try it and review the framework on its merits, not on the over-the-top copy, which really needs to die.