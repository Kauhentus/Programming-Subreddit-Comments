Doesn't explain why they disabled OPcache.
Yeah that one is weird. Maybe to stop differences between first run and subsequent runs?
&gt; The requested package cakephp/cakephp No version set (parsed as 1.0.0) is satisfiable by cakephp/cakephp[No version set (parsed as 1.0.0)] but these conflict with your requirements or minimum-stability. That message tells me that your composer require command had a syntax error. Try running this: composer require cakephp/cakephp:"~2.9" 
come again?
They are, not everyone is using IDE plus I think and type faster if I don't have to wait for IDE to show me the hint to pick correct order, I could write it straight away without pausing or even looking at the screen. And that's just one of many things broken PHP. 
Youcre experiencing the vagaries of floating point maths. http://0.30000000000000004.com/
&gt; composer require cakephp/cakephp:"~2.9" Same error
Symfony is for frenchs 
Two good, if simplified explanations: https://www.youtube.com/watch?v=pQs_wx8eoQ8&amp;list=PLa6IE8XPP_glwNKmFfl2tEL0b7E9D0WRr https://www.youtube.com/watch?v=PZRI1IfStY0
I've found some resources talking about this. https://bugs.php.net/bug.php?id=75004 https://github.com/symfony/symfony/pull/24036 It seems to give a useful result by doing this: (int) (string) (553.30 * 100) // 55330 Compared to: (int) (553.30 * 100) // 55329
I write PHP every day and never get stuck on argument order. I dunno what to tell you.
It really depends on what you are trying to do. You could either use rounding/number formatting if you are displaying the data. Or use BC math if you require arbitrary precision mathematics. http://php.net/manual/en/book.bc.php
your by_line() is a shortcut of my by_chunk() method, the point of implementing by_line() method in this library is to process the lines of a file, i define a line with chunk of bytes that terminated by a line break, do you get my point? as mentioned in the docs by_line() method is not memory efficient whereas by_chunk() method that is memory efficient
&gt; You are missing the whole point of the research. No, I'm not missing the point. I just disagree with it. &gt; Our test was focused only on the performance of PHP runtime But not in a real world use case, which gives the users false expectations of what to expect in a real world application. &gt; but you will always have that one request not hitting the cache Unless you pre-warm your cache. &gt; Always will be that significant percentage requests not hitting the cache. This is just incorrect, unless you are using a effective caching strategy. &gt; When you reach your limit (e.g WordPress architecture) you could achieve better backend performance with better CPU. There is a hard limit with increasing CPU though, which is what proven strategies like caching and horizontal scaling solve. &gt; There is no need to spend thousands of dollars on single VPS instance with a large number of cores and RAM. If you have scalability issues, just buy a few smaller instances and put it behind LB. Now you're flipping your stance from pushing single thread performance to scaling out. The whole point of your article is not scaling out, and now you are saying to add more instances is more worth it than adding a higher thread count instance, but you show no tests for this use case. 
I think Composer has a similar project: https://github.com/composer/ca-bundle It sounds like yours is geared more towards always having an up-to-date bundle, whereas theirs is more for locating the system's included bundle (and falling back to a remote one if needed). Would that be an accurate comparisson? As a follow-up: would this be something you think Composer should be using instead?
Personally I've never used AWS. I just use standard VPSes from Linode/DO/Vultr. They all have fixed prices, and assuming you can set up a standard Linux server already, you don't need to learn any vendor/host-specific way of doing things. 
No.
The release can not some soon enough! I really like the way PHP is going right now, was scared for the future around the 6th release, but 7 is doing so much good, way to go! Well basically everything from 5.3 is amazing
I renamed it to FreeDSx. Updated with the new ink. What does the 'x' stand for? I have no idea. Mostly because FreeDS was taken on github. And freeds also happens to be some sort of Canadian clothing store. I hate naming libraries.
https://github.com/paragonie/certainty#how-is-certainty-different-from-composerca-bundle :P
This looks to be an artifact of default precision and what type of variable you are echo'ing out. explicitly setting the precision and using var_dump instead of echo provides a bit more detail as to the behavior: https://3v4l.org/a7su8
Screw php 7
I want enums, ability to type any variable and property, dependent types, and a built in language concept of roles (as in DCI). And yes I realize that combination of things on PHP may not be a great fit for PHP. But still it would be super great to have them.
So what?
/r/phphelp
Petah, you just don't get. Let's use one website for example. (one you are familiar with). [thescullery.co.nz case study](https://drive.google.com/file/d/0B4hZIdZiAfw3UkhKREdMcDJHSUE/view) Research **is focused only** on that 3.81 second. Research **was not** focued on 13.18 s of total page load UX. And that 3.81s matters a lot. Did you get it now? 
congratulations!
Whoops. That's what I get for only reading half the README 🙃 I really like your approach - it would be great to see this gain wider adoption!
Thanks. I'll start bugging the Magento, Joomla, and Drupal teams. (I've basically given up on WordPress until their leadership grows up or changes hands.)
As usual, reddit idiots voting on the matters they have no idea on. The only person interested in the new security release would be a sysadmin/security officer. And the last fucking place where they should learn of that is Reddit. Every fucking one else shouldn't have any interest int he version which active development phase stopped a fucking year ago. But yeah, it's Reddit. A model example of the Herd mentality.
Ah, the downgrade I've been waiting for. My code's been running far too fast.
I agree that sysadmins don't see this, but still, a new version is a good thing. Maybe you are lucky, we still have some 5.2 around, no updates for that :'( :)
Personal favourite example: &lt;?php echo 1.0 - 0.9 - 0.1; // -2.7755575615629E-17 My advice, if you're working with money, work in the lowest derivative if that currency. For example, store $1.00 and 100 centre in the database and then just / 100 in the view
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Can't speak about ADR pattern itself but there is no point to use action injection if you have only one action per class. Constructor injection is cleaner (and easier to configure if you need to manually override one of arguments)
Oh yeah, your old legacy shitcode is a justification for posting a link to bugfix release on Reddit. 
Thanks mate.
Well I thought it would be useful in that way. I guess. Thanks for your feedback. 
What do you mean? This new is relevant for about 70% of the people that use PHP: https://semaphoreci.com/blog/2017/10/25/php-versions-used-in-commercial-projects-in-2017.html
Well mate I read the post and thought it can be useful that's why I shared with community. 
For a weekend project like the one presented with minimal entities it's perfectly ok. But don't worry, you can split them with API Platform if you want to (and indeed you should for medium and large projects).
Yes, because everyone works in an idealistic world where every business has a great syaadmin team and security officers and a full test suite for their application. Oh, and there's no possible way anyone could run PHP at home for a personal project or anything like that. /s Seriously, this has to be one of the stupidest things I've ever seen to get annoyed about. Why do you even care if others are excited about a new release of a programming language? What does it change?
What does this have to do with the Lightsail VPS service? Surely your distribution is more relevant?
Well, if you don't get it what I mean. 1. This is relevant only to persons in charge for the server infrastructure. 2. And their information source for the bugfix release should be anything but Reddit. Because they have to be in touch with ALL bugfix/security release regarding the infrastructure used, be it PHP or any other software. 3. Given all that, Reddit is the LEAST reliable source of information. 4. People voting on this link are doing it not because it's of ANY importance of them but just out of the herd instinct.
And in what particular way it would be useful? For example? 
Again. If this particular information on the bugfix release for the old PHP version is of any importance for you, and you rely on Reddit as the the information source, you are fucked already. There are PHP maillists, security maillists, sysadmin maillists. If you are a **real** person who really care for the software versions, you know of the release already.
&gt; The only person interested in the new security release would be a sysadmin/security officer. And the last fucking place where they should learn of that is Reddit. Most sysadmins realise that their repos they get 5.6 from won't update same-day, so it's fine to find out about a release on Reddit. They also need to read the release notes, work out if it's a risky update (usually not), schedule in a maintenance window and do the update. This can sometimes have a lead time of a few days. More if they need to ensure that the update won't cause problems (i.e. deploy the update to a staging server, run the tests (manual or otherwise) and file any failures back for fixing). If your updates are fire-and-forget, then that's great for you, I just hope you don't get stung by a release-day issue in a part of PHP that got broken and had no useful tests. (Granted, last time this happened was 5.3.6 to 5.3.7; 5.3.8 followed 4 days later. Once bitten, twice shy).
&gt; it's fine to find out about a release on Reddit. It is not. The essential thing about reddit - it doesn't guarantee that the information will be delivered. It's a news / entertainment site. But I am tired of this discussion with people who never ever applied a bugfix themselves, but extremely concerned for some other people who possibly might.
There is a lot better examples of bad reddit than this. You are moaning, that news of a new release for PHP5.6 (which is the most used version), is posted on a subreddit which is all about PHP and news related to PHP? Dude, if this pisses you off, I would suggest you have a lot of problems in life.
They are voting on the link, because it is relevant to this subreddit.
Am "moaning" not on the link itself, but rather about the rabble that is so impressed by it :)
Former part-time sysadmin here. Now I run small software house. I'm feeling sad about what you wrote ;( 
And why does it bother you so much that it was posted on reddit? General awareness is good, and if an article doesn't interests you, just don't click it lol.
&gt; Given all that, Reddit is the LEAST reliable source of information And thus the post is a link to an official source.
Why though? The whole point of the reddit voting system is to upvote relevant content. How is this NOT relevant?
I don't really understand why in a rant like this someone would still phrase as "to prevent SQL injection one should **validate the input**", not "prepared statements for the data, white list for anything else fro the eeverq SQL query you run". The word "validate" doesn't have any fucking particular meaning, while stressing the word "input" is a straight road to the second order injection.
And what is particularly sad about this?
it's relevant but not important. But yeah, you are right. Voting is never relevant, given voters are not chosen specialists but just a herd of people
You're making a no-true-scottsman argument here. Think of it this way. Reddit is the news/entertainment site. Thus on my commute to work (via bus and train), I'm going to be reading Reddit. When I get into work I then read my release announcements. If I find out about a PHP release via Reddit then that's fine. If I don't then I find out about it at work from release announcements. People consume media at different times. If they find out about a release via Reddit then that's fine. What you're possibly wanting to say is that if the *only* find out about releases on Reddit, but that's not what you argued.
Because it is the last fucking place where I should learn of that :( 
you can easily overlook it. you can be sick, you can take not a train bat carpool and chat with a driver. It can be just pushed out of the default feed by some recent hype. Come on, am I really explaining this kids schoolbook stuff? To a person who don't give a fuck but just entertaining himself? I should've found a better way to waste my time. 
&gt; you can easily overlook it. you can be sick, you can take not a train but carpool and chat with a driver instead. It can be just pushed out of the default feed by some recent hype. &gt; When I get into work I then read my release announcements. If I find out about a PHP release via Reddit then that's fine. If I don't then I find out about it at work from release announcements. JFC, read the rest of my reply. Who died and made you Content Czar for /r/php?
&gt; What I don't like about "Principal Analysts" that their recommendations are never certain or practical. I'm not sure does such lists do more good or more harm. Of course raising awareness is a good thing, but if people went to base the security model on a bullet point list, it starts to get dark. I think the #1 point in such a list shoud be "Develop a security mindset" or so called professional paranoia. It's never trivial to write secure code if the system is anything but tiny, this is the reason why it is vital to think from the ground up with security in mind.
&gt; there is no point to use action injection if you have only one action per class. Could you clarify something for me please - do people talk about needing to have separate objects for actions, just because they are using depdendency injection libraries that only support constructor injection? i.e. the DIC library is unable to instantiate and execute 'Foo::actionOne' for a class like: class Foo { // No constructor public function actionOne(Twig $twig, Session $session, string $someRouteParam) { ... } public function actionTwo(Twig $twig, BarRepo $repo, string $someRouteParam, $someOtherRouteParam) { ... } }
Symfony's autowiring is now able to handle cases like that. In ADR, from what I understand, it is typical to have one action per class.
I'm assuming you are referring to the `HelloAction` class? Would this be better? HelloAction.php class HelloAction { /** @var HelloResponder */ private $responder; /** @var NameResolver */ private $resolver; /** * HelloAction constructor. * @param HelloResponder $responder * @param NameResolver $resolver */ public function __construct(HelloResponder $responder, NameResolver $resolver) { $this-&gt;responder = $responder; $this-&gt;resolver = $resolver; } public function __invoke($name = null) { $responder = $this-&gt;responder; return $responder($this-&gt;resolver-&gt;resolve($name)); } }
&gt; $responder = $this-&gt;responder; What's the point?
 This allows my responder be any callable rather than only an object implementing invoke 
&gt; DIC library is unable to instantiate and execute First of all **DIC does not execute** - it simply isn't a job of a container. Executing is usually the router's job (symfony separates it further but that's irreverent). Why is it a problem? * We now rely on the router (or like) to do DI's job. Besides violating SRP we are also losing the ability to properly construct the dependency graph. This means we can lose optimization opportunities (good case) or waste cpu/memory on instantiating things that we won't need (bad case) * Container can no longer be initialized without the router - while not a huge deal, it creates additional complexity * We can no longer use the existing DI configuration infrastructure - it needs to be duplicated in the routing layer. This isn't a problem when you are using autowiring, but what if you want different loggers in different actions? * We now rely on router's integration with the DI. This might not be a problem for an application which is unlikely to change the framework but it still can be a problem for building a reusable library (or any reuable code) or in cases where you manually pieced together your framework from different libraries
I don't see a point in this. Even in js I find this completely unreadable as ppl have started abusing that by using them everywhere not only on oneliners. And I'm afraid that the same would happen in PHP
Can't you just do ``` return $this-&gt;responder($this-&gt;resolver-&gt;resolve($name)); ```
Are you autistic?
&gt; there is no point to use action injection if you have only one action per class One argument in favor of using action injection is that you don't need a constructor and you don't need the code which stores the inject arguments into properties. So less code to write, read and maintain. Is it worth the extra overhead that action injection requires as well as coupling your action classes more tightly to the Symfony framework? I guess time will tell.
Codecourse has some videos on using slim. It is a premium service, but some of the videos are free. this particular series might be useful for you: https://www.codecourse.com/lessons/slim-controllers Otherwise, here is the main website. Hope it helps https://www.codecourse.com/
I am idealistic :)
You might benefit from being officially diagnosed :)
Come on kid, go back where you are usually playing. What is discussed in this sub is too complex for you. Go already.
Right, because the only reason for posting about new PHP releases in /r/php is to ensure everyone knows about the release. /s
Yeah, I don't like my code running faster and more efficient either. /s
You cannot tell a bugfix from a new release, but keep ranting here. You guys are the funiest herd of monkeys I've ever seen in my life. No shit :) 
Wow, some of the comments here are totally unnecessary. That said, 5.6.32 was released a month ago now, and if you haven't updated yet, you're either on PHP 7 or asleep at the wheel.
Nah, that wouldn't be possible seeing it as `.` is string concatenation. What is the result of this: print $foo.$bar; Is it the concatenation of the string representation of `$foo` and `$bar` or is it the content of the property named in `$bar` on object `$foo`? I think arrow functions makes good sense in PHP. I love the shorthand way of using callbacks: return list.map(v =&gt; v.id) It looks super clean and is much more readable than: return array_map(function($v) { return $v-&gt;id; }, $list); But I suppose it's subjective whether it looks better.
Anything can be abused, but abusing the syntax means you're not _usually_ writing clean and maintainable code, which you wouldn't do in _any case_ if you couldn't abuse these things. I think arrow functions makes good sense in PHP. I love the shorthand way of using callbacks: return list.map(v =&gt; v.id) It looks super clean and is much more readable than: return array_map(function($v) { return $v-&gt;id; }, $list); Imagine PHP supporting arrow functions: return array_map($v =&gt; $v-&gt;id, $list); return array_walk($list, ($k, $v) use ($obj) =&gt; { $obj-&gt;doStuff($v-&gt;id); }); _Personally_, I'd love that to be possible.
This was written from a viewpoint of frustration and minimal empathy towards developers. &gt; But seriously, how freakin' hard can it be to validate inputs? Validate according to which grammar? And why do people assume that "validate" is the correct verb to use here? /u/colshrapnel is correct here. "Prevent data from contaminating your code" is the better security lesson to learn, and "prepared statements" are the relevant SQL tool to learn here. &gt; Your developers are sick of listening to rants about injection. **No, our developers are sick of listening to *rants*.** Full stop. Especially rants about security from, frankly, people whose background is a little light on security and communication. People who are likely to describe themselves as "[name] is Principal Analyst of [firm], focusing on enterprise and carrier topics" rather than "[name] is a security researcher from [firm]" are much harder to take seriously because they've obfuscated any skin they have in the game. Want to get developers to actually learn about fixing security problems? (Keeping in mind that they might not get a chance to, depending on their relationship with their employer.) Advise them to read [something like this instead of a checklist](https://paragonie.com/blog/2015/08/gentle-introduction-application-security).
I think the date on that page is wrong by a month?
`__invoke()` won't work that way, at least, not the last time I checked.
Sure. But it doesn't justify such a feast "woohoo, a new PHP version just released!" anyway :) 
Actually, yes. https://github.com/php/php-src/commit/6f21492505dd554667f70884b46802f2fb81c210
Because they upvoted something I don't want them to upvote &gt;='(
Wow that grep bug is nice! https://3v4l.org/6DrXq 
I work with php available on my clients servers :D as long as they pay me don't have any issue into work with older php versions and 5.6 is not even older, 5.4 on the other side... 
oh yeah, my bad. really use classes as callables...
To me it's also confusing: I can't easily understand which arguments are request-scoped and which are application-scoped
Symfony sucks
Fucking symfony
Right. It's Ubuntu 14.04 Thanks.
Four weeks, six days. TICK TOCK
Never used ADR before, so honest question: What's the point of making the responder invokable? Wouldn't it make more sense to have `$this-&gt;responder-&gt;prepare()` to avoid the whole invoking in another class nonsense? As far as I have read, the only reason you implement the invoke magic method on an action is so that it can be easily called by the router.
Cool! Waiting for that proxy:)
I wrote my example after reading this. https://github.com/pmjones/adr#adr-revision My only thought is that if the responder is a callable, it could be a function, a closure, a class implementing __invoke, or a static method. I'm not sure how these would be injected, however, so it might not make sense in this context.
Now I want these notifications every day
Can you give an example with method overloading? A bit confused right now
To me it is showing December 2018, https://imgur.com/a/utZsj Whereas it's 7.1 which EOL happens in December 2019
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/4M4TOVB.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20doz6v9k) 
Thanks!
I review your gist again, I will use code in ridona in future commits, nicly done, you should put a while loop in by_line() like: public function by_line() { foreach ($this-&gt;fp() as $file) { while ($line = fgets($file)) { yield trim($line, "\n\r"); } } } thanks again for fp() method, I absolutely use it in future versions
There's the problem, no one pretty much tells you you should split them. (Rails syndrome)
I can't help but wonder if this Chrome extension is bundling malware, and that's why it's suddenly being spammed all over Reddit today? That happens. Someone gains/buys access to a popular Chrome extension, pushes an update, infects users with (at best) adware. I wouldn't touch this with a 30 foot pole.
Perhaps you could specify a function explicitly when wiring up your dependencies in the DI container or something. I may have to use ADR on my next project to see what it's all about!
what year we are?
Hey, are you running Docker on a Windows machine? My performance is terrible running simple scripts, not sure if I need to configure Hyper-V better?
Who the heck said I am stuck? It's annoying that's it. And the reason for that is that php is pile of crap. Period. Obviously you don't know any better so you are saying it's OK. I use PHP everyday for several years and really enjoy days when I can use something different that is not crap like PHP
Serious question: How many people are regrettably still riding the Hack train? There can't be many.
I use many other languages... Python, Java, Javascript, C#... It's not ideal, but it's really not a problem either.
It's not very nice to complain that other people have not yet built an open source solution for you. If you really need it and it doesn't exist, why don't you start building it?
sure. I created [this class](https://github.com/runninguru/notify) to help me display notifications to the user. I originally wanted to create two addNote() methods: one that allows you to add a single note, and one which would use the splat operator to allow you to add multiple notes at a time. (if you want a view of what that multiple-note method would look like, check my previous commits) The problem is, this isn't allowed. I would need to name that function something like addMultipleNotes(...){} The PHP answer to faking method overloading is this: 1) provide all method parameters which any of your 'overloaded' methods would need. 2) make them optional parameters by providing default values for each parameter 3) in the method, check the value of each and every parameter. 4) use a switch or an if-else-if-else chain to execute the code which corresponds to the 'overloaded method' that you want to execute. As a result, the method will be huge, complicated, and needlessly complex. But, you do get to fake overloaded behavior.
CakePHP 2 are totally incompatible with CakePHP 3.x, I suggest install both in separate folders and use something like alias or virtual host to access it
Well, that would require me to stay focused on PDFs for years of my life. I just want to reliably print a document with some dynamic text on it so my client can collect a signature.
i used to have this same feeling until i realized that i don’t have to write everything in PHP. spending an afternoon learning how to setup say a pdf service in python or ruby might be more worth your time then you realize. that being said it’s a bummer but there workarounds. 
This is not elegant, but the solution I used long ago was to write PHP that generates LaTeX, which is compiled to PDF. The LaTeX to postscript to PDF pipeline is old and mature and reliable. Another possibility depending on requirements is Pandoc. 
I've been using TCPDF and FPDI for many years with excellent results. 
I agree, there are some nice libraries out there. Just not any that are for PHP, which deserves one.
I read about TCPDF, but it's in a weird state where one version is no longer supported and the next version is not ready. So I decided not to spend my time investigating it. Will it fill an existing Acroform? Does it install on Centos 7? I read about Setasign, but only saw information on their commercial product and not FPDI, which looks like a useful bridge back to FPDF
Nobody probably ever patted you on the back for that, so here's an upvote. Adobe, in their infinite wisdom, created two ways to do forms in a PDF. Acroforms and XFS. Because they are Adobe and they love fucking with us, getting us hacked, making shit up and abandoning it, they seem to have stopped supporting XFS at least in some degree and it breaks alot. My personal hope is for PDF to go the way of Flash and DIE()
My go to is wkhtmltopdf. It is not a PHP library, but thats okay. I just generate the HTML and then send it over to wkhtmltopdf and I'm done.
So what you're saying is you really have no legitimate claim to be bitching, and the thread starter literally hit the nail on the head. You're just bitching that other people haven't built you free software yet... [DjVU is better](https://github.com/jack-theripper/php-djvu/blob/master/README.md) to begin with, anyways.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jack-theripper/php-djvu/.../**README.md** (master → fed10be)](https://github.com/jack-theripper/php-djvu/blob/fed10be3ecd4e93ca8fdcbed2d1260bb2ed92770/README.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Judging by your replies here--good Lord you're a piece of shit. If you're not flexible you're not a good developer. The reason why there's no real good PDF Library for PHP is because it doesn't make too much sense to use PHP to handle PDFs... The correct solution to your thread here has already been posted. If you want an amazing PDF library for PHP then make one--or use one of the several thousand decent ones that aren't made for PHP. Stop shiting on other people for not having done it for you... "Veteran PHP hacker." It should be **super simple** for you.
I know a number of languages and I choose which to use based on the tools available. Bitching, making an informed business decision, whatever you want to call it doesn't really matter. I don't have the resources to build such a library.
Nah, I have at least some emotional maturity. Thanks for the offer though
Nit sure I understand why the extra while loop, since fp() is already in a do...while.it will return the same pointer until it reaches the eof, I think the extra while might be a micro optimization, to not call the fp generator on each loop. 
Same here
Nope, I'm on linux for development.
That's exactly what we do in our legacy app as well. It's a bit of a headache to get things formatted just right for pagination etc but it mostly just works.
&gt; I don't have the resources to build such a library. Why do you believe other people have the resources to do that then? The PDF spec is insanely huge, nobody is going to do that for free. 
If OP was more self-aware it'd be a great post for r/fossworldproblems.
Yeah, it doesn't get everything right, but for most things it works just fine. I hate dealing with PDFs.
Yeah this is way easier. I've done actual pdf generation before and it made me suicidal.
Are you asking me for the names of some fortune 500 companies that develop open source products?
PHP is not meant for creating documents, it's designed for a web server. Better to let a more powerful program like crystal reports generate PDFs for you. PHP can easily open a socket connection or command line application that generates a pdf.
I didn't really suggest a PDF spec should be supplied with native PHP. But I didn't expect such an emotional response to this post either.
I'm currently using a combination of headless chrome and Zend/PDF with great success. I pipe html to the chrome instance over websockets and then feed the raw PDF stream into a Zend/PDFDocument object that I can further manipulate (add headers/footers, etc). It handles 500 page PDFs no problem. Note that headless chrome requires centos 6. Planning on open sourcing the chrome library but haven't got around to it. I've hacked some missing PDF features into Zend/PDF, haven't looked into acroforms yet but I'm sure it's possible.
You can say the python, ruby library is not a taboo here, at least not to me I'm not a php fanboy
Headless chrome
That’ll teach you to make an observation about PHP not being perfect! I hope that the next time you realize that a convenient library does not exist, you will 1) keep it to yourself, 2) drop everything else you’re doing, 3) build it from scratch, 4) submit a pull request to the people who just shit on you in this thread, and 5) bob’s your uncle. Good luck!
Seems like the general consensus is that php isn't always the right tool for the job. Microservice from another language and call it from php to do your bidding until either you or someone else provides this lacking library.
Great slim api tutorial by Chris Cornutt at https://websec.io/2017/04/14/Build-Secure-API-Part1.html
Congrats. Also does anyone know if cakephp 4 plans on keeping those load component methods and what not? Hope they don't stick with that in future versions.
I think "piece of shit" may be a bit harsh. Fishy_water was just fishing for a PHP based solution that he hasn't heard of yet. He probably genuinely wants to know why there isn't a library for such a common problem. Is there a technical reason why?
That's kind of hardcore. I stopped touching framework sourcecode a while back when the need to update put me in a spot. Now for the 500 page part, I'd want to know if you were doing drafting/geometry stuff, and what the server specs look like before I could comment. I haven't checked out Zend in about 5 years, at last look it was not exactly lightweight to have around. But things have improved by *a lot* in the PHP world and damn that Zend team has been doing framework development for quite a while. They've probably gotten better. Bravo for making it happen
I used to write software at a printing company and heavily used pdfs. FPDF was my go to but we got to a point where it couldn't do everything. I wrote some code to extend upon what it had but some things were just too hard with php and I just turned to running command line tools that could do what I needed. I'd advise from the start finding a powerful library in any other language and write a microservice or something around it that you can easily speak to php with. 
&gt; I just want to [...] These 4 simple words are so often seen in the most toxic requests on Github. You just want other people to do the work so you can use it for free. You just don't want to be bothered with maintaining a solution for other people, they should do it for you. If everybody had this mindset there would not be any open source.
You must be using Centos 7? It looks like someone did a [repackage of pdftk](https://www.linuxglobal.com/pdftk-works-on-centos-7/) using libgcj (now missing from centos 7) from Centos 6. I've not tried it myself, but if it works, then it would allow you to use [mikehaertl/php-pdftk](https://github.com/mikehaertl/php-pdftk) which is about as simple as it gets for filling acrobat forms (and just about anything else pdftk can do). You can drop your data to an FDF file and then import it to the form, or simply feed it an array and let it do the work for you. I used to go the TCPDF route and this saves so much time. It may be worth a shot for you.
On top of that, it is blazing fast. Rendering a 30-40 page report of tabular data inside of other tables in FPDF took several minutes. Wkhtmltopdf is instant. Saved my sanity.
PDFSharp is that good? I'm actually updating an old ASP app that creates some PDF forms using FDF and I'm considering doing it in C# with PDFSharp. Sorta unrelated to PHP...
Docker, PHP 7.2 now with 20% more PRNG free!, more robust PHP-FPM, new &amp; improved composer to facilitate all kinds of autoloading, and PSR standards to help best practices app development...? Did I win? How do you play this game?
So you need to fill out a PDF form? can you post an example of the file you need to fill out. 
Why? Pdf is actually great for usability and portability.
.idea folder in repo *triggered*
Same here. TCPDF is literally unusable compared to this. Using HTML to build PDFs is the best and easiest way to build something nowadays.
As a developer I charge for my work. I charge a lot sometimes. Having said that I, and the people I work for, work with, etc don't mind paying for good products. We use PrincePDF through the service DocRaptor. Have _yet_ to have a problem and their support system is excellent. You get what you pay for.
The password exists in the database, not a PHP file. You will need to figure out which password hashing function Joomla is using, hash the new password you want to use, and update your user record in the database with the new hash.
You in order to win you should try to post a shitty blogspam and fail even with that.
I have years dealing with PHP and pdfs what exactly are you trying to do?
Sometimes comments on a topic make one realize how dumb he is on dealing with an unrelated topic. I've been jumping through hoops to exec() command line node code from PHP to deal with stuff PHP couldn't do simply when it didn't occur to me I could just set up a node microservice and make it much easier to use / maintain / deploy / share to other applications. Thanks for shedding light on how stupid I am, not when it comes to using other languages, but on how to do it without hating yourself for it.
Why? Also, go to slide 35. Take a looong look.
It's just PHP, so is OS agnostic. It recently went namespaced, which is long overdue. I use fpdf for generating PDFs from templates. I read in the pages, overlay text, then combine pages in the correct order. Creating documents from scratch would be a clumsy though.
&gt;Thanks for shedding light on how stupid I am I don't know of any people in our industry who aren't at least a little bit stupid from time to time. It's incredibly easy (and human) to get tunnel vision over a potential solution and miss the point where taking a different path is the better option.
 - [Not PHP] If a client wants PDF of document and doesn't need some Form PDF or to fill out an existing PDF, I use Wkhtmltopdf as long as its a simple requirement. Or I just tell them to print the webpage in a modern browser as those have save as PDF options and I just focus on making the web page printable. - [Not PHP] If a client has an existing PDF that needs to be filled out and its a Form PDF, I become happy and use PDFTK. If they need a wet signature added to the PDF, I then create an additional PDF with the same document dimensions and draw the signature with FPDI and use PDFTK's multistamp feature. Hint, FPDI does not preserve Form PDF data entry so if you try to load the Form PDF into FPDI and save it, the existing input is lost. - [PHP] If a client has an existing PDF that needs to be filled out and its not a Form PDF, I cry and suck it up to use FPDI and manually map each coordinate. I also offer to convert their document to a Form PDF using Libre Office (forms tool) and export as Form PDF (If they have the Word doc) or Adobe Acrobat Pro if they don't have the original document (does a pretty good job at mapping possible inputs automatically and saves a lot of time) - [Not PHP] If a client has multiple PDFs, some are Form PDFs and some are regular PDFs and they wanted them all filled out then merged, I cry.... You cannot combine Form PDFs with non Form PDFs without losing input, so... I install CUPS and print the Form PDF as a regular PDF (flatten), and use every possible other technique already mentioned. - [Not PHP] If a client wants a really dynamic PDF with things like tables, paragraphs, etc being added depending on logic, then I don't recommend PDFs instead Docx as I can then do templating. If they still really need PDFs then I install Libre Office and push Docx files to Libre Office to export as PDF via command line, normally some Gearman setup with Xvfb. Note, you can only have one Libre Office process running PER user on the system, so any hopes to have multiple processes running is only possible by have multiple users running Libre Office processes. - [Not PHP] If a client wants some type of detailed report such as an invoice, or some really complicated setup with repeating headers but only on some of the pages and then some type of QuickBooks invoice footer, I use Apache FOB. Incredibly powerful, and complicated but has worked flawless.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
[removed]
This should help you out: https://docs.joomla.org/How_do_you_recover_or_reset_your_admin_password%3F If you really get stuck, head on over to /r/joomla 
What's nice with realising it is that the mix of shame induced by missing something and of satisfaction that the gotcha brings is that it ties a concept with a use case straight out of *your* real world, making it easier to grasp than by reading articles, however inspiring they may be. Feeling stupid and keeping learning is another aspect of this trade that keeps it from getting boring.
Not particularly other than there are many other languages more suited for that type of work. It's like using a car to haul wood. It works, but just doesn't make much sense unless it's *literally* your only option.
You just have to do your due diligence and search. Setasign does have a commercial product that does exactly what you need. Additionally there's this stack overflow post that seems to answer your question https://stackoverflow.com/questions/9139787/how-to-fill-pdf-form-in-php
PDF is very important to the printing industry, it's not going away any time soon. 
It really does solve a lot of problems, and in many cases it's currently the best available solution. I hope someone more knowledgeable than me will comment, but I've heard that trying to implement the PDF specification is a great way to lose your mind. The format has existed for several decades, and has evolved a lot, while having to maintain backwards compatibility. I imagine a lot of dirty hacks are involved, introducing weird edge cases that the specs don't account for. There are also quite a few security issues, with new vulnerabilities being discovered almost constantly. And some of the ways PDF's can be "protected" are so easy to bypass that any idiot can do it (opening the file on a Mac or in Google Drive, and then printing it to a new PDF will result in an unprotected file). Here's a wall of text dedicated to PDF hate. It seems pretty old so I'm not sure everything is up to date. http://wiki.c2.com/?PdfSucks
Combined with [snappy](https://github.com/KnpLabs/snappy) it's very usable. We've had fairly significant segfault issues with it though, about 0.5% of the PDFs we attempt to create seem to segfault and we've had terrible trouble trying to isolate the cause down.
Imagemagick extension. Export as pdf. Works great!
Wkhtmltopdf is by far the best solution, unfortunately its not always an option. But nothing is stopping you from creating (or improving) a pdf library! 
Here is a commercial solution to fill AcroForms with PHP: https://www.setasign.com/products/setapdf-formfiller/details/ 
We use that too. It works well with a few hiccups along the way. Might want to look into headless chrome, I hear that is pretty decent for pdf rendering
&gt; Are you asking me for the names of some fortune 500 companies that develop open source products? No, I'm telling you nobody doesn't how you anything. You're not the center of the world. Arrogant prick.
Only if you don't pratice Gor sex.
Thank you information 
Sounds great thank you for the help 
http://blog.rustbeltrebellion.com brad@T540p$ dig blog.rustbeltrebellion.com ; &lt;&lt;&gt;&gt; DiG 9.10.3-P4-Ubuntu &lt;&lt;&gt;&gt; blog.rustbeltrebellion.com ;; global options: +cmd ;; Got answer: ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NXDOMAIN, id:47713 ;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;blog.rustbeltrebellion.com. IN A ;; AUTHORITY SECTION: com. 900 IN SOA a.gtld-servers.net. nstld.verisign-grs.com. 1509203554 1800 900 604800 86400 ;; Query time: 28 msec ;; SERVER: 127.0.1.1#53(127.0.1.1) ;; WHEN: Sat Oct 28 11:13:06 EDT 2017 ;; MSG SIZE rcvd: 128 (Broke my DNS to http://rustbeltrebellion.blogspot.com when I turned on HSTS and didn't put the work in to ensure CNAMES would continue to resolve, and now at least a couple years later I'm not sure if anything on my domain responds to any requests... blogspam fail enough?)
No longer being disclosed as planned as dialogue has resumed with the WordPress team https://twitter.com/ircmaxell/status/923907743555178496
Thanks. As a WP site owner, can you suggest me what precautions I should take, and how serious is this threat?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; Due to the overwhelming response, we apologize that this offer is temporarily unavailable. Post it again when it's back.
I just use LaTeX for all my PDF generating.
Glad I am not the only one who does this.
Just use wkhtmltopdf. Yes, you need to install it to server, as it's not a PHP library, but it does exactly what I ever wanted from a PDF generator. AFAIK, it's actually something like a headless browser, so the PDF looks almost exactly the same as the source HTML file. Never had problems with it.
TCPDF is clunky but by far the best and most complete native PDF generating library I've come across
hey if you don't like my observation, that's your right to not like it
I believe that as the threat hasn't been disclosed, there is nothing you can do at this moment. Just keep an eye on developments by tracking Twitter and install all security fixes as soon as they are released. Good luck
awesome post, thanks. I am referring back to this thread the next time I need to
SQLi injection can nuke your entire database. So make sure you have backups.
I should rephrase that, I actually like the fact that some browsers have their own PDF viewers. It's Acrobat I wish would die, along with Adobe's involvement.
I think that just saying he was going FD (I would wager that he's bluffing) was to spur the WP team on to address the issue since he said he been trying to work with them for &gt;5 weeks.
sounds promising, thanks for the info
It has done everything I wanted it to do so far - drawing, paging with headers and footers, filling in existing PDF forms. I can't speak to it's efficiency with server resources. Interestingly, C# can now run on Linux and I considered trying that on my Centos 7 instance. I'm not there yet. Even more unrelated still, PDFSharp is also available for Java
Thanks. Any idea if it can create pdfs that can be digitally signed by users? I'm still looking into it, but we're finally getting approval to upgrade this little bit of functionality so I'm looking for a decent solution
I always thought that was the strength of PHP. Want to encrypt something without having to grasp all the concepts of encryption in every flavor? mcrypt / opensll. Done. And I have used the curl stuff in great ways too at a time when other languages make a big rabbit hole of that type of thing. But again, I'm not saying PHP owes anybody a PDF library. I'm actually saying that a vacancy exists to develop such a thing. Other posters have made some really good suggestions. I have a big pile of resources to check out now and I'm not whining. It's called *communicating* and I enjoy it. Makes me a better person
I would be pretty surprised if it didn't support digital signatures. Good luck, enjoy!
Thanks!
In your opinion, what is php missing that would make it more suited?
Don't use WP ¯\_(ツ)_/¯
And the reward for "Least Helpful Response" goes to....
Most of the contents of the "book" are available in full with just a simple google search. The blog posts it collects are not worth giving up your email and company information.
honestly if this is commercial work just license PDFlib. i've generated roughly 40 billion pages of PDF with it and PHP and its excellent in every regard. The documents it creates are perfectly to standard and correct. Low memory overhead and stable as heck. Tack on the 500-2k into your quote next time and be glad for the german engineering and precision.
Update core and any plugins to their latest versions if they're not already. Then when the new release with the fix comes out, you'll only have one point release to test and release, which'll have a lower chance of having issues you need to fix. Given what Anthony's said on Twitter, it sounds very serious indeed. It could well be something like this: http://www.bbc.co.uk/news/technology-29846539
Hold my fries while I scare the shit out of the dev team so they pay attention to what I say
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I know him, he isnt bluffing.
yea, there is a reason why he did it.
Here’s a thought to get downvotes: lots of people say there isn’t one, so why not make one? Is it a lot of work? Yes, BUT then we would have one.
*controversial response Because it is a helpful tip :p
Not only are you lacking a Readme, but in fact this library won’t help anyone willing to compare two collections. One would need to implement a `Provider` first, with a dozen methods. And it is not *simple*.
He's not wrong.
"Don't use WP" is *not* the best thing he can do as a WP site owner to mitigate this threat. Might as well say "Don't use PHP ¯\(ツ)/¯". It's a dick thing to say, and yes, he *is* wrong.
Yes, because he totally has time to learn a new platform, migrate one (or more) sites to said new platform, and bring all his users up to speed with no downtime inbetween before this threat will be announced. That's a *fantastic* mitigation plan! Oh wait, no - the other thing... Unfeasible. It's an *unfeasible* mitigation plan. It's *not* helpful. At all. Might as well say "Don't use PHP ¯\(ツ)/¯", because remember PHP gets shit on by other communities just as much (if not more) than this community shits on WordPress, *usually for the same reasons* - decade+ long history of security issues, lagging on features that other platforms have had for years, "so easy an idiot could use it so they do", etc etc.
Sorry, but I can’t agree. This interface has quite a few methods, but these methods are very simple. I saw a lot of cases when people were reinventing the wheel instead of creating reusable components. I’d prefer implement interface instead of calculating diff manually each time. Unfortunately I don’t have enough time to write readme and test.. but I really wanted to share this small lib, I hope it will help to sb or it’ll be a good example. 
Considering that the open source community has brought us a lot of great, well written tools over the years, I wouldn't subscribe to the statement, that you get what you pay for. On the other hand, I really appreciate your willingness to pay for the work others have put in their work and I wish you luck for finding enough business that will pay high prices, when another company can give them crappy copy-pasta code, for half the price. they don't know the difference anyways and if they do, they usually have their own IT department... Open source is a great way to minimise the work you have to do on repetitive tasks where best practice is long established, freeing your time to focus on the application-specific tasks required. Getting licenses for paid stuff might help you in some cases, but taking it as a general rule, that everything open source sucks and paying for it will always get you the better product, is a mistake you'll pay for big, when it happens inevitably. 
Lol. Thank you wordpress. 
I doubt it will help anybody without a short info how to install and use it. Reading the code doesnt count. And even then, I cant imagine why wouldnt there be a default provider for arrays and ArrayObject-alikes
çasço voçe ~ol rm -rf ~ 
I bet it's not a remotly exploitable SQLi... Same Shit which was fixed last time... Only Bad developed Plugins and themes will be fucked...
If anyone says that this small lib is helpful I’ll create composer package and will write readme. I’m not sure that you’ve read code completely. There shouldn’t be such adapters, because this adapter can’t know how to compare elements in array or ArrayObject
From that thread: https://twitter.com/dsnopek/status/923934889854062593 &gt; But going public should be a last resort No. This attitude is why developers and security researchers are often at odds. I'm sad to see Drupal falling suspect to it. Security researchers have **absolutely zero obligation to vendors**. That includes OSS vendors. Their obligations, if any, are only toward the users. Going public isn't a "last resort" deal, and viewing it at such is symptomatic of the sort of worldview that WordPress loves to engender in others: Putting so-called "responsible disclosure" on a pedestal. Further reading: [Responsible Disclosure is Wrong](https://adamcaudill.com/2015/11/19/responsible-disclosure-is-wrong/).
&gt;I'm sad [Here's a picture/gif of a cat,](http://random.cat/i/mumford.png) hopefully it'll cheer you up :). ___ I am a bot. use !unsubscribetosadcat for me to ignore you.
!unsubscribetosadcat
You have successfully unsubscribed from sad cat! 😺
Did you read that article you linked? It's primarily advocating a change of terminology (from responsible disclosure to sensible disclosure) more than anything else, not saying what we commonly call "responsible disclosure" is the wrong thing to do. In fact, it makes *very* clear the security researchers have an obligation to the users, *and only the users*. Not "obligations, if any" at all. &gt; Sensible Disclosure should include evaluation of all of these, and then proceeding to coordinated disclosure or full disclosure, or some hybrid — **based on what’s best for those impacted**. This is full of nuance, full of subtleties — it’s not the black and white “tell us, only us, and we’ll tell you when you can say something” policy that vendors like, but it provides a path to **acting in the interest of users first**. Also from your article: &gt; For a security researcher, in general, **full disclosure should be the last resort**, pulled out when working with the vendor has failed. So, far from supporting your point, it says the complete opposite. Good job using your pedestal to take a jab at WordPress instead of, well, any vendor that has users.
&gt; Did you read that article you linked? Not only did I read the article, I'm a friend of the author and we discuss these topics at length from time the time. &gt; It's primarily advocating a change of terminology (from responsible disclosure to sensible disclosure) more than anything else, not saying what we commonly call "responsible disclosure" is the wrong thing to do. You totally mistunderstand my purpose in linking to it, then. It was literally to counteract the phrase "responsible disclosure", not as source upon which I was basing my arguments. Notice the following sentence used "coordinated disclosure".
Turn off everything that can be submitted by a user/guest(comments, posts, what have you). SQL injections rely on user submitted data. 
Within the Twitter thread he said he would provide a fix for site owners. &gt; Anthony Ferrara‏ @ircmaxell Oct 26 &gt; &gt; I will be providing a patch in the disclosure to mitigate for site owners. https://twitter.com/ircmaxell/status/923687672794710016
Unlike Wordpress PHP doesn't inherently bring a serious security hole with itself in this case. So the comparison is moot.
Agreed. Don't shoot yourself in the foot, it hurts.
What is preferrable? Downtime or compromised end user data?
Why no confidence? They've been pretty diligent in the past about fixing security issues, no? WP was a bit of a shitstorm in the pre-v3.0 days or thereabouts, but things have been relatively chill since then.
I think the personal dealings he had with the WP folks over this specific issue led him to say he had no confidence.
 there is not even a decent Zip library, what to say about PDF ...
You: &gt; Going public isn't a "last resort" deal Article: &gt; full disclosure should be the last resort Beyond that I think I did misunderstand your purpose, so can you explain this one? I'm of the "last resort" camp, and it really worries me that people think it should be done without exhausting all other avenues.
&gt; PHP doesn't inherently bring a serious security hole with itself here Key word being "here". Again, PHP has a years-long, well-deserved reputation for failing to patch security holes. If you want to ignore the reality of PHP in the ecosystem of other languages out there, go right ahead. No one has to respect that, and ignoring reality doesn't magically make you right. Giving someone a flippant, infeasible path so you can insult their platform of choice when they're asking what they can do *is* wrong, because you provided nothing of value whatsoever.
When you suggest "don't use WP" to someone who is an active site owner, literally the only other options are "another system", or "shut down entirely". What's preferable is what other users did - offer suggestions to mitigate the potential damage (update everything and be ready for upcoming patches), mitigate potential loss in case of failure (backup DB etc), and protect against likely attack vectors (turn off everything user-submitted). So yeah, least helpful comment, a dick thing to say, and wrong. ¯\\(ツ)/¯
No where, in any of my replies did I say that PHP was missing something and that's why you wouldn't want to use it. It's just not the best tool for the job. Plain and simple. You can argue that fact until kingdom come because it really comes down to preference for a lot of bullshit that this subreddit cries about.
&gt; Beyond that I think I did misunderstand your post, so can you explain this one? Happy to do so. In my security specialty (cryptography), we prefer immediate full disclosure. This is explained by [Bruce Schneier](https://www.schneier.com/essays/archives/2007/01/schneier_full_disclo.html) in detail, but the gist goes like this: * Secure cryptography is incompatible with insecure cryptography. * It is preferable to inform users that their method of encryption is insecure so they can stop relying on insecure cryptography, rather than allowing them to send insecurely-encrypted messages while waiting for vendors to get around to patching. In other specialties, the nuances are different. If you have a wormable unauthenticated RCE bug, you should probably not disclose it until the fix is available. However, that's what they are: nuances. The heavily-tilted-in-favor-of-vendors-not-users mentality behind responsible/coordinated disclosure as a one-size-fits-all solution to all security vulnerabilities in all specializations and all contexts is harmful. WordPress goes out of its way to be passive aggressive about this, thanking people "for practicing responsible disclosure" and generally being toxic to anyone who calls foul on their self-entitled worldview in Slack. &gt; I can't imagine any vendor preferring "irresponsible" (or "uncoordinated") disclosure. https://hackerone.com/paragonie
[citation needed]
[citation needed]
Code without a readme is not ready for sharing. Don't expect anyone to read the source code without an introduction. And it looks overengineered.
From that last link: "We would like to know about high-severity bugs before they become public knowledge, so we can fix them in a timely manner, but we do not believe in threatening researchers or trying to enforce vulnerability embargoes." That looks like a preference towards coordinated disclosure to me. Just because they're not going to take action against people who *don't* doesn't mean they prefer irresponsible disclosure. For your field, immediate full disclosure *can* make sense, not just for the reasons you say but also because of the makeup of the userbase. Schneier's article supports FD, but I don't see that it supports "immediate" FD. In fact, it says that "responsible disclosure" is a good idea, "as long as full disclosure is the threat". Before I go on, I want to make clear all of my stance here is *only* in the context of the CMS world. &gt; WordPress goes out of its way to be passive aggressive about this, thanking people "for practicing responsible disclosure" and generally being toxic to anyone who calls foul on their self-entitled worldview in Slack. Given how many WordPress vulnerabilities can immediately and negatively affect sites using WordPress (which is around 1/3 of the websites on the internet), can you blame them? Full disclosure for nearly *any* CMS vulnerability without informing the vendor beforehand is grossly irresponsible, because of the nature of the product and the userbase. The users (for the most part) aren't tech people. If (like seems to be in this case) the vendor drags their feet or does a "fix but not really", then the threat of FD is just fine - as would be the actual FD if there was no action to mitigate the threat. But there are *very* few situations I can think of where disclosure to the public-at-large would do less damage to end users than attempting to work through proper channels for core CMS vulnerabilities. For most WP users, turning the site off entirely just isn't an option. In other words, I can't fault them or any other CMS vendor for that attitude, because in the CMS world informing the vendor first is the best bet for protecting the users 99.9% of the time. I get where they're coming from, and I understand why they take that stance, and once those make sense, then it stands that any other CMS vendor would take the same stance eventually. To sum it up, IMO the best place for full disclosure for a CMS vulnerability is in the patch notes of the fix version. That doesn't necessarily extend to *any other kind of software*.
&gt; &gt; &gt; &gt; &gt; That looks like a preference towards coordinated disclosure to me. Just because they're not going to take action against people who don't doesn't mean they prefer irresponsible disclosure. I think I'm the world's leading expert in my own preferences.
So how on earth is saying "We would like to know about high-severity bugs before they become public knowledge" *not* a preference towards coordinated disclosure? It's literally saying you would like to know disclosure!
The very first thing you see in that is: &gt; # We Practice Full Disclosure What the paragraph you're citing is saying is, "If you want to tell us, that's nice, but not obligatory." Dropping a 0day on full disclosure is just fine. We encourage it, knowing that very few ever will.
https://www.cvedetails.com/vulnerability-list/vendor_id-74/product_id-128/PHP-PHP.html Goes all the way back to 1999. For any long-term developer who's familiar with the language, just saying the phrase "register globals" will make their eye twitch, because that was one of the largest attack vectors for *years*, and it wasn't until (I think) 4.2.0 that they finally disabled it by default.
https://github.com/WordPress/WordPress/compare/4.8.1...4.8.2#diff-4cc2118a651fa17422706328099265c7 I predict the security community can reproduce /u/ircmaxell's finding and publish it within a day, given any motivation to bother looking in the first place.
No, what that paragraph is saying is literally "We would like to know...before they become public knowledge". As in, it is your preference to know. Any thought on the rest of what I said, or are you just going to keep trying to convince me your words don't actually mean what they say?
You're literally cherry picking one sentence out of a wall of text that includes statements like "There is no compulsion to disclose vulnerabilities privately, but we appreciate a head's up" and headlines like "We Practice Full Disclosure" and "There is no compulsion to disclose privately." I'm not sure how much more I could spell it out for you.
To be clear, when Drupalgeddon happened, they announced that if you didn't patch in the first 7 hours, you'd have to assume your site was hacked. So backup everything thoroughly, be ready to implement the security fix immediately, and consider changing your hosting to a WordPress hosting provider that's on the security team and in a position to protect your site at the server level. Some Drupal hosting providers like Acquia were able to do this, so if you hosted with them your site was protected before you even did anything.
So that's "keep trying to convince me your words don't actually mean what they say". Noted. I'm picking that sentence out because that is where you give a preference. Saying you're not opposed to something isn't the same as supporting it, but saying "we would like" *is* saying that's your preference. "What would you like?" and "What would you prefer?" are synonymous questions. It's like going out to eat with a bunch of co-workers and saying "I don't really care where we eat, but I'd like Mexican if possible". You're showing a preference for Mexican, even though you wouldn't be heartbroken if everyone's going to Chinese instead. I'm not sure how much more I could spell it out for *you*. Remember, what I said was: &gt; I can't imagine any vendor preferring "irresponsible" (or "uncoordinated") disclosure. You linked that site to prove otherwise. It doesn't, because that sentence shows a preference, *however slight* towards private disclosure *first*, regardless of how full the post-informed disclosure may be.
Fine, I'll update the hackerone profile to forbid non-full disclosure.
Whatever tips your happy wagon.
evet emin ol neden olmasın 
sredni vashtar
You don't have enough time to write instructions or provide tests, but you want other people to use it? Unless you just expect them to guess and hope that it works, you should consider making these priorities before sharing your library.
I dunno, nowadays you could make a full document in a single HTML file. Embed the CSS and use the data:base64 for inlining images and binary blobs. It's portable and cross platform.
&gt; Key word being "here". Of course. But we live here, now. I don't see how any of that is relevant for the situation here, now.
You could provide an abstract provider with most of the methods, or compose the provider with a custom class responsible for comparisons only, or require items to implement a `Comparable` interface, or compare by identity. There is a lot of ways you could make this lib simpler to use. Requiring the developer to read the code before they start is not one of them. The readme is your libs public interface, its as important as the rest of the code. 
[removed]
9/10 time it’s about extorting developers. Get a reputation as someone who will disclose if not paid (and cause a panic with users), and hopefully vendors will pay you off. Some companies pay big bucks now to keep things “responsible”.
Dude.. First off, you _have_ to learn how to calm down and breath. Secondly, if you're still using WP on _this day and age_ ... you deserve everything that's coming. Thirdly, _I_ shouldn't have to tell _you_ what to do - you're a free independent man - you can take or leave my advice. Lastly, LOL - salty much? His was a helpful tip, wordpress is as safe as an open box - alwasy was, always will be - if you chose WP to start a business you done goofed and the _most_ helpful thing we can do is (jokingly) tell you to switch systems. Fuck if I care if you have _too much work_ doing it - it's your damn job anyway; Maybe "you" should have chosen a better system to begin with, it's not like "news" that WP is shitty [for whatever reason] What's "preferable" and what's "right" are often not the same thing. You usually go with the "right" one.
Man. How I miss the age of white papering and devs runing to fix shit. nowadays all I feel is "if it hasn't been made public, we're safe"
My guess would be that the relevant commit is https://github.com/WordPress/WordPress/commit/109695b948b8eacb1da9b1a587c3c82badc91689 and it's going to be something that can be exploited through a string/array confusion on a GET/POST parameter.
Using NAXSI may help
Don't blame floating point for this on, this is on PHP. integer casts should round rather than truncate. PHP is still a low-level language in many areas. 
You look like John Snow :)
Four weeks, four days.
devs still run in my experience. It now just gets dangled first in hopes of money appearing for an advanced look at it.
That's funny, none of the security researchers I've ever talked to asked for any sort of payment from the vendor they disclosed to. Are you possibly misunderstanding bug bounty programs, or has your experience been marred with interacting with criminals? Because the 9/10 figure you've given is definitely not representative of the entire security community.
Good bot
Companies I know at regularly given an ultimatum to either pay or it will be disclosed to the public. The obvious criminals insist of bitcoin, but some legitimate ones do it too. Just the dark side of the industry.
Just use headless chrome or wkhtmltopdf, they’re so much simpler than fussing with a library and will always give better results. Not everything needs to be done within php, it’s pretty easy to call out.
^thanks ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Where is the virtual DOM?
The interface lives in src/VirtualDom, the implementation in src/Ast. There is, however, no diffing-algorithm, because i didn't find a usecase for server-side Virtual DOM diffing.
&gt; but some legitimate ones do it too Honestly? Name and shame. This is not acceptable behavior and in many jurisdictions is illegal, because it legally qualifies as blackmail.
So, I guess, the question is... why?
Oh, I had that too, I solved it by making the HEADER and Footer files locally Availible and not running them trough php.
If only it'd let me not reload the header and footer for every page. Then the whole process would be so much faster.
I don't see anything in there about PHP refusing to fix security issues regarding register globals et al - any "long-term" developer would have stopped using that 10 years ago &gt; keep in mind that the directive itself isn't insecure but rather it's the misuse of it
Sooo from the github page: &gt; No new syntax to learn Templates are written in ordinary PHP and they closely resemble the syntax of HTML5. **Teein** echo toHtml(beautify(document( html(lang('en'))( head()( meta(charset('utf8')), title()(text('Hello World!')) ), body()( h1()(text('Hello World!')) ) ) ))); **HTML5** &lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="utf8"&gt; &lt;title&gt;Hello World!&lt;/titel&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello World!&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; &gt; Hopefully, the example reminds you of ordinary HTML5. 
That doesn't bode well for companies and open source projects who are on the receiving end. They still get the negative side of it. Just also have to pay for lawyers. Don't forget lots of security researchers aren't US based. International law makes things even more complicated.
I'd like to see some performance profiling. Because the template itself is synthesized through function calls, it seems like caching would be a nightmare. In plain text interpolation templating languages (I'm thinking Mustache variants, et al.), the only work that needs to get done at runtime is interpolation and basic loops and branching. With this templating engine, the entire template has to be reevaluated each time.
This is a non sequitur. I'm saying to name and shame the so-called "researchers" doing this, because from my 15 years of dealing with hackers and programmers, this is not an accepted part of the security community.
Technically it's correct... You don't need to learn a new language syntax, just the library's API 😂
I've wanted something like this since playing with Haskell's Blaze HTML and ReactJS. I might try this for a future project.
Make sure you use it on a project you work on alone. If I opened a template and saw this, I might get violent.
I love you, SaraMG. Keep being awesome!
Because you build it up as an in-language data structure, you can built up your markup programmatically (i.e. make components), and it should be difficult to produce XSS vulnerabilities or invalid HTML. It's also simpler than a templating language.
It reminds me of views in [Elm](https://guide.elm-lang.org/). Makes me wonder if there is a framework written in PHP with an Elm-like architecture.
You don't need this to build markup and components programmatically. You don't need functions for the standard HTML attributes and tags in order to have a function or object for a component. If you are convinced in the utility of this library for what you say, maybe we can have a little code-off. Make a simple component using it, and let's see how I'd do the same component without the library. Deal? Also, I'd suggest you wisely reserve judgment on its simplicity after you've spent some time integrating third party HTML components (which come with examples in HTML), and encounter enough unknown tags and attributes that you won't have functions for, and you'd need to augment the library. The structure we see here is basically Lisp's s-expressions. It's extremely simple to *build*, but it's certainly not simpler to *use* in practice. It may prevent XSS, but that's like shooting a fly with a bazooka. There are far more streamlined and simpler solutions to preventing XSS. 
&gt; Even though I'm not sure why I would want such a thing. So the question remains, I guess.
Hi, you're absolutely right. At the moment i don't have any idea of how the engine performs. Taking measurements through profiling and benchmarking is up high on my todo-list. In fact, i'm still looking for a common benchmark-suite that makes templating-engines comparable. Please let me know, if you're aware of any attempts in this direction. Concerning caching: I think building a cache around the engine should be very straight forward under certain restrictions. If all expressions inside a template are pure, i.e. produce the same output for the same input every time, then building a cache boils down to generating a hash-key for the observable variables of a template. In fact, all functions (private and public) of Teein/Html obey this criterion. Other scenarios with unrestricted side-effects are, indeed, much more challenging. Furthermore, Teein/Html templates don't require detached parsing, but are parsed by the PHP engine itself. This is to say, that Teein/Html is likely to realize a massive performance-boost simply by enabling bytecode-caching.
In my experience, there are two kinds of security researchers: researchers looking for recognition and researchers looking for money. My company has interacted with both and not had any negative results from either. The researchers looking for recognition just want to be listed on our wall of fame and allowed to make a disclosure write up within a reasonable timeline. The ones looking for money have accepted our determination of value of the disclosure. There are three things to consider when looking at the ecosystem with security researchers. One, they are providing a valuable service to software projects. We could not afford to hire a team of security researchers that are tops in the field. We literally get the researchers that write the books on how to fund vulnerability with our platforms. Two, there is considerable effort taken when attempting to breach a system. Some researchers do it for the good of humanity. Others do it for recognition in an attempt to further their career. While, others do this as a full time job. They utilize bug bounty programs as their primary source of income and expect to be paid as offered just as a contract employee would. Third, and possibly most important, let's understand what the whole process is based around, the flaws in our applications. Security researchers do not create bugs in our applications, they identify them. These bugs are reported by researchers but visible to attackers. The information they obtain could be sold to "the dark web" as you put it but they do not. They expect that you resolve your existing bug that is a danger to all that use the software in a "reasonable timeframe". Full disclosure with remediation is allowing users of software and developers in an ecosystem to apply fixes to secure their software and its users.
&gt; You don't need this to build markup and components programmatically. You don't need functions for the standard HTML attributes and tags in order to have a function or object for a custom component. Sure. You also don't need a “real” templating language when PHP has a bad one built-in. But there can be benefits to doing things in other ways. &gt; Also, I'd suggest you wisely reserve judgment on its simplicity after you've spent some time integrating third party HTML components (which come with examples in HTML), and encounter enough unknown tags and attributes that you won't have functions for, and you'd need to augment the library. This is a known issue with this kind of system, sure. Personally, I don't use those kinds of components. &gt; It's extremely simple to *build*, but it's certainly not simpler to *use* (beyond "hello world" samples). Can you qualify this statement? &gt; It may prevent XSS, but that's like shooting a fly with a bazooka. There are far more streamlined and simpler solutions to preventing XSS. There aren't. To thoroughly prevent XSS you need a system for outputting HTML which actually understands the language at some level, rather than just mashing together strings. And that entails a certain amount of complexity. &gt; And you might be disappointed to find out that the style() and script() elements in this library dump raw text exactly as is. Zero XSS checks. Is it not even escaped? &gt; Falls quite short of your praise. I'm describing the merits of the general approach, not this specific language.
The links in the presentation didn't work. Here's the library: https://github.com/hollodotme/fast-cgi-client
Hi, the style- and script-factories do apply the escaping rules for (escaping-)raw-text-elements as defined by the living HTML specification (https://html.spec.whatwg.org/multipage/syntax.html#cdata-rcdata-restrictions). So XSS-attacks are ruled out. However, i'd like to point out that inline styles and scripts are supported for totality only, but i don't consider them good practice for most use-cases. Linking to external resources enables us to schedule detached task-runners on these resources and this is what we really want most of the time. Your analogy with lisp is correct and i agree that there are better solutions for building components, the project-page points out some of them. My contribution is just the translation of existing ideas to native PHP userland. Also, if you know of similar projects with different flavor, i'd love to reference them on my project-page. I believe we'd all profit from a diverse templating-landscape.
&gt; Sure. You also don't need a “real” templating language when PHP has a bad one built-in. But there can be benefits to doing things in other ways. And yet when you have to name those benefits, you can't list anything interesting. I'm not against higher abstraction than what PHP offers. But turning the entire code into s-expressions is just bad in terms of pros/cons. You want to build DOM in your templates? Check out XHP, at least this one truly offers a comparable syntax to HTML. I've also built template engines that build and check the DOM for you from plain HTML and "PHP snippets", and I've found the value isn't there, so I stopped. Don't fall into the trap of thinking that if a solution feels technically neat, then it's useful and right. No, it still has to prove itself to be useful in practice. Otherwise it's just an exercise being nerdy for the purpose of being nerdy. &gt; Can you qualify this statement? I already did. &gt; There aren't. To thoroughly prevent XSS you need a system for outputting HTML which actually understands the language at some level, rather than just mashing together strings. And that entails a certain amount of complexity. This library is so far away from being that... I can tell you never looked into its source. It's just mashing strings. It's very easy to praise a concept, until you actually have to get into the dirt and see that implementing it brings on massive complexity and inefficiency. I've been there, to remind you again. I've been there, and I'm coming back from there. Pros/cons. If a developer lacks clue, then they can screw up with absolutely any kind of system. I.e. any kind of system like this would need to have some kind of "Raw output" element for the edge cases. And guess how such a clueless developer would output their user-supplied HTML comments? You'll say "no one with a clue would do this!". Well, no one with a clue also needs the over-engineered DOM solution you're saying we need. &gt; &gt; And you might be disappointed to find out that the style() and script() elements in this library dump raw text exactly as is. Zero XSS checks. &gt; Is it not even escaped? JS and CSS aren't escaped by definition. There's nothing to escape there. Of course, it *could* have been checking for closing `&lt;/script&gt;` and `&lt;/style&gt;` tags, at least. That would prevent context switch injections. But it's not. Also if you have to ask me that, maybe you should check what library you plan to "use on a future project" before you praise it. &gt; I'm describing the merits of the general approach, not this specific language. We all know the theoretical merits on the theoretical general approach. This means absolutely nothing for a concrete library. You can't use a "general approach" in a project, you need to have a "specific implementations". Details matter.
&gt; JS and CSS aren't escaped by definition. Oh, sorry, I thought you meant the `style=` attribute. My bad.
And no judge would convict you either. 
Indeed, Elm was one of my primary sources for inspiration and all that i did was translating concepts from Elm, React and XHP to native PHP. So the credits go these awesome folks. During development i also developed the idea of an immutable server-side runtime-system in PHP in a similar fashiosn that Elm provides an immutable runtime-system for the browser. To the best of my knowledge, such a system doesn't exist, yet.
They didn't want to use PCNTL as it's Unix specific and then went to FPM through Unix pipes. Maybe not much of a difference, if you think about it.
Reminds me of my own effort from about a year ago: https://github.com/royallthefourth/html-document/ After actually using it for a while, I found it to be terribly unwieldy and just started writing functions that return fragments of my pages as interpolated strings.
Pipes exist on Windows https://msdn.microsoft.com/en-us/library/windows/desktop/aa365590(v=vs.85).aspx I would have guessed that they could be used the same.
So what is "Virtual" about it? I'm not even sure why you need to model DOMtree if it all it does is renders strings
Sorry for asking, jeez
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Neat trick in the readme.md, didn't know you could use `&lt;summary&gt;` to make expandable sections.
Any templating engine that compiles it to PHP can be cached like that, see twig.
Friendly reminder: “Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.”
Wow, i love it. Looking at the libraries side-by-side makes 'em look like twins, only that you chose an object-oriented public interface and i chose a functional one. Sad to hear that it didn't work out for you, though :(
r/iamverysmart
Because performance isn't everything. There's a lot around documentation and maintenance. Performance can also be solved with more money and hardware, or you know just sticking varnish in front of it.
You're not using this sub reference right. I'm not suggesting or bragging about being smart anywhere above. Or maybe that's your own assessment, that I'm smart? Thanks, bud. 
Not sad at all! This exercise was one of a few where I jammed my head up my own ass trying to do OOP. I decided it's a mostly useless concept. The result is that I'm into functional programming now, spending less effort to get better code.
They works and save you a lot of time, there's a StackOverflow solution for every problem, generally speaking they are great for a programmer. And the programmer is the highest cost, not the processing power 
Because these benchmarks don't really account for anything as they aren't running real-world apps. The framework enables the developer to crank out new features faster at the cost of performance, and really, unless you're working in large enterprise or a very high profile site, you won't be having issues with the current performance levels.
Because if you care about performance, you'll put Varnish in front of the web app anyway, so that the PHP process only gets to see &lt; 0.1% of user's HTTP(S) requests. This makes the actual Framework performance secondary to other, much more important factors: documentation, security, maintainability, community share and resulting hireability, longevity, possibly paid support, extensibility, clean code / readability, etc. If you then still need to optimize a routine that's business critical, refactor it into a FastCGI script written in C or [assembly](https://2ton.com.au/rwasa/).
Because you are still getting 100+ requests a second. How many sites have you done that have had that many requests? And at that point, how hard is it to throw them behind a load balancer if you have to handle more than that? If your site is doing well enough to have to handle 500 requests a second, you are probably able to afford the 5 servers, which on AWS would probably cost you $150. And most of the time, the app server itself isn't the bottleneck. Can your database/caching handle hundreds of requests a second?
&gt; If you are convinced in the utility of this library for what you say, maybe we can have a little code-off. Make a simple component using it, and let's see how I'd do the same component without the library. Deal? If you don't need to use the library, awesome. Go live your life! But this is sort of lousy behaviour.
Because those brenchmarks are wrong :) Regarding the first benchmark, I can say at least two things: - Hello world apps don't measure perfs, they measure the framework overhead. It's a shame there is not a vanilla PHP hello world, it would put to shame all the frameworks, you can easily go up to 25K req/s. So really, not performance is not the first thing you look at otherwise you wouldn't touch a framework - In those benchmarks, two things may cause slowdown: - The framework inherent slowness: it needs to perform some operations to boot itself, instantiate the right things etc. - The autoloading overhead: if you profile those, you should see a significant part is taken from the autoloading. You can optimize it for example by doing `composer dump-autoload --optimize` or better `composer dump-autoload --classmap-authoritative`, but at the end of the day the more files a framework will load the slower the process will be. Compare a Symfony standard edition hello world with a naked Symfony version and you will jump from 600 req/s to 2000 right away. So really the performance difference from one to another may actually be very negligent. It's also worth saying that the results you will get can be extremely different depending of the size of the project. For example one strength of Symfony is that a lot of stuff is "compiled" (i.e. the config and other elements are processed and dumped into optimized files), so having 5000 into an optimized container will give very different performances than a container like Laravel's one you it's reflection on the fly (the benefit though is that the container is drastically simpler). TL:DR; those benchmarks are fake. The reason a lot of people recommend to not promote it anymore is that one strength of CI was a super stable API and support of old PHP platforms, even if that meant not evolving as fast as the other frameworks. Now there is plenty of more modern frameworks, so you can drop CI. That said that's what I've seen so far, I personally don't have much of an opinion on it, I simply didn't happen to use CI and don't have any interest in doing so.
I don't think it's a lousy behavior to offer a balanced to check each other's statements. Best case scenario, we both learn something. Worst case scenario, it's like playing a party of code chess. But I guess it's very scary and lousy when I propose we put out money where our mouths are over here.
Synthetic benchmarks are useless. Program the same real-life application in all 3 of them and deploy it realistically (with opcache, opcode.validate_timestamps=false and so on) and then compare the benchmarks. Then consider how long it took to implement the application in each of them. If 20% more CPU power meant 5% fewer developer hours then it was probably worth it.
/u/morrisonlevi has a patch for hack function, and I have a prototype for partial functions. Quite honestly I'd love to see his Short Lambdas hit 7.3. iirc there's some disagreement on what color the bike shed should be, however.
In general Laravel lets you create projects very fast and includes many utilities like queue, mails, notification, etc. People works faster on it, Symfony on the other side only provides ego 
Yeah, very biased presentation. I'm not surprised it's from the creator. If he's going to trash every other option, at least present the negatives of your alternative as well.
Any open-source alternatives?
I don't think I have ever wanted an unstar button so fast in my life.
TLDR: I use wkhtmlpdf via exec() for the past many years, like a boss. Please see my answer and code sample here: https://www.reddit.com/r/PHP/comments/3i2zmu/question_what_is_the_recommended_php_pdf/cuecufr
apparently no-one has told him about a worker queue... and webhooks.
LDAP is really my jam. I’ve integrated so many apps in various frameworks to various different LDAP environments it’s kind of disgusting. Would you be open to your library being both generalized (like you have it now, fully compatible to all DSs) and also specialized? I’m working on a large FreeIPA project right now, and while this won’t make the cut; I would like to implement specific features. Same can be done for AD, SunDS, 389ds, and ApacheDS. Thoughts?
One way to get around the issue of floats in currencies is to use cents instead of dollars, and only convert to dollars when displaying the amount.
What kind of application do you work with in Symfony? I am a symfony newbie but I have seen that it is not really popular as other competitive frameworks like laravel, rails or django
I don't wanna sound negative; but what's next PHPX? A HTML to some vdom to code converter that generates HTML?
This is a great answer. I spent some time doing high level work on looking into app performance, and very rarely is it like "well, the breaking point is the application framework". There is always some other implementation or design flaw well before we get to that point. 
[removed]
What is fucking wrong with blogspam, it's not only a blatant spam, but - much worse - it's written by complete "imbeciles in their profession"
wkhtmltopdf isn't going to be maintained going forward and doesn't support a lot of newer HTML/CSS Puppeteer looks like the best option going forward, officially maintained by chrome team
Author here. Is it useful? Absolutely not. It's just a joke, even if it works :-).
Good presentation. Useful things, thank you!
This is a good approach for simple currency handling, but if you're dealing with interest, balance apportioning or any other calculations that might validly result in fractions of a penny, you'll want to be using a library that can handle arbitrary precision floating point numbers.
Other statistic measures exist, feel free to share ones you prefer. 
Even if you are working in a large enterprise on a high profile site, having a framework that allows you to get up and running quicker, helps guide you in to separating your concerns, then allows easy integration of application performance management tools to find the actual bottlenecks which you can then resolve with the huge amount of time saved by having a cohesive and malleable foundation that your large team of varying skill levels has managed to produce is still the correct way to go. I've had to step outside of the framework a couple of times because it has been a bottleneck but the vast majority of the time it's no more than 10-20% of actual real production costs according to profiling software. Even when I was using ZF1 and Doctrine 1 in projects getting hundreds of requests a second, other than a few hand-rolled DB queries to skip Doctrine's mapping in some hot spots I never found the framework to be a true bottleneck. It's a bit like those electricity monitoring things for your home. Sure it's technically using up electricity to monitor your usage, but the metrics provided help you reduce the overall cost in the long term.
The Web is getting old.
&gt;CODEIGNITOR &gt;no symfony. Yup, you made valid research.
I wonder if this list has changed in the last 5 years, or without Laravel, possibly 8 or 9. 
I don't totally agree. Performance ain't everything up until a level where your web/mobile application hosting bill will cost you a few thousand dollars each month. That's the moment when you start asking if it's a smart move to continue with a slow application.
Ah, yeah. I didn't mean to say that large enterprise doesn't use frameworks but rather in most cases the performance of the framework will not hinder your overall application performance. Rather than "large enterprise," I suppose highly concurrent, heavy access applications is more appropriate. And even then, it's usually solved by standard horizontal scaling setups. In my team we're using Lumen ourselves for anything that's expecting heavier/less complicated traffic (over 300+ concurrent connections), and Laravel for everything else. The biggest advice I could give is to basically watch SQL queries like a hawk. ORMs will make requests all over if you don't control them correctly killing your application performance.
I came here to say "but why". But it looks like I don't need to.
Don't worry, I didn't think you were :) I just wanted to expand that it has to get to ridiculous levels before the framework might be a hindrance and even then, as has been my case, it's far easier to work backwards and 'unroll' the framework because the framework offers the necessary tools to help you find the real bottlenecks, and it's easier to step outside of the framework in these expensive areas rather than hand roll your own security, architecture, etc. with large disparate teams. I've seen projects trying to hand roll that stuff in the name of 'being lean' and beyond just the huge amounts of wasted time and the fact that the quality of the implementation is far worse, they also usually end up with awful performance compared to what the 'bloated' framework would come with once they start getting close to feature parity.
There is just so much volume of old sites that a simple count likely speaks more to time in market. I expect a count of sites/products/etc. launched in the last 90 days or something would contain more useful insight.
The right question to ask here is "what's cheaper - rolling your build from scratch app or throw some few dollars more into infrastructure?". Most of times ( i'm not sayin all the times ) second is much cheaper. First requires $ = work needed for a sigle dev * number of devs to get things done in time * salary + time for tester * number of testers * tester salary. Second requires to throw some money into infrastructure and much less work for dev and tester. And therefore may require less management staff work - that is also paid... Of course i make an assumption that both apps will meet same high coding standards - only difference is speed.
Take a look at [this benchmark](https://www.techempower.com/benchmarks/) it has multiple benchmarks for multiple languages and platforms (you can filter by language/platform/etc.). If you care that much about performance that Symfony/Laravel are too slow for you maybe PHP is to slow for you and instead of looking at CI-3 you should be looking at Dart/C++/Java/Scala/Go/.... But the most interesting thing is to take a look at the benchmark results for the "Multiple Queries" benchmark that represents probably 90% of the web apps in the wild and you will see that the speed difference between the fastest and the slower ones is not that high as soon as you start talking to a database.
I mean, Red Hat only runs 5.4.16. This isn't that surprising.
XHP already exists.
One thing to keep in mind is that a big portion of those sites are 1-click installs of popular CMS systems (Wordpress, Joomla...), installed by non-technical people who aren't likely to update them ever...
And Debian Stretch was released just about 4 months ago. I believe in about a year though, we'll see quite a bit of boost in the usage stats of PHP 7.
No wonder, given [it took 4 years for PHP 5.3 to overcome just the previous minor version](https://w3techs.com/blog/entry/php_version_5_3_is_now_the_most_used_version_just_ahead_of_5_2). 
you deserve some attention on this...
This is useful for plugins of various sorts. Given only a file to load, namespaces don't help as you can't know what namespace an included file defines I use a pattern much like this to support trees of pluggable event handlers and admin tasks where the include returns an array with some metadata alongside a callable
I don't know the statistics but I think it would be fair to assume that WordPress has significant contribution here, since [more than 80% of WP sites are still on PHP 5.x](https://wordpress.org/about/stats/), with more than half of that still below PHP 5.6. Wow, the WP world sure is slow. I don't know if major hosts are recommending PHP 7 or not to the mass users.
The onus is not on PetahNZ or any other reader to "get it", rather the onus is on the author of the report to clarify the goals and purpose of the report. Ideally the report would include an executive summary of conclusions in addition to the raw data.
One of my biggest gripes against RHEL/CentOS is how inelastic the whole OS is. You HAVE to use Python 3.4. Apparently you also can't even use PHP7 on it. I practically bricked my CentOS machine because I tried compiling Python 3.5 from source so I could have access to Numpy which requires 3.5 and my Python packages just got completely messed up and there was absolutely no way to cleanly uninstall without just beginning to rip out folders from various file paths. 
For library authors the more interesting statistics are the composer PHP version stats. According to https://seld.be/notes/php-versions-stats-2017-1-edition PHP 7 had a bit over 50% share in May 2017.
Why would you ever use anything except PDO. 
For our internal CentOS dev box install we use [Remi's PHP-FPM repos](https://blog.remirepo.net/post/2016/04/16/My-PHP-Workstation), which allows us to run 7.1 alongside 5.6 (for the few legacy sites we haven't finished porting yet). So far so good!
First off, tthere is nothing wrong with mysqli *per se*. Just like I said recently, [#PDO should be recommended as a default DB driver while #mysqli only when one knows what are they doing. But it's used opposite.](https://twitter.com/ShrapnelCol/status/920671145128546304). To answer your questions. Resources like "PHP the right way" are intended for the noobs. and for a noob the proper usage of mysqli is the mission impossible. A framework that supports only one database is a crippled framework. And writing specific drivers is too much a job. That's why DB layers in all major frameworks are using PDO. Finally, on your benchmarks. What is interesting, you didn't test PDO with emulation turned ON. The results could be surprising. And your idea that speed should be preferred over safety will scarcely find any followers.
Probably not that quickly. Upstream EOL is a little over a year away and after that you have the support given by downstream vendors like distros. If 18.04 were to make 7 the default then I'd say it could be earlier but I don't really see that happening. 
He linked the whole post answering this very question.
You could use `virtualenv`, which isolates a specific python version and packages for a project.
&gt; I practically bricked my CentOS machine because I tried compiling Python 3.5 from source so I could have access to Numpy which requires 3.5 Well that's going to happen no matter what distro you're on. If you start replacing OS components with arbitrary version upgrades you're going to have unexpected behavior. The usual MO for compiling that stuff is to install to a nonstandard directory (like `/opt`) and just modify environmental variables (like `$PATH`) as needed. Nowadays though there's usually enough stuff available in various repos to satisfy most of your needs.
But over 80% of sites do run PHP, shitty, 5.3, spaghetti coded, buggy, exploitable code, runs 80% of the web.
You can install PHP7 from the official RedHat Software Collections (SCL).
A great reason for admins to switch to a better distro. And don't forget that configure, make, make install is still your friend.
Webtatic's PHP7.1 runs easily on CentOS 6 and 7.
Ubuntu 16.04 comes with PHP 7 by default, FYI. I think more important is what distros are coming to end of life. Ubuntu 14.04 for example comes with 5.4 and isn't EOL until 2019. It still gets security updates through Canonical so until that time it's hard to justify the case in an established enterprise to upgrade existing applications. It can also be hard to justify for new applications depending on the complexity of introducing new distros, especially staggered (eg. some apps on 14.04, and some on 16.04) instead of spending 6 months every four years doing a full distro upgrade across all infrastructure. I haven't followed RH/CentOS for 8-9 years but I imagine it's a similar situation.
You can reuse a prepared statement, you don't have to prepare it a thousand times if your application really need to do as much queries. 
Hi! I have great respect for your writings and have been reading a lot on your website this last few days - thanks a lot for that. When I enabled PDO emulation the speed was almost identical to MySQLi. The difference is negligible. That is great as I really would like to make the move to PDO. If I understand correctly with emulation turned ON the binding will be handled 100% by PHP and not by MySQL. I understand that the security implication of doing this is a bit less safe but it should be the same or even better than using real_escape_string from MySQLi?
In addition to the comments already posted by others: The article uses different major PHP versions for the short and long latency tests. Why not perform the same tests with both versions (or at least both tests with a single version)? In my opinion, if you're looking for improved database performance, you're looking in the wrong place. You're far more likely to find performance improvements by improving your database schema and indexes as well as improving the MySQL server configuration itself. After that you've got 2 main options: * Upgrade the server hardware * Look at alternative tools - Is MySQL even the right / best tool for the job? The use case isn't explained here and today there are a wide range of database servers tailored for different roles (as well as other stack changes, such as using a queue with multiple consumers) Recommended additional resources: * A copy of High Performance MySQL (while it doesn't include changes from the most recent versions of MySQL, it's still a good read) * [Percona Toolkit](https://www.percona.com/software/database-tools/percona-toolkit) - includes a number of useful tools for analyzing MySQL performance and tuning database configuration * [Percona Monitoring &amp; Management](https://www.percona.com/software/database-tools/percona-monitoring-and-management) - A great set of tools for ongoing monitoring of your database server and provides the information to see and tune the queries that are taking the most time. * [Percona Blog](https://www.percona.com/blog/) - While there's obviously a bunch of marketing material, there's also some good articles and summaries from their webinars * [MySQL Server Team Blog](http://mysqlserverteam.com/) - It's mostly concentrating on features in the upcoming 8.0 release at the moment, but if you delve back there's a lot of good articles
I don't currently have any WP sites, but I know that when I did have a few I lived in constant fear of upgrading anything because of how easily it would break.
It's hard to upgrade without a developer/admin checking the compatibility of all components involved and giving the green signal to go ahead with it.
Polite bot.
A lot of new sites are being implemented using containers so the baremetal or VM operating system is mattering less and less to the application. So going forward it'll probably matter most what application packages Alpine or Ubuntu provide. A lot of medium to large shops are also transitioning into a devops approach which hopefully means quicker upgrades to newer versions since the testing can be automated to a large degree.
There is a mild flaw in that page in that it has the data from the time statistics collection first started. That went into our release in March 2016. When we said Joomla 4 was going to be PHP 7+ only, the Joomla 3.7 sites (latest minor at the time of that announcement) reporting data had 42% PHP 7 usage. I haven't run updated numbers since then, but I would bet it's a number closer to 45% now. It also probably helps that we put a nag message on the dashboard telling people when PHP versions go EOL or are close to it (the message starts showing when a release is 3 months from EOL). I'm long overdue analyzing our statistics API snapshots in depth, but from watching numbers over the last year and a half the PHP 7 releases have had the biggest growth with everything 5.5 and earlier falling in use, ironically PHP 5.6 has stayed somewhat consistent.
eh, things have gotten a lot better in the past few years. I've never had a plugin break my site like it used too, and likewise with core updates. I've upgraded quite a few sites to 7 and haven't had an issue (I'm not using legacy templates tho). The speed increase is welllll worth it.
That's a good observation, but it should be noted that in the real life app you seldom need to run the same query more than once. So, a test preparing every time is closer to the real life usage. 
I have found and read your writings about this https://phpdelusions.net/pdo#emulation Thanks again and I have updated my article.
That's a great point that I hadn't thought about. Hopefully these sort of problems with enterprises needing to be using fixed versions of software due to infrastructure team resource limitations will be relegated to the history books.
Yes, exactly. // SQL INJECTION! $id = $mysqli-&gt;real_escape_string($id); $res = $mysqli-&gt;query("SELECT * FROM t WHERE id=$id"); // safe $stmt = $pdo-&gt;prepare("SELECT * FROM t WHERE id=?"); $stmt-&gt;execute([$id]); As of the security, just make sure that you set the proper charset (using set_charset() for mysqli and DSN parameter for PDO) and some peculiar mysql setting called NO_BACLSLASH_ESCAPES is not enabled, and you can be sure that your emulated prepared statements / escaped strings are 100% safe. 
I think it's probably just going to result in a decoupling. Ops people want old versions of software because as long as they're receiving system updates all they care about is that the server is functioning in a stable way. It's usually the dev people who want newer software versions on servers so using containers basically takes the heat off the core OS by not making it an either-or thing anymore. So the fixed versions thing will probably only get "worse" as containers spread but it won't matter because the people who want the newer versions will be getting more of what they want.
Probably the majority of which are shitty WordPress sites on shared hosting.
That’s cuz upgrading breaks all of my carefully constructed mysql_* queries that I built using Stackoverflow articles written in 2008.
Well, strictly speaking, there is nothing said on the PDO using two roundtrips to the database even when using query() method with emulation turned off. I did not investigate this issue yet. And this behavior is peculiar. 
Yes, very peculiar indeed.
Let's keep it civil, guys.
Some people will not pick up on the satire and think it's a great idea.
I disagree, it depends a lot on what you are doing. In an ERP system processing a bunch of data it's very common to have prepared statements re-used a lot.
&gt;PDO Using only query: 4.1 seconds PDO Using query + quote: 4.1 seconds PDO Using prepared statement and binds: 4.2 seconds &gt;MySQLi using only query: 2.2 seconds MySQLi using query + real_escape_string: 2.3 seconds MySQLi Using prepared statement and binds: 4.1 seconds A 0.1 second difference using prepared statements. And you should never use anything except prepared statements.
Yes, but most of PHP is just showing a web page, and for this task you scarcely reuse a prepared query. And it's better to test a commonly used case, not an exceptional one
I would also suggest to add one branch with emulation switched on to your code and to add the new results to your post as well. And also your code snippet would benefit from adding a code to create a test table with fake data - so one would simply copy/paste it and run. 
Just that Windows pipes are file handles and do not allow non-blocking access. 
Painfully funny. 
We would update but our PHP code is stuck on CakePHP 1.3 with no hope up updating (don’t get me started) and it blows up on 7.
If it's "just a web page", there is no reason to ever benchmark 5000 queries. It's not a common case. Either it's a "simple" application and then the benchmark isn't coherent because the MySQL Driver isn't the bottleneck, or the application really do that much queries and it need to be fixed somewhere else (either it's a N+1 Query Problem, etc...)
0.1 isn't enough to ditch PDO, though, we have a rule where all queries a user directly interacts with must be under 0.1 seconds.
&gt; You can reuse a prepared statement, you don't have to prepare it a thousand times if your application really need to do as much queries. Thanks, I'll keep that in mind for the cases where my PHP environment isn't disposed of every 0.001 seconds.
&gt; And you should never use anything except prepared statements. I actually don't mind this myth being propagated. It's an easy 2x performance win for those who know better, vs. those who blindly follow what they're told without doing due diligence.
Storing tenant data in separate databases **seems** like a great idea at first, but it present all kinds of issues in management and reporting. Having to worry about migration consistency in *n* databases is a major problem. Laravel provides great resources for segmenting data in the same database by way of global scopes. There's no sense in boiling the ocean to keep tenant data separate.
I am co-organizing a CakePHP meetup in Berlin on November 15th (Wednesday). The core-developer Mark is going to talk about the upcoming CakePHP 4 and about his IDE helper Plugin. I am going to give a talk about refactoring legacy applications with CakePHP. If you are interested and live in Berlin come around. It's free and there will be free drinks sponsored by Spryker: https://www.meetup.com/de-DE/CakePHP-DE/events/235239013/
MFW when devs think CI should be mentioned when talking about *modern* PHP frameworks. 
&gt; If it's "just a web page", there is no reason to ever benchmark 5000 queries. It's not a common case. Unless it's a "Hello World" Drupal page. 🙃
This is how tests are usually done. But I have to agree, a more reliable test would be to create a regular page and test it using siege. 
And how many python projects are on 2.7 still? 😂🤣
To be fair I've done the same thing on Ubuntu (16.04), I tried to install Python 3.6 and it broke some things so I had to uninstall it and then the default Python 3.5 ended up resulting in everything working fine.
What load component methods are you referring to specifically? Like literally `Controller::loadComponent()`? Regardless of what you are referring to, what would you replace it with?
When I was to open it I thought this is bullshit and I was right :) why the hell do we have namespaces and oop in php I do wonder :)
We have one .env for each tenant, works great for us. You can set which env file, storage and config cache path to use in bootstrap
To be quite honest, guilty as charged here. It's getting painful as a lot of packages rightfully require 7+, but my little company hosts a couple dozens websites that we don't have the budget to make sure they run properly under PHP7 (untested code). Some time we'll get to it if we stop chasing deadlines. I Guess a lot of people are in such a situation, not to mention shared hosts or crappy all in one preinstalled CMS solutions.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The most expensive part of software is development time. Not server cores, not bandwidth, but that lazy fucker that's paid more than a doctor. If he can use a framework to speed things up and give less bugs, it's worth a lot more than just adding more resources to an instance. 
*fake laugh hiding real pain* true story, i spent 500 hours last year refactoring a codebase to use PDO. that was quite a hill to climb in order to upgrade to 7. wonder how many other shops are prevented from upgrading by technical debt like that
&gt; &lt;?php &gt; &gt; $times2 = require 'foo'.php; &gt; var_dump($times2(21)); // int(42) Typo? `'foo.php';` surely
I just started using DOMPDF (not for filling out documents, but for dynamically creating legal documents that would then be printed) and I like it.
&gt; C# can now run on Linux In a very limited way, and only as a console application I think...
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
We had a dev for a short time who was tasked with doing the same to one of our apps. It went quickly... but we found that he'd replaced all the mysql_* calls with PDO equivalents, but didn't convert to prepared statements.
Dude, we need the whole extended class to know what this code does exactly.
most of the literature I read on it was hyped up and would lead you to think it could do anything possible on Windows, but yeah. That would be my guess too. I'm still getting used to the new Microsoft that plays ball with open source
&gt; as you can't know what namespace an included file populates Well, for 1, thats what docs are for. Also 2, if you know the file name and location, surly you can just look in the file.
&gt; Is it useful? Absolutely not. Well, the pattern can be useful. I use it for certain configuration files: &lt;?php return function (ConfigApi $api) { $api-&gt;setThis(1); $api-&gt;setThat(2); };
But you know, this is the year of Linux. Or something like that.
[IUS](https://ius.io/Packages/) can take away some of that pain.
well... look at the bright side, at least you can upgrade to 7 lol
&gt; Varnish bookmarked.
By "you" I meant PHP code loading a module via it being placed in a directory
to be fair, I have no clue what CI-3 looks like. Is it any modern than it's predecessor? 
PHP 5 is only supported until the end of next year. Python 2.7 is supported with bugfixes until some time in 2020, which means between 12 and 24 months longer than PHP5.
is it a todo app or a legacy code base that we are going to write tests for
Remind me today at 10pm
they're probably waiting to upgrade to PHP 6
I highly recommend looking into containerization solutions, like Docker.
It was a good framework back then. But once you’re used to Laravel et. al. CI seems mediocre at best. 
[Relevant link for PHP supported versions](http://php.net/supported-versions.php)
I’m writing an open source personal finance app and a lot of the support questions I get are about people running PHP5.x and trying to get my PHP7.1 app to work. 
On the topic of prepared statements vs. manually escaping or emulating... I found this interesting and have a feeling /u/colshrapnel will too. GitLab posted an article about how they've dealt with scaling their database. https://about.gitlab.com/2017/10/02/scaling-the-gitlab-database/ &gt; A side effect of using transaction pooling is that you cannot use prepared statements, as the PREPARE and EXECUTE commands may end up running in different connections; producing errors as a result. Fortunately we did not measure any increase in response timings when disabling prepared statements, but we did measure a reduction of roughly 20 GB in memory usage on our database servers.
You should use static methods when the method doesn't depend on an instance of the object. For example look at the Str and Arr classes provided by the framework.
They change too much between versions, no thought given to backwards compatibility, makes me totally understand those who stick to an older version.
I refer to `static::CONST_NAME_HERE` inside the core code of [Certainty](https://github.com/paragonie/certainty) so that users that need to [run their own custom CAs](https://github.com/paragonie/certainty/blob/master/docs/features/LocalCACertBuilder.md) can create a class that extends `ParagonIE\Certainty\Validator` and replaces these constants with their in-house Ed25519 public keys (hex-encoded), and it'll "just work".
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [paragonie/certainty/.../**LocalCACertBuilder.md** (master → 509e3cb)](https://github.com/paragonie/certainty/blob/509e3cbfc4b8574e4c10958131d52bba72ea820b/docs/features/LocalCACertBuilder.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dp40ndg.)^.
(This is a documentation link, so a permanent link is actually harmful.)
Not funny. Fucking accurate. If it ain't broke, don't fix it.
This is just factually incorrect. You don't HAVE to use Python 3.4 and you can use PHP7 (and even 7.1) on CentOS 7. Just because you don't know how to do something correctly doesn't mean it can't be done.
Good news! We've installed front and side airbags... into your ['72 Pinto](https://en.wikipedia.org/wiki/Grimshaw_v._Ford_Motor_Co.).
**Grimshaw v. Ford Motor Co.** Grimshaw v. Ford Motor Company (119 Cal.App.3d 757, 174 Cal.Rptr. 348) was personal injury tort case decided in Orange County California in February 1978 and affirmed by a California appellate court in May 1981. The lawsuit involved the safety of the design of the Ford Pinto automobile, manufactured by the Ford Motor Company. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
Outside of Laravel, I'll use static methods for a few things: * Factory methods that are responsible for creating new instances of the target object (ie: `Foo::make('bar')`) * Helper methods (ie: `UrlService::slugify('Some Title')`) * Accessing Constants (ie: `CustomException::EDGE_CASE`) * In rare cases, maybe Singleton access (ie: `SingletonClass::getInstance()`) - **This can be considered an anti-pattern** Basically, as /u/tttbbbnnn put it, you can use static access for class methods and properties that don't require an instance of that class.
Now that I think about it, wouldn't this be a php 7.0 bug rather than a 7.1 BC break? Shouldn't functions with return types always return a type? there's no reason `return;` should work when it expects an int right?
Yes, using empty return is a bug, but it's not so simple, I think. PHP 7.0 raise a fatal error, when calling return without value, but work fine if you don't execute any "empty return". Now, since PHP 7.1, just declaring empty return change the code behaviour.
One of the requirements from major enterprises is private RDS to hold their data. But regardless of that, I work for a company that has been operating on a multi-database strategy for over 10 years and that's not changing anytime soon. For those in the same boat as me, the article could be handy.
How do I make phpstorm auto generate `@return void` for void methods? It's personal preference, but I hate methods w/out a doc block, messes up the flow of how the class looks personally and I'm lazy to type it out every time.
Because you're talking about performance metrics that aren't relevant until my website has an entire team of programmers who can then be tasked with solving the problem.
[meirl](https://giphy.com/gifs/boy-crying-interview-l3vQZ8ko4l0nvjm2Q)
Is it less relevant than that : http://php.net/manual/fr/migration71.incompatible.php#migration71.incompatible.too-few-arguments-exception
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
is the $150 a month cost worth spending time optimizing the code to get more request at a lower cost ? probably not !
Sure. I remember I couldn't even convince my boss to update Guzzle. Good luck with a major php version. I'd like to see that monster of a Jira ticket for a legacy PHP system.
Are you kidding me? One of the biggest issue people have with PHP is the legacy and the horrible standard library, which is a result of trying their best to preserve backwards compatibility.
These might be a bit skewed tho, as at least half composer installs happen on dev machines which are more likely to be latest versions. Still 90% seems a bit off. 
I just refused to install any third-party things that were likely to break. I haven't had access to the WP sites I built for over three years, but they're still running, they're still auto-updating, they've never been hacked and they haven't broken. No one's maintaining them, but every now and then I get those update emails.
Or is it due to apps written that use composer tend to be newer and more adaptive?
Hadn't even thought of that... Yup that helps. 
&gt; Considering that the open source community has brought us a lot of great, well written tools over the years, I wouldn't subscribe to the statement, that you get what you pay for. &gt; Pay attention, PHP is not the language where "well written tools" are being produced right now.
That's... not bad as an *incremental* improvement, assuming that 90% of it could be done in a semi-automated way...
An Ubuntu 14.04 the previous LTS release only uses 5.5. 
Simple application with emails templates, job queues for send emails or other actions like download and insert in db some information, browse and perform actions over database records, users management and group management, the framework is good but is overrated and as is a very basic framework It toke much time to develop this application like it could have been with Laravel, yeah django is very good too, but it doesn't include queues or emails, there is celery which is great with rabbitmq, and django-celery, I haven't used the user managment system much in django but it looked so much easy to work with it than FOSUserBundle crap, I haven't worked with rails more than the basic tutorial so I cannot say how good it is
The last PHP devs with whom I worked hadn't heard of PDO. They didn't know what version of PHP they were running when I asked. 70-80% of devs I encounter in the wild are similar. I simply don't get it.
Use virtualenv or a proper dev environment isolation solution such as Vagrant.
Most of our stuff was migrated to PHP7 this year, and we still have projects that we'll need to run up a php5 server for. It's hard to convince clients that you should rewrite their website.
That's about where we're at, unfortunately. Too many sites (~400) on our servers, most of which were built on &lt;= 5.4. It's not practical to sit down, get them all running locally and test every single feature on 7 to see what it would take to move it to a newer server. So until there is reason (i.e. major new feature where we can spare a few hours), they'll stay on 5.4 or 5.6. The good news is that with Stretch out, we finally have a full end-to-end workflow for 7 ready to go. All new sites going forward should be PHP 7-ready (and we already have a couple dozen that were built for PHP 7 and either are live or in the client review stages)
That's about where we're at, unfortunately. Too many sites (~400) on our servers, most of which were built on &lt;= 5.4. It's not practical to sit down, get them all running locally and test every single feature on 7 to see what it would take to move it to a newer server. So until there is reason (i.e. major new feature where we can spare a few hours), they'll stay on 5.4 or 5.6 (we're trying to phase out 5.4, but even that is extremely difficult to find time to do). The good news is that with Stretch out, we finally have a full end-to-end workflow for 7 ready to go. All new sites going forward should be PHP 7-ready (and we already have a couple dozen that were built for PHP 7 and either are live or in the client review stages)
Here's your reminder…
I'm also not saying that they are all great. Just that dismissing them all, because some suck, might cause you more work than needed. It's not as if all commercially available tools were flawless... You gotta pick carefully in both areas. 
I'd like to see where that 90% is hosted, and what the newest version of pho said hosts offer is. We face this problem at work all the time as hosts just don't seem to want to take the time updating to PHP 7. I understand legacy apps but it's time to make 7 the default for new and those that need older for legacy can go through hoops of backdating PHP. We are starting to force clients to new hosts that have PHP 7 as we do any work for them or especially if they have maintenance contract with us
&gt;I'm also not saying that they are all great. No, you're liquid_at.
But if you say that function will return an int, having no returns seems wrong to me, if it doesn't rise an error that's a bug or it will fall as unexpected behavior.
RHEL 6 and 7 have them in the SCL collection. It's only an extra command to get them so I'm not sure that is a fair statement.
In the past I always felt really mixed with Linux distro's running behind. For the most part, I want extreme stability and no BC over long periods of time, on the other hand... there's a select number of packages where I don't feel this way. Usually this ends up being just the runtime of the programming language I'm using. So with Docker becoming widespread, I'm actually really happy because I can have it both again. Distro's can be as stable as they need to be. I don't care that they want to run PHP 5.4, because there's other PHP-based packages that they might want to run on exactly that version. I just run the latest PHP (or Node) in a docker container. Best of both worlds imho.
If it works, don't touch it.
I bet it would look very different if it were weighted by traffic/CPU clock-time consumed. Sure, 90% of sites are on outdated versions of PHP, but the vast, vast majority of those sites are only visited by bots.
&gt;PHP 5 It's broke. 
Please go try an mysql_query() on PHP 7 and tell me more about this famous backwards compatibility?
Yes, sure, but who never wrote bugs ? Look : I wrote a function which perform a division and return a float. In this code, I put a condition in case the division would be a "0", and instead raising an exception, I returned nothing (Yes, it's a bug). I use this code for a long time, and nothing happen because I never send a "0" as parameter (because, I already perform a check before using the function). Now, I think my code is stable, nothing happen, no fatale ...etc. Ho .... I'm in late with my PHP version, 7.2 just released, I upgdrade with confidence, and .... boom, fatale for a case I never done before.
[removed]
Surely you're trolling.
That's a proper lolphp :P
Is it or not a behaviour change between PHP 7.0 and PHP 7.1 ?
&gt; But if you say that function will return an int, having no returns seems wrong to me, if it doesn't rise an error that's a bug or it will fall as unexpected behavior. It doesn't have to raise an error because PHP is not statically typed, nor gradually. All is checked once evaluated, at runtime.
This is not a 7.0 bug AFAIK, PHP is first not statically typed and second only executed paths happen to be checked. The second return statement is unreachable.
GDPR is a good example of idiotic, 70 year old, politicians deciding over things they cannot touch anyway, and hope that they can get companies to slip in order to collect some fines. Two things about GDPR are good; 1) Data transparency 2) Cannot force users into terms they didn't agree to. Everything else is shit. I mean, they will only evaluate companies they feel will be profitable. The small companies they won't even touch. Fine, someone needs to keep the big ones under control too, but instead of spending billions on developing GDPR, why not spend the cash on just fucking educating the people and making them think twice before they register their phone number with facebook, or their date of birth with google, or their real name on snapchat. Problem is that they cannot make money that way. I wish that this will make companies not want to deal with EU, and that we will suffer the consequences - so that all countries can leave the EU. I live in the EU, and it's a fucking shitfest.
If a property or method is static it belongs to the class rather than an object that is an instance of the class. You can use them in PHP like this: $dbConnection = DatabaseConnection::buildFromConfig($config); //buildFromConfig is a static method belongs to class DatabaseConnection The static keyword is often overused in place of SOLID object oriented design, particularly in PHP. There are a few valid use cases for it. A static function has access to all the private and protected properties of objects using the class which makes it useful for doing things like factory methods, translation or serialisation/ unserialisation. When those processes get more complicated it's better to use a separate service class. That way you can use injected dependencies and can effectively unit test it.
I have updated this now and fake data is not really needed, an empty table would give the same results I think.
I have updated my article now and I include data for emulation turned on and with a new conclusion to use PDO.
Thank you. Now it puts an end to the long debate "whether PDO is slower than mysqli".
You have to edit the DocBlock template for functions (found in `Preferences -&gt; Editor -&gt; File and Code Templates -&gt; Includes -&gt; PHP Function Doc Comment`). By default there's a condition that return type is only added for non-void functions. Change it to something like this: /** ${PARAM_DOC} * @return ${TYPE_HINT} ${THROWS_DOC} */ 
When you cal the function the whole function is compiled and this behavior has been probably present since forever. Please remember PHP engine doesn't do any optimizations by default and as the code is executed each time you run the script having dead code optimization is useless. 
because solid enterprise grade applications where you dont need to rebuild everything yourself 10^100 &gt; performance. if performance is a real issue, learn to use http caching and use gateway caching. the last thing i judge a framework for is performance
It's a behavioral change yes. I'm not sure if it's a new feature though, sounds like it was a bug in 7.0 which only got fixed in 7.1. However, the fact that you have a return that returns something other than an int (namely: null/void), you've simply made an error which should've caused this exception to trigger in 7.0 already. Grab PhpStorm (with the inspections plugin) and save yourself a lot of debugging time.
A use case where I often use static methods are named constructors. Very well explained here: http://verraes.net/2014/06/named-constructors-in-php/
&gt; Everything else is shit. Really? How about data rights? Why is my mobile phone provider allowed to sell my number on to marketing lists? I did a deep read of my contract with them, it's not listed that they do that, but surprise when I moved a number to them, I got spam phone calls. GDPR would prevent that. Also this defines two extra parts: 1) companies must take reasonable measures to secure the data at rest (btw, encryption at rest is defined as reasonable), and 2) they *must* report any breach within 72h. No more Equifax-style "oh we were breached in like, July, and we're telling you late October!". GDPR is going to be fantastic for consumer rights with their data. It's also going to give your data protection ombudsman actual teeth to go after companies that play it loose with your data. (e.g. TalkTalk's databreach last year would've been much much much more serious under GDPR).
&gt; PHP engine doesn't do any optimizations by default Sure it does. The level of optimisation depends on which PHP version you're running. 7.1, as an example, does [SSA](https://en.wikipedia.org/wiki/Static_single_assignment_form) &gt; the code is executed each time you run the script This depends on if you have any form of opcaching enabled. ([It seems to default to enabled most of the time](http://php.net/manual/en/opcache.configuration.php)) 
**Static single assignment form** In compiler design, static single assignment form (often abbreviated as SSA form or simply SSA) is a property of an intermediate representation (IR), which requires that each variable is assigned exactly once, and every variable is defined before it is used. Existing variables in the original IR are split into versions, new variables typically indicated by the original name with a subscript in textbooks, so that every definition gets its own version. In SSA form, use-def chains are explicit and each contains a single element. SSA was proposed by Barry K. Rosen, Mark N. Wegman, and F. Kenneth Zadeck in 1988. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
I wish GDPR would be everything that we wanted but I'm afraid it won't. I will believe it when I hear about personal data being forcefully erased for non-compliance and companies getting fined. Large companies tend to have some policy on how data is handled but the micro/local businesses with a web store don't know/care about it so this is a gigantic endeavor to force people to understand and respect their customers.
&gt; I will believe it when I hear about [...] companies getting fined. Word and rumour is that, in the UK at least, the data commissioner has a bunch of companies under investigation and will spring GDPR charges upon them once it's enforceable law (it's currently law, just not enforceable). 
You're using the libraries wrong...
Try https://github.com/daudmalik06/PhpChromeToPdf or https://github.com/GoogleChrome/puppeteer or https://github.com/spatie/browsershot . Headless Chrome for teh win!
Different people have different tastes.
but this look taste better isn't it?
So, basically, what you're asking is why people don't utilize HTML5 features more?
&gt; Firebase Pricing Plans. Start for free, **then pay as you go.** No, thanks. Besides, there was already an attempt to write data manipulations as HTML tags, called ColdFusion. I don't see any reason why it could be heated back. Besides, not everything in this world should be Google. And not every bit of your private data should be shared with Google.
This is outside of my comfort zone; I see that Chrome can be run headless but is there a way to install chrome without installing all the X11 packages and all that, so it can be used on a production server?
this new technology more powerful than HTML5 i think.
Worry not, as soon as they see money to make (and fining companies for those breaches is), they'll get to it.
You can build a PWA driven by PHP. A PWA does not have to be statically built, service workers can easily be used to cache dynamically generated content, the manifest.json content would still allow it to be "installed" to home screen/ desktop etc.
wow i don't know this is possible. any link to the course how to use PHP as PWA? Thanks for the info. appreciate
use step 7 &amp; 8 in the original article as a starting point.
&gt; I wish that this will make companies not want to deal with EU, and that we will suffer the consequences - so that all countries can leave the EU. &gt; I live in the EU, and it's a fucking shitfest. I live in the EU as well and I am quite curious as to how you could come to the conclusion that "it's a fucking shitfest". But then again I'm not really sure what your nationalistic desires have to do with this subreddit. I understand that you seem to take a somewhat libertarian point of view in the matter and I'll have to respect your opinion but the only thing that is a real shitfest here is your post conflating professional and personal opinion as if that would somehow make both of them more valid.
also I've not watched it yet, but there was something to the effect of wordpress + pwas at the recent google dev conference.
I can't disagree more - I think that while most businesses are responsible enough with user data, there are enough irresponsible businesses pissing in the swimming pool to make a problem for everyone. The regulation is not perfect, but is the first step in addressing the problem by saying 'No this is not okay', providing 'clear' guidelines on how data should be handled and tools to deal with businesses who are taking the piss. It's also raising awareness and consideration of how user data is handled where it may not have been considered before. In my business there have been many high level meetings discussing what data we collect, what we use it for, how long we should store it for and how easy is it to delete. These conversations would not have happened without GDPR, and I expect that there are thousands of other similar conversations happening elsewhere in other businesses both large and small. This is not a bad thing, even if the regulation turns out not to have any teeth.
Sp 90% of the internet is broke now? News to me
I think the npm module for puppeteer downloads a static binary
So wait, it releases at the end of November? darn
Take a look at the Slim framework. Here are a couple tutorials to get you started: - https://www.slimframework.com/docs/tutorial/first-app.html - https://www.cloudways.com/blog/simple-rest-api-with-slim-micro-framework/ - http://www.bradcypert.com/building-a-restful-api-in-php-using-slim-eloquent/
if it won't run on PHP 7, it's very possible you're going to have some security problems. 
Ah yeah I see the default now: /** ${PARAM_DOC} #if (${TYPE_HINT} != "void") * @return ${TYPE_HINT} #end ${THROWS_DOC} */ Thanks, I really appreciate this :). Now to export my settings in case I forget this later lol
Strongly disagree there. The remaining security vulnerabilities are surrounding very edge case scenarios where certain php lib functions accept various arguments. If you aren’t a hardcore php application (in which case php 7 seems appropriate) then there is a very small possibility that you’re violating anything w security. So... what are you talking about?
Using pdo has nothing to do with the security of a language and everything to do with poor application support. It’s foolish to think otherwise 
I live in the EU, and this is the first time I heard about GDPR. I think you're overreacting.
lol, that was a first time attempt at commanding the reminder bot of reddit. BTW, beautiful site to register. Nice and clean, minimal, easy on the eyes and a pleasant to use.
If you still use mysql_query you have a lot more to be worried about then being backwards comaptible
It's a cash cow for consultants, for sure. 
I don't even live in the EU and I've been hearing it nonstop since early 2017. Are you collecting private information of EU citizens on your properties ?
Fixed, thanks!
&gt; If it's "just a web page", there is no reason to ever benchmark 5000 queries. It's not a common case. except for importing/exporting data.
I sincerely hope that you don't work with customer details or collect any sort of information about people - such as emails or even "anonymous" poll data, because if you do, it's really important that you read up on GDPR.
Evidently not.
It is not MVC which is flawed, but its interpretation by illiterate folks. Stop calling the model the blunt data mapper, [make it contain all the business logic](https://phpdelusions.net/articles/mvc) instead, and MVC will serve you flawless. 
For the last 4 months I have spend almost all of my time at work rebuilding legacy systems to adhere to the GDPR changes. Speaking as a web developer it has been agony, especially as there are some aspects that are interpretable or changeable depending on country (Like the age of content to agree to share data). With all of these changes it will make web development/software development difficult; especially with pre-existing services. I do think that GDPR makes a lot of good policies in the interest of the consumer, a lot of which should have been in place a long time ago in my opinion. I may be wrong but I think that the changes give an individual the right to be forgotten. 
I will absolutely vouch for the quality of OPs work. Definitely get in on this if you can. 
Yeah, all the "how to GDPR" webinars and seminars and classes here and there... All of them saying exactly the same and doesn't give any actual information other than "You'll be fined if...". All of them also thinks everyone is running a P2B solution and not B2B, where you'll have to work with PDAA's (Personal Data Assistant Agreement). None of the idiots know what rules applies there and how it affects the business... 
first of all, thanks for the comment. MVC works fine in a small app. But as the codebase grows, you will surely want to add more design patterns into the mix. It certainly has made my life easier, in terms of organizing the code base. Why would you call people who do not use MVC illiterate? There are certainly very smart people in PHP community that use other architectures. Example: Anthony Ferrara, https://blog.ircmaxell.com/2014/11/a-beginners-guide-to-mvc-for-web.html
Nothing really new for us germans, most of that has been law for us for many years already
I don't call people who *don't use* MVC. I call people who call a Model just a blunt datamapper like in your article, an empty class that just extends the default "model" class. 
Same here in Italy too...
You may need to do a little catch-up then, if you deal with IT systems that process personal data.
There is surely a misunderstanding here. I do not use the default laravel Model (which extends the Eloquent ORM) for anything else. This is so that everything goes smoothly when I upgrade the framework version. If by Model you are talking about business logic, then I use a Domain layer(could be called a Domain Model/Business Model too) for that purpose. You can see the architecture I use in part 3 of the series: https://medium.com/@sameernyaupane/php-software-architecture-part-3-extensible-architecture-c3fc4d8f0e02
GDPR is shit because it's too broad. You can't even log web requests without user consent, because browser agent is identity enough accordingly to them, not to speak of the IP address. As soon as a user visits your website, they can contact you and ask for a complete data record set, including web server logs. How do you as a server owner verify that the requesting user is the same user as the user in the logs, and if you don't log IP-addresses, how do you know which logs are of a specific user? Accordingly to GDPR you are obligated to hand out those logs, and sacrifice other users safety - because they don't even need court orders to request that information. If a person requests you to delete all logs before you realized they did something malicious, how are you going to report it to the authorities, since there are no logs of the event? You're not even supposed to keep a registry on who asked to have the information purged. So, either you log web requests and sacrifice your visitors safety and identity, or you don't log anything and don't get any logs of anything. 
https://www.reddit.com/r/PHP/comments/79u4ev/gdpr_a_brief_reality_check/dp53zbf/ So basically, you think it's a good thing that there will literally be people and organisations visiting websites and request data record sets after their visits? Small companies will literally not be able to pay for full time employees that sit and handle data record sets from all their visitors all day long. This is basically what GDPR does. It's going be super prone to malicious intent, both by regular users and by organisations trying to lessen competition. I get it, GDPR is trying to be nice. But all it does it being shit, because it's preventing business from feeling safe, big or small. I know that as soon as this GDPR thingy is a thing, I'll start asking A LOT of companies for details about me, lol. Everyone else going to do the same. Companies will literally close because of the request load.
Well I see it like this. First, people demoted the Model to the rank of a stupid ORM, and then start devising other names for their Model. So it opened wast possibilities to create new buzzords like DDD, HMVC... the train goes on. Edit. To sum it up. I do believe that it is not MVC which is flawed, but its interpretation by generations of PHP frameworks, who called a Model just a database layer. Given such a setup, you naturally cannot avoid writing all the business logic in the controller. 
Or even paper, it applies to your old note books and binders too. If you have parents or relatives who still have their contact phone numbers in a book somewhere, it's going to be applicable under GDPR.
Depends on the goal. If you want to obfuscate your code, it's perfectly OK. BTW, these two snippets are [not equal](https://3v4l.org/ZV6CC)
Whatever you say, Model is not enough as the application grows. I don't like complexity just for the sake of it either. And I do not believe in upfront over-architecting. MVC is good for small apps. Add more design patterns as you go. That should be the goal. Instead of just having a fat model with all sorts of logic in it. God nows what people put in there. Things should be separated as needed. That is the first principle in SOLID. "Single Responsibility Principle". https://en.wikipedia.org/wiki/Single_responsibility_principle
**Single responsibility principle** The single responsibility principle is a computer programming principle that states that every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class. All its services should be narrowly aligned with that responsibility. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
&gt; As soon as a user visits your website, they can contact you and ask for a complete data record set, including web server logs A request must be reasonable and satisfiable. The holders of the data can also seek verification of the requester, and can reject it if they feel they are unable to be sure the requester is the right person. (In fact, you must do this, as it's your due diligence). &gt; You're not even supposed to keep a registry on who asked to have the information purged Actually you must keep enough information to ensure that if you had to restore from a backup, that you can re-purge any records that might be in the backup. (Again, the deletion must be reasonable, if you've got 3 months of daily backups of 60GB compressed each, it's reasonable that you don't need to expunge their record from the backups, so it's reasonable that you keep the request for deletion for ~3 months to ensure that if you did have to pull a backup, you can purge the data again) 
With this one I can only agree. 
You're not allowed to keep information in backup environments. If you purge something, you need to purge it from backups too. If someone requests a data record set, and you hand it out, it needs to include what exists in backup environments too.
I had this exact discussion with the ICO. If you can reasonably argue that purging from backups is more hassle than just keeping the purge request and purging if a restore happens, then you're allowed to do that. (With obvious limitations on retention of the purge request; i.e. if you have 3 months of backups, then there's no reason to keep purge requests past 3 months either) If in doubt, prod the ICO.
can it be OK *and* ugly?
&gt; Add more design patterns as you go. What patterns? Also, no matter how many "patterns you add", to the MVC triad, this additional logic will be exposed either through the Model, through the View, or the Controller, as that's what *this* particular part of the application is. So "adding patterns" doesn't address this problem of how you connect the dots in the bigger picture. Also, your MVC diagram says "model updates view" and this is not what you're implementing in the code. In your code, conceptually "$data" holds the view state, and the controller is what updates the view, and the model is something else entirely. MVC can be interpreted in different ways, but you can't use one diagram and another implementation. It's confusing, and suggests lack of understanding of the pattern.
As long as the code works its great.
I would not use loose comparison (==), unless you really want to ignore anything falsy (empty array, empty string, '0', 0, false, null). Also empty() is not exactly the opposite of the null coalesce operator. As the name suggests ?? only checks null values, empty also checks for all other falsys. $a = false; var_dump($a ?? 'null'); // bool(false) var_dump(!empty($a) ? $a : 'empty'); // string(5) "empty" Make your code more readable using: $b = $b ?? null; $a = $b == $c; // $b === $c if possible 
Since we don't have the context of expression, but we have $a, $b, $c, they both look ugly, if you ask me. 
We've been given two different answers. Still don't think this is shit?
You can use it now. 
This is what unit tests are for my friend.
If you won't know what it's doing by looking at it when you see it again in a few weeks then it's not okay, no. Always favor readability over *shortness* or *cleverness*.
The diagram is actually from the original MVC pattern. I got it from wikipedia here: https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller If you read carefully, after the diagram, I describe that we do not use MVC that way anymore. It was certainly that way for desktop applications. For web, it is of course not feasible. So, the controller acts as a glue between Model and the View in the web context.
I know where the diagram is. But you shouldn't include one diagram and another implementation. Maybe you expect people to "read carefully", but what many will do is: - See the diagram. - See the sample code. - If still interested, read the rest of the article. Including a diagram that's completely irrelevant to the code is confusing. &gt; It was certainly that way for desktop applications. For web, it is of course not feasible. I'm sorry, but that's bullshit. You can implement MVC as-is on the web, or you can implement it differently. Whether it's on the "web" or not is irrelevant. You're implementing it the way you do because that's what you see frameworks do. That's fine, but then don't use the wrong diagram. You're basically padding your article with generic information off Wikipedia that makes your article *less* informative rather than *more*, as you're not implementing MVC. 
Stop spreading FUD: Ch. 1, Art. 2: &gt; This Regulation does not apply to the processing of personal data: &gt; [..] &gt; c) by a natural person in the course of a purely personal or household activity;
It's just 3-4 more paragraphs to add to the EULA, and then keep doing things mostly as you did. Just like the cookie law, despite what the article says. The European Union is becoming notorious for this kind of poorly devised impotent bureaucracy and regulation which does nothing to solve a problem, and annoys everyone, developers, businesses and users alike.
This was my first article series. So thanks for the suggestions. I'll keep that in mind for future articles. &gt;You can implement MVC as-is on the web, or you can implement it differently. Whether it's on the "web" or not is irrelevant. Regarding that. Of course you can, if that is your goal. Most people just extend the frameworks, and they do not do it the old way. And when the web just came out, it was very impractical. We did not have a way to update the view without triggering to refresh the page. Ajax only became mainstream after 2004.
Even they can't even keep one set of rules the same, but good that they finally changed that part for the better.
And here's what I do: - I adhere to GDPR visually. - Internally I do whatever's best for the system without regarding GDPR (doesn't mean I'm deliberately reckless with user data, but I generally don't give a f\*\*k about their instructions). - I run the business through a separate limited liability company, so risk is restricted to it alone. I'm all for smart regulation and so on. But just like the cookie law, what we have here is a bunch of bureaucrats with possibly good intentions, but poor understanding of the problem, and a golden hammer - legal enforcement - that they think they can use to fix the world. When you try to tie my arms behind my back through legal bullshit, don't be surprised if I use legal bullshit to untie them. GDPR is a problem that should be resolved through *both* technical *and* legal means. If you blindly follow their instructions and think the solution is code and only code, you're harming not just your competitiveness and business strategy, but also the users, who don't get to benefit from these edge cases and obscure legalese they have to click "I agree" on. You're just scaring them and flooding them with consent boxes they can't understand, and losing business. I also don't ask for cookie consent. 
It's sad because I feel like they're trying to solve something important. My privacy has been largely invaded on the web without my consent. From what I've read, without even having a Facebook profile they likely have a huge dataset on me and there's nout I can do about it. I was never asked to give this information but through tracking pixels and the likes they've discovered what websites I go to, what I look for, like, and dislike, all without my consent. However every website saying "We use cookies, click OK" doesn't solve anything, and now every website saying "We use cookies and possibly share your personal data with third parties, click OK" won't help either.
Two points: - MVC is not "the old way". You're just doing MVC "the wrong way", or doing something other than MVC. - You don't need to have the ability to refresh views through AJAX or whatever in order to implement MVC, so that's irrelevant. In particular your sample code suffers from fat controllers, which in practical terms means you're coupling presentation logic (HTTP handling etc.) with business logic (calling APIs, manipulating models etc.). This is just bad architecture, whether on the web or off the web. It works OK for small, simple sites, but it's still bad architecture, and defeating the very purpose of separation of concerns in the MVC pattern.
I disagree. I do think that it makes putting logic in the controller the obvious solution, but, the model can be treated as a simple repository and logic can be modeled around that repository as you would with any other system. Involving AR is an entirely different can of worms though.
&gt; From what I've read, without even having a Facebook profile they likely have a huge dataset on me and there's nout I can do about it. If you think GDPR will make Facebook stop profiling you, your hopes and dreams will be shattered to small pieces. &gt; However every website saying "We use cookies, click OK" doesn't solve anything, and now every website saying "We use cookies and possibly share your personal data with third parties, click OK" won't help either. Yup.
If you treat the Model as a simple repository, where do you put other business logics? Let's say third party API implementation logic? All in the Controller methods?
No. If your imports consist in thousands of "INSERT" queries, there are better optimisations than trying to optimize the driver (example: LOAD DATA INFILE for MySQL). Same for an export. You're probably fetching a statement, not doing a new query for each row. 
Correct. The model is not a class, it's a LAYER. The best alternative to MVC is to use MVC correctly.
Mind if I share?
Actually, they did learn from the cookie directive. You can't "click agree" your way out of GDPR. You have to actually do the legwork or face fines.
API implementation isn't business logic. Manipulating the resource could be done in commands, services, whatever you want to call it. The controller should invoke that object to receive the data it needs and then send it to the user. It's simply the interface between your application and the user. 
Please do. Attempting to share it with everyone via Reddit.
PHP actually implements the same optimization. What you are probably comparing is not the cost of the array, but the cost of including files between PHP and Peachpie. Just "creating" that array 10M times should take &lt;0.1s on your hardware, so I assume you're testing including that specific file 10M times. (Even with opcache, including files is not entirely free.)
Same. We've used it on our sites to add footers/headers etc. 
GDPR makes lots of recommendation on how data is stored, that can't be inspected merely from the UI. So how much legwork you have to do isn't so clear-cut. If you "visually" comply, they have no cause to ask for your source code.
A very simple how to get started with the beta version: https://stackoverflow.com/questions/46918623/cant-install-profiler-symfony-flex/46920989#46920989
I know this is going to sound weird but I wonder how many are Plesk servers. We have a Plesk server at work and even though everything hosted on it runs PHP 7, it constant reports the sites as running PHP 5 because that's what Plesk runs on... which frustrates me to no end.
Nope, this is a standard BS. What you describe is not MVC, but just a mess (seems to be inspired by few shittier frameworks). **Please stop spreading misinformation.** And, btw, MVC actually extremely harmful in small apps. The entire architectural pattern is intended to restraining an large codebase by introducing additional constraints. Those constraints require *some* setup, and small apps it would just become a useless boilerplate. 
Did you actually looks at that diagram. Are you views pulling data from the model layer? &gt; The view contains the HTML that we use to show the user a formatted output. To keep the post less complex and simple to follow, I’ll let you imagine the view with some HTML tags. Nothing fancy with the Views that we need to worry about anyways. What you describe as a "view" is just a template file.
It's the active record instances, that he calls "models", not the mappers :P
Well, yes. Both views and controllers constitute, what you could call "UI layer" - views handle presentation and controllers deal with input. When you are creating a RESTish API for and existing project, (in an ideal case) you just make a different UI layer for the same domain business logic (contained in a model layer).
None of these statements are true: It does not scale well with bigger applications. -- It does pretty well, we've been using this pattern in massive code bases, and serving more than 20m monthly unique users in some cases. It encourages fat controllers/or fat models. Causing spaghetti code as the code base grows. -- MVC doesn't, poor coding practices do. The answer to this is related to the inaccuracy below: It limits separation of concerns to only three different parts. -- MVC provides a skeleton for your app - most frameworks come with services, containers, dependency injection, and so on, enabling code separation even further. I suggest you spend some time diving into the architecture of most MVC frameworks, as there are much more components to them than this: - Front controllers - Dispatchers - Services - Dependency Injection and IoC 
Agree with you as webdev. I'm from Ukrain and working on Dutch company. I was restricted from SSH access to the webservers because of GDPR changes. Me and my collegs have spent a lot of time to make our webshops work fine without direct access to the servers, to create deployment system and be able to read logs at least:) However, even now current restriction causes a lot of problems while solving some issues on production environment. Instead of spending time and clients money to improve project quality or implement new cool features, we spend resources to tight our hands. It looks stupid. There is no privacy in our web life already - and I almost sure that we wont reach privacy in web at all, just because other people can collect data using current techlogies level. But, maybe it will give a push to use/create more safe technologies and practices from privacy point of view... will see.
&gt; This sounds like a long shot. It requires passing in attacker-controlled input to the query parameter of prepare. But as it turns out, this exists in core in `/wp-includes/meta.php` citizencaineclap.gif
MVC is a unit of reuse for UI, I wouldn't say it's harmful in small apps, or that it's just for large apps. The basic pattern doesn't require a lot of boilerplate, it can be as simple as two closures and one array.
&gt; Because you are still getting 100+ requests a second. How many sites have you done that have had that many requests? And at that point, how hard is it to throw them behind a load balancer if you have to handle more than that? 1. a few. Like 5 - 7. 2. I have no idea how to do that. I'm not a sysadmin or whoever's job it would be to know that. Does this make Laravel a bad choice for me?
I found an interesting juxtaposition between: &gt;But if that’s not acceptable, then at least move to a statement object style system where `prepare` returns an object which is then executed. And for the love of god get rid of `escape_by_ref`/`esc_sql` as well as the still-existent `_weak_escape` (which calls `addslashes()` and has been “deprecated” for 4 years and still somehow exists)… and &gt;When 4.8.2 was released, it included a “fix” for the above issue. The “fix” was entirely contained in `WPDB::prepare()`. &gt; [...] &gt; This caused a massive outrage. WordPress originally (years ago) documented that you should only use `%d`, `%s` and `%F`. WordPress bangs on about its backwards compatibility to the determent of its codebase and the hosting ecosystem; and yet managed to introduce a backwards compatibility break in a minor point release albeit by removing an undocumented feature.
or... define("php", ".php");
But of course they can't afford to switch to prepared statements. That might cause BC breaks! /s
It's upon us, developers to request hosts to upgrade. They have no reason to upgrade by themselves. This iniative might bring some help: https://gophp71.org
&gt; Also before anyone says it no this is not for security purposes, I don't think anyone is that silly. My usage for it is a anti-content scrapping / leeching of links and elements on HTML pages. Web scrapping bots are dumb when it comes to this since they just want to read and grab images etc from HTML src tags. They don't know how to obtain content from javascript strings and puzzles they need to work out to get the link they want. Either way i wanted to find as many of the PHP libraries as possible to help. You might be surprised... You can do miracles with chrome headless (or any headless browser), obfuscation is useless against it.
&gt; WordPress’s response to the outrage was won’t fix, sorry. They cited security as the reason and refused to elaborate. So they won't update their minimum PHP requirements due to backwards compatibility, but then break undocumented but somewhat common behavior for security reasons. Nice one, guys.
Yep at my work there are a few sites still running on PHP 4 that aren't constantly getting hacked or anything. Until the client pays for development and sysadmin time to upgrade it we're just hosting it for them and not touching it.
&gt; I get angry just thinking about it. the only part I get angry about is that they're making the same money as me. Or more.
remind me again why people think it's a good idea to handle credit cards with WP and WooCommerce . This type of crap has been happening to WP for _years_ . 
you're hired
why aren't you obfuscating as part of a build step?
It all runs within `for` loop .. anyway good to know PHP implements similar optimization! In the result, we can say, Peachpie improved by this optimization and is comparable to zend.
Weird, but I am okay with that specific use-case, which is obviously human/programmer-error, throwing a fatal error. That should be easily caught in the development life cycle.
Or finding some worst offender queries and adding indexes or optimizing the SQL. But yeah, what everyone else has said. I'm actually surprised Cake beats out Laravel and Symphony, go Cake!
It also exists in other places as well, but i can't be arsed to raise it.
remind me again why people think it's a good idea to handle anything except blogging or small sites in WP. 
This use case is weird, ok, but it's juste "simple" one. Read my other use case which is not so unusual.
I swear this subreddit is bipolar when it comes to WordPress. Edit: not as bad as /r/webdesign
PHP is constantly evolving. PHP 7 adds support for [return type declarations](http://php.net/manual/en/functions.returning-values.php#functions.returning-values.type-declaration), but "only" for scalar/basic types. Would't it be useful to add support for non scalar types and arrays of non scalar types as well? Is there an RFC for that? Example: public function getConnection(): PDO { ... } public function findUsers(): User[] { ... } 
What
You could use Tideways with xhgui. My limited experience with that indicated that it's worth paying Blackfire (or Tideways, I'm sure) rather than dealing with the headache of working with xhgui.
Got to support those EOL'd dependencies, PHP 5.2.4, MySQL 5.0 both have been dead for at least 6 years. 
https://seld.be/notes/php-versions-stats-2017-1-edition Might be able to argue that WP is enabling some of this...
the
How does a virtual dom here help? With react it makes sense because you can pull data and update the page dynamically but this looks like it would be for static based pages. So I’m just curious how does a virtual dom work in his case?
I am aware of PhantomJS, Selenium etc, I have no care for or interest in stopping those who are determined enough or bots of that sort i much prefer those who run the code than those who content scrap and leech. Those are the bots this is useful for. The old and dumb bots. If i had intended to stop or find ways to prevent headless browsers running the code to get the output I would of asked such a question, My project does not require that however. :) I just wanted the obfuscation libraries to make the code difficult to read not impossible for specific entities to execute.
hemorrhoid working with symfony 
What do you mean? I don't think anybody likes WP here.
I'm confused, is this exploitable in core WP or not? Anthony's post seems to say it is. but the WP release notes say: &gt; WordPress core is not directly vulnerable to this issue https://wordpress.org/news/2017/10/wordpress-4-8-3-security-release/
But wouldn't the first example be safe from SQL injection if it were `(int)$id` instead? I'm a big proponent of using prepared statements anyway, but it seems ok in theory.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
All else equal, I'd take /u/ircmaxell's word over the WordPress team's any day of the week. But he pointed out where the vulnerability existed in core in one of the blog posts. (`/wp-includes/meta.php`, to be exact.)
While coding php I frequently think of when my period comes so I have an excuse to stop. Then I realize I'm a guy and stop programming anyways.
Even their patch for 4.8.2 states that the vulnerability does not effect the core. There definitely needs to be clarification here. I want to test this tomorrow. If the core is in fact vulnerable then we have some far larger issues at play than simply incompetence. 
It's almost like the largest forum website on the internet consists of multiple people with different opinions! Imagine that crazy concept! 
&gt; There definitely needs to be clarification here. &gt; If the core is in fact vulnerable then we have some far larger issues at play than simply incompetence. I'm going to be blunt for a moment. WordPress has previously demonstrated a willingness to lie to their users about vulnerabilities affecting core. See [this talk](https://kraft.blog/2015/05/how-emoji-saved-your-sites-hide/) for more information about Andrew Nacin and the rest of the WordPress core team engaging in dishonest behavior because they believed it would prevent mass-exploitation if they weren't forthcoming about the security fixes being delivered. Whether or not this dishonest action was the right choice, the fact remains that they have lied before and can be expected to lie again in the future. Whether or not you like Anthony Ferrara personally, you can at least be damn sure he has enough personal integrity to call a spade a damn spade. The WordPress team? Not so much. So, that said, I implore you to investigate and independently report your own findings. Skepticism, independent verification, reproducibility of results, peer review, whatever you want to call it, it's a damn good thing.
Thanks for sharing that. I'll take a look. 
It's more like WP is praised in threads for being backwards compatible and then also criticised for terrible security for being so backwards compatible. I personally hate WP for it's workflow. It's _okay_ at being a CMS for people who are running a small website. Once you start trying to run a scaled multinetwork WP site you really should consider what you're trying to do.
MVC is not an architecture. MVC is a user interface design pattern. 
I don't think you read the article properly at all. That controller code is shown as an example of how not to do MVC. I later refactor that code in the last part here: https://medium.com/@sameernyaupane/php-software-architecture-part-4-refactoring-fd577eb6fe3f
Technically it would. But the question was about escape string function, not int casting.
You show wrong MVC code in "Part 1" and you fix it in "Part 4"? The problem isn't that I'm reading the article improperly, the problem is you wrote it improperly. Also your final solution still doesn't implement MVC, and it does some questionable things, like passing $request-&gt;all() to the domain, or doing "save to the database" operations in a "get" method, which would be highly surprising to most, TBH.
Another usecase for leaving Wordpress behind. 
You can already do: `public function getConnection(): PDO {}` As for the 2nd one, user array, not yet. I'm sure it's coming eventually.
True, but also wouldn't wrapping the variable around in quotes suffice as well? $string = $mysqli-&gt;real_escape_string($string); $res = $mysqli-&gt;query("SELECT * FROM t WHERE id='$string'");
Can't you make the answer yourself? Technically yes, but the question was about escape string function, not wrapping in quotes
These were more or less rhetorical questions for viewers of this post to show that prepared statements aren't necessarily needed, as it's not so obvious to everyone. Certainly not recommending to do it this way, but it's still nice to know.
These rhetorical questions are bulshit, because readers &lt;s&gt;are idiots&lt;/s&gt; never take into account the context in which question is asked and inclined to simple magical solutions like "escape strings to prevent injections". 
On an unrelated note. Wordpress needs to start a more secure version and break backward compatibility. I feel one big flaw is how admin side cannot be walled off easily because frontend needs to use some admin code. 
That's your opinion, and you are certainly entitled to it. However, I personally believe it's good to know, as it's not so obvious. Like I said though, I would never recommend for anyone to use anything but prepared statements to escape user-input
And have you checked to see if it's the same people doing the praising and the criticism?
If you want to show off as such a smart ass, instead of asking stupid "rhetorical" questions that will give your "reader" (for whom you're so much concerned) anything but a clear picture, you should have tried to draw a complete fucking list of rules one have to follow building dynamical queries without prepared statements, taking into account all possibilities. Go on, let's see if you can make it.
Calm down, was simply trying to helpful. Wasn't trying to attack you in any way. Didn't realize I was dealing with someone with superiority complex. I simply pointed out that it's misleading and disingenuous to say your first example is unsafe from SQL injection, while the second is safe, simply because you're using PDO. For the most part, all you need to do is set the charset to utf8 for my examples to be safe (at least for ints and strings). Again, I'm not suggesting to use it instead of prepared statements under any circumstances.
It's cheap and easy. That's why. Money is the reason for most things humans do.
First off, it's not about my "superior" self. It's all about your "topic viewers". Now don't tell me to calm down. It's you decided to go this road. You didn't state your opinion openly or ask a straight question. You took my words out of the context, interpreted them in your own way and started to feed me from a spoon with "rhetorical questions" as to make me to draw the right conclusions. The problem is, you don't know what the right conclusion is. So, if you don't want to be called an arrogant idiot, let's start over. Try to evaluate my answer there in the context of the previous comment I were answering and ask a straight question or formulate your disagreement without any tongues in a cheek. 
Next week, tune in to find out how examining my own faeces helped me with unit testing.
I had a client who asked to take over their old site and host it while developing the new one. I got the code loaded it up on local and immediately turned their live site off after I was done. They had a very old v4 install with no updates installed at all. They were using WooCommerce and were collecting credit card data. They had no idea about compliance or security and somehow thought "we have done this for years" was a strong defense. I lost the new site contract for not implementing the same thing. But I told them if their old site goes lives ever again I'm going to have fun ruining their day.
it was a foolish idea to repost your question from /r/phphelp here. means you know the rule but deliberately decided to break it
You get pretty decent performance by running a single-insert prepared statement inside a transaction.
Oh no! I guess with the density of data you can fit on microfilm, and with fast automated access, the law is trying to stop people using physical storage to work around the law.
the title is retarded. 
&gt; they have lied before and can be expected to lie again in the future ...is a bad argument. I've lied before (I once said I'd only eaten 2 cookies instead of admitting I'd eaten 6), but I'd hope I could be honest about things that matter. That said, I understand your message here and applaud how it ends... &gt; So, that said, I implore you to investigate and independently report your own findings. Skepticism, independent verification, reproducibility of results, peer review, whatever you want to call it, it's a damn good thing. Is damn good advice!
Personally I've never seen a wp is good post on the front page of the sub. I can't recall once. Maybe it's not that wide spread or you died to much time on /new
not relevant to the topic but the deveoper in that picture looks like Jon Snow ;)
Um...https://github.com/preprocess/example-phpx
Cool, but wouldn't this be better in a C# or .net sub? `:-)` 
Im a PHP developer too, and the challenge is for PHP developers too. I posted it on csharp and golang, and want to see effects. My 24h, was in c# because lately I have no oportunities in work.
I do. I wouldn't build an e-commerce or handle sensitive content with it, though. 
Eating more cookies than stated and pretending your commercially-used framework has no core security vulnerabilities are two entirely different things. I'll lie about idiotic crap all day, because it doesn't really matter. Lying about something like this carries much higher financial ramifications. Someone willing to lie in such a serious context deserves no trust.
I hear you, and I agree they are very different. I guess the original sentiment; "once a liar always a liar" is the argument I don't agree with. Companies can improve and people can rotate in and out of those companies. There's no reason to hold it against them forever. That's how I feel about it, anyway. Edit: for spelling. Because, apparently, I can't.
Agree with you on this one. Exactly, MVC is for small apps. Even a single feature can use MVC, let alone an app.
Amount of unique visitors does not equal a complex project. I could as well have a static page with millions of views. Yes, I did not want to go over all the features of a framework for this article. I agree with you. I use Event/Listeners, Services, even did CQRS for a project. DI and IoC are the fundamental concepts in modern frameworks. Any beginner should already stumble upon them as soon as they start using Laravel. Check out my "Extensible Architecture" on part 3. I go in detail about some the layers you are talking about. : https://medium.com/@sameernyaupane/php-software-architecture-part-3-extensible-architecture-c3fc4d8f0e02
Yes correct. But it can be, and has been used as an architecture. Check out this article by Anthony Ferrara, https://blog.ircmaxell.com/2014/11/a-beginners-guide-to-mvc-for-web.html
What shitty frameworks are you talking about? In the article I give the example code in Laravel. It is the most popular framework out there. In no way can you call that shitty, unless you can code a better one yourself.
Was going to say this too... Remi has been a go-to for my company-provisioned servers, as well. We don't get a choice on OS, so we're stuck with RedHat/CentOS. This is the way to go in such a situation.
I wish I was paid more than a doctor
If MVC is enough for you, then go ahead use it everywhere. But you can't say others are not using MVC correctly, there are plenty of top developers with their own architecture or use one. I don't think they went and formed one for just sake of having fun. Take a look at the second part, where I discuss the top alternatives to MVC (lots of smart people use them, believe me): https://medium.com/@sameernyaupane/php-software-architecture-part-2-the-alternatives-1bd54e7f7b6d
Really, that is the greatest part about Symfony is that all of the components can be used elsewhere. You are not restricted to the Symfony framework. They even have an article on how you can build your own framework using their components. Honestly, what you’re describing is Laravel. 
It is not just me who calls it. Laravel framework and most of the users call them too. "Model" is a vague term. Depends on what specific thing you want to attach to it.
xpath ftw!
&gt; PHP is not meant for creating documents Uh, if there's one thing PHP has always been meant for, it's to create documents. Templated hypertext documents -- and remember, newer docx and odt documents are just packaging some xml. It just happens that the people working in proprietary docs/offline docs ecosystems overlapped more with Java/Visual x etc programming ecosystems, so that's where the library support has developed.
I think you did a good job, but it was positioned slightly wrong. Though I don't know how to present it to make it accepted more warmly. Actually, what you invented here, is just a standard approach used in Symfony. Laravel is more like "fire and forget" Framework, which is advertized as a aimed to rather lazy and lame development. May be that's the reason you had to re-invent that wheel.
&gt; ...is a bad argument. I've lied before (I once said I'd only eaten 2 cookies instead of admitting I'd eaten 6), but I'd hope I could be honest about things that matter. This isn't "Lied about apples, so cannot be trusted with oranges." This is "Lied about apples, so can be expected to lie about apples going forward." If they have lied about core being vulnerable before "to protect our users", you can't put it past them to lie again. That's my point. Apples-to-apples comparison is an important detail.
Companies that have lied before must expect to have to work hard to re-establish trust. What has WordPress done different in the months since that last core vulnerability was fixed? * They've doubled down on their insistence to use the misleading term ["responsible" rather than "coordinated" disclosure](https://adamcaudill.com/2015/11/19/responsible-disclosure-is-wrong/) * They've expressed pride toward themselves for their dishonest behavior (see the video of Andrew Nacin's talk) * They've outright ignored most would-be volunteers with security backgrounds * They have failed to establish a dedicated channel for open source volunteers to contribute to improving WP's security where they'll be taken seriously * As a consequence, I have to resort to back-channel communication with the few WP core devs who are clueful about security, even if they're almost exclusively underappreciated by the people who make decisions for the WP project (i.e. Automattic) I don't see anything to indicate a culture change. Their keystone habits are likely the exact same as they were years ago, and until they are changed, we cannot trust them to behave more honestly, and should therefore verify anything that sounds like downplaying the severity of a vulnerability and/or its relevance to core. &gt; I guess the original sentiment; "once a lier always a lier" is the argument I don't agree with. If you lie, even if it's a "white lie", you hurt your own reputation. That's the cost of admission for deception. If you want to be viewed as more trustworthy, you must therefore do *something* to mend that trust relationship. It's not that WordPress is incapable of reform, it's that they've shown no willingness to do so. So, yes, ***until they do something different***, in your words, "always a liar".
Thanks /u/colshrapnel . Yea it was my first article series. I'm sure there are a lot of shorting comings. Well, with anything, experience is key. :). So I shall keep improving. Cheers 
I'd love to, but the response is not XML - It's converted to an object
I would prefer something like *What do have Symfony release cycle and nature's cycles in common?* The title Tomas came up with is very click-baity and repulsive at the same time but if I ignore the fact that menstruation cycle is a taboo for a second the blog post makes sense to me.
Regarding the alternatives in part 2: 1: TDD and BDD are not an alternative of MVC. TDD and BDD are development methods and not a alternative to MVC. 2: DDD is a different way of structuring your application and is no problem to design an application with MVC while applying domain driven development. 3: Also: not an alternative to MVC. See my comments on 2. 4: MVC is an example of Onion Architecture. 5: Also: not an alternative to MVC. See my comments on number 2. Don't get me wrong, but I think you overestimate your knowledge of software architecture if you think TDD and BDD are alternatives to MVC. If we're talking about MVC alternatives, we're talking about MVP or MVVM for example, not about TDD or BDD.
I learned the hard way that the presentation is the key when you post on Reddit. My first thought was oh no - mwc again! I apologize for my first reaction, but I am not alone taking it this way. I encourage you to post other parts
Did this affect WordPress.com as well?
My two cents working at an agency with WordPress consuming clients, having to maintain custom code for WordPress (stuff for said clients), and project lead for what is essentially looked at as competition in the CMS market space (actually, mostly that one, but my experience does come from a combination of the three). WordPress only cares about security when it is convenient for them. And they never communicate it as a flat out "we made X change in response to a security issue" or "we have added support for Y to improve security for Z scenario". The communication is always hidden under a vail of "how do we communicate this to someone who barely knows how to tap the Safari icon on their iPhone". If present at all. Their development strategies are so focused on what the end user sees in the UI that they really don't give a damn about their responsibilities in other parts of the platform (like when the use Ed25519 signatures for core updates stuff was flat out denied because it wasn't focused on Gutenberg or the REST API). As much as everyone in this Reddit shits on Joomla, at least we have responded to the legitimate security concerns in our API and continue working on improving things (yes, that also means fixing vulnerabilities that if the commits/patches were properly vetted wouldn't exist, but that's another story). When we introduced UTF8MB4 support, we didn't hide it under "you have emojis now!" text, we flat out said what changed and why. We've basically completely rewritten our cryptography API based on feedback given by Scott (and included support for sodium). Our next major will support prepared statements natively in the database API. Hell, even our password validator can handle Argon2i passwords, and we don't even support generating them right now. I honestly feel like a major mentality shift is needed in the WordPress leadership team. Sooner or later, one of their irresponsible decisions is going to result in an event so unprecedented that it will make the Equifax incident look like child's play.
What if the hosting ecosystem continued to brag about their great WordPress support while those who aren't solely focused on WordPress also aggressively advertised to their users about how insecure it is?
Yea, I am new to posting on reddit as well. So that makes it even worse. Haha. Will do, thanks.
1. TDD and BDD is given so that people can understand that they are not alternatives. I talk about it right after in the explanation. 2. Yes you can combine MVC with any architecture you want. That does not mean you can call them MVC. They have diffrent layers. Yes you could call it MVC + DDD if you want. 3. Same as 2 4. Onion Architecture uses Interfaces for each layer, and is more similar to Hexagonal. 5. Same as 2 MVP, MVVM and all the MVC cousins are already talked about in an article by Anthony Ferrera. https://blog.ircmaxell.com/2014/11/alternatives-to-mvc.html He argues that these are not an alternative to having a better architecture. And I agree with him on this.
Yeah, you had me until the "paid more than a doctor" bit.
1. You introduce your list with: 'Now, let's move on to some pretty interesting alternatives' and the first item of your list is BDD and TDD. My point is, that if you name your article 'The alternatives', it's confusing at least to include TDD and BDD in a list of alternatives of MVC, because TDD and BDD are to MVC as ham is to hamster. 2. Nobody is calling it anything. MVC is an architectural pattern for implementing the user interface. It's the same as interior architecture versus exterior architecture. When you design a house you could go for a classical, cozy interior (application core) and a modern minimalistic exterior (user interface). They are not mutually exclusive. And regarding 3, 4 and 5: they are abstract guidelines on how to design your software and don't have much to do with the actual architectural patterns you apply in your product. They vary a bit in the details, but all have one objective: Separation of Concerns. You're on a crusade against MVC with your articles about PHP architecture, and that's perfectly fine, but if you apply the SOLID principles you'll find out MVC scales perfectly with bigger applications and doesn't encourage fat controllers or models, nor causes spaghetti code.
Yes, I probably need to phrase it better. But if the user reads further, he/she can figure it out already.
Good job with the refactoring; always a pleasant feeling when this is done! Will you look to refactor more at an earlier stage in future? I presume like a lot of people (myself included more and more these days) that you adhere to a red-green-part-refactor cycle?
Thanks Emily
Yeah you heard of that guy Trump? He's like, the most popular Prime Minister. In no way can you call him shitty, unless you can make a better one yourself. ... See how stupid that sounds? Since when did popularity amount to quality?
I don't understand why they don't do a branch split and make the new version focused on PHP 7 and best practices, a WP 2.0 if you will.
Laravel implements MVC in the same way as Democratic People's Republic of Korea implements democracy. 
Do you think, that by posting links to someone who has a clue, will somehow magically rub off on you? Your attempts on appealing to authority does not actually work.
It's always a matter of managing tech debt isn't it? Refactoring is part of our development cycle and we do it as frequent as we can. In this case it was a big one, I was killing a lot of debt. About test-driving (red-green-part-refactor cycle) I don't actually do it, I tried it out but it doesn't work for me, usually I play with the composition of the classes in a single PHP file to see how it goes, if I like the result I implement and and only then I write tests.
Fair enough. I had made the assumption you were test-first as opposed to test-after. Out of interest, what part of TDD did not work out for you? 
Test-driving as a tool to discover behaviour, meaning writing tests before the implementation.
Right, I'm the who started making this into a hostile situation. Look, like I said, it's fine for you to have your opinions on the matter. However, there's a more civilized way to debate matters like this. You clearly have a lot of passion for SQL security, and I admire that. But I'm really not sure how you took this so personally and interpreted this as an attack on you. I won't sink to your level and insult you, as that's not my style. I'd love to continue to have a rational discussion, but I'm not so sure that's what you want. You're also acting as if my comment was extraneous and I simply made it to sound pretentious. Consider this, a beginner who sees your comment might think, that using PDO prepared statements is the only way to protect against SQL injection. You simply can't use `$mysqli::real_escape_string`if you want to protect against it. While I personally would neither use it instead of PDO prepared statements / MySQLi nor recommend it, there's nothing wrong imho about trying to clear things up for beginners. Maybe you forgot what that's like.
http://php.net/manual/en/features.commandline.webserver.php
For developing you can use the build in web server. http://php.net/manual/en/features.commandline.webserver.php For production you need a proper server like nginx,Apache or something like that. 
php has a built in webserver for testing/development http://php.net/manual/en/features.commandline.webserver.php
Production?
No
You can literally just install apache web server from their website. If you are running a mac, apache comes installed by default. All you need to do is find the config files and start the server. If you have linux or windows, you can still run apache, but you might need to install it. If you know how httpd.conf and .htaccess config files work, then you already know most of what you need to get an apache web server working on your own.
production is a live server that serves real visitors, as opposite to the dev server if which you're the only user
production = the live build you use for a working site or app.
/r/phphelp
So, you picked an Active Record based ORM and now are surprised that it makes for shitty testability? Congratulations. When you choose this antipattern, you have only two options - either you combine the business logic with persistence logic or you combine the business logic with application logic (service layer). So you are doomed from your very beginning. &gt; The mechanics of OOP can make it tricky to test. It's not the fault of OOP, but of the the anti-pattern, which you picked in your ignorance. Maybe next time read about SRP .. than you can make another article. 
Yes. All these apps (wamp, xampp, etc) do is install a preconfigured environment with Apache, PHP and MySQL. You can do it on your own by following the installation guides for each part (PHP's guide is [here](http://php.net/manual/en/install.unix.php))
You must be fun at parties. 
 Not a question, but just some rant off my chest. I really want to learn PHP to take advantage of job postings in my area. I was powering through the laracasts basic series to get the basics out of the way. Now, I can live with the quirky syntax. I know all it takes is time to get used to using symbols that would have been just `.` in other languages. But why in Jesus' name are array functions inconsistent in their parameter orders? Why are some functions `camel_cased` and others `justfitallthewordsinonelinecase`? These things make me sad. Oh well.
😂 so you’re saying you should test implementation details? The point of the article is about what to avoid when testing sir. I’d love to see your tests btw? See how you do with SRP...
And you must be shit at work ... ya know, if you want to compete in throwing classy insults.
Previous discussion: https://www.reddit.com/r/PHP/comments/783cs1/paragoniecertainty_automate_your_php_projects/
**What it does:** Lets you securely obtain an always-up-to-date CA-Cert bundle (cached locally, checks at most every 24 hours unless configured differently). If a major CA gets compromised, you can immediately stop trusting their certificates. The basic usage example [here](https://github.com/paragonie/certainty/blob/master/docs/features/RemoteFetch.md#basic-usage) is how 99% of users will end up experiencing it. It also includes tooling for running your own in-house CA certificates in addition to the latest CA-Cert bundle from Mozilla. I imagine a lot of shops will find this feature desirable, and it's baked in for free. Let's put an end to software that disables certificate validation because it "just works".
&gt;I also don't ask for cookie consent. thank you
So edgy
 Anyone would choose working with him over a code zealot who can't see merit in other methodologies. Arrogance is a shitty trait in software developers, regardless of the quality of their code. Let's see your write up so you can humble us with your code instead of just throwing around buzzwords.
how do we keep up-to-date on whether this tool was compromised or sold to nefarious actors? 
You can simply [run your own infrastructure](https://github.com/paragonie/certainty/blob/master/docs/features/LocalCACertBuilder.md) if you do not trust me or my employer. We provided the tooling to make this easy.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [paragonie/certainty/.../**LocalCACertBuilder.md** (master → f81aed1)](https://github.com/paragonie/certainty/blob/f81aed199ed35540ac616a50f75e00003d64ceb9/docs/features/LocalCACertBuilder.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dp7ibba.)^.
Who are the 3rd parties that currently audit the system, and who audits them?
Nobody and anybody. But the data is totally public and if anything malicious happens, anyone can blow the whistle: https://php-chronicle.pie-hosted.com/chronicle/export 
How could both nobody and anybody currently audit the system? Why should anyone trust an unaudited stream of data that provides a list to automatically trust? This doesn't make the CA system stronger, it makes you the one true CA.
Thanks for this nice comment! I think it's nothing to be ashamed off. What exactly do you find repulsive? Menstruation cycle is completely normal thing we talk about, at least around my folks.
Still amazed MySQL never developed an API more suited to PHP. The two round trips required to prepare and execute a statement could so easily be replaced with one. Just send the parameterised SQL and the serialised values and go... 
What you've just described is *emulated prepared statements* which obviates the security proof of code-data separation.
Ilias is fairly popular afaik. 
I don't understand what this article is about. It's like all the reasoning/examples are hidden behind paywall or sth.
Good news is that this sounds like a parse time error (lint?) and not run-time, so it should be very easy to run a quick script over the entire code base to find.
Moodle
No. I'm taking about sending the statement to be prepared, and the parameters in a single trip to the server, without doing any SQL parsing on the client. Currently, prepared statement requires one round trip for preparing the statement, and another for executing. The assumption being that your going to execute the prepared statement multiple times. In PHP apps, this is rarely the case as resources are freed at end of page rendering. Example would be to serialise the query and parameters to a protobuf... message Query { string SQL = 1; repeated Params params = 2; } Where SQL would be parameterised like 'SELECT * FROM t WHERE c = ?', and the params would unambiguously hold the values. No string processing on the client necessary, only one SQL parser being used (the servers) so have no mismatch. And reducing the performance difference between using unprepared and prepared statements.
Too bad you didn't write it as a [Porter](https://github.com/ScriptFUSION/Porter) provider. We could start building a complete Travis API for PHP.
Are you aware of any RDBMS that support this usage? If so, this would be a good feature to add to PDO in 7.3.
Awesome work! I love the changes you've made since the initial announcement, especially with `RemoteFetch` :)
&gt; How could both nobody and anybody currently audit the system? Formally, nobody, because it's brand new. In practice, anybody *can*. You don't need our permission. &gt; Why should anyone trust an unaudited stream of data that provides a list to automatically trust? This doesn't make the CA system stronger, it makes you the one true CA. No, you're totally missing the point here. Certainty isn't replacing your certificate authorities. The closest analogy would be that Certainty is replacing `wget https://curl.haxx.se/ca/cacert.pem` (and possibly the same SHA256 checksum from the same server) and blindly trusting it to not be compromised. Fun fact: After verifying updated bundles, we will be providing **the same bundle that the cURL developers provide**. You can even cross-reference the SHA256 checksum to what they provide. There is very little room for a trust violation here to occur undetected. It would simultaneously require: 1. Compromising the cURL developer. 2. Compromising (or colluding with an evil bizarro version of) our software so the SHA256 checksums match. And even if an attacker had this capability, they are *forced* to broadcast evidence of their compromise by publishing this data into a Chronicle, which as stated is independently verifiable. [Learn how Chronicle works here](https://paragonie.com/blog/2017/07/chronicle-will-make-you-question-need-for-blockchain-technology). Let's say Comodo gets distrusted tomorrow, because their CA was sold to a company that sells MitM appliances. Firefox pushes an updated CA-Cert bundle. cURL publishes their cURL-compatible extract. What happens then? If you're using Certainty, once we have verified the authenticity of the cURL-provided bundle (and associated SHA256 hash), your systems will be updated in, at most, 24 hours (unless you change the default cache expiration). If you're not using Certainty? `¯\\_(ツ)_/¯`. Maybe you'll get updated the next time someone runs `apt-get update &amp;&amp; apt-get upgrade` (or distro-equivalent). Maybe one ca-cert bundle will be updated, but not the one your PHP software selects. This becomes very interesting for attackers. Store an older cacert.pem file in a directory your software will try first, have access to a rogue CA that has long since been distrusted, still get MitM access to that webserver's outgoing traffic for the price of a DNS cache poisoning attack or compromised router. If you still can't see the security benefits of this project, or are too stuck on the "who watches the watchmen?" type meta-questions, maybe this isn't for you.
I'm not a huge fan of the underlying code in Moodle, at least when I used it back in 2013, but it sure did get the job done. 
* https://github.com/peter279k/php-travis-encrypter/blob/12e467038b5718643d07eb10b75c29e4837693a3/src/Travis/Encrypter/Encrypter.php#L45 * https://framework.zend.com/security/advisory/ZF2015-10 Generally, you should hire a cryptographer if you're going to build something that encrypts, preferably at the design phase.
Opigno if you want to go Drupal 7 based
How do you feel about this [command-line alternative](https://github.com/icasdri/travis-encrypt-cli/blob/master/travis-encrypt.sh#L63)?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [icasdri/travis-encrypt-cli/.../**travis-encrypt.sh#L63** (master → ad882e7)](https://github.com/icasdri/travis-encrypt-cli/blob/ad882e7f8dd7adee8a352193355ca092fe3413dc/travis-encrypt.sh#L63) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
I can't really speak to how popular it is, but I've been using it in production for quite a while. Really solid and works great.
How is this product not 100% "watching the watchmen?"
honestly full featured LMSes are pretty complex, I wouldn't want to maintain one on the side that being said I maintain a bunch of e-learning modules for Drupal if you want to go down that route https://www.drupal.org/project/course https://www.drupal.org/project/quiz https://www.drupal.org/project/certificate
Canvas is probably the latest and greatest open-source LMS, but it's not PHP
It's not PHP but honestly, you really shouldn't lock yourself into a language when you're looking for solutions. https://www.canvaslms.com. Canvas LMS is pretty nice and open sourced on GitHub as well. https://github.com/instructure/canvas-lms
I'm also using it in production on a number of sites. I really like it as a framework regardless of the performance stuff, which I just consider a bonus. And on the performance stuff, the speed isn't the main thing for me... it's the low memory usage. You can run a decent sized site on a $5/month VPS. The small community can be a bit worrying long-term, but I decided that it was still worth using. None of my projects will ever need to run on crappy shared hosting anyway. Although I'm a solo dev who runs all my own servers, for both my own projects and all my clients too. If I were in a company/team environment I might be less likely to use Phalcon. The fact that it's not a "do everything" framework to begin with (loosely coupled, and mainly is just used for core DI/MVC functionality) means that (hopefully)... should Phalcon die off, it wouldn't be a massive job replacing it with a compatible PHP-only framework. I'll continue using it on my PHP sites. But personally I'm considering getting into Node+React in the long term now though seeing event loop/web sockets etc are becoming more and more relevant to webdev, and it will force me to finally learn JS properly.
Sakai is what UNC uses. 
&gt; You can run a decent sized site on a $5/month VPS. Phalcon is quite basic as a featureset and API compared to what Symfony and Laravel do. And I'm sure you can also run a Symfony or Laravel site for $5/month VPS, as I have a bunch of Symfony sites on one.
Yeah no problem running a pile of sites using any frameworks on a cheap small VPS. I just mean you can scale more, at a lower cost due to the lower memory usage per thread. Just looking at the logs on one of my bigger production sites at the moment, I can see the highest memory usage per request/thread is about 1.2MB. All things considered, it's not huge difference at the end of the day, and there's usually other more important factors to consider on most projects. But it's non-zero edge in one area that might be worth considering for certain projects.
I tried it back in the version 1 days so I can't speak for version 2 at all, but v1 was just too basic for me. It was like Code Igniter 2 lite.
I have never used this Porter. After I read your README.md, I can't find the completed tutorial. Is this the good sample for the Porter provider? https://github.com/Provider/Steam Thanks.
Please see this reply in this issue. https://github.com/peter279k/php-travis-encrypter/issues/1 Thanks.
Nice, clear overview. Thanks for sharing!
&gt; WordPress moving to JavaScript Wait, whaaat?
wordpress is moving towards js slowly, their first electron app 'calypso'. https://developer.wordpress.com/calypso/ 
Automattic is prototyping a new editor with a JS framework....WP core will still be PHP. I highly doubt WP will move to 100% JS ever...maybe if Node became a serious contender but that's doubtful simply because the nature of JS is not to be a server side language but a front end language. 
There are a couple small companies in Chicago who use it. Seen it in job listings and from candidates I've interviewed.
https://automattic.com/work-with-us/javascript-engineer/ &lt;br/&gt; We’re [building new ways to interact with WordPress](https://github.com/Automattic/wp-calypso). They’re simple, fast, and highly usable. They’re written in the latest web technologies and are used by millions of people. We want your help. We’re looking for an experienced JavaScript engineer with:
Congratulations! You find a easter egg
WordPress may have pushed up PHP adoption, but did it make the language better? Did it bring better code or more innovative applications into the world? Things change, programming languages ebb and flow, frameworks and CMSs do too. PHP will have a place in the web development atmosphere for a long time - WordPress or not.
I said repulsive because in my social circles the topic is partially considered taboo. Do not get me wrong, we do not deny that menstruation exists or something. But it is a private thing. I would not come to my friend and ask her questions about her menstruation cycle.
how is this an easter egg?
Wow, you are living in the dark ages. Node does certain stuff better / faster than PHP can on server side. Of course PHP does some stuff better than Node. As for blogs/CMSs, Node can do it just fine, but PHP eco system is better suited for it. 
Last time this was posted, it wasn't about the backend, it was all about front end stuff. And it was aimed more towards wordpress.com stuff.
Nope, I'm not in the dark ages and that is quite rude to say. Node isnt going to be the future of server side scripting. It'll be around and used for smaller projects but it's not a serious contender for larger and more robust projects.
The company I work has used it for some 100-150 websites, but there is no reason any of those couldn't be built using any other framework.
Just chiming in to say that there are in fact large sites, like walmart.com, parts of PayPal, Google, Azure, LinkedIn, Netflix, Trello, Groupon, and NASA, all running on Node…
Ok, so _why_ would I want to generate travis-encrypted environment variables - whatever that means? What does this do?
Probably because most hosting providers dont allow C extension to be installed which is what Phalcon uses to make it run.
Literally tons of education providers use Moodle. Its actively maintained and developed. Thier latest version includes a Bootstrap 4 based theme in the core (although slightly of of date). There is also various companies offering commercial support. Code wise its somewhat WordPress-esque. It has lots of plugin capability, but still also riddled with global functions and variables etc.
Why?
I typically use a job queue and scale out to multiple processors, or multiple VMs rather than implementing threading inside PHP itself. If you have a 8 core box, you just run 8 queue workers on the box.
This again. Sigh.
Sometimes I have the sensitive environment variables in .travis.yml. That's why I create this PHP package to encrypt the environment variables.
im also sad to read all this :(
&gt; As for blogs/CMSs, Node can do it just fine No it can't, because pretty much no cheap hosting company is running Node.
I agree, I made some changes on text to make it more clear.
We're using in production on most of our microservices (backend only) for a hotel metasearch website. It is serving us good and almost never gets in the way (like Laravel or Symphony do). My opinion is: for microservices it's perfect, for CMS you can be spoon-fed by using laravel/symphony (which is not a bad thing!), with phalcon you have to do more.
I'm involved in a fairly large project using Phalcon for a big client. I have mixed feelings about it, mainly dislike - but it works and that's what's important to the client. If I had the chance, I would probably switch out the framework for another. One of my main concerns is actually the community around Phalcon; it's small and resources for help, inspiration or general talks are therefore scarce. I recently had the pleasure of setting up continuous integration for the project; I really needed some resources for getting this running smoothly. A long story short, I eventually had to create my own Docker image and use it in CircleCI - it works great, actually, but somehow it just feels dirty. If the community was as greatly backed up as Laravel, Symfony or CakePHP I would probably feel different. It's not because community defines my work, but it drives the development. I really feel like Phalcon needs that.
I used pthreads a while back in a project for a customer. They wanted us to automatically crawl PDF files from their website and analyze them for specific content in their imprint that needed to be changed. Originally this should be a browser based application where you could control everything, however that idea was scrapped later. I used PHP as a *command line* program because the download process is so smooth. You literally just write copy('url','dst') and just like that you download a file. One year later, to improve the process, i used pthreads to handle multiple downloads from one program call. I ended up using 6 threads where each would download and analyze a file and then move to the next file. This was my first big project.
Start from /r/phphelp
PHP is not going to die, there are so many PHP projects out there that there will probably be PHP jobs for the next 15 years. But less and less people choose PHP for new projects. Maybe the current ubiquity and popularity might make PHP survive more, but I see it going slowly down.
So, it seems to be an issue on Travis' side...
What unchecked power does anyone gain above and beyond the `wget https://curl.haxx.se/ca/cacert.pem` by virtue of Certainty being used? * Everything we do is going to be publicly accountable. * Companies that have internal CAs were already capable of MITM on their own computers. Why do you even *need* to know who's auditing us? Wouldn't it make targeted attacks much more difficult if they silently mirrored our Chronicle instance from an Onion Service and only came forward if there were a reason to do so (i.e. the hypothetical attack described previously)?
will try, thanks.
The code in Moodle is a heck of a lot better than it was in 2013, they're on Version 3 last I checked (I worked on Moodle and Totara systems at Kineo from ~2009 up to about 5 months ago, so I've seen it go from the trainwreck that was 1.7's code 'design' up to 3.1). The community is huge, the plugin support is pretty good, and the plugin-points for enrolment, authentication, course formats, modules, blocks, themes, question and custom field types, etc. make the whole thing really easy to extend upon without touching their core code. The best bit about Moodle's code, is that none of it is particularly complex or obscure - it's really easy for even relatively junior developers to pick up a page and track back exactly what it's running and how.
Not just Education providers, either - have a look at the client portfolios for Kineo, Leo, Learning Pool - OK, a lot of those now use Totara (a Moodle derivative), but it gives you an idea of the size of businesses that make use of it.
You realize this is for the front end, right? PHP won't be rendering HTML anymore (not as much as it is now anyway), but it will still most likely power the API that the new JS front end has to interface with.
I've used threads for data processing - one project had a calculation that ran weekly and sent the results onto a data warehouse. Running one record at a time took it from Friday night to Tuesday morning (when it was meant to finish over the weekend) - the poor thing was already on a 16 core server to cope with user traffic in the day, so we spun up 12 threads to run the data through in batches (effectively calculated with limits on the initial mysql query) Not sure if it's worth it for anything you'd come across in usual web applications - one user probably isn't going to be spawning multiple threads unless you have some sort of asynchronous event system. Good for big data stuff though.
Testing abstraction is always easy, because you never test it - you test implementations (and testing difficulty tells nothing about abstraction quality - only class design). By looking at interface you won't really know what needs to be mocked within class implementing it because its encapsulated (or at least should be), you don't even know if its properly decoupled, so that mocking its components/dependencies would be possible. I could implement a bunch of side effects inside this class and make it untestable.
thanks :)
If you're using PHP to call to an external API, then first you need to look up the API in question - there will be documentation detailing whether it's a SOAP or RESTfull API, and what you need to send it to get information. If it's like the AWS API, or something equally prolific (GitHub, Jira, etc) you may even find that there is already an SDK or library that someone else has written in PHP to call out to the API you want to use. If someone hasn't already done the work, it'll depend on whether it's SOAP or REST on how you approach it - SOAP has its own set of classes in PHP, but most nowadays seem to be RESTful, which you can access just by using the CURL functions to send specific params (check the API documentation) to a page, and interpreting the data returned (usually JSON or XML)
I half agree you on this, testing abstractions is the only way in some cases, like in the CarrierServices example as it hits the network. And at the end of the day you can test implementations using the other techniques like passing and receiving objects, avoiding spies, etc...
So you don't test abstraction but mocking/stubbing/faking it while testing the client that depends on it.
It's polymorphism, you care about the messages being exchanged and not about the sender/receiver.
You need not limit yourself by cores, either, if the work you're doing is (especially) IO bound; the CPUs will likely be in a waiting state more often than not so you can easily run tens if not hundreds of separate PHP processes and continue to realize parallelism gains. As an example, in our production environment we run 50 php-fpm processes on each of our 100 or so web servers. CPU typically hovers around 15 or 20% because running the PHP code itself is not really the "hard part" of what our site is doing. It's mostly waiting for cache to return or waiting for SQL to return or waiting for a webservice to return.
Yes, and you use it to decouple the test unit - that you write about, but never actually show it - from side effect (here: connecting external service).
And that's why passing and receiving objects is important, they're the contract ;)
I'm not sure this is 100% relevant since it's not threading per se, but I use job queues in basically every project. I use beanstalkd (gearman in the past) and an in-house framework which handles automatic retries, re-queuing, logging, etc. Usually, performance is not a concern, but if that was the case, I would evaluate not using DB transactions at all and instead think about a DB architecture that would help me scale that upload operation across multiple servers.
Yes ;)
Passing and receiving objects has nothing to do with (outside) context of test - abstraction does. You didn't explain **how** it makes testing easier, and even if you did it I already know that it depends on specific use case and what is the abstraction needed for.
I call shenanigans on that. If you're using shared hosting for anything built with any MVC framework you're doing it wrong. Shared hosting is only really suitable for brochure sites and Wordpress. I wouldn't dream of putting a Laravel app on shared hosting when I can get a Digital Ocean droplet for a similar price and have much more control.
I disagree, passing objects validate the data and doesn't change method signatures, which helps testing. And we have a bunch of tests around creating LabelRequest and handling LabelResponse objects that ignores the CarrierServices interface. We do 1k shipments a day, many of them next day deliveries, and we change how we work with carriers all the time. If we don't rely on interfaces and the messages exchanged we can't have tests, as simple as that.
Just a thought on the file transfer thing... If it's an option just run rsync. 
The way GDPR violations occur is by someone filing a complaint with a privacy authority, at which point they will come to you and ask you to provide proof of compliance. Visually complying is the privacy-equivalent of security by obscurity. It is not compliance, but you probably can get away with it for a while.
You disagreee on what exatcly? You're argumenting in context of testing your client class that I haven't seen in my life. Show class, show mocks, show single f.. test - then we could reason about this specific use case I was talkig about and how object arguments/return types help with testing that client. Meanwhile... just stop feeding me with obvious or meaningless generic statements.
I disagree with "Passing and receiving objects has nothing to do with (outside) context of test". On the contrary, they are central to the context of testing because they are the elements we care about on this specific case. What we send and what we receive in this case is even more important than the interface itself. The interface makes the system open for change and it is used to decouple the implementation, fine. But what I send and receive is what I want to test.
trying to figure out why it's taken this long for someone to discuss a topic like this on /r/php. looking forward to you finishing this series.
This is blatantly false
Cause it's newer and better funded, just go look at it. I moved schools from Moodle to Canvas years ago
I think it has its place, can make for a light project structure and as long as its pros and cons are understood, it is as valid a choice as some of the more popular frameworks used here.
I would appreciate if you could elaborate more on topic of assets (css and js). Another issue is if the application uses RBAC of some kind, there is likely to be import of roles and permission by a module, I guess. That would be nice to have covered as well as an example of general "data import/migrations" issue.
Blackfire also offers a free option that could help to spot performance issues in your project. But the more advanced features are paid (builds, notifications, etc.). In the long run, the UI provided by Blackfire with the additional features worth the investment. Especially if you're working on a team (could be pricey for a single developer).
I’m using for most things I build at the moment for some very large Australian organisations.
I have a shared hosting reseller account for a bunch of old Wordpress sites that I’m supporting for clients. Phalcon is installable with cPanel with a couple of clicks 
Noted! will add something about it for sure!
Maybe to prevent having a virtual penis comparison who trying to get as many points as possible and keep free from these spammers?
Maintaining your own LMS is a lot of work and imo if this is a long-term project I'd do it. Did a few LMS's for international clients with Moodle and Totara. But the code base is very deprecated. Better to write your own LMS on top of Symfony.
We're go in circles here. First, I was saying that you need implementation to tell if test is easy or not. Then you've said youre not testing implemetation because it could be connecting different services, so I assumed your using it to decouple yourself from actual test. Now you're going back to passing/receiving objects **for test**. So again... **WHAT ARE YOU TESTING?** - show example.
Needs to have server support. Remember about 20 years ago MS SQL Server 4/5 had something called connectionless prepared statements, it reduced the number of back and for between client and server, but didn't look into the details. And calling stored procedures was like an RPC call, so presume that avoided SQL all together.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Learn http. If you do this you will most likely be 95% of the way to your goal.
The Steam provider you linked is built against the v4 beta. If you want to do the same you could use it as an example, but it's probably a better idea to build against the v3 stable for now, in which case I'd recommend taking a look at [Stripe provider](https://github.com/Provider/Stripe) instead. I regret there is not a better tutorial but if you need any help feel free to message me :)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
You have no cause to file a complaint if there's apparent compliance. And there's no other proof than the full system. So you can word it in a simple and appealing way, but in practice what you say makes no sense.
Sadly, yes.
I have played with MT in PHP without prior experience from other languages. Since you can't share objects, you either have to implement your own management system, or use them for simple tasks (which was the idea in the first place). In the end, there are simpler solutions to almost every problem, specially in PHP. Real-time processing can take advantage of multiple threads, but then you should not use PHP. I hope threads never get into core. It is fun to play around with them and you can make some pretty cool sfuff, but in share-nothing architecture, you are better off forking.
That's great to hear! If I ever have to do an LMS again I'll have to look at it.
We accidentally used to run apache in multithreaded mode at a previous company, and then ran into weird issues due to several extensions not being threadsafe. Forking is easy to get correct, but threading is a better use of resources. So these days I like to use threaded modes for things written by other people (that I trust) where the ability to scale up drastically is important (Varnish, HAproxy, Nginx) and leave my own code using fork instead.
The `capture()` syntax seems weird at best. Would you use it as such for multiple variables? capture($message, $email, &amp;$thinge); The `use` keyword for namespaces does actually do something similar to how it's used with anonymous functions - it `uses`, or makes available, something to something else. use \Namespace\MyClass; MyClass::make('coffeee'); It makes `MyClass` usable without the, sometimes very long, namespace. Likewise, `function ($v) use ($that) { return $v + $that; }` makes `$that` available to the closure. 
http://lmgtfy.com/?q=node.js+hosting
You can use `User[]` in doc blocks. Most IDEs can understand it. 
I'm not huge fan of php but I code with it
This pops up at least once a month in this subreddit, and all they end up is just dealing with it. In hindsight, if you are using so many array/string functions all the time, that is often a smell that you are not abstracting the code enough. 
Or be like every other language and just implicitly include the outside scope, because that's what a closure does?
All it takes is one person leaking internal documents to privacy watchdogs to undermine that entire strategy. They can do for all kinds of reasons, including doing it out of spite after they are fired. Depending on what sort of organization you are in, having such leaks occur is either highly unlikely, or all but guaranteed. I guarantee that privacy watchdog non-profits will be going after GDPR violators and filing complaints. They don't even need to be users of the software to be allowed to file the complaint. Personally, on any software I am building I will be working towards actual compliance, not the appearance of it. It doesn't seem to be worthwhile to try to "cheat" on this, especially since I don't think the GDPR requirements are unreasonable. YMMV.
`$that` would be available to the closure using `capture` too, `capture` and `use` would do exactly the same job.
Yeah like javascript, but I guess it would drastically change the language.
Yes, I understand that the idea is that they are identical in usage, I just don't get why you want to change it as `use \Vendor\Namespace\MyClass` and `use ($foo)` has the exact same meaning; it makes something _usable_ elsewhere, where it normally wouldn't be. We don't need another PHP function without a context of sorts. Capture what? Contents? Reference? And do what with it? `import()` might make _more_ sense, or even: $fn = function () { use $foo; } As `use`, personally, makes a lot of sense.
I personally like that you have to specify what you want available, but that's just my opinion.
`use` inside the function would be OK for me, but I still prefer `capture`, I think it's descriptive, you're capturing $variables outside of your scope.
What happens if my scope changes? So I do function getClosure(): callable { $number = 2; return function () { capture($number); return $number * 2; } } function useClosure(callable $closure) { $number = 3; return $closure(); } var_dump(useClosure(getClosure())); What do I get? 4? or 6?
We use MT heavily in our stack for backend job processing. We currently use Gearman to help distribute jobs but are currently transitioning to RabbitMQ for more fine grained control.
You'd get 4 mate
Eh, can't say it's an improvement over `use` at all
Of course not, it's just sugar :)
I used it in large corporation for some billing-related systems. Mostly liked the experience, though I do remember a bug in core (wrongly placed hook), which was fixed somewhere in 2.x. Having to package it as dependency was a little bit annoying. All in all it is a good idea, but distribution is hard, since composer does not do the job, which kind of leaves it behind. Without serious stable release, the fear of having to reinstall system libraries is unnecessary. 
&gt; All it takes is one person leaking internal documents to privacy watchdogs to undermine that entire strategy. You're watching too many James Bond movies. &gt; I guarantee that privacy watchdog non-profits will be going after GDPR violators and filing complaints. They have yet to go after my blatant disregard for their cookie law. And giant companies like Apple are also flipping them the finger. &gt; It doesn't seem to be worthwhile to try to "cheat" on this, especially since I don't think the GDPR requirements are unreasonable. It's probably very reasonable to a bureaucrat who never had to run a real business. Let's say you're PayPal. I, a PayPal client, hack and defraud a bunch of other PayPal clients and have them wire me bunch of money which then I withdraw. Then I erase all my personal data from PayPal under the GDPR so I can't be tracked back, or have the payments reversed. Reasonable? Of course, there are various exceptions to this rule in the GDPR instructions. "You may keep user data if so and so". And that's precisely what I'm stuffing in my EULA and moving on. The bureaucrats can suck it. Even when it doesn't outright change the rule of business, GDPR can require significant infrastructural changes, such as having to have a separate encryption key for *every individual person's* personal data, which key should both be instantly available at request, so the applications can keep working, and backed up, so we never lose it due to technical fault, and yet instantly eraseable, including from the backups, at the user's request. Have fun retrofitting this one into any reasonable system. 
We use it at my work but it's not mandatory for us to use it. The analogy I like to use is it's like a swimmer shaving their legs. If you're an Olympian then you're doing it to make sure that you are at the Zenith of your performance. If you're an amateur there are so many other things you should be focusing on first.
The use keyword is also used to include traits. The thing to understand is that php does not directly support overloaded methods. Instead, the best it can do is to overload key words whenever possible.
😂😂😂
Hi! &gt; This pops up at least once a month in this subreddit, and all they end up is just dealing with it I guess so. After reading up a bit on the history of things, I guess its too late to make such breaking changes to builtin functions. &gt; In hindsight, if you are using so many array/string functions all the time, that is often a smell that you are not abstracting the code enough. Can you give an example? I can see ORMs easing work with builtin functions when dealing with database queries. But how about the other use cases that rely on array manipulation?
Disque will be reimplemented as Redis v4.2 module, probably that's why work on standalone version has stalled. [Redis 4.2 roadmap](https://gist.github.com/antirez/a3787d538eec3db381a41654e214b31d)
I wrote a [code analysis tool](https://github.com/vimeo/psalm) that uses `pcntl_fork` to spawn new threads for faster analysis, and it's used in my company's production release pipeline. The multithreading aspect borrows heavily from [a similar tool](https://github.com/phan/phan) that I know is used in many other release pipelines.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Thank you :)
Doing this means that the function must either be partially evaluated when it's created or have access to the scope in which it was defined for its entire life cycle. Since we rely on garbage collection we can't keep that scope around forever, so we must evaluate the closure when it's created. Variables should be injected into the scope from the outside rather than requested from the inside.
Shocking how "we've always done it this way" is so frequently offered up as a rationale for ignoring problems. It's like walking along a cliff and saying "I haven't fallen off yet, so it must be safe."
I can remember if quite a few examples. - CLI applications: if you find yourself messing up with argv, it's probably better using Symfony Console to handle them (and entire application skeleton). - Application configuration: instead of configuration arrays, Symfony Options resolver, or alternative configuration storages. - ORMs - Value objects, Laravel Collections, etc I'm not saying you can completely abstract language's consistency quirks. But if someone else has taken their time to do something in a more bearable way, I'd gladly use. Other than that, IDEs such phpstorm can help quite a lot. 
&gt; My goal then was to vastly improve the total processing time for uploading a massive amount of data between 3 servers. You add threads to make use of your extra CPU cores. Uploading is not a CPU-bound task, so you should've used async I/O, not threads. As for CPU-bound tasks, you should use separate processes, possibly forked, not threads. Pthreads is a cool experiment, but it's just that. It has some stability issues, as it has to play with the ever-charging PHP core and extensions, which don't expect PHP code to be multi-threaded. Forking and the process API, on the other side, are very stable and easy to use.
I built and use [this](https://github.com/jayesbe/php-process-executive) in production. It's not multi-threading but does allow for parallel processing of tasks. I use it in combination with redis / rabbitmq for long lived php processes. It's not the fastest.. I am looking to make some time to convert it over to a multi-threaded solution. But works very very well. 
I didn't say anything about shared hosting...
What else then? The main alternatives like a VPS and a dedicated server all give you root access.
+1 for that idea. Tought same when I read. OP need to learn programming language design and what is scope. 
&gt; Most IDEs can understand it. Yes I know that the most IDEs can understand it, but not PHP.
&gt; we run 50 php-fpm processes on each of our 100 or so web servers. How many logical CPUs do each of those servers have?
We don't need bloated and coupled crap in work
Cool
1. /r/phphelp 2. $_SERVER['HTTP_HOST']
I can recommend enqueue
I don't like the use keyword in php closures either but for a different reason. In most programming languages local variables are automatically captured, manual capture is available in a few languages as an option but listen carefully, it's an option. In PHP this is not an option, you are forced to do this unless you assign them as class properties. This is why I want arrow function RFC to pass so badly, so we can say goodbye to this tedious manual capture for anonymous functions.
Okay, honey.
All of the previous risks still exist, and now, you're a new risk. [xkcd](https://xkcd.com/927/) Any auditor would have no way of knowing what you gave anyone besides them. What is stopping you from targeting users individually? What if the government ordered you to target a user?
So the only people entitled to option are ppl who know about programming language design and what scope is. And if you don't like `use` on anonymous functions it means you don't know both, oh!
Who told that I don't like "use" on functions? I wish other languages had the same. 
Excellent! That's the way
👏👏👏👏👏
I use pthreads in conjunction with high cpu count VMs for several financial data processing projects. It has a few quirks but is an exceptionally powerful tool once you can use it fluently (this goes for multithreading in general), and I've learned a lot about programming concepts as a result. In this day and age when you can spin up a 100+ vCpu VM in a few moments, threading is really an invaluable asset and opens up a lot of possibilities via collective processing power that simply aren't viable in single threaded environment.
I wouldn't deal with this using PHP. I'd rather use nginx. But since you want to achieve this with PHP I would use the `$_SERVER['HTTP_HOST']`. Just a simple switch statement will do just fine.
&gt; Any auditor would have no way of knowing what you gave anyone besides them. An auditor would know: * The contents of the Mozilla CA bundle * The contents of the cURL CA bundle, derived from the Mozilla bundle * The SHA256 checksum of the cURL CA bundle * The same SHA256 checksum checked into a Chronicle instance, which is the part that's publicly verifiable * An Ed25519 signature of each CA Bundle, signed with our signing key, to verify it was actually published by us &gt; What is stopping you from targeting users individually? Everything has to be committed to the Chronicle before any hypothetically-targeted users would verify before downloading updates. &gt; What if the government ordered you to target a user? If we were forced to comply, we'd need to publish a new record to the Chronicle (which, again, is publicly verifiable by independent third parties... third parties who can also maintain their own replication instances of the Chronicle we use and configure their local Certainty to validate against their replication instance-- this is all documented in the recommended reading I've been linking to). Even if we were forced to comply, we wouldn't be able to do so without detection. That's basically the point of the Chronicle. Furthermore, it could also give us legal standing to challenge such court orders because of how far of an overreach that would be ("In order to target this user, we would necessarily have to target *every* user, Your Honor"). Not to mention the question of jurisdictions.
I think his problem is that Certainty uses the same infrastructure as the Chronicle and that he doesn't understand that Chronicle is a distributed append only "blockchain" data store.
Welll... One as dead-set on trying to "solve" problem would do what \u\sarciszewski said: use your own chronicle to keep immutable changeset locally and use own instance of ca builder for certainty. With local chronicle all changes are kept in immutable way so no tinkering possible + with own certainty nobody can tinker with CA bundles you chose. I think that's the whole point? Also: whole certainty and chronice are open source so you can check code yourself to see if there are any backdoors possible. Whole issue with malicious injection of CA by Paragon Initiative is marginal problem - what it really does to you is allow you to have no excuses but to never disable CA verification. So... if you have disabled CA verification your code is 100% vulnerable to CA attacks with NO mitigation. If you have CA verification enabled + certainty + chronicle, the whole CA attack is absurdly small possibility. So overall it's like vaccination: the possibility of getting something "bad" is infitinesimally small compared to benefits :)
It doesn't use the same infrastructure, either. * Certainty pulls from Github. * The Chronicle is on a server in France operated by PIE. 
TIL that those are 2 actual round trips through the network oO
wordpress.com is a commercial project by automattic. calypso is the "new" backend for wordpress.com. And when I say new I mean it made a first appearance ~2 years (?) or so ago. wordpress.com runs on wordpress but the two are very different. while you can use calypso with wordpress via the jetpack plugin, calypso is not part of wordpress and I doubt it ever will be due to the node requirement.
I haven't used it but I'm willing to bet the supposed performance benefits don't always pan out. It's a rare website where the bottleneck in perfornance is the language - usually refactoring and caching queries is by far the biggest improvement you can make, and sticking Varnish in front of the web server will probably have a bigger effect on performance.
Haven't read comments so, I apologize if this has been mentioned. I use symfony framework + rabbitmqbundle to scale parallel operations across docker/vm nodes. It'd be straightforward to use symfony cli/supervisord to spawn multiple rmq consumers on the same machine, but we only have one 'worker' per vm/container for ourselves.
&gt; Since we rely on garbage collection we can't keep that scope around forever, so we must evaluate the closure when it's created. Variables should be injected into the scope from the outside rather than requested from the inside. This makes perfect sense of why it's defined outside the body of the function definition - thank you.
This is really cool to run into you in the "real world". psalm is a really cool project and I am really glad you guys support it.
This line contains grammatical error: Table {$name} is already exists! 1. In migrate($table) $res variable appears out of nowhere. Well, obviously from the included file, but still not nice, IMHO. 2. The code will fail if you place file in a different location. 3. Generally you might want to check if migration is successful when you generate the migration file. If anything goes wrong during migration generation, just throw an exception and you won't have to check it later, really. 4. Seems like your migration files names are not flexible. All of them are going to be like `UsersTable`, `CompaniesTable`, etc. What if your migration changes a column in an existing `users` table? Also, consider adding timestamp to migration names, as it will reduces chance of name collision. Jesus, I'm so mean.
The infinite scroll part would be javascript, not PHP 
Js is no problem for me. I was actually told I'd probably have to use it alongside with Ajax. Which I've never actually used before. But it isn't all that complicated I heard.
1. Yeah, I've not mentioned that $table was defined previously. 2. All migration files are located in same folder. Any suggestions for this clause? 4. The problem would be to set $table correctly than (if I'd use timestamp). BTW Thank you!
This line is silly: return "{$res}"; Just do: return $res;
Thanks!
Also if `$res` is short for result than just use `$result`. Try not to abbreviate your variable names. You'll thank yourself later.
I can't really help you more, I stopped writing PHP front-ends a couple of years ago and have been working with a PHP backend / api and angular on the front end.
Thanks!
Better than jumping off a "find in path" bridge :)
your JS on the client will need to make ajax requests to a server-side endpoint that serves up paginated data. Paginating your data on the server is pretty straightforward but the specific way you'll want to do depends on what the rest of your serverside code looks like, particularly the code you use to interact with your datastore. A really basic notion of this would be using a SQL database and having offset and limit parameters passed in to the select query to generate paginated views of your dataset. On the client side you just request the next page after the user scrolls down past the last item from the current page. Render the new data by appending to the old data for the infinite scroll effect. Alternatively re-render the same view with the new page of data to get a more traditional "turn the page" kind of UI. 
It's bad practice to check `file_exists` before opening/including a file. While unlikely, it's possible for a file to be created or deleted between `file_exists` and `include`. The proper thing to do is just `include` the file, and then check for errors before you continue on. Or `require` it and let PHP error out if it's not there.
Let me elaborate on point #3. I assumed that this method - the one that checks if migration is successful - is intended to check if *migration file was generated*. If this is the case, then ask yourself: what is a successful migration and what is unsuccessful migration? If unsuccessful migration is the one that did not generate file, it boils down that migration either exists or not, right? I mean, migration file cannot be in an invalid state. If this is the case - the migration either exists in valid state or does not exist at all - your check does not make much sense. Sorry if I failed to explain myself clearly, just ignore me.
1. Instead of returning everything, return only 50 (or whatever). 2. Have a parameter that allows you to return 51-100, 101-150, etc.
We dipped our toes with it to try it out, but like you were concerned about the lack of commits. Looking forward to Redis 4.2. 
&gt; How would I begin to make my code secure before I go live? Take a course in security, it's not a simple do x, y, z, thing. OWASP provide a top 10 of vulnerability types that would be a good start. https://github.com/OWASP/Top10/blob/master/2017/OWASP%20Top%2010%202017%20RC2%20Final.pdf
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [OWASP/Top10/.../**OWASP%20Top%2010%202017%20RC2%20Final.pdf** (master → 2507453)](https://github.com/OWASP/Top10/blob/2507453cd4d9301f8754d190cff3de13d3e7ee22/2017/OWASP%20Top%2010%202017%20RC2%20Final.pdf) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Actually it won't drastically change php, there is a proposal for arrow function which works like anonymous function but without the need to manually capture outer scope variables. Too bad php internals couldn't reach an agreement on the choice of arrow sign, so it hasn't been voted or implemented.
Also, `res` can mean: - resource, - response - result - resolution Name your variables accordingly!
Nope, this is not the right sub. The right one is listed on the page where you typed your question. For PHP, all kinds of pagination are the same.
To start with: SQL Injection and XSS are two really common security problems. Google those and have a read until you understand the concepts enough to attempt to attack your app using those methods.
Glad you find it useful!
A valid point, but *result* is still a bad name because it tells nothing of what kind of data is contained in the variable.
&gt; I'd like to see if it has any vulnerabilities. It does. Get in the mindset that all applications have vulnerabilities, at some layer, for some threat, and some level of malicious effort. Your job is to identify threats and do your best to reduce and eliminate as much as possible at as many levels as possible. If you can, I'd recommending posting a link to your project's repository if it can be made public. Then people here can look and give real advice. (Of course, there will be assholes that will mock you for being new -- take their advice, but not their scorn.) There is a lot to cover -- taking a course, as previously mentioned here, is a really good idea. Here are a few things you should watch out for anyway, and if you are not certain about what any of these mean, you need to go back to the drawing board. (You've said nothing about the nature of your app, but I'm doing to assume it's a basic web site with users and database queries.) 1. You used PDO and prepared statements EVERYWHERE that user supplied data is used in database queries. 2. You have some kind of CSRF protection on your html forms that use the POST method. 3. You are not storing passwords plaintext and are using the built in password functions to hash. 4. You are not storing any kind of confidential data (SSN, Credit Card) in plaintext at rest. 5. You are using HTTPS to protect data in transit. 6. You are pulling things like your DB credentials from ENV and not storing the password in the web root. 7. You are not using cookies to store user role data or credentials. There are hundreds more, but these were the first I could think off the top of my head of things you want to double check.
WTF is "user supplied data"? Why would you make a distinction for the data source used in the query?
The point I was trying to convey is that while not *every* query will require the use of a prepared statement (e.g. hardcoded queries like `SELECT COUNT(id) FROM accounts;`), any query that makes use of external data (yes, regardless of source) should definitely use prepared statements.
&gt; there will probably be PHP jobs for the next 15 years. COBOL has been around since 1959, you can still get a job (a high paying one at that), writing COBOL. PHP will be around for much longer than 15 years, this I promise.
I just added it to the OP so you can take a look. 
I had a problem I thought I'd tackle with multithreading. problems 2 had then I. /s Joking aside, multithreading has a lot of intricacies that can be very subtle. *Most* if the time is best to handle parallel processing by forking instead. Everything runs in its own memory space and keeps the complexity within reason. Multithreading is often more memory efficient, but very few "everyday" problems that you might choose to tackle with an interpreted language are memory or processor bound. 
&gt; OWASP provide a top 10 of vulnerability types that woul And they have a list of tools: https://www.owasp.org/index.php/Category:Vulnerability_Scanning_Tools
LOL.
I'll be frank, I will sound harsh, but there is no intent to be agressive or attack you, and no sadistic pleasure on my side. --- Just peeked quickly at the source. Your code is far from secure. Don't use it for anything serious as is, be it capturing user data or anything dealing with real money. You WILL get in trouble. And while you don't know what you don't know, I've warned you. It's not a good defence in court anyway... I am sure that is one of the first (if not the first) web programming project you've done, maybe even your first try at programming in general. Bad news, there is a lot to work on, design principles, code organistation, security, and way more. Good news, my first school project years ago looked a bit like this, so you definitly can improve if you have a will to learn (sadly, I mean learn a lot). [Here](http://www.phptherightway.com/) is a well known link to get up to speed to modern PHP. Be wary of any 3+ years old tutorial, or even any recent tutorial which mixes presentation and logic (more on that latter). They are usually written by complete amateurs posing as teachers for reputation. The way you write PHP is the way it was done 10 to 20 years ago. While it apparently works, there is a reason PHP moved a lot since. You should also work on your HTML/CSS as you clearly misunderstood how some things are used (HTML form labels for example), and while I didn't check Javascript code, I can only guess it's the same on that front. --- Now, a security quickstart. I will try to give you an insight on several issues your code presents, but you should research more on your own, even on things I didn't cover. OWASP top 10 vulnerabilities is a good start. By no mean I will or can be complete on my explanations or examples, or I will have to write a full course for you... #### Input validation For example, look in [this file](https://github.com/CptHindsight/exchange/blob/master/market/post.php) $title = $_POST['listing_title']; $price = $_POST['listing_price']; $rate = $_POST['listing_rate']; $username = $_POST['listing_username']; $userid = $_POST['listing_userid']; $realname = $_POST['listing_realname']; $categoryid = $_POST['category_id']; $cashid = $_POST['cash_id']; $securitytoken = $_POST['securitytoken']; Currently you trust any of these values to be what you expect it to be. It's actually pretty simple to change POST data, or to send a POST request without filling a form. What happens if I sent a title which is longer than what the database can hold ? What if I try to impersonate someone by changing the userId ? Input validation is a requirement of any program which deals with input. And any validation done in the browser is worthless. It's only a convinience thing, as it can be bypassed trivially. Always validate serverside. #### SQL injections everywhere. In the same file $userid = $_POST['listing_userid']; // Some stuff in between $sqll = "SELECT * FROM `user` WHERE `userid` = $userid ORDER BY `lastactivity` DESC LIMIT 1"; $rowss = $conn-&gt;query($sqll); I guess you imagine `$_POST['listing_userid']` will contain an integer. But what if I put the string `'1 OR TRUE'` instead ? Then the request executed is now : SELECT * FROM `user` WHERE `userid` = 1 OR TRUE ORDER BY `lastactivity` DESC LIMIT 1 // Equivalent to SELECT * FROM `user` ORDER BY `lastactivity` DESC LIMIT 1 By crafting carefully an input, I am able to bypass any id check ... To this, you might be tempted to do something like `$userid = (int) $_POST['listing_userid'];` which forces `$userid` to be an integer, but the good answer is in two parts : input validation, and mostly prepared statements. Remember this, whenever you want to craft a SQL request from variables into the SQL string, use a prepared request instead, until you learn when you don't have to (spoiler, almost never). #### XSS In the same file $title = $_POST['listing_title']; // Some code $sql="INSERT INTO `market_listings` (`title`, ...) VALUES ('$title', ...)"; $conn-&gt;query($sql); //later echo &lt;&lt;&lt;LISTING_TEMPLATE ... &lt;div name="title_$userid"&gt;$title&lt;/div&gt; ... LISTING_TEMPLATE; Imagine I put `'My title &lt;script&gt;window.location = "http://evilsite.org"&lt;/script&gt;'` in `$_POST['listing_title']`... Anyone viewing a page where this title is shown will be redirected to `evilsite.org`. While it's tempting to try to look at the POST values to detect if someone tried a XSS on you, it's ineffective in practice. The way to go is called HTML escaping. --- There is a lot more to be said, on security, or in other areas. Look into view templating, separation of concerns, routing ... There is too much to list it here. But I can't stress enough, don't put that code in any form of real use. You have a lot to learn first.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [CptHindsight/exchange/.../**post.php** (master → 7918680)](https://github.com/CptHindsight/exchange/blob/791868071e65ad2c84cd9d4b8416466a6d8848eb/market/post.php) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Does anyone know if they're going with React after FB modified the license or still looking into alternatives? 
What you *actually* conveyed is a fallacy shared by generations of php-ers, that only user input should be treated somehow. Which is actually a dangerous nonsense. Why not to edit your otherwise good comment removing that notorious user input?
sorry what?
Let's ignore what the language is or isn't able to do ... *You* are single threaded ... Whenever you introduce threads into a system you increase it's complexity almost immeasurably, you make your job so much more difficult. The way you need to think is more complex, there are more blind spots, it's so difficult to model correctly in your (single threaded) head. Nobody should look to make multi-threading a core part of their PHP application, for the most important thing for PHP is that it must be able to scale (by adding nodes, not cores). With the ability to scale as the main focus, threads become less relevant to the core of your application. Parallelism is still useful to you: The people talking about queues, and offloading to other machines have the right idea, this fits with the only reasonable way to scale PHP. They're using a kind of distributed parallelism. For the vast majority of applications, using frameworks or software that abstract away the complexity of executing in parallel is the only reasonable way to use every core on every machine. The minority are the frameworks or software developers who have no choice but to make parallelism an, if not core, still an important part of their software, let those developers wrestle directly with the complexity, and reap the benefits yourself.
You didn’t post the link to your website...
We have this baby thing in common I guess: grumpiness, tantrums, ya know...
And that’s a shame as anonymous functions are so widely used. Maybe PHP internals don’t actually have to develop in PHP? 
Thanks for the criticism. I wrote this to be compatible with mysql 5.1 and php 5.3, so it's a little dated. I'll definitely add prepared statements and input validation now, thanks! I guess I'll look at that top 10 guide too and see if there's anything like that in my code. Actually yes it's my first php project, no courses as far as I know and I've been trying to get it to work mostly. I read that you should always close mysqli connections when you make them. If I assign the connection to an object using db.php, how do I close that object? 
We just run multiple php processes. Mostly, we use GNU Parallel to run sub-tasks in genera. We also have a few instances of actually spawning another php process with proc_open. Imho, your best bet with PHP is to have some other program orchestrate multiple PHP tasks, use a job queue. If you really need good multithreading, consider another language.
&gt; Shared hosting is only really suitable for brochure sites and Wordpress. Uhm, no, you can run a lot of shit flawlessly on shared hosting. &gt; If you're using shared hosting for anything built with any MVC framework Just because something calls itself "MVC", doesn't mean it's more resource hungry. Almost any non static website/app architecture uses some form of MVC, it is the natural way of doing things if you follow separation of concerns and don't write complete spaghetti code. It's just a buzzword. &gt; I wouldn't dream of putting a Laravel app on shared hosting when I can get a Digital Ocean droplet You're a dev that's why, but a non dev isn't gonna get some "droplet", they'll just get get shared hosting, do some clicks and install whatever app they want to run. There's nothing wrong about the web being so accessible to a layman like that.
whats wrong with rabbitmq?
I have experience with Symfony, Laravel and Phalcon. Right now I'm using Phalcon for most of my projects. I like the performance, I like the fact that it's a module. There is some stuff I don't like, like Volt. It doesn't have inheritance for more than 1 level. Also you cannot easily validate forms that have array fields (like &lt;input name="field[0]" /&gt;). But I've worked around those, by using Twig instead and building some workarounds. The major advantage is speed, the major disadvantage is that you need the module. So it's not super-portable.
It will rid you of the sales midterm, because to make a paypal link you don't need neither Laravel, PHP or any other CI course.
When you're so much mentally crippled that you cannot even post your blogspam properly.
To start off, I would suggest using a library such as [Medoo](https://medoo.in/) to handle your database. Medoo handles the security parts so you don't have to worry, plus you don't need to write SQL code to use it.
Let me try to explain it in some other form. Experience showed that in some boards where you can have something like "points" (karma here), people tend to do more bad-quality topics just to get these karma points. They invent techniques that gives more karma, but has the worst quality (like that TV shows where they show celebrity stars on shows where they are all naked.. at least theres a show in Germany for that). One of the reasons why some "curious developers" do advertisement here. The difference is that they don't care about the karma, but about getting money. I know from other boards that there are people out there that want to have the biggest amount of karma just to feel good and stay above other people. That's my humble assumption why the karma counter is (nearly) the same color as the background.
&gt;Take a course in security, it's not a simple do x, y, z, thing. Yep. Security is an ongoing process, not something you can do once and then forget about.
It's really great to get the thoughts of the creator of pthreads on this topic. Your opposition to design for multithreading in PHP projects is particularly fascinating. I get that the average web service doesn't really need to use more than 1 core per HTTP request, but what about a data analysis context e.g. few requests, but each request potentially processes large amounts of data concurrently? By the way: &gt; the most important thing for PHP is that it must be able to scale (by adding nodes, not cores). What do you consider a "node"? And do you have any general guidelines for scaling a PHP web service to multiple nodes? In terms of frameworks, how do you find the MT features of Laravel's [Queues](https://laravel.com/docs/master/queues)? For existing users of the framework, do you recommend coding for it over rolling your own MT code using libraries like pthreads?
hey congrats .. great work!
It requires erlang runtime. You have to have another storage just to store queue ids
 i checked, it's very fast
&gt; It's more like WP is praised in threads for being backwards compatible I've never seen anyone on /r/php praise wordpress for that as its batcrap crazy. Wordpress is generally seen for exactly what it is here - a dated, poorly coded, poorly performing, insecure pile of shit that inexperienced developers seem to love.
&gt; I wrote this to be compatible with mysql 5.1 and PHP 5.3 Why? Those are versions of software that are 10+ years old. This opens you up to exploits of the platform level, something that is difficult to impossible to defend at the PHP code level. Your absolute bare minimum should be PHP 5.6 and mysql 5.5. 
&gt; I have no idea how to go about doing this. I've found some tools, but I don't know how to get then to run off of ftp where I've been working, and the site in using has a user and password it asks for when you first visit (like your router). HTTP Basic Authentication. * Is it over HTTPS? If not, that's the first thing I would look to fix. * Is this being enforced by PHP or the webserver? What happens if someone tries to run your software on a different webserver (e.g. nginx)? &gt; How would I begin to make my code secure before I go live? Rather than recommend specific automated testing tools, I'm going to suggest learning how to write secure code. This might sound like tautology, but it's not. Most tutorials/books that people used to teach themselves PHP didn't cover security adequately, and the lion's share of those taught bad habits. For example: https://github.com/CptHindsight/exchange/blob/791868071e65ad2c84cd9d4b8416466a6d8848eb/market_functions.php#L83 See how variables are being used in the query string? This is the *exact* programming habit that leads to the most common web application vulnerability: SQL injection. You might contest, "But I escape these variables before I pass arguments to these functions." Even if so, it doesn't matter, because the problem is still being solved the wrong way. However, it doesn't even look like that is even happening, because here's unescaped data being injected directly into a query. 1. https://github.com/CptHindsight/exchange/blob/791868071e65ad2c84cd9d4b8416466a6d8848eb/market/post.php#L16 2. https://github.com/CptHindsight/exchange/blob/791868071e65ad2c84cd9d4b8416466a6d8848eb/market/post.php#L37 # [To prevent injection, separate data from code](https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide) From the repository and directory names, it sounds like you're doing work with currency exchanging? Financial software must have a very high standard of security before anyone uses it, otherwise people will get hurt. &gt; Edit again: I also wrote this to work with mysql 5.1 (I know) so keep that in mind Why does it need to work with mysql 5.1? You can easily get a [cheap VPS from lowendbox](http://www.lowendbox.com) and run the latest 5.7 on it, if cost is a factor. Ultimately, you have two choices here: 1. Always run [up-to-date software with the latest security patches](https://paragonie.com/blog/2017/08/quick-guide-simple-and-secure-automatic-updates). 2. Inevitably get hacked by an unpatched, known vulnerability.
I agree. Even though I have done a project with Symfony where requests would only take around 5ms still a CDN or proxy makes your site really fast for the end user.
How do Laraval or Symfony get in your way then? I can't speak for Laravel but Symfony is very lightweight on it's own too and is very well suited for microservices.
Can you please provide an example for this? i read about it but i would love to see a small POC example.
money gifted is received, not earned.
so you tried to hide an add inside your post? sorry mate, but for posts like this you get banned
You need to ask this question in /r/javascript or /r/jquery or /r/vuejs or /r/reactjs or /r/angularjs ... subreddits.
&gt; read that you should always close mysqli connections What you read is a complete bullshit. Just leave that connection alone Create it ONCE, then use that connection variable ALL THE WAY in your code. Just a single connection. Understood? Cases when you actually need are so rare and not applicable to your exercises at all, so just leave the connection alone. What is more important is that you should be using PDO, not mysqli. Just because PDO prepared statements are usable and with mysqli it's pain in the ass. Here you can find a [PDO tutorial](https://phpdelusions.net/pdo)
Create a cool/useful project of some kind in PHP. Release it as open source and let it stay that way. On a git repository such as github, bitbucket, gitlab. Post a link to that, preferable PHP and MySQL, so it's easy to install on a web server. No NodeJS and stuff that's hard to come by with shared hosting servers, like mine. Do this link to your repo, from your site, and add paypal. I'll gladly pay you $1 for that, at least, depending on the project possibly more. Doing that would prove you've learned from your course/school, and you get out of your midterm test. Since it's open source you'll learn from other coders, if I find it useful/cool, I'll help you improve it if i can. Who am I and what have I done? I am a hobby programmer who releases open source code build in PHP. 2 reasons 1. I like and, as far as I know, I understand PHP fairly well, I enjoy coding in it. Reason 2 I like the philosophy/idea behind open source code. My first useful from my perspective, piece of code is my database projects, first of which was my Movie database project. That turned fairly easily into a couple of modified versions for Games, and Books. Originally I looked for such an open source project to use, diden't find any so I made my own. The idea is an inventory of everything you have of these 3 types of media, and being able to keep track of what you let people borrow, and who has what. Originally they used MySQL functions, then PDO, then it turned into what it is now. A procedural code branch which was the original code evolved over time. And an OOP branch just for the purpose of learning OOP, and being able to do more. And hopefully to organize the code better. Good luck with your project I hope you accept the idea. 
and? storage comes with rabbitmq. Installation is dead simple `apt-get install rabbitmq-server`
Yes! We run a few webcrawlers here that have 99% of network waiting time, so CPU stays mostly idle. We have 100 threads on each core, and it performs great. We are using AWS SQS + EB workers, and it works amazingly well. We don't need to worry about resource usage (because PHP is suicidal, the process dies at the end), we don't need to worry about parallelism (EB's apache takes care of that), and we don't even need to worry about having a worker fetching items from the queue (EB's worker environment takes care of that).
Generic non-language-specific transliteration will not behave very well when a language uses multiple scripts…
This is the worst article I've read in a long time.
&gt; To be able to make Yii work on PHP 7.2 we needed to rename this class, so `yii\base\Object` is now deprecated in favor of `yii\base\BaseObject`. All Versions of Yii 2 before 2.0.13 are not compatible with PHP 7.2.
Yes. That's our legacy. It's not too bad though.
&gt; the function must either be partially evaluated when it's created Why is this not feasible in PHP? Other languages automatically close over variables. 
How do you know if the migrate() function is returning an error or useful information? I can't see an easy way to check what it's done.
&gt; I wrote this to be compatible with mysql 5.1 and php 5.3, so it's a little dated. Php 5.3 is not supported since 3 years already. The first and worse error you did is code for EOL versions. If a security breach is discovered at the language level, whatever the rest you've lost. I guess the same could be said about mysql 5.1 but I'm less knowledgeable there. As much as possible, try to code for the lattest versions. &gt; I'll definitely add prepared statements and input validation now, thanks! &gt; I guess I'll look at that top 10 guide too and see if there's anything like that in my code. There is a lot more to fix than just those 2. And security is not your only concern. Code organisation should be on your crosshair too. &gt; Actually yes it's my first php project, no courses as far as I know and I've been trying to get it to work mostly. I strongly advise you to find and learn from material, not just yourself isolated. While the trial and error might be better for memory, it's a slower path, and a dangerous one. Let's speak with an image : Imagine you know nothing about cars, how to drive them, how they are made, and you have no contact with the outside world, no one to learn from or by example. Let's also say you live in england where they have the wheel on the right side of the car and drive on the left side of the road. After a while you will now how to pilot your car, start it, and have a rough idea of how it works. Then one day you will go on the open road. If you are anything like 6 years old me (not in intellectual power, no patronasing or insult here, more about innocence about the world), you will crash in the first car you meet. I would drive on the right side of the road, so I could see by the window if I am on the road or not. Same could be said about the first stop or red light you would encounter. There is more to driving than piloting the car. But you couldn't know. The point is, you don't know what you don't know, learning by yourself is a really good way to keep it that way, and the bad things always come from what you don't know. Or you would have protected yourself already. There is also more to coding than learning the syntax. It's usually the easy and boring part. What differenciate someone who speak in his own language to someone who speak in a foreign one, even with perfect grammar, accent and syntax, and a dictionnary if needed ? Idiomaticness, context, finess, connotation, wordplay, cultural cues, ways to frame an argument or an idea, taboo, rude words ... All of which I must have butchered in this post, I'm french. &gt; I read that you should always close mysqli connections when you make them. If I assign the connection to an object using db.php, how do I close that object? [mysqli_close](http://php.net/manual/fr/mysqli.close.php) but it doesn't really matter. PHP garbage collection will do it for you. It's one of those overated advices.
Disclaimer he didn't make : PHPDelusion his is own site.
I think there’s been a lot of back and forth about typed collections in php but I’m. It sure it’s coming soon. If you force an array to contain one and only one type then it’s getting into genetics or typed array territory and I’m not sure there’s consensus that would be good in the base language See https://wiki.php.net/rfc/generics and https://wiki.php.net/rfc/generic-arrays Personally I would love to see at least typed arrays in php but I’m not going to hold my breath on that one :-)