Two possible ways to use angular with php: 1. use php as the website's "engine" and enhance it with angularjs or the other listed frameworks 2. use html+angularjs as the website (SPA) and get the data for it from a php api Op seems to use the first one, it is a valid option, but it is not the best way to use angularjs. The second option can be a great way to develop, easy, fast and the ux can be great. With the second option, the backend (API) doesn't matter, it can be php, it can be nodejs, it can be anything else, the SPA will not care the slightest. 
I'm trying React next. I'd go for a single page app, so your backend just provide JSON api endpoints and nothing more.
You'll need to read and iterate over the rows, save ID/hash of the row into an array and the start writing it to a new file. Then read the seconds file and check if ID/hash already exists and skip it. Instead of doing in_array, I'd recommend settings the IDs as keys $ids[$id] = null; so you can use array_key_exists.
Even though you say you don't like AWS, in practice you don't get runaway bills. And you can setup billing alerts just in case too. Their Elastic Beanstalk service is actually quite good.
It's missing five brackets. If you want to be pedantic about code quality there's more. For example, the function isn't nearly robust enough handling a public property. But honestly I'd consider a tattoo more pseudo code than anything.
&gt; Hell you state github is a must but the underpinning is git, isn't that a bit contradictory? Not at all. The vast majority of projects live on Github, so you ought to get used to it, because that's where you'll be going to find libraries and track issues. That doesn't mean you have to use git or host your personal projects on Github. I personally use Mercurial and Bitbucket, but I know my way around Github. &gt; At any rate, what's the main advantage of mercurial over git in your opinion? There aren't any huge advantages, it's mostly a matter of preference. If you're starting fresh and had to pick one, Git would be a fine choice. I happened to start with Mercurial, so that's what I use. I haven't had a compelling reason to switch. That said, Facebook is switching to Mercurial because they're finding it's faster for huge repos. [source](https://code.facebook.com/posts/218678814984400/scaling-mercurial-at-facebook/) I also like that Mercurial is mostly immutable. Pushed a bad commit? Tough luck; it's permanently part of the history now. This means I spend less time worrying about how to "fix" a bad commit because there's nothing that can be done about it, and it also means you can't tamper with space-time which is always dangerous.
If they try to get on a Haskell course, they won't be accepted until they have it lasered off.
Thank you for telling us current unixtime!
Current UNIX time at 2017-03-16 22:22:05 GMT = **1489702925.79** *^I ^am ^a ^[bot](http://pastebin.com/raw/BjBZMYj7). ^Please ^click ^[here](https://www.reddit.com/r/unixtime_bot/submit?selftext=true) ^to ^give ^comments/feedback*
I know what PaaS is. I'm a TPM and manage PaaS/IaaS infrastructure for a large business. &gt; without the complexity of building and maintaining the infrastructure This is _only_ because PaaS is expected to run within a cloud. That's the only reason. Just because you roll it yourself doesn't make it not PaaS. Besides, DO __is__ the cloud--shared cloud. So your point here isn't even valid... &gt; The biggest added value of PaaS is that developers are completely abstracted from the lower-level details of the environment This is a bullshit argument in and of itself. You're not setting up and installing the hardware yourself. You're from the DO IaaS using one click setup to get a VM online to setup server software to create a _private cloud_ to which you use as PaaS to serve PHP applications. You're implying that it's somehow __incredibly difficult__ to roll your own PaaS when you can literally be online within 5 minutes and never touch the box again if you're not concerned with security. In the end you're saying that I'm wrong by asserting something akin to "Mobile phones aren't personal computing devices because the definition only encompasses personal computers and laptops!" You're by all means technically correct from an entirely semantic and pedantic viewpoint but you're wrong by every other metric. Dunno about you but my Mom always taught me that two wrongs and a right don't make a right.
&gt; so it's a PaaS if you never maintain the box and leave it alone? lol no--I'm saying you arbitrarily saying because you touched the box its not PaaS is dumb and wrong. &gt; Just don't forget that you're using it from "your own" IaaS. That you have to maintain. Yup, because when hardware fails I have to get into my car and drive to the NY DO facility to swap out hardware because I own the hardware. /s Jesus.
KirbyCMS might be a sane choice.
TIMESTAMP is a type of field in MySQL, not just an integer.
Yes, I wrote that. It's not clear which OP is referring to though.
uhuh. nobody's perfect.
you lost me there. but ok.
What bugs me the most is that the name isAlive implies it returns a boolean but it just prints out text or dies. Worst method ever. 
Well, memcache call themselves a "Free &amp; open source, high-performance, distributed memory object caching system" that speeds up applications by "alleviating database load". What exactly are you arguing here?
I have it for generator aggregates interface Generator { public function get(): iterable; } class GeneratorA implements Generator { public method get(): iterable { foreach ($this-&gt;data as $data) { yield $data; } } } class GeneratorB implements Generator { public function get(): iterable { foreach ($this-&gt;data as $data) { yield $data; } } } class Aggregate implements Generator { private $generators = []; public function add(Generator $generator) { $this-&gt;generators[] = $generator; } public function get(): iterable { foreach ($this-&gt;generators as $generator) { foreach ($generator-&gt;get() as $value) { yield $value; } } } } I think this roughly matches what you (and the author of the bug) meant by nested generators, yeah?
\* http://php.net/manual/en/function.is-null.php
I wanna bitch about PSR-2 and bracket placement, but I'm gonna go ahead and call fair enough on trying to cut line numbers down on a totoo. Still needs a closing brace somewhere. Still, could have saved space by using happy path. Also, too many side effects. Could have saved space, time and pain by just returning boolean. Boolean + Happy Path would have made space for a closing bracket, and I still would have looked the other way for PSR-2 compliance. 
I mean, everyone pretty much covered the code problems. But the biggest problem is that it's a stupid fucking tattoo.
I want to get ob_start(); tattooed on my inner lip and ob_end_flush(); on my ass
There should be, otherwise you never save anything into the cache :)
Theres no tests. Where are the tests. LOL. Syntax error: Missing closing brace `}`
sad!
Did you add the protection directives to your .htaccess file? Let Google help you. 
Your statements while emphatic, are inaccurate. Most humorously almost all file systems are by many people considered a form of database. Redis is definitely a database though that isn't a very useful term. Also, just to sum it up the pedantic argument you are now making was not mine. I was arguing the semantics of the name were irrelevant and instead we have to evaluate features of systems.
Really depends on what you're​ having trouble with. I'll just leave these here though. https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md http://hashphp.org http://www.phptherightway.com/
I got it to work. It was an issue with one of the locations of the files. I put it in the proper location and restarted the service. Little mistakes will do it!
Also it looks like function, not a method. Yet it references $this.
Isn't Opus already an open source audio codec project? https://en.m.wikipedia.org/wiki/Opus_(audio_format)
Bunch of people saying the if statements need curly braces. They don't.. it's just missing the curly brace at the end. I guess the "$this" part means the human, since the function is on his body. He's the object! It's missing "public" before the function dec, tho. But shit, I would have just gone ternary with `$this-&gt;love instanceof Person ? 'unicode' : 'otherunicode';` if he's trying to save space. The method name is shit. "is" without a boolean. CAH-MAN!!! But it doesn't make sense it all. If your love is ANY PERSON, you're alive, so echo a unicode of a videocassette? Barring the "alive" part not making any sense, he didn't even check *girlfriendsname* ? Not even ` $this-&gt;love-&gt;name == 'Becka'`" or something? I guess now it's less hard-coded to the person. Hah. Would be funny if he passed the name is as a variable for each of his partners... or an array! rofl Also, he doesn't even call the function, just defines it. What happens if $this-&gt;love isn't a Person or null? And using `die`... coulda been more clever and thrown a `BrokenHeartException $e`
1. function isAlive determines status of love. 2. isAlive echoes or dies, should return a boolean value. 3. Referencing $this from inside a global function. 4. $this-&gt;love can be an instance of person? 5. No else case for if love isn't null or a Person. 6. die and echo print html formatted unicode characters. 7. No closing brace on isAlive. 8. No braces on if statements (if we're going with PSR-2) This is also saying that basically as long as $this-&gt;love is a person that you love them, meaning Person could be any instance of that class, I see the potential for some serious object injection ( ͡° ͜ʖ ͡°)
A narcissist would have done `self::$love`
Any CMS will be fine for a gallery. If you really want a webshop you're probably better off just using shopify. I just used slick carousel the other day and really like it. Very simple to use
Here is the thing..my business logic will be the same no matter the framework..it will use the same amount of memory and proc on every request..so it doesn't matter if the hello world will be run from opcache every time because what I am interested in is the frameworks base performance, how much it leverages opchache, other files caches and its base performance..because that is your starting point..and it does matter if you start at 1000 requests per second or at 300. I agree with you that this is irrelevant in a serious web app but a small REST API is a completely different thing..if you have a blog and people will mainly GET your content, you put it behind Varnish and handle 30k r/s ..but if you have a few hundred apps which will just POST, PUT, PATCH statistical data..it starts to matter
What bugs me the most is the, "if -&gt; else if" but without an, "else" to round it off. Should have simply put, "else".
&gt; I am not sure if you lack experience or are just simply ignorant..I need to send a lots of small post requests, I am expecting more than 1000 r/s..as you know post requests with unique data can not be cached..I am happy with my cheap hosting..so here is the Math for you..I can pay for more memory, processor or throw in a load balancer..if I will need to handle 10 000 r/s it will be 10 times 10 euros..so I will pay like 100 p/m if I use Symfony or Zend..they can handle around 300r/s so if I will have to handle 10 000 r/s it will cost me 330 eur/m so there is an almost 3000 euros difference per year.. If you're at the point of dealing with 1000s of requests per second, then you're probably already making good money from the site/app. In that case, 3000 euros per year means nothing compared to time and salary of the developers. Just choose something familiar so you can focus on the business logic instead.
No amount dislike of WordPress is irrational
There's lots of gallery modules for Drupal if you don't want to use Wordpress At least D8 makes use of symfony components, composer, and twig..
doesn't PHPstorm already do this automatically?
for PSR-4 nope
For backend development: PHP7 with framework Symfony and CMS Drupal will give you a lot more power compared to the rest.
You really REALLY don't know your audience here. Generally many php devs here hate wordpress due to its shit codebase. You're better promoting yourself in /r/webdev
It's not a coincidence that a person who writes PHP code that bad would also decide that having a tattoo of PHP code is a good idea. Let's hope it's a temp.
It's best to remain neutral. I use React at the component level for *some* components, but there's no reason to turn your entire app into React. Every tech has weaknesses. Say React isn't great when the component has lots of complex state, or requires flexible animation.
React Native is great for mobile apps too.
Yea I have the same problem. I mean, tell me to do something and you will get it, but with loads of google searches and forum posts
First one is 128**1**52.
Yeah it's not 100% necessary but it's a natural step * CQRS needs loose coupling between read and write sides * Events are a good way to achieve that * You end up storing the events so the read side is recreatable * You can probably just store the events
&gt;Bunch of people saying the if statements need curly braces. They don't. They do if you're following PSR-2, which a lot of people and projects do.
Not sure why you're downvoted. Opus is a heavily used name (Opus Recruitment, Opus Energy, Organisations). Not very unique!
Reading this thread makes me feel vindicated for disliking that heap of crap (WP). To be honest though, it doesn't deserve the hate to this extent - it's just that it's meant to be a framework for blogs, and people want you to use it to build fucking everything. I just had a client who wants me to build an SPA on wordpress. With two different login options (none is the default WP one), and tons of functionality that WP doesn't have. I still have to explain to him the next time we talk why I'm not going to use WP, and why he shouldn't request every damn project he wants build on WP. Sorry for this long rant, I'm just slightly triggered by WP atm
/r/softwaregore 
that is deep
&gt; I'm definitely gonna stick with PDO when the time comes for coding the DB logic, though. Have a look at http://www.doctrine-project.org/ Or if you end up using Laravel it has its own https://laravel.com/docs/5.4/database Database logic for me is similar to security, I try to avoid writing my own at all cost.
I haven't really gotten around to take a deep look at ng2, but maybe you can tell me what's gotten into them using ever stranger permutations of non-alphabetical characters? Just brimming over a "Your first angular2 tutorial" I see * (stuff) * [(otherstuff)] * *(yetOtherstuff) I mean, come on, how complicated can you make it?
Mandrill has [WebHooks](https://mandrill.zendesk.com/hc/en-us/categories/200277257) that will send information to a specified URL when certain email events occur. e.g. A new email is sent, then a web hook triggers to send the email information to a specified url to create a ticket. Other services like SendGrid and Mailgun might have something similar.
Im sure he wont need that scale
Thanks I will take a look at that.
agree. they went completely overboard with the weird notations!
I also took a look and at a glance it appears to use SwiftMailer and I couldn't get a version for that because they do something "clever" when versioning their library: abstract class Swift { /** Swift Mailer Version number generated during dist release process */ const VERSION = '@SWIFT_VERSION_NUMBER@';
The emails would be sent to a unique address rather than checking an actual email account. It sounds like this is not possible.
&gt; And this is why I personally could hardly care less about complying completely to any one standard. Most of them have shit like this. No, I won't write braces for an if/else of a single line, I won't waste a line after every function for an opening brace (was this invented by lazy guys who wanted to pad the number of lines in their code?), and I generally won't care about any crap like this that adds useless things to my code and makes it less readable (due to size) in the name of some standard. I can agree with the forcing of an opening brace on a new line, but not really with the `if` issue. I find the lack of enclosing braces hurts readability greatly when you're not familiar with the code. When scanning through lines it's much easier to discern where an `if` block begins, ends, and consequently what it encapsulates, with braces. It's not like it really takes effort to use over the non-brace style if you're using an [IDE](http://i.imgur.com/FKbHu3r.gif). Regardless, when working on a project that others will work on as well you should adhere to the standard they are using. There are ways to write code in the style you like and format it on commit/push as well which helps.
maybe looking for lowest salary?
What kind of address? A mail address? You can't send a mail to `http://example.com/foo.php`. You need some sort of mailbox to store the mails in and get them from for further processing or processing system that accepts SMTP connections to process the mails directly.
I don't believe so, I can't find anything in their documentation that says so and I don't see a versioning of any sort available anywhere.
Developers don't need no soap. Any opened beer can ?
On Reddit apparently. Looking for developers for an eSport Tournament. Unless the pay is good, that's the problem right there. Edit: Also, [Facebook](https://www.facebook.com/gbground/) and [Twitter](https://twitter.com/gamingbground), but oddly not [Linkedin](https://www.linkedin.com/jobs/search/?f_C=9328266&amp;locationType=Y) and for some reason no link on [their website](http://gamingbattleground.com) for jobs. Looks like they only started looking about two days ago. Not to mention zero info on salary or job description. That's not how you get quality developers
I use Sendgrid and it's parse interface for getting email to php (I use it for inputting support emails to a support forum via php) and it's available in their free tier. It gets a little harder if you want just specific emails to do this as it forwards all emails sent to a domain. However you could setup your domain to be a subdomain of your normal website so that anything sent to `whatever@services.yourdomain.com` will get handled by the service.
no. i want tests LOL
Expense really depends on what their needs are and maybe they're already on mailchimp. I figured SendGrid and Mailgun would have something similar but I was more familiar with mandrill
So the answer's no.
Because it is a nice way to structure workflows and do ETL. Some background: http://www.fastcolabs.com/3016289/how-an-arcane-coding-method-from-1970s-banking-software-could-save-the-sanity-of-web-develop
Did not know that! This guy's tattoo teaches after all : )
yeh but I wouldn't call it an issue w/ the tat, it's not like it says above the tattoo `README.MD We follow PSR-2`
This is goddamn fascinating.
Thank you for trying to let us point out that we should make a clear job ad. We already did on sites that are appropriate for that and got responses. This is pure frustration on how now days everybody is called a developer and when you go a bit deeper into their knowledge you see that there is not much.
Our primary audience is photographers, and I genuinely think we've got some good offerings for them. I understand the hatred of WordPress (my own list of complaints is very long) but we all have to make a living. 
So you more or less watched the video...
that PR template makes me never want to contribute to your project. 
&gt; In computer programming, flow-based programming (FBP) is a programming paradigm that defines applications as networks of "black box" processes, which exchange data across predefined connections by message passing, where the connections are specified externally to the processes. These black box processes can be reconnected endlessly to form different applications without having to be changed internally. FBP is thus naturally component-oriented. If this isn't precisely classic OOP, kill me. The only accomodation if your language doesn't support TCO might be to trampoline the calls or use an event loop.
I think the idea is that the components do even less then objects in a typical system may do - precisely 1 thing. Also the other side is that you build up components and a non-programmer can use some sort of UI to wire up the components.
My only gripe with leaving the braces off is when I want to go and add code to that statement. It is annoying (at worst) to have to add the opening / closing brackets.
Well "1 thing" is kind of relative. Don't forget in OOP we have a very similar sounding principle: "Single Responsibility Principle", or a.k.a. "Separation of Concerns: one object should handle one concern". For example commands in Unix do seem to do "1 thing" but depending on what options you pass, they actually do a set of different, although highly cohesive things. That's completely analogous to calling different methods, or the same method with different parameters, I mean in the general case those are identical in terms of capabilities: $output = $object-&gt;method($x, $y, $z); $output = $closure("method", $x, $y, $z); Regarding an UI: one of the first uses of OOP was visual GUI editors (or "form editors") the way we've seen in Visual Basic, Delphi etc. NeXTStep is the first system to offer such devtools, and it's a layer over OOP, basically. Of course you can constrain the interface of objects a little and have a standard way to drop and connect them but at some point the utility is starting to fall apart a little. Your non-developers are basically "programming" in a UI that beside an initial easier learning curve is only slowing them down.
Yeah... every now and then I see a post how to send SMSs in language X which actually is "how to use service Y"
If you've seen how a Unreal Application is setup, it feels very "flow-based" in terms of seeing your code visually speaking. Game software is already "Node-based" visualization depending on which engine you're using.
&gt; how complicated can you make it? Ok, let's compare this to angular1. scope: { '=': 'twoWayBinding', // equal to [(twoWayBinding)] '&lt;': 'oneWayBinding', // equal to [oneWayBinding] '@': 'copy', // equal to ['copy'] '&amp;': 'event' // equal to (event) } Please note that now bindings are configured from the outside of the component. This is really cool and allows you to do pretty cool stuff. For example you don't need to create another derictive just to update element property. No need for ngHide/ngShow since you could just write `[hidden]`. This makes all this DOM manipulations closer to DOM removing some other weird stuff which you need to learn. I think that "replace many entities to single entity" is simplification. Also "one-way binding" in ng2 is maid on top of "two-way". The problem with angular is not the two-way binding but that this is the only way to do stuff. As for "*somestuff" you could just manually wrap "somestuff" into template tag if you wish so. In ng1 you has it's own weird convention. 
Is there anything in particular that trips you up? That would help point you in the right direction :) ... you'll get there!
My bad then :)
Every name is already a something.
I was not aware that php could send sms without using a service. Looking forward to seeing your tutorial on how to do it!
Because I found this interesting I found some further reading for anyone trying to dig in further: [http://www.jpaulmorrison.com/fbp/oops.htm](http://www.jpaulmorrison.com/fbp/oops.htm) [http://stackoverflow.com/questions/405627/flow-based-programming](http://stackoverflow.com/questions/405627/flow-based-programming)
Mandrill has an API that takes about 2 lines of php code to generate a new email address and define the webhook callback URL. We use this all the time and it's rock solid. 
Thanks for the info. I'm kind of a mix of all things. I do like to use the terminal quite a bit, but I like to experiment with IDEs here and there and am open minded to the possibility that I might primarily work out of them one day. For now, I mostly use Neovim to write code and debug. But I kind of use it like an IDE by trying to integrate IDE quality tools into it. I am finding both Xdebug and phpdbg quite confusing to setup and get working. From what I understand, you can't just install phpdbg, you have to compile both PHP yourself, and then compile phpdbg separately from the same code. Does it still work that way?
I've wanted this my whole life
Then what is the context of your first post suppose to be? The way I read it, you seemed to take issue with it being about a service and not about php? 
Yea that may be the way to go. I was about to start a project with drupal but maybe I should go back and build something without a framework, build out the DB and everything from scratch, thanks that seems like some good advice. 
My issue was the way people formulate the title. They make it seem it's about how to send SMS "without using a service" (exactly what you said in your first comment) when in fact it's just about how to integrate with service X. If the title wold've been something like "How to Send and Receive SMS in PHP using Twilio SDK" I would've not had any issue.
Just for Linux atm however im rewriting the whole thing now to be able to run on more os's and also to have way way more information.
Also like i said below im rewriting the entire thing this is my first php project since starting its not gonna be pperfect but it does work.
Damn. I would have made work pay for this if I knew!!
Genuinely curious, having never been to a programming conference before. What does one do at a PHP conference? 
How did I not know this was going on, I live 15 min away in Saint Paul!
&gt; Proven by the fact that there's millions of excellent developers who never had to pass these parades of elitism, and thousands of devs who passed them but make shit products. There are probably gajillions of not excellent developers who never pass these _parades of elitism_ and don't get hired at companies and don't make shit products. &gt; Imo the only thing puzzles on whiteboards really prove (except in a very few very specific cases) is how recently the candidate graduated. This is very specific to what you are white boarding.
With this [ServiceProvider](https://github.com/cnvs/easel/blob/master/src/CanvasServiceProvider.php#L158). [Service providers in the laravel doc](https://laravel.com/docs/5.4/providers).
Well the most important thing, at least for me, is networking. I'm a Drupal guy, and it was mind blowing to finally attend a DrupalCon. The sessions aside, it's quite fun to finally have a drink with your favorite developers, get shit done in sprints, trivias, and a dozen other things. 
No. [You don't have to](https://www.twilio.com/docs/libraries/php)
Nice! I haven't checked this yet, but I am tomorrow morning. One thing is that the exit codes aren't really there to indicate the severity of the problem. Most programs have known exit codes, so I think it's probably a good idea to show a message and exit with a code that is consistent. Also, symfony/console and sebastianbergmann/php-file-iterator are probably one of the best tools to help you with console and globbing. For the widest compatibility, I would add symfony 2 _and_ 3 support. 
I've not used IIS/windows servers but I would imagine they'd be very similar to install(much like linux). Both solr and ES are built on the lucene engine and are basically just a http interface on top of it that makes it easy to interact/index/search. They both need java and will probably require fairly similar steps in terms of installation. All that said ES is probably the easier option just simply for the fact that it is more popular so there are far more resources/tutorials available out there to help. 
There's a big difference between a puzzle and a meaningful, in-depth question. Whether it's on a whiteboard is irrelevant. Ask stupid questions, make stupid hiring decisions. 
Hey, me too! Minnesota karma train! 
Well it does mean something more... it means the code is wrong. If they're supposed to be strings, use strings. Or define some actual constants (I'd suggest using a prefix since constants like 'gb' and 'days' are too generic and could clash with something else, for example use 'TM_DAYS'). And get rid of the "no comments" versions, it makes no sense. (Not trying to be harsh here, it's a unique idea I haven't seen done before so good luck.)
Mall of America? Damn. Totally would have gone.
I rather enjoy the whiteboard puzzles. Don't get me wrong, in terrible at them. But, I could draw out and explain the logic on how to solve a given problem. If a developer cannot at least explain the steps they would take to solve a problem, I suspect they are not a very good developer
Interesting, have you looked into doctrine? We use it extensively on a php project I am currently assigned to. It has many features to generate models from db tables or vice-versa, create tables from some php classes. All from the command line. 
yeah I'm mainly just creating this to learn how its actually done conceptually. There are obviously well established tools out there. More of a fun side project/learning experience for me.
Ok, appreciate the willingness to share with other users. You are about to get some less than pleasant criticisms of your code. I'm just going to point out one thing which is very bad. You are storing the passwords and other sensitive user information in a directory which is web accessible (https://github.com/dchmie01/simple_registration_system/blob/master/data/userdata.txt). This means anyone who figures out your code is being used can take this information from the site. The preference would be to use a database to store this information. If that isn't possible, the file used to store the information should be placed outside of the web root directory. If that isn't possible, at least use .htaccess to prevent direct access to the file in question. You should make the file path for this a variable shared across files to make it easy to change the location of the file. 
Right, the project is more of a "Hello World" for login and registration. I kept it as simple as possible. As you can see the data in the file is just filled with John Smith's data. This was a university project and that's how we were asked to do this. I understand this is not secure but the intention of the project is instructional.
Why not just hash the password? It's not hard and will add a couple more lines of code. [password_hash](http://php.net/manual/en/function.password-hash.php) 
I'd argue that if introducing password hashing is overwhelming, the learner shouldn't be building a login system, even for practice. Hashing passwords is not optional, so if you're teaching someone how to make a login system, they should understand how to do it securely. If somebody gets no other exposure than being taught how to do it incorrectly, they may never look into how to do it properly when they have to do it on a real system. PHPs `password_hash()` makes it really simple to implement hashing, so there's really no excuse not to use it. 
Not to be overly critical, but if the intention is to be instructional, it would be worth mentioning in the readme that the `userdata.txt` file would be publicly readable and insecure. It's not necessarily wrong to use a flat file system over a database, but a small improvement would be to have the data file outside of the public directory. For instance you could have a `public` directory and a `data` at the same level. The `index.php` file would go in `public`, and you'd point your web server at this location, but the `userdata.txt` would reside in the `data` folder, which can't be accessed from the web. 
So you shouldn't write any tutorials then
Frankly, you should be positioning this not as a learning material for other newbies, but as an exercise of your own, and post it in /r/phphelp. Given that, you'll be given a lot of positive feedback. But the way it is presented now, it arouses darkest feelings as your post is the essence of "bad PHP" as we hate it: you know positively nothing yourself, yet dare to teach others, adding yet another terrible example to the already enormous body of bad PHP code.
https://codereviewvideos.com/
Your course was, it seems entry level php. Perfectly fine, considering you have a usable. (though very insecure) login mecanisms. Your teacher *should* have made a strong point of advising clearly from the get-go the security concerns in this approach. This is your lucky day. Really. For starters, you had a free, friendly peer review of your project. Trust me, code-reviews are an integral part of any serious project. It is never an easy moment for those not used to it. Put your ego aside, and use the criticism constructively. I thrive on code reviews and feel good pushing code approved and validated by other experienced devs. 15 years in the trade, I still often miss details or receive suggestions for a more optimal implementation. Just in this comment section, you will have gained a few basic security tips that are really not advanced material at all. We are still in the basics here. Password hashing is dead easy in php nowadays and is essential for any login mecanisms on user based web application. Consider reading up on this: http://php.net/manual/en/faq.passwords.php Good-day to you mate, have a good one. 
If literally one function call is overwhelming.. you're doing something wrong.
well he was talking about Kubernetes which requires you to know how to connect things across different hosts
Yes. 
I foolishly tried applying this reasoning to make a mini Framework for a client's side project. On the bright side, I gained a deeper understanding on how the MVC paradigm and form classes can be implemented in PHP. On the downside, I never got anywhere with that project.
I'd rather have a list of people who have so much ego wrapped up in the interview process that they take this seriously. Then I can avoid hiring them.
I find it more useful to insert a JSON file into a temporary database and use a native query language after that. I too can't decide if this is good or bad, but ..why?
That's what i was looking for, Thanks
The original release was baad, but what's kinda weird it is got worse with patches. Now, half of modules don't work, basic functionality like "add user to group by default" need code workaround and you can't even make clear module uninstall on production. Option for "disabling modules" is in progress because (qouting d8 forum) "we don't really know what it should do". Of course code is around 100x better that wordpress, but it only matters if you wanna dig into it :) 
- https://knpuniversity.com/ - https://github.com/certificationy/certificationy-cli - https://github.com/sitepoint/awesome-symfony - https://github.com/pehapkari/awesome-symfony-education ... And PHP. Symfony is a lot about OOP and design patterns as well.
At $25 a month, it better be 2.8x as sweet as Laracasts.
It's like meeting 100 of your long-lost brothers and sisters. There are very few people who so fully understand what you do for a living. When you get together with people whom you don't have to educate "here's what I do" and get to move directly to the "let's be friends" part it's amazing.
[PHP the right way](http://www.phptherightway.com) A great resource. Check it out man.
Something like this? https://dev.mysql.com/doc/refman/5.7/en/json.html#json-paths or even NoSql db?
Personally, given the small set of use cases this probably has, I would not touch it until the source code is unit tested and the source has a better separation of concerns. It's a fun learning experience for the author, but in its current state, only safe when used for debugging purposes. And then, the useless can be found only when joining multiple files as tables or schemas becomes available in a stable manner.
Have you heard about JsonPath? http://goessner.net/articles/JsonPath/ There is a PHP implementation: https://github.com/FlowCommunications/JSONPath
I might actually add this to our config package. It gets the job done.
&gt; foreach ($generator-&gt;get() as $value) { &gt; yield $value; No `yield from`?
Some people actually believe SQL is a well designed language.
I'm definitely one of them and I strongly prefer relational databases and SQL over (for example) MongoDB or heavy abstractions for most everyday tasks, but I don't really see much practical use for this.
 /** * @param $type * @return \Patterns\Factory\Pizzas\CheesePizza|\Patterns\Factory\Pizzas\PepperoniPizza */ static public function createPizza($type) { switch ($type) { case 'cheese': return new CheesePizza(); case 'pepperoni': return new PepperoniPizza(); } } Don't particularly like this, surely the "types" should be constants
Umm I think when you do null instanceof you will get a fatal... You need to is_object &amp;&amp; ... instanceof
However, I will admit that my suggestion would greatly obscure the example OP makes of the pattern.
Again, trying to somehow prove I misunderstand the concept of a factory is far from constructive, as well as far from the truth. Given that the factory in question does not use an interface, makes it so the implementation will depend on a concretion, rather than an abstraction. This is not bad design for a factory, although one could debate code practice, so long as the factory remains maintainable. If one needs custom functionality, they now need to extend this factory and for the better part suppress what the parent is doing under the hood, potentially suffering from changed behavior due to changes in the parent code. Again, this is all beside the point for the purposes of the OP. As such, in an earlier comment, I acknowledged you were right about that. I would also like to point out that as an alternative, I suggested registering FQCNs per type, which is hardly nesting factories inside factories, and may be more to your fancy. 
You give a good example. Although, I'm weird enough that even for a factory meant to build an AST, I'd like an interface, to allow a custom implementation that may return different expression nodes. However, and as previously acknowledged, registering is indeed not the purpose of a factory.
Awesome job too Svpernova09! Always great to hear your sessions!
upvotes tell a different story homie. 
Everything in a design is trade-offs. For example, this particular factory doesn't need to be extensible, because the expression AST walker wouldn't recognize any new nodes, anyway. You could extend it to recognize it, but then the SQL emitter wouldn't know how to emit SQL for something like a dozen distinct DB vendors for the new nodes. You can extend the emitter too, but then the optimizers wouldn't know how to produce and invalidate cache for those expressions. Etc. Etc. So instead, the AST is what it is, and that's the end of the story. If it's very important, it gets added in the next point release. In another example, the validator library I use has a factory for common formats one might receive in user input. Do I need to add my own formats? Sure. But do I need to extend the standard factory? Nope, I just make my own factory. I can use more than one factory, there's no need for everything to be into one extensible factory. Extensibility is a nice thing, but it's not always a needed thing. It's good to see the difference, otherwise it leads to [gold plating](https://en.wikipedia.org/wiki/Gold_plating_%28software_engineering%29).
At $25/month, perhaps it's actually priced correctly &amp; you're spoiled by under-priced content at Laracasts? This *is* your career, after all. What did you pay for college?
Fantastic conference. Great job by the organizers. 
Yii2 and Laravel have Active Record, maybe take a look at those.
:-(
The iterator design, with both current() and next(), is clumsy to use in a loop. With the current PhpIndexedArrayIterator design, using hasNext() to determine when to finish iterating the items of an array results in an infinite loop: while ($iter-&gt;hasNext()) { $item = $iter-&gt;current(); echo($item . "\n"); $iter-&gt;next(); } A better design would take inspiration from [Java's Iterator interface](https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html), which uses only hasNext() and next(). Conceptually, an iterator with this design starts pointing at 1 before the first element in the sequence, and a call to next() moves the iterator up to point at the first element (if one exists). hasNext(), then, checks if an element exists after the current element. A loop using this type of iterator is cleaner since it only has to call one method to access the items: while ($iter-&gt;hasNext()) { $item = $iter-&gt;next(); echo($item . "\n"); } To implement the PhpIndexedArrayIterator with this design, $position would start at -1, and hasNext() would look like so: public function hasNext() { return isset($this-&gt;array[$this-&gt;position + 1]); } If you prefer the current()/next() implementation, then hasNext() should probably be renamed to hasCurrent(), since that's what it's really doing, and next() should increase the current index unconditionally in order to prevent the infinite loop demonstrated above.
How does the swoole library compare to Ratchet?
Thanks :D
It would be better to compare swoole to reactphp, they are both networking library for PHP. The biggest difference is swoole is implemented in C as php extension. 
With the current feature set abstraction is an overkill. But I want to extend it to set values at runtime, get the whole array and possibly make use of nikic's phpparser - and at that point I guess that makes sense!
I'm American and I went to college for free. Actually, I profited $2,000 a year going to college. We're not all "crazy". 
I just wanted to implement all the stuff by myself. But of course I agree better to use predefined interface
 private function parseBody($body) { $parsedBody = []; $contentType = $this-&gt;getContentType(); if ($contentType == 'application/json') { $parsedBody = json_decode($body, true); } else { if ($contentType == 'application/x-www-form-urlencoded') { parse_str($body, $parsedBody); } else { if ($contentType == 'multipart/form-data') { // noop } else { throw new NotSupportedException("The content type: '$contentType' does not supported"); } } } return $parsedBody; } I've a question. I've seen some flaws (lack of comments on some public methods, Yii Container copy-pasted outside of Composer and without PSR 11, etc...), but this example comes often. Either choose the switch or elseif, but avoid nested if statements.
Okay fair enough. Maybe add a small doc hint to the build in to make it clear.
a paragonie link not submitted by scott? hot damn.
go back to /r/gatekeeping
Hi, thanks for your suggestions, all of this can be improved, may be i can adopt PSR 11 in later releases~
Hey. The best solution would probably be to watch things on [Laracasts](https://laracasts.com/). If you think you might be into Laravel, mostly. But there's other stuff too. The good thing with Laracasts is that once a new version of Laravel comes out, the "from scratch" series are also updated/redone to reflect. [Here are the series](https://laracasts.com/series/laravel-from-scratch-2017) for the newest Laravel 5.4, AND they're free. There's other, more niche stuff if you're willing to pay a subscription fee.
Looks painful :D 
[removed]
wait why are we hating this person?
[removed]
Read his username. He's an edgelord.
[Laracasts](laracasts.com) is the one! Jeffrey Way is the best teacher out here teaching PHP. Also there are 2 other great resource. [Codecourse](codecourse.com) by Alex Garrett , he has put up the PHP basics course for free on his YouTube channel. Just search codecourse on YouTube and you will find it. If you learn by reading PHP PANDAS by DAYLE RAEES is the best book to start with. Hope this helps :)
In your onMessage callback, you should not modify the messages array using push. You should create a new array using messages.concat([message]), and then call this.setState().
Doing better React/JS using immutable data structures isn't the goal of the post so I kept it simple. But thanks to pointing out anyway ;)
Okay, but React works on immutable principles, so this will more than likely cause a bug in your code, or that of anyone who follows it.
LOOK OUT EVERYONE, THE PLOT THICKENS. /u/Khronickal IS ON THE CASE
Java has `final` variables and properties, which forbid reassignment. That said, if you factor your code in classes and functions, and your classes don't expose properties as public, the fact you can reassign a variable is an entirely local effect, so not something where a remote entity will break your immutability from distance, the way a call to a setter method would, for ex.
Yes but as a class writer, what do you care what your object is *assigned to*? It's important to understand that breaking immutability is an issue when it results in "contract breaches", i.e. entities you guarantee as immutable become mutable due to oversights in what you're exposing as public interface. But the variables that keep a mere *reference* to your object aren't part of any contract you're trying to enforce. If you want language-wide enforcement of immutability, that becomes a very different topic. Obviously Java allows programmers to choose between both depending on the case. So I don't see the issue.
I have no idea what point you are trying to make. None of what you said has any relevance to making immutable objects. 
http://phptherightway.com
Thank you!! I'll give it a try
Thank you so much. Was looking for a book as well that could help me out.
it is still paid for, mate. they all just get their salaries indirectly via taxes Your professors aren't working for free.
Wouldn't it be easier to make the __construct method private and use a static factory method for class instantiation? 
Bingo.
I liked the blog post and came up with this thought of sharing the idea which I had in my head and had been using it for a while. I used to make use of the interfaces to make the objects immutable. Here I have added a link to how I used to do it. Any thought on that may the drawbacks or comments: https://gist.github.com/bpawan/f01919d6e49f6ef000de9bb8230d8829
Pretty cool, but technically it's more like 100000 lines of code, just written by somebody else. This is a php chat app with 9 sloc: http://pastebin.com/WHdp8AvG
React This is my current setup: * React * MobX - client side state * React Router - client side routing * mobx-rest * axios - ajax Also * Victory - charting * React modal - modal component also I have made some 'fetcher' components for requests. It's declarative all the way 
Yeah that was my thought as well, hey I created a full CMS in a few lines of PHP code, opens it up and find out its a GO-Lang app with a few lines of PHP code to display a front end. Technically it is only a few lines of PHP but everything else is done in a different language 
you should put basic info in your readme, not just your corporate plug
I acknowledge this isn't directly related to PHP, but I also think that this could be relevant to other PHP developers who'd might be using the same stack as me. Recently, I participated in a talk with some other developers talking about message queues and workers. I disclosed that my platform (built on Laravel) utilizes Redis as the queue system. This was apparently frowned upon and people kind of started chanting about RabbitMQ. Although I know what RabbitMQ is, I'm unsure as to why Redis would be considered a bad choice. I wasn't offered any feedback as to why I should choose RabbitMQ over Redis other than "RabbitMQ was made for this" - so is Beanstalkd so why wouldn't people also endorse that? Before a tl;dr is necessary - should I be concerned about using Redis as my message queue? And if so, why?
I'm pretty sure that feature is being removed in a future version of the language (there was an RFC involving this or something similar) but yes you can call __construct directly at the moment 
I've seen this trick being mentioned here from time to time in various comment threads, but it seemed like not everyone knew about it so I thought I'd share it in the form of a Medium post.
&gt; assigning an immutable object reference to a mutable variable doesn't make the object mutable Nobody said otherwise. You seem to just be talking to yourself here. And that's still nothing to do with `final` variables.
Then you should also know that all magic methods are regular methods including **__destruct()**. Nothing stops them calling multiple times.
You're a god damned idiot if you think this is true.
&gt; Nobody said otherwise. Ok, Mr. Nobody: &gt; practically every language allows you to reset a variable to a new instance of the class. In fact that's what initially confused me about immutability So what confused you about **immutability** is that you can **mutate a mutable variable**, unless you declare it **immutable** (final). 
Final has nothing to do with it. Immutability appeared useless at first, because I can just make a new class and assign it to the same variable (e.g. `a = "new string"` in Java). But obviously that makes it a different object. I think you're just trying to argue a point that nobody ever brought up.
Just a note: That gif in the readme only serves to confuse. When I scroll down I have no idea where it starts and ends. I also have no idea what information the slides are meant to convey since by the time I've partially scanned it we're already onto the next one.
Why would I add `final` to a variable if I want to reassign it?!
I agree, it's cringe-worthy.
Well yes redis is fine for a "simple" queueing" system, if you as Ozymandis-X mentioned use persisted to disk so you don't loose messages. You could even use a simple db for it. But the real power of RabbitMq/Beanstalkd (as far as I know) comes when you want to do more complex stuff. Below are some points by my experience with some testing of Beanstalkd 1. Priority messaging, some messages must be handled as fast as possible while others can wait. 2. Failed message handling, in beanstalkd (don't know of RabbitMq) you can mark messages that have failed so they stay in the queue but won't but handled, this way you can easily redo them when you fix the issue of failure. Although you could but it in a second stack in redis this is "easier" 3. Size, I had to search this so correct me if I am wrong, but Redis can hold max 2 GiB of data in a single value (http://stackoverflow.com/a/5624569/1771960). Which is a lot, but which could potentially be a big issue on scalling
Hell yeah, let's put Kohana on the list, the framework that will be discontinued on July \o/ https://twitter.com/kohanaphp/status/827928580797644801
&gt; Seems like you're still at that stage since you don't appear to understand immutability at all. I understand immutability, but disgruntled goats seem to be beyond my capabilities. :-)
Holywell's treatment of this topic is a good addition to my earlier article, [Avoiding Quasi-Immutable Objects in PHP](http://paul-m-jones.com/archives/6400) -- he catches the `__construct()` behavior, which I did not (though my commenters did). However, Holywell does miss (among other things) that in PHP, pretty much only scalars and nulls can be the values of immutable-object properties -- values in arrays, and values in mutable objects, can be modified, making the object holding those arrays and objects act mutable. tl;dr: immutability in PHP is very difficult to do well, and then only with severe constraints.
It looks like they don't like testing things at tighten.co
try to do more in-depth research or same-function component comparisons. Can't blame you for writing it, my bachelor paper was something similar to your article :D
Feel sorry for OP.
Thank you for lilbit motivation... Going to update it soon :)
I see some advantages about the prioritized messages, but also have to say that I only queue a small amount of stuff allowing my users to avoid waiting for external API calls to finish. If it's really bad, I'd might have two messages per hour or so, which also handles the data size. Thank you for your insight.
Well, one idea would be to use [Stripe Checkout](https://stripe.com/docs/checkout) and then use the information, sent by [a webhook](https://stripe.com/docs/webhooks) about the client to allow access to this client. The approach could be using an e-mail invite after a client paid via the Checkout - allow for the client to actually register before capturing the amount (aka. don't be a douche) after you've sent the activation e-mail.
&gt; Content creators should have an offline app, make changes, press publish and have those changes uploaded to a static server. The whole CMS control panel paradigm seems kinda flawed to me. I don't think you've thought this through. I've authored a CMS for our company based on our needs, and I've found out that content creators aren't the kind of people who sit in an office all day, working from a single desktop machine. They like to work remotely (many of them *have to*, say, reporters), and use a wide variety of operating systems and devices. Targeting all those with an "offline app" is possible in the basic case, but *very* expensive, compared to writing a single responsive web app, which is compatible with all those devices, and keeping the bulk of your logic at the backend on the server. Also content creators don't work alone. How are you going to manage team workflows from an offline app? Jessica assigns to John the task of writing an article about exotic cats. Marcus should oversee the process as an editor and approve the content before it's published. At the last minute we're giving Olivia access to edit the article, so she can insert a photo slideshow from a Pet Expo she's visiting at the moment. They can use the built-in chat system &amp; collaborative editor to work together on the article, and avoid submitting conflicting changes. We're talking about employees interacting, assigning tasks to each other, and possibly conflicting each other as the content is edited. Who is going to resolve those conflicts in an offline app? You can't just let everyone overwrite each other's changes blindly, or segment the content of the site into hundreds of tiny silos, where one person is king of each silo. That's not progress, that's worse than not using a CMS at all, and going back to emailing each other Word files. So there *will* be an online component. There's no going back. Putting static stuff on a static server is nice, because it means you don't have to think about server security as much, but it doesn't mean you built a system that makes life easier for the people who hired you. You only made your own life easier...
I am using Symfony 3. I currently have a site with one log in. I am looking to add a second log in. Basically I have example.com. If you want to log in you go to example.com/something. All future things related to the log in are in example.com/something such as example.com/something/account or example.com/something/blah or whatever. They are all prefixed by /something. I am looking to do something similar with a second path /stuff. These log ins will be unique and not tied to each. They will have their own seperate variables in the session and seperate roles. There are two ways I have come up with to handle this. #1. Use one session / token. Some inconveniences I am experiencing: a. The user may have a different username / password on /something and /stuff. The token would then not always have the correct username. b. Each path will have different roles. If somebody is logged into /something that doesn't mean they have access to /stuff. When a user logs off I need to remove the roles specific to each path without removing the other path's roles. c. When a user logs into the second site I will need to recreate a token and copy the existing roles over to the next token while adding the new roles. d. I would have to prefix the session variables with something/ and stuff/ so I can more easily delete them. All of these are pretty doable, but a bit of a messy solution (in my view). #2. Create a new session for each /something and /stuff I created some code like this: class SessionStorage extends NativeSessionStorage { public function __construct(array $options = array(), $handler = null, MetadataBag $metaBag = null, RequestStack $requestStack) { $uri = $requestStack-&gt;getMasterRequest()-&gt;getRequestURI(); $uri = explode("/", $uri); if (count($uri &gt;= 2)) { $options['cookie_path'] = "/" . $uri[1]; } parent::__construct($options, $handler, $metaBag); } } There are a few issues with this code a. If I go to example.com and then try to go to /something then the cookie for /something won't be created since there is already a session at /. b. We have example.com/about. This would create a cookie for /about which we don't want. I made some changes to the code: class SessionStorage extends NativeSessionStorage { public function __construct(array $options = array(), $handler = null, MetadataBag $metaBag = null, RequestStack $requestStack) { $uris = [ "something", "stuff" ]; $uri = $requestStack-&gt;getMasterRequest()-&gt;getRequestURI(); $uri = explode("/", $uri); if (count($uri &gt;= 2) &amp;&amp; in_array($uri[1], $uris)) { $options['cookie_path'] = "/" . $uri[1]; } parent::__construct($options, $handler, $metaBag); } } The issue is: a. This doesn't fix issue A since / still gets created. I still need / to be created since I need / to use CSRF on some forms. This would fix the issue in B though. I would prefer to use #2 just so things are bit more separated, but I am unsure how to set up the session storage properly to handle this. I can get this working with solution #1, but don't really like the set up. Any suggestions would be appreciated.
`$obj['post']` ?, also /r/phphelp
No I didn't.
thanks for the comment :)
If you're taking about validating it, then look at a custom DTD. Otherwise, yes you do have to actually write your own business logic...
This post deliberately only discusses scalars due to this, but there is a follow up coming that will deal with arrays and objects. Quoted from my article: &gt; The strict type declaration and the use of function argument hinting further fortifies the immutable class. We don’t unexpectedly get given an object for instance. This would be bad because that object could be altered elsewhere, which would change the contents of our immutable - bad! More on this in a later article. 
Not yet, but it is in the plan~
Ok, I've rewritten iterator and observer with native PHP interfaces
Tell us. Would be interesting
I sure hope management never finds this.
Payment providers usually use 2 response URLs, a redirect URL and a callback URL. They redirect URL is where the user will be redirected, and the callback URL will be called by the provider. The redirect URL can be used like some kind of confirmation page, that sounds like what you have now, but don't trust that the payment was actually made until you receive the callback. This is where you'll do all of the user upgrading etc.
helpful article shared, thanks 
[removed]
Interesting topic. Not sure if such a thing exists for PHP. Is there such thing for other languages?
The best method I've found for mocking services in functional tests is based on this https://github.com/ramunasd/symfony-container-mocks Essentially, in a test environment you use a custom container which allows you to easily prophesize services
For Go there's godoc.org. I assumed that it would just be as natural to exist in PHP too... 
https://codedoc.pub is pretty good. It builds with apigen, not phpdoc. Results are about the same.
I have a login form that does the following: 1. Checks the database for the existence of a row with a username equal to (form username field) 1. If it exists, password_verify(form password field) against (password_hash()'d password) 1. Creates a session verifier by password_hash(date.username) 1. Adds (to session): username and session verifier 1. Rehashes password in database (if password_needs_rehash) 1. Updates the user table with the session verifier (linking current session with username record in table) 1. Once step 1 is complete, going forward, to identify the user, the script: 1. Makes sure that the session variables for user and session aren't empty 1. Fetches the information from the table where session and user name = $_SESSION username and session verifier 1. When the person logs out, the session verifier field in the table is blanked out Is this the *correct* way of doing this? Is there anything inherently wrong with doing it this way?
Look at `shell_exec()` or one of its siblings. 
Is there ever going to be a post by you where you're not advertising either your blog or your books? It's getting bloody annoying.
but thats not what i need. there is a difference between `composer update` globally installed and `php7 composer update` locally installed which might run different versions of both composer and php and there is no way for `shell_exec()` to know which one to ru
Are you ever going to start a blog or write a book?
If it's not accessible on `Event $event`, you'll need to instantiate one yourself.
Why `password_hash(date.username)` ? Doesn't that mean the session is only valid for that day? What if they log in at 23:59?
Unfortunately using one of those services isn't an option.
Const as an app config or parameter and then use Symfony 'Processes' package or eqivalent to execute your command? There is option to set the defaults (composer + php) version system-wide and that looks as a potential solution. 
&gt; Unless your _sanitize function is calling mysqli_real_escape_string then your code is vulnerable to SQL injection. It does. As is customary for all _sanitize() strings, the end result is escaped (mysqli_real_escape_string). In the case of 'USERNAME', it also replaces blank spaces with underscores, reduces the string to a length of 20 characters, and removes anything that isn't alphanumeric, an underscore, or a dash (before escaping). &gt;You're also running the same '$check_username' query twice. 1. $check_username is the query parameter 2. It gets passed to $d-&gt;_database_query() 3. Flow: 1. Checks for output 2. Output? Okay, verify our password against this output 3. Password good? Set regchan_u and regchan_s and then see if it needs rehashing 4. Needs rehashing? Ok, do that. 5. Done with all of the above? Great. We're logged in. I'm not outputting anything into a loop so it runs a second time to regrab the appropriate information (in this case it's a single value). &gt;I'm still not seeing how the session_verify works. You can't use "a random string" because on the next page you don't have that random string any more The "random string" (in this case the date of the login and the username) are set at the time of login. One is inserted into the user table (to the row that it belongs (who we are logging in as) and the other is committed to session (as regchan_s). It doesn't need to exist in subsequent pages because it already exists on the database and in the session. What we are comparing to the database is a session variable that is only generated when successfully logging in (correct username/password combination) that is only generated once (per login).
i don't need to set the defaults, i need the command to run on the same php and composer version as the one ran by the user at the moment. some project might require composer 1.3 and php 5.6 another php7 and composer 1.4 on the same pc/server
&gt;OK. The preferred method is using parameterised queries. Makes it easier to be sure that you've escaped everything correctly. I am. &gt;But you already have that. Or, you would if you save it to a variable. Good point. &gt; That doesn't make sense, *because you're not actually "verifying" anything.* You check that their password is correct before storing the username in the session, so storing another random value in the session does nothing. Verification occurs in another part of the script. The only thing I am verifying here is that the password is: 1. Correct 2. Belongs to the username that is being logged in with Verification occurs when I need information elsewhere that is directly related to the username/hash, at which point I: 1. Ensure that $_SESSION['regchan_s'] and $_SESSION['regchan_u'] are set (and not empty) 2. I then query the database for X where user_session = (regchan_s) and user_name = (regchan_u) The login portion does its job. 1. Is this username in our database? Great. Let's check the password supplied. 2. Does this password belong to our username and is correct? Great. Let's log in. It's not the login form's job to pull information for use throughout; it merely exists to set the appropriate session information based on things that the login form has verified (correct username/password combination). An example of how we're using that is below (and yes those are escape variables) case 'ID': if(!empty($session)&amp;&amp;!empty($user)){ $fetch = 'SELECT user_id FROM rb_users WHERE user_session = "'.$session.'" AND user_name = "'.$user.'"'; return (integer)$d-&gt;_database_query($fetch,'QUERY','SINGLE'); } break; The user_session is there as a helper to further authenticate person X being person X as each user session is unique.
It still has to process the following block of code, otherwise how would it know where the matching else is? There could be nested if statements.
Support questions should go in r/phphelp. Assuming it has PHP on the server, you can check for a URL parameter and redirect to a login page. Or you could just give them a link to an admin.php which has an upload script. 
Now consider what actual professional consultation/lessons would cost you, and you realize that $25 is basically stealing.
It isn't that we don't know about it, it's just that we understand what a horrific abomination this is. It appears you are blissfully unaware of exactly what is happening when you do this. Unpacking and repacking a collection just to pass it to method calls solely for the purpose of type safety is not at all what varargs are designed for and it certainly isn't scalable. I see now why some people are reluctant to bring new features to this language because clueless newbies always find a way to abuse them, and worse: preach to others about their cool new hacks like they're actually a good idea. Please stop before you harm yourself or somebody else.
From an example: if (test_1() &amp;&amp; test_2()) { run_1(); } elseif (test_3() || test_4()) { run_2(); } First, `test_1()` will run, and if the return value of `test_1()` is `false`, `test_2()` will NOT be run/evaluate. Then, PHP goes to the `elseif` block, and run `test_3()`. If the return value of `test_3()` is false, `test_4()` will be executed. If `test_3()` returned `true`, test_4() will NOT run/evaluate. 
Feels like it's missing a step. If you're going to the trouble to extract a nicely decoupled component, why wouldn't you consider whether the public interface makes sense in its new context? So in this specific example, once you've extracted the search method out of the controller, it makes little sense to leave an HttpFoundation\Request object as the way of passing the params to it.
When it comes to parsing code, PHP parses all code before any execution happens. When it comes to executing the statements, only what has to run... runs. It's either the block following the `if` (if condition matches) or the block following `else`, not both. If you don't want parsing overhead, you can use the built-in opcache extension.
I know this is a blog, and not a proper press release, I guess, but it's kind of annoying not to have a blurb at the bottom telling us what Expressive *actually is*, because I have no clue. Instead the information is hidden behind several levels of indirection: Blog Post &gt; One of the links in the blog post &gt; Official site &gt; Getting Started menu &gt; Overview and Features item. And even after reading that, I don't know why I'd want to go all in with "PSR-7 middlewares" for my apps. It's stated as if the mere mention of "PSR-7" and "middlewares" should get me hard.
&gt; Feels like it's missing a step. Feels like it has too many steps. My refactoring workflow is: 1. Identify reusable piece of code. 2. [Hacking montage](https://www.youtube.com/watch?v=u1Ds9CeG-VY). 3. Service is extracted.
Yes, this is possible. Note that GMP (as currently implemented on PHP[1]) deals only with integers. If you need decimals then you want BCMath instead. GMP can handle any size numbers, but larger ones take more memory and time. [1] https://wiki.php.net/rfc/gmp-floating-point
How is this a need to read? This is simply a case of using the wrong tool. Any developer with a lick of sense can determine this. Next thing we know, people start linking to the readlink documentation, because it streams files and everybody must have done it wrong all their lives.
&gt; test_3() will NOT run/evaluate. Should be `test_4()`. Also, why not use `and` / `or` keywords?
Same silly tripe and same silly comments as every other SQL- or NoSQL-bashing thread. Assuming that people are logical, they'll use the right tool for the job. Illogical people will use whatever is trendy and will either succeed or fail depending on randomly how well​ what's trendy matches their data and needs. Don't assume something that works well for your data will work well for someone else. Their data will be different. Their skill at programming will be different. Their experience will be different. Their use case will be different. SQL can be shoe-horned into anything. So can NoSQL. But is shoe-horning what you want to do? Use the right tool for the job.
I'm aware of the difference in operator precedence, but as long as you use brackets (which you should anyways for those situations for clarity) it's not a problem. EDIT: An edge case is not a good reason to not use a feature. Especially if the solution to that is knowledge. You can say that about pretty much any technology: "X sometimes does Y, so never use it." which is terrible advice. A better advice would be "If you're gonna use X you should know about Y".
Not php 7 compatible?
Ah I haven't tried apigen with php7. Weird.
You could use an separate app with S3 upload. Or really any data store and then FTP in the background.
You should either spend a day reading the php website, or learn to use Google. `PHP_BINARY` Obviously, you need to look for composer.phar in a known location or `exit` and tell the user that you can't find it. Or dockerize it so you already know everything. 
This is slightly more complex, but you could set up a cron job to check an email box and take/parse/post the attachments. No CMS required.
As I said what I need is https://getcomposer.org/doc/articles/scripts.md#referencing-scripts
It shouldn't. I'm not sure about op/bytecode level changes or, but I would imagine it shouldn't be a problem. That's not an excuse to write cryptic code though. It's easy to piss off your peers with code that wraps Game of Thrones chapters with if/else blocks.
Unlike you and me, most people don't visit php forums and look up obscure questions like *"php &amp;&amp; vs and"*. So while you might know the difference, most people don't. The bigger problem is that you talk about this "feature" as if it's useful, but haven't really explained why. I personally have found no benefit to use "and" over "&amp;&amp;", but if you do then please feel free to share. 
I have a follow up question then. What if there is an include sentence inside that block of code. Does PHP evaluate certain sentences such as includes before actually executing the rest of the code on page?
Yes, there's no async in PHP. Everything happens in sequence. (unless you use pcntl_fork from the CLI or some message queue, but that's besides the point)
No nothing gets called inside the if block. Not even an include/require statement. 
Thank you for your example - that is indeed an interesting way to use it. Not how I would do it, but someone else here maybe find it useful. However, I'm not quite sure why you seem to be so invested in debating this. I simply made a suggestion and explained why.
&gt; How can I have a hidden login form only for the admin so they can upload PDF's to the website? just create a page at some url like /hiddenadminlogin with password and a file upload input there. Check the password, start a session, set the flag in the session and process uploads and all admin stuff there.
I don't think this blog was meant to be presented in a way to introduce you to expressive, more or less it was used to explain the changes in the new version to the previous/current users of expression 1.0 which wasn't released too long ago. With that said, reading their [Why Choose Expressive](https://docs.zendframework.com/zend-expressive/why-expressive/) page, it seems like it's supposed to be a gateway to zend. They don't say that directly, but they constantly talk about how it's easier to get into over zend-mvc. So my theory is it's a marketing plan to convert some users over to zend. Off topic: To this day I'm not sure why I've never used zend.
You've not used Zend because they're bad at marketing. And. I'm not kidding. 
In PHPStorm, go to preferences, then under Editor-&gt;Colors &amp; Fonts-&gt;PHP, expand the "Braces and Operators" tree, then change the foreground colour of both Braces and Brackets to be a color that is similar to your background color.
If an if condition is false everything inside the block becomes "dead code" and is ignored. As I replied to another person on this thread, it still has to parse the text of the code during parsing of course but that is not the same as execution and happens at an earlier stage. Also if you have bytecode cache the parsing stage will only happen on cache miss.
Brilliant :)
Unless you've worked there, there are no grounds for that assertion. What about private repos? What about other Git servers? 
And then proceed to not notice when they are missing or wrongly placed. 
OP asked how to dim them, not whether doing so was a good idea :) pretty sure the squigglies for syntax errors are covered off by a different setting though.
i have been reading the source code but havent found how its done. 
@op, can you explain what is the connection between loose types and Immutability in your vision? Would be great if you could actually understand the topic before blogging about it.
You really should get used to them. It's not a steep learning curve. 
&gt; isn't scalable Which part of this do you not understand? 
/u/andrewcarteruk wrote an [example app and tutorial](https://www.sitepoint.com/build-nasa-photo-gallery-zend-expressive/) for us some time ago, using a now outdated version. I think it still gets the point of what ZE is across nicely.
How is that not scalable?
Passing arrays permits copy-on-write semantics which is incredibly efficient for the read-only case and certainly more efficient for the write case when compared with decomposing and recomposing the entire array, element by element via the function call stack. If you want further details you can pay my consulting fees.
How did you get by those numbers?
How would a centralized documentation ensure it stays up to date with all the projects it encompasses, when they aren't explicitly registered to the service?
So you're saying that [all these classes](https://github.com/tightenco/jigsaw/tree/master/src) don't need testing? What about someone submitting a PR, how would they know that they are not breaking functionality? How do you check every piece of functionality works with new PHP versions, new package versions, in different environments?
This comment has no logical reasoning. Instead, it consists only of name calling. If you are going to do some name calling, then please give some reasons. Better yet, give the reasons and leave out the name calling.
It's weird because I've always seen "zend" over the years, I knew what it was, but I never made the effort to get into it. Then comes codeigniter2, kohana, and laravel popped up out of nowhere really and a slew of other frameworks. Then I instantly jumped on the laravel hype during 4.1 days then moved on to silex/symfony components (now slim3/auryn). Now it seems like I'm full circle and checking out all the frameworks again as I learned a lot rolling on my own, and even though I've known about ZF my entire time with php (about 9 years now), there's really nothing pulling me their way. Maybe that could be because of marketing, but I personally don't see a reason to use it over SF3.
This simple library is designed for framework authors. It solves a common problem I've been having for some time: how to locate/discover static assets that are scattered in multiple packages (like "how to find the list of modules/bundles available in all installed Composer packages of my project?"). It kind of overlaps Puli's discovery feature, but with a much simpler and smaller scope. Feedbacks are welcome.
I'm the author of the original article (in russian). I'd like to say It's both satire and not. Of course, It's not just "hello, world" application. It's a start point to create a scalable SPA with modern techniques. But what I really wanted to say is nobody just write php pure code now. We use lots of frameworks, configs, etc 
&gt; it makes little sense to leave an HttpFoundation\Request object as the way of passing the params to it. Agreed ... but this is "extract service" refactoring, not "decouple from Request object" refactoring. ;-) That is, these kinds of things are "baby steps" of improvement; doing everything simultaneously is a recipe for disaster. Fix of one problem, make sure the fix works, then fix the next problem.
If you are talking about the fact that the loading bar is not centered then yep, /r/mildlyinfuriating :) But I think that's on purpose (secret plan to make us all loose our minds).
There's a difference between "dim" and "hide" though.
I know this is 2016.02, but ever since Jetbrains did the whole rebranding shebang, the loading bar on the splash screen has been totally whacky. The loading bar loads way over the right hand side of the splash screen. I've tried every new version since then, but they all still have the same problem. Also I've googled if others were having the same problem, but... apparantly not? I feel like I'm going crazy.
So it happens to you to? Why is nobody else talking about it? I felt like I was going crazy... Well, more like /r/incrediblyinfuriating...
-1 ) Well thats some pretty obvious Plagiarism. This looks to be a rewrite of this article: https://webdevstudios.com/2016/12/15/form-vs-function-wordpress/ Apart from the added typo's I can't see much difference. If you are going to copy others then quote original references.
Does it affect the functionality of the program?
Curious, what types of sites are you building with it right now? Don't have to be very detail. Curious if you're doing more than just api's w/ expressive.
The general reddit rule against spam is kinda blurred because there are subs specifically created to post and aggregate blog spam. This sub's specific rule against "excessive self-promotion" is another matter, as this user only has one visible post on Reddit. Also, the user appears to have a global shadow-ban on their account.
For those curious about some actual data on the performance hit of unpacking the array, see this benchmarking script: https://gist.github.com/bertramakers/279943429a3f8fcd8c843bc8e9a564b3 You start seeing a performance hit with arrays with over 1.000 members, but even then it's negligible. Even with an array of 1.000.000 integers, unpacking and passing it to a function takes 0.034694 microseconds in PHP 7 and 0.214708 microseconds in PHP 5.6. Kudos if this is the actual bottleneck in your application, you must be an optimization hero. Now obviously this lacks some real-world context, but at least it's some actual stats versus statements with no proof elsewhere in this thread.
It's a design element. It offsets the larger heading in the top left.
You lost me at tabs instead of spaces.
&gt; Code MUST use 1 tab for indenting, not spaces. Nope. 
Dig the simplicity.
&gt; It all depends on where you choose to draw the line. ... But I fully accept that other people would draw the line elsewhere. Exactly. I would say to think of it not so much as "but then followup step X is missing!" -- rather, as "and then other followup steps become more obvious" (and perhaps easier to accomplish as baby steps of their own).
looks promising! does it work with PHP 7.1?
Great, thanks for a clear explanation of the differences!
Yea, this wording is silly: &gt; The idea behind the group is to address **errors** made in the actual FIG PSRs These are all subjective changes but are spoken as if they were objective errors. 
You are awesome! if you have more time to explain to me what exactly I did wrong, I would love to hear it. I don't quite understand. 
So, their [arguments in favor of tabs](https://github.com/php-fig-rectified/fig-rectified-standards/blob/master/Reasoning-Tabs-vs-Spaces.md) are pretty terrible IMO. They jump from assuming the use of a modern IDE or a severely limited text editor depending on if it benefits their preference. &gt; Tabs allow for fewer (and easier to spot) indentation mistakes (think about 3 or 5 spaces instead of 4). Modern editors should have automatic indentation, why are you counting characters? &gt; Sure, disk space itself doesn't matter, but bandwidth does, so the view files that contain a lot of indentation are effected the most here. If you take a look, most websites actually still don't compress their output. This is a PHP spec, is there a reason to be concerned about this minuscule level of bandwidth saved during the deployment of your source? This isn't even a good argument for front-end languages since you would run your code through a minifier or other compression method. &gt; Easier keyboard navigation for starters. It may seem minor, but positioning the text cursor with the mouse at the beginning of the line is really annoying when indentation is made of spaces! Pro-spaces would reply: "use home". No kidding. ... Use home, or `ctrl+arrow`. The fact that you may click one space from the start of a line is a silly argument. &gt; It is hard to grasp the indentation level with lots of spaces, it is way easier with counting 1-x tabs. What? Why? If you've set whitespace characters to be drawn then you can adjust their color to be less intrusive. Otherwise you can enable indent guidelines. &gt; Without a proper editor you will kind of kill your space key on the keyboard Oh, we're talking about limited editors now. &gt; Also, often times, you find the need to open/edit a file without the space-handling IDE, e.g. when using a GIT diff viewer or some other tool that does not have te full IDE spectrum. In those cases, if you only want to add something pretty quick, the programs force you to type 4x the amount and to hit the keyboard space-key like crazy. Using tab is supported across all applications and programs - and works as expected. Okay now you're just an inefficient keyboard user. &gt; The editor must really be some akward and ancient one, these days. It's nearly impossible to screw up tabbed code. hmmmmm &gt; Also, most modern editors count the indentation tabs as... Oh, back to a modern editor I'm not even trying to argue in favor of tabs or spaces, these arguments are mostly just bad. Edit: Okay, after reading this I'll bring my opinion into this post: &gt; **Why spaces then?** So why sticking to it? Rationally, there is no reason. In the end it is what it is: People stick to what they are used to. They are used to spaces, so they cling on to it for the last 25 years, no matter how wrong that may be these days. It would cost them a str_place() call to move on, but that won't happen. I used tabs for years then switched to spaces. Pull your heads out of your asses with a statement like that.
Ditto.
And clearly annoys lots of devs...
&gt; Why is nobody else talking about it? Because it's really not that big of an issue? Is it even an issue at all? The loading bar is offset and ends at the extent of the splash screen. It's not partially hidden. I'm starting to wonder if you're really just talking about the loading bar's position and not something more severe.
Rewrite this question without buzzwords which you don't understand and post it in /r/phphelp
Interesting. Why he does this: $name = $form['name']-&gt;getData(); Symfony form already entity Contact entity filss with data. No need to get data like this and assign.
Bummer, again, no Allman style!
While the message was delivered a bit brusquely, I think that an inherit issue with your question is that it's very difficult to answer. A login system might incorporate a number of different design patterns which combine to make the login. Your example of "MVC" as a pattern is more aptly deemed an "architectural pattern", and could employ many different design patterns to manage the creation, structure, and interaction of objects.
"Dig" means "I like". I like the simplicity of the approach.
There's a whole range of learning algorithms out there. Most of them are unimplemented in PHP. For the ones that are (even the one that I wrote), you really should have a solid idea of how the technique works before trusting any code, be it yours or someone else's. Caveat aside, can you please be more specific in what you're trying to accomplish? Are you trying to bias a search auto-complete by past searches? Something else?
While, if I'm being honest, I like your coding style more, I think it's more important to have a single standard group being actively worked on, rather than to have splinter groups and segment the effort. I like some things. I really do. Tabs being the literal definition of indenting, for one. Opening braces on the same line as classes and methods? Love it. But honestly I don't see myself ditching psr2 in favor for it because the former is such an established standard formed by a group of professionals. And also a bit because your wording towards it is a bit arrogant ("they're doing it wrong and we're right").
[relevant xkcd.](https://xkcd.com/927/)
Well yes, that's mostly what I'm trying to accomplish. I also want to show results matching some past criterias first as suggestions. 
Very basic as of now, more controls/features planned soon... EDIT: Added range and text box control input types
I was just repeating a joke from Coding Horror where he had a lengthy post arguing in favor of spaces and then still ended with that blanket statement. And fyi I didn't downvote you, I agree.
Would you please, just, *actually*, read the article before starting an unedifying discussion.
You shouldn't require Puli as a dependency but use a PHAR instead, like you do for Composer actually. IIRC, there was a plan to make the `puli.json` easier to change manually, not sure how much progress was made.
&gt; The FIG PSR-2 that actually makes sense (not political but reasonable decisions). I really love the "not political but reasonable decisions" decisions... 
Nope. There is not many languages with something similar to go, and to be honest I don't find it much useful in PHP either. I never once found anything more helpful than the actual code in those kind of docs...
I am the author of a library that may be able to help you out. https://github.com/yooper/php-text-analysis is a light weight, information retrieval and nlp library. It can: 1) Tokenize the user search queries 2) Produce unigrams, bigrams, trigrams, etc.. from the tokenized search queries 3) Analyze the ngrams and give you a frequency distribution of the user search queries
...but you can see spaces?
Spiffy. I was going to try to write something along these lines when I got some time, but I see that you've already got something nice going on and with more toys than I anticipated.
I prefer to use PDO for my projects, but I've become frustrated at its lack of fluent interface. Today I've released [smooth-pdo](https://github.com/royallthefourth/smooth-pdo) which features everything you already know about PDO along with convenient method chaining on the statement objects.
What's the need that this solves?
I love PHP. I would use nodeJS, python, tcl, and/or bash for Extract|Transform|Load (ETL) type jobs. Form data --&gt; database Create,Read,Update,Delete (CRUD) style is wholly in PHP territory.
"CRUD" apps are just the anagram for the four general actions you do for a business data centric web app. The biggest hurdle I have encountered is the powers that be approving you to modify 'your machine' and/or a 'machine that isn't yours'.
I think it's trying to be like Ansible, but instead of ssh, Python, and YAML, it's using a Web Browser, javascript and PHP. I'm guessing OP realized they wanted to orchestrate many similar commands and expose a web interface easily, and distilled that to the "JSON Specification for a module" in the README. Based on the stand-alone web-server, they wanted that up quickly, and easily. However, as someone else said, not the most secure solution, but the OP's requirement was: &gt; The integrated PHP web-server is used both, because it runs as the logged-in user, which solves many permission issues, and because it would be too cumbersome to set up a whole stack just for phRemote.
&gt; This package would be better if it used existing, tested OAuth libraries instead of reinventing the wheel. There are a lot of packages, but mostly for OAuth2 :( For example find a cool package for OpenIDCOnnect will be a problem, and another problem what packages is it using to support JWT and JWK. If any developer think/try to implement own package with tests for "AAAA function", that can be better then exists solutions, what is a problem to write it? Anyway anyone can be own language/framework/orm or something else if he can build it, support and continue develop it 
Thanks, never heard of TCL but I'll look into it
If you're really paranoid about security, sure. Otherwise no.
My point is that any time you start with vanilla PHP, you have to build in all the functionality that an off-the-shelf framework would provide you, and you end up with what is essentially a framework, even if it's internal and proprietary and architected for your specific application. If a new developer comes in, they're not going to instantly understand how everything works (because they know PHP and your code is vanilla PHP); they're going to have to learn how all the plumbing works, just like learning a new framework.
Possible, if I find you profile on GitHub correctly https://github.com/shadowhand/latitude &gt; Latitude is heavily influenced by the design of Aura.SqlQuery. When Doctrine and etc project exists &gt; No need to create more implementations. If it's you, Why you created it?))) :D Looks like "hypocrisy" 
Those are all very good points - I don't disagree with any of that. I chose to write the article from the perspective of PHP because I think the rules are slightly different when it comes to a weakly typed languages, especially when adding assertions into an established app (it's never too late to improve the code!). Ignoring the performance hit, it's too dangerous to run in production initially - but I agree in a perfect world they would always be turned on and only capture bad application state. In that same perfect world there would be enough unit tests to cover all the scenarios so the assertions wouldn't be need in the first place. :)
After adding "\", opcode "INIT_NS_FCALL_BY_NAME" are gone It's not important but I am going to point your attention on this project https://github.com/Roave/FunctionFQNReplacer &gt; This is one of the many optimizations applied by PHP 7 and newer versions
The use case is to have a very compatible remote control solution, baseed on PHP... See below, it's filling the gap similar to the one Ansible fills for Python, but for PHP. One may argue that Ansible has little use case too, but it exists...
I would tend to agree with you. However, OP might be unable to convince their stakeholder to tack on hosting for additional technology. Your solution is preferable, but depending on the application in question, a fallback to a default stack will do nicely.
Even then, OP should consider importing the class.
And there *will* be an auth option... Just saying! EDIT: Added authentication
We'll make it, but maybe we should disable xdebug anyway... Fatal error: Maximum function nesting level of '100' reached, aborting! in /var/shuttle/route/a_star_pathfinder.php on line 762 
- MariaDB should be only on yellow as it is drop-in replacement for MySQL - Missing phalcon framework in both "full stack" and "micro" category - Symfony should be above laravel
Quite like Telegram too ;)
One trick is to actually just send a normal HTML file, but renamed to `.doc`. The extension will mean Windows or whatever will open it in Word rather than the web browser, but Word will recognise that it's actually HTML and be able to edit it. (Albeit that doesn't work with LibreOffice, apparently…) If you want to do it properly, use pandoc or something.
"The treatment Larry got" is an awful lot like [the treatment Larry gave.](https://groups.google.com/forum/#!msg/php-fig/w38tCU4mdgU/ww0kKM0vAAAJ) He was perfectly fine with trying to kick me out of FIG for his own reasons. I hope, now that he has been subjected to that at the hands of someone else, he has learned the error of his ways.
_Awesome_! Glad to see this framework finally being recognised more.
[removed]
A lot to unpack here, but in all honestly the treatment Larry just got versus what you got on the FIG are two totally separate incidents, and are in no way related to each other. You had, in minds of a lot of the FIG members, become a magnet for drama rather then helping craft standards and recommendations for our community. Larry had private details of his life revealed by someone who did it against the communities rules, and was expelled from the Drupal community for it. Yea, sounds a lot alike. 
I guess it depends on how far you want to go with it. It's very hard to make an object 100% immutable in PHP, if not impossible (because you can use Reflection classes), so while you could throw errors when someone attempts to modify the original object, it will probably never be 100% safe. In our team we just focus on using "with" methods instead of setters. These methods take one or more arguments just like setters, but create a clone of the current object first and put the new value(s) on that clone and return it. Kind of like the "with" methods in the PSR-7 classes like Request &amp; Response (eg. withUri). This way we already prevent a lot of unintended side effects because we all try to adhere to this strategy and trust each other not to work around it and modify the original objects. Edit: To clarify, we also make our properties private to make sure they're not accessible from the outside, but don't go to great lengths to prevent eg. double constructor calls or reflection access.
Official blog post: https://blog.jetbrains.com/phpstorm/2017/03/phpstorm-2017-1-is-now-released/
Thanks. Probably should have posted that instead.
We're really sorry about that. Please vote for https://youtrack.jetbrains.com/issue/JRE-205
Me too. File -&gt; Settings -&gt; Editor -&gt; Colors &amp; Fonts -&gt; Cog icon -&gt; Restore defaults...
So, you're saying exactly what I was saying: Larry had his reasons for wanting me out, and Dries (et al). had his reasons for wanting Larry out. "What gets sent around, comes back around" -- and it came back around to Larry. I do, truly, hope Larry sees now that what he has done to others was just as bad as what was done to him.
Zend has fancy names for their components afaik. However, they say 0 about what it is. Like Zend/diactoros (or whatever)... It's annoying af.
&gt; Latitude is different for a number of reasons But socialconnect/auth cannot be different for a number of reasons?) You are going to be "hypocrisy" again. &gt; oauth2 state is not cryptographically secure. sure, mt_rand is a linear alg, but it generates better random numbers than rand, and much faster. But that doesn't make it "secure". Whether it's secure enough for your application is pretty subjective. btw, it can be changed by 1 line commit, and I am researching this moment Thank you that you are point my attention on it 
Don't import root classes.
[removed]
Oh, yeah, I think so. Session IDs are generated similarly. (Though I seem to remember there being bad defaults.)
On the one hand I agree with Larry that ones sexual activities and lifestyle shouldn't be cause for shame and harassment, and those interested in BDSM are often shunned for what is often a healthy relationship. On the other hand, even as much as I enjoy some kink, and am open minded about people who pursue a 24/7 lifestyle, **Goreans** are a whole other thing. There are different levels of how far people take these things, but... Regardless, I don't think what happens between two consenting adults should have someone forced out of an Open Source project. If his Gorean philosophy is kept in private, I see no issue. I would recommend the people reading this to also read up on Gorean subculture, to get an understanding of exactly what's being discussed I do take umbridge with his "Swap Gor for gay or muslim and see how it goes" thing. They aren't comparable. Not really. Not close
I was hoping for some performance improvements :-(
That's part of the problem, it was no longer becoming 'private'. I don't know the answer, but I know it's more complicated than you are making it out to be.
I'm not a big fan of the fact they are piggy backing off the PHP-FIG name even though the main contributor hasn't contributed to the real PHP-FIG repo at all. Is this actually serious? If so, I personally disagree with a lot of these "rectifications". If it is not serious, kudos, good troll (at least you got me good).
AIUI the concern is that his private interests might not entirely be so, and might impact his behaviour outside that realm. But I've no idea as to the truth of that. Obviously anything that's exclusively kept to the private sphere, within certain limits, should be none of our concern, though.
You are obviously picking a side on this issue and should not be banning people based on your side. If you are banning based on sharing personal information, that is one thing, but your comment staying 'otherwise engaging in this attack against him' shows bias and is not acceptable.
Could you perhaps clarify that? Now your reply is rather confusing.
Do you have a reproducible scenario for performance problem? If so and you can invest a bit of time into helping us to figure out the reason for slowness I would like to ask you to create an issue at: https://youtrack.jetbrains.com/issues/WI#newissue
Should probably make this a sticky post
As this is a discussion wherein what you say and how people behave have a direct impact on a person, please be aware that moderation is going to be much more strict than normal. I will not allow this thread to have any private information about Larry posted (e.g. links to his private postings about his sexuality). Any attacks on Larry's character are also prohibited. Discussion on sexuality, the impact of witch-hunting, and anything that Larry includes in the linked blogpost is wholly acceptable and encouraged. I'm not here to tell you what you *may* talk about, but we have, and have always had, strict rules against personal attacks. Likewise, personal attacks on Dries or anyone in the Drupal organization are not permitted. Being wrong doesn't make them deserving of an attack in turn. Despite being wholeheartedly on Larry's side in this personally, I wish no harm upon Dries or anyone else who's simply responding to the outrage in earnest. ### On Distracting Drama /u/MorrisonLevi brought up a valid point, that this sort of goings-on creates a distraction for those working *and* reading reddit. Despite my strong feeling that these sorts of discussions need community attention to ensure that community members are treated fairly, with respect and dignity, I'm going to try to offer an option for those who wish to opt-out. If you wish to opt-out of seeing these sorts of dramatic discussions, visit the [preferences page](https://www.reddit.com/prefs/#over_18) on reddit and uncheck "I am over eighteen years old and willing to view adult content". I will mark this post, and will ask my fellow moderators to make a policy of marking other posts NSFW when they are directly inflammatory. We'll give this a trial run to see if it's well-received and doesn't negatively impact discussion here in /r/PHP. I welcome feedback via modmail if you think this can be improved, or if you think there are glaring issues with the approach. There's also a sticky [here](https://www.reddit.com/r/PHP/comments/61711l/on_distracting_drama/) if you'd like to avoid this conversation in particular.
Yeah, that kinda left a bad taste in my mouth. I've heard of the whole Gorean thing. It's kinda like if Trekkies got into BDSM in a big way. Pretty stupid, but no more so than anything else kinky that people are into. I mean, whatever floats your boat... Reading Larry's post, it looks clear he's all about doing his thing and letting everyone else do their thing, so I don't get what the big deal is about. Him getting tossed over this looks like Dries and whoever are being reactionary, unless they've got specific reports of his behavior and they aren't saying for some reason.
So if I bought a year's subscription when 2016.3 came out, and I have a "perpetual fallback license" for that, how do I get the same deal on 2017.1? Do I renew my subscription?
You can install and use PhpStorm 2017.1 until the end of the year without any additional actions. As soon as you pay for the next year you get a new perpetual fallback license (probably it will be something like 2017.3 at that point).
It was more about the performance in general. PHPStorm feels a bit slower and not as smooth as Sublime Text - it would be nice to see a smooth scrolling performance like in Sublime in the future. Nevertheless I'm satisfied with PHPStorm's performance! :) 
It's absolutely nothing like 'outing gays'. In fact if you want to parallel homophobia in religion it's fundamentally opposite. As Dries states, "The Gorean philosophy promoted by Larry is based on the principle that women are evolutionarily predisposed to serve men and that the natural order is for men to dominate and lead." Is that not comparable to how many belief systems/religions deplore homosexuals? What message does it send to women in the community that such a prominent person shares in these beliefs? Again, I'm not taking a stance at this time. I believe it making a clear separation between work and play. I respect peoples beliefs so long as they don't affect their contributions, and I am completely opposed to doxxing or going on a witch hunt. That said, this is not as one sided as you are making it out to be. Edit: You'd think a programming community could apply some logic and rationale to their thought process but thus far I've seen as much emotion skew perspective here as anywhere else. People can down vote me to shit but you and your pitchforks are not without blame. Probably the same mob who ran over fabpot before hearing both sides.
Like I said, he was fine with kicking me out of FIG for *his* reasons. That he is now being kicked out of Drupal for *someone else's* reasons is unfortunate, and undeserved ... but he's clearly OK with people being kicked out of things, else he wouldn't have tried doing it himself. Perhaps now he has changed his mind, seeing from personal experience how awful a thing it is to do to someone.
Larry's private beliefs aren't at all at issue. He has kept them private. If someone is made so uncomfortable by a member of the community having unusual beliefs, they should probably never venture onto the internet again. The world is full of people with beliefs unlike their own. I maintain that it is exactly like outing gays. Someone has a private sexual predisposition that some people are uncomfortable with because of a fundamental ignorance. Their ignorance of these unfamiliar sexual behaviours doesn't make them a bad person, but if their reaction is to become whipped into a furor and crucify the person for their nature, that's where they become a hateful bigot. People like those attacking Larry are the reason why I'm so private about my own sexuality and gender. It used to be that someone like me had to be afraid of conservatives. These days I'm afraid of progressives, who make me feel that talking about something fundamental to myself would be my end. Simply saying that there's something that I keep private is probably enough to send a bunch of such people searching so that they can out me.
Surely Larry Garfield bothers for some reason (not related with technical issues) in the Drupal project and his "enemies" has searched in personal life a reason for expell him of the community. This is the real value of a stupid CoC: expel annoying people for personal reasons and lost valuable technical people, replacing for more politically correct people without technical merits. 
&gt; This is the real value of a stupid CoC: expel annoying people for personal reasons and lost valuable technical people, replacing for more politically correct people without technical merits. Hear hear. Note, however, that Larry himself was happy to [try to kick me out of the FIG](https://groups.google.com/forum/#!msg/php-fig/w38tCU4mdgU/ww0kKM0vAAAJ) for his own reasons. So he's clearly OK with people being kicked out of stuff -- it's just that this time it was someone else doing the kicking, and he was the kickee. What happened to him here is undeserved, but then, what happened to me was undeserved. I hope Larry understands now that the awfulness being perpetrated against him is just as bad as the awfulness he perpetrated against others.
It is a far, far cry from homosexuality, comparisons to LGBT or Muslims are way off base. An apter comparison would be to something like polygamy, cultural but very niche and narrowly defined. And, if followed through, in violation of the law (as has happened with some Goreans). I'm conflicted on this, because I like Crell, he does good work, and he's pretty open-minded and dare I say progressive (just check his Twitter feed). On the other hand, this sounds like a toxic philosophy and you have to ask, can I trust him to not let it influence his community participation? It doesn't help that we're only hearing Crell's side of the story, with Dries referencing extenuating circumstances but demurring due to privacy. Maybe Crell crossed a line at some point, but we're unable to tell for ourselves (although, that's not necessarily for us to decide either). The privacy question is Dries' call to make, but now it's just one's word versus the other's. Then, Dries gets the final say, right or wrong.
I don't use Drupal, but that is a heartfelt and earnest post, and I can't see any way in which Larry does not deserve the highest level of respect and support. I too am sorry that this stuff is still a problem - haven't we learnt anything from the witch-hunts of the 1980s?
Wasn't Garry also one of the SJWs who bullied Paul M and chx? Sucks if your own people and friends use your own weapons against you, doesn't it? Everyone who uses words like inclusion or diversity means the exact opposite. Only a very small number of viewpoints are tolerated, "wrong think" is considered to be a felony. Larry should have known this. What's next? Banning all who voted for Trump? Or those horrible heterosexuals in order to be more inclusive for those people who think their gender is a Pokemon? Removing classes and objects from Drupal because some crazies think those terms are racist and sexist? 
Although I don't care either way it does sound like karma.
holy shit, they still haven't fixed the deployment settings bug where you can't save credentials? 
You are the one saying kicking you out from FIG is bad.
&gt; Your tone comes across as you being gleeful that Larry's suffering this harm, because he once ignorantly took part in the same sort of witch-hunting against you. I have zero glee in this. It is my true desire that he realizes now the horribleness of his past actions, and modifies his future behavior in response. Whether he does or not, is up to him.
Ah come off it, Paul, you were kicked out because loads of people thought you were being a dick. Just own it and move on. It's not the same as someone being kicked because his private life was dragged out into the open and demonized.
It's understandable to desire vindication, but now's not the time to seek it. Talk about witch-hunting and the effect it had on you. Talk about how many people have faced the same thing, and how it has affected them. Trying to get an apology from Larry right now is simply petty, even if it may be warranted.
Who's seeking vindication? I'm not trying to get anything from him; he can do what he wants. I wish he did not have to go through this. But what *he did to others* is now what is *being done to him*, and that should be in the forefront of everyone's mind.
I stand corrected on that point. But seriously, I've read the posts from people who wanted you gone. They all have the same theme: great developer, but acts like a dick, here is why we think that, hence voting out. It wasn't just "he's a dick to other people who are into that kind of thing in his personal life, and he might turn into a dick in the future despite the fact that he's been in the community for years with no problems, so we're going to chuck him now just in case". It's not comparable.
Think about it some. I know you're a good person, and you're just advocating for change. Consider how your approach will be viewed, and whether it'll just further the harm done to Larry in what is certainly one of the worst moments in his life. Support him now, and engage him later.
Thanks; I was already using the canary method, but I've bookmarked that link for later use when I actually place the script onto a live server.
Okay, I'll bite. What idea of Larry's disturbed people? What was the original reason for someone to go hunting through his personal life?
/me shrugs Don't know what else to say here. They had "their reasons"; some people thought those reasons were fine, and others did not. Same in this case. That kicking-out itself is "on the table" is a problem. Larry is someone who helped put it on the table, and wanted to serve it to others. We need to remember that.
It's okay if you don't want to forgive Larry. Everyone gives forgiveness on different grounds. I'm simply telling you that you're turning support away from those who are the targets of these witch-hunts by being petty and spiteful to Larry in his time of need.
I have said nothing to Larry, positive or negative. I am reminding others of how he has supported, indeed demanded, exactly the kind of action that is now being levied against him. (I do hope that he now sees that his support of that kind of action was wrong.)
His livelihood, passion, and personal relationships are being targeted. The people doing this to him want him isolated and ashamed of who he is. I would rather someone take a swing at me for my sexuality than have my entire world turn against me. I seriously considered killing myself when this sort of witch-hunting was directed at me. We are social creatures. We become shells of ourselves when we are publicly shamed. I am still trying to get over the trauma of my own experience with this.
I'm liking it so far. Upgraded in work
Eh... sorry man, but like 90% of the comments on that link are a flaming dumpster fire of misogyny. Gonna take that with a grain of salt.
You can't really compare people trying to kick you out for how you treat other people publicly, in that group even, to Larry getting kicked out for what he does behind closed doors. That's just ridiculous
You really don't understand, and I doubt you ever will
&gt; this sounds like a toxic philosophy Why should you care about that? &gt; can I trust him to not let it influence his community participation? WTF. So, you are saying he should be expelled for something he MIGHT do in the future, despite him never having done so? &gt; Maybe Crell crossed a line at some point Crossed a line where? Which line? With whom? &gt; but we're unable to tell for ourselves Ah, so, guilty until proven otherwise. Let's expell him because he MAY or MAY NOT have done something wrong... 
&gt; Sucks if your own people and friends use your own weapons against you, doesn't it? It does, and I hope Larry (and everyone else!) has learned those weapons are to be discarded. If Larry can get kicked out, you can too.
Dries has made virtue signaling more important than a good product, it is part of why I bailed from Drupal long ago.
that is not the issue you intended to link ...
Were you really hanging on to my words so raptly that you had to divide a sentence into two incoherent parts? Of course they don't make sense separately. That's why they're *one sentence*. And you even left a part out! Here's the full sentence, for your benefit: &gt;Maybe Crell crossed a line at some point, but we're unable to tell for ourselves (although, that's not necessarily for us to decide either).
crap, thanks
League OAuth2 clients have existed for years, are well tested, and most are built by a team. Not using them is silly, frankly.
Parameter hints, this will make my life so much better.
I missed the drama but is he being judged by a development community over his kink or by the same kink community? Because the former wouldn't surprise me that much coming from the usual crowd our hobby/career attracts. How about the Waifu people who worship Anime characters like they were their girlfriend? Are we judging people on something completely unrelated to the code we make? Who am I kidding. Of course we are...and it's really stupid.
Didn't think I was going to get on r/php today and learn about BDSM shaming and have to figure out what "the Gorean (Gor) community" refers to. Okay then...
They'll be keeping close tabs on you. ... I'm sorry.
In this case the responsible people (Community Working Group) determined Larry had not broken the Code of Conduct, Dries _appears_ to have taken it upon himself to throw Larry out of the community. Dries doesn't even mention the CoC in his [blog post defending the decision](http://buytaert.net/tag/living-our-values), it even reads like some wishy-washy rhetoric about values that a conservative religious person might use to defend refusing service to a gay couple. _edit_: fixed formatting.
I've using Source Code Pro font, and even after font reset, it anti-aliasing doesn't seem to work. Had to switch to Consolas/Monospace fonts (Windows 10).
It's you're lucky break lol
My favorites so far: - PHPUnit 6 support (you had to change the super class name manually, and autocomplete wasn't working well). - Inline hints for string arguments. - Global namespace `\` prefixing. About time there was a discussion on r/php recently about the same thing. - Code highlights. - Live find-in-path. Works perfectly well even on my 5400 RPM HDD laptop. Other than phpstorm itself PHP EA inspections plugin got some awesome features/fixes as well. 
"If the assertion is given as a string it will be evaluated as PHP code by assert()." - holy crap! I didn't even pick that up. That's extremely important to know, thanks.
I was going to tell you to get out but did this instead: [I don't know why](http://i.imgur.com/CaFHfZV.png)
&gt; Oh, I understand more than you know. Yet, your arguments doesn't touch the essence of the problem. Who would even care if some community came to agreement and kicked one of his own? I don't care if you or anyone else would like him being kicked out. I don't know the guy, maybe I wouldn't like to work with him either, but the end doesn't justify the means. This context makes the points you brought up childlish.
Having that level of position inside a community as large as Drupal is going to fetch you consulting gigs of several thousand dollars per day. Someone wasn't able to get that position on merit of coding and wants that kind of money for themselves.
The context is that Larry is just fine with kicking people out of communities he belongs to, even people who helped found that community -- he's championed such a kicking-out himself at least once. Unfortunately, other people are fine with that kind of thing too, and they have now kicked Larry out of *their* community. Perhaps now he sees that kind of behavior is awful.
*your
Well played.
Even if he himself believed that men are infinitely superior to women (which he ofc doesn't), this still should not be a reason to get booted out of an opensource project for while you keep it private. It is not like he is actively propagandingmale supremacy by his actions or anything. 
Thank you!
Why was the default decided to be made the one the most people currently will need to work-around/hack to get their *font* looking right? For an IDE this is so extremely critical. This change should have been made with a much easier way to fix then using a config option edit in a settings file or downloading last years version and pulling the JDK from that. I'm not sure what there is about this, but it makes me feel very weary of Jetbrains development going forward. It's like I can't trust the process going on when this problem has been known for months in pre-release and it still wasn't adequately addressed other than "edit a config file" and hope that works. Or increase your font size since smaller fonts are going to hurt you to look at now.
...Wow.
If a community becomes defined by whom they cast away for their differences, rather than whom they welcome for their similarities, a community is no more.
PHP storm is really bad with Angular ionic or most browserfy projects where stuff is built and reloaded every time you save, even thought the folders are ignored it feels like it's trying to constantly index files, I have a ionic mobile app that is impossible to work with in storm, 100% reproducible, even the demo projects lag the tool. Only reason I didn't report a bug is because it's not PHP 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I love it when people implement COCs now. So much shit flinging and drama. Keeps those mailing lists exciting.
I like the bottom end start and top end limit. It gives me flexibility across major version numbers that wildcards don't.
You're right, the comparison isn't great. In his situation, being outed as gay would have much more benign coming consequences. 
&gt; or why not simply fix this without voting please? :) You *are* aware that JetBrains has literally hundreds of employees across 6 different offices across the world, right? When you're dealing with a company at this scale, software of this complexity, and the [literal hundreds of thousands of other open issues with all of their other software](https://youtrack.jetbrains.com/issues), how in the blue balls do you expect them to "just simply fix" any given issue? Don't be dense. Log into your Jetbrains account, take 5 seconds to look at the right-hand side of the screen where there's a thumbs-up icon, and vote on the issue. They have these tools in place for a reason.
This could also just be a text instead of a video.
The concern has nothing to do with his sexuality or sexual behavior and everything to do with Gor's perspective of women. That alone isn't an issue but there appears to be more to it than that. Edit: You can keep rallying around this being an anti-gay thing but you are flat out wrong. Their are many contributors that have all sorts of different beliefs and sexual preferences and no one cares. This is an issue about the belief of inequality between men and women. That does not however excuse the privacy invasion, but people attacking this as some conservative anti-gay thing are flat out wrong.
Citation needed. Dries' blog post does not mention the CoC in any ways; he explicitly talks about Larry having violated some ill-defined amorphous "values", not any concrete code or set of rules.
And if you're not running Gnome, but something that makes use of Gnome libraries and services sometimes (XFCE), make sure that gnome-keyring is set to start on session start and that it also starts Gnome services on session start.
They used the CoC to try to get rid of him, when that failed they used the cover provided by these PC policies to get what they wanted in secret.
I don't know why people are down voting you like crazy. Nothing you said was irrational. It's an ugly and complicated situation but the r/php mob has made up their minds without all the facts. It's the ugly side of Reddit that lacks the maturity to discuss complex situations without becoming tunnel visioned by emotion. 
It could and there's a lot of text material on the topic. That said, some people learn better with audio and video and there's something nice about seeing and hearing (since it's a phone call) the process before getting started.
I think Gogland had something similar and I turned it off pretty quick aswell. These hints just make lines extremely long. Command + P is the way to go for me aswell 
For some bizzare reason now it wont open my blade.php files
I also see a great application for streaming large files, like SQL dumps, and then simply logging the file contents while streaming. 
I had these problems once, and when my files compiled out to .min.js or similar it would try to index those files. What I got working for me is right clicking those files and selecting "Mark as plain text" and the IDE ignored them properly from then onwards.
You use "deviant" as a negative word, but it's not - it's just opposite of standard for majority. BDSM now is deviant. If there are, for example, 90% people who like BDSM, vanilla sex would be deviant. So, they ARE deviant as well as ginger-hair people, or people 2 meters high. 
[removed]
I got used to it using the Java IDE(A). I actually wanted this particular feature in PhpStorm and now they added it! Yay!
What are the use cases for this? Is it for server to server communication, or browser-server traffic?
It's sort of the next step with DNSSEC. DNSSEC can authenticate the DNS queries, and DANE can vouch for the authenticity of TLS certificates provided by the services under that DNS server. It isn't supported in any of the browsers, and I couldn't find a tool to easily create these TLSA records. This library can help if you have DNSSEC setup already, and want to quickly generate the TLSA records for HTTPS, email servers, etc. Pretty useless for a web framework though.
First few minutes with this feature was: "Wow, that's nice!" 10 minutes later: "...erm...how do I switch it off..."
I'll give it a shot, thank you!
Interesting that Python overtook PHP, and Laravel is nowhere on the list given its rather frantic fanbase, but not surprising to see Wordpress third on the most dreaded platform list. PHP also seems lowest paid by region, which is something I wouldn't expect. Edit: downright *shocking* to see Tabs won in the Tabs vs Spaces poll.
Seems off to me. Average pay should be higher, no? Is it low because SO is filled primarily with beginners? Could that skew the results of everything else?
Më ńíêthéŕ.
&gt; Being wrong Sorry, but as an 'impartial' moderator, I'm pretty sure these aren't the words you should be using. Opinion is opinion.
Makes sense. The "Years coding professionally" does indeed hint towards a beginner-heavy audience. Also a huge part of the survey's participants were from India, and PHP is very strong there. That third world economy might be bringing the average down, too.
See /u/sypherlev's answer - I'm exposed to so much code on a daily basis from so many different people, I'd quickly go insane if I had to switch my IDE's display preferences to keep it consistent and readable. With everyone using spaces, that problem just isn't there.
There is also a "best of both worlds" option - you can easily set a normal IDE like PhpStorm to expand tabs into spaces, so mashing the space key never happens if that's their primary concern. Press tab, and it'll automatically turn into 4 spaces, presto.
Laravel wasn't even an option in the survey - the options present was those selected by SO, not sorted by popularity.
Yes, it did occur to me that Larry has an excellent claim to have been discriminated against due to his private sexual behavior. In many ways, the exact thing a CoC is intended to prevent. 
[removed]
Please vote for https://youtrack.jetbrains.com/issue/WI-28093. Also, have you tried this plugin: https://plugins.jetbrains.com/plugin/7219-symfony-plugin it provides quite a lot of magic into Twig templates.
Please contact our support team (Help-&gt;New Support Request) probably it happens due to broken 3rd party plugin or broken installation.
Unfortunately, not yet. Please vote for https://youtrack.jetbrains.com/issue/IDEA-168570
I assume there's some brigading Edit: Well, yes, I suppose it's possible that there are just that many people who are wrong. :P Really though, initially my votes were positive and going up. Then there was a mysterious influx that put me double digits negative. Brigades on Reddit aren't exactly a mythical creature. As it were, I doubt the mod, who has clearly taken a side, would do too much to counter a brigade that works in their favor. 
Why? Tabs are for indenting
&gt;these sorts of discussions need community attention They don't.
I installed in fresh dir and it worked. Apparently, overwriting old install with new does not work
Out of curiosity what happens to Drupal's representative to PHP-FIG. Since that is/was Larry?
Yeah, installation into the same dir always leads to multiple magical issues. We will update our installation instructions to mention this explicitly. 
Was it you who made another promotion like this with twilio and sms, like a week ago?
[removed]
&gt; On the other hand, this sounds like a toxic philosophy and you have to ask, can I trust him to not let it influence his community participation? I'd like to remember I've read fiction somewhere that a guy with his own believes was tortured, crucified and murdered by people who didn't think the same. Not too long ago there was a group of people, an entire nation spreading fear all over Europe, that put races and those of wrong belief in concentration camps, killing the rest (if they where lucky). You would fit right in during these ages :)
He's in a prominent position. Would your stance be the same if we found out someone was a Neo Nazi? Obviously Gor isn't that extreme but the idea that one is born superior to another certainly is questionable if they are in a leadership role. It's funny you think this is a White Knight thing. Holy shit people jump to so many conclusions. Take your damn emotion out of this for a second. I don't even have a position on all of this. This is an awful situation and I feel terrible for Larry. I just find it disturbing people are creating a mob around this being some sort of anti-gay thing. 
Well, I talked to Larry on a couple of occasions at various conferences. He's a great guy. This article re-assures me that selective witch hunting and hypocrisy fuels human behavior like nothing else. Sad and pathetic that whoever executed his career gets away with it scot-free
That's some twist on Godwin's law, what with the thrown-in Jesus complex
What makes you say that?
Best reply I ever read.
No, that is not true. There should not be any additional charges. If that is not the case for you please contact our support team. In case you have 12 months of uninterrupted subscription payments you will receive a perpetual fallback license (https://sales.jetbrains.com/hc/en-gb/articles/207240845-What-is-perpetual-fallback-license-) otherwise you indeed "rent" it.
Same here, it made me so confused.
Anyone else experiencing extreme performance loss on Ubuntu 16.04 LTS? Even my mouse is lagging while I have PHPStorm 2017.1 open.
You seem to get it. 
So I didn't hear of the Gorean Subculture before today, which lead me to research a bit after reading it in the unfolding drama. And from what i understand this is consenting adults doing something they enjoy. There is nothing bad about that, and frankly, they are not doing something they should be ashamed of or hiding. The suggestion people who enjoy this should keep it private seems highly offensive to me. There is nothing wrong with what those people do, so why do you think they should hide?
Thanks for the reply. I'm not sure that I can see a use case for me for it currently, but thanks for opening my eyes to a new bit of tech.
Yea, I'm not sure how I feel about it yet. I tweaked the highlighting to be less intrusive but I'm still trying to find a time when it's useful for me. 
&gt; There is nothing wrong with what those people do, so why do you think they should hide? Maybe my use of keeping it in private caused some confusion. I didn't mean the dynamic between two consenting adults, I don't believe they should hide. But the philosophy, the idea, that the natural order of things is that women are inherently inferior to men and should be a slave-like underclass, due only to their gender? That I believe should be kept private. To me it doesn't matter where that belief stems from, whether it's religious, cultural or what, it's the belief that rubs me the wrong way. I'm not against those beliefs being held in private, that's what I meant by "Gorean **philosophy** is kept in private, I see no issue" (Highlighted the key word for emphasis). I'm not against his relationship dynamic being public, or him speaking at weddings of friends with similar dynamics or hosting book clubs or really anything. Hell, all evidence points to him not even holding the beliefs I mentioned. I have no beef with the guy, and do believe that him getting kicked out of Drupal is a horrible thing. I suppose it was a clumsy attempt at trying to say that while I agree this whole thing is bullshit, that doesn't mean that the core values behind Gor are okay. And people can be part of the subculture without holding those values, it sounds like he is. I guess, all of this is my attempt to have people learn more about it, because the way he wrote it, Gorean subculture seems no different to BDSM, and he even compares it to being gay or Muslim, and that seemed wrong to me.
I'm a fan of the NSFW solution. I thought this post was removed becasue I had RES' NSFW filter on, turning [it off](http://i.imgur.com/C1ZT1X0.png) fixed that. I share the opinion that these discussions are important, but can also be distracting. Reddit is community oriented and this is /r/PHP after all.
[removed]
I agree. Again, I have the utmost respect for Larry and Dries. What Larry does in his private life is his own business. My frustration in this topic is people who are ready to form a mob around 2 blog posts and not much backstory. 
It's not irrational to be disgusted by thought policing. Both of you are saying that Larry might deserve what he gets for what you imagine he *might* believe and how it *might* affect his behaviour, despite literally zero evidence to back that up. He has done nothing more than have an unusual set of privately-held beliefs, and the outpouring of support for him exists because he is an outwardly great person who has done exactly the opposite of what one would expect if he were conspiring against women. You might want to look in a mirror before accusing others of being irrational.
Yea, it's been hit or miss in my experience, but the hinting usually kicks it into gear.
I assume by “root classes” they mean classes in the `\` namespace. There's not much point to writing `use Exception;` out to avoid having to put the backlash in `throw \Exception`.
That's not what I'm saying at all. This is the third time you've put words in my mouth. Larry can do whatever he wants in his private life. Doing a witch hunt into Larry's personal life to try and out him is not acceptable on any grounds. HOWEVER, the line should be drawn at inequality and if that has leaked into any community interactions. If you found out someone prominent at your company was racist, how should minorities feel? Or homophobic? Or Alt right? I wouldn't call Gor that extreme, but it certainly has some fundamental similarities in regards to equality. Let's put it this way, you made up your mind the second you read Larry's blog post. Never did it dawn on you that there is far more going on behind the scenes and plenty of information that you are ignorant too. Rather then making any effort to ask questions you've started to form your mob. 
Some general tips from my experience, but not at all complete and not all of it may be applicable for your specific application: * If it's a standalone API and you want to go the custom route, you might want to look into micro-frameworks (Silex, Slim, Symfony with MicroKernel, Lumen, ...) for potential performance gains over full-blown frameworks. * If you want a more "out-of-the-box" experience you could take a look at https://api-platform.com/ (Never used it myself though because the API I'm working on is heavily based on CQRS and event sourcing so we went with the custom route using Silex). * If you have some functionalities that require a lot of heavy work (eg. sending e-mails, communication with other api's / systems, indexing documents for search) try to do those async by using message queues (eg. RabbitMQ, Resque, Beanstalkd, ...) and separate worker processes independent from your API application, so your user gets a response from your API quickly and you do the heavy lifting behind the screens (also great for preventing HTTP timeouts). * Try to document your expected JSON bodies (for incoming requests) and JSON responses using http://json-schema.org/. This way you can use those in tools like Swagger, and for validation using libraries such as https://github.com/thephpleague/json-guard * Take a look at some API gateways like https://getkong.org/ to add generic functionality like authentication and rate limiting to your API. * When using ElasticSearch to add search functionality to your API, look at potential security issues http://code972.com/blog/2017/01/107-dont-be-ransacked-securing-your-elasticsearch-cluster-properly. (In the context of API's: make sure you provide an abstraction layer on your API so your ElasticSearch document structures and query DSL are not exposed to your API clients) * Try to either split your models in write-models and read-models (the latter optimized for... reading), or add a good caching layer. * When using JWT's in any way, make sure you use the RS256 algorithm to sign your tokens and never accept tokens with any other algorithm. * For deserialization of incoming data, and serialization of outgoing data, take a look at some existing solutions like JMS Serializer and Symfony Serializer. However note that those often use Reflection to make it possible to (de)serialize your objects out of the box, which may not always be performant enough depending on your use cases. * Edit: As /u/WalrusSoup mentioned below, check out [Building APIs You Won't Hate](https://leanpub.com/build-apis-you-wont-hate/) for best practices in API design and how to implement them in PHP I might update this list later with additional tips if I think of some more. Do you have any additional, specific questions?
You need to cool it with the personal attacks and vitriol. I've had to remove a few of your comments in the past couple of days. Keep it civil.
You keep conjuring this alt-right boogeyman and suggesting that anyone who has such beliefs needs to be purged from the community. I don't care what people believe, as long as they treat others with dignity and respect in the community and in their professional life. It is far too easy to pigeonhole someone's beliefs as evil, and cast them out for that. I myself have been called all of the things you suggest would be worthy of being shunned, but none of them are actually true. I simply have my own complex beliefs that don't align with your own, which you'd rather demonize and misrepresent than try to understand. I'd rather have a hundred privately racist community members than a single publicly intolerant progressive.
I dabbled with assertions a few years ago and wrote about them in my own [blog post](https://zaemis.blogspot.com/2012/10/php-assertions.html) (not intended as a shameless plug, but any thoughts I have are discussed there). There's one caveat, though. The example I use was written before we had static type hints. 
take a look at https://apigility.org/
You keep referring to your own personal experiences and then misconstruing mine. You're in your own head. You have no idea what my beliefs are. You don't know what you don't know and I'm encouraging people to ask questions instead of sharpening their pitchforks. 
I think /u/Garethp just clumsily failed to make the distinction between keeping those beliefs out of the PHP community, and keeping them secret in general. I don't care what someone does in their personal life, as long as it's kept from interfering with their professional life, personally.
I'm not misconstruing anything. I'm telling you how what you're saying is received. You're in your own head, seemingly unaware of how what you're saying is being interpreted by others. The predominant position in this thread is that the pitchfork mob going after Larry, which has consistently gone after other community members for who they are instead of what they've done, needs to fuck off. People like Dries who have acted in their official positions to punish Larry for his private beliefs need to reverse their decision and apologize to him for the harm they've caused. Instigators like Klaus Purer need to be taken to task for their actions. This is not "mob rule". This is a community protecting its own from ideologues.
I can understand some concerns with the use of the NSFW feature for this since it has more implications than just having to opt out. Would you consider using flairs to support content filters? e.g. those discussions would have a `Drama`, or similar, flair and the side bar would have a section of links that exclude posts with certain flairs from being shown.
https://api-platform.com/
Agreed, I just omitted it from my list because I remembered it being more about API design in general. But I forgot that it has PHP examples of the various tips &amp; best practices so yeah great advice.
I had the same response. Seems parameter hints makes writing code nice, but hinders readability a bit.
Because the only people that know the whole truth are Larry, Dries and a small group within Drupal. You've ramrodded this as a one sided smear campaign, when logically it makes zero sense. Why would anyone go out of their way to sink Larry? He's one of the most important contributors to Drupal, and also a great contributor to PHP as a whole. What is there to gain? I have no idea if Larry is deserving of this or not. 
This should have blocked release until fixed.
&gt;I have no idea if Larry is deserving of this or not. So treat him as the good person he has shown himself to be thusfar, and wait for those who accuse him to show him to be otherwise. Innocence until guilt is proven.
Which I believe I have. I also think the same of Dries. Hence why my original statement was that this was complicated. And now we go full circle. :)
I know it's not exactly PHP related, but it seems they fixed the SQL editor indenting. It used to be like boxing with the editor to not have it indent forever to the right when working on sub selects in WITH statements. Nearly in tears from the joy of having that bug gone! BTW, I'm using the Source Code Pro font here with the Darcula theme, and it all looks really nice here on Xubuntu. No big performance hits either. It does seem to take a wee bit more time on the startup when indexing. So there's that 10 seconds (no clue how long it really is) that it costs me in the morning starting it up. JetBrains... NICE JOB!
Of course its true. More than that, I also think that it's ok to kick someone out of the team (assuming members have equal rights) and I don't exclude being kicked myself. I don't see complaints for **just** being kicked out in Larry's post either. If he was kicked with only "Sorry, but we don't like you. Good bye." there would be nothing to complain about and trying to make it a thing would be pathetic. But it's not the case and your comment, while formally true, only blures that point.
C# is the third most popular language for web developers? Da fuck? [edit] and Visual Studio is the most popular IDE for web developers?! O_o
Yep, thx :) -&gt; https://github.com/jolicode/JoliTypo/issues/30
Symfony with FOSRestBundle, FOSOAuthServerBundle and FOSUserBundle
&gt; Or for nee users who dont know you have to tick the nsfw box i your settings to see all the stuff on tge subreddit &gt; ... &gt; just foby click the li k if you dobt want to read the content Are..... you ok? I'm worried you might have had a seizure or something.
OP, I don't think these topics create enough many threads in order to worry about categorization. For now, at least. We have at least five times more threads with users asking silly questions, who should be in /r/phphelp. Also, I think the wider community deserves to know what Drupal and other software communities are doing. I didn't read the full post by Larry, but I've learned enough from it and from previous such happenings at Drupal, to form a useful opinion regarding the future of Drupal. 
Are you running LAMP? Try looking in /var/log/apache2
it's not in my /var/log/apache/front_error_log
what is your [error_reporting](http://php.net/manual/en/errorfunc.configuration.php#ini.error-reporting) level set to? you can change it in php.ini.
This is the PHP community, not the BDSM and Other Esoteric Fetishes I Have That I Need To Leverage My Influence Over Social Media To Raise Awareness Of community.
Hm. To be fair, I think the thing that needs discussion is that someone was ousted because of their sexual preferences; his blog post was to dispel rumors over what happened and set the record straight (which I think is understandable when rumors of misogyny and abuse are being thrown around). I maybe didn't need to hear as much about his sexual preferences as I did (although I appreciate the candor), but I think issues pertaining to what is and isn't okay for someone to be forced out of an organization for need to be talked about, even if that discussion is uncomfortable. 
Appreciated, sir.
here are my settings: error_log = on error_reporting = E_ALL &amp; ~E_DEPRECATED &amp; ~E_STRICT I don't know why but some syntax error aren't caught
Tried this in the demo. It only added an `&amp;nbsp;` between 120 and lbs: The man was 5'6" and 120`&amp;nbsp;`lbs.
You'd think people who write software for a living would understand that instinctively. 
No issues on 16.10 with i5 and 12GB RAM
Popular if given the choice to use it yes. But if you're in the Enterprise world, something like VS, Eclipse, or IntelliJ would be popular.
The information could very well affect other people. Victims, innocent bystanders, etc. The CWG has these guidelines to protect just such cases
&gt; I'm left with either hoping that the evidence they say they have and that they say they won't share was strong enough for this firm decision. Remember the very public banning of Douglas Crockford from a JavaScript event on the same grounds - "we have strong evidence, which we won't share". Turned out there was none. Evidence is evidence when it's present for everyone to judge, not when it's implied by a subjective party that's hellbent on making their case. Imagine of courts worked like this... "I have evidence proving this man is a murderer, but I won't share it", "Well I have evidence proving my client is innocent... which I won't share as well".
&gt; Our process is intentionally private For a FOSS project where all communication is done over open channels (GitHub, mailing lists, IRC etc.) to say the decision-making process should be private in order to "protect" *the defendant* is the height of hypocrisy. If they have done something wrong, then they must, by definition, have done it out in the open.
Wrapping it in quotes breaks it though. &gt; "The man was 5'6" and 120 lbs." turns into &gt; “The man was 5'6” and 120 lbs."
Still has that new "open project" dialog where you have to click twice instead of once, like it was before. You know, the one where it asks you if it should be opened in the same or a new window. Whoever thought that was a good idea deserves a stern look or two.
&gt; This is the PHP community, not the BDSM and Other Esoteric Fetishes Absolutely, but the key point is that if Drupal's leadership was aware of this, the threads talking about it wouldn't exist in the first place. The fact /r/php/ is reflecting what's happening in one of the largest and most popular PHP projects is part of its function.
SJWism is destroying open source.
There's several ways to show your contempt for this decision: - Withdraw financial support for the DA - cancel your memberships - Stop dealing with Acquia (there's plenty of alternatives anyway) - Fork
Pthreads is a nice project, but it keeps having rough edges, especially with some extensions, and it can make PHP crash on you. A much more reliable way to utilizing parallelism is to fork your process and assign tasks to the child processes. It's stable and easy. But let's not kid, it won't give you a significant boost in terms of performance. You can theoretically go *up to* 4 times faster on a typical 4 core processor by utilizing 4 processes/threads. For many reasons, your real world results will be lower than this. But if you rewrite your performance-intensive logic in a higher-performing language like Java, C#, Rust, D, C++, C, then you'll be getting up to 50 times faster performance *in a single thread*. Multiply this by the same number of cores, and we get up to 200 times faster performance. If you want *performance*, PHP isn't the thing. It's a great script, awesome for web pages and so on, PHP 7 is much faster etc. But it's no contest with systems' programming languages for raw performance. But if you just want a quick boost, or you're too lazy to write proper async code and want to use processes for that: fork your PHP process. It's easy.
Reminds me of my first day at job, linux+vim guy right outta college and the first thing they told me my lptp was completely useless.... got me on a win machine with VS :(
Loving the new "find in files" instant-results-as-you-type thing. Every kind of search in every program should do this. Already at the point where I'd really miss it if it went away.
I assume it's most people that use an IDE physically hit tab, but it's converted to spaces.
i guess thats all a bit more complicated than that. not every member of the community is a professional, and even for those of us who are, quite often being part of this community intersects more with our personal life than, well, work. And by that I don't mean all the opensource work done, by that i mean the friendships we find within this community. Personaly i come from a pretty liberal country, and even more so i surround myself with pretty liberal people - for most of my friends and myself sexuality is not something to hide, its something we talk about. However with friends and the community intersecting, that means you can't keep one fully away from the other. Also i believe it is completely up to the person him/herself to decide how open they want to be about their sexual preferences, and as long as they don't use openness as an excuse for harassment, there is no reason why someone should be told not to talk about it. Hell, if someone wears a tshirt saying "I like to smear overripe bananas over consenting adults" to a conference, i'd probably applaud them for being so bravely open about it, even though i personally think thats a pretty disgusting fetish. But, well this is not what this is about, is it? What happend is that someone intentionally stalked someone else for information that he can abuse against that person, and then on finding them did so. In my personal opinion the stalking one is the one who should be shunned, not the victim of campaign.
Maybe I missed it, but I didn't see what you're recommending the assert function actually do? Just echo a string then die()? Or is this just a wrapper/shortcut to throw an exception? ("Assertions Should Never Be Caught" implies this isn't what you meant) I have a global exception handler on the whole website. If something goes wrong (exception thrown, or PHP error_exception) the execution does stop... aside from: * the user sees a friendly error page, * or if in development a big fat debugging screen comes up, the Phalcon one in my case https://vimeo.com/68893840 * the exception is logged + a previous log entry if it's one of my shortcut assert*() functions (for the specific contextual purposes you mentioned) * email notifications sent ...which are all things I want to happen when ***anything*** goes wrong. Regardless of whether it's dev/production. Unless it's simply a shortcut function to throw an exception when it receives a "false" argument... What's the point of a separate system? I'm guessing this could be a useful shortcut if you have a bunch of layers of exceptions within your own code... but this kind of implies you might be throwing/catching too many exceptions, i.e. using them for form validation or other non-bug conditions. I do actually have a bunch of functions named assert*() ... but they just throw exceptions, both in development and production. Aside from my global exception handler, the only time I catch exceptions are for things that aren't really code bugs (in my own code at least), i.e. API / network connection / filesystem / composer package issues etc. I'm fairly new to using exceptions, but so far it's seemed logical to me for most part to catch them at the global level so that the generic friendly error/debug screen + logging + notifications etc kick in. Keen for any feedback if anyone thinks I'm missing something though, like I said, fairly new to using exceptions altogether, but this is the conclusion I came to recently. 
didn't know this. thanks. will vote :)
On Linux, I just have to click out of the window.
The fix is planned for the next version. In the meantime, please vote for https://youtrack.jetbrains.com/issue/PY-9627 to get notified on any progress.
The last time I looked at Laravel, it looked like they promoted bad practises by giving you global access to everything. Is this still the case? Like ZF1 Registry
Smear-Campaigns to get rid of people that are in your way are so common these days, whenever someone gets public outrage, I start looking for people who'd benefit. So I share your assessment that the personal-life-issue is probably a smoke-screen to hide what's really going on. Especially since bigots usually aren't very brave. They pile on, but they don't start anything. they need someone else to plant the seed first. 
Sure... He says that Gor is entirely voluntary. some article on the internet says everyone using that term is a rapist who keeps women prisoner... Some article on the internet HAS TO BE true... *sigh* people are so narrow-minded these days... "but he said that word and I heard that word means something one day, so he has to be evil" retards... 
Why the fuck is this on /r/php? Much less posted by a *moderator*? This is supposed to be a technical subreddit. It even says so in the sub's own FAQ (emphasis mine): &gt; Please be professional. **This is a technical subreddit**, so the level of decorum is higher. This kind of social justice drama doesn't belong in a technical forum. It's not PHP-related by any measure that doesn't draw direct analogy to [six degrees of Kevin Bacon](https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon). Highly disappointed.
You could look into something like Amazon Kinesis and use a stream or Firehose.
/u/nikush would love to see a weekly/monthly newsletter with one tip per mail ! Nice Website
I prefer to do it in "vanilla way" but hosting is not the problem as I'm just presenting this project to some people, it doesn't need to be used in production (yet) but just on localhost. 
&gt;the threads talking about it What threads?
Security implications? Pfft.
We certainly don't make it a focus of bad practices. One person's "bad practice" is another's "worthy trade-off". For many applications, people find facades a convenient, memorable syntax for accessing core Laravel functionality such as the cache, queue, etc. We have gone to great efforts to make even these method calls [testable](https://laravel.com/docs/5.4/mocking#mocking-facades). In fact, much of the focus of the last few Laravel releases has been on testing. We also provide a pretty thorough explanation of dependency injection and trade-offs between facades and dependency injection in [one of our documentation pages](https://laravel.com/docs/5.4/contracts). In general, I think if you count our documentation, Laracasts, and top-notch community resources like [test-driven Laravel](https://adamwathan.me/test-driven-laravel/), you will find that Laravel does a lot to promote good development practices. 
Protocol buffers are a cool way to communicate between languages, but the truth is that implementations differ and PHP's isn't fantastic. I can try to gather more info next week when I'm back at work; I know we looked at it as a way to bridge the gap between our massive PHP website code and other systems written in C# for example. I think we wound up with HTTP after all. That said, if all you want out of this is an efficient, lightweight, binary protocol to communicate between systems, have you considered ZeroMQ (or 0mq)? http://zeromq.org/ Be careful that you're solving a real problem, or at the very least, the right problem. JSON is super easy to read and debug, so the moment you go away from that you'd better make sure you have some debugging/instrumentation support in place. Don't underestimate the efficiency of JSON over HTTP. Make sure you're solving the biggest problems for your customers and not just scratching an architectural itch.
&gt; But how do you format the text? The HTML can be placed inside the PHP If you are mixing HTML and PHP, you are doing it wrong
I think the fact that your framework is powering multiple projects in the wild, I see nothing wrong with continuing work and maintaining your own homegrown framework. That doesn't mean you can't use Laravel, Zend, or Yii in your projects. Just use other frameworks where it makes sense. What's worrying to me is the fact that you're taking all of this time outside of work and not getting paid for it. Unless you're contributing this framework to the open source community - which you're not, *and that's fine* - you shouldn't be working on a proprietary piece of software without getting paid. That's a surefire way to burn yourself out, and it seems like you're already starting to notice. You're going to learn a *ton* by developing your own framework, and if you enjoy it, then keep going. But not at the cost of your personal life. If your work wants you to continue as well, then maybe they see the value in your work. Just don't let them see that they're getting *free* work out of you, otherwise they're going to take advantage of you.
Can someone explain the down votes?
I'm also curious about this. I upvoted this one, because it's a practical answer, but I've been having lots of trouble seeing my votes make any impact in this subreddit. Just for shits and giggles, I upvoted yours too. I know voting counts are fuzzed, but seeing my vote go away immediately on refresh is disheartening.
Just tell your work that you don't have spare time at home to work on it anymore. If they want you to work on it at work, then fine.
&gt; You're going to learn a ton by developing your own framework, and if you enjoy it, then keep going. But not at the cost of your personal life. This cannot be emphasized enough. It's OK to not love your job 100% of the time. Most people do not. But keep that confined to the office (or wherever you work). If you *need* to be working outside of work to do what your job entails, that's a problem. If it's something you choose to do because you're passionate about it, that's fine, but be aware that it sets expectations to your employer about what pace you're able to sustain and what's good now may not work in the future. If you discuss this with your employer in a professional with the intent of setting expectations about time commitment, they should be receptive to it.
try echoing out the query you create in line 103 before running it. Add a line that's at 104 like: var_dump($query);exit; That should let you inspect the syntax of your query and see if there is some issue when your form is empty. With debugging generally the name of the game is inspecting your code to see if it is behaving the way you expect it to at every point. Since the error code suggests it's the query that should be an early step as you debug.
omg thanks allot , i was like 3 hours busy with this error , and i dont need to change the price right right just the amount like u did , cuz now it inserts as 0 in the databse and error is removed :D 
Oh thanks allot ill defitinely look into it ! :)
I started the route you started - developing my own framework. Built own DBAL with different DB drivers, router, IOC container, auth etc. I did this because at the time I didn't fully understand Laravel nor the components that made up a modern framework, so the "black magic" was off-putting to me. But once I started actually building those features, understanding how they worked, how much work was involved to make them work *well*, Laravel no longer seemed like "black magic" - it seemed like where I would have ultimately aimed to be, so there was zero point in trying to reinvent the wheel. It took me the half development of my own framework to really appreciate and thoroughly understand Laravel, and that's what made me switch. So unless you think your framework is demonstrably superior to another mature framework, I would switch. Your framework has given you MUCH greater insight into how Laravel (and other frameworks) work, and the general architecture behind them, which will let you use them more effectively and correctly. So you've gotten a lot of value out of building your own framework. Hanging up your framework and picking up something else will let you focus on the core domain, and let you hire people who may already be versed in that particular framework. It's really a no-brainer IMO. 
Wait... why json over http stopped being a good fit when you started using different languages ? 
There is no EAP right now because 2017.1 just got released. **EDIT**: you could give it a try: https://confluence.jetbrains.com/pages/viewpage.action?pageId=88736286&amp;navigatingVersions=true
Adobe (Marcomedia back then) did that with AMF (Action Message Format) in the early 2000's. https://en.wikipedia.org/wiki/Action_Message_Format 
Google for php help redit
Hey Thanks I didn't know it :)
Thanks mate, I'll definitely investigate on ZeroMQ as well. I thought using protobuf instead of JSON just for lower bandwith was a bit overkilling, that's because I wanted to hear from other people's experiences
you might want to rethink your approach. you should be running composer on your development machine, and deploy a build artifact containing the complete application to production hosting. 
OMG... Please don't put this code live on the internet. 1)Please read up on SQL injection first. E.g. if I post txtPizzaPepperoni with value ```';DROP table x; --``` It will delete table x (relevant xkcd "bobby tables" https://xkcd.com/327/ ) So: use prepared statements. 2) Also, please don't mix dutch and english variable names 3) header(...) after having outputted content will give an error. So ```header("refresh:1; url=Reservering.php");``` will given an error. Read the docs: Remember that header() must be called before any actual output is sent, either by normal HTML tags, blank lines in a file, or from PHP. http://php.net/manual/en/function.header.php Also, header("location=/abc.php") will redirect immediately. 
You did not upset me at all. Keep on learning 👍 Nog een fijne dag!
you could use http://php.net/manual/en/mysqli.real-escape-string.php to sanitise user inputs, though if you were using a like statement you should probably also use addcslashes($user_input, '%_')
Checking it out... First thing I did is went straight to tests. +1 for having tests!!! People truly don't get how important it is. I think a package that you may find useful for your tests is Faker...it helps to "generate" data for your tests without distracting the tests with too many literals. Check it out: https://github.com/fzaninotto/Faker I would suggest removing comments. Comments rot, and looking at most of them, they don't add any value. Your code should be self-documenting. This means to have expressive names and syntax that eliminate the need for comments. Well-written code, and tests, that should be all the documentation you need :) I highly suggest reading this book which harps on this topic a lot, it may be one of the most respected books on software: https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882 You used types!!! Awesome!!! I saw some nested if-statements...to me, I usually pull this out into a private function (see self-documenting code comment above). In your Row.php class (and some other places), you have a "new" declaration. "New is glue," I highly suggest looking into a DI framework, it will make your code more testable and easier to maintain. I have some experience with this one: http://php-di.org/ I think your code is pretty good. Short functions, use of types and namespaces, testing, etc. My suggestions (if you implement them) shouldn't be too difficult.
Hey, thanks for this constructive feedback! &gt; First thing I did is went straight to tests. +1 for having tests!!! People truly don't get how important it is. I too really think that tests are critical. My first project that I worked on was relatively large and with no unit tests (it wasn't very testable either)... 90% of the cases I heard "Well, this used to work. Somebody probaby changed something." would be avoided If we had good tests. Though I don't think that I know how to write good tests. Can you recommend some good book on this topic? &gt; I think a package that you may find useful for your tests is Faker... Well I considered using it and it could replace many literals from my tests but I don't know how could I test table rendering with it since it generates random data.. any suggestions? &gt; I would suggest removing comments. Do you mean the inline or the docblock comments? &gt; highly suggest reading this book which harps on this topic a lot, it may be one of the most respected books on software: https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882 I've heard good things about this book but I didn't have time to read it. It's time already, I'll upload it to my kindle tonight! &gt; You used types!!! Awesome!!! WE WANT GENERICS! &gt; I saw some nested if-statements... I usually have a rule to write maximum 1 nested if (else) statement. And after seeing the tremendous amount of nested if else statements some devs write I used to feel like code qulity ninja :D But maybe it's time to reform my rules^after^I^finish^reading^the^book . &gt; In your Row.php class (and some other places), you have a "new" declaration. "New is glue," Well I used the new keyword to instantiate some data structures. But I don't think that "New is glue" rule applies to data structures. Isn't it like creating new array like $rows = []; ? 
 /** * Get value of the cell * * @return string */ public function getValue() : string The whole "Get value of the cell" is really unnecessary, I think that's what the previous commenter is referring to. Additionally, with return type declarations in PHP 7 now, I personally don't think the `@return string` really adds any value either as it's just repeating the return type declaration.
It works perfect for me in browser debugging so don't know your isssue, ftp worked for me fine too i lately check it.
Windows 7/10, worked on phpstorm 2016.2 and as well on 2017.1
Can you edit the run configuration? I'm in linux but the thing is the run configuration that is not saved, neither I can edit it again 
Yes i can, no problem with it.
All those things work fine for me. The only issue I ever had was when (on linux) I didn't have gnome-keyring running. This makes phpstorm forget the passwords as soon as you press save in the run configuration and refuse to connect.
While this derails your question, you may want to consider improving your development practices so you're not using FTP within PHPStorm, but using a local development environment and something like https://github.com/rocketeers/rocketeer to handle deployments via SSH.
Good point. I should abandon these habbits that I developed by writing PHP 5
Is your framework open sourced..maybe you can get contributors..also ask your boss to give every developer some free hours every week to work on the framework..a few hours is not much but can boost the framework quiet a lot.. ..the other thing is that nowadays there is no real benefit in having your own framework, if you don't have a team working on it and at least a few dozen contributors, it is not possible to keep up with the standards, technologies, security issues and it is more a drawback than a benefit..the only question is support for the already existing applications..what will happen to them in a few years if you drop your framework So the advice would be supporting your framework but try to use Laravel or whatever on a new project and you will see how it goes
&gt; Feels like it should be part of the constructor. Good point. I tried to make use of the Builder design pattern, but it probably will be more user friendly if I move the table creation inside the constructor.
Many people have given good suggestions so far. Alongside the above, I'd suggest to also add the `Row` object as an prototype into the constructor, so you'd end up with a constructor similar to this: `__construct(TableInterface $table, RowInterface $rowPrototype)` Any time inside your code where you did `$row = new Row();` you'd simply replace with a copy of the prototype `$row = clone $this-&gt;rowPrototype;` same holds true for the `Cell` object as well. Try to reduce the use of the `new` keyword as much as possible. Other than that, for a first release this looks fairly good ;) Even added tests, good stuff
Why?
Hi, and thanks for the kind words! &gt; __construct(TableInterface $table, RowInterface $rowPrototype) I tried to make the Builder class to be as easy to use for the user as possible. Wouldn't the dependency injection force the user to know more than he/she needs to know? I didn't use interfaces because I wanted the library to have just one responsibility. It won't build html or csv tables, only plain text. So I think it would be unnecessary to add interfaces/abstract classes. The $rowPrototype and $cellPrototype can be a good idea but I don't think they should be injected as dependency. After all isn't the builder object supposed to know what it's building?
You have to be kidding me! Just look at what I coded this weekend : https://github.com/MarcBrillault/helpers/blob/master/readme.md#clitable
God damn it, how can you prevent me from becoming monopoly! :D
This is the best tl;dr I could make, [original](https://techcrunch.com/2017/03/26/sex-and-gor-and-open-source/) reduced by 89%. (I'm a bot) ***** &gt; More specifically, Garfield is into BDSM. Even more specifically, he&amp;#039;s a member of the Gor community, an outr&amp;eacute; subculture of an outr&amp;eacute; subculture, one built around a series of thirty-odd books by John Norman which are, basically, &amp;quot;John Carter of Mars&amp;quot; meets &amp;quot;Fifty Shades of Grey.&amp;quot; Essentially-as I understand it-a community who are interested in, and/or participate in, elaborate sexual subjugation fantasies, in which men are inherently superior to women. &gt; Under what circumstances, and via what kind of due process, is it OK for communities to publicly condemn people for secret reasons? Is it OK to ban/ostracize community members for behavior which occurs entirely outside the community? &gt; Should communities accept people who hold repugnant views, as long as they don&amp;#039;t express them within that community? Or should they be expelled, because it&amp;#039;s assumed that their views influence their community work in a negative way, or because their presence makes other people feel unsafe? ***** [**Extended Summary**](http://np.reddit.com/r/autotldr/comments/61n9ky/sex_and_gor_and_open_source/) | [FAQ](http://np.reddit.com/r/autotldr/comments/31b9fm/faq_autotldr_bot/ "Version 1.65, ~89420 tl;drs so far.") | [Theory](http://np.reddit.com/r/autotldr/comments/31bfht/theory_autotldr_concept/) | [Feedback](http://np.reddit.com/message/compose?to=%23autotldr "PM's and comments are monitored, constructive feedback is welcome.") | *Top* *keywords*: **community**^#1 **Drupal**^#2 **decision**^#3 **people**^#4 **Garfield**^#5
You'll find a lot of people will disagree with this advice. I think it's partially due to how IDEs behave, but it's generally considered good practice to include docblocks even if they provide minimal additional information.
Just replaced strlen with mb_strlen. But I think that some characters still can break the table rendering..
Sorry, I wasn't clear enough : I struggled with sprintf, since it hasn't a mb_ version
Downvote and move on
I believe it concerns itself with the method/function signature and the size of inline data structures, in this case.
At first I read the link as clit-able.
Not gonna change it !
Why would you?
Except... In this case, the relevant panel reviewed the issue and decided Garfield hadn't violated the CoC, right? And that part was handled swiftly and quietly. The issue seems to be that Garfield's critics were unable to use the CoC process to expel him, so they just did it anyhow. If anything it seems this shows the threat of CoCs are overhyped, since it seems to have had zero impact here. Edit: In particular, as I understand it, Garfield was found not to have violated the CoC because there was no allegations that he'd actually done anything wrong. The concern was his private beliefs—ie, a literal thoughtcrime—which the CoC doesn't cover. Hence why Drupal's corporate masters had to pull rank and expel him. So it's simply wrong to say without a CoC you just have a troll who can be ignored; if the project is controlled by a corporate entity, and the corporate entity's CTO decides you're out, then you're out. Dries did not use the CoC to expel Garfield; he completely ignored the CoC. The lesson I'm taking away from this isn't about CoCs empowering trolls like Klaus Purer, it's about corporate control of a project empowering petty bureaucrats like Dries. 
Same here. Typically IDEs add these docblocks based on the parameter hints, and you can add additional information right after the argument. e.g: @return string The rendered value.
Also, no, having a life philosophy that believes women should be subservient to men is not like being gay.
Maybe you can try using [Travis CI](https://travis-ci.org) or some other continuous integration service. Then you can run tests against more versions of PHP and when someone sends you pull request with new feature and tests, it will show you if their the code is working.
Too right I have a lot of work to do, but I understand that completely. It was a simple question with a simple answer. Thanks! What considerations might I take in deciding whether to use php to retrieve data from a json file or to use ajax? Other than (I believe) whether I'd want the client or the server doing the work and whether I want the code visible to the user (per your answer re viewing the source). 
More people are starting to use JavaScript for everything but APIs. It's really up to the developer. One of the biggest reasons to use server-side rendering is to cut down on processing time and file size for the end user. Also, someone can disable JavaScript in their browser, or worse, be using an old web browser that doesn't conform to the standards or have the new features you may be using.
In this new version my selected text will automatically show up in Command + P ("Search Everywhere"). Anyone know how to turn this off?
How did you land a job in PHP development? I know the difference between these methods and I've been searching for three months.
This question is just unbelievable.
I find the attitudes expressed towards OP more unbelievable, however, I probably shouldn't based on the way people typically comment in this sub. Its a catch 22; everybody complaining about terrible code/practices but get the pitchforks out when somebody asks a question that would help them be better. This is not a phphelp sub, but does that imply they should receive no proper guidance in the right direction? 
Check $con I guess.
After finishing my engineering, I was looking for jobs in programming and only knowing PHP. Building APPS was hot back then (2010-12), still is. I remember reading some articles regarding soon it will be possible to create mobile apps ( Android and iOS apps ) using PHP and I was thrilled. 6 years ON, I remembered it today. Is there anything which can help me achieve it? Unless I am making a hybrid app.
Most glaring issue is your second param to mysqli_stmt_bind_param. Will let you figure out why as you will learn more that way; other than what others have mentioned regarding the connection.
I guess its the backticks around the tablename? Backticks in php should execute something on the system and user is not really a command (unless its something specific to your system?)
Double check the column names in the SELECT statement. Maybe the userID column is actually called user_ID in the database, for example.
Honestly I think that dream is past. You're better off learning React Native at this point in time.
We addressed a similar set up last year for mobile analytics that was built in house. Initially, we tried writing the data into local mysql servers on each API web server. This set up requires that you have a back ground batch process that publishes all these data onto your final data store. We're now changing the local databases to mongodb (since reliability isn't an issue). This is the path of least resistance for us, and didn't introduce more complexity. We do not recommend this approach, however. Depending on your scale, you'll want to look at legitimate solutions that will hold out for the long term (kafka, amq/0mq).
apart from the ssss i cannot see anything more....i need a lifeline...help me out pls? my con is fine - it really is
yes you are right... but the error I am getting now is as follows: &lt;br /&gt; &lt;b&gt;Warning&lt;/b&gt;: mysqli_stmt_bind_param() expects parameter 1 to be mysqli_stmt, boolean given in &lt;b&gt;/storage/h10/117/1148117/public_html/Login2.php&lt;/b&gt; on line &lt;b&gt;8&lt;/b&gt;&lt;br /&gt; &lt;br /&gt; &lt;b&gt;Warning&lt;/b&gt;: mysqli_stmt_execute() expects parameter 1 to be mysqli_stmt, boolean given in &lt;b&gt;/storage/h10/117/1148117/public_html/Login2.php&lt;/b&gt; on line &lt;b&gt;9&lt;/b&gt;&lt;br /&gt; &lt;br /&gt; &lt;b&gt;Warning&lt;/b&gt;: mysqli_stmt_store_result() expects parameter 1 to be mysqli_stmt, boolean given in &lt;b&gt;/storage/h10/117/1148117/public_html/Login2.php&lt;/b&gt; on line &lt;b&gt;11&lt;/b&gt;&lt;br /&gt; &lt;br /&gt; &lt;b&gt;Warning&lt;/b&gt;: mysqli_stmt_bind_result() expects parameter 1 to be mysqli_stmt, boolean given in &lt;b&gt;/storage/h10/117/1148117/public_html/Login2.php&lt;/b&gt; on line &lt;b&gt;12&lt;/b&gt;&lt;br /&gt; &lt;br /&gt; &lt;b&gt;Warning&lt;/b&gt;: mysqli_stmt_fetch() expects parameter 1 to be mysqli_stmt, boolean given in &lt;b&gt;/storage/h10/117/1148117/public_html/Login2.php&lt;/b&gt; on line &lt;b&gt;17&lt;/b&gt;&lt;br /&gt; {"success":false} it wants a boolean in my bind result() how do I even go about doing that?
this is now my updated script: $username = $_POST["username"]; $password = $_POST["password"]; $statement = mysqli_prepare($con, "select user_id,name,username,age,password from user where username='$username' and password='$password'"); mysqli_stmt_bind_param($statement, "ss", $username, $password); mysqli_stmt_execute($statement); mysqli_stmt_store_result($statement); mysqli_stmt_bind_result($statement, $user_id, $name, $username, $age, $password); $response = array(); $response["success"] = false; while(mysqli_stmt_fetch($statement)){ $response["success"] = true; $response["name"] = $name; $response["age"] = $age; $response["username"] = $username; $response["password"] = $password; } echo json_encode($response); I still get this error: &lt;br /&gt; &lt;b&gt;Warning&lt;/b&gt;: mysqli_stmt_bind_param(): Number of variables doesn't match number of parameters in prepared statement in &lt;b&gt;/storage/h10/117/1148117/public_html/Login2.php&lt;/b&gt; on line &lt;b&gt;8&lt;/b&gt;&lt;br /&gt; {"success":true,"name":"name1","age":45,"username":"user1","password":"pass1"}
Then use http://php.net/manual/en/mysqli.error.php after the query.
You have been given direction on how to find the answer numerous times, yet you ignore guidance towards self discovery and beg for an answer to be given to you instead. `$con` is your problem. It should be a mysqli connection resource, but it is a boolean, according to the error message, and is likely false. Look at the documentation for `mysqli_connect_error()` in the php manual and you will find why your code fails then. 
Pleaaasseeeeeeeee do not ever ever ever ever ever for whatever reason ever ever ever store your passwords in plain text in the database. I know you're probably new, I'm not blaming you, I just want to impress upon you the importance of not ever even considering doing this. Passwords should always be hashed using a good algorithm. Php comes with the password_hash() and password_verify() functions that make it super easy to do right. See this [link](http://php.net/manual/en/function.password-hash.phpfor) for more info, or Google "php password hashing" 
Var_dump con. Echo mysqli_connect_error. Did you even read the documentation?
Use backticks around the two places you use the word password in your sql statement. Just like you did with `user`
I just looked at your post history for the past few days, and it looks like you are writing an android app and you want it to have a php back end. If this android app is something you will be publishing and having people use commercially, you need to stop right now. You are storing passwords in plain text. You admittedly have little or no idea how to use php. I reccomend that you either hire someone to write a backend for you, take some time to learn php, or write a back end in a language that you are more comfortable with, because we are not going to write this for you. Above all else, learn something about security and password handling
I am trying to learn how to develop these type of apps. Rest assured it is FOR LEARNING PURPOSES ONLY. I ADMITTEDLY have no clue about Php If I hired someone everytime I wanted to learn anything I wouldn't learn much I am sorry I was not born from the womb knowing this but I have a desire to learn and am looking for "helpful" people to guide, support and nourish me not discourage me
http://php.net/manual/en/faq.passwords.php If you don't hash passwords, you might aswell stop developing your app right here. It's not an optional, it's not a "I'll fix that when I have time". It is absolutely mandatory 
You have control by using the ampersand sign, which means to pass by reference. Please see [this StackOverflow question](http://stackoverflow.com/a/885) for more information.
Laravel does an excellent job. They do just about everything right in terms of design patterns. 
Perhaps read the post from Larry? Apparently someone stumbled on his profile on a private kink site and started gossiping. This triggered​ outrage in a real douche who went on a witch hunt. This douche even signed up to the kink site just to screen shot posts by Larry as "evidence" against him.
I'll have to make some tests to understand well the difference between mb_strlen and mb_strwidth. I just solved my issue by discarding sprintf and using my own str_pad implementation.
I'm not fan of fluent interfaces but for builder object it would be okay I guess. I will definitely consider it.
Anyway you're right :-)
I think https://github.com/Sylius/Sylius/tree/master/src/Sylius provides some good examples (Symfony based E-commerce project). 
By what criteria did you mark these as "best"? It is highly debatable what is a good framework, because it will highly depend on your use cases. It's weird you have the micro framework from Symfony and not Symfony itself, yet Zend Framework and then not their micro framework. This looks like comparing apples and oranges without an actual compare. It looks like you have found 12 frameworks, listed them with a description and called it a day.
Objects are always passed by reference, you don't have control over that.
Thanks. I appreciate some experience from the trenches.
Why 0mq and not rmq? Used the latter one and it's doing the job (sometimes queue get spikes but holds well), but is there any advantage of using 0mq? 
Care to elaborate?
Thanks! I'll give it a read when I have some time.
u can see video 
I wonder how generics will make it to PHP. Will it be full turing-complete java-style generics, or will it be some kind of list/array-only variant like go? I'm guessing the second would be more in keeping with PHP's style of using the simplest solution, even if it's inelegant. It's pretty clear that in order to use strict typing properly you need something like this, but this is exactly the sort of decision the PHP community can get hopelessly stuck on.
https://github.com/vherus/depot
This is an intended behavior and the previous version had a bug. A lot of people complained about the bug: https://youtrack.jetbrains.com/issue/IDEA-157100 Unfortunately, there is no way to turn the behavior off. You may create a new feature request at: https://youtrack.jetbrains.com/issues/WI#newissue
Aren't some of these dead?
???
Facades (that are optional and now fakeable) and Eloquent (relies on Active Record, not Laravel), Laravel implements interfaces very well.
What's your exact question? Also there are very straightforward stuffs on GitHub, like this https://github.com/madcoda/php-youtube-api/
Thanks
Cheers :) 
The SJW mentality in software communities is like the black plague, and we're witnessing natural selection in progress. Many communities have contracted the problem, and their health is rapidly deteriorating, as they excommunicate their own members over trivial issues in the name of "inclusivity", and actual focus on writing software takes a backseat over mailing list vitriol, and long blog posts where everyone is pointing fingers. Some communities will survive the plaque, some will die. Some have been immune to the problem from the very start - they just shrugged and figured out they've gathered together to write code, not analyze each other's personal lives. Most interesting probably would be those communities where the SJW virus mutates and finds itself in balance with the host organism, without destroying it. I have yet to see an example of the last one in the wild, though.
Both methods are fine. /r/PHPHelp
Cloning objects is a really hard topic. Imagine you have references to other objects in your object you want to clone, do you want to also clone those objects or keep the references? This is why cloning is a special mechanism (note that clone is a php keyword). A little trick that can be helpful in some situations when you want to make a copy of a whole group of object is unserialize (serialize (&amp;o)) :-)
It's in the linked FAQ
Facades are just the proxy pattern. It's fine, just super architectural geeks get in a fuss because a there is another pattern called facades which doesn't act the same. But, Laravel's facades never claim to be the facade pattern so... Whatever. Eloquent is just a different way to do your models. It's standard Active Record vs Data Mapper vs whatever else may exist. It comes down to how you want to build your project what you go with. Nothing forces you to use Eloquent, it's just the default for Laravel.
Don't forget PSR-11, which came from ContainerInterop
I created a bug ticket but it was hindering my development so I downgraded to PhpStorm 16.3.3 instead.
is HAS NOTHING TO DO WITH $con , do you not understand ? stop being a sheep why do you speak when you don't really know anyway I resolved my problem, the reason was I had a "mismatch" of variables in my prepare statement and bind result statement...it works , I kept at it and resolved it, Thank you for what its worth in the future, if you don't know you should avoid "assuming" - this thread should be closed...
 Your ridiculously unprofessional attitude guarantees that you will always be a terrible programmer 
&gt;I am using Android Studio 2.1 This confused me. 
I understand your point of view, I would add that super classes like eloquent and facades make unit testing harder, I was pointing out that the community is not really in agreement regarding "They do just about everything right in terms of design patterns". I personally think that laravel is fine for small projects.
I always remember Interfaces by how Symfony uses them, such as their Guard implementation. - [Guard on Github](https://github.com/symfony/symfony/tree/master/src/Symfony/Component/Security/Guard) So You have: abstract class AbstractGuardAuthenticator implements GuardAuthenticatorInterface You can implement your own GuardAuthenticator and implement the interface to ensure Symfony knows how to use your custom authenticator.
Looking at the example from [`password_hash`](http://php.net/manual/en/function.password-hash.php), it's not so hard to figure out that all you need to do is $password = password_hash($password, PASSWORD_DEFAULT); You know we aren't here to give you code, right?
If I were the employer, I would rather see an example of your contribution to a project that actually solves a problem. For instance contribute a bit of code and time to your favourite framework or, if you know what framework you will be using (if applicable) go and fix an issue on that.
Out of curiosity, why only small projects? 
I can kind of see why they might want him out of the project, on one hand its disgusting that they would treat some one like thi, but on the other hand - from a business prospective (and keep in mind I do not condone this) you might have these 50 year old investors who grew up in a conservative way and are giving money to a company to build products, now imagine finding out that you star or one of the top guys is into something "contraversial" regardless of the consentialness of it all. You might be pretty quick to distance your self from that person, possibly withdrawing money or making ultimatums. Now this isn't saying, this is what happened and why, this is just speculation. Theres a lot of rich "older" investors that are "set in their ways" regardless of that being a good thing or not. Imagine being a muckity muck and all of a sudden your investor friends are backing away from you because you sponosr a company with a BDSM person thats become public and exploded all over the internet. Again I don't agree with this,. but it might be one facet of why this exploded like this. The puppets always have a master.
thanks a lot, but i am using only a simple webspace for this (not my server) sofar
Just keep reporting them. We remove them as we see them but 3 reports from users automatically removes posts.
[removed]
In my experience active record and eager loading break down as the application gets more complex. You end up with queries outside the scope of the ORM. Will elaborate on this is I remember to come back
Ideally, they should provide you with a problem that your code should solve. This will allow them to see how you would solve this particular problem, how you structure your code and which dependencies you use. 
Please do.
+1 from me. Symfony is full of interfaces. Especially in the Security component. Can be kind of hard to get into though.
I agree that using any ORM for large queries (or complex) is not an ideal solution and using raw SQL is preferred but I was asking why /u/dcc88 thought Laravel as a framework was fine for small projects -- implying that medium and large projects were beyond the scope of what the framework was ideal for.
Sophisticated doesn't mean complex. I recently did a test for a large company and thought the same as you, "I don't feel like I've done enough", when I asked an engineer about it, he stated that they want to see examples which would solve the problem the easiest way possible. Develop how you naturally develop, it doesn't look great if you try to over complicate something and fill it with pointless coce / stackoverflow copy-pasta.
I recently had to go through something similar. Applied for a new job and needed to show examples. I always use to rely on my [Github](https://github.com/viion), naively, because I am always logged in it felt like I had a lot of work/projects/PHP stuff on there. Viewing it not logged in I realised it doesn't come across as a PHP really! And some stuff is just forked. So when I went to the interview I took my laptop, logged in and had projects open to show them. I never really had a "problem to solve", I had projects that did stuff and I had to solve problems I invented within the programs. It's hard to push that but you have to be confident that what you did was well researched and you understood it and looked at different solutions. I went in straight with that idea: "I built X, it was good. I had to solve this/that and here is how I did it." So yeah, you can make a form that saves data and you can also work with the facebook/twitter API but can you go further. It's easy to follow documentation that does this. Can you do something with that data that creates a roadblock for you to knock down? For me, here is an example: - I want to track character data for an online game - Solution: Parse the data from the games website. Easy right!? Problems: - Problem 1: How do I keep data up to date? - Problem 2: What if there are 5 million characters? - Problem 3: What if the web server for the game is in another country or slow? So I solve problem 1: Have multiple servers getting data in parrallel. - Problem 1.2: How do I prevent overlap and ensure all servers split the load Etc, etc. You start with something, and then think what you can do with it. So you have your form, what can you further add to it? Could you parse Twitter posts and make a small "bot" that responds to someone, or an "Auto Tweeter" based on some personal stuff? When I was applying for jobs I found a lot of really rubbish ones and I needed a way to filter out the spam from linkedin (Heres your daily 75 jobs!), a ton of duplicates. I created a small PHP app that found a job for me and ranked them based on what I liked (brownie points for flexible working hours). That was a real life problem that I made a concept to solve, it's what got me my interview!
Why the fuck would you post how to steal the course?
You wouldn't do the actual export with a snapshot assertion, you'd just check the string that you're exporting for changes. I Edited the wording to "serializing an object for an XML export" for clarity. And you're correct that that this would generally be used closer to the integration layer, but that doesn't exclude using PHPUnit.
This is actually a SQL (presumably MySQL) question, but to answer: it will cut off the rest of the chars. I had this issue with a password field on a DB table a few months ago.
I don't know the answers, really. I [taught myself parseJSON and file_get_response](http://message.sunyhakas.com) less than a month ago. Sorry if I came off as condescending, I just love web development and I feel like I too could learn this stuff easily if I could just join a team and get to work, but I don't seem to have the charisma to convince people to give me a chance.
Not out of the box, but you could extend the JsonDriver and unset the id before you match the response. https://github.com/spatie/phpunit-snapshot-assertions/blob/master/src/Drivers/JsonDriver.php#L27 If this is a common request I'd consider tinkering to create a clean API for similar cases.
Totally agree, I never understood why people use git/composer on their production server.
Eager loading is going to be slower than a query that makes use of joins. If you're loading 2000 records and attempting to eager load relationships on that then you're going to see a performance impact due to the number of placeholders. This will get worse as you eager load more and create more temporary tables. We can use the query builder but this is inconsistent and will eventually become more difficult to maintain as your requirements demand more than eager loading can provide.
I keep getting annoyed with forms that ask for gender as only male or female so Over written a little library you can use to accept other genders. It's also useful for general pronouns. So you can tell it the gender of someone is Male then it will supply the relevant pronouns. echo $user-&gt;getNoun() . " will call you back" Fully tested and PSR compatible. 
I'd like to think this is a good example: https://github.com/PHLAK/Stash (Disclaimer: one of my own projects)
You forgot "dragon." http://www.nationalreview.com/article/433724/transgender-woman-now-transitioning-dragon Why should that person have to specify "other" ?
We need a library for it because no one is doing it. Hardly anyone who is building sites that require gender is taking into consideration the millions of people who are not a binary gender. I'd like to change that so this hopefully can help a few people do that. 
"who is trying to inject scripts again" haha 
&gt; I don't think the Reddit PHP community agrees with you on that one
One day I hope that you will shake off your PC brainwashing and be a productive member of reality, where there are only 2 genders and non insane people don't 'identify' as soup ladles and crap. 
Did you just assume the size of my head? Stop head-size shaming, bigot.
Why not just make it two textfields: Preferred gender and noun. A third textfield could be used to describe what the gender means (for the ignorant or in case the gender was just invented).
I wasn't having a political argument but fair enough. Yes it's over engineered, like most things I do, but it's not 71 files, it's 36, test files don't count as they're not loaded by the autoloader. So it's not that the code is bad it's that you think it's over engineered and convoluted? That's fine, that's a fair concern and if you'd rather use a simple array then fine. Though coupled with the pronoun requirements it's still gunna be a big ish array. Do you have an problems with the actual code? The point of this library is to get people to start thinking about how old hat the idea of two genders is, I'm fighting a losing battle with /r/php I feel, which is a shame. I was hoping my fellow devs would be a little more accepting. 
Yea I thought that but given the 5 different ways we use pronouns I figured having some stored would require less input from the user. 
&gt;sha1 password PHP now provides baked-in bcrypt hashing http://php.net/manual/en/function.password-hash.php which is a more secure option
In terms of field length, &gt; This will always result in a hash using the "$2y$" crypt format, which is always 60 characters wide. From [Password Constants](http://php.net/manual/en/password.constants.php)
Why are the options "agree with me or you're a useless human being"?
don't you oppress me!
Thank you. No one else interested ?
what end should get cut off? sha1 has 160bits which means 20 bytes. so it just fits
Ok but why?
&gt; good luck to go anywhere in a more gendered language... French either have to throw 1000 years of written history, or be some assholes ? Never thought about this. Good point!
&gt; I'm fighting a losing battle with /r/php I feel, which is a shame. I was hoping my fellow devs would be a little more accepting. Bam, respect lost. You're being criticized on the validity and viability of your library. That's a pathetic defense to hide behind, defend your library, defend your reasoning, don't try make this about politics. You resorted to a cheap generalized attack on an entire community: &gt; You all just aren't accepting! That's why I'm being met with resistance! There are plenty of other places that will overlook the applicability and quality of your library and focus instead on praising you for the premise. In my experience, this isn't one of those places.
Keep writing good code and eventually the right developers will take notice. Those aren't always the ones to leave comments, but will click into your repo, like what they see, and start using it and maybe contributing back.
Jesus dude. Sure, there are some people being trolly and unfortunately that's something to be expected and prepared for regarding this topic at this point in time. You are so quick to play the bigot card when your project has been validly criticized. I have no doubt you would recount this experience to a friend as "Those horrible closed minded souls aren't ready to accept what they don't understand!" You responded to all of this in an incredibly immature way. Fuck what you're 'trying to do', that's not important, what is important is the code and proposed application of that code. You brought your baggage and assumptions with you when you made this post, that was your fault and no one else's.
Insanity! 😂
You should have at least some code available on your github. I would ensure it has: * Unit tests * Has been passed through phpmd to reduce its cyclomatic complexity score (makes it look good and readable). * Documentation to show you are detailed oriented and can write at a college level * PSR-2 compliant * Demo if applicable Be prepared to explain the code well in your interview.
I am okay writing custom code for them as long as I am not asked to code on a 55" screen in a room filled with developers. Why? Cause I will not be programming on a 55" screen in a room filled with developers watching my every keystroke. It's just a terrible way to test candidates.
A modest proposal: 1. Don't ever ask for gender. 2. Use gender-neutral pronouns when you need to refer to other users. 3. Enjoy having less technical debt. There, everybody wins. Okay, but seriously: Gender != biological sex, even though they're strongly correlated. One is a cultural identity, the other is your chromosomes and/or private bits. Saying "there are only two genders" is incorrect, even if you're only saying it to get a rise out of someone else. In a world full of people who believe WiFi causes cancer and vaccines cause autism, we need less bullshit to spread.
do you really need tests for such 'library' where simple test on a form and a 'eh, it works' would suffice?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
My workplace currently use a custom CMS, which is a good few years old. There is probably a few security glitches in there. I'm currently rebuilding it, and I'm learning a load. More than I'd of learnt by using a framework such as Laravel. Sure, I'd be much further along in the process but I wouldn't understand why. Once it's done, it should only require a few hours per month to maintain. Big projects I would 100% recommend using a prebuilt framework.
Is the solution to this issue really to provide a library that lists and generates all possible options? Isn't it a more acceptable solution in this case to not limit people to any set number of genders? To be honest, I would much prefer that we all just don't even bother asking and use gender-neutral pronouns so that this doesn't even become an issue.
Regardless of your feelings on the matter, there's always the option of "none of your damn business".
Maybe this isn't the place to discuss this, but since you're here I'll ask. What *exactly* is it that makes people identify as one of dozens of other "genders" rather than male or female? Or to put it another way, what are supposed to be the male/female traits that they don't have? Why can't someone identify as "mostly male" or "mostly female" (like I mean, they're somewhere on the scale between male/female but they're more on one side than the other)?
I identify as an attack helicopter, and this is triggering me so hard right now. EDIT: [Added a PR](https://github.com/waxim/Gins/pull/2) to be inclusive of all choppas.
One possible source: https://stackoverflow.com/insights/survey/2017#developer-profile-gender No idea if this would be representative of a larger population but if you just took the USA that would be a few million people right there. But it's hard to know exactly why people chose those options, perhaps they just didn't want to give their gender.
Actually it can be different for different MySQL versions. MySQL 5.7 is more strict by default and I think it will give an error instead of silently truncating the hash.
I don't think its apache. https://puu.sh/v0FWE/fc7076656e.png https://puu.sh/v0FYE/a7168e536f.png It's only using 80. Edit: I do get this page without apache even runing. Edit2: Found why my port is not free. Is there a way to change the port of symfony?
[Pull Request added](https://github.com/waxim/Gins/pull/2) for my fellow choppa.
Looks like your webserver is not parsing PHP and therefore prints every instruction as plaintext. What webserver are you using? Apache, Nginx?
Try adding `-p 8001` on the end to make the built-in server run on port `8001` instead.
Looks good, extremely simple, will try this out. Used to use [phpmig](https://github.com/davedevelopment/phpmig) as an alternative to phinx, but this seems a bit simpler.
try something like: php bin/console server:start 127.0.0.1:port_number or server:run if its not working with server:start
This fixed it for me! Thanks you so much!!!!!!!!!
[removed]
I appreciate the response! Maybe I need to become a better programmer to realize its usefulness.
This is more a criticism of eager loading and not that of Laravel. With laravel you can write raw SQL if you like for the heavier queries. So not a good argument for laravel only being fine for small applications.
What happened to the library discovery thread? 
I wonder if /u/MunsterScot actually wants to save hashed passwords or just save a hash of something. I'd argue that SHA is still good for quicker hash comparisons :) 
Feedback request. I was looking for a good [JSON API](http://jsonapi.org) implementation in php7, but could not find anything satisfactory. Here is [my attempt](https://github.com/json-api-php/json-api) to make something decent. I would appreciate your early feedback.
I wouldn't advise getting into a habit of ignoring composer.lock files, they're useful as you can install the exact dependency versions using 'composer install'. This means in a multi developer environment you can guarantee you all have the same versions of everything.
Nice gold. Well earned. He closed the PR. Someone feeling like forking the repo? Something something blackjack-kin and hooker-kin.
Symfony 3.3, that will be released at the end of May 2017, will include a new utility that automatically picks the first free port starting from 8000 (see more details here: https://symfony.com/blog/new-in-symfony-3-3-webserverbundle) If you need Symfony support in the future, instead of Reddit you may consider any of these support channels: https://symfony.com/support
I know some people are uncomfortable and sometimes even downright offended with the male-female select lists. Kudos for doing something about it. - Ideally, this would have been a JSON/XML repo that everyone can pull when necessary. Genders list v1.0.2 doesn't make much sense now does it? - Secondly, nobody on r/php is bashing you for your acts on multi gender arguments. It's just that your library is over-engineered too much. Ultimately what you have is a list of genders, and their English names (he/him/etc). - In most production level apps though, these kinds of string changes are done with some sort of localization/internationalization system. Again, a JSON file would have immensely for others to pull up a list of gender suggestions and their English literals. There's no way this is usable as-is. - Lastly, everyone in r/php has an equal say. I wouldn't go down insulting anyone who oppose to your library. - Your code style is pretty good, with comments, interfaces, and mostly self-explanatory method names, etc. Just the application could be different. Please don't be offended. The first time I contributed some code, some guy asked if I wrote the code sitting on a toilet because the alignments were tab-space mixed. Their bashing aside, the arguments were valid and indeed helped to get better.
I have to be honest - I'm really surprised by the shitty response from the PHP community about this project. I wonder how people within the community who don't identify as male or female will feel about this response? I'm sure it doesn't make them feel included.
The only thing I will say is you could be right but I just read the word 'noob' so I'm assuming it's bollocks and skipping it.
As a programmer with almost 10 years of experience I absolutely **hate** this article, since it might lead to catastrophic failure. I worked with system which was built around such principles "we will not worry until it's time". The effect was a software which cannot scale at all and some actions will execute 1000+ database queries, some of the actions were generating stack trace so deep that even debugger struggle. Was the software earning money? Yes. Was it poorly written? Sure. Was it possible to optimize it when client was yelling since none cared for 20 years? Unfortunately no. Optimizing application performance should be a vital part of development. Of course no developers should go crazy about it and spend hours trying to get 1ms on non-critical parts, but completely ignoring performance in non-critical code will turn into catastrophic failure.
It's not saying to ignore performance altogether, it's saying to ignore tiny performance issues (like a foreach vs while)
The problem is most of the programmers are unable to predict impact of a particular change. I can throw a quick example: `array_map` vs `foreach`. We had a programmer religiously using `array_*`- it wasn't a huge deal until he used `array_map` in one of the filtering functions. It exploded long time after method was refactored, since it started to be used more and more times. It was a little bit hard to track down performance issues to that particular code. If he knew about this *small* performance problems with `array_map` vs `foreach` and used `foreach` few people will save hours.
So you prefer to waste ten times more time profiling every *potential* bottleneck. Good luck. 
I wont comment on the merit or need for it, but from looking at the Apache Attack Helicopter pull request.. am I right in saying that every gender has to have two separate classes associated with it - one for the gender itself and one for the associated pronouns? So to render the dropdown you're going to have to instantiate *n* objects whereby *n* is the number of genders? (Erh... currently at 18..?) As mentioned elsewhere, this could (and arguably *should*, if you do genuinely wish to give the power of people to pick their own.) be a perfect use case for a simple text `input`... no? If you even need to collect a users gender in the first place. (HINT: This is *rarely* needed.)
It would be super cool but you know what would be even better? https://wiki.php.net/rfc/generics
BTW, if you care for the years of experience, old man Knuth has as little experience in programming as 60 years. *May be* he has some clue. 
If I had to choose, I'd take generics over ArrayOf because they are \*cough\* generic - but for all the abuse arrays get, I'd really love the ability to also specify that an argument is just a list of conforming objects. Generics can do this, but I'd love to have a language level supported way of doing this, so that every project didn't end up with a slightly different version of \Our\Projects\ListClass with their own weirdness.
Author here. I don't think that would work in this case. XDebug was eating memory until the kernel terminated the Apache process because there was not enough memory. And the memory_limit setting would not work either because the memory leak was occurring "inside" XDebug rather than in the PHP code context.
No, why?
Premature optimization is "optimizing before you know you need to" that is very different than designing and building a shitty app like the one you described. 
Basically yes.
We've been through this plenty of times, and it's not about a bad habit, it's about cleaner Git diffs, and more consistent multi-line syntax for lists, of which both arrays and parameters are an example of. There's no logical reason to allow trailing commas in some types of lists and not other types of lists.
Also, if you move items around, you don't have to worry about whether it has a missing comma or not.
[removed]
The new zend framework docs kind of are annoying to navigate. There are too many dead pages and what I mean by this is for example if you visit the [learn page](https://framework.zend.com/learn) and click on any of the Documentation links it sends you to a dead page. By dead page I mean there's nothing useful on the page except a composer line... like what the hell is with that? Now in order to get to somewhere useful you have to use the top navigation instead of being properly sent to a landing page with proper information about a component. They really need to sort this because it looks bad. TO give them the benefit of the doubt, maybe they haven't had time to fix those pages, but almost every landing page for the documentation is like that O_o
&gt; Better yet, ask whether the user has XX or XY chromosomes. While I see your point and agree... You can have XXX, XXY, and XYY, with trisomy... And in extreme cases, XXYY and XXXX. And also just one X. Just some random trivia \^\^ &gt; Or just don't ask for gender at all because really it's nobody's business. Sadly, you can't be gender neutral in some languages without HEAVY gramatical lifting. But I guess if it's only english, you could somewhat have that.
Just curious why you'd want multiple migration folders in one project?
I got you fam 
&gt; If you have to internationalize your site, and the Elbonian language always uses a male pronoun by default... Well, "fixing" that isn't your responsibility, it isn't within your power, and isn't in your feature-requirements. About 1 out of 4 languages are gendered (and english ain't really one of those)
Let's not mistake "poorly designed" with "not optimized".
Didn't you say that you are doing this to help people, even if just one person. Well what if I really do identify as an Apache Attack Helicopter? Why are your opinions and views of the topic the be all end all. You've now oppressed me and are no better than the people you are angered by. You posted this to a public form. You could expect such a controversial topic to stir up conversation, and as it is a public form, there might be people with DIFFERENT world views. Even still I saw maybe 4 or 5 comments that remarked on how they believe there is only 2 genders. However, I did see a multitude of comments from you where you tried to silence people by calling them bigots and putting your world views on a pedestal. Regardless of all the gender stuff, your code is way way way to complicated for this. An array could have done literally the same thing. 
In a project, it belongs to GIT, so that everybody has the same vendors, thats right. But you know that depending on php-version and/or available extensions, this lock file can look different right? So in a library, provided exactly like in this case, it's NEVER recommended to have this file in the repo. Why should the library maintainer know which php-version I have? Or which extensions?
The number of classes in your library does not correlate to being over-engineered. There is also the possibility of it being poorly architected. That's not directed solely at the OP, it is a general statement.
The most underrated answer in human history to any given question! :D
A project which is basically just a composer.json pulling in a microframework and a library does not make a new framework.
Don't commit your vendor dir
he deleted it because... HE CAN :D
Haha, perfect!
&gt; People here ARE bashing the idea of non-binary genders What makes me laugh and peeves here and there a bit is that it is completely english centric, and a bit self centered. And completely over engineered, that's what is the funiest to me. To be honnest, as soon as I read the thread title, I knew this would happen, and I feel you are a bit naive if you didn't expected this. With that agressive tone of yours, you asked for it. I'm pretty sure some of the comments you got weren't about the gender issue, but more about the fact you are the caricature of the gender SJW in the minds of many. --- &gt; their concern is that we don't need this because "there are only two genders" I don't think there are N genders. There, I said it on the internet. I think like most of life things it's not a discrete probleme to use math terminology. I don't even think you can even represent it as an axis with a cursor. There is more to it. But what you offered is not an answer to that very problem, what is gender and is there only two. What you offered is a solution to gendered pronouns, which is a related problem, but not the same. I can respect someone who wholeheartedly accepts and understands the idea of non-binary gender, but don't think gendered pronouns should disappear, that they are different problems who don't need to have the same solution or to match perfectly. As far as I am concerned, sorry if it baffles you, but when I see someone in the street, well, I'll do uncounciously the [duck test](https://en.wikipedia.org/wiki/Duck_test) in my mind, with the informations I have, external appearances (looks and voice mainly I guess). And if I used the wrong pronoun when I talk to you the first time, sorry not sorry, couldn't tell. Just tell me what you want to be called, and I'll oblige, I don't care. Unless you want me to call you something either insulting or over the top. And unless you want to talk in a gendered language (one out of four, which english isn't really part of). TL;DR; of this section : Grammatical gender and ... "natural" (can't find a better term) gender aren't the same. Should they match completely ? Any time I use he or she, I am not saying THERE IS ONLY 2 GENDERS in my head. All related questions don't always have the same answer. Quoting myself : &gt; I can respect someone who wholeheartedly accepts and understands the idea of non-binary gender, but don't think gendered pronouns should disappear, that they are different problems. --- &gt; there was a pull request for the addition of an "Attack Helicopter" You can't stop the [meme](http://knowyourmeme.com/memes/i-sexually-identify-as-an-attack-helicopter). I don't like that one tbh.
Yep, of course. I'd say committing it is always the best approach as generally you'll deploy to a very similar environment as it was developed in and committing the lock file is a good habit. As another commenter said it'll be ignored if it's included as a dependency anyway.
looks pretty cool! reminds me a bit of approval testing but without the manual eyeballing
Seriously? This is barely even a list. This "curated" list hipster shit is really cringe, why do people keep doing it?
Oh I totally agreee
There is a smiley in the title so the OP doesn't take it *that* seriously. Yet it's good for him to toy around with composer. 
I have to admit it should say "almost every PHP user" instead. 
Dunno why people think it's 404'd. It's just: http://buytaert.net/living-our-values
OP's last comment looks like a threat.
As far as I can tell, there's no code of conduct involved in it 
Very good article. Just one point. I would not invent a new parameter format like this: GET /books?format=[epub,mobi] Instead I would pass array parameters like this: GET /books?format[0]=epub&amp;format[1]=mobi or like this GET /books?format[]=epub&amp;format[]=mobi 
Been programming for closer to 15, and crazy shit like this is all that keeps me going.
You needn't be such a martyr. You've brought up a politically-charged topic in a forum where people with a wide variety of views come to discuss things. Humour is part of how people deal with uncomfortable topics, and expose the shortcomings of poor arguments. I fully support transgendered rights and acceptance. However, the gender pronoun stuff really hasn't been put through any serious debate in academia, and so I don't personally accept it as truth. You're entirely welcome to point to non-religious sources on gender pronoun theory, and I'll give them ample consideration. Being humourless makes people not like you or listen to you. Lighten up, and you'll be taken more seriously.
That's like concluding a child's tricycle and a wheelbarrow are the same thing because they both have three wheels. Arguments aren't data structures.
They should focus on writing great code if they want to feel included.
In Phalcon you have 3 built-in options: - use micro framework - use micro framework + controllers as handlers - use full stack mvc Also you can use any class in all of those types of application since whole framework classes are provided in memory.
Do you have any scaffolding options? Code looks very clean and magic-less but I wonder if there any way to render repository/entity pair automatically based on user input or config.
Also, what is a reason of using native drivers and not PDO?
Good article, thx for sharing! Two links I have handy when trying to decide how to do something others might find useful https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md https://cloud.google.com/apis/design/
They won't be guessable given proper implementation. That's basically an encryption scheme using a block cipher, where block size equals the number of bits in your integers. /e: All short URLs can be trivially enumerated, encryption or not.
Well the grouped namespaces passed, so there's that. TBH half the use cases here don't really make sense. Function parameters yes, interfaces/traits/variable declarations no. 
Well, I crashed and burned on that analogy. The idea is arrays and arguments aren't at all related. "They both have commas" is superficial and completely ignores what arrays and functions do and how they operate.
If you have a DateTime value which should not change (or should only change under very specific circumstances), use DateTimeImmutable. Beware of timezones - especially when dealing with unix timestamps, as DateTime[Immutable] will use the UTC timezone regardless of your system / php defaults. This is obviously fine if you always use UTC internally, but many people don't. I don't get what problem you're actually trying to solve here. By tying the date/time values into the request time it seems to me you're actually creating more scope for race conditions and unexpected behavior. The example you give is a pile of nonsense. User email link expiration times should be measured in hours or days, not minutes or less (users don't always have immediate access to email, and even if they do, the "best efforts only" nature of emails alongside systems such as grey-listing mean emails can frequently take hours to arrive, and there's no guarantee they will arrive at all). And I've never seen anyone consider DateTime as a service - why should it be? A date/time value is a value. Your entire premise just seems weird.
If you're using encryption, you still have to worry about collisions, which means you'll still have to do the DB check. So what are you really accomplishing?
&gt; JavaScript, the notoriously slow moving language where a bunch of companies doing independent implementations can barely agree about anything. It's moving pretty darn [quick](http://kangax.github.io/compat-table/es2016plus/) IMO. 
&gt; Arguments aren't data structures. Really? Collection classes aren't data structures? I shouldn't be allowed trailing commas in my variadic collection class constructor?
Mysqli have advanced API not avalaible on PDO : http://php.net/manual/en/mysqli-result.fetch-fields.php
Currently not, personally i'm not fan of this, but if someone want make one i will be happy et put it in the official documentation.
Thanks for the response &gt;If you have a DateTime value which should not change use DateTimeImmutable. I had no idea this existed. I will look into this and update my article to use it. &gt;it seems to me you're actually creating more scope for race conditions and unexpected behavior. I can't see how that could be. When developing an application the majority of it in my experience has been built without the execution time in mind; the logic is written in such a way that it only cares about time in that one line happens after another, and not that x amount of time has passed in executing those lines. All in all I would certainly not say that this should replace every use of DateTime, but instead that it should be made available when required. Granted the email activation link is not an ideal example - perhaps exchanging an authorisation code for an access token in an OAuth2 setup would be better. In terms of an issue that is being solved, I would say that it's more of a nice-to-have from a perfectionist point of view rather than having a measurably useful function.
This feature can be replaced by DB introspection and will work for all databases. PDO is good cos it intentionally created to handle this sort of things, for example give unified PDOStatement for any database type.
You don't have HATEOAS - you can't call it REST. And that's fine, you don't really need it. Another note. Links like `/resource?filterByOwner` is valid link. In many cases such links will be much simplier for clients to consume (due limitations of client libraries like ngResource, retrofit and so on). REST is not about URI format, it is about resources which should be identifiable using URI.
Check this out: https://github.com/phpservermon/phpservermon
There are multiple point of view. mobile devs don't like this approach mostly since all they tooling assume that HTTP is used only as transport but not as application protocol. And from KISS point of view adding prefix to URI makes work simpler. However devs could write request interceptor which will add Accept header to every request but sadly this is "hard" for most of them. But maybe good idea would be just to not versionize API. You could just evolve it, deprecating old stuff and removing it when nobody uses it. In this case the most tricky part is how to track that "nobody using that field". Graphql for example solves this pretty easily, jsonapi also allows you to specify set of fields required by client.
Argh, please don't build another URL shortener! URL shorteners are possibly one of the biggest causes of linkrot, and are seriously harmful to the integrity of the web. See also [here](http://www.archiveteam.org/index.php?title=URLTeam)...
https://12factor.net/config
I think API needs to be improved. You could wrap this in self-calling method with bunch of ifs inside, but better change API if you can...
You use vlucas/phpdotenv for variables specific to the environment or things you want to keep out of your managed source. This is why the file isn't committed to version control. Those variables are used in your config package. These packages typically support various file types. Take a look at hassankhan/config, this is my current choice.
[removed]
First of all, if you're not just trolling, format that with proper indenting. You can't expect people to help you with unreadable code. Although it's not the formatting that makes it difficult to read, it's the nesting level. You need to think about what your goal is and how you can achieve it without so much duplication (4 foreach statements that do basically the same thing). For example, try using a function so you can reuse the foreach logic.
Php learn
Well, it is jQuery problem then. We MUST use 4xx for client side error and 5xx for server error as the REST states. We could also wrap our error response to http code 200 by using some kind of flag (`?error-as-success=true`), but mustn't be the default.
How do you set environment variables?
in apache or nginx configs.
Wait... what? People don't use .env files in production?
There isn't any.
&gt; no overhead of loading the .env file on each request If I am using a framework like Laravel, is the single call to .env really adding much overhead at all compared to the number of other files being loaded? Especially if I am caching my configuration on production.
As usual, the voting for this article says more of the voters than of the article. An average PHP user scarcely heard the Knuth's name, let alone reading any of his books, but nonetheless consider himself a guru in programming.
Ok, but why can't it be a env.ini file that you don't commit to your version control ?
You mean people commit the env file ....
For that I use function getConfig($key, $default=false) { $value = getenv($key); if (! $value){ if (false === $default){ error_log("Missing required configuration option: $key"); die(); } return $default; } return $value; } date_default_timezone_set(getConfig('TIMEZONE', 'Europe/Brussels')); # not required define('BASE_URI', getConfig('BASEURI')); # required
Because it's a file. You can override env variables on your hosts. This makes process of managing environment pretty much easy. Especially if you are using container solutions or deploying into cloud.
So you misunderstood 97% of it
The fact that the article shows this. You can downvoted all you want, but in time you will learn.
And where are those configurations stored :D usually still somewhere in version control, just seperate from the code base. There is no real benefit unless you plan to opensource it one day.
The workflow with INI is you keep the file on the server (even if it's not in your repo), PHP loads INI. The workflow with ENV is you copy it to your server, load it in your environment, delete the ENV, and PHP loads from the environment. But mostly it's just a circlejerk that picked up speed because of various hipster development manifestos like 12factor.net. Manifestos like 12factor.net are 1/3 common sense, 1/3 advice that's contextually wrong or right, but the context is missing from the manifestos, and 1/3 bullshit.
No
&gt; still somewhere in version control Mostly all variables are defined in pipeline on CI server, not in VCS. Something [like this](https://docs.travis-ci.com/user/environment-variables/) in case if you are using travis. Most of CI/CD server have env variables store like this. So again - not as a file. Or you could just setup this environment variables on target hosts. This adds additional level of security.
Storing your secrets with a third party is safer then storing them yourself? Most people still use provisioning scripts which do contain secrets. Vault seems interesting for this https://www.vaultproject.io but overkill for the apps that i am working on.
&gt; The basic website builder in Wix is free. However there are two major downsides to it. First, it adds Wix branded advertisements on top and bottom of your website. Second, you cannot use a custom domain for your site, so your site address will be: username.wix.com/sitename So we're comparing apples to bananas here?, WP is Open Source and Wix is not.
You're posting on a php subreddit. Why on earth would you think anyone here is your target audience given a majority of php devs hate wordpress due to its shit codebase.
UptimeRobot.com? It will monitor a URL and alert you when it is down.
Making lone, unexplained statements like this is pointless. Perhaps you could expand on this with some reasoning (or a link to an article that explains your POV). People are far more likely to listen to reasons why a given behavior is bad, and what a better alternative is (and why) than just being told to stop without reason.
It's quite simple, protected creates an extension point for your class. Ideally you just make everything (or most of it) final and private, because you use interfaces and composition over inheritance. There's no reason to make something protected unless you intend on extending, even then it's questionable if inheritance is even the right solution. https://ocramius.github.io/blog/when-to-declare-classes-final/
This is true for MySQL and derivatives. Most other database servers will give you an error when you try to insert data which is longer the the field definition.
no idea, though it might help OP a bit but it ain't helping I guess.
The idea is to keep your passwords out of your repository, this doesn't matter so much if your repository is always private e.g internal corporate network and so long as it never gets open-sourced and published your golden. However if you follow a password policy that dictates that all passwords/api keys get cycled every 30 days then having some form of automatic method for distributing those settings becomes important. As part of our CI/CD setup the environment variables for each project are set within the apache vhost config on a per project basis as part of the automatic deployment process. No passwords or api keys are stored in any of our repositories and a .env file can be generated for local development purposes. Of course these sort of settings have to be stored somewhere, in our case it's a encrypted database on our CI/CD setup.
I see, thank you clarification.
I get your first point, it's barley a list and should have held off publishing until fleshed out a little more. I've also found quite a few good resources from awesome lists - usually I go to https://github.com/sindresorhus/awesome and find lists of resources though.
Environment variables (in a file or the environment already) are probably the most versatile form of configuration across languages/platforms.
StatusCake does this for you. Doesn't make much sense to make your own. 
One advantage of using env over ini I haven't seen mentioned yet is that it's not php-specific. I've shared env variables between a php and node application on the same server before, wouldn't be possible with ini settings.
Now the real question is: Is there a curated list of curated lists of curated lists?
Broken links? Are we in the 90s again?
No it will not work. On the other note, don't be using things like SHA, here is a detailed reason why and what to use instead: http://mstd.eu/index.php/2016/07/01/how-to-correctly-has-passwords-in-php/ 
Disagree. Make _everything_ protected by default, and mark certain properties and public as you create your public API.
What does the 90's have to do with it? The web still works in much the same way, linked resources are sometimes removed or moved. Tracking this can be a real issue in larger organizations with multiple groups making updates to a site.
You could also code your 404 page to email when it gets hit. That way you also get notified of broken links coming from other sites. But you'll also get slammed by bots that look for common vulnerabilities, prepare to manage an exemption list.
I'm not sure our SEO guys know this. I'll have to bring this up to them, thanks.
at least make a list of companies using and giving back to open source php projects
srsly though, what are Ve, X, Xe, Ze, Ae, Ey and Fae? never heard of anything like that, do these actually hold value by some people?
Thanks for your appreciation :) I'm a bit uncertain on this, actually... my preference, if possible, goes to the UX. PHP can handle a "native" format obviously better than a custom one, but my personal take is to make UX drive technology and not the other way around. I may be missing something important in your point anyway. Is your take just driven by native language support for arrays in query params?
Looking at the code you're using a lot of protected class variables for what should class constants since the values shouldn't change once defined.
I know Fielding's rule about hypermedia and as I stated in the post, I struggle with the idea of not considering HATEOAS within my "list of best practices"... I actually cheated mentioning it in a sort of afterthought. :) On the other hand I feel a bit of discomfort when I have to approach HATEOAS "client-side". It may definitively be me... there are people way more prepared and experienced than me on the topic. Maybe I'll have occasion to grind my teeth on that stuff and reach a positive epiphany. I actually hope so :) As for the filter links, if you are referring to point 4 of the post (map relations by sub-resources), I actually agree. I also mentioned that in these words: &gt; Should we also redound the endpoints to provide different access routes? Like, following the example above, should we have a reviews/456/books resource so that I can go backward from reviews to books? &gt; Well, this really depends on your domain: [cut] In the end I tended to be "tranchant" on some stuff with hilarious intent. Hope this didn't hurt. Thanks for your valuable feedback :)
This has always been my point of view, but iltar makes a good point in his reply about inheritance.
What would you do if Packagist/GitHub went down when you needed to deploy?
&gt; messages gets logged to syslog, which is sent to a centralized logging service Would you kindly elaborate on that centrailzed loggin service? Does it "forward" messages according to their priority?
Totally agree here. In addition, when you say: &gt; "Does not exist" or "you don't have sufficient permission to view this resource" aren't server errors I agree also, in fact I listed them in the **client** errors category! Mind that a resource with no content is different from a resource that doesn't exist... the first case is not even an error. Client libraries should be educated and RESTful, or you will have to deal with it. My lolcat speaks for me on that point! ;)
I remember this being posted on /r/PHP: https://cloudplatform.googleblog.com/2017/03/digging-deep-on-php-71-for-google-app.html
ini files are used everywhere, I don't see it as something exclusive of PHP
1. If they still use JSON they aren't good people. 2. gRPC allows you to accept and emit JSON along with the infinitely better RPC calls so the peasants can still access your service. gRPC is objectively the right choice https://github.com/grpc-ecosystem/grpc-gateway
Indeed. It's not as if we moved on and away from concept of clickable links. Even SPAs have this functionality and that can be tested for as well.
SocialNetworkPublisher interface is a little bit poorly designed. Note that MartinGeorgiev\SocialPost\Provider\Twitter\TwitterOAuth07 and MartinGeorgiev\SocialPost\Provider\Facebook\SDK5 both implements this interface, but for one of them (twitter) a publish() method takes a parameters which won't be used. Of course, they are optional, but in my opinion it's misleading. Maybe a publish() method should take a PostParamsOrSomethingLikeThat interface as only argument with different implementation of this DTO for every social?
$statement3-&gt;fetchAll() returns an array, so in fact your $query looks like "select * from courses where crs_ID = ''array(...)". You just need to use implode() function on $courses and inject returned string into query.
is not better do this sentence? SELECT * FROM courses WHERE crs_ID IN (SELECT crs_ID FROM reg_courses WHERE userID = '$uid')
Please use /r/PHPhelp in the future
Your example has an [SQL Injection](https://www.owasp.org/index.php/SQL_Injection).
I know
Even if I agree on the principles (YAGNI &amp; prematures optimizations), I only agree on a certain limit and I think this article goes to far. Yes, you should be aware where your bottlenecks are going to be. If you're calling a DB on n+1 for your one-to-many relationship, you're doing it wrong, and it should be optimized before it becomes a real problem. I don't see any harm into using tools like profilers, or MySQL Explain for your queries. And for the authors, almost all your arguments seems to be "the author is that guy", "he has a long experience so he knows his shit", "if you don't agree you're a noob", etc... Even a wise man can be wrong, and his article should be criticized, and not blindly taken for truth because "it's this guy".
Thank you so much!
Whoa. A single class responsible for validation, building sql, i18n, pagination, file uploads, and handling custom button clicks. Maintaining? No. I'd stop all other activities and take a month to refactor it into separate, loosely coupled, single responsibility components.
In that case i hope i never get to work with you, must be a nightmare seeing your code. Anyway, if you need the inner state in a unit test, you're doing it wrong. If you make it protected for a test, you're doing it wrong.
`new MyList(1,2,3,4,)` The constructor is a *function*.
Well according to the author of this class, it follows Uncle Bob's SRP closely. He claims that breaking it up into smaller classes will result in low cohesion and violate encapsulation. I've tried to convince him otherwise, but apparently he hasnt listened thus far. 
http://www.tonymarston.net/ i cri evrytiem To be fair, at least it's a class :)
This code follows the SRP in the same way that a Swiss army knife has the single responsibility of being a Swiss army knife.
 if (condition) { // do nothing } else { doSomething(); } I don't think there is any way to help someone who after many years of programming, still doesn't understand boolean logic. &gt; over 100 occurrences of `method_exists` Someone needs to learn what an interface is. Also the prevalence of `} // if` is just cringeworthy. 
you can create a 1-to-1 encrypted mapping? i thought there was some overhead. with a 32-bit search space though, URLs will still be discoverable.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/bestof] [\/u\/allsecretsknown neatly summarises why most of society uses binary gender identification.](https://np.reddit.com/r/bestof/comments/6297xh/uallsecretsknown_neatly_summarises_why_most_of/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
~~I don't have time to format it properly right now but here's the inspection output:~~ [Here's an image of the inspection report](http://i.imgur.com/eierlrX.png) My original comment was intended as a joke to be clear.
You can't fix stupid if they're born with it. 
Find the person that made it and beat them over the head until they see why it's bad.
&gt; beat them over the head until they see why it's bad At this point, it might actually kill them before that happens.
I was looking over this code and thought it looked similar to my style. [Anyone feel like kicking me while I'm feeling down and old?](https://github.com/nzgeoff/Loader)
I may have misunderstood your point... Consider those scenarios: - your client send a request to a resuorce you are not authorized to access. - your client try to reach for a URI which doesn't exist. - you are trying to perform a POST on a resource which doesn't implement POST method. How do you expect the system to respond in those cases? 
I legit lol'd
This whole thread is part of a long standing feud between Tony and the Hall guy. I really don't know why the Farmer won't let it go. The class is 10+ years old and works fine for Mr Marston. 
So what about the people that identify as otherkin, like dogs, wolves, or even dragons? Are their world views not correct? Is their identity not recognized as real because YOU decided it wasn't? Because to them, that is their reality. This is why attempting to include and list all of the possible genders is quite simply not possible, regardless of your stance on the legitimacy of other genders. If you want to include genders other than Male and Female, you need to include them all. Because if you don't, then lumping all the other "unrecognized" gender identities into the 'other' category brings you back to the same problem you were trying to solve. Quite frankly, it shouldn't matter what you identify as. That is your own personal choice, and you shouldn't be segregated or oppressed because of that. But there is reason why we don't have bathrooms for every gender, it simply doesn't make sense to do that. (Not saying have a bathroom for each gender makes sense anyways). 
Yeah that's kinda the point. 
Aren't trans people relatively easy to pick out though? Unless they're having a rather "cisvestite" day there are going to be mixed signals as far as fashion/preening. If the face says man, but the clothes say woman, it's safe to assume they're a trans woman. A warlord should look at least sorta like a warlord, right? 
Can I use this to spam facebook and twitter with more marketing, religious, and political propaganda?
Will this be wise?
Thank you and sorry for late reply 🙏🏻✌️
Yes, the class is utterly terrible, violates every principle of software engineering, is deeply unmaintainable, exhibits a weak grasp on boolean logic and how basic control flow constructs work, disagrees with any sensible style guide that has ever or will ever exist, trashes the SRP so hard that it's almost painful to look at, and reads a bit like the result of just running the last twenty Daily WTF posts through a shredder and then having a blind man glue the results back together randomly. The `is_True` methods alone are a seriously indefensible WTF. (Even their capitalization makes no sense; it's like the author couldn't decide between snake case and camel case, so just went for both at once.) On the other hand, nobody but [the author](http://www.tonymarston.net/) thinks code like this is a good idea, and the author views the fact that literally every developer in the world disagrees with him as some sort of perverse validation, which means this entire thread is just a pointless circle jerk. Nobody is going to read through this and learn anything, or change their mind about anything. I vote we go back to arguing about more useful things, like DI versus service containers. :)
And you think now it's time to publish his work and denounce him? Good luck with that strategy.
The authors reaction: &gt; Oh wow! He likes it enough to give it a [stick figure booty dance](http://i.imgur.com/FIDpjt0.png)!!
Tweet seldaek to fix packagist. 
Good suggestion! I wasn't sure how to implement it and your recommendation sounds very sense.
Haven't they fixed a lot of those issues now?
Holy shit, I'm in tears.
&gt; what are Ve, X, Xe, Ze, Ae, Ey and Fae? I'm not sure, I've heard of ISO/IEC 5218, which lists gender as: The four codes specified in ISO/IEC 5218 are: 0 = not known, 1 = male, 2 = female, 9 = not applicable. And I saw the Missouri state government suggested some expansions to it: [PDF]CC - Gender Code Table https://oa.mo.gov/sites/default/files/CC-Gender_CodeTable080305.pdf Possible additions could include, but are not limited to the following: 3 = Male and Female 4 = Male from Female 5 = Female from Male But I'm not sure how far we have to go past that? Maybe further? There might be a gender in your physical body (possibly post surgery? or post hormones?) that's different from your chromosomal gender, and that might be different from your "head" gender (what gender you think you are?) versus social gender (you might want to have a lady's role in society? wear their clothes?) I .... can see a zillion ways to split hairs on this
True. MsSQL spits out "string or binary data would be truncated"
If this is stopping them from writhing PHP, they just do not like it enought and can kindly fuck off. 
And by rewrite, I'm guessing you mean break it up into smaller classes isolating functionality into smaller chunks with one master class?
We can totally work with this. First i would control+f and trash // foreach // if , etc I would put a decorator class in front of it and log the fuck out of any calls going into that class. I'd probably get enough fake calls to get close to 100% code coverage. Next copy paste this class into hideousMonster.php and lessHideousMonster.php I'd recommend keeping them both and unit test them both at the same time, comparing the results on a behavioral level. Find any 1 off functions and extract them and unit test them. Inject the new class into this one in the constructor and just set the 1 off's to turn around and call that class for now so the public interfaces are happy with it. Next figure out the *base SQL queries* being made, such as insert record or delete record.Give these the same treatment. Then back up and see who the calls are, e.g. for insertRecord we have three technically: function insertOrUpdate function updateLinkData function insertMultiple Now that the easy part is done these custom processing objects are probably going to fuck shit up pretty bad - good thing we have unit tests. Make transformers out of these classes since that's likely what they are doing and test those. At this point you should be feeling really good about the progress you've made - but reality will soon set in that it was all a waste of time. Slowly you'll realize that you've hit a standstill because it turns out all of the code using these methods has actually been reading those public vars at the top directly and causing some change because of it. You'll try your hardest to patch things up only to keep finding inline logic at line 4750 in a view template is actually reading the $pdf_filename to see if Cindy was the user because she wanted her custom built pagination to show the first and last entries of the tables and now it's throwing a jqueryUI error. Janice just called in and it turns out upload_maxfileize was being adjusted for her because she likes to upload images as BMP's still and 'it just works'. Likewise paul in particular wants to have his default order by to use month only but leave the days unsorted because it was that way when he started working there. You're about three and a half weeks into your refactor and realizing now that this class can't be refactored because it's not a class - it's actually an electron because every time you directly observe its state it turns out it's something else. You log into FTP and roll back all your changes, remaining hideousmonster.php.old.old.oldest.olderrrr back to Core.php, close the window, and cry. edit: holy shit my first gold! Thanks stranger! 
Your SEO guy doesn't seem to be very good then...? The server logs show all your 404s. Any automated tool will most likely fail on non-static links that are generated by javascript, or based on user input, or browser properties like user agents, accept language etc.
LOL
/r/phphelp
This is like the Atheism Object Pattern. It proves there's no God.
WHY!?
Assuming it was written in 2005 indeed, I'd say this class isn't terrible as it looks. We didn't have interfaces, namespaces, and all kinds of php 4 pass-by-value weirdness. It violates many programming concepts nonetheless. I recently had to maintain some Wordpress sites (had no choice), and I have seen worse 2017 code with huge class that they have shoved procedural code into multiple methods, and several lines HTML with open/close php tags.
And shift it into a proper framework? I am thinking myself that this was written by someone who heard object oriented programming was what they should be doing but never bothered to look into why object oriented programming was what they should be doing. 
It's honestly not that bad. I've seen worst code that than this. This should be able to refactored into small classes. I would have one class that would relegate methods to other smaller classes. 
As far as most of my online interactions are concerned, no one will suspect me of being the primary user on my PC because I'm an African-American Inuit Pacific Islander, the only one in my area too
What about 80s fashion lovers?
This has the single responsibility of being a working back-end. I see nothing wrong here.
Set your inspector to PHP4
It formatted and responded correctly doesn't means the request was successful. Using correct http status code makes our response could be handled more uniformly. If the system response with 404, that means the resource didn't exists. If it response with 401, that means the client need to provide authentication. If it response with 503, that means there something wrong in the server. The client knows what kind of error it get, even without parsing the result body looking for error type. Using http status code is like using an exception and try-catch in our code, where using only 200 on error is like using return false. The former bring more detailed info than the latter. But yes, we need to handle some cases where the client only able to consume http code 200, like flash player, or jquery (as your info). CMIIW
So long as you don't break his language by using php 7
This may be just me and it probably really doesn't make a difference but I would split the functionality into two projects. Create a library project that has all the classes that do all the work and create a bundle that strictly integrates it with Symfony.
This right here is the best reply on the thread. 
Like, people mimicking hair bands like Motley Crue? There's a difference between everyday female attire and what [Lexxi Foxx](https://en.wikipedia.org/wiki/Steel_Panther) does.
I... cannot disagree
You're right. I was being presumtuous and reactionary in that post. I supposed I partially covered that with cisvestitism. My best friend frequented queer activist spaces as a non-cis asexual so I met many of his trans friends and it gave me a good gauge on what traits to look out for in trans people, widening who I can identify? Generally all of them practice some form of consciously presenting as the gender they identify as, unlike a tomboy or a genderqueer type.
slowly refactor it with unit tests
the same thing I did when 1/2 the internet died with s3 went down. I went home and drank beer.
If by maintaining you mean debugging then, well.. with the respect that it deserves. Just trying to modify the little bit that causes the issue and hope for the best. Good luck.
Would read again. A++++++
Needed that, 🤣
You don't. You find another job. 
&gt; Well according to the author of this class, it follows Uncle Bob's SRP closely. He claims that breaking it up into smaller classes will result in low cohesion and violate encapsulation. ~~Maybe he's unreasonably worried that PHP doesn't support class visibility, so if you move away any kind of functionality into a separate class (and by necessity make part of the interface public), then that breaks encapsulation.~~ ~~We use a convention about this, by putting classes that shouldn't be considered part of the public API in sub-namespace called "Internal".~~ ~~So say \Vendor\Project\* is for public classes and \Vendor\Project\Internal\* is for internal details that should be considered hidden and encapsulated.~~ I just checked the code. It uses PHP4 style code, without a *single* protected or private property or method, the exact opposite of what someone worried about **encapsulation** would do. Disregard all I said. The guy is not worried about encapsulation, he's just damn ignorant. Tell him to catch up on what's been going on in PHP in the last nearly 20 years.
Alright then.
Saying you're a wolf isn't a gender distinction it's a species one.
The fact that you showed this to him, and he replied, is a bit legendary.
"What's the responsibility of this file?" "To have all the responsibilities" 
Or if there is, that he's planning another `sudo rm -rf *`
I'd assume that project is overly satirical.
Playing devil's advocate on the first bit, but is it possible that at some point in time there could be/could have been code in the if-true blocks? They may just be remnants of past behavior, rather than ignorance of boolean "not" functionality. In which case, they still need to get cleaned up, but it isn't *as* cranial-trauma-via-repetitive-facepalms inducing
Yes, this will all be wise propaganda ;)
I didn't look too closely at the exact use case here, but `method_exists` is usually a sign that you're looking for an object with a certain behaviour. You should be using [polymorphism](https://en.m.wikipedia.org/wiki/Polymorphism). 
Non-Mobile link: https://en.wikipedia.org/wiki/Polymorphism *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^50016
I've seen this happen before when the block was so long that the starting `if(){` didn't end up on the same screen page as the closing `}`. But yeah, with an IDE, that's not a thing to worry about anymore.
That's because you're not supposed to send business data via GET request to the server. Only to retrieve data, based on the request.
Basically because they're "status" codes, not (all) "error" codes. They inform you of the server's reaction to your request. They're not meant to satisfy your client code. In other words: they're a way for the server to express itself, as Madonna would explain it. Also, nobody is preventing you from handling a 404 in the jQuery "error handler" gracefully.
Does it matter? It's not there. Now, if the server wanted to tell you the new address, then the appropriate response would be a 301 redirect with a `Location` header pointing to the new URL. What I'm saying is: That's all up to the server.
Ok, but yeah, doesn't sound pretty. Funny enough, this works: `spl_autoload_register('__autoload');` when overriding the default one.
&gt; Look at http://hashids.org/ for a concrete implementation. Which says: &gt; The primary purpose of Hashids is to obfuscate ids. It's not meant or tested to be used as a security or compression tool. From their example, it's clear that there's some data leakage: $hashids-&gt;encode(1); // jR $hashids-&gt;encode(2); // k5 $hashids-&gt;encode(3); // l5 $hashids-&gt;encode(4); // mO $hashids-&gt;encode(5); // nR Also, this: &gt; the algorithm tries to avoid generating most common English curse words by generating ids that never have the following letters next to each other: &gt; &gt;c, f, h, i, s, t, u Means that there's possibly some cryptanalysis that can be done to work out the key. &gt; I don't know why is everyone downvoting him when he is correct. Because having a randomly assigned identifier to each record, and then using that, means that no matter how many outputs you observe and no matter how many inputs you're allowed to get the system to decrypt, there's no underlying key to attack and thus no relationship between the identifiers. Thus no way to predict identifiers.
You should use multiple interfaces. For the functions that need to handle CSV stuff type hint your CSV interface, and so on for the other 2. 
Nobody the same problem? I really dont know what stupid mistakes I do! thanks
 class ExampleA implements CsvParser { ... } Then in your handler class, public function parse(CsvParser $parser) { ... }
I do not understand how that matches my example? Could you mod my example to fit in what you're trying to say... No methods should be created (that is the purpose of method_exists).
The article doesn't mention the using specific MIME types for every resource. How can clients know what to with the resource if they don't know the resource represents. JSON is not specific enough here, that just declares the resource is a bag of data serialized in JSON format. Then, HATEOAS is mentioned as something that is perhaps nice to use instead of something like a must-have. To me it looks like the article is more about creating application specific API's using HTTP. Not about web scale API's that can be used by a large collection of clients. I hope the coming articles will include tooling that covers all aspects that make an API a REST API.