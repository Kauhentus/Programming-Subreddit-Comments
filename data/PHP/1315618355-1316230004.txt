So what use is this code?
Well, looking at it, I would hesitate to call it a useless WTF, because I would prefer to give constructive criticism. I have none at the moment.
Nobody is claiming this is good or useful code. It sparked a discussion that informed me and hopefully others, that is all.
My intent is never to hurt but to speak freely. Without emotion or body language it's very easy to take things the wrong way. I appreciate your quest for knowledge. Also, check out some ORM libraries. You might be able to find something to your liking. :)
&gt; I don't see how this will allow you to be agnostic. You will have to implement a template class which understand the calls made against it and which can parse the different dialects used for loops and such. The idea is not to rewrite the template engine for all template syntaxes but simply to call whatever class is necessary. Of course you wouldn't call it until you use it. Autoloader.
if(strpos($haystack, $needle)) //found
Oh, and yeah, I definitely agree with the glorified function bit. I shouldn't be putting everything in the constructor, I know, but I'm not sure how else to do it. This dispatcher thing looks like what I need
Well I don't really consider that being truly agnostic, that's just including several template parsers as plug-ins and then having a wrapper to load the right one. You would still require the user to specify which plug-in to use, but all that said then it's a good way to do it.
I really hate that it advocates [bindParam()](http://php.net/manual/en/pdostatement.bindparam.php) over [bindValue()](http://php.net/manual/en/pdostatement.bindvalue.php). While bindParam() is good for possibly saving a little bit of memory, it is absolutely atrocious for clarity. Novice users who do not yet understand [references](http://php.net/references) get in trouble with this a lot. It is far clearer to see what the code flow is doing if you perform your binds using bindValue() inside the loop.
Remember that strpos returns 0 if the string is at the start of the string. So you need to do: if(strpos($haystack, $needle) === false) { // found }}
 if (strpos($haystack, $needle) === false) { // Not found } FTFY
Case sensitive: if (strpos($all_of_text, $specific_text) !== false) { // String was found } Case insensitive: if (stripos($all_of_text, $specific_text) !== false) { // String was found }
The first day I found out about this, I shed a tear of joy. 
can you tell me what I am doing wrong? I'm trying to check for the specific entered word from the inputted text from a HTML file but I can't seem to get it working. note: textbox1 and textbox2 are from the HTML file that are input types. &lt;?php $text = $_POST['textbox1']; $text2 = $_POST['textbox2']; $pos = (strpos($text, $text2) !==false { echo "true"; } ?&gt; edit: probably the entire thing is wrong because I think I have no idea what I am doing.
REQUEST_URI has nothing to do with Apache and if you reverse proxy to Apache then you would pass the URI along - in which case Apache will set REQUEST_URI correctly.
Try this: http://pastebin.com/Vf3JmqTG
Awesome, I think it works.
Thanks man. 
Email forms are so incredibly easy, why would you even care?
where's the if statement
It's really no more complicated than it sounds. * A Front Controller is your point of entry to the application. Its the script called by the web server. Usually it's the only script called, so all requests must pass through it. From there its job is to bootstrap the environment, then give the raw request to the Router and hand the Router's output to the Dispatcher. * The Router takes the URI and dissects it to determine which controller should receive the request, if any. Optionally the Router may translate the request into a message that can be more readily understood by the dispatcher and/or the controller. * The Dispatcher takes the packaged information from the Router and does the actual legwork of loading and instantiating the controller. It passes the translated request to the controller and receives the controller's output. It might then dispatch back out to the client or call another dispatcher to do that. These are typical scenarios, but the actual implementation details may vary across frameworks/libraries. There are many wrong ways to do this but there is no one right way. The reasons why it is a good idea to keep these processes from overlapping are many. But perhaps most importantly [separation of concerns](http://en.wikipedia.org/wiki/Separation_of_concerns) is a core principle of good software design. That link is the reading material you should start with. From there I'd recommend poking around some popular frameworks to see how they implement their routing. But keep in mind that concepts like controllers and routers are just software patterns and are by no means the way you have to do things.
Oh I see. Interesting, thanks!
Do you have any recommendations for which frameworks I should take a look at to see how they implement it?
take a look at the slim framework and node.js routers. you'll see why you don't really have a router here...
Hmm my memory is a little hazy. Zend Framework's was pretty good as I recall. Symfony, Lithium, maybe Kohana. CodeIgniter's wasn't all that impressive but it's been a long time since I saw their implementation. Pretty much take any well-established framework with a good development team behind it and you'll probably find some good, well-documented code to peruse.
This [formmailer](http://www.gentlesource.com/form-mail/) is pretty good. Has injection filter, protection against automatic spam and everything.
Cheers
This is what I cooked up: //////////////version 1: fizzbuzz: echo $i&lt;100?++$i?($i%5&lt;1xor$i%7&lt;1)?$i%5==0?'fizz':'buzz':($i%5&lt;1&amp;&amp;$i%7&lt;1?'fizzbuzz':$i):0:die; goto fizzbuzz; //////////////version 2: for(;++$i&lt;100;)echo$i%5?$i%7?$i:'':'fizz'.$i%7?:'buzz' pretty sure it can go shorter...
Symfony have a very good manual. Even when they're explaining how it works you can get a good idea of how to write your own like they've done it without looking at the source code.
If you are using WordPress, *nothing* beats [Gravity Forms](http://www.gravityforms.com/).
Don't forget, that PHP has amazing documentation that you can find at the PHP manual. Here is the section on strings: http://www.php.net/manual/en/book.strings.php Also a quick google search for "php search string" brings up the manual page for the function your looking for http://php.net/manual/en/function.strpos.php
I would highly recommend you read up on PHP syntax before doing anything. &lt;?php $text = $_POST['textbox1']; $text2 = $_POST['textbox2']; if (($pos = strpos($text, $text2)) !== false) { echo 'True'; } ?&gt;
Never used Gravity Forms, but I have used Contact Form 7 a lot, which is free.
They're not easy to do correctly. All of the regex to check for a valid email, the checking for %0 and all of those injection methods, etc.
I completely rewrote my Router class using the feedback from the other post, is there anything left to improve? I also created a Dispatcher class, but that's really really simple and basic.
lines 186 and 192 - I think you have one too many equals
I think my programming style is somewhere between drunken leprechaun and incoherent lunatic.
I guess this comment is more along the lines of readability and personal subjectivity more than pointing out a bug but... Lines 73-80 in matchRoute. It looks like $match is initialized to true and then only ever potentially set to false, which is then used to kill the while loop. The way you're iterating through the array why not just use a foreach($arr as $k=&gt;$v) loop? Upon the first false comparison just return false. If you happen to make it through the entire loop then return true? I just feel the foreach construct makes it more clear you intend to walk through the entire array and then you don't need to worry about maintaining your count() boundry variable, or incrementing your index variable. I just feel that if there's not a good reason to write more lines of code you're better off with less. Again, not trying to say to say your current implementation is "wrong", just awkward. Perhaps you feel my suggestion is more awkward, in which case carry on.
Line 118 $countAction = count($action); $countAction isn't ever actually used; kill the assignment
Likewise public function generateURI($controller){..} is empty and never called
This is the same thing as [cake bake](http://book.cakephp.org/view/1522/Code-Generation-with-Bake). 
Don't take this the wrong way, but it looks like procedural spaghetti lightly wrapped in a class. The deeply nested conditionals make my eyes hurt. And I don't see any reason for exposing all internal variables. Basically, it's a class in name only. 
I don't want or intend this to be a smug comment, especially because I will not be offering an alternative, but I believe you are overcomplicating things here just a bit. ~~A lot~~ a few of your methods don't seem necessary and could probably be combined. It could just be that there are other things going on out side your router that we are not aware of but if thats the case then your probably doing it wrong there too. 
- stop using public variables, they break the encapsulation - do not declare methods as `public`, if they should be called only internally - use `protected` - don't do work in constructor, it makes code [hard to test](http://www.youtube.com/watch?v=wEhu57pih5w) - the code is not [DRY](http://c2.com/cgi/wiki?DontRepeatYourself) , refactor it all and [make methods shorter](http://vimeo.com/13702091) - too many [responsibilities](http://en.wikipedia.org/wiki/Single_responsibility_principle) for `Router`, some of it will have to go in different class - too many `return` in `compareRoute()` and `route()` methods It is better then the old version but there are a lot the things to fix.
There's no real alternative to eval, with the exception of writing the code to a file, and including it. Before doing that, you should consider just how *sloooow* that approach is. PHP can't compile the included file into op codes before running it, and op code cachers can't cache the op codes. Even if they do, they'll likely get thrown away. If you're really intent on taking this approach, you should at least consider some kind of caching scheme, eg not writing out the same code on every page invocation.
I'm curious about a few of your prerequists. * Why does the file size of the framework matter? Even the cheapest shared hosting accounts give you gigs of hard drive space. The size of the framework shouldn't matter. * What do you consider a non-complicated directory structure? Most of the frameworks have complex directory structures, but the developer only needs to play around inside of a specific directory (/app for example). As the end user, you shouldn't have to worry about the rest of the framework structure. * Why do you want a templating engine, when PHP *is* a templating language?
Extract has it's uses. Especially with long parameter lists, with most of the parameters having default values. Here's an example: function fooBar($first_param, $second_param = null, $third_param = null, $fourth_param = null) { if (is_array($first_param)) { extract($first_param); } } Now the developer can call the function in one of two ways: fooBar('first', null, null, 'forth'); or fooBar(array( 'first_param' =&gt; 'first', 'forth_param' =&gt; 'forth' )); You may ask, why? Why not just force the end-user to choose one method or the other? Well, that's like saying why have *call_user_func()*, and *call_user_func_array()*. Sometimes all of the parameters you want to pass to a function have "arrived" as an array. Sometimes they haven't. There's also dealing with legacy code. I have a function that's used hundreds of times in my code base, and it eventually grew to have 10 parameters, all which had default values except for the first. It very quickly became a drag to call this function, because changing the default value of the last parameter meant typing out all the default values in the function call, and refactoring the whole code set to have the function take a single array wasn't an option. Using *extract()* saved the day. It's use isn't insecure, as I'm using a closed-source, custom framework. The malicious user would have to have intimate knowledge of the source code to wreak havoc. By the way, I didn't think of this technique myself. I'm pretty sure I picked it up from the Zend Framework. So it has some "official" support.
I can't imagine this being a user-land function, as it would be very slooow.
We've stopped considering certifications when hiring. We've found it doesn't say anything about a person's talents. In fact, we've found that those people most proud of their PHP certification are the least talented.
Wow .. this is just horrible. - using global variable - huge cyclomatic complexity - computation in constructors - extremely long methods in classes ( 200 lines+ ) - undeclared variables in classes - SQL at all levels of abstraction - violations of encapsulation - wildcard selects in SQL - etc. You really should not publish code like this.
This isn't my code yet, it is just a straight fork of [OpenCart](http://opencart.com) still. I'm aware that it's still very bad and that is why I'm forking it. Alpha is just that the branding has been rolled over and some comments added. I've been buried in the code base of OpenCart for the last month solid, I really know how bad it is in there. To say it has made me rage is an understatement. Edit: I really can't agree more with your points. The more I've delved into the OpenCart code base the more horrified I've become. Edit2: It scales horribly too. We've had a nightmare of a time with performance issues. 
I guess whenever I encounter stuff like this I just think of whether it's even worth it to work from the existing product or just scratch it and either use something else or write something. Really if all the things that teresko points out (I'm unfamiliar with OpenCart) are in that code, there are probably gotchas that you'll pull your hair out over (I know I've done it in the past). I would just analyze whether it's really better to do this or spend the time rolling your own (then you get the pride of doing it as well) or using something else.
And Gravity Forms is a 1000x better. I used Contact Form 7 at first. Now I have a developer license of Gravity Forms and use it for everything.
Change stuff like this: if( isset($this-&gt;URI[$element]) &amp;&amp; strcmp($this-&gt;URI[$element], $routePart) == 0 ) { return true; } else { return false; } to: return isset($this-&gt;URI[$element]) &amp;&amp; strcmp($this-&gt;URI[$element], $routePart) == 0;
I agree with troymccabe, you are probably better of creating a functional design based on openCart and reimplementing it in a proper way. It's perhaps a lot less fun then just diving into the code, but it will result in a better product. Whether that is worth it or not of course totally depends on your goals for the project. 
Yeah, true.
It reminds me of the 'lazy man's MVC' framework I used to use around 2006. This could serve as a decent learning tool, but it will not help anyone learn modern or best practices. If you've been following the trends for the last 6 months, php 5.2 is dying and php 5.3, 5.4 are becoming standard. This means you should be declaring all functions as public/private/protected. You should be using namespaces over Folder_File naming conventions. You should be using PDO/mysqli with Prepared Statements over mysql. 
as most of the code here , this is pretty bad - singletons and procedural programming all over the place - mixing creation of object with logic - doing computation in constructors - no understanding of MVC - view is not just a template - model is not an abstraction of table - there is no place for html in controller Ehh .. delete it , pretend you never wrote it and start from scratch. Learning about Dependency Injection, understanding Model2 MVC and SOLID principles would be a nice start.
if ((boolean) strpos($haystack, $needle) === false) { // ~~found~~ not found }
Sorry, but that is wrong. You want it to differentiate between 0 and false, so if you're casting to a boolean, 0 will be false. Consider the following code. $haystack = 'I am testing away.'; $needle = 'I'; if ((boolean) strpos($haystack, $needle) === false) { echo 'String not found.'; } else { echo 'String found.'; } The output is 'String not found,' even though I is obviously the first letter. The reason for doing === instead of == is because it has to be a type-aware comparison to differentiate between 0 and false which, if you're not taking types into account, are equivalent.
I'm going to have to concur with teresko here, although I will say one thing about it: I can see it working towards the goal of "beginner friendly". That being said you should still scratch the entire thing because that seems to be the only thing that it has going for it and the ends don't really justify the means here, so to speak. I would recommend downloading the source to some other MVC framework and reading through the entire thing before you try this again. CodeIgniter might actually be your best bet, reading through the core functionality there can be done and comprehended in under a day.
Any thoughts on why this would be?
Thank you for doing this, I watched the repository on Github last night as soon as I saw it and plan on contributing to it eventually :)
I do a lot of ZF and Drupal, so I just use what's baked in. Zend Form is a beast, but Zend Validate along with Zend Form is pretty nice imho.
I understood Cakephp in a few hours. I'd consider myself novice, based on experience. Also, why are you using mysql_ functions? They're *deprecated. I also challenge you that it would not take me a week to teach kohana to a group of developers, given I haven't looked at it before. 
That is kinda what I was thinking as well, but I'm not sure how else to do a Router class. I tried reading some examples, but I find it really hard to follow other people's logic. I figured the main bit would be the routing, which needs to be fairly procedural, as it decides what to do? Maybe I'm wrong, if so, help? Cheers
Cheers, not sure how I did that :S
Thanks! A few questions before I go ahead and watch those videos, sorry if they get answered there, Where should I be doing the work instead? What responsibilities should the Router not have? Cheers!
I highly recommend using Symfony2 framework.
You think OpenCart is bad? I'm working on an oscommerce based site right now. Oh. My. Gawd. I had no idea. It's... it's haunting.
Well the Router would actually return the name of the matched controller to call, while the Dispatcher would load that file an execute the controller.
Which brings up the issue... is there a decent shopping cart solution out there? The most robust I've used is Magento but it drove me nuts to be honest and it is dog slow on shared hosting. 
Gotcha, figured that out after a bit of googling, and I think my new (updated) class does that. Thanks!
That doesn't stop scripted actions. Doable with a simple Javascript as well. document.getElementById('captcha').value = eval(document.getElementById('captcha').parentNode.previousSibling.childNodes[0].innerHTML);
Why is strcmp used? Wouldn't this be even shorter: return isset($this-&gt;URI[$element]) &amp;&amp; $this-&gt;URI[$element] == $routePart
Not terribly important and possibly a typo, but depreciation is used to describe a decline in value. Deprecation is mysql functions being replaced by abstraction layers or pdo. Don't mind me if you already knew!
Already forked it, started doing some structural leg-work, some cleanups, standard stuff. https://github.com/FilipeD/DaringCart This isn't going to be an easy task.
Knew the meaning, didn't have the right word. Thanks :)
I am proud of you for what you are daring to do here. Opencart is a great implementation on the UI but yes it badly needs a fork and then a rewrite.
Well .. Router is a thing which manages different Routes.
But isn't that what I'm doing?
No , what you have is a huge monolithic Router. Parts like checking if route matches some pattern should be delegated to a different class. What if you want to change the structure of the routes ? In this case you would have to rewrite the whole reouter.
If your application is in /myapp/, see what happens to /myapp/myroute/bleh/myapp/foo/ 
I spent a couple months working with OC. They really need to use static methods rather than giving a referance to each class. Also look at the products class. Get products does an sql query to get a list and then does a query for each product. That was one of the first things I fixed.
Oh, I see. How would I delegate it to a different class? Like, how would I couple those classes together, etc?
Don't listen to these guys. MVC is an ever changing model. It evolves, in many directions. I wouldn't delete it or scratch it out. Keep it around as a learning tool. However if you want your students to come away with something marketable, often times, just learning the language is the first battle, but being taught off of someone's custom framework will hurt them in the end because they will only be familiar with your framework, just like in school students should be working extensively with libraries such as boost so that later on if they get a job they will be able to actually write some real software instead of only knowing how to use the "learning Crutches" they were taught to use. If you want something simple, you should give PHP Fuel a shot, i think that it's one of the easiest of the frameworks I've looked into to learn off the bat. CI is very Old Style MVC and people are moving away from it in droves because it doesn't have support for more modern php 5.3 standards. http://fuelphp.com/
I assume the vast majority of the internal code will be scrapped as time goes on. The best thing about OpenCart though is it's front end. It's pretty slick to use. Just horrific to code in. I did consider just starting completely over. But I felt that even with it's flaws the front end was worth saving at least. 
I'm scared to know, haha. My personal favorite issue so far in OC is in the cart and confirm files the total is calculated and then set to zero before the total add ons are called. So if you modify the pricing outside of the database your new price is ignored unless you modify it in each of the total modules as well. Or do what I ended up doing and scrap the total module system and implement my own version.
I'm hoping this becomes decent. Scalabilty is a major concern for me and OC is a nightmare as it scales. It's fast enough as a standard install on shared hosting with a low user count. But running on a dedicated server with a dedicated mySQL server getting a pretty good (200+ users) sustained traffic it croaks hard. 
Thank you! No, it's not going to be easy. Hopefully it's worth while. I've been looking over your fork for the last hour or so and it's making some excellent strides. 
I had to change that as well, the mySQL in general is pretty bad. As someone else pointed out there are full selects among many other issues. On a rather large install it hammers our poor database server. 40k page views generated 80gb of outbound data from mySQL. It's insane to say the least. 
&gt; MVC is an ever changing model. Care to elaborate? It's a pretty well defined pattern. The only "contending" pattern I can think of is [MVVM](http://en.wikipedia.org/wiki/Model_View_ViewModel)...
Give a try to PrestaShop - it's very popular in Europe but almost unheard of in the US. It has mostly the same features as Magento and is very fast on any hosting. On the downside the codebase is a bit ugly though it is on the way of improvement.
Wow I feel retarded, cheers
My implied meaning was that not all MVC is implemented exactly the same. It's more so an ever changing implementation. Compare cakePHP to CI to Symphony to Yii to FuelPHP to Kohona, they are all doing the MVC different, but similar in structure to the basic MVC idea. Software is always going to be different since many of these frameworks have the proverbial "Comb Over" baggage of their growing pains from their beginnings to their most current code. symphony 1.x to 2.x, CI 1.x to 2.x
Thanks for pointing that out, I got mixed up. What I was saying is that your original won't work. Even if strpos finds something the type comparison (===) will always evaluate to false because when strpos() finds something it returns an integer, not a boolean as demonstrated here: richard@richard:~$ phpsh Starting php type 'h' or 'help' to see instructions &amp; features php&gt; $string = "Find me!"; php&gt; echo strpos($string, 'me') === false; php&gt; echo strpos($string, 'me') === true; php&gt; echo (boolean) strpos($string, 'me') === true; 1 php&gt; echo (boolean) strpos($string, 'me') === false; php&gt; This is why I typecast everything where possible to avoid stuff like this. ;)
Well, Linus doesn't have this kind of problem with Linux kernel. It's look like they want to use git in old svn way.
A router manages routes. That sentence alone should give you some indication that they are separate things. You could take it a step further and create a URI class. [Separate your concerns](http://www.ibm.com/developerworks/opensource/library/os-php-objectorient/).
Everyone who writes their own framework seems to think you can get away with a singleton database class. You can't. An even slightly complex app can grow to need more than one database connection and then that whole aspect of the design will need a re-think. Plus http://misko.hevery.com/code-reviewers-guide/flaw-brittle-global-state-singletons/ As people have mentioned mysql_ is deprecated. What they're not telling you is that it's deprecated in favour of mysqli, not necessarily PDO. It won't be a big deal to switch over. There's some stuff I'm glad to see in there, such as: class DatabaseResult implements Countable { Oh, and in https://github.com/renownedmedia/sleekmvc/blob/master/system/Response.php: exit(); // is this a good idea? My answer would be no, just have it handle the redirect. The exit() statement essentially makes the function hijack the application's flow control. That said, we have an identical function at work, it does its job fine, and I'm splitting hairs because you asked! In Autoload.php: spl_autoload_register('Autoload::loader'); Really this registering should occur wherever you're bootstrapping the framework and not in the class declaration itself. Same goes for the error handler. Splitting hair again though: having code executing in a class declaration file fucks up testability is all. I didn't find an exception handler being registered btw. Would be good to have something catching exceptions and routing them to action_500. class ExceptionClassNotFound extends Exception {}; That line doesn't need a semicolon at the end (plus the class seems a little pointless)! People are shitting pretty heavily on this work, but there are some smart design decisions in there in my opinion. One of them is adding cookies to an overall response object instead of just sending them as-and-when during execution. For example, users attempting to login shouldn't receive their session cookie if the script is later going to error out and display some sort of 500 Internal Server Error message about unexpected downtime. 
MVC is actually fairly set in stone. A lot of PHP framework call something which is not MVC for MVC because if they don't then all the little programmer nerds out there scoff at them as if they're not in on the cool thing.
I like to create a way for default dependecies. Like so: public function __construct($requestURI = '', Config $config = NULL) { if (isnull($config)) { $this-&gt;config = new Config(); } else { $this-&gt;config = $config; } Saves you some work, makes code less messy, without breaking the idea behind dependency injection.
Sure, if a route is complex enough. If it's basically just one or two variables and a method that don't have any use or meaning outside the Router class, I think the benefits of branching it off in its own class are discussable.
Uh, actually try out the code. It works fine. I think you're under the impression that I ever tried to compare it to a `true` boolean, which I did not. Besides, you're using it in a very different fashion than what it would usually be used in. You'd be better off using ternary operators than echoing the comparison result, as it will never (and should never) actually evaluate to `true`. `echo (strpos($string, 'me') === false)?0:1;` works pleasantly.
&gt;Everyone who writes their own framework seems to think you can get away with a singleton database class. You can't. An even slightly complex app can grow to need more than one database connection and then that whole aspect of the design will need a re-think. That's why I write a combination of a singleton and a factory. `core::sql('master')-&gt;prepare("...")` The connection "master" is defined in the config. `core::sql('slave')-&gt;prepare("...")` Slave randomly selects from the array of configs named "slave". this works very well, is easy to use, and it's scalable 
Well, I looked at this but it lacks 1 critical feature that other shopping cart systems have to make it an out of the box solution... authorize.net credit card processing. That's the main card processor in the US and (if I recall correctly) it's a paid module with PrestaShop (unlike with OpenCart, Magento and others). Yes, a developer could roll their own, once they grok how the PrestaShop system integrates such a thing, but it's a barrier that other carts do not have.
For the love of everything holy, use protected over private as much as possible. Somebody might want to extend your (in reference to the OP not jesse) class and use the parent's method. IMO, there is rarely a time a method NEED be private. 
You're right, thank you for addressing my idiocy.
Then you're going to have to double dip
This. Use protected as default. Make public if you want to use it from the outside and use private only when you really need to (mostly because of security)
Private: methods that are only used inside the class to support protected methods Protected: methods that do some logic and need to be accessed Public: getters/setters
I personally prefer using a registry instead of a singleton. The difference between them is that with the singleton pattern the class itself is responsible for handling the single instance requirement, while the registry pattern is usually implemented in a factory and as such you can configure whether to have a single instance or not in the factory call.
I've heard some people argue against the use of prepared statements but I'm not so sure that I fully understand the basis. If I remember right, the argument wasn't about whether or not it would work, rather, about the fact that the storage engine now became a controller as well. Can someone shed some light on this?
Its in there. You just need to enable it.
Give the poor guy a break. Maybe it's just for research purposes... Right? Right?
Weak tutorial. 95% of it is installing xampp, and when you finally get to the programming part it's hello world and the most basic variable usage example.
Yeah, I was trying to give a user with absolutely no experience a way to run a PHP script. Is it too basic for someone that has never seen code before?
Thing is, your tutorial doesn't really do anything the xampp documentation doesn't already do.
I suppose that's true. I'm doing my best to recall what was difficult for me when I first began long ago and trying to make it as easy as possible for a newbie. The whole port concept was completely foreign to me when I first began and I know I needed someone to hold my hand as I learned.
No idiocy, just well-intentioned attempt at helping. We all brain fart from time to time!
Uh, why not just use pure PHP or Twig? Why some weird-ass hybrid?
Actually it is pure PHP, but the reason I didn't just use something like Twig was - besides from thinking that it was a fun idea - that I'm maintaining a _lot_ of sites with plain PHP templates, where Chano can blend in nicely, extending the existing foreach statements with Djangos nice filters and tags.
There is no difference. Ultimately registry is just an array of singletons. You are still creating a global state an pretending that what you do is OOP. And please , people , stop using static factory methods. It creates a black hole of complexity in your architecture. Here are two videos for your education [Global State and Singletons](http://www.youtube.com/watch?v=-FRm3VPhseI) and [Don't Look For Things](http://www.youtube.com/watch?v=RlfLCWKxHJ0&amp;feature=relmfu)
This is really subjective. As others said, some companies will require certifications. For us though, we see three kinds of people: * The person with a really impressive college degree, which says a lot more than a certification that anyone can get. * The person who has been programming since they were 8, have been working since they were 14, and their experience alone speaks louder than certifications. * The person trying to sugar coat their lack of experience with certifications.
Great concept, and solid code. I'll probably end up using this in future projects :)
It's now out of the box in PrestaShop, has been added maybe 6 months ago.
You should check out 2.0, they dropped all of the PHP4 support. In any case, I'm not saying CI is the end-all be-all of MVC frameworks, I just think that the codebase is small enough for one person to read over and comprehend in a day.
Why not just use php as a templating language instead of rolling out your own? https://gist.github.com/1210058
He...is already using PHP - did you have a look at the code, or the examples, at all? It's a PHP class that implements the `Iterator` and `ArrayAccess` interfaces, and is packed with useful methods for common template operations. It's still 100% PHP.
Are you joking? There's a huge difference between forced global state and optional global state.
I don't know actually, I don't like the MVC pattern so I haven't really researched it.
&gt; Would we expect that to be more or less efficient than evals? Everything is more efficient than eval. And you will get no benefit from opcode caches, which lowers your scaling ceiling dramatically.
Ehh .. so many questions. This will take some time ... Lets start from the top. **Singletons** Instead of relaying on global state, you should provide to each object exactly what it need ( as per [Law of Demeter](http://c2.com/cgi/wiki?LawOfDemeter)). This way of coding is called [Dependency Injection](http://martinfowler.com/articles/injection.html). .. I already linked [this video](http://www.youtube.com/watch?v=RlfLCWKxHJ0) but it does a pretty good job at explaining it **Logic in constructors** Usually it means that you have to do some kind of operations before ( or right after ) creation of object. It must be primed for usage. This creates a problem when it comes to testing you classes. If you need to *work on* object before releasing in the application, it mean that you should use a Factory class ( do not confuse with static factory method .. it is kinda an antipattern , or at least , harmful ). **Views** In a proper (model2) MVC , Views are classes, responsible for presentation/display logic. They work with Models, choose which tempalates ( yes , view works with more then one tempalate ) to use and what to show to the visitors. All that HTML and other *content* should have been in a Views. **Models** Model is responsible for domain business logic. And should not care where the data comes from , or where you store it. Here is an example of how a method within the model should look like: public function someThing( $name = 'wintermute' ) { $mapper = $this-&gt;_mapper_factory-&gt;build( 'UserMapper' ); $user = $this-&gt;_object_factory-&gt;build( 'User' ); $user-&gt;ser_id( 42 ); $mapper-&gt;fetch( $user ); if ( $user-&gt;get_name === $name ) { $user-&gt;set_alias( 'neuromancer' ); } $mapper-&gt;store( $user ) } As you might notice, Model itself has no idea where the data comes from or where it is stored. It might be SQL, or noSQL, or XML file, or REST API or /dev/null .. model does not care. And if you want to change the storage medium, you provide different factory in the constrictor of Model. You might want to read about [DataMapper](http://martinfowler.com/eaaCatalog/dataMapper.html) pattern , or [watch a presentation](http://vimeo.com/21173483) from UKPHP11 whoch touches on the subject. **Controller** Controller is responsible only for changing state of M and V, and binding models to the view ( controller and view usually has 1:1 relation ). An it should **not** gather data from model and pass it to the view. That is the main difference between Model2 MVC and MVP. If you think about it, you should be able to see how such misconduct causes models to be replaced with ORMs , view to transform into templates and controllers attract both business and presentational logic. MVP is the most common pattern in PHP frameworks. 
Yeah it can be done, but it does take a little juggling and careful checking. Just made this as a quick proof-of-concept because I remember I enjoyed the "making it run like clockwork" feeling the first time around: &lt;?php class Result implements Iterator { private $result; private $count; private $index; public function __construct($result) { $this-&gt;result = $result; $this-&gt;count = mysql_num_rows($result); $this-&gt;index = 0; } public function current() { $row = mysql_fetch_assoc($this-&gt;result); mysql_data_seek($this-&gt;result, $this-&gt;index); return $row; } public function next() { if ($this-&gt;index &lt; $this-&gt;count - 1) { mysql_data_seek($this-&gt;result, $this-&gt;index + 1); } $this-&gt;index++; } public function key() { return $this-&gt;index; } public function rewind() { mysql_data_seek($this-&gt;result, 0); $this-&gt;index = 0; } public function valid() { if ($this-&gt;index &gt;= 0 &amp;&amp; $this-&gt;index &lt; $this-&gt;count) { return true; } else { return false; } } } Obviously doing a mysql_num_rows in the constructor is wasteful with memory but it keeps the code simple as an example.
&gt; Based on what you are doing you can either eval or write to a file and include it. Both are pretty much equivalent. They're not equivalent. Using eval is, literally, orders of magnitude slower than including a file. And that's before you even get into not being able to take advantage of APC, etc. Also, when an error occurs in eval()'ed code, the logged message doesn't usefully tell you where the problem is. So debugging is much harder.
Registry pattern usually has a static array at the bottom of it. So , what exactly is the big difference between said array and static $instance variable or a simple global variable ?
&gt; Using eval is, literally, orders of magnitude slower than including a file. Do you have some benchmarks on that? It seems the process should be identical -- parse the text, produce byte code, execute it. Why would eval be any slower? (Excluding, as you said, APC code caching) Writing to a file even involves IO which isn't required for eval. &gt; Also, when an error occurs in eval()'ed code, the logged message doesn't usefully tell you where the problem is. You can get information about where the problem is but it might require some translation to be useful. 
As far as namespaces/autoloading, you can mix autoloaders with namespaces. There shouldn't be much of an issue with that. As far as using PDO, it's most common to just extend the class. Here's a [link](http://stackoverflow.com/questions/2047264/use-of-pdo-in-classes) to an example. It uses a singleton, which isn't perfect, but it wraps the connection, and that's all that's really necessary. If you want to make your own model/ORM class, go for it, but PDO is fine the way it is. There's a variety of existing and 'battle-tested' Model/ORM's out there eg doctrine, propel, zend db, although doctrine2 is one of the few to embrace namespaces. It seems php 5.2 will be dying off completely in 2012, so you should really take that into consideration. Kudos for creating a framework, but as somebody mentioned, why not just use one of the other existing frameworks like kohana, etc? cheers!
I just watched that second video. I learned a whole bunch of stuff and am going to to be refactoring a whole bunch of code in my own framework as a result of watching it. Really grateful for you posting that link.
congrats =] you have done first thing from the bottom of [this comment](http://www.reddit.com/r/PHP/comments/kbfhm/looking_for_some_feedback_on_a_workinprogress/c2ixs37) .. next step: study MVC. It is a actually to most complicated part , because there is no single place where you can learn all about it. 
I was aware it was written in PHP, just like Twig and Smarty. There is overhead in the use of these templates. For example: PHP: https://gist.github.com/1210058#L27 Chano: https://github.com/runekaagaard/php-chano/blob/master/chano/Chano.php#L1530 Little more efficient my way. It could be more efficient to create a templating namespace, and then use functions from that namespace to common actions that become harry in PHP 
metauktralurker is right, this method is very simple to circumvent. I would recommend an image based captcha, they are easy to implement and hard to circumvent.
&gt;And please , people , stop using static factory methods. It creates a black hole of complexity in your architecture. Black hole of complexity? I have a dir called `core` and in it there's a file called `sql`, it's about 100 lines long. Feel free to point out the "black hole" or "complex" part.... The code is not only easy to use, it's also way faster and simpler than the alternatives.
A registry can be implemented without a static array. But regardless, the difference is that with a singleton the class itself handles the single instance logic and as such only that class can determine whether or not to force a single instance. This is stupid of course and the most typical example is a database class where the writer simply assumed you'd only ever connect to one database. A registry pattern, however, is not a singleton, it does not force a single instance of any object, rather, it's more of a per-request object cache (in PHP at least) where you can say "create this object and store it in the registry under "Database", then later on you can say "Retrieve the 'Database' object from the registry" and then get that same object, if you need a new one then you just create it and either not store it or store it as "Database2". A singleton removes a lot of other options due to forcing single instance, a registry does not. That's a huge difference in my opinion.
Very cool! I will def. give it another look, thanks so much!
Thanks for the tip. I am about to do a smaller ecommerce site and was struggling with using OpenCart and modifying it myself (struggling with the decision... I couldn't find a more suitable solution, though) so now I will give PrestaShop a fresh look.
MVC isn't just about separate views but rather about how controllers, models and views communicate between them. I find that for web development work I'm far happier with a more simple three-layer setup where I have controllers, libraries and templates. It looks a lot like MVC but the way I implement it the communication patterns are differed. Controllers use libraries to generate data which is then passed to templates to present. 
blitz for fast, smarty for complex.
Obviously you pay a (very small) price for encapsulation, but the alternative is repetitive and inconsistent code. If we didn't abstract common patterns we wouldn't have frameworks and libraries. On a side note, both Twig and Smarty implement a custom syntax, while Chano is merely a PHP class.
&gt; Do you have some benchmarks on that? Lazy, but a quick google found someone else who tried it. http://php.webtutor.pl/en/2011/06/13/eval-counterparts-in-php-how-to-do-something-wrong-faster/
I did some searching myself and I found the same page (and others but nothing conclusive). That benchmark is terrible! Of course performing an eval() in a loop is going to be slower than running pre-compiled code in a loop. But using eval() to define a function is exactly the same as calling create_function(). I decided to not be lazy and write a more accurate test comparing eval with including a file. The code is [here](http://pastebin.com/CtHVXuvp). The results are: #0 RESULT 100000, DONE IN 128.255230 #1 RESULT 100000, DONE IN 0.470552 That shows that including a file is 272x slower than using eval. And I am even using a code cache. Using a single iteration, gives the following: #0 RESULT 1, DONE IN 0.000131 #1 RESULT 1, DONE IN 0.000026 That shows using eval() to execute a template would be 5x faster than including the file. Changing the include to a require makes it worse. Changing the require to require_once makes it even worse still. (These results are highly dependent on how fast your system does IO) Then I decided to try another test that might be even more accurate. I did one iteration but I put 200 lines of `++$y;` in the file and in the eval'd code. This time the results are interesting. Before the code is cached, the result is: #0 RESULT 200, DONE IN 0.002853 #1 RESULT 200, DONE IN 0.000154 That makes 200 lines of eval'd code 18x faster than 200 lines of code in the include. However, all subsequent runs (because the code is cached) the result is: #0 RESULT 200, DONE IN 0.000437 #1 RESULT 200, DONE IN 0.000180 So even when coding caching is enabled, eval is still 2x faster. Myth busted? 
Often I do someting like this: status = validate() if status code not 200 new error template() render template with status return Where the template is more or less this: header (code + status) header (json utf8) echo json_encode error message
This is not news to anyone who understands how a compiler works.
If you follow the whole thread, those were my thoughts as well. Yet there is a persistent myth that eval() is inexplicably slow.
&gt; Myth busted? I don't think so. There's a lot of fixed-cost overhead to including a file, but the cost to using eval scales up much more with the length of the code being parsed. If his CMS is just being used for storing stuff like &lt;?php $i = 3; ?&gt; then yes, eval it. But if it's being used for more typical CMSsy stuff like long batches of complex code, then it's going to work out differently. Of course I freely admit that I am not putting my money where my mouth is and running benchmarks, just talking out of my ass. Maybe tomorrow my motivation will improve.
that was never the problem with eval and php.
Try ArgoUML (http://argouml.tigris.org/) It generates PHP, Java, C, and C++. Not bad for free.
You're making a comparison using a trivial example. 200 lines of an increment operation isn't even close to something like including a class file. &gt; (These results are highly dependent on how fast your system does IO) Yes, yes they are. &gt; Myth busted? No.
&gt; but the cost to using eval scales up much more with the length of the code being parsed. Why? What is include doing but loading the file and effectively passing it to something very similar to eval? In one case you have load-&gt;parse-&gt;execute and the other you have parse-&gt;execute. 
My own benchmarking shows an average time of 0.000245 for eval(), and 0.000103 for include(). Maybe your system has slow I/O for some reason?
That's not at all why people tell you to avoid eval().
I decided to try a non-trivial example and find the largest ugliest single class file I know of, TCPDF, which is 27,198 lines of code. #0 RESULT 0, DONE IN 0.137635 #1 RESULT 0, DONE IN 0.057819 Eval is faster on my system unless when code caching is enabled then the include version is faster (as expected). 
Could be -- obviously this isn't the most scientific testing. But still, there are lot of blogs like [this](http://blog.joshuaeichorn.com/archives/2005/08/01/using-eval-in-php/) which argue eval is 10 to 28 times slower than regular code but that's the same flawed logic. 
**Eval is Evil** 
...so is goto. 
In the long run, using eval() for the OP's purpose is possibly faster than using include. What our benchmarks don't include is the cost of writing to the code to the file before including it.
At risk of seeming like a troll, I am interested in knowing the problem you are solving with PHP, for which UML and code generation from UML are going to be helpful.
homework.
Take a look at Sparx System's Enterprise Architect.
At the risk of seeming to bait a seeming troll, why wouldnt UML be good for PHP? Are you asking from a object perspective? PHP has a well established and defined class and object system. It has classes, objects, inheritance, encapsulation, interfaces, abstracts, and even a reflection API. I have not really seen any standard pattern that couldn't be implemented in PHP just like any other OO language. I'm not trying to be a smart ass, but I am wondering why UML with code generation wouldnt work for modeling any OO implementation.
Well, the book is fantastic. For some decent code examples that I found helpful were Knplabs. They are also writing a book (is it done yet?) TUTORIALS: http://www.knplabs.com/en/knpipsum-symfony2-tutorial-project-builder Github: https://github.com/knplabs Symfony2 resources are a bit scarce at the moment, but there is so, so, so many bundles and demos out there that you can play around with and slot into your applications now. Just be wary of code that is a few months old, as it could be from an old BETA and the codebase has changed since then!
Umbrello. http://uml.sourceforge.net/ Free, open source, extremely powerful. 
I don't see why that wouldn't work? I set the preg_replace limit at 1, so it should only replace the first occurance of /myapp
Ah, neat, I'll definitely implement that.
It's true that google gives lots of outdated code from around march/april, it's a bit annoying. As for bundles maybe it's me but I don't like most of the bundles at http://symfony2bundles.org/, they don't seem mature and most of the time I end up coding myself instead of using them. And I'm not sure why they recommend xml over yaml for public bundles.
I agree Conradfr, the code just needs time to mature. :-) There are some excellent developers on Github, for example: [fabpot](https://github.com/fabpot): Developer of symfony, has a few interesting bundles. [Friends of Symfony (fos)](https://github.com/FriendsOfSymfony): Awesome user bundle that now has decent documentation, rest bundle (haven't tested yet, will do soon :-)), facebook bundle etc. Random symfony2 developers (who develop decent bundles, documentation or usually have something of interest to say): stof - https://github.com/stof lsmith77: https://github.com/lsmith77 snc: https://github.com/snc
Good. Next corner case: put your app in /~myapp/ :-)
I'll need to test that out when I'm home :P
yep. that's pretty much the only one that works.
The tutorial from [JoBeet](http://sftuts.com/doc/jobeet/en/starting-up-the-project.html) is pretty O.K. too
For argument sake, lets not take performance into consideration. With the language now supporting lambdas and closures what would the purpose of eval serve now? The only thing I can think of is user submitted code and that is just a terrible, terrible idea.
Those tests are just bad. You're not testing eval against the equivalent code, you're testing eval against a file system opereation... If you want this to be a fair test - and a realistic scenario then you'll want to include the eval code as well. And honestly, can you think of even one situation where you use eval on code that didn't come from an external source? If you can answer yes to that question then you fundamentally misunderstand code architecture and need to rethink everything.
Here's a different version, more similar to real-world use I think, where there's a single include or eval but the included code is longer. http://pastebin.com/Ae3YXqic When I use 100000 lines (repeats of $i++) the include and the eval version take about the same time. When I use 200000, eval takes around 50% longer. Any more than that and I run into my 128M memory_limit setting and I am too lazy, once again, to change that.
Break it up into components (smaller classes/methods). Think Single Responsibility. A method should have 1 purpose. It should be explicit in what it requires for parameters and always return 1 type of object. I believe you're trying to have 1 front-facing router class for an end user to use. This thinking is ok, but you don't need to have all your code in this class. Use composition to build this class at run time. Your router class can leverage other classes without the end-user knowing. This makes for more stable, maintainable and flexible code.
For this use case the resulting regexp would be pretty simple. The expression you have written in english says: from start to finish every character in the string must not be one of the following: a to z, A to Z or 0 to 9. So to expand upon that we simply throw in some valid characters. Off the top of my head: if( !preg_match('/[^a-zA-Z0-9_\-]/', $URI) ) This adds support for dashes and underscores, but as I mentioned in my reply: it really depends on how your framework is meant to behave and what is acceptable from your point of view. On second look the double negative is a little confusing. Perhaps this is clearer: if( preg_match('/[a-zA-Z0-9_\-]+/', $URI) ) The extra + simply means that one of those characters must appear at least once. ie. your string is at least 1 char long.
There is some awesome stuff on the Symfony2 Dependency Injection container and other Symfony2 things (twig assetic etc) on this blog http://miller.limethinking.co.uk/
I did a more realistic test using the largest single class file I know, TCPDF, and it's only 27,000 lines. But eval still worked out slightly faster unless I had code caching enabled. I think your test and my test prove that the performance of eval compared with include isn't something to worry about. 
Code generation.
&gt; can you think of even one situation where you use eval on code that didn't come from an external source? Situation for eval: code generation, say from a template engine or ORM. This is, in fact, where my code base uses eval. In production, the resulting code is eval'd and cached to disk but in development it's just eval'd. &gt; You're not testing eval against the equivalent code, you're testing eval against a file system opereation... The original claim was include is faster than eval so including the file system operation (and even APC code caching) isn't unreasonable. I'm not sure what other comparison here would even be interesting.
I think I don't have enough to argue back with.
&gt;The original claim Is that "Eval is not slow" since that is your title, I just now clicked parent, parent on the post linked to and there is indeed a retarded claim that including is faster than eval'ling. But there are idiots everywhere, that still doesn't make eval not slow compared to normal PHP. If you can eval a string without including it from somewhere(file, db etc) then you can also write it out as normal PHP, without exception! That said, the problem with eval is not performance but rather that you hide bugs and make debugging severely harder. If you use eval anywhere then you're doing it wrong.
&gt; But there are idiots everywhere, that still doesn't make eval not slow compared to normal PHP. Saying the eval is slow compared to normal PHP doesn't make it true either. Tests seem to indicate you need unrealistically large code before the difference is significant. The code goes through the parse-&gt;execute process as all other PHP code. If you put eval code in a loop you're parsing it over and over but that's not a realistic situation. &gt; If you can eval a string without including it from somewhere(file, db etc) then you can also write it out as normal PHP, without exception! Assuming you have some place to actually write out the code and that writing out PHP code isn't going to expose you to security problems (writable code from the web server in shared hosting might not be safe). But my code writes out the generated PHP code into a cache when in production mode so that it doesn't have to be re-generated on every request and so code caches can work on it. &gt; That said, the problem with eval is not performance but rather that you hide bugs and make debugging severely harder. Eval doesn't hide bugs. But it can be harder to parse error message when you don't have line numbers. &gt; If you use eval anywhere then you're doing it wrong. I'm not making a value judgement on the use of eval -- this topic was just for intellectual curiosity. I'm surprised that the whole topic got downvoted so much. 
BoUML
Why would you bother to make this post? You don't include any kind of link to the code you'd like us to look at.
Looks good, release it.
Sorry, please send me a PM or reply, and I will direct you to the code.
Can't you just link us to it? I'd like to see it.
I don't see a reason to not allow developers to declare a static abstract function. The two don't seems to have any mutually exclusive properties.
Code generation from the UML model saves you a lot of time if you need to test drive the model to find any weaknesses.
The project is on github (username: yookd, repository: ravexchange).
[For the lazy.](https://github.com/yookd/ravexchange)
Thank you.
The main argument I've been presented with against the idea is you can't call the function polymorphically. However as you can see in the above usage example, I'm not intending to use it polymorphically. My intention is to enforce a standardized method of loading data data within the hierarchy. I like how this method allows you to enforce the standard syntactically as opposed to conventionally, (which is dependent on the discipline of other developers).
Why is load() the responsibility of the User class? What if you need to load data from a file, or from an existing data array? Make it the responsibility of the the reader class to load() the data. abstract class Reader { function __construct($id) { $this-&gt;id = $id; } abstract function load(); } class DatabaseUserReader extends Reader { function load() { //do stuff here to get user data, return $data; } } class FileUserReader extends Reader { function load() { $fp = fopen('somefile.txt','r'); //do stuff to retrieve data from file return $data; } } Finally, in your User class: class User { function __construct(Reader $r) { $this-&gt;reader = $r; } function getUserData() { return $this-&gt;reader-&gt;load(); } } Now you can do stuff like: $userFromFile = new User(new FileUserReader(999)); $userFromDB = new User(new DatabaseUserReader(999)); print_r($userFromFile-&gt;getUserData()); print_r($userFromDB-&gt;getUserData());
&gt; THIS PISS STAINED SHITCODE IS ABOUT AS MUCH NEWS AS THE FACT THAT I'D LIKE TO PUNCH YOU IN THE DICK. I don't get it. Do you, or do you not, want to punch him in the dick?
This is a perfectly fine abstraction when needed. But it still doesn't preclude the usefulness of a abstract static load() method, which you've effectively replaced with a less generalized getUserData() method in your example.
I use static functions, abstract functions, and interfaces (although seldomly), but I've never had to use an abstract static function, as I've shown in the example I've provided.
&gt; a lot of implementation look exactly like ActiveRecord. So what's the actual difference? [This stackoverflow post answers it pretty well](http://stackoverflow.com/questions/2169832/data-mapper-vs-active-record). A couple no-brainers for me: 1. Your entities no longer need to extend any class, so they don't have functionality that might be irrelevant to the entity 2. Responsibility of storage is a separate responsibility
I think the OP's best argument is for using them on large development teams to enforce the static interface as well as the object interface, which is a very valid point. If you've worked on a large team, you know that enforcing conventions is like herding cats.
&gt;The main argument I've been presented with against the idea is you can't call the function polymorphically why not? foreach(array('classA','classB','classC') as $className) { $className::method(); }
Traditionally for a function interface to be considered polymorphic you have to be able to execute it utilizing the parent type and/or interface type. This is less apparent in a loosely typed language like PHP, however a contrived example would be: public abstract class Parent { public abstract function foo( ); } public class Child extends Parent { public function foo( ) { } } function executeFoo( Parent $p ) { $p-&gt;foo( ); } $child = new Child( ); executeFoo( $child ); In the example you listed you're still referencing the implementing classes by their class names, even if you're doing it indirectly via an array. From my original example: trying to execute the load function polymorphically ala: DataObject::load( ) would be meaningless. But to re-iterate, the purpose of my design isn't to provide a polymorphic load( ) function, it's to enforce a standardized load function signature amongst the implementing classes.
&gt; UML
I'm glad to see that I'm not alone in appreciating the difficulties involved in getting a team of developers to adhere to conventionalized standards :)
Personally I like to keep the functionality of loading/populating a data object coupled with the implementing DataObject itself, as organizationally that makes the most sense to me. In which case, if I had need of a fileLoading function, I would add it as another abstract static function. Admittedly this opens up the potential for bloat if the different kinds of data loading grows. In which case there is definitely merit to your approach of using a decorator reader hierarchy for the loading and keeping the implementing DataObject as a simple struct.
http://www.grocerycrud.com is a CodeIgniter application that gets you from zero to CRUD in five minutes flat. I just discovered it and it made my day... I wonder why it is not more widely used - are there hidden defects or drawbacks ?
Okay fair enough, but a lot this issue can also be solved with documentation, communication, and code review.
You need java-script not php (unless of course you wanted to do some dynamic java-script - then you can use php to output it but that is not recommended). Read up on this: http://blog.movalog.com/a/javascript-toggle-visibility/. If you don't know JS I recommend learning some first. As a side note: tables should really only be used for the layout of data in a spreadsheet form. Using it for website layout is very deprecated (however I do get lazy and use it sometimes for other things). It would be much easier to use divs with your requested show/hide of links and would work far better. 
I primarily use JS for form validation. If I'm making a public facing web-app Ill use JS and have PHP perform its own validation (to prevent hackers). I wont bother making PHP output any sort of error b/c it would mean that they are circumventing the apps JS and in that case I really don't want them using what I have created (not to mention that it probably wont work correctly). As far as form validation in PHP it really depends on how much your validating. My philosophy (since I'm usually on a time budget) is if its 1 -2: A simple if. 3 - 4 items: A couple of functions (makes the code more readable). 5-6: I might write a class to contain a whole bunch of functions that I could later reuse (and I would have it use exceptions). 
In the past I've tried to use divs, but for some reason they tended to move about my screen. Although that was a few years ago, maybe divs have changed since then. I'm going to do some quick research into divs now actually. I'm using tables because it's really the only possible page layout that I know how to write. I know they are outdated, but I don't have the time or patience to learn java for my site. Is it possible to mix java and html/php together? edit: I remember why I didn't like divs back in the day; you adjust divs by specifying pixels, but different screen sizes and resolutions jumble up the order of your page and div layers.
[Try this maybe](http://matt.mn/reddit/menu/). Just look at the source, as it is something I quickly whipped up... it should be able to be applied in most situations.
Perfect! Thank you! I'm going to try to play around with it a little bit, but is it okay to message you for some help if it comes around to that?
You can message me, but I am not always great at responding. The jquery forums might yield better results in that sense.
You need quite a bit of css rules to get divs to function like the table elements for layout. Just about every (90%+) web site runs some mix of java-script / html. http://snook.ca/archives/html_and_css/getting_your_di Just leave HTML out of &lt;?PHP ?&gt; tags. Trying to write everything with a php echo is a beginner mistake that we all make (something that you sometimes get from being more of a non-web based programmer). Trying to rapidly change between HTML and php is another mistake (makes for horrifying code). Its ok to have little bits of php inside your html. One style that I have use(d) 1) Put all the php code that gets executed on page load at the top (or call it). 2) Have the middle be all HTML with as little use of PHP code tags as possible. 3) Put all the functions at the bottom that are called throughout your code (most people put functions at the top, I like it the other way). For instance lets say some of your HTML is based off a DB query. I would encapsulate the query, as well as the while loop (assuming more then 1 row) along with some minor HTML layout inside a function. On the top of the page you would call your include (or code) for the DB connection. In your HTML layout you would call the function to execute the code (so it would on be about 1 line). In the bottom of the script you would have the function that contained the PHP code (as well as any scripts to close the db connection). For more complex code you could use OOP (but you should stay away from that until you at least familiarize yourself with function based programming rather then straight procedural). The above is one way of coding. Alternative methods could be that you have fixed HTML and php code calling includes to fill certain DIV's based on GET variables. (This is a much more modern way of doing something along the lines of an Iframe surrounded by the template - (never use Iframes unless absolutely necessary)) Im not saying my way is correct or the best way. This is the style that I have evolved in. PHP lets you choose between OOP, Procedural or some mix between the two. As you evolve as a programmer try to go more towards OOP. You will begin to realize the benefits and disadvantages of both. OOP requires a bit more work and tuning but will be quicker in the long run (if done correctly) as it will be easy to reuse your code. Procedural is down, dirty, sometimes inefficient but is very quick to code.
wow... awesome find
Dirty PDO secret: You can't seek result sets with most database vendors. If you're using MySQL, PDO will allow you to set the PDO::FETCH_ORI_ABS parameter, but it doesn't do anything and you won't actually be able to seek.
why not?
Yes. I was loathe to give up what I saw as "control" over my code, but frameworks do all the boring heavy lifting and let you get on with the fun parts. Out of curiosity, which one did you go with? Great documentation and videos suggests CodeIgniter, which is my choice (though I have a lot of extensions to core Model and Controller). 
CodeIgniter helps me prevent my common pitfall: reinventing the wheel over and over again. Ever since CI, my development time is cut into only a fraction of what it used to be, with less errors. So, as tobsn said it: why not?
Classes aren't only about reusability. They are also about maintainability and readability. Using classes and understanding when and how to use them, will make you a better programmer.
Thank you for the insight. The last time I coded PHP (or anything for that matter) was about 2004. I have a similar background in that I try to be a perfectionist and want to code everything and do it my way (the right way). I can hack my way around and change something or created but most likely would involve the following traits: * Endless If statements * Never use loops * Spend 4 hours googling functions to get something work * Spend 8 hours trying to connect to a database * Never ever use arrays. Too hard. Now, I've spent the last week trying to get to grips with PHP and I'm doing OK. Not created anything of my own yet but I'm doing OK going through a certain book. My question really is, would you recommend a newbie PHP developer to jump into using a framework or 'learn and struggle' with the language first? 
As above + it helps if the smallish website decide to expand, then you aren't in a world of hate with lots of little snippets everywhere.
You can dependency inject a singleton, so I'm curious why you make them sound like opposite concepts.
&gt; would you recommend a newbie PHP developer to jump into using a framework or 'learn and struggle' with the language first? I would say that depends on the level of programming knowledge of the individual. For instance a lot of frameworks are written in and for OOP, which a complete newbie to programming might not have been exposed to yet. It would then become difficult for them reading the PHP.net website and seeing mostly procedural code (although that is changing) and then adapting that to a OOP framework. Same might be said of MVC frameworks.
Is there anyone out there who still isn't using a framework? Really?
You mention that you never use arrays, by that remark alone I would say to hold off on attempting to use a framework until you can nail the basics or you may end up screwing yourself over by trying to take too much in at once. Try and come up with a small personal project, something like a simple cms with a user login and registration system which you could slowly expand. I recommend you don't use a framework until you understand how it actually functions (as in you would know roughly how to replicate what it does yourself from scratch).
It will make your life easier down the line. Bear in mind that as your writing classes you're also adding more tools to your toolbox. Besides, you don't even have to write your own classes for most things. Most of the time there is someone out there that has done the legwork for you and the end result is that you have to write less code.
I find the phrase "using classes" a little bizarre; you've mistaken the oils for the painting. It really isnt about "having classes", its about a style of programming in which data and state are encapsulated and abstracted. The interaction between the data defines how the program behaves. You are asking why should you prefer object-oriented programming over procedural, in which case I'd suggest you read some good articles (at Zend perhaps) on OOP or a book (objects, patterns,practice). Beware however that many "tutorial" sites are written by people with very little understanding of OOP.
no , you cannot, because singleton is by nature tied to the name of the class
Slight typo in your CSS - lu ul should be li ul, which will let you remove that first line of javascript
Its more than likely my shit way of explaining things, I know how OOP works and I do use it for projects in other languages. But I usually use it as a way to lets say make a monster, then make specific monsters have different abilities by extending it (in a game). This is fine for me to understand as it is always somthing that runs for a long amount of time. However in PHP there is a way doing this but as its only run when the page is loaded then pretty quickly everything is destroyed I really dont see the point in it (other than things looking nice). Its purly for web pages that I dont really understand its use. (Hope that made sense, I do know what it all means its just a case of putting it into words) 
yea, i recently got into frameworks and CI -- can't imagine doing a big project without it now
Good OOP vs Good Procedural code, is easier to reason about, debug, test and maintain. It's also much more powerful, and much more productive: it is faster to write a site with a good framework.
...or just download the [all-in-one](http://www.eclipse.org/pdt/downloads/) package and be done with it.
The all-in-one packages are based on Eclipse 3.6. There is no all-in-one package for the new Eclipse Indigo (3.7).
Oh... Thanks btw! :)
When you want to master a programming language I would not suggest to use frameworks all the time for all the work. But I would recommend using a solid framework for production websites or applications.
I keep trying to adopt frameworks only to be frustrated by my inability to make them do exactly what I want. It isn't that they can't, it's that I haven't learned enough. "Learning enough" means wading through (almost universally) outdated tutorials and trying to ask for help with code in IRC chat rooms where people are hanging out but can't seem to be bothered with pithy questions for people starting out with the framework. I'm desperately trying to shed my write-a-new-framework-for-my-own-uses-every-year track record. I've done a lot of sophisticated development in Drupal, but sometimes I just want something lighter, faster, easier to build to do just a few specific things. I'd rather write the controllers than install and configure modules, many of which are simply libraries that are enabling the other modules that I will install and enable to achieve the one or two specific things that I want a site to do. So far I've tried looking at documentation for four frameworks, starting tutorials for each, and become frustrated and gone looking elsewhere when I came upon third or fourth parts that were no longer functional if using more recent releases (in some cases the releases used in documentation were as much as a year older than recent releases). How can you even garner interest that might result in updating documentation when these issues persist and turn away interested developers? It's been a frustrating experience. To the OP: What framework did you settle on using? I have company time to commit to learning one. I'd like to start out basic by being able to create a CMS and then move on to some simple file handling, perhaps. I'd just like some reasonable tutorials that aren't outdated and that can accommodate someone that is learning on Windows using XAMPP. I know enough about Apache configuration and I've compiled my own PHP and such in the past (not just on a whim, I knew what I was doing), so the fact that I like using Windows for my day-to-day work shouldn't be a deal-breaker. **I just want to learn a framework for real, dammit!** I feel like some of the communities are actively trying to prevent me from joining them.
This is a dependency injection: $object = new object(new database()); But this isn't? $object = new object(database::getInstance());
I know *why* I should use a framework, but does anyone have a tutorial explaining what *exactly* a framework *is*? And *how* I'm supposed to actually use it. Like with PHP now I just open a program like notepad++ and start coding, but I've checked framework sites before and downloaded one which was just a bunch of folder and I had no idea where to start.
I completely agree, and particularly with **"Take a day to find one you are comfortable with"**. Every 10-15 posts we get the "what's the best framework" and in the end there's no best. But finding the one you feel really comfortable working on is wonderful, and you start getting the gains almost immediately, at least from learning how other people do stuff in a style that's similar like yours (or what will be if you've just started). I'll admit the first one I felt comfortable with was/is CI though I'm always trying other frameworks as I keep evolving as a programmer. But the most important thing is finding a framework that takes care of most of the boring stuff, while doing it in a way that fits with how you think/write code. 
Yup, I went with Code Igniter. I didn't announce it, because it really isn't too important and I didn't want to sell CI, just the idea of using a framework.
I agree with your statement completely. You have to learn the basics before learning a framework, and knowing that if you needed to, you could recreate the majority of the project from scratch helps as well.
I love CI so damn much. I would make sweet love to it if it came with a Fleshlight library. 
Where was anything said by the source of the object which is injected ? In that example of yours there is no difference, though i would argue that the use of singleton there would be completely pointless
&gt; master a programming language Are we still talking about PHP?
Yes, and I'm puzzled by this too. Every other thread in this subreddit is about stuff I don't even think about for a second when developing. But this is not a popular thing to say. As a co-worker once said: "people who use jQuery are just too lazy to code their own JavaScript."
The one I use is CodeIgniter. nettuts has some great videos on it that helped me out a lot, and I pretty much went from there. If you haven't already, I'd recommend looking into setting up vhosts and editing your hosts configuration file, for me it makes it easier for development. I could be working on my development site at http://www.siteimcreating.dev and have the live site be at http://www.siteimcreating.com. It makes it easy, because in CI the only configuration that differ from both sites is in the index.php file I set it to be in 'production' so it doesn't pop up errors, I changed the TLD and the database info.
Yup, and programming languages in general.
Can you tell me what do you want to master in PHP? It's a scripting language and is not really comparable to programming languages like Java or C/C++. You can downvote this post too but I still don't think that there is something to "master" in PHP.
But you wrote that you can't dependency inject singletons. Obviously you can. I don't see why it would be pointless to inject a singleton like that. It removes the need to store a reference in a global variable. You can swap it out for a dummy object for testing just as easily as with any other dependency injection.
So you are saying there is nothing to learn in a scripting language?
Why would you store references ? What does that even mean ?! This smell all like a desperate attempt to defend the insanity known as "singletons". 
No, I'm not.
Then we agree! Upvote for you sir!
It means you don't need any global variable. Instead you inject the singleton like any other object. I don't buy that singletons are always insane. You certainly haven't given any reasons to think otherwise.
It really starts with reading the documentation of the framework, and following tutorials if they're available. I was in the exact same position as you - every project I'd start from scratch with a few generic includes for functions I used on a regular basis. Then I discovered Codeigniter, which made life so much easier. Since then I've moved on to FuelPHP. Most of the frameworks I've looked at are based on the [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#PHP) model, which is great for isolating business logic, data handling, and the user interface. Some popular frameworks include: * [Codeigniter](http://www.codeigniter.com/) - [Docs](http://codeigniter.com/user_guide/) &amp; [Video Tutorials](http://codeigniter.com/tutorials/) * [Symfony](http://symfony.com/) - [Docs](http://symfony.com/doc/current/) * [Yii](http://www.yiiframework.com/) - [Docs](http://www.yiiframework.com/doc/) &amp; [Tutorials](http://www.yiiframework.com/tutorials/) * [Zend](http://framework.zend.com/) - [Docs](http://framework.zend.com/docs/overview) Another thing that will help with these frameworks are their communities. CodeIgniter has a great community and the forums are quite active. I would imagine other frameworks are similar. These are just a few of the frameworks that are available for PHP. I strongly recommend picking one up. The time you save by learning a framework will more than make up for the time you spend learning it. (Edit: more links)
I think this begs the question: how is this script itself protected? I believe this is why file integrity processes are typically stand-alone, OS-level applications wholly independent from your application code.
Ah, that is why I had to add that line. I guess I must have been thinking of Lulu at the time. Fixed it... and I am likely keeping this code around because it seems a lot simpler than many I see around. It was just something I thought about quickly that seemed to work out. 
I've been using CI but maybe I just haven't really embraced it but I don't feel it offers a whole lot more over any home made mvcish framework with routing. Am I missing something?
Someone once said about Spanish that it's "an easy language to learn badly". This is also true of PHP. If you don't see anything to master, chances are your code actually kind of sucks.
Meh, I haven't been programming in php for more than half a year and I feel like I'm at mastery level. It's not exactly a complex language, especially coming from any more formal compsci background.
Some things I love: 1. Documentation 2. CSRF 3. Encrypt cookies 4. Form management (good when you have CSRF enabled) 5. Active Records (makes doing DB work a breeze, when using PDO I would always forget something in the SQL syntax and it would have me stumped for ages) 6. Routes - much easier than making my own system There are some other points I'm sure I'm not touching on.
codeigniter.uservoice.com
 while($element &lt;= count($this-&gt;URI)) { array_push($action, $this-&gt;URI[$element]); $element++; } I think `count()` will be called on each iteration, which is unnecessary and sub-optimal. Set that to a variable outside of the `while()` expression. I personally don't like incrementing within the loop itself -- just has proven problematic when refactoring at times. I would probably rewrite the `while()` loops like this: $element = $argsLocation - 1; $count = count($this-&gt;URI); while (++$element &lt;= $count) { array_push($action, $this-&gt;URI[$element]); } This brings up another point: lines like the following are typically a code smell I believe: $element = $argsLocation; You already have the data, and you're creating a copy of it. Sometimes this is necessary I guess but most of the time an assignment like that is superfluous. Also, I hate using bare array indexes, like the following (fixed `==` per earlier comment): $action[0] = $this-&gt;URI[$controllerLocation]; That is devoid of contextual information to the casual observer; I would probably do something similar to this: $action['controller'] = $this-&gt;URI[$controllerLocation]; Which also brings up the fact that you don't use any constants; I like constants for my strings, like this: // in class definition const KEY_CONTROLLER = 'controller'; const BIND_TOKEN = ':'; // in methods $action[self::KEY_CONTROLLER] = $this-&gt;URI[$controllerLocation]; $methodLocation = array_search(self::BIND_TOKEN . self::KEY_CONTROLLER, $patternParts); It seems you are using `array_search()` way too much. Perhaps it's needed, but I rarely use it as I think there are usually better ways of tackling the problem. Lastly, I hate all of the disjointed return statements; I aim to only have a single return from each and every method. Just makes everything easier to understand and debug, and it will force you to write cleaner code.
Yeah, I've always set up a VirtualHost for development. I've never had a great method of moving to staging and production, but for the sake of easing development, it's a great idea and everyone should try it if they haven't. I tried CodeIgniter right off the bat and started running in to some problems with a lack of documentation for v2+. I was using 2.0.3 -- [still the latest release version](http://codeigniter.com/downloads/). I suppose I'll try CodeIgniter again. It really was what I wanted to work with after surveying the PHP frameworks landscape. For now I had been working with CakePHP a bit which has gone smoothly, to be honest. I suppose I might just try starting from scratch on a single (small) project of my own design and then work through building it in a few frameworks to see how they really differ. **EDIT:** I see that the [NetTuts Series "CodeIgniter From Scratch"](http://net.tutsplus.com/sessions/codeigniter-from-scratch/) uses version 1.7.1. I suppose I'm just learning for the first time that I should never use the latest version of something. I ran in to this issue with Python 2.x/3.x, also, and I've been helping a lot of people in IRC lately that are running in to this issue with Drupal 6.x/7.x. It's a shame, I suppose, that documentation can't be more easily updated and managed. It would require a tremendous undertaking to make tutorial updating automatic, obviously, but quality introductory documents seem paramount to adoption, and adoption paramount to improvement.
Thank you for your comments. You're right and although I have an element of control-freakry around me I look forward to being able to experiment with the frameworks later on in life. I have a couple of ideas in the pipeline and once i;ve gone through the book I will be creating a site!
Thank you for the comment it sounds obvious when you put it on paper and though I've gone a tiny bit of previous programming knowledge (ah Classic ASP how I miss you). I will learn to crawl before I walk.
Just a side note, there's not a lot of changes from 1.7 to 2.0 check this: http://codeigniter.com/user_guide/installation/upgrade_200.html as you can see only small changes to the framework user. Codeginter may not be the most bleeding edge framework out there but it is very good at keeping backwards compatibility.
Just because something sounds smart doesn't mean it *is* smart. What you said is true for *everything*. It's the degree of mastering something that matters. And PHP certainly doesn't have enough depth like real programming languages or for example spoken languages like Spanish. You people talk like PHP is the epitome of programming. It is not. And if you don't realize that I think that you have no idea what you're talking about.
Humm?! PHP is a lot bigger language than C/C++ in fact I don't think there's anyone that completely knows every function/Objects in PHP, so there's a lot to "master". A quick search and I got this: http://www.info4php.com/?req=PHP_Functions
I'll probably incite a downvote mob for this, but personally I've found frameworks (including Cake and CI) to be completely unusable for what I want &amp; need to do. I made a basic CMS with Cake, which worked fine up to a point. I found that I was having to do some *really* weird stuff to pull off simple database operations. It worked out in the end, but when I tried to start a bigger/more complicated project, it just became unusable. When it got to the point that I needed to remove and create model relations on the fly, I dumped the whole thing and started over with out the framework. I was able to not only do exactly what I needed to do, it was far simpler and had much less overhead than the framework version. Oh yeah, and the complete product took half the time of the barely-functional framework version. My basic problem with frameworks is that they do very well what they are designed to do, but once you exceed that, they become very difficult to use very quickly. I'd much rather create my own tools and libraries to handle the difficult parts, because I can make them work exactly as I need them to, and it's really not that hard. Bottom line: I've found I save more time *not* using a framework.
You just happen to be in /r/php. Who said 'php is the epitome of programming'? Why visit this subreddit when your only contribution is saying PHP sucks?
Two tips for those new to frameworks: * Frameworks are a lot easier to learn if you understand the underlying design principles and patterns. * On the other hand, using those frameworks can be an excellent way to learn those design principles and patterns in a practical way rather than dry book knowledge. Whichever way you approach it, you should take into account that for a novice or self-taught programmer, starting with frameworks may actually involve learning two or three major elements of modern programming, not just how to use a new tool.
See in my eyes, when you say that you have created your own tools and libraries to handle the difficult parts, I see that as a framework. I see any tool that you use to develop your project as a framework, it doesn't have to handle every single aspect of creating a project, but if it is something you use time after time and helps accelerate development, then in my eyes it is a framework. It's all about doing what works best for you, and of course as devs become more experienced, they will branch off and either fork their favorite framework, or start from scratch.
Where do I say that PHP sucks?
You got me on that one. Still, nobody said PHP is a superior language or the best language. So what is the point of turning a discussion about PHP frameworks into comparing dick sizes?
You do realize the difference between mastering something and learning something? I'm afraid, no, we don't agree.
Stop confusing the term "Library" with "Framework"... A library is a piece of reusable code. A framework is a library which tries to make life easier by enforcing architectural assumptions on your code. A framework without architecture is a library. The two terms have existed for a long time, and mean two different things. So no, what the OP is referring to is **not** a framework, it's a library.
Good points. I guess I look at a framework as a more cohesive &amp; complete product, rather than a bunch of utility libraries thrown together because they were needed for the project at hand. 
Yup. Let's agree to disagree.
 $s = 'sometext-sometext-sometext-5-6'; $a = explode('-', $s); $six = array_pop($a); $five = array_pop($a); alternatively you could do $length = count($a); $six = $a[$length-1]; $five = $a[$length-2]; I like using this site when I just have to test little php functions like that [http://writecodeonline.com/php/](http://writecodeonline.com/php/) 
I feel like I've spent four days and I'm still trying to decide on which one I'll start using on actual projects. Either way, I know that I'm sick of writing from scratch, and I'm sick of configuring the same stupid things over and over in Drupal and winding up with divitis and bootstrapbloat for things that I know are supposed to be simpler.
I don't think you want to pick that fight.
I see. Thanks for the clarification.
Oh wow now I feel stupid. Thats incredibly simple. You know it gives me an idea though. What if it was possible to reference arrays with negative numbers? like... $a[$length-1] was equivalent to $a[-1] that would be incredibly useful. THANKS for the help! 
Ron Burgundy,...is that you?
Yeah, I remember the first time I installed Zend Framework (yeah, I was so stupid as to start with the framework that requires more configuration), I didn't know what the heck to do...CodeIgniter is definitely easier to understand. I'd go for that. The OP said something about some nettuts videos... I'd suggest you to check them...they're pretty great to get you on your feet
I said there is not much to master in PHP. That's it. There is not a single argument in this whole thread against it. But it seems I offended a few people with this. Not that I'd care.
PHP is "*similar*" to JAVA, at least in its syntax and its OOP features. It's not multi-purpose but then again, you wouldn't have a C++ website. So there's definitely stuff to learn about the language...
You don't need the strings? preg_match("/-(\d+)-(\d+)$/", $string, $r); Now $r[1] is the first number, $r[2] is the second.
I didn't say there isn't. PHP is "similar" to Java like any programming language is similar to any other programming language. But to think it takes the same amount of effort to master Java would just show how much a person knows about computer science (you didn't say that but it seems like a lot of people, you included, think that that is the case). PHP is not programming. Take courses, ask professionals. Don't take my word for it. And just to be clear, this doesn't mean PHP is bad. I don't know why so many people just assume that I think PHP sucks because I say stuff like that. I just know what it is. And I certainly know what more there is to programming.
hey man...you don't need to convince me about anything...but PHP bashing is something most PHP devs are used to, so when you say something like &gt;&gt;master a programming language &gt;Are we still talking about PHP? It sounds like you're calling for a shit storm, considering this is r/PHP and all. I don't think that whether PHP is a programming language or not is for debate here.
Simple and elegant. I like it.
echo $myArray[count($myArray)-2]; Would do it, I think. 
if I'm still learning PHP..should I stick to plain 'ol PHP or move into a framework?
I love when someone who's finally gotten into their first large project thinks they're now in a position to start telling people how to work. &gt; The beauty of PHP frameworks Does not exist.
You should avoid frameworks at every skill level. They're one-size-fits-none piles written by amateurs following the herd. There's a wave of them every six or seven years.
&gt; See in my eyes, when you say that you have created your own tools and libraries to handle the difficult parts, I see that as a framework But it isn't.
You want to understand PHP before using a framework. You can't expect to utilize a framework properly if you don't understand what it's doing. I started building websites using Symfony before I was any use with php, and ultimately, truly challenging tasks and even mundane tasks were still bottle necked by my lack of php skills. A framework can help you do more, but when it comes down to building custom solutions, they aren't a magic bullet that do all of the work for you. I suppose you could say a framework results in a site that is easily maintained by others using the framework, helps to reduce repetitive tasks, provides robust solutions to common objectives in building apps/websites, offers out of the box security in some case, and a few other things. This saves you time. When your client asks for a very specific feature in a site, the framework does not do that. You still need to know what you're doing.
CI is an incredible framework and the cool thing is, as you get better with PHP, you can make your own framework on the side for fun!
Just curious, what if we were talking about perl, ruby or python? I read down this thread and wondered what you think of those as 'programming languages'. I'm not picking fights, just interested for whatever reason.
I wouldn't call them programming languages. What the actual difference between the two is, is not hard to find on the web (interpreted vs compiled). But I think it's easier to understand the difference when you use an example. For instance nobody ever would try to write a regex [automata](http://en.wikipedia.org/wiki/Automata_theory) in any of these scripting languages. They rely on C libraries (PCRE). Reasons are that you don't have the necessary tools (using pointers, writing directly into memory) and that it wouldn't be efficient.
I've recently acquired an interest in programming (Or what I thought what programming), so this is interesting. I don't know that I'll have a use for a compiled language any time soon, so for now I guess I'm a scripter? Haha.
stick with plain PHP to get the basics down. This site: http://cs75.tv/2010/fall/ is a great video series for showing the basics of setting up a site, javascript and PHP.
I know, sorry, I messed that up big time.
It must be in the eye of the beholder.
 $str = "a-b-c-1-2"; $parts = explode('-', $str); $words = array_slice($parts, 0, -2); $numbers = array_slice($parts, -2); var_dump($words,$numbers);
Quench the thirst for knowledge! :-) Something to get you started: [Stanford](http://see.stanford.edu) and a lot of other universities have their lectures online for free with videos of the lectures and all materials to download.
I've never seen someone with more than a few years of experience and more than one major project under their belt say "wow, I sure wish I'd had a few hundred lines of trivial code written for me that aren't secure and forced me into a generic architectural nightmare." So, yes, it's in the eye of the beholder. Experience is brutal when talking about the toys the kids think are tools. But be sure, a few weeks into a 180 degree turn on what you thought mattered, to be certain of your *new* idea, now that you've dipped your toes into real work. Surely you have *****nothing***** left to learn.
`explode("-", "read-the-fucking-manual");`
I assume that you've never actually looked up the words simple or elegant.
This is the root of the only correct thing JWZ said. Now you've got two problems. In this case, you're destroying unicode.
Stick to python, kid. It's called `explode()`.
There's a reason subtraction and negative numbers use the same symbol.
Amen to the outdated tutorials issue. I preordered Rob Allen's Zend Framework in Action (he's tooling around here I'm sure) but thanks to the over-caffeinated codemonkeys at Zend, by the time it hit shelves, it was a version or two behind, and the entire "how to set up a project" mechanics had changed completely.
I've never claimed I had nothing left to learn. Sorry you got the wrong misconception about what I said.
Thanks! I wasn't aware. I'm already checking out lectures and handouts!
If you have a simpler or more elegant bit of code, please post it so I can upvote you. 
He isn't destroying anything, the OP wanted numbers, that method gives the numbers. whether the string contains unicode characters or not doesn't matter for extracting numbers. Having said that, this solution is as precise as one can get, if getting the numbers is only part of the OP's task then it will probably not be the correct approach, but from the all the information the OP gave this is most efficient. Also from your reply to omniuni I would say you have a problem with regexes. They are a tool. A tool that can be used both good and bad, this is a prime example of how to use them correctly, extracting a known pattern from a string. The syntax is easy to read and it does precisely what is needed. 
&gt; PHP is not programming
I'd rather write 7 lines of code instead of 5 and save a bunch of memory.
That is because you are not assigning it to an instance variable, you are assigning it to a variable that falls out of scope and dies at the end of the method. My recommendation is to declare your $load variable as protected and then assign it in the constructor like this: interface LoadStrategy {} class SomeConcreteLoader implements LoadStrategy {} class Application { protected $loader; function __construct(LoadStrategy $loader) { $this-&gt;loader = $loader; } } $loader = new SomeConcreteLoader(); $app = new Application($loader); The important thing to take away here is that I assigned a value to $this-&gt;loader, not $loader; $loader falls out of scope at the end of the method and goes bye-bye, while $this is the object itself, and can never fall out of scope inside it's own methods. Why, though, is a router an Application? Isn't routing something an application *does*? Anyhow, again, just opinion. For more information about PHP's approach to an Object system, check out the [manual](http://php.net/manual/en/language.oop5.php) Check the manual as well for information about [variable scope](http://php.net/manual/en/language.variables.scope.php).
You've already got a bunch of answers, but I couldn't help myself. Here's a "one line" solution without regex that you probably shouldn't use... list($lastNum, $secondToLastNum) = array_reverse(explode('-', $str)); I get bored sometimes. 
IMHO, you should go with the array_pop option. The code is cleaner than doing math in the array brackets.
Having worked quite a bit with CI, I can say... inside that codebase is tons of rotten code that's been dragged along from the PHP4 days... CI badly needs a full rewrite.
Here's how my "projects" turn out. 1. Spend a week looking for the best fw for a job. Always land on CI. 2. Go nuts. HMVC, Datamapper, Doctrine etc.. 3. Realize I really only need something that speaks json between mysql and js. Rewrite the damn thing to single 10kb file. 4. Cry.
Sounds like you desperately needed the [Containable Behaviour](http://book.cakephp.org/view/1323/Containable)... it's been part of core since 1.2. The framework is pretty much impossible to use without it
And then there's Zend Framework, which is both a 'library' and/or a 'framework'.
I've been a professional developer for a decade with many large projects under my belt in a variety of technologies... I would never start a large project without a framework. It's a massive waste of time to be writing a routing engine, or yet another goddamn form validation class, or some sort of tiered architecture to separate logic from presentation. Not all the frameworks out there are good. Some are pretty awful. But you find one that works like you do and it's pretty nice to be able to focus on the business logic and presentation and not the basic redundant nuts and bolts.
Learn python! :) 
Don't. Wanting to learn and asking for guidance is one of the things that makes a good developer.
Could you describe that a little better? I don't quite understand...
Please read the list of concepts in William Shatner's voice.
When starting our new project that we have been adding on and working on for over 2 years now, I am so glad that I didn't use a framework. Frameworks are nice for simple CMS or CRUDs, but anything more complex than that and you are going to be spending more time tricking the framework into doing what you want it to. Complex SQL and database management, a bunch of ajax and an api would be a nightmare to create with a framework. Not to mention how much overhead there would be. I don't want to load hundreds of files each time a script is run. Some simple MVC and even some (gasp) procedural code makes our site run quickly and work well. And I haven't be a professional programming for years and years, but seriously, things like CSRF, correctly hashing passwords, etc really isn't that hard.
Didn't work until "the golden ratio naked ladies" ...I imagined some 70's-Disco-porn kind of musical... In William Shatner's voice: "Uhh, I'm sure we could all dance to that music ladies"
You'll need to learn the decorator system. Zend Form has 2 levels of decorators, on the form and on the individual elements. Whenever you render the form it'll loop through the form decorators asking them to render. One of the form decorators is an "element decorator" that will loop through each element in the form asking them to render (again looping through *their* decorators). One of the decorators on the form level wraps the form in a DL. On the element level there's a decorator that wraps the form element in a DD and an option is passed to the Label decorator telling it to wrap itself in a DT. I know the above paragraph is as clear as mud and I'm currently at a UG meeting so I have no code samples for you, however I have a few links. It's not the best but if you jump to slide 20 in [my presentation](http://www.slideshare.net/eljefe/disregard-inputs-acquire-zendform) I built recently I *briefly* touch decorators a bit better than the word soup above. [This article on Zend DevZone](http://devzone.zend.com/article/3450) covers it in detail (albeit it's an older article) that shows you how to replace the dt dd layout with a table tr td layout. You should be able to adapt these two sources to get what you need.
me too 
Thanks for the direction which has shed some light on how to get these forms decorated. I was looking more towards a solution where I did not have to deal with htmltag, label, etc.. and just have it all stripped out and use my own html div markup in a viewscript. Is that possible?
Only a php programmer finds this fun, go say this to a non technical friend.. see their response.
It's very simple and elegant if you know regular expressions. It's line noise if you don't, but if you're using PHP without regular expressions, you're working too hard. 
Dang dcousineau, that's a good, informative, presentation on a topic that has caused a few headaches in its day (Zend_Form). Very clear and to the point. Nice! As an aside, I like the syntax highlighting you used there. Which color scheme is that?
Caching needs to be in big, bold Shatner voice.
&gt; It's very simple and elegant if you know regular expressions. Not compared to the alternative. &gt; if you're using PHP without regular expressions, you're working too hard. Lol, yeah, a regular expression is much better than explode. Incidentally, I guess in pointing out how elegant and simple that is, you haven't actually noticed that it's wrong. Good thing you're not working too hard by writing `explode('-', $content)`, and instead are defending a regular expression that isn't actually correct.
&gt; I would never start a large project without a framework. Really? &gt; It's a massive waste of time to be writing a routing engine, You shouldn't be *using* a routing engine. This is like talking about having a bubble sort support library, or waterfall design software. It's a gigantic red flag. &gt; yet another goddamn form validation class Not a framework topic. You seem to have confused a framework with a utility library collection. &gt; But you find one that works like you do If, after a decade of programming, what you do can still be expressed by generic frameworks, then I think probably those large projects that you "have under your belt" are actually other people's infrastructures that you had a minor role in. &gt; the basic redundant nuts and bolts Are a few hundred lines of code. You should be able to knock out the entirety of that work in a matter of hours, and then you won't be tied to the non-portable, non-work-appropriate generic toy you found on the web. Seriously, dude, if you're making architectural decisions for a large project (which means 1+ year of work) based on saving a few hours, you are so far past doing it wrong that you've wrapped around the meter back to doing it right, and all the way back to doing it wrong a second time. I'd love to know what large project you architected, since you claim you have many.
I did, several places. It's a simple application of `explode()`.
This is definitely a list of words.
Both are good solutions. This one's shorter, 100% correct, and slightly more accurate, since explode does no validation that the last two fields are actually numbers. With preg_match you can easily throw out invalid lines. But these are just quibbles, unless you're on a busy server parsing millions of lines in realtime, it's just a matter of style preference. And as another person above, Unicode isn't relevant here. You're looking for numbers. 
This is why I use Zend Framework. Its glue approach lets you stick things together how you like. You can use as much or as little as you need and it is quite flexible in this regard. I would go so far as to say that Cake is the least flexible of all of the frameworks. You need to do things the Cake way while ZF is kind of the opposite.
So pick one you think is most important and explain why it is important like I'm five.
Is caching pretty much automatic with the latest versions of PHP and MySQL? Edit: [MySQL query cache](http://dev.mysql.com/doc/refman/5.1/en/query-cache.html).
Don't beat around the bush... WAT
I'll just leave this here: http://rubyonrails.org/applications There are more than a handful of multi-million dollar web companies powering their high scale applications on Rails. That's just one framework of hundreds. There are just as many successful companies built on Django, ASP.NET, and any of the dozens of PHP frameworks. I could take all your arguments and turn them around on you. I'm going to assume you're writing your web applications in C with a custom built webserver and datastore since you clearly believe generic tools are for chumps. If you really think that a well architected, peer reviewed, thoroughly unit-tested MVC framework with a strong community behind it is only worth a "few hours of work", you're clearly beyond convincing otherwise.
I use frameworks for very different reasons. I use it for larger projects (3 or more programmers) so there's a standard for doing things. With bare PHP, everyone has their own style and everyone does their own thing. With certain frameworks, you're forced to do it a certain way. This makes the project easier to maintain in the long run.
&gt; &gt; In this case, you're destroying unicode. &gt; He isn't destroying anything, the OP wanted numbers, that method gives the numbers Unless of course those numbers are in Unicode and aren't Arabic, at which point this regular expression will maraud through anything whose codepoint even fractionally matches the ascii hyphen. And of course, it'll also make a bunch of spurious splits that aren't correct in text. Funny thing: that includes the numbers in the Arabic system and the numbers in the Hindi system - that is, approx. half of Earth. Generally speaking, when someone points out a problem, instead of saying it's wrong and downvoting, if you don't catch on, ask for an explanation instead. This is generally why PHP programmers can't cope with unicode: first they prattle on about how the only way they can understand to do it is the right way, even when faced with a much simpler answer, then later, they ignore the bugs you point out because they don't understand them and therefore assume they can just talk around the thing they don't get. Have fun driving the stereotype. &gt; Having said that, this solution is as precise as one can get Except that it's wrong. &gt; but from the all the information the OP gave this is most efficient. 1) It does not return correct results. 2) Uh. Efficient? Regular expressions are agonizingly slow compared to the simple string iteration approach from `explode()`. You're just using big words to sound smart. Try benchmarking it. You are 100% incorrect. &gt; Also from your reply to omniuni I would say you have a problem with regexes I think probably you just don't know very much about programming in general. That's a reference to a famous comment by Jeremy Zawodny. Instead of arguing with it, and trying to psycho-analyze it, try looking it up and understanding it. Even though you pretend to know me, I actually use regular expressions where they're appropriate. This just isn't such a place, because *****there is a library function for this, it does locales, it gets unicode right, and it is way, way faster and easier to read*****. Those are your criteria. &gt; A tool that can be used both good and bad, this is a prime example of how to use them correctly Every time you say that, you make yourself less credible. This is a case example of someone using their golden hammer because they don't know what other tools are in the toolbox, and when challenged with an obviously superior solution, instead of looking at it in any way, just preaching at length about the efficiency and correctness and preciseness and prime-ness of their golden hammer. No. This is where you write `explode('-', $foo)`. That is radically faster, it has the benefit of actually using the PHP locale system, and it will be correct in the configured character set, whereas PHP regexes don't even support most PHP character sets. And, again, even though you don't appear to understand why, it does produce incorrect results in unicode by making splits that aren't actually there. &gt; The syntax is easy to read Only if you're ignoring every single alternative. &gt; and it does precisely what is needed. You keep saying this over and over, as if to convince yourself. It's very religious, how you handle this. Just ignore the alternatives and preach at length about how awesome your answer-that-gets-the-wrong-results is. Have fun with that.
The part where you said "I just did a 180 by getting a little tiny bit of experience, and now that another more experienced developer is saying something to me, I'm going to pretend like it's a divide of opinion?" That's where you're pretending like you've already learned this from your several weeks on the serious job. &gt; Sorry you got the wrong misconception about what I said. Maybe you don't realize what you're saying. You will *never* find someone who's got real experience as a project primary arguing that they should form their architecture around someone else's generic notion to save a half a day's labor. This is like trying to talk about the beauty of using salt to make boats, then when someone points out the critically obvious problem, saying "it must be in the eye of the beholder." That, or you just don't know what you're talking about yet. But sure, "I got the wrong idea." Le cough.
&gt; This one's shorter 1) If you make choices based on the number of characters you type, you are not a good programmer. 2) This is not actually shorter than the alternative, if you'd bother looking. 3) Of course, any *meaningful* notion of shortness would be about the number of conceptual steps contained, not the number of letters present, which also is in favor of explode. 4) It's hard to believe you held this up as a criterion with a straight face. Are you this desperate for reasons to not make the obvious switch? &gt; 100% correct So ... you just don't understand the unicode criticism? &gt; since explode does no validation that the last two fields are actually numbers Oh right, I forgot, because correctness about getting the right answer doesn't matter, but correctness about data validation that nobody asked for is a critically important beacon in the night. Le cough. &gt; But these are just quibbles, unless you're on a busy server parsing millions of lines in realtime, it's just a matter of style preference. If you are arguing for using regular expressions where they are not needed, then you haven't actually figured out what matters in programming style yet. Regexes are *dangerous*. &gt; And as another person above, Unicode isn't relevant here. Yes, it is. You just appear not to understand why. &gt; You're looking for numbers. It turns out that sometimes numbers are inside a unicode string these days. Who'd have thought it? I mean, surely all browsers still use ascii and shift-jis, right? And it's not like PHP is on the web or anything. Seriously, dude. Take a breath and stop trying so hard to be right. 
Not as far as I'm aware. Still seeing queries being executed on my end for same page loads, which means there's still the DB overhead in some capacity every time. It's not hard to implement a simple caching engine, and it saves a lot of cycles over a relatively short amount of time.
&gt; There are more than a handful of multi-million dollar web companies powering their high scale applications on Rails. And on Visual Basic, and on CA-Clipper, and on COBOL, and on FORTRAN, and so on. What's your point? &gt; There are just as many successful companies built on Django, ASP.NET, and any of the dozens of PHP frameworks. Oh, I get it. If I say a tool isn't actually valuable to real applications, then the fact that it didn't destroy the people who chose to use it is somehow ... proof ... that it magically had value that you can't quite explain, but which surely must be there because people who made money use it. Similarly, Booz Allen Hamilton must be a great security firm because they make billions, and Windows 3.1 must have been a great operating system, and so on. Truly a compelling line of argument. Totally explains why you're not using technical points to argue for a technical choice. Not even slightly Ad Crumenam. &gt; I could take all your arguments and turn them around on you. Sure you could. Funny thing: you don't seem to be able to respond directly to them. &gt; I'm going to assume (shakes head sadly) &gt; you're writing your web applications in C with a custom built webserver and datastore Erlang, actually, and I use a database. What does that have to do with observing that silly little several hundred line libraries to do simple things that shouldn't be generic for security reasons are not productively helpful? Oh, right: I forgot, Javascript MVC libraries are equivalent to databases in complexity, and the reasons you'd turn to well understood distributed ACID datastores are equivalent to why you don't want to validate form input. Totally a valid comparison, and it doesn't make you look clueless at all. &gt; If you really think that a well architected, peer reviewed, thoroughly unit-tested MVC framework with a strong community behind it is only worth a "few hours of work" I think it's worth several hundred negative hours of work, because the several dozen you're saved not building one are outweighed by the hundreds it takes to get rid of them once you get big enough to solve the real problems they're there to plaster over. What I actually said was that it took a few hours to do the work that frameworks are there to cover. No, of course it takes longer to do a generic silly version than it does to make an application-specific one. You have to do massive amounts of silly juggling to handle tons of nonsense edge cases that'll never apply in context. Try less hard to read into the text. But yes, actually, I did custom build the webserver and embed it into the application. Not that that's a legitimate line of argument either - most people should not do that, as writing a secure webserver is hard. But you happen to be talking to someone who does the work you apparently imagine nobody does. Writing HtStub took me a matter of about eleven hours. It's about twice as fast as Misultin, because it doesn't do most of what Misultin does. Incidentally, if you can hold up a well architected generic web framework, I'll take a film of myself eating a hat for you. They don't exist, and that you're telling me that all I have to do is chase a unicorn makes it clear to me that you haven't the faintest clue what "well architected" actually means. Software architecture is not a question of snapping together colored blocks that someone else made and then reciting golden OHM words like "mvc." The idea that you should lock yourself into something trivial like model view controller when HTTP itself already is model view controller makes it perfectly clear that you're just another amateur following the herd. &gt; you're clearly beyond convincing otherwise. Yeah, having actual experience and doing real large scale architecture usually leaves people beyond the convincing point of rank amateurs. Funny, that. Feel free to screech that you aren't a rank amateur, even though you've never actually been the architect of a large software project. (You could tell me that I don't know you or what you've done, but let's be honest, when someone doesn't know what the baton is for, it's obvious they don't conduct orchestra; you have never been within 100 feet of a room where software architecture is done.)
They are all important things in different ways. Some relate to the architecture of your web application and some don't. The only way you will gain an understanding of these concepts is to research them and put them into practice, in projects of increasing levels of complexity. There are some concepts that people espouse, and it will benefit you to try and understand them now, but really you will only learn their importance as you build stuff. Some common ones that I have found to be true (smart people have written about them at length if you want to Google them): * KISS - Keep it simple (stupid) * YAGNI - You ain't gonna need it * Premature optimization (and the perils thereof) * Database normalization * And many more 
No, and there are many ways to cache and many levels at which it can be used in your software. For example the following can be cached: - Results of heavy calculations - Results of slow queries - Responses to requests to remote systems - Objects that are expensive to construct These can be cached in places like: - static class attributes - memcache - a database - a registry object - flat files
No, I havent considered that. Ultimately, there are limited resources, and this would be very low on the priority list. Actually, there are no resources, but if there were, it would be low on the list :)
Scalability is one of the most important. You can have software whose code is beautiful, even artful. It can employ every OO design pattern in textbook fashion. It can be maintained trivially by even the most green developer. But if it doesn't scale, your servers will grind to a halt after your first day of heavy traffic. Use caching, consider efficiency at every stage of development, don't sacrifice performance for the sake of "pretty" code. Combine queries to cut down on round-trips to the DB. Use indexing on your tables, but don't abuse it. Consider an opcode cache like APC.
&gt; Combine queries to cut down on round-trips to the DB. So something like: UPDATE table SET col1 = 'val1'; UPDATE table SET col2 = 'val2'; Is better written as: UPDATE table SET col1='val1', col2='val2'; ?
Yes. And: SELECT * FROM table WHERE id=1234; SELECT * FROM table WHERE id=1235; could be combined as: SELECT * FROM table WHERE id in (1234,1235); or even: SELECT * FROM table; ... if the table doesn't have a ridiculous number of rows. Also, INSERTs can be combined with the INSERT INTO ... VALUES syntax.
So let's say we've got classes set up in such a way that each object has a corresponding record. // create a new cat based on record 1 in table 'cats' $cat = new Cat(1); // this executes SELECT name FROM cats WHERE id='1'; $cat-&gt;get('name'); So should the function 'get' make the query or should the constructor fetch all the data when the object is initialized? edit: Or should the class get its values from a cache?
I want to preface this with that I did this a few weeks ago and just finished a big Fat Tire. Apologizes for omissions. One option to use your own HTML/formatting is this: Say you have &lt;?php $myform = new MyForm(); ?&gt; Now in your code you can plot it in wherever you want it: &lt;ul&gt; &lt;li&gt;&lt;?php echo($myform-&gt;firstname); ?&gt;&lt;/li&gt; &lt;li&gt;&lt;?php echo($myform-&gt;firstname); ?&gt;&lt;/li&gt; &lt;/u&gt; That is assuming firstname and lastname were declared in the class. Hint: It will also show you error/debugging messages.
Thanks! Wasn't the most proud of this one, kinda fell together at the last second. I hope to plan on refining it some day buut we'll see how that goes. As to the color scheme in the presentation? Just used the [Copy With Style TextMate bundle](https://github.com/bblimke/copy-with-style-tmbundle) and one of the TextMate color themes, can't remember which. Think it might have been iPlastic or something.
Maybe Martel_The_Hammer can say if the unicode argument is relevant. Only he knows. And if he doesn't, it's relevant.
A URI is an HTTP URL, in lamens terms a web address. A controller in any framework is designed to do an action depending on what URL you use to visit it. Most of these URL visits can be described as events because you cause your web server to run code. The idea is to visually document the HTTP URL, the action, and any variables it takes through HTTP over POST GET or anything. The key I think would be to combine something like this: http://codeigniter.com/user_guide/general/controllers.html#functions With something like this: http://api.shopify.com/order.html In hopefully a much more visually appealing way. 
Uses mb_strrpos to find the last dash in the string, then cuts the string there, discarding the dash. This solution also does not walk from the beginning, so it doesn't process any unnecessary data. function grab_ints($input_str) { $int_convert = (function($strings) { $r_ints = array(); foreach($strings as $key =&gt; $value) { array_unshift($r_ints, (int)$value); } return $r_ints; }); $capture_length = 2; $captured_strings = array(); $haystack = $input_str; // Continually chop off until we've gotten all our matches. for($i = 0;mb_strlen($haystack) &gt; 0 &amp;&amp; $i &lt; $capture_length;$i++) { $bound = mb_strrpos($haystack, '-'); $capture_str = mb_substr($haystack, $bound + 1); $haystack = mb_substr($haystack, 0, $bound); if(0 == mb_strlen($capture_str)) { $i--; // This match doesn't count. continue; } $captured_strings[$i] = $capture_str; } if($capture_length == count($captured_strings)) return $int_convert($captured_strings); else return array(); }
I'd say look through a framework that's PHP 5.3+, such as Symfony2 (Silex/Pimple). Understanding how people structure very large solutions is the key here I guess.
I still don't get what you want to do... Do you just want to document your website? Are you asking for visually appealing ways to do it? Are you looking to automate creation of documentation? Because, the way you're explaining it, it sounds like you just want to write out documentation for your CI app, which should be super easy and glaringly clear if you have a CI app.... You'd just be writing stripped down versions of your controllers controllername function($getparams...) $postparams abstract
Visually appealing ways to do it.
Php.net is pretty good, just go through their [OOP section](http://php.net/manual/en/language.oop5.php).
You may want to head over to web design then, r/Php is more for... Php That being said, throw a little jquery on that bitch with a slidedown for you description and parameters and make it look nice and pretty and clean and you should be fine. I imagine the only people interested in it would be programmers so usability if far more important than aesthetics.
Would need to get more information before I can give a good answer... What OOP concepts do you already know and apply? Which OOP techniques do you want to learn? Different techniques are useful for different problems. You might want to read up on Law of Demeter since some of the 'advance' concepts come from that basic rule (Dependency Injection, Loose coupling, etc) It's also good to read through code from the new stuff coming out of PHP 5.3. Symfony 2 and Doctrine 2 are a couple of good examples. It would be a good exercise to compare how Doctrine 2 solves problems versus Doctrine 1.2.
The OO section on php.net is probably the worst place to go to learn advanced OO concepts because it doesn't teach them. It just shows you the mechanics of the tools, not how to use them properly.
I would recommend to start with this book: [PHP Object-Oriented Solutions , 2008](http://www.apress.com/9781430210115) [[preview](http://books.google.com/books?id=dt9erHv5nGUC&amp;lpg=PR1&amp;dq=PHP%20Object-Oriented%20Solutions&amp;pg=PR1#v=onepage&amp;q&amp;f=true)]. And maybe you can find something good in old [PHP in Action, 2006](http://www.manning.com/reiersol/). But that about will cover the prepackaged materials for php developers. You can find some good stuff on if you look for things written by **Martin Fowler** or **Robert C. Martin**. But most of it will be either language-agnostic or focused on java. And there are few videos you could watch: - [Inheritance, Polymorphism, &amp; Testing](http://www.youtube.com/watch?v=4F72VULWFvc) - [Global State and Singletons](http://www.youtube.com/watch?v=-FRm3VPhseI) - [Don't Look For Things!](http://www.youtube.com/watch?v=RlfLCWKxHJ0) - [Advanced OO Patterns](http://vimeo.com/21173483) - [Beyond Frameworks](http://vimeo.com/21145583) And and audio/slides from a talk in one of php conference: [Cake is a Lie](http://techportal.ibuildings.com/2011/03/15/dpcradio-the-cake-is-a-lie/) But .. that said. You will have to learn on your own. Which mostly will entail reading what other people say about it, writing your own code, letting the community to review it and being called names. Few places which would be useful for it would be [Sitepoint's php application design forum](http://www.sitepoint.com/forums/forumdisplay.php?147-php-application-design), [StackOverflow's PHP chat room](http://chat.stackoverflow.com/rooms/11/php) and of-course official ##php channel in Freenode IRC server.
Just a side note to add to your post: OO concepts are portable. The supported features in languages may change, the syntax may change, but OO concepts typically do not change. Don't be afraid to look at OO books if they're not specifically written for PHP.
I sincerely hope you're joking. 
Once you know the *how*, it's time to learn the *why* and the *when*. A mistake a lot of beginners to OOP make is to go nuts and make everything a class without doing any OOA (analysis) and/or OOD (design). Unfortunately I don't really know of any good OOP resources that are geared toward PHP development. My Google search only turned up blogs and stackoverflow links that were either just wrong or incomplete. The Wikipedia [OOP article](http://en.wikipedia.org/wiki/Object-oriented_programming) isn't a bad place to start. Surf through the links there and learn about polymorphism and inheritance and OO principles like SOLID.
I think OP is searching for the wrong thing. See, the term Object Oriented Programming includes syntax rules and how things behave. What you want to know more about is Object Orient Design (OOD); how to structure object interactions. teresko has linked to the best of the best. When I took OOD in college I studied material from Misko, Uncle Bob, and Martin Fowler. Uncle Bob has some of the greatest articles on OOD and he really lays everything out in a way that is easy to understand. The Best place to start out is this article by uncle bob. [Design Principles and Design Patterns](http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf) Here he lays out the 5 basic principles of OOD. From there read more of their articles [here.](http://www.objectmentor.com/resources/publishedArticles.html) Once you get a solid grasp of OOD principles and ideas, then you can take a look at the Gang Of Four - [Design Patterns](http://ifile.it/9r5c70) which employ OOD principles to layout common programming patterns that solve common problems. You will find very little OOD material in php because OO is an idea, and ideas are bulletproof Mr. Creedy.
Use the ViewScript decorator for the form: public function init() { $this-&gt;addElement('text', 'firstname', array('label'=&gt;'First Name')); $this-&gt;setDecorators(array( array('ViewScript', array('viewScript'=&gt;'forms/myform.phtml')), 'Form', // Wraps the content in a &lt;form&gt; tag 'PrepareElements' // Prepares the element in case you're using subForms )); } If you do this you can render out the individual element decorators in your viewscript: &lt;div class="formElement"&gt; &lt;div class="label"&gt;&lt;?= $this-&gt;element-&gt;firstname-&gt;renderLabel() ?&gt;&lt;/div&gt; &lt;div class="element"&gt;&lt;?= $this-&gt;element-&gt;firstname-&gt;renderViewHelper() ?&gt;&lt;/div&gt; &lt;/div&gt; 
Holy passive aggressive response batman. The regex the original response gave won't pick up numerals from different character sets because it isn't in utf-8 mode. You could argue that that is potentially confusing, maybe maybe not, from the description the OP gave it sounds like some CSV variant where the likelihood of non-latin characters is 0. Secondly, fuck speed, I don't care about speed. List of things that are important to me, hmmm, no speed. If I wanted speed I wouldn't be using PHP anyway. Efficient referred to that you needed one line to solve the problem. (while also being readable) For the rest of your rant, assumptions, etc.. Have fun with that.
Like this: (simple login form) tl;dr `$this-&gt;clearDecorators()` &lt;?php class LoginForm extends Zend_Form{ public function init(){ $this-&gt;setName('loginform') -&gt;setMethod('post') -&gt;setAction('/login'); $email = new Zend_Form_Element_Text('email'); $email-&gt;setLabel('Email') -&gt;setRequired(true); $password = new Zend_Form_Element_Password('password'); $password-&gt;setLabel('Password') -&gt;setRequired(true); $submit = new Zend_Form_Element_Submit('submit'); $submit-&gt;setLabel('Login'); $remember= new Zend_Form_Element_Checkbox('remember'); $remember-&gt;setLabel('Remember Me') -&gt;setRequired(false); $this-&gt;addElements(array($email, $password, $remember, $submit)); # winner winner chicken dinner.... clearDecorators() $this-&gt;clearDecorators(); $this-&gt;addDecorator('FormElements') -&gt;addDecorator('Form'); # decorators for all elements $this-&gt;setElementDecorators(array( array('ViewHelper'), array('Errors'), array('Description'), array('Label'), array('HtmlTag', array('tag' =&gt; 'div', 'class'=&gt;'element')) # give it a div with a class )); # decorators for individual elements - overwrites decorators made above $submit-&gt;setDecorators(array( array('ViewHelper'), array('Description'), array('HtmlTag', array('tag' =&gt; 'div', 'class'=&gt;'submit')) )); $remember-&gt;setDecorators(array( array('ViewHelper'), array('Errors'), array('Description'), array('Label', array('placement' =&gt; 'APPEND')), # places label after checkbox array('HtmlTag', array('tag' =&gt; 'div', 'class'=&gt;'checkbox element')) )); } } Outputs: &lt;form action="/login" method="post" enctype="application/x-www-form-urlencoded" id="loginform"&gt; &lt;div class="element"&gt; &lt;label class="required" for="email"&gt;Email&lt;/label&gt; &lt;input type="text" value="" id="email" name="email"&gt; &lt;/div&gt; &lt;div class="element"&gt; &lt;label class="required" for="password"&gt;Password&lt;/label&gt; &lt;input type="password" value="" id="password" name="password"&gt; &lt;/div&gt; &lt;div class="checkbox element"&gt; &lt;input type="hidden" value="0" name="remember"&gt; &lt;input type="checkbox" value="1" id="remember" name="remember"&gt; &lt;label class="optional" for="remember"&gt;Remember Me&lt;/label&gt; &lt;/div&gt; &lt;div class="submit"&gt; &lt;input type="submit" value="Login" id="submit" name="submit"&gt; &lt;/div&gt; &lt;/form&gt; If you are using a File Element you have to do this (after adding file element to form in the # decorators for individual elements section): $file-&gt;setDecorators(array( array('File'), # this is what file needs instead of ViewHelper array('Errors'), array('Description'), array('Label'), array('HtmlTag', array('tag' =&gt; 'div', 'class'=&gt;'element file')) )); 
That isn't neccessary. You need these few lines of code (after adding elements to form - see my other post for more code sample) // instantiate your form elements $this-&gt;addElements(array(/* form elements */)); # add them to form $this-&gt;clearDecorators(); # rid yourself of default decorators $this-&gt;addDecorator('FormElements') -&gt;addDecorator('Form'); $this-&gt;setElementDecorators(array( # apply these to all elements array('ViewHelper'), array('Errors'), array('Description'), array('Label'), array('HtmlTag', array('tag' =&gt; 'div', 'class'=&gt;'element')) # give it a div with a class ));
That's not what's important. Example: // $catIds = array( imagine 100 integers here ); foreach ($catIds as $catId) { $cat = new Cat($catId); echo $cat-&gt;get('name'), "\n"; } In this case it doesn't matter which of your two choices you pick, because it's probably not as efficient as selecting those rows in one query. 
This a really interesting point of view and it's cool to see some balance against the pro-framework status quo on /r/php. Surely though the argument in favour is that a huge proportion of projects are very generic and therefore fit well?
gotcha. nice one.
The unicode argument is *always* relevant. Doing something a bad way because you imagine it won't ever cause a problem is part of why some programmers succeed and others don't.
&gt; The regex the original response gave won't pick up numerals from different character sets because it isn't in utf-8 mode. Yes, that's one of the many defects, but that isn't the one I was talking about. Maybe if you work on your reading skills some. &gt; Secondly, fuck speed, I don't care about speed. He says, having just tried to talk about "efficiency." &gt; List of things that are important to me, hmmm, no speed. &gt; &gt; but from the all the information the OP gave this is most efficient. (cough) &gt; Efficient referred to that you needed one line to solve the problem. That's not what the word "efficiency" means, and the same is true of the other solution, so it's still just proof that you're refusing to consider anything but your own idea. But hey, maybe next you can say "oh I don't care about how many lines, efficient referred to whether you had to type the letter 'x'." It's a wonder you expect to be taken seriously. &gt; For the rest of your rant, assumptions, etc.. Have fun with that. (head-pat) Whatever you have to do to not admit it. &gt; Holy passive aggressive response batman. Stop using phrases you don't understand to try to get social curry.
&gt; Surely though the argument in favour is that a huge proportion of projects are very generic and therefore fit well? That's the argument people make, but it isn't correct. No project fits a generic better than it fits something made for that project. By definition, one-size-fits-some is *less* native than something made to suit. You have to consider the null hypothesis every time you look at an advantage. In this case, the null hypothesis doesn't mean doing nothing; it means doing the job without a framework. No, there is not a huge proportion of projects which would be better served by average than by built-to-suit. With the notable exception of sites made specifically to promote frameworks, I cannot think of a single, solitary example. Can you? Upboated for the sadly reddit-and-proggit-rare attempt to discuss intelligently through a disagreement.
I downloaded htstub from http://crunchyd.com/release/htstub.zip to see how little code you needed in Erlang for that kind of thing, but there is only one source file - htstub.erl - which is pretty much empty.
Oh, out of date link. It got moved into scutil years ago. http://scutil.com/ Where did you find that link? I need to fix it. To wit, the copy in the public library is years out of date. It's a fair bit different by now.
Do you know a good tutorial on specific alternatives to singletons? The Google talk is good and makes a lot of sense, but I haven't seen any actual solution for OO PHP — especially one that's as easy to understand and implement as singletons.
What, exactly, does this mean? It sounds like a bunch of copypasta nonsense with nothing to back it up.
Was it hard to write this post with only one hand? You're exactly the type of developer I never want on my team. Someone who wastes weeks and months inventing technical hurdles that shouldn't exist while not actually working on the product. After finally delivering the product a year over schedule, and tens of thousands of dollars over budget, we finally get some up-take! We need to scale and fast... but, oops, we can't because your crap-ass custom written web-server wasn't built to accomodate load-balancing and/or can't scale past a single box. While you're frantically trying to refactor your mess of a web server, your competitors - who are far more agile and efficient, are happily stealing your customers hand over fist. This is something you'll dismiss, of course. You'll tell yourself that your "superior proprietary master race" code is worth more than trivial things like revenue or actually shipping, and that your peers over at your competitors are a bunch of "herd following amateurs".
Besides the overall syntax I think I understand inheritance pretty well but I am having trouble with polymorphism. I understand how it works but I just dont know how to apply that my projects. I find my self making most of my class's to specific and cant really reuse them in other situations. I also don't know how to make my objects work together, I find my self creating an object for everything little thing I do instead of making them work together.
Thanks for the info! I was trying to avoid taking a beating from reddit about my code but I guess I cant avoid it.
The alternative is to use [Dependency Injection](http://martinfowler.com/articles/injection.html). That is covered mostly in 3rd video and a bit in 4th. The last video and "cake" presentation is more of a *"do not learn OOP practices from php frameworks"* warning.
Right, most frameworks can be used as a library by just not leveraging the architectural assumptions. But once you start doing it "the *framework* way", it's no longer being used as a library. Remember, libraries are there to implement things so you don't have to. A framework is there to (for lack of a better word) scaffold together the basic structure of the solution and let you worry about the specifics. I won't get into whether or not the scaffolding the framework provides is a good thing or not (hint: it depends), but it's very important to be aware of the distinction...
&gt; Was it hard to write this post with only one hand? Your personality is showing through. `:)` &gt; After finally delivering the product a year over schedule, and tens of thousands of dollars over budget, we finally get some up-take! Lol. Keep guessing, Frank. &gt; While you're frantically trying to refactor your mess of a web server Oh no, a stranger who doesn't know how to make adequate choices is criticizing code he's never seen based on problems that come from his imagination! How ever will I live it down? &gt; You'll tell yourself that your "superior proprietary master race" code Godwinning? How sad. You sure do get desperate when someone points out you have no legitimate technical basis for your claims. I am amused, though, that you attack someone for things you imagine nobody does, and when it turns out they do, you pretend that they've been advocating that when they were actually just laughing at you for being wrong. Have fun with your personal attacks.
unless they're written for python...
yeah, with this book I began grasping what PHP OOP was all about
Dependency injection solves the problem with making dependencies clear and explicit. It doesn't solve the problem of certain classes requiring just one instance. You can inject dependencies that uses singletons, after all. If you don't enforce the only one instance rule in the class itself, how do make sure it's followed? Manually, by only writing one new statement in your code and explicitly injecting that same object into everything that needs it?
From http://htstub.com/ on the "Download now" link. Thanks for the pointer.
You really should finish watching the 3rd video =P You enforce the single instance ( i guess you mean MySQLi/PDO object .. which, if you think about case with multiple databases , would actually be idea ) by using Factory classes.
Oh god, I totally forgot I owned that domain. :D
...and the pot calls the kettle black :P I have nothing to prove to a stranger on the Internet, just like you have nothing to prove to me. We disagree on the value of frameworks, and nothing we say here is going to change either of our minds. Your basic argument is that it's a foolish decision to use a framework. I think it's a foolish decision to not use a framework. We're clearly coming at this from two polar opposite ends of this spectrum and we clearly measure the success of a project with completely different metrics. With any large scale project, you'll refactor out the overly generic bits of the framework over time. The benefit of a framework is it lets you instantly focus on your application. It gives you nice hooks for writing test cases. It provides structure for your team to follow and makes it easier to maintain. Also if there are bits of a framework you don't like or fight what you're trying to do, then don't use those bits! I find the Auth and ACL systems in most frameworks to be too generic and usually roll my own, for instance. By using a framework you aren't signing some sort of contract that says you must use 100% of it. Any decent framework will also play nice with outside libraries as well. A framework doesn't stop you from doing what it is you want to do.
Would have been nice if Part1 covered something meaningful other than just a signup.... Definitely interested to read the rest of articles when they come out
&gt; ...and the pot calls the kettle black :P Yes, I'm making technical arguments and laughing at your personal attacks and lack of technical arguments. Clearly tu quoque is the appropriate response. &gt; Your basic argument is that it's a foolish decision to use a framework. This is, of course, not even remotely close to what I actually said. &gt; With any large scale project, you'll refactor out the overly generic bits of the framework over time. Ah. So the reason a framework is good is because you'll eventually get rid of it. (rolls eyes) &gt; The benefit of a framework is it lets you instantly focus on your application. I don't need a framework for that. &gt; It provides structure for your team to follow If you had been paying attention, you'd know that this was my complaint. However, since you're arguing with something you haven't even figured out yet... Please have a nice day; I'm bored of this.
How many users are we talking here? I generally break a site up by orders of magnitude of 2, so: 2, 20, 200, etc. The difference between a 20 and a 200 user website isn't huge, but the difference between a 200 and 2000 user website is quite noticable and you need to code for that.
Do you feel that the suspension of all validators devalues the IDE's usefulness, or do you not miss them?
Well I wanted to keep this discussion general, but- what I'm working on, (see: [/r/improviseit](http://reddit.com/r/improviseit/)), is a wiki web-game engine. So the users will be contributing content (in the form of game elements) as well as existing in the virtual world. This means that each user will have a variable load on the server depending on which world-variables they are currently viewing (and how frequently they are contributing or performing actions in the world). But to answer your question, the more users it can handle the better. All the data is stored in MySQL tables and accessed in PHP via classes that can be executed within potentially evaluated entries in a CMS. Sadly I built the classes in the reckless and ignorant manner of a sloppy miscreant, and I'm now attempting to do it a little better. r/PHP has been amazing in that regard. I swear I once knew *of* abstract classes, I just didn't see when I should use them. And I promise to remove the dozens and dozens of evals. And there is barely any caching, except [mysql query cache](http://dev.mysql.com/doc/refman/5.1/en/query-cache.html).
You're not making technical arguments. In fact, you haven't made a single technical argument in this whole thread. You started this thread with a snarky condescending comment. At best just being a troll, at worst just being a dick. This entire thread is rife with your personal preferences which you seem to think amount to valid technical arguments. You then shifted into personal attacks and making assumptions about my career or experience (in which the irony was clearly lost on you when I did it to you in response). You don't like MVC frameworks, we get it - that doesn't make them WRONG. Something is only "doing it wrong" if it's stopping you from shipping. You might get a better discussion going in the future if you actually presented some insight and facts instead of hyperbole and pompous douchebaggery.
That's bullshit and you know it. If you build a parser for text files spit out by some ancient program and Unicode-specific stuff shows up in a code review, I will inquire in a friendly manner why you're spending the client's time on that. If you say the unicode argument is *usually* relevant, I can totally get behind that.
I will watch that video when I'm back to a reasonable machine to watch it on. :) But the Google guy doesn't speak specifically about PHP, which is why I'm asking. Yes, a database object is the most obvious example of my problem. A factory class that creates only one instance of the database object is basically just a fancy singleton class, right? Enforcing a single instance in the factory class instead of the database class itself only moves the problem one step up in the class hierarchy. It doesn't seem like it solves the problem with singletons in a way that would satisfy the Google guy.
&gt; Also it doesn't seem to failover to the next server on the list. You could do this in your own wrapper function - you should probably have wrapper functions for your caching layer anyway, so you can switch it out at ease (for example, for a file-based cache for servers without memcached, or a null cache for development). Anyway, what do you expect this "redundancy" feature to do?
You could run it as root, but then I really doubt you'd want to run PHP as root, especially if it touches a mySQL database - for obvious reasons.
No , in this case let say you are using classes `User` and `Document`, which both require an access to database. And lets assume they expect that access as only parameter in the constructor You create a factory which hold this db connection and create you instances of Users and Documents. $connection = new PDO( 'sqlite::memory:' ); $factory = new Factory( $connection ); // somewhere deeper on your codebase public function do_stuff( $factory ) { $user1 = $factory-&gt;build( 'User' ); $document = $factory-&gt;build( 'Document' ); $document-&gt;assignTo( $user1 ); $user2 = $factory-&gt;build( 'User' ); //etc } You pass around the factory which create the object for you, and already knows that it has to provide each one with DB connection .. And maybe you later need to add caching too. Then you only need to change (or replace) the factory class, but the `do_stuff()` method stays the same. This method only cares that it can have new object, not where they actually come from or what is required to make them.
I've been teaching myself PHPUnit to test the classes that I'm writing.
So I need some sort of factory that can send me an array of objects fetched in a single query.. $catIds = array( imagine 100 integers here ); $catFac = new CatFactory(); $cats = $catFac-&gt;getCats($catIds); foreach($cats as $cat){ $cat-&gt;get('name'); } edit: So there has to be two constructors, one that initializes based on the database, and another that constructs based on a set of values. Ah this [link](http://stackoverflow.com/questions/1699796/best-way-to-do-multiple-constructors-in-php) describes what I need.
&gt; You're not making technical arguments. Okay. &gt; You don't like MVC frameworks, we get it You keep saying you get things about my preferences which are not correct and which are things I have not said. &gt; You might get a better discussion going in the future if you actually presented some insight and facts instead of hyperbole and pompous douchebaggery. Lel. Are you done yet? 
&gt; That's bullshit and you know it. (rolls eyes) Okay. &gt; If you build a parser for text files spit out by some ancient program Yeah, that's how PHP faces the world. &gt; If you say the unicode argument is usually relevant, I can totally get behind that. Not interested. 
lol. Scumbag Redditor. Claims to be done with thread. Makes pointless reply just to have the last word.
&gt; lol. Scumbag Redditor. Are you done trolling yet? &gt; Makes pointless reply just to have the last word. That's ... kind of all you've been doing for several posts now, guy. You aren't very self aware, are you? Get out of your false punishment fetish, please.
I would disagree somewhat, Zend Framework is made specifically to be both a framework and a library. When you code in a framework, generally large portions of your code end up completely portable and in libraries useable across projects. The framework is there to scaffold the app together, true...but frameworks like Zend are also there as libraries outside of the normal framework as well. A good coder who uses a framework well writes most of their code as libraries, just as zend is a library. For me the framework piece is a small portion, and writing code as libraries allows me to change frameworks easily by simply including the required Zend classes that my libraries depend on. I'm not really sure why you're trying to talk to me like you're my teacher either. You might be surprised if you knew a little about my background. People who like to belittle frameworks are often times programmers who don't understand how to use them properly. They aren't the end-all-be-all solution, but if you know how to use it they are a tremendous time savings and tend to promote similar coding styles between programmers. There are quite a few OO design patterns to learn in frameworks that most programmers who don't ever use one will never learn. Downvote for your attitude.
lol, I'm the troll? I'm the one who isn't self-aware? Do you even read what you post? Come on - reply again. I dare you. It drives you crazy not to have the last word. I've checked your post history - you NEVER let a thread go without the last word. It's amazing. Keep posting, lets see how deep this compulsion goes.
You can roll your eyes all you want and send me private messages insinuating that I lack the experience to know the Universal Truth of Unicode, but when you disregard many real life scenarios you just haven't encountered with a statement like: &gt; Yeah, that's how PHP faces the world. people shouldn't take blanket statements like "Unicode is *always* relevant" as gospel. I have been in this business for a decade and a half, and know that in some cases, unicode is in fact not relevant. In most cases it is, but not all. Nothing is relevant in all cases. Imo, unicode is *almost always* relevant. That's why I said that if he doesn't know if unicode is ever going to be relevant or not, it most certainly is relevant. edit: I think technically we agree and I was a bit rude about it.
So the idea here is that you manually create one factory with one database object? There's no actual code creating them or limiting the instances of them?
I do not miss them at all. They don't add much to the usefulness of Eclipse—most of the time they are even wrong, especially when mixing PHP with HTML. Besides, the 'suspend all validators' option, suspends the validators on a global level, you can still validate your project manually if you like.
Security 
&gt; lol, I'm the troll? I'm the one who isn't self-aware? Please stop soon. It's been quite a while since you've had anything to say other than personal attacks.
We have 3 web servers in a load balancer, and I'm using memcached for session storage. So basically no matter which server the client gets directed to, I want their session to be there. Also I'm using repcached, to provide a backup of the data in memcache on one of the other web server in case we need to restart the server.
&gt; You can roll your eyes all you want ... &gt; and I was a bit rude about it. Yep. &gt; I think technically we agree Nope. &gt; and send me private messages insinuating that I lack the experience I made no such insinuation. Please stop consuming my time. I sent you that private message because I was trying to get you to stop replying here. &gt; but when you disregard many real life scenarios I haven't disregarded *any* scenarios. My entire point is that *****you***** are disregarding the scenario where requirements change over time. Please stop arguing now. I don't want to listen to how you didn't read what I said, how I'm wrong, but you imagine we still agree, et cetera. No, we do not agree, and I'm tired of you incorrectly telling me what my opinion is. 
&gt; Nope. So you say that you should take the time to account for unicode *always*, even when parsing data from a 1988 system that's all guaranteed to be in ASCII, or parsing data that you are sending and know to never contain unicode? Talk about consuming time... &gt; I haven't disregarded any scenarios. My entire point is that you are disregarding the scenario where requirements change over time. Nope. I'm not disregarding those. I've said over and over again, in those scenarios you *do* take unicode in account. &gt; I sent you that private message because I was trying to get you to stop replying here. If you want to continue the discussion, please do so in public. &gt; I made no such insinuation. &gt; "you end up not getting the benefit of an explanation from someone with experience." &gt; "Ask yourself whether your behavior is actually costing you an understanding you might need." Your post history shows you to be a big fan of blanket statements (regarding unicode, frameworks, your preferred method of programming, etc.). Everyone who disagrees or points out scenarios where your method may not be the preferred one is insulted and labeled as a beginner, someone lacking experience, inept, etcetera. As you are posting over and over again that people aren't listening to you, and disregarding situation x, y or z, you yourself are disregarding situations where other people's solutions may be equally or even more adequate than yours. This is something I see in a lot of programmers after they outgrow the first few years of learning. They become cocky and parrot things that are true in their experience as global universal truth and disregard everyone else's opinion and experience as wrong. In a few years you will look back at this bickering and laugh :) &gt; Please stop arguing now. I don't want to listen to how you didn't read what I said, how I'm wrong, but you imagine we still agree, et cetera. You are and have been free to stop this discussion at any point. I do not reply to my own posts.
What you call personal attacks, I call observations. You keep validating them. I've been essentially done with this thread as of your first reply, but you just keep replying and my sick curiosity compels me to see how long you'll actually keep this up for despite me not actually typing anything. I mean, I've made it blatantly clear what's happening here and yet you insist on having the last word. I really hope you don't reply, to be honest, as I'm starting to feel bad for taking advantage of this disorder of yours.
&gt; So you say that you should take the time to account for unicode always, even when parsing data from a 1988 system that's all guaranteed to be in ASCII This *also* is not what I said. &gt; If you want to continue the discussion, I keep saying I don't. &gt; Your post history shows you to be a big fan of blanket statements Wow, a guy who doesn't understand what I said wants to tell me other things he didn't understand. (yawn) Please stop pretending to know me soon. &gt; As you are posting over and over again that people aren't listening to you Pretty much just you and one other dude. &gt; This is something I see in a lot of programmers after they outgrow the first few years of learning. That's nice. &gt; They become cocky Oh goody, insults. &gt; and parrot things that are true in their experience Oh, right, things that happen frequently in the real world ... should *****not***** be considered. &gt; disregard everyone else's opinion and experience as wrong. I don't do that, though. That I disagree with *your* opinion, which has nothing to do with experience and everything to do with guessing what'll happen in a third party's situation, doesn't mean I disagree with everyone's. It's really boring how you keep pretending to know me. &gt; You are and have been free to stop this discussion at any point. What discussion? This is just you making repeat false claims about my beliefs then me saying "stop it please" over and over. Stop it, please.
I like how you can infer a decade long resume on the single basis of "used frameworks". It's impressive. Tell me, what are you doing writing code? With that kind of detective skills you could be a real life Sherlock Holmes. Or maybe a doctor, or a rocket scientist. But no, instead we'll just whinge on the Internet about frameworks.
&gt; What you call personal attacks, I call observations. That's nice. It takes a very special mind to brag that they're responding to someone who doesn't want to hear from them, for the explicit purpose of generating an emotional response, yet does not understand itself to be a troll. &gt; my sick curiosity compels me Desperation to be correct * &gt; I mean, I've made it blatantly clear I imagine you genuinely believe that. &gt; and yet you insist on having the last word. Yes, you want to get your control. Either I just keep pointing out how full of crap you are, and you feel like you win because way deep into your trolling you decided to pretend you were egging me on, or I ignore you, and you feel like you win because eventually I got bored. This is the problem with the troll: there's no response that doesn't make it feel like it has pushed someone around. (popcorn) Go on, document your stupidity for all to see. &gt; as I'm starting to feel bad for taking advantage of this disorder of yours. Yes yes, if I think you're boring and obnoxious, I have a mental illness. (rolls eyes) Keep trolling, troll.
Derpity derpy derp
Whenever you're done.
&gt; I like how you can infer a decade long resume I like how you can pretend I've done things I haven't actually done. &gt; But no, instead we'll just whinge on the Internet about frameworks. Yes, people whose messages are just whinging are something you should be concerned about.
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor, est non feugiat sollicitudin, erat massa dignissim massa, nec consectetur nulla lectus ac turpis. Suspendisse adipiscing, lectus quis blandit lobortis, velit augue scelerisque felis, a iaculis felis magna at augue. Nullam nec cursus justo. Nulla scelerisque congue nulla et mollis. Proin porta consectetur euismod. Vivamus sagittis tempus urna, ut viverra eros faucibus quis. Vivamus non orci ac mauris congue iaculis. Sed fringilla auctor nisi, id tincidunt nisl bibendum at. Fusce suscipit lectus id purus malesuada hendrerit. Vivamus interdum bibendum nunc, ac congue urna bibendum at. In urna magna, mattis adipiscing feugiat sed, porttitor a urna. Suspendisse potenti. Pellentesque convallis volutpat viverra. Duis vel risus eu neque hendrerit scelerisque. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
Mostly I just wanted to see if you'd reply to a trolly comment that contributes nothing to the overall discourse.
's pretty much all I've done on reddit today. At least you can admit it.
You are just desperate to be in control, aren't you? "I'm going to make him stop replying by just wasting space!" How sad to watch. It makes one wonder just how little control you have in your real life, that you need to act this way anonymously.
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor, est non feugiat sollicitudin, erat massa dignissim massa, nec consectetur nulla lectus ac turpis. Suspendisse adipiscing, lectus quis blandit lobortis, velit augue scelerisque felis, a iaculis felis magna at augue. Nullam nec cursus justo. Nulla scelerisque congue nulla et mollis. Proin porta consectetur euismod. Vivamus sagittis tempus urna, ut viverra eros faucibus quis. Vivamus non orci ac mauris congue iaculis. Sed fringilla auctor nisi, id tincidunt nisl bibendum at. Fusce suscipit lectus id purus malesuada hendrerit. Vivamus interdum bibendum nunc, ac congue urna bibendum at. In urna magna, mattis adipiscing feugiat sed, porttitor a urna. Suspendisse potenti. Pellentesque convallis volutpat viverra. Duis vel risus eu neque hendrerit scelerisque. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
Now admit you're compelled to reply. I want to help you. Or maybe it's waste your time. I forget which. It gets kind of muddled.
Have you thought about storing the session in a DB and just using memcached as you would normally use it? That way you get the caching, redundancy, and distribution.
Sorry I cant help you directly, but I upvoted so others can see. So are you just wanting to upgrade your own app? Or are you wanting to upgrade something else like Jomoola or wordpress (Third party)? If its the first one Id go with something purely simple like it just requests the page and then pulls the script and writes it into the corresponding file (if you dont have much time) (You'll also need it to invoke another page to update the updater). But basically if you do that, you can give it to them, then update the updater when you have more time. Hope that helps.
Storing session information in memcache is never a good idea. It's possible that even with 3 servers your session information may drop off. You should only use memcache to cache information that is readily available in your database. There is no guarantee that information will still be there when you try to retrieve it.
&gt; Once you get S.O.L.I.D., G.R.A.S.P. OOD principles and ideas FTFY
&gt;So are you just wanting to upgrade your own app? Or are you wanting to upgrade something else like Jomoola or wordpress (Third party)? My own PHP web app. &gt;If its the first one Id go with something purely simple like it just requests the page and then pulls the script and writes it into the corresponding file (if you dont have much time) (You'll also need it to invoke another page to update the updater). But basically if you do that, you can give it to them, then update the updater when you have more time. Yeah, just trying to save time here. I could just as well code this, but was looking at the time aspect of buy vs. build vs. find on Github or something. Also, on updating the updater, you can overwrite the update.php file (even while running) and just tell the page to refresh itself from either jQuery or it will get update on a form POST anyway.
&gt; This *also* is not what I said. Welp, that is the entirety of my point, so we either agree or this is your point. I hate to stoop to your level of argumentation but... you are obviously not comprehending anything I have said so far. &gt; I keep saying I don't \[want to continue the discussion\]. Then why do you? 
Pretty straightforward stuff. Where is the username at? In a DB? Active Directory? If it's in a DB, you're probably going to want to set it in your $_COOKIE variable. Just after your login process, once they're validated, do something like this: setcookie("username", $db_query_result, time()+60*60*24*7); Then, wherever you want to say hello, you can: echo "YO! What up, " . $_COOKIE['username'] . "!?"; Maybe just: echo "Welcome, " . $_COOKIE['username']; Also, you could put it into your functions that get included: function welcome() { if (isset($_COOKIE['username'])){ echo "Welcome, " . $_COOKIE['username'] . "."; }else{ //say something else if not logged in } } Then, if you wanted to run the welcome, you can just: &lt;?php welcome(); ?&gt; Hope that helps. edit: here's some W3C reference on setting cookies: http://www.w3schools.com/php/php_cookies.asp 
That's a bunch of BS. I think the converse is true; that people who refuse to use a framework for some self-righteous reason like that are full of crap. Not to mention way less productive. Of course, it is unwise and not recommended to jump into a framework before learning the underlying language. But frameworks have their place: they increase productivity by releasing developers from the requirement of re-writing or copying/pasting/editing (and subsequently debugging) regularly repeated, boring tasks that are nevertheless necessary to complete.
Would they log in to get to this point? Let's assume they log in with an email address and you want to display a user name from a mysql database. &lt;?php $link = mysql_connect('localhost', 'mysql_user', 'mysql_password'); if (!$link) { echo 'Could not connect: ' . mysql_error(); } // Get the email from the previous login form $email = $_POST['email']; // this is where you sanitize the input.. I'm not going to do it here, BUT IT IS VERY IMPORTANT!! $sql = "SELECT username FROM users WHERE email = '$email' "; $result = mysql_query($sql); if (!$result) { echo "No results: " . mysql_error(); } $username = mysql_result($result, 0); echo "Welcome, $username!"; mysql_close($link); ?&gt;
http://i.imgur.com/DqZml.gif
Yes, total BS and most importantly what you said "way less productive". It's ridiculous how much time you can save by using frameworks. &gt; Of course, it is unwise and not recommended to jump into a framework before learning the underlying language. Well, not recommended but reality. Think of PHP as a framework for C. And C is a framework for assembler. I don't think that more than 10% of PHP Developers ever touched C code let alone assembler. And to be honest, I don't think that would be necessary. Nevertheless knowing a little bit about all of those languages is certainly a big advantage.
nice one, thanks!
Well I think its your only option at the moment. Its been 2 hours, you probably could have coded it in that time and it looks like the search for the moment has given no results. Also nice one on the update while running, I didnt know that, I assumed it held on to the file. Thanks!
&gt; &gt; This also is not what I said. &gt; Welp, that is the entirety of my point Yes, that's why I've been telling you that you didn't understand, and asking you to stop consuming my time. &gt; so we either agree or this is your point. Neither. It turns out there's more to life than agreeing with you or agreeing with the thing you claimed I said. &gt; I hate to stoop to your level (sigh) &gt; you are obviously not comprehending anything I have said so far. So, if I tell you that you're misrepresenting my opinion, then ... I'm ... misunderstanding you? Oh, the chutzpah. &gt; &gt; I keep saying I don't [want to continue the discussion]. &gt; Then why do you? I've been hoping you'd eventually realize that you were doing something pointless, so that you wouldn't do this to someone else in the future. It's my belief that when I walk away from being harangued by someone whose approach is to falsely represent my beliefs until I'm bored, that I encourage them to do that to others. As such, I generally just sit here saying "no, I didn't say that either; please stop wasting time" until people like you stop. It also is somewhat fascinating just how many people believe that they are in a legitimate position to argue with someone else on what said someone else's opinion is, from a single failed reading. It's like it doesn't even cross your imagination that there's the possibility you just read the other person wrong. You very much give the impression that at no point do you consider the possibility of your being in error. Throughout this conversation you have frequently debated external opinion. And, I mean, I guess I just find you unpleasant enough that I'd rather put up with it until you're discouraged than egg you on by making you think that if you just keep repeating yourself you'll "win". I'm tired of the children coming to Reddit these days. I'm tired of how they so frequently interpret rolling over as loss, and how it encourages them to see what used to be a place for polite disagreement into a combat zone. You yourself have frequently phrased this in terms of winning and losing; I find this tremendously disappointing, as well as the way that you and yours erode what used to be a place where people could learn from one another. This is my best understanding of how to make it stop, not in the single post short term, but rather in the long term. Maybe you disagree. I neither am interested nor care; I am only answering the question you asked. Please do not attempt to inform me that my opinion is in error; such a behavior would actually encourage me to believe that I was right. I'm really quite bored of you spending time just telling me who I am, over and over. You haven't said anything new, and your only position is to continue to insist that something that by definition you cannot be correct about is something you're in a legitimate position to argue. No, CodeFocus. I do not have the false choice between agreeing with you and taking the position you pretend I took. My position is neither the position you pretend I took nor the one you are now flogging. Please stop instructing me on my own beliefs. It's just the bottom end of arrogance on your part. Any normal person would know perfectly well that you had long since stepped outside of things you can possibly know. My opinion is that the only reason you continue is that you are emotionally reliant on feeling correct, even though you don't admit that to yourself, and that as such, your doing anything other than responding with "BUT YOU ARE WRONG ABOUT YOUR OWN OPINION" is actually behaviorally outside your grasp. My expectation is that next you will attempt, again, to set up false logic to "prove" your expectation of my beliefs. Have fun with that, Chachi; because I believe it is the only way to make you stop in the long term, I will continue to tell you that you are wrong, and I will continue to decline to engage your imagination. You do not, it turns out, have psychic powers. If you are to the point where you cannot even cope with that you don't know better than a stranger what that stranger's opinions are, then I propose the position that you're pretty fundamentally unable to grapple with your own limitations. It's unfortunate: there's a paper that can help deal with this unfortunate tendency of yours to pretend to yourself that you have the authority to speak on matters that everyone over the age of childhood are outside *****everyone's***** grasp, but it's so frequently thrown around on Reddit as an insult by people who have never read it and don't know what it says that there's zero chance you'll even read it. Indeed, I bet you even know which one I mean. There is such a thing as pretending too hard. I'm sure you'll just tell me that's what I'm doing, but the point remains.
You can just ghetto-it out for now - have the update server send a json/xml response with a map of sorts: filename : new file contents And have the local updater write the file contents to the specified filename. Certainly not the best solution in the world, but it'll probably make do until you can upgrade it.
Wow thank you very much! I didn't even consider using cookies which ends up being exactly what I needed. However I'm having issues with setcookie("username", $db_query_result, time()+60*60*24*7); It appears that $db_query_result isn't working for me, is there something else I should do?
Wow, long story short: You wrote a 2-page post accusing me of the very thing you are doing. My statement: If you know the source of the data to *never* contain unicode (such as the 1988 ASCII flat files I described or a string of numbers you yourself are spitting out), writing code specifically with unicode in mind is not necessary. You keep saying wrong, wrong, wrong (among other gems like "I don't want to continue this discussion."), but when I present you with the above statement, you say: &gt; This also is not what I said. Even though you started with: &gt; The unicode argument is always relevant. Doing something a bad way because you imagine it won't ever cause a problem is part of why some programmers succeed and others don't. So if you are **not saying** that you should account for unicode in *all* cases, but you **disagree** with the statement that you should account for unicode in *most* cases, what *is* it that you're trying to say in the middle of your cloud of condescension? One clear sentence, without the pointless needling please. And again, you are and have been free to stop this discussion at any point. I do not reply to my own posts.
Well, $db_query_result is just a variable for whatever you got from the user database. You can use whatever variable you want. See Dale's post for querying the database. The idea is that you're setting the username portion of the cookie array with whatever value you got from the database for that username. so, in short: 1. user puts in username / password 1. check database to make sure they match 1. if they match, set the cookie to the supplied username 
&gt; Wow, long story short: You wrote a 2-page post accusing me of the very thing you are doing. I didn't accuse you of anything. You really should work on your reading skills. What I did was to tell you what your behavior seemed like to me. They're really quite different, and whereas I realize the false position you're taking makes you feel like a justified victim, it's also dishonest. &gt; You keep saying wrong, wrong, wrong Listen, I know this is difficult. Try to keep up. Saying "you aren't correct about my opinion" is *****not the same thing***** as saying "you aren't correct about your own opinion." Focussing down to a single word to ignore context is not logically valid. &gt; So if you are not saying that you should account for unicode in all cases, but you disagree with the statement that you should account for unicode in most cases, what is it that you're trying to say in the middle of your cloud of condescension? You really should work on reading more carefully. I was quite clear that I would not engage you any further, because I believed that you had no goal here other than to argue. &gt; you are and have been free to stop this discussion at any point You really should work on reading more carefully. I was quite clear that my belief is that if I did anything other than to say "you don't have a basis for telling me my own belief, please stop wasting my time," that you would interpret it in an undesirable fashion, as "winning" by having worn someone down through constant belligerence, and that it would encourage you to do this to others. Please stop behaving this way now. Telling me "but you could stop" is just you trying to make emotional excuses for trolling. You have no basis to tell someone else what they believe, and I will not engage you in discussion, because of how consistently rude you are. Please stop now.
Polymorphism doesn't work in PHP the same way that it does in other languages. In other languages like C++, you can declare multiple methods with the same name that take in different arguments. Example: Something.process(int integer_var) { } Something.process(float decimal_var) { } Something.process(string string_var) { } In PHP, the best you can do is type hinting and method overriding, which has its own limitations. On objects working together and class design, it's a matter of experience and reading well-written OOP code. You'll pick it up as you go along. The top comment in here already posted a lot of good videos to start on.
This is pretty similar to what [I did](http://www.reddit.com/r/PHP/comments/kedyr/need_a_little_help_with_some_string_manipulation/c2jr4o6). 
Any way for it to use less instead of more?
&gt; I was quite clear that I would not engage you any further, because I believed that you had no goal here other than to argue. Yet here you are, *engaging* with condescension, semantic argumentation and actively and purposely avoiding to answer the single question that would clarify your point and end this discussion on a friendly note. &gt; You have no basis to tell someone else what they believe, and I will not engage you in discussion, because of how consistently rude you are. The previous post is me *asking* you what your point is, because you have only stated what your point *isn't* and those statements contradict each other. And as for being rude, I am not the one continually insinuating other people's ignorance and inability to read or comprehend. It's funny to see you thrive on arguing for the sake of arguing. Here, have another hit. Aaaaahhhhhh yeah that's better. Love you, codefocus.
For those wondering *why* you would need an enum class, it comes down to a couple things. The first is preventing errors from typos. Here's a contrived function with logic I find myself writing all the time. This same basic validation logic is also found all through Zend Framework, and other popular frameworks. function displayDayOfWeek($day) { $valid_days = array( 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday' ); if (!in_array($day, $valid_days)) { throw UnexpectedValueException("The day '$day' is not a valid day of the week"); } echo $day . '&lt;br /&gt;'; } What a mess! Plus it adds overhead to every function call. Instead, lets have the PHP run-time validate my input via type hinting. function displayDayOfWeek(WeekDays $day) { echo $day . '&lt;br /&gt;'; } The code just got a lot cleaner. Type hinting with WeekDays ensures I can't pass an invalid value to the function. It's also useful for comparison of two values. Here's another contrived example: $first_day = WeekDays::Monday(); $second_day = WeekDays::Friday(); if ($first_day() &gt; $second_day()) { echo 'The first day is later in the week than the second day.&lt;br /&gt;'; } else if ($first_day() == $second_day()) { echo 'The two days are the same.&lt;br /&gt;'; } else { echo 'The first day is ealier in the week than the second day.&lt;br /&gt;'; }
The program *less*? Not sure what you mean.
When I run `pman func` the output is displayed using *more*. I'd like *less* instead.
Just pipe it to less. Sounds odd, but more is smart enough to do the right thing in that situation.
like this: pman str_replace | less
&gt; Yet here you are, engaging You appear to misunderstand the intent of the word. &gt; The previous post is me asking you what your point is Yes. And you were careful to wait until you had been told that no further discussion would commence on the topic, so that you could feel like you had extended a laurel while making sure only to do so when it would have no effect. &gt; It's funny to see you thrive on arguing That's nice. Are you done yet?
Nevermind, seems that something broke since I did recently a dist-upgrade. pman is a simple script: #!/bin/sh MAN=`which man` $MAN -M /usr/share/php/doc/pman/ $* So it's a problem on my end.
&gt; And you were careful to wait until you had been told ... For someone who gets so enraged about statements about your own intent, why are you making statements about mine? All I want is clarification on your point. It takes one sentence, but you seem to take more pleasure from arguing about semantics and unrelated personal issues than what the thread originally started about. &gt; ... so that you could feel like you had extended a laurel ... I did that six hours ago when I said: "*I think technically we agree and I was a bit rude about it*". Gauging from your rather nasty reaction to that, I assume by that point you'd already forgotten what we were initially talking about. &gt; Are you done yet? I'm quite busy but I can always make time for entertainment. 
Oh fuck off, guy. r/php doesn't mind sharing the 'lightbulb' moments of others.
One, you don't speak for reddit. Two, lightbulbs which are wrong are a point to be explained. 
&gt; For someone who gets so enraged about statements about your own intent, why are you making statements about mine? You have a point. I apologize. &gt; All I want is clarification on your point. It seems odd that if you actually wanted that, you wouldn't just go re-read, and that you would sit here insulting someone who's saying "leave me alone." If this is what you want, I honestly cannot think of a less effective way to achieve it. &gt; I did that six hours ago when I said And six hours later, you haven't figured out that it isn't going to work. Einstein is widely quoted as saying (and I don't know whether he actually said it, just that people claim he did) that "madness is doing the same thing and expecting differing results." &gt; Gauging from your rather nasty reaction to that, I assume Funny, first you lambast me for it, then you do it again. Almost like you weren't actually reacting with genuine understanding of the difficult behavior, and in fact were just trying to cause shame through logical games. Makes me regret my apology, though I won't remove it. &gt; I'm quite busy I rather doubt this. No amount of continuing your angry demands will gain success. Stop trying now, please. &gt; I can always make time for entertainment. It is edifying that you admit your goal. Funny that, though I did assume your motivations, it turns out by your own admission that I also wasn't actually wrong. I confess I don't expect you to admit this to yourself, much less here, but that one's likely to be quite difficult to refute. 
&gt; One, you don't speak for reddit. Ah, but you speak for 'the correctness of lightbulb moments'. Well done. &gt; Two, lightbulbs which are wrong are a point to be explained. Carry on mistaking 'explanation' for *deliberate, calculated unpleasantness*.
&gt; It seems odd that if you actually wanted that, you wouldn't just go re-read, and that you would sit here insulting someone who's saying "leave me alone." I have read everything, which is why I am confused about your conflicting statements. On one occasion you say: &gt; A: The unicode argument is always relevant. While you say you disagree with this statement: &gt; B: One should account for unicode in all cases. As well as this one: &gt; C: One should account for unicode in most / almost all cases. C is my stance, and as far as I can tell (I won't make assumptions about your position again), A was your stance (it's a literal quote from your first post). When you disagreed with B, which is the logical extension of A, I was left confused about your actual position. &gt; I rather doubt \[you're busy\]. &gt; Funny, first you lambast me for it, then you do it again. No worries, I won't remove my apology either. I did start off the conversation on a rude note and that was quite immature of me. Could you point me to where I am making angry demands? Making angry demands has never been my intention. &gt; It is edifying that you admit your goal. Funny that, though I did assume your motivations, it turns out by your own admission that I also wasn't actually wrong. As you quoted, "madness is doing the same thing and expecting differing results". We are still replying to each other, but my motivation changed when your tone changed. 
I actually have people logging in using a username and password, is there a different way you would go about retrieving the username if they're required to use it for login?
&gt; Ah, but you speak for 'the correctness of lightbulb moments'. Pointing out one error in one opinion does not compare in any meaningful way to a person presuming to speak for a group of tens of thousands. &gt; Carry on mistaking 'explanation' for deliberate, calculated unpleasantness. (popcorn) Do you imagine you're doing something other than what you imagine you see in others?
&gt; I have read everything Focus on the part where you were told you wouldn't get any answers because of your prior choices. That's the part that will help you the most here. Not one answer has arrived so far, yet you still ask plaintively. I am reminded of being with an eight year old in the candy aisle of a grocery store. I am also reminded of the overly common Penny Arcade anonymity comic. Of course, as every single other example driven observation has been responded to with a bland "no you," so too shall this be, no doubt. &gt; No worries, I won't remove my apology either. You never gave a legitimate apology. It's sort of boring to watch you just imitate everything I say falsely. &gt; Could you point me to where I am making angry demands? Making angry demands has never been my intention. The place where you keep saying you want answers, inbetween insults. For reference, look at every post where you've gotten a "no" and responded in the adult form of "but I want it!" It's not really interesting if and when you repeat your prior behavior of merely pretending that there is no angry demand in repeated declined questions inbetween insults, though I doubt you'll be able to resist. &gt; As you quoted, "madness is doing the same thing and expecting differing results". I don't expect differing results. I explained clearly what I was doing. That you choose not to believe me does not undermine that this is exactly what I said I would do. Please stop wasting your time asking the same questions. You will not get an answer. I notice you have pretended you did not admit that you are trolling for enjoyment. Don't forget that.
sessions in a db are sloooooooooooooooooow
With a cookie like Caseycrow showed you. Read up on PHP sessions. It allows you to store a variable, then the user can go to any other page, and the variable can be accessed. You will store the username in the session when the user logs in, then use it on another page with $_SESSION['variableNameHere'] [See the examples here](http://us.php.net/manual/en/function.session-start.php)
It's almost funny that until a number of posts ago I was actually hoping to have an adult conversation with you. Too bad that every attempt at this has been thwarted with pointless poo-flinging and childish "I won't answer your question. I don't care that I contradicted myself. This is not a discussion. You are angry! You are angry!" &gt; Please stop wasting your time asking the same questions. You will not get an answer. Why, considering you pretend to not want this, are you still replying with condescension-laden posts about anything but your original point? Admit it, you're not-so-secretly addicted to having the last word, even if it drags the conversation into the abyss of pointlessness. And the down-votes, seriously... You do realise we're talking to each other and the points mean nothing, right? I love you, codefocus.
You can pipe output to anything you want: pman count | less the linux pipe character | is usually above the enter key, in case you haven't used it :-{ &lt;-- moustache
Except man page formatting is sort of terrible. I'd rather use the site.
When you say Zend freelancer, do you mean a Zend Framework programmer?
since when did reddit become a job site like craigslist?
Research phars and give each client the possibility of downloading the latest phar. If they can't replace a stupid file, then they deserve to pay up the nose for hosted services from you. If you go the route you want, I will be more than willing to assist in cleaning up your source code from all the exploits that will be put on there on each of your clients by even the most crude of script kiddies. It is *never* permissible for this type of operation to exist on production code.
man man -P pager Specify which pager to use. By default, man uses ``more -s''. This option overrides the PAGER environment variable. 
If you're too lazy to write one line of escaping for your user input, perhaps you should just not post.
&gt; I was actually hoping to have an adult conversation with you. You really believe that, don't you? &gt; &gt; Yet here you are, engaging with condescension, semantic argumentation and actively and purposely avoiding to answer the single question &gt; &gt; It's funny to see you thrive on arguing for the sake of arguing. Here, have another hit. Aaaaahhhhhh yeah that's better. &gt; &gt; I'm quite busy but I can always make time for entertainment. &gt; &gt; This is something I see in a lot of programmers after they outgrow the first few years of learning. They become cocky and parrot things that are true in their experience as global universal truth &gt; &gt; One clear sentence, without the pointless needling please. &gt; &gt; I hate to stoop to your level &gt; &gt; Talk about consuming time... &gt; &gt; &gt; I sent you that private message because I was trying to get you to stop replying here. &gt; &gt; If you want to continue the discussion &gt; &gt; Your post history shows you to be a big fan of blanket statements &gt; &gt; Everyone who disagrees or points out scenarios where your method may not be the preferred one is insulted and labeled as a beginner, someone lacking experience, inept, etcetera. &gt; &gt; You can roll your eyes all you want and send me private messages insinuating that I lack the experience to know the Universal Truth of Unicode &gt; &gt; That's bullshit and you know it. Not one message you've left has been free of this accusatory tone, yet here you are again claiming to be the victim: &gt; Too bad that every attempt at this has been thwarted with pointless poo-flinging and childish "I won't answer your question" (yawn) There was even a point at which you admitted you had been rude. It seems you've forgotten that. &gt; Why, considering you pretend to not want this Yes yes, just ignore the explanation you asked for, which explains this sufficiently, in order to pretend that a logical error exists when it does not. Surely you have not gotten the exact same response three messages in a row now. It's because I believe that if I stop responding, you will interpret this as a "win" - something you already admitted - and that you will then proceed to do this to other people. That is the fourth time I've explained this to you. I'm standing up to what may be the least effective bullying routine I've ever seen. &gt; And the down-votes, seriously Ah, yes. We're both down-voted, so you accuse me of down-voting you. Truly a difficult thing to figure out. &gt; I love you You keep saying that. I wonder if you realize how pathetic it seems. I notice you continue to pretend you did not admit that you are trolling for enjoyment. Don't forget that. Are you done yet? 
You're obviously a troll, but I'm enjoying that you can't stop without getting the last word in.
Using memcache for session storage is typically acceptable in load-balanced multi-server environments where a local session would be lost if the load balancer sent the client to another web server mid-session. I've used this for a few years an haven't had any real problems with it. PHP supports this natively as well.
Look into NorthScale. It's basically cluster-able memcache servers. I have similar environment set up and it works like a charm and it's free.
&gt; You're obviously a troll You just can't stop with the personal attacks. :) &gt; I'm enjoying that you can't stop Funny how you keep pretending this. Almost as if you just can't cope with the truth. Keep telling me who I am, what I believe and what I'm able to do, though, while sticking your fingers in your ears through the simpler explanation. Occam's what again?
&gt; You just can't stop with the personal attacks. :) Pot. Kettle. Black. Smiley face. At least I've tried being civil with you. I could quotemine your posts like you did mine if you'd like.
You could check your local craigslist resumes section or check out [/r/forhire](http://reddit.com/r/forhire).
He's not the first to mention it, because it's a trend. You might want to examine your own behavior.
I am Zend Framework Developer. Let me know if you still need some work done? 
Uhm ok I guess I shouldn't try to help people then? I try to guide people with enough info so they can research it themselves. Teach a man to fish...
[Download Documentation](http://www.php.net/download-docs.php): &gt;The manual is also available via *nix style man pages. To install and use: &gt;* Install: pear install doc.php.net/pman &gt;* Upgrade: pear upgrade doc.php.net/pman &gt;* Example usage: pman strlen
Thanks.
Yeah
MANLY MAN
 ↑ Right Here
Here's the current host, it hasn't been updated on google code for a long time - https://github.com/xeoncross/micromvc
I'm actually working on this right now for my own software. Not implemented so far is the updating of the software itself, but it's exactly the same process, as PHP does not hold any locks on files. What I would recommend though is creating a file just before updating, and checking for that file in your software. If that file does exist, error out as soon as possible to avoid loading half-updated software. The update code is in [Updater and Updater.php](https://github.com/Lilina/Lilina/tree/updater/inc/core/Lilina) under that directory. The HTTP class (if you want to use it, or replace with your own if you'd prefer) is under the `HTTP` subdirectory (only external dependencies are at the top of `HTTP.php`, and the `_r` function for translating strings). Edit: Also, feedback is very welcome.
Taking shortcuts in examples you know will be viewed by novices does more harm than good.
 $values = array("CTEC" =&gt; array(array("CTEC 2350", "Intro to Communication Technology", "FAB 412"), array("CTEC 3350", "Website Communication", "FAB 411")), "BCMN" =&gt; array(array("BCMN 3319", "Broadcast Management", "FAB 327"), array("BCMN 3340", "Electronic News", "FAB 112"))); // and so on... I didn't copy all your values echo "&lt;table&gt;"; foreach($values[$_GET["prefix"]] as $row) { echo "&lt;tr&gt;"; foreach($row as $cell) { echo "&lt;td&gt;$cell&lt;/td&gt;"; } echo "&lt;/tr&gt;"; } echo "&lt;/table&gt;";
&gt; Most classes are under 5kb in size which makes reading the codebase very easy and quick. Except the methods are pretty much minified and almost impossible to read.
 if(is_file($f)&amp;&amp;($e=pathinfo($f,PATHINFO_EXTENSION))&amp;&amp;($x='imagecreatefrom'.($e=='jpg'?'jpeg':$e))&amp;&amp;($i=$x($f))&amp;&amp;is_resource($i))return$i; Fewer lines of code doesn't mean better. A lot of this code is intentionally made obscure without good reason. Why would you even do this? Formatting is not a strain on the parser, and it isn't like the contents of the file are being transmitted over the network.
Go and do your own homework, punk.
Initially I thought I was reading the sales pitch for a MVC Javascript library. When in the world does file size come into play with PHP?
Oh look, the troll is back &lt;3 And here I thought you'd finally found something better to do with your time. Doesn't it embarrass you that this is all you do with this account?
&gt; At least I've tried being civil with you. No. You have not. I would have thought the prior list would help you with this false belief, but apparently it did not. &gt; I could quotemine your posts like you did mine if you'd like. You can't find me being rude to you, which is one false claim you keep making. You can't find a single message of your own which is polite, which is another false claim you keep making. Let it go, Jack. All you're doing is complaining.
Please don't do people's homework for them. They're cheating and all the other students in the class are having their correct place on the grading curve taken away.
Yes, actually storing session in db is another option we were looking into, if in case we can't get memcached sessions to work. I have it working with the "memcache" extension, but just couldn't get it to work with "memcached"
Yup, and why would the memcached clients include this feature if they knew it wouldn't work?
Generally one just uses defines. All the stricture, none of the expensive string comparisons.
This is pretty unsafe. Even if you have a correct system and correct permissions, brief errors in automatic deployments of webserver configs have a long history of opening this sort of system up to exploitation. Same reason you don't put config data in web root. Very seriously consider advising them to take a similar-but-different approach.
It doesn't. It's mostly a useless metric.
TIL about SplTypes... WHY THE !@#$ IS THIS NOT INCLUDED BY DEFAULT WITH PHP AND THE SPL???!!!
But there is a huge difference between using a PHP framework and using jQuery. Server side vs client side. I want all the scripts on my server running as quickly as possible, with as little overhead as I can have. That's why I don't use a PHP framework because I'm writing something specific to my project that is going to run so much faster and use less resources on my servers. As for jQuery and JavaScript, while this may sound bad, I really could care less about the speed. If my form submit function takes 5ms to get all the form variables and start the ajax request with plain JavaScript, but takes 25ms (5 times as long) with jQuery, I could care less. The client isn't going to notice the difference. On the server side however, I don't want tons of requests building up all over the place, I want my scripts executed as quickly as possible and cleared out of memory and off my cpu.
You can also get the function signature, which is what I need 90% of the time, like this: $ php --rf strstr Function [ &lt;internal:standard&gt; function strstr ] { - Parameters [3] { Parameter #0 [ &lt;required&gt; $haystack ] Parameter #1 [ &lt;required&gt; $needle ] Parameter #2 [ &lt;optional&gt; $part ] } } 
In all fairness, there's a wide variation on sanitizing input. Ask 100 people and you'll get 100 different methods. At least he mentioned it in the first place.
I was going to point this out and you already did +1, totally agree.
I wrote one in 530 LOC, including a DAL: [SimpleMVC](https://bitbucket.org/wooptoo/simplemvc/). And the [documentation](https://bitbucket.org/wooptoo/simplemvc/downloads/proiect.pdf) - it's a paper actually.
Mostly? Entirely.
They work at Starbucks now. Just stop in, have a frappucino and ask.
There is only one good way to escape user input for use with the old mysql library.
Im.... going to hope that at least 50% of that 160kb is the documentation.
don't forget you might need to do: `pear channel-discover doc.php.net`
Have you tried http://www.zend.com/en/yellow-pages ?
Why do you continue this conversation? It started about getting a bit of clarification on the blanket statement you made. You say you don't want to clarify your point, but you keep replying. And yes, you have been rude. Your holier-than-thou, condescending attitude shines through in everything you say. And everything you avoid saying.
It's mostly useless at night, mostly.
It's mostly useless at night, mostly.
Defines doesn't solve the first -- and most important -- situation I've pointed out here.
I know, right? They're experimental, which I hope means they'll be included in the core sooner or later.
Good point, because the code certainly isn't self documenting.
Chastises others for being too lazy to post escape code; doesn't post said code. ;o]
Right, but hbalagtas would then cache them w/ memcached. So it doesn't really matter.
 $string = mysql_real_escape_string($_POST['some_value']); I'm a little shocked that I had to post this for you.
[Found a bug](http://code.google.com/p/micromvc-php/issues/detail?id=1)
Then why does WordPress have this and not a single security hack has gone through that door?
The point I was trying to make is memcache is not a guaranteed system. The data you put in is not guaranteed to be there when you want to retrieve it again. As for clustering web servers, typically you would use some kind of database backed session storage, or even something like memcachedb.
Might be overkill if you only plan on using the contact form, but [my software](http://www.spbas.com) has a helpdesk built in which has a contact form. When someone uses the contact form the reply is imported into the helpdesk. You can reply back from my software or your e-mail client. The contact form also uses reCaptcha. We have a free version if you want to check it out.
This looks nice. I've been using [PHPDoctor](http://peej.github.com/phpdoctor/) which works quite well. It just doesn't make for very pretty docs.
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse vulputate orci a felis commodo luctus. Integer luctus ante sollicitudin nunc facilisis malesuada. Nulla at nulla a nisi faucibus pulvinar consectetur quis est. In est nulla, feugiat a sodales et, ultrices in augue. Nulla ut magna velit, et rutrum mi. Nunc ut diam turpis, ut accumsan erat. Nullam ultricies dapibus volutpat. Donec vehicula velit varius purus congue quis euismod metus commodo. In hac habitasse platea dictumst. 
He can't not reply, in every conversation (read: argument) he has, he has to have the last word. Take advantage of that, it brings great humor.
Where did I try to make it seem like I'm a teacher? I'm kind of lost at that remark... With respect to *People who like to belittle frameworks are often times programmers who don't understand how to use them properly.*, I'm not arguing that. And I wasn't trying to belittle frameworks. My whole point was that whether or not they are good for a specific use depends heavily on that specific use. They (as you say) are not an end-all-be-all solution. So I'm confused at what you say. And you downvoted me for the attitude? Did you read my comment? I agreed with all of your points. The only thing that I did was elaborate a bit. And the only thing that we *slightly* disagreed on, is that I think Zend is a library because it's a framework, and you say that it was a design goal to be a library. I'd argue that it's a meaningless design goal since all frameworks are libraries by definition. Now, if you said their design goal was to be a component library that could be used without the architectural assumptions that make it a framework, then that's fine. I didn't really comment on the whole *should you use a framework or not* side, and I don't want to. That's way too long of a discussion, and out of context of this one (off topic). Sorry if I offended you, I didn't mean to. I just meant to elaborate on your point...
That happened to me too; the title made me assume this was an /r/Javascript submission.
That's exactly the point. Real enums allow the run-time to catch typos instead of writing code to catch them.
(I assume you're talking about OO data/method encapsulation?) Very. Even if you're working completely by yourself in a vacuum with no chance of anyone ever seeing the code even in the completely distant future. Not only does it set out a good design pattern - making sure that all the right data is in the right place, and that everything is 'organised'. It also stops you from making mistakes and writing 'spaghetti code' that can be incredibly hard to debug.
Alternate title: _How Not to Write a PHP Framework_ So many bad practices that I wouldn't recommend this to anyone. edit: Taken as a novelty, it's the best I've seen ;) OP might get a better response in [r/tinycode](http://www.reddit.com/r/tinycode)
Maybe I should let him know that I'll be on holiday in early October, so he doesn't get worried if there is no reply for a week or so ;-)
I'd love to hear about the PHP IDE (Or any IDE for a weakly-typed language) that can catch typos in variable names, or assigning a bad value to a variable.
On with the examples. Here's an example of using defines/constants instead of enums: define('WEEK_DAY_MONDAY', 'Monday'); define('WEEK_DAY_TUESDAY', 'Tueday'); define('WEEK_DAY_WEDNESDAY', 'Wednesday'); define('WEEK_DAY_THURSDAY', 'Thursday'); define('WEEK_DAY_FRIDAY', 'Friday'); define('WEEK_DAY_SATURDAY', 'Saturday'); define('WEEK_DAY_SUNDAY', 'Sunay'); function displayWeekDay($day) { echo $day . '&lt;br /&gt;'; } displayWeekDay(WEEK_DAY_TUESDAY); There's a few problems here. Two of them are typos. Can you find them? An IDE can't. But lets look at some of the other problems. The first is I can either assign a string to the defines, or an integer, but not both. So I assigned a string, and that makes my *displayWeekDay()* function very nice and clean. But what if I need to compare two values? Lets look at the function for that. function displayGreaterWeekDay($first, $second) { $week_days = array( 'Monday' =&gt; 1, 'Tuesday' =&gt; 2, 'Wednesday' =&gt; 3, 'Thursday' =&gt; 4, 'Friday' =&gt; 5, 'Saturday' =&gt; 6, 'Sunday' =&gt; 7 ); $first_int = $week_days[$first]; $second_int = $week_days[$second]; if ($first_int == $second_int) { echo 'They are the same day&lt;br /&gt;'; } else if ($first_int &gt; $second_int) { echo $first . '&lt;br /&gt;'; } else { echo $second . '&lt;br /&gt;'; } } displayGreaterWeekDay(WEEK_DAY_TUESDAY, WEEK_DAY_WEDNESDAY); Sadly, because the defines can't be both a string and an integer (The way enums can), I have to map the supplied values to integers. Also this function would fail often because of the two typos I already mentioned. Oh, but it gets worse. Our functions *displayWeekDay()* and *displayGreaterWeekDay()* are actually part of a distributed library like a framework. We can create all the defines we want, but we can't **force** the programmers to use them (Like we can with type-hinting an enum). So the programmer using our library calls one of our functions. displayGreaterWeekDay('Tuesday', 'wednesday'); Hrm.. There's a problem here. He didn't use one of our defines, which we tested thoroughly to ensure were free of typos. Instead he just passed a couple strings to the function. And wait a minute? There's a typo! He spelled 'wednesday' in all over case, which can't be caught by an IDE, and will cause our function to fail. This also tends to be the type of typo that isn't caught in test cases, and doesn't reveal itself until your code is in production, or has already shipped. I could really go on and on, but you don't need to believe me. Like I mentioned early on, the type of function argument checking I showed in my early examples can also be found in "professional" libraries and frameworks.
Let me translate this lorem ipsum for you...OWNED
Also, if you refactor your code and want to remove and obsolete property/method it’s much easier if it’s private or protected because you won’t have to wonder if you have used it elsewhere I tend not to your public getter/setter for the sake of “OO” because I find it ridiculous. And sometimes, I start by making everything private and changing them to protected or public as I need. This is not a very good design pattern, but it’s very efficient on small scale projects.
Give it a week after writing a class, and you will *be* one of the "other people". No, give it five minutes.
I'd like to add one more comment... I'd much rather have a native enum type in PHP. Theoretically an enum value should have a smaller memory footprint than an object. The only thing PHP needs to store in memory is one copy of the enum, and for each instance an 8bit integer, and 32bit memory address when the one enum copy is stored. That would be great when you have hundreds or even thousands of enum values stored in an array.
There are uses for encapsulation even when you're the only developer working on a project. Private class members help ensure the *integrity* of your class objects. I'll give you an example. Below is a very simple class that displays the contents of a web page. /** * Simple class for grabbing the contents of a web page */ class PageGrabber { /** * The URL of the page to grab */ public $url = null; /** * Returns the contents of a web page * * @return string */ public function getPage() { return file_get_contents($this-&gt;url); } } Now lets use our class. $page_grabber = new PageGrabber(); $page_grabber-&gt;url = 'http://reddit.com'; echo $page_grabber-&gt;getPage(); So far, so good, right? Lets take another look at using the class, which includes an error. One that you're likely to create often, and which can be prevented with encapsulation. $page_grabber = new PageGrabber(); $page_grabber-&gt;url = 'reddit.com'; echo $page_grabber-&gt;getPage(); Did you spot the error? Instead of assigning *'http://reddit.com'* to $url, we've assigned *'reddit.com'*, which doesn't include 'http://', and will cause *file_get_contents()* to fail. So lets rewrite our class to use proper encapsulation. /** * Simple class for grabbing the contents of a web page */ class PageGrabber { /** * The URL of the page to grab */ private $url = null; /** * Sets the URL for the page we'll be grabbing * * @param string $url The page URL * @return this */ public function setUrl($url) { if (strpos($url, 'http://') !== 0) { $url = 'http://' . $url; } $this-&gt;url = $url; return $this; } /** * Returns the contents of a web page * * @return string */ public function getPage() { return file_get_contents($this-&gt;url); } } Now that we've made $url private, we can only set it's value using a **setter** method. In this case, *setUrl()*. The *setUrl()* method includes some logic that ensures the *integrity* of the data (the URL) we're feeding into the class. In this case we're making sure the URL is prefixed with 'http://'. We could take it a few steps further an strongly validate the URL, and even do a DNS lookup to ensure it's a valid host. So lets use our class now. $page_grabber = new PageGrabber(); $page_grabber-&gt;setUrl('reddit.com'); echo $page_grabber-&gt;getPage(); Even though we made the error of using *'reddit.com'* instead of *'http://reddit.com'*, our setter method ensured we'll be able to use the URL without any errors. You have to understand a couple things: * Class objects like to be harmonious. Just like a database, they don't like having bad data put into them. Our setter method is like the bouncer at a club. It ensures we don't let in any bad elements. * The biggest coding errors are going to come from **you**. You need to write code to catch your own errors. It doesn't matter if no one else is going to be working on the code.
When I read through the chano source I didn't think there was much encapsulation, but that would be a stupid argument to engage in. If you look at the chano example and my example there are a couple of places where I could have used chano. * My foreach class switch does not work with associative arrays * I didn't duplicate the unordered list code Your issue with my solution vs chano was: &gt; the alternative is repetitive and inconsistent code So here are a break down of the changes Chano::with($title)-&gt;upper() &lt;?=strtoupper($title)?&gt; &lt;?=$movies-&gt;length()?&gt; &lt;?=count($movies)?&gt; &lt;?=$movies-&gt;pluralize()?&gt; &lt;?=count($movies)!=1?'s':''?&gt; &lt;?=$m-&gt;ratings-&gt;join()?&gt; &lt;?= join(' ', $m-&gt;ratings)?&gt; These 4 diffs I believe represent all but 2 changes, the foreach and the url unordered list code. So is this repetitive? Well it's a little obnoxious to have to do the pluralization in the ternary operator but it's no more repetitive then calling pluralize(). I'm not quite sure why using native php calls is considered "inconsistent code". If anything it's more consistent. I think chano has it's benefits, and I'd prefer the usage of it over smarty or twig. As I mentioned &gt;It could be more efficient to create a templating namespace, and then use functions from that namespace to common actions that become harry in &gt; PHP My suggestion for chano, if I was writing my own chano. Drop all of the function calls that map directly to php native php functions. Now none of chano actually maps directly to a php function, because chano *wraps* everything in arrays. But I do not need function calls for strip_tags, count, strreplace, and so on. 
What this guy said. Basically, think of encapsulation as a way of locking your objects down and *forcing* them to work the way you want them to work. You don't give clients (the client is the user of the code - you can be the client to your own code) any option but to use the public methods you provide, and the class then does it's own thing and *forces the client to work a specific way*.
&gt; Then why does WordPress have this and not a single security hack has gone through that door? I'm sorry, did you just use WordPress to argue for security? &gt; and not a single security hack has gone through that door? Uh. 1) Yes, they have. This is how the GoDaddy wordpress hack happened. 2) If you read, it's about the server around it, not the application running inside; it doesn't matter which application does this. 3) Why do you imagine that just because you haven't heard of something, it's never happened? This happens all the time. http://tinyurl.com/3hub54l 
I greatly prefer if(!$loggedin) show_error('You must be logged in to do that.'); // or your custom error handler over a ridiculous series of if statements and curly braces that tests for all the right conditions and handles them at the end if the conditions are not met. It becomes a huge shortcut when you have to maintain/upgrade. Also, short tags. Edit: What gives with the downvotes? 
Oh, I'm sorry, were you serious when you thought runtime errors were better than unit tests? I actually thought you were kidding when you suggested that running something in production was a legitimate way to verify its correctness. This is a little like saying that a car isn't the right way to travel, as compared to swimming, because if you're on fire, swimming saves you and a car doesn't. If you're deploying things to production and being brought down by typos, making an enum class isn't going to help with the real underlying problem. Be sure to downvote for disagreement, though.
That's called a [Ternary operation](http://en.wikipedia.org/wiki/Ternary_operation) and isn't just PHP specific. 
&gt; Why do you continue this conversation? I've already answered this five times. You have not. Please stop soon.
They are also only ideal for cases like the OP described. When they are nested, or loads of operations are happening inside of them, they are actually kind of annoying. They become a shortcut to wasting other developers' time. At least, that's my opinion.
See my comment [here](http://www.reddit.com/r/PHP/comments/kfvzy/my_enum_class_for_php/c2k52qv), and tell me how unit testing solves all those problems.
array map &amp; filter $names = array('john', 'smith', '', false, 0, 'juan', ' '); print_r(array_filter(array_map('trim', $names))); returns john, smith and juan
http://php.net/manual/en/function.extract.php ^ It's more a secret. It's not very explicit which is bad, but I think it could be very helpful if you were trying to be concise.
Lets not forget the ternary shortcut: function setValue($value) { $this-&gt;value = $value ?: 'Foo'; }
Here's one that I do sometimes $form_fields=array( 'first_name'=&gt;array('required'=&gt;true,'max_length'=&gt;20,'type'=&gt;'text'), 'last_name'=&gt;array('required'=&gt;true,'max_length'=&gt;20,'type'=&gt;'text'), 'address'=&gt;array('required'=&gt;true,'max_length'=&gt;128,'type'=&gt;'text'), 'city'=&gt;array('required'=&gt;true,'max_length'=&gt;20,'type'=&gt;'text'), 'state'=&gt;array('required'=&gt;true,'max_length'=&gt;2,'type'=&gt;'text'), 'email'=&gt;array('required'=&gt;true,'max_length'=&gt;128,'type'=&gt;'text|email'), ); foreach ($_POST as $k=&gt;$v){ if ($form_fields[$k]){ $$k=clean_the_taint($v,$form_fields[$k]); } } function clean_the_taint($value,$rules){ //do xss filtering //do other stuff, run against rules, etc. } May be some minor errors but you get the idea hopefully.
An alternative that may be a bit more readable and maintainable is to use a switch statement. switch(true) { case !$loggedin: // do something; break; case $somevar === 'this': // do something else; break; default: // None of the above are true, do something break; }
My latest favorite is the new anonymous functions. $values = array_filter($values, function($var) { return($var &amp; 1); });
Again, if you have staff who are violating coding standards, making an enum class isn't fixing the real problem. (Also, it shouldn't *be* a string interface at all. That's unnecessary wasted work for the machine, and creates all of these problems.) &gt; tell me how unit testing solves all those problems. All what problems? Look, the problems you're describing here are the results of a vulnerable design, not the results of not having an enum class. The idea that you should be comparing integer values from strings in the first place is, frankly, silly. So what I see here is a big long story, and part of the problem with telling a story instead of just giving a simple straightforward technical explanation is that it's quite likely I'll just miss problems in the diatribe. But. One "problem" you note is that someone could use the wrong case. Yep. Stop using strings. You even do the work under the hood as integers. And if you were doing it the correct way, using the locale system, then your system wouldn't break the second you went to France or England, where the first day of the week is Monday, not Sunday. You say there's a second, but I'll be honest: I just don't want to look at a big yellow block of bad code looking for the problems in it. If you want to tell me what problems you think aren't solved by simple unit testing, then I'll tell you how to solve them. The entire "problem" set here appears to be that you are trying to make date comparison and date conversion in the same function, and have not adequately nailed either specification down. I'm not playing Where's Waldo. If you want to tell me what the supposedly unsolved problem in simple verified integer-api functions are, then fine, I'll show you how to fix it. By the by, if you're using strings as constants and not setting your IDE up to color them, that's just you not using your tools very well. But then, the same can be said of using string labels for math.
Could you point me to one of the alleged five times you have said why you are continuing the conversation? As I have said quite a few times before: You are and have been free to stop this discussion at any point. I do not reply to my own posts.
It's sort of boring how you're asked why you're doing something, and give a non-answer, you fail to understand that. Telling me what my privileges are has nothing whatsoever to do with your motivations. You did, once, admit that you were just entertaining yourself, which is quite literally the definition of trolling. Please stop soon. It's been more than a day. Your desperation is noted.
There is no back or away. You spend too much time on your computer, you tend to speak that way. Deflect more.
&gt; Please stop soon. Again, you are and have been free to stop this discussion at any point. I do not reply to my own posts.
My is the OR. Instead of: if(!mysql_query($sql)) { die('error'); } do: msyql_query($sql) or die('error');
You could just check the type of the second argument in the __compare magic method. Although you wouldn't be able to cast the object to an integer, you could compare an age object to an integer, or another age object. 
Love the function name.
I love this one, and I often find it useful to flip the test with "!$value ?: 'truthiness' ".
First, I want to thank you for taking the time to write such long explanations. I know you must be a very busy person, with all the long, and complex unit tests you have to write. I'm sure testing potentially hundreds of defines and constants for errors is time consuming. Not to mention all the beta testing you need to find every possible value the user might enter that would cause silly errors. All the support you have to give to the developers using your library must be exhausting. If only there was a way to force them into writing less error prone code. You also must be *very* busy emailing the developers of languages like Java, C/C++, C#, Fortran, VB, Lisp, etc, telling them how fooling they've been to include enum types, when of course -- head slap -- they could have just used proper unit testing. They must feel very foolish. You should probably also email the folks at Zend. They're also wasting their time doing a lot of function argument checking. But onto more relevant matters. &gt; Look, the problems you're describing here are the results of a vulnerable design You've said that a couple times, but haven't given an example of a less vulnerable design. &gt; So what I see here is a big long story, and part of the problem with telling a story instead of just giving a simple straightforward technical explanation is that it's quite likely I'll just miss problems in the diatribe. I'm giving examples that even someone fairly new to programming can understand. &gt; If you want to tell me what problems you think aren't solved by simple unit testing, then I'll tell you how to solve them. Hrm... That's not really how these things work. I've already done my work. You're the one questioning the work. It's on you to show how I'm wrong. &gt; The entire "problem" set here appears to be that you are trying to make date comparison and date conversion in the same function, and have not adequately nailed either specification down I'm sorry you don't understand the difference between a basic (And I'm sure I even used the word "contrived") example that is easy for noobs to swallow, vs. the ways an enum would actually be used in the real world. &gt; I'm not playing Where's Waldo. I don't blame you. We already know you're very busy.
Sadly it doesn't work *exactly* how I would like haha Here's an example of code that's written fairly often. $_GET['foo'] = (isset($_GET['foo'])) ? $_GET['foo'] : 5; You would almost think the ternary shortcut would let you write something like this. $_GET['foo'] = isset($_GET['foo']) ?: 5; Sadly it doesn't. :(
PHP lacks named parameter support. Sometimes this is useful, particularly if you want easily readable unordered parameters with overridable default values. &lt;?php function foo($args) { $defaults = array('a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3); $params = array_merge($defaults, $args); var_dump($params); } foo(array('c' =&gt; 5, 'a' =&gt; '2')); // output: // array(3) { ["a"]=&gt; string(1) "2" ["b"]=&gt; int(2) ["c"]=&gt; int(5) } ?&gt;
It is most useful within functions, function foo($vale = null) { $value = $value ?: 'example'; } 
`__toBool()` is dangerous because it will clash with checking if an object variable is null via `if ($var)`.
Do neither, use PDO/MySQLi and Exceptions
- In firefox go to the php page and right click the search box. - Click "add keyword for this search and give it a keyword, i chose "php" - now go to your address bar and type "php array_filter" good for finding out the parameter list/order quickly
better would be to have a hook somewhere between getting the request and executing the action. Then you can define which controllers must have a logged in state on a per-controller basis. If your controllers all inherit from a main controller object, you can then define a default value for this which can be overridden if it is defined in the child controllers.
write it in PHP.:) On serious note. Depends what functionality you want in your file management system. If by "simple" you mean only for parents to download files then write it yourself. Same for login. It would be a good exercise. I am assuming though this is your school project? If not, pick a lightweight framework and Google for file management scripts (lots o out there that use different technologies/approaches again depending what what you need in your fms), etc.
You could just do $rules = array(); $rules['first_name'] = array('max_length' =&gt; 20); //etc. array_walk($_POST, function ($field, $value) use ($rules) { // cleaning logic });
Thanks, i was going to do it myself but i'm kind of tired of writing CRUD when there's stuff out there that makes that for me, also as they're friends the whole project is very low budget and i can't spend too much time with it (Also it is my son school :) ). I usually do my things with Drupal or Symfony/Zend, but as this was most html i didn't use that (my mistake.....), thanks for the advise anyway.
My two most obscure (almost never met anyone using them) : An optimization trick (relevant at really high load): if(!isset($myString{10})) { //do something } Instead of : if(strlen($myString) &lt; 10) { //do something } And a common sense one: Instead of doing stupid Regex for basic input check (alpha, numeric, ...), use [Ctype](http://php.net/manual/en/book.ctype.php). **Much** faster.
Good point, although SplBool already does this. $var = new SplBool(false); if (!$var) { echo 'It is set to false'; } I personally don't have a problem using: if ($obj === null) { // do something }, but I guess that's about as much typing as I'm trying to save with this type casting idea. 
&lt;?= $var ?&gt; instead of &lt;?php echo $var ?&gt; makes me happy everytime I type it
Just realised these are just called 'map' and 'filter' in so many other languages. 
If speed is your concern, definitely check out the Yii Framework (http://yiiframework.com). It is extremely fast compared to other frameworks, and robust without being inflexible. I promise you that if you give it a try, you will see a significant increase in your productivity, compared to the amount of time it would take you to develop the same app in raw PHP.
overloading in PHP isn't the same as other languages: http://php.net/manual/en/language.oop5.overloading.php usually it's used to set/get values. $someClass-&gt;set($randomKey, $val); $someClass-&gt;get($randomKey);
You could use default parameters instead. Unordered parameters, imho, is not a good thing at all. 
abstract public static function foo () { } Just loove so many words :D
&gt; I know you must be a very busy person, with all the long, and complex unit tests you have to write. I don't really feel like playing sarcastic response with Guessy McGee. Property-based testing is actually quite terse. &gt; You also must be very busy emailing the developers of languages like Java, C/C++, C#, Fortran, VB, Lisp, etc, telling them how fooling they've been to include enum types What? Don't get me wrong. *****Real***** enumerations are great. Fake enumerations built as hash tables of strings over integers just don't fit the bill. It's unfortunate that, instead of actually making the case for these problems you suggest are there, you've gone into attack mode. &gt; They're also wasting their time doing a lot of function argument checking. No, typal signatures are quite important, and one of the most sorely lacking parts of two of my favorite languages, JavaScript and Erlang. It's quite unfortunate that you've started building an effigy to laugh at, instead of finding out what I actually believe. You might have learned something, instead of just taking a piss at a phantom you built from clay. &gt; You've said that a couple times, but haven't given an example of a less vulnerable design. Yes, actually, I did. &gt; I'm giving examples that even someone fairly new to programming can understand. Yes, and I asked you to locate them within the story, and present them without the three chapters on either side. You were the one who wanted to know how rudimenary unit testing could help. I'm willing to answer you, if you stop being so nasty and just ask the question straight. &gt; &gt; If you want to tell me what problems you think aren't solved by simple unit testing, then I'll tell you how to solve them. &gt; Hrm... That's not really how these things work. Yes, it is. You want answers, you ask the question in a way someone is willing to read. The alternative is you can go on without the learning experience. &gt; I'm sorry you don't understand the difference between a basic (And I'm sure I even used the word "contrived") example What example? I just didn't bother reading your contrived lecture. It'd be much nicer if you'd just write out a simple line of code that shows the problem, like everyone else does, instead of trying to flex your writer's guild muscles. On the other hand, you seem both convinced and angry; maybe you just don't want the answer to the question you asked. (shrugs) Suits me fine either way. &gt; example that is easy for noobs to swallow, vs. the ways an enum would actually be used in the real world You really should stop banging the noob drum so hard. You have no idea who you're talking to, and you're vastly out of your depth. Here's my hobby library for one language for the last two years. http://scutil.com/docs/sc.html#index Now. I'm trying to be nice to you. You've been very rude, very condescending, and you have taken a tremendously unearned tone of superiority. I tried to explain to you the significant problems with this approach, and the simpler, language-supported construct that is available in PHP. Your response was to paste a link to a long story that I don't feel like reading, which says "hey there are typos in here, can you find them?", and to say "then how does unit testing answer this?" I don't want to dig through your story or look for your typos to figure out to what "this" refers. It isn't that I can't think of any possibilities - it's that I can think of far too many, and I don't want to sift over your code to figure out which one you're talking about. My response was simple: "please actually ask the question, I don't want to dig through a bunch of text." In response you turned on the sarcasm hose. Do you want an answer or not? If you want an answer, your next reply will come in the form "The problem that I see is X Y Z, under the situation A. If you call foo(bar, baz);, where the error is that baz should be quux, then how can unit testing catch that?" And if I get a simple, polite reply in that form, I will, despite this prior reply, attempt to sort out an answer for you. If it's another one of these pointless "I'm so much smarter, because you don't want to read my story then you're just too dumb to understand it" rants, you don't get to learn. Of course, there's the very real possibility that you've talked yourself into the possibility that there's nothing for you to learn here, that I'm some kind of dinosaur who hates all support tools, and that all I do all day is punch cards. And in that case, hey, you're just like the rest of proggit: a barking dog on a leash who hates anyone who says "you know, there's this other way you could do it that would save you a lot of grief." Maybe you just don't want help from people who've been doing this professionally for almost 20 years and have learned a trick or two. You certainly don't appear to want it. Your choice. I'm quite unhappy with this message, so I'm only going to offer past a rebuke once, I think.
Plenty of other languages implement and use named parameters. I'm sorry that you're so short sighted.
Even better now that we have closures in PHP.
Wow I didn't know that. I hate that. That said, I usually hate PHP's entire flimsy, walking-on-eggshells type system. The combination of dynamic &amp; weak typing never frees the programmer from having to worry about types -- it just makes it much more difficult to know what's going on. By the way, I remembered the numeric conversions have been discussed and denied before apparently: https://bugs.php.net/bug.php?id=49957
Excellent reply. You've clarified a number of things that have been puzzling me for a while. 
http://www.solitude.dk/filethingie/ Try that. It's very simple and easy to modify
You generally use 'overloading' (not to be confused with overloading in other languages) whenever you want to control what happens when a non-existent method is called or a non-existent property is used. There are many uses for it, but I'll give one example: Let's say you have proxy class which mimics the subject class but also writes to a log file to assist in debugging: class SomeProxyClass implements TheSubjectClassInterface { protected $subject; public function __construct() { $this-&gt;subject = new TheSubjectClass; } public function __call($method, $args) { if(defined('DEBUG')) $this-&gt;writeLog('Calling ' . $method); // add timestamps, etc return call_user_func_array(array($this-&gt;subject, $method), $args); } protected function writeLog($msg) { /* open file, append message to it */ } } /* Regular scenario */ $foo = new SomeProxyClass; $foo-&gt;bar(); // calls TheSubjectClass::bar() behind the scenes, and logs the call. /* Dependency injection scenario */ $x = new SomeProxyClass; $y = new SomeDependentClass($x); // SomeDependentClass takes objects with TheSubjectClassInterface. /* SomeDependentClass will call $x methods, not knowing that logging is going on. Then you check the log to see how SDC was calling your proxy. */ *Edit: Remember this is a simplistic example, and not necessarily how you should go about logging/debugging your code. Also, if any PHP devs are reading this, how about giving us some AOP language constructs!* *Edit2: Doh! Changed to composition instead of inheritance.*
On the contrary, I fucking love python.
Very interesting, might be what i need, leave that for the backend, and then as it uses just filesystem, write a simple login form, and output those files. Thanks!
This seems mightily complex for something so simple...
First off, I didn't start getting rude and condescending until you did. Your first response with "Oh, I didn't know you were serious" was snide and sarcastic. You set the tone for the rest of this "discussion". Second, I've been programming for 20 years, and making a good living at it for 10. I currently manage 150K lines of PHP, Java, Javascript, C/C++, Perl, and HTML/CSS on a site that gets 20 million page views a day without breaking a sweat. All of which sits on $75,000 of hardware. Maybe **you** could learn something if you just listened. But anyway.. Moving forward. (I'm personally looking for distractions from work right now, so I have no problems with this) &gt; Don't get me wrong. Real enumerations are great. Fake enumerations built as hash tables of strings over integers just don't fit the bill. In what way? They solve many of the same problems. Here's a quote from the [Wikipedia page](http://en.wikipedia.org/wiki/Enumerated_type) on enumerations: &gt; Enumerated types, on the other hand, made the code more self-documenting. Depending on the language, the compiler could automatically assign default values to the enumerators thereby hiding unnecessary detail from the programmer. These values may not even be visible to the programmer (see information hiding). Enumerated types can also prevent a programmer from writing illogical code such as performing mathematical operations on the values of the enumerators. If the value of a variable that was assigned an enumerator were to be printed, some programming languages could also print the name of the enumerator rather than its underlying numerical value." I'd love to hear how my "fake" enumeration don't solve the same problems. &gt;&gt; You've said that a couple times, but haven't given an example of a less vulnerable design. &gt; Yes, actually, I did No you haven't. Unlike my "diatribes" which were 90% source code, because I like to back my words with example. You haven't written a single line of code to prove your point. You haven't shown me how a proper function should be written. You've done nothing to prove your point. &gt; Yes, and I asked you to locate them within the story, and present them without the three chapters on either side. Since you're such a "seasoned" programmer, who has undoubtly read hundreds of programming books like the rest of us, and dug through hundreds of thousands of lines of source code, you should have no problems mentally skipping to the source code I've presented without the need to read my "story", which once again was meant to make the concept easy for new programmers to understand. On a side note, when I say "new programmers", I'm not talking about you. I'm talking about... Ya know... New programmers. Many of which are new to PHP. &gt; And in that case, hey, you're just like the rest of proggit: a barking dog on a leash who hates anyone who says "you know, there's this other way you could do it that would save you a lot of grief." Funny enough... I was thinking the same of you. I find statements like "I'm so much smarter, because you don't want to read my story then you're just too dumb to understand it" very fascinating, as the people saying things like that are often reflecting on themselves.
**array_walk()** $data = array('tacos','burritos'); array_walk($data,function($item){ echo $item.' are good.&lt;br /&gt;'; });
Thank you! I came across the same bugs.php.net page a *long* time ago, so I knew there was a reason the idea was shot down. I just couldn't find the page again. And you're right about the need to think about types more in PHP. Despite supposedly making things easier. I did consider that before making my "proposal".
It was an example of using OR, not mysql.
If you're comparing boolean strict/literally, you should use "===". $x = ($y === TRUE) ? 'Var Y is True' : 'Var Y is False';
It may be a simple concept, but it's not a measure many developers actually take. How would you simplify it, or recommend in place?
TIL! I *knew* there had to be something better than having to write your own mysql object.
Yeah, long story short, I use this internally built ORM that allows me to do $objs = model\User::find()-&gt;filter(function ($fields, $func) { return $func-&gt;or($fields-&gt;some-&gt;equals(1), $field-&gt;other-&gt;greaterThan(5)); }); # $objs is an instance of "Finder" and iterating thru it pulls the data from the database. I love closures. 
&gt; First off, I didn't start getting rude and condescending until you did. Oy. &gt; because I like to back my words with example. Except that for two posts I've been asking you to do that, and you won't. &gt; Since you're such a "seasoned" programmer, who has undoubtly read hundreds of programming books like the rest of us I guess you don't want the answer that bad after all.
This is dry coded, but accomplishes 90% of what people need for hashing passwords: https://gist.github.com/1220934 To hash the password: $h = new SaltedHash(); $hash_to_store = $h-&gt;hash($password); To validate: $h = new SaltedHash($stored_hash); $valid = $h-&gt;compare($password);
I'm sure other examples would illustrate other uses, but what are some advantages of using `array_walk()` over, say, a `foreach` loop? $data = array('tacos', 'burritos'); foreach ($data as $datum) { echo $datum . ' are good.&lt;br /&gt;'; }
Converts an array of booleans into an unsigned 32 bit int (maximum of 32) function serialize($input,$mask) { if(!isset(self::$valueMask[$mask])) { self::error('Invalid mask type.'); return FALSE; } $sum = 0; foreach(self::$valueMask[$mask] as $key =&gt; $val) { if($input[$val] == 1) { $sum = sprintf ( "%.0f", ($sum+$key)); } } return $sum; } Needs to be configured like so though: private static $valueMask = array( 'serializedSettings' =&gt; array( '1' =&gt; 'customizeIntro', //Customize Intro Splash - Splash introduction for first time users to customize. '2' =&gt; 'nb_notification_tip', //Network Bar Notification Tip - Shows tooltip for notifications on page load '4' =&gt; 'browse_dashboard_tip', //Browse Dashboard Tip - Introduce new users to the browse dashboard. '8' =&gt; 'adblock_enabled', //Ad Block Notification - Notify the user that they are using an ad-blocker via modal. '16' =&gt; 'network_facts', //Help Facts Box for Network Section - Box that shows up on the left side panel in networks showing new features '32' =&gt; 'wizard', //Wizard Enabled? - Checks to see if the user wanted to skip the wizard '64' =&gt; 'pro_features_up', //Let the user know that they have new pro features, when they are available. '128' =&gt; 'pro_features_slideshow', //Notify Pro users of slideshow when they visit their page. '256' =&gt; 'honey_pot_whitelist', //Project Honey Pot Whitelist. If a user is blocked by Project Honey Pot, this is our whitelist. '512' =&gt; 'profile_cuztomize_helper'//Message in CP profile which introduces customize feature. ) ); Here's the opposite: function unserialize($int,$mask) { if(!isset(self::$valueMask[$mask])) { self::error('Invalid mask type.'); return FALSE; } $total = (string)$int; foreach(array_reverse(self::$valueMask[$mask], TRUE) as $key =&gt; $val) { if($key &lt;= $total &amp;&amp; $total != '0') { $output[$val] = 1; $total = sprintf ( "%.0f", ($total-$key)); } else { $output[$val] = 0; } } return $output; }
I have and do, after being inspired by lithium's usage of this.
Thanks, but left that boat 2 months ago ;) (still a lot of optimization was done on PH). No much technical answer/questions but might still interest you: http://www.reddit.com/r/IAmA/comments/kf4be/nsfw_iama_former_lead_developer_of_pornhub_amaa/
I'd actually love to get a clear response. There are a couple groups out there making earnest attempts at forking PHP. For example [this guy](http://www.xarg.org/2011/06/php-hacking/). Now, I've wanted enums for a long time. *Real* enums. Real, honest to god, native enums. Like I mentioned [here](http://www.reddit.com/r/PHP/comments/kfvzy/my_enum_class_for_php/c2k5gxl), they have other benefits besides error checking. So I've considered writing a patch, and submitting it, but I want to get the cons against the use of enums. Thus the reason I started this topic on reddit. I wanted to get a little community feedback. I've already read the cons against enums in the PHP mailing list, which were also echoed here by you: We have defines and class constants. Why do we need more than that? So if you have something to add to the discussion besides "use defines", and "that's what unit testing is for", I would love to hear it.
while the PHP group decided to permanently enable the echo shorthand from short open tags in 5.4, it will continue to present a potential migration issue for a long time. it's generally a bad idea to use it (along with short open tags in general). you may be saving a couple characters, but you're in for a real pain in the ass if you ever need to run your application on a host using &lt;5.4 with short_open_tag disabled. 
Don't apologize to this douchebag...
I have to use this all the damn time. I hate that php returns true or false as "1" or "". echo $success ? "true\n" : "false\n";
You really took this much time and effort to reply to someone you don't even want to talk to? Idiot...
That's fine, but it's missing the two main points of this library. One is that passwords should be hashed with a cryptographically strong algorithm. The SHA1 algorithm is considered weak, and was [declared broken](http://www.schneier.com/blog/archives/2005/02/sha1_broken.html) a few years back. The second is that password hashing should not be a fast operation. Modern GPUs can [chew through millions](http://www.golubev.com/hashgpu.htm) of SHA1/MD5 hashes per second. This library attempts to address both of these issues.
Wow, quoting Einstein now. Good thing no one gives a shit
You can't help but reply can you fuckstick?
This idiot actually replied to a lorem ipsum post recently. What a marooon!
Nested ternaries are just evil. They're a good place to start if you want to make your code unreadable. That said, I love simple and clean ternaries.
Another useless response from the resident neck beard douche bag. Don't you have some more worthless Erlang libraries to be working on? Or perhaps you're taking a break from all of your valuable contributions to helping write the PHP language. Oh wait, maybe you finished writing code integral to Slashdot and have descended from on high to gift us with your incredible insight.
I'm just an IT guy who dabbles in scripting for Intranet stuff. Don't be so shocked that everyone doesn't know what you know. 
&gt; &gt; &gt; &gt; Your choice. I'm quite unhappy with this message, so I'm only going to offer past a rebuke once, I think. &gt; &gt; &gt; I find statements like "I'm so much smarter, because you don't want to read my story then you're just too dumb to understand it" very fascinating, as the people saying things like that are often reflecting on themselves. &gt; &gt; I guess you don't want the answer that bad after all. &gt; I'd actually love to get a clear response. Uh huh. Wasn't a very smart way to respond to "this is your only chance," then, was it?
My most common use for the ternary operator is setting defaults for request variables, which unfortunately this won't work for if you have notices turned on... $action = $_GET['action'] ?: 'list'; This will still throw a notice. EDIT: Ah, reddit at its finest. On-topic, not refuted, spawned a relevant discussion... Downvoted.
PHP returns true or false as true or false - they're booleans, not strings or integers. When you echo one, it gets converted to something it can echo first, I think.. that said, it /would/ be nice if "echo false;" printed something other than an empty string :) If it's for debug purposes, you can use var_dump($success); or its cousin var_export() $success = false; var_export($success); // 'false'
[call_user_func_array()](http://php.net/manual/en/function.call-user-func-array.php) has made my life easier when dealing with various remote services. I've also used the heck out of [ReflectionClass](http://www.php.net/manual/en/class.reflectionclass.php). Particularly, getting PHPDoc out of a method or property declaration has been super helpful.
Shameless plug: http://stackoverflow.com/questions/61401/hidden-features-of-php/1024914#1024914
That's why I put "php_flag short_open_tag on" in my .htaccess file :)
Oh jeez. Someone has a god complex. Never mind.
Yeah, if someone doesn't want to answer your question because you were rude to them after being warned, it's a *god* *complex*.
I think we've already established who was rude first. And yes. You certainly have some kind of complex. You needed to feel that sense of control from having something to give, and holding it back on a whim.
&gt; I think we've already established who was rude first. I'm sure you do. &gt; And yes. You certainly have some kind of complex. `:D` Yes, anyone who doesn't give you your way is insane. :) &gt; You needed to feel that sense of control from having something to give, and holding it back on a whim. Mmm. If that's how you want to interpret being given a chance after a long and ugly series of insults, rather than as a kindness, I guess I can neither stop you nor explain the matter. Have a nice night. `:)` More yelling won't change anything.
Thank you! That should help me immensely.
That's fine. I don't expect everyone here to know everything. However if a person is going to help people, they should do it right. If you'd like more information, I suggest you have a look at [this](http://hashphp.org/Validation) and read about SQL injections. Unescaped inputs are probably the leading causes of hacked php sites. A single line of code fixes this in that code example. This is why I'm harsh about it.
three common situations in which that doesn't work: * AllowOverride Options or All isn't set * PHP is running as CGI * You need to port to a non-Apache host it's a portability issue and bad practice. it's a better idea to favour explicitness over brevity regardless.
Can also be done as: $value = $value or 'foo';
Indeed, one of the most novel things about PHPass compared to basic hashing is the key stretching.
50% of the time, all the time.
* File size doesn't *really* matter, but I feel like there's going to be a lot of unnecessary cruft included when they get &gt; 20 MB. (I can't recall which did that, but I noticed at least one when I was trying some out.) * It's only the /app directory I am concerned about, but some I encountered seemed poorly thought out compared to others. Not of primary importance, but still noteworthy for me. * Templating engines (like Twig) can make for more easily readable views, IMO, and have some nice shortcuts that don't ugly them up. But straight PHP works as well when necessary.
Check here: [https://github.com/xeoncross/micromvc](https://github.com/xeoncross/micromvc). Might have been updated more recently.
FWIW, I appreciate your suggestion and I gave CakePHP some consideration, but I ultimately went with Lithium which, while not fully complete yet, is complete enough for most everything I need and has been working great for me in the past week I've been working with it.
Just wanted to let you know that I decided to go with lithium and have been working with it all week. Loving it so far.
I agree it's a portability issue, disagree that it's strictly bad practice. 99% of the time I control the hosting so it's never been an issue for me. Once I had to use IIS, but they allowed custom php.ini settings and that worked fine for setting my defaults, loading PDO, etc.
Wow. I guess I get it then. Didn't know all this.
Right after a windows reboot, and you come back to your workplace and your like what da fuck is that?! "who wrote this crap" oh right me *sigh* 
And this is an example of an OO over-engineering. The original [PHPass](http://www.openwall.com/phpass/) is simple and it works. This one took something simple, over-engineered it and re-released it into a mangled, complicated piece of junk with no added benefits from the original library.
&gt; I'm sure you do. We do. Thank you internet. It's [right here](http://www.reddit.com/r/PHP/comments/kfvzy/my_enum_class_for_php/c2k659i) in black and white. Nothing rude was said or implied prior to this. &gt; Yes. After you had been cut off for misbehavior when warned. (shrugs) You only see it that way because you're a social malcontent. Besides, you said "Uh huh. Wasn't a very smart way to respond to "this is your only chance," then, was it?", which implies you had already decided to with hold your ground breaking insight prior to me being nice. So there is no "after" I was threatened with a sleepless night of not knowing your break taking views on enums. &gt; Next time someone says "last chance," don't spit in their face then expect to get your way. This is what psycologiest call [cognitive dissonance](http://en.wikipedia.org/wiki/Cognitive_dissonance), or possible [rationalization](http://en.wikipedia.org/wiki/Rationalization_(making_excuses)). In one sentence you say I was being nice (To hear your awesome knowledge), and in another sentence you say I'm spitting in your face. It can't be both ways. So which is it? Oh, I know. It's whatever way makes you right. Sadly people like you aren't unusual in the PHP community (or any technical community). I spent a lot of time in ##php helping people new to PHP, and often find myself having to swat away people like you. All too often they have @ in front of their nicks. Their lives are apparently so devoid of meaning, and they're social stature is so low, that they can only get their kicks by making other people feel stupid, and/or in your case having some kind of god complex over people. So, you sir have a good night filling that void in your life. I'm going to go get laid.
You really shouldn't use ctype. Use the [Filter library](http://php.net/filter). People commonly use [ctype_digit()](http://php.net/ctype_digit) which has side effects if the values you're testing are actually integers. Here's the problem: &lt;?php var_dump(ctype_digit(10)); // false var_dump(ctype_digit(-1)); // false var_dump(ctype_digit("-1")); // false var_dump(ctype_digit(12345); // true var_dump(ctype_digit("10")); // true var_dump(ctype_digit(53)); // true var_dump(ctype_digit('0123')); // true ?&gt; The reason for 10 not validating is that integer values from 0 - 255 are treated as character representations instead of actual numbers. What it sees in this case is the same as chr(10). The reason for 53 validating is because chr(53) is '5'. Integers greater than 255 are suddenly seen as expected again. Signed values are just not supported at all and will always be false. ctype_alpha suffers from the same problem as does every other member of the ctype family: &lt;?php var_dump(ctype_alpha(97)); // true ?&gt; In this case, chr(97) is the letter 'a'.
I make my living off my website powered by Kohana. It is built with HMVC architecture in mind, so it makes some scaling easier (though don't use their built in ORM stuff if you want to scale on a single web server / single DB server setup). I've never been happier with any framework.
* I can see your point here. Total file size could be an indicator of cruft. It's a bit tricky. Take Zend Framework for example. It's *huge*! But they don't force anything on you. There are a lot of classes included in the framework that you may never use, but they are there if you need them. * This is kind of true. I've even found myself creating overly complex /app directories. And by complex, I don't mean just the number of directories. I also mean some directory names are all lower case. Some start with upper case letters, and so on. * This is a never ending debate within the PHP community. I suppose it really comes down to personal preference. I have seen template engines with syntax like &lt;foreach var="$somevar" to="$value"&gt;, which... come on.. That's just &lt;?php foreach($somevar =&gt; $value) : ?&gt; in a differet (and slower) dress. If I had to suggest one framework, I would suggest Zend Framework. Some frameworks (CodeIgniter) may be faster, and some (CakePHP) slower, but Zend is more of an industry standard. It's also supported by the "standard" IDEs. So in short, the Zend Framework is more of an industry standard. Plus once you understand it, you'll understand most other frameworks too.
I never said it was best practice but I sure do love typing it and it cuts down on clutter-y php code in templates, which I really like. Wouldn't used it on an open source project, but in my own codebases... I wouldn't have it any other way
&gt; You only see it that way because you're a social malcontent. `:D` &gt; Besides, you said "Uh huh. Wasn't a very smart way to respond to "this is your only chance," then, was it?", which implies you had already decided to with hold your ground breaking insight prior to me being nice. You should read the timeline again. You were told, clearly, up front. I find interesting that you're now admitting you had switched to being nice. &gt; This is what psycologiest call cognitive dissonance, or possible rationalization). I admit, few things make me laugh harder than Wikipedia Freud. &gt; In one sentence you say I was being nice (To hear your awesome knowledge), and in another sentence you say I'm spitting in your face. Listen, this isn't that difficult. 1) I tell you last chance. 2) You spit in my face. 3) I say "you're cut off." 4) You decide to be nice. 5) Laughter ensues. &gt; It can't be both ways. So which is it? Yeah. There's this thing called time. It turns out that overlapping before and after and going "it can't be both" isn't actually a particularly useful way to look at things. ISTANBUL OR CONSTANTINOPLE, IT CAN'T BE BOTH I confess, I can't tell whether you're being obstinate for the sake of being obstinate, or whether you actually couldn't figure that out. &gt; Sadly people like you aren't unusual in the PHP community Yay, more insults in a post entirely complaining about how insulted you feel. `:D` &gt; I spent a lot of time in ##php helping people new to PHP, and often find myself having to swat away people like you. All too often they have @ in front of their nicks. Cool story, bro. &gt; Their lives are apparently so devoid of meaning, and they're social stature is so low I don't know whether it's funnier that you fan-fiction entire life stories out of getting laughed at on IRC, or that you haven't yet sorted out their/they're/there. &gt; and/or in your case having some kind of god complex This is my favorite part. &gt; So, you sir have a good night filling that void in your life. I'm going to go get laid. I'm sure you are. `:D`
Happy to help.
array_walk can modify the values of the input array in place. It's particularly handy if you have several kinds of transformations you may want to use. [array_walk_recursive](http://php.net/array_walk_recursive) is particularly handy if you need to touch every item in an array of arrays.
A few things I have picked up for error handling: When using an error handler you can call [debug_backtrace()](http://php.net/manual/en/function.debug-backtrace.php) and do some logic to get a formatted backtrace similar to one provided by an Exception when an error is caught. When you set your exception handler all thrown exceptions not caught by other code are caught by it. In my personal code I have a function in a class set as the error handler. I then have a function set as an exception handler that simply funnels its properties to the function used for the error handler. This allows me to catch all uncaught exceptions and errors so I can do something pretty for the user. [EDIT] Almost forgot. I like to insert __call() functions into classes even if the class doesn't utilize it. Inside of the function I throw an exception stating that whatever called function doesn't exist in the class, like so: public function __call($function_name, $arguments) { throw new Exception("Function '{$function_name}' does not exist in this class."); } Doing this prevents a fatal error, gives you some debugging information, and if you set an exception hander you can display a nice error page for the user.
I've started using lithium over the past week and have been really pleased with it so far (building a site with it as I learn it), but I can see the value in being familiar with more than one framework, especially the ones that are industry standards, if I ever intend to get a real, non-freelance job, so I'll be checking out Zend in the future.
Trolling /r/php \([and not just /r/php, apparently](http://www.reddit.com/r/pics/comments/kf2yp/my_fridge_dryer_washer_and_what_used_to_be_my/c2jscel)\) is stonecypher's passion in life. If he can't win the argument the thread is about, he'll project his insecurities onto whomever he is in "discussion" with or tries to bully out his sparring partner. He thrives on getting the last word in, long after he mentions being "done" talking. I like to imagine him to be a rather lonely fellow, unsatisfied with his life as a cubicle dweller. He thinks he can achieve so much more, yet he hasn't. All his colleagues have started avoiding him for obvious reasons, and now he's taken to /r/php to share his Universal Knowledge with the world. Only give this guy the time of day if it truly entertains you ;-) 
I started out on a rude note and I shouldn't have. I was impolite no matter who I was talking to. He did ruin it later on (well, early on...) as usual but the apology about the "That's bullshit" opening stands ;-)
PLEASE don't suppress warnings. if your code generates a notice, your code is broken. fix it. edit: i just realised you might be joking :( double edit: oh no you're not! :((
I just discovered /r/php a couple days ago. Someone posted a link to all the programming subreddits, and it made the front page. It was honestly a small head slapper. Of *course* there's a PHP subreddit. haha But yeah... It'll take me a little while to sort out who is who. I understand what you mean by cubicle dweller. We all know who these people are. They get shit on by their bosses. They have no friends. They get rejected by women. The only time they get to feel superior to other people is in programming forums, and on IRC. Thanks for the heads-up. I'll just avoid any more conversations with him from here on out.
I'm surprised he didn't tell you that $75k is way to much hardware to throw at a site that gets 20 million hits per day and if you can't support that much traffic on a $5/mo shared hosting account you must be an amature.
that's fine, lots of people code in a bubble. just trying to let you know the pitfalls.
Besides his great accomplishment as being r/php's resident neck beard troll, he's very proud of his vast hobby Erlang libraries. Oh and he also helped write PHP did you know that? And he wrote some very important code that Slashdot runs on. Also, he cleverly peppers his posts with phrases like (shrug), (cough) and (rolls eyes) among others just to let people know what non-verbal communication he would be giving if he was in fact right in front of them. Perhaps his greatest attribute is his almost superhuman-inability to not respond to a post all the while insisting that he wants to end the communication. In fact he just recently responded to several nonsense posts such as a derp de derp post and a paragraph of lorem ipsum. It really is breathtaking to behold.
Similarly, [array_map()](http://php.net/manual/en/function.array-map.php). The [differences](http://stackoverflow.com/questions/3432257/difference-between-array-map-array-walk-and-array-filter) are a bit subtle.
I've known about [strtotime()](http://php.net/manual/en/function.strtotime.php) for ages now, but when I first learned about it as a n00b it seemed absolutely awesome.
I was waiting for it. :) Edit: Most of that hardware is disks. It's a "file sharing" site. Keeping triplicate copies of every file uploaded takes a lot of hard drive space.
True always use filter_var nowadays, style use ctype in some case still do.
Oh it can be quite entertaining if you have some time to kill. Overall though, reddit is quite clean because the trolls usually get downvoted. I hope you find stimulating conversation in the programming subreddits.
Oh the dreaded can't figure out they're/their/there internet forum burn. Ouch. Good troll bro.
Well, as long as you're aware of the gotchas, it does the job. I just find that the hidden side effects sometimes trip people up.
Please stick around if you're used to helping people with php. Your help and advice will be much appreciated. Sorry you had to experience that worthless troll so quickly. He's pretty much the only insufferable troll around r/php anyways and now that you know what he's like there's no need to even bother with him.
PHP's [crypt()](http://php.net/crypt) ?
&gt;This is why you just put @ before everything. Like
Yeah, that is one of my main problem with PHP, all the functions that have hidden behavior that can screw with you code...
I love \_\_DIR\_\_ and the php5 fix to \_\_CLASS\_\_.
Is it PHP where they're broken/bad? I can't remember which language I was reading about where they're evaluated right first and then left (or something like that) which royally fucks things up and makes nested ternaries suck/impossible
Overloading has a number of popular uses. \__call() ======= This is popular among frameworks and libraries to pass method calls along to plugins and helpers. Lets say you have a class named Controller which *does not* contain a method called isValid(). The Controller class loads a number of plugins on initialization, and stores them in an array. When the method isValid() is called on the controller, the Controller class can check all of the loaded plugins for any having that method, and if found, "dispatch" the method call to the plugin. I've also used is as a lazy "catch all" in my model classes. For instance lets say I have a class named Members that represents the database table `members`. I can introspect a call to Members::fetchById(12), build the query "SELECT * FROM members WHERE id = 12", execute the query, and return the results. The \__call() method would see I'm trying to call "fetchById", and break that down into "id", and build the correct query. It's also potentially useful in a type of [decorator pattern](http://en.wikipedia.org/wiki/Decorator_pattern). Lets say I have a class like this: class User { private $name = null; private $age = null; public function __construct($name, $age) { $this-&gt;name = $name; $this-&gt;age = $age; } public function __toString() { return $this-&gt;name; } public function getName() { return $this-&gt;name; } public function getAge() { return $this-&gt;age; } public function sendMessage($message) { // Do something to send the user an email } } I can then create a class that "decorates" the User class, by adding the method toHtml(). class UserHtmlDecorator { private $user = null; public function __construct(User $user) { $this-&gt;user = $user; } public function getHtml() { return '&lt;h1&gt;'; . $this-&gt;user-&gt;getName() . '&lt;/h1&gt;'; } public function __call($method, $args) { return call_user_func_array(array($this-&gt;user, $method), $args); } } Now lets use the classes. $user = new User('Joe', 35); $decorator = new UserHtmlDecorator($user); echo $decorator-&gt;getHtml(); if ($decorator-&gt;getAge() &gt; 30) { $decorator-&gt;sendMessage('Hi there old man!'); } The UserHtmlDecorator class can use \__call() to pass along method calls to the object it's decorating. \__set() &amp; \__get() ============== These methods allow you to intercept getting/setting class properties that don't exist in the class. This can be useful if you want to encapsulate most of your class properties in an internal array, which is what many MVC frameworks do with their View classes. Here's an example: class View { private $__data = array(); public function __set($var, $value) { $this-&gt;__data[$var] = $value; } public function __get($var) { if (!isset($this-&gt;__data[$var])) { throw new Exception("The value for '$var' does not exist"); } return $this-&gt;__data[$var]; } public function toArray() { return $this-&gt;__data; } } Now when I use the class like this. $view = new View(); $view-&gt;name = 'Joe'; $view-&gt;age = 35; The values for 'name' and 'age' are actually being stored in my internal array $__data. They can also be used to create "clean" looking setters/getters. Lets say I have a class that stores ages for different people. class Ages { public function __set($var, $value) { if (!is_int($value)) { throw new Exception("Only integers can be assigned to this class"); } $this-&gt;$var = $value; } } I can then use __set to validate any values assigned to an instance of the class. $ages = new Ages(); $ages-&gt;joe = 35; $ages-&gt;amy = 21; Summary ======= PHP's overloading is great for creating cleaner looking code. That being said, there's little I've described above that can't also be accomplished using more efficient, old-school methods.
The un-announcement [is here](http://marc.info/?l=php-internals&amp;m=131613589305249&amp;w=4). 5.4 uses a new [release process](https://wiki.php.net/rfc/releaseprocess) using time-based milestones. Beta 2 is [scheduled for October 13](http://marc.info/?l=php-internals&amp;m=131613631605492&amp;w=4). Beta 1 was held back a little to clean up numerous failing tests, the cause of the recent 5.3.7/5.3.8 fiasco.
Oh good lord, my colleague uses these "reverse switches" in his code all the time and it's left his programs an unreadable mess. 
If you need gzip compressed output, do it at the server level, not the php level.
They're great for dealing with checkboxes in HTML forms.
Also, you get parameterized queries.
It's what people tend to do when they have no concept of design. You should introduce him to the [chain of command](http://www.ibm.com/developerworks/library/os-php-designptrns/) pattern.
Anyone got a changelog?
In that unlikely event: Search "&lt;?=", replace "&lt;?php echo" Done and done.
You can have included files return values. return array( "option1" =&gt; true, "option2" =&gt; false ); And then do: $options = include("options.php");
I think it's kind of sloppy usually. I've seen it used to bring back register globals from the dead. I did use extract in my template class for the imported template data. Since it extracts variables inside the current scope, it works well withtin a function.
Yes, it is/was PHP. Dunno if they fixed it but if you really need to used nested ternaries you can use parentheses.
I love me some [magic methods](http://www.php.net/manual/en/language.oop5.magic.php). And also traits, when I get my hands on them.
Just declare `$out = ''` before the loop. Suppressing errors is generally bad practice and slows down PHP IIRC.
Normally, doing something like $object-&gt;property = "foo" just sets the value. With __set you can put some logic before setting the value, like filtering, validation or what have you.
I know but you got to admit that &gt;This is why you just put @ before everything. could easily be seen otherwise ;)
http://pastebin.com/HKwbkJkz (inside the archive, it is the "NEWS" file.)
do you mean something like [SQLYog](http://www.webyog.com/en/)? I can't really tell from the screenshot what you're asking for...
Love me some strtotime. You can nearly throw anything at it and it'll get the timestamp for you.
Array concatination: $defaults = array("name" =&gt; null, "email" =&gt; null, "newsletter" =&gt; true); $form_input = $_POST + $defaults; $form_input["name"]; // Will not trigger a notice if the key does not $form_input["email"]; // exists in $_POST, because the arrays were $form_input["newsletter"]; // added together. Note that this is not the same as merging. The key=&gt;value pairs in `$default` will NOT replace or merge the pairs in `$_POST` in the above example. It's a shallow, non-overwriting copy from the right hand side to the left array. 
I generally find something like this to be more readable, if you're dealing with bitfields: class Mask { private static $valueMask = array( 'customizeIntro', 'nb_notification_tip', 'browse_dashboard_tip', 'adblock_enabled', 'network_facts', 'wizard', 'pro_features_up', 'pro_features_slideshow', 'honey_pot_whitelist', 'profile_customize_helper' ); function serialize($input) { $flags = 0; foreach($input as $i) { $key = array_search($i, self::$valueMask); if($key !== false) { $flags |= (1 &lt;&lt; $key); } } return $flags; } } HTH.
If you figure out how to write it yourself you'd probably learn more.
`$var{n}` syntax is deprecated, and has been for several years. You should use `$myString[10]` instead. Anyway, not sure this aids performance that much. If you have really high load then you should be using APC and doing other kinds of page caching anyway. Using strlen will never be your bottleneck.
Alternatively... function setValue($value='Foo') { $this-&gt;value = $value; }
You know... I keep seeing posts like these on r/PHP and I'm hesitant to downvote them, because they are certainly PHP related... but seriously, we don't need to know about every stupid beta release of PHP. I think this subreddit should be for PHP tips and articles and major new upgrades, not little beta releases and bug fixes. So from now on, I will be downvoting posts like these.
How secure would sha512 be considered?
For optimization use single quotes and separate out variables from strings. *Slow* $foo = "This is $bar"; *Faster* $foo = "This is " . $bar; *Fastest* $foo = 'This is ' . $bar; Here's a [source](http://stackoverflow.com/questions/13620/speed-difference-in-using-inline-strings-vs-concatenation-in-php5) and a [follow up](http://stackoverflow.com/questions/482202/is-there-a-performance-benefit-single-quote-vs-double-quote-in-php).
I created a ghost. Sadly, I'm not at liberty to disclose how.
It might theoretically be useful for testing (e.g. when you expect an error), but there's no way you should use it in production.
Sure, ignore betas and release candidates. But then please avoid complaining about bugs in releases and -- worse -- badly conceived features because no one actually used them thoroughly before release (i.e., before they could be improved without breaking backwards compatibility).
The SHA2 family is more secure than SHA0 or SHA1, but they are designed more for generating message digests of large amounts of data. Because of this, they are designed to be fast. Local testing took 0.120 seconds to hash the string "password" 4,096 times with SHA-256 and 0.161 seconds with SHA-512. And that's on an old Athlon XP 2600+. A modern CPU or GPU could do much better. By comparison, using bcrypt (the underlying method used by PHPass) took 0.597 seconds to hash the string "password" using a cost of 12 (so 4,096 iterations). It's a much slower method, but not slow enough to be noticeable in single transactions. Why is speed important? Slower hashing methods will slow and deter mass brute-force cracking attempts. &gt; [The better you can optimize your password hash function, the faster your password hash function gets, the weaker your scheme is.](http://chargen.matasano.com/chargen/2007/9/7/enough-with-the-rainbow-tables-what-you-need-to-know-about-s.html) Hope that answers your question. 
Both the original PasswordHash class from Openwall and this library utilize PHP's crypt() internally (except the Portable method). They just provide a consistent API for using different underlying hashing methods.
Maybe try searching around for an [open source project](https://github.com/search?type=Everything&amp;language=PHP&amp;q=addressbook&amp;repo=&amp;langOverride=&amp;x=0&amp;y=0&amp;start_value=1), to see if there is anything that fits with your requirements. I don't know of anything off the top of my head, but it doesn't seem like a difficult project to write from scratch. Could possible make it in an hour with [FuelPHP](http://fuelphp.com/) or [CodeIgnitor](http://codeigniter.com/), and you would learn a great deal more by doing it yourself. 
Maybe it is, but I know developers who wouldn't use Openwall's PasswordHash class simply because it's written with PHP4 conventions. Not the best reasoning, but there it is. This version is designed to give the developer more control over the generated hashes, and provide a consistent interface to whatever hashing method is required. If you build your app with PHPass (and use DI or a config file for its settings), you can change the hashing method without changing your code. You could even create your own adapter to support whatever method you need. This version is designed specifically to be configurable and extensible. If that means it's over-engineered, then I guess it is. The important thing is that developers be aware of proper password hashing and storage, regardless of what they use to get there. EDIT: s/why/who/ in first sentence.
Funny - if you used integers and defines, you'd have what you're now saying you wanted. Of course, you suggest there are mystery problems with that approach, but when asked what they are, you throw a hilarious tantrum at the end of which you speculate with several different sock puppets of the same person about the nature of my personal life, and insist angrily that your enum class is just as good as the real thing.
I'm surprised they haven't introduced a __toArray() method yet
Does it have the short array syntax?
Disclaimer: I've been using PHP since 2002 and love it for many tasks. A friend and I were joking about the days when everyone had register_globals enabled, which prompted me to make this image.
04 Aug 2011, PHP 5.4.0 Alpha 3 - Added features: http://pastebin.com/HKwbkJkz: . Short array syntax, see UPGRADING guide for full details (rsky0711 at gmail . com, sebastian.deutsch at 9elements . com, Pierre) . Binary numbers format (0b001010). (Jonah dot Harris at gmail dot com) . Support for Class::{expr}() syntax (Pierrick)
&gt;array_walk can modify the values of the input array in place $data = array('tacos', 'burritos'); foreach ($data as &amp;$datum) { $datum = 'new value'; } 
&gt; PLEASE don't suppress warnings. Yeah! Disable them in PHP.ini -*ducks*-
Am I the only one who looooooves the &lt;? shorthand... Until I get into an XML file and realize why its so dumb?
The @ symbol is evil. First of all, if your code *does* contain an error underneath that symbol, it is a bugger to debug ... I have commonly seen one in front of an include, and the file was not being included. Secondly, it slows your code down! If performance does matter, do not suppress errors AND always fix errors!
Mine would be: isset($arg) and obj::call_func($arg);
The compact function. $name = "Kaerigan"; $age = 21; $values = compact('name', 'age'); // $values == array('name' =&gt; 'Kaerigan', 'age' =&gt; 21);
It has a different result though; function foo($value = null) { $value = $value ?: 'foo'; var_dump($value); } foo(123); // int(123) foo(0); // string(3) "foo" foo(); // string(3) "foo" // vs function bar($value = null) { $value = $value or 'bar'; var_dump($value); } bar(123); // int(123) bar(0); // int(0) bar(); // NULL (had to try it out, I thought it would yield a boolean - well, I was wrong too)
Ugh. Please stop using die. Handle your errors, and display them nicely. Don't just spit out a white page saying "error." That's not helping anyone.
It isn't "evil" - it is a feature of PHP that has been abused too much by inexperienced and/or misguided developers, I'll readily agree. But $id = (int) @$_GET['id']; is a lot shorter than $id = (int) isset($_GET['id']) ? $_GET['id'] : 0; and the result is the same.. For things like this, I'll just go with "less typing" and if it takes a few microseconds more for a page that will see maybe 20 views/day.. eh.
Agreed. Several times I've had to fix code that relied on this function. I've seen it overwrite variables causing plenty of grief and on top of that it makes code hard to debug if you didn't write it as you may see a variable used and have a hard time tracking down where it was defined. Now you have to go through every extract and try and determine what variables it created... Just too much guesswork. Considering we spent far more time reading our code than writing it, we need to stop taking lazy shortcuts like this and write clear code that speaks for itself and doesn't leave future developers pulling their hair out.
Or just not be lazy.
Ugh, another one I hate. So many times I've taken someone's code and put it on a Windows server and been presented with a white screen. Error log gives me no inclination what the error is so I have to go through the code and inevitably find one of these buried in it. Short tags is not always enabled, especially on Windows. &gt; makes me happy everytime I type it And it makes me sad every time I see it :(
I like list($b, $a) = array($a, $b); to swap values instead of $c = $a; $a = $b; $b = $c;
Agreed. I've spent so much time breaking variables out of people's strings because the programmers just weren't aware of how much this lazy code can slow a system down under heavy load. I also appreciate that you put spaces around you period to make it more readable. I don't know why but "blah".$foo."blah"; has always bothered me as it's so cramped.
Sure [] instead of {}, as for the performance, trust me at high load there is a difference.
Pointless, mindless and verbose repetition is not being lazy? Right.
Callable typehint? Is is what I think it is? function doSomeFunkyShit(callable $callback) {...}
Yeah. [Here's the RFC](https://wiki.php.net/rfc/callable).
Neat!
actually, it is strictly bad practice. ignoring glaringly obvious portability issues always is. this is why short tags are verboten in just about every major, in-use PHP coding standard. just because you're coding in a bubble doesn't make your bad habits correct.
PHP does a pretty good job of doing that already with the various interfaces, like Countable, Iterator, ArrayAccess, etc.
If PHP was smart, it would treat it's defines the way C/C++ treats it's defines: Like macros that are simply replaced by the compiler with their actual values. In which case *no* memory is used to store them. However even in C/C++ you wouldn't a define for an array of values, like all the months in a year. A C/C++ programmer would use an enum for all the reasons I've already covered ad nauseum.
sorry but this is an ancient myth. Have a look at phpbench.com which disproves it. These cases get handled by the tokenizer, not the parser, and because of sigils it's absolutely trivial to detect variables in strings (the tokenizer is already looking at every input byte). It could make the most minute, tiny tiny immeasurably small difference when a file is tokenized, but not at run time, and if you're using an opcode cache like APC (which you are if you care about performance), the file won't need to be tokenized or parsed again until it changes anyway. TLDR - it doesn't make a tangible difference, please stop perpetuating this nonsense
Agreed. I do it the last way only due to code highlighting (strings are red, variables are blue, etc) and it makes it quick for me to look for variables. Also don't have to toss {} around array values either. Another added step, personally only toss SQL queries in double quotes. Find it easy for me to scan code and pick up queries.
Those are good points! The reasons that I chose to also implement Django filters having a direct PHP counterpart are: * 1) I felt that it would give a more complete interface to Chano. All functions can be chained and maps to arrays and objects. * 2) I can point my frontend guy to one place only, and he knows how to write templates for the project. * 3) People familiar with Django can get right down to business, and not wonder why this or that particular filter is missing. To allow for multibyte strings your example: &lt;?=strtoupper($title)?&gt; should be &lt;?=mb_strtoupper($title, 'utf-8')?&gt; or actually as you are using it as an example of Chanos "title" function: &lt;?=mb_convert_case($title, MB_CASE_TITLE, 'utf-8');?&gt; And likewise, a lot of the other str manipulating functions, takes care of multibyte for you, which can be a real pain in the ***! Thanks a lot for taking the time to voice your opinions. It triggers new thought processes in me, and it means a lot! 
Is sounds like you could probably do all that in a single SQL statement. This might be a good opportunity for you to learn to use joins, aggregates and conditionals.
my thoughts exactly
I don't know SQL statements that well yet, and I didn't know they could do the math portion of what I was looking for.
I'll grant you that a strong cryptography solution is important, but that is simply a matter of changing what function is called when producing the hash. This library is still massively over-complicated for the task. You're including 10 different classes for something that should, at most, require 2. Of course your hashing solution is slower, you're doing it all in PHP! The native encryption functions are C &amp; C++ libraries. Furthermore, why are you defining your own exceptions like these when PHP already has its own [InvalidArgumentException](http://www.php.net/manual/en/class.invalidargumentexception.php), [RuntimeException](http://www.php.net/manual/en/class.runtimeexception.php), and [UnexpectedValueException](http://php.net/manual/en/class.unexpectedvalueexception.php)? That's just more cruft. 
Unlikely? Oh I see, you're a hack.
Yes aid = Ad Id, and it's the same for both tables. There are less than a hundred ads. The number is generated from the CMS, but it starts at a bottom number, say 4000, an stops Somewhere before 5000.
I've been wondering for awhile if there's a similar method for recursively walking over all the (public) members of a class regardless of type. I have a debug method that uses `array_walk_recursive` to do a few things before doing a formatted output. For instance, it replaces `&lt;` with `&amp;lt;` so HTML isn't rendered, falsey values become strings that say FALSE/NULL instead of outputting a blank, etc. I want to use it for objects too but it seems like something that's not possible.
Sometime around the first week or two of any intro programming course.
Yes, unlikely. I've never ever seen anyone with it turned off on any of the web hosts I've worked with. If it should happen anyway, I can do a quick search and replace that doesn't significantly alter any code and is just as quickly reversible.
&gt; This version is designed to give the developer more control over the generated hashes As stated in the README: *"the output is 100% compatible with the original"*. It doesn't give more control over the generated hashes, it just complicates the process. The original also has *"a consistent interface to whatever hashing method is required"*... Really, this version has absolutely no added benefit... The only thing added is complexity. &gt; I know developers [that] wouldn't use Openwall's PasswordHash class simply because it's written with PHP4 conventions Adding visibility specifiers would fix their problem. No added complexity required.
Yes. Wow though. I didn't expect you to do all the work for me?!? I am not great with pulling data from tables yet, and manipulating it to do what I want. I could probably figure it out, but it would take me a few days, which I don't have.
Say I have two variables, and for some reason I want to swap their values with each other. $a = 1; $b = 2; if I start out with $a = $b; I can no longer put the prior value of $a into $b because I've overwritten it. So, I have to create a third variable, in the case above "$c" as a temporary variable to hold the value of $a while $a is overwritten.
This whole thread is chock full of obstinate people who seem absolutely determined to stick to awful practices no matter what. This shit is why PHP gets a bad rep. I mean, at least have the decency to keep your bad habits to yourselves--but no, you're PROUD and ready to argue for them!
You might find this useful: &lt;?php class a { var $a = 'a'; var $b = 'b'; var $c = NULL; function __construct($obj) { $this-&gt;c = $obj; } } class b { var $d = 'd'; var $e = 'e'; var $f = 'f'; private $g = 'g'; } $a = new a(new b); $func = function($obj) use (&amp;$func) { foreach ($obj as $attr =&gt; &amp;$val) { if (is_object($val)) { $func($val); } else { echo 'class '.get_class($obj).": $attr =&gt; $val &lt;br&gt;\n"; $val = $val . ' touched'; } } }; $func($a); var_dump($a); ?&gt; Output: class a: a =&gt; a class a: b =&gt; b class b: d =&gt; d class b: e =&gt; e class b: f =&gt; f object(a)#1 (3) { ["a"]=&gt; string(9) "a touched" ["b"]=&gt; string(9) "b touched" ["c"]=&gt; object(b)#2 (4) { ["d"]=&gt; string(9) "d touched" ["e"]=&gt; string(9) "e touched" ["f"]=&gt; string(9) "f touched" ["g":"b":private]=&gt; string(1) "g" } } Quick notes here if this looks weird - the [anonymous function](http://php.net/manual/en/functions.anonymous.php) passes a [reference](http://php.net/references) of itself ("use" pulls values in from the scope in which it is used) into itself so it can be used [recursively](http://wikipedia.org/wiki/Recursion). - [Objects in php can be iterated](http://php.net/iterator) over using [foreach()](http://php.net/foreach) much like arrays. This will not include non-visible items such as private or protected attributes that are out of scope. - using &amp; with $val creates a reference to the attribute value inside the object allowing it to be modified in place.
TIL. This needs to be higher up.
The ternary operator is neither a shortcut nor a secret. If you write PHP and don't understand the conventions of the ternary, you probably don't write very good PHP.
verbosity is pretty much always preferred. the only gains from shorthand tend to be shallow, but the pitfalls are deep. if you hate the time it takes for the few extra keystrokes, check out editors that can give you expandable keywords. there's a blatant portability issue with short tags, it's easily avoided and can be tricky to deal with later if your code is even slightly complex (or god forbid, someone else has to fix it). why NOT write objectively better code? code rarely ever exists in a vacuum. sooner or later, someone else is going to have to deal with your code. sooner or later, *you* will have to deal with someone else's code. consideration is part of being a half-decent programmer.
That is much less maintainable if the code in your foreach loop is &gt;20 lines.
Kinda ingenious. How do you extend this with validation (cleanly)?
I love hearing about this stuff, personally. 
Frameworks are ment to cut development time and ease process of creating applications or websites. There are several design patterns a framework can be built upon but MVC is the more popular choice. I think I would have to disagree with you on it being unnecessarily complicated. MVC design keeps everything seperate, so its not all a mess of logic, extraction and html/design all rolled into a single file. IMO its easier to develop this way. What makes things complicated, is the frameworks themselves, every framework is different so you have to learn how to use them. I think your just maybe overwhelmed with it? There are several posts on this subreddit about good frameworks, check them out - cakePHP is a bad choice, there are easier more elegant, well documented frameworks out there than cake. But its a choice in the end, if you feel for a certain project that a framework is too big, then go the traditional route. But in the long-run, a framework will serve you with more flexibility and scalability should you decide to expand on the project. Just my 2 cents.
Here's my favorite snippet: function ifnull() { foreach(func_get_args() as $arg) if($arg) return $arg; } It's super useful for things like: $value = ifnull($_POST['value'], $_SESSION['value'], 'fallback value');
Right, like I said, I definitely agree with the separation of logic, data, and views, and I do think the concept of MVC itself is a good one. But yes, every framework handles it at least slightly differently, but they mostly seem to have the MVC pattern implemented in a fairly similar way. What I'm suggesting is developing a framework that starts from scratch on implementing MVC with no prior assumptions based on things like "well, Symfony does it this way, and so should we." I think the world of frameworks could benefit from a serious reboot.
I agree that obtuse code is bad and irresponsible, but this isn't that. It's a trivial detail that doesn't confuse or hide anything and is easily fixed by a *single* search and replace that anyone can do. Seriously, you're making a huge deal out of a small, cosmetic detail.
To swap values, you have to store one somewhere temporarily.
So this may be a stupid question, please forgive me if it is, I'm sort of a closure neophyte (I know what they are, but in the code I tend to work on, I don't see places where it's appropriate to use).... but what would be the benefit of a callback as a function argument instead of making the function return a closure instead? Or am I just confused... Thanks for any insight you can provide...
Cool! Plus once you paste the code here, others can learn from it.
When you hear someone begin a sentence with "I've never ever seen anyone..." You can stop listening because they have proven themselves a fool. They are relying on anecdotal evidence as a basis for fact. E.g. "I have never seen China." You and I both know China exists, but I've never seen it so I don't even need to consider it, right? 
Ah I misunderstood. Well why don't you start your own :) use it for personal projects, host it on github or bitbucket for others to look at and contribute. I see what your saying however, a popular project does something and everyone wants to follow it. I'm not a fan of this either, thinking outside the box is a great way to do something extraordinary.
This is exactly why so many people make their own frameworks, including myself. Most people don't need that level of abstraction.
MVC is a good tool, but not for all situations. It wouldn't make much sense for a single page site and often is overkill for a small site. You can apply the principles of MVC without MVC. Separation of code and presentation is always a good idea, but it doesn't have to be complicated. I've touched up several old sites by putting a block of PHP on top of old static pages, and keeping everything but trivial echos and loops out of the html below. It works for the job. But for a larger project, I would definitely go with a framework. A lot of people write their own frameworks. It's a good way of learning.
To the right is a little box that tells you what this subreddit is for. &gt; News that relates to PHP If you think that's too broad you could always start your own more specialized PHP subreddit.
Seriously, there is a nice list of new features. While I don't know what `ReflectionClass::newInstanceWithoutConstructor()` is useful for, finally we will no longer have to do call_user_func(array('ClassName', 'methodName')); Because of this little feature https://wiki.php.net/rfc/indirect-method-call-by-array-var 
this isn't a clarity or cosmetic issue, mate. it's a well established bad practice; it's a portability issue. it's a stupid shortcut that saves you nothing of consequence and a bad habit that a more advanced programmer who has to deal with your work after you will likely curse you for. a global search and replace will fail in a complex application. what happens if your application includes XML data? what happens if textual content happens to contain the search string? what about the next guy who's not aware of those that blindly runs a search and replace? you're introducing hard to diagnose issues.
Ahh... what do you mean?
This does work, but my complaint is that you're left with a reference hanging around which you really should remember to clean after. If it gets reused, it could cause weirdness in your array.
You are evil!
Strings with PHP code in them sounds like a much bigger potential problem than short tags. So does mixing XML with PHP. I've cursed developers and server admins for hundreds of things. Never, ever have I cursed anyone for short tags.
Oh I get you. Yea the anonymous function would definitely be a better solution then. Think I'll do it like that now.
This is going to depend heavily on your use case, but... The reason it is much less maintainable is that logic inside the foreach becomes very static and unchangeable if you need to vary what you're doing for slightly different use cases. Most people wind up using an if() or switch() at that point instead of changing which filter gets used. It is much cleaner to just pass a different anonymous function than it is to create large number of conditions. Ask yourself, what is cleaner? Which allows for easier change? function doTransform($array, $which) { do_some_stuff($array); if($which == 1) { foreach(..){ .. } } elseif($which == 2) { foreach(..){ .. } } elseif($which == 3) { foreach(..){ .. } } return $array; } or function doTransform($array, $filter) { do_some_stuff($array); array_walk($array, $filter); return $array; }
Does your code allow for all possible configuration options a web server can have, regardless of likeliness? I expect not. On a list of server configurations to consider, short tags would be far, far down on the list, if at all present.
Amen. Like so many shortcuts, the intention seems purely self-serving.
Why not if file_exists($foo){ dosomething()
&gt; If PHP was smart, it would treat it's defines the way C/C++ treats it's defines: Like macros that are simply replaced by the compiler with their actual values. That's ... exactly what PHP does. By the way, "its." &gt; However even in C/C++ you wouldn't a define for an array of values, like all the months in a year. A C/C++ programmer would use an enum for all the reasons I've already covered ad nauseum. Yes, that's what I told you earlier, which you said was wrong.
I don't think we're on the same page here... in my code $callback is guaranteed to be a callable, which then can be used in the doSomeFunkyShit function. Previously you would've had to do this: function doSomeFunkyShit($callback) { if(!is_callable($callback)) { throw new \InvalidArgumentException("\$callback must be callable!"); } // do something with the callback here, for example: call_user_func($callback, 'Some', 'arguments', 'here'); }
&gt; Never, ever have I cursed anyone for short tags. No shit. You had no reason to because you're completely ignorant of the problem and you're going to fight to stay that way. I hope you never write any sort of library or module (or anything public, for that matter), because I certainly wouldn't want to have to deal with the fucking conflicts every time I update from your repo because I had to sed your dumb short tags. Lord only knows what other idiotic shortcuts you take to save a few keystrokes, fuck everyone else.
It's discouraged and is a problem that can easily be avoided. There are no gains and only potential problems and I *have* seen them turned off more than once. I having had to go through and update a multi thousand page codebase to remove discouraged or deprecated features, trust me, it's a problem you don't want - it's not always search and replace. It's ok, it comes with experience. 
not going to beleaguer the short tag point any longer, but it's worth pointing out that there is nothing inherently wrong with mixing XML and PHP, or PHP with any other text document type. PHP is often used for its basic purpose: templating.
&gt; That's ... exactly what PHP does. That's amazing! Especially considering PHP doesn't have a pre-processor. Now, I wonder why running this benchmark uses 5MB of memory? http://pastebin.com/nnWmGMbV &gt; Yes, that's what I told you earlier, which you said was wrong. I would love to see the link to the comment where you said that, and a link where I said you were wrong. &gt; By the way, "its." Ah yes. Being a grammar nazi. The last bastion of a man that can't win an argument based on subject matter.
Yes, the OUTPUT is compatible. It offers a bit more control because the original is basically either Blowfish or Portable. It has code for Extended DES, but I don't know when or how it would actually trigger, as older systems lacking Blowfish support would be unlikely to have Extended DES support either. I'm sure there are cases in which it would, but as the fall-back is automatic, the resulting hash may not be what the developer intended. The adapter pattern was chosen to create a consistent API across any type of hashing scheme. If you simply want to use MD5 with this, you can, and the API doesn't change. That's more control, and more flexibility. Granted, I suppose it does come at a higher cost in complexity, when LOC and file counts are factored in. Actual usage is not much more complex than the original, though.
&gt; Of course your hashing solution is slower, you're doing it all in PHP! The native encryption functions are C &amp; C++ libraries. If you look at the class code, you'll find that I'm generating the salt in PHP. The hashes (except in the case of the Portable adapter) are generated with crypt(), which provides PHP's bcrypt support. &gt; Furthermore, why are you defining your own exceptions like these when PHP already has its own [1] [InvalidArgumentException](http://www.php.net/manual/en/class.invalidargumentexception.php), [2] [RuntimeException](http://www.php.net/manual/en/class.runtimeexception.php), and [3] [UnexpectedValueException](http://php.net/manual/en/class.unexpectedvalueexception.php)? That's just more cruft. The exception classes in the library extend the SPL exceptions and use a marker interface. This is [often considered best practice](http://ralphschindler.com/2010/09/15/exception-best-practices-in-php-5-3) for exceptions in libraries. It allows a developer to catch \Exception, \RuntimeException, \Phpass\Exception, or \Phpass\Exception\RuntimeException, depending on how granular they want to be. But I don't know, it's possible I've spent to much time around other "enterprise" developers.
There are gains, even if they're small. I'm not the only one to find short tags prettier and tidier. They're not generally discouraged either. The [Stack Overflow comments](http://stackoverflow.com/questions/200640/are-php-short-tags-acceptable-to-use) are generally in favor, and they're used by big frameworks. Also, they're definitely not deprecated. In 5.4 they're turned on for everyone. For a good reason, I'm guessing. Look, I see your point. Diligence and strict coding are good qualities. I don't see how it applies to short tags when I look at how they're used out there, compared to the butthurt of a few overly zealous programmers here who stoop to insults over coding styles (you're not one of them). But sure, I'm not a pure programmer and maybe I'll have to eat my words sometimes. I seriously doubt it, but if I do, I promise to think about you. :)
http://php.net/manual/en/function.array-merge.php
&gt; no added benefits from the original library I can think of one advantage: it conforms to [PSR-0](http://groups.google.com/group/php-standards/web/psr-0-final-proposal?pli=1) standards so I don't have to use require_once or write a goddamn custom autoloader in order to use it in my fancy framework. Drop it in the include path once and be done with it.
That's actually where I use short echo tags — templating. But yeah, mixing XML and PHP of course has its uses. I just mean I'd look into such code before checking if a developer's coding style.
Hi, I was on the team that developed that library (although I did very little code involving it). Feedback is always welcome. There actually is another class that does something similar (I am not a PHP dev) but written as example code because I was tired of answering questions about how to use the API: https://github.com/CpanelInc/xmlapi-php I should note that only that client library is considered to be in beta, however the API itself is quite stable: http://docs.cpanel.net/twiki/bin/view/SoftwareDevelopmentKit/CallingAPIFunctions http://docs.cpanel.net/twiki/bin/view/ApiDocs/Api1/WebHome http://docs.cpanel.net/twiki/bin/view/ApiDocs/Api2/WebHome
Yup, definitely a lot cleaner. TIL
If you're up for writing some extensions yourself, I humbly toss my [dirp framework](https://github.com/FilipeD/dirp) into the ring - [preview](http://img1.uploadscreenshot.com/images/orig/9/25815484735-orig.png)
Wow, thanks for your reply! The link you provided for the other PHP API is the same link that I posted. Did you mean this, http://www.cpanel.net/blog/integration/2009/10/xml-api-php-class-version-10.html? If you don't mind me asking, without having looked at both code-bases, whats different between your code and the API already available? I actually intend on using it on my site and am genuinely curious as to which may be the better solution.
I use this all the time for configuration files, it's super useful.
The issue is one of scaling the solution to the problem. Pros and Cons to everything, Frameworks make it easier to be disciplined in how you develop by giving you tools, and limitations to work within. This is a good thing __if your project can actively benefit from the discipline, and the particular set of tools and limitations offered by the framework__ If it doesn't, then it simply gets in your way and will actively hurt you. A lot of people will if themselves into a corner worrying about things that aren't likely to happen. This is where experience comes in. 
only a php dev would know how to use a ternary, yet call it something like a "single line if statement".
pull your head out of your ass. The man/woman just said portability isn't a concern since they control their hosting. Your downside doesn't affect them.
That would be the one I mean, although it's been updated (minorly) since then. the xmlapi-php class is a bit older, it's existed for 2-3 years, follows a very procedural design but is solid. The PublicAPI class is a much more encompassing creation that attempts to follows PHP standards and has much more OO-goodness within.
It crossed my mind that this is a slippery slope. Where do we stop? Do we add \__add() when two of the classes are added together? To add \__subtract(), and \__multiply(), etc? It's starting to get messy. We have to look at *why* we would want casting methods on classes, and it's generally because the class we're creating is meant to act more like a custom *type*. For instance we create classes that are nothing more than glorified arrays. They're meant to hold values, but contain little to no business logic. Take for example a Point class, which stores two points: X and Y. That's really all it does. Besides getters and setters, there's very little business logic inside the class. For that reason PHP could add a special "type" class, which would defined like this. type Point { private $x; private $y; public int X { get { return $this-&gt;x; } set { if ($value &lt; 0) { throw new Exception("The value must be greater than 0"); } $this-&gt;x = $value; } } public int Y { get { return $this-&gt;y; } set { if ($value &lt; 0) { throw new Exception("The value must be greater than 0"); } $this-&gt;y = $value; } } public function __add($first, $second) { $temp = new Point(); $temp-&gt;X = $first-&gt;X + $second-&gt;X; $temp-&gt;Y = $first-&gt;Y + $second-&gt;Y; return $temp; } } Or something along those lines. * Note: There's been some positive discussion about [adding C# style getters/setters](https://wiki.php.net/rfc/propertygetsetsyntax) to PHP.
Most decent editors can [highlight variables within strings](http://i.imgur.com/mtlQM.png) by now.
There are dozens of frameworks that deviate from the norm. Most get shunned by developers.
LOL What amateur bullshit.
Honestly, that's what I'm getting from this thread as well. I've had it open for a few days and have been refreshing it every now and then just to see if there's anything actually useful popping up... But no, the majority of posts are referring to things I only know about as what to avoid. I mean there's a full argument up there about people saying it's fine to use short tags (not to mention a lot of upvotes for the post itself). That's one of the first things I learned *not to do*. If you find anything that's not just people trying to avoid typing and making their code unreadable at the same time, let me know.
If you can benefit from it, it's good. If you can't, it's bad. Sage-like wisdom.
Yes, my Netbeans does however it's a habit that I keep and will continue to do so as there are times when I'm working in different editors depending on the computer.
I've used this trick for specifying default options for a function (inspired by jQuery, where a similar pattern is used a lot). function doStuff($options = array()) { $options += array( 'foo' =&gt; 42, 'bar' =&gt; 'baz'); // Options that aren't passed on invocation will be set to their default values. } // Use default options. doStuff(); // Override 'foo' option. doStuff(array( 'foo' =&gt; 'my foo is better' ));
Thanks! :-)
absolutely agree... everyone should write their own framework in their own carrier
This is pretty much the same as [a reply I made](/r/PHP/comments/kgzm3/whats_your_favorite_php_shortcutsecret/c2kegmy?context=1) to a comment a little further up. Using `+=` instead of `array_merge` and setting a default parameter value seems cleaner though – perhaps it will be of interest to you.
Again, this is just an example of using OR.
So is the original... One class in an appropriately named file. Drop it in the include path once and be done with it!
They made the short_open_tag INI flag stop affecting short echoes because it's a long-held bad habit but benefits non-PHP people. The history of its setting and description by the PHP authors (esp. in php.ini) strongly suggest discouragement. Meanwhile, its only separate in 5.4, which is only just in beta now so it's not portable and subject to change, and Zend, PEAR, and most modern frameworks continue to discourage them for the same reasons everyone here has been trying to tell you. CodeIgniter lets you do it in views because they test and rewrite it for you at runtime. Much of this is mentioned and highly rated in that SO thread. Read what you linked and learn the difference between obstinate opinion and what's actually recommended by the language designers and leaders in the field.
MVC are a great idea and unlike some of the comments here I think most situations benefit from them. The problem with CakePHP though is it is a copy of Rails. I'd like to see just one major MVC framework for PHP and one that plays to the strengths of PHP instead of trying to figure out how to do stuff that was written for ruby in php.
Yep, you can definitely do it that way too. I prefer to use array_merge() because there is no ambiguity in what it is doing. Unless there is a significant advantage in doing something a given way, I try to always work towards the method that offers the least number of surprises. For example: $a = $b + $c; Could be mistaken for a mathematical operation. It's difficult to know what the expected outcome is unless you know what $b and $c are defined as. However: $a = array_merge($b, $c); Is unmistakably an array operation.
Well, with just that single line we can't make out how often you call it and with how large data.
For clarity: I have written my own MVC before... My problem is with the mod_rewrites... It seems very difficult to code for MVC framework to work in ANY subdirectory under a URL... it is super easy to make it work for a ROOT URL... Anyone else have any tips for coding a system that will work in ANY subdirectory using mod_rewrite without having to alter .htaccess and/or code to interpret the URL if you don't want it to "live" in the root dir of a domain?
And I've spent too much time putting these variable back in the strings because it's slower with them out. (And less readable.)
if you can't, it isn't necessary.
Indeed, the title ask for our favorite PHP shortcut/secret, well that's one of mine because i -used too- need it/
 $c = new AwesomeClass; $reflection = new ReflectionClass($c); $properties = $reflection-&gt;getProperties( ReflectionProperty::IS_PUBLIC | ReflectionProperty::IS_STATIC | ReflectionProperty::IS_PROTECTED | ReflectionProperty::IS_PRIVATE ); And you have your array right there, with all the properties. You could use ReflectionProperty as well http://www.php.net/manual/en/class.reflectionproperty.php
They are not the same thing: $array1 = array("color" =&gt; "red", 2, 4); $array2 = array("a", "b", "color" =&gt; "green", "shape" =&gt; "trapezoid", 4); $result = array_merge($array1, $array2); print_r($result); print_r($array1+$array2); print_r($array2+$array1); Array ( [color] =&gt; green [0] =&gt; 2 [1] =&gt; 4 [2] =&gt; a [3] =&gt; b [shape] =&gt; trapezoid [4] =&gt; 4 ) Array ( [color] =&gt; red [0] =&gt; 2 [1] =&gt; 4 [shape] =&gt; trapezoid [2] =&gt; 4 ) Array ( [0] =&gt; a [1] =&gt; b [color] =&gt; green [shape] =&gt; trapezoid [2] =&gt; 4 ) 
Dude chill, he'll have to learn this on his own skin.
And let's not forget about his brother `extract`.
&gt; That's amazing! Especially considering PHP doesn't have a pre-processor. Oy vey. You think you need a preprocessor to do macro replacement? &gt; Now, I wonder why running this benchmark uses 5MB of memory? http://pastebin.com/nnWmGMbV I'm sure. The manual could tell you. &gt; I would love to see the link to the comment where you said that Then go look for it. You seem to think that's how to respond to questions people asked, remember? &gt; The last bastion of a man that can't win an argument based on subject matter. One, you yelled at me for telling you I thought you were thinking in terms of winning and losing. Two, just because you refuse to accept that you were answered doesn't mean that you weren't answered. Three, no, it's just schadenfreude. Four, that's not what the phrase "the last bastion" means. "The last bastion" refers to the last group attempting to uphold a belief. For example, the final member of a dying religion might merit this phrase. Strom Thurmond was the last bastion of racism as a believed-legitimate platform in the US Senate. It has nothing to do with hiding, and everything to do with defending a viewpoint. You undermine yourself by speaking in language you don't actually understand.
Extract is fucking evil. There is nearly no reason to use it.
 function get_email_template($template, $data) { extract($data); ob_start(); include($template); return ob_get_clean(); } Pretty useful for me.
Actually in PHP 5.4 &lt;?= $var ?&gt; will be on by default, with &lt;? blah(); blah(); blah(); ?&gt; independent of that and still off by default.
Do you know that China exists? I think you should check.
And I leave them however they are in context of the project. If the project uses all inside I too will put them inside, and vice-versa. Same way in regards to camelCase and underscores, whatever the standard for the project is... Editing coworker's code in this regard is way too much micro.
 echo (int)$success; 
Just remember that var_export() does not work on recursive structures.
Rather than say, "You're right. PHP defines are nothing like C/C++ macros, and do in fact use memory", you try some pathetic attempt at deflection. &gt; Four, that's not what the phrase "the last bastion" means. Try googling "the last bastion", and see how it's used, eg. "the last bastion of the opinionated", "the last bastion of the homophobic", or in this case, "the last bastion of the loser". These [two](http://www.reddit.com/r/PHP/comments/kfvzy/my_enum_class_for_php/c2k8ac9) [guys](http://www.reddit.com/r/PHP/comments/kfvzy/my_enum_class_for_php/c2k8d7x) are right. You're nothing but a troll, and I'm not going to bother responding to anymore of your comments on reddit. 
I stand corrected, there's ALMOST no reason to use it.
In a bubble? On my own closed source projects - for my own servers - targeting the latest versions of PHP? Fine. But it takes literally less than 1 second to find all in project for "&lt;?=" and replace it with "&lt;?php echo ". Not a big deal. 
There are numerous bug trackers in PHP - not sure if they're bugzilla clones though. I've used Flyspray to good effect (it's simple, quick and easy...like me) and Scarab's worth a look too. Edit: This might help: http://en.wikipedia.org/wiki/Comparison_of_issue_tracking_systems
&gt; These two guys are right. Those two guys are the same guy: a guy who's been banned half a dozen times. Maybe try looking at their account history. Literally the only purpose of those two accounts is to troll me personally. They only hassle me then support naive people like you who fall for sock puppets when they need an excuse to cling to. Enjoy falling for it. :) &gt; Try googling "the last bastion", and see how it's used, eg. "the last bastion of the opinionated", "the last bastion of the homophobic", or in this case, "the last bastion of the loser". It is quite easy to turn up poor quality of language on Google. What's your point? Yes, the error you made is a common error. &gt; I'm not going to bother responding to anymore of your comments on reddit. Sure you won't. :)
Generally because they do not satisfy the performance requirements that their names suggest. 
I think some of the MVC frameworks are poorly implemented, but the architecture style itself is quite valid.
At least with zend and symfony it seem out of place to have a single file in with the other libraries that are all namespaced nicely, since you'd have to reference it specifically in the configuration in order for it to autoload. I do agree this is way overdesigned, though. I'm not going to import an entire library full of crap I don't need just to perform a silly hashing function. This sort of thing belongs in a standard library, not in its own namespace.
When a person requests a video link, a session can be created based on their IP, user-agent, and a unique identifier. Then when you give the URL, you create a hashcode with the time and session data (or that's how I'd do it). When the URL is requested, check against your database for a session token linked to the person's session, and if it exists, serve the video with header tags and dumping out the file info.
&lt;3 it
My point exactly. The concept of MVC is very useful, but we seem to be falling into similar patterns across different frameworks, and taking a step back and coming at it with a different approach would be a good idea. Also happy birthday.
Clearly. I love how I proved him wrong regarding the nature of defines in PHP, and he can't just admit he was wrong. I think it's clear any further communication with him will be the same. That is, unless you're the same guy. :)
It depends on your rewrites your doing. The micro-framework I have works in subdirectories w/o issue, just one line of php code change (and not htaccess rewrite changes). Basically I have an constant defined for HTTP_BASE which I use in the html base tag. All my mod_rewrites work relative to it. So if you want to run in a folder, just update the HTTP_BASE constant and you are set.
Interesting. Is this something new to PHP? The documentation is... sparse.
Have you looked at preventing hotlinking with htaccess? Not sure if that was something you wanted to try or if you wanted to try the hashcode URL. http://forum.powweb.com/archive/index.php/t-56552.html
I felt the same way. Then I stuck with it. Now I love it. I don't think I'd ever do a project WITHOUT using a framework in the future. I'd rather not spend time by writing a user authentication class and other mundane things, when I can focus on building the important part of my application. My next step will be writing a framework, so I can understand the routing a little bit better.
The Reflection API has been introduced with the first release of PHP 5. I now that the documentation is sparse, but it is really easy to get the hang of it just by playing a couple of minutes with it's methods.
I think you are talking about framework design and not MVC. I'm helping someone write a PHP framework and agree that new blood is needed. 
A popular way of doing this is to use mod_secdownload, although a similar scheme could be implemented in PHP. You might look at the docs for the module, as the way it works is outlined pretty well.
MVC doesn't fully agree with my brain. At least not the CakePHP version of MVC, which is the only one I ever bothered learning because I was put into some projects that used it. Maybe other implementations are different, but in my head I always wanted the model to be an instance of a thing, whereas with CakePHP a model's more analogous to being a representation of a particular table in the database (or maybe a layer sitting on top of a particular table). Frameworks themselves are great, though. Who the hell wants to write complicated SQL join logic?
Once again your paranoid delusional fantasies about one person using multiple accounts just to try and harass/troll you show just how pathetic and simple minded you are. I've never been banned and have only ever had one reddit account. This is the same comment you pathetically roll out every time more than a few people decide to give you shit regarding how worthless you are to pretty much every forum you waste your time in. No one wants a truly worthless troll like you around. For all your knowledge you bring nothing to the table because of your condescending, shitty attitude, pretending to have some vastly superior knowledge about pretty much every aspect of programming. Any help you have given in r/php is purely by accident on your part. I think you mostly troll r/php because you can get away with it. I notice you really stay away from r/programming because you routinely get your ass handed to you. In fact when you try and spar with any seasoned programmer who actually has practical real world experience, you get destroyed with your weak academic arguments based mostly on you memorizing the manuals/specs/docs/etc. What have you done to make you such an experienced programmer. Let's see...a worthless Erlang library...wow...that's spectacular. Oh...I forgot, you also helped write the PHP language right? No you didn't you fuckin liar. You also wrote some critical code that runs Slashdot too right. Wrong. Another lie I'm sure. "Actually, I'm a software engineer by trade, and Slashdot in part runs on my code. I'm also a published author, both before Amazon existed *and* in Amazon's electronic distribution network." BULLSHIT
I've done this when I needed urls that lasted for 24 hours, I encrypted a timestamp and used it in the url and then when the page is requested decrypt and compare the times.. if it is greater than 24 hours serve up a 404...
Use PHP's mcrypt_module with a salt, user's session id, and filename to generate a link. Make sure you base64 encode it for url and html friendliness. When the user clicks on that link, decrypt it on the PHP side using the same salt and extract the filename. The secret salt prevents any user from generating their own link if the encryption was based on the session id and filename alone. 
I almost hate to weight on this... &gt; In which case no memory is used to store them. Really? You know that memory is needed to store them while the C/C++ preprocessor and compiler are actually building the code right? In PHP there is no external compilation step so, no matter what, that memory would be needed. You don't get something for nothing in this life. 
.htaccess to only allow referrers from your site.
I like [indefero](http://www.indefero.net/)
I use nginx, so this works: http://wiki.nginx.org/HttpSecureDownload There are similar implementations for lighttpd and apache I believe, but you shouldn't use apache for anything except file uploading.
My rewrite is as follows: RewriteEngine On RewriteBase / RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php/$1 [L] Basically, if the path given isn't a file or folder, redirect it to the root folder's index.php with the URI appended. When this sits underneath a subfolder, I have to edit it to have the subfolder before the index.php, or it will redirect to the wrong place. This also changes the 'controller' location in the URL when in a subdirectory, because the '/' locations are altered by the subfolder, if you follow me... Are you saying I have to not only maintain that base path in a constant for linking, but I also have to put that HTTP_BASE link in every image, css, or js file include in my view html? Cuz that's part of the pain in the ass I'm complainin about XD
&gt;The first time I looked into a CakePHP app, I was completely lost. much like any system, no? there's a learning curve with frameworks. once you know one well, design and dev becomes pretty painless.
Cakephp is *awesomely* documented. I can't remember a problem i've had, which I couldn't solve by just looking up the relevant page in the book. 
Symfony does it x way, because the developers have programming and developing with it for years, and consider x the best way. It's not some arbitrary choice. 
It is inspired by; the developers have stated multiple times it in no way attempts to be a copy. 
You realise there is a reason for the convergence, right? Sorting didn't converge on quicksort and mergesort for no reason. 
Models are instances. You can write whatever methods you want in your models. The most logical thing for them to abstract is the table. What would you do differently? 
I've used both and it seems like a copy to me.
I didn't actually make almost any of those claims. I didn't help write the PHP language; I donated three minor bugfixes to PHP/FI. That came up because someone wanted to verify how long I'd been doing PHP, and that was the earliest timestamp I could think of at the time. I didn't write any critical code that runs slashdot; I suggested an alteration to their voting system. I don't even think it got used, though I'm not certain. I am a software engineer by trade, though I prefer to be called a programmer, because I don't think there's engineering in what programmers do. Most programmers think accuracy and precision are synonyms, and would have no idea how much weight a bridge could handle. Published author? No, no. Someone wanted to know why I thought I knew how long the Amazon self-publishing process worked, so I pointed out a Sudoku book I published that made basically no money. And yes, I do have a book on Amazon that goes in print and electronic - Amazon does self-publishing, like CafePress but just for books and CDs. Any jagoff can do it, as long as their content is legal, and it's free. I was just justifying why I thought I knew how long it took. It's http://createspace.com/ - that is actually Amazon. (So is BookSurge.)
+1 for insightfully obviously + a certain dry/morbid humour.
&gt; I know you must be a very busy person, with all the long, and complex unit tests you have to write. I'm sure testing potentially hundreds of defines and constants for errors is time consuming. HAHA!!!! headzoo, let me tell you, if you have any where near 80%+ code coverage in unit + integration tests -- like myself -- you would be spending *far* less time needing to refactor or fix bugs. Heck, no one's found a "bug" in any code I've written in about 6 months, by the classical definition. Your disdain for testing is something that is **systemic** in the PHP community, more so than any other language I have experience with. But that's of no surprise: Most PHP devs don't even use IDEs and I can count on my fingers how many PHP devs I've worked with who could debug using breakpoints.
Today I learned about "Guessy McGee". rofl!
&gt; You also must be very busy emailing the developers of languages like Java, C/C++, C#, Fortran, VB, Lisp, etc, telling them how fooling they've been to include enum types when of course -- head slap -- they could have just used proper unit testing. Headzoo: Umm.... I can guaran-fucking-tee you NO ONE has *EVER* added enum support to *any* language in order to prevent end-developer logic bugs and typos!! Do you have any clue what enums are for?!? I seriously doubt it!
 $var = 9.9; print round($var); or $var = 9.9; $var = round($var); print $var; 
That was simple, now I feel stupid. Thanks!
If you want it to work in the way you originally tried to use it, function r_round(&amp;$var) { $var = round($var); } $var = 9.9; r_round($var); print $var;
&gt; Second, I've been programming for 20 years, and making a good living at it for 10. I currently manage 150K lines of PHP, Java, Javascript, C/C++, Perl, and HTML/CSS on a site that gets 20 million page views a day without breaking a sweat. Holy shit!! It's a CV fight!!! I've been coding for 15 years, professionally for 10... *I* currently manage 50+ MB of pure PHP code; 10+ MB of HTML/CSS and 8 MB of js (mostly AJAX) for the core platform of a Fortune 500 that gets ~50 million hits an *hour*. I think you're sort of out of your depth, to be honest, if you think 150,000 lines of PHP code is something to brag about. What's worse is that you also lumped HTML, CSS and JS in there, too. Hell! My latest *personal* project has 128,345 lines; wbond's [**flourishlib**](http://flourishlib.com/) (which he did almost entirely) has 69,617; my repo of example projects for students has 32,096 lines of pure PHP code. 
They get bonus points for a non-mac screenshot - ubuntu no less! :)
Don't. There are several functions in php which operate how you expected this to (I'm thinking of array sorting, I believe) where it DOES operate directly upon the variable by reference instead of returning the changed information.
Oh, I was speaking generally about closures versus callbacks. Sorry, I had just come back from reading some of the update list, and got my wires crossed.