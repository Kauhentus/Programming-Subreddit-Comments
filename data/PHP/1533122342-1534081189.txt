Do you use any framework or another thing for PHP?
Keep in mind, your user for an API and a website using the API are not the same type of user. 
Rust with R2D2/Diesel managing a Postgres pool
Sorry about that! Click &lt;[here](https://github.com/ApiVideo/php-client#full-api)\&gt; to get to the documentation. Can you access it now?
That works.
I had to come in and be the fixer on a website that was using the infusionsoft API as its database. Still have some PTSD. Infusionsoft is the biggest abortion of an API I've ever seen. Things like dropdown fields don't have IDs... everything is matched by strings. and when there's an error you just get a 400 code with an empty body, no message or anything. lots of fun to debug. [even this would have been more informative.](https://cdn.arstechnica.net/wp-content/uploads/2017/01/windows-10-something-happened.jpg)
Being able to convert your request object really does not get you very far. Suppose you had a bit of framework agnostic middleware which needs to modify the request. With psr7 you basically end up cloning the original request and making your changes. The rest of the framework now needs to somehow use the cloned request from that point forward. A framework such as Symfony is basically built around the notion of a single master request object. There is simply no easy way to handle these cloned requests. There is no built in chaining where each bit of middleware directly calls the next. Bottom line is that psr7 goes far beyond defining an interface. It basically defines your request/response handling flow. For good or bad, the chained middleware approach is still a niche design. Maybe Symfony 6 will adopt it.
&gt; I'm not a real programmer. I throw together things until it works then I move on. The real programmers will say "Yeah it works but you're leaking memory everywhere. Perhaps we should fix that." I’ll just restart Apache every 10 requests. [https://en.wikiquote.org/wiki/Rasmus\_Lerdorf](https://en.wikiquote.org/wiki/Rasmus_Lerdorf)
databases are bad, this is all I've heard
The new icon shapes is indeed better, more modern and sharper. But I find the new semantic coloring (red for destructive actions, green for creation, etc.) very confusing as a default icon is gray, which is close to disabled actions. The lack of color/contrast makes the icon harder to recognize, especially for layout windows. I know there is a period for adaptation, but the color codes is too simple now for me. Not dramatic, but uncomfortable for such a great IDE.
&gt; Not many people bothered sanitize their input back these days In PHP maybe
Agreed but I find restful to be neither the nicest nor most intuitive way to consume an api so your comment confused me. 
Ah I get what you're saying now lol. Sorry i'm tired :P
* 95 requests * 2.7mb traffic * 3.35s to load the site 
[https://www.youtube.com/watch?v=b2F-DItXtZs](https://www.youtube.com/watch?v=b2F-DItXtZs) It's a reference to that.
No shit.
Tell this to my co-worker. His "solution" is a database "service" that has built in caching mechanisms. Then the only way to access it is through the API for our app. Our app uses this API to make all read/writes to the system no matter what the data is, even if it's something we wouldn't want a user to be able to have access to. Also, the API is not part of the "service", it is part of our app. Literally the way it's written, if you try and call a method from a controller or than an API controller, it will literally screw up the cache, throw exceptions, or both. Oh, and he has one generic model for "work requests" that grabs literally everything when it's loaded. We have like 6 tables, let's get all that data per work request no matter if we need it or not. Just listing all the work requests for the user by their name? We obviously need to hit the comment table for that and get all the comments associated with the work request. And my boss is starting to wonder why "it's still in development, we're the only users in the world using it, why do some page loads take 15 seconds? how bad will it be when we have hundreds of users on it?"
ю This page (http://phphelp.net/) is currently offline. However, because the site uses Cloudflare's Always Online™ technology you can continue to surf a snapshot of the site. We will keep checking in the background and, as soon as the site comes back, you will automatically be served the live version. Always Online™ is powered by Cloudflare | Hide this Alert
&gt; and I have had to deal with requests for making the API do everything That's a big red flag! That's how maintainability erodes and the API gets hard to evolve 
LOL, it's just a barely-alive Discourse-based forum. Calling a forum with a dozen topics per month "the best place" is a super-bold statement. 
DHH, for example, has done a lot more than install WP plugins but he says himself that he doesn't pay attention to what's going on under the hood. The lowest he goes is the Ruby language itself. He doesn't delve into Pat Shaughnessy's territory ("Ruby Under a Microscope").
Great, someone else trying to sell exams and certificates that have no value when presented to employers. Also, you might want to double check your website for bugs. Hitting "more" for certificates or lifetime access or anything doesn't actually do anything other than cause your browser to jump up
I'm puzzled why the advice given in this article is directed to male programmers only. Will there be a followup "Gals" oriented article?
I started use Lumen for apis, it is a good start for small apis and if you API being larger is easily join laravel with it. With Python for sure flask, it is the best for that. 
&gt; One of the common mistakes developers make regarding REST API’s is to treat them as databases. I would say that the common mistake devs do regarding REST API's talking about CRUD and talk about REST without knowing what is inside the standard of REST.
Is it Wordpress with some free template?
You know what, fuck off. Get a life loser. I will keep myself from trying to help anyone. 
"Guys" is considered gender-neutral most of the time when used as a form of address.
I think the article would be stronger if you gave concrete examples of instances where this causes problems, and show how it could be better with your change. Otherwise it's all very abstract and it's hard to actually agree or disagree with, and difficult for someone to take away a lesson from and use that to change how they program.
Abandon ship!
It's a pure concepts article indeed...
Haha, I just started this job about 2 months ago, hired because I have web experience. Problem is this guy is more senior, and won't listen to me and my title/position I don't have the authority to tell him to shut up and do it right. At this point, I'm just doing my code well, doing it fast, my boss loves everything I'm doing and actually jokes "well hell, give it to Excolo, he'll get it done in 10 minutes". So I figure I'll let it go until it comes crashing down at which point, I have a ton of evidence that I tried *hard* not to do it this way in the beginning. 
Go on YouTube. Search for gossip channels, hair care channels, and the every day life of a school teacher type channels hosted by women. No shortage of women starting most of their videos with "hey guys". Stop your bullshit.
Go on YouTube. Search for gossip channels, hair care channels, and the every day life of a school teacher type channels hosted by women. No shortage of women starting most of their videos with "hey guys". Don't fall for their bullshit.
You need new friends.
Yes, yes it is
Atlas ORM 3 actually looks pretty decent. Good job on keeping the configuration and usage simple. I like the fact that this ORM sits somewhere between a fully fledged ORM and a basic table data gateway. Seems like a good fit with Slim. Regarding the linked 'tutorial', something that looked strange to me is linking the component to the ticket: $component_id = (int) $data['component']; $component = $this-&gt;atlas-&gt;fetchRecord(Component::class, $component_id); $ticket-&gt;component = $component-&gt;getName(); It does not make sense to me that you can link a ManyToOne relation via the name of the linked record.
Annotations alone don't have any impact on how code is run. It only describes how services defined in Symfony's service container should interact with your classes, properties and methods. So yes, that's integration testing. Although I can agree it's not mentioned explicitly in Doctrine's documentation, but you'll get a big fat exception if a lexer can't parse even a single docblock in any of the registered files and namespaces. And fortunately that can't be changed.
I understand the point is not in Symfony, yet people are scanning and they don't know that. They look for "is that useful?" signs. If you'd see a post with PHP 5.2, you'd probably close it more likely than if you'd see PHP 7.2. Personaly, I try to give people as few as false clues as possible. I always miss some and get totally random comments (like these), but then I add that argument to the next post to prevent that confusion again. I know it's not perfect, but that's how our neural networks can work in this super complex world :) 
&gt; How do you think in OOP all the time though? Whenever I think about writing a process it always seems to execute top down in a synchronous manner. Of course usually PHP for my use has been primarily for DB interface/templating/possibly routing. It's hard to think in OOP when you start with the idea that programming is all about data manipulation. For those of us who are self-taught, I think that's just what comes pretty naturally, and it's the mode of thinking we fall back to easily. But "OOP thinking" starts at a higher level: accomplishing the goals of the business through a community of collaborating objects, the design for which must start with a deep understanding of the business itself. At that stage, you're really only worried about high level stuff. Even the programming language you'll be using is mostly irrelevant here. Certainly data manipulation and storage is much more of an implementation detail; something you get into once the initial design of that community of collaborating objects has already taken place. I wrote a little more on this idea here: https://kevinsmith.io/if-you-think-of-coding-as-the-manipulation-of-data-youre-going-to-have-a-hard-time-writing-object-oriented-code
Slightly off topic, but I've run into a RESTful JSON service that lets you run SQL queries. Just typing that makes me cry.
No man-guys, but a few woman-guys.
Cool, cool.
A cloud storage solution in the back, a static site generator in the front? That seems like a very odd configuration. Makes me wonder what I'm missing.
Very much so.
OMG!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [php/php-src/.../**plain_wrapper.c#L109-L115** (master → 1a303f1)](https://github.com/php/php-src/blob/1a303f1a2b6ed8853fea3a2079999eef7f462d86/main/streams/plain_wrapper.c#L109-L115) ---- 
I... er... dunno. I would rather build my API around resources, rather than contexts. I'm not entirely against this approach, but I think the mental overhead around UX-powered-APIs can be dangerous. As a developer, I am more interested in the actual resource, rather than that resource being made appealing. ¯\\\_(ツ)\_/¯
&gt; "well hell, give it to Excolo, he'll get it done in 10 minutes" And when the applications comes crashing down, the first thing your colleague will say is. Its all Excolo his fault, he works fast but not secure. Now we need to clean up his mess. You protest... Guess who the boss will believe? All that evidence then to amount of not a lot in practice. You will be fast called a complainer when you point out the issues. Your not company material, not a "yes man". Being honest, the whole "well hell, give it to Excolo, he'll get it done in 10 minutes" is a dangerous trap. Be careful that the boss does not start to put all the crap jobs on your neck, expecting performance for every tasks ( no matter how many walls you run into ). My advice is to look around for a better job because a company that has employees in service that are "senior" and make a big mess of the code, companies like that carry that technical debt with then for years. And the bosses are probably also not too tech savvy to let all this happen in the first place. What is also a bad combination. A structure like that is good if you plan on slacking off but if you have pride in your work, companies like that tend to burn people out.
Looks nice, how it is different from symfony/workflow?
Hi, Can any one from Germany tell me what's the salary of an experience(5/6yrs) PHP developer at there? What specifically to Berlin? 
Can we stop with the gender political bullshit. thanks. This wasn't directed at any one, you chose to see it that way instead of the value the article had, in which case was to create a conversation around what API's are and what they are not.
or to learn how to read.
Interesting, Id like to see a PHP version of Razer Template Engine though. Same templating syntax as the ASP.NET version, but is designed to use on PHP websites. 
Youve described my current state of software dev, for sure - the js sprinkles. I couldnt get a full grasp of the state of all of the JS integrations, so its just easier for me to plop out a Laravel site sans fancy front end JS framework. What made you come back? I love PHP and would use any reason possible to stay away from the JS front-ends. For me it takes way longer to set up a renderable page with Vue than it does just writing a basic view to render my data. If i need updatable items i can just ajax them for now. I eventually do want to get one of those JS frameworks down though. One day!
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt;What made you come back? SEO constraints, then the rest follows : * SEO : no need for fancy ssr rendering/prerendering nonsense that are flat out impossible in a pro environnement (I'm aware of PHP-V8, but it's still not usable). Unless your backend is also js powered (or at least not PHP powered), good seo in SPA is hard/impossible. Big no for my use cases. But that's why I don't mind doing backends/admin panels in full spa fashion, no SEO needs. * Given that I can't have rendering in js only, well, no options but to have php rendering. And I don't want to duplicate templates in js and PHP. * Same for data, I don't want to have the hybrid API + fully rendered view to deal with pagination without reload, etc. Vuejs is really good at that PHP+js sprinkle tbh.
Could someone let me know if I'm understanding the author correctly: **Example situation** You have 3 tables in your database that might together represent a user: * Contacts: Table of contact information *(e.g. A single contact may have contact_type, contact_value etc.)* * Locations: Table of locations *(e.g. A single location may have location_country, location_language, location_longitude etc.)* * Users: Table of users *(e.g. user_name, user_contact, user_location etc.)* **What you shouldn't be doing** Treating an API for your database as a direct map of CRUD functions to each of your tables. In our example the API would accept HTTP requests to three sets of endpoints to enable a front end to manipulate the 3 tables for the desired effect. // Example endpoints https://api.com/contacts/create/type/email/value/hello@world.com https://api.com/locations/update/id/56/country/atlantis https://api.com/users/get/age/18/24/ **What you should instead be doing** Creating relationships within your API that are meaningful to your end user, when interacted with the API then translates to CRUD functions for each of your tables. In our example the API could have one (set of) endpoints that treat all 3 tables like a single object to be interacted with: // Example endpoints https://api.com/users/id/22/add/contact/type/email/value/foo@bar.com https://api.com/users/id/29/update/location/country/sealand https://api.com/users/get/age/18/24/ So with the end user not really caring about a single location or email address out of the context of who it belongs to, we're only letting them 'talk' to those parts of the database how they naturally would? Let me know if I've missed the point!
Isn't Laravel Blade based on Razor? Not that it'd then be 100% the same.
You may find this interesting: https://github.com/shadowhand/latitude
Why would that be odd? You end up with a configuration similar to a regular CMS, except more flexible and performant for the vast majority of use cases...
My way is to study only the just basics of the framework, the concept (about 3-4 hours). And immediately go to do a real task. Ideal case - if you have a real task/problem/project under new framework. If there is no task, you can think up yourself. The idea is that you can read and understand the theory indefinitely. The framework's documentation is long. The Internet with a lot of articles, lessons and manuals about this framework - even more. Therefore, you can read endlessly. But the real skills you can get in practice only. Therefore, the quicker the transition to practice, the better. And in parallel you may expanding your theoretical base of knowledge about the framework. The main thing is to understand the basics (php, mysql, html, js, etc.). And it's not a problem to apply these skills to a specific framework/cms. 
Uhhh you want a side job? :) 
Thanks for that link, yeah it's on my list, someone said SOLID too.
Why was it removed?
Apache Netbeans 9 just got [released](https://netbeans.apache.org/download/). If you have tried it, what is your feedback?
I like to think of it like this... normalize your database, not your API.
Now there's a name i have not heard in a long time
Slightly off topic but also "Guys, HTTP is not just REST". I run across people that can't explain what OPTIONS or TRACE or CONNECT is and when asked what verbs they do know all they can respond with are REST verbs. People. If you're applying for a job and knowing HTTP and/or WebTech is a requirement of the position, brush up on HTTP. All of it. 
Original author moved it from it's own repo/package, and it's now only available as part of his kanban project. 
One of my coworkers used it on a daily basis. The only person I know. I found subimetext, vscode or phpstorm far more effective.
I am using it with symfony project (\~300 source files and twig templates). For now no problems...
&gt; I run across people that can't explain what OPTIONS or TRACE or CONNECT because they are mostly useless and REST isn't about that either. REST only needs POST and GET. Very few people have fully read the spec, I bet you didn't either.
guys is gender neutral you outrage baiter.
You have sorry. User contexts in the article means "points of view", nothing to do with data modelling. A Seller, Buyer and Carrier will do different operations in the API and will look for different data. For example: a buyer wants to buy, pay and track the shipment. On the other hand a seller is worried about inventory and shipping fast. The carrier only cares about weight and destination, so it goes. But notice how you're mixing API and DB concepts? That's what the article warns about. You're transparently seeing the DB through the API.
Apologies, *Users* was a bad choice of example here, it could be Employees or Restaurants. Isn’t what you’re saying what I’ve described though? My API user doesn’t care about contacts/locations- they want to access a User’s information- hence why the only context they’re offered to communicate through is the /user/ endpoint? I understand what you mean by differing contexts (Supplier wants different data to a Customer for example), but surely at your basest level your permissions setup wouldn’t allow them to access this- and secondly you wouldn’t even give them those options?
Indeed. It ranked in one of the least beloved languages and its popularity got outranked hard by Node.js and it seems that it ranked little higher in the most dreaded languages. PHP will probably not be seen at all soon.
Excellent point, permissions vs contexts, it's a really good fight. That's the kind of trade offs architects need to make all the time. There's no right or wrong, it's about the right decision for a given situation, in a given moment.
&gt; I found subimetext, vscode or phpstorm far more effective I can maybe understand PHPstorm but on what grounds are you saying vscode and sublimetext are more effective? In what ways are they more effective than Netbeans? Having used all the above products in a professional setting I'm failing to see any valid points in how they are more effective. 
They are not selling any exams and certificates, they are trying to make a space for instructors where they can sell courses and make money without giving any commissions the platform. As well as Web Technology bloggers or volunteers can write and publish their courses there, I believe its growing. They might need your help.
Maybe it was not the last version of net beens, maybe it was poorly configured, maybe my coworker is inherently slow, but it felt that way. And picking the right editor / IDE is in the end only a matter of feeling. I found sublime text, with it's incredible amount of plugins more suiting the projects I work on at a given time, because more versatile. And vscode version control is top of the chart. Last time I used net beens I felt bothered rather than helped. Once you are used to a program, adopting a new one requires a fast "getting familiar or amazed" by it. I guess net beens, never reached that point for me (atom. Or brackets neither...)
But part of the website it them selling courses that have exams and certificates. They're advertising exams and certificates quite prominently. Which have shown to have no value in the PHP community
It took 3 minutes to find out it's built with [WPLMS](http://preview.themeforest.net/item/wplms-learning-management-system/full_screen_preview/6780226) and [BB Press](https://en-gb.wordpress.org/plugins/bbpress/), along with [WooCommerce](https://en-gb.wordpress.org/plugins/woocommerce/) and a bunch of other WordPress plugins
Well that seems unethical, taking someone elses project and rehosting it on a platform they specifically decided they didn't want to host it on
Thats genuine
And is it ethical to break other people’s builds by deciding to take it down?
I don't think it's unethical for an author to remove a personal project that they made themselves and distrobuted for free, no
Ok, then author should have picked a better license, not MIT Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
the amount of time it takes for indexing?
The website is just a generic wordpress website built by gluing together various wordpress plugins. That doesn't reflect well on a website claiming to be the "best place for PHP and all Web Development guys" especially when it's load is so atrocious. Wordpress itself is an insecure platform and the website takes forever to load and loads way too many things. If someone wants to create a good place for PHP Developers to learn new things, perhaps they should focus on making the website good first
One of the advantages of depending on an open-source project with a permissive license is that you **can** do this. If for whatever reason the original author abandons the projects or yanks it from the existing infrastructure, you can put it back up your self.
Online documentation is not working.
&gt;I think Apache Netbeans dont have PHP support yet It doe's, they have 7.1 in the Beta not sure what they are planning for the main release, might be bumping that up to 7.2
That amount should take no time at all, though. Phpstorm can easily do a couple hundred megs in under a minute, specific plugins included. I'm also not sure the performance of the indexers is what really makes a difference in choosing your IDE. If it takes your favorite IDE 3 times what the competitors take, as long as you are productive with that IDE, that's all that matters. I've never seen anyone look for a different IDE, because their indexation was just too slow for them. I'm not looking for a pissing contest and was genuinely asking what that specific number of source files meant towards measuring the worth of an IDE. If it truly is just the speed in indexation, then I'm of a different opinion as to what is important when choosing an IDE. Hence, I said I failed to see the importance. That was in no way meant as a provocation, but somehow it elicited a downvote.
I don't think either is unethical. If this is part of a production set up it should be in a private packagist or a self hosted solution so that you have a cached copy and your build never breaks. Depending on something you have no control over being available is not a sane way to work. Nor is it unethical to redistribute something you have permission to do so.
PHPStorm is insanely good compared to this poor and outdated thing that is Netbeans
vsode and sublime have very poor support for intelliscence in PHP. it's pretty bad. PHPStorm has great refactoring abilities but the first 2? no, complete crap for RAD php development.
It's a project that we relied on, and many others were using as well. If we were claiming that we made it i could understand your argument, but we've still referenced the original author. We're just making it available for others to use, without having to pull a complete other application into their project. It's like trying to buy a steering wheel for a go cart, but having to buy a Ferrari as well to just get the steering wheel. We've just opened a steering wheel store
It's not the law, it's a license that was explicitly chosen by the author. He was free to chose another license or make his own user agreement saying "please don't redistribute without my permission". The fact that he chose that license points to him being OK with it. He probably just didn't want to bother maintaining both so he closed the repo.
It probably is (I haven't used Netbeans in years), but I think it's a very good thing there's still a decent free IDE around, and I hope Netbeans can stay relevant.
A license is a way of communicating with your users, and the author communicated "hey, I'm perfectly happy for you to grab this code, modify it, re-host it, redistribute it, whatever". They later decided to stop distributing it *themselves*, but so what? If someone offers me a slice of cake, and they later change their mind, it doesn't retroactively become theft. You're assuming, based on no evidence, that we should ignore the original author's clearly stated wishes. I find that odd.
You can still create a memory leaks though in and while a php instance is running.
Thank you, apparently I totally misread that manual page. More specifically this part caused the confusion on my side: &gt;**Note**: For portability, it is strongly recommended that you always use the 'b' flag when opening files with **fopen()**. Apparently it's not relevant anymore.
If your needs are simple enough that they can be taken care of with a static site generator, where's the advantage in spending $700/month on a glorified database backend with an off-the-shelf API? As far as I can see, you're paying for the admin panel and the additional risk that your backend provider might go belly-up.
yes, but docs directory still available.
Or this: https://github.com/atlasphp/Atlas.Query
&gt;it's unethical to put it up on Github when the author has explicitly removed it from Github its really, really not. It was released under the MIT, by doing that you hand over all rights, and removing it was a dick move.
Hard to even consider it when the docs links are all 404s (it links to the git repo, and the index links dont work), makes it seem very amaturish.
VS Code with Plugins &gt; Netbeans. Try it. It's true.
&gt; vsode and sublime have very poor support for intelliscence in PHP. In both cases, plugins change this greatly. They are flat editors, not bound to a language. The plugins are the meat of it.
There's also VS Code.
Where did you read $700? The free version is more than enough for most use cases, to be honest. In my opinion most blogs and other non-interactive websites could easily be turned into static sites. You'd get better performance and better security with it. Nobody's forcing you, but honestly if I think back on all the projects I've worked on, so many could have been built as custom static sites, and I wouldn't have had to deal with WordPress or Drupal crap, I could have used a cheaper hosting service, I wouldn't have had to deal with upgrading the platform and stuff like that...
Changelog: [https://github.com/php/php-src/blob/php-7.3.0beta1/NEWS](https://github.com/php/php-src/blob/php-7.3.0beta1/NEWS) Upgrade guide: [https://github.com/php/php-src/blob/php-7.3.0beta1/UPGRADING](https://github.com/php/php-src/blob/php-7.3.0beta1/UPGRADING)
https://www.contentful.com/pricing/ $879 for 50k records. Assuming a record is roughly equivalent to a page, not a page element, my current employer would need... 900 of these? &gt; In my opinion most blogs and other non-interactive websites could easily be turned into static sites I agree, but that wasn't what I was questioning. I was questioning getting the data out of an expensive back end, when you could just store it on a disc. Or in git. Or in a free headless CMS. Or in S3.
Out of curiosity, what kind of websites has 45 million pages? Or did I misinterpret your comment?
It's probably less than that. We have 900 business units, some of which are hitting 50k pages. But it's up there, yes. I don't want to get into too much detail, but lets say it's in the academic space.
Is it faster?
I put together a Docker image for testing purposes: https://hub.docker.com/r/colinodell/php-beta/
Doc link fixed. Thanks for pointing it out! Take another look, at your convenience -- fwiw, http://atlasphp.io/cassini/query/
Sure, but it suggests lack of care/attention from the maintainer.
Make. VS Code. Great. Again. It is true.
Use Magento 1 instead, its much more better
Ok, then it's (probably) not a good candidante for this use case :)
And PHPStorm is insanely expensive, given how good it is I am still unconvinced that it is worth the price tag. 
Hm, their example for mb_strtoupper is actually kind of questionable: Support for full case-mapping and case-folding has been added. Unlike simple case-mapping, full case-mapping may change the length of the string. For example: mb_strtoupper("Straße") // Produces STRAßE on PHP 7.2 // Produces STRASSE on PHP 7.3 Well, [akshually](https://i.imgur.com/DpQ9YJl.png) I would argue that this should be STRAẞE (except for Swiss German which does not have the letter ß) since [Capital ẞ](https://en.wikipedia.org/wiki/Capital_%E1%BA%9E) has been added. Where can I raise this as an issue or find out if this has been discussed?
**Capital ẞ** Capital sharp s (ẞ; German: großes Eszett) is the majuscule (uppercase) form of the eszett (also called scharfes S, 'sharp s') ligature in German orthography (ß). German eszett is, in origin, a ligature of two minuscule (lowercase) letters, long s and tailed z, and as such has no traditional majuscule form. Nevertheless, typefaces used for printing German language texts during the early 20th century have often included capital eszett glyphs. There were repeated calls to include capital eszett in official German orthography, particularly in the early 20th century, and again during the 1950s and 1960s in East Germany, but the character did not enter widespread use or become part of official orthography until 2017. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
This may be the cost if all the views are 100% completed and if all of them are in 4K. Thanks for your feedback, we launched the web service a month ago and feedback is always welcome. In the meantime, did you have a chance to look at the SDK? What do you think about it?
PHP is good here ;-)
I've used both in work and think Netbeans holds its own. The only thing I would love to see in Netbeans is improved database integrations as PHPStorm's is very slick!
&gt; I'm also not sure the performance of the indexers is what really makes a difference in choosing your IDE You must never have had to sit waiting for older versions of Netbeans or Eclipse/Zend Studio chugging on for an eternity and killing performance with every other function. Even PHPStorm, when indexing, can stop other things from working (linking to classes, hints, Find Usages, etc), so performance with large project is relevant
Does the end user end up having to install PHP on their computer to run the C# application? If i was to build a console application and created an installer etc. Would the end users computer end of with PHP installed on their system?
40-60k
What if it is a full stack developer?
This code is vulnerable to at least header injection.
Doesn't matter, most shops expect basic front end experience. You can get more if you're a beast of course.
What do you mean by beast of course?
Are you asking someone to write this for you? This is not the place for that.
Doesn't look like it. https://github.com/peachpiecompiler/peachpie/wiki/Requirements
What could possibly go wrong? ^/sarcasm
Incrementally. 
What about for, while, do...while?
1. It has been posted already 2. It makes no sense by definition 3. The quality of this half-assed too quick and too dirty attempt is just terrifying
Hi, I use NetBeans since version 6.5, for my needs it work fine, I also tried Atom, VsCode and sublime, but after few time I returned to NB, habit. I will try soon 9 version, I didn't know it was released!
I just generally don't sit around and wait for things. If there's really nothing else to do, I won't shy away from getting a cup of tea. Just another great natural point in the workflow to take a break. It's not like you're ineffective as a developer when your APM hits zero now and then. In my experience, waiting for Composer (source) packages to update takes way longer and is most of the time the reason for (partial) indexing actions to trigger. So the whole point is that I personally can't see the time and time difference between IDEs for indexing code to be a big selling point or major blocking issue.
thanks I will have a look
thanks - i've watched a bit of these so far, they are very good
i managed to it. I actually found a post that converted a file to a binary string and vice versa and was able to pull the rest. 
Hi guys! I have been learning php vigorously for 2 months now, and so far I enjoy the language and what it can offer. My course is learned through from my school, but even I have learned stuff from my school, I feel there are still many things that I have brought my attention that need to be learned in more depth and I need to have some professional guidance from you. What I am trying to learn here is security which I know it can be very challenging, but I am willing to learn no matter what. The best updated security solution for programming: * SQL-Injections * Cross Site Scripting (XSS) * Session Hijacking * Securely file upload * login and Password security * and more stuff...? This is just what I know so far and I am sure there are many more things that is unknown for me. If anyone could give me places where I can learn video, books materials and tons of great exercises. I will be completely grateful! 
Could you suggest some good PHP VSCode plugins?
It has the price of around 2 billable hours of a developers time, how the fuck is that even remotely expensive? Even the "All products toolbox" subscription is equivalent to only around 1.5 billable day, and that is for the more expensive business license, the personal license is a fucking steal. 
lol you are just like like quite a few fools I see on this subreddit, acting like PHPStorms is the only IDE they can use at all. Of course you dont worry about the price tag if your boss provides it free for you, its not your money. Will you pay for it yourself if your boss asks you to buy it yourself? Oh yeah, as a PHPStorm fanboy you probably will, but there are still a lot of us who will not. Stop acting like PHPStorm is the only IDE a PHP developer can use, despite its rich features there has not been a proven correlation that PHPStorm is able to raise developers productivity enough to offset the cost of using it. 
I used to be in your situation, I used vanilla procedural PHP for years. There is a huge gap between vanilla procedural PHP and OOP+Frameworks. It was difficult for me at first, because I felt like "I know how to do this in vanilla.. but I can't figure out how to do it in this framework" but once you really start to understand the flow of how it works, it starts to make sense. I probably would have given up on learning frameworks but then I found Laravel has a very nice video series that helped me learn the basics. Fast forward and I recently made a project that would have taken me months, and wrapped it up in 1 month with much less repeated code and I have much more confidence in the code thanks to writing tests and stuff.
[https://www.reddit.com/r/PHP/comments/91fylf/what\_performance\_tricks\_actually\_work/](https://www.reddit.com/r/PHP/comments/91fylf/what_performance_tricks_actually_work/)
Looks fine to me for 5.6. The only change I would make personally is to the cast and add brackets (I always put brackets around ternary operator usage), but this is basically personal preference: $a = (bool) (isset($b['c']) ? $b['c'] : false);
https://i.imgur.com/DK1ckG8.png
correct
I guess in PHP7 you could : $a = (bool) ($b\['c'\] ?? false); Not sure if it's really simplified.
Null coalescing operator, FYI if people aren’t familiar with this. Simply let’s you forego the isset and will automatically assign the value being checked (if set) otherwise defaults to the value following the ??
This does indeed seem the best for readability using PHP &lt;7.0. I had to look twice at the boolval() in the OP.
Syfmony 4 takes an minimalist approach out of the box. As opposed to previous versions of Symfony, you add only what you need. The directory structure of Symfony has become a lot easier as well. https://symfony.com/ If you really want to speed up your progress, subscribe to Knp University: https://knpuniversity.com/ - It is maintained by a guy who does a lot of the official Symfony documentation.
About link does not work. The API looks good. I think the design of the API is made by someone who knows how to write php code. What could be improved (imo): \- I do not like public properties. Maybe getters would be nicer \- Sometimes an exception could be thrown, or maybe a setting could be done to force exceptions instead of having to check for an error all the time \- Require PHP 7 and use types (\`string $username\` etc.) \- Do not require kriswallsmith/buzz, instead require a http adapter provider. You do (hopefully) not care about which adapter would be used \- I had a look at the models: definately work with getters/setters :-) \- I found the exceptions now. Document them, which call could throw which exceptions and how to try/catch (examples) 
Your guess is wrong. 
I don't see any problem. I not suggesting you to use it. I just didn't saw anything interesting in OPs library, latitude at least a bit more useful to me.
Easier to read, which will lead to fewer bugs = 👍
&gt; Of course you dont worry about the price tag if your boss provides it free for you, its not your money. Who said the boss was paying for it? &gt; Will you pay for it yourself if your boss asks you to buy it yourself? Absolutely. Because it's worth the money. And it's worth it to me to buy a personal license so I can use it for both work and personal use. --- The point of saying "It's around 2 billable hours" is to put the price tag into context. And nobody is acting like PhpStorm is the **only** IDE for PHP development. It's just the IDE that's leaps and bounds above the alternatives.
It's true but many developers are just programming as a hobby and not billing anyone.
Then my comment does not apply to them.
You could build one on top of twig. One I managed to create jade on top of twig and it was fun.
Thanks for you feedback! We chose PHP 5.3 for our clients who are still using this version. We want everybody to be able to use our API. However, we may add a more modern implementation in the future. We will adopt some of your remarks regarding the exceptions and require a HTTP implementation instead of Buzz. However there is no implementation of PSR-7 and PSR-17 for PHP 5.3, isn't it?
Just because you think it is worth the money, doesnt mean everyone has to agree with you. Me and my colleagues do not believe it is worth the price tag, and we use Netbeans just fine. As I said in the previous post, I fail to see how switching from free IDE to PHPStorm can raise developers productivity enough to offset the cost of using it, and apparently no one has been able to prove that. 
&gt; Atlas looks very uninteresting Yup: boring and predictable and stable and sensible and easy to use.
Have you tried convert the input file into some bytecode and when to show decode it?
Maybe you could try to use [JATE](https://github.com/XaBerr/JATE) , it's a framework much closer to traditional programming than the usual big ones. All you need to know is in the getting started. PS: Clearly does not require additional dependencies!
Aren't you "mixing metaphors" there? &gt;&lt;ahref="[http://www.P65Warnings.ca.gov](http://www.P65Warnings.ca.gov)"&gt;www.P65Warnings.ca.gov&lt;/a&gt; That looks like a mix of markdown and html.
@Hall_of_Famer, you are dramatic, and wrong. Many, including myself, buy their own IDEs, including PHPStorm and other JetBrains products. They are worth every penny. Many mechanics own their own tools. This is the same thing. If a boss buys it, great, but you're doing yourself and whatever client is paying for the project, to be using tools that either make the job take more time or unnecessarily open you up to introducing bugs. (which ends up costing them or yourself more time) You present arguments like a whiny child, and no one listens to children. Your arguments don't do any justice to people who have more legitimate reasons not to use superior tools despite the cost.
If it's over the price tag, (Especially considering it was on sale for $45 the other day) you and your team are doing a disservice to your clients, boss, or whoever is paying you. How much do they pay you? If you actually used it, you would find PHPStorm pre-emptively saves you time in bugs you would otherwise have missed. Someone is paying for that time, and it's more than the price of a PHPStorm license.
Fair points. Thanks. I did assume PHP was the problem when that isn't necessarily the case. Any suggestion on what to edit in particular? Take out the HTML specific portions you referenced so it renders differently?
PHP is a perfectly fine language. Node.js has it's place too. These people sound like jerks. I wouldn't worry about it. 
The reason I assumed PHP was because it only stops working after I add the conditional portion, otherwise it displays properly on all of our pages, I would just like to limit what pages it appears on. 
I'd try taking out the markdown and just putting in the url. I've only done a little bit of wordpress stuff, and if I recall it was a real pain to troubleshoot. 
What do you mean by it's only available as a part of his kanban project? In order to get the package you have to download their kanban project?
Take a look at this: https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software
Nope I wasnt dramatic, it was the post I was replying to originally that sounded like a whiny child, the post from the user xXxhax0r1337xXx. Almost every thread I saw about PHP with Netbeans, I saw such worthless post advertising for PHPStorm, as if you can just download it immediately. PHPStorm has neat features, but whether it is worth the price tag is subject to each developer's own perspective. You think its worth every penny you spend, great, but me and my friends/colleagues are entitled to our opinions that PHPStorm is too expensive for the job. You are the one acting childish here, the world must be black and white, you cannot accept the fact that some people feel that PHPStorm is overpriced. 
That website is amaaaaazing, but I wish there are some exercises or examples for beginner like me to try and implement the code. What I mean by that is the website you referred just gave a explanation and kinda quasi code. I'm to noob to grasp the idea that quickly. Any idea where I can learn more in depth, and I mean by exercises I can do? 
If you’re really really good.
I think it is a good idea. Maybe implement some machine learning algorithms using the PHP ML library to better summarize texts. 
I just tested this package. I fed it a looooooong customer support email full of ranting and nonsense. Basic and Compound returned 3 sentences that were pretty much the issue we needed to resolved. Thanks for sharing!
You may be interested by https://github.com/dunglas/doctrine-json-odm It’s a Doctrine extension leveraging JSON types. It’s main benefit over the standard « json » type is that it preserves PHP types (the class name) while standard type doesn’t.
Should i remove it from here ?
It depends on the SSO mechanism being used but most processes should only redirect or send info to the IdP when tokens or sessions expire.
This is what we do for most cases. 
Yes. He moved it from the original package to be a vendored package in kanban/kanban
Neat 
I've seen something like this years ago on a blog. [Here](https://github.com/adawolfa/php-timer) is a Javascript compatible `setTimeout()` and `setInterval()` for PHP (don't use it, I dare you) as the author solved it.
Question: Why are people still developing for this an abandoned project?
Not in text formatting,
Check Netbeans 9.0 **Beta (it is important!),** it provides PHP support by plugin (MainMenu-&gt;Tools-&gt;Plugins-&gt;Available Plugins)
Ohh!!!
I found it to by much more flexible to have query builder that just builds queries and provides introspection. Having such tool will allow you to have both table gateways and easy to use mappers. But... there are no such query builder out there. And even if I consider your Atlas.ORM interesting, I don't see any practical reason to use it. Query builder with introspection (to allow to generate mappers) will cover almost all my needs. And for more simple stuff I already have jsonb in postgresql, which allows me just not to have any ORM.
I was talking "including the plugins". You're not going to argue that the PHP plugin for vscode is as efficient as PHPStorm or on the same level when it comes to refactoring and auto completion, it is not.
¿Can you post your code?
Help us help you. Post examples/snippets.
the author is you by the looks of things (it's on your github not showing up as a fork)
most web-hosts you'll use will totally kill a long-running script. Get a VPS this will run fine until you include code that overrides the global state it's using...
I Submitted you a PR, makes the code a bit more readable, adds tests, makes calling in from a script file separate to the library and optional and explicit what it's doing (I didn't know why you were requiring a file, then it hit me, you wanted `node {script}` type functionality. Tests also contain the ugliest `setTimeout` `setInterval` using seconds instead of ms (I don't think PHP could handle timing for ms in a blocking loop)
We didn't talk about PHPStorm. Watch the exact part of your (edited) post that I quoted, watch my response to it. They have poor auto-completion out of the box because they are not PHP IDEs like PHPStorm. They are general purposes editors with IDE capabilities through plugins. Installing the right plugins, you get really, really close to PHPStorm. Not on the same level, surely not. Especially regarding refactoring (and I don't get my use-statements to auto-complete), but they are very capable regardless and for many people they are a really good alternative, since PHPStorm isn't free.
Because it's not a fork, original code was on a blog. I'm thinking about rewrite anyway, since I wan't the time remaining to be paused while a blocking code is executed, just like Javascript does.
If I understand correctly, you want to mock the very code you want to test? (the constructor?) Don't do that.
Not to be anal here, but you are asking for trouble if you try to add a human readable term into a date. It's supported for ease, but not accuracy. As mentioned in the php documentation, mathematical operation is not advisable. Use DateTime::add() or DateTime::sub() better (or, use nesbot Carbon). If you need to subtract exactly 1 month, at least tell you system what defines a month, like, 30 days? 31 days? 29 days? Then, do the subtraction. A month, for PHP strtotime implementation, they simply subtract 1 from the month component, hence the unexpected result.
&gt; A month, for PHP strtotime implementation, they simply subtract 1 from the month component, hence the unexpected result Which if they went through the trouble to add that, then why not say: if (day &gt; new_month_days) day = new_month_days Do you get month zero when you do this: strtotime("-1 month", strtotime("2018-01-31")? If not then it is doing more than "simply subtract 1 from the month component
Not really. As the title suggests it's a *really* poor man's "event loop". It's basically nothing more than: $callables= [ function() {echo 1; }, function() {echo 2; }, ]; while (true) { while($callable = array_pop($callables)) { $callable(); } } Which is effectively: $callables= [ function() {echo 1; }, function() {echo 2; }, ]; foreach (array_reverse($callables) as $callable) { $callables(); } If anything it's more a scheduler of events entered all at once before starting the loop than an actual generic event loop. There is no way to add events while the loop is running. It's all blocking. It's just useless for anything but OP having fun (which is totally fine and obvious the point of OP). What you are looking for is either [amphp](https://amphp.org/) or [reactphp](https://reactphp.org/) which both provide a full implementation of an async event loop and support libraries for most things you want to do.
Isn’t IntelliJ just the equivalent of PhpStorm but for Java instead? So unless you’re planning on becoming a Java developer, I wouldn’t advise it. I typically use IDEs for the languages I use most (PhpStorm and Xcode for me), then a solid extensible text editor for everything else (been flipping between VS Code and Sublime lately). 
IntelliJ is mainly for Java. if you arw rally looking into new product, have a look at ZendStudio
So, I saw PHP had this `do_my_job($description_of_job)` function, and I thought it'd just infer what my job is, instead it just uses advanced AI analysis and heuristics, consults 90 petabytes of online information and produces an approximate rendition of the task I described in the parameter, that isn't even exactly like I wanted. Downvote, zero stars, don't recommend.
IntelliJ is their "All in one". It handles pretty much all of their other IDE's with the exception of the C languages and VBnet
Why are you posting this in a PHP subreddit?
It's "all in one" but targeted to Java development. It doesn't do just PHP development well. PHPStorm works much better doing PHP development. I have the all products subscription, and have tried to use intelliJ for my daily LAMP dev and it just isn't geared for it.
Zend Studio is Eclipse
What are some things intellij is missing
&gt;PHPStorm I'd like to interject for a moment. The IDE you appear to be referring to as, PHPStorm is in fact called, PhpStorm. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future.
&gt;Phpstorm I'd like to interject for a moment. The IDE you appear to be referring to as, *Phpstorm* is in fact called, *PhpStorm*. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future.
False. I use IntelliJ every day at work because I switch between Python and JavaScript all day and I don’t want two IDEs, one per language. IntelliJ can do everything most of the other IDEs do, you just need to install the relevant plugin and you’re good to go. https://intellij-support.jetbrains.com/hc/en-us/community/posts/207049315-PhpStorm-vs-IntelliJ-IDEA
… why are you being such a jerk? 
Don't feed the troll
Not anymore. It is way better right now.
Jetbrains basically makes a single editor, and a bunch of plugins. * If you want to install whichever plugins you want, buy IntelliJ; it comes with a Java plugin by default, but you can install their PHP plugin, as well as their Python, Go, Ruby, etc. plugins. * If you just want a single language, they offer versions which are locked to a single plugin. The editor locked to only work with the Ruby plugin is called RubyMine, the editor locked to only work with Python plugin is called PyCharm, the editor locked to only work with the PHP plugin is called PHPStorm, etc. But it's important to note that it's the exact same editor and plugins either way. If you only want Ruby and Python support, you could buy RubyMine *and* PyCharm, or just IntelliJ; the result is identical except you'll end up with two installations with the former option, and one with the second. &gt; Therefore should I move to IntelliJ? Probably, if you don't mind the extra cost. &gt; Does IntelliJ support PHP/JavaScript as well as PHPStorm/Webstorm? It's 100% the same either way.
Personally, I bought the all-access pack. It's only like $150/yr or something and it gives me all of their software. I prefer to use the specific IDE's to avoid bloat. I don't want tools for 5 different stacks all bundled into one, that's just too much.
Looking at their comment history, I think you’re right. Yikes!
He's not wrong, he's not saying it can't do PHP development (or Python, or JavaScript, etc.), he's saying it is just more tailored for a Java environment. The position of things like certain menu items, or how you create new files, or the placement of certain parts of the UI is more tailored to be for Java development. PhpStorm is set up to be tailored for PHP development. You _can_ work fine with IntelliJ with all of the languages, but IMO it's nowhere near as much of a smooth experience compared to using each language-specific IDE for their intended purpose.
Autism. 
I didn't say it couldn't do the work, it just isn't optimized for it. I don't need, nor want, to have Java centric functions presented to me when not working on Java. It would be different if I were working on a mixed tech project (e.x. Java Backend, PHP Middleware, React frontend) and I needed to develop in parallel, but when doing a primarily PHP project with JS on the front end, PHPStorm is customied for that work in a way that just installing a plug-in to IntelliJ doesn't faithfully match.
I didn’t see this mentioned so I don’t know if it’s true anymore but I believe PhpStorm will get any php changes before they are able to be added to IntelliJ. So when a new phpstorm comes out with new php related features, IntelliJ can’t get those new features right away. 
IDEA is primarily a java ide with plugin support for other languages/technologies and doesn't offer the same experience across the board. Once you need to load more than one plugin in IDEA it tends to get bloated it may or may not be less than ideal experience
same here, that 50% off deal they had going was a steal. Upgraded my phpstorm license that dropped first year to $106 w/ the discount and they did one a solid and skipped the 2nd year price and dropped me down to $150/year instead of the 250/199/150 on the 3rd year. 2018 is the best version of their IDE's in a long time too so evne if I don't upgrade then I'm good for a long time.
I use Netbeans (I do 80% php, 15% bash, 5% dos) on Windows 10 and my dev servers are running localy in VM Virtualbox. With the correct plugins, I can do everything I need for free. Netbeans (Oracle) has been frozen for almost 2 years. But they have now donated all the code (for php also) to the Apache foundation. Netbeans 9 just got released. https://netbeans.apache.org/download/ For me, the most important thing is how HiDpi is handled by the tool. Netbeans 8 is 90% ok (some menus do not follow my custom config). 
If you use PHP 7.x you already have opcache enabled and 20 files will be served from memory.
I would like to know this too. According to the [PHPStorm FAQ](https://confluence.jetbrains.com/display/PhpStorm/PhpStorm+FAQ#PhpStormFAQ-IntelliJIDEAvsPhpStorm/WebStormfeatures) : &gt; IntelliJ IDEA remains JetBrains' flagship product and IntelliJ IDEA 9+, provides full PHP support along with *all* other features of PhpStorm via bundled or downloadable plugins. The only thing missing is the simplified project setup. Is it just the simplified project setup that is missing, is the FAQ misleading, or is /u/SixPackOfZaphod using/referencing an old intelliJ version?
You just missed a giant sale.
Using IntelliJ for everything is possible, but be prepared to do a ton of configuration and have lots of plugins running that you don't need. Personally, I'd rather pay more for the all-access pack and have custom-tailored IDEs than to save money (and waste time/resources) on an all-in-one, bloated install.
Agreed, having the logical separation between language environments works well for me.
PHP storm is just IntelliJ with the PHP plugin. The features are exactly the same. I use IntelliJ on my laptop, phpstorm on my work machine. You wouldn’t know there was any difference.
If that’s the case, then why pay for any of the other IDEs? This is great news if true because I’d prefer to use JetBrains over Eclipse. 
NetBeans is definitely the best free option. Have you played around with 9 any? I decided to leave it alone until a bundle with PHP support is officially available, but I'm curious if anyone has gotten it working through plugins or just copying directories around. I'm still using the 20180420 build, which recognizes newer language constructs compared to 8.2 (nullable return types, etc.).
&gt;What are some things intellij is missing Same, I haven't found anything yet. PHPStorm is IntelliJ IDEA. All their products are built on IntelliJ IDEA just with different plugins and you can install all those plugins in IntelliJ IDEA 
Hi, thanks for the tip. I'll be sure to do so. I use 8.2 which works pretty well for what I do. Steve 
The language specific ideas get new features for their respective language first. It takes about a quarter for intellij plugins to get those same features
Afaik, no, Idea is for Java. If you want to do Go, Python, PHP and JavaScript, maybe it's worth going for the full suite? It's about 250/y (unfortunately you missed the 50% sale earlier this week) as far as a remember.
&gt; and it's 100% the same. This is not quite accurate. The big difference is that IntelliJ with the PHP plugin is exactly that - a Java IDE with a PHP plugin. This is basically the same as when you get Eclipse and then a PHP plugin. You still have all of the Java tools in the menus and stuff, and therefore you have more "bloat". PHPStorm, on the other hand, is a PHP editor. It *only* has stuff for PHP (and well, the WebStorm stuff also). You still have access to the same features, yes, but there is still a difference. Personally I prefer multiple stripped down platform-specific editors instead of one giant monolithic editor.
Hehe, I am in the same case. I had no time to try it. As I use many plugins and customized it a lot, I will wait a few weeks. I have seen a tweet saying that php was fine but could not verify it.
I was just joking about your grammar 
Excellent. I move to Netbeans a couple of years ago from Aptana when that ground to a halt, and for the full stack development I do I love it. I look around for alternatives reasonably regularly but Netbeans works seamlessly enough that I see no reason to move. 
Cool, going to check out that thread. 
Thank you!
From what I see, it's typically a difference of 1-2 days, so nothing to worry about.
PHP 5.3.0 is 9 years old and discontinued for 4 years. I underestand that someone has an old application and uses corresponding PHP version, but there's no excuse about writing a 5.3 code these days. Feel free to advance to 5.6+, if not 7.
Yes it is still Eclipse
Can someone post some examples please?
Everyone else has already given more details. But I'd say just run the IntelliJ trial for a while and see how different it is. And make your decision from that. 
&lt;?dope ?&gt;
🙏💯
So when you say &gt; It doesn't do just PHP development well. Do you just mean that it is more setup for java out of the box and it requires more configuration to be equivalent to PHPStorm in terms of development, or (once setup) are there other downsides to IntelliJ IDEA?
This exactly. Shit, I might even use WebStorm if I'm going to be doing Node/JS and for PHP I use PhpStorm - even though PhpStorm supposedly has everything WebStorm has, I'm not sure if anyone uses it for like just Node.
The first part of what you said is true, the second part is false. VS Code has a lot of great features and addons, but all the addons make it feel a bit hacked together rather than a fully featured product like JetBrain's fully featured IDEs. 
I'll just leave this here... [PHP Datetime diffs..](https://www.dropbox.com/s/h63svs60lfegtxy/2018-07-18_13-49-25_phpstorm64.png?dl=0)
 All About Laravel &amp;&amp; VueJs - The latest Articles , Q/A, Trends, Video, Jobs, Services, news, tutorials, plugins, and more. [همیار لاراول](https://hamyarlaravel.com)
I used NetBeans right up until about 3 months ago when I finally jumped over to PHPStorm. I was a bit leery about jumping from free to paid, especially since I was so used to it, but when we started looking at migrating to PHP 7 and not having a lot of insight into how far out NetBeans 9 was, I figured it was the right time to start getting comfortable with it. I still have NetBeans 8.2 on my system since we are a PHP + Java shop (we have a separate Java developer, but I occasionally help out on small bug fixes/enhancements to some web service code that my app interacts with). PHPStorm has grown on me enough that I think it would be weird to switch back to NetBeans for PHP now, especially with the understanding that NetBeans releases are looking to be tied to Java releases and knowing how on-the-ball JetBrains is about keeping PHPStorm up with PHP versions. I still think NetBeans was a pretty solid tool for PHP 5; I may have to give NetBeans 9 a poke one of these days when there's time.
Thanks for this! Very handy
It strips however much indentation the closing marker has
Just finished this book that was recommended on this sub last week and it is amazing: https://patricklouys.com/professional-php/
I highly recommend using Flyway, Liquibase or Sqitch as a database migration tool. It ensures the entire migration is done in a transaction. We use Postgres, so DDL (adding/changing columns, changing table and view's structures) is also inside a migration (MySQL can't do that) The migrations are simple SQL files (no SQL-in-PHP) and can be tested and executed in a test env beforehand. The DB migration is the last step before `mv` switches a symlink over to the deployed code directory, so we have zero downtime without a maintenance page.
If all your migrations are just SQL files, how do you handle migrating data from one structure to another?
Any info on best practices for laravel ?
thanks [HamyarLaravel](https://hamyarlaravel.com)
I also use this approach when picking and designing a database. "How will the application be using the data?", instead of the traditional "let's normalize the shit out of this". The same goes for an API ofc. Try to do the hard stuff in your API. If you let your users it, they will probably create a mess.
Most migration tools assume I'll only ever migrate my relational database; and many assume I can perform all migrations with plain sql. Honestly how this mistake is made over and over... We prefer using [https://github.com/davedevelopment/phpmig/issues/24#issuecomment-10283296](phpmig).
i.e. always make backwards conpatible schema changes
Note that doctrine migrations also run in transactions (when the platform supports them). MySQL is sadly a platform to be avoided, since transactional DDL is still not a thing there: use PostgreSQL :+1: Full ack on using sqitch: it's well designed, simple, and it works well with most GIT-related workflows.
You mean migrating from one DB to another? That doesn't really apply, since HA migrations differ from a RDBMS to the next one.
&gt; What if something goes wrong? Best time to test your database backups.
What's confusing about it? In comparison to timezone and DST handling, it's a breeze...
Using codeanywhere for private projects, but why do you want to use a clouds based IDE?
No, I'm talking about cases where you have data in a certain format, and then you need to migrate that data to a new format, and the transformations are best handled with application code. Another example is when you're adding a new column to a table with lots of existing data, and you need to apply a constraint to that column, but first you need to fill out the new column for all existing records to ensure it meets the new constraint. I've also had to write migrations that involvr loading data into a database from a CSV file, for example. All of these things (and more) are near impossible to do simple with plain SQL scripts. They often require application logic.
Because we have multiple developers working on the same project all over the world.
I think you misspelled distributed version control
Ok? It still doesn't answer my question though 
use git and let each developer use whatever ide they like
It does. 
obviously you keep zip archives with previous versions
There is no "standard of REST". REST is just a set of principles and constraints based on other existing standards - like URL, HTML, JSON, XML, HTTP - which are defined in IETF RFC's. [See here](http://standards.rest/). There is no single hard guideline or specification that says "This is how you do REST correct!" The big problem isn't developers knowing how REST "works". The big problem is developers not knowing how to do proper, structured modelling in their API's and databases. Either they go on a spree creating tables, views, collections or columns all over the place, or they end up creating some complex URL based scheme to name resources and leaks database abstractions to cover up performance, stability or security issues or to meet tight deadlines. You can talk perfectly implement CRUD as a set of REST operations. The prerequisite is that you do it in a clean, orderly and structured model of related web resources.
You are assuming that "using a framework" is the end of that progressing. It's actually quite the opposite. Because then (if you actually keep improving) you start moving away from frameworks and instead just use "basic php" with composer packages.
Fail forward, don't rely on rollback
I would strongly recommend the author of the original article to watch Michiel's Rook talk: https://www.youtube.com/watch?v=un-vdrVAX-A General take away: separate database migrations from your deploy cycle.
Laravel facades anyone?
Please find the link below the title i given a brief detail 
You really know how to push your audience away. What an awful spammy title and article. Then again its from a recruiter so that explains it all.
Assumptions are the mother of all fuckups. The author nicely laid out why you should be really careful when making assumptions about code, especially when working with legacy. Never trust rules that are not enforced one way or another, especially when they are not even written down. That's why the original article talked about **guarantees** such as Haskell's IO Monad. I think the idea of the negative architecture is not a bad one, but in my opinion the conclusion of this article should have been that its strength lies in creating/designing new parts (as the drawing example the original article used) as opposed to when working with existing code, *unless* you have those guarantees.
Hello, there! I was invited to give a short presentation in a PHP meetup in my city. The problem is: I don't know what to talk about... Should I talk about hyped contents ? If so, which ones ? Thanks for helping me!
I usually use dotenv for setting parameters based on environment
I've been diving in the laravel recently after putting it off for several years, I saw the joke yesterday on programming humor about facades. but what's the whole gimmick with there being a shitload of them?
I once read somewhere that people think its all static methods and that sucks. Facade just resolves the class and instantiates and calls that class method, not static, on a class. Idk if people hate facades for other reason. I dont use them personally but okay, I see what theyre doing.
it's about invisible dependencies, you dont know what dependencies the class has because they are not injected. It's a bad solution for lazy programmers.
we had the same problem, now we use a config.dev.php and config.live.php file, dev is not added to GIT. at the end of [config.live](https://config.live) we check if config.dev exists and load it. dev overwrites all global variables which need to be changed for development such as API Key, DB Access, File Paths... you get the idea
Then they are doing it wrong. They have a potential money making hobby and and failing to capitalise on that.
It's the naming "facade" which is causing this (in my opinion) exaggerated mocking about "Laravel facades". Calling the "facades" as proxy would have been more appropriate, but the naming was already done and that's it.
https://12factor.net/config
I feel like this reply applies to 90% of tech blog posts. It's not quite handwaving, but there's a lack of specific case studies or evidence which is replaced by generalisations. That doesn't make them wrong, but it does make it harder to then go back from generalisation to concrete instance. And no, I'm not going to provide any concrete instances of other tech blog posts this applies to.
&gt;Good job Thanks! I hope you find it useful at some point.
&gt; There is no "standard of REST". REST is just a set of principles and constraints based on other existing standards - like URL, HTML, JSON, XML, HTTP - which are defined in IETF Rest was first described (in some formal format) by Roy Thomas in 2000. (https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf) REST doesn't describe a way to represent your data nor it describes a way to name your path/urls. REST is not related to CRUD in any way, although you can use CRUD operation, or you can do your api RPC style and return a JSON or an XML. REST became a fancy word when Facebook and Twitter stated they had REST APIs. Then, all folks around started to do things the "Facebook/Twitter"-way, and ended with some kind of RPC with HTTP verbs and URLS with some naming conventions. REST is not about that. The same is happening now, people claiming GraphQL solve problems it don't and blaming the poor REST for not being too cool when you can just put a filter on the url and solve all your troubles. My only point in all of this is: Each person has is own meaning for Rest, Rest-full, rest-whatever.
Hello, just wanted to say thank you for trying to make world better with open source :) I know how hard this task is and how much effort one must put to release good piece of software. Keep great work!
Hey! I have an image class that is a wrapper for the Wordpress featured image (please keep reading even if you hate Wordpress, my question is about php not Wordpress). Using my class I can do things like output `&lt;style&gt;` tags with different image sizes as background images, or get the src for an `img` tag. Recently, I'm working with a plugin that also uses images, but it returns them in a very different format to the standard featured image. I'd like to carry on using my class / a version of my class. What is the best pattern for handling this sort of thing? Here are two options I have thought of so far: **Option 1** 1. Create an `interface`, with all the functions and methods I'm using currently. 2. Rename my generic `MyImageClass` to `MyFeaturedImageClass` and create a new class, `MyPluginImageClass` 3. Pick and choose which of these classes to use, so use `MyFeaturedImage` class for featured images etc **Option 2 (my preferred option but I can't get my head around it)** 1. Create some kind of wrapper class 2. Instantiate it with a type, i.e. `$img = new MyImageClass(['type' =&gt; 'feature'])` Then I kind of burn out... can anyone give me any advice on a decent way of handling this? I essentially want to expose the same API to two very different PHP objects. I could do this on my own with spaghetti code but I'd love some insight into a DRY, modern approach.
I like using environment variables. In PHP you can simulate configurations via a \`.env\` file. On production, no need of .env, just using the server configuration. I have some issues with projects in my company. They commit configuration files. But if my laptop is slightly different from the one from my colleague, it's very annoying. By the way, having your production configuration file in your project repository can be bad too - if someone modify it (on purpose or not) and nobody notice it, you might have some issue in production you won't notice quickly (wrong database credentials, etc?).
I did this too. My PHPStorm Config disables anything not PHP develpement related like the Javascript framework stuff, ASP etc etc. I dont like that they include all this stuff in PHPStorm when they have WebStorm for that stuff. 
The problem is that the Facade pattern by definition does not match Laravel's facades. IMO it was a poor naming choice. IRL Facades group complex calls to multiple dependencies into a single method. Laravel's "facades" simply resolve a class instance from the container statically. As timoh pointed out, they're really just static proxies.
I find that stuff useful. I don't want to open two editors for one project. I use WebStorm separately if I have a Node app or just a plain JS clientside app, but otherwise I do everything from PHPStorm.
So the fact that the DIC is available in templates and static calls being used to transfer state are not anti-patterns? The fact that there's no core team, but only Taylor means that it's not a one-man-show? Oh please.
Symfony doesn't have this anti-pattern, the documentation does, and I'm arguing that it should be changed to use DTOs instead. Symfony is a tool that doesn't force you to use entities in forms.
TDD, BDD, REST APIs with PHP, Design Patterns etc. Maybe, I expressed myself wrong. I really don't know what I should talk about. I'm looking for some interesting suggestions :)
[Am I missing something?](https://3v4l.org/gfLL1#vhhvm-3185)
That onlinephpfunctions uses US/Pacific as the timezone, whereas 3v4l.org uses Europe/Amsterdam. I'm going to wager it's timezone related. If you throw date_default_timezone_set('US/Pacific'); at the top of the 3v4l code, then it breaks, and if you throw date_default_timezone_set('Europe/Amsterdam'); at the top of the onlinephpfunctions, it works. 
Doesn't matter what the façade is doing, it's still an undeclared dependency. They do not save time, especially when you know how to use your ide properly, and they cause trouble down the line. I've worked enough on laravel to have been burned by the thinking of "oh they're OK because you can mock them in tests" thinking. By far the worst laravel feature, and laravel docs almost exclusively use these. 
This is why it's very important to completely isolate third party dependencies behind an interface, an outside implementation using the third party dependency, and a set of well defined exceptions. You do not want these leaking all over your code - aws sdk is especially poignant, especially in the past where it used to leak guzzle all over the place. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [squizlabs/PHP_CodeSniffer/.../**Standards** (master → 1e440f4)](https://github.com/squizlabs/PHP_CodeSniffer/tree/1e440f47e304e640217645e843cdacaacc5339b6/src/Standards) ---- 
Interesting... php is weird... do you see any point why it would make sense to have different datetime diffs for different timezones? :D
I ponder if, internally, they're being juggled into UTC, then subtracted, and back out to the timezone required by the set. That would change the representation of the times given.
FYI you can import the classes so you don't have to write out the whole namespace 230 times.
Sure! That’s not related to this library, though, but basic PHP knowledge, isn’t it? I just feel that it’s better to write out the namespaces for each class in the documentation so that each example is entirely self-contained. You can just copy-paste it and it will work. You will have the correct class without looking for the imports further above.
The thing is we tend to think of code side effects in terms of mutability, not performance profile. An interface is great for isolating the code dependency, but does not keep it from ultimately making satellite calls to the Moon to get the data.
I don't think I mentioned performance anywhere? 
I did in the comment you were replying to. The thrust of my original comment was not about code separation or isolation but unintended architecture artifacts.
it's not readable that way. especially on mobile. I had to keep scrolling sideways. I'd say add a use statement for each example.
[removed]
I've had quite some issues getting this setup to work (especially when using the "Deployment Configuration" way) so I put together this tutorial (+ video) to give an up-to-date solution (using `host.docker.internal`).
Ah well, good point! Didn’t really have mobile in mind. The documentation was primarily targeted at desktop. Sorry for that! Hope this is better: https://github.com/delight-im/PHP-PrivacyPolicy/tree/readme-imports
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [delight-im/PHP-PrivacyPolicy/.../**e03157a706f95d7ed74904f3a7c1052b0a6865bf** (readme-imports → e03157a)](https://github.com/delight-im/PHP-PrivacyPolicy/tree/e03157a706f95d7ed74904f3a7c1052b0a6865bf) ---- 
Possibly also useful: https://github.com/DHager/docker-php-library-demo
&gt; This is why it is not possible to have real “zero-downtime deployment” when you have SQL migrations to run. And that's where I checked out. Zero-downtime deployment is still possible. You just have to be your strategic about it. Further, nothing about this article covers "at scale."
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_matthewesp] [Machine Learning library for PHP](https://www.reddit.com/r/u_matthewesp/comments/9545ey/machine_learning_library_for_php/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I tired all the popular editors like Sublime, Atom, VS Code. It were hard days in searching the tool where i can be more productive. I really did not like IDE but give it a try. It seems very useful even though i am still learning it. Many good coders love it and i am being understand why they do.
I am a little confused about project management in PhpStorm. I am working on WP plugins and when i checkout one from SVN - PhpStorm recommends me to add a root WP folder. How can i see only the project folder i am working on if added a full wp folder? Do i need to ignore the recommendations and add only current plugin folder and then configure install paths? How do you do with it?
looks interesting. Can you tell us what the intl extension is used for? 
Hmm a simple associative array instead of those huge switch/case constructs for translations would probably be * easier to maintain * more performant * be translatable with common translation software 
I alway have the root of my project be the root of WP. That way PhpStorm's WP integration works well. But I also don't work on generic plugins. Anytime I'm working on one it's for a specific site so it doesn't make any sense for me to isolate it. You could just load the plugin directory as the project but you'll lose any function autocomplete.
"You could just load the plugin directory as the project but you'll lose any function autocomplete." - even though if set up install paths to wp root folder?
Nice to hear a near NetBeans is around the corner. I haven't tried it, but I have been using NetBeans for at least 8 years. It has good PHP support, but the thing that I like most its its versioning history. The GIT visualization between different versions is amazing. Very easy for me to determine what changed in a file and write accurate commit messages. Also makes very easy to see what changed. I just haven't found anything out there that compares with it. The things I don't like are it consumes a massive amount of memory and can at times be a bit sluggish. Not sluggish enough for me to ditch it, but it would be nice if they would address performance more. As with anything, I'd need a very compelling reason to leave NetBeans as I am comfortable with it. I've heard great things about PHP Storm, but I just don't feel like learning a new piece of software. As for sublime-text, I use that for writing SQL, dumping large JSON data into, and macro's for automating various things. But it's not an IDE. I just need more and I don't mind kitchen sinks.
How is a hobby "doing it wrong"?
Make an interface and make your code depend on that, then implement it on your clases. Or with composition, which might be cleaner. 
I’m no OOP expert, but I’m not sure I agree with the bit about “final” classes. Isn’t the whole point of using classes to have reusable, extensible code ? What is final in this version of the app may be extended next release. In my view, final should mean a class that MUST not be extended, ever. It’s a warning to stop bad programmers from reinventing something that needn’t be. 
Thanks! Well, the dependency on the `intl` extension may not really be justified because it’s indeed not used that much. Only its `IntlDateFormatter` class is used to format dates in subclasses of `HumanPrivacyPolicy`, i.e. `EnglishPrivacyPolicy`, `GermanPrivacyPolicy`, etc. So if you decide to extend one of these classes, or implement a new one for another language, you may decide to implement the `formatDate` method in a different way and the dependency can then be dropped.
Good point! The organization of the translations may certainly be up for discussion and could be changed. Fortunately, it could probably be changed without much hassle. Regarding your specific points: 1. I don’t see how a huge associative array would be any easier to maintain than a large switch statement. It’s basically the same structure (to human eyes, at least): a key followed by a value. 2. Neither is much more performant than the other one, I’d say. And it would probably be a micro-optimization only, which isn’t worth it. But, of course, I would allow myself to be persuaded with actual data. 3. Gettext is the only translation format and software that I know for PHP. But I didn’t want to use it here in order to avoid that dependency. So I don’t know anything about other formats. If arrays are easier to import and export with existing translation software, I’d say that alone probably justifies the change, right?
I know it's easy, but you shouldn't /u/mythix_dnb has a good reason why you [https://www.reddit.com/r/PHP/comments/94zxlf/negative\_architecture\_and\_assumptions\_about\_code/e3p4bok/](https://www.reddit.com/r/PHP/comments/94zxlf/negative_architecture_and_assumptions_about_code/e3p4bok/)
If(!empty($var)) :)
&gt; I've learned over time to "do nothing" in my constructor; just to accept constructor arguments and assign them to properties. Depends on the situation but I would say it's better that an object should setup what it needs to in the constructor (or factory method etc etc) or fail loudly. Generally an object that controls some kind of resource will need to acquire or initialise that resource. Limiting constructors to only assigning params means the object will likely need a "setup" function and therefore can be in a state where it exists but is not yet properly initialised which can lead to confusing bugs. One guarantee that is very useful is that if an object exists, then it is correctly and successfully initialised. I.e. [https://en.wikipedia.org/wiki/Resource\_acquisition\_is\_initialization](https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization)
Good point! thanks
It is very reliant on the old school dump and die method of debugging that is mind numbing awful.
For me I always ensure my functions are - very small - do one specific thing at one time - ensure output is expected and not throwing anything unexpected - ensure it should throw error if input is unexpected. And unit test them. 
It's never enough. There are too many things out of your control to leave it be. Usually, try to make sure the variables are in the right place, and never, ever trust user input (Bobby Tables' mom will pay you a visit). 
I’m just making a bad joke. I heard this is a good way to check a value. My joke is more I just do it all the time and t drives me nuts. 
I believe the TDD and BDD is a good subject. There is no many developers know about it and don't apply it too. I started apply TDD in my life right now and it is really useful, if I know that before I have did that before xD 
Defensive programming is more related to the business logic of your application than to the language. Not trusting user input, proper sanitizing and other low level checks MUST be in your application and are usually mentioned in when talking defensive programing but it's best if you don't do those yourself because it is guaranteed that you'll do them wrong. Instead rely on well-trusted libraries or frameworks that take care of these checks and sanitization for you. (they won't be perfect but much better than what you can do on your own). Even Web Application Firewalls, which sit outside of your application can help reduce the chances of an attack, and when \*combined\* with defensive programming can give you decent peace of mind (emphasis con combined, is not a substitute). All of this to say that by using well known services/frameworks/libraries properly allows you to concentrate more on what your application \*needs to do\* instead of \*how it does it\*, so defensive programming becomes more of a business logic thing than the nuts and bolts of the code.
Code reuse can be achieved in ways other than extending other classes. Extending another class is a very tight form of coupling that leaves your own code vulnerable to breakages that stem from internal refactoring of the other code. You're usually far better off taking in the other class as a dependency through the constructor, and using its public interface.
I get defensive when someone criticizes my code.
In general I always try to make things fail as soon far up the chain as possible, and then NOT check at the bottom. So that means dependency injection and doing checks up stream so I'm not having to check every possible thing that might come into a function. Turns out to be less code in the long run, meaning less chance for errors.
Thanks for writing this tutorial. I’m going to give Docker a try tomorrow.
Assume the worst, be pessimistic :) For me in php specifically that means no mixed parameters/return types, no nullable parameters/return types, no associative arrays that are not meant for iteration. For starters. Defensive programming is not really language specific, but the loosely typed nature of php adds a handicap to defensive programming.
I think you are looking for [Extremely Defensive PHP](https://ocramius.github.io/extremely-defensive-php/#/) by [Marco Pivetta](https://github.com/ocramius). 
I don't know if this counts but I use a "data" object when accessing user input, reading files, using APIs etc. It does things like: - `$data-&gt;string('foo', 'default')` always return a string, if its not a string return the default - `$data-&gt;bool('some.array.input')` access a multidimensional array checking isset and is_array etc - `foreach ($data-&gt;arr('foo') as $value)` access an array again, but uses an `Iterator` that returns more data objects so you can `$value-&gt;string()` - has a bunch of other casts to `dateTime`, `json`, `decimal`, etc Basically it allows me to not have to write a bunch of `isset`, `is_string`, `is_array` checks when dealing with external data, and providing sensible defaults if the data is not in the expected format.
Upvote for Bobby Tables reference.
I'm not an expert in talks but as a listener I would like the presenters to talk from their experience and not necessarily what they googled up the day/week before. I can do that myself. This way they can safely present their personal opinions and insights, show some dangers and share specific, non-standard examples. 
Personally I think it is valid to have both public and public static methods on the same class, for instance an alternate constructor, sure you could have factories for that, however it is not strictly the same, a public static method can access private properties when working on self, a factory cannot. Unfortunately final classes does not work well with unit tests and mocking and phpdoc does not support a @final tag. 
You know that you don't have to use them?
What you call lazy I call productive. 
Whitelist all input that can be whitelisted. If it can't be directly whitelisted, make sure a subset of it can (i.e. only ASCII characters in a specific range). A large amount of PHP developers like to pass around strings for shit that should be constants (and enums in your database) identified by an integer in input.
Exactly the same blog post I wanted to write last week. So easy when you figure it out, and yet I spent 1,5 hours doing it with all the various info out there.
It is really ridiculous that OP makes this assumptions, shoots his foot several times and thinks he's on the right track. 
It is good for the object to raise awareness about the issue but strictly saying that you shall always deep-copy is a bad thing, too. Objects are ALWAYS passed by reference - for quite some time now. This is something people need to know and truly understand before messing around with it. There can surely be cases where you'd like to change properties of those references. I.e. setting a "last_used_timestamp" property for whenever a car with a certain model has been put down the production line. This timestamp would have to be on the model and therefore would rightfully be present on both cards. The example, however, changes the models name (by reference) and that's something you simply shouldn't do... $car1 = new Car($model); $car2 = clone $car1; $car2-&gt;model-&gt;name = "foo"; // that's bull // vs. $car2-&gt;model = new FooModel(); // there you go boiii 
&gt;For me I always ensure my functions are &gt; &gt;very smalldo one specific thing at one timeensure output is expected and not throwing anything unexpectedensure it should throw error if input is unexpected. &gt; &gt;And unit test them This, start using php7.1 typecasting from the start. For example: ``` function getUserFromId(int $id): UserInterface {} ``` If you cannot return what the function is expected to return you throw an exception instead of returning `null` ``` function getUserFromId(int $id): UserInterface { if ($this-&gt;userWithIdExists($id)) { // Query and return. } throw new UserWithIdNotFoundException(); } ``` Writing code like this will remove all `assumptions` in code that should not even be there.
Perhaps get a sense of humor.
@manuakasam, true I will add a disclaimer stating that the article is not intended to not use clone at all but to raise awareness of its behavior. And yes, you should not change properties on objects by reference, but we all know that exceptions exist in all codebases specially in legacy and very old codebases ;)
Depends on how you use them. ```
I can get on board with that. Very responsible statement. Probably could do with featuring on the project README. The current statement is a bit, generic.
it's such a pain in the arse to get xdebug working on phpstorm with docker in linux. We managed it at one point but it involved lots of faffing about looking up ip addresses for virtual network devices and what not. Now I just don't bother. Would be great if PHPStorm could make it easier some how.
&gt;it's such a pain in the arse to get xdebug working on phpstorm with docker in linux I gave up after a few days worth of configuring and testing, something tells me it shouldn't be this hard and I was doing something wrong
nope, it really is that hard XD
Use recruiting agencies. And just apply. PHP developers are needed and well paid all over europe, mostly.
You won't change your mind, but here goes: Exceptions are different than gotos because they don't just allow you to change the flow of a program, but they let you store data about WHY the flow of a program changed. Sure, you could do this by setting global variables (and checking for them after every goto) but why would you do that when exceptions, tries and catches exist? Pretend you have a function that returns the cost of something in cents. Your return type (you are using return types, right?) is `int`. But how do you represent an error? Do you return a false? Now your `int` typehint doesn't work. Okay, maybe you could change the typehint to `?int`. Hooray, you now have a way of representing an error has occurred! But you've just caused two problems: * How do you represent the difference between an error occurring and something not having a price yet? A `null` return should really represent a lack of something, not an error. * How do you capture an error code, or log entry, about what went wrong? Should you start having global flags? What about if you refactor this function into a method and then set the error message as a property? If you're of the opinion that exceptions change the flow of a program, and therefore are like a goto, then every control strucutre is a goto. Switch statement? Ooh, that's a goto in disguise! Recursive function? Damn, that's a goto as well! I hope I changed your mind. FWIW, just use exceptions. They work well and trying to do something, and capturing some data about WHY the program couldn't do what you asked it, and not bastardising your typehints. They were created by smarter people than you and I.
For me, defensive programming is when someone who hasn't programmed in PHP since v5.2 comes around and says: why is this app done in PHP? We should migrate to Ruby. Then usually a quick chop at the throat ends the conversation. Bad thing is I often have to leave the city and find me a new job.
My ElasticsearchRepository looks alot like yours. But I use an interface, more typed functions, and I index the scheme by Y and m ($schemeBasename = $this-&gt;scheme . '_' . date('Y') . '_' . date('m');).
Hey, gudgip, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
I mostly agree. I use thrown exceptions on major issues and then use the “finally” blocks to handle cleanup. With minor issues, I don’t always. Unless I’ve not thought of a use case, returning false in some cases seems perfectly acceptable. For example: $user = $this-&gt;user_model-&gt;get($uid); I would return false if the user was not found since the only positive case is when $user is returned as an object. My reasoning is that it’s not an Exception; it’s an anticipated case of false. I don’t care what the reason is because I *know* it’s because there’s no user with that UID. It’s the only possible failure. Happy to hear arguments against this approach though! Always keen to learn how to do things better!
This is spam.
Getcha. I latched on a different part of your comment, not the part about performance. But the essence is the same, isolating dependencies is obviously done in code via certain mechanisms as I mentioned, but you totally need to make sure of their quality and that they aren't doing anything crazy with your data. Not just performance-wise, but potentially pinging home with your sensitive data in tow.
&gt; Unless I’ve not thought of a use case, returning false in some cases seems perfectly acceptable. But this means you can't typehint your methods. The typehint `?User` is perfect (assuming you are returning a `User` object). It gives future developers (including you) a good indication of what you can expect back. &gt; I would return false if the user was not found since the only positive case is when $user is returned as an object. But a lack of something isn't falsey, it's nully. Null means there is nothing whereas false means it's not true. If I'm asking the codebase to get something and it can't get that, it should return nothing. Check out this SO question: https://stackoverflow.com/questions/175532/should-a-retrieval-method-return-null-or-throw-an-exception-when-it-cant-prod &gt; I don’t care what the reason is because I know it’s because there’s no user with that UID. It’s the only possible failure. There's loads of possible failures. Table is locked. Database server is offline. Foreign key constraint problem. The callback that also loads the user's avatar from S3 is broken.
Learn a PHP framework like Laravel and/or a CMS like Wordpress. That will build on top of what you already know rather than making you start again.
A front end framework can be useful. That being said, it's never a bad idea to learn other languages that pique your interest. 
If you’re looking out of the web develoment, learn Python or Java or something similar. Learn the fundementals and learning a new language afterwards will be piece of cake. If you want to stick to web dev, try frontend development on Vue, React or Angular or learn another backend stack, such as RoR or Python with Django, Java with Spring, etc.
I stuck with pretty much only PHP for 19 years. Always hated JS because I never took to the time to sit down and learn it properly. Now that I have this year (along with TypeScript), I'm already preferring it over PHP after only a few months. For webdev, you can't really go wrong with learning more about JS in general. Even even outside of webdev JS/TS is starting to be used for all sorts of things, including desktop software and mobile apps in the form of PWAs + React Native etc. You can even use JS inside postgres. Using JS for everything also lets you do some interesting stuff like using Next.js/Nuxt which let you do "universal rendering", i.e. you can render stuff server-side with Vue or React and have the interactive functionality continue working in the browser. And changing whether something gets rendered server-side or in the browser is as simple as moving the `&lt;no-ssr&gt;&lt;/no-ssr&gt;` tags in the template. This means one language (JS) and one templating system (Vue) for everything. I was set on using React, but I think Vue is going to largely take its place over the next few years. tl;dr: learn Vue and take the time to learn JS at least at well as you know PHP. You can use JS for pretty much everything, and that's what I'm doing from now on. 
I think this is wrong. The clone result is the expected result both according to documentation and semantically. If I clone a X1 car, I obtain a second X1 car. Now if I alter the model, I'll alter it for both cars. And if I wanted another car with a different model I should create a method for that. 
I highly recommend to watch: [https://www.youtube.com/watch?v=T49El1hudY4](https://www.youtube.com/watch?v=T49El1hudY4)
If you had a burnout, I'd recommend against learning a new language purely for the career opportunities. Focusing on your career too much might simply lead to another burnout. Pick something you'd like to try just for fun - doesn't matter what language / framework it is.
Agree with you regarding the documentation, regarding the semantically I disagree. In real life, if you clone a car you get two cars but they don't share the same wheels, doors, lights they will work independently from each car right? So if you clone an object you might expect that if you change an inner property of an object it does not affect the other. And this is not that clear in the documentation ;)
I understand what you are saying but then your example is pourly chosen : in this case my cloned car wouldn't share the same wheels but in fact they would be sharing the same model. Then as mentioned earlier, it's been a long time since object are passed by reference. If you want to change this behavior, feel free to override the default method.
Not to leave you hanging, but I was correct, and it's already listed as a bug: https://bugs.php.net/bug.php?id=76374
There are job markets for different languages such as C#, js, Java and PHP. The size of each depends on the location. Continuing with PHP, learning a framework like Laravel and a js-framework like Vue like people have suggested is a good idea. But I also would suggest that you learn C# as well. A lot of (old) PHP-code suffers from really bad design and software architecture. A lot of C# projects focuses on easy to read, well written OOP code. It's a good combination.
そうです。日本語はPHPデベロッパーに有用な言語です。
aaah good old google with their useless versioning scheme
also the price tag
&gt; but it explains what is going on. so you use exceptions for control flow... this is what is meant by "enterprise level gotos"
There's no jobs in October or Bolt. I agree WordPress is terrible, but it's a place to get your feet wet while learning an OOP framework like Laravel.
I'm sure you do see that this is /r/php, just keep in mind that you'll be down-voted into oblivion if you say JS &gt; PHP. We all know that is bull, especially well written PHP is vastly superior considering what you can do with it's object model from traits to interfaces to abstract classes etc.. some things missing from php are async/await, but not if you use ReactPHP.
Interesting concept but I'm not seeing any evidence that the generated agreement has been reviewed (and perhaps "certified") by any independent third party. I'd personally be very hesitant to use something like this without at least one independent opinion. The stakes are just too high.
Doctrine Migrations does run the migrations in a transaction, allows you to rollback and can be executed before hand as well :) . However, some SQL statements can't be done in a migration (and it depends on the SGBD), which means that you can't always be certain you will have zero-downtime deployment.
Or simply just do the right thing according to ownership: * shared: no need to clone a reference aimed to be shared * exclusive: a reference aimed to be exclusive to its parent must be cloned before being assigned to another parent
Absolutely true, learning a front-end framework like vue, react of angular.
Agreed. Another example of developer desires conflicting with business requirements. Just been through a WP project recently. After working with Magento 2 and Laravel. Was painful to say the least. 
PHP is popular when it comes to websites that use it, but not necessarily when it comes to jobs that are hiring. Learn Laravel as it’s the most popular PHP framework but also learn a front end library like React which is currently the most popular. As you become familiar with JavaScript learn about node and you will begin to develop a broad base of skills that can help you begin taking the next steps in your career. 
Thank you! What do employers usually seek on your github?
You need to know the language to learn all other languages by.
LOL!! awesome how I get downvoted, but I convinced someone to spend some time giving some useful advice. Anyways, yes, I can see all of your points. But to my understanding, TS doesn't work still in nodejs w/o a transpiler, `ts-node` is basically an inline compiler for your typescript application code. PHP is not, there is zero need for that. Yes, I do understand the usefulness of interface objects within TS, I've worked with it before, it basically can throw warnings/errors when not all object names are present when assigning say a collection of objects when some data is missing from an xhr call. TS is a nice language, It's just not a "standard" but a super-set of es6. It's more of a meta-language with an interpreter &amp; lots of linting / analysis on compilation.
Contrary with what /u/marcato15 said I would not suggest for you to learn React. First you should figure out what kind of developer you are or rather what you want to be! Do you want to do lots of business logic stuff and build the power house that manages the things that users see? Then you'd likely be a backend developer and (sadly) I have to agree that learning Laravel might be the best thing for you to do in this case. It's easy to get into, quite powerful for fast development and there's super many resources out there. Once you know Laravel quite a lot I would suggest to check out Symfony and Zend Expressive as well. Both of them are arguably more powerful, despite more complex and less rapid'y for development purposes. If, however, you think that frontend is very interesting and that PHP stuff is just not your forte, then I'm afraid you have too many choices. Angular, React, Vue, even jQuery still are all so very popular and they are fairly different in all cases. Frontend development is vastly different from company to company. And if you like both aspects, then you're probably a full-stack-web-developer and you'll have to make all those choices for one job. If you really want suggestions. Learn Laravel, become great at it and search for a job. Experience is what matters the most. Don't try and learn too much stuff at once. It is far better to be an expert in some field and just "know about other stuff" rather than knowing a little of all but needing help in all as well.
ElasticSearch guides are the best tutorials to understand full text search &amp; co
You can change your own mind by first understanding what each of those things are.
Yup. Work sucks right now -- cleaning up outsourced code, rarely building anything interesting. At home, I'm playing with machine learning. I don't have a goal other than to have fun. Blog that inspired me: [http://aiweirdness.com/](http://aiweirdness.com/) Library I would recommend starting with: [https://github.com/minimaxir/textgenrnn](https://github.com/minimaxir/textgenrnn)
True. I was getting kinda desperate because most of the "solutions" either did not work for me at all or felt really dirty (e.g. manually figure the IP address out to set it as a hard coded value).
That was an overly simplistic example. Exceptions allow you to handle specific errors. If you're only ever going to have one error then exceptions are probably unnecessary. But, exceptions give your code a degree of certainty.
当たり前じゃん
I'm in the same boat - worked stupid hours for no overtime, hit burnout and lived in Thailand for 5 years. I'm back in the UK now and I had a look just out of interest and it seems most jobs want some kind of wizard who can do PHP, Javascript, Mysql, CSS, SASS, a Javascript framework (React, Angular or whatever people haven't randomly decided to hate on) and good knowledge in a whole bunch of PHP frameworks and CMS systems. Also subversion is a big thing now (which is a good thing). I'm surprised the juniors can get their heads around all that! I know most of those but I tried learning SASS and Javascript frameworks with composer and I just felt the whole industry had just gone nuts and didn't feel the motivation to get back into it all. Back when I was in the business there were front end developers and back end developers. Now everyone is looking for full stack developers and I could never get to grips with all the different technologies that need to be mastered for just a junior position. If your heart is set on getting back into it then here is a helpful list of some languages that you may need knowledge of: https://www.quora.com/What-should-a-real-full-stack-web-developer-know-in-2018
I can't speak for other employers, but personally a github is not that important when I hire someone. If I am looking at a github, it's going to be because they didn't have enough experience on resume - and in that case I'm going to be looking for knowledge of standards and completed projects more than anything. For instance, I'd rather see 2 repositories that are well designed, commented and properly implementing at least some kind of PSR standard that show a functional product than see 50 repositories contributed to constantly. What's more important than a github is the ability to communicate what your skill level is and demonstrate that you can learn how to do things you don't yet know how to. And, contrary to what /u/marcato15 said - if I'm looking for a good PHP developer, I'm going to be much less inclined to hire someone who spends a lot of time with front end javscript libraries - it's likely their knowledge does not lie in the skillset I need.
It's really not that hard. Don't know why people bitch about this. Angular 1 was deprecated and renamed into angularjs. All other versions of angular just use semver now.
Thank you, I see. I’m kinda confused why some jobs being offered requires Laravel and also they asked if the applicant has an angular experience or other js frameworks. Maybe they were looking for full stack dev. Thank you for advices I really appreciate it.
Well it's definitely a good thing to recommend people offload their emails through a message queue but rabbitmq isn't exactly a beginner's message queue. Anyone starting out on this I'd recommend looking at beanstalkd, redis or SQS. Enqueue is a great library so thumbs up for that. And I've already implemented symfony messenger component in a work project. Was a bit of a pain getting it to run with enqueue and SQS as documentation is still thin, but once running it's a pretty sweet system combining a message bus and a queue.
You should first ask yourself what sort of area you want to go into and then decide on the language. You should also be asking yourself why you got burnt out - if it's simply because you got tired of coding I'm not sure I'd advise heading back in.... although see comments below. For example, the Microsoft and .NET world is still pretty vibrant, but it's generally pretty separate to the Open Source stacks and used in a different context - more in-house and corporate. If you're interested in that area then the whole C# (or even VB.Net) plus MSSQL is the way to go, but otherwise there's not a lot of crossover. Good solid choice though. Java is very corporate at this point and requires a lot of time to get up to speed with the full ecosystem, so again is more a decision of where you want to go. Worth also considering is that there tends to be more Java programmers around as it was for many years the standard teaching language for CS students and standards are correspondingly higher. Python is different in that it's a Open Source stack. IMHO if you're primarily looking for something new to play with that can counteract the burnout then this is the route I'd take as Python crops up in all sorts of diverse places, it's still growing, and is sufficiently different from PHP you should find it an interesting challenge. There is fewer Python jobs around, but they tend to be more interesting and I think the mode standard of Python programming tends to be higher than PHP.
Yeah, even when you get it set up, it is very hard to set up debug configurations to debug through includes and MVC routers. Basically not even close to worth it, because it is much harder than debugging with var_dump.
Agree, but October is worthwhile looking at because if you do get the requirement to create a new CMS website from scratch - especially if the client isn't wedded to WordPress - it's a joy to work with, especially for something very custom.
Got it!
If you're not sure about where you want to grow further, try joining a company that has multiple languages and responsibilities in its stack and cross-functional teams with multiple languages. You'd be surprised how much you can learn just by being in such a team! Also you can try multiple responsibilities within the company to help you find something you like. Of course it should be a bigger and open minded company that will understand your struggles. If you're a good team player and know how to code, this shouldn't be a problem.
What an obnoxious website.
It's really not much of a departure to not use them. If you go to the facades documentation page, it has a table of the facades and their underlying classes https://laravel.com/docs/5.6/facades Just inject the underlying class instead of using the facade. That's the only thing you have to do to avoid them entirely.
It seems i have 0 knowledge how to setup a modern Wordpress development. I have googled various things over the few hours but i’m still not sure what is the right way to tackle this?.. I would prefer a composer setup, git for my version control and some form of deployment via ssh. This guide was the closest thing i’ve found: [https://deliciousbrains.com/install-wordpress-subdirectory-composer-git-submodule/](https://deliciousbrains.com/install-wordpress-subdirectory-composer-git-submodule/) but it was published almost 3 years ago. How does one use version control for Wordpress, deploy new features while keeping the live/local database in sync? Can anyone in here give me some pointers where to look?
I'm not a Wordpress developer, but I do work with agencies which use it as a platform. You might take a look at [Bedrock](https://roots.io/bedrock/). It seems to be a fairly modern and solid Wordpress base.
My teeth are sore from raging at his religious fervor for final classes and thus copy/pasting of huge swaths of code. There is a time for each of those techniques, but preaching the "only correct practice" for anything is a sign of both ignorance/naivety and a self-replicating virus of such. tl;dr: if I can't subclass something because the other coder followed some misguided rule of thumb, and a 5 minute fix snowballs into hours of reimplementation, refactoring and retesting, said coder will soon find their login, salary privileges revoked.
C++
Thanks! I'm not a Wordpress developer either. Have been developing in various php frameworks ranging from old school Codeigniter to the latest versions of Symfony/Laravel and front-end libraries like vue/react. But i'm forced to use Wordpress on this project and i'd rather invest some extra time to start off right..
Same as any other code base that you inherit that may have design issues or methodology you don't agree with.
&gt; But, exceptions give your code a degree of certainty. If we talking about java - then yes, in Java you need to explicitly define exceptions on interface level so it will be part of contract. As for PHP, I even consider that doing something like this: [$result, $err] = doSomething(); if (null === $err) { /* handle some error */ } is way better than trying to catch "non exceptional error" with exceptions.
Maybe it is you who not understand what each of those things are?)
We tried [Bedrock](https://roots.io/bedrock/) at work, and so far it's been a great starting point. Withe 4000 stars, 60 releases and 50 contributors it seems pretty active. We use Bedrock as the base structure, Docker, Bitbucket pipelines for CI, AWS Fargate for hosting, AWS Aurora MySQL for DB and AWS Parameter Storage for credentials and environment variables. In development we just use a simple docker-compose setup with containers for php-fpm and nginx (also used in prod) and MySQL and Composer containers just used in dev.
Please use /r/phphelp
Please use /r/phphelp
I would've preferred to see separate packages, so I could choose to only use Redis or something else more specific.
The way it may be more practical for you: What did you want to search for where you couldn't search or find what you're looking for. Lyrics is usually a good practice. But it can be anything: Hotels, flights, articles, you name it. Think of anything, look at what elastic has to offer and implement it. It's usually better than by 1:1 studying a tutorial. 
If you're thinking in terms of Web Apps (it sounds like you are), then Python and PHP are the most popular. Apparently, Ruby on Rails has the highest median income. If you're having a hard time finding a job, you could consider moving closer to a big city that has jobs. At some point, you have to go with your best option whether you like it or not.
In your example you only have one failure case, so you don't really need exceptions there. That's completely fine.
Right. So I'll inherit a code base that inhibits productivity by design.
This post is meta.
Composition over inheritance!
Good point, shared the link to YouTube!
*10,001
https://knpuniversity.com/ These are _great_. Most of them are publicly available (but the video may be restricted). Also worth the price.
Another recommendation I didn't see here is [Slim PHP](https://www.slimframework.com/). It's simple enough to get things running but you can also build sophisticated tools on top of it. The learning curve is not as steep as something like Laravel or Symfony and there are many sample boilerplate and projects out there for you to draw inspiration from. 
I work at multiple locations with different hardware. It’s easier for me to initialize a repository, pull the project/changes and install dependencies with composer. Dragging along a backup generated by a plugin seems cumbersome imo but to each their own. 
Fixed URL: [https://rollbar.com/blog/top-php-errors/](https://rollbar.com/blog/top-php-errors/)
I'm not sure RabbitMQ is much more complicated than anything else given than php-enqueue or other libraries usually tend to abstract the complexity anyway :) . I like it because of the management plugin which is really useful to monitor/administer the service. Thanks for the feedback!
Have you had the chance to tinker with timber?
&gt;There are several development best practices that can help you avoid encountering these errors in production. The first is to use a good IDE like [PhpStorm](https://www.jetbrains.com/phpstorm/) which can help you use and correct syntax while you are developing. This will help you avoid parse errors from getting to production. What's funny is how very few of these are actually syntax errors. Unexpected end of file definitely is, and that's their number one. Call to undefined method probably is as well, assuming you configured the IDE to use the autoloader and libraries correctly. So yes, you will possibly rule out two major headaches (more if we assume that many errors get caught before going into production where Rollbar sees them). But that's the bare minimum for error avoidance, and where most people stop. Meanwhile half of the errors are problems with the database layout and constraints. As far as I know, JetBrains is not quite on par with knowing which database you are connecting to and performing all the sanitation checks. Two of the errors are issues with other servers, which are definitely run-time errors. The foreach error is common, and possibly caught by the IDE, but is difficult if the traversable parameter has an unexpected value (e.g., call an API which is supposed to return an array of users, but actually returns false). &gt;a well-written application will handle them gracefully, such as by catching them and showing an error message to the user I actually code to assume that any input from a third party (library, API, Guzzle, the user) is wrong to begin with. I just ask myself questions like "Can this be empty?" or "Can this not be the value I'm expecting?" or "Does the user need to be logged in for this to work?" and figure out how to gracefully handle it. It helps a lot since I can guarantee what I know a value can't be before I worry about what it actually is. It also helps me flesh out the bare minimum of a front-end or function and compartmentalize my code, since I can mock up the "empty" page before the page with anything in it. This isn't fool-proof, obviously, but it has helped me write some better code overall. Just write assuming someone is trying to break your code. Also, it's easy to get trapped in a rabbit hole of "what-ifs" when figuring out where everything can go wrong, so I also like to spend that time to figure out if I can cleanly split the data into two possible categories of "Anything like this is wrong, and anything like this is right." &gt;Another best practice is to use unit and integration testing tools This is huge, but so hard to set up for small developers, in my experience. I find myself constantly wanting unit testing, but never wanting to prioritize. In the trade-off between writing unit tests for things that I know work (for now) or developing a new and needed feature, I'll pick the latter. It's a problem, and they're not wrong, but man it's hard to get over the hurdle of starting.
Given their goal is not to provide a useful info but just to advertise their product, it's no wonder the recommendation part is so blunt. 
Learn something that might make you think differently. For instance, Erlang, Clojure, or Haskell are all immutable and aren't inspired by Algol/C/Java/C# syntax nor their OO syntax. Even if you come back to PHP you'll be the better for it and it might make your PHP better too.
I concur with using a dedicated factory to create a 'copy' for a specific purpose. In my experience, __clone is one of the more prominent causes of bugs in projects.
View -&gt; Source. It's doing something, just not anything useful to a reader.
Why does not anyone recommend studying NodeJS?
PHP isn't exactly the best language to high-horse about type systems with. 
&gt;TS doesn't work still in nodejs w/o a transpiler, ts-node is basically an inline compiler for your typescript application code. And PHP just requires the PHP interpreter that first translates the PHP source into an intermediate bytecode. What's your point? &gt; I've seen TypeScript called this amazing language, and then many people using `let ObjectName: any;` littered all over the place. PHP isn't precisely a language to hold up as a gold standard if a language that can be written poorly (and often is) is the problem at hand.
[Hebrew](https://stackoverflow.com/questions/592322/php-expects-t-paamayim-nekudotayim)
Use properly your domain language.
Try [gettype()](http://php.net/manual/en/function.gettype.php)
That's another way, but it doesn't gain anything. if(isset($myVar)){ if(gettype($myVar) === "string") { ..do something } elseif(gettype($myVar) === "object") { ..do something } elseif(gettype($myVar) === "array") { ..do something } }
If you’re going to learn a second language for broadening your employment opportunities then my suggestion is look at a list of the top 15 most in demand programming languages and pick the one you feel most interested in. The motivation/inspiration is more important than how used the language is (beyond a certain threshold).
I think the hard part about AngularJS (especially pre-1.0) was that people weren't used to thinking that they. It was a real paradigm shift from jQuery
Besides the site not coming up, the source has normalize.css included like 10 times (I didn't actually count)
Is there any geolocation? Nobody outside the EU wants to see GDPR popups.
Yeah, WordPress is *so* commonly used that you really need to suck it up and get a handle on it if you don't already have a job in industry. Other alternatives I'd say that are actually *useful* in the job market are probably Magento 2, Laravel, and Drupal, so some background in Symfony is pretty useful- as they all use it to some degree or another.
No, there is no geolocation here. First, I don’t think it’s helpful or even required. Second, this can easily be built separately. This library does *one* thing, and that is generating privacy policies. Bundling geolocation would certainly be out of scope. Moreover, this is not about pop-ups. Instead, it’s about policy documents like this one: https://www.airbnb.com/terms/privacy_policy It’s entirely up to you and your business to decide if you want to show such a policy to everybody or to EU (or EEA) users only.
&gt; I was set on using React, but I think Vue is going to largely take its place I think all of the frameworks are settling into niches, and will survive. Vue is popular with PHP/Laravel development stacks, and not so much anywhere else. Ember redid their architecture to a virtual DOM / reconciliation pattern and is the dominant framework in Rails stacks. Angular seems most popular in microservice architectures, where the back-end is completely separated from the front-end app and might be built on Java, Erlang, etc. React is the dominant player in GraphQL-based stacks. If you haven't used GraphQL (Apollo/Relay), it is a huge improvement over RESTful APIs. My next stack to learn is Elixir/Elm. Both are functional programming languages, and Elm is also a framework. I've been working with Haskell for about two years now and it's been a steep climb for me.
I understand your feeling that you would wish for a certified product that comes with legal guarantees. But I don’t think this project can or should give such guarantees, even more so because it’s a not-for-profit open-source project. You might want to check the other comment here which is about the same topic. Nobody prevents you from doing your own review (with legal consultation). You would have to do that with any custom document as well, or just let your legal consultation write the whole thing. So regarding that “certification”, I don’t think I can let a single lawyer check this and then put a stamp or seal on this on GitHub which says that it comes with full legal guarantees and you are 100% safe with this.
I do! I love it.
Agreed. I like Angular 5 (and typescript) mainly because I come from a C# background. It took me two weeks to pick up Angular, but two years to pick up AngularJS 
Saw recently that someone was working on (a lot of it is done) converting the old Symfony 1 Jobeet Tutorial to a Symfony 4.x [version](https://github.com/gregurco/jobeet-tutorial). It's basically a walkthru of building up a complete app, and makes for a great reference. 
SF docs are amazing. Can get you through an entire project step by step. 
Are you inheriting a project done reasonably correctly? Are you inheriting a project done arguably poorly? Or starting a new project from scratch? If the first, read the existing code, try to set it up locally and use XDebug to step through it. If the second one, may the digital gods have mercy on you. (Been here more than once.) Still try local xdebug, learn how logging works (if that is even set up correctly) and how environments work and start adding lots of debug logging in a branch. If 1 or 2, install the Symfony debug toolbar profiler. https://knpuniversity.com/screencast/symfony/debug-toolbar-profiler The link above appears to be part 7 of a Symfony tutorial. If the third one, start from scratch with the docs and/or buy a book. (Recommend Laravel instead but Symfony isn’t horrible, it’s just more complicated to set up and get going IMO.) More: https://www.udemy.com/learn-symfony-3-framework-by-practical-examples/ https://youtu.be/HchMW8EhWPU
Learning frameworks would be more worthwhile. I suggest Laravel for PHP backend and VueJS for front end. These are hot frameworks right now. People don't really use jquery and no framework PHP like before
Have a look at the library's readme, the problem with `__clone` is explained there: https://github.com/myclabs/DeepCopy#overridding-__clone 
Thank you! Knew there where dragons somewhere in the mix. A bit like how I about once every 3-4 years think "Hey I wonder why I don't use pcntl_fork" then have a few bald patches where I've ripped hair out and a nice shiner on my forehead from the repeated desk impact by the time I stop that madness.
If you already know some Javascript, node is very cool. There’s a great tutorial on YouTube, https://www.youtube.com/playlist?list=PL4cUxeGkcC9gcy9lrvMJ75z9maRw4byYp If you know PHP but not Laravel &amp; Vue, learn that. It’s awesome and what I use - after 20 years of boring coding, it feels elegant and fresh. If you want to do mobile apps check out Ionic or Swift - they both rely heavily on Javascript and CSS. If you want to really challenge yourself, learn Golang and Serverless. Take some devops tutorials with terraform, Chef, Salt or Ansible, and learn AWS or Azure. Make a small project from scratch using all the proper patterns: test driven development (Adam Wathan’s Test Driven Laravel is top notch) and use Behat or Cucumber to learn automated user testing. 
You can write your own autoloader. Even using composer, you can introduce a custom loader for a specific path.
Project hasn't been namespaced properly, and/or namespace config is dodgy at composer.json You can try dump-autoload to work around the problem, but this sucks for development. 
&gt;You can try dump-autoload to work around the problem, but this sucks for development. What? Elaborate.
If namespacing isn't configured correctly, it won't find any new classes until you dump again. 
Good writeup, but your example is actually better suired for an optional return type. `?UserInterface` is less intrusive and conveys more information in this particular case.
&gt; In real life, if you clone a car you get two cars but they don't share the same wheels, doors, lights they will work independently from each car right? That actually depends on how you define the car. In my world, that would be just the frame; the wheels, doors, and lights would be separate objects that you would have to swap around between the two. Which is exactly how this works out of the box. 
Isn't that only if he uses classmap instead of psr-4?
Not for many years, and that code was before namespace support existed. Fixed by an appropriately janky chain of fallback autoloaders to guess where the class in question might be. 
You can have burn-outs with any of the languages above, if that's what you're after.
If your project is weird enough, you may not be able to rely on composer's autoloader, since it expects you to follow the relevant PSRs. But it works fine with your own custom autoloaders, so just do that. :) Call `spl_autoload_register` with a method that does something like: public function autoload($className) { $path = do_my_crazy_mapping($className); if (is_file($filepath)) { require_once $filepath; } } } And boom, now you've got autoloading. Now implementing `do_my_crazy_mapping` is a little more challenging, but worst case just make a giant static mapping file that turns class names into paths. :)
Have you tried google?
Without more info, my guess would be you’re getting false back from your query instead of a result, which generally means you have an issue with your query or data. 
Thx im gonna check that gonna try to put more info soon
You can add a namespace mapping to composer and it will be able to find the classes without namespaces. https://getcomposer.org/doc/04-schema.md#psr-4 Composer.json should be in git, so deploy might need a composer dump-autoload anyway.
typically this is something like misspellings in the query, for example "select name, emial ..." so when there is no column "emial" (should be email) then you'll get a mysqli bool error. Just check that the columns and table name all exist in your mysql.
React Native has a new competitor backed by Google - Flutter + Dart 2. Watch this space.
Don't get me wrong, I'm a huge fan on rabbitmq but the setup and maintenance of it is much more complex than simpler queues. For a use case of just pushing email sending to a backend process in my opinion it's way overkill. The need for a management plugin, which I agree is very useful, sets it apart from the others I mentioned. Beanstalkd you can install and run, start sending jobs to it immediately. A great beginner's queue. Redis works well as a lot of people could already be using it so nothing extra to maintain. And if you're using AWS for your infrastructure then SQS makes perfect sense. 
In London there are currently more Node.js jobs than Rails and Django combined.
I want to learn this, but I don't know what to do with it off hand. I think for my hardware hobbies I want to make myself use C++. It's so easy to use Python(assuming you're mostly including modules).
Can't composer do static class to file mapping if you really need it to? I could've sworn there was an option for it.
No it isn't.
You mean [dump-autoload](https://getcomposer.org/doc/03-cli.md#dump-autoload-dumpautoload-)?
Exactly, let me share a link demonstrating that: [https://medium.com/tech-tajawal/php-composer-the-autoloader-d676a2f103aa](https://medium.com/tech-tajawal/php-composer-the-autoloader-d676a2f103aa)
I would probably find this more "ridiculously simple" if it could be installed as a global Composer app without depending on jq having to be installed.
[nette/robot-loader](https://github.com/nette/robot-loader)
https://trends.google.com/trends/explore?geo=US&amp;q=Php%20vue,Node%20vue
Wow, I feel like a grandpa wanting to say when I was a boy composer didn't exists and we had to autoload 10 miles in the snow all by ourselves. If worse comes to worst just `require_once` all your files. 
Now this is all about personal preferences. Whilst demo projects are always nice and good here in the western world demo projects aren't even THAT relevant. In my case I used to be VERY active on StackOverflow and I was helping / contributing to zend-framework quite a bit. That was far more valuable than any side-project I could have done. If, however, you really want to show off, go with the stuff that really annoys people. File-Uploads, User-Management (Authorization), Moderation-Systems, all this kind of stuff. Don't build a full blown demo website, build small, standalone, solutions that may even become packages for your favorite framework if they are done right ;)
Why doesn't composer work? In our mess of a project we use; ``` "autoload": { "classmap": [ "api/", ] }, ``` We have to run `composer dumpautoload` everytime we add or change a file but it's better than writing your own. 
I understand your point :) . I'm used to RabbitMQ but I perfectly understand it is a complex setup and maintenance process. I will add a small word on Redis queues. Thanks!
No.
Have you heard of our lord and saviour Composition?
You have experience with PHP, try Laravel. A framework that is used alot and uses Symfony. 
Hey, oscarteg, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
(ノಠ益ಠ)ノ彡┻━┻
Thank you!
My take is that you are using the wrong language.
Pick up something for fun. I picked up Go and worked on a completely different project to my day job. Really helps you still be creative and feel accomplished rather than adding another endpoint, email function or UI change. My Go project is a CI tool, so completely different and I’ve really enjoyed some CI stuff I’ve set up at work. 
can't you just make your IDE run dumpautoload when you make a new file?
Blind loading from classmaps is actually faster than dynamic namespace-to-file lookup logic due to no I/O required to work out whether a class exists. When you generate an autoloader for a deployment, you might do something like ``` composer dump-autoload --optimize --classmap-authoritative ``` But this is crap during development as you create new classes.
Because new classes won't be on that classmap until you regenerate it. You will save yourself a whole load of trouble by correctly implementing PSR-4 autoloading and configuring composer accordingly: https://www.php-fig.org/psr/psr-4/ https://getcomposer.org/doc/04-schema.md#psr-4
I imagine you can, but honestly it might be worth either implementing PSR-4 if the project is already namespaced (which will probably require a lot of moving files about), or your own dynamic autoloader for development.
I have one project where each customer has their own webserver directory, but each of those has a maze of symlinks to a common code base. No front controller or even an ORM - every file is directly called and filled with raw SQL. It's all held together by a bunch of paths jammed in the session at login. Main developer is actively continuing the tradition and won't change, so I try to just steer clear of the project.
Note that the blog post links the user to \*\*packagist.com\*\*, which is \_not\_ [packagist.org](https://packagist.org). Be careful linking your Github ID to that unknown site.
Yes, kind of. I just use classmap on the whole legacy side of the app and I've been slowly fixing class name conflicts, most of them aren't urgent since the files are pulled in manually with "include" anyway. The harder part has been migrating from inline/global code and functions to classes. There's a balance between just making it work and overengineering / completely rewriting stuff.
pro tip: you can also write it as "composer dump" or "composer dumpautoload"
I'd quit the project. Life's too short, and there's too many good opportunities to deal with crap like that.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Symplify/Symplify/.../**ecs.yml** (master → 5f1fd1c)](https://github.com/Symplify/Symplify/blob/5f1fd1c5df7ad662f2b8c07c8ea5b6b3affc1bc5/ecs.yml) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e3tj0z6.)
Truth. This is especially important if the project is light on tests, as you can never be sure what you've broken it. PhpStorm can really help here to do these incremental code reorganisations.
Wordpress is written in PHP, but it's really its own thing separate from the rest of PHP development. The same goes for stuff like Drupal and Magento. Skills there aren't easily transferable anywhere else, and you will pick up a whole host of really bad habits when it comes to writing and architecting code. I would say definitely get into Laravel. It's easy to get started, it has a lot of really useful features too to cater for most projects, and more importantly, it's actual PHP development, although you will use a lot of laravelisms to begin with that can become bad habits you'll need to rid yourself of later on - stuff like facades for instance, but fortunately you can evolve off them when you start understanding more about code architecture. If you really want to expand further in PHP, get into symfony for a more neutral approach to development that will make you more versatile, but will have a higher learning curve initially. Work in desktop linux to become comfortable with the OS that will power all the apps you'll be writing. Something like Ubuntu or Mint are easy to install and use, and will make you learn how linux works in your day to day. Frontend is definitely worth getting into (react, angular etc), but it's a whole different ecosystem. I personally got back into it after branching into server side node and bringing up my javascript knowledge up to 2018 standards.
When I look at a candidate's github I don't care too much on whether they have any projects there, although it is useful, but I do take note of how they help the community, if at all: do they report bugs, do they send PRs, do they help diagnosing.
That’s what I feel too about WordPress, I wanted to get more deeper and more in depth in php. Im currently improving my OOP Php and will proceed to Laravel after that. Also building my Git portfolio. Thank you for the advice!
&gt;But is there a standard or a preferred way to instanciate the service from a psr-container ? PSR-11 is about \*retrieving\* things from the container, but not registering things. There's currently some reflections about interop service providers but not much progress on this topic.
Mate, you got the Mordor of software projects right there.
Of course, best of luck and have fun learning new stuff.
Yes, I understand better now. that would be super useful... hope something in the future.
Anyway you are on the right path by providing factories taking a PSR-11 container as parameter.
what's wrong with unserialize(serialize($obj)) ?
\#### About Rsync is a pure PHP 7.1+ dependency-free wrapper for rsync client. It provides you a simple way to abstract from command line control rsync right from php. Library uses PSR-4 autoloader standard and always has 100% tests coverage. There is no need to tell about rsync, except the fact that php doesn't has any faster or equal built-in way to upload files to remote server. Library supports whole bunch of options and parameters implemented in rsync client version 3.1.2 \#### Why Rsync? 1) It is small and fully covered with tests 2) It is well documented 3) I'm eating my own sweet pie=) 4) Supports whole bunch of parameters and options of rsync and ssh 5) Easy to use 6) Works on Windows (ofcourse id you installed ssh and rsync clients for Windows) \#### Requirements \- \[PHP\]([//php.net/](//php.net/)) 7.1+ \- PHP config \`variables\_order\` must contain \`E\`, 4ex: \`variables\_order=EGPCS\`. Otherwise you will have to manually specify absolute path to rsync and ssh binaries (at least on Windows) \- rsync client 3.1.2 +
Nice project, coincidentally I was asking for reviews about a wrapper too. I'm quite curious about cli-wrapper approaches and we seem to have some similarities... If you're interested to discuss the surface api or share experiences let me know or see https://www.reddit.com/r/PHP/comments/95lsn9/sharing_thoughts_and_ask_for_comments_on_writing/. Keep up the good work !
In my last library I use clone and found I had no need to "deep copy". In other words - just understand what `clone` does and override `__clone` only when you need to.
It's not a tutorial, but I've found this to be invaluable in my ES work: [ElasticSearch Playground](https://www.found.no/play/) I use it all the time when I'm tweaking my analyzers - one caveat though, the "Run" button doesn't work. You have to hit ctrl+enter instead.
&gt; One other piece of advice is to avoid static methods and factories as they have fallen out.... Interesting: static methods we are in agreement... factories is another story (see as an example [FFProbeConfigFactory](https://github.com/soluble-io/soluble-mediatools/blob/master/src/Video/Config/FFProbeConfigFactory.php) and [FFProbeConfigFactoryTest](https://github.com/soluble-io/soluble-mediatools/blob/master/tests/unit/Video/Config/FFProbeConfigFactoryTest.php))... Testing is fine. (see also the use of the __invoke() method... found in zend-expressive). &gt; Providing a roadmap with consistent versioning right out of the gate helps clarify the project goals I'll try to make up my mind soon ;) For version I'll try to reach 1.0 as soon as possible. Then semver. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [soluble-io/soluble-mediatools/.../**FFProbeConfigFactory.php** (master → d597438)](https://github.com/soluble-io/soluble-mediatools/blob/d597438b4e3268bc548f5dea38704575277ff046/src/Video/Config/FFProbeConfigFactory.php) * [soluble-io/soluble-mediatools/.../**FFProbeConfigFactoryTest.php** (master → d597438)](https://github.com/soluble-io/soluble-mediatools/blob/d597438b4e3268bc548f5dea38704575277ff046/tests/unit/Video/Config/FFProbeConfigFactoryTest.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e3ttgxz.)
thanks @OeRnY
thanks @kokocok
thanks @gudgip
https://i.kym-cdn.com/photos/images/newsfeed/000/397/625/be7.jpg RTFM
Sorry bro 😂😂😂
Just to add my two sense... Whether you are a WordPress or PHP, Java or even a C# Developer, you’re still a Developer. Taking the time to master HTML and CSS is a requirement 99.999% of the time, as it is an expected skill. I highly advise you to not neglect these. You don’t have to master WebPack, Grunt or Gulp, but you do need to be competent with HTML as a markup and CSS as a presentation layer.
Question: why not just use the Symfony Process component and use rsync directly? Does this library have some advantage?
Or why not use phpseclib to create SFTP connections and just drop files with it. Phpseclib is pretty widely used too. Is there an advantage to rsync?
Watched the sources rapidly - rsync seems to be way faster about download/upload speed. *not sure*
1) symfony's component consists of 17 files you have to load each time you uses it. It's mase so complex to cover all the platform differences and bugs of PHP 7-. xobotyi/rsync uses proc open which works the same for all platforms and has no bugs as i know since 7.0 released. 2) xobotyi/rsync has a human readable configuration that can be easily changed on the go.
People are still using HHVM?
mysqli is a php extension. Exactly how you go about installing and enabling it will depend on how you've installed PHP. Please specify the operating system (including distro and version) and your PHP version. Also mention if you used any non-standard package repos when installing PHP. If you're using Linux, consider consulting your distros documentation / wiki and/or forum / chat channel as they'll be able to tell you the commands specific to your distro.
Mac users 
sftp is nothing like rsync except they both transfer files.
This is so hilarious that I wouldn't even report it as spam :)
thanxxxxxx
Why is this being asked on this subreddit? Regardless, the XML obviously has some error in it. You’ll have to open it in a text editor or code editor and hunt it down.
Yeah I know, I'm using it now but it's some legacy. We have to regenerate it every time.
Please don't!!
&gt;API: I'm more an more convinced that exposing **"immutable style api"** (the -&gt;withXXX()) instead of fluent interfaces is a good practice. See [ConversionParams usage](https://soluble-io.github.io/soluble-mediatools/video-conversion-service/#parameters). But I realized that when you're used to fluent, is very easy to get confused. I'm wondering if what's your experience about this ? So this is where I believe you're confused indeed. While immutability is a great thing you're kind of using it for the wrong thing. One rule of thumb is: **An object should be usable after it's being instantiated.** This is not the case in your Parameters-Example and that **is** a bad thing. Now you might want to argue this way: &gt;But I want to force users to define options. I want them to think. I do not want to enforce my preferred default values onto them And that's a good thing! However, the way you did approach this is by having an object that cannot be used. How would a user know how many Parameters he would have to set? That's pretty much why constructors are still a thing. Let me dissect your Params a bit and give you my opinion: public function __construct($params = []) This is something I'd rather not do. You don't let people know what params there are. Build a full fledged constructor like this: public function __construct(string $videoCodec, string $audioCodec, string $this, string $that) This is much clearer to the user as he wouldn't have to look at the class itself. Now this is better but if you wanna be really fancy about it and want to give the user less forms of error introduce ValueTypes public function __construct(VideoCodecInterface $videoCodec, AudioCodecInterface $audioCodec, ThisInterface $this, ThatInterface $that) And people will be able to make very nicely readable constructors where you can be super damn sure that there's no typos, too $params = new Params(new FFMPEG(), new MP3(), new This(), new That()); Now having the constructor like this is already a pretty good thing but it also makes it difficult to tell the user what's actually required. Some users might want your preferred default values because they just want to test what your lib can do without studying the materia too much. And this is where you might want to think about protecting your constructor and have named constructor. This is a **great use for static functions!** Write your \_\_constructor() in a way to set values for all of its properties (they may be null, but allow your constructor to set them!). private function __construct(A $a, B $b, C $c, D $d, E $e, F $f, ?G $g, ?H $h, ...$allTheArgs) Note that I even allowed some Parameters to be optional - you may even make all of them optional at this point, but only if the constructor is private! And now with this thing in mind you create named constructor for desired usecases, i.e.: public static function withDefaultValues() { return new self(new FFMPEG(), new MP3(), null, null, null, null); } public static function with4kPresets() { return new self(new Super4KCodec(), new MP3(), null, new SomeAdditional4KSettingHere(), null, null); } public static function withMobilePresets() { return new self(new H265(), new MP3(), null, null, new AwesomeMobileSetting(), null); } Kind of like this, I assume you get the idea. This way users have a much clearer entrance point to your library. And THEN you still are going to have your immutability thingy going on and users can create the object they want. $params = Params::with4kPresets()-&gt;withAudioCodec(new LosslessAudioCodec()); That, I would argue, is very clean design and your Parameters-Object would always be in a usable state generating less errors both for the users AND yourself. And to end my post far less ranty: it's great to see a developer putting a lot of thought into building something. You're on a great way!
Same!!
Hi bro ! What you want to say ?????????
Is the thePHPzilla license compatible with the GPL? I don't see it on their list.
1998 called and it wants it’s VBS back. Didn’t they threaten to remove the vbs runtime from everything after 7? You should look into modern libraries. Symfony is a personal fave
&gt;what does it mean ???? i don't understand :(
&gt;"thePHPzilla" offers open source development solutions that is available and anyone can be modified it as per his need. If you used code as it is then must give credit to "thePHPzilla" You need to grammar check your header text for starters.
okay bro ! thanksssssss
`hi&amp;nbsp;mom` would actually be `hi&amp;amp;nbsp;mom` if it were processed properly. How are you expecting help without any insight into how your XML is created? on a wild chance if it were a case of using DOMDocument, then: instead of... $node = $dom-&gt;createElement('node','hi&amp;nbsp;mom'); $root-&gt;appendChild( $node ); You would do... $node = $dom-&gt;createElement('node'); $root-&gt;appendChild( $node ); $text = $dom-&gt;createTextNode('hi&amp;nbsp;mom'); $node-&gt;appendChild( $text ); As the second parameter of createElement() does not escape your text like createTextNode() does 
Really appreciate such a detailed answer. And kudos to /u/belgattitude for a well formulated post. These kinds of discussion are why I come here :)
A few things after a quick review of the example. No class name needs to contains "service" your ConversionService is a "Converter" and your "ThumbService" is a "ThumbnailGenerator" to follow SRP your class has one job to do so you can try to name it this way: My class has the responsability to do "..." so it's a "..." If the term is too wide try to specialize it "Converter" -&gt; "VideoConverter", convey as much meaning as you can to avoid confusion. Put yourself in a position where someone reads your code for the first time and have to guess what a ConversionService is able to do. As said by others, your constructor should be the single point of injection and every parameter should be listed here. If you frequently need to instantiate your object in a certain way go for static methods but don't abuse it. If logic needed to instantiate is more complex than simply settings some properties value, go for a factory pattern or the builder pattern (which you try to mimic through your Params object btw) Put your string that represent values you could consider as enum, at least in constants so it's easy to find them and if a codec change its name for example (even if it probably won't everhappen I admit) you'll only need to change the constant value. Video codec supported is a finite list of values, there's no point trying to start a process with a "x" codec for example that's not supported. Test the values against the supported codecs and fail fast, as soon as you can and throw the most understanble errors eg. "the codec x is not in the list of supported codec : your, list, of, codec" 1 About open source library I recommend https://github.com/thephpleague/skeleton as a skeleton. 
Oh what? Really, that's actually pretty useful. Thanks for the Tip
It's a slide deck built with HTML (instead of something like PowerPoint).
right, may be subtree split. this however is intended to be a thin wrapper around limitations of phalcon and is designed to be used as a whole. since it is plug and play kinda thing with modular design, the user can still control what to utilize and what not.
I’m pretty sure that PHP 7.2 outperforms HHVM, so it surprises me too that someone would use it.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [trafficgate/transferer/.../**RsyncTransfer.php** (master → 7cad295)](https://github.com/trafficgate/transferer/blob/7cad295d2eb791fd0e8380521b5deec780a74574/src/Transfer/RsyncTransfer.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e3uvs5w.)
Take out your phone and say "OK Google, Install mysqli" 
The paper is from facebook research, and they are using HHVM. The blog simply reviews the paper from facebook.
&gt; Factories is another story Gotcha, I get the names mixed up sometimes. Did I mean “facades”? Use easy-to-test code structures. You get it.
Facebook is and they now have JIT which won't appear in PHP until version 8.
Why cant you place NEW classes into PSR-4 directories for automatic discovery?
The code for that is killing me, would think it was written in php 5.0
Thank you
You don't see an "include" folder much these days.
Help questions should go in /r/phphelp in the future. The problem is the format your using for date('I',...) isn't understood by strtotime(); strtotime('Aug 07 2018 08:00:PM'); // 1969-12-31T19:00:00-05:00 Try not to switch between timestamp (integers) and strings too much. Just use timestamps, until you need to format them. OR Just use the DateTime class.
Knowing how to use a debugger (like xdebug) is the best way I know of to become familiar with foreign code. You can just step through the code base from start to finish. I always like to start fixing bugs on a new codebase. I can step through various parts of the system and begin to piece it together.
Have your intoxicant of choice close at hand.
Noted, on /phphelp, and happy cakeday! This structure worked forever, and that was like the fourth formatting change I'd tried after the function stopped working. I wonder if the update to PHP on our server changed it. Thanks for the DateTime class suggestion. Fixes the issue entirely. $d = new DateTime('2018-11-08T00:00', new DateTimeZone('GMT')); $d-&gt;setTimezone(new DateTimeZone('America/New_York')); print $d-&gt;format('Y-m-d h:i:A'); // returns 2018-11-07 07:00:PM 
I read this article few months back
The MQT Engine Discord server needs more developers knowledgeable in MATLAB! We're a large, friendly group of technological problem-solvers just having a good time learning, chatting about our projects, and helping each other out. We're always looking for new friends, mentors, or students, and hope to see you there!
An obligatory weekly "join our best discord server" post. 
Hmm, r/PHP doesn't seem too friendly. Oh well. For the record, this isn't spam, nor a bot. I'm one of the people on the server. Also, if there was a new Discord server every week calling itself "the best", why would 50 people have joined in the last two hours? Anyways, have a nice night.
IMHO the basics for a good defense come with the least amount of code and APIs to defend. * Keep interface surfaces small. * Keep complexity low at all costs. * Keep indirection low. This would also assume that no extra code exists for defensive programming. 
No, we were just hoping that some people experienced with PHP on here would join our community to help others get familiar with it. I read your rules before posting; this isn't self promotion. It could help your community too. Didn't mean any ill, and hope you see what I mean,
Your activity on Reddit is nothing but spamming a lot of subs advertising your server. So telling us it's not a spam is a lie. 
&gt; do not advertise This is a professional subreddit, for professional PHP developers. Not beginners looking to learn. You're be far more successful in /r/phphelp.
Thank you mate 👍
https://i.imgur.com/DK1ckG8.png 
Had to read at that resolution, but looks like the double quote just before name= should not be there, it is closing the echo
Thank you mate. Do I have to just echo out the status in the Javascript parsed body? 
It depends on the use case though. If you are making changes to that variable in the ajax file and then want to replace the data in your dom as well, you can just return that variable from the ajax file. Then you'll be able to do manipulation with the output data in JavaScript itself. For returning the output from php ajax, look into json_encode. Though there are other methods too, this one is good if there are lots of outputs from the ajax. I am not sure if I got your use case. But tried to explain.
&gt; For the record, this isn't spam For the record, this *is* spam. You've posted ~40 similar message to numerous forums over the past day or so. The posts have no value other than advertising your forum. 
You really shouldn't use mysql_query but mysqli or PDO instead
Disclaimer: there are paid plans, hopefully that's fine with the subreddit's rules. The tool is free for open source projects though and I've been using it for some time on my projects. Internally it uses Laravel Spark as well as [Bref](https://github.com/mnapoli/bref) to run on AWS Lambda. I plan on writing a detailed article at some point explaining how it works, but if you have any questions about that I can answer them here.
&gt;Are there actually people interested in such a service in a non open source situation? Unfortunately yes. I say this over and over here on this sub and a few others it just boggles the mind that people keep locking themselves in to proprietary systems for something so vital as a project build process unless it's easy to move away. Which in a closed source proprietary set-up it very rarely is. Laravel Forge is a good example, people building their entire project infrastructure using a closed source tool, it's just madness. In this case I just don't understand it, yes you're not locked in because anyone can run a linter or sniffer for free. Then that's why I don't understand it, if it's so easy (and free) to set-up and many build systems come with it built in anyway I just don't see the point in it.
Yes very interested indeed... Just went through your code and tried to figure out how you solved some problems I faced... The ShellCommand/ShellOption looks an happy couple. Just to share, I took a slightly different approach, setting constants in an [ParamsInterface](https://github.com/soluble-io/soluble-mediatools/blob/master/src/Video/ConversionParamsInterface.php) and let an [Adapter](https://github.com/soluble-io/soluble-mediatools/blob/master/src/Video/Adapter/FFMpegAdapter.php) interpret them in regard of the ffmpeg support (could be another adapter implementation: libav...). But I must say your approach is very interesting, especially the way you document and set the options and their definition at the same time inside the constant, the [ShellOption::parseFlag()](https://github.com/trafficgate/shell-command /blob/1a5f3fcf689f33098b192c34839effe309202c0e/src/ShellOption.php#L296) looks a very smart idea. I could not think about it. Nice ! I'll take some time later to read the code... but I went distracted by things like 'the difference between 'self' and 'static', as I saw you're using the later'... ;) In ShellCommand, in my opinion, it should be possible to set the params through the constructor. Just to share back. Thank you for sharing. I'll definitely keep it in mind !
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [soluble-io/soluble-mediatools/.../**FFMpegAdapter.php** (master → abadeb0)](https://github.com/soluble-io/soluble-mediatools/blob/abadeb0e7d762306f98d0c03a2c90625dc10fbc3/src/Video/Adapter/FFMpegAdapter.php) * [soluble-io/soluble-mediatools/.../**ConversionParamsInterface.php** (master → abadeb0)](https://github.com/soluble-io/soluble-mediatools/blob/abadeb0e7d762306f98d0c03a2c90625dc10fbc3/src/Video/ConversionParamsInterface.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e3vjwoz.)
As you've realised, as soon as something is in the DOM, it's editable by the end user and should thus be considered insecure. Should the status field actually be available in that page? Additionally, if you use secure/httpOnly cookies, then your javascript will not be able to access the session data unless its placed into the DOM. Best bet, is that if you aren't changing something on a page, and don't need it to be submitted back to the server, then don't output it anywhere, or if you do, don't rely on it being accurate when it comes back from the user.
Setting up build servers and jenkins/drone/etc. can be wasted developer time. In my previous team we spend so much time maintaining Drone and Jenkins just to run phpunit and php-cs-fixer… (updates, scaling workers, setting up webhooks, etc.). And developer time is worth much more than a few dollars per month.
DateTime, as adragons has already said, is the best way to handle both timezone and DST issues. Doing anything with those things yourself is a sure way to madness ([https://www.youtube.com/watch?v=-5wpm-gesOY](https://www.youtube.com/watch?v=-5wpm-gesOY)) You could also look at the Carbon library, which, as adverse as I am to over-abstraction, is an extension to DateTime, which might help with the fuzzing/parsing to get human-input date formats into a decent format for your application. Only use it if it gives you something you can't already handle with DateTime, though (IMO).
The level of crossposting you've done, is the very definition of spam.
But where is the difference to existing solutions, especially in regard to how providers of these tools benefit?
&gt; No class name needs to contains "service" your ConversionService is a "Converter" ... convey as much meaning as you can to avoid confusion This is incredibly useful to me !!! I was turning in circles ;) &gt; your constructor should be the single point of injection and every parameter should be listed here... Agree and generally do. For conversion params (hundreds of them) I was wondering the best approach.... Where are the limits of a best practice... so : &gt; If logic needed to instantiate is more complex than simply setting some properties value, go for a factory pattern or the builder pattern (which you try to mimic through your Params object btw) Yep, I went up till there ;)... the builder pattern was an option I've considered too and still in my mind... I got an intuition that immutable will help me later (in multi-pass conversions, each pass use almost the same params... reusing with an immutable interface, why not ?). But after reading comments I'm not so sure anymore, the builder is probably a solution that fits better or is currently more spread. I'll keep thinking about it. &gt; Put your strings that you could consider as enum in constants so it's easy to find them and if a codec change its name for example Oh yes I did, but good advice. Implemented an [adapter for ffmpeg](https://github.com/soluble-io/soluble-mediatools/blob/master/src/Video/Adapter/FFMpegAdapter.php) which interprets those constants (in case I want to swap the converter (libav, handbrake-cli...) later on). &gt; Test the values against the supported codecs and fail fast, as soon as you can and throw the most understanble errors eg. Very useful advice. I'll try to figure out how I can do this (codecs support depends on ffmpeg compilation flags). I can call 'ffmpeg -codecs' before conversion or grep if from the error message (I guess the later will need to take care of languages). But I'll remember the principle 'fail fast'. Thanks &gt; About open source library I recommend https://github.com/thephpleague/skeleton as a starter. Yes I confirm it helped me a lot, kudos thephpleague :) 
I edited my answer following your edit ;)
In regard to freeing up resources, one can use multi-stage builds. Personally, I usually run the following stages sequentially - coding style - static analysis - tests (parallel builds) - mutation testing When one of the stages fail, the build will not even proceed to the next stage (why bother running tests when the coding style doesn’t adhere to defined rules?). When running all of these parallel on different services, effectively more (!) resources are wasted, albeit not on the same platform. 
&gt; In my previous team we spend so much time maintaining Drone and Jenkins just to run phpunit and php-cs-fixer Sounds like you were doing it wrong then. However good luck with your product, choice is good.
&gt; why bother running tests when the coding style doesn’t adhere to defined rules? Because then you fix the coding style, push and realize the tests don't pass. You could have known that tests don't pass from the start. I am working like this on a client project and it is very painful.
The OP, but I thought this was a separate thread.
Wow ! That's super nice. &gt; An object should be usable after it's being instantiated Makes complete sense... I'll remember this sentence, it helps a lot :) Although in this case an empty `ConversionParams` is already usable... ffmpeg will recode with the same codec and its defaults or modify the container according the output file extension (mp4, webm, mov). Looks I'm not breaking the rule (even if I was not aware of it ;) &gt; I do not want to enforce defaults: You read in my mind ;) yes it's true and I admit I don't have an idea of what would they be (especially in the future). For the story, when reading the ffmpeg doc I realized there's about hundred of parameters... and thought that a full fledged constructor would not be exactly exciting to do. So too much parameters will make things messy, hundred is too much now what ? So I've considered a builder and the PSR-7 immutable style api. I chose the later full of doubts but having an intuition about multi-pass conversions (params could be recycled between passes, immutable helps me to not alter inadvertently the previous params, something that the builder fluent interfaces does not protect from. but I haven't done the job yet). I'm not so sure about my choices... looks '-&gt;withXXX()' immutable api comes with its lot of problems: see my comment [Immutable api, what does it change for me ? (vs fluent)](https://soluble-io.github.io/soluble-mediatools/video-conversion-service/#parameters). But as I see, you seem to be acquainted with immutable style interfaces, so It's great to know what others uses. But I will still study the idea of making the constructor private... and expose a static withDefaultValues() or create(). I would like to allow easy serialization/deserialization of conversion params (through an array&lt;key,value&gt; structure, conversions are supposed to be queued), so I guess when I'm there I'll have a better idea. (This came up to my mind when reading "new H265()"... instead of a string 'h265': note that codec support varies with ffmpeg versions) &gt; Kind of like this, I assume you get the idea. This way users have a much clearer entrance point to your library. And THEN you still are going to have your immutability thingy going on and users can create the object they want. Awesome... Yes this is interesting to differentiate low level API and user friendliness. This is a question I had all the time, chose to start from the ground and building from there. I'm not fond of the idea of adding static preset methods in [ConversionParams](https://github.com/soluble-io/soluble-mediatools/blob/master/src/Video/ConversionParams.php), presets are a never-ending changing thing. what would be a good alternative ? I'm thinking about creating preset classes, like `Preset\Recommended\GoogleVodPreset::getParams($overwriteParams)` (see [here](https://developers.google.com/media/vp9/settings/vod/)), `Preset\Pro\ProductionRawPreset::getParams($overwriteParams)`.... which can eventually be installed separately. Or using a Facade (I'm not sure I know enough design patterns, but seems to be the one). If I can ask what approach would you take ? BTW: I really appreciate your comments, you seem to have understood very cleverly my questionings and what I'm trying to achieve. Answers are really helping, thanks for sharing ! 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [soluble-io/soluble-mediatools/.../**ConversionParams.php** (master → abadeb0)](https://github.com/soluble-io/soluble-mediatools/blob/abadeb0e7d762306f98d0c03a2c90625dc10fbc3/src/Video/ConversionParams.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e3vn23y.)
If it is painful why not have a precommit hook instead and catch it before it leaves your machine and into your build pipeline?
I was talking of that arionum project; Fabien's code is purely for demo purpose so the overall quality doesn't mean to much, it's meant to be as simple as possible.
You can, but make sure you are not using claddmap authoritative in that case. composer - o install might work fine and will use psr4 dynamic fallback 
Thank you. Clearly explained.
&gt; Because then you fix the coding style, push and realize the tests don't pass. You could have known that tests don't pass from the start. I am working like this on a client project and it is very painful. If you don't run your tests before you push you are doing it wrong. If you don't run your coding style tools before you push you are doing it wrong.
What's the error? You have provided no information for us to even begin to try and help you.
Awesome, thanks!
Thanks for the input!
Although I agree with you, this looks like a snippet from the phpMyAdmin config file. [https://docs.phpmyadmin.net/en/latest/config.html#cfg\_Servers\_AllowNoPassword](https://docs.phpmyadmin.net/en/latest/config.html#cfg_Servers_AllowNoPassword)
That's a whole nother level of problem.
The gap is as per a proposed PSR in php-fig [https://github.com/php-fig/fig-standards/blob/master/proposed/extended-coding-style-guide.md](https://github.com/php-fig/fig-standards/blob/master/proposed/extended-coding-style-guide.md). AKA, I think the gap is a pretty standard thing to do, hence Storm doing it. No idea how to turn off/override I'm afraid.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [php-fig/fig-standards/.../**extended-coding-style-guide.md** (master → 8124981)](https://github.com/php-fig/fig-standards/blob/81249815dd82f053e66c1501781b3cd6df79e1d7/proposed/extended-coding-style-guide.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e3w2lik.)
OP is not referring to the space between the colon and the return type, but the issue of pressing enter _after_ void will result in a space instead of a line-break. I think this is caused by code completion suggestion list in which pressing enter is interpreted as a selection of the first result of this list, which is then added and appended with a space. I think it relates to _Settings &gt; Editor &gt; General &gt; Code Completion: "Automatically insert single suggestions for Smart Type Completion".
It sounds like the auto-completion is coming into affect. If you just type \`voi\`, let the auto-complete show up, then press \`enter\` on the \`void\` option, you'll notice that the word "void" is completed and a space is placed after. Basically, \`enter\` is completing the completion. You have to press enter again to go to a new line. The trailing space should be deleted automatically on save, if you have that turned on. I'm not sure what to tell you try try. You can press Escape to close the autocompletion and then the issue won't occur. You'll have to do that every time. I guess I've gotten so used to using the autocompletion that this behavior is normal for me. :-P
I'm not sure what you're saying matches OP's question. The gap you're talking about it between the \`:\` and \`void\`, right? OP is talking about a space after \`void\`, not before it. Apparently PhpStorm is putting a space when OP presses enter, instead of taking OP to the next line (which is what any of us expects). I commented with what I think the actual issue is here: [https://www.reddit.com/r/PHP/comments/95x35c/phpstorm\_022018\_annoys\_me\_with\_space\_after/e3w44qd/](https://www.reddit.com/r/PHP/comments/95x35c/phpstorm_022018_annoys_me_with_space_after/e3w44qd/)
I think the bigger issue is that pressing enter is resulting in space, not a newline. I've explained what I think is the likely cause in my own comment.
That will indeed be auto complete. To be honest, since phpstorm is configured with a certain coding style, it could be a little smarter about this particular corner case.
okay, it is indeed the autocompletion. i guess i have to get used to this behavior. thank you for your hint.
No problem! Are you new to the IDE? Just curious, since I would expect someone who has used it before to be used to this. As a new user, I can see it being weird.
... in limited time
I am using phpstorm/idea for more than 5 years now and never noticed this behavior, so i guess something has changed in autocompletion behavior.
I would say that getting a cert for an IaaS (AWS or GCP) is definitely a huge plus if you are looking for lead, manager and director roles.
Symfony Symfony is the backbone of laravel which has been HOOOOT. There will be a huge number of projects in the future that run these frameworks and a LOT of work surrounding them. Seems an easy decision from my point of view.
Learn to press enter twice?
Sure https://giphy.com/gifs/everyone-remake-rw-s239QJIh56sRW
&gt; Personally, I usually run the following stages sequentially To me this feels inefficient (on the time-axis). At least the examples you give, nothing really "depends" on the previous stage. Code style, especially. Just because the code style somewhere is wrong shouldn't prevent the developer to soon also see potentially failed tests. So: the more you can do parallel, the better IMHO.
IT academia is funny. Most IT students worth their salt are probably far ahead of the academics "lessons" and culture. I was. Still am.
An important question: what country are you from? In France e.g. having Symfony/Twig certificate matters, because it's your advantage to hundreds of other Symfony devs. In the Czech Republic no-one cares, because there are very few good Symfony programmers.
Buen video. Estoy siguiendo y tratando de escribir/replicar el codigo mirando la pantalla. Alguien porahi sabe de alguna version del codigo fuente de este video disponible por ahi?
May I ask if that certification is an online course with exam? The info page says it's "Instructor-led classroom / Live Virtual Training" but I am not sure what that means. Could be an actual classroom or a virtual classroom?! 
Try pressing: “vo”, Tab (to complete “void”), Enter (add the newline)
NICE MEME
I'd put it low on your list of priorities given that you don't use the framework in your current position, but Laravel has a certification now too.
I read the title like "happy coders" "day celebration" and I was like what? What's a happy coder? What's this feeling you're talking about?
It's a programmer day celebration it's 12th of September 
How the version 8 Jit been actually confirmed?
What about going to some php developer conferences? There's one in a couple months in San Diego: https://www.wavephp.com/schedule
Yeah, Wordpress troubleshooting can be a pain. Especially when you inherit the project. I know this is old, but I'm still having the same problem... I tried isolating the HTML/Markup like you suggested. Happen to have any ideas specific to the PHP section?
 la mayoria de la comunicacion aqui se hace en ingles, pocas personas van a entender si escribes en español --- most comunication here is made in english, few people will understand if you write in spanish
PHP dev of 15 years here, I agree with you. Maybe an AWS/GPC certification means something, but I’ve seen soooo many obscure “certifications” from dubious instructors/institutions that I’d be reluctant to even take them into consideration. If they took the course on their own, at most I’d say it shows they at least have interest in the work but that’s about it. Now, if we are talking about a list of specialized course work, like a course dedicated solely to testing, database administration, or some advanced topic, that’s far more interesting imo.
Fully agree with this. If I see some sort of certification on a resume it literally adds nothing. OP save your money and put it into something more useful like something for your office or even going to a PHP conference where you get to meet like minded people and learn about some new things, network with people. 
It has been already posted here 3 days ago - https://www.reddit.com/r/PHP/comments/94zxlf/negative_architecture_and_assumptions_about_code/.
Yeah you can program in C++ for most hardware projects. This is my use-case at work right now and it is great. I come from the Java / C# world and it was a bit hard at first but it's well worth it, you feel like you're really in control. And modern C++ is not what it was like 10+ years ago, it evolved quite a lot and it's much cleaner / easier now to get started.
You do not need certification to be a php developer, and frankly any employer using and kind of certification as a benchmark when hiring would be a red flag, as they likely don't have a clue what they are doing. Real world experience is hundreds of times better. If you really want to show to potential employers that you're the real deal, get yourself a bunch of little projects done and on Github. Demonstrate that you've got initiative to go out and build something from scratch, and improve on it. It doesn't have to bee anything too complex. A blog, cms, anything api driven (e.g a flight search engine, bus timetable tracker, whatever you like). There's a place for certification in some areas, and things like AWS certification are certainly good things to have. An "Official" Laravel or Symfony certificate are a complete waste of time and money though in my experience, as well as being a blatant money grab.
I have no idea! The deployed something new for GitHub Apps yesterday I think, maybe that's part of it :/ I'll try to dig in.
Noob here. Why is this a potential security risk?
Hexadecimal strings are often used as hashes and keys in various operations. Hexadecimal strings can easily look like base 10 numbers, which can cause security issues when comparing them using `==`, operator, e.g. https://3v4l.org/cXQDu ``` &gt;&gt;&gt; "123e2" == "12300" =&gt; true ```
in order to securely compare hashes there are `hash_equals` function. Even if you use strict comparison you still could be vulnerable to timing attacks.
you have strict comparisons (`===`) for that reason. I really doubt that this could be deprecated and removed, since there are many code that rely on it, and projects which needs that could just enforce usage of strict comparison by applying some tolls like php-cs-fixer.
We can't always rely on third party tools to make the language better. Yes, disallowing \`==\` is feasible via CS rules, but at some point it must go. A deprecation (gradual - soft =&gt; warning =&gt; error) is a decent path that would allow migrating and then re-introducing the feature once we know that nobody is using it anymore.
Perhaps we need an opt-in mode to disable implicit type conversions for 7.4, which then becomes opt-out in 8.
\&gt; at some point it must go. I don't share that sentiment and you can't just state this as self-evidence truth. In lots of cases the == is desirable and behaves the way the dev wants it to. In fact, deprecating it and only allowing for === would be a huge mistake. I am not making the argument that we shouldn't remove it because it would ruin most projects (which it definitely would). I am arguing that not having this particular functionality would be a mistake. A developer should have access to both of these tools and use them as needed. We can't make the world safe for stupids; this idea of trying to make everything safe for every pleb around the corner really ends up hurting us all as it limits the choices we can make because we try to pander to the lowest common denominator. my 2 cents! 
or you know, use the right tool for the right job. Use === where risk could present itself
I will be glad if PHP tuns it's path towards strictly typed languages (with ADT, structural typing) and forget C-like type systems. But... I really doubt that this would happen any time soon (it's just easier to migrate to different language). One huge stopper to make PHP a bit more better is to make type checking in runtime optional or just replace it with some sort of code generation using type information provided in compile time. And this will also be a huge BC break.
"right tool for the right job" requires understanding what is right and what's not from developers, which most of the time is not a case. And there's a lot of projects which made by incompetent developers. A good tool should enforce "right things".
Please stop reposting this. It's not even as informative as Symfony documentation itself.
I'm going to be spending that money just to look at the code, even if I'm never going to use it.
Hey :) . Thanks for your feedback, but this is the first time I post it on Reddit so I don't really understand it.
=== is no more right than ==, one is simply more applicable in some situations vs others.
Nice post, it creates a bit more coherence than the docs provide and it includes test examples, which are not present in the documentation.
Thanks!
\`$foo === (someCast) $bar;\` replaces pretty much every scenario. What's missing is by-val object comparison (no, not a custom method), but it can be polyfilled in userland.
No, it's just rumored.
This is what I meant. "In some situations vs others". This requires understanding and common sense from developers. And... let's face it. Most of php developers just copy paste their code from previous projects/stack overflow. I am exaggerating this a bit, but you got my point. If there will be chose to use something in a wrong place - be sure many will do that.
Dev a open source project and release on GitHub If the project you posted with more than 100 stars It is better than any cert Like oracle programmer certification, no company care this..
I guess it depends on where you live and what you charge your clients. For those of us living in Europe or the US the price is lower or around a billable hour. How is that not low? I guess people are downvoting because the think comments on price are invalid? Lets say it takes me 3 hours to configure Nova to what the customer need plus the price of $99. And lets even say I work for just $50. That's $250 the customer pays. If I had to write something comparable myself that fits the need of the customer and works as nice as Nova, it'd take 20-30 hours. That's $1500.
then maybe someone should try to update documentation?
So you agree that == has its uses, but because it may be misused by some, nobody can use it?
I wish people would stop wishing PHP was some sort of other language. Making incompatible changes to the way operators work is very very rarely a good idea. Especially not a language that is as mature as PHP with as large of an "install base." If you want to make PHP better, build a new standard library that works consistently.
You can't jam everything into 1 page of the documentation, blog posts are excellent for this. But if you want, you can suggest this at: [https://github.com/symfony/symfony-docs](https://github.com/symfony/symfony-docs) I'm happy that people are writing blog posts about this, it's good for the community and to learn publishing posts yourself.
Finally got a student license for Jetbrain products, which gives me access to r/PHP's favourite editor: PHPStorm. In the past, on my home laptop, Android Studio doesn't really hold up well. PyCharm is usable. How intensive is PS compared to these two? I bought an extra 4GB ram stick just in case.
Agree, I like PHP but I think the language has two options at this point, evolve or be relegated to be a language that support old projects and old ways of doing things while new projects use other statically typed languages. Too many bugs I face in PHP on a daily basis would not exist in something like Rust or other languages. 
FYI, JetBrains' anser: https://twitter.com/phpstorm/status/1027878947151900673
&gt; In lots of cases the == is desirable # ^[CITATION ^**NEEDED**]
IRRELEVANT since the topic of discussion is STRING TO STRING COMPARISON, you stupid """"REDDITOR"""".
There's basically never a reason to use == over ===. If you need to do that, it's because you're a sloppy developer. You should be explicitly casting type for predictable results. This is one of those things that annoys me about the PHP developer team. We can't improve the language because so many bad devs have made bad choices, and those improvements would be a detriment to them.
&gt; I wish people would stop wishing PHP was some sort of other language. You mean like a less shitty language? Yeah, what a terrible wish.
&gt;I wish people would stop wishing PHP was some sort of other language. I agree. Instead of making PHP less horrible, just please use better languages. I can't believe that new projects are still being started in PHP. The very best PHP you can write today looks basically the same as decent Java code from the late 90s. We have better than both of those in 2018.
Oh nonsense.
You sir seem to have some sort of mental problem.
It's more that PHP does absolutely insane things with strings (you realize that the string '0' evaluates to false- WTF?), has arrays that are actually hashmaps that mangle their keys, etc. PHP has a lot of fundamentally *bad* design/implementation decisions. And it's not just that it's "hard". Rust is hard. Haskell is hard. PHP is, frankly, dangerous in how inconsistent it is. I hate Java, but I'd choose Java every day over PHP- at least it has generics, real arrays, real hash maps, and it's faster.
Id say PyCharm and PHP storm will be fairly similar. Android Studio for me has always been a bit more intensive.
I can't think of a single use case where I'd use `==` tbh. This means I'm not 100% in control of the data being compared, and I just can't have that.
I use SF2 daily
Which begs the question, if the other language does what you want, why are you messing with php? 
Because I need to make a living, the framework my company relays on its build with old technology. 
That's nice to hear. Thanks!
JavaScript and Python don't seem to have a problem. I think you are going to be surprised in the next 5 years. JavaScript enjoys a privileged position which is going away soon with web assembly. I don't know about python but I think there a clear tendency towards strongly typed language after the industry has learned for decades why dynamic typing is bad, yes it is easier, but it means bugs. 
&gt; So you agree that == has its uses I agree that there could be some useful usecases for value only comparison (like comparison of arrays) but again, this doesn't need type casting. So yes, I agree with proposal of deprecating this feature, but I don't believe that this would happen 
Javascript has this problem. Python doesn't. But for javascript you have TypeScript/Flow, which eliminates this kind of problems. Python is good example of strongly typed dynamic language, which provides you ability to [annotate types](https://docs.python.org/3/library/typing.html) to use it in static anylysis. In PHP right now it's possible only using phpdoc (which isn't helpful with more complicated stuff like closures). And again, there is no any "standard" in php on how to deal with generics or closure types. Everyone creates their own standards.
&gt; There are many code that rely on it. Citation needed.
I am on phpstorm 2018.2 build 182.3911.43 and i just copy pasted what you gave and pressed enter and my cursor is on the next line. I am using psr-2 code style.
This is neat, thanks for sharing. Does is support the $isBank parameter? If `true`, it returns 12 additional holidays that normal people don't get. I'm looking at you Columbus Day.
I am having trouble installing xdebug in XAMPP php 7.2. I am getting: $ pecl install xdebug No releases available for package "[pecl.php.net/xdebug](https://pecl.php.net/xdebug)" install failed
If your application will break from a change like this, it’s only working through sheer luck. 
How does it handle easter? In the Netherlands, and probably other countries too, we have a whole bunch of holidays relative to easter. Since easter depends on the movement of the moon it should probably be hardcoded. Do you plan to support this use case? (i.e. put easter date for the next 25 years in the data file, and "codify" the other holidays as "x days after easter")
Bad bot.
Are you sure about that? Because I am 99.99976% sure that Fizibbis is not a bot. --- ^(I am a neural network being trained to detect spammers | Summon me with !isbot &lt;username&gt; |) ^(r/ spambotdetector |) [^(Optout)](https://www.reddit.com/message/compose?to=whynotcollegeboard&amp;subject=!optout&amp;message=!optout) ^(|) [^(Original Github)](https://github.com/SM-Wistful/BotDetection-Algorithm)
Theit post history is pretty clearly "pathetic asshole", probably best to just move along.
I was referring to the fact that the comment looks like it came straight out of /r/totallynotrobots, except that it isn’t funny.
Hum, that’s a bad analogy, foo and bar are variable names, not way of saying x or y. 
PHP has got you covered http://php.net/manual/en/function.easter-date.php :) Interesting project, need something just like it (but then for Dutch holidays). Will keep this in mind
aren't x and y suppose to be variables in that expression? 
Python is strongly typed. An integer in a string is always a string, not an int. The problem here is that PHP is *weakly* typed, not that it's dynamically typed. Those are different things. (C as an example is also relatively weakly typed, but also statically typed.)
PHP(tm)?
Strict comparison should be the default without requiring constant use of === everywhere. In the much rarer occasions where you want loose comparisons, you should have to opt-in. This makes the common case the easier one, which reduces needless code and accidental errors.
Agree with you. I think certification works like marketing. Organizations show that they have "X number of employees who are Y certified" so that they can attract corporates and get a work contract. It's your experience and skills that matter when it comes to fixing complex bugs. Not the certificate.
TIL Generator syntax. I could have used that... 
&gt; I am looking for some recommendations for training, study or certifications to take. Take a CS degree then. Like you I was in the industry for a while around 12years then I took a CS degree and it completely changed my way of thinking about programming and made me a much stronger programmer in general, not just restricted to PHP. If you're just knocking out wordpress or CRUD sites then obviously it won't help too much but my last 3 jobs have been complete application stacks in PHP not just websites, this is where it will pay dividends and pay well ;) I can guarantee you an employer will value a CS degree from a reputable university over any made up 'PHP cert'.
A lot of them are! Basically, you’ve got folks who either (a) know a little bit of PHP, or (b) who contract out to budget shops in India or China. Their app works with version X.Y. Then version X.Y + 1 comes along, they upgrade, and it breaks something. They don’t have the time, expertise, or money to figure out why it’s broken. So, they downgrade back to version X.Y. Now they’re scared of upgrading and use a version that’s super out of date. If they’re smart, they’ll test it beforehand. But, generally that’s not likely. I’ve seen folks FTP changes to live (!!) sites to test them like it’s no big deal. It’s scary, but they still get business because (a) their clients don’t better, or (b) their clients can’t afford to go anywhere else. 
Thank you for the information. That's what I am thinking, but most informational out there is similar to your situation where everything mentions laravel etc. I will see if can build a few things with plain PHP, adding and reading from databases etc, get myself comfortable with that. Look at how to apply frontend stuff correctly to that, then possibly move on to laravel. I think that makes sense? 
Oh yes, I'm aware that there are plenty of applications that do only work by coincidence. But this type of behavior has almost no actual real-world use case and can cause innumerable problems. &gt; var_dump("12e1" == "1.2e2"); bool(true) This is just stupid, full stop. Yes, I understand why this happens and the semantics of string and number handing combined with loose comparison in PHP. It's still unacceptable.
&gt; (you realize that the string '0' evaluates to false- WTF?) It doesn't. &lt;?php $it = '0' === false; echo $it ? "'0' equals false" : "'0' does not equal false"; Output: '0' does not equal false. '0' gets converted automatically to the integer 0, which is falsy, so '0' == false would be true. Why is that hard to understand? Dynamic type conversion is a convenience. The rules of PHP type conversion is really well defined and pretty well understood. It's a language that has grown over time. It has a std library that is horribly inconsistent and had some growing pains from PHP4 to PHP5, but I find it's just "fine." It's not great. It's not bad. It's just fine. Good code is code that is easy to understand and therefore easy to maintain, and has zero defects. There is no reason you can't write good clean code with PHP. But this is a religious discussion as such objective judgements will be impossible to arrive at. I just never understand why people who have such high disdain for PHP spend so much energy on it.
that's your opinion or experience. Mine is different. Why should your preference be the default or require extra settings. Just use the right tool for the job. I doubt adding an extra = for each comparison is so hard that you have to change an entire language structure to accommodate for it. That makes no sense to me personally
&gt;'0' gets converted automatically to the integer 0, which is falsy, so '0' == false would be true. Why is that hard to understand? It's not that it's hard to understand. It's that it's a really bizarre thing to do and nobody should expect it. It's also one of a thousand "not hard to understand" things that PHP does that is bizarre and inconsistent. A non-empty string would be truthy in any other dynamically typed language and it makes a lot more sense to do it that way. Why should I know that, internally, PHP is going to freakin' `intval()` my strings? I read the title of OP and just sighed. Why in the world would PHP convert strings to integers before checking if they're the same? It would be just as crazy as if `'false' == false` were true. Why doesn't PHP try converting strings to bools before comparing them? I don't know, but would it be any weirder than doing what it does with ints? &gt; Good code is code that is easy to understand and therefore easy to maintain, and has zero defects. &gt; &gt; There is no reason you can't write good clean code with PHP. Agreed on both points (although, you forgot "fast enough" as part of good code) and I never really said anything to to contrary. However, I argue that you can write better code, faster, with fewer defects in a language other than PHP (assuming approximately equal proficiency in each language). Granted, I'm not accounting for ecosystem here- I'm speaking purely on the merits of the core languages, and perhaps of the accompanying standard libraries. &gt; I just never understand why people who have such high disdain for PHP spend so much energy on it. Because I have to work in it. So I'll spend my time here doing 50% complaining about PHP and discouraging its use and 50% helping new programmers write the least terrible code possible when they choose to use it.
For me, such bench marks are out of curiosity. Sure, I can write a loop that is 33% faster ([https://github.com/ellisgl/php-benchmarks/blob/master/results/Loops.md](https://github.com/ellisgl/php-benchmarks/blob/master/results/Loops.md)), but the generated code ([https://github.com/ellisgl/php-benchmarks/blob/master/benchmarks/LoopsBench.php#L46](https://github.com/ellisgl/php-benchmarks/blob/master/benchmarks/LoopsBench.php#L46)) isn't something someone want to work on. Some of these (micro)optimizations would be a last ditch effort to slim down execution time on something that needs to be "real time".
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ellisgl/php-benchmarks/.../**Loops.md** (master → cec1ec7)](https://github.com/ellisgl/php-benchmarks/blob/cec1ec7281f7e6f8dd1ad40f3094e5b01e028e23/results/Loops.md) * [ellisgl/php-benchmarks/.../**LoopsBench.php#L46** (master → cec1ec7)](https://github.com/ellisgl/php-benchmarks/blob/cec1ec7281f7e6f8dd1ad40f3094e5b01e028e23/benchmarks/LoopsBench.php#L46) ---- 
"1" == 1 vs "1" === 1 Think of this example for a second. What you are seeing here is not a "type" problem generally speaking. It is an input problem most often. Lets say that I am running a script via the console and I input the arguments: `&gt;php compare.php 1` What `argv` will show you is a bundle of strings. Reason for this is simple, everything is a "string" in the context of the web and in the way PHP works correspondingly. So lets look at the following \`\`\` if($argv\[1\] == 1) echo "cool"; vs if((int) $argv\[1\] === 1) echo "cool as well"; \`\`\` Both of these are the same thing. But what you are doing in the second scenario is type casting the input in order to \*\*validate\*\* its type against the comparison term. But that's exactly what == does if used properly. There is no need to type case inputs as the engine will do that for you. Obviously this could result in really bad things happening like some of the examples provided in this thread. However, when you know the nature of the input and you can trust it or have previously validated it, recasting is not needed. That's why it should be up to each developer to understand how the tools work and utilize them as he/she sees fit. Use the right tool for the right job. Simple as that. You adding an extra = to you statements while providing me with the flexibility to do my word is a decent trade off that gives both of us the tools that we need. Side note: I am extremely troubled by the convergence of all the languages around. More and more languages try to be the same over time. PHP is becoming more JAVA like every day and it is important to realize that "PHP" != JAVA (or (string) PHP !== (string) JAVA if you like). It is good that we take things and learn from other languages but it's also important to understand that there are some things PHP does better than other languages. And in my opinion the way == and === is handled pretty well in the language as is.
Use `===` problem solved.
oh my good god. Please for the love of god don't use this.
include the 2000s wants it's code back.
In the U.S., Easter is always on a Sunday and I've never been at a business where it was a paid holiday. I don't know. Feel free to create an issue, and I'll try to address it.
I created an issue for you! https://github.com/phpexpertsinc/workday-planner/issues/4 For now, you can add your own holidays. See https://github.com/phpexpertsinc/workday-planner/blob/master/tests/HolidayDetectorTest.php#L34 Of course, if you create specs for these bank holidays, please post them in that issue.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [phpexpertsinc/workday-planner/.../**HolidayDetectorTest.php#L34** (master → d05e958)](https://github.com/phpexpertsinc/workday-planner/blob/d05e958e3e51b34ff0d0932dcad6e3e6cf187347/tests/HolidayDetectorTest.php#L34) ---- 
Exactly. So why would I need to cast when the engine is literally doing that same thing?! The idea here is safety but when I know the nature of the input and I know how the engine behaves, there is no reason to cast. Also, if you are doing anything complex you will need to overwrite the previous variables with the newly cast ones all the time which is rather annoying. I really dont understand the problem as both functions are available for you to use. Why restrict some type of usage just because you don't like it or work in that specific way? just use === and your life will be perfect and I will use == where it's applicable and my life will be perfect. Why make things harder than they need to be? Also relying on userland for by-val is not something I like one bit. Not sure why all of this is even needed...
&gt; You're sloppy for not knowing the internal workings of the engine that you rely on every day... &gt;Want more predictable results? the least you can do is learn the fundamentals of the language you're using. Damn, did I hit a nerve or what? I am quite familiar with how the language works. So far, you haven't done anything to demonstrate that I am wrong. So I'm going to assume you don't actually have anything to argue, and are instead upset that I called you out as a shitty developer.
Every singke interview I attended I had to answer what sql injection is We dont escape input anymore in years make sure you know what prepared statements are
Be prepared to talk about the recent projects you worked on. 
Don't pee on anybody... ...But seriously just be confident in what you know, and embellish it a little bit. Going to your first interview is nerve-wracking, but you know what your experience is. The fact that you've gotten to a face-to-face interview is a good sign, now you just need to convince them that you are the right person for the job. Some interviewers like to make themselves feel smart by asking questions that are designed to trip you up. It is usually obvious that they are designed for that. If you are asked one of those questions, take a deep breath and start talking out loud what your thought process is. Even if you get the question wrong it will give them a chance to see how you attack problems.
&gt; The framework they use Oh my sweet summer child
One thing that I never picked up organically hacking on php until it worked is that is often important is coding styles: https://www.php-fig.org/psr/psr-2/ This leads to a nice consistent style across the code base and is essential for larger projects.
Thank fuck for that.
Some non-technical questions to ask about: team size, what projects they have planned for the next year. It's good to have questions for them so you look engaged.
&gt; Don't try and learn too much stuff at once. It is far better to be an expert in some field and just "know about other stuff" rather than knowing a little of all but needing help in all as well. This. Jack of all trades is by definition a master of none.
you are comparing it to a loose head because you don't see its utility. But clearly others, like myself, see it. What if a "loose head" serves a good function? do we then just ban it just because YOU don't need it in your toolbox?
if you don't know something, just say that. never bullshit an answer. you aren't expected to know everything, but you are expected to be honest about what you know. 
Make sure you have some questions to ask them. They will ask if you have any questions, and not having any sounds like you don't care about the job. Be honest. If you don't know of a technology, say you haven't heard of it. If you've never worked with it but know of it, saying "I'm familiar with the name but I haven't experimented with it yet." is better than lying about it.
&gt; if you truly knew how the language works, can come up with those examples. If I wanted to cast one type to another, then I would cast one type to another. Explicitly. This way it is very clear what my intentions are and it's very clear, at a glance, what is going on and why. This is how good software is written. You're just a lazy, sloppy developer if you rely on loose casting. I don't know what else to tell you. There's absolutely no reason for it, and will just lead to bugs in your software. 
How did you manage to misspell “Messenger” when you literally link to the page that has the spelling in on that very word?
*beep beep* Hi, I'm JobsHelperBot, your friendly neighborhood jobs helper bot! My job in life is to help you with your job search but I'm just 326.9 days old and I'm still learning, so please tell me if I screw up. *boop* It looks like you're asking about interview advice. But, I'm only ~28% sure of this. Let me know if I'm wrong! Have you checked out CollegeGrad, HuffPo, LiveCareer, etc.? They've got some great resources: * https://collegegrad.com/jobsearch/mastering-the-interview/the-eight-types-of-interview-questions * http://www.huffingtonpost.com/rana-campbell/10-ways-to-rock-your-next_b_5698793.html * https://www.livecareer.com/quintessential/job-interview-tips * http://people.com/celebrity/worst-job-interview-answers-askreddit-answers/ * https://www.thebalance.com/questions-to-ask-in-a-job-interview-2061205
&gt; The why is never clear. The why is much clearer if you can clearly see what is happening, rather than hoping you were passed acceptable input. &gt; Sometimes you WANT looser comparison. Which means you created sloppy code, congrats! If you want to accept multiple input types and convert them into a specific type, then do the proper testing and casting. &gt; So All I read here is: this is how I prefer to do things and my preference should become law because I am clearly incapable of understanding the case the other side is making. I understand your case perfectly, you just happen to be wrong. &gt; I am dead certain now that you don't know how your fundamentals And yet, still, your only rebuttal is that I must not know what I'm doing. Sigh. If you have an example that you think makes your point, then link me to it. I looked at your post history and didn't find anything convincing. This is one of the primary reasons that PHP gets laughed at when used in a professional capacity. It allows people that don't know what they're doing to write shitty code. It would be amazing if PHP removed loose types altogether...but that will never happen, because lazy fucks like yourself are holding back the language.
Laravel is fantastic at prototyping and creating small to medium apps but it's also highly opinionated in how you write your code. Its also easier to just get started programming because of this. You don't have to set up everything yourself. It's also based on Symfony's components at it's core. Symfony is incredibly unopinionated and generally just wants you to follow PSR spec which is agreed upon by the PHP working group. Aside from that it's almost a complete blank slate and with Symfony 4 it's literally a blank slate. You have to spend more time configuring it but it will be exactly how you want it. I've read a variety of articles about companies having to move off Laravel for scaling purposes on large applications but since Symfony is so bare bones the scaling problems are related to how you write it. It all comes down to your use case in the end and what you're comfortable with. 
Nice. When do I pee, as soon as i walk in or when they say "shall we begin"?
Well React is a front end framework and Symfony is a back end framework. You could use both if you wanted. Or you could use Vue (front end framework) and Laravel (backend framework) 
Show them your butthole.
Is symphony smooth with react ? What i mean by this is, is that laravel and react is kinda hacky in my opinion. I do not like the way i have to pass blade data into a react file. Its sort of hacky in my opinion. I assume you use symphony, is hooking up react with symphony a breeze ?
Im not sure why you have to pass blade data to a react file. Are you sure you're doing react correctly? React should be able to hit API endpoints and not care about how they're set up with templating in either application. Unless you're talking about the testing urls? Symfony 2 and 3 had a library for using the built in path queries in JavaScript. Symfony has webpack encore built into it now but I haven't used it. I think Laravel has Vue support built in as well. 
No. The operator == is 'truthy' in php-land. So comparing 1, 1.0, '1', true, 'et cerera' has always been true. Everyone know you should use ===, but some old crap code does not use value objects, so you never know if it's a 1 for true, or '1' for true, or true for true (Ok, you can typecast it to (bool)$varFrom2010)
Hi, I'm a C developer. I've just checked out this "php" language and I see some things that work differently from C. I think all of the differences between C and PHP should be removed. Yeah it's a strawman, but whatever.
Checking string equality using === has its uses, but some people might do `if ($_POST['password'] === $password)` instead of using password_verify so we should remove ===. /s
But it is perfectly acceptable to add on to that, 'I don't know but, I think it may work like this' is usually good for junior positions.
I don't use either, but if I had to pick I would use Symfony. Coming from Rails' Active Record: Laravel's ORM suck. Terribly. Anything that is over the basic CRUD you have to use query builder, which kind of defeats the purpose of using an ORM in the first place. Eloquent is simply a Fisher-Price toy. So many feature requests get closed down on github that would bring it up a notch.
Logging levels! Know how to find an error log and how to change what goes there. I’ve never worked on a PHP project that didn’t need some logging love from time to time. Ask if their LAMP stack is actually Apache or if they swapped in Nginx but kept the easy acronym. 😁 Know a little about both web servers and how to configure PHP in them. 
Op may be referring to something like using data attributes to pass data to JS that’s not included in the template file. Encore is a Webpack plugin, not a Symfony plugin. It simply wraps your webpack configuration. Encore is just a tool to ease configuring webpack and plugins. Twig can read your manifest.json file for asset versioning though. Encore also makes it incredibly easy to use (read: configure) Vue.js or React. They both work really smooth in Symfony apps. 
"We use Drupal, HTML, and Wordpress"
I am in the latter group and I am using Laravel. Just figured I'd be a data point.
Good bot
Good human.
Good good human bot bot.
Good bot
Good bot
Good human.
You can pick the style for a project and just use auto format to have it fix everything. 
Just my thoughts Full stack LAMP Should be able to interface with a server, PHP PDO I'd think for prepared/bound parameter queries. Producing JSON for APIs, creating APIs for insert(CRUD), routing maybe, templating(looping and spitting out HTML), maybe session handling, getting parameters/$\_POST, file\_get contents maybe. I myself can't think/write/do PHP OOP, that's what Laravel uses. Not sure if you'd have to know that. Maybe some functions like array searching, strpos, strreplace, these are pretty common across languages. Not sure how much of the other three letters you need. For Apache maybe being able to setup virtual hosts, setting up SSL certificates per site, configuring your PHP ini file. Linux probably directory traversing at least, file permissions like 755 for folders, 644 for files, ownership eg. www-data:www-data If you can pick up some MySQL terminal maybe, I cheat and use PHPMyAdmin but if you can do some basic MySQL like logging in by terminal, doing stuff like "SHOW DATABASES, USE... etc" If you have to do any routing with fake directories use mod\_rewrite with htaccess and then use PHP to produce the output/decide what happens. I don't know, if you're doing any problems whether it's paper/coding test, use comments to write out your plans/how you want/intend to solve a problem. Good luck.
Symfony doesn't get in my way, and increases production. Laravel does get in my way, and decreases production. Aside from that, Symfony is faster and more mature, with a well-supported and bright future. Symfony has very solid release cycles and enterprise level stability. For larger projects it's really a no-brainer.
I don't agree that Symfony is a blank slate. It's very very easy to have a basic CRUD up, with authentication and an API framework in the time it takes you to go pour a coffee. You make it sound like you have to start from scratch, which is very misleading. While Laravel might come with a little more on a fresh install, you're going to find out that eventually that's going to become a problem.
Actually, Eloquent's scope stuff is pretty damn awesome. I prefer Doctrine in most regards, but I wish it had a comparable feature in that department.
It's not misleading at all. Laravel is highly opinionated and will be quicker to start with if you have two developers of equal skill in the respective frameworks going at it. You have to set up the authentication how you want it in Symfony. Laravel has the auth bundle included (or at least it did). That's very different. Symfony does have the "security" bundle, but it's pretty basic and still has to be configured how you want it. Usually that's just me installing FOS User Bundle which, like you said, is quick for someone who's done it before and doesn't take too long to install as a new Symfony dev but you have to find it first. For my perspective, I've done way more Symfony development than I have with Laravel, and pretty much never start a Laravel project anymore unless I'm forced to. I just see the perks to both and stand by my statements above.
Haha I don't anyone can make profit on a Drupal site at $1000
That's honestly a useless measurement though. We're talking about *maybe* shaving an hour off the *very* start of a project if you have an inexperienced Symfony dev. And the time you may lose here in Symfony will be made up ten-fold later on in the project.
Huh?
Rails ORM also has scopes
But Doctrine doesn't, which is the standard for Symfony.
Correct. And unfortunately, we will never get much needed improvements like this to the language because we have to support shitty devs.
What's OOD? Senior dev and never heard of that. If you mean Object Oriented Development, that's not a thing. Maybe you forgot the A in OOAD?
The point is that a hammer with a solid head is useful way more often than a hammer with a loose head. But if you *really* want a hammer with a loose head, you can loosen it yourself. Having the default be the type safe way that reduces bugs would be a far more sane option. I don't know how one can argue that less bugs = bad.
They're not deprecating the operator, they're deprecating the surprising (and quite frankly wrong) behaviour of promoting strings to ints when comparing.
This is such an old meme these kids dont recognize it....
There are \*tons\* of enterprise Laravel applications out there. Talk to Matt Stauffer about this if you want - he collected data on this very topic for his Laracon talk. Some of the companies using Laravel happily would definitely surprise you in terms of size.
Personally I prefer Symfony because: - It is more extensible (especially for the DIC) - It is more configurable without relying on inheritance - There is a proper validation for bundles But ultimately it's a matter of taste and at the end of the day both frameworks are a small glue on top of Composer packages: you can get what you have in one in the other and vice-versa. Pick one you like and be done with it. Just don't listen to the "Laravel is for small websites &amp; Symfony for big ones" arguments, they are utter BS. /user/TaylorCodes gave some pointers about it but it's the same thing with Symfony: small or big, it doesn't matter, what matters is you what you do with it.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I'm still looking for suggestions to improve it, of course it looks like reddit threads (I will probably take some idea from it) but I really want to focus on PHP world (RFC, vote, ...) It is open source : [https://github.com/Cryde/php-vote](https://github.com/Cryde/php-vote) (futur devs are in the issues)
No
Quite the opposite. From [this site on WordPress usage statistics](https://www.whoishostingthis.com/compare/wordpress/stats/): &gt; In the past 5 years marketshare growth has gone up from 13.1% to 27.2%. That’s all PHP, baby.
But it is slower than other server side language.
Many developers move to JS, since you can use it both on front and backend. Also, Python is hugely popular at the moment. https://insights.stackoverflow.com/trends?tags=php%2Cpython%2Cjavascript
 $framework = Framework::find(1); $framework-&gt;name = 'laravel'; echo $framework-&gt;name; // 'laravel sucks' The above can and does happen because of all the insane magic. Instead of using a getter, they use a magic getter to intercept the magic non existent property. Laravel is not just opinionated, it goes out of it's way to break every best practice in order to be easy to use out of the box. Think globals. Bad? Nope, you're not thinking hard enough, we could fuck them up a bit more by adding a facade layer. Then we could e.g. create what should just be a static method, but it's not, and then bind it to a facade, and call the facade method statically, but it's not ... Don't get me wrong, if all you need is to get up and running quickly then Laravel is great. But if you're building something that might require 1 or more full time devs? You absolutely will regret Laravel at some point.
Actually, that's because other CMSes (most of them also built with PHP) are getting less popular, not because PHP itself is getting more popular. 
If you already convinced yourself then why to waste time of others?
Am just a beginner ,there were a lot of resources on the internet telling that PHP is slow , thanks for the info .
Gotta cite them sources.
Same boat. Laravel was a "try &amp; see" choice and it worked pragmatically wonderful with our company/team. Truth spoken, no particular reason _over_ Symfony, we just tried it first and it was a very good match. That was ~3 years ago and no one is regretting it. I never thought about this in Framework stuff in particular, but sometimes nothing is "bad" (i.e one framework vs. the other), things are just "very good" and there's no reason to change anything 🤷‍♀️ I hear only good things about Symfony (or related things, like Doctrine) and I'm following their development as close as I can but so far nothing compelling emerged to change/embrace anything. Nothings set in stone though.
"Joomla is a framework based on Symfony" I kid you not this happened to me 
Correct me if I'm wrong, I only have a few months of experience with Symfony/Laravel, so I could use a little advice,but: When using the ORM on Symfony, It retrieves EVERY connection no matter the depth of the relationship, and it causes me to have a lot of unwanted data. However, when I use Laravel, only the first level of relation is retrieved, thus improving performance at the cost of simplicity. Example: I want my car. Laravel gives me my car, with my tires, my engine and seats. If I want the pneumatic of the tire, I have to use a sub request, but at least I won't get the hose of the seat, which I don't care about. I want my car. Symfony gives me EVERY little bolt, screw, and features of the car, which produces a gigantic object taking a lot of performance. Would you mind explaining if I'm wrong?
There’s a lot of very outdated information on the internet. 
By default, Symfony's ORM, Doctrine, doesn't do that. Associations default to proxy objects that are populated on access. You can set the fetch mode to eager, lazy, or extra lazy, where they are populated immediately, on access to the containing collection, or only on explicit retrievals of all entities.
If so, it's going to be a very long slow death over many years. 
I am using Laravel for a pretty big project which consist a front facing API for mobile app and a backoffice for management. There is not a single thing that holds me back from being productive. Instead of using facades I could inject the appropriate services in the constructor. Just abstract away the Orm part and you can swap it out with any other orm ( doctrine, analogue orm, even raw queries). Its so easy to extend laravel and swap out default services to use your own, and there was not a single case where I was like "hm this should be much easier in Sf". Both framework are capable of managing a bigger, enterprise application, its all about execution. Laravel is opinionated, yes, but you can configure everything to your own liking just like in sf.
Yep, there's an awesome free series on laracasts about getting phpstorm set up and covers coding standards. Extremely useful and highly recommended even if you're not a Laravel developer: https://laracasts.com/series/how-to-be-awesome-in-phpstorm
PHP is improving, getting faster each release, and getting new features release that greatly improve safety and productivity, so no it's not dying.
Can you explain your code example. Doesn't seem right without an explanation.
You can define a method on your model to manipulate a field on save or read. It can be used to cast a field to another format, or append the word sucks to a framework name. You don't have to use them if you don't like them. [https://laravel.com/docs/5.6/eloquent-mutators#defining-an-accessor](https://laravel.com/docs/5.6/eloquent-mutators#defining-an-accessor)
Symfony is far superior framework. Few examples: * annotations for routes * service locators * autowiring services * param converter without any code changes (unlike route-model binding in Laravel) * compiled container (number of services don't affect performance) * fucking **awesome** forms no other framework even comes close to (look for collections, custom types, extending forms and data transformers) * twig beats blade in features and syntax; when you use {{ user.firstName }} it is irrelevant if user is an object or an array any basically everything else. Java is far better language than PHP; it has generics, typed properties, real annotations... yet people from Java migrate to PHP because of Symfony. It really is that good!
https://trends.google.pl/trends/explore?date=all&amp;q=%2Fm%2F02vtpl,%2Fm%2F07qb81,%2Fm%2F01641s,%2Fm%2F04065k0,%2Fm%2F060kv
For those interested, I would like to point out the existence of [https://packagist.org/packages/zero-config/clone](https://packagist.org/packages/zero-config/clone)
&gt; Doesn't seem right without an explanation. Exactly! PHP does not behave as PHP without a Laravel explanation. In a nut shell, the table columns are magically mapped to the class property, without defining any property or getter, however as an after thought you can add a mutator that will mutate a class property that you access ... As stu753 says, you don't have to use them, but put two devs in a room and tell me whether one of them mutated your property or not.
&gt;In the U.S., Easter is always on a Sunday and I've never been at a business where it was a paid holiday. Well there're many countries that celebrate [Easter Monday](https://en.m.wikipedia.org/wiki/Easter_Monday) which is a paid national holiday in at least the Netherlands (regardless of business). But whether it's a paid holiday isn't relevant to /u/LucidTaz's request, it's about other holidays based on Easter's date. The actual day of celebration may be differ a week, so hardcoding wouldn't be ideal. 
**Easter Monday** Easter Monday is the day after Easter Sunday and is a holiday in some countries. Easter Monday in the Western Christian liturgical calendar is the second day of Eastertide and analogously in the Byzantine Rite is the second day of Bright Week. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Don't like magic in my models too, but that seems like a very tiny issue to write off a whole framework on.
&gt; Laravel's ORM suck. ACK. It doesn't support composite primary keys, and probably never will, according to a Github issue. That already disqualifies any potential ORM I might ever use. Doctrine supports them.
I absolutely *hate* the hacked-in annotations. Comments affecting code?! No thanks. 
You have a weird way of saying Symfony is a better fit for highly customized and large projects whereas Laravel is opinionated but simpler.
Don't have to use them if you don't want to. But some of the alternatives suck too (imo). XML/YAML/JSON files for configuration...
I don't think the fact that class properties no longer behave like class properties is a tiny issue. Think about it: I just wrote 3 lines of php and you couldn't understand it. Because Laravel. This is just one example. You could ask wtf is up with facades, or wonder why the workers will overload a server doing nothing, or swear and curse when you realise you can't just change the repo url in envoyer but instead need a new project ... there are better options for any non trivial project.
While I choose to use symfony over laravel, some of the benefits you've listed are quite the opposite. &gt; annotations for routes your routing configuration is now scattered all over the project. &gt; service locators That's not an advantage, especially if we consider the fact that Laravel's "facades" tend to get shit on for hiding dependencies due to their service locator-like behavior &gt; autowiring services Not exclusive to symfony &gt; fucking awesome forms no other framework even comes close to (look for collections, custom types, extending forms and data transformers) The form framework tries to control how you design your entities either by breaking your model invariants, or adding an indirection layer that should not be necessary for the most simple cases.
I picked up a project I didn't created, maybe my colleague did it. Thanks a lot, your advice is very precious to me.
What about YII2?
What are hourly rates for remote contracting work with U.S. clients in Symfony and Laravel? Just curious, I've used both. I've worked in a variety of frameworks (Spring, Rails, Koa) and don't really have a preference. I like Hibernate and Doctrine. I'm competent with Android native, React Native, and React generally. I like full stack work and will be looking for a new project this fall. The thing that would keep me back from taking Symfony/Laravel work is a perception that pay is a lot lower there than elsewhere.
If MVC is dying then what is the emerging architectural pattern taking its place?
Good bot
Interviews take practice. I've done a bunch of them, and my early ones were a mixed bag. They get easier! Good luck with your interview! It is sometimes a good idea to try getting another one with a different firm, so that when you go in, you don't necessarily want it. Projecting the right mix of keenness, but wanting to find the right fit, and being willing to reject bad fits, is an art form that just takes repetition. 
My guess is they could be referring to HMVC or Single page apps where PHP is just the API for react etc. 
&gt;your routing configuration is now scattered all over the project. How so? Annotations are over controller::method(), it is just in one place. &gt;That's not an advantage, especially if we consider the fact that Laravel's "facades" tend to get shit on for hiding dependencies due to their service locator-like behavior Service locators mean that Symfony will scan files/classes and used as services. This is **not** related to dependency injection, only to avoid writing config files. It is feature made about a year ago, check it out. &gt;The form framework tries to control how you design your entities either by breaking your model invariants, or adding an indirection layer that should not be necessary for the most simple cases. No, it doesn't. Unlike Laravel, Symfony has zero relation to ORM. It is only DoctrineBundle that provides extra helpers (EntityType, Doctrine param converter...)... My entities are never built to accommodate forms.
I'm in the UK here, and I'd be surprised if there was much of a difference in contractor rates for the two frameworks. I'd say there'd be more likely to be variances based on language (e.g. PHP vs Java) and in industry (e.g. automotive vs banking/finance). I would generally imagine Java to get a higher rate of pay based on the perception/history that it is an enterprise language, but there are a lot of variables in the equation. 
(Aside: [the alot](https://hyperboleandahalf.blogspot.com/2010/04/alot-is-better-than-you-at-everything.html) is a furry beast, not a relative measure). 
&gt; Service locators mean that Symfony will scan files/classes and used as services. This is not related to dependency injection, only to avoid writing config files. It is feature made about a year ago, check it out. Lets not do what we're criticizing Laravel for: using established terminology to refer to something else entirely. Service locator pattern is related to dependency injection by the nature of being the exact opposite of it. Both of these are examples of a service location ```PHP,tabs=4 $this-&gt;container-&gt;get(SomeService::class)-&gt;do(); // Symfony Some::do(); // Laravel "facade" ``` &gt; No, it doesn't. Unlike Laravel, Symfony has zero relation to ORM. Last I checked, neither does Laravel. &gt; My entities are never built to accommodate forms. Can you provide some examples of your Symfony form and relevant entity definitions and code? Specifically "create" forms that manage to preserver entity invariants (e.g. requiring all non-optional fields, like id, during construction) without additional boilerplate and indirections. 
Currently, annotations in PHP *are* just comments. If they add proper language support that would be great, but at present they’re a nasty hack. 
Regardless of what client-side framework you choose, the server-side framework does not matter outside of its capability to implement the necessary interfaces. So if you're using react on client-side, you just need something that can server the initial landing page + assets, and some sort of api over HTTP. *Any* server-side framework can do this well.
&gt; two sense I think you mean "two cents". I imagine this phrase stems from the British aphorism "a tuppence [two pence] for your thoughts", sometimes remarked jovially to a day-dreamer, and it gave life to the idea that a thought was worth two pennies (the currency does not matter). 
The frequency of releases might be similar, but the process and backwards compatibility are differ significantly.
If you're looking for portfolio material to show potential employers, a good Stack Overflow profile is excellent, and is quick to build. It shows how you interact with other developers, and how you tackle technologies that are unfamiliar to you. 
This has been said for past 5 years and still PHP remains same, actually even better. Probably wordpress and laravel are the reasons people still embracing php. Also, each version of php making it way faster, secure and modern.
PHP is a weakly-typed language by definition and idea about removing non-strict comparison operator is just silly, because it attempts to hide core and fundamental principle of its type system. It won't also solve anything, because weak typing is used everywhere across the language, fe. in arithmetic and boolean expressions. There is always an option for explicit typing, like strict comparison, type hinting or runtime typechecks.
Really, if you rely on \`==\` in 2018 and php 7.x then you're quite simply doing it wrong.
I use NetBeans 8.2 and like it. I'd be tempted to bump up to 9.0, but it seems to be just one download, rather than a choice based on language. Does anyone know if this will be the new approach going forward? I don't want to load into RAM more stuff than I need (e.g. Java building tools). 
I read on the internet that PHP was dating a French model.
Some of my personal highlights of Laravel: * The Model class is an absolute god object. \[252 methods\]([https://laravel.com/api/5.6/Illuminate/Database/Eloquent/Model.html](https://laravel.com/api/5.6/Illuminate/Database/Eloquent/Model.html)) in a class may be a new world record. * About those methods, none of them is private. Why? Because of some dogma that the authors believe in. So yeah, there are 252 methods that can break your application if they want to change them. * Well at least the methods are as well defined as they could be, right? No, they are not. Again, by the author's beliefs, they don't use type hints or return types. Visual debt or whatever...
Loose type causes bugs. You don't have to take my word for it, there's a reason you don't use PHP for mission critical applications.
Why does it matter? They work the exact same way. 
I just prefer Symfony. Started using it before it was good and have grown as a PHP dev with it. My first dab into Laravel was quite a while ago when lots of blog posts and tutorials started appearing where everyone seemed extremely into this web artisan stuff. I found it intriguing and wanted to give it a spin. Having worked with virtualization, vagrant etc I really liked that their getting started tutorial let you spin up a dev environment (Homestead). The problem was that I had problems at every nook and cranny of this getting started period. Nothing worked as expected and I spent way too long just getting started with it. Since then I've only given it a couple of half-assed attempts, guess I'm still colored by the extremely bad first impression. I also strongly dislike a couple of ways Laravel does things (like Eloquent). I know you can substitute out most of this stuff, but at the same time if I'm disagreeing about basic design fundamentals then maybe it just isn't for me.
&gt; Can you provide some examples of your Symfony form and relevant entity definitions and code? Specifically "create" forms that manage to preserver entity invariants (e.g. requiring all non-optional fields, like id, during construction) without additional boilerplate and indirections. I've read this like 6 times and I honestly don't know what you're on about. Can you give a code example describing what you think is a problem?
Ok, if your primary values are meaningful values, and joins can be avoided. That makes a lot of sense. The composite keys I mainly run into is junction tables having just two (int) FKs, the primary key bring a composite of both FKs. Then the additional primary column is pretty harmless imo.
I worked in a SaaS company for about ten years, ending around five years ago. I had a couple of long-term (&gt;1 year) contracts that came from prior business contacts. My current project came out of the organization reaching out to me based on some posts I made on Reddit. I'm planning on getting much more organized about marketing myself this autumn. I plan to take some time off and polish an open source project I've worked on for a few years, and generate some blogging content. Getting involved in Facebook groups seems (at least for me) a good way to reach and understand the market I'd like to focus more on and get some referral work. Having contacts with agencies doing consulting work seems good too. I don't have the resources or skill in full project management to really take on very big projects myself (one-person show).
Check the dates of the resources, and the version used. 
I've fixed so many bugs that were caused by using ==, but it's really the type juggling that needs a fix, not necessarily ==. 
Just naming a few examples you have in your head would be enough. 
I don't think this only applies to junior positions. Sure you're expected to know more as a senior, but you can still demonstrate your experience through how you can think through the same problems.
Based on the comments, one of the themes I see is: Laravel is meant for prototyping/small tiny web sites and symfony is for serious developers and real web applications. I disagree with this, but Id love to hear your thoughts (which seems to align with my statement)
I often see positions where they work with either symfony or laravel
You realise the example you gave can just as easily be done without a framework, right? Seems to me your totally disregarding an *optional* framework because of a core language feature. Bizarre.
Lots of people are going the middleware route by using micro frameworks like Zend Expressive or Slim PHP Framework.
Yes, even though that's another, related issue: not using natural keys (like the ISO code for the `languages` table) whenever possible, but _always_ surrogate keys. It's a disease among programmers, who abuse RDBMS as dumb storage for consecutively indexed object data, mostly ignoring the "relational" part. Those people would be served much better with something like CouchDB, because then they don't even need a fixed schema and can just put in objects any way they want.
I haven't used PHP in a while, so maybe I am out-of-date, but back last time I used PHP one of the things that struck me about the PSR specs is precisely that the two biggest frameworks didn't use significant parts of them, for example Symfony didn't follow the PSR for the Request/Response objects it used its own. I vaguely remember Symfony had some adapter that converted a Symfony request/response into a PSR one (with significant overhead), but that was it. Do Symfony Requests/Responses now follow the PSR?
Amazing, I had no idea!
For me, laravel uses symfony at its core. So i felt like it was another layer that i didn’t want to worry about. So i just used symfony directly and it’s been great. Laravel is by far the most gorgeous frame work I’ve seen, but i just didn’t want to add the extra. Symphony is also not your typical framework. You can pick and choose components that you want to use for the project at hand. 
Typical entity definition used with symfony forms looks like this: class Entity { private $id; // unique, non-null, and should never change private $displayValue; // unique non-null public function setId(IdType $id): void; public function getId(): IdType; public function setDisplayValue(string $newValue); public function getDisplayValue(): string; } Note the lack of constructor that ensure presence of valid $id and $displayValue values. Until both `setId()` and `setDisplayValuie()` are called, the entity is *invalid*. It also allows anyone to change the identifier of the entity. Adding `__construct(IdType $id, string $displayValue)` and removing `setId()` breaks the out-of-the-box integration with Symfony forms. To get around that, you need to write boilerplate that you might as well write directly in the route handler (the place that converts the incoming HTTP request to a meaningful domain interaction).
If Laravel was a "terrible mistake" there's a very good chance Symfony would not have been the right choice either. I can see some situations where Symfony might be a better fit than Laravel, but none where one is a good choice and the other is a terrible idea. They're quote similar at heart, the only real difference IMHO is Active Record vs Data Mapper, but you could use doctrine in Laravel or an active record ORM on Symfony if it turns out to be necessary.
As they aren’t part of the actual language, you can type gibberish in there and the file will parse and execute perfectly fine. Then later something will parse the comments, find your gibberish and fail in stupid confusing ways. 
We are currently using Laravel for our product and have begun to somewhat regret it. We like the routing layer and some parts of the fast moving nature of the project, but we honestly just dislike Taylor and his “apprentice” as we call them. I can’t (or won’t) remember all maintainers by name, but especially a single guy stands out as pure toxicity for the Github threads. Taylor wants to do good, but it’s clear that he needs the help and he should be taking in more feednback and not running it all as a one man show. We don’t think they are the right people to run the project, but what are a small dev shop going to do with that opinion? Forking is not honestly an option. We honestly respect the guys at Spatie more, I kinda hope they would kick some more ass on the core framework (also in discussions) some day, but we all gotta eat and not only do community service. We’ve kinda grown into laravel by now and knows the ins and out. Some day a symphony rewrite might come, but not all is lost if you stay away from facades and a trillion helpers. The routing layer we really like, and we use it in some fancy ways. The model binding is 95% factory OK, but we added some magic to make controller parameters optional because we are a multi tenant system. We might have a binding for “company” in our route but doesn’t care about it inside all controller functions. One of My worst gripes is of course Eloquent magic. You literally just have to turn off all kinds of linting around these models, unless you specify all properties manually using PHPDoc. Guess what we are doing... :) a tool that could grab these from migrations would be great #justSayingGuyWithTooMuchFreeTime. Another gripe I have is as a security minded developer. I take this shit seriously. And laravel doesn’t. The other day they finally noticed that running serialize/unserialize everywhere might be a horrible idea when doing it on user input. Yes, they signed their cookies before reading them in / out, but how is it people are supposed to rotate that app key again? I think the entire encryption scheme in laravel is god awful and the gals over at Paragonie probably wants to rip their eyeballs from their sockets if they ever closely auditted it. What use is a single master key for the entire app, if you can practically never rotate or replace it? No information about the key or algorithm is ever stored with anything encrypted. This app is used for signing and encryption/decryption of everything, and it usually lives in an .env file from day 1 to the death of the project. Oh btw. The best part is that laravel uses pure OpenSSL functions right beneath, instead of abstracting the complexities of security to a library like Halite (or anything else if they want more backwards compatibility which they don’t seem to care about however - one part we are fine with btw!) Have I begun to mention the “minor” updates breaking the application or simply changing behaviour? What about the horrors of Homestead (gotten a lot better tho, but at one point we were ..... close to doing a real quick vagrant / ansible setup) And don’t even get me started on Laravel Forge. Not a part of the framework but it’s kinda being pushed as Taylor owns it. I just want to say: with the observable security in laravel core, and the amounts of private ssh keys currently stored on Forge/Envoyer, being run presumably by Taylor himself (with help?), I’m staying the fuck away. All goodies in one basket, there is sugar on top and wild animals on the internet. I don’t know if I got it all. Might edit the comment further when my blood pressure drops. It’s not all bad, but the annoying parts are really bad. We like the speed of Laravel, but I just think that they should sometimes slow down, listen a little more before a single maintainer decides it all, and possibly be a little stricter with the changes they let in. Idk. In all honesty we like it overall, but are seriously considering an open source project, for ourselves and friends, that will be called UnfuckLaravel, undoing the bad parts and pulling in some good stuff, as a CLI tool. Is it a great idea? No. Not at all. But we have this weird to do it, at least as a way to let out anger sometimes. Will probably never take off heheh. ....
After reading this thread my mind is kind of blown. I have used both and really enjoy programming in Laravel. I’ve used Symfony but realize I’ve actually never worked on a Symfony project that was set up logically or consistently. The Symfony learning curve is quite steep and the amount of configuration in various formats (xml, yml, annotation) and differing syntax with dynamically injected services can be really frustrating, especially when you have, in the same project, multiple developers doing things whatever way it makes sense to them, and they’ve all used different techniques, yet they all work (and none of the dudes that wrote it work here anymore) and you have no time to refactor it. I guess the same pitfalls can be problematic for Laravel projects but Laravel code just seems more elegant to read. I disagree with blanket statements like “if you pick Laravel you’ll be sorry eventually.”
PHP annotations are abomination, do not use them for serious projects. They turn comments into magic code, this is never a good idea. Also many times when annotations are used, they break SRP as they put configuration code into the underlying class itself, ie touting logic into controller. Read this article to find out more about why PHP annotations are a horrible idea. https://r.je/php-annotations-are-an-abomination.html
&gt; The framework they use; know at least what it is Hopefully they aint using an outdated framework like CodeIgniter 2, I know some old web applications still do. 
PHP has many issues as a programming language, but speed isnt really one of them, at least compared to other dynamic programming languages like Python and Ruby. 
I see, I am starting to like the idea myself, still trying to figure out how to make it work in an existing web projects with index.php. The fact that it creates artificial features atop of PHP may seem dangerous to some developers, but if so many seem to feel comfortable about Symfony's Annotations, I dont see why its a problem. So long as the generated code is fast enough, all is good. I have one recommendation though, for features currently in PHP RFC, ie. property accessors, short closures, its better to match their syntax with the RFC's. Just incase these RFCs are ever implemented one day, the developers wont be confused with the difference in syntax. 
object oriented design ... 
Don’t use blade if you’re using react. Abstract client/view logic from backend and let them communicate using an API. Trying to use both blade and react at the same time is getting the worst of both worlds. 
&gt; you can type gibberish in there and the file will parse and execute perfectly No it won't. You'll get exceptions. &gt; Plus, no syntax highlighting since it’s a comment. Use a proper IDE. &gt; Plus, no autocomplete (unless you have some special magic for your IDE/Editor) Use a proper IDE.
You are a little mistaken here. First, at least with Doctrine, you never set the ID on the entity in this way. Doctrine automatically handles this for you in the background, unless you change the default behavior. Secondly, Symfony doesn't give a shit what fields you set on your form. You don't even need an ID field; it doesn't care. You seem to be confused about what parts of the system are actually core Symfony, and what parts are pieces of third-party bundles. No part of Symfony requires that you even have entity objects, let alone an ORM system.
Just to add a counter point, our web app is scaling just fine using AWS everything is super decoupled and scales beautifully on it. I'd have to assume people who say it doesn't scale either didn't decouple or aren't people who should be in charge of scaling a web app. Ours supports over 250k unique users a day and growing and has very intensive resources for certain tasks. 
Commented below on another thread but also another data point. Laravel on decent scale (250k unique a day) and couldn't be happier. 
I can't figure out how to do the post description anymore, so here it is: As a longtime contractor I know that I have to find new clients even if I have plenty of existing clients/work. So when a new client asks me what my rate is I usually tell them that they have to pay more the more hours they want me to work per week, e.g.(not real rates obviously): $1/hour = I can do 5-10/hours a week for you $3/hour = I can do 15-25/hours a week for you $8/hour = You can have me full time I guess the idea is that the highest paying client gets priority and more hours. But a lot of the time this is counter intuitive to the new client. So how do you structure this situation?
Tbf.. wordpress is also the reason many people hate php... Just a horrible piece of software imho... 
I see it the other way. The shorter number of hours pay more/my full freelance rate. If they want to go up to 20 hours a week for a long term recurring basis then I'd offer a discount if they asked. If they wanted me full time then they'd have even more ability to negotiate my rate. By paying for more hours they're already paying you more. The balancing act is that you should be giving all clients the same priority because you're only working the number of hours they pay you for. If you're taking a phone call then that is time. If you have a minimum work period, like say you don't work in less that 60 minute segments, then their 5 minute phone call to get a status update while you're out running errands just wasted 55 minutes of paid time since you're not able to fill the rest of that time with work for them. Setting and sticking to clear rules and boundaries shows your clients professionalism and will make them respect you and your time even more while you're giving all your clients the same level of respect and priority regardless of the number of hours they're paying you for. 
What makes it horrible?
I might be 2/3 of the way there. I started my own framework based on random tidbits here and there, decided I should learn laravel, realized they did a lot of stuff in really cool ways I wouldn’t have thought of, but other things I wouldn’t want in every songle project. The stuff in laravel that i have appropriated is all written completely differently under the hood. For instance I wrote the router from scratch in an afternoon so I know theres no way its the same. Models i have inheriting from query directly instead of acting as a query factory. Injection generally takes place in constructors behind the scenes, as I don’t have the need to hot swap different plugins. So there is no container at all. So there are a few differences under the hood and a few fundamental differences and I’m stuck in a perpetual state of “almost done”.....
It was intended to bridge the gap between people who only have office-experience and reduce the need for developers. But it ended up being too difficult to use for people without programming experience, while it makes most things very complicated for people who do have that. Originally, it used to be a blogging-software that was extended over the years and in my opinion shows clear signs of outdated practices. But the thing I hate most about it is that it's so horribly overloaded. Thousands of things that you deactivate because you don't need them, but they still are there and use up space and time. That all wouldn't be as bad as it is, if not most of the companies that actually sell that stuff hacked wordpress, rather than develop on it. Not only do they not get the most out of the software, they are one of the main reasons why wordpress installations are still the most common target for attacks and most common distributor of drive-by malware. And there are far too many ways to get root access without actually having root access... you need to be behind updates more than someone still running windows95... well.. if there still were any updates for win95... 
I believe this is the best model instead. Billing by project could be painful when client wants more features or make any changes by the way of project. Billing by hour is the best, you not became hostage of client and him don't became yours. Both parts could end the contract whenever they want. 
&gt; No part of Symfony requires that you even have entity objects, let alone an ORM system. No part of my example mentions doctrine or any ORM. That being said: &gt; You are a little mistaken here. First, at least with Doctrine, you never set the ID on the entity in this way. Yes, doctrine doesn't go trough the "normal" object creation process **when creating entities for existing db records**. However it is not doctrine that handles creation of new entities that are yet to be saved to db. It's going to be either your code, or in case of the "Create new record" type of form, the form component and/or callbacks to your code from the form component. In the later scenario the `Entity::__construct`. I order for the form component to be able to call it correctly, the constructor must take no parameters (breaks invariants), or there needs to be a custom data mapper registered with the form. Of-course, we could simply let the form deal with an array instead of concrete type, but then, what does the form component do for you in exchange for the indirection that it adds while reducing type safety? * Automatic CSRF protects, that you can't forget to enable for some form (that's a significant plus, but it still relies on you always using the component for all your user input needs) * HTTP input validation (different from entity validation), this can be just as easily done inline in the route handler * Easy rendering in twig with `form_*` helpers (this is nice when you don't need individual customizations for all/most of your forms, but can get in the way if you do and could be replaced by a set of twig macros instead) 
You realize that you can just create your object before you add it to the form, right? So you can have your complicated `Entity::__construct` and just create it yourself before the form. Again, Symfony has no opinion on this stuff.
In the code they will do like $model-&gt;func() and you can’t find the function anywhere in the model because it’s using a magic function to create some other object and call it’s methods... 
I appreciate your reasons. However, I already charge by the hour. I've had clients pay for 40h/week before. What were they paying for? In that case it was someone to get them into a situation where their system would operate the way they wanted and they wanted to know that I would be on-site with them at least half the time. So paying me to work full time made sense. Now, I work on more of a project basis but I still have an hourly rate. It has made me very aware the cost of my bad estimation. I had a couple of projects that exceeded my time estimates. Since I had people willing to pay by the hour and who paid quickly, guess whose work got priority? Saying "I don't trade my time for money" sounds good in the abstract and you're absolutely right that charging for time can make the person paying think in terms of cost instead of value. But when you have someone who is willing to make sure you get paid more when you do more work than you estimated would be needed vs someone who is going to just pay you a fixed amount despite overruns, who do you think gets priority? Over time this has become (for me) a process. There are not many people working on the platform I'm working on, so I started with some nice contracts where people understood right out of the door what my value was. As people want to move to more of a project basis, my est9imating gets better and people gain a better understand the value I provide.
It would be shitty to put existing clients on the back burner because new ones pay more. If you don't have available time slots then don't take on more work. Also, personally, your pricing model seems backwards. I don't change my rates based on how much work I get, but I would be more willing to lower my rate if it meant full time or long term work. I certainly wouldn't lower it for short projects.
What if you consider the money paid an average of the time spent?
I don't know what your point is. Anyone can write bad PHP code. A framework should help you NOT do that. Laravel **encourages** you to write shit code.
Interesting perspective. I work with WordPress on a daily basis for some of the biggest companies in the world. Sure, there are parts of WordPress we'd all change if we could, but there are so many users who depend on its GUI and people who have grown up using it that it's hard to just swap it out for something more developer-friendly. In the end, it's the person using the software that counts. Though WordPress was built using fully procedural code, over time it has had some pretty great leaps that have helped it stay relevant. WP-CLI, REST API and coming soon, Gutenberg, to name a few examples. In addition, there are a lot of ways to hook into the system for developers where we're free to standardize development using namespaced procedural or go fully object oriented if we wish. We've also free to incorporate in unit testing frameworks, linting and take advantage of front-end technologies like React or Angular. And to top all that off, our community is amazing. We've got companies (like the one I work for) that dedicate a huge chunk of developer time to contributing back to the open source community, which helps keep WordPress secure and moving forward. And if you've got a problem you feel like you can't solve, there's always https://wordpress.stackexchange.com. Many of us hang out on there just trying to solve problems as they come up. As far as malware goes, it's par for the course as soon as something reaches a certain level of popularity. Case in point, Windows was the target of most malware not too long ago and then macOS picked up in popularity and now it's also a huge target. It doesn't help WordPress that it's also web facing and easy to hunt down via Google search.
The problem with this pricing model is the overhead and mental capacity you need to keep track of, communicate with, and bill each client. If you can work 40 hours a week and you do 1 hour a week each for 40 clients, think about all the time and energy you're not getting paid for to handle having 40 different clients. Do you think you could even handle that many? You couldn't, there's a max that's hard to ever find. Compare that to the overhead of having 1 client buying 40 hours per week. *Efficiency* is worth something to you: having your hours spread over less clients *Stability* is also worth something to you: having your work spread across more than one client so you're not too vulnerable to one client's problems wiping out too much of your income at once *I recommend setting your rate instead based on how many hours / how many weeks the client is willing to commit to / how much flexibility the can allow in your scheduling.* Charge your highest rate to the client that needs you to work right away, but for who knows how many hours, and it might only end up being a couple hours. Start from that rate when negotiating with a client, being clear that's your "drop everything hour-by-hour rate" and make sure it's higher than most people will want to pay. From there, when the rate sets them back, offer to trade things to bring the rate down: - Can you commit to more hours per week? - Can you commit to more weeks up front? - Can you have a couple weeks of wiggle room to start and/or pause during the project? Never reduce the price your quoting for anything other than the client giving up something that's worthwhile to you, so start with a price they can give a lot of things up from and then work your way down to finding the most they're willing to pay and getting the most help towards managing your overall hustle out of them
I can't add it to the "create" form as I don't have the necessary user-input to populate the mandatory fields.
This is a nice step on the way to [Action Domain Responder](http://pmjones.io/adr).
&gt; For this reason alone it is a cancer Dude. Chill out. Just because Laravel doesn't quite fit your desired workflow doesn't mean it's not a good fit for some else. There's been many hours of work gone into the development of Laravel by not only Taylor but many open source developers. Have some respect. The fact that you say that "facades" are impossible to test shows your a bit misguided on the the topic. I question if you have even written a Laravel application. Check out the docs, assuming you can see past those pessimistic goggles: https://laravel.com/docs/5.6/testing
&gt; I can't add it to the "create" form as I don't have the necessary user-input to populate the mandatory fields. You instantiate the object, and then let the form fields add the rest of the data from the user.
[removed]
That brings us back to not enforcing invariants.
&gt; doesn't mean it's not a good fit for some else Like I said elsewhere, it's a great fit for small or throw away projects. If you are building anything complex then at some point multiple aspects of Laravel will make you cry. &gt;There's been many hours of work gone into the development of Laravel What a great argument. &gt;The fact that you say that "facades" are impossible to test Impossible to unit test. Of course there is a "laravel" way to test something, but like all the other "laravel" ways to do normal things they are stupid and unnecessary but for the fact Laravel did something stupid in the first place. Integrating your test code with your concrete classes is just insane. 
&gt; What? Symfony was used to build Laravel. Many components from Symfony are used in laravel indeed, which is precisely what led to my initial statement : Laravel may not be the ideal tool, but if it's so unfit for your usecase that it's "cancer" and a "terrible mistake", I believe Symfony wouldn't be the solution either, it's still a PHP MVC framework built with the same components. If you weren't able to see that you needed a data mapper or not use Facades untill it was too late, I'm pretty sure you would have had trouble with Symfony too. I do agree that Symfony encourages better practices than laravel and doctrine is better suited for large-ish projects, no argument there. What I mean is you can make good code in Laravel and shitty code in Symfony (I definitely did the latter, and I like to believe I did the former).
Hey, BlueScreenJunky, just a quick heads-up: **untill** is actually spelled **until**. You can remember it by **one l at the end**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Why would you use this? What's the advantage of using it compared to SRP at method level?
&gt; it's a great fit for small or throw away projects I personally run a large community based website, handle stripe payments, millions of users. Only good for "Small throw away project" you say? I'm sure Symphony would also be a good fit, but blanket statements like you just made are misleading and, at worst, completely false. &gt; What a great argument. You just called something cancer, I was simply suggesting to show a bit more respect. Nobody in open source owes you anything. Of course you too are entitled to your opinion, but if your trying to be persuasive there are better ways to approach it. &gt; Stupid and unnecessary Another general statement without any examples or merit. 
delete
Because otherwise OP couldn't turn a simple PHP trick into a blogpost for ad revenue. The whole "Here's how you use this" part that for 90% is just a copy-and-paste of the standard "how to set up an empty laravel proejct" was a dead giveaway for me. Lo and behold, OPs post history is nothing but blogspam for one single blog.
It’s essentially the exact same thing, just that this way there is no need to define @method in the route. It’s an opinionated way of doing what most devs already do. I personally like this approach. As mentioned in the post, the only downside to this is resourceful controllers, but if you’re using the resourceful pattern in your code base the you probably wouldn’t be using SACs. 
&gt; If you weren't able to see that you needed a data mapper or not use Facades until it was too late, I'm pretty sure you would have had trouble with Symfony too. Look, you're either experienced enough to know what you need, or you're not. Lets just say the latter. In this case, in order to fuck up a Laravel project you just follow the Laravel instructions. But in order to fuck up a Symfony project you need to ignore them. This is the main point of difference. Symfony encourages best practice, Laravel shits on it for the sake of ease of use. I'm not saying Symfony is perfect, and there sure are some crappy Symfony projects out there, but at least they use a mapper and POPO, and at least they inject the container everywhere over static/global/magic.
My work uses this approach, I don't see value added with this approach.
Some of the benefits of single-action controllers: * One-to-one endpoint/URI to controller relationship. Nice for organization and separation of concerns. * Can use \`::class\` syntax in your route definitions, which helps with IDE refactoring and usage/definition navigation * In a traditional controller, you might direct inject a dependency only needed by a single method. Your other methods will have that (albeit very minor) performance hit. If you prefer traditional controllers, go nuts. A lot of this is just personal preference. Coincidentally, I *just* [released a Laravel package](https://github.com/cryode/Annotaction) to create and use single-action controllers with a corresponding Route annotation.
On a recent project we defined a function called something like routeAction() which took the controller name and the method name, so a usage would look like routeAction(SomeController::class, “add”), which gives you the IDE rename factoring angle without having to have a single action controller. 
GodDAM
Good question, on my part I've been programming on an embedded Linux a bit like the raspberry Pi, but much more limited. If you want to go bare metal, take a look at the ESP32, it's a really cool little microcontroller. You have WiFi, Bluetooth, dual core, power management and its chhheeeap. Like 10$ shipped development boards. They provide a framework called ESP-IDF. it also supports Arduino if you're into this.
Nice. The `::class` benefit definitely isn't limited to single-action controllers, as you've demonstrated. It just comes in handy to not even care about the method name since you're using `__invoke()`.
The form can enforce all user-given data. If you have required data that isn't input, you just set it yourself before/after the form. I'm really struggling to see where the issue is.
I can't see how this is applicable in practice. How would you bill maintenance? Critical bugfixes that happened months/years later that are hard to estimate? That new feature the client wants finalized monday morning? What you're describing sounds more like salaried work but maybe that's the point.
Wow
The way I see it is Symfony leaves many big decisions up to you. That means it’s enforcing more long-term perspective and more planning (which you should be doing anyways). That being said, barebones Symfony is certainly painful to work around if you’re new, or one-manning, or don’t really care about designing for “menial” tasks, or aren’t really picky about certain core decisions. That’s what Laravel is for. Some people in the PHP community are brilliant, eminent minds who will short of spit on you if you even if you slightly deviate their methods, throwing userbase and dev hours on the table like some sort of dick measuring contest. So they tend to be very vocal against Laravel because they could have made Laravel 10 times better in 100 times less of the time and code if they wanted. (Note: none of them has) Taylor was obviously one of those people, but he went through forcing his particular Symfony framework/vision into Laravel for everyone in the community to obey. But he’s also truly is a helluva dev, and has built a really solid and reliable framework that it fairly scalable if you abide by its rules/opinions. Btw, the best about Symfony is choosing bundles, which for the most part you can also do in Laravel, replacing core functionalities. If you see yourself doing this a lot, maybe Symfony is your better choice after all.
Maybe OP simply had a typo and you could lighten up about it. Not everybody is as flawless as you apparently
&gt; would be a last ditch effort this is but delusion. and a very harmful one. 
Actually, injecting the entire container is considered malpractise in Symfony, you should only inject the services you require.
... no? If your entity needs user input, get it with the form. If it needs non-user input, set it manually before or after form handling. Very simple. Symfony forms just gather user input for the specified fields and, optionally, maps it to a data object.
Can't we all just call functional tests, **functional tests** in the context of a Symfony application. This frees up **integration tests** for when actually testing multiple units working together which doesn't necessarily mean it's fully functional ;) Anyway, nice article as far as tips for setting up testing is concerned. I personally prefer [https://github.com/liip/LiipFunctionalTestBundle](https://github.com/liip/LiipFunctionalTestBundle), since I always functional test against a sqlite file, saves the trouble of running a MySQL instance for testing, especially when you have multiple concurrent tests running all the time and a simple infrastructure. The sqlite file gets cached and replaced between files, I can't imagine this is much slower than a transaction. *Additional tip for people doing actual integration tests in PHP without a DB:* *Check out* [*https://github.com/phpspec/prophecy*](https://github.com/phpspec/prophecy) *if you haven't yet. It is opinionated--yes. But IMHO it is perfect for integration tests. A key factor in all this is the* [*message binding instead of structure binding*](http://everzet.com/post/72910908762/conceptual-difference-between-mockery-and-prophecy)*.* *I don't think prophecy is the better tool when doing unit tests in a code base with sane design decisions and little SoC violations. Dependencies should be very little and test doubles should mostly be stubbing instead of mocking. Better go with PHPUnit when assertions is simply what you need.* *But--when testing multiple components it's actually kinda great!* *- Tests can often break as code changes, usually because of the structure binding. Now go see yourself writing tests for multiple units working together, right? This is where prophecy shines, the odds that you need to rearrange tests because code changes drops significantly.* *- All you should be doing in the end is making expectations on the final destination in the chain of units, for example: 'is this information going to be saved in the end through repository X', and this is what prophecy does best.*
Another Laravel grad student? I said: &gt; **at least** they inject the container everywhere In other words: the worst case in Symfony is still DI, sure it's not great DI but it's DI, it can be mocked out. Laravel doesn't even get to this bar.
Do you think that this approach is good for large projects ?, I think that it will be a huge numbers of controllers 
With SAC you basically make a separate directory for each of your classical controllers, and extract each method to a separate class, using that methods name as a suffix. `BlogPostController::addAction()` becomes `BlogPost\BlogPostAddController::__invoke()` (you may or may not want to use the separate directory). There is nothing wrong with a large number of files. You wont ever see a good practice telling you to cram all your stuff into one file, it’s the opposite — extract chunks into separate modules and classes, so you’ll end up in large quantities anyway. Even if it feels less readable, you can’t avoid it, so you are better off just going along with it. 
It’s more about conventions IMO. I’m not talking about CRUD controllers, but if your default idea is to add just another action to your existing controller just because it operates on the same entity, you’ll end up violating SRP. If you do constructor injection you’ll slowly see more and more dependencies, so maybe you’ll use the service locator instead… And so on. By making a habit of creating a new class for new features you avoid all of that. Your controllers always do a single thing (at least a single action), the dependencies are tidy. What about reuse you ask? You can extract common features to private methods in a single controller. Yep, and that’s probably breaking SRP also. You can always extract it to a „helper” or a service in general to reuse in SAC.
Your and client’s goals diverge when you ask for a fixed price. The client would like to change their mind, add new features, etc. You on the other hand only care about what was in the spec, because you pay out of your own pocket for any new features. Fixed price also puts the risk on you, if you failed to estimate the task correctly or the circumstances change, or the client is troublesome. This can be very costly for low margin work. I agree that hourly rate is problematic (for example, you can’t scale by working faster, by creating an inventory of common tools, etc), but fixed price also has its drawbacks.
Here are the errors I am receiving: PHP Notice: Undefined index: fname in /send\_form\_email.php on line 2 PHP Notice: Undefined index: lname in /send\_form\_email.php on line 3 PHP Notice: Undefined index: email in /send\_form\_email.php on line 4 PHP Notice: Undefined index: phone in /send\_form\_email.php on line 5 PHP Notice: Undefined index: other\_position in /send\_form\_email.php on line 7 PHP Notice: Undefined index: years in /send\_form\_email.php on line 8 PHP Notice: Undefined variable: field\_name in /send\_form\_email.php on line 12 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ I will be honest that I JUST noticed in the error log (as I was typing this) that after making the changes in the code for the first name variable something new happened. The line 2 fname error is now gone, and the changes are very obvious to see in my code. However the main symptom still exists: the email which I receive as a result of this form comes in empty. The field names exist in the body but the inputted information is blank, with the exception of the drop-down menus. I must say, even after noticing that the fname error is no longer occurring the fname field entry still comes up blank. Am I missing something obvious?
Use isset and ternary like 1st line on all variables
Also, do some validation, your passing a variable from posted input directly into email headers. The is extremely easily abused.
Or $array['key'] ?? default on newer PHP versions
Gonna try tonight, in 7.2
Man... you are 100% wrong about how Symfony forms work. You have take lots of assumptions and create new ones making even worse impression. I really can't refute all of that in one single comment here so I will just use the first one; about building entities to fit forms. Let's say I have User with *name* property. In my form, I use $builder-&gt;add('name'). That form can be easily embedded everywhere. But for sake of argument, I changed entity to have *firstName* and *lastName*, and I delete *name* property. As long as I still have *getName()* and *setName(string $name)* methods (that will split/join string), literally **nothing** else changes. This is stupid example but you can still see that my entity is completely separated from forms. Symfony will always read methods (getter, adder/remover/setter) first, then public properties (which you should never use anyway, anywhere) and then throw exception if those can't be found. This way makes far more sense when you use relations like EntityType forms; as long as I still have *getProducts(), addProduct(Product $product)* and *removeProduct(Product $product)*, the exact relation is 100% irrelevant to Symfony. And this is pretty common case that I change from many2many to 2 one-2-many relations. About constructors; I honestly can't see the problem at all. And for collections, Symfony is able to instantiate class without calling constructor. Doctrine does the same for last 10 years, it is nothing new as all ORMs does the same thing. 
You can do a `var_dump($_POST)` to see what the $\_POST variable contains. Most likely, your submission form doesn't have a "name" parameter for any of the text fields. Input fields should look like this: `&lt;input type="text" id="sampleId" name="sampleId"&gt;&lt;/input&gt;`
Personally I avoid regex if possible. Too few programmers know it well enough for it not to be a maintenance liability. For your specific problem I would use DOMDocument. http://htmlparsing.com/php.html That approach can be a bit memory intensive so you may want to think about some caching.
You initial string isn't show here, escaping issue? Worst case, add an image :-) But as /u/zanthraxnl said, regex for HTML is asking for troubles, especially if you're not fit in it.
Why are you setting variables for the name? If you want to check if you have all the necessary information just make one if statement checking the availability of the data. I would consider an escape string for the data. I apologise for not giving you a code example right now (on phone atm). Also try this debug: $data['x'] = (isset($_POST['x']) $_POST['x'] : 'I an missing'; And when you do this for all your variables do a var_dump() and a send. I am suspecting missing parameters for the mail function and you are missing brackets on line 2 and 3 for your if statement. http://php.net/manual/de/control-structures.if.php#102060
Could you post the html? 
Here: https://regex101.com/r/D81FyH/1
I agree with the others in this thread that you should really not be using regex, but rather a DOM explorer for this. That being said, this regex will find the correct URL no matter where the Download link appears: /.*href=\"(?P&lt;url&gt;[^\"]*)[^\&gt;]*\&gt;Download\&lt;\/a\&gt;.*/
Because they implement battle tested solutions to common requirements that don't need to be re-engineered.
Thanks. I already using [Symfony DOMCrawler](https://symfony.com/doc/current/components/dom_crawler.html) in my project and the page took a few seconds to load. I need faster solution for this, so I prefer regex as people say regex is faster. Anyway, thanks
Looks fine on my client and browser. But, I added alternative link to the code. Btw my question is solved as a correct pattern has been given. Thanks.
I like using Symfony because it comes with several ready-made tools to get the framework out of the way. Things like routing, dependency injection, auth interfaces, http interfaces, etc. Plus, in addition to not having to build all that stuff myself, I don't have to worry that there's some bug hiding in the framework for some subroutine I haven't properly written tests for. Basically, using a framework means I can spend more time writing business logic than writing foundations.
I personally don't use a framework either as I'm a lone-dev but I think it helps people work in a unified way. If you have a team of devs all working on something, you don't have to worry about one dev doing a certain thing one way, and another doing it a different way. The framework would push them to all do things the same way. I think it also wraps up a bunch of common things like auth and sessions so you don't have to make your own. 
Thanks a lot! Anyway, can you help me understand why my pattern doesn't work? Which part I did wrong? So I can understand better about regex.
The idea behind those tools is that everyone doesn’t have to write code to do exactly the same thing (routing, http request/response handling etc) and they can focus on writing the code that is unique to their application. Because these tools are open source it also allows for a lot of people to contribute to make them better, more robust and tested. It also allows people to collaborate on applications because they can apply the same knowledge of the common components rather than having to learn another way of doing something for each project or employer. 
I only have so many hours in the day. While many things require creating from scratch to meet the specific needs of my projects, a lot of them do not, and for those I rely on tried and tested software components that have had far more time put in to them than I could ever commit to each individual subsystem. You don't engineer and build your own car before driving to work in a morning, do you?
Thanks! This works too. Do you kmow why mine didn't work as expected? I want to understand what I did wrong. 
It is valuable to understand the underlying mechanics of any resource you depend on. But it is a waste of time and effort to engineer something that has already been solved. Your time is better spent focusing on your specific business needs. 
Good question! I think the utility of modern framework is proportional of jobs of programmers need to do. A lot of works does’t need perfect setup or advance engineerig, so it esay to use code ready to use!
Because constantly re-inventing the wheel is a ginormous waste of time, and someone has to pay for that time. Sounds like you are in it for the feels rather than the results. In a enterprise/corporate environment that just isnt going to work. Unless you can put together a convincing presentation on why you should be allowed to take the first few months of the project to roll your own framework instead of using Symfony or Laravel. Sure it will probably have less features, more bugs and possibly some security holes. But hey, at least it was home grown and best of all no MAGIC. Of course, 10 years later you're going to come back to it and all that nasty ass code you are typing in today is gonna look just as much like magic as some pre-built solution would. In a freelance/contract environment, if you have to built something to suit the needs of the project fine. But doing so just for the feels and then charging people for it.
My concern is that ready to use handlers and db connections are visible to a lot of people and also their bugs.
Wait what? :D
Having to define setters and getters/setters that match specific naming convention instead of modeling meaningful domain interactions is an example of how the form component dictates the design of entities.
&gt; My concern is that ready to use handlers and db connections are visible to a lot of people and also their bugs. Security by obscurity isn't better. what code base is more likely to be bug free? a codebase from a popular framework that has millions of users and 10,000 experienced contributors, or a codebase developed by you and your 5 developer pals,
At that stage you'd be better off just using functions.
You can't just bill by hours. Ultimately you need to tell you client how much time implementing this or that feature will take, so ultimately it makes no difference. if I contract a construction worker to build a fence I will expect that guy to tell me exactly how much time will it will take and i'm not paying a cent more while i also expect the fence to be done in expected time.
I think the confusion is coming from the fact that I am assuming cases where the forms knows about entity type and handles mapping between form and entity. If instead we go with the simple example where data is just an array, the benefits of the component are severely reduced to a point where I'd rather just deal directly with Validator. Same amount of boilerplate on the PHP side, but admittedly more up-front work on the templating side (setting up the macros/partials) in case of simple forms that don't need heavy customizations.
Is there really any benefit to having the redundant prefix on the class outside of better support for some dev tools that don't handle same classes names under different namespaces well?
I'm not an expert in security so take what I'm about to tell you with the right weight. In general, there are no serious security problems with query managers, security is closely linked to how you use these managers in your app. If you want you can create custom wrappers that are above these managers to differentiate them from others. Even in this case it is difficult to guarantee absolute security, what is done is to ensure sufficient security that is already provided by the work done by others. In my opinion you do not have to use a famous framework if it does not put you at ease, there are compromises. Personally I have created my own [framework](https://github.com/XaBerr/JATE) that is used in the company in which I work. It has the advantages, personalization (since it is mine I can modify it as I want), framework (we avoid to redeem ready code). For other people, using a public framework can be a convenient choice to create a long-lived standard.
That only works for simple routes that don't have any dependencies like a repository or logger.
If that happens, then someone will submit a pull request to fix those bugs.
For people who are asking themselves why: The author of that blogpost didn't even make use of the main benefit: Controllers with a single action (let's just call them Actions instead of Single Action Controllers) can implement an interface such as `ServerRequestHandler` of PSR-7. `__invoke()` is bad! You can't define an interface on `__invoke()`, nor on functions like in languages that aren't stupid. When all actions implement the same interface there is no need for reflection. `$controller-&gt;$action(...)` still uses reflection internally to check whether the method exists at runtime. `$action-&gt;handle($request)` does not, allowing for slightly better routing performance and, more importantly, it's possible to tell at compile time that a route can be handled, i.e. that an action exists and has the right parameter and return type. Less error prone. Also, there is already absolutely no benefit of scramming actions together into one controller. An action does **never** depend on all other actions. If an action depends on one other action just define this dependency through either extending said action or injecting it through the constructor. The explicitness of dependencies improves the developer's ability to make the decision whether something can be removed / should be changed.
Who says that? You can define your own accessors, I used defaults in example as they make perfect sense in 99% of cases. But I give up, there is no point in explaining things to you when you can't understand the basic point of my comment.
I wonder how your thinking could translate to using php itself ? PHP **is** a ready system. Picture those tools as a set of extra PHP features. That might help your understanding. 
Is your code fully test covered, stress tested, peer reviewed and fully documented? Is anyone that is going to start working with you instantly going to be familiar with the router, db abstraction, view rendering, dependency injection container, service registration, session integration and form handler? I'm guessing no, and that's reason enough to use a framework. When you start a new project do you have all those features completed by just pressing enter because you used a framework?
Do you use Apache/Nginx? A version of Linux? PHP? MySQL? All those are open source and visible to a lot of people. Why don't you write your own operating system, programming language, database and http server? What's the difference between those and a framework?
Who would be able to see my DB connections? Why should I be spending time and effort to develop a database library, a router, a dependency injection container, security, etc, when I can use open sourced well tested libraries instead? These libraries were designed using well established practices and patterns and bugs are actively discovered and fixed by the community. I can use these components and focus on the details of my app instead.
- Recycling solutions. Whatever you just came up, you're going to do it again sooner or later. Having a ready set of solutions ready to be integrated is a life saver. - Easier to improve. Whatever you did, has bugs, and/or the user want something new. You can copy and paste till kingdom come, but it's error prone. - Documentation. If someone else is making the framework, and documenting it, it's much less that I have to do. - Easier to find help. 
&gt;I am not saying that laravel or symphony or any other tools are bad but a bit pointless if you know what are you doing. &gt; &gt;Be nice please. Thank you for providing my chuckle of the day. You start by insulting all the developers that use frameworks by stating that they don't know what they are doing. And then ask responders to be nice. Very funny.