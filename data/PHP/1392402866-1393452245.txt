I agree that spurious PHP open/close statements have no practical impact on operational performance. Maintainability and readability? Absolutely, but that's not the question. However, the scale of your bet makes me curious. One million tags vs one query? Okay, how to test? With or without opcode caching? A for loop that closes then opens tags, or a file with a million open/close? Any IO or just a comment? One query for the timestamp, or a query for one field by primary key in a small table? Remote db with 1ms latency or localhost? Genuinely curious. I would never bring this up in a real performance audit. EDIT: Using stock PHP 5.4 shipped with Mac OS 10.8, no opcode caching. Three tests; a single localhost database connection and single query, then display time diff. The second test, loop through closing and opening PHP tags a million times, then display time diff. The final test, generate a file with a million open and close PHP tags (actually, slightly more) that displays the time diff at the end. **Database:** &lt;?php $start = microtime(TRUE); $connection = new mysqli('localhost', 'root', 'root'); $result = $connection-&gt;query('SELECT UNIX_TIMESTAMP()'); echo (microtime(TRUE) - $start) . PHP_EOL; Execution (gets the average of 100 runs): COMMAND='php ./database.php' time for i in {1..100}; do $COMMAND; done | awk 'total += $1 {print total/NR}' | tail -1 Result: 0.000629804 seconds, 6.969s real-time. **Tags in loop:** &lt;?php $start = microtime(TRUE); for ($i = 0; $i++; $i &lt; 1000000) { ?&gt;&lt;?php } echo (microtime(TRUE) - $start) . PHP_EOL; Execution: COMMAND='php ./tags.php' time for i in {1..100}; do $COMMAND; done | awk 'total += $1 {print total/NR}' | tail -1 Result: 0.0240438 seconds, 9.182s real-time. **Million tags in file.** I generated the file. TAGS='echo -n &lt;?php ?&gt;' echo '&lt;?php $start = microtime(TRUE); ?&gt;' &gt; million.php for i in {1..1000000}; do $TAGS &gt;&gt; million.php; done echo '&lt;?php echo (microtime(TRUE) - $start) . PHP_EOL;' &gt;&gt; million.php COMMAND='php ./million.php' time for i in {1..100}; do $COMMAND; done | awk 'total += $1 {print total/NR}' | tail -1 Result: 0.00000575542 seconds in PHP, 15.366s real-time. Fun fact, the resulting file was about 8MB. **Summary:** * PHP execution: A million open/close tags are faster than a single database query, which is faster than a million iterations of a for loop with an open/close tag in it. * Real-time: A single database query is faster than a million iteration for loop, which is faster than a file with a million open/close tags.
What do you mean exactly by "doesn't seem to play nice with composer autoload"? In the repository you linked to, there is no [composer.json](https://getcomposer.org/doc/01-basic-usage.md#composer-json-project-setup) file in the top-level directory. You need such a file in order to support composer. Without it, your library will not be able to be included as a dependency of other composer projects. Additionally, the convention in PHP autoloading is to make sure that the name of the file matches the name of the class it contains. Right now, your file is called "configuration.php" and the class it contains is called "Config", so it would not support autoloading without a specific configuration override in your composer.json file. I would suggest renaming the file to "Config.php".
" a lot of people are doing maintenance programming on shitty codebase for which a rewrite is nowhere in sight. Not everyone can work with the latest libraries and with good process." I ignored that part because I wasn't sure how it tied in with the first sentence. Not everyone needs to work with the newest shiniest things... PSR-4 coming out and becoming recomended, while PSR-0 is deprecated does not mean PSR-0 is going to stop working, and doesn't mean people can't ever use it. It doesn't mean Composer is going to delete support, and doesn't mean your other favorite autoloader will stop working. New things come out. New things are preferred. Old things EVENTUALLY die... at some point. There is no rush to upgrade.
Overlooking the choice of attributes and things here, I found doing this kind of thing really helpful when learning OOP. In particular cars are quite interesting to model. So at the moment you're just storing strings - you might think about creating objects that hold further information - a bit like how you'd structure a relational database. For example, we'll take something a little less contentious like a person's age. The actual data you might want to store is the date of birth, then the information you can derive from that is their age, relative to a date (which might be today). class Person { private $birthDate; public function setBirthDate(DateTime $date) { $this-&gt;birthDate = $date; } public function getAge(DateTime $relativeTo = null) { if ($relativeTo == null) $relativeTo = new DateTime('now'); return $relativeTo-&gt;sub($this-&gt;birthDate); } } $person = new Person; $person-&gt;setBirthDate(new DateTime('1970-01-01 00:03:50')); echo "Age: " . $person-&gt;getAge()-&gt;y; echo "Age on April fools day: " . $person-&gt;getAge(new DateTime('2013-04-01'))-&gt;y; It's definitely worth expanding this. I would try and get rid of the gender-specific classes (strictly speaking, all people have a bum, foot size, beard and adams apple - `$beard = new HairType(length=0.01, growthRate=0.001)`) and consider making everything a bit more abstract - people have 0 or more feet (so `Human::$feet = array()` of differing sizes (`new Foot(size='28B')`).
Why do I think this new study guide is only free if you have already purchased the exam voucher (they are now charging for new study guide)? Anyhow will email her. Thanks.
Off the bat, I'd say Human should be an abstract class. Non code-related I'd say lose the sexist "bum size" property.
It's funny, I love JSON as a serialisation format but it really annoys me that Jordi went for JSON. This is because there are times where you have to do something out of the ordinary to work around an issue in vendor code &amp; it would be _really_ valuable to be able to add a comment explaining the rationale &amp; JSON doesn't permit this. Despite this, the "just make a damn choice" point is spot-on - people will complain some but the value of defining an orthodoxy outweighs the value of choice in these cases.
I never said anything about companies; I specifically used the term "projects" because some projects with a lot of public exposure and a desire to market themselves as progressive in the PHP community will likely latch on the style guide and subtly market their adherence as an advantage compared to competing projects. So, you might gain some initial push via a project like Laravel agreeing to move their codebase to PSR-2 just so they can throw more "illuminatory" buzzwords on their website, but any such move would likely be followed with a lot of internal dissension and a later, quiet withdrawal from adherence when the effort proves too disconcerting for such minimal gains.
Typically the study guide is $30. http://shop.zend.com/en/php-certification.html/ (At least, I'm assuming they are sending the $30 one and not the $1000 one) 
Right by ME, of course! I was joking about the right/wrong thing - it's just my opinion... I understand either choice in either scenario does the job of defining a standard. Your article does a good job of explaining the challenges of choosing one "standard" other another, and the PSR-0 vs. PSR-4 "problem" is a good example. They both work, but is it maybe the case that one works better than the other? Or is it maybe the case that some things are best left unstandardized? 
Yup - just got the email saying the same thing. Updated the post.
For the PSR-0 v PSR-4 part, its purely this; PSR-4 does what PSR-0 did, minus one bug, and plus one feature. So there is no need to keep the old one around. That's not a coinflip decision, that is an old thing replacing the new thing. :)
Ok. I've never seen that happen. There are projects that have said "we are PSR-2" and then turned out to be out of compliance with the rules, because CodeSniffer was a little dodgy on its PSR-2 rules, but we fixed that. I've never seen a project take on PSR-2 for shiny internet points then drop it, and it's been around a while now. If they do drop it... fair enough. If a style guide doesnt work out for you then don't use it. :)
I think PSR-4 was definitely an improvement and a step in the right direction because it's more flexible and gives the programmers more options on how to organize their classes. My hope is that as these standards evolve they will continue to try to be more flexible than restrictive. This is PHP we're talking about - the language famous for it's inconsistencies. The programmers who are using it don't like to hear that there is only one right way to do something. If we believed that, we'd probably be using a different language. 
What human doesn't have a brain? You should implement brain methods and properties to store things...
So you're openly pirating Zend's non-free PHP Study Guide? Good job buddy. Good job. Reported. /u/jtreminio /u/dshafik Please remove this guy's post - he's posting links to pirated documents.
If you watch internals you'll notice that a huge percentage of conversations recently are about fixing inconsistencies, so that argument will become less and less true over time. :)
Having profiled real e-com apps with xhprof ( facebook's php profiler ), with 20-30 includes + template file processing happening on certain complex pages, i've seen the graphs and charts that xhprof outputs - 90-95% of the time is spent on the DB. The rest of it - the 5% (10% was rare) - would probably have well over 100 php tags (100 open and 100 close tags). And this entire page would be generated in about 10ms-100ms depending on hardware. Of that 5%, 90% would be in arrays, objects, loops, and so on. And if there are 100 tags, For 1 tag you get: 1% of 10% of 5% of 10ms on decent hardware (or 100ms on shared / heavy VPS hardware)
I've never found writing 5+ adapter packages for Logging or HTTP to be fun. I've never found dealing with BizAro_CaPS fun. I've never found dealing with whitespace commits on an open-source project obscuring an actual change or causing huge amounts of conflicts to be fun. The FIG is on that, and sometimes there will be rules in a standard that you wont agree with. PSR-4 has given you back your underscore character, so thats nice. :)
Just an observation. The FIG has been great force for good overall, which is a shame the style guide become such a huge talking point. A lot of that has been a misunderstanding of the FIG's aims and their pseudo-"official" status foisted on them. I almost think something as simple as breaking apart the PSRs into PSR-Interfaces (the auto loader, http spec, etc.) and PSR-Internals (the style guides) would clear things up tremendously by clearly distinguishing between items intended for external consumption and those that are a matter of taste.
He isn't asking what he should use, he's asking about the state of it.
&gt; I've never found dealing with BizAro_CaPS fun You're giving me nightmare-ish flashbacks of searching for bugs in Joomla plugins. Not fun indeed. Thanks to you and rest of FIG for your work. It is appreciated, just throwing my 2 cents in. p.s. whitespace conflicts are not caused by using tabs or spaces, they are caused by mixing the two inconsistently. 
Thanks for all your help. I am basically doing what /u/lisp-case suggested, but it is actually called LTI (http://developers.imsglobal.org/). Basically its a two-legged OAuth approach. They send me their key, the parameters, and their signature via POST. I validate the signature on my end, then return the application if successful. LTI is used in almost all major education web portals because it is simple for teachers to configure. The teacher/admin just types in the url, api key, api secret, and then any custom parameters that need to be passed. It just creates a link in their dashboard, which is a hidden form with custom variables, user information, and the OAuth signature. Once the link is clicked, it just opens up a iframe inside the dashboard customized to the student.
Thanks! I actually was implementing this until I learned about LTI, so this really helped.
People definitely focus on the style guide far too much. I made 3 points in this article, and everyone is talking about 1 of them - the style guide. People have been confused about the FIG for a long time. I made a FAQ, I've been posting progress on here and all over the internet. I've been blogging my arse off and advising articles for NetTuts and all sorts of other sites. STILL people get things wrong. I don't think categorizing PSRs is going to change any of that sadly.
Oh man, yeah sub modifies in-place. Trips me up every goddamn time. I meant a diff.
You could do something like this: `$curl = curl_init();` `curl_setopt($curl, CURLOPT_URL, $URLtoCALL);` `curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);` `$result = curl_exec($curl);` `curl_close($curl);` `$result = json_decode($result, TRUE);` Obviously you will need to load $URLtoCALL. That would return $result as an array of data from the call. You could use print_r, etc, to see the structure of that variable.
So the URL to call would be something that looks like: https://moolah.ch/api/merchant/send right? So where is the form actually being submitted? 
So that would be for the more traditional GET style, with URL.com/whatever?apikey=ABC123&amp;variable=whatever. For POST, you can add something like this: `$fields = array(` `'option1' =&gt; urlencode($answer1),` `'option2' =&gt; urlencode($answer2),` `);` Turn those into something that can be passed: `foreach($fields as $key=&gt;$value) { $fields_string .= $key.'='.$value.'&amp;'; }` `rtrim($fields_string, '&amp;');` Then add a new CURLOPT `curl_setopt($curl,CURLOPT_POSTFIELDS, $fields_string);` That should work! 
Ok, I'll report back!
Ok, so how do I add the data to $fields? Where would I put the equivalent of the name, and where would the value be?
You might be surprised what a mere word change can do. So much of it is based on assumption as it is that a little media "massaging" could go a long ways toward remedying the situation. Style guides really strike at the heart of visceral reactions, though, because the actual process of writing code is intimately entwined with one's mental model of what it should resemble. Even if it literally has zero actual impact on your code, to a lot of people the mere idea that there is document out there that specifies a "right way" to write your code inherently feels like an attack on your intuitive model that was randomly formulated over years of studying poorly-written PHP tutorials and cobbling together working bits of your own. You've tried repeatedly with the logical, forceful approach. I suggest simply dressing the style guides up in new terms that more accurately represent their purpose. If the tone associated with PSR-2 become suggestive rather than insistent (a tone the PSR itself obviously has to take with its multitude of MUSTs and SHOULDs) than I think the obsession will die down as people no longer feel threatened. And yes, it's silly that even has to be considered, but we don't exactly live in a rational world.
One of the more pedantic things I'd like to point out is that all of your classes should begin with capital letters, even those that extend original, possibly abstract, classes. It makes for more consistent code and is more PSR-y. And it makes more sense and is clearer to me, but that might just be me.
And now I wait for the hail of complaints from people whose insecure encrypted transfers start breaking ...
Your patch looks sane. You're probably best-served to mail internals to get the attention of one of the zend opcache maintainers so they can either merge it or sign off so someone else can feel comfortable doing so.
option1 and answer1 (etc) would depend on what the API requires. i don't specifically know what your API service may need, but there are a few commons ones. For example, a service like ESPN requires a key, so option1 could be 'apikey' and answer1 could be 'h27c9dvsdvjnvs7' or some sort of key.
Chiming into point out [http_build_query](http://us2.php.net/http_build_query) which will take care of urlencoding for you and looks a bit cleaner.
I'm getting these errors: Notice: Undefined variable: fields_string in /Applications/XAMPP/xamppfiles/htdocs/bet project/withdraw_action.php on line 20 Notice: Undefined variable: curl in /Applications/XAMPP/xamppfiles/htdocs/bet project/withdraw_action.php on line 21 Warning: curl_setopt() expects parameter 1 to be resource, null given in /Applications/XAMPP/xamppfiles/htdocs/bet project/withdraw_action.php on line 21
&gt; GUI4PHPK 'Coupon code "GUI4PHPK" is not valid.'
Same here. 
 I'd suggest having a look over [Guzzle](http://docs.guzzlephp.org/en/latest/). It still uses cURL, but a whole lot easier and cleaner to use then raw cURL.
I had no idea about the correlation between class name and file name, thanks! Also, I removed the composer.json file from the master branch until I get it working with composer.
I get what you're saying, I really do, but I don't think the name of the PSR itself is the issue at all. &gt; the mere idea that there is document out there that specifies a "right way" to write your code inherently feels like an attack on your intuitive model No official statements from the FIG, on their website, on the FAQ, on any blog posts I've seen from voting members, etc, has ever said PSR-2 is the "right way" to do it. Even PHP The Right Way says "You should pick an existing standard, here is a list of 4 you could use." Some of the community decided to use PSR-2 as a stick to beat other people with. Some of the community decided they didn't want to use it. I don't see anything making any of that different for a new style guide other than trying even harder to educate people about their options.
Nope, the Code didn't work for me .. but, no worries ... i got the book from tor :-)
This is pretty poor. The classes should live in separate files. I'll ignore the echoing of html because that's not the focus. Also, passing more and more parameters to the constructor is just going to get ridiculous. You could probably just use setters for fields that aren't absolutely required depending on your use case. It demonstrates an ultra basic knowledge of class hierarchy but that's about it. As someone else mentioned, you already know the male/female and shouldn't be passing it. Age shouldn't be a string. You're not doing any parameter validation (granted, PHP doesn't have enums). Human should likely be an abstract class. I mean it's ok for the first week of CS 101. It's a decent day-zero understanding. But it has a long long way to go before it's elegant.
Hey do you know the best way to remember if optional hooks are available or not? I check once for each hook and then I remember it in a static variable. Is there any better way to do it?
Oh soo looking forward to PHP 5.5 when I can upgrade my server to Ubuntu 14.04.
No go
Until 5.3, there were a large number of functions, including options for `crypt`, that would not work correctly under Windows because their C implementations existed entirely in libraries not generally present in Windows. 5.3 fixed a lot of little cases like this. Unfortunately there are some useful extensions that simply don't exist for Windows, including [pcntl](http://us2.php.net/manual/en/book.pcntl.php)
As this is an opcache patch, you might be better served by submitting it to the zend optimizer repo. Alternatively give dmitry and laruence a ping ;)
+1 for guzzle; the API is much nicer to work with than cURL alone. /u/gkamer8 Your example will look something line: $client = new Client(' https://moolah.ch'); $request = $this-&gt;client-&gt;post( 'api/merchant/send', null, array( // Your post parameters here 'option1' =&gt; $answer1 ) ); // Submit the POST request &amp; retrieve the response as JSON parsed into an array $data = $request-&gt;send()-&gt;json();
This new code doesn't work anymore, I went to the link, logged in, added it to my cart then applied the coupon code, As soon as I did I got am error saying the code was no longer valid. :(
lol
Agree that we need a code first approach, which is why we have the folks behind Buzz, Guzzle and Requests putting their advice in. The guy behind Guzzle is basing the next major version around the HTTP Message PSR and the same will apply for the HTTP Client PSR that will follow. Making a basic interface does not mean it has to cover EVERY single feature. Getting methods in for the basic get/post/put/patch/delete/options/header/etc is a lot of it, and they take a URL, some headers, data/params, etc. It's not going to be impossible to cover the basics, then let people add on top of that, just like the logging PSR. :)
Some people were trying to get fig.php.net for the group and others were trying to get PSR-0 rolled into PHP itself. That may not have helped, but I do feel like that was before it was popular enough for the masses we're discussing to have known about it, but I might be wrong on that. Either way going forward I'm all about people not being confused over that stuff, and will fight against anyone who tries to make us look super official because thats dumb.
We use Guzzle at work in our symfony2 projects and I must say it is awesome.
Thanks!
Ah yeah - done that now. They do seem to be active on that repo so I'll leave it there a few days before pinging people.
If you can, cache the images and avoid re-generating any. Also, make sure you call `imagedestroy` at the end of the function as the resource won't be freed when it goes out of scope.
Additionally, he can setup a CDN (Cloudfront for example) and let them handle the caching process (no need to worry about cache expire, server write privileges, cache taking too much space, etc.)
Thanks, this is a great idea to use a cdn for this, never occurred to me... DUH!
much better. since the web packager fixed the iis integration, it made things much more simple http://php.iis.net/ 
I would do this as a queud process. So that people can request the work process be done, but requests get added to a table in the database, timedatestamp, image1, image2, image3, email_address Then once every 15-30 minutes, your backend scheduled php page, grabs 5 requests, and does the work, and emails the results to the original requestor. Then it deletes those 5 records, unless you want to do something with all those email addresses, and have a record of all requests per day etc. This moves the process to a backend process that can be far well managed, to not overload your server.
Just fyi - http://mikehadlow.blogspot.co.uk/2012/04/database-as-queue-anti-pattern.html
...huh? Gearman(d) is a C/C++ daemon. You can code your workers in a crap ton of languages, like, java/perl/php/node/go/python/ruby/etc. (In fact, using gearman as an agnostic middle man to pass tough tasks from PHP to a more optimized GO type language is pretty damn neat.)
How well does WinCache work?
I agree with this whole-heartedly (except when it comes to modeling games in Unity, where noun modeling works very well). Practical web development with PHP involves far more abstract concepts such as authentication, session management, error handling etc. I've read so many articles on OOP and of course they immediately click and I go "Oh yeah, I get it, makes sense", and then as soon as I try to apply that concept to an actual website or a DIY framework, I'm like "Ok, now what?"
I haven't tested this but maybe it will help. ob_start(); imagepng($img); $image_data = ob_get_contents(); ob_end_clean(); print '&lt;p&gt;&lt;img src="data:image/png;base64,'.base64_encode($image_data).'" width="100" height="100"/&gt;&lt;/p&gt;';
Seems like a good idea then =)
In Cloudfront, you just have to set `Forward Query Strings` to `Yes` when creating the distribution.
use imagepng($img, 'path/to/image.png') to save the image onto your file system. then take that path and save it into a database.
best practice imho: use imagemagick.
Use Image Magick or maybe graphics magick if that is available. (Basically a modern replacement for graphics magick.) GD is very memory intensive.
But Cloudfront isn't free, yes?
This is the first problem I saw too. It's the Little Bobby Tables problem. http://xkcd.com/327/ 
We've been using it in production for several months, no problems, definitely faster and more parallel-access-friendly than the old file-cache-based approach we used. Only annoyance is that wincache uses a separate "pool" when PHP is running in CLI, which means after deploying a new version of the code and running the post-deployment scripts in the command line, flushing the cache requires a separate step.
One counter-example: `strftime` has format specifiers that don't work/work differently on specific OSs like Windows.
If it takes you 20 scripts to write a simple router, something is wrong.
If you haven't checked out laracasts yet. I highly recommend it. https://laracasts.com
I was just kidding. It was an estimate.
20 scripts? Writing a simple router using regular expressions is like 10 lines of code.
&gt; *There is no such thing as a free lunch.* All frameworks come with penalties and limitations. That is the payment for the initial speed boost in development. And this is especially true for Rails-like frameworks (of which Laravel is one), that are designed for fast prototyping. Also, the speed of PHP execution has **nothing** to do with number of code lines. Especially, when those are hiding extensive complexity. Ehhh ... this naiveté of the youth. I can never decide whether to envy or pity it.
There is [Digitalocean]( https://www.digitalocean.com/?refcode=1f0cd56ef120 ) (referral link), if you want a cheap VPS (5$ for 1 cpu, 20GO SSD + 512MB of ram).
I already have an VPS with 2GB RAM, 100GB hard drive space, 1TB bandwith per month, and free re-installs. I'm also a web developer (of course) and I host websites for clients, so I need lots of space as they take up a lot of space (thanks a lot WordPress).
Why reinvent the wheel when people smarter than us already did it before? I mean you never choose php for it's speed, but for it's dev easyness no?
You must have misunderstood me. I did not say that use of frameworks make the development easier. Only that it gives initial speed boost (look up: [Techical debt](http://martinfowler.com/bliki/TechnicalDebt.html)). Also, what makes you think, that people who make a framework are smarter then you? If you are newbee, ok, that might be true. But if you are professional developer with multiple years of experience, that "truism" actually is BS.
Strange. That's the code that worked for me. Maybe they limited it? And you do still actually have to email her and request it to get a working code.
If you didn't try SLIM framework you definitelly should - it have excelent routing system and it is micro framework. Rest is composer :) 
I started to write a blog post about how to use GD a few weeks ago, and it ended up mostly lamenting its ugliness and recommending ImageMagick.
Sorry, the "initial boost in speed"? are you implying that if you use a framework you get an initial acceleration but that this is ultimately unsustainable? Because .... bullshit ... basically. Used *properly* a decent framework will give you, in general, sustained productivity over rolling your own thing. As for designed for fast prototyping - I'd call that bullshit too. They are web application frameworks. Fast Prototyping is one pay off but it isn't their reason for existing. I'll agree that there are penalties and limitations but implying that they let you prototype quickly and that's it is pretty much wrong. 
What do you want to do with the NetSuite API? Just out of curiosity. 
https://wordpress.org/download/
What kinds of technical debt are you referring to? Laravel includes many facilities to write SOLID, well architected code, including IoC by default on all controllers, etc. You can write thoroughly tested, clean code on Laravel just as you can any of the more mature PHP frameworks. But, if there is something in Laravel that inherently creates unsustainable technical debt I would love to hear it so we can improve.
The problem is that too many people think they are not newbies and roll their own. People who make a frameworks are usually not alone - and I prefer multiple minds than 1. In projects that I've been pushed into - projects with the most technicals debts were the ones not using a framework, because the initial lead was a smartass and thought he could do everything himself. "Hey, let's use global for the DB handler" and a lot of nice ideas like that. 
I would suggest using semver (http://semver.org/) for your versioning. :)
Just so you have a proper context on what this is: This is just a vague list of ideas, to the most part at least. It says little about what will actually be in PHP6. I dearly hope that a lot of it will not go in, otherwise we won't get the release in the next decade ;)
It bothers me that this is speckled with author bias instead of just presenting the collected ideas for review. The PHP wiki should not be an op-ed corner and lists like this should not be used as an avenue to voice personal preference.
If you just want to mem cache things then it doesn't matter much. FWIW probably the biggest advantage of memcached is that it automatically removes old data when it runs out of memory. On the flip side, redis can be used as a permanent data store, and is a lot more powerful for data manipulation.
George RR Martin: "Power resides only where men believe it resides. A shadow on the wall, yet shadows can kill. And ofttimes a very small man can cast a very large shadow." PHP-FIG is the small man.
Why would anyone want to use those poor tools?
&gt; PSR-0: system/cms/modules/users/src/Pyro/Module/User/Model/Group.php This is much much much much more readable/understandable than: &gt; PSR-4: system/cms/modules/users/src/Model/Group.php As far as I know, the PSR has only 2 advantages: - reduces inodes for very large projects like drupal, which are still targeted for shared hosting solutions (meh - get a VM!) - reduces path length for the brave ones deploying on windows I see following problems in PSR-4: - reviewing code becomes problematic - nobody knows where the code will exactly be without looking up the autoloader definitions first (relevant for tools) - yet another PSR for something that was just a custom autoloader for very specific use cases So yeah, I'll just stick to *src/Much/Directory/Very/Code/So/PSR0/Wow.php* - it is just more "sane" than sneaky abbreviations.
I feel like Bill Murray in Groundhog Day... Consider using ImageMagick instead of GD calls. If you use GD your gonna have a bad time. http://www.php.net/manual/en/book.imagick.php
BC? Binary Compatibility?
Backwards compatibility :D
Can someone explain why integrating unicode support has been so difficult? I watched [this](http://www.youtube.com/watch?v=MijmeoH9LT4) video and I think I get what utf-8 is, why is it so hard to integrate into PHP?
&gt; Userland APIs improvement for all PHP types (OO instead of breaking BC) Yes please. Sounds like: http://philsturgeon.co.uk/blog/2013/01/php-6-pissing-in-the-wind
A bunch of free content is on the site: https://laracasts.com/free
I'm quite curious actually, how long would it take PHP to be called PHP 6 and when would there be a release version? All of this should be an estimate and I'm not asking for a specific date, but rather an answer like 1-2 years or so.
1. Yes 2. AFAIK your limit will be your OS limits or HDD (but you shouldn't have this problem see #4) 3. Your best bet is to use PaaS like appfog.com, pagodabox.com, etc. For true redundancy, you should design your app so that it uses at least two data centers. 4. In my opinion, the biggest hassle for programmers is scaling your database. If you have the money, I would use ClearDB, Google Cloud SQL, etc..
I'm going to addresses your post point for point. &gt; Can PHP, using the Kohana or Laravel framework, and MySQL be used out-of-the-box by an experienced developer to create a web app this large? Your web app, as you describe it, is not large. Its small. Any language in the hands of a competent developer running on realistic hardware will handle it just fine. I'll give you two anecdotal examples from my previous job. Both projects run on PHP/mySQL First: a site for a major rodeo, which gets a few hundred thousand page views in a two week period. Requires using varnish as a cache to handle peak traffic but runs on a single virtual machine @ AWS, along with a dedicated RDS instance (mySQL database server). Second: a SaaS project with over 100,000 active users. Runs on a single AWS machine, along with a dedicated RDS instance (mySQL database server). &gt; How many records is considered "too big" for MySQL? And how many users are considered too many? I've never run into a "too many records" problem in mySQL - although in terms of big data, my databases have always been small. The largest I've worked with had about 20 million rows spread out over 4 primary tables ( about an additional 1M rows over another ~20 tables ). You're more likely to have a "I don't know how to add proper indexes or write quality queries" problem than a "too many rows" problem. &gt; I've always used shared hosting for my projects but this project, of course, requires a hosting provider with failover, redundancy, scalability, etc. How do I know who is a good hosting provider who provides these features and has good support? I don't want to use a VM because I am not a server admin. If you want to run a big project, you can't use shared hosting. The best you can hope for is to use a Platform as a Service provider like AppFog/Heroku/Etc - you don't need to know much but it will cost you a lot more money than using a provider like Linode or AWS.
Comprehensively implementing Unicode support is fiendishly complicated. Every time you touch a string there are many dimensions to be considered. Also, UTF-8 (as opposed to UTF-32; I don't think anyone's talking about UTF-16 anymore although that was what the previous PHP unicode project was designed around) uses variable-length sequences for characters, so a lot of things become slower and/or more complicated. It's great because it's backwards-compatible with ASCII and it's space-efficient, but the amount of development and testing will be huge. I expect the best way forward is to create a new string type, designated like this: $a = u"hêℓℓö"; And let those follow a different code path from ordinary strings, which are left alone. At least that way it won't adversely affect the performance of existing code or break the way things are working.
Now I feel sad that php moves like concrete. It could be so awesome instead of the laughing stock people see it as. 
- Switch to HHVM :p
&gt; In my opinion, the biggest hassle for programmers is scaling your database. If you have the money, I would use ClearDB, Google Cloud SQL, etc.. PostreSQL would be alternative and most definitely preferred over MySQL for an "Enterprise" application. 
It seems to me that for a new project that postgres is now a better fit. I user mysql for mine but migrating is just low priority and first I want to meet it 70% of the way by using PDO during my next refactor.
It seems like you're trying to write an ORM, and it's just not finished. I think it could be handy to use this is if I have a bunch of crappy data in XML,CSV files, and I want to make it better. Although, I don't see where the relational information has any significance when dealing with XML,CSV files. The relational information is mostly needed for persisting data in databases, and this library doesn't do that.. so.. I can't really think of any amazing use-case for this
Scalar type hinting. Yes please
Who exactly sees it as a laughing stock? Certainly not the employers hiring PHP developers, nor the clients paying for projects built in PHP.
Sound´s pretty cool! I will definitely give it a try!
Scalar type hinting, named parameters and getters/setters (or exceptions instead of warnings). The holy PHP trinity.
I'm not sure that it will simply be a matter of calling it PHP 6. I'm guessing you're picturing a scenario where the developers will go, "ok instead of 5.7 this will be 6". I don't think the PHP 6 release will be like that. This will be a major version increment, so the changes will likely be quite substantial. It will be a much bigger jump than going from 5.4 to 5.5 or 5.5 to 5.6.
Not a bad notion. Have you ever tried CoffeeScript? IMHO it's pretty damn amazing.
Thanks erik240, you've really encouraged me by providing a perspective on what large is. Seeing that you can handle a few hundred thousand page views in a two week period makes my 16 thousand in a month seem a bit paltry. I've looked at AWS and they are too confusing for me. I can't make heads or tails on what acronym of theirs I need and how much it will cost. truechange mentioned pagodabox.com and that looks perfect for what I want. I've worked with MS SQL in the corporate environment where indexing makes or breaks you. So I can optimize the tables and if MySQL can handle the load then that sounds great. Thanks for taking the time to reply. I appreciate it.
ClearDB and Google Cloud SQL automatically replicates your DB in geographically separated locations. Your DB will never go down when one data center goes down, at least that's what they're saying . I don't think PagodaBox or any other PaaS does that at the moment. If you aren't that paranoid about redundancy, PagodaBox DB service should be fine. 
There are lots of people who feel that way about PHP, and they're vocal about it on the interblags. [This one](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/) and [this one](http://www.codinghorror.com/blog/2012/06/the-php-singularity.html) are the best known posts, but by no means the only ones. You read those and tell me honestly that those guys do not have any good points. Don't get me wrong here, I like PHP and I think it is underrated as a language, but it definitely gets a lot of flak and much of it is actually well deserved.
Agreed. They should make an API and keep the old one in for BC, but deprecate it and/or sort of hide it in a separate or half-hidden section of the manual, so the newbies will learn the better API's.
That would be the worst solution, it's like `&lt;?` and `&lt;?php`, or single and double quotes, or `echo` and `print`, or errors and exceptions, or…
Absolutely it matters. The more noise that gets made about what's wrong with php the more likely it is to get fixed. How do you think we got namespaces and anonymous functions. 
1. If you are not listing the fields for table in the relation definition, how does this library know what all columns in a result set belong to what entity. 2. Can this handle relations to that are arbitrary levels deep. For eg, an author can have many posts, a post can have a topic, a topic can have many tags. 3. Can this handle bi directional relationships. 4. Does this have some kind of internal identity map so that there are no duplicate entities? I think the four kind of relations that this supports are too limiting, and is not really worth the trouble. See this for a comparison, http://docs.doctrine-project.org/en/2.0.x/reference/association-mapping.html . So at this point, I think this is pretty useless for real projects.
&gt; Right, I'm merely pointing out that as long as employers are paying PHP developers and clients are paying for projects built in PHP, does it really matter? No you're not, you're asking exactly who they are and you're saying that there are lots of people who will pay for PHP projects. You're not asking a rhetorical question. I don't care if you mean to pose a rhetorical question, you just aren't.
Huh, what are you trying to say? It is incredibly unclear what point, or thing your trying to promote. Nor is it clear, what use such a thing would be for. They may be clear based on your experience, but not everyone has had your experiences, so what may be clear for you, may be totally chaotic and messy to other people. So work on communicating better, please.
IMO it's more like a proof of concept for using [Puli](https://github.com/webmozart/puli). Definitely not a Bash replacement. It doesn't offer many commands at the moment, but I think it can grow.
It seems like php will never support multi threading. Anyone know why?
The common sentiment brought up by people in the links like spin81 shared isn't just about making noise, but rather actually trying to convince people to stop developing in PHP. I've seen more than one poorly constructed Java app that's brought down an entire network, and more than one poorly constructed C app that's let any old unauthorized user in the front door. Because these languages allow such bad behavior, should we be convincing people to stop using them, too?
&gt; If you are not listing the fields for table in the relation definition, how does this library know what all columns in a result set belong to what entity. The columns in the table may or may not map to what you want the object properties to be. It would be perfectly reasonable to use a query making one-to-one joins across several tables to construct the data to load into the Marshal, via a Mapper that converts the column names to different object property names. The objects and the tables need not match at all. &gt; Can this handle relations to that are arbitrary levels deep. For eg, an author can have many posts, a post can have a topic, a topic can have many tags. Yes, although you are the one who has to load the data in. &gt; Can this handle bi directional relationships. Yes. &gt; Does this have some kind of internal identity map so that there are no duplicate entities? Yes. &gt; I think the four kind of relations that this supports are too limiting, and is not really worth the trouble. In what way? &gt; See this for a comparison, http://docs.doctrine-project.org/en/2.0.x/reference/association-mapping.html . The "four kind of relations" you talk about are described by that link, albeit under sql-ish names instead of object-ish names. Also note that some of the associations described there are ways of talking about how to do the queries, and not how the objects are associated. &gt; So at this point, I think this is pretty useless for real projects. I have reports from real authors of real projects that have found it useful for their purposes.
As I've stated before, a single function to make re-indexing a multi-dimensional array by one of the child array's elements, (or a new official collection object capable of doing that) would make life so much easier.
Sublime text isn't even listed.
That's what I meant actually, when is there going to be a major update to the programming language. An update that not only requires developers to take a look at when updating to PHP 6 but also webhost providers to get ahead of the curve.
Could you not just use PSR-0 or PSR-4 and register the root folders so that it knows to lazy-load (i.e: not optimize) them? Alternatively you can interact with the ClassLoader yourself. Or extend the autoloader. Or register your own. I don't think Composer needs be entirely responsible for this.
there is no such thing as php6...it's a myth...
Howdy you might like to put this into the post description next time so that it doesn't get lost down below.
&gt; You read those and tell me honestly that those guys do not have any good points. They do certainly have good points, but they also have at least the same amount of terrible points
Just stumbled upon this, and I love the idea of Envoy. Gonna try it out! Nice work!
To get two separate collections: `$manager-&gt;posts-&gt;getCollection($identity_values)` or `$manager-&gt;posts-&gt;getCollectionByField('field_name', $field_values)`. Each of those will return a separate collection object from the loaded posts.
I find this really useful when dealing with a) combining data from multiple data sources into related objects or b) taking data from sources I don't control (and can't change the schema) - I think some of the comments here are missing the point of what the library does.
*you're That was painful to read.
how about... composer dump-autoload --optimize (-o): Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run so it is currently not done by default.
This is possibly the most vague question I've ever seen. All I'm able to presume from this is that you're using PHP to access data in some form that holds users. And you want someone tell you a specific way to return a specific result set with just that to work with. What system is this? Is it a bespoke system? Something like WordPress? Are you using MySQL, MongoDB? What version of PHP is this with? You need to give us a LOT more information that what you have and then I'm positive people will be able to help you here. Including myself.
http://www.firsttube.com/read/sorting-a-multi-dimensional-array-with-php/
I never tried Atlassian's Bamboo myself, but there are a load of great hosted CI as a Service around, really. Codeship, Semaphore, Circle CI, Snap CI, etc...
Oh if this cannot convert the result of a join query without custom mappers, I am not even mildly interested. I mean, what is the use of defining relations if a library cannot automatically do that. 
Very interesting, indeed.
Damn good news!
Great work guys, keep on going
By loading everything in memory (as opposed to iterating over database results) would limit you in the amount of data you can handle at one point. Or is that a non-issue?
I considered it, but if you really need that sort of performance, you're better off with HVMM+Nginx and a PHP-based framework.
Ten years ago, I would've jumped onto this project, maybe contributed back some addons. Eggdrop/TCL was always a pain to work with. But now? IRC just isn't what it used to be, sadly I've left it behind.
Looks like JS to me? :s
JS? :S it's just php, but would output on the fly without waiting for the script to end
That IS the functionality that already exists.
If I understood correctly, it will help playing/debugging/understanding resource location and what resources are where in your project. However it seems to me it was not ready to be posted here since resource location doesn't exist yet in PHP (I mean it is not widely spread and used), so of course it's very hard to see a solution for a problem we have never met yet. It will however become very useful in the coming months/years I believe (when Puli and similar projects will start to be really used).
Seriously? So this is a post to a non-free book with a title that claims you write "superior" web apps because of Phalcon… You know what, nevermind, I don't even want to argue…
thanks man, I will try to improve the title next time
btw your comments on blogger are bots.
I only recently got into IRC,and I'm not the only one. I wasn't using the Internet ten years ago.
How can I make it react to message patterns without being mentioned? Im trying to make it print title of pasted URL.
That's sorting. I want *indexing*, in one function call, without writing my own function (which will ultimately be slower than if PHP did the re-indexing internally) :P 
I'll stick with [gifsockets](https://github.com/videlalvaro/gifsockets). [Here's](https://github.com/reactphp/gifsocket) php version.
Marvirc is built on top of Hoa\Irc (https://github.com/hoaproject/Irc) so you can add a listener for "message" (https://github.com/hoaproject/Irc/blob/master/Client.php#L99) in the main() procedure (https://github.com/Hywan/Marvirc/blob/master/Source/Marvirc/Bin/Join.php#L27) and then use the "getAnswer" (https://github.com/Hywan/Marvirc/blob/master/Source/Marvirc/Bin/Join.php#L224) method to handle response in commands. You can add a command for URL (that'll match a regex for URL and will return page title).
Or, ask on Github with an issue :-).
it's pretty good stuff. It isn't free, but it's $10 and they donate that to charity! you can do both hosted or install it on your own server.
As with all things, it depends. Because you're in control of what you're loading into the Marshal, you can put as much or as little in there as you like. If you are memory-constrained and can only process one record at a time, then of course you should only load one at a time (and then clear it). However, that's an issue with anything, even plain old PDO.
The $data['message'] has an underscore appended with this regex return '#http:\/\/(www\.)?#i'; Whats happening here?
&gt; IRC just isn't what it used to be IRC or you ? :) 
Please, open an issue with a piece of code :-).
Both. The types of people who show up on IRC have changed a lot over the years. At one point, IRC was pretty much the only instant messaging game in town. As such there were lots of random communities there. Now only nerds seem to use it.
Oh but it can :-) You tell the marshal which identity fields map to which foreign fields and it wires up the objects for you.
Thanks, man, and I agree.
Awesome post with a very thorough writeup on the topic. I always learn a lot from /u/nikic's blog posts.
Incase anyone missed the link, he published his own routing library recently: [FastRoute](https://github.com/nikic/FastRoute).
I consided it too, but decided to go the Phalcon way. HHVM feels like a moving target, not really stable if you plan to use extensions (we try to use functionality in C extensions where we can). Also, you would be dealing with bugs in two different ways (YourFramework + HHVM) Phalcon not only allowed us to provide an API with sub-10ms responses. It's also a very flexible and powerful framework that doesn't get in our way. That being said, the project is a bit stagnant while they work on the 2.0 version. 
\#PHP on QuakeNet is active with a decent chunk of users.
IRC is exactly the same as it used to be for those who know where to look.
Do we really need to use regular expressions in routes?
No, you missed my point. for this "/user/1", you don't need a regex. A simple placeholder would do. Like /user/:id or something like that.
But how would you do the actual matching? Regular expressions make a lot of sense, especially when you start adding ":id can only be a number" requirements.
To give a sense of how miniscule your scale is: I come from the world of 'enterprise' web applications, and 10,000 users over years is nothing. For most stores, 1000 new users an hour was commonplace. Obviously that doesn't mean they're getting 365,000 new users a year, but for managing site load you look at peak traffic, since it takes less than a minute for a site to get so backlogged it fails. Over black friday we could see thousands of orders a minute (and order processing is one of the most intensive things a web site can do: validate the shopping cart, calculate and apply discounts, lock the inventory in the database so you don't oversell, process the payment, and a whole lot more). What OP's describing is a 'large' project only in that it requires some, but very little, attention to proper data modelling. Using page caching properly will be the most important part of scalability here. Make sure you can cache results when they're always going to be the same, and invalidate those cache entries when something happens that would update their results. AJAX is your friend, since you'll want to full-page cache as much as possible (e.g. don't render a whole page in PHP because you need it to show a few little details about the user on it, but serve the page and load the data in with something like ember.js .) You're using laravel already, so take advantage of that to have your site serving cached pages from the filesystem as much as possible. A number of records is only 'too big' when your data model doesn't support it. When you're constantly querying with complex regular expressions against unindexed columns on a table with extremely long records, it's going to be slow. If you model your database properly, you'll be fine. If you're using laravel then it's foolproof enough -- the most obvious approach will at least prevent you from shooting yourself in the foot. Many are recommending hosting solutions that you've asked for, but I'm not really sure you even need anything that powerful. Just a basic dedicated host would be fine. Do some really simple load testing (script something up to simulate 1000 users on the site at the same time), and if it fails see if the bottleneck is on the CPU/memory or the network/filesystem. My shot-in-the-dark guess is that your tests will all run fine, but in the 10% chance they don't, you're probably better off just hosting static assets on a CDN than trying to setup AWN for application hosting.
With [Hoa\Router](https://github.com/hoaproject/Router), we use the native named matching of PCRE with: $router-&gt;get('u', '/user/(?&lt;id&gt;\d+)', …); It's another possible syntax, but this one is native and standard.
How does the data from the database map to the objects? Does it assume that the object's property names are the same as the column names from the result set?
Thank you, WdnSpoon, that is a very helpful post. I appreciate the perspective. Regarding caching: I just refactored a page to foreach a list via PHP on the sever side. Are you saying that it's better to populate such a list via Ajax so that I can cache the static page? Regarding the database, my queries should be fairly simple; so far, in my current project, I've been able to architect the tables to have only two indexes, the ID and a foreign key. However, and maybe this should be a new reddit question, what is the general advice on reporting. My next "big" site will require heavy reporting by site administrators and I am concerned about it affecting the users. Any thoughts? Thanks!
No, my concern was not if this was possible with this library. But my question was regarding the practice of using regular expression in routes. Can the same be achieved in a simpler, more efficient manner. Can routes be structured in such a way as to totally avoid the need for regular expression in routes.
Wow, that's some crufty code! * [shtml](https://github.com/Zidisha/zidisha/blob/master/500.shtml)! * [What's going on here](https://github.com/Zidisha/zidisha/blob/master/cgi-bin/500.php)? * [hehehehe](https://github.com/Zidisha/zidisha/blob/master/index.php#L39). * [y u no use a router](https://github.com/Zidisha/zidisha/blob/master/index.php#L154)? * [globals](https://github.com/Zidisha/zidisha/blob/master/library/database.php#L57). [Have you considered not using `mysql_*`](https://github.com/Zidisha/zidisha/blob/master/library/init.php)? The whole codebase is a mess. I'm assuming you're calling `traceCalls(__METHOD__, __LINE__);` everywhere because you don't know what's actually going on with your own code? [WAMP](https://github.com/Zidisha/zidisha/blob/master/library/constant_local.php#L114). [Here's some credentials](https://github.com/Zidisha/zidisha/commit/050ad67e35f8a85fda09e8b3029e4ce651750763)? You *probably* should change your passwords on everything. For a financial app? This is a disgrace. Delete it and start over. edit: Not only should you delete this big pile of crap and fire your development team and demand a refund. edit 2: [oh jesus christ](https://github.com/Zidisha/zidisha/blob/master/library/database.php#L59)
At some point, you're probably going to want to match something though, no? Of course it's possible to statically map routes or just use your web server as the "router" (htaccess) and point to something specific. Interesting point nonetheless. For my own uses, I'll stick with standard routers as I find them much easier to deploy than custom web server configurations. I kind of feel like much of this is very interesting and could become "best practice" but for now it's micro optimization anyway, for 95% of what I do a regex is of pretty much zero significance to the overall performance of my app.
&gt;But how would you do the actual matching? You mean, in the router? I suppose if the router does not have to support regular expression in the routes, then the actual matching can be done in a simpler way than if it has to support regex in routes. &gt;when you start adding ":id can only be a number" requirements. :id does not even mean "can only be a number". But my point is that, we dont need that logic (if :id can be a number or not) to be present in the routes. if you want /user/45 and user/veonik to be supported, I think it is much better to do the diffrent processing in the application code. Something like $router-&gt;get('/user/:slug', function($slug) { // you can replace the is_numeric below check with any regexp match to meet your requirement if(is_numeric($slug)) { $user_id = $slug; } else { $user_id = getIdFromSlug($slug); } // rest of the processing } I feel this is much more maintainable than having two different routes defined separately.
Interesting, I'll definitely check it out. I posted awhile back in regards to dealing with just stored procedures in a legacy app. The column names are poorly named in my result sets, so I will need to map them to my domain classes using the property names I chose.
started sharing src code that i can't live without, open for all feedback ;)
If there were simpler way, I think one of the 6 dozen PHP routers would have implemented by now. But maybe that's just wishful thinking. Feel free to give it a go though. You'll still need to somehow parse the given route in order to get the `:slug` out of the URI. Hrm, I guess you could `explode('/', $uri)` and `explode('/', $route)` and then match the items up that way, but that looks like it's asking for trouble. You'd still need a way to determine different types of functionality within the controller. Assume a login URL if `/user/login`, you'd have a lot of extra logic in your controller to work with that as well as `/user/123`. Your argument at this point probably is "Well just register a login specific route" but that makes your previous argument of "managing controller logic is easier than managing routes". So, I don't see the benefit. (Doesn't mean it's not there, I just don't see it.)
Interesting. I must admit I'm a regex novice, so you taught me something new today. Thanks! My only concern though is the barrier to entry. Of course, you'll need to read the docs anyways, but it seems like advanced regex knowledge is a prerequisite for using the library. Again, probably a minor issue since you'll be reading the docs to know how to use it, but it's a bit of a hurdle for someone just coming into a project that uses it.
Same here. It's one thing to be incredibly smart, but it's a whole thing altogether to be able to condense that into well-written articles. 
Yes, Julia has been relying on a firm in India for four years, and they have produced some heinous code. That's why she needs help to refactor things. Despite the nastiness, I advised her against a rewrite for these reasons: http://www.joelonsoftware.com/articles/fog0000000069.html The passwords are apparently old, inactive accounts, but yeah, there are still bad things in here. The first step is admitting you have a problem...
&gt; Regardless, you can store anything in it. But it's important to understand that it's stored in the memory of the local machine, and in fact, is specific to the SAPI (e.g. apache vs php-fpm vs CLI, all have their own caches). This point cannot be stressed enough. It took me a while to figure this out as well and caused me TONS of confusion when I was first starting out with apc.
Yeah, he must be smarter than pretty much anyone I know.
Initial decisions in caching start with best-effort judgement calls, which are necessary before you have the testing and usage data to actually see what is important. If that page is one that's rarely loaded, then I wouldn't worry about it too much. You should look at the pages you think will be loaded all the time by people and optimize those. I can't comment on the efficiency of code I haven't seen on a page I haven't seen with a purpose of which I am unaware. If by reporting you're thinking of generating a big spreadsheet for your users to download, then that's something that can get expensive fast if you're not careful. Not sure that there's any good general advice for that, other than cache when you can and try to keep your time complexity linear.
Here's a slide deck done by one of the core guys that explains exactly where things went wrong with the former Unicode attempt. It also explains some information on unicode encodings, which are very, very important: http://www.slideshare.net/andreizm/the-good-the-bad-and-the-ugly-what-happened-to-unicode-and-php-6
Perhaps you haven't seen the [pthreads extension](http://php.net/book.pthreads)? See also [github](https://github.com/krakjoe/pthreads). I personally haven't used it, as all the things I end up doing are simple enough to only require background worker processes. Keep in mind that most, but *not* all extensions are thread-safe.
CAS, in net effect, is no different than OAuth. The process is very similar. There's CAS, SAML, and OAuth: pick your poison because each requires a bit of effort to implement.
 &gt; I might just be too dumb to understand the use case here, but what is the use case? I loo[………] Judging from patterns you tried to identify it with it shouldn’t be a problem for your knowledge to recognise its use cases. So thats my bad and something I need to improve in the docs and examples. It’s just a model with validation/filtering on top of it to KISS. I don’t think I should dive into the patterns used to not overcomplicate things, stamping it with a pattern isn’t easy either because it’s not a design to a certain solution.. &gt; That doesn't make sense at all, just do validation as a service and implement it wherever you need it. Ok let me be clear :) The reason I put that example up was because I could already foresee the first example being too complicated. It’s not suppose to be a example for a use case you can use this lib for--or be a example for how you should validate a form in the best way possible :) I tried to mirror the same problem that most people deal with on a daily basis, but I should probably remove it seeing what it already caused.. But to take your comment on using validation and filtering ‘as a service’, this ‘service’ is fine as long as your model doesn’t exit your software—but where is your service when your model is used in another location not using framework X that manages and invokes your service? Or what if this model is a configuration container you need to distribute? And you basically don’t need a validation/filtering service since only datacontain has access to your data/config object, anything capable of handling an array can use it. &gt; Value that can be null and still force a type on something not null What I meant by this was besides hinting for any recognised datatype, it’s also possible to still allow a key NULL. Which btw, most are not hintable to be specific on your argument. &gt; And the listeners... you've lost me. I don't understand. Well, to be honest.. I probably should do some work on the documentation, the best I could do right now is repeat myself thats already there :D Did you checkout the examples? The aggregated list for example? It has some specific use cases as comments :) The listeners are basically callbacks/hooks caught by events such as setting/getting values.. Thnx for your feedback, much appreciated. I probably do another post about it once I improved the docs and example a bit. :)
I got upset about doing one with every project and there is none available? There is http://platesphp.com/, there are a few blog posts about how it should be done (http://codeangel.org/articles/simple-php-template-engine.html), but nothing is done. All I ever wanted (in the words of already written description): &gt; Brick does not interfere with your template code (for all Brick cares, you can have template driven website with no controllers). Nevertheless, Brick introduces convenience checks for handling not found template files, protecting you from directory traversal attacks (at the template inclusion level), and helping to deal with variable scopes. I've put together a version of what I've been using from project to project, with addition of variable scope isolation. Would like to know what others think about it?
Nice job, thanks! I can tell where you were in doubt, and how unclear certain things are.. I'll commit some solid use cases tomorrow :)
There's always Savant, from way back in the day: http://phpsavant.com Or one of its more-recent descendants, such as Aura.View: http://github.com/auraphp/Aura.View (I'm the original author of both.)
&gt; But to take your comment on using validation and filtering ‘as a service’, this ‘service’ is fine as long as your model doesn’t exit your software—but where is your service when your model is used in another location not using framework X that manages and invokes your service? Why do you think your models can be dependencies of multiple projects but your validation services can't? :)
Thanks for sharing. It is late in the day, but I will continue research early tomorrow. Apart from those that you have mentioned, do you know of other template libraries that follow similar methodology? What are your views with regards to usability of these templates? Even looking at the https://github.com/auraphp/Aura.View (which look great by the way), there are only 30 github stars, which seem to apply that people don't like something about it?
I'd like to know why you think: &gt; there is none available When you even linked to one that's available: &gt; There is http://platesphp.com/
Sorry, poor semantics. I meant that there are few alternatives for something that is of such importance. As pmjones proved already, there are a few more, but I did not manage to find those during my initial research via phptrends/packagist. Ironically, I've worked myself with Savant a number of years ago. http://platesphp.com/ is not bad. I've intentionally referred to it several times even in the documentation of Brick, because I realise there might be people who would prefer it over Brick, at least for now.
I would think just using an or in the query would be fine "SELECT * FROM users WHERE id = '$slug' OR username = '$slug'"
I don't really feel like copying and pasting a project to remove some features is really how people need to go about creating packages. Instead of going around creating slightly different personalized forks of every package, it would be great if people could work together, or take on new problems.
Are you referring to platesphp? If so, I haven't looked at the code, beyond the API documentation during the initial research state. Though I agree, what you have described would unlikely benefit the community. It would just introduce mess. However, similarly, if you look at some other libraries I have written (e.g. Vlad), these did not pick up attention from people because they are/were so unusual.
As the developer of [Plates](http://platesphp.com/), I should probably comment. :) &gt; I got upset about doing one with every project and there is none available? I felt the same way, which is why I created Plates. Ironically that was only a few months ago, making it quite new itself. I had used Savant years ago, and really liked what Paul Jones had done there, but I wanted some of the shiny new things I saw in Twig and similar compiled template languages. &gt; Brick is Plates without the bells and whistles, namely: Namespaced templates (because you can achieve this using folder structure). Not entirely. First, that means that all template folders must reside within a main template folder. Depending on your project, this may not be ideal. More importantly, what I was going for with the namespaces is actually the ability to decouple the filesystem from the templates as much as possible. Using syntax like `emails::welcome` allows you to define your email directory once (ie. in your bootstrap), making it really easy to change later if necessary. Hard coding folders means you have to update every template reference. &gt; Brick is Plates without the bells and whistles, namely: Sections or Inheritance (because you can use Output Buffering Control without the wrapping paper; see examples of how can you achieve the same). Absolutely can be done with the native PHP output buffering functions, but why? Plates uses the nice "wrapping paper" around the these functions to create a friendlier, consistent API. &gt; Your template files must have `.tpl.php` file extension. Not everyone will want to use file extension, you'll want to give an option to change that. &gt; http://platesphp.com/ is not bad I'll take that as a compliment. ;) Although I'm curious how you feel it could be better. One thing you'll want to consider is extensions. I added these to Plates right from the beginning, and they are very handy. They basically allow you to extend Plates to be whatever you need it to be. They help encapsulate template "logic" in a meaningful, reusable way.
Good grief, I just checked his 'about' page and the dude's only 19...
Regular expressions only make sense if you don't have a large library of routes to match against and aren't interested in speed. Route decomposition will be faster for matching in most instances, and you have to decompose the route anyway.
yeah noticed that :D but thought if google spam detection doesnt detect them they deserve to stay
&gt; But how would you do the actual matching `sscanf`, duh (actually I wonder if this is faster than regexes b/c it would satisfy most router's routing needs)
&gt; it seems like advanced regex knowledge is a prerequisite for using the library. that's kind of a prerequisite/corequisite for most scripting langs, but it comes with practice :)
Unusual is awesome. Fractal is kinda edge case, and people are all over that like a wet flannel. I'll look into Vlad. :)
My brain read it as Code Igniter instead of Continuous Integration...
and we're lucky to have him on PHP's side.
Now... for the workaround provided for older PHPs... it seems that this is completely inadequate for the stated purpose while still managing to appear over-engineered. I think the RFC's author's point of including the code here was to show that what people typically do to solve the session fixation problem isn't working (and thus the patch he's proposing should be accepted), rather than showing an actual working workaround. On the DOS side of things, it doesn't even try to clear out conflicting session cookies. This would take a little doing, but based on the example given to wipe the session cookie in [php's documentation](http://us2.php.net/manual/en/function.session-destroy.php) it could be done in a couple of nested loops: each possible path (`/`, `/foo/`, `/foo/bar/` and so on up to the directory of your app), and each possible domain (excluding buggy browsers, this probably means `www.example.com` and `example.com`). It looks like the secure and httponly flags do not need to be included in the loop, based on complaints I've seen, apparently browsers don't hold separate secure and insecure versions of the same cookie (so insecure cookies can overwrite secure ones). On the over-engineered side of things, it's not clear to me why the author stores `session_id()` in the new session after renumbering, it seems to me that we could store `true` here and still have the same protection: a browser stuck on malicious session #1234 would load a destroyed session (no data saved) and `$_SESSION["valid_id"]` would be unset, while a browser that properly changed to a new session ID would load the correct session and `$_SESSION["valid_id"]` would be true. Replace `valid_id` with `is_logged_in` (or a database user.id, or a serialized user object or...) and compare to what most people actually do.
&gt; Support for anything more than a simple placeholder (e.g. (.+) or similar) is putting logic into your router that doesn't belong there. This is what I was trying to say. Thank you :).
&gt; Assume a login URL if /user/login, you'd have a lot of extra logic in your controller to work with that as well as /user/123 user/login and user/:id can be two separate route. I would assume that the router will try to match the static routes before it tries with dynamic ones. And /user/123 may be better if routed as /user/details/123 or user/edit/123.
Just have to add this to https://github.com/jeremeamia/tweetmvc-core (Smaller even: https://gist.github.com/jeremeamia/2720020)
When I was younger and wrote my own little cms I did routing by splitting and put it into an array. I was lazy lol
That means that by requiring a package, I can get a fork (or any other package) installed instead? That looks really nasty indeed, one could "replace" for example zend-framework or symfony, and have its package installed in place of the original framework on many machines… I had no idea Composer would do that, I'll start paying a lot of attention to Composer's output.
Thanks for taking the time out to explain that. I spent ages looking at this but I just couldn't see the connection to the session_id() in the sample workaround. This is going to be a real pain for anyone that uses RHEL (or RHEL based distros) since they state they won't back port and RHEL 7 will have a 5.4.x version :(
so..Entitiy objects without classes?
For cleaner syntax you can allow the users to do `/user/{id:\d+}` and convert it to the syntax above "behind the scenes". Aura.Router does that (maybe others as well, I haven't checked).
You should reconsider your dependency versions and your interface namings. The dependency versions is the biggest turn off.
fucking blogspam..
What's wrong with the interface naming?
*Zend Framework *Symfony *Laravel (ftfy)
Ha thanks it's early here
"Out of 4994 packages that depend on Symfony, there’s 1911 that depend on the symfony/framework-bundle and 1098 that depend on symfony/symfony. The rest depends on components." That's why framework-specific bundles/modules should be posted under a namespace/directory. If I were to search a library for validation I wouldn't want to see a module that "adds client-side validation for twig templates for symfony projects"
So all 4 frameworks you mentioned are very capable of meeting your needs. Each have different learning curves and some are heavier ( file size and inheritances (looking at you zend) ). Play with each a bit and figure out which works best for you. Personally I would suggest using laravel. Its not as heavy as symphony or zend and from my experience, its easier to use composer packages with. best of luck on finding out which fits you best. 
Absolutely correct. However, you previously argued that it's easier to manage controller code than multiple routes, so... It's hard to tell what you're really saying.
I have to disagree with you there. I know JavaScript, PHP and a little Ruby and have admittedly little regex knowledge.
&gt; It's hard to tell what you're really saying. It is simple. What I dont like is having routing logic hidden in some obscure regex. If you give me a url, then I should be able to find the matching route from the code easily. When you have the routing logic hidden in so many regular expression, It tends to become difficult. When I said " much more maintainable than having two different routes defined separately. " I meant seperating the route to display user details itself into two different routes based on the url format. This means the same logical route (route to display user details) exists in two different places. 
Easiest thing in the world, although you probably don't mean a "join" proper, since to retrieve a one-to-many or many-to-many relationship the most-reasonable SQL resolves to at least two separate queries. Given these [relationship definitions](https://github.com/auraphp/Aura.Marshal#defining-relationships) and the SQL access layer of your choice ([Aura.Sql](https://github.com/auraphp/Aura.Sql) is nice), you can do this: &lt;?php // fetch 10 most-recent posts $posts_data = $sql-&gt;fetchAll( 'SELECT * FROM posts ORDER BY pub_date DESC LIMIT 10' ); // load into manager and get back identity values $post_ids = $manager-&gt;posts-&gt;load($posts_data); // fetch all comments for those posts $comments_data = $sql-&gt;fetchAll( 'SELECT * FROM comments WHERE post_id IN (:post_ids)', array('post_ids' =&gt; $post_ids) ); // load into manager and get back identity values $comment_ids = $manager-&gt;comments-&gt;load($comments_data); ?&gt; Loop through `$manager-&gt;posts` and voila: posts with their comments on them.
Ironic.
free mass ping code, free mass ping php script, free mass ping tool, free mass ping tool code, free php script, mass ping code, mass ping php script, mass ping script, mass ping tool, mass ping tool code, mass ping tool php code, mass ping tool php script, php mass ping script, php script, php script mass ping, ping tool php, ping tool php code, ping tool php script
Omnipay is a great start, however if you are looking (or need to be) fully PCI Compliant then you can't really use Omnipay. To be fully PCI Complaint you need to make sure the customer's credit card information (or bank card) is never POSTed to your server. It isn't just about storing information, it is also posting data to your server. But like I said Omnipay is a great start. What I do for ours is I create some "auth" key that is passed between the gateway and I, and it is made up of a few things (also things they return back). They return this information silently through a POST to our server.
The interface is called `IAction` because it represents an action. The `I` is a specific naming convention. In Hoa, they use the `-able` prefix when possible. I should have done it, yes, but it is not a critical things (regarding the BC break it would introduce if I change it) :-).
This is the same thing that you have in the overview page. &gt; Easiest thing in the world, although you probably don't mean a "join" proper, I do mean the result of a real sql join. &gt;since to retrieve a one-to-many or many-to-many relationship the most-reasonable SQL resolves to at least two separate queries. I don't know what you mean by SQL 'resolving' into two separate queries. I dont know what you mean by most reasonable SQL either. Overall this statement sounds complete BS to me. Sorry. What I asked was simple. If you have a result of a join in an multi dimentional array. Or in other words, I have all the data to populate the entities in a multidimensional array. Can this take that array and transform it into populated entities, with out making further queries? If so, how?
The problem with Action is that it doesnt describe what it does, i know the I convention but its ancient and dated. And I hope you read my part about the dependency because a dev master dependency in a package is a nogo.
Ok, so I was about to say, this looks interesting but the tweetmvc-app link in the description doesn't work, but then I thought about it and found it at https://github.com/jeremeamia/tweetmvc-app for anyone else wondering.
You sound like you're talking about a single-query approach instead of a query-and-stitch approach. I've written about that as well: &lt;http://webadvent.org/2011/a-stitch-in-time-saves-nine-by-paul-jones&gt; (see the paragraph that begins "One way is to write a query that joins the comments to the posts in a single massive result set. ") Perhaps that will help unconfuse you regarding: "I don't know what you mean by SQL 'resolving' into two separate queries. I dont know what you mean by most reasonable SQL either." In all, the single-query approach has some positives, but they generally outweigh the negatives. The query-and-stitch approach I've shown here is usually the better alternative. Also, "If you have a result of a join in an multi dimentional array." -- The result of a JOIN is the same as the result without a JOIN: a tabular result. So there's no difference there that I can see; maybe you can give an example of what you mean.
Yeah, the links to the core from the app doesn't work either. =/ doh!
Sigh. I never said you can't. * But you have to make sure that this 'service' doesn't have other hidden dependencies then. * Probably harder to distribute or package unless intended. * Can still be ignored. * DataContain would just need 1 typehint, the name of the object to enforce everything without additional setup and/or configuration.
I am currently writing a CMS from scratch (for the experience of writing a nice object oriented app from the ground up), and I am already using a couple Aura components. I considered using Marshal for data-wiring as a simple ORM, however I found the one thing it lacked was change tracking, similar to how [Doctrines UnitOfWork](http://www.doctrine-project.org/api/orm/2.4/class-Doctrine.ORM.UnitOfWork.html) performs change tracking. This leaves kind of a big gap in between the Database and Domain Logic layer - I'd have to implement a lot of custom logic to perform change tracking and query caching. Perhaps I did not look at Aura enough, but is there a module that exists or is in planning to do this? Or does Marshal have this ability and I simply didn't see it? I understand the point of Marshal is not to be an actual ORM, but more of a relationship manager, but I think the change tracking issue would be a common use-case (especially when dealing with entities), so perhaps it could be implemented somewhere in Aura.
Yup I read it :-). I will update it as soon as possible! Thanks for the feedbacks.
use golang and martini, 
Concerning the aspect 'class' pseudocode, how would it get called? This seems like a language-level event listener system which is cool, but it's a matter of how exactly those aspects are being executed (I assume when the method is called?)
Improved the use cases :) I would appreciate ur opinion whether it enlightened you or not ;) Going to build the docs with examples for all the options when I got some moar time, probably one of these days.
Thanks k0t0n0, but I've been reading where people say they've had a hard time keeping their costs down using Google's cloud offerings.
&gt;In all, the single-query approach has some positives, but they generally outweigh the negatives. Any resource (other than what you have written) to back this with?
You are in luck! Aura.Marshal does do change tracking. (There's no UnitOfWork though.) Given our earlier "posts" examples I'll stick with that: $changed_posts = $manager-&gt;posts-&gt;getChangedEntities(); foreach ($changed_posts as $changed_post) { $changed_fields = $manager-&gt;posts-&gt;getChangedFields($changed_post); // do something with the changed fields } Alternatively, you could do this: foreach ($manager-&gt;posts as $post) { $changed_fields = $manager-&gt;posts-&gt;getChangedFields($post); if ($changed_fields) { // do something with the changed fields } } Does that help at all?
One of the (main) reasons behind decoupling validation from your data is that validation is contextual. In most cases, a widget is not "valid or invalid" - it's "valid for X or invalid for X." Let's take a blog post for example. A post can be "valid for saving" or "valid for publishing." Perhaps you want to allow a user to write down her thoughts and save them to finish up later. In that case, the save should not fail because it doesn't have a title yet. But if she goes to publish it and still doesn't have a title, then it should fail. Different contexts, different validation rules.
Should x-post this in /r/symfony too, even though I bet most of us there are also subscribed here. 
Oh, awesome! I guess I didn't delve into the docs deep enough, because that's exactly what I was asking about. Cool!
I believe this comes down to the policy of the company. (Yes, I know it could lead to security problems etc.)
What's a good use for this?
Well any implementations that use PHP annotations are immediately out of the question in my book. Comments should never, ever affect code functionality. Ever. I may sound unreasonable here, but annotations are meta languages slapped on top of PHP, so you are in fact - Mixing languages - Forcing users to learn not only a different API (which is of course required for any library), but a different syntax altogether - Still tightly coupling one library to your code since it's unlikely other libraries will look for that particular annotation syntax (e.g. only Doctrine annotations work with Doctrine). So as far as I'm concerned, annotation-based implementations are non-implementations. I would however, love proper language-level support for the concept of AOP. This is in reference to: /** * @CacheResult */
It's not about decoupling *validation* specifically, it's about decoupling and in a more broad sense, SOLID principles. I think it's constructive and relevant to the way you've laid out your Definitions and the requisite containers. I haven't read much of your code or anything, I'd give it great marks for the fact that you've got it tested and whatnot (most don't go that far, I know I don't most of the time) so nice work there. From an interface perspective, what you've got is pretty abstract and requires a lot of work / boilerplate to configure. This isn't necessarily a bad thing, it reflects the complexity of the problem you're tackling but it's just difficult to comprehend and consume. I think you would see a lot of benefit from a "ContainerBuilder" or something of the sort, possibly with a fluent interface but that would just be icing on the cake. From an implementation perspective, if I understand correctly, your "listeners" are really setters or some kind of accessor / mutator? The implementation here seems like it provides a lot of flexibility but again, difficult to consume. Wrapped in a builder with some more relevant terminology would make things easier. For example.... https://gist.github.com/codenamegary/9102600 "addAttribute" and "addValidator" on the builder would build the requisite Definitions, listeners and whatever else into the container. The validation is good but very much opinionated, you seem to believe that validating things should throw exceptions everywhere if something doesn't validate. Not my cup of tea but it's your library so I respect that you are putting forth whatever you believe to be the best solution. The immediate drawback I anticipate and have experienced, is that this particular approach is going to require writing a lot of boilerplate to handle errors, just a ton of try / catch blocks. It might be more appropriate to just return a status and some messages, then let the user implementation decide what to do with the result. This is essentially what /u/drrck2403 was getting at. As far as context, if I'm validating a form, failure is an expected condition and not something I'd consider Exceptional. Example... if($form-&gt;validation-&gt;fails()) return doSomething($form-&gt;validation-&gt;errors()); // else continue to do stuff If I call a method called "fails", I'm anticipating the data may not be correct and will take the necessary steps should that occur. I can reasonably expect my program to recover and continue when form validation fails, that's normal. Contrast that with validating an entity during a CRUD operation. Example, if I call... $repository-&gt;persist($entity); I'm expecting the repository to save the entity. Should that fail, then I would throw an exception. I cannot reasonably expect a program to keep on chugging assuming that the entity has been saved if it has not. That's an Exceptional case which could cause side affects if no exception was thrown. I've told the repo to save the entity, so now I should be safe to do something like redirect, lookup and display the entity on the next request. At the end of the day I personally subscribe to the notion that context is relevant when validating data, completely. EDIT: BTW, if you're going to publish code for feedback, grow some thicker skin. No insults or even really negativity of any variety has happened here, it's a discussion. /u/drrck2403 even included a polite smiley in his first feedback.
The function overloading is probably my favorite part of this, along with the scalar type hinting. IMO one of the strongest aspects of Erlang is the ability to have methods with the same name and different signatures, and letting the engine figure out which one you're trying to call, and this brings that to PHP. Very cool indeed.
It's called [session fixation](http://en.wikipedia.org/wiki/Session_fixation) - coaxing a user into starting a session with a website with a session ID the hacker sets, if they accept this session the hacker can take control. It's covered well on the link above and in the RFC. This was applied to 5.5.2, but was a little shaky to begin with - as of 5.5.9 the last major bug/issue was squashed (sending duplicate session headers for new sessions) - as of now, it's pretty solid and IMHO worth enabling if you use PHP 5.5.9 (assuming that may not be the case for you reading your OP).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Session fixation**](http://en.wikipedia.org/wiki/Session%20fixation): [](#sfw) --- &gt; &gt;In computer network security, **session fixation attacks** attempt to [exploit](http://en.wikipedia.org/wiki/Exploit_(computer_security\)) the vulnerability of a system which allows one person to fixate (set) another person's [session](http://en.wikipedia.org/wiki/Session_(computer_science\)) identifier (SID). Most session fixation attacks are web based, and most rely on session identifiers being accepted from [URLs](http://en.wikipedia.org/wiki/Uniform_Resource_Locator) ([query string](http://en.wikipedia.org/wiki/Query_string)) or POST data. &gt; --- ^Interesting: [^HTTP ^cookie](http://en.wikipedia.org/wiki/HTTP_cookie) ^| [^Session ^\(computer ^science)](http://en.wikipedia.org/wiki/Session_\(computer_science\)) ^| [^Cross-site ^request ^forgery](http://en.wikipedia.org/wiki/Cross-site_request_forgery) ^| [^Session ^poisoning](http://en.wikipedia.org/wiki/Session_poisoning) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfjlrip) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfjlrip)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 63457:%0Ahttp://www.reddit.com/r/PHP/comments/1yb14l/php_strict_sessions/cfjlrdt)
It certainly provided some enlightment, yes. Much easier to understand.
This is missing a critical part of understanding how to implement closures: `call_user_func_array()` The example here: Route::get('user/(:any)', function($name){ return "Hello " . $name; }); Needs to show what is happening inside of `Route::get()` to actually resolve the closure being passed as the second parameter. Another good real world example would be how lazy loading can be achieved with closures, such as with Pimple. As a bonus, it would have been good if the article referenced PHP 5.6's improved syntax for variadic functions and how it will make implementing closures with aribtrary numbers of arguments a little bit cleaner. 
It's actually enough of a departure from PHP that it could be considered a separate language, but a derivative.
Wow that's pretty neat.
I was kind of thinking the same. There are some new things and changes to behaviour in there that I really like, but others that make me scratch my head a bit. Others that are being handled in 5.5/6. Regardless, it'll be very important to know what the differences are before you try and write something to use this. There are many gotchas in there that I'm just so used to working around / dealing with in regular PHP that they feel like second nature. Things likes this... print '&lt;div&gt;'.(FALSE) ? 'TRUE [good ternary]' : 'FALSE [bad ternary]'; This will output 'FALSE [bad ternary]' when running using the standard PHP engine but outputs 'TRUE [good ternary]' when running using the PH7 engine. I don't really get that one but it's probably more due to my lack of experience with ternary operators in other languages. And this doozie... &gt; A class may not implement all the methods declared inside an interface. I'm sure there's a reason for this, just my lack of understanding other languages / concepts that make it a bit of a head scratcher. ... and this... &gt; Suppose you have called an undefined function (PH7 does not implements all PHP functions such as crypt() ereg_replace() and so on). Rather than aborting program execution and following the standard PHP engine behavior, PH7 will set a null return value instead so that your program can continue its execution normally giving the illusion that the undefined function have been called and returned null. Example: (Call an undefined function) /* Call the undefined function */ $a = undefined_function(1,2,3); var_dump($a); /* NULL */ echo "I'm not dead at: ",__DATE__,' ',__TIME__; //Output: I'm not dead at 2012-05-10 23:05:59 The languages I use most would stop there rather than continue. Does the UTF-8 implementation they talk about with PH7 relate to the ongoing drama with PHP and proper UTF-8 support? Are they saying they've implemented that completely?
I tried some of the usual parser breaking HTML's with no problem except for this one: &lt;html&gt; &lt;body&gt; &lt;input&gt;&lt;/input&gt; &lt;/body&gt; &lt;/html&gt;
Thank you. This is not valid HTML (http://gajus.com/dindent/sandbox/?uid=wNLjogO8qF7DGAxS5UM8), though I can come up with a solution. Will give it more thought, at least to make it not thrown the exception and default to 0 indent.
Frankly I share your distaste for annotations that add functionality, but they are already a "thing" in the PHP world, and promoting them or not was not intended as part of the post. I used annotations to illustrate the concept of attaching the functionality to a method. You are correct that this would represent a meta-language; one of the takeaways from this experiment was precisely that, the fact that implementing AOP in PHP will always involve some sort of hackish pseudo-extension, whether it's annotations, or outputting programatically-generated subtypes to files, or whatever. Actual extensions to PHP were far outside the scope. There is/was actually [an AOP extension](http://pecl.php.net/package/AOP), now apparently abandonware.
A web interface to configure routers.
Invalid html use to be a vector of attack on the web.
Have you read the description of the library? https://github.com/gajus/dindent It says that it is designed to be used as a cosmetic tool to improve developer's debugging experience. It is by no means designed to be used in production, esp. for sanitisation purposes. Did you mean to say something else?
Nope, just that invalid html was once a form of attack. :)
Not sure what do you mean by "invalid HTML" and "attack". If you are referring to XSS, then it is very much relevant today. If you are referring to literally HTML attacks, that's a pre-history. : )
Yep, just a historical fact. Not relevant to today really.
&gt; And it looks like a horrible idea. It would be a total nightmare to try and debug someone else's code when you have functions being automatically called and no way to detect how. But as far as I understand, the functions that are getting called are not directly related to the task that is being done. So it will be actually easy to debug the actual task because of less clutter. 
/u/kuizinas Sometimes I too wonder how the github stars work ;) . It seems like an MLM when your followers follow the repo you star ;) . About Aura.View : Has a develop-2 branch ( v2 ) which moves the helpers to Aura.Html develop-2 . This helps people to use Aura.Input with Aura.Html to build a form without much problem. Eg : http://harikt.com/phpform/ http://github.com/auraphp/Aura.Html http://github.com/auraphp/Aura.View If you are interested to contribute to any of the components, get in touch in google groups :-) .
This a cool one man! 
May be it will only indent the html. If it can with php templates that would be awesome. If you pass this &lt;html&gt; &lt;body&gt; &lt;?php for ($i=0; $i&lt;10; $i++;) { echo $i . "&lt;br /&gt;"; } &lt;?php echo "Hello World"; ?&gt; &lt;/body&gt; &lt;/html&gt; You will get http://gajus.com/dindent/sandbox/?uid=zojUpXUtgpXHhL6HwuGJ
Wow this is awesome. Probably it would have removed the composer.lock as required?
To my mind, the `is_admin` check is *not* a cross-cutting concern -- it's part of the core logic of `get_phone`, and indeed does not belong in an aspect.
It sounds like why do people want to see bar chart than numbers ? You know some people wish to see the dependencies in a visual way, ie all.
And it honestly has a lot of value in certain situations. Like visualizing a projects git branch/merge history. 
This makes me wonder, what does composer do when it encounters a circular dependency (as in two packages end up depending on each other, possibly through their own sub dependencies). 
The response from /u/yitznewton was the first thing that came to my mind. But I can see why access check can be seen as a cross-cutting concern. It has got nothing to do with get_phone operation, but it has to do with the 'bigger' functionality of the app. I mean even if the logic of get_phone does not invlolve the access check, it is involved in the functionality of the whole app. But things like caching and logging is not normally included in the apps functionality. So those can be ideally covered with AOP.
&gt; MLM You must be right. I've noticed this tendency too. Thanks for sharing I will review these packages. Haven't left the office since posting the original message!
Composer.json alone isn't enough: it only lists direct dependencies. For instance, I may require package A in my composer.json, which requirses packages B and C. So B and C are indirect dependencies of my own project. Composer does that version resolution of all direct and indirect dependencies, and stores the result in the composer.lock (to avoid dependency version resolution each time you do a composer install). Therefore, the chart actually needs composer.lock to display all dependencies. I tried to run the chart with only direct dependencies ; it doesn't provide more information than just the few lines of 'dependencies' that you add in composer.json. Indirect dependencies are a mess to dive in, that's where DependencyWheel shines.
you're very right, it probably makes sense in my mind since ive made it.. for others the entire setting up lacks modern convention. a builder or a parser of some sort would be a good thing. the listeners are just plain event hooks that intercept setting/getting values, the most obvious use would be validation / filtering, but i think the way its laid out just creates a narrow vision of whats possible. i guess a builder could help make way in this department also.. &gt; The validation is good but very much opinionated, you seem to believe that validating things should th.. to be honest, not my cup of tea also. but i think we are kindof stuck in a entity/database model kindof situation. its not suppose to represent an entity thats 'validated' at some point. if you're in the situation where all your data is represented by entities then this wouldn't be of much use, if you got systems communicating and exchanging jobs with eachother it's a reliable way to ensure a enforce a certain data structure. moving the entire validation thing to point of serialization is makes alot of sense--again in a entity point of view. in some use cases i would run intro trouble since some keys rely on others, and they have to be valid, all the time. i should probably provide more use cases and express the problems it battles--it seems we are really stuck in the entire entity/CRUD situation :) i personally would use one of the 10's of ORMs out there. &gt; EDIT: BTW, if you're going to publish code for feedbac true that, too much work/stressed, and probably not enough time to be doing this tbh. thnx for the feedback
Nice! Thanks.
Seems to miss none closed &lt;li&gt;'s which is valid html. http://gajus.com/dindent/sandbox/?uid=NqtkbDqtXl5OUbgCyi1t
Good catch. Will add to my todo list. Do you have suggestions how this could be implemented?
The readline (with history, autocompletion, edition etc.) is based on [`Hoa\Console`](https://github.com/hoaproject/Console) \o/.
Yeah can we stop with those "X in a tweet"? Post them on twitter, that's where it's fun to read them.
because : * It makes it really easy to test atoum on a non-project : imagine you just want to get familiar with the asserters syntax, no need to bootstrap a project, install atoum in it, ... just boot the shell up and play with it. * It will helps us help users on IRC : before sending them (eventually) buggy snippets, we could test them really quickly within the REPL * It's an experiment * It lets us test atoum core in a context that is a bit different : we mostly use atoum as a test runner, but why not trying to build a REPL with it and see what fails, bugs, ... and fix it/improve it. I could continue to argue but I have to go :)
Anyone else notice that in the examples they were passing -O6 to GCC during compilation? [It doesn't do anything](http://gcc.gnu.org/ml/gcc-help/2011-06/msg00450.html), of course, but I wonder what gave them that idea in the first place.
Agreed, and there are some template systems that actually encourage this, such as [Mustache](http://mustache.github.io/). However, I have noticed that this idea sounds great in theory, but in reality doesn't seem to play out quite as nicely, which is why I think there isn't greater adoption to this approach. Mustache, for example, is a logic-less template system. For many PHP developers this isn't something their comfortable with.
I personally would never use this. If I'm going to build a project from scratch, I'm going to build it the way I want, in the way required for that specific project. It will likely start with two files, `composer.json` and `bootstrap.php`. If was going to use a boilerplate, with an existing project structure and built-in tools, I'd be looking to use a quality framework, such as [Laravel](http://laravel.com/). I get the sense that this may be a learning project for you, which is great, continue to do so. Let me help with some pointers: - Use [Composer](https://getcomposer.org/) and utilize [existing libraries](https://packagist.org/) from the community. - Move `index.php` to a `/public` folder, and keep your application logic one folder up. - Consider using the MVC software pattern to better organize your code. - Don't ever use `die` or `exit`. - Look into the PSR coding standards. - Read [PHP: The Right Way](http://www.phptherightway.com/).
This is a brilliant answer, but completely inappropriate in a web context, especially with PHP. Implementing neural networks is hard, but in a language that is "meant to die" (e.g. stateless), near impossible in a real world situation.
This will sound harsh but I have to say that I disagree pretty strongly that this is perfect for... anything really. /u/reinink covers many of the concerns I have, but particularly for 'large' projects you _really_ want to be building with a framework. By choosing (eg) Symfony2, Zend2 you have a very good chance of being able to hire developers who already know the 'plumbing', you have strong guarantees that the plumbing has a low defect-rate and frankly you should be spending your effort on business/domain logic.
And the performance, even 100 users will kill the server :)
I was about to agree with the others and move on, but to be fair, there is a time and place for procedural frameworks. BUT - don't use MySQLi functions, use PDO, and internationalization is not done with a big-ass array in an `english.php` file, it's done with GetText.
Which is probably/hopefully the very first steps of a very good thing. :)
The best part about this is the FAQ.
For persisting state across requests, yes, but logging in during every request obviates persistent state, even though it would be a pain in the ass.
Yes. I had to read it several times :)
Nooooooooo! Not bash.. .Pleaaaaase! Let it die in peace.. Better implement python in PHP, that would be great :-)=) (I'm terribly sorry, but I had to :) On a second thought, did PHP find a buddy to die? In order to not be misunderstood, i'm a PHP dev too..)
am I missing something? how do you "log in during every request" without a cookie ? 
Sometimes you see questions like this and think "WTF are you doing that you can't just use cookies and sessions?!" Often its a "business requirement". You know, the PHB saw an article that spoke of a security issue with some usage of cookies, and "never use cookies" becomes a critical business need... I think we've all been there. Still, this seems like one of those cases where we either need to know what the point of the requirement is, or (and far more likely) the requirement needs to be pushed back on. If someone told an architect they were not allowed to use concrete or steel they'd need a damn good reason.
Yes, thankfully the FAQ covered all of my questions.
when / why (other than maybe calling an API?) would you want the user to pass their credentials (ie filling in a login form ?!?) on every request? 
Firstly, consider that it's typically bad practice and/or an anti-pattern to have "a lot" of parameters. If a method is simple and does one thing, why does it need so many inputs? Answer: it shouldn't most of the time. However, if for whatever reason a lot of inputs are required, you could always create a simple value object which represents the params. This yields the additional benefit of being able to move the param validation code outside of your method (and into the value object), complete with type-hinting, etc., which is a distinct advantage over using a keyed-array for params. Using an array, you end up with tons of guard code inside your API method, which can get really cumbersome real quick. A separate object is also unit-testable on its own, as well as facilitating the mocking of parameters for tests.
Never. It's not a feasible solution, but a solution nevertheless.
pears are to oranges as oranges are to apples
I'm posting this because its an interesting list from an engineer that's worked at a company with massive scale. **However**, I don't think I agree with the "Start IDs At a Gigantic Number" suggestion. Personally, it seems like a ridiculous solution to avoiding logic issues that could be **tested**. Writing tests with strong assertions is exactly how you make sure these types of things happen, not just making sure your ID's are "gigantic numbers". And if its vanity you're worried about, encode or hash the string (just watch for collisions in the algo) like MongoDB does with MongoID's.
Oh awesome, I can't wait to try this out with the [Node-PHP (+CoffessScript)](https://github.com/rick/roll) module! (install with `klunkhoser imbibe nodephpcs`)
It looks at the same time like a very good idea, and a very bad idea. It's quite hard to decide :) If the parsing fails correctly (explicit error messages) when the closure can't be parsed/converted to native queries, then I don't see any disadvantages versus things like `'e.property &gt; 20'` in Doctrine.
Http Basic Auth... Browsers Auto fill-in this for each sub-sequent request.
That's not entirely true. PHP supports type hinting only for arrays, callable and classes and not for string, int, float etc... The scalar type hinting with casts was actually a proposal (rfc) in 2012 but was withdrawn for a reason I don't know. https://wiki.php.net/rfc/scalar_type_hinting_with_cast That RFC would have made PHP behave the same way than PH7 if implemented.
Are you developing a package to work with an API or are you just using a HTTP wrapper to call it? If you are making a package, then it might be worth exploring having an object per endpoint (for example, if an endpoint is for a contact, you'd have a Contact object). This would allow you to optionally pass all parameters at once in the constructor, but still have methods to set options individually (or by using `__set()`) and have it be self documenting. &lt;?php class Contacts { protected $endpoint = '/contacts'; public function __construct(array $parameters = array()) { $this-&gt;parameters = $parameters; } public function all() { $this-&gt;getHttpClient()-&gt;get($endpoint, $parameters); } public function get($id) { $this-&gt;getHttpClient()-&gt;get($endpoint . '/' . $id, $parameters); } /** * You can either use magic methods, like __set() */ public function __set($name, $value) { $this-&gt;parameters[$name] = $value; } /** * Or you can use explicit functions */ public function setName($name) { $this-&gt;parameters[$name] = $name; return $this; } }
Care to elaborate? I fail to see the advantage of mixing the two. 
Sarcasm? This is reddit after all. :D
Yep. XY Problems abound on help forums. They're annoying because you never know whether to answer the question as asked, or try and clarify. 
Every time it is passed a callable, it goes and reads the actual file to read the function body and parses it to a query. Right? This means, this repeats for every request. Right? Just so that one can have auto completion in IDE? Why can't one write the query as a php code, so that IDE will show you all its autocompletion, and when you are done wrap it in quotes and make it a string. Wouldn't that serve the same purpose? 
Great explanation. I wish they had mentioned that in this article. Instead, I was left with a feeling that they were making a non-solution to a problem. Unfortunately, the "start with a gigantic numbers" tip isn't the same as "generate a unique, random key".
I have to imagine that this is part of the underlying irony and brilliance of the SA answer.
Also - the difference between $this in 5.3 and 5.4. Also how to bind to different contexts.
There are many more of these non-closed elements. I think table rows and cell are two common ones you might also look at handling. Edit - you can handle these by assuming the next logical opening tag or the next logical parent closing tag closes the non-closed elements. For li this means the next &lt;li&gt; or &lt;/ol&gt; or &lt;/ul&gt;. For td this means the next &lt;td&gt; or &lt;/tr&gt; or &lt;/thead&gt; or &lt;/tbody&gt; or &lt;/tfoot&gt; or &lt;/table&gt;.
Yeah, this is scary.
His response makes no sense. It's not a security issue with Composer if I specify "laravel/framework" in my `composer.json` file and it installs a random fork of Laravel maintained by some malicious entity? That can seriously happen and they say "nope, no problem with Composer!"??? It's *my* fault for not reading the Composer output and seeing that it installed some fork I've never heard of? Makes no sense.
I know nothing about dependency management. Let me ask: 1) What is the use case that the current behavior is designed for? 2) How do other dependency managers handle these use cases?
Completely agree. Listen to this guy.
I guess it only looks for replacement if it cannot find the requested package. I don't know how important this replace functionality is for composer. But if that is required I have no problems with checking and verifying composer output after running it on a dev machine. I hope when it replaces an missing package with a random one, it is easily noticeable in the output. &gt; It's my fault for not reading the Composer output and seeing that it installed some fork I've never heard of? When a tool requires you to use it a certain way, you have to do so. What is the big deal? 
In life, we generally expect tools to behave a certain way. As far as package managers go, we expect to install the package we asked for. If we ask for `laravel\framework` we want the real version, not some random fork that has who knows what kinds of security holes. It's some serious Steve Jobs style RDF "non-issue" talk to claim that this is normal behavior for a package manager.
Agreed. Even still, they say to use "gigantic numbers" not random alpha-num ids, so /u/AnhNyan's response seems strange.
I saw a demo site that could do this, surely on reddit, it was using a bunch of tricks but the one i remember most was which fonts you had installed. Different apps add some distinct ones, so the different combinations made it unique enough to tell us apart from the same ip, using different browsers. The combinations were unique enough for the purpose of a demo. I can see its use for targeted advertising, but I wouldn't want to trust that with anything more important. I can't find the link now, i'm still looking. 
The problem is noticeability. Which is correct: Laraval or Laravel? Synfony or Symfony? All you need is one slightly impatient or careless programmer...
Well played :(
Just a tip for anyone interested: Sublime Text (I'm using 3, 2 probably has it as well) has a built-in command called "reindent" that will fix indentation for you. https://coderwall.com/p/7yxpdw It's a little quirky depending on the language, but works well with HTML and CSS. Oh, and it won't enter line breaks around nested elements in for you, just adjust what's already there based on hierarchy.
Take two good things and smoosh them together. What can go wrong? Are you done with the mustard? I need some more for my chocolate cake.
This thread has been linked to from elsewhere on reddit. - [/r/webdevnews] [Django-PHP \[/r/PHP\]](http://np.reddit.com/r/webdevnews/comments/1yh4et/djangophp_rphp/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
This thread has been linked to from elsewhere on reddit. - [/r/webdevnews] [Visual Representation of your Composer Dependencies \[/r/PHP\]](http://np.reddit.com/r/webdevnews/comments/1yh4h8/visual_representation_of_your_composer/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
I'm confused. You're telling me I can tell packagist.org that any random item is a replacement for wellknown/repo and composer, under "certain conditions", will suddenly and blindly accept that fact and download it?
Seems like a very impractical but in theory useful input for verifying that a user is who they say they are, but not the other way around. Not at all.
What about just using fucking twig or smarty, which have remarkably similar syntaxes to django?
I had this the other day where I suddenly found lenybernard/symfony in my vendor directory. Searching within my composer.lock, nothing had a dependency on it, but yet it was there, overriding the Symfony framework as I understand the discussion, WTF? Next day when I ran a composer update it was gone.. This is really scary. I run composer update in development all the time and just because I don't run composer update in production doesn't mean it's not a major security issue. 
Classic… People screaming at performances when they have no idea what's really going on. Very good job on that library!
If by ridiculuous you mean "[HOLY SHIT, PHP HAS A NEURAL MESH LIBRARY???? THAT IS AMAZING!](http://sourceforge.net/projects/neuralmesh/)", then yes. Ridiculous.
Slightly off topic: how the hell is it pronounced? Puhpuhpuh. 
I think this was a joke.
He won't tell you. I've tried.
1) DM can be very useful to get a project bootstrapped. Even if you use a framework or especially you will find a lot of solutions for your problem ready made. Decoupling parts in logic makes sure you don't have the same code in your project. 2) composer is the first PHP based DM. That being said, if someone uses composer on productive he is clearly not an experienced dev, especially never had to manage a high traffic or critical web project. And if you should run an update on your local dev-env you should notice it latest when trying to commit. Not using any form of version control is surely the least professional way of developing something.
I don't know why so many people in this thread are saying "just use cookies" or trying to apply simpler solutions. Here's a real-world use of an AI. I run a gaming forum, and we have two seemingly conflicting policies. 1. A super open/easy registration process (no email validation required, just enter your username and password, and register and you automatically log in and can start posting. The goal is to capitalize a on a user's impulse to leave a comment, and then not cock block them with an annoying validation step. 2. At the same time, we have fairly strict discussion policies and actively ban annoying / disruptive users. Suffice it to say, banning someone doesn't *ACTUALLY* work very well because 2 seconds later, they can create another account with ZERO hassle. If they become a chronic problem, we ban their IP, but that's fairly easy to get around. So is installing cookies and other things. We do reach out to http://stopforumspam.org's API to make sure they're not using a known toxic proxy, but that's also not always effective. It stops spam bots, but not humans intent on re-registering. So how can we maintain a super convenient and open registration policy, while also making bannings effective? An AI that can: 1. Utilize many different data points to make a guess that the newly registered user might have been previously banned. 2. Can learn and better refine its guesses if it lets a user get through, but you subsequently ban the user later. Additionally, if the occassional spam bot does make it through, they usually either post or edit their profile with a fairly recognizable pattern. An AI could run every night looking for users that look suspiciously like spam bots, and automatically disabling their accounts or flagging the for admin review.
Then I'm pronouncing it /PUH-puh-puh/. Stick your tongue out on each syllable. 
Anything that owns develop owns production by extension, so yeah... scary business indeed.
The `p` is silent.
I haven't forgotten it - there's a related pull request. https://github.com/composer/composer/pull/1941 Right now I just want to focus on one issue. The others can take their turn through the shredder. As I implied in the article, this wasn't the first time Composer has been kicked around in the security world. The maintainers need to get a grip on reality and quit dawdling over its security problems. It's becoming an infuriating PITA.
PHP has access to the shell so whatever you can do from dev, it can do also. If you can make git commits, it could too. If you have production keys handy, it could locate them, etc.
Why not make this feature opt-in, on a per-package basis in composer.json (disabled by default for all packages)? I mean, maybe I'm missing something...?
We're assuming the attacker doesn't want to be discovered until it's too late. They'll fudge package names, bury the hostile code somewhere innocuous, and the base of their package could be a simple clone of the real package so it even works perfectly during testing. Unlike some innocent conflict that kills your CI build or has a clearly distinguishable name, attackers won't want to fail right out of the gate.
That's correct. It could read the contents of my ~/.ssh directory and transmit the contents to some remote server.. Edit: Let me elaborate on this, maybe not Composer directly but once lenybernard/symfony is in my vendor and used as my main Symfony distribution there nothing stopping it from reading the contents of my ~/.ssh on every request I make on my local box.
This wouldn't be inappropriate if you're an analytics company like kissmetrics, Google analytics, or Mixpanel. 
This may be a silly question, but the description text is a little unclear. For Local VM IP Address, is that the IP that I would use to access my VM from the host machine (web server wise, not SSH)
Both, if you want. To access a vagrant box you just `cd` into the directory that contains your `Vagrantfile` (or any child inside of it) and type `$ vagrant ssh`. The ip address will also be available to your web browser and is what you should insert into your hosts file on your master machine (where you're reading this right now).
Any other suggestions? Not trying to be rude just new to php. I guess I wouldn't know what would make crappy/outdated code. Thanks!
Yes but if you have someone responsible looking at the diff he should notice either massive changes or changes that are not related to a bug/feature etc.
Losing performance, even a tiny bit, for the sake of auto completion in IDE does not look very appealing to me. That's all. I mean, wouldn't it be better to fix the IDEs, or use/write a plugin that will autocomplete using the IDEs autocompletion data for DQL strings or something like that. I think this is a wrong approach to solve this problem.
Great catch! I didn't even see it! Classic reply "Cannot reproduce"
You should set the variable outside the if statements, what should be inside the if statements is your username font. Example: $font25 = "25"; $font15 = "15"; If($rank == "120") { Echo "font stuff with echo font 25 px"; } If($rank = "100") { Echo "font stuff with echo font 15 px"; } Of course, edit to your liking. I'm doing this by memory since I'm on my phone.
I guess the missing information is why the authors thought this 'replace' functionality, as it is implemented, would be nice or even essential to the working of composer. And at this point the most important thing to do would be to spread awareness about this. Even now, I am not sure if a fresh composer install is vulnerable in the same way. 
I think it is when your .lock file has been created with "dirty" dependencies.
You should set the default fontsize first. &lt;?php $fontsize = "13px"; if($r-&gt;rank=='120') { $fontsize = "25px"; } ...... 
What sort of "certain conditions" would this "unintuitive behavior" take place?
Yup, you're getting that error because the `$r-&gt;rank` variable is neither 120 or 100 - so `$fontsize` is never initialized. Just add `$fontsize = "15px"` (or whatever size you want) *before* the first `if()` statement.
&gt; 2) How do other dependency managers handle these use cases? PIP -- the Python package installer, or at least the one pretty much everyone uses -- will only allow a fork to replace a package if it's declared that it'll satisfy the dependency completely AND it's requested. A poor example is `PIL` and `pillow`. Pillow is a fork of PIL -- the Python Imaging Library. You install pillow. Then you install a package that depends on PIL. PIP will see you have pillow, that it satisfies all PIL dependencies (it doesn't, but that's for reasons; don't ask, I don't have the answers) and it won't install PIL -- Pillow is enough. HOWEVER, what Composer seems to be doing is this: I'm installing PIL. For some reason -- "under certain cirumstances" -- PIP sees that this other package, pillow, satisfies what I'm looking for and installs that instead. I ran this automatically (pip -r requirements, maybe?) and didn't pay attention to the output (or `pip -r requirements &amp;&gt; /dev/null` or any other number of stupid mistakes). I now have this rogue package in my install. Maybe it's malicious, maybe it's a friendly fork that got installed by accident. In either case, I don't want it, I want PIL (or whatever else I meant to install).
If you have two packages where the dependencies conflict. For example, cool/framework might require simple/logger 2.0 while speedy/orm requires simple/logger 2.1. Normally, this would cause an error trying to update. However, someone could put password-stealing/logger on Packagist and say that it replaces simple/logger 2.*. In that case, it would install because it claims to solve the conflict in your packages by replacing both required versions.
Ew. I know with `pip`/python, you can declare dependencies like `Package &gt;= 2.1, &lt; 3`. Does Composer have something similar or is it just wildcards?
Looking good for me thanks!
It has two intended usages. 1. The first is genuine forks. Consider OpenOffice and LibreOffice. If you're writing a macro program, you can say that it requires OpenOffice. However, LibreOffice can assert that it replaces OpenOffice and is, in theory, the same public API. Your program should also work with it. 2. A meta package. zendframework/zendframework includes all the ZF2 components. Therefore, it replaces zendframework/zend-authentication (because it already contains the classes). If your package requires zendframework/zend-authentication, zendframework/zendframework also fulfills this requirement. Other package managers handle this issue in different ways: 1. For a package manager like yum, the repositories you have installed are curated. You can turn on additional repositories but those are typically curated too. For example, CentOS ships with PHP 5.3, so if I try to install a package that requires 5.4, it'll fail. However, I can add the remi repository. If I try to install the other package, it will now pull in PHP 5.4 from the remi repository. I, essentially, had to tell the package manager that I trust remi's curation. 2. Other package managers don't pull in alternative packages automatically, they just check to see if you have them installed. In my fork example, your macro program wouldn't automatically install LibreOffice. It'd only use the "replace" concept in LibreOffice if you already had it installed. Overall, I think the proposed composer solution is a good one -- it will tell me about packages on Packagist that aren't the listed requirements but claim to solve the conflicts. Then I can add them to my top level composer.json to bring them in after I've reviewed them.
It could, yes. If the dependencies you list in your composer.json have conflicts, this could happen right off the bat. 
Oh yeah, it has a ton of crazy options for specifying the version you want. However, that doesn't stop the malicious package from using wildcards in the "replace" segment.
:( I was actually excited for Composer despite having not developed with PHP for a few years. But a vulnerability like this is what initially led me to seek so called greener pastures. Don't get me wrong, packaging Python can be a nightmare (wheels vs eggs, what packaging tool to use, pip vs easy_install), but just straight installing rogue code... :/
&gt; numeric primary keys generated by database engines may get re-used. Add some entries, remove the last few, restart your server. It will most likely start at MAX(id) + 1. At least in mysql, that's 100% not how auto_increment fields work. If you're on InnoDB in ACID compliant mode it will *never* happen. &gt; non-sequential non-numerical IDs This kills the database. Creating random ints (and praying they aren't already used...) and then inserting them ends up reordering your indexes all over the place. It's kind of awful.
If the author can't be bothered to write a test suite for the code, I can't be bothered to rely on it.
Great job! Congrats! Such a feeling of achievement, amirite?
Thanks. You are right. Great feeling of achievement. Awesome to see the development machine working.
you could've just said "please add tests for the project", instead.
So Uhet?
Damn you composer, I thought we had a good thing going. * Are there any viable alternatives to using composer for dependency management that aren't a pain in the ass? * Is there any relatively foolproof way of evaluating a specific .lock file to quickly and efficiently figure out if something has gone fubar? (a guide for people that might be "lock file what now?") Just down the page I also saw http://www.reddit.com/r/PHP/comments/1ydwlq/visual_representation_of_your_composer and I'm wondering if that might be a handy way of quickly analysing composer dependencies to pick up any potential problems. Nowhere near a solution for the actual vulnerability, but at least now I know it exists, I can try and figure out a new process for ensuring I don't get caught out. Composer seems like one of those things that people would cover up issues about to protect. Like the banks, it's becoming "too big to fail". I can only imagine, if it becomes associated with major security loopholes, it'll come crashing down, bringing a part of PHP's reputation with it.
I think it's pronounced Puf Pet like Puppet
Maybe someone should just start replacing everything with code that spits out a warning about it. Seems like a good way to solve the issue very fast if they dont want to fix it.
The irony that it was "created by [author] for purposes (sic) of Codeception project" is lost on the author, it seems.
I'm sure the author would appreciatively accept a PR.
Let me repeat: you have no idea what impact it has on performances! Until someone benchmarks anything, that point is moot. And even then, there's something called "optimization/improvements". If everything is cached, what tells you that this will be slower than Doctrine's DQL parsing? (which by the way is cached too!) Yet Doctrine is widely used.
That's it! thanks. 
Instead of being a dick, you could tell me what's wrong with it.
It is not a *"basic tutorial for PHP"*. What you wrote there is a *"basic tutorial for `print`"*
I can't even remind the name and alway type "php puppet" in Google. Until recently, it wouldn't give the expected result ...
Yep, because it will try and find dependencies - if there's a known-safe lockfile composer install will use that - so the first install and subsequent updates would be vulnerable.
No, it's worse than that. You don't have to have anything 'wrong' with your composer.json for this surprising behaviour to occur. See my other response for more details.
TL:DR version: Composer is great, packagist is terrible. If you are not running your own version of Packagist with the Satis library that powers packagist.org, then you are being almost criminally incompetent and asking to be hacked. Setting up your own Satis is really simple - here is [Bastion](https://github.com/Danack/Bastion), my simple wrapper that allows me to manage the libraries, store them on S3 and then set access to it via an ACL. (It's all pretty obvious, but I'll add some more readme.txt later). Actual version: The `replace` functionality is just terrible. The idea behind it is that it allows projects like Symfony to release components of their project as one Composer package, but also include that package in a 'group' package. The problem is that it operates **GLOBALLY** across the whole of Packagist with absolutely no security checks on who is replacing what. You also don't need to reference the package that does the referencing. Because it operates globally across packagist, Composer will _automatically_ find the `replace` package and use it. Last year, I forked the Guzzle library while working on a fork which I wasn't sure would be merged back to the main branch, and so I put 'MyLibraryGuzzle replaces Guzzle'. Composer started installing my forked package with no-one referencing it directly until the packagist guys manually detected the problem and removed my fork from packagist. I really don't understand how the Composer guys don't understand that this is terrible: &gt; First of all, this behavior is not a security issue in Composer. ...Most importantly you should only ever run composer update yourself manually on your development machine. You should read its output, This is nuts. Having programmers have to check by eyeball a program's output to ensure that you haven't been hacked is inevitably going to fail as: * People may forget to check. * Even if they do check, they may get confused as to what is the 'correct' version. * It's possible to spoof package names to trick people e.g. symfony vs symphony. As well as the security issues, because so many people fork and replace popular packages it is one of the main causes of Composer being incredibly slow. The composer.json from [this stackoverflow question](http://stackoverflow.com/questions/21815635/composer-running-out-of-memory-on-every-project-mac-os-x) takes about a gigabyte of ram to store all of the information about the packages. This is due to the Laravel using the Symfony modules, and as so many of the symfony are replaced or forked, there is a huge amount of possible 'replaces'. The Composer guys are planning to fix [this soon](https://github.com/composer/composer/issues/2690). However I really wish they'd add the ability to disable this mis-feature in the meantime. 95% of people don't need this feature, and it would be better for the 5% of people who do want it, to have to manually enable it, rather than have it being a terrible surprise for everyone else. However, in the meantime you should be running your own Satis/Packagist. When you have control of which packages are actually included in the Satis/Packagist provider, you don't have to worry about someone replacing a package you use in your code. Yes, that means that you have to manually setup which packages you will use - however this is only takes a few minutes, only needs to be done once, and then you can do `composer update` without having to worry that you're about to get hacked, if you miss something. Oh, and btw - not only does the replace allow someone to give you a different version of a package, because of the feature that allows packages to to run scripts when composer does an update, it means that even if you check the output of `composer update` that would be after an attacker has run code on your system. 
&gt; If you have two packages where the dependencies conflict. This is not correct. You do not have to have a conflict in your packages for Composer to pick a version that 'replaces' another version. The replace rules work globally across Packagist, and can be picked up automatically by Composer without you having anything 'bad' in your composer.json. 
Yep. Sure, i will write tests, when I get some time for this. Right now works for my projects (and projects of other people), that's why I feel that Robo is ready to be shown. The main issue with writing tests i see now, that most of them like `Exec`, `Server`, `Git`, `GitHub` can't be tested in units. Basically that would require acceptance tests for most cases. 
I enjoy the relative simplicity of Laravel - you aren't forced to adopt things like Repositories, managers, etc. but you're free to do so if you want. This makes it practical for quickly creating small apps to building larger applications in a robust fashion. I'm not a huge fan of Blade either (it's basically string_replacing PHP). There's [a really nice Twig bridge](https://github.com/rcrowe/TwigBridge) to integrate that. The one thing I do miss is Symfony's console/profiler - you can install [laravel-debugbar](https://github.com/barryvdh/laravel-debugbar) to get a toolbar but it's not quite as full-featured.
While the post itself seems useful, this website is completely unusable on a mobile device because of all the floating social and contact crap. It should be considered a crime to have a site about programming sites, that doesn't work well. Unless they're trying to be ironic. 
You are incorrect. The matcher prefers the named packages and then also prefers the named vendor. Replace packages are only considered if they are already installed or if they satisfy a version conflict that can't be handled by the real package.
Why not just [monolog](https://github.com/Seldaek/monolog)?
According to the [pull request](https://github.com/composer/composer/issues/2690#issuecomment-35727439), this was fixed about a half hour ago. 
You should have a look at other ORMs, especially Doctrine. There is a whole parser inside, to parse the DQL queries. And for annotations, comments are also parsed. That's not shocking to me.
No I'm not - https://github.com/Danack/guzzle/pull/2#issuecomment-20113241 No one had referenced my actual package, and yet it had been installed hundreds of times, because composer had picked it up instead of the real Guzzle version. 
What about the native PHP functions? What is different/better?
Very nice, kudos for using the SPL for dealing with CSV. Might be useful to implement ArrayInterface, then you could access/add/update rows in your csv file easily.
If you think I'm incorrect - please explain why my package was removed from packagist.
I've used SPL classes because : * it's object oriented * you don't have to re-invent the wheels by implementing your own Iterator from the PHP functions * it implements Iterator so you can easily manipulate CSV with Iterators 
I thought about it but then you get a problem of detecting your file cursor position. And the insertion depends greatly on the $open_mode chosen when opening the file. If you can figure out a way then I'll re-introduce the ArrayAccess Interface that was present in an early version.
There's many tutorials for beginners out there (some of them are very good), why to write another one? I'm not against if someone wants to reinvent the wheel, but I guess the good question is: what's wrong with all the existing beginners tutorials out there, and what will you do different / better? Furthermore your tutorial right now doesn't explain much. If this is really something meant for beginners, then perhaps you should start with, explanation what PHP is, where we're using it, etc... Some introduction. Then go on explain some basic principles of programming, then syntax a little bit, and then move on to other things. Or, alternatively, I think people much prefer learning while building something meaningful. You could start developing a small web project, - like a basic website, and explain things along the way. Start with, basic things, like where to download PHP and how to set it up, and then move on explaining relationship between HTML and PHP. Good luck.
Oh, I see. I'd find it more useful when populating it for Writing or after reading the whole file in. Although, if your file is huge, you run out of memory quickly.
Small disclaimer - I made this cheat sheet. And the site used to make the cheat sheet.
The Composer team just doesn't understand security. They ignore it for years, fix it less than 24hrs after I blog about it, and then proceed to the blackening phase: &gt;@padraicb @klimpong @grmpyprogrammer Rather than scaring people with a poorly researched rant, help fix the issue and inform them correctly Poorly researched: They said is was not a security vulnerability, I said it was. They were wrong. Fix the issue: I'm not a Composer maintainer so why should I? I can't fix every single PHP issue I report or blog about. Inform them correctly: I wrote a blog post. They wouldn't even note it in their own official documentation. It's just very very sad.
By the way: If you have your LC_CTYPE set to a locale that's using UTF-8 and you try to parse a file (either using fgetcsv or SPL) that's not in UTF-8, PHP will happily cut your fields the moment it encounters a byte it can't understand (i.e. any outside of ASCII that doesn't happen to be part of a UTF-8 character which it likely isn't) https://gist.github.com/pilif/9137146 shows what I'm using to on-the-fly convert from latin1 to utf-8 when reading a file (and a few weeks ago I had to deal with a CSV file in cp437 for which I used a similar idea, but using iconv instead of utf8_encode) 
We’ve released Bolt 1.5.0 as a feature release after Bolt 1.4. We're hard at work on Bolt 2.0, but in the six weeks since the last update, a lot of minor improvements were made by us and our contributors. Quite a few of the changes in this version are nice, little improvements and we wanted to get them out sooner rather than later. Read the details on the site: http://bolt.cm/newsitem/bolt-150-released This release also has a few improvements that will make the transition to Bolt 2.0 even smoother, which will be out in a month or two. 
Everything can be tested in units. Mocks are your friend.
Good work, nice to see $dom = $writer-&gt;toXML('data', 'item', 'cell'); I've been working with CSV this way for a while now. Well it's the first thing I do, convert to XML, and parse it using XPath. Made life much easier. Looked something like $rows = $xPath-&gt;query('row'); foreach ($rows as $row) { $cellData = $xPath-&gt;query('colHeaderName', $row)-&gt;firstChild-&gt;wholeText; } But the real treat is doing things like $filteredRows = $xPath-&gt;query('row/aBooleanCol[text()=1]');
Exactly that is why I based the filtering capabilities of the library on SPL Iterator objects
What about PSR-4? :)
Great work, looks quite nice! 
Agreed. It's not too often that I see code posted in this reddit that I can get behind, but the author did a pretty good job here.
 $api-&gt;foo($required1, $required2, (array) $optionalParams)
You know what they say about assumptions.
Hey, this is pretty cool! Seems like it has a lot of functionality in it which is cool. I like the idea that you broke up the reading and writing for CSV files separate. I made a super simple CSV reader class built ontop of PHP's native fgetcsv() &gt; https://github.com/maxatbrs/CSVforPHP
Wow… I… just… What is this I don't even…
Right, and obviously no one should write coffeescript + angular, it's much leaner to just compile .NET components into MMVC-CCVM modules (grunt-contrib-dotnet-to-mmvc can do that for you, just plug it into the Jenkins hip-hop). I'll be publishing my ebook on this in a few weeks actually, early buyers get free access to my bonus series "WAMP on XP, for High-Volume Production Sites."
&gt; Start IDs At a Gigantic Number This is truly a useless statement. If you want a real solution for identifiers consider a solution like the one discussed here: http://eng.wealthfront.com/2011/03/ode-to-textual-identifiers.html
Yeah, seems like a bad idea. But then theoretically, your composer.json should only allow updates to a specified version right?
Some quick observation. - No need to call the class file 'restme.inc.php'. it can be Restme.php based on the class name. - You probably need to put it under a namespace. PHP does have that. - No test - You may want to have a composer.json file While I thank you for the effort, there is a package called Guzzle that can do the same and much more. But, at least this will help you learn and understand PHP better. Good luck and have fun coding.
Does this really have anything to do with REST? This is a router, with HTTP verb routing. 
Short and sweet like a utility should be.
Funny how no one has mentioned using a switch thus far.
The link for PSR-4 is under the PSR-3 heading, but the PSR-3 link is missing.
Cool thanks for the props! The goal of CSVForPHP is to be a simple drop in parser that handles different delimiters and enclosures. Spits out an array and that's that. Not as robust as OP's solution but thought I'd share.
Do you like Markdown? Take a look at Kirby or Statamic. They are php based I think. Customisable, them able, extendable, primarily flat files.
Oh, oh then what the point of testing then, guys? Stop repeating this mantra about mocks can do everything. My tasks call system functions. Sure I can mock them. But that won't prove in any way that my code works. Also there are Composer, Git, GitHub tasks. Sure, I can mock git calls, github apis, composer, etc. But when Github will change apis I will have broken code even when all tests pass. Do I really need false-positive testing? 
heh, idk about top 5% :P lol Thanks! I will do my best. :D
Nodes awesome. You're reasoning for using it is rather questionable. Having PHP and node running at the same time? That's really a non-issue.
static sites seem nice, but is Jekyll not universally agreed upon dog in that arena? 
Depending on the spec of your server, and what's running on it already, generally speaking running node and PHP side by side shouldn't be a problem. Even a pretty low spec VPS could do it.
You can have your node server running on one port and your PHP server running on another and a proxy server that listens on port 80 and does the appropriate routing based on URL path to whatever server at whatever port
Seems like a fairly decent set up. I do already use version control, [bitbucket](https://bitbucket.org/) actually provides free private repos, they only charge when you want more users involved. I just don't use git on my servers, I use it just for versioning at the moment and having fallbacks if I need to go back to an older version. I don't have a local development environment mainly because I develop in Windows and my servers all run Linux. I've never found a Linux desktop I'm comfortable with. You're right it's probably more development than staging at the moment. It sounds like it will probably be worth my time and money investing in another vps and learning how to use git and the like to make my workflow a lot easier. Still don't know what to do about local super quick testing. I really don't like the idea of installing wamp on my dev laptop. I like to keep it as bloat free as I can.
The point of open source - it is given as is. Don't like it - don't use it. You don't pay for it
Steveo82 gives a good approach in general, and the lack of separate class files drives me crazy as a developer whenever I'm forced to work with sofware like WordPress. If you plan on building this out, that's the ideal approach. So long as you're not doing a whole whack of logic, assignments, and especially database loads, it's better to just strip down your code and see if it can be echoed out in a quick check. I don't consider a comparator to be beyond the scope of what you'd put in a view. Others are pointing out your syntax error, but I think the bigger issue is that your comparisons and assignments are clunky and bloated. You're also jamming an echo statement to write out an HTML p-tag needlessly. Unless it's a controller class or something where your whole file under a &lt;?php set on line 1, just use the HTML in there. As others have stated, you probably want a default in there (I'm assuming it's 10px.) &lt;p style="font-size:&lt;?=$r-&gt;rank&gt;=120?25:($r-&gt;rank&gt;=100?15:10);?&gt;px"&gt;&lt;?=$content ?&gt;&lt;/p&gt; Now your text editor will nicely keep it indented with the rest of your html, too. 
+1 ternary
Yeah, it's really just a router. HTTP verbs are nice, but in my experience every CMS/Framework either has a really good one that I'd rather use (like Symfony's), or a really bad one that would be just as much work to replace with this as it would be to replace with Symfony. My go-to ad-hoc approach when it's tough to do, is to just find whatever controller-logic I have to work with, and jam a big switch on $_SERVER['REQUEST_METHOD'] before it does any of its processing. Frankly I think the PHP-router-wars are about ready to commence (if they haven't already) and I'd rather work on improving an existing solution than on adding more solutions to the fray.
&gt; we generally expect tools to behave a certain way. Or, to quote my favourite article on the [whole internet](http://unqualified-reservations.blogspot.co.uk/2009/07/wolfram-alpha-and-hubristic-user.html): &gt;Google is not a control interface, because no predictable mapping exists between control input and system behavior, and none can be expected. A screwdriver is a control interface because if I am screwing in a screw and I turn the handle clockwise, I expect the screw to want to go in. If the screw is reverse threaded, it will want to come out instead, confusing me dreadfully. Fortunately, this mapping is not random; it is predictable. (Yes, Aspies, by "random" I mean "arbitrary.") &gt; ... &gt; The error is that control interfaces must not be intelligent. Briefly, intelligent user interfaces should be limited to applications in which the user does not expect to control the behavior of the product. If the product is used as a tool, its interface should be as unintelligent as possible. Stupid is predictable; predictable is learnable; learnable is usable. A tool like composer should be a control interface - what you put into the composer.json should allow you to completely predict what will be generated. Any 'intelligence' in the tool is actually a bad thing. &gt; My guess is that if there is any "next thing" in search interfaces, it will come not from smarter UIs, but from dumber ones in which the user does more work This is exactly what I want from my tools. I don't want them to do 'everything' for me. I want to provide them with a small amount of information and then for them to do a great deal of predictable work for me. 
Why not run a 2nd VM? If your laptop cant hack 2, just power off your dev and boot the staging VM
 protected $available_open_mode = ['r', 'r+', 'w', 'w+', 'x', 'x+', 'a', 'a+', 'c', 'c+']; all missing b (binary). just let php give the error if an invalid mode is passed, dont validate it yourself.
This one throws a lot of people because it's an odd way to think of things in human terms, but it avoids a lot. The big one that sticks out in my mind is to avoid getting slammed by PHP's type juggling system in a bad, bad way. The worst, but most common, case I can think of is casting a boolean as an int and using it as a key. The reason this is so bad is that id #1 is often a 'special' version of whatever it's representing, and usually special meaning it's extremely important. If you have a CMS and you accidentally unpublish page #1, you might be unpublishing your root-page and bringing down your entire website. If you're performing an action on user #1, that's probably your root/site admin, which is the last user you'd ever want to be subjected to what your code is doing. e.g. simple example from my favourite CMS concrete5 (from inside a console): php &gt; echo UserInfo::getByID(1)-&gt;getUserName() . PHP_EOL; admin Lovely, that works as I'd expect; it's the admin. php &gt; echo UserInfo::getByID(true)-&gt;getUserName() . PHP_EOL; admin ruh-roh! I passed in a 'true', which really isn't an ID, but it's still a 1, which is my admin. Not what I wanted at all. This is a situation that's way too easy to get into; you could be looking up that user ID based on some function someone else wrote that you only half-understand (and don't say something ridiculous like 'you should never call any code unless you fully understand it', because if you really believed that then I'd assume you'd still be at home reading the full list of opcodes for your CPU before you'd even think of going on reddit). Even just a stray ! in your code can turn a '', 0, false, null, [], etc. into a 1.
So a feature in this project is responsible for an implicit potential security vulnerability, and the maintainers are justifying not fixing it because developers are supposed to be smart enough to use their tools properly? I *know* I've heard this somewhere before. I just can't quite put my finger on it... ;-)
Security is a shared responsibility. No developer should assume their vendor software inherently protects them from all attacks just because some part does.
Good remark! I'll make an update to fix this issue, thanks
This is not really a feature, that's just how it works. Look at PHP: does it enable you to print user input not escaped? Yes. That's not really a feature. That's just how it works. Do you blame PHP for this? Should PHP escape everything? Remember `magic_quotes`? Was it a good solution? Is the *feeling* of security for the user a good thing? Answer: no.
The problem is that you can't secure every single low level class when it's by-design accepting unsecure input. I dug into the class history myself, and it very obviously was not intended to be a secure class. That was a deliberate decision. So, the right decision was to document that intent as clearly as possible. It should have been documented clearly before obviously, but that's why they spent time discussing and consulting to make sure they came to a good decision.
Exactly. The class was designed to accept insecure input. If you looked at the class, and it's a really simple class, there is obviously zero escaping. If you look at the class history on git, that was a genuine design decision. Clearly communicated the original intent of the class is a perfectly valid decision. Contrast this to Composer. There we had a security vulnerability that could allow an attacker to install hostile code. That was also by design (as it happened) but it was very different. Composer entire purpose is to install dependencies defined in composer.json. If it fails that, it's a critical bug, if it pulls in packages not defined as dependencies, it's a security vulnerability. If they had chosen to document rather than fix - nobody in their right mind would use Composer since it's entire reason for existing was failing.
I use http://beanstalkapp.com/ to deploy stuff. It's tied in to git (but I believe SVN works too). Basically you push your commits to this app and then press the deploy button, if something fails it reverts it back to the previous version. You can also run custom commands, eg: composer update after a deploy.
Awesome work, totally going to give this a go! +/u/dogetipbot 50 doge
I should probably have also said that the company I work for is primarily a .Net house and use TeamCity for their build and deployment. Is that something that can be utilised? Also, how do you handle databases in multiple environments? Or would that be shared at Dev then uploaded at deploy?
Every environment needs there own database. You need some kind of automated migration script that runs right after deploying. Automatically of course, by running the migrations from your deploy script (Beanstalk, Phing, Capistrano, whatever). If you are using Doctrine, have a look at Doctrine Migrations. It works great!
I decided to go with Ghost. Bad, bad mistake. This was 1 month ago so I don't know if it got updated, but Ghost is seriously, seriously lacking in feature. Only 1 user can login. like.. what? =|. Now the team wants Wordpress... arggg. Hopefully OctoberCMS will change that. 
well, the only real dynamic content on blogs is user comments. take a look at the [blog of kirby](http://getkirby.com/blog). they use disqus for their comments. this way, you can make a blog with a static site generator with comments.
Any reason why you are not SSHing into the server and updating the code through an SVN update? We use DeployHQ at my employer. http://deployhq.com/
I think that's what teamcity does to be honest, along with build the code.
I wouldn't mention speed in relation to single quotes. It's extremely unlikely that you'll ever notice the difference in speed between single quotes and double quotes. 
http://imgur.com/2fM8mVa file: user.js /** * This only allows one user to be added to the database, otherwise fails. * @param {object} user * @author javorszky */ return validatePasswordLength(userData.password).then(function () { return self.forge().fetch(); }).then(function (user) { // Check if user exists if (user) { return when.reject(new Error('A user is already registered. Only one user for now!')); } }) I call that "not enabling it". 
Also, using an opcache would make it a non-issue.
That DeployHQ looks good. Is there anything similar to that but without the monthly fee?
I did not manage to get the &lt;li&gt; fixed, at least not with significant additions to code. However, I've rewritten the code, made it more legible. It now works well even with huge chunks of code, such as this reddit thread! http://gajus.com/dindent/sandbox/?uid=s503f8TbNLkr7Q7PMIyO
Yeah, don't get me wrong if composer is really picking forks at random it's completely nuts. I could get down with composer erroring out and advising a fork with action needed or automatically using a lib that's included as anothers dependency, but I can't get behind going to make a coffee during an update then never checking the output. Your junior dev might do that so you'll also need to diff the .lock, but this should only ever include deliberate changes and your new minor version changes should still go through testing. 
Just want to say congrats on this, you guys seem to be doing really great work.
I see no difference whatsoever with the vulnerability here and the one in Composer. They're both preventable if you use the tool properly, and they're both open to easy abuse if you aren't paying attention to what you're doing. The "replace" feature was by design. It was, as you say, just how Composer worked. The difference, as I see it, is that you and a few other very vocal people decided that "this is how it works" was a bad justification for keeping around a security hole in Composer's case, but the same thing gets a stamp of approval in Doctrine's case. I'm not buying it, personally. I think you made good points with respect to Composer, but I think they also apply to Doctrine in this case, and this, too, should be fixed.
Thank you! :-)
I have used https://github.com/jwage/easy-csv . Pretty good one. Yes from jwage behind doctrine project.
They probably haven't written the code to handle editing conflicts and such which is why it's not allowed.
At my company, we use a combination of git, phing, ssh, and a bash script to deploy. Our site is load balanced on EC2. We can have any number of instances behind the load balancer. When we are ready to deploy, we use a phing task that runs all of our tests, and assuming they all succeed, it sshs into our "utility" server (this is a server that we have running that runs all of our background/cron jobs) and runs a php cli script that uses the AWS SDK to poll the Load balancer to get all of the healthy instances. Once it has that list, it sshs into each and runs a command to pull updates from the master branch and run composer install. An older version of the script that runs the deployment can be found at https://github.com/adear11/AWSEC2Deployer/blob/master/deploy-app.php. We have updated it to use the v2 SDK and have made it so that it will clear the APC user cache for the web server. If interested, I'll try to find some time to update this version to the current version of the script.
&gt; Ternary operators are a great way to condense code, but are often used in excess. While ternary operators can be stacked/nested, it is advised to use one per line for readability. One per line is good, but that's not the reason why it should be advised. You see, the ternary operator works differently in PHP compared to all other languages that have the same operator. So when you use ternaries, use them one at a time. Whenever I see them nested I rewrite them to if statements so I know what the code actually does.
[Capifony](http://capifony.org/) is a useful deployment tool, great for composer based applications. You can script the fetch from the vcs, composer install and then cache clearing.
I use this at work too, haven't yet found anything as good.
Why does it have nothing to do with REST? What would make it RESTful? I may have missed the point but the fact that it facilitates you to define a RESTful API makes it to do with REST, no?
Thanks mardix for the pointers, I'll look into those and Guzzle.
My approach has been to use capistrano for production environments where I might have to coordinate database changes with my update or similar multi-step procedures. Once you get it set up it is as simple as typing "cap deploy" or "cap deploy:migrations" and entering a few passwords. On less mission-critical sites I usually push to git, and have the server cloned from the same git repository. Updating is just a matter of pushing my changes, log in to the server and manually "git pull" the changes down. Updating is much quicker than copying via FTP and there is no chance to make silly mistakes. If something breaks I can always check out a known-good commit. One nice thing to know about git is you don't have to change your workflow. You can use it exactly like you use SVN, and you don't have to learn about distributed workflows until you have the need.
I don't know of any deployment system that's free. That's why I simply SSH into my own personal servers are run git update commands, or setup post receive hooks.
A simple approach is fabric, which essentially just runs shell commands over ssh for you. In a nut shell the steps you should be going through (automated or not): * ssh to the machine * pull latest code from vcs * perform any necessary tasks on that code (migrations/cache/etc) * copy it to a deployment folder (usually datetime named) * move the link pointing to the old code to the new code * probably reload web server/clear op code cache
Thanks! :) 
The Composer security vulnerability was very different: 1. It wasn't some low level class - it was the core purpose of composer that was left vulnerable. Just as they currently have TLS protection for HTTPS disabled - the next Composer topic I'll blog about if it doesn't get fixed soon (I'm staring at the code right now). 2. The result of the vulnerability was recognised as wrong by the Composer team. They merely denied this, took to a FUD exercise over the point of replace (which I never disputed) while taking manual steps to prevent it when people complained over the years. Their actions did NOT agree with replace not being a vulnerability. Doctrine has taken no such actions to ever imply this class operated improperly. 3. Doctrine's function was obviously never secure. It never claimed to be secure. It was designed not to be secure deliberately (I checked the git history all the way back to when the class originated to make sure of that). They are only clarifying that openly to avoid confusion. Composer was also obviously never secure, but this was unintentional. They suffered from a design flaw shared by no other package manager in existence. Intent matters! 4. Doctrine could have been used safely as it was. Composer never could have been. 5. Composer has zero security sense. Doctrine dug into the issue, reached out to security people, and reached a sensible decision without needing a public shitstorm to motivate them. Their stance is not without due diligence and care. 6. I agreed with Doctrine's decision. If it was the same sort of decision as Composer's, and they publicly went with that, I'd have written a ranty blog post for them too :P. You're entitled to disagree and, to a point, you're quite right to remain sceptical. I don't want to persuade you to blindly trust what ANY project announces. However, earlier commentators are right. A low level class is more akin to a PHP function than thousands upon thousands of lines of code whose only purpose in existing is to install the correct dependencies as you define them - and then fails in that purpose.
The fonts are not working. Latest Chrome on Mac.
Kinda. REST is a series of conventions that define how things work. RESTful URLs are simply the idea of a "resource" and the appropriate use of HTTP verbs, (instead of saying `GET /getSomeData` and `POST /deleteSomeData` like some JSON-RPC type APIs. The fact that you could use this basic router to make a RESTful API, SOAP API, XML-RPC or JSON-RPC makes me suggest that is has nothing to do with REST and is just a HTTP-based Router. Thats fine. It's not an insult, im just calling a spade a spade. :)
Long-time C programmer here, who has been working more with the web-stack the past 4 years and thus more focused on scripting languages: C doesn't automatically mean faster code. C means you have more control over what your code does, so it's often used by people who are doing work where that level of optimization is necessary, but the solution to slow code is almost never just to re-implement in C. The two huge differences you'll find when working in C (aside from the extra overhead in compiling and testing on various archs/environments) are variable typing and memory management. If your code needs to run a lot of in-memory operations over a huge number of different variables, then yes a well-tuned C program will far outperform PHP, mainly because you can make sure storing those values in the most appropriate types. I realize that there are ways to do bitwise operations in PHP, but C is generally much nicer for writing them in. It's pretty common in PHP to see a big pile of variables setup which are really just flags, and it's a natural way to program in PHP (e.g. $isForSale, $user-&gt;active = true;, etc.) I don't know the exact numbers, but I know that an integer in PHP uses your full word-size (so 64-bits on a 64-bit processor), and that a PHP variable is even bigger than 64 bits since it also stores some metadata with it, but let's just say it's 64-bits for now. In C, the syntax, style, and best practices all favour setting bit-flags for these sorts of things. For things like store inventories, user databases, etc. (the usual stuff PHP is meant to manage), if you have only 10 to 20 flag variables per request, and your server's set to 5 threads, this memory usage is absolutely negligable, so optimizing would be silly. If you're keeping track of 500,000 variables, with a bunch of bit-flags, 16-bit-ints, etc. then it goes from high-impact to trivial when you properly code it up in C. If you've haven't already, I highly recommend the [HHVM](http://hhvm.com) project. You can continue to code in PHP when it's appropriate, but it does a JIT so you get the same advantages you'd have from directly porting.
I use svn as the code repo. Phing to automate the build. Jenkins which pulls the code from svn runs all the code tools through Phing and then does an svn up on the server farm. It is all automated and triggered on code commit.
Curious how much of an effect opcache and other performance tuning would improve symfony benchmarks.
Working for me, latest Chrome on Mac.
Like any other project, this one has a public API intended to be consumed by end users (us, as developers). The fact that a DBAL sits at a lower level in an application architecture than other modules is completely irrelevant when it comes to security. Now, I do agree with you that *at some point* the developer has to take responsibility. However, I think with respect to SQL injection, this line is very black and white. It should be drawn when crafting your own SQL strings. At that point, it's completely up to you to prevent injection. However, if you're using some project to create those SQL strings *for you*, then that project has a responsibility to secure its API. In this case, Doctrine's API is not sufficiently secured. I should be able to pass whatever I want into `Doctrine\DBAL\Connection::insert()` and friends without worry that I may or may not still be vulnerable to SQL injection. After all, one of the major reasons the community has been pushing itself towards these DBALs (outside of convenience and other factors), has been increased security. The stance being taken here completely flies in the face of that goal. **Edit:** I forgot to emphasize that I only feel this way about the project because the Doctrine team exposed DBAL to the public as a stand-alone project. If it were just an intermediate layer for the ORM project, then I would fully understand and support its decision not to secure the API, since it wouldn't be made for public consumption.
Probably a lot, but you could do the same things to the other routers to increase their efficiency as well. The Symfony router is not at all "slow" -- it's slower than these other (arguably needlessly) faster implementations, but it is still quite performant, not to mention very featureful.
If you click any link and go back, it starts working.
another thing to consider is the level of maintainability you desire. codebases written in c can be worked on by less people than php.
Please use [Guzzle](https://github.com/guzzle/guzzle).
Exactly. Nothing happens. If you are at the latest revision and you do a git fetch, it will check the revision and do nothing.
Thanks! Do I have to put anything else, to like... connect to the server? Or something? Or could I just delete what I have and go with this?
I'm getting: Fatal error: Class 'Guzzle\Http\Client' not found in /Applications/XAMPP/xamppfiles/htdocs/project/action.php on line 18
Your example looks correct, except for the CURLOPT_POSTFIELDS value. I think it should be an array so for your example, try changing that line to: curl_setopt( $ch, CURLOPT_POSTFIELDS, ['api_key' =&gt; $api_key, 'guid' =&gt; $guid, 'payload' =&gt; $payload] );
if you're using composer make sure you've added guzzle to your composer.json file. 
needlessly? 
Check out Jenkins. It's free and has a lot of plugins available. Basically, you add "building blocks" to your "jobs". Those blocks can be "run shell script" or "run an ant script"... and you can add more "block types" with plugins. Also, SVN is already included out of the box. What we are doing where I work for PHP: -&gt; Start the Jenkins task -&gt; it gets the code from SVN -&gt; it makes a package (.zip) -&gt; it deploys it where it's needed by unizipping it and sending it through SSH to the right server (after making appropriate backups). For databases, we use flyway to update database schemas or run SQL scripts. This is really simple. You could also check Liquibase for more advanced features on DB (like reverting, etc.) The problems with database updates with CMS systems is when the customer starts to enter data. You really don't want to screw up your deployments on those databases. What you could do is have an automatic task that takes the production database and sends it to your test environment. That way, you can test your SQL scripts and deployment on real data. With Drupal, you could check out [Drush](https://github.com/drush-ops/drush) as a scripting mechanism for deployments.
I've been using HTTPFul: http://phphttpclient.com/ Any comparisons? Should I be looking to Guzzle for new projects?
Look at octopress. 
I have to be fair, I didn't know about the LC_CTYPE problem. But I won't try to fix this in the library. I think it's a PHP problem and fixing it in the library **may cause side effects** in the user script. What I can do is document this behavior so that when that problem arise the developer will know how to resolve it. I'll add a link to your gist in my documentation to point to a suggested solution. This is the same reasoning I've used for not trying to solve the OS X server line ending "bug". Thanks for the feedback
I'd also recommend checking out [sculpin.io](https://sculpin.io/) for this sort of thing.
Well it does cleaner/saner defaults.
I tried it once. Kinda nice, but I got very confused about which file is supposed to be a view and which file is supposed to be piece of content.
Are you a solo developer? If so, check out [Vagrant](https://vagrantup.com)!
Well, to be fair Symfony's goal is to make a completely decoupled, component based, and unopinionated framework and they succeeded. Unfortunately, when your framework is totally(or almost totally) then that means you have to be a configuration based framework (rather than convention). It also means that without caching all those configuration values must be parsed on every request. Laravel goal isn't the same as Symfony. Laravels goal is to be slightly more opinionated(try saving database migrations anywhere besides the database/migrations directory for a minor example. Yes you can specify the directory when running artisan database:migrate but you can't on rolling back). But laravel is much easier to get started and going with. There is much less mental overhead. I like them both. I kinda see laravel as sublime-text and Symfony as Vim. Laravel is really good, and quick to pick up. Symfony has a more difficult learning curve but once you know the ins and outs you're probably slight more efficient than a laravel dev. Just my opinion (from talking with and knowing people from both camps) 
Refactoring a crap code of someone ;)
It becomes an even harder decision to make when you factor in HHVM and Hack language.
In this environment I am. I do have a day job too but I don't have much of a say in that environment, can't even push my own changes to the live server! I will definitely look into Vagrant. I've been hearing more and more about it recently, also puphpet seems to make it a bit easier although I have no idea what puppet is. I will do some reading. I managed to use proxypass and configure node alongside php, but I can't get Ghost working right. I reckon that's more to do with my lack of knowledge with node than my server setup though.
Looks nice - I may have broken it slightly. Trying to view the dependencies of [this] (http://phartitura.com/intahwebz/jig) seems to give an alleged 5xx error (i.e. page says it's an error, but a 200 success is returned.
Interestingly, if we dump Symfony2's router we get even better performance than FastRouter in the worst case: https://github.com/tyler-sommer/php-router-benchmark/pull/2 Of course if FastRouter had a dumper it would probably come out ahead. Another advantage of this is that one can also skip executing all that code adding the routes, but this is obviously not what this benchmark is about.
You can do an internal redirect in the controller with $this-&gt;forward('bundle:controller:action'). Check if the user is logged in, then redirect to the corresponding action based on that. This allows you to keep the two actions separate, but have the url stay the same.
OMG, I just looked at the dumped symfony router code. That's the most insane deal with the devil that has ever been made in code. That's just bananas. It generates 5,000 lines of code that can only handle a finite number of arguments. Frightening.
Sculpin (before mentioned)
This. Edit: Why the downvotes? Some people like to know more people are thinking the same thing. Especially on a subreddit like this. All I'm doing is confirming that this is a good way of doing this. You keep your code easily testable, understandable and concise. 
Well the length grows proportional with the number of routes. It's really not much different than C compilers unrolling loops and similar things, you just don't usually look at it.
/r/PHPhelp
You can't. The security firewall runs after routing. (Because a firewall listener might need a route to decide to forward to a certain target) Two alternatives to /u/WishCow's suggestion: 1. Implement an EventListener that runs after the firewall and change the route. 2. Create a controller that just loads a different controller based on the user state.
Symfony's router is not O(n) (it builds an if-tree and dumps this code in the cache so it's usually O(logn) (except when you use regex in your route)). And I don't think baileylo was talking strictly about router.
This thread has been linked to from elsewhere on reddit. - [/r/webdevnews] [Robo - Modern Task Runner in pure PHP \[/r/PHP\]](http://np.reddit.com/r/webdevnews/comments/1yq18a/robo_modern_task_runner_in_pure_php_rphp/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
yes! that's true.
CRUD by itself really only needs a chapter. CRUD is the concept, REST is more like the implementation. [This Wikipedia page](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) covers pretty much everything you need to know about CRUD.
Maybe your thinking CRUD is something special. It stands for Create, Read, Update and Delete which are the 4 operations you can do with data. In the context of a MySQL application. C -&gt; Insert R -&gt; Select U -&gt; Update D -&gt; Delete You can make a application that performs CRUD on a resource (forum topic for example) . So maybe you are just after a book that teaches MySQL or other database storage option. 
thx. 
What about these questions? &gt; Is porting parts of your code to C or using things like Zephir worth the added effort in maintenance? How can you know when there is a better algorithm? How can you balance the cost of additional R&amp;D to develop an algorithm versus comparatively simple porting to C? You are correct in your assumption that I am naive and inexperienced here. At present, I could not maintain a C codebase, and I am not the strongest when it comes to improving algorithms. Admittedly, I could not describe the complexity of the algorithms I do write. So my line of questioning is more like "where, as a somewhat experienced PHP dev, but overall inexperienced dev in general, should I spend my pennies?"
I'm working on this now, thanks for the comment :)
Code generation is helpful at times -- I just believe it's an unnecessary approach in this specific situation. Beyond that, the dumped routing code loses all its advantage if you cant prefix the regex (e.g. the route starts with an argument). A slightly different benchmark would show symfony's router dump to be much slower than the equivalent fast-route code ...
Here's a benchmark switching them around: https://github.com/tyler-sommer/php-router-benchmark/pull/2#issuecomment-35841396
It just seems like a bad solution to a problem that should be pretty common?
If you need something quick, check out [PhpMaker](http://www.hkvstore.com/phpmaker/). I use it to quickly generate CRUD app. You can also go advanced with it, it has lots of options. One downside is that the generated code is really messy!
Just a question: why do people still keep going about building orm's? I've dealt for the last years with enterprise, large aplications, and ORM's have failed in 90% of them. I am daily fixing and adapting the database to match the stupid queries that a orm issues, just because. So after all these years, i fail to see why an orm might be a great choice for databases...
Generally a api that looks like that screams refactoring. Not to mention that unit testing that is a big pain. Question: is the api in any way under your control? Because if it is, what you need to do is refactor it. So many parameters are generally a sign of a function/method doing alot more work than it should. PS: if the api is external you might still have some success in aking it to be changed. But in case it is not, make mappings between required parameters and the ones you feed and encapsulate that into a set of functions. This would allow you to call the api with 1000 parameters, while still maintaining sanity and having some easy to manage error reporting and mapping.
It's to say that he is not the only person who thinks that. I could spell it out like I just have (or making it into a joke like $this) but in the end I'd be getting the same point across which is that his point is thought of as valid by someone other than himself.
That's what the upvote button is for.
I use this RESTful router, check it out http://zaphpa.org/
Unfortunately it is not under my control and I definitely acknowledge that it needs refactoring. I plan on implementing a data mapper, but not sure how I plan to go about this yet. I am just going to focus on building the basic gateway classes which send and receive raw data to and from the api, then work on a mapper that will convert this data to my domain entities. Perhaps a pattern such as [this](http://soapatterns.org/design_patterns/data_model_transformation) or [this](http://martinfowler.com/eaaCatalog/mapper.html)
Sure, upvotes could communicate that. But once again, I'll reiterate, actually having someone say that they agree is quite helpful. Especially in a subreddit like this. An upvote could just be something like "oh, that helped me too, upvote", or "that's new, sounds good, upvote" rather than an agreement from someone who has tried it, or someone who uses Symfony2 a lot. I accept that "This." doesn't exactly communicate that, which is why I edited my original post, but your comment that it's what the upvote button is for is untrue and your comment is invalid, and probably about as helpful as my original comment.
Forms are really easy in Laravel with the form helper and you can easily load Eloquent models into a form and have it autopopulate. Pagination is also really easy, when you are getting results from the database you simply call the paginate() method and then you can echo out pagination links in your view (supporting Bootstrap 2 and 3 out of the box but fully customisable). As far as what's missing, I feel like Eloquent should support internal model validation (and automatic error reporting back through the form helpers) and a solid asset pipeline (however there is an asset-pipeline package which does a pretty good job. Laravel is one of the best things about PHP at the moment, and if you fear it's not customisable enough (which it usually is) or you don't like it's conventions you can simply use Symfony, which a good proportion of Laravel is built upon. 
What don't you like about it? Seems to me that Laravel covers everything you'd want to do with forms.
If you're at all interested: http://taylorotwell.com/response-dont-use-facades/
Can you elaborate on that? Static methods are widely considered anti-pattern for non-trivial (that is, simple, deterministic, no side-effects) methods when using DI and want testable, reusable code.
There's been a healthy discussion about this. The problem is that's a decision between bad or worse. Either you won't have access to routes inside the firewall or you don't have access to the firewall inside the routing. Some of this is due to the flexibility Symfony offers by allowing multiple firewalls, but for the foreseeable future it will stay the way it is.
&gt; for instance I dislike Blade but only because I think Twig is a much better solution that came along earlier The best things about Laravel IMO is that it's built on composer and has great third party support. Bam! https://github.com/rcrowe/TwigBridge Seemless Twig integration. I use it because PHPStorm understands Twig properly, no hacks necessary.
I've been having a hard time using Eloquent as well. I'm building a web application and using Laravel to develop the API. I *really* wanted to use Eloquent because it looks like it makes things a lot simpler, but it seems that if you have relationships that are more than one or two levels deep, or need to do any joins in any specific way, you need to use the Query Builder.
The Facades are fully mockable and swapable. See documentation chapter on unit testing.
This. You have made my day. Lack of Blade support in PHPStorm has been driving me nuts.
&gt; using this monkey patching It's not monkey patching, at least not to my knowledge you can't monkey patch PHP. You can inject your dependencies. Facades are just shortcuts to methods instantiated by the IoC container. In fact Laravel uses code reflection to instantiate and inject classes which you type hint in your constructor, you can even inject interfaces and point Laravel to the implementation you want to use app-wide. You're right it is essentially syntactic sugar. But it's possible to ignore it entirely and do things properly rather than quickly if you have the knowledge to do so.
I've been looking at doing the same thing. The main problem I struggle with when comparing frameworks to use in a business/enterprise type of setting is the lack of a company backing the framework. Zend and Symfony for example have companies behind them that will pretty much force development to continue in a sane manner. Right now as far as I know Laravel could cease to exist (in terms of how it is today) if the maintainer (Taylor Otwell) were hit by a bus. So far I'm more inclined to use Symfony2 because of this problem alone.
That's a fair answer, thank you. I'm happy to learn facades are optional. It's really not only about testing (as some mentioned it can be mocked) but also coupling your domain code (and tests) with a framework feature (see again: service locator). In my opinion it would be beneficial for Laravel to drop them entirely. You are right, it's not monkey patching, but I love this expression and started to use it for all kinds of nasty magical tricks :) Btw it's possible to monkey-patch PHP with a tool called runkit. It's mostly used to mock functions.
I probably have one of the largest Laravel installs at this point (besnappy.com). Developing Laravel while also developing a large, complex application has actually been really helpful because all of the features are extracted from very real-world needs and not pulled out of thin air. I would say the keys to keeping it all maintainable are about the same as any other system. Write small, decoupled classes. This means I primarily try to keep my facade stuff in the routing and controller layer, which then calls into the domain layer. I'm not super religious about it. Sometimes I'll put a facade call in the domain layer... Doesn't bother me too much since I can still easily unit test it. Thanks so much for all the awesome feedback in this entire thread. Always very helpful to hear this kind of stuff.
As I mention elsewhere, it's not only about the ability to mock or swap, service locator alike have a deeper problem.
It provides a new syntax that adds very little over writing the plain HTML yourself. I think if you're going to have a programmatic way of creating forms fields then you should have built in validation and all that. The model-binding is quite nice though. I mean, I don't remember what the other framework was (yii, symfony?) that lets you create and reuse forms in YAML format.. I thought that was a neat concept but a sloppier execution. Like I said, I'll probably end up writing my own form-handler thing. If I do I'll maybe give you a shout and let you take a look at it, see what you think.
Yeah, that's really my only issue with eloquent - using it makes a lot of the other parts of the framework easier, and I don't want to use it because I have a ton of complex queries in the types of app I develop and so an ORM in general isn't really suitable. FWIW I mostly use RedBeanPHP - it's a really really simple ORM, that allows for very rapid prototyping, but crucially for me, it gets out of the way very easily when you want to ditch the ORM and just use plain queries - although it still gives you a method to inject that data back into objects. Specific use case, I know, but that's what I want it for and it does it well. Slots nicely into laravel too.
&gt; As far as what's missing, I feel like Eloquent should support internal model validation (and automatic error reporting back through the form helpers) and a solid asset pipeline (however there is an asset-pipeline package which does a pretty good job. Yeah, I missed this out of my post because I don't use Eloquent, and I implement my own models and form handlers largely so that I can do validation like you describe.
Don't know that this is really a problem is it? If Taylor were hit by a bus, it's an open source project with a vibrant community. Pretty sure someone would pick it up. Userscape also seems to support it pretty heavily - I imagine they would have a vested interest in keeping it alive.
I suspect you were downvoted to oblivion because this criticism comes up in almost every Laravel thread and has been put down repeatedly over and over again. You don't have to use it. It's syntactic sugar for the IoC container if you chose to use it, and in practical terms does not impact the test-ability of the application.
Honestly, the only problem I have with larger applications is trying to keep the code from depending too much on the framework. And this is not a shortcoming of Laravel, as it happens with most frameworks. Therefore I try to keep my controllers as dumb as possible, trying them to handle strictly the request/response part of the application. 
I looked at that, how well does it integrate with the framework though? Will I be using Laravel's form helpers or Twigs'?
You can integrate doctrine whichever way you like, just don't mix their database logic with doctrines, as they are completely separate. Should use one or the other really.
re "Facades": &gt; (the name is easy to confuse with Facade design pattern which is a different thing). Preach it. 
For me, the issue is not "should you use these things-laravel-calls-facades or not." It is that they *are not Facades*. The name is, at best, misleading. They might be more properly termed proxies. That argument, so far as I can tell, has *not* been put down.
Laravel's form macros are a god send. A literal god send. The reason why Laravel's forms are kind of shitty out of the box (no proper error presentation) is because you can write your own form macros to handle that for you. I've written a ton of form macros to handle my own form markup, and also bootstrap markup. By passing in a parameter, I can decide whether I want horizontal labels, vertical labels, placeholder errors, or errors off to the side etc. I've even written macros to easily include dropdown data I use a lot (states, cities, countries, user groups etc). Basically spend some time writing a good library of form macros for yourself, and you'll be all set.
The one thing that sucks about Laravel (but PHP in general) is a simple, speed/memory-efficient way to re-index a collection by a given property. I have a bunch of site data saved as a cached object and it would be nice if I could easily (as in, a single function call) re-arrange a collection so I can do something like this: $GroupCache[$User-&gt;groupID]-&gt;canModerate
Magic. Now, this depends on the sort of project you are working on however, and it's why I use Laravel as well as Symfony and even no framework sometimes; Laravel is powerful and takes a lot of the effort out of development, however to do so assumptions need to be made. Sometimes I'll be building a project that those assumptions don't fit, and so Laravel isn't the best choice. That said, a lot of Laravels magic can be ignored or turned off, so it's rare that I go down that path. end_my('0.02', 'AUD');
It's a non-argument. Not once in the documentation does Laravel put forward the argument that a Laravel Facade is a "traditional" facade. Also as far as I am aware, although there **are** commonly held names for various patterns there is no single authority which governs what something can and can't be called. The name of any pattern exists to create a common language amongst developers within a community of developers to increase the rate of information transfer. Within the Laravel community, a Facade is what a Facade is. It isn't *entirely* important that it isn't a facade in the *traditional* sense. In fact, none of its value in explaining a concept is diminished, even if someone was to join a Laravel project knowing the traditional explanation for the pattern. A simple conversation that goes along the lines of "In Laravel a facade means ..." is all that is required. Furthermore, you could explain the traditional facade pattern using a *proxy* as a metaphor as well. So yeah, it isn't a traditional facade. So what. If it's name is all you've got left to argue about your position is pretty fucking weak. 
Or, perhaps more helpfully than simply preaching, have a 5 minute conversation with anyone who might get confused and watch the confusion go away.. then get on with shipping valuable software :) 
I don't know a good book, but have a read on how to use CRUD with Aura.Sql https://github.com/auraphp/Aura.Sql/tree/develop#aura-sql . Hope that helps
&gt; "The name of any pattern exists to create a common language amongst developers" I completely agree! Laravel folk using the term to mean something other than [the Facade pattern](https://en.wikipedia.org/wiki/Facade_pattern) will lead them to misunderstand the concept in the wider development world. (I also saw this with CodeIgniter folk misusing/misunderstanding the term Active Record.) It's the wrong term to describe what's going on. A more proper term might be "Proxy."
I think you missed the general thrust of my comment. It really doesn't matter WHAT it is called. The name makes sense within its context even if it isn't the same thing as a traditional facade. There is no central authority controlling what things can be called. The name is valid. The problems caused by having a name which might be confused with a traditional pattern can **very easily** be overcome with a simple 5 minute conversation to return to a common understanding within the project and get on with it. Names get called the wrong thing all the time. MVC itself in the context of web application frameworks differs WILDLY from its original intended meaning. But so what? A simple conversation resolves that problem, why then do we need to get so precious over the Facade pattern? The only reason I can see is to find some ground to attack Laravel and its author. Where I'm from we refer to this as the "Tall Poppy Syndrome". tl;dr: Laravel can *validly* call its "Proxy" objects Facades all it wants. It makes absolutely no objective difference.
The more I learn about and try and do things correctly the more certain I become that the time is fast approaching where I leave this language behind for any project larger than a very small business site. I will always have a strong affinity for PHP and will still use it when I need a quick and dirty scripting solution, but I can't help but feel that these "enterprise-level" frameworks are just bandages on a language with a rotten foundation. PHP has matured by leaps and bounds in the last 10 years, partly because of PHP5 and also because of proper frameworks; but, in the end...square peg, round hole.
You should always use integers to represent currency ;)
What's the integer value for 0.02? ;)
Framework won't care. That's why there is an AuthInterface, which allows you to integrate any "model" or Entity you want with the Auth system, etc. Same for passsword reminders: RemindableInterface.
I personally don't like how everything is setup to work with static methods.
Well, when you put it that way, it might look like an overkill. I've just found it 2-3 days ago looking for a model validation (was doing it controller side) and so far it's ok/enough for me :)
I haven't had problems using joins with Eloquent. You just need to use `select('maintable.*') to only get the data actually related to the model. MyModel::join('othertable', 'othertable.foreign_id', '=', 'maintable.id') -&gt;join('anothertable', 'othertable.other_id', '=', 'anothertable.id') ...
This may be of interest: http://lutro.priv.no/posts/using-the-form-builder-as-little-as-possible Gives you the main benefit of forms (model binding and repopulating from session on validation errors) without all the other stuff.
Ardent is... pretty shit.
Collections have a `groupBy` method that should do this.
I've found Eloquent really good but the deep relationships are definitely a problem 
Isn't that a bit antithetic (don't know is that word exists in english :D)? Why would you want not to depend on the framework? It's a framework, you work within its frame, no?
You can't use the facades but they are available as functions, for instance: {% autoescape false %} {{ form_model(user) }} {{ form_label('email','test') }} {{ form_input('email', 'email','E-mail adres') }} {{ form_input('password', 'password') }} {{ form_close() }} {% endautoescape %} There is talk about adding another syntax for Laravel facades like `Form.open([params])` but I [don't think it has been merged into the main](https://github.com/rcrowe/TwigBridge/issues/61) yet.
Any alternative you'd recommend? Pretty much all I need right now is simple model validation.
That person is an idiot and their web sites will have horrible things done to them. You can do many things within that query, not the least of which is performing a sub query. But why bother escaping when you can do a prepared statement? http://www.php.net/manual/en/pdo.prepare.php
I dislike Laravel's form macros as well. Not too bothered about using macros, but they do need to support all of the available options. Have you seen [Former](http://github.com/anahkiasen/former)? It provides much more advanced macros (front-end framework support, built-in translation and validation).
At least you could secure this particular one with $holdnavn = mysql_result(mysql_query("SELECT navn FROM teams WHERE id='". (int)$_GET['id']."'"),0);
you might consider looking into the event system. Your Eloquent models will fire events at various parts in their lifecycle, and you can tie into those events with observers. boom: http://matthewhailwood.co.nz/laravel-model-validation-using-observers/
It's good to see real world examples of such techniques, and not get stuck on theory. A great example is [Laravel Tricks'](https://github.com/CodepadME/laravel-tricks) project code on Github. What maskalor said, "be prepared to read the framework's code" holds true here.
No, I don't like the approach. I don't like macros for writing HTML. I'd rather have a Form class that provides an actual layer of abstraction.
Thanks, will have a look into it. I'm using laravel on-and-off, but everytime I'm blown away by how easy things are in it :) (and also, how easyis to do something stupid, as in not-really-the-right-way :P).
On the contrary I find the API very simple: $context = new Context(); $context['group'] = 'customer'; $context['points'] = 42; $ruler-&gt;assert('group in ("customer", "guest") and points &gt; 30', $context); And the DSL is inspired by SQL, so I don't see how it can be confusing?
Well that's a pretty tall order considering most websites want custom form behavior and layouts. I've never been able to use a form helper out of the box to solve client needs, I always end up having to write actual HTML and do error handling the gross way. So as far as I'm concerned, you have three options when it comes to forms: 1. Write plain old HTML 2. Use macros 3. Use some monstrously complicated form helper that is so abstracted so as to account for the myriad ways forms need to be implemented, it's harder to use and more verbose than writing plain old HTML.
wow ... `/r/PHP` seem to really love static classes/methods.
For point one, I'd say you should recommend using a virtual machine. Most PHP hosting is done on a Linux platform so it'd be best to mimic that in your development environment as closely as possible, otherwise when you roll code to a production server you might run into problems! Some good tips in there though :)
Why would you use this approach instead of creating a class for rules? class UserGetsPointsForPurchaseRule implements \RuleInterface { function assert($context) { // return true/false here; } } It allows you to store it in a database, if you use a dependency injection container you can set up dependencies, it's testable... 
For me your print analogy, and the pdo one in the article, are not valid. Print function is to output arbitrary string, PDO::execute function is to execute arbitrary sql string. OTOH, the only side effect I expect from insert($table, $values) is some values are inserted is some table named $table, whatever is in there, not random sql query being executed. Even without considering the security implication, it should not crash because $table happen to be a sql keyword too. Like the only side effect of unlink($filename) should be a file being unlinked. Sure I have the responsability to check that it is a file my app should be allowed to unlink, but not that it will not execute shell command because my file happen to be called ";$(rm -rf ~)". (just a silly example, I know unlink does not execute shell, but if it did, it would be an implementation detail which is not my concern as a user of the api)
Great feedback! Thank you! It's happened because "intahwebz/jig" uses a dependency "rdlowrey/auryn" with version "dev-PluginExperiment2" and this is not [semver](http://semver.org/) :( About the page 5xx returning 200, it's my fault! Sorry, I will fix it! If you find other error, please reply to me here or on https://github.com/cloudson/Phartitura. Again, thanks!
Abstraction should make things less complicated, not more. Also, I'm not writing "websites", which is probably why I have different needs to you.
This doesn't allow user-defined rules. If your client wants to write business rules himself (through the application), you need something dynamic.
&gt; It really doesn't matter WHAT it is called. Then call it a zerbleflatz, so there's no need for the 5-minute conversation with every developer who makes the mistake of thinking what-laravel-calls-a-facade is not actually a facade.
What are the benefits of this library over the [Symfony Expression Language](http://symfony.com/doc/current/components/expression_language/index.html)?
One of the main aspect of ruler engine is that rules can be written by a user, for example of a commercial CMS (as @mnapoli has mentioned). Moreover, rules can be generated based on a form. So we need to manipulate rules as strings with a dedicated language. But allowing another kind of rule, described by classes, is also interesting. Can you open an issue and motivate it? Thanks!
Also .. &gt; The only reason I can see is to find some ground to attack Laravel and its author. ... be careful not to confuse criticism for persecution. ;-)
Number 6 should almost be the first in the list. So many things have been figured out with this technique. I will talk to myself even; strange looks be damned.
You mean the misnamed "facades?" Yeah, they're handy but lead to a lot of curious gotchas.
They probably hate writing tests too
The assumption that you are going to use the ~~"soft" delete mechanism and its related~~ timestamp columns in your models is disconcerting. Yes, it's a simple matter of setting the model $timestamps property to false, but frameworks really should force you to opt in to any magical mechanisms, not force you to opt out, ~~especially with something as important as whether a row of data is actually deleted from the database or just hidden from the ORM (and very visible by other clients!)~~ EDIT: Soft deletes are off by default, my mistake. I inherited a codebase that set the soft delete flag outside of the Eloquent class, so the proper blame for that lay elsewhere. Blade's a poor man's Twig, and as powerful as the Eloquent model system is, it doesn't support validation by default, meaning it takes some care to ensure the data entering your database is the proper format before you actually run -&gt;save() Also, the tone of the source comments can be rather annoying; it's almost like the code is expecting a pat on the back every other file. Just do your job, and I'll take of "illuminating" my development.
The goal is different. The Symfony Expression Language could be done with `Hoa\Ruler` (some people have [suggested it](https://github.com/symfony/symfony/pull/8913#issuecomment-23874879)). `Hoa\Ruler` is more extensible and modular: you can add any operators or functions. The dedicated language relies on a dedicated grammar (see [`Hoa\Compiler`](https://github.com/hoaproject/Compiler)), it is not hardcoded. Thus, the compiler produces an AST that is transformed into a model. This model can be manipulated in several ways. You are more likely to hack and extend the “engine”.
Extept once you've finished doing the joins you still have access to relations, accessors/mutators etc.
I can confirm that was added a while ago. I'm using the newer syntax in one of my projects right now. 
You're right, of course. I made a lazy assumption that symfony was doing the same thing as others that iterate over each individual route pattern looking for a match until it finds one. Thanks for pointing this out :)
Oh God. Especially when using a framework that will helpfully auto-uncapitalize class names before trying to autoload them. Cost me a day of chasing down permissions issues when it was really just a stupid typo. I also now demand that my developers use lower_case_table_names = 2 on their Windows MySQL instances.
I debug exclusively by adding `var_dump()` calls in deployed production code :P
I would suggest, instead of turning on display_errors, find which php.ini your server is using, and figure out where it's logging information. You can't always reproduce errors in non-production environments, and this will save you the embarrassment of exposing junk to the public. Also find where your webserver is logging information. PHP isn't the only thing to debug. Once you have those files, watch them with `tail -f`. Become familiar with the CLI tools that will help you sift through this data. One other thing, if you're feeling particularly adventurous. Learn how to use strace and gdb. I've fixed many issues in PHP and PHP extensions with both. Other times, it helps me grasp what the PHP code is doing on the system when I'm tracking down something heinous.
Nothing free. During development, you should display all errors, warnings and notices. 
just ran into the composite key problem last week, wondering why they don't support that, as it's pretty common. 
This thread has been linked to from elsewhere on reddit. - [/r/webdevnews] [6 Debugging Tips Every PHP Coder Should Know \[not spam\] \[/r/PHP\]](http://np.reddit.com/r/webdevnews/comments/1ysrbw/6_debugging_tips_every_php_coder_should_know_not/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
Curiously, nobody has mentioned [phpdbg](http://phpdbg.com/). This tool has been merged in PHP since few weeks now.
Can you give a quick breakdown on how you do your migrations? [Do you use Jeffrey Way's generator tool?](https://github.com/JeffreyWay/Laravel-4-Generators) Can I see your your seeder files? (Your filenames will change depending on your table name but you probably have a /project/app/database/seeds/UsersTableSeeder.php ifile You may have this line in them: &gt;// Uncomment the below to wipe the table clean before populating &gt; // DB::table('rules')-&gt;truncate(); 
Hi, The main feature of Hoa\Ruler is to create business rule like "orderTotal &gt; 1000", "orderTotal &gt; 1010" which could be interpreted by a system and written by a user easily. If you use a class (with DI or not), theses rules are hard-coded and you'll have to commit new class for each new rules. This is not the approach of Hoa\Ruler. Hoa\Ruler =&gt; you define a context with many keys=values. Business guys can use them to generate many rules they wanta. Your System =&gt; One class = One rule, each time a business guy asks a new rule, you'll have to add a new class. Ok, users can make mistake on theirs rules, but they can do it too on price :D. Users have to be careful on any business things on theirs product. But there is no interface at this moment to generate theses “strings“ which define a rule. (in magento for example, you have this kind of interface).
Yep. During development you should show every error (and try to fix them, including the notices). Just because something is only a notice, doesn't mean it isn't important or potentially harmful. In fact, it's the little errors that can be the toughest to debug. Ignoring a notice can mean a headache later.
I wish i could show you, but i lost everything when my HDD failed and died (Now i backup everything everyday just in case. I could use git, but for some reasons i can't). I've never used the JW generator tool, i'll check it out. I think i had trucante() in the code, but i can't recall. Thanks for the help. :D
1ms (0.001s) is about 1000 req/sec. Because the router is called and used on **every page**, improvements can quickly be justified on busy servers. Not all code sees this benefit. (e.g. login form validation, the 1ms wouldn't be as drastic). Optimize where it makes sense. Benchmark where it makes sense (benchmarks of only the last route/unknown router isn't the most appropriate, imo)
Number 1 is flat out wrong, you (almost)never debug in production. 
Keep a framed picture on your desk of LeVar Burton and then just tell him all about it. Then no one will think you're crazy. No one at all. They'll just be jealous you're talking to Geordi Laforge.
I have a vm set for my local server with nat enabled so its transparent when i type localhost on the browser, also i program in PHPStorm and as soon as i press save it uploads it to the virtual machine so i never leave linux
Great stuff, when you say its' uploaded to the VM automatically, what do you mean? I'd usually just use shared folders (via NFS since I'd be on a Ubuntu host too). 
Probably just being too fastidious but #1 being so absolute bothers me. I am sure the writer is accustomed to just working for long periods of time on enterprise level applications, but I know where I work, I need to switch between projects and fix minor bugs fairly often. I am not going to "Vagrant Up" every time I get a minor bug when I can just upload the file and check. Also, there have been times where not periodically testing in the production environment has bitten me pretty hard. For example, finish the application and upload only to find out that the server the client is using is configured to not use short tags and there is no way to enable that in php.ini. I get that it is faster to develop locally and that is the point, but you should be testing on production at least occasionally during development. 
var_dump is a mans debugging tool!
&gt; composite key because you shouldnt use it, you lose so much speed. You should always have a self incrementing id in any table. 
You configure the server through sftp on the settings and it executes the watchers (sass, jade) and then auto uploads them, the whole process take about half a second and its done in the background it only upload the changed files like rsync so it feels like it wasnt an actual vm, everything gets done faster than me alt tabbing to the browser, also i run the virtual machine headless (shift + enter) on virtualbox
I neglected to say I use that trick too, and it's not catching anything at all - still white screen, nothing logged (error logging on); the error capturing code is never executing. This is a royal pain. Can't *see* anything on production, can't replicate on my dev, other dev (we're not even in the same city) is sending me stack traces now and then when he see them. Thanks all the same - it's a good trick to know.
There are times when you need it. The purpose of it is to have the database engine only allow a row to be inserted if a row does not exist with matching information. Having incrementing integer IDs doesn't fix that issue, but makes it faster to refer to the information later.
Yeah, migrations won't delete anything automatically on their own, you have to specify it. So if it's deleting data, then you told it to at some point. :)
New Project? E_ALL. Always. On older projects I try to slowly approach (in that order) warning/deprecated/notice free. (They're usually error free) E_STRICT is usually out of the question if the project is too large.
I'd like to recommend [Laracasts.com](http://www.laracasts.com) to you. I've been subscribed since October and it's super informative. It's Jeffrey Way's (editor of Nettuts+ and head of web development courses at Tuts+ Premium) site for everything Laravel.
Personally I use Vagrant to manage my virtual machines, along with Puppet and a few other bits and bats, makes deployment very easy (you don't have to deploy a virtual machine this way too which is important!). As for the disk speed, I would agree it could be a problem when using virtual machines in a production environment; however, using NFS for me at least has been completely unnoticeable. I also find it quite a bit easier to setup up when using Vagrant. It works a LOT faster than the Virtualbox shared folders, and somehow reads faster than the native filesystem according to that article (?). I'd say the main advantage of mounting a folder(s) onto your virtual machine is that you don't have to have the virtual machine running for you to be able to edit code, push it, pull or anything, and your virtual machine isn't tied to your code then, it just becomes a shell to run the code.
he forgot to mention the most important thing var_dump supports dumping multiple variables var_dump($var1, $var2, $var3); dunno how often i have seen var_dump($var1); var_dump($var2); ... long live vim :w!
Thanks for that! Now to make a helper function to shorten that syntax...
[FAQ](http://www.reddit.com/r/PHP/wiki/index): &gt;[Meme posts are prohibited](http://www.reddit.com/r/PHP/comments/l0n1y/the_response_was_clear_and_meme_posts_will_now_be/). This includes things such as Advice Animals, Rage Comics and similar content.
True, but nothing is stopping you from bypassing the facade. It's just a convenient service locator that allows you to do the same thing with less code. It still allows instantiating with params, mocking for unit tests, mapping to interfaces, and swapping instances on startup or on the fly. If you want to go the long way around in the name of portability, go for it. There have been several articles about this lately including on Taylor's blog about how to accomplish this.
Roger that, on using Vagrant/Puppet for vm's. Just got on that bandwagon last year, but have been using virtualbox for a few years, and I've always served my my dev sites directly from their shared-folder location. Recently though, I experimented with a couple sites that have larger resource demands, and my typical page-load time went from ~10-15s down to ~2-3s. As for NFS, I'm eager to try that, just haven't had luck making it work (tried a few free NFS servers for Windows, just couldn't get it running), and I wasn't aware that Vagrant actually had that available; my current dev machine comes from a PuPHPet/Vagrant config, which uses the VirtualBox shared folders by default, not NFS - so I'm definitely going to look into changing that share to NFS. Thanks for mentioning it, I'm gonna try to do that right now, actually. 
since relational database systems no. &gt; inserted if a row does not exist with matching information make them together unique and this is possible in laravel. `$table-&gt;unique(['key1', 'key2']);` 
Thank you very much! 1 quick look and I already love it!
If you're on Windows, Vagrant doesn't have NFS support on there, it's a Linux / OSX only feature for Vagrant. You can set that up manually though of course, but it would defeat the purpose of using Vagrant a little.
Oh please God, just kill me now. I was shocked to find that tables on mysql databases are not case sensitive on Windows, but are on Linux. Also include filenames, path separators. 
Thanks for taking the time to respond, I truly appreciate it!
Ah ha. Yeah getting NFS to work on Windows proved to be problematic. Maybe it's time for me to give VMWare a look. Or go for a samba share, which is still a bit better than vbox's shared folders.
I like that with your hydrate function if a set method doesn't exist for that variable in the class, it directly assigns it to the instance variable by that name, neat!
Samba served me well before I switched to working on Ubuntu :)
That's the worst possible advice in this thread. Just use VMs.
Generally I stay away from using `__call` magic method, choosing to define each getter and setter method. But I think that with the way this hydration fall back works a simple `__call` implementation works well. This method assumes properties are named in camelCase, ei: dateCreated. public function __call($methodName, $arguments) { $class = __CLASS__; list($isAccessor, $property) = $this-&gt;parseMethod($methodName); if (!property_exists($class, $property)) { throw new \BadMethodCallException("Calling undefined method $class::$methodName"); } if ($isAccessor) { return $this-&gt;$property; } if (count($arguments) != 1) { throw new \InvalidArgumentException("Missing first argument for $class::$methodName"); } $this-&gt;$property = $arguments[0]; } private function parseMethod($methodName) { if (!preg_match('/^(?P&lt;type&gt;get|set)(?&lt;propertyName&gt;.*)/', $methodName, $matches)) { throw new \BadMethodCallException("Calling undefined method $methodName"); } return [$matches['type'] == 'get', lcfirst($matches['propertyName'])]; }
I'm definitely looking forward to getting Ubuntu onto my desktop. I tried (again) about 2 weeks ago, but just couldn't get it to play nice with my 3 gfx cards and 4 monitors. Until I stump up for better/newer gear, I think I'm stuck with Windows on this machine. Love it on my laptop though, it's a great development environment, and the DE is pretty excellent as well, at least in my opinion.
Hah, at work we call 'Duck debugging', 'talk to the plant' :D
I use Vagrant with VirtualBox using the same OS image and manifest that is used on production. That way I can develop even with no network connection and on Windows while being 100% in Linux. Have to use Windows because the corporation has standardized on Office.
I.... I would probably never write code like this. Fun info, though.
Everything locally, nothing publicly.
You mean Unity? A lot of people don't like it, but I actually think it's pretty good! I love how instead of windows taking up extra space they merge with the top panel, and all the menus go on there. It is fantastic to develop on. 
If it doesn't work like you'd expect, you may want to read documentation more often ... as the docs say right at the top: &gt; May be an array or object containing properties. If query_data is an array, it may be a simple one-dimensional structure, or an array of arrays (which in turn may contain other arrays). If query_data is an object, then only public properties will be incorporated into the result. Seriously, based on that, how is any of the above behavior surprising? And ... &gt; I'm assuming there's some magic going on in the date extension to cast DateTime objects in a special way. No, try this: $dt = new DateTime('now', new DateTimeZone('UTC')); var_dump($dt); The public properties are the ones that http_build_query is grabbing.
I develop on a local copy of the repo and have WinSCP set up to automatically upload changes to a development virtual host. It saves me the hassle of installing a local server when I have a perfectly good server that's already set up for the production environment. 
&gt;If query_data is an object, then only public properties will be incorporated into the result. This is wrong, and is a big part of the reason I wrote this post. :) I realize that none of this *should* be surprising, but it's one of those things which is so far removed from what you're actually working on that it can bite you in the ass if you're not paying close attention. The documentation for this is probably [something most people've never read](http://ca2.php.net/manual/en/language.oop5.visibility.php#language.oop5.visibility-other-objects).
You really might not even notice that you're using code like this. Perhaps requests objects are too foreign. Maybe you're just using a view model that has a method for giving you an array of its properties, which you extract into your rendering scope. It'd make perfect sense if you're following the single responsibility principle. The view model should be responsible for enumerating its values - not the renderer.
Real PHP developers begin each line with @
Nope, I'm 100% positive I would never wrote code like this. :)
Yep, Unity is pretty slick. I find it incredibly easy to get around &amp; do whatever I need to do, and I can't say the same for Gnome or KDE (let the flaming begin...). There's indeed some valid criticisms (performance, lack of configuration, manner in which it came to be, privacy concerns), but it works great for me, and I can't wait til I'm able to run it on my main workstation. All Hail Ubuntu!
I believe you, as I don't typically code like this either (I just know that some people do, as it *feels right* at first). I'm curious though, how do you approach view model and request extraction? Hydrators? Or do you write all of the boilerplate to define exactly what should be included?
Pretty much everything they're doing is wrong and dangerously so. But they're actually too ignorant and incompetent to see the issue. In fairness they ARE apparently making changes, but I hope they realise the depth of the problem.
I'm not really sure how to answer your question. With regards to your above post, I tend to explicitly pass into http_build_query exactly what I need and not rely on magic methods or hidden abstractions to figure things out. In other words, I would never pass in a DateTime object, a ```new Foo```, or do the mixy matchy thing you did with the others. It just seems foolish to trust an implementation to output something consistently or the way you expect it. I think it's much better to define that output yourself. I find it's safer and easier to read to do something like: class Foo { private $bar = 'bar'; private $baz = 'baz'; public http_vars() { return [ 'bar' =&gt; $this-&gt;bar, 'baz' =&gt; $this-&gt;baz ]; } } // I normally do this $date = date('Y-m-d H:i:s'); // Though if you wanted to use DateTime, something more like: $date = new DateTime()-&gt;format('Y-m-d H:i:s'); $foo = new Foo; $params = [ 'date' =&gt; $date, 'foo' =&gt; $foo-&gt;http_vars() ]; $query = http_build_query($params); If I was going to use a class's __toString method (which I probably wouldn't in a production case), I might explicitly cast it as a string: class Beans { public function __toString() { return "It's lima beans, not llama beans."; } } $query = http_build_query(['beans' =&gt; (string) new Beans]); But I probably wouldn't do that. The number of times I've had a class that can cleanly be cast into a string at all times is pretty low. Usually I want to display different things in different ways for different reasons, so I would probably have explicit methods for outputting the strings in various ways. For instance, in a User class, maybe __toString() returns the username... but it is equally likely that I wanted their email address, or their first name with last initial, or whatever. I tend to avoid __toString() in general and go with more explicit methods, like: ```$user-&gt;username()``` or ```$user-&gt;email_address()```
Bottom line it's insecure. Although mysql drivers do not allow you to run more than one stmt per query. To test yourself "1' OR 1=1" (without double quotes). I'd suggest to sqli this yourself and play with it.
I understand what you're saying here but I believe there the problem boils down to the absence of a rule that supercedes the OP's: **mirror your production environment as closely as possible when developing/testing**. This would cut down on all the issues you bring up.
Nice link shared
In short, your answer is that you do indeed specify the boilerplate for how a structure should be serialized. :) The problem tends to crop up that there's not always an obvious best time to serialize a structure to an array or string. Once you do so, you lose access to mutate the structure within the scope of its defined contract. Instead, you're mutating the structure's serialized form. By the by, it's probably best to ignore my examples above for the purpose of *this* discussion, because they're largely just stubs for the sake of brevity. I would ordinarily not write code anything like that.
Hi, I understand that many people have bad experiences with ORMs, I also understand that ORMs are not always applicable to large scaled applications. But in your comment you mention 'stupid queries that a orm issues', in your case were these issues related to inefficient selects, terrible joins or any other statement? Also which ORM(s) caused you this trouble? I am asking this gauge the problems with current ORMs so these could be eliminated in Storm. Thanks for the comment
Your vagrant VM config should mirror live, problem solved. Also, never use short tags.
The property is public in relation to the calling class, this code also works: &lt;?php class Test { private $name = 'A'; public function mixItUp(){ $this-&gt;name = 'B'; } public function printIt($clazz){ echo $clazz-&gt;name; } } $a = new Test; // $name = A $b = new Test; // $name = A $a-&gt;mixItUp(); // $name = B $b-&gt;printIt($a); // B ?&gt;
Haha, indeed! One thing I couldn't stand in Gnome (infact, it was the deal breaker for me when comparing it to Unity) was that when you try snapping windows to positions on your screen it treats your whole screen space as where you'd like it to go, rather than the current monitor. On Unity if I open a terminal I can make it take up a quarter of the screen in any corner, or half on one side (I usually work with 3 open, 1 on left side that takes up half my screen, then 2 on the other side on the top and bottom right). It sounds a bit daft but, little things like that all start to add up I guess.
Sure you could do that. It is worth pointing out that *at no point* do the documents refer to a facade as the facade design pattern. *You* are the one conflating the two. You are looking for problems which literally don't exist. You might have a point if it was referred to as such, but it isn't. So you don't. 
I've actually used a simpler one at times. function pre($array, $die = false) { echo '&lt;pre&gt;'; var_dump($array); echo '&lt;/pre&gt;'; if($die) die(); } /shame
I think it's the 3rd time on this subreddit I read about what would happen if Taylor Otwell were to be hit by a bus. What's the obsession with him and buses?
Yes! I do exactly the same thing, but the function is called pre_dump!
how can you even call yourself a developer if you're var_dumping variables to debug??
Heck yes, are you talking about the Ctrl-Alt-#NumPad stuff? I'm a big fan of that, especially when it comes to doing dev-work on the laptop. Windows has Shift-Super-Left/Right (for left/right snapping), but nothing for the corner/quarter snap (Actually, I don't know about Win 8, I'm on Win7). I'm with you on the little things though, and I do exactly the same thing with the 3-window setup (firefox, firebug, and a terminal). Add Workspaces, and it's a great setup for wrangling some code.
http://i.imgur.com/P6z65dq.gif
some times its just way quicker than firing up an ide, xdebug etc - its not my standard way of debugging of course, but very convenient for quite some usecases
thanks - will look at some things. The actual error reported to me first was [23-Feb-2014 18:33:15 America/New_York] PHP Fatal error: Allowed memory size of 104857600 bytes exhausted (tried to allocate 32 bytes) in /path/to/the/app/vendor/doctrine/dbal/lib/Doctrine/DBAL/DBALException.php on line 109 The line 109/DBAL thing is /** * Returns a human-readable representation of an array of parameters. * This properly handles binary data by returning a hex representation. * * @param array $params * * @return string */ private static function formatParameters(array $params) { return '[' . implode(', ', array_map(function($param) { $json = @json_encode($param); if (! is_string($json) || $json == 'null' &amp;&amp; is_string($param)) { // JSON encoding failed, this is not a UTF-8 string. return '"\x' . implode('\x', str_split(bin2hex($param), 2)) . '"'; } return $json; }, $params)) . ']'; } Have futzed with some other memory settings, but didn't think about the settings you mentioned - will give them a shot asap.
worked just fine for us, I followed a tutorial (I can't remember which one)
These aren't debugging tips. These are debugging basics. On top of that, blog spam.
&gt;Nikita Popov hmm...
http_build_query takes an array of key=&gt;values. You're providing random shit to it and become upset when it doesn't work how you hoped?
It's an expression for anyone who may no longer be on a project for any given reason, such as getting hit by a bus. I don't know where it originated from though.
Yeah, that's the one! Windows 8.1 only snaps to the sides still, you can minimize and maximize too and whatnot, but no corner snapping. 
Frankly, I'm surprised Microsoft hasn't stolen that idea &amp; tried to claim it as their own. Works a treat.
Why not use strings instead?
Strings of floats are treated like floats when you perform arithmetic on them so they have the same problems as float.
I thought Ellis Lab was a company and they had announced that they aren't capable of providing the support needed so they looked for a new company to back the project. I can see your point though.
Object Oriented development. Be able to talk about abstract classes, interfaces, inheritance, inversion of control, dependency injection. A harder interview might ask about design patterns and SOLID principles. Also, be able to say what you like and dislike about PHP. goodluck
He should've mentioned that you can use error_log to dump out variables, which I find is probably it most useful feature. error_log(print_r($var, true)); or error_log(var_dump($var));
You should really learn these separate, as they are completely separate beasts in their own right. I'd suggest installing MySQL and messing around with it on the command line, or use PHPMyAdmin, or MySQL WorkBench. Once you understand the basics of MySQL pretty well, then jump into the PHP land and how to interact with it using PDO.
I recommend picking a framework like Laravel or Fuel and finding a good guide/book on them, rather than just learning vanilla PHP and MySQL. That way you won't be tempted to reinvent the wheel(and possibly make some terribly designed and insecure system), and instead learn proper MVC practices. Edit: don't understand why this is being downvoted, a newbie really should not be encouraged to use PDO themselves. Craft queries against the db all they want(for the purposes of understanding the db), but actually writing an application with raw queries in it is a bad practice to instill when they should really get used to using ORMs, and, on a higher level, MVC. Some veterans will give you the line that you should dive in head first and muck about, but realistically speaking unless you're extremely dedicated or already have some experience programming elsewhere it's not going to be beneficial for you.
Not if you use bcmath
What this guy said. Also, be sure to demonstrate that if you don't know something you know how to find out. More often than not a technically-minded interviewer is more interested in how you think and solve problems rather than if you explicitly know XYZ off the top of your head.
Sorry, I meant the timestamp columns are assumed to be created and the model fails to save to the database unless they are either created or $timestamps = false is specified in the model. Now that I think about it the soft delete issue I originally ran into was due to a third party validation model that set $softDelete = true in its base model that my models inherited from.
&gt; as powerful as the Eloquent model system is, it doesn't support validation by default, meaning it takes some care to ensure the data entering your database is the proper format before you actually run -&gt;save() Laravel supports validation out of the box. That validation is treated as a separate concern to the definition of the model might be unsettling to you but it could hardly be considered incorrect. A case can be made that validation is legitimately a separate concern that belongs elsewhere. You can actually hook the model saving event, execute your validation and bail out at that point if the validation fails, keeping the code responsible for saving things nice and clean. 
It would be considered incorrect to mix concerns between a model and it's relationship with the database and other models, but Laravel does that freely via its Active Record pattern. It wouldn't be unreasonable to expect that it would provide validation directly within its model even if its outsourced to the separate validator class. Comparable ORMs offer similar features. It's not necessarily a bug, just a feature that seems oddly overlooked considering the philosophy evident in the rest of Laravel's design to cover a broad range of uses cases.
I think FTPloy.com has a free plan.
Again, just an observation that it's a curious oversight.
Très bon article /u/mogosselin. Merci. 
and if you do code remotely, there are IDEs that will save directly on the server, skipping that step.
Be able to competently and confidently talk about the new features in [5.3](http://www.php.net/manual/en/migration53.new-features.php), [5.4](http://www.php.net/manual/en/migration54.new-features.php) and [5.5](http://www.php.net/manual/en/migration55.new-features.php), as well as the handful already [confirmed for 5.6](https://wiki.php.net/rfc#php_56). Also be prepared to name the things you like and dislike the most about PHP. Especially the dislikes. We once, and only once, had someone interviewing tell us that he couldn't think of a single thing in PHP that he disliked. His code samples were, uh, elementary to be kind. If you haven't been using your tools long enough to know the things about them that suck, then you probably need more experience.
We have an AIM bot for test/build notifications and I will use him to explain the problem I am having. If his no response doesnt help then I simply copy/paste my question to a coworker Now I don't lose any time or any shame in asking for help (well most of the time..)! Hopefully his chats arent logged somewhere... I have also taken frustrations out on our poor bot :(
Okay tell me how `bcmath` helps you to allocate 100 cents among 3 people? How do you do this without introducing error if you treat the money as anything but integers? You have to decide to give the person some "non-infinitey represented" amount of money. If you give them each "0.333333". When using `bcmath` what happened to the remaining "0.000001"?
BTW I'm not arguing that you always need to use integers, but it is worth being aware of the errors you may be introducing if you aren't using them when representing money.
Nooooooooooo! Hahaha! :) Enjoy your "reddit gold" because you're funny! (you're not actually working like that are you? :P ) P.S. Wow, I didn't know I had like 62 comments on my post! Sweet! 
It even works best with a real duck I heard! The only problem is that you'll have to feed it, but it's really entertaining! :)
That's an interesting case, however I don't see how any math library would solve this. Using a float or an integer would result in money just being lost in space whereas this at least will get you a proper remainder for you to decide how to handle.
I'm not saying you are either. I was intrigued by the idea and was just curious. I put bcmath out there as I don't see many people using it.
Where I work we have JAVA, PHP and C#. So the front-end developers have to deal with all those technologies. For PHP, we have virtual boxes maintained by the developers. For JAVA, we have "stand alone" versions of our apps. For C#, they use "external" virtual box (not on their machine but on an internal server). They have to work with visual studio for C#, PHP Storm for PHP and they use Sublime Text for Java. They don't complain except if the virtual machine don't work. But when they actually start on the "raw HTML", they can use whatever they want and that's where they'll spend most of their time anyway. As for "support", we have a support team and they know Linux and Windows. We also have a couple of macs for designers, but they are still problematic (some security issues with active directory, etc.) So, you don't have anybody that can help with the Macs? How many ppl are you in your company?
Good point! I have in my todo list to write a post about PuPHPet/vagrant/virtual box. Those are really great! I added the tip in my article. 
usually, error output is enabled only on development environments and this point should have been mentioned in the article. Never ever output errors on your productive system! Log them in some sort of logfile and watch the logs. But it is very helpful while you are developing. You can forget to check the log before deploying, but you can't oversee that error message on top of your page
You are right that we have the luxury of working most of the time on the same project. But anyway, the developers don't (and don't want to) have access to any production server. Our deployments are all made automatically from SVN to a DEV server by Jenkins, than to a QA server (where the QA team test), than to Pre production server (where the customer test) and then production. It seems tedious but works well when everything is automatic. Of course there are exceptions when working with CMS or when we need to change some server configurations.
Sorry I had to read it again, but yeah both the title and the second part can be a bit misleading.
As long as it's automatic and you're not connecting manually into the FTP, and you're not connected directly on production, that's good, I agree ;)
&gt; PHPMyAdmin No.
Doesn't negate the fact that PMA is used heavily still, even more so that it comes bundled with WAMP, MAMP, and what not. Still a great way to learn about tables, columns, queries, etc.
Used heavily by non-professionals maybe. Every professional environment I've worked in has used a real IDE.
From my experience, if you don't have xdebug turned on and autotrace, then your callstack is not displayed, which means you're going to have a very difficult time figuring out what is causing your error, but with the callstack, you can narrow down the issue in a matter of minutes sometimes.
`bcmath` is definitely a valuable extension. :)
Obviously. But from the tone of OPs post, he's still very junior, at least in the MySQL world. Which is exactly the use case for PMA.
60-70 people at the company, but only me doing any amount of web work (outside of posting to WordPress). I managed, design, and develop for 14 1mil+ impression per month websites, 6 extra sites, the intranet, and design and code all of the brand newsletters, and manage and deploy the iOS/Android apps, manage email deliverability and email marketing, and manage all of the projects. I work around 50% in PHP/MySQL and 50% in HTML/CSS/JS. We have one IT contractor that manages the intranet server, wiring, equipment set up, exchange, etc., who can administer PC and Mac to a point, but knows almost nothing about Linux and can't touch the terminal. I do that part, as well, and manage set-up and deployments for development, staging and production, as well as server troubleshooting. Which is why I'm ecstatic I get to hire a second in command. My boss doesn't know any (literally zero) HTML, CSS or anything. Our IT guy wouldn't know anything about troubleshooting PHP on a PC and I wouldn't either. 
http://en.wikipedia.org/wiki/Bus_factor
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Bus factor**](http://en.wikipedia.org/wiki/Bus%20factor): [](#sfw) --- &gt;In [software development](http://en.wikipedia.org/wiki/Software_development), a [software](http://en.wikipedia.org/wiki/Software) project's **bus factor** (also known as **truck factor**, or **bus/truck number** or **lottery factor**) is a measurement of the concentration of information in individual team members. The bus factor is the total number of key developers who would need to be incapacitated (for example, by getting hit by a [bus](http://en.wikipedia.org/wiki/Bus)/[truck](http://en.wikipedia.org/wiki/Truck)) to send the project into such disarray that it would not be able to proceed. In this event, the project would retain information (such as [source code](http://en.wikipedia.org/wiki/Source_code) or other systems) with which no remaining team member is familiar. A high bus factor, where many individuals know enough to carry on in the event of the loss of some of them, means that many developers would need to be removed before the project would necessarily fail. &gt; --- ^Interesting: [^Software ^development](http://en.wikipedia.org/wiki/Software_development) ^| [^PC/104](http://en.wikipedia.org/wiki/PC/104) ^| [^School ^bus](http://en.wikipedia.org/wiki/School_bus) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfnzvx3) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfnzvx3)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 69926:%0Ahttp://www.reddit.com/r/PHP/comments/1yqown/worse_things_about_laravel/cfnzvr4)
I find SQLYog or Workbench to be a ton easier to use and more intuitive than PMA. NOBODY should be using PMA. I really see no reason for people to use it. Install an IDE and away you go, unlike PMA.
I used xdebug to beatify my var_dump. My macro is only `var_dump($);`.
I know where you're comming from - I've got about 100 FTP connections defined in my IDE, mostly for fixing small shit. But everytime I present this argument I get downvoted into oblivion. Sure, when I'm working on a bigger project - local copy + git push, but when all I need is to change a CSS line here and some PHP there I'm not going to clone a 500MB+ website.
So was Adobe when it came to Mac OSX and [case sensitive file systems](http://forums.adobe.com/message/2956159). Seriously, had my system all setup, last thing to do was Install Adobe, failed miserably. I think this problem existed in CS3 and still existed in CS5. Maybe they weren't shocked and instead just didn't care.
I don't even let my developers use virtual hosts on their computers. That shit is too complicated and they end up spending hours making it work right. I used to allow it. Some people can get it right, but some of my devs would spend just as much time making their damn VHs work as actually coding. I switched to just having 1 remote server and we haven't had one single wasted hour from a dev having problems with servers, database connections, 3rd party redirects, etc. on his or her computer. We have dev, test, train, and prod servers. All 4 have identical settings so there's no surprises when we move it. All the developers code things on dev, it's one machine, identical settings to prod, and all version controlled. When they're done it moves to test. Stuff on test always goes to prod. Train is a server we use sometimes. We do a lot of enterprise apps, so it's the server we use when we have to train teams of people who are going to be using the software. Prod is just production.
I love the fact that your flair says "Don't listen to me". Probably another thing that I don't think I mentioned in my huge rant is that I am a self-taught developer. I have no college experience, very little corporate experience (mostly freelancing and working for private partnerships), and I think that plays a dramatic role in the fact that I don't just look for another job somewhere else. I feel fortunate to have gotten this position considering my lack of an explainable background experience. But thank you for the thought.
I have 1.5 semesters of college under my belt, before I dropped out. My first real programming job I was making $42k a year. That was ... 5? years ago. I've way more than doubled my salary since then. My first gig I had no team experience. Self taught, mostly from my blog. I didn't get "corporate" (read: large company) experience until 2 years in. Don't sell yourself short - it's a hot market right now for devs and you'll be surprised what you can get.
The one book I have noticed is PHP 5 Power Programming http://www.amazon.com/PHP-Power-Programming-Andi-Gutmans/dp/013147149X It is a bit old, but still many of the concepts are good. Read understanding that the book is old and things like Pear has given way to composer. The language itself has changed a lot. But pretty good one.
 df
indexing of an integer and composite keys are a little different my friend. we lost about 20% speed at 10k rows with composite keys, same happened at IBM (I dont work there, but my teacher and he is responaible for the databases there)
you can only see the difference in big systems (and only really with non int keys)
Don't hang around.. call their bluff. I mean by all means be reasonable, asking for top dollar salaries might not be in your best interests but nobody is holding a gun to your head and expecting you to just accept this offer. Counter offer and if they wont move on it see whether they can come up in their benefits - perhaps a carpark, company car, computer, phone allowance, other stuff they can give you that they don't have to account for as a recruitment cost (some companies are really funny about this... they have a recruitment budget, and then other expense accounts... if they can't fit what you want in the recruitment budget you need to be aware that they may be other buckets you can dip your sticky fingers in and extract benefits from). Or, at the end of it all, if you are not satisfied, go look elsewhere. Even take their shitty offer to buy yourself the time to go and find something else.
Most of this is probably things you already know, but let me say them anyway. According to you, this is your situation: * You have a special set of skills that would be difficult for this company to reproduce elsewhere. * You believe your skills are worth a certain dollar amount ($X) per year. * You believe your work is worth at least $X (+ whatever it costs them in benefits) to the company. If all of this is true, then it would be in their best interest to pay you what you're worth, lest you walk away (assuming you're willing to). Now, if this company is the only place where your skills are valuable, then you don't set the market price, the company does. If they're not willing to pay you for your skills related to this legacy application, then your special skills have no worth. In this case, it would be in your best interest for you to accept whatever they're offering. The truth is probably in the middle. If you really believe you're worth $X, then say "I'm looking for a salary of $X, and this isn't negotiable for me" (unless it is). Be willing to walk away. Let them know that if they change their mind (which, according to you, they probably would, once things catch fire after you leave) that your price will be $X + $Y after you're gone. That's it. No fuss, no muss. If you're not comfortable doing this, then you should probably accept the offer they've given you. Oh the other hand, if your general development skills are good (not just your knowledge specific to the domain of this legacy application), maybe forget about all this BS and come [work with me at Automattic](http://automattic.com/work-with-us/)? We make WordPress.com, Akismet, Gravatar, and other fun things that millions of people use. Oh, and regarding titles: Job titles are meaningless and exist only for corporations to segregate employees based on what they're allowed to be paid. At AOL, I believe the tiers were "Developer", "Senior Developer", "Principle Developer", and "Architect," and each tier had an allowable salary range. They are more likely to reflect how long someone's been at the company rather than their actual job skills. FWIW, my title at Automattic is "Spam Assassin." Other job titles randomly selected from [our "About Us" page](http://automattic.com/about/) include "Quantum Bug Creator", "API Whisperer", "Code Wrangler", "Wode Crangler", and "Schmooze Engineer."
College education only matters a little bit once you have a decent level of experience. Some of the best developers I know didn't get a college degree. First I would say that you should shop around for a new job. If you decide to take something higher paying you win. If you use the higher paying job as a way to get a raise...you win. In any case, if you are going to ask for a raise, you need to sell yourself as what you believe you're worth. Ask for a range. Tell them about your contributions to the company, but don't come across as entitled. If they're reasonable, and if you're not actually a greedy slob, they'll give you a raise. Don't be greedy and take a reasonable counter offer in the spirit in which is was meant. You decide your future in this industry, pretty much.
Use win 3.1?
Sorry but I don't see how this doesn't work like one would expect. The only thing I got from this post was that the DateTime class has 3 public properties declared that are not in the documentation (http://ca3.php.net/manual/en/class.datetime.php) because it only lists the getters. As for your problem with a class serializing itself, maybe you could use reflection to solve that problem? I would probably just have a serialize() function that returns an array that you could pass to http_build_query. While this isn't the best solution, its often the case that I don't want all my public properties exposed (to the outside) anyway. Edit: Is it not expected because http_build_query should not execute in the same scope (i.e not have access to private members even if the calling class is of the same object type)?
This sounds like a nightmare, and I'm not even sure I believe you. No one should dictate how developers develop. If you have developers wasting days on setting up vhosts, perhaps they aren't cut out for the job? ONE *remote* server for developing? "One for all and all for one!" How do your developers not step all over each other? How do you handle database schema changes? What happens when one developer accidentally crashes the server? How many hours do *you* waste keeping this madness running? You sound like a particular IT sysadmin who contributed greatly to me hating my previous job. His way, and no other way. If you even mentioned another way, he'd take it personally and take it to management that you were stepping onto his turf. Christ. Don't stifle other people's initiative to learn and try new things. No one is 100% productive, and working in a dictatorship will only lead to high turnover rates and burnout.
Visual QuickStart guides by peachpit book are great. 
know the versions of your php, mysql and other stuff. i got asked, what versions i used and what these versions brought in terms of features.
Well, ok, that makes sense. Though I would hate to be him and read about it...
If you are not satisified QUIT is the one word. And you need to find the best time to do it. No one else can tell the best time for your account balance, your debts / needs per month etc. All upto you :-) .
I'm surprised writing unit tests isn't the first item on the list. The best way to debug production bugs is to not let them into production in the first place. 
To answer your questions first: &gt; What exactly is *your definition of an "Application Developer", a "Web Developer", a "PHP Developer", and what difference does any of those have compared to a "Senior" of any of the different job titles? So what separates a "Developer" from a "Senior Developer"? Experience. That's all. One would expect that after a few years (3 or 5 are common standards) a person would have experienced working with a range of technologies, and would work to a higher standard. I've been working in professional PHP on a range of applications and environments for close to 10 years now. If anyone wants to tell me I'm not a senior, they can kiss my shiny metal laptop. Application/Web/PHP developer... those are slightly different. Application Developer and PHP developer are probably the same thing. A web developer is more of a front-end role, whereas a PHP developer would likely be back-end. There would often be a solid overlap between the two. I would expect a web developer to know bit of PHP (assuming they were hired as such) and a PHP developer to know a bit of web dev. But you wouldn't expect as deep a knowledge. I'm fortunate in being highly experienced in both. &gt; As developers, what do you feel is a "average" and/or "generous" salary for a developer like I've depicted myself (in regard to the system's size, use, and being the only person who knows the system)? Honestly, there's a huge variation. I'm Australian myself, and our economy is very strong, with a massive skill shortage in IT. In my relatively small town, Brisbane, I was getting or offered around $90k AUD per year, about $81,000USD. Jobs in the larger cities of Melbourne and Sydney were at the time closer to 120 - 130k. But I since moved to Japan. PHP isn't used a ton here, Ruby is more common, and my lack of skill with the Japanese language makes it hard to find work. Jobs I was looking at here ranged anywhere from $45k to $60k AUD. And at that, I haven't been able to get one either. I'm now returning to Australia, and am expecting a very low six figure salary if I can find a role that ideally suits my skill set. Companies vary greatly in terms of how much they value you. In my experience, companies that are focused on IT as an actual deliverable tend to pay better. You are, in a sense, the product. You're how they make their money. Your skills have a direct correlation to profitability. In other companies you work as a support role for "the real business", such as airlines or engineering. You become, at that point, a "fixed cost" rather than an asset. Every business tries to keep costs down. Essentially, what I'm trying to say is that your "value" isn't a real thing. Like value anywhere, it's a matter of what someone is willing to pay. There's something that you're not thinking about. Your future. Your job at this point is to maintain a legacy application. What are you learning? How are you growing at this point? Are you gaining experience in important new skills? Are you following the progress of the language? Are you implementing best practises that make you a better programmer and team member? The answer is probably not. You're *probably* stagnating as a developer. Your pay either needs to reflect and compensate for that, or you need to quit and go elsewhere. Getting "enough to get by" is fine, but are you skilling yourself out of more lucrative positions down the road? &gt; Probably another thing that I don't think I mentioned in my huge rant is that I am a self-taught developer. You don't say this in your OP, you said it in comment to /u/jtreminio but I'll answer it anyway. Me too. Self-taught is fine. Us self-taught developers often have a lot we need to learn to be disciplined and well-rounded programmers, but there's nothing holding us back. The fact is, no one in this industry gives a shit about your formal qualifications. They care whether you can do the job. Corporate experience looks great on a resume, no doubt, but it's something you'll build. Will you build it where you are?
Lovely!
To answer your questions: (From a manager point of view (I'm not a manager)) An application developer would imply something that is installed, something that they don't go through a browser for A web developer is something that is publicly accessible A PHP developer is the exact see as a web developer, but can only be accessed internally A senior developer is someone who has 5+ years experience in a language Even more fun is once you get to polyglots, you can be a senior c++ developer having only 1 year experience, if you have 4+ years in another language, even if that's JavaScript By the sounds of it they want to hire you on a junior wage, personally I would say fck it and leave, if they aren't willing to even give you a developer wage I wouldn't stick around Wages; Developer, min £22k ($37k) Junior, min £18k ($30k) Senior, min 26k ($43k) That's the wage chart I use, if a job offers anything in those regions I then start negotiations, adding at least 1-2k for each year over the 5year mark, and then 500-1k for each language other than PHP wanted
ALWAYS sanitize input. Even if this instance doesn't allow them to perform a DROP, DELETE, INSERT ect they can malform it to go beyond the table. Example, do JOIN statements with other tables and possibly get sensitive information or account authenication details if they are in there. Or if you echo/print an unsanitized $_GET value elsewhere as part as the output buffer you leave yourself open for XSS. Like mentioned earlier, you should switch to prepared statments. But it looks like you need to switch to MySQLi or PDO first. The MySQL extension is depreciated and on it's way out.
Too much work. I debug by closing tickets with a "this is a feature" comment.
And if they do get into prod it's still the best way by writing failing tests to isolate and fix. But this is PHP, people tend to prefer to just hack away till things work :| (which isn't all bad BTW, but once you go unit you never go back)
 thanks, I haven't look so much into PHP generators, maybe I should if it reduces memory usage
&gt; What you might do in the future is to add a property where the user can specify the encoding of the file they are working with. Then you can use some kind of iconv based filter to convert to utf-8 when reading. I'm already doing that for XML, Json output... maybe I should do it for reading too.
Capistrano is fantastic and it's used at more than a few advertising agencies in the United Kingdom. If you're on windows you're out of luck. Why not use Git Heroku style deployments? 
I would be very mindful of your recruiter. He could be gaining more if you accept a lower offer. Imagine that the client tells them "I give you an extra 2000$ if you get him to accept a 5000$ lower offer". I'm telling you this because the "my job title is not a "Senior Developer"" is not an argument that a recruiter that has your interest at heart would let fly. The imediate response of a recruiter that wants the best for you would be: "make him a "senior developer" and make an offer according to that title". Another reason your recruiter might use is the following. You're very young and you're coming with the enthusiams specific to that age. They will have a hard time bringing a senior developer that is older to manage a legacy code; the enthusiams wears down in time if you don't work on interesting projects. Never, ever sell yourself short when you're doing the job that was previously done by 2 people. Even if the other 2 were complete idiots. If any of the previous developers was senior (not by the title but by the experience he/she had) you are entitled to ask the average salary a senior developer is paid in your area. On top of that add a bonus for being the only one they rely on.
Nginx + HHVM
[Every so often.. give the elephpant a chance](http://goo.gl/XNgHbN) Also, logo.php is capable of showing a few more different logos.
Well I also use print_r() and of course die('whatever');
Ok first of all, what us programmers often forget is that the people managing us often cannot tell the difference between a good developer and a great developer. Is anyone tracking the amount or quality of the work you do? Probably not, and they go by gut feelings and by that standard you are easily replaceable on a PHP/Zend system. Or if they see you there late at night -- bam give that man an award! But nobody usually knows or cares that you are going to be better or worse than anyone else they might hire. One other thing I would like to mention is that are you sure you are a great developer? Perhaps a great developer would have been able to form a plan to bring this legacy system into modern times. (That is what I have seen great developers do in the past, with systems others said there was no hope for). Your trying to differentiate between minutely different job titles is not going to get you anywhere -- any company can and does use any title for about any position. There is very little standardization. And just because you have been changing a system someone else developed for three years I would not say that makes the job Senior. The system does sound complicated so I would put that at mid-level, but a Senior is not someone who only makes changes to a system someone else created/designed (IMO). Anyway sorry about all of that negativity when I am actually on your side. This company is playing hardball and does not want to compensate you as much as you want to be compensated, and I believe they would immediately seek to replace you with a cheaper PHP/Zend person ASAP if they could save a significant amount of money doing so. So either way, if they pay you what you want or don't, you are pretty much equally stuck in one place at this company. That is why you should jump ship. If you want to make a Senior developer salary, you mostly have to find a job where you are doing Senior developer work, and it sounds like your current position is not that job. I am not saying you couldn't do Senior Developer work--you probably could. I don't really blame your company for not being willing to pay Senior Developer pay for changes that any PHP developer could probably figure out after a few months of messing around. I would play hardball, get the high pay, and immediately start seeking another job and it will be a race to the finish between them replacing you and you getting out of there. At least then in the meantime it will be worth your while. As far as rates, I would say 85,000 a year is generous and 55,000 a year would be the low end. 
lol
Just so you know, even in people with college degrees there is a huge reluctance to move jobs when you have something that is OK. This reluctance is something most companies capitalize on. 
http://www.php.net/manual/en/book.bc.php
spaces or tabs
Yes, the reason so many people are confusing it is because the docs are right. /me rolls eyes
Honestly, because all the info I've come across seems to suggest that's the correct way of handling it. I can see the benefit: making it so that's possible allows for really neat tricks, like spinning up multiple servers for scaling, etc. with all the annoying bits done already, but for development on my own it seems... painful. Yeah, I'm aware of the 'halt' command, which is what i've been using. I'll stick to that for now, until I'm used to the workflow some more. Cheers!
Why PHP + HHVM?
Hi! Glad you like PuPHPet. I don't know how many hours I've given to it, so it's always nice to see people enjoying it :) My workflow is simple: `$ vagrant up` on initial setup, `$ vagrant provision` whenever I make changes, `$ vagrant suspend` whenever I want to put the VM to sleep and not have it taking up RAM, `$ vagrant destroy` for when I want to completely remove the VM and possibly spin it back up anew.
You shouldn't be writing PHP code like this, to start. Look up how to use templates, or ways of abstracting your application logic (fetching DB results) from your HTML. Second, have you tried simply setting your variable, and using it as you stated you would like to? $myVar = 'myKey'; echo $myArray[$myVar]; Also, if I remember correctly (on my phone, too lazy to look it up), `mysql_fetch_array` returns an array of rows. So, to access the first row, you would need to do this. $myArray[0][$myVar] Edit: nevermind. You need to specify your return type. Read the documentation. http://us1.php.net/mysql_fetch_array Also, the method is deprecated.
It should work, your string must be incorrect if its not working. To see the available keys, do a die(var_dump($info)); inside of the while loop. Also, if you don't already know mysql_* functions are deprecated in newer versions of PHP. http://www.phptherightway.com/#databases to read more
I use this with one of my puphpet generated Vagrant boxes to automatically load a starting DB when the box is first created: mysql::db { 'foo_db': grant =&gt; [ 'ALL' ], user =&gt; 'dcuser', password =&gt; 'dbsecret', host =&gt; 'localhost', sql =&gt; 'sql/initial.sql', enforce_sql =&gt; false, charset =&gt; 'utf8', require =&gt; Class['mysql::server'], }
It's also installed by default with most webhosts, because there's nothing wrong with it and nothing wrong with using it. Even professionally.
I interview younger coders on a regular basis. I'm less concerned with what you know than I am about who you are. Are you teachable? Do you know enough to look up what you need to know? Passionate? More importantly, are you personable, do I "like" you? There are a lot of introverts (me included) in our world. I've worked really hard to be able to be friendly and make 'small talk' that isn't just about nerd stuff. 
Reminds me of my own [GetSet](https://github.com/k3n/PHP-trait-sandbox/blob/master/trait.getset.php) trait that I made to demo traits awhile back.
Show interest in their organization. Do some research ahead of time and ask thoughtful questions about their organization.
What are the advantages and disadvantages for using the following formats for data transfer: csv, xml, json.
Yeah if you can read one line in and pass one line out at a time (taking care to watch for multi-line content...) then you could have a special function that instead of fetchAll() was something like yieldAll(), and that would error if not using PHP 5.5.
If money is what you care about and they aren't offering the money you want then politely decline, thank them for the contract work they've provided so far and look elsewhere for a new contract/job. Salary negotiations in this case doesn't seem like you will get anywhere. On the other hand, if money isn't the whole picture then consider salary negotiation. Be aware that most companies and organizations won't come up much from their initial offer. They should have put some thought and effort in their initial offer already so they likely won't bump their offer up by much.
 I just wanna say thanks for PuPHPet! Its really such a life saver!
losing 20% speed at 10k rows? I'm guessing there was something else going on... I won't dispute that an index containing, for example, 2 varchar(60) fields will be larger and take more time to traverse than an index containing one bigint field, but not 20% at 10k rows.
Self-taught developer, no college education. I've worked for some very very large ad agencies doing work for fortune 500 companies. Had a few small gigs and then applied for bigger and bigger jobs. My skills shined through and I am/was able to progress with my career. If you are not respected as a developer where you are and for the hard work that you do you wont progress with that company. You will just kind of hum along day to day 
&gt; No one should dictate how developers develop. You must work for a very tiny company. Large development teams absolutely have to dictate how developers develop. If I had 12 guys with 12 different development stacks, it would be chaos. In fact, it was. When I stepped in as lead 4 years ago, the first thing the CIO did was have me come up with a process for development because the guy before me had nothing but problems. The guy before me had most of the team set up on virtual hosts on their computers, they'd code everything and push stuff to test. There were tons and tons of problems, like assets (images, css, etc) not being up to date and connections to our Oracle databases breaking all the time. (DBAs are constantly doing security updates which would always cause problems with the VMs). Also, everyone's document root was different, and it would cause problems if one person made a file, then another person tried to edit in on their system. &gt;If you have developers wasting days on setting up vhosts, perhaps they aren't cut out for the job? Possibly. I work for the government, it means we pay jack shit to developers, which means the only people who want to work for us are fresh out of college. They're all very competent, they're just new, and we know this. This is another reason I have to have a defined development stack. People who are new will do all kinds of crazy things if you don't keep an eye on them. For example, I once had a guy just write something in python. We're a php shop. He wrote it in python on his computer, then tried to run python on the server. Luckily he didn't have permission for that and the sysadmin caught him. (The Sysadmin is a crazy guy who lives on a remote mountain and only drives down once a week.) &gt;ONE remote server for developing? "One for all and all for one!" How do your developers not step all over each other? That's easy. SVN. You check out a file before you start editing and you check it back in when you're done. We have never once had a problem with anyone stepping all over each other. &gt;How do you handle database schema changes? We have a DBA. She handles the changes. PHP devs don't touch the DB. They run queries against it, but if they need new tables or columns, she handles it. Those changes are also version controlled. &gt;What happens when one developer accidentally crashes the server? Yea, this doesn't happen. I don't know how often *you* crash the server, but if this is a thing for you, maybe *you're* the one not cut out for the job. What are you doing that crashes the server? (honest question, I've never had a dev crash a server) &gt;You sound like a particular IT sysadmin who contributed greatly to me hating my previous job. His way, and no other way. This is the job of a lead developer. It was literally in my interview. He said "You'll be tasked with coming up with a development process that can be used by everyone." I went with the simplest one I could so that my devs could focus on coding. Your old boss wanted it his way and no other way, probably, because he was tired of all the bullshit that came along with every dev having their own process and half of them having problems every time they tried to push something to test, or half his devs losing DB connectivity when they updated security settings. &gt;Christ. Don't stifle other people's initiative to learn and try new things. They try new things all the time. They tried letting everyone do their own thing a long time ago, and it was a disaster. Part of "trying new things" is finding out what works and doesn't work. If it doesn't work, you don't keep doing it, anyway. If someone were to come up with a better way to develop, I'd consider it. We occasionally make changes (for example, one guy wanted xdebug, most of the team liked it, so we added it). The only thing is that everyone has to do it the same way. &gt;No one is 100% productive, and working in a dictatorship will only lead to high turnover rates and burnout. No, we're not. But instead of messing with VMs and others development stacks, we're sending each other funny pictures of cats and ridiculous articles from the internet. Laughing at stuff is way more relaxing than spending 3 hours trying to figure out why your VM suddenly won't connect to the Oracle DB, anymore. The fact of the matter is that everyone is happier now, we're more efficient, the CIO is happy, and we can roll out apps faster. That's what really matters.
I use PuPHPet for my dev work. I have one VM, with about 20 different sites running on it. Each time I start the day, vagrant up When I'm done for the day, vagrant suspend If I need to add a new site to the VM, I edit the config.yaml file, adding a new virtual host and new db. Then, while the VM is running, I just run vagrant provision at the command line and viola! There it is. My "perceived" benefit of this is that when I need to switch to a new/different project during the day (ad hoc requests, break/fix, etc) I don't need to shut-down the VM and start up a new one. This also means that I only have one VM to manage on my host (and only one VM taking up disk space). As all of our sites are hosted together, this also gives me a fairly accurate reproduction of the hosting environment when I'm building. Probably not perfect, and I run into some permissions issues every so often, but it works for me.
Thanks :)
Good tutorial
I didn't have it in me to be that guy, so thank you for stepping up.
second that
Why not just loop through them all, and pick out what you need? foreach($_SERVER as $key=&gt;$val){ print($key . " = " . $val . "&lt;br&gt;\n"); }
Most of the times we need individual variable information. E.g. getting the information about user's browser. In that case loop execution will be expensive. 
I want to double up this just for the river metaphor 
&gt; You must work for a very tiny company I don't. &gt; Large development teams absolutely have to dictate how developers develop. No, they don't. You and I both seem to be process guys. That's fine. Processes are necessary. Version control is necessary. Defining style guides, development flow, who handles deployments and how, etc. are all necessary. What's not necessary is saying that one person uses xdebug, so now everyone has to use xdebug. If I want to use PHPStorm, let me. If I want to use Netbeans, let me. If your company is a PHP shop, use PHP, not Python. These are all fine, and they don't dictate how developers work. As long as I follow the *process*, who cares what tools I use to accomplish the job? Would you be upset if your gardener used an electric weedwacker instead of a gas one? &gt; That's easy. SVN. SVN is for version control of files. There are other ways for developers to step on each other when they are all working on a single server. &gt; We have a DBA. She handles the changes. During development? Why do developers have to wait for a DBA to change a development database? &gt; Yea, this doesn't happen. Crashing a server is anecdotal. "Shit happens," however. Things I've seen, done, and experienced include deadlocks, disk thrashing, cache thrashing, infinite loops, out-of-control memory allocation, database read/write locks, etc. If all your developers are working on a single server, how are you ensuring that their development is isolated enough that they don't either cause these themselves, or cause them from other developers working on related pieces? &gt; This is the job of a lead developer. I can agree that a lead developer should define a *process* for the project they are leading. I do not agree that means defining every tools, nor do I agree that it's a "my way or the highway" position. It's how I currently work as a lead, and it's working out fine. &gt; Your old boss wanted it his way and no other way The IT sysadmin was not my boss. The sysadmin was a person with a point to prove. My boss was fired for not delivering. I took his position, was given a significant raise, and delivered what the company asked for. I also *collaboratively* defined processes for another project with a few other developers, for which we delivered many additional products before I left. Meanwhile, the IT sysadmin was a constant road block, caused us to miss many deadlines, overpay for things by hundreds of thousands of dollars, *did actually crash servers* with his tools and methodologies, etc. Perhaps he is incompetent, but it's an example of "my way or the highway" failing. &gt; we're sending each other funny pictures of cats and ridiculous articles from the internet. Personally I can't stand this. It's distracting, and it happened at my last job. But that's just my opinion. &gt; The fact of the matter is that everyone is happier now, we're more efficient, the CIO is happy, and we can roll out apps faster. That's what really matters. Are your developers happy? Granted, you may be in a special circumstance with fresh graduates who are lacking in experience, and so perhaps dictating everything is necessary. Personally, I prefer a mentor approach, and I trust my experienced developers to follow the process however they feel inclined.
What the fuck is this? This should be in a "starting PHP" article, not a "10 essential variables" list. Seriously, what the fuck? 10 essential VARIABLES!? And /u/My-Work-Reddit, seriously, why would you do that? If you need to see what's in $_SERVER, just do `var_dump($_SERVER)`. The other comments here make me feel like I'm in the twilight zone.
It'll be better than fastcgi/php-fpm at some point?
I like it, pretty neat traits
Chrome bug affecting web-fonts: http://blog.typekit.com/2014/02/04/chrome-bug-affecting-web-fonts/ The bug fix will be at version 33.
Most are fine and useful, but `HTTP_USER_AGENT` is the most useless, not the most useful. In 20 years, I have literally *never* needed my back-end code to know the browser's user agent - it can be faked, blocked and modified almost trivially. It's only use is for logging, and even then you can probably only consider it to be about 80% accurate.
No. I would expect to find examples of how to accomplish something in any "how to" article. A list of arbitrary data is not very helpful without any context. &gt; Let's write an analytics program! &gt; If you need to summarize what browsers visit your website, you can check the User-Agent string. How do we access that information? &gt; PHP creates the global $_SERVER variable. This variable contains information about your server, your scripts, and the current request! &gt; So, with that in mind, we can find out what browser the request is coming from with this. $userAgent = $_SERVER['HTTP_USER_AGENT']; &gt; Isn't that just fantastic? The article is not fine because there is no context.
I agree its not the best article in the world but nobody said it was a "how to" article. It's just an informative piece and I'm sure it would be good for any students who would rather read up on stuff than do practical work. 
I suspect few people search for "list of $_SERVER variables." Most people who are going about it would probably output $_SERVER, and search for the items they are curious about. Failing that, if someone just wants a list of variables and what they are, what's wrong with the [official documentation](http://php.net/$_SERVER)?
again i agree. but not everybody who studies php wants to become a php developer. And of course everybody has there own ways of learning a language. its just a 'cheat sheet'. Its useful to some people. And to be fair the official documentation is great but it isn't presented as well for readability. Think of wordpress designers and students. 
Read the discussion below. There are still problems even with bcmath.
[Check this](http://www.hhvm.com/blog/1817/fastercgi-with-hhvm), apparently HHVM is much faster but the article may be a little biased since its from the hhvm site itself
Wordpress designers shouldn't be touching $_SERVER. Students should be familiar with reading through documentation.
Ruby? It was Ruby wasn't it.
Would you use fascgi mode and have all the servers the same and do the rest the same as this article or do something like this? www.example.com application traffic + HTTPS/SPDY traffic | | plain http over (V)LAN | DNS A record +---------&gt;HHVM SERVER 1 | +-----&gt; NGINX + PAGESPEED 1 + | | | | | +---------&gt;HHVM SERVER 2 +-&gt; + proxies/balancers | | | | +---------&gt;HHVM SERVER 3 +-----&gt; NGINX + PAGESPEED 2 | DNS A record +---------&gt;HHVM SERVER 4 cdn.example.com + Static files via 3rd party CDN | +--------&gt; CDN +--&gt; Amazon S3 or similar
"so many people" - citation needed. I'm pretty sure aside from a few repeat offender anti-laravel trolls who are making this a non-issue, nobody confuses it. The English language is a wonderful thing, where multiple, often completely different ideas are given the same or similar labels. Context is what matters. If all you have left to bitch about is the naming of a concept which is easily explained within the context of the framework then you have no argument. Roll your eyes all you want, it doesn't change anything. You are literally inventing an issue which doesn't exist.
It's worth mentioning [Rocketeer](https://github.com/Anahkiasen/rocketeer) as a PHP alternative to Capistrano. It's young but I've been using it in production for a couple months without issue.
This sounds to me like you're using Migrations the wrong way. The migrations in Laravel are VERY similar to how they were done in CodeIgniter and FuelPHP. Each version improved things a little and Taylor's use of timestamp based migrations solved a lot of problems that were apparent in both of those systems, but the basic idea is the same. When creating the CodeIgniter and FuelPHP approaches, I copied it all heartlessly from Rails. In all of the systems, you CAN delete data, but there are usually ways around it. For example, if you are renaming a column then hopefully you are actually renaming it, not dropping and adding. If you DO drop then add, query the field and store that data in memory, or in a temporary table. If you're dropping a table, then yes you're data is gone. Of course it is. :) I would assume you're not going backwards and forwards regularly in production (please don't) so this is only an issue on development. In development you have Database Seeding available to you to easily populate your database, so an empty table should not be an issue - just seed it again. :)
it says "Don't listen to me", confirmed for Ruby
The best book is always going to Amazon.com and getting the top 3 best books in whatever you're learning (and switch books when you get stuck). Oh ya and Google every problem, somewhere someone else always already had it on stackoverflow.
Again, he wasn't my boss. Either way, my initial assumption of your position was mistaken. I am irked when I'm told how to work, but that doesn't seem to be what you're doing. I'm not quick to reject anyone either, but that's where my analogy falls apart. A gardener is different from a development team, as well as the relationship. A contractor is not an employee. &gt; Seeing as our apps are used concurrently Using and developing concurrently are two different things.
I would argue that it's really good PHP software, well put-together and extremely thorough. What's bad about it?
There are tons better alternatives. Why would I want to go through the trouble of setting up a lamp stack just to have a user interface to my DB when I can use a REAL IDE which has tons more and better features.
How'd it go?
I got two for Christmas. I'm just now getting around to using them. Working two jobs, a few hobbies, a girlfriend and trying to maintain a social life is hard. :/ Most just for fun things tend to get half-assed.
&gt; One thing that I did come across a lot was setting up a reverse proxy using nginx Nginx + php-fpm serves dynamic content with better performance than Apache. You lose most of the benefits of Nginx when Apache is used in any step of the HTTP request.
That's actually kind of interesting in a strange way. I guess it shows the Apache engine out performs Nginx, but it's connection handling is crap.
You obviously don't understand the point of it if you think open source means you didn't have to pay for it.
Thanks for all the suggestions guys, it really helped me out studying.
Google still does it and I'm sure they use load balancers too, and ELB is lackluster compared to nginx or haproxy. As far as I'm aware you can't even configure proper error messages to the users.
tabs!!1
I've done some basic benchmarks myself. I sadly don't have the numbers handy though. While I saw huge improvements across the board, it really does depend on what you are doing.
Did any of these questions come up?
Love the direction you guys are taking with HNI - the work on preg looks like it will be especially relevant to a webdev like me. The parity levels have just exploded, and I've followed and contributed to a couple issues. For those interested in my favourite CMS, concrete5, you can run it pretty nicely under HHVM too. It does require the changes mkly and I worked on, merged in this pull request: https://github.com/concrete5/concrete5/pull/1564
yeah, mainly stuff about oop and new features since php 5. also at the beginning they asked some questions just about the language in general.
The code seems incomplete. I cannot find any documentation on array_resize() and fork(). Is there some dependancies that were left out? edit: Oh, nevermind. Didn't realize I needed the PHP-QB library. Carry on, nothing to see here.
Round robin can make sense in the fact your proxy doesn't have the IP it needs and gives the browser a second chance to serve a request. A bit with 30 second delay though.
if you hire a developer and ask those things I cant help to laugh and leave. A developer isnt measured for his knowledge in 1 language. Ask him about patterns, problem solving and those kind of things, features of new versions is not something you must know.
Great work :)
I found this thread while looking for a test to set as a recruitment exercise. Being the lead dev at my company, I was surprised at getting a few of these wrong: http://www.blueshoes.org/en/developer/syntax_exam/
If it doesn't cost an arm and a leg, and you can comfortable afford it (or your employer pays for it), do it. When you apply for a job and everyone appears to be at the same level, except you have a few certificates? Who do you think they'll employ? 
If you're coming from another language, you'll be fine. Just setup a webserver with PHP enabled and read the documentation.
I think OP wants a shortened documentation, e.g "how php differs from c/python/ruby/your language of choice"
Yes, that's what I need. I'm rather competent in C/C++/Ocaml/Python and I need to add PHP to my gun rack, quick and painless. 
My apologies!
Some is this is a bit basic but it should get you started at least: http://learnxinyminutes.com/docs/php/
No need for apologies ^^. If you know some doc, I'm listening. 
It seems you know what you are doing, so a quick recap. PHP is not as OOP as Ruby or Python. Sure, theres classes, interfaces, traits and abstractions. So the first advice ill give you is use PHP 5.5+ forget about the old stuff, the same goes for shared hosting. If you're on OSX, install PHP with homebrew or use vagrant. The second advice is that you really should have a look at Composer. Its the php dep. manager. Its really good, and can be easily compared to npm or bundler. Learn to use it. After this its just to browse on packagist.org, and install packages and start coding. You could have a look at a framework also, Laravel and Symfony is two good choices, then read the source code to see good PHP coding standards. If you want to code like the general PHP community, you could also read about PSR www.php-fig.org coding standards. The coding standards are not enforced, but some parts are almost necessary in todays PHP. (Like autoloading with PSR-0, or PSR-4) Theres also testing in modern PHP. Have a look at different testing frameworks. Phpunit being the default one most ppl use. Last tip, DONT bother reading old php blogs from 2006, they are all horrible. For a quick start checkout: www.phptherightway.com 
This one is a very good start, thanks ! 
Thank you. This is good intel. 
Thanks, that's actually where I started from. 
For anyone who was following this... The issue turned out to by Mysql's max_allowed_packet size setting - set to 1M. But... the initial error messages didn't point to that. We ended up getting one stack trace that said something like "mysql has gone away...." and worked from that.
I have been working with PHP for ~16 years (and other languages as well). If you come from 10 years of Python and C/C++ background *and* you generally know what you doing in programming you should be %100 fine. in terms of performance PHP is ~on the same level of Python, version 5.5 also includes OpCache built in, that's kind of a JIT solution for PHP (like PyPy) - but it's relatively new and still developing. Like other mentioned: * use new version (5.5) * ignore old blogs, and actually ignore most PHP blogs and posts - your experience in coding + official api docs should be enough to use PHP in the correct way. * PSR, www.php-fig.org are Important conventions. * PHP has lots of frameworks, for production, use such framework, there's no point to reinvent the wheel in this area. I would recommend AuraPHP or Silex. * PHP now days is much much more about OOP than it was in the past. new version are built for enterprise and that's usually means heavy usage design patterns. * PHP still has some legacy stuff, you usually can just ignore this stuff. * use Composer for dependency. * use PHP Unit for unit testing. unit testing in PHP is very important, because it's type system is not the best say the least. * PHP have native POSIX multi threading via the pthreads extension. * ignore HHVM for now, research when you need more performance. * subscribe to PHP development mailing list. * check IDE called JetBrains PhpStorm, using it for 3+ years, best I have seen. * remember PHP is fun, learn to love it, don't get angry on it (you will). I hope this helps.
Thanks. 
Well, this field does move fast, but can you explain how it doesn't help? Wouldn't putting in the time and effort to get the certificate show something worthy to potential employees? At the very least, a talking point?
Thanks for the information. So websites like W3C or learntoprogram.tv may or may carry much weight?
Just a few comments and additions, I hope I don't seem too negative, but I do think some information should be added to your contribution. * **Documentation** Need something? php.net/[function|class|concept] eg http://php.net/fopen . The documentation is very useful. I wouldn't underestimate it. * **Development Lists** I would imagine the users list seem more appropriate? Honestly, use what's comfortable. A lot of developer live happy in the docs, some on stack overflow, some in the IRC channel, some in emails. No need to force yourself onto or from anything. There's community everywhere. * **Testing** is important, but there are several models and PHPUnit fails in rather inelegant ways. It's also, oddly enough, closer to legacy than modern (you can tell by the PHPUnit_Framework_ClassName vs PHPUnit\Framework\Classname). Do check out BDD testing like [Behat](http://behat.org/) if that fits well into your toolbox. Less relevant stuff: * **Enterprise** There are certainly more design patterns being used, but I wouldn't call anything "Enterprise" yet. PHP itself hasn't really changed its development model or compatibility model. The frameworks are beginning to catch on, but the stability isn't quite there yet. * **OPCache** is not a JIT compiler, it does exactly as the name implies, it cache's PHP's opcode so it doesn't have to lint it on every request. * **PSR** is a "Framework Interop Group." PSR-0 and PSR-1 are widely accepted and adopted. But, unlike PEP, their goal isn't to establish a PHP-wide convention, just one to use on projects regarding framework interchangeability. I recommend not getting in a religious war over style (like PSR-2) and just use what's comfortable for you *consistently*. Consistency matters. * **Threads**: while supported, aren't used very much in the community. Results may vary. * **Recursion** support in PHP isn't as good as most other languages. It doesn't have [tail recursion optimization](http://stackoverflow.com/questions/6171807/does-php-optimize-tail-recursion) and it allocates on the heap instead of the stack (it doesn't just push/pop the variables onto a memory block). 
Damn… And what happens if you run the React app with HHVM? I.e. instead of: php ./bin/ppm start /path/to/symfony/ --bridge=symfony -vvv you run hhvm ./bin/ppm start /path/to/symfony/ --bridge=symfony -vvv
They should have included nodejs in the benchmarks
[The first comment](http://www.coderslexicon.com/my-love-hate-relationship-with-php-traits/#comment-837042721) in the blog post summed up my opinion. The authors first two issues with traits can be applied to inheritance as well as traits.
he did this already but it had a negative influence on the req/s since hhvm uses stream_select for the event loop. the normal php interpreter can uses libevent (http://de3.php.net/libevent) which is way faster. if you check the block post he wrote: "hhvm - is the same as react but started with hhvm:"
&gt; You alter the trait thinking it will alter one type of class using it, but may introduce problems in another class also using it. Meaning you will have to know all classes using the trait. Well that is the whole point, right? When you modify a trait, you WANT all the class that is using that trait to inherit the change.
Couldn't agree more. PHP comes right after Ruby and Python, but right before Java and C#.
I started my newest project in Laravel and it is glorious. It really got me into PHP coming from a short-lived and not so great Codeigniter stint, which came after working in Django as a front-end developer. It really makes coding fun again.
There is a lot of good comments in here. I would just like to add once you got the syntax down it's a lot more fun to build sites using a Framework than straight PHP. I would take a look at codeigniter or laravel. Both are really popular right now, though I think Laravel may top codeigniter by a bit.
I recommend [PHP: The Right Way](http://www.phptherightway.com/).
Cross-language benchmarks like that are almost always useless. There are so many things different between javascript and PHP that any number of them could cause one to be better or worse. They generally come down to "which language is the person making the test most familiar with"
&gt; the web development field moves so fast, that in a few months, what you know now, is most likely outdated 
I'm thankful their academic license is $30 ($20 to renew), but the amount of time PHPStorm has saved me is invaluable. # My Favourite Features * Test RESTful web service * Vagrant integration * Automatic upload (not to production though!)
And how would you run the Symfony app on Node? What's the point of the benchmark? Benchmarking everything, or comparing PHP solutions?
only on reddit can PHP code be sexist. get a grip lol.
Duplicates http://www.reddit.com/r/PHP/comments/1yzcvi/bring_high_performance_into_your_php_app_with/ which was posted 4 hours earlier.
Having been in this boat in the past here is my advice: they give you exactly what you think is fair or walk. I worked for a small 'education' company (think of those scummy 'I go to school in my pajamas' commercials) and I was one of a few engineers there but I was the one that knew the most about our system (a clusterfuck of Wordpress sites and Symfony apps) and basically wrote/fixed everything new and old. The management knew it but they refused to bump my title and give me the salary I thought I deserved (I wasn't even asking for an insane six figure salary). I hung around for a bit while actively searching for another job and through a friend of a friend I got a great offer at a much larger company and I am now a manager of a team half the size of my previous company making over double what I made there. The company probably thinks they have all the power and does not have any sort of appreciation for engineering (one developer for the entire app? wtf...? I see companies like this all the time, it sickens me).
I'm not much of a fan of these 'top x' articles; they are a fantastically lazy type of journalism. I decided to skim through it anyway and came away particularly unimpressed. Right off the bat, point 1 is content negotiation done _poorly_ (if the User-Agent provides quality factors this will fail, if the languages are not in descending order of preference it will fail). If you want to do this correctly use a dedicated [content negotiation library](https://github.com/ptlis/conneg). There are a whole bunch of subtleties to this that you do not want to wrangle with.
Take a look at 'Learning PHP, MySQL, JavaScript, and CSS, 2nd Edition' by Robin Nixon for a book that shows you the basics of all three languages and how they work together. It's probably available in your Safari collection.
http://www.phptherightway.com/
Most front end developers jobs (that accept certifications) would recognize a W3C certification. Due to the organization behind it. learntoprogram.tv is an example of something we would not care for at all.
Thanks for not deleting your comment when you realized it wasn't their fault. I hate when people get embarrassed and delete a comment that would be useful for someone else in their situation. 
I know you think all I do is change a few little things here and there, but the reality is that I work a minimum of 50 hours a week, every week. You say that I probably don't do Senior developer work but if I don't, who does? If you really want to get into the dead breakdown of my job duties, I'm programmer, designer, database administrator, and server administrator. Not only do I do all of it, I'm the only one who CAN do it in this company. It was either you or someone else that mentioned bringing the legacy system into the modern times. I'm rebuilding the entire system in my minimal spare time but considering the size, I can't exactly pop it out in a day. I have a family too so I can't work 18 hours a day just to streamline it either. You apologized for all of the negativity just to continue with bashing me as if I'm incompetent and that PHP/Zend developers are just flooding through the doors to replace me. I've out performed all three of their previous developers in less than 6 months. 
Those are some pretty big hurdles to get over--especially the part about having to restart the server on any fatal errors ... this is one of the very things I despise in Node.js. There's potential, but I can't see this being a good idea for production environment at this time.
Plain PHP can be a mess and there is a lot of rubbish code out there to learn bad habits from. Since you already know other languages stepping straight into a PHP framework might be a good idea without putting up too steep a learning curve. [Laravel](http://laravel.com/) is pretty popular right now and has great first and third party documentation and a nice, helpful community behind it. The official documentation is pretty complete. http://laravel.com/docs Code Bright is also recommended, it's not as complete but has more depth on the topics it does discuss. http://daylerees.com/codebright Laravel borrows a lot from Symphony but in my experience it's easier to use. If you're looking for something even more simple you could take a look at [Silex](http://silex.sensiolabs.org/)
Cross language benchmarks are not useless. Cross-paradigm benchmarks are often an apples to oranges comparison and can be skewed. However, with both React and Node being single process and able to serve up http requests, and with this article specifically mentioning node, a comparison would be beneficial. 
Nah, not really. In other languages it's daily business to have a own http stack. The process manager I've wrote for that test does even already support a auto-respawn when a worker has died (caused by a fatal error or something) 
Why do people get so bent out of shape over MI? 
I think people misunderstand traits significantly. The point of a trait is difference from inheritance. In inheritance, you are more or less extending another class. Traits are the opposite - you are extending the current class with existing code. The other thing people tend to not realize is that traits are meant to be used only once in a class. I see people developing traits that they use multiple times (with aliases). Aliases are meant for integrating traits with classes that already have conflicting function names. With that said, in our software development environment we use traits liberally and it saves bigtime as far as code duplication. As an example, we have a core level of software which provides an API to a bunch of extensions. One of the important things is making sure certain functions run once (and we have a lot of them). As a result, this trait was born: trait RunOnceBehavior { private $__runOnceBehaviorFunctionList = []; /** * This function will provide a behavior that allows calling functions * to assert that they have only ran a single time. * * @param string $funcName Function name. If not provided, debug_backtrace will * be used to extrapolate the calling function. * * @throws \FlexCms\Core\Exception\RunOnceException */ private function runOnce($funcName = null) { // If no function name was given, extrapolate from the backtrace. if(null === $funcName) { $debugList = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 2); if(isset($debugList[1]['function'])) { $funcName = $debugList[1]['function']; } else { return true; } } if(null !== $funcName) { // Check for the function in our list. if(in_array($funcName, $this-&gt;__runOnceBehaviorFunctionList)) { $errorMsg = "The function '{$funcName}' in class '" . get_class($this) . "' has already ran and is defined " . "as a run-once function."; throw new RunOnceException($errorMsg); } // Set the value. $this-&gt;__runOnceBehaviorFunctionList[$funcName] = true; return true; } } } I think Traits are the perfect way to describe behaviors that you want classes to follow or items that you need integrated in a lot of classes. Almost all of our traits either end in 'Behavior' or 'Aware' (e.g. RepositoryAware). That's my insight into traits and why I find they are a great development tool.
NetTuts has a really great video series on just this, it's a paid site but maybe worth it for a month to get going https://tutsplus.com/course/php-fundamentals/
Because of the organization's recognition or because learntoprogram.tv isn't a reputable source?
At the risk of sounding like a newb, why?
Are Traits really and truly MI though? I'm not saying they aren't, I have no idea which is why I'm asking. I know they accomplish the same goal (composition) but everything I've read leads me to believe that the implementation of Traits in PHP is a bit different from what you see in other languages with more pure MI implementations. As far as PHP and traits goes, does it not make sense to reserve them for implementing behaviours that cross domains? I tend to use inheritance in verticals (within any given domain), and traits horizontally (when I want to make behaviour from one domain available in another). I also tend to avoid requiring state inside a trait. If a trait is considered a real behaviour, you shouldn't have to maintain state and alter that behaviour. It should just do whatever it's supposed to do.
I'm on the fence with regard to Traits, but for completely different reasons than the author of that blog post. While I understand the utility of it, it seems to provide (and even *promote*) a ridiculously easy way to shoot yourself in the foot. Composition is something I hear a lot of C++ devs rave about but each of them designs and composes their objects with multiple inheritance. Traits don't impress me as being a substitute for multiple inheritance but I don't know enough about MI implementations in other languages to make a properly informed decision. On the surface, Traits just feel like a shortcut to arbitrarily slap a bunch of methods into a class with no real regard for your overall design / architecture.
Check out this website. http://www.w3fools.com/ Instead, use something like Mozilla's Developer network. It only covers CSS and JS however. 
stopped reading after memes
Sincere advice here is that you are over thinking this. You already know how much you are worth and they are not willing to pay that amount. So you really have a few options: * Your are financially stable for a few months: Tell them it is not enough, that you are worth more than they are offering. They will either increase their offer or tell you to take a hike. * You are living week to week on your earnings: Accept at the lower amount and immediately start looking for another job. * You want to hedge your bets: Stall in negotiating and signing or committing to anything, and immediately search for another job. The best thing you could do for yourself right now would be to update your linked-in profile and to publish your phone number on linked-in. Do this and wait for your ego to get stroked as your phone rings off the hook with offers.
Why? This is one of the most interesting things I've ever read in this sub.
His test **was** react sitting in front of a Symfony app... his 2k reqs/s were for a full Symfony 2.4 app running behind react with nginx as the proxy for the workers.
Ah that makes much more sense.
I am slightly concerned about how reliable the benchmark is. I know, that fpm can perform better than just 130r/s, but that aside. I am always a little sceptical, when I can't find the benchmark as a whole to reproduce the tests ;) But what primary concerns me is, that ab tests only a single URL. This means, there is no variation the application must handle and therefore things like variation in memory consumption isn't really affected. I can't imagine, that the mentioned issue about memory leaks is sooo easily handleable... With this in mind I actually can't believe, that it is worth the effort to write, or even rewrite an full-blown application this way. Keep in mind, that now you have to take care about memory and such yourself, because ther shared-nothing behaviour of classic-PHP doesn't work anymore. I could just save the money and invest in an additional server, or even better: Use a reverse-proxy to prevent the application to do anything at all the most time. I use reactPHP for other things myself, thats not the point. I just don't believe, that this use-case will end well in the real world. I can also imagine, that there _are_ some use-cases, that fits, but I'd prefer to use NodeJS in that case.
What?
I don't get your point. In NodeJs you have to take care about your memory as well. Why won't you do that when we're talking about PHP? Of course, if you have already a heavy application then it's probably not worth to refactor, but all future projects can benefit from it. Also because load balancing and "just add another real server" isn't always that easy. Handling memory leaks instead is easier - the whole NodeJs/Java&amp;Co folks do it. Actually, the tested symfony bundle is a real world case. Try it yourself. Install the bundle (instruction to install it and setup demo data is in the repo there) and compare fpm with the react approach. Maybe you increase the performance a bit with php 5.5 from 130 req/s to 150-160 req/s, but I don't think you can get more. &gt; variation in memory consumption isn't really affected It won't affect the performance when I request 2-3 pages instead of always 1.
Maybe try reading http://us1.php.net/manual/en/reserved.variables.get.php ? If you want better help than that, you might want to elaborate on your question.
What about PHP inherent memroy leaks? PHP always had problem with these and noone actually cared since processes die soon. I'd like to see a memory diff for this after a week of uptime with 10 req/sec
Yes, me too. A idea to work around this potential issue is to restart workers automatically when they ran longer than X hours. `pm2` (process manager for nodeJs) for example has on the list a memory-leak-detector to automatically restart the worker then. Of course there're surely somewhere memory leaks in PHP for some edge cases, but they are rather rare. Our goal should be to eradicate those by reporting finds to the php group instead.
You missed out.
No. It *has* objects, but unlike fully OO languages, not everything is an object. In Ruby, everything is an object that inherits certain methods. You can reverse a string by calling the string's "reverse" method, for example. Ruby dispenses with certain Java-isms that PHP inherited, but it is certainly a more object oriented language.
I got five questions wrong. I thought that the == operator when comparing arrays, only looked at values instead of also at keys. Also I got a bunch of reference stuff wrong, but I avoid those and curse all the ex-coworkers who use them. Also there were a few trick questions at the end: $a = 'foo'; $b = isSet($a['bar']); The question was, what is `$b` and it turns out to be `true` because the 'bar' apparently becomes a zero. Well TBH I was pretty surprised to find out about that.
Use traits to implement technical patterns and DRYing boilerplate code. Don't use traits for reusing *business logic*. For example, technical dependency injection boilerplate code can be implemented as a trait, the usage afterwards however is to decouple business logic.
The example to use traits... would that be better served as an abstract class instead? I understand those classes, out in the wild, might not be able to extend an abstract class, but for the example, theres no reason they couldnt. Also, the added benefit of adding: protected $engineTemp; to the abstract class.
PHP has made significant improvements to memory management in the last few versions (5.3, 5.4, and 5.5). Is it enough? Maybe, maybe not. At the very least, it may not be a problem for much longer. *However,* currently, Symfony and Doctrine don't play well with long-lived applications. Symfony, when in debug mode, will store all the logged entries into memory (including a log entry for each query run). Doctrine, in comparison, tends to like to keep entities loaded.
No one has mentioned, [PuPHPet](https://puphpet.com/) yet so I thought I would throw it out there. Quick easy way to get a vagrant server up and running for development in about 15min. Also, no one has mentioned [composer](https://getcomposer.org/) which is the go to package manager for PhP. Finally, you might find the [Symfony Book](http://symfony.com/doc/current/book/index.html) helpful. In general it teaches you how to work with that specific framework, however, the opening chapters do give a crash course on working with HTTP using PhP in an object orientated way as well as the general design philosophy behind a PhP web app. The core Symfony components are also used in a lot of tools so it might be good to at least know about them. 
&gt; I don't get your point. In NodeJs you have to take care about your memory as well. Yeah, and still I wouldn't write a "Symfony2-worth" application in NodeJS as well. I must always think of the asynchronous behaviour: While it works nice with IO, it completely blocks, when it has to compute something. Thats the case for fpm as well (of course), but then why not stick with fpm? &gt; Also because load balancing and "just add another real server" isn't always that easy. Actually I usually plan with the reverse-proxy setup from the beginning :) &gt; It won't affect the performance when I request 2-3 pages instead of always 1. While I wouldn't say that so easily, it will at least affect memory consumption. Loading one entity from a database usually means, that your DBAL will probably keep it in memory. Doing this with _many_ entities means, that it will consumes even more memory. I havent thought of "2, or 3 pages", but many many more. Think of a wiki, where at the very minimum every user has their own profile page. Or a shop with a product page for every single product. Actually twice: They appear in the backend as edit page once more.
Yes, now it's up to you to keep the memory clean. If you don't want that doctrine saves entities, disabled it or clear that cache after the request. Same with Symfony. I hope we can get solutions for all potential issues like those as I really think that this approach is the way to go.
I have a few questions ... - How do I deploy named virtual hosts on the same IP? Can I do this? - How do I enable TLS encryption for an https:// server? Is this even feasible in PHP right now from an encryption security standpoint given the available functionality in userland? - How about connection keep-alive? What's the default keep-alive timeout before which a connection is closed? Can I configure it? Am I even able to use persistent connections? - How do I stream responses? Will the server automatically use `Transfer-Encoding: chunked` if I do? If the request was made by an HTTP/1.0 client that cannot accept a chunked response will the server normalize the response headers and automatically close the connection when the response body is finished sending? - How many clients are allowed to be connected to my server at one time before I stop accepting new connections? - How do I upgrade the application code without restarting the server? Is a hot upgrade even possible or do I have to simultaneously disconnect all connected clients at 4 in the morning to change a single line of code? - What happens if I send the server a request message containing 4 gigabytes of data in the entity body? In the headers? In the request start line before a single line-break is encountered by the HTTP message parser? - Since this all happens in a non-blocking event loop how do I allow for receiving really large request entity bodies? Are they all simultaneously stored in memory? If not, how do I write them to the filesystem without blocking the event loop? - How do I respond to an `Expect: continue` header without reading the entire body? - Can I accept chunked entity bodies in my requests? - How about error logging? Request logging? Is this information written to the filesystem? How is any filesystem access performed without blocking the event loop? - Can I modify the SO_LINGER option on client sockets if I'm under a DoS attack to avoid having many thousands of leftover sockets in the TIME_WAIT state? How about the socket backlog size? Can I modify this? Do I have any way to mitigate a DoS situation before it's too late? - Do I need to set the `Content-Type:` header myself manually on every response? How about the `Date:` header required for a valid HTTP/1.1 response? Will the server do this for me? How about the charset for text content types? Will the server do this for me? I could go on and on. My point is, yes: non-blocking event loop applications are possible. But for a solution to be in any way viable these are the kinds of things that MUST be addressed first. Putting something in production without answering these sorts of questions would be foolhardy indeed.
But there's always a way to clear that cache. And this is actually not a memory leak but a purposed memory storage. At least in unit test environment you have to disabled this behavior or you'd need several gigs of ram.
Take a look at how other languages do that. NodeJs/Java etc. It's daily business for those guys. Some questions can be answered when you browse through the symfony documentation. For the other questions we can hopefully find a solution together. :-)