Does your acceptance test suite do real HTTP requests to a real HTTP server or does it just invoke methods on your PHP application object?
Bit confused why he's worried about server DoS via login instead of password security should his user table ever get leaked (which evidently it will, as he does not appear to be doing any [input sanitizing](https://github.com/mevdschee/MindaPHP/blob/master/pages/register\(\).php)
Wait is that filename really `register().php`?
commit message: "minor documentation change to match functionality"
Don't worry, after seeing [this](https://github.com/mevdschee/MindaPHP/blob/master/vendor/mindaphp/Router.php#L90) people probably stop coding altogether.
This seems to be a "new framework" week on reddit. I especially appreciate the thorough enter-separated description =\ Kudos for the Oracle adapter though. But you have to stop doing this: https://github.com/imadige/smceframework-MVC/blob/master/smceframework/extension/SmActiverecord/lib/adapters/OciAdapter.php#L58 Instead of using intval() raise an exception if the parameter is not a number. Also get ready for a "reddit shitstorm" =) Also, the name is unpronouncable and thats never good 
Yes. Look at the rest of them :S https://github.com/mevdschee/MindaPHP/tree/master/pages
Came here to say exactly this. [Seriously, skip this framework](https://github.com/mevdschee/MindaPHP/blob/master/vendor/mindaphp/Router.php#L68). There's far better frameworks with a more modern casebase out there.
I'm tempted to upvote, either for the bravery, or because I was the one (on Stack Overflow) that recommended you dive in the shark tank! Can you explain what your framework does differently from the main ones? What advantage are you offering? 
That method gave me cancer.
Just a word of warning. Don't read the source code. Seriously, DON'T!
Dear lords! My brain hurts after looking at that. That guy should really read [psr-1](http://www.php-fig.org/psr/psr-1/) and [psr-2](http://www.php-fig.org/psr/psr-2/).
The problem arise if there is a limit of 15 attempts, and I have all my 20 different passwords written on post-it notes stuck to my CRT. There is no way I can try all my possible passwords if I forget which one it was! Especially if I also have to test my birthdate, and my cats name! I guess I have to start using one password everywhere to not DoS myself 8)
I am all for "don't judge beginners code" but God damn it...this is just wrong on many levels even for programing 101
I pose that it is safe as long as an adequate tin-foil hat is employed. Make sure it is thick tho. Very thick. And keep some aspirin handy.
Don't convince him. Erase this code from your computer and/or servers and use something that won't get you hacked in seconds.
It's quite difficult to tell if sanitisation is in force - it should happen [in the database layer](https://github.com/mevdschee/MindaPHP/blob/a3c406b0572ab53dfb19e3e95353c1fdf48c0f16/vendor/mindaphp/DB.php) via parameterisation. The code isn't exactly easy to follow, but there does seem to be some `bind_param` being called. 
Come to think of it, I think my honeypot implement isn't working correctly. HTML &lt;input class="from" name="save" type="text" value="contact"&gt; PHP // check for form submission - if it doesn't exist then send back to contact form if (!isset($_POST['save']) || $_POST['save'] != 'contact') { if($_POST["contact_message"] == "" || $_POST["contact_fname"] == "") { echo "&lt;script type=\"text/javascript\"&gt;window.alert('Please enter all valid fields'); &lt;/script&gt;"; } else { header('Location: http://www.example.com/'); exit; } }
If tests are to be written just to get people to use it, I'd probably advise new programmers to be cautious here. I wouldn't want someone to spend weeks writing tests for their shiny framework, only to find that people still won't use it! 
Bound params/prepared statements are *not* sanitization. They can prevent a lot of the SQL injection cases, but sanitization is contextual based on the data. Filtering and sanitizing shouldn't be left for the database layer to try to handle, it should happen as close to the user/data model as possible.
Here's the Google Online Security blog post about it: http://googleonlinesecurity.blogspot.com/2014/12/are-you-robot-introducing-no-captcha.html Looks interesting. It'll be nice not having to type in a captcha every time. However, so far on the demo in the OP's post, I've had to type it in each time, so hopefully it gets worked out in the future.
Ah yes, you're right. But in this case, we're talking about the username and password. Should the character sets be limited here? I am of the view that artificially limiting the legal password set tends towards reducing security, since users who try to use complex punctuation sequences are disallowed, and they are forced to use a less complex password. I expect min/max lengths should apply, on a configurable basis - currently this code requires them just to be not empty. 
Yes, author here. I admit it is odd. It is a innovative/different/bad way of doing routing and variable passing.
Author here: I can cofirm that 'bind_param' is called on the arguments in an attempt to prevent SQL injection.
Stop providing a minified version &gt;.&lt;. There is seriously no point... It introduced more problems than it could hope to solve. https://github.com/catfan/Medoo/issues/142
Thanks for this. It's been a while since I had a good cry.
Very, very strange. Little to no performance improvement and with OPCache enabled it is absolutely zero improvement.
&gt;if you let the user set the From: field, you're at risk True ... and also ... allowing the user to set the "From" is increasingly problematic these days anyway. The message can never be sent with correct SPF or DKIM so it has a higher chance of being caught by spam filters. Set the "reply-to" if you want to give the recipient the convenience of just hitting reply.
Can you ELI5? It's just unreadable to me. All I understand is that's supposed to be the route management class and he added so much ifs it makes the code unreadable. I'm not even sure how it's supposed to work. 
&gt; You should check whenever the database is being modified. Well I don't write requests that do multiple unrelated things in the database, so for me, hitting `/user/5/delete` is immediately filtered. Either the person has permission to perform this action, or they don't. If they don't, they don't even make it to the controller, let alone a call to the database. Therefore if they had permission to make it through the filter, then by definition, they have permission to modify the database call that is coupled to the request. I don't need to re-check the same permission. That's what i meant. Though I suppose you're right, if one request can do a variety of different modifications to the DB depending on who you are/what you're allowed to do, then yes, you do need to check that for each modification.
I think the original objection was that would give rise to another kind of DoS - locking up server processes uselessly. However, the author has said they'll now leave flooding protection to the firewall, so yes, this could be another way to do it. 
Damn!! That's huge. The Model part is particulary inspiring.
Author here. From the docs: "Default routing The page files (in the "pages" folder) have an URL on which they can be reached. They may reside in a sub-folder and their filename is constructed like this: "hello(default).phtml". In this example the "name" is set to the value "hello" and the "template" is set to "default". Both the folder path and the "name" segment are part of the URL. Files with the name "index" can be used to serve the directory URL. The "phtml" files can have a corresponding "php" file. The filename is constructed like this: "customers($id).php". This means that when you access the URL "/customers/23", the router will match the "customers" page and PHP variable "$id" is set to "23". If you provide too many arguments the page will automatically reload without the extra params. If you provide not enough parameters, then the missing parameters will be set to NULL." Then the templates can have actions as well. As I said below. It is a different approach to routing. You may hate it if you like.
Haha right? Why even worry about password hashing. There is no excuse to use this framework for any reason. 
Sorry, there are no tabs in this one. Next spin.
Have you ever tried https://github.com/cocur/domain ? What do you think of it?
So how does this work?
I don't hate it. Hell, how can I judge you? I never had the guts to create my own framework from scratch and publish it on GitHub for the world to see and criticize. The great thing about GitHub and enough visibility (and a little touch of constructive criticism) is that you will get important feedback and learn. 
How would I assess the casebase of my own work? It sounds like an interesting metric!
Yes.
how can i let my users print all worksheets in a workbook by just printing "print" if i can only select one worksheet at a time? with getactivesheet() function.
Benjamin Eberlei sent out a draft RFC overnight to make the garbage collector a function pointer (which will allow profilers to instrument it): https://wiki.php.net/rfc/gc_fn_pointer. Hopefully it'll land in PHP 7 (and 5.7, assuming there is one).
* Try the most popular frameworks, use them a lot, learn from them, dig into their source code. * Start small. Contribute into existing projects. Create (framework agnostic) composer packages implementing that small feature that you need and you cannot find anywere else. Share it as maybe somebody share the same needs. * If you want to go with your own framework, don't reinvent the wheel, use existing supported packages, and inject your unique ideas on top of it. * Follow the trends. Go framework-less 
because if you're using two completely different operators for the same task for a speed boost in a langauge like php you're just doing it wrong
I found this after 30 seconds of googling: http://stackoverflow.com/questions/23081669/phpexcel-read-only-specific-sheet So you should be able to do something like this: $workbook = $objReader-&gt;load($yourExcelFile); foreach ($workbook-&gt;getWorksheetIterator() as $worksheet) { //do whatever with each worksheet }
I'm going to gather constructive replies like this and add them to the post =)
And top of the list : * Ask yourself : Does the world needs another PHP framework. 99% chanche that the response is no.
How so? Do we already have a perfect one that fits everyone ?
of course, they will say Laravel :D
It follows the same pattern as Laravel there. Ease of use is the main reason to avoid good practices on this point.
Yeah, as far as passwords I'm a fan of any policies in placing being the *minimum* allowed, giving the user the option of going wild with it if they want (it's just a hash in the end). I think there's definitely a need for some kind of filtering on the usernames though. Keep in mind, too, that an attacker may not always be using the form to login and may be hitting the script directly with a POST. Imagine what might happen if they did so and used non-ascii characters. "Not empty" really isn't even close...additionally that's more validation than sanitization strictly.
Laravel + LaraCasts video series = a good direction to head in.
[Relevant](https://i.imgur.com/Ibq3d.jpg) MD5 for passwords? What sort of junk is this? [http://www.phptherightway.com/](http://www.phptherightway.com/) 
I guess my question is simply: Why? What is the story behind this decision?
I'm not saying it's hard to figure out what is supported, I'm just saying there is an inconsistency between online docs and example code that is linked from the docs. It can cause a little bit of a headache for those who don't understand things as well.
No. At a glance (commits and network) it's not well tested. A quick glance through the code and I can't see any handling for web-based whois (it looks like there's a framework for handling different Connection types, but no actual implementation for anything other than "standard whois servers" yet. A glance at the configuration shows a lot of entries with 'null' as the server. It is possible they're using another source, or doing a pre-query to the IANA servers, but that adds unnecessary additional queries when keeping a direct server list up-to-date is relatively trivial - not to mention it's another server you can get rate limited on - esp. if you're querying it for almost every domain and doing lots of them. For the entries there are whois servers specified for - some of them don't match up with the official IANA listed servers, which is odd. The only reason I can think of to use non-authoritative servers in this manner is to avoid having to write parsers for the widely varying array of differing whois server output there is (For example, I checked .no, since I was working on that today and it requires additional lookups if you want to get nameserver and contact details, since they use handles and don't give full information in a single request).
No unit tests? One giant class without comments? No thanks.
Just sounds to me like a lot of rules to keep in mind when the name of the game for this framework is "simplicity". Codeigniter is Simplicity (sometimes too Simple) hands down in structure and implementation. You can easily read the codebase and get a nice solid idea of how it works internally. I legitimately had to get up and go for a walk after seeing the route() method. That's a whole lotta Globbin' and Regexin' in a loop bro 
Thank you for the feedback!
Yes, but please read how Laravel does "not" pollute the global namespace: http://usman.it/laravel-4-uses-static-not-true/ 
What is even happening with my_view, why is this a thing that exists...
This code is fucking shite. Was it written in 1996?
This reminds me of the tutorials I read 8 years ago when just starting to learn PHP.
Laracasts is great, even for just general PHP and web. Also check out Dayle Rees' primer on namespaces (http://daylerees.com/php-namespaces-explained) and Composer (http://daylerees.com/composer-primer).
Here's how PHP works in a very ELI5 simple form. You write a variable like "sometext" in your .php file in the location where you want the content to appear. When a visitor goes to the page/post that should display something where "sometext" is, the browser sends the PHP request to a database (on a server somewhere) and the server returns the content in HTML.
You don't even have a clue what you're talking about. Laravel uses Facades that enable 'static like' calls to regular class instances. I just open one file of yours to see 100 times the word static in a page. It's not the same thing at all.
Many frameworks use regular expressions to do the routing. This seems very intuitive, but it does not match the work-flow and organization that vanilla PHP programmers are used to. Doing the routing in the way proposed in this framework, you can add a file and both the route as the parameters are defined. If you need a "code-behind" file you just give it the same name with a different (PHP) extension. This simple work-flow is the rationale.
Pwn his boxxen?
Same, I wasn't able to get it to work for me, had to type in a captcha still. 
I'm under and NDA so I can't share it - but I keep a piece of code around in a file named whatheeverlovingfuckisthisshit.php 1,248 lines, nested if statements that when properly formatted wrap twice at 80, with 0 indentation. Refactored it to be 22 lines with one if statement.
I completely agree. Apart from polluting the global namespace in the same way it is not similar. Laravel made a bold move trading good practice for ease of use. Let's say that this move is even bolder. ;-) You do not have to like it, that is fine.
There's a few more things to gauge effort and initial conception on: * Not providing a proper Changelog. Relegating to a commit dump/log doesn't as much indicate a thorough release and versioning process. * Substituting shallow tests/ for in-appplication assertions (or worse, throwing exceptions for development-stage type probing). * A custom domain name is not as denotative as a personal VCS. (Drowning amid hundreds of similar projects and forks on GitHub yields zero points for effort and open-sourcyness.) * Pretending to follow MVC, reinvention of a forms API, or front controllers and dispatching without any indication of content negotiation, etc. While of course the lack of originality is the biggest woe of new frameworks. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Front Controller pattern**](https://en.wikipedia.org/wiki/Front%20Controller%20pattern): [](#sfw) --- &gt; &gt;The __Front Controller Pattern__ is a [software design pattern](https://en.wikipedia.org/wiki/Software_design_pattern) listed in several pattern catalogs. The pattern relates to the design of web applications. It "provides a centralized entry point for handling requests." &gt;Front controllers are often used in web applications to implement workflows. While not strictly required, it is much easier to control navigation across a set of related pages (for instance, multiple pages used in an online purchase) from a front controller than it is to make the individual pages responsible for navigation. &gt;The front controller may be implemented as a Java object, or as a script in a [script language](https://en.wikipedia.org/wiki/Script_language) like PHP, Python or Ruby that is called on every request of a web session. This script, for example an *index.php*, would handle all tasks that are common to the application or the framework, such as session handling, caching, and input filtering. Based on the specific request, it would then instantiate further objects and call methods to handle the particular task(s) required. &gt; --- ^Interesting: [^Software ^design ^pattern](https://en.wikipedia.org/wiki/Software_design_pattern) ^| [^Memory ^controller](https://en.wikipedia.org/wiki/Memory_controller) ^| [^Xbox ^One ^Controller](https://en.wikipedia.org/wiki/Xbox_One_Controller) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cml7laq) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cml7laq)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
the server receives your input then php creates the html and returns it
~~Globals, in 2014? :/~~ I think that this article could be written a little more clearly, without the use of globals, in an effort to promote best practices. Some people may visit the article and not read it fully and just look at the code. This kind of thing genuinely concerns me, because people who are new to PHP and are actively seeking knowledge may find things like this (and there's plenty of *old* content that has this kind of thing in) and think it's how things should be done.
Something like [this](http://stackoverflow.com/questions/11083084/alternative-to-headercontent-type-text-xml)? Basically you'll want to tell the browser to interpret the incoming data as XML with this: header("Content-type: text/xml"); Then it's just a question of echoing the data in the format you want. That's the basics anyway.
Reference counting is predictable - whether or not you consider it a GC algorithm is a philosophical question, often "GC" is used synonymously with "tracing GC".
The object is referenced in two places: Once on the function argument stack and once in the CV table (= the "obj" variable, effectively). In PHP 7 the argument stack and parts of the CV table will be shared, in which case it would only have refcount 1. But in PHP 5.x they are always separate, so you get a refcount 2 here.
Codeigntier was a great framework to get my feet wet in the field of "stop writing everything from bare metal", and then I got violently forced on top of Symfony for a full year on a project, and I instantly fell in love. I honestly can't stop using this thing. Ain't nothing wrong with laravel though, it uses a lot of Symfony components ;) http://symfony.com/projects/laravel
Thank you for your insight, should i just not sure which framework to go for mostly larvel seems as a good start cause of laracast rly and all the information there is since i don't have that much knowledge of the new technologies. 
fullcalendar.js is pretty OK, I've seen it in some large projects
I'll have a look into that later. Can't right now. I don't think that is the problem though because it's being interpreted as a header it's just not getting any of the data from my database. When I'm able to I'll post the code I've got so far to give you more of an idea to what I'm trying to do.
Wow.. 3 frameworks.. you are way more experienced than I am, kudos to you! I like that approach as well and it seems to have a much clearer and simpeler implementation (although I need to look into it deeper). I'm going to read your code and see what I can learn. Right now I do not want to abandon the idea (I like the different code structure), but I'm pretty sure that the implementation can be improved dramatically. Regards, Maurits
Using `mysql_*` functions? Immediately invalidated.
All you guys input is really much appreciated. Nobody ever cared about this project (or uses it, AFAIK). Also nobody ever did a PR. I would love to see one with whatever content. :-) Big thank you to all of you..
lol I didn't say that to sound facetious about it, alls I was saying was that in my experience writing these things, if your going to implement some kind of naming convention for the filesystem, may as well make it as direct as possible, to remove the need for expensive operations on a whole
There is no perfect framework. But there might be multiple frameworks fitting for one particular use case.
For more info on how exactly it works you can check reddit [source code](https://github.com/reddit/reddit)
I was under the impression mysqli is technically acceptable for now. Am I wrong?
Nope, they are probably using a framework that generates the information from a database based on the query on your URL, notice how thats unique. and there's most likely another table on the database that shows all the comments and user ids linked to the thread ID.
Well, kind of. PHP (and every other language typically found on the web) mostly store dynamically created data in databases. As soon as you request a page, the application collects the required data from the database and displays it on dedicated places inside the pre prepared HTML (i.e. template). But you nonetheless are kinda right. The logic behind understanding what you requested (i.e. parsing the URL), fetching the data from the database and rendering the final HTML takes a lot of time. In order to deliver the content as fast as possible to you - thus enhancing the user experience - and also keeping the impact (load) on the server as low as possible, "images" of such generated HTML pages are stored somewhere for later uses. This cache can be a file on the same server, but more often something like a reverse proxy is used, a server that stands between your browser and the server that renders the HTML. As soon as something gets requested that it already has seen, it steps in and delivers right out of its cache.
meh, if people want to take it seriously they will no matter what. I've stopped caring.
myslqi is. mysql_ isn't.
 &lt;?php header ("Content-Type:text/xml");//Tell browser to expect xml include ("init.php"); $query = "SELECT * FROM ourcustomers"; $result = mysqli_query($mysqli_conn, $query) or die ("Error in query: $query. ".mysql_error()); //Top of xml file $_xml = '&lt;?xml version="1.0"?&gt;'; $_xml .="&lt;ourcustomers&gt;"; while($row = mysqli_fetch_array($result)) { $_xml .="&lt;customer&gt;"; $_xml .="&lt;id&gt;".$row['id']."&lt;/id&gt;"; $_xml .="&lt;customer_name&gt;".$row['customer']."&lt;/customer_name&gt;"; $_xml .="&lt;work_done&gt;".$row['work_done']."&lt;/work_done&gt;"; $_xml .="&lt;/customer&gt;"; } $_xml .="&lt;/ourcustomers&gt;"; //Parse and create an xml object using the string $xmlobj=new SimpleXMLElement($_xml); //And output print $xmlobj-&gt;asXML(); //or we could write to a file $xmlobj-&gt;asXML(ourcustomers.xml); ?&gt; That's what I got so far, but when I try and view the page I just get &gt; This XML file does not appear to have any style information associated with it. The document tree is shown below.
&gt;sounds to me like a lot of rules It is an attempt at "convention over configuration". Reading your reaction I think I failed at it ;-)
God damn this is a childish community sometimes. It's easy for people to make petty comments from the sidelines, it's not so easy to put yourself out there in the way you have done with this project. Respect, keep at it.
That attitude is a little backwards.. One should write tests because tested code can be more easily relied upon and has behaviour which is more resilient to refactoring... Even if OP is the only person using the thing it should be thoroughly tested. You don't thoroughly test to get internet points on reddit. A lack of tests suggests a few things. A lack of programmer maturity, a lack of care and a framework that will be difficult to contribute to and modify to name a few...so as potential consumers of this work people are right to expect it to be tested.
how do u quantify lightness
I was partly playing devil's advocate, since Reddit can't have it both ways `:)`. On the one hand, whatever new framework is presented gets a roasting and the collective opinion that &lt;thingX&gt; should be thrown away into the fiery pits of Hades, and on the other hand people are saying "ah, it needs a solid test suite". But yep, tests are good - we agree on that! (Post Script: to be fair, the roasting here is somewhat delayed. Maybe tomorrow).
When you compare generators to transducers, you say that generators are deeply nested. Wouldn't that be solved by just using a "composition" function, like your `t\comp()`? I don't understand how transducers are completely ignorant of the input and output. For example I can only `map` a callback on something that is iterable right? For example: `cat()` &gt; Transducer that concatenates items from nested lists. Input needs to be a list right? Also, it's a bit off-topic but when would you use such way of writing code? I'm honestly curious at all these FP topics but all examples I ever see are so abstract I fail to see use cases.
&gt; In that they generate a new page on user request. Is that how they do this? They literally create a new .php file on the server in a folder called posts or something that is then linked to people? Nah, the URL lies. What actually happens usually is that all requests are redirected to a single file, say `index.php`, behind the scenes. That file then looks at the URL to figure out what page to show. It might do something like this: &lt;?php $url = $_SERVER['PATH_INFO']; $pieces = explode('/', $url); // break URL into pieces if (count($pieces) === 0) { // URL is just /, show reddit homepage } else if ($pieces[0] === "r") { // it's something in a subreddit $subreddit = $pieces[1]; // are there any more pieces? if (count($pieces) &gt; 2) { // it's /r/$subreddit/... - // handle this } else { // it's just /r/$subreddit/ // show the subreddit homepage } } else { // something else }
You can't simply show XML in a browser. You have to manipulate it with PHP or XSLT and output HTML with it. Or you can make the page download the XML file. If your goal is to show the data from your database, you don't need the XML part. You can simply use PHP. If the idea is to be able to show the data and let's say have a button to download it in XML, that's another story. header('Content-disposition: attachment; filename="ourcustomers.xml"'); header('Content-type: "text/xml"; charset="utf8"'); readfile('ourcustomers.xml');
&gt;average cpu load on the application servers is around 16%, while it was easily above 50% in the pre-HHVM era. Amazing! That's some serious digits.
In essence this is functional, polymorphic programming. I'm glad people are trying to educate PHP developers in these principles because they are quite useful (in probably any language). However, I do not see any advantage to using "transducers" over the simple functional algorithms such as map, reduce, and filter which are straightforward. As an example: // Transducers $result = t\transduce( t\flatten() t\operator_reducer('+'), [[1, 2], [[3], 4]] ); // Simple functional programming $result = sum(flatten([[1, 2], [[3], 4]])); // or $tmp = flatten([[1, 2], [[3], 4]]); $result = sum($tmp); // or even $tmp = flatten([[1, 2], [[3], 4]]); $result = reduce($tmp, $initial = 0, function($carry, $value) { return $carry + $value; })); I would never choose the "Transducer" route. Of course, we don't have polymorphic algorithms such as reduce, map and filter available in PHP core but they are provided in many other libraries (I have two such libraries myself). tl;dr Good article that promotes functional programming but I'd rather stick with the basic concepts it builds on for clarity when writing code.
 &gt; This example uses Doctrine Cache as a global variable, but this should definitely be refactored (or change to another system). It is simply to show that $cache is a Doctrine Cache, of course you want a DIC or something like that, but that would triple the length of the example.
There are also some massive drops in [average latency of PHP requests](https://gdash.wikimedia.org/dashboards/totalphp/) and [average time of edit-related methods](https://gdash.wikimedia.org/dashboards/editpage/).
Great questions! &gt; When you compare generators to transducers, you say that generators are deeply nested. Wouldn't that be solved by just using a "composition" function, like your t\comp()? Yes you could (though you'd need to modify comp() to reverse the provided arguments to maintain the same semantics). However, this still ties the transformation to the input and output types (e.g., iterators). This means you couldn't, for example, use these transformations unless you begin to consume something as a iterator-- sometimes this is not the desired API. &gt; I don't understand how transducers are completely ignorant of the input and output. For example I can only map a callback on something that is iterable right? If take you look at the implementation of map(), you can see that it just wraps a reducing step function: https://github.com/mtdowling/transducers.php/blob/master/src/transducers.php#L198. A reducing step function takes two values (previous and current) and returns a single new value. The step function is responsible for building up a result. That might be creating an array, writing to a stream, or to a buffer utilized by a generator. Because step functions are composed, wrapping transducers can choose whether or not and how many times to invoke the wrapped step function. The step function allows the transducer to decouple from the output source. Decoupling from the input source is done using a custom function. The library comes with a number of built-in methods to accomplish this. Most use a reduce function that iterates over a sequence: https://github.com/mtdowling/transducers.php/blob/master/src/transducers.php#L177. Here's a generator that applies transducers: https://github.com/mtdowling/transducers.php/blob/master/src/transducers.php#L26. And finally, here's a transducer stream filter: https://github.com/mtdowling/transducers.php/blob/master/src/transducers.php#L1119. Another example might be applying transducers to something like an event emitter where a listener function is wrapped by a transducer function. The transducer function might choose to never invoke the actual emitter (filtering) and could choose to modify the event before it's handed off to the listener (mapping). &gt; For example: cat() &gt;&gt; Transducer that concatenates items from nested lists. &gt; Input needs to be a list right? cat() is interesting because it is somewhat greedy. cat() iterates over single values that are funneled through it and invokes the wrapped step function multiple times for traversable data structures (fanning out a single piece of data into multiple pieces). Other transducers that actually need context of previous values have state inside of them. For example, partition() needs to know how many items are buffered so it can know when to call the underlying step function with the partitioned data: https://github.com/mtdowling/transducers.php/blob/master/src/transducers.php#L318
There are a lot of vulnerability, but to answer to your question. &lt;?php $link = mysqli_connect("localhost", "user", "password", "database"); if (mysqli_connect_errno()) { printf("Connect failed: %s\n", mysqli_connect_error()); exit(); } if (isset($_POST['email'])&amp;&amp;isset($_POST['password'])) { $email = $_POST['email']; $password = $_POST['password']; $password_hash = md5($password); if (!empty($email)&amp;&amp;!empty($password)) { $query = "SELECT 'userID' FROM registeredusers WHERE email='$email' AND password='$password_hash'"; if ($query_run = mysqli_query($link, $query)) { $query_run_rows = mysqli_num_rows($query_run); if ($query_run_rows==0) { echo 'Invalid email or password.'; } else { echo 'OK.'; } } } else { echo 'Please enter email and password'; } } ?&gt; 
No we don't... but we do have an awful lot of clones that stomp over the same ground as each other and offer very little in the way of objectively unique features. If a framework came along that truly did address a niche and solved a problem that was not yet solved that'd be fine... but most of these frameworks springing up are riffing on the same basic theme. Of those, barely a handful are actually worth the time to delve into.. The question always is "wouldn't it be more productive if these people worked together by contributing to existing work". I'm not against people creating their own things mind you. I think it's great. Writing a framework is a superb way of learning patterns and practices. But everyone's learnings do not necessarily need to be chucked up on packagist and spammed on message boards. If you *are* doing something unique that solves a problem overtime others will use it. But chances are you are not.
Agreed: using transducers in this manner without building up a composed transformation pipeline is not very appealing. Clojure handles this by having functions like map() and filter() accept multiple arities. When you call map with just a function it returns a transducer, and when you call it with two arguments it returns a lazy sequence of the mapped data. Maybe this is something that should be added to the library.
&gt; There are a lot of vulnerability, but to answer to your question. I'll second this, if you are just walking through a tutorial to learn that is fine but don't put this on a public web server.
mysqli is still valid but PDO should be used. There's not too many reasons to use mysql/i over PDO.
Whats the main problem with it? It's mainly just to understand it as I'll eventually be using a framework but would be good to know the downside of this. I know mp5hash isn't good but is there anything else?
I'm saying yes. Why should a framework dictate how my application is written, now or in the future? Which is why we're trending around the skirts of microframeworks and framework-less approaches - because you don't want to be locked in. You especially do not want to be locked into a particular frameworks dispatch method. The framework should provide sufficient inversion of control so that you are piecing it together at the beginning rather than tearing it apart later. Not only that, but we're also in a sort of transition where there is still a lot of php 5.3 supported code. Traits and other php 5.5 (or 5.4) goodies actually provide better forms of abstraction.
Or justify...
Also take a look at what some people in the JavaScript community are doing with transducers: https://github.com/transduce
Or similar stuff for other web servers, yes.
Regarding C, you can use http://stopforumspam.com's API to screen for toxic IP addresses on the form request and conditionally throw up the CAPTCHA. In my experience, stopforumspam.com's API is quite decent. You usually have to be running your traffic through a proxy that spammers or other offensive users use, or your IP itself is toxic. It should allow *most* users to be able to submit the form without seeing the CAPTCHA, while showing the CAPTCHA to *most* bots.
Yes
Shame on anyone using general purpose digest algos to encrypt sensitive data like this. Also, it's called key stretching, scrub, use it. Also, let's not be so hard on the guy, here. At the very least he had an idea in his head, was steadfast, and took new evidence into light and changed his opinion. I've done the same many thousands of times and so have all of you.
&gt; then there's no extra DoS risk I wouldn't really say this--it all depends on how sophisticated the attack is, really. I'm not saying that you're wrong, but in the end, it's what I like to call the "Titanic claim"--"God himself could not sink this ship! 10 hours later, the ship sinks."
Well, God and the icebergs would surely agree that a box under DoS load will perform better when it is not also performing slow hashing. `:)`
Well, usually nested `if`s like these aren't what will actually be used, you'd probably use a router that does some sort of pattern-matching. Though there's nothing really wrong with this approach.
True, but with key stretching, you don't have to do anything crazy. For example, with `bcrypt()` an insane work factor isn't necessary to have pretty decent results. (estimated) |Work|Time (Seconds)| |:--:|:--:| |4|0.0013326406478882| |5|0.0024385929107666| |6|0.0046159029006958| |7|0.0089994072914124| |8|0.018425142765045| |9|0.035568559169769| |10|0.070761203765869| |11|0.14275025129318| |12|0.28672399520874| |13|0.56773639917374| |14|1.1397068500519| |15|2.2705371022224| |16|4.5342264413834| |17|9.0786491513252| |18|18.10820235014| |19|36.225910997391| |20|72.565172195435| For example, an AWF of 13 would add just over `0.5` seconds to the hash time. In reality, no one is going to notice that extra half second, or if they do, they're not going to go crazy because they understand that the extra half second is going towards security. But when an attacker is calculating these hashes, if they have to make 500,000 attempts to be successful (crazy low estimation) that's an extra 69.44 hours of calculation to be successful. It's definitely worth it.
Omg, I got a username mention! My first! Wow, I feel genuinely helpful now. :D
* The $email variable represents an SQL injection vulnerability. This is the most significant. And I disagree with the above posts. If you are "just walking through a tutorial" then it's not fine. Whoever wrote that tutorial should pull it offline if they write code like that. * MD5 isn't just "not good". MD5 in general is dead and shouldn't be used anywhere. I wish PHP would start logging deprecation errors any time the function is called. Single pass hashes overall don't represent secure password storage and it's irresponsible to store user credentials this way. * Strict comparison (===) should be everywhere.
Thank you. I sure will..
Got to give the guy something to start Googling from :)
thx, /u/dadkab0ns responsed to my question 
Good stuff!
That's all true, but does not relate to the point I was making. I'm saying that after X unsuccessful attempts, the login system could **always return unsuccessful**. It is thus not doing any slow hashing because it is not even doing any checking. Prior to that, yes we are agreed - slow hashing. 
Don't forget everyone's favourite new best practice: Use `gc_disable();` in all your code for maximum performance. /troll
Liability.
When you say you need performance, do you mean you want fast loading time with reasonable volume, or very high volume? To give some data, a 300$/month server (24 core / 64GB) I'm using gives me the following: - single PHP file: 0.005s (200 req/s per thread) - laravel stock: 0.060s (17 req/s per thread) This means 12 thread nginx will serve at best 2400r/s, and we're able to get 200 out of a regular framework. If you add 50ms of actual stuff happening beside handling the request, you have 0.055s vs 0.110s, or 218 r/s vs 109. That's only double the performance, at the cost of using a lesser known / proven, harder to debug framework. And keep in mind that as soon as you need something that Phalcon doesn't do, you're gonna have to use regular libs that are going to add a lot of overhead and make the gain even slimmer. Also note that the &lt;50ms difference in page generation won't be perceivable for the end user, so it won't do anything in terms of UX. I think if you need really high output (1000's requests per second), you really can't stick with PHP. node.js will probably give you a 5-10x performance boost out of the box, and more like 50x once you get good at optimizing it. I know it's another language, but if you're not comfortable with that you probably shouldn't be using Phalcon either. For your regular web app, Phalcon doesn't do much as most of your time will be spent doing things outside of the framework scope (DB / computation / connectivity / etc)
I do not think this tutorial was ever a good example, so it isn't even a case of being outdated even though it is also outdated on top of being bad. At the very least it should be using [mysqli_real_escape_string()](http://php.net/manual/en/mysqli.real-escape-string.php) on the email address and probably the password too although I have never heard of a SQL injection that could make it through being hashed. Even if it implemented [mysqli_real_escape_string()](http://php.net/manual/en/mysqli.real-escape-string.php) it would be outdated since the current best practice is to use [prepared statements](http://php.net/manual/en/mysqli.prepare.php). Cryptographers have been recommending people not use md5 since the mid 90's at the very least you would use sha256 with a row salt or the built in php [password_hash()](http://php.net/manual/en/function.password-hash.php) function. On top of the above I also find it a good idea to run [strip_tags()](http://php.net/strip_tags) and [html_entity_decode()](http://php.net/html_entity_decode) on my data prior to storing it in the database.
in your first example of login code you never set a session variable on success: if ($row = mysqli_fetch_assoc($query_run)) { echo 'OK.'; $_SESSION['userID'] = $row['userID']; } else { echo 'Invalid email or password.'; } 
[Github](https://github.com/) has many examples of successful open source applications which, upon examination, will demonstrate coding practices. If you've already learned to read code, why not jump in?
*Brief Overview Of A Few Best Practices for Modern PHP Development* is a more accurate title I think.
Doing away with the word files and going full Wiki isn't an option? 
Take a look at mine: https://github.com/ellisgl/GeekLab-XPDO
Cool. I'll have to check that out. Thanks!
It runs even faster if you compile PHP with -funroll-loops!
The problem is you may not necessarily learn GOOD practices. Here's the results of a few minutes hunting: https://github.com/vdubr/Mapito_cuzk/blob/10288f9ec7f310def5973fa747e2a46328ade63b/lib/trFile/trFile.php https://github.com/aaqibbashir/Time-Tracker/blob/838fc44e2a5a9b7c5f9c5b8a1dd8255351e04267/delete%20task Edit: /u/haywoodyoudome.. good learning is to ask "what's terrible about those links" 
Any specific reason for it? I am using it for so long. I found its simple and flexible. 
Wooooooooo! And download. Sounds like our junior devs just got more productive!
I think this is the most sensible approach I read in this thread that would actually counter my concern. Thank you.
Myself, I would make git ignore the config file and only store an example in the repo.
Kudos for the initiative :thumbsup: What about: 1) Put some kind of sticky post at the top of the subreddit, with rules, links to important stuff (like PHP The Right Way, some post like yours, etc.)? The sidebar is just out of sight IMO, seems nobody reads it. 1) Put that list on a Github/Jekkyl stuff so we can make PR, à-la PHP the right way? Or even PR PHP The Right Way to add a Framework checklist / Framework advice or whataver? Or maybe we could create a "PHP Subreddit The Right Way" page with important links, FAQ, framework Checklist, etc.? Edit: about 1), or some kind of "info" box at the top like on CSS: http://www.reddit.com/r/css (:D)
Super nit-pick! Also...blanket dismissal of all situations in which globals could be a good choice. Just don't use any global, for any reasons, ever. Also avoid `goto`, the `static` keyword, the Singleton pattern and using `$_GET`, `$_POST`, `$_SESSION` or `$_SERVER`. Except if you use a framework. But don't use frameworks. The purpose of these arguments is to discourage reason in lieu of dogma. 
You're welcome. If you can, make it configurable (on by default but it can be turned off, and the number of rounds before it disables the account or requires email activation). That way people can determine the security preferences that are appropriate for their project. 
It's unlikely reddit uses .htaccess because .htaccess is apache specific and reddit uses nginx. It's recommended not to use .htaccess unless you have no other choice (i.e. you're on shared hosting and with no access to your virtualhost).
Which in the context of someone who is likely to ask a question like OP did he is *probably* on shared hosting with no idea what a virtualhost is.
PHP is often a scripting dialect the majority of employed mostly pertaining to planning organization internet websites as well as appealing web pages. Staying the most necessary for the actual improvement program available supply technology, PHP would be the latest technology to boost world wide web software as well as e-commerce organizations pertaining to different e-commerce organizations. Substantially less than getting a professional PHP creator is caused by the abilities of lucrative costs as well as authorities in which suit as well as satisfy their particular task of organization web site.
I can't help but feel like this is a plug for your framework
Silex is pretty good
And to think that PHP is a template language to begin with. Code INSIDE HTML. And then people do this...
Or use a password manager.
Won't do anything for a username with javascript in it that then gets run by the browser if you have say a "other people logged in right now" feature on your site. Sanitization is a lot more than just guarding against SQL injection.
Possibly, but if he's interested in learning and $5 p/m do server would serve him better.
I may be fighting a losing battle here on Reddit, but if you could treat the author with respect, that would be excellent. I think the takeaway point from this thread is that the community was very keen on a particular form of password hashing, and the author has listened and changed his mind. That deserves some credit. 
[htaccess to nginx online converter](http://winginx.com/en/htaccess)
Since no one has mentioned it, this is the reddit github page https://github.com/reddit/reddit with the (almost) complete source code for the site. 
Expecto Patronum!
 $query = $conn-&gt;prepare('SELECT * FROM bar'); $query-&gt;execute(); foreach($query AS $row) { echo "&lt;pre&gt;"; var_dump($row); echo "&lt;/pre&gt;"; } ?
I read through the source code and agree with the batch insert statement.
I am wondering if the developers of PHP will simply integrate HHVM into PHP7.
For future reference, this should be posted in /r/phphelp, as per the sidebar.
No, they won't. They're integrating [this](https://wiki.php.net/phpng) to provide large speedups instead.
Just wanted to drop you some kudos for responding to criticism constructively here rather than getting upset. Best way to learn. :-)
thanks, will remind myself of that ;)
will try that, thanks
 $password_hash = md5($password); There's your first problem. Look at the PHP password API in 5.5, or use password_compat if you're not using PHP 5.5.
Are those files for educational purpose ? The amount of errors per characters is incredible.
Fuck you very much Jetbrains, will never buy it because of this.
But VIM is free :( 
That would be nearly impossible. They could integrate certain optimizations and implementations, but HHVM is incredibly different now.
And it's already in master!
While I get what you're saying and don't entirely disagree, it's clearly a deal trying to solve the sunk cost fallacy. "I want to try phpStorm, but I already bought *platform x* and don't want to waste the money." If I didn't already own IDEA I'd jump on this.
It's a class so the code can be OOP, duh! /s
On a serious note I use Keepassx to store my passwords. Saved passwords in Firefox are protected with a master password. *No password manager can protect against bad design, and not even good design can protect against post-it notes.*
Not slow at all. The start takes some seconds (5-10), but after that it runs fine. You could just try the demo version to see if it got better. But remember, that big projects take some seconds to get indexed. But thats a one-time wait. In comparison to Sublime: I'd never again want to work without the ctrl+click (jump to definition) functionality :D And thats just a really small thing.
and https://github.com/search?p=3&amp;q=extension:php+mysql_query+$_GET&amp;ref=searchresults&amp;type=Code
I have both and love both. Seriously keep both. I like PHP Storm to travel through the classes, but nothing can beat Sublime in speed.
Also it makes some pretty amusing fake data. Like Sir Reginald Howard VII would ever use my stupid photo sharing app.
I tried to use this for the last project I was working on. About half way through it just became way to much of a pain to try to work around it.
Seems to work without issues. Sweet. 
You never know. That's the magic of internet.
Scary :-\ Also see http://news.php.net/php.internals/79446
The months of lost productivity to learn and get used to its ins-and-outs is not...that's always been my problem with VIM.
I've been using PHPStorm for about a year now and I haven't found it slow at all. Granted, it's a bit slower than Sublime, but *everything* is slower than Sublime so I can't reasonably use that as a comparison. At the very least it's an order of magnitude faster than Netbeans.
My time and energy is not.
&gt; vim is free if your time is worthless
PHPStorm is worth every cent, even at full price! I don't know why people are crapping all over Jetbrains for this promotion. it's not like you have to stop using your other IDE if you make use of this license. Seriously, if you like your other tool you can still use it... but you get the benefit of also having another REALLY great tool to use, at a lower price.
if you are a student you can get it free https://www.jetbrains.com/student/ 
Symfony2 might be a bit heavy going at this stage. I'd take others advice here with learning Laravel to a decent level to get to grips with basic MVC patterns etc. Further down the line, Symfony is a really important one to know. 
I think it's people, like me, who are using free IDEs but wouldn't mind using PHPStorm (at a reduced price) - as new customers we get nothing. I guess I'll stay with Aptana which has a myriad of problems, but for free - "the devil you know".
Yes, I'm aware of the functional difference between the two. Given the array of plugins available for Sublime, I can achieve 90% of the functionality in PhpStorm while still retaining the significant speed advantage. It's no fun developing when you feel like you're constantly wrestling with your tools.
Wow, that's scary. Who knows what kind of evil bugs lurk in code that hasn't seen a maintainer in seven years... What are the other options for the cryptography that mcrypt provides? I know there's the awesomeness of libsodium, but they use a different set of algorithms. 
^* As long as you're not _also_ using it to make money
Just download the 30-day free trial, then. Costs you nothing, you get to try out the product, if you don't like it you just walk away. Seriously, Aptana? :(
As it happens, my migration path was from *mumblemumble* to Aptana to PHPStorm to IDEA Best move I've made. Sublime is okay for quick text edits, but working with a large project, IDEA more than paid for itself in productivity. 
If I have to edit server config files, I use vim. And it does the job. I know my way around it decently, know a couple dozen hotkeys, and am at the point where it's no longer in the way while I do stuff. But coding on it? As a primary ide? I shudder at the thought.
PHP Storm stores settings in (on windows) C:/Users/&lt;username&gt;/.WebIde&lt;version#&gt; (.WebIde80 for version 8.0) Delete that folder and it will reset the 30 day trial counter. Obviously you shouldn't do this to avoid buying a license but if you legitimately installed it and then never used it I would totally do that.
It is not bad practice, buy many of the times it is not necessary: - If you don't actually edit them, just get Composer to download them. - If you do edit them, it would be better to fork/clone it into its own repo and pull that in (with composer or git submodules). This way you can more easily pull in changes from the original and keep track of your own changes. I do have to say that I like to build a seperate git for my vendor folder and have that as a submodule. Getting an older project to work while some dependencies have fucked up their semver stuff in the mean while is a pain in the ass.
Thanks for sharing.Useful.
I sent that email to internals :) For the time being, openssl works.
His first problem is giving his entire database away with the SQL injection, his second problem is not having a strong enough hash to protect the password from being cracked after the database was acquired.
Because those vendors have their own source control. The "why" is because it is redundant to do so. It also might create some confusion your dependencies. Are you REALLY dependent on some-vendor/some-package 4.2.0 or are you dependent on the the version you committed to your VCS ( you know - the only that your co-worker added that bug fix for to the vendor folder? ) ? Look at it the other way and convince me why I should commit the linux kernel sources to my web site? I mean my web page needs a linux box to run? 
I do have quite a bit understand of MVC since i have used the Yii framework for quite a while now, but i know what you mean larvel seems to be my next steping stone. Thank you.
I'm not sure if I agree with always running the latest released version of PHP vs. the latest in your distro's package system. I personally like knowing the distro package has been tested and used by many others to properly play along with the rest of the OS, as well as offer easy security updates. I think I'd only upgrade if there was a feature I absolutely needed.
That's interesting and it's great to see people move the tools of language expression forward. * Why does keep() and keep_indexed() test against null instead of false? keep() and remove() seem to do the same, but one tests against null, the other against truthy * Why did you choose not to use strict comparison in filter(), remove(), take_while()?
Isn't it a better solution, instead of letting processes sleep (and clients wait), mark the cache entry as being rebuilt by the first process that requests it after expiration, and serve the stale entry to all others that request it between the dirty-marking and the regeneration? The actual TTL would then be TTL + regeneration time, but I don't think anyone would mind under normal circumstances.
The key to dealing with that problem is to use it like you would Outlook and just leave it up constantly throughout the day. PHPStorm is one of the fastest IDEs I've used beating out PDT for Eclipse, Aptana, Netbeans, and Zend Studio. Almost all of the delay time is on initially opening the IDE and indexing a project, once it's open it's very fast at opening files. It's still probably a bit slower than Sublime, but Sublime is written in mostly in C++, PHPStorm is written mostly in Java so there is no way it can compete just because C++ doesn't have any of the overhead of the JVM.
Doctrine is one of my favourite PHP OSS projects. It's very well crafted by some truly talented people. Even if you don't use the ORM or ODM parts of it, just using DBAL is a great advantage. Good job Doctrine! 
I don't know if this will give you everything you want but I have found https://www.codacy.com to perform something similar and looks good too. 
What if your production environment doesn't allow your servers to go out onto Composer (reasonable given it's security problems)?
Yes, was going to comment to say exactly the same. I'm rebuilding a server now, going from 5.3 to 5.5. It's what latest Ubuntu LTS offers and I'm happy with it. 
Can someone comment as to whether the "No database access in unit tests" rule is worthwhile? I've written a whole bunch of database-based unit tests for my own project in the past few weeks, and I think they test things very well - and the whole suite takes perhaps 10 seconds to complete. Even if it took a minute or two to run, would the feedback loop be so slow as to be unusable? What problem is being avoided by not testing things in a (test) database? 
That's too bad, as that's a slightly cumbersome workflow. You have to clone from the base fork, composer install, delete the git repo so it's no longer pointing to the base fork, git init and point to the final project repo. Not the worst, but not the best either :/
Does anyone have any views on PHPStorm's general performance on Ubuntu? I work in a Ubuntu 12.x VM and NetBeans is not always kind to the CPU, and thus my battery charge doesn't last as long as it ought. But, NB does Git integration fine, code introspection is great, and I really like the project grouping feature. I might create a new Ubuntu 14.04 LTS VM and try out the demo. I keep hearing great things about PHPStorm, but haven't yet been willing to tear myself away from NB.... 
Unless I missed something - tired today - I didn't see any explanation on how this actually works. Anyone? EDIT: Silly me, I found it: https://www.google.com/recaptcha/intro/index.html#the-recaptcha-advantage EDIT 2: Actually that link explains nothing really. Anyone have more information on what's going on behind the scenes?
That's what I plan on doing, but the OAuth implementation in the Google library is pretty big. Any suggestions on a simple/small OAuth library?
Seems like a "license proof" would not only be pretty easy to fake, it would be completely unverifiable.
You could submit your github project to packagist.
Eh. Extra build steps in exchange for what? Some vendor/ path commits nobody will ever look at? I don't see the point.
Excellent resource, THANK YOU!
You get Silex and Twig (and of course the Google API Client) installed if you `composer install` gplus-quickstart-php. Just look at the `index.php` code, how it is actually done and use it with your preferred framework - only requiring the Google API Client. Note that by requiring the google API Client you import the service definitions for pretty much _all_ of Google's services, so if you are only interested in OAuth, have a look [at the `OAuth2.php` class](https://github.com/google/google-api-php-client/blob/master/src/Google/Auth/OAuth2.php) or use something like [lightopenid](https://gitorious.org/lightopenid).
Looks pretty neat! I like that the url generator is available in the templates. One suggestion might be to move the route map function to the Application class so that the client code is a little cleaner and doesn't have to use the set `routes` function to enclose the rest of the routes.
Noob report! Vim rulez
In my experience, in big company, devs VMs are delivered remotely and unfortunately u cannot use and IDE with sshfs/dokan etc. on Win, its insane.
You asked for a solution. You shouldn't be deploying software to production via git clone/git checkout anyway... so it's hardly an extra step. 
No they aren't, that's real people's code. The Raspberry Pi in particular has, for some reason, a significant PHP community of people developing applications where exec, sudo and $_GET tend to end up in one line. Meanwhile, silly SQL injection issues - just have a look at how many people post here for code help and include errors like that. If anything, it's the normal.
Take a look at this thread http://www.reddit.com/r/PHP/comments/2o9wzc/since_we_had_some_new_frameworks_introduced/ See how it applies to you )
&gt; as new customers we get nothing That's a lie, they have discounts for new customers as well. I know because that's how I purchased phpStorm. 
Im going to take a look further, but man, does it ever look like Silex when in use // Silex $app = new Silex\Application(); $app-&gt;get('/', function () use ($app) { return 'Hello World'; } $app-&gt;run(); // Nice $app = new Application(); $app-&gt;set('routes', function (RouteCollector $r) { $r-&gt;map('/', 'home', function (Request $request) { return new Response('Hello, world'); }); }); $app-&gt;run(); Never really considered Silex as any kind of beast though, as a microframework itself it's quite light on resources and dependencies Either way, I applaud new frameworks, and congraultions by the way being coming close to the 1.0 tag, I will Star this and try it out when you got that tag in :)
Oh boy. 
As much as I love Sublime Text, this really is a fantastic deal. It is now cheaper than a non-discounted Sublime Text license. I do most of my general work in Sublime Text, but when I'm working on very large and complex projects I like to hop over to PHP Storm. No reason not to love both. :)
Yep, Nice is very much Silex-inspired. I really dislike Pimple as a dependency injection container, however. Small apps often grow and trying to manage any decently sized project with a Pimple container is just awful. Some say using the Symfony2 DependencyInjection component makes Nice inherently *macro*. It's a tough point to argue, I must admit, but I think the benefit of using it (CompilerPasses, compiled to file, expressive configuration creation and validation) outweigh the cons of verbosity.
IDEA? I was under the impression that was more for Java/non-web languages. Does it work well with the common web stacks too?
This is important to point out. I am a student and am working on a startup idea in my free time, decided to go out and buy a legit license for this very reason.
I'm not trying to spread lies. I just went to the site and downloaded the trial - and it showed that I needed to pay $199 for a license. For me, someone who lingers between hobbyist and professional, it's too much. However, I am using the free trial and I'm practically sold on the features - but I can't justify $199 for the extra features. MAYBE $99 and even then I would have to consider. With that being said - if you are on the fence and can reason that sort of money definitely check out the free trial. It's a great piece of software. EDIT: typos..
Yo mama's library is so old, it's hosted on Sourceforge!
There's a plugin for that in ST. My view is, ST takes a TON more setup/configuration, but can generally replicate most IDE functionality. The exception being a lot of the code smell/refactoring options provided by heavier IDE's like PHPStorm. 
All of the other languages are available as free plugins. It's like the pro package.
&gt; Why does keep() and keep_indexed() test against null instead of false? These are direct ports of the Clojure equivalent functions (e.g., https://clojuredocs.org/clojure.core/keep-indexed). &gt; keep() and remove() seem to do the same, but one tests against null, the other against truthy They're different actually. remove() is kinda like the opposite of filter() (the compliment) whereas keep() is like filter but can also change the value (see: https://clojuredocs.org/clojure.core/keep). &gt; Why did you choose not to use strict comparison in filter(), remove(), take_while()? It's just a test for truthiness that emulates what clojure does (i.e., https://github.com/clojure/clojure/blob/clojure-1.6.0/src/clj/clojure/core.clj#L2588).
You need to work on the documentation. You mention a few times that you use Symfony's DI component but I didn't see any examples anywhere. In the docs it mentions you can pass a name as a parameter to the RouteController, but you don't say what that's for (i.e. at what point do you ever refer to that name again).
6\. Don't cover your content with crappy social media buttons.
*whoosh*
I've taught some beginner's PHP classes in person, and making the jump from "form script" to "full app" turns out to be much more of a leap than seasoned programmers tend to recall (myself included). I thus wrote a full application development tutorial for them and put it on the web - see my post history if that's of interest. I should say that I am always on the lookout for good end-to-end material for PHP, so I can give my tutorial readers other links to follow up. Sad to say, there isn't much out there. PHPBridge is pretty good, but last I checked it had XSS vulns and a few other issues needing improvement. 
Why does there need to be one that fits everyone? The point is that there are so many frameworks already that there is almost certainly one that fits your circumstance.
Sorry?
You need to be using parameterisation and a decent (slow) hashing algorithm, as others have said. I use [this blog app](https://github.com/halfer/php-tutorial-project/tree/rebase4) for teaching - see `/login.php` and `lib/common.php` for the login form and the logic respectively. (This is PDO rather than mysqli, but it would be easy to convert to mysqli if you want to stick with that). 
Perhaps the place he works at git clones to the deployment server and he had a "oh shit what are we doing?" moment?
&gt; I mean, I go and create a post. That's a page that didn't exist on the server before right? So is there a piece of code that then generates a file on the server storing html/php code that displays the post I made? No, it doesn't produce any files. It just spits out a page to your browser.
I never intended to say it's not important, I was just simply ignorant on the topic ;) thanks for the info I guess it's used in PHP too if that's posted here.
Sorry, attempt at humor through understatement clearly failed. Yes, commonly used by php as well. 
The process is described here: https://www.squizlabs.com/php-codesniffer/analysis-of-coding-conventions
I used to have an Academic license, but when they made the student edition free, I got mine upgraded to a commercial license for free :)
The one thing that I've found to be screwy with the current migration is they have declared getting profiles of users depreciated using a certain scope (users.profiles if I remember correctly) and the only one I have found to get the users real name that isn't "depreciated" is via Google+ auth which requires a G+ profile which does kind of suck. Unless I just missed something. 
Sounds like you are one of those insecure programmers who use 'professional tools' to feel good about themselves. See, how did that sound to you? I am not blaming that you are using this IDE. It is just that your comment is stupid.
Awesome! Thank you. 
Every micro framework looks like this. Even https://github.com/sofadesign/limonade was similar way before Silex, anonymous functions, OOP, ... dispatch_post( '/hello/:name', function ($name) { return 'Hello $name'; } ); 
Have you tried the [power save mode](http://stackoverflow.com/questions/11725605/what-is-power-save-mode-in-intellij-idea-and-other-jetbrains-ides)? And on Linux, I often have to [tune](https://intellij-support.jetbrains.com/entries/23395793-Configuring-JVM-options-and-platform-properties) the `Xmx` up a bit. Other than that, Virtualbox has terrible IO performance on its "shared folder" implementation, so watch out if you're using it.
I am working on CakePHP which is the best in performance and easy to use.
Imho Symfony/DependencyInjection is somewhat monstrous for these types of frameworks. I usually don't need CompilerPasses and DI extensions for writing APIs. But what I really need is [autowiring](http://php-di.org/doc/getting-started.html) so I don't write tons of unneeded YAML.
I don't use an IDE, but I can understand why some want to. I did buy my editor though, because it helps me do my job and I like the idea that the person who wrote it is being supported. People who balk at forking out a few bucks for a tool that will pay for itself a thousand times over really don't work in the industry.
Yeah, there are lots of good plugins out there for ST. But I never found (a good) one for using xdebug (which I use every day).
&gt;People who balk at forking out a few bucks for a tool that will pay for itself a thousand times over really don't work in the industry... May be they can work with same/better efficiency with freely available tools and the enhancements provided by a commercial tool might not have a place in their workflow. The idea that you should be using paid/commercial tools to make you a 'professional in the industry' is pretty dumb.
Thanks, will look at those. Not tried PHPStorm at all, so not tried tuning it - does it generally have OK performance out of the box? I do use shared folders, but not intensively, and really only for peripheral stuff. 
This is the nGinx thing right? Anyone recomend a link/tutorial for something like that? 
As per the sidebar, /r/PHPhelp is probably a better place for support issues. 
I'm wondering why they're still using MySQL while MariaDB is supposed to be a great improvement. Considering using it myself for a complex project that could really use some of its NoSQL features along with the plain old relationalness of MySQL but I find it hard to make a choice in this regard; supposedly it's much better but then why is it hardly used?
The terms are often used interchangeably. Even the OS aliases it for you, so you've got to expect recruiters to do the same. http://grokbase.com/t/centos/centos/148y6wq3t8/why-does-centos-7-want-to-install-mariadb-instead-of-mysql
Being pretty dumb is discounting a tool solely on the basis that it's commercial. The point here is that no professional gives a second thought to a $50 - $100 business expense if it's going to save time. You'll make that money back in a single job. The hobbyist of course screams bloody murder and asks why the author isn't giving away his work.
you run tests on the production server? o.O
you should have a separate build server that does these things: * checkout from source control * get all dependencies * run test suite * run api documentation generation * if tests succeed do a fresh checkout without the dev/test requirements * push complete package to desired server * publish updated documentation the production server itself should never have to do a checkout, and never-ever-ever run the tests as I've read in comments here.
Drupal is written in PHP: http://buytaert.net/tag/drupal-sites
How old is MC? It's not as simple as "oh this MySQL fork is better, let's change every piece of code to use that instead!" It certainly won't make any money directly. It probably wouldn't make any indirectly via increased efficiencies. And it'd be a huge undertaking. You need a pretty damn good reason to change the entire DB of an entire company. 
Not really new : Oct 21, 2010
Who did that and where? Our argument started with you saying, "So you've never bought an editor/IDE? You doesn't belong in the industry". Anyway you seem to have a real problem following the arguments and I don't particularly enjoy going around in circles. So let's us stop...
I expect it would be a big undertaking to test and deploy with no risk of issues. I've not really looked into it, but then my MySQL needs are pretty modest. 
Even though my reflexes don't like how some of the classes look, it actually looks pretty promising. Have you already used this framework on some of your own projects?
I don't mean a better solution for Doctrine Cache but a better solution in general.
I dont think that they want us to understand how it works, otherwise we will be able to make bots
Yeah I made my money back a few hours later when I purchased mine that day. (Thanks to taht sublime text ;) lol) - now it's a matter of making everything feel similar to sublime text and I'm ready to go.
What would these types of people rather you use?
Drupal is a good example of terrible PHP, I haven't looked at the code for version 8 yet, but Drupal 6 and 7 are a disgrace. Drupal works well from the user perspective, and many businesses use it – but being a developer that sometimes has to work with Drupal, I find it a miserable project.
&gt; let's change every piece of code to use that instead! It's a drop in replacement. No need to change lots of code. 
If you said that to me, I'd say "when can I start?" Seriously. 
Ok, but do you know any way to actually put this into action? The only things I know that serve stale entries are Varnish and Nginx (probably Apache mod_cache, but same thing)
&gt; It's a drop in replacement. No need to change lots of code. No need to change _any_ code :)
&gt; Do people looking for work really say this? That's a really good way to turn a prospective employer away from you. Do you want to hire someone who secretly hates PHP and is just using the job until they can get their java/.net/rails/etc wish and leave? Best to know up front.
No, it has nothing to do with nginx.
Python?
This is why my workplace has developed a common pattern to interface with Drupal. Use Drupal for the front-end (forms, user authentication, menus) and when inside the page callback, initialize and call a custom presenter class. From there, we set up your data access layers, utility classes, etc. It even works well with dependency injection (Pimple). It's a clumsy approach, but we've got a lot of Drupal 7 code set up like this. \*shrug\* It works. (I still hate Drupal's the render array. It makes some tasks trivial while making some trivial tasks nightmarish.)
You make a good point, definitely. Usually, especially in smaller apps, the DIC stays out of the way and using already-built extensions like I linked in OP keep me from dealing with too much service container cruft. I don't like autowiring, preferring more explicitness, but thats just me :) Thanks for taking a look!
Yep, we've used it for a number of in-house projects and I've used it for a few open source projects. [Packages](https://github.com/terramar-labs/packages) is a good example of a "grown-up" Nice app with a custom [RouteCollector](https://github.com/terramar-labs/packages/blob/master/src/Router/RouteCollector.php), [custom Application class](https://github.com/terramar-labs/packages/blob/master/src/Application.php), and [custom DI Extension](https://github.com/terramar-labs/packages/blob/master/src/DependencyInjection/PackagesExtension.php). Then you have [my resume](https://github.com/tyler-sommer/resume2), [Anaiel](https://github.com/tyler-sommer/anaiel), and [nice-polymer](https://github.com/veonik/nice-polymer) as simpler examples. Thanks for taking the time to check it out, I appreciate the feedback!
How about reversing it and using `TTL - regeneration time` instead of `TTL + regeneration time`. * Start one process to regenerate the cache value at `TTL - regeneration time`, where regeneration time is whatever you decide based on what's in the cache. 1 second, a fraction of TTL... * Mark the cache value as being regenerated (so just one process regenerates) * Serve the cache normally * By the time the TTL is out, the cache has been regenerated. This would work with any cache implementation.
&gt; let's change every piece of code to use that instead Any decent developer is using PDO or a database Class, so it should be trivial to switch database servers.
Haha fair enough I'll be the first to admit, Silex is the only micro framework I've ever used 
It is nice to gave people push it up considering I see posts daily against it. I was foolish enough to get wrapped into a [thread yesterday](http://www.reddit.com/r/programming/comments/2ob9ma/forking_of_nodejs_puts_future_of_platform_in_doubt/cmm02up?context=3) on php. 
I would say pick a language good for the problem. PHP is good for the web, but I have been mostly using R for doing data analytics and visualization recently. I might build a front end to handle R requests in PHP though once I get everything worked out.
Show me a prebuilt CMS that displays exemplary high class well documented and well designed code I don't think there is one. Joomla is so bad though, like; its a miracle, kind of bad. Wordpress is terrible too :/ 
Except all the code you probably have to change. Have you ever encountered a strange bug or odd behavior in an edge case while implementing an API? Usually you write some special code to account for it. If you switch to a similar API, even one with mostly the same functions, often you have to rewrite the code as well as everything it impacts. And "drop in" replacement seems to indicate this will be easy. When you are running thousands of servers, fundamentally altering their architecture and services is never easy. Especially when you have written lots of code to optimize for the existing architecture. Deploying that is a nightmare, particularly when you have to rollback and start again when you hit a bug along the way. Not that you should be unwilling to change when you are at a large scale. But often it will make more sense to directly fork the existing product and develop/optimize it instead of going through a large switch, because usually it is minor adjustments to it that make huge differences. I doubt anyone would be surprised if Mailchimp has already done this. I would not be surprised if they are running their own PHP fork too, just like Facebook. **tl;dr** When you are the scale that Mailchimp is, there is almost never a drop in replacement.
Ewwww Java? I thought you were cool!
NodeJS, Ruby, Python Those are the current "trendy" languages. Certainly capable for sure, things like Github are written in Ruby, and Reddit is built upon Python. But I'll reckon there's nothing built with these languages that PHP wouldn't be able to do as well, for roughly the same performance. (Node has a Unique advantage though, that I get) Of course, using HHVM instead of Zend, will help get you that trendy performance as well ;) 
I'd argue that loving the language you use is a sign you're not yet thoroughly versed in it. Eventually the optimists finally hit its short-comings and adoration turns into a tempered combination of respect and disappointment. And assuming the language is not outright awful, even the pessimists will eventually come to respect aspects of it, because of that time or two it made life easy or when they switch to another language and start missing stuff.
There was a lol-php-sucks type water cooler comment going on at work the other day. I interjected: why, exactly, do you hate php aside from the internet telling you that you should? It was clear these two never even used it. They struggled to grab for something, anything. One finally responds "I hate has it has those weird dollar sign number variables like perl". Wat? 
Good points.. but a good architecture and repository pattern would reduce the number of changes required quite significantly. And the changes that are required should in no way effect your business logic.. if it does you're doing something wrong.
A special suite to check the environment. No full blown 100% coverage suite
I use IDEA on mint as my primary env. Works great
I hear you. I'd like to build one that is built on a modern system, such as angular/ember/backbone client with a thin restful server side. The killer CMS. 
I wonder what you need constant reassurance for, going out of your way to hate against PHP and its coders all the time.
Did PHP murder your family? You seem to have quite the vendetta.
Or I can keep using IDEA which had a learning curve of approximately 4 hours and does everything I need from an IDE.
All of the RoR fanboys hate the fact that they use imgur to post their anti PHP memes.
It's just a popular language, there's always hate for a widely used thingamabob. I like C# the best but I have yet to find a reason to dislike any programming language which isn't attributed to my lack of knowledge for that particular language.
Not everyone can learn multiple languages easily. Better to focus on what you know and improve on that than being mediocre at a second language. PHP can do small to large websites and web applications, it can be used for Android/iOS/Windows Phone/Blackberry apps, it can be used for Linux/OSX/Windows GUI or command line programs, etc. There are some things that PHP would not be very useful for (without someone with C/C++ coding an extension). PHP wouldn't be good for a game engine, video encoding/decoding, device drivers, a web browser, etc. So as a PHP coder I accept its limitations, and take them into account when thinking of projects.
I think that can be said of most CMS systems (hell, maybe even the majority of open source software). The great thing is that PHP can take terrible code and make it work well. It's very forgiving and easy to use.
If you don't know how to build something like this, you really shouldn't be taking on clients and claim that you can. 
You could use the Laravel framework to easily create that functionality, sounds like you need some basic primers though to get you started. Check out laracasts.com fit for some good video tutorials. Most of the intro ones are free as well I believe. Good luck. 
It always depends. In business critical applications I commit them. It's the only way I can be sure to perform a deterministic multi-server deployment.
I'd say pick three and master two. No one language is perfect for everything, knowing two covers pretty much 95% what the world can throw at you. For me it's python and php for back-end and JavaScript for front-end.
No one days you have to be a polyglot, just learn and try to master one more can make a tremendous difference. Some of the best frameworks in php are inspired by ruby on rails.
Can PHP write an app like Facebook? Sure. Facebook is *written in PHP*. What you're asking goes beyond a post on reddit, or a little tutorial. You need to know how to program. A "PHP in 30 days" book won't get you there.
I haven't looked too heavily into any of them. I have some on-going work that I hope will make it into PHP core as a built-by-default library, but it's too early to promise anything.
If that's what you like you should use it. I just know some people would like to learn vim but can't afford the time. This offers a compromise.
&gt;I might build a front end to handle R requests in PHP though once I get everything worked out. Or you could try Shiny: http://shiny.rstudio.com/
Yeah, I have been thinking of that. Depends on what the client wants. Shiny would work for the D3 substitution I think, but for returning PDFs it would probably make more sense to just use PHP. So far my client has really been digging the ggplot charts I have been sending PDFs of, but some things might work better with an interactive element. I also am curious how ggvis will compare. I was talking with the guy who write that Cookbook for R book last month and ggvis might be pretty awesome. The authors of ggvis were there at this little meetup too, but I didn't stay long. I really like working in R for data sets... and am so glad I chose this language for this project.
You are absolutely correct. However, it's not exactly my client, I'm more of an assistance to the person who takes clients and also in learning process.
If you truly were familiar with "HTML/CSS, Js, and JQuery, and **Python**" you wouldn't even be asking this question. edit - Python is well suited to the web and can pretty much do anything PHP can. So if you do not know how to do it in a language you are already familiar with switching to a language you have no familiarity with wont make the situation magically better.
&gt; But I'll reckon there's nothing built with these languages that PHP wouldn't be able to do as well There are a lot of things those alternatives would do better than PHP, but not in HTTP/web context, and there are a few there as well. But for 99%, all the alternatives will do an acceptable job.
But that means you need to know when it is gonna expire and you need to have multithreading. In PHP, that is not easy unless you have a cronjob that regenerates caches on the side.
No, but he is an instance of `jawa.pct.perceptions.percpetable.cool.coolable`.
Ugh, the backwards compatibility thing drives me wild. I don't care if some procedural site from 2002 breaks, they'll just have to live with a legacy runtime. Cut the wheat from the chaff and refine PHP to be a quality language with a proper spec and consistent API. It's not an overnight thing and easy to say but start now so it happens in my lifetime.
Learning multiple languages is the best way to get better at all of them! Pretty much all programming languages will have great fluctuations in popularity in your lifetime, and being able to adapt is a great skill. The more languages your learn (especially when you're young), the easier each next one will be to pick up.
And all their friends will tell them, "They use PHP? You dodged a bullet!" 
This post and those like it is just a rallying cry for the "Fuck PHP, PHP ain't shit and anyone who uses it isn't a **real developer** like I am" trolls to show up and "seriously discourse" with people who offer answers to the question for imaginary internet points and permalink fodder for "how they showed those stupid wannabe programmers" for their bros.
It's not fanboyism to be critical of PHP. It's fanboyism to dismiss criticism of PHP as fanboyism.
I don’t know why they’d consider mariadb when its just warmed over mysql and postgresql has advanced so much that it is now vastly superior. My guess is they just don’t feel the need to change it.
I have a system that can do this with minimal modifications. Send me a PM if you are interested.
We have been so unjustly abused by the other programmers. I know pretty much every modern web dev language out there. PHP remains my choice for server code because it is the "simplest thing that could possible work" most of the time.
Couple of 'cool' JVM languages like Groovy though.
Php! Yiiiiihaaaaaaa!
Nothing wrong at all. The code will be uploaded very soon to Github once I finish cleaning up the structure, and initial database. Before it goes public I'd like to make sure things are presentable. If you would like to take a look at the code, feel free to visit the IRC channel. Once the code is published I'll notify via here, the CoreCMS blog, and IRC. Hope that clears it up! Edit: Download is now available on www.serveratom.com
Actually, for MariaDB (and Percona, which I'd actually recommend) it really is that simple. The most you'll have to do is fiddle with some MySQL configuration parameters. And test in a staging environment, obviously. This is of course assuming that they have a decent replication/failover system, but that's to be implied by the scale you're discussing. Source: I've done these migrations at scale (thousands of requests per second), several times.
... what? Victim programmers, that's a new one. No one is abusing you, so calm down, although I can probably guess why you'd think they were. There's a heavy negative stigma associated with PHP because the perception, whether it is true or not I cannot say, is that PHP developers are piss poor at what they do thanks to the staggering amount of absolutely shit PHP code out there in the world; by and large due to the popularity of the language. I'm sure we'd have seen the same stigma hurled upon any language where the barrier to entry was low enough that anyone can sit down with a few hours of spare time to and develop a functioning web site. Does that make someone a programmer? I don't know, I don't presume to judge others based on what they claim to know or not know. I will say that I have spent more time in my 15+ yrs in technology acting as nothing more than a glorified "internet janitor" cleaning up after some very ignorant self assured chest puffers who cannot be told that their home grown framework is pure garbage and needs to be refactored away as soon as humanly possible. Trying to take an application that was hastily written with no regard for standards, best practices, or sanity, and conform it to something other people can work on, doesn't break when it gets more than 10 requests, and doesn't cost the company a factor more than it will ever make has definitely given me some scars. It's also the reason most companies hand the majority of the hiring process to me as I can build a team of individuals capable of turning a business on its head using technology. I've also educated, sometimes against their will, kicking and screaming, many teams of developers how to build scalable applications that will exist in production for years. When you say "simplest thing that could possibly work" it makes me cringe. While I agree with you, PHP is usually the best language for rapid development, that kind of development is well suited for R&amp;D and prototypical work but more often than not it's that application prototype that ends up being shipped to production. Mixed conventions, broken standards, no best practices, no consideration for scaling, no consideration for security, nearly impossible to extend, difficult to maintain and support, the more exposure you get to the unsettling amount of legacy code that supports business models for companies making millions in revenue, the less sleep you'll get at night. All of that being said, without a shadow of a doubt, 10 times out of 10, I wouldn't even hesitate to steer a project that had anything to do with the web towards PHP as a core part of the application stack. The amount of amazing PHP developers out there grows daily and the language itself has evolved in some truly beautiful ways, and there are still many challenges and thoughtful features waiting to be implemented. [Technical debt](http://en.wikipedia.org/wiki/Technical_debt), has been and will continue to be, the biggest enemy of PHP. Understand that and the ways to overcome the resulting issues and you'll be able to engage your peers in a new way, see potential in places you've never considered, and demand top dollar for your time. 
I avoid PHP like the plague. Would anyone like to know why? Or am I just going to be written off as closed-minded, inflexible, and arrogant as you cling to your belief that PHP "has flaws just like every other language"? (Hint: PHP has terrible problems, but the community continues to write these off as an acceptable degree of imperfection.)
It's an ongoing process. New features are added all the time and cruft removed. :)
whatever you say, internet man. lmao.
And, of course, Scala.
nah, I was talking about that specific Redditor, look at his post history - half of his comments are bashing PHP - he actually makes an effort to find PHP discussions and shitpost in them.
&gt; I avoid PHP like the plague and yet you're still here commenting - if I would be avoiding something like the plague, I just wouldn't go somewhere (like this subreddit) where's (in your eyes) nothing but plague-infested people. 
So basically everyone else's top 10.
[Sculpin](http://sculpin.io) seems to be what you're looking for!
Pure spam. Surely this wasn't actually written by a human?
PHP also lives on the web. Bad programmers who got their paws on VB6, Pascal, or TurboC, or whatever, really made some crappy software back in the day, as I've witnessed personally. However, that was just me noticing, and maybe a few of my colleagues. The end users didn't pay too much attention, and the crappy software hummed along without anyone to bitch about it. PHP, on the other hand, is usually always on the web. When someone makes a doo-doo, it's visible for the whole world to see.
If someone told me they use PHP professionally, I would be pretty ecstatic. Somehow, they figured out how to make it for them and that is great.
What do you think about this stampede prevention: * If the TTL is out, save the stale cache entry again right away for `anticipated safe regeneration time` * In the same request start regenerating the cache entry * Since it is marked as fresh, all other requests get the stale data * Once this request has regenerated the data, save it again with a full TTL This seems like a cheap way of mitigating cache stampede (not completely preventing, since there is a short time between the timeout check and the TTL prolongation in step 1) while not letting anyone wait, for the price of serving stale data during the regeneration time. This doesn't need any extra checks nor locks.
this is all Douglas Crockfords fault
But how do you get access to stale entries or find their TTL ?
Please don't do this project in PHP, it already has a bad enough reputation.
Between Drupal, Joomla and Wordpress you have nearly the entire PHP install base.
I did, and I'm thinking that you should spend your time more productive. Especially before you call others childish, you should notice how much your comments seem alike to those of kids badmouthing the console they did not get for christmas.
Most things written on top of Symfony2 (Laravel, for example) are pretty well-designed. A good framework predicates that.
Checkout https://www.gitbook.com
That's flat out wrong, pythons speed is comparable to php's.
I'm not dismissing any criticisms. PHP fills a market and if it was really that atrocious there would be profound resistance against its use. It does some things well and other things not so well. Just like most other languages. The unrelenting hatred for the language and it's users is worse than what you see between teenage gamers. 
&gt;profound resistance against its use... What do you think you are seeing now?
http://benchmarksgame.alioth.debian.org/u64q/php.php ? 
Worldwide and heavy usage of a popular language that is standing the test of time. Sure that doesn't mean it's the best language, but if it was as broken as some let on, we'd be scrambling for alternatives. Like I said, it's good for some things, bad for others. 
[Here](http://www.w3schools.com) is something else that is standing the test of time for you. Get my point?
And it's great for checking things like default css properties or when used as a quick reference when you know what you're doing, but awful for learning from scratch. Are you getting mine? 
Sure pal. Case closed :)
Why would I need to register? This sounds like it's something you publish on their site, not something I host myself.
Sorry, I'm not sure if I'm following you. Can you clarify? 
A cache-neutral solution would be to [use a key-based expiration](https://signalvnoise.com/posts/3113-how-key-based-cache-expiration-works) in a way that allows you to fetch the last (stale) entry.
Cpython is the standard implantation of python cython (no p) concerts python code to c, and pypy is a python compiles python down to pypy byte code which is considerable faster than cpython but not as fast as cython. 
Honestly...no idea. I haven't used sculpin actually.
I dont agree with this. There are thousands of corporate intranet and public facing web sites that would be screwed by your strategy. It would be a huge mess and companies would migrate away in droves. Just look at the current kickback from Angular users now the Angular developers are saying that Angular 2 will not be backwards compatible, drop a bunch of features and will effectively break all existing sites. It puts a big stigma on using the language for new development knowning the next version will break it. Companies dont want to use languages that break existing systems every time a new version comes out. Its ugly but the PHP developers did the right thing - this is one reason its so popular. Unless we release something called php++ and its a separate product from legacy php (lol at past references before someone mentions it ...) 
more like java.pct.perceptions.percpetable.cool.coolFactory
That's still not doing a back-compat break that fixing the standard library of functions needs. PHP7 isn't going to fix that at all.
&gt; inconstancies of needle/haystack argument orders in native functions Can you give me an example? From what I've seen it's always (needle, haystack) for array-related functions and (haystack, needle) for string-related functions. Haven't noticed an exception so far.
pypy == hhvm
Clojure...
I'm not sure why you even stay around since you've switched to Python and never have anything positive to say in this subreddit...
No, but it fixes a lot. They can't change too much between 5 and 7, lest they avoid a Python 2 / 3 nightmare, where people simply don't update and fragment the ecosystem.
I don't have to do any development in the language to be interested in its direction, community, and development. Obviously, PHP's astounding adoption is something I'm interested in (particularly since I have future interest in developing a PHP alternative).
&gt; inconstancies of needle/haystack argument orders in native functions Yeah this is ugly, but honestly I got over it years ago. IDEs/completion almost completely mitigates this. &gt; language allowing for things like global states This is irrelevant. Every language "allows" bad practices. &gt; continuing to support known busted api's like original mysql_ functions mysql_* was deprecated ages ago, and was not recommended for a long time before that. &gt; the fact HHVM had to be invented to mitigate performance issues Perfoamce issues on the most popular site in the world.
Even the inconsistency you just mentioned shouldn't exist. 
JavaScript and PHP are peas in a pod. I have relatively equal disrespect for them both. I run into "lolwat" moments too, but that is exactly my point: you, like many others, think that because others have them too, we have to stop baggin' on PHP. The reality is that PHP has so many issues (hence the Fractal) that it's amazing the language has as much adoption as it does. Can you produce a document as long (or longer) detailing Python's Fractal? I'd love to see one. COBOL is alive and well only because of legacy software support. If people have jobs maintaining PHP applications, that's fine. I'm just left wondering why _new_ applications are written in PHP.
Going to a pure OO interface *would* be fixing the plain functions, I agree with you.
Why did you post this? It pretty much proves the person you responded to's point. The `±` means they're near identical.
That's not a good reason. Legacy baggage shouldn't be carried across languages just because of tradition.
http://www.reddit.com/r/PHP/comments/2ogc80/ewww_you_use_php/cmmzmr8?context=1
`java.pct.perceptions.perceptable.cool.coolfactory.adapter.millennial. AbstractCoolFactoryAdaptor`
At this point, there are a small handful of other languages in the stack as well (some python, some go, lots of JS, and mobile brings its own set), but PHP is still the main application language. Imgur is a "best tool for the job" shop. (I'd be remiss if I didn't mention that we are [hiring](http://imgur.com/jobs/positions).)
Looking forward to checking out your work
Don't get me wrong, I'm a PHP developer, but this blog post is just plain biased. It mentions nothing of PHP's flaws compared to Python. To address some points: &gt;Python hosting, hard to find and expensive, while cheap PHP hosting is everywhere. They're talking about shared hosting, which shouldn't be used for any serious web application. &gt;Python cannot be mixed with HTML (needs a template library), while PHP can. Experienced PHP developers won't mix PHP and their templating language together. Separate your business and presentation logic. &gt;Python is hardly used in the real world, while something as big as Facebook is built on PHP. That's just not true at all. For example, Reddit is powered by Python. &gt;but hey.. that’s the price you pay for backwards compatibility. No, that's the price you pay for a language that was badly designed from the start. Sorry, but backwards compatability is not an excuse for poor function naming. The date does not factor into why some functions are camelCase, or snake_case, ornothingatall.
YES THIS FUCKING AWESOME Edit: Who cares what the code is, if you can make it work and work well, and MC obviously knows how. Why not? I'm sick of bias against web languages. We are too far along for that shit. This made my day.
I'm betting it's more of an operations problem than an engineering one. Once a large MySQL environment is built, mature, and stable the proposition of swapping out a pile of instances gets daunting. "Drop-in" becomes a [multi-step process](https://blog.mozilla.org/it/2013/12/16/upgrading-from-mysql-5-1-to-mariadb-5-5/) once replication is added into the mix. I would imagine multi-master environments would further complicate all that.
Its just spam.
Yep! In your markdown files you can do ```.language-php $some-&gt;code('here'); ``` And it will compile into the proper &lt;pre&gt; and &lt;code&gt; tags, and let prismjs know that it's php. Same with any other language, simply append the language name after the hyphen
How exactly is mysqli_real_escape_string's character filter in the procedural style different from a prepared statement's character filter? Assume the character encoding is the same for both situations.
Oh. That guy is an Idiot if he meant this.
The ± means the median difference or the difference for individual programs is less than 2x. 
Exactly.
Uploading a large project for public consumption / scrutiny is daunting. Congrats and good luck!
Most Frameworks by their very nature are impeccably designed and heavily scrutinized (well the good ones anyways) It will be very interesting to see Drupal8, as its built with symfony components. But I have a sneaking suspicion that old habits will die hard..
It's both a blessing and a terrible curse haha 
&gt; I'm just left wondering why new applications are written in PHP. Exactly! The only valid reason I can think is the availability of dirt cheap php programmers who are available at the drop of a hat. And that is not that bad at all, provided you are competent enough to filter the bad ones out(This requires A LOT of luck too). For startups, this might be a life saver. As I told before, it requires a lot of luck, or you can end up with 1996 level code or even worse, ultra futuristic pattern infested mess (remember /r/irestful anyone?)... 
I don't want to fight either. I don't consider this a fight or a competition or whatever. I just think you're misinterpreting the results. The "1/7" just means it was 7x faster than python on a *single* benchmark. The majority of the separate benchmarks, as well as the overall median (the one in bold), shows `±` which means they're less than 2x of each other.
"Curly braces have their own problems." &lt;-- like what ?? "Actually, Python has the __ prefix for method/attribute names." &lt;-- in php we call that as a *hack* def say_something(self): raise NotImplementedError() &lt;-- have to mention self parameter in a method . we do call that too as a *hack*
Well, compared to whitespace indentation like Python has, they can be misleading. Braces and level of indentation don't have to match, and while your eyes actually look at the indentation, the compiler sees the braces. Plus, you have to explicitly use them. But neither approach has much wrong with it. **EDIT:** Ah, you sneakily edited your comment to add more points! Not fair. &gt; "Actually, Python has the __ prefix for method/attribute names." &lt;-- in php we call that as a hack It's not a hack. Are you even familiar with how that works in Python? It's not just a naming convention. &gt; &lt;-- have to mention self parameter in a method . we do call that too as a hack Why is that a hack? The language designers made a conscious choice to make the `$this` variable explicit rather than implicit. Surely having `$this` magically come into scope could also be a hack.
I work with java (spring and dozens of maven-built dependencies) and sometimes i ask myself "why all of this? with xxxxxx framework and composer i can do all of this with half of time and mantain scalability with muchlower resources". PHP has its flaws like every other language. But i think that comes from the community. I am a PHP and Java reddit subscriber. In java the technical discussion is much more present than here. But, nowadays, in web development, Java is the worst popular language.
&gt; the compiler sees the braces. Plus, you have to explicitly use them. in python model you have to explicilty use the ":" and indent the code. "But neither approach has much wrong with it." &lt;-- if indent model was any better, another/new languages would have used that model.
Which is one of the reasons PHP has remained popular.
Haters gonna hate. Plenty of startups have used PHP and been very successful with it. I can't help but think it's sour grapes for a lot of people because they don't know it well or haven't been able to use it successfully. It's actually a great filter. If I'm interviewing someone and they are bagging on PHP badly I realize that they have their head in their ass about programming in general and I won't hire them. 
&gt; The only reason I can think is the availability of dirt cheap php programmers who are available at the drop of a hat. dirt cheap programmers write dirt cheap code. hire an expensive one then!!
array_map ($callback,$arg) array_filter ($arg,$callback) PS: I use PHP(Symfony) daily, and do love it!!
&gt; I hope to save a bunch of guys from this sinking boat or even boarding it in the first place a proper language is a *myth* !! [copy] All languages, runtimes, and standard libraries (and databases, and source control, and on and on) are "broken" at sufficient scale. You're going to be spending time rebuilding things other people take for granted no matter who you are and what language and technology you are working in. [/copy] PS: [copy] C++, the queen mother of castles on broken foundations. [/copy] 
I find it far more likely that you just enjoy getting a rise out of people, and feed off the negative attention and confrontation.
Nope.. hhvm is better. The good part is it has a multi billion dollar company backing it!!
 I actually don't think you "have to stop bagging on php". If you are willing to enter the debate in a constructive way you can criticise all you like. The problem "we" have is people who drag up ancient arguments which are irrelevant and thoroughly refuted. If you want to complain about PHP's inconsistent standard lib then fine. This is valid. If you want to lament the lack of a solution to optional scalar type hinting due to the fact that some want to be able to preserve PHP's schizophrenic type system then also fine. These are constructive arguments to have. The arguments irritate people are "I avoid php like the plague because lol php"... tautological nonsense which actually does nothing to identify and progress the language. Of course if you don't have an interest in entering the debate and just want to spit bile from the sidelines then, respectfully, keep your opinions to yourself. 
Nope.. pypy is better.
Since you are playing shrink now, let me ask this. Don't you think you guys are a bit over reacting for my [original comment](http://www.reddit.com/r/PHP/comments/2ogc80/ewww_you_use_php/cmmvdp3)...
So what do you guys think of HHVM? 
Why do you think Percona is better than MariaDB? 
&gt; pypy is better. *their* core team is struggling to find contributors.
One of our guys was evaluating it, but I'm not sure where that went or the result. I haven't done much more than get it set up to play with personally. 
&gt; PHP could be saved through a substantial break in compatibility These things will prevent that from happening. 1. That will require PHP to become something else entirely. The community will never allow that to happen. Because that would mean losing some of the things they love. Ever heard the argument "let's not make PHP like Java"? 2. When you break backward compatibility to that extent, there is not much difference between upgrading to the new version of PHP and switching to a better language altogether. So PHP loses it's momentum, which is the only thing that has sustained it till now.. 2. Php core developers are amateurs. Please take a look in the bug tracker if you want proof (and I have similar impression from the discussions with some of them). There is no way they ll be capable of designing a language from ground up (If we are aiming for a big cleanup). If they did, they will be replacing brain dead features of old php with a different set of brain dead features of the new PHP. But I don't know why you would want that. It is already easy to deploy applications in any language. And I don't really think other similar languages are much harder to learn than PHP. So my point is, save for it's momentum, thanks to thousands of wordpress/drupal/joomla installation, PHP has really no reason to go on. 
I work on http://ican.openacalendar.org/ but I'm not quite sure it's what OP is looking for ... we are aiming at the niche of people collecting events for a community. But for a local event site maybe? :-) Last time I looked at fullcalendar.js it was V1 and didn't do timezones, but I see it does now so I will have another look.
My question was rhetorical, it wasn't asking you how to do it. I'm saying not wanting to have that build step is just as valid a reason to put it in Git as not wanting to ... what ... see some extra commits here and there? 
Nope. We're pretty solid operationally with a huge variety of Linux and Windows nodes doing a wide variety of things for multiple ecommerce platforms, and my regard for the collective wisdom of random people on the internet who for all I know are just reciting what they read on Netflix's dev blog is pretty low. 
He who limits himself to one or two languages is not going to be very employable. I adapt to wherever the money is.
I've been working with PHP for over 14 years. Look at it in the 3.x day, started really developing with in the 4.0 days. The only things I've had issues I had with it is there need, haystack arguments arrangements. Over the years I have created really awesome stuff, but I have ended up doing more NodeJS development because of the needs of my projects.
The people I run into who are "Why PHP" tend to either be Microsoft devs, people who think PHP is still PHP 4 procedural messes or people who use truly obscure things like Haxe to build all their stuff.
Routes? They're endpoints. Targets. Each one is unique in its own way, and corresponds to a block of code (the controller) that processes the endpoint. The base of your application would be "/" - the homepage. Then maybe you would have "/register-form" for a signup form. They tend to default to HTTP GET, but you could also have an HTTP POST route to "/registration-submit" - it could accept the form submission, create a new account, and then redirect the user to HTTP GET "/login" for the login page. You can usually give them names, and then you can use those names to generate URLs in your code. When it comes time to refactor, that's pretty helpful - it lets you change the actual URL as much as you want, while keeping the same name. Useful for reorganization. Some routes can also match against multiple HTTP verbs (such as GET and POST at the same time). Then, different controller logic for each verb can cooperate to get the desired result, which can help reduce code duplication. A useful resource for learning about PHP concepts: http://www.phptherightway.com/ Edit: Routes can also have parameters, such as "/post/{id}", which will be passed into the controller code as a variable. This lets you pull the requested blog post from the database by its ID (for example). Some frameworks actually can intercept the "{id}" and pull the post straight from the database, and then instead of a number, your controller code actually gets the blog post's data as a parameter. It's kind of ... magical. Edit 2: Here's an HTTP POST route ("/deref") for a micro application that I've been working on. This is what a route definition looks like in the Silex microframework, which tends to use [anonymous functions](http://php.net/manual/en/functions.anonymous.php) for controller code: // Deref route - accepts a URL parameter and responds with the redirect log $app-&gt;post('/deref', function(Request $request) use ($app) { $url = $request-&gt;get('url'); // Reject non-HTTP or non-HTTPS URLs $url_type = getUrlType($url); if (!$url_type) { return new JsonResponse(['error' =&gt; 'Invalid URL'], 400); } // Trace the redirects generated by the submitted URL try { $result = getRedirectLog($url, $url_type); } catch (\TooManyRedirectsException $e) { return new JsonResponse(array('error' =&gt; 'Too Many Redirects'), 400); } // Prep the response and then send it in JSON $response = array( 'start_url' =&gt; $url, 'final_url' =&gt; end($result), 'final_domain' =&gt; parse_url(end($result), PHP_URL_HOST), 'route_log' =&gt; $result, ); return new JsonResponse($response); }); The full source for "deref" [can be viewed on github](https://github.com/beryllium/deref)
You are right. @UltimateComb If they explain the logic behind it, then there are no point of introducing new techniques. 
In reality it's not that practical or simple, but a man can dream.
i think because the community very large
Sure, every language has its niche, the area that it is *really* good at, and the areas that it lags behind other languages. But these days, APIs are so ubiquitous, that it is much less of an issue. Data can be shared over APIs, over memory caches, and processed in whatever languages are appropriate for the application.
Excellent, many thanks! Just got to edit the text colours.
Personally I find these programming language discussions, extremely pointless. Reason, is that whatever language you use, you somehow feel the need to put down, insult and be totally rude to people who use a different language. Is that somehow a sign of your eliteness? No it's a sign your an immature person. Use the tool that works for you, learn it, try it, make the most of it. I have been doing web coding since 1997, self taught. It makes no difference to me, what language you use. I don't need to put you down for having a different opinion. Oh, and I've used: ColdFusion, HTML, CSS, jQuery, PHP, MySQL, Oracle, SQL Server, IIS, Apache and Lighthttpd. They are tools used to solve business or personal problems. If they work use them. Now beyond solving the business or core logic issues/problems/needs. There are of course important needs in good programming. And to me, this is NOT about style or framework or how OO your code is. 1. Do you follow good security procedures, login/logout, password encryption, etc. 2. Is your code thoroughly documented and coded, so the next guy/gal can easily or reasonably read it, and have an idea what everything does. 3. Do you use some kind of source control, to make sure you have backups, just in case bad shit happens. Remember the old 12 step joel test made by Joel Spolsky, that was classic test of a good programmer/programming environment. What language you use, is not something to be used in some petty fight with other petty people, over which is cooler. Who the crap cares, grow up!
I wouldn't say awesome, but it's hard to convince people ie got it's shit together. 
Going for a true ELI5 will be tricky, because there are a lot of abstractions occurring once you get into routing through a front controller, but let's give it a try... As an analogy: let's say your code is a big city, and every building in this city makes and/or takes something from people who visit and every visitor will visit at least one building before they leave. A front controller is like a road that leads into the city - sending all the visitors down this one road is useful because, as they enter, you can load up all of the basic building materials (class autoloaders, supporting code libraries - basically anything you would historically have had to `include()` or `require()`) that your buildings are made with. ... but, now that visitors are entering the city from just one road, we have to guide them from the entrance to the particular building that they want to get to - this is where routes come in (and, really, they're just like routes marked on a map). A route can be direct: "if the visitor asks to get to /static-page load the controller class named Static_Page_Controller and run the index() function" ... complicated: "if the visitor asks to get to /admin/address/123/edit load the controller class named Admin_Address_Controller and run the edit() function with the parameter 123 to load up address #123" ... and variably complicated: "if the visitor asks to get to /api(/(.*)(/(.*))) then load the controller class Api_${1}_Controller and, if the visitor specified a specific 'subdirectory', run the function named ${2} - otherwise run the index() function" Basically, routes provide an abstraction layer that allows you to load controllers and call their functions with parameters - this allows you to simplify what your users see in the address bar without trying to over-simplify your controller classes *or* over-complicate your application by having actual PHP scripts (with tons of common `include()` and `require()` calls) at every URL.
Also, for future needs: /r/phphelp
thanks, i may need it! :)
Routes are rules about what code should serve which URLs.
Though there are much more detailed answers, this one is likeably concise. 
Me, of course. Look at how self-assured I sound - I must be a big-shot. Just kidding, of course. I suppose the most convincing argument is, and should be, that learning new languages is fun! Especially the part where you come back to former languages and can apply lessons learned in the others - but that's for you to find out :)
[But not quite as fast PHP running on the PyPy stack](http://hippyvm.com/#performance)
and about 95% of websites
&gt; in python model you have to explicilty use the ":" and indent the code. Yes, but you don't have to close your blocks with anything. &gt; But neither approach has much wrong with it." &lt;-- if indent model was any better, another/new languages would have used that model. Python isn't the only language with this model, plenty of new languages have chosen to forgo the traditional braces and semicolons.
Of course. . Hhvm looks to increase realworld perfomance where as pypy shows better perfomance in synthetic benchmark s
That's pretty fair. My word choice was poor. It's not that you can't continue to love something even after encountering all of it's faults. I was more trying to address the whole honeymoon period that for many folks will last a lot of years. At some point it ends and you realize this language has its fair share of shortcomings too. And often there is an antihoneymoon phase for some programmers and languages. But, at some point once you have used it enough you will realize it's not *all* bad. Love/hate are too strong of words to be completely accurate.
&gt; pypy == hhvm pypy == [hippyvm](http://hippyvm.com/)
Indeed, forgot about that. Quite annoying. Better comparison is array_map and array_walk.
Take a look at Phrozn http://phrozn.info/en/ It's a PHP based static generator that can use twig templates, Markdown Extra and/or Textile. I made a tweak to allow [Google Prettify](https://code.google.com/p/google-code-prettify/) to be used more easily within Markdown, but it's still open as a [pull request](https://github.com/Pawka/phrozn/pull/111). If that's of interest, [see my fork here](https://github.com/lordelph/phrozn)
&gt; plenty of new languages have chosen to forgo the traditional braces &lt;-- like ?? 
Don't worry about the speed of your back-end for processing the subscription -- just assume that it will work (because 99% of the time it will) and have your JavaScript immediately update the buttons. (This concept is sometimes referred to as "optimistic updates"). Then, in the exceptional case when your operation fails, you can alert the user about the failure. You could also do things like show a "processing" message in an unobtrusive fashion (like gmail does with that little yellow bar at the top of the window).
I use a pretty custom solution for all my projects for the past few years and it works great. Depending on the framework I will set up a Helper class for my view. This helper class contains a method called "element" which loads php files. [Here](http://pastebin.com/75U3wg9A) is my element method in the PHPixie framework that I am working with right now. Generally if a section of a view needs to be updated on some DB call (lets just say a html table of data), what I do is extract that table to an element and render it on the view. My AJAX/POST call (whatever the case) returns the EXACT same template through an ajax controller to avoid loading unnecessary resources. Append the HTML to the container and it looks like its "reloading". What I enjoy about doing it this way is that you follow "KISS/DRY" principles. All my elements are passed variables and extracted within the context of the file(element) being loaded. So these elements are reusable EVERYWHERE and are independent of any one specific controller logic. Example: In my view I may have: &lt;h1&gt;Blog &lt;?= $Blog-&gt;getTitle(); ?&gt; &lt;div id="postList"&gt; &lt;?php $ViewHelper-&gt;element('blogs/post_table', array('Blog' =&gt; $Blog)); ?&gt; &lt;/div&gt; Then my ajax call returns the exact same element and i just $('#postList').html(data). Who knows if this is the "best" way, but for me and my dev team, its easy to read, follow and update.
Yeah, you can do the same thing with Twig by using its includes. It works great. However, it's still slower than /u/shedsquatch's solution of optimistic updates.
If you wanted your comments to be judged in isolation, on their own merits, then you probably shouldn't have spent the last couple years trolling /r/php. You can't blame people for remembering.
I usually use [Sphinx](http://sphinx-doc.org/). It's written in Python not PHP and it's really nice. Symfony [uses it](https://github.com/symfony/symfony-docs) and it works with [read the docs](https://readthedocs.org/) so you can generate documentation on every push to github (or wherever). Here is [one of my projects](http://docs.counterpartphp.org/) hosted on read the docs and its [raw ReST files](https://github.com/chrisguitarguy/Counterpart/tree/master/docs).
phpDoc does what you're asking ... It generates the API info + manual pages. Check out this [documentation](http://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_tutorials.pkg.html).
CoffeeScript, Haskell, Golang (no semicolons, significant whitespace, though it has braces), Swift (ditto) and Scala (ditto) all come to mind, but I'm sure there are plenty of other examples. Actually, it's not just new languages, older languages have done things differently too. A famous (and horrible) historical example would be `make`.
I agree that there could be breaking changes and non-breaking changes. A new core library would be a great start. However, I have beef with things like there being only one collection type that represents all possible uses (even though they have distinct interfaces, use cases, and performance implications).
~~[phpDocumentor](http://www.phpdoc.org/)~~ [phpDox](http://phpdox.de/) [The lazy way](http://davestewart.io/resources/php/redmine/documentor/) [Maybe this can be hacked to do what you want](https://sculpin.io/) * this comment brought to you by Google search
"Single variable scope for all layers". I have that in my framework too: $GLOBALS['foo'] = 'bar'; what could possibly go wrong. 
To add to the existing comments: Apache has a built-in default router: a URL is translated directly into a filesystem path, and it attempts to load the file there. While this is convenient for simple stuff, it has some major limitations. It means there has to be an actual file present for each URL path you want, and your URLs will probably need to include the .php extensions (which is ugly). What if you want a dynamic URL structure, like a URL path for each entry in a database? Another option is to basically override Apache's default router so you can use your own logic. You can configure Apache to just send all requests (or all requests that don't match an actual file) into a single PHP script. That script can then look at the URL the user requested and decide what needs to be loaded. How it decides that is totally up to whatever framework you're using.
As I said I'm not looking for API generation from code, but thanks for the attitude anyway.
Why not an API? I don't understand why you can't use an API/doc generator, and just tweak the output logic to customize. The other links are not limited to API generation, if you bothered to look. As far as the attitude, you're welcome. APIs are not documentation, so be more specific about what you want, and you won't get any attitude for free.
&gt; tend to either be Microsoft devs, people who think PHP is still PHP 4 I work as a WordPress dev currently and I will say it makes me hate PHP. PHP pays my bills but it is not as fun as programing in Ruby.
As someone who loves PHP, I'd kill myself if I had to work on Wordpress. We've pseudo-audited the code out of curiosity and it's just a gong show. The codebase is exactly that "PHP4 nightmare" that most former PHP devs think about when they bash PHP and call it a shit show language. I can't seem to find it again, but there was this truly epic if/elseif chain that was at least 50 lines of 1-2 liner conditionals in 1 chain. It actually was disgusting. The unfortunate part it seems is that all of the larger and widely used CMS' like WP and Drupal do have that PHP4 stank to it. Drupal less so, but it's equally insane in a different way. WP is just really really bad code.
&gt; Why not an API? I don't understand why you can't use an API/doc generator, and just tweak the output logic to customize. Because I'm not looking for documentation of code specifically, I'm looking to make a manual/tutorial. &gt; The other links are not limited to API generation, if you bothered to look. The first one is API doc, the second one claims it's not limited to API docs but I didn't see anything about alternative documentation, the third one is code docs only as far as I can tell. Yes the fourth one isn't API doc but it was already suggested here. &gt; As far as the attitude, you're welcome. APIs are not documentation, so be more specific about what you want, and you won't get any attitude for free. And I specifically said I wasn't looking for API docs, so not sure how I could be more specific there. Telling me to google it is stupid, as if I hadn't already done that (none of the other suggestions here appear for searches around PHP documentation/manual/markdown).
Yes, it's so obvious if the OP was even willing to RT*M. I am of the opinion he/she just wants to install something and run it out of the box so to speak. I have done this in the past by simply using phpDocumentor or phpDox, and then extending the output features to meet my own HTML output requirements. 
I would take a moment to consider the size of the application and whether you can benefit from using a front end framework instead of stringing all your interactions together using jQuery, which can very quickly become an unmaintainable mess on larger applications with a lot of UI interaction. Front end frameworks, like Angular, Ember, Backbone and friends can help to lend structure to your application, accommodate potentially messy implementations like what you're discussing here and are often designed with performance in mind. Edit: autocorrections
It seems like a pretty coherent explanation, you're saying in the procedural style, it filters characters individually, whereas in prepared statements, the whole statement is restricted to a low security clearance. Still, what would the procedural style's string escape miss that the prepared statements won't?
&gt;What I'm really interested in is hearing a few different high-performance and scalable solutions for this operation. You insert a row into a database, and then update the text of a few buttons. The question of how to make this scalable performance wise doesn't make sense. Which part of this do you expect to need performance tuning?
Real escape string functions look for variations of a null bit that will basically tell the SQL driver/engine that everything submitted so far is a comment and this null bit is the end of that comment so pleased to be ignore all of that and starting execution of the SQL statement after this character. Once the dynamic variables have been concatenated into the SQL query the entire thing is submitted to the database to run as a single statement. With procedural style escaping of bad characters there is some risk that the maintainers of the real_escape missed some bad character (for example maybe the null bit character in a Chinese character set is different). As a developer you also need to tell the real escape function what character set you are using so that it knows which set of null bits to look for, this leaves the method open to vulnerabilities via misconfiguration. Prepared statements are submitted to the database server w/o any user data in them at all, once they are "prepared" then the parameters are submitted separately. There isn't any string substitution going on in the parameter because the SQL driver/engine already knows it is just data and won't allow it to bleed over into the actual SQL statement. So the query string in prepared statements is given the same "security clearance" as your query string + data is in the procedural style but the user submitted data is given a much lower "security clearance". So basically the database driver/engine is aware of what parts of your query are untrusted user supplied data and what parts are the statement written by the developer and can treat them differently without relying on filtering out bad characters.
If I have 20 different types of buttons on the same page and each requires a different line of Ajax code, what's the best way to do this? I can't imagine my current way of doing this is recommended.
Imagine a 404 page that had a decision tree that parsed the URL and delivered different content based on what the URL was. Now slam all that logic into a routes.php page and create an .htaccess rule that sends page not found requests to routes.php instead of your 404 page.
Thank you, this is a good concept I have not heard of before. This makes sense from a performance standpoint - why slow down every process when only a very small percentage will fail.
Changing the HTML with jQuery is the easy part. I'm more interested in what type of backend the ajax code should interact with.
Needn't be much more complicated than a JSON true/false on a variable named "success" along with a simple message stack if the operation failed: &lt;?php /* your code */ if ( $flag_success ) { $response = json_encode(array('success' =&gt; 1)); } else { $response = json_encode(array( 'success' =&gt; 0, 'errors' =&gt; $errors, ); } /** * output response - could be as simple as echo and die() wrapped * in a conditional: * * ! empty($_SERVER['HTTP_X_REQUESTED_WITH']) &amp;&amp; * strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest' * * if you're not using a framework. */ Gets a little trickier when you're tacking on form fields with validation, however, I would *strongly* recommend that you (a) create a code path for input that *isn't* using asynchronous Javascript and (b) don't diverge from that code path for asynchronous requests until necessary - this leaves your application with the most-usable experience (progressive enhancement) and your code with the fewest number of possible WTF's (requests over a typical POST versus an xmlhttprequest are, predictably, doing exactly the same thing).
I can't seem to wrap my head around how popular CMS's work like wordpress, Joomla, etc. I can write procedural scripts easily, and I understand classes pretty well. But when I try to look at wordpress's source code I have no clue what's going on. I can't seem to find any books/tutorials on how actual large php applications are written. I know what MVC is and how it works, but I have no clue how to actually write the code. My question is, what's a really well written open source project (doesn't need to be a CMS) that I can learn from, and maybe some hints on how it works. I ask because everyone seems to complain about how badly wordpress is written.
I would use a Framework such as Laravel as a tool for learning. It's well documented and you have all of the source available to you which is important because the libraries ARE an application you can reverse engineer. Don't worry, you're not the only one who has no idea what's going on when you look at the Wordpress source. 
A little while ago I was playing around with [Phalcon PHP](http://www.phalconphp.com/) and it helped me understand a lot. It's a PHP extension you install that helps with some heavy lifting, but setting up DI and a few other concepts was completely left up to you on when it happened. It was nice not to have write a framework from scratch, but it still forced me to learn about some internals.
Wordpress is a fucking atrocity. Looking at it as any gauge of code is a bad idea. The way that codebase is written is the perfect "case in point" of what everyone bashes PHP for. 
I have all of my code for sandbox.rdonohue.ca on GirHub. It's a personal website I'm working on just to learn some PHP. I've been working on the front end but have a lIttle PHP, like a script to connect to my DB. I got a shade paranoid and make the repo private. I get 5 free ones since I'm a student. It it bad practice to connect to a DB and have that information for everyone to see? Side note: like I said I know little PHP. Would there be some github projects I could jump in on with my skill level? What's "required" of me before I try to start joining other projects? Thanks ☺️
What is the preferred method for handling user sessions? I'm trying to write a user handling method for dealing with logins however I'm having a bugger of a time trying to figure out the logistics. The idea I've come up with so far is this: - Each page calls user.php via include. - user.php checks for username set in cookie. - If no username set in cookie, then show login box and exit (prevents all other entry pages from working if no username is set). - If username is set, then get password from cookie. Password is the SHA512+Salt of the password provided at login. - Compare username and password with that stored in database. - If username and password match (authenticated), then rest of page is displayed. - If username and password do not match database, or username returns 0 results (not registered), then display login error, redirect to login page. The login page will contain a username and a password field, however the password is never set in the cookie, it is instead SHA512+salt hashed and stored in the database, then that value is stored in the user session cookie. The result is that the stored session never contains the user's real password, only it's salted SHA512 hash. Comments? 
&gt; It it bad practice to connect to a DB and have that information for everyone to see? When you say 'that information' are you referring to the DB credentials (username, password, host, port)? If so, then yes, it is considered bad practice to have that public. It is also bad practice to commit that information to a repo. The common practice is to either have that information in environment variables that are set on the server the code is deployed on or to create a file on the server the code is deployed on that is read in by PHP, but never committed to the repo.
Yes that's the information I was referring to. Gotcha. I'll take it off of my repo and keep that in mind for the future. 
&gt; It it bad practice to connect to a DB and have that information for everyone to see? Storing passwords of any kind should be avoided. A simple (though not necessarily the best) way to keep your connection details outside of a repository would be as follows. 1. Create a file named `config.sample.php` containing variables named `$db_host`, `$db_user`, `$db_password`, etc (basically, the configuration that your database needs). Don't give them values, though - leave them as `$db_password = "";`. 2. Copy that file and name it `config.php`, and modify the values in that file to your own database details. 3. Require `config.php` in your main script, and then connect to the database using your `$db_` values. When it comes to commit the files to source control, ignore `config.php` and just commit `config.sample.php`. When another developer checks out your code, they can repeat step 2 and enter their own details. --- Edit: I refreshed the page and saw that this question was answered already. Never mind - I'll leave it here just in case.
&gt;GirHub http://i.imgur.com/8ZA2iia.jpg
You're on the right track. Here are a couple of things I would suggest looking into: 1) [PHP Password Hashing](http://php.net/manual/en/book.password.php) - this is currently the best way to hash and verify passwords in PHP. 2) [Composer](https://getcomposer.org) - this is, in my opinion, currently the best way to manage all of the files or packages needed for your program 3) [PHP Session Handling](http://php.net/manual/en/book.session.php) - this is commonly used for storing the state of a session. It is common that when someone logs in you store the fact that they are authenticated for user N in the PHP session. The PHP session automagically persists on each request from the same browser and you can use the information in there to identify who the authenticated user is.
👍 Before you make the repo public again you'll also want to be careful to either change the DB credentials or remove the git history so people cannot go back and look them up.
Is MySQL a good solution today for starting a new website? Heard mixed things about Mongo and NoSQL. Session using DB? Good or unnecessary?
Don't forget about lazy eager loading. Say you've already returned a collection of `$comments` and you want to be able to display the `$author-&gt;name` for each comment, you can use $comment-&gt;load('author'); to lazily eager load the author info for each comment, rather than needing a new Comment::with('author')-&gt;get(); query.
The bullet points sound reasonable to me, especially since you'll probably have cases where you want to avoid using `user.php` (the "forgot password" page is useless if it redirects you to a login screen) It took me a little bit to figure out a reason to store the hashed password in the session, but this way if the password is changed then the session is automatically logged out. The biggest security gotcha that I can think of in PHP's sessions is a session fixation attack. Before you store the password in the session, use `session_regenerate_id()` to give the user a new session ID. This way if they somehow have an attacker-known session ID they lose it before you log that session ID in. (You can mostly eliminate this by making sure `session.use_only_cookies` is true (default since 5.3) to avoid people clicking on malicious links with a pre-chosen session id in them.)
Other people have already ELI5'd this for you, but I can predict the future for you: once you've done front controlling with a router, you'll never go back. I shudder at the thought of the old `/users.php` or `/topics.php` or `/products.php` dark ages crap I used to do.
MySQL is still fine (not awesome) for almost everything. When in doubt, go with the default and change it when you need.
And an example to illustrate: - `/home` should execute `HomeController::index()` - `/user/profile?id=&lt;any number&gt;` should execute `UserController::profile()` Those are routes (conceptually). In practice, route libraries will let you define them with YAML, PHP, XML, whatever…
I feel like most people hate PHP because it's the cool thing to do. There are certainly those out there that are well informed and have good arguments as to why they don't like PHP but that's a small minority of the hate in my opinion. Really, PHP 5 is pretty damn good in my opinion. Anyone who writes PHP off should look at Laravel. It's by far my favorite framework I've ever worked with. PHP has become a damn good language in my opinion. But as with any language, you have to know what you're doing. Most of the times I've been frustrated with PHP code have nothing to do with the language, it's the developer writing the code.
That's a tough question to answer. MySQL, Mongo and NoSQL are radically different solutions from each other. MySQL is a typical Relational Database which uses SQL to interact with it. Mongo is a Document Store, that uses a data model that's similar to JSON. NoSQL isn't a database engine. It's a generic paradigm used to describe database structures that (for the most part) aren't SQL. MySQL is fine. It's well supported and stable. MariaDB is a fork of MySQL and is seeing even further advances. ~~Sessions in the database are a good thing if you expect your application to scale. If you have replication set up in your database engine,~~ your users session data will be available to them no matter what webserver they hit. EDIT: See comments below by folks more knowledgeable of this topic than me.
You don't need (or want) to store information in cookies like this. Use PHP sessions. They work by sending the users browser a session id as a cookie, subsequent requests to the server will contain this cookie, and PHP will load the users session when it recognizes the session id (provided you call session_start). What this means is that you don't need to authenticate the user each time, only once per session (the users session will last indefinitely if they continue to interact with the server each given time period). So, authenticate once, store the user's id in the session, check for that id being present in subsequent requests and treat those requests as logged in (PHP by default stores session info in files, though other backend stores can be configured). There are actually multiple other things you need to do to develop a secure login system, and due to this I recommend not trying to roll your own for production apps. An important security hole to point out in your solution is that despite the users password being hashed, anyone able to steal the users cookies doesn't need the original password to log in as the user, as you are accepting the hashed password in order to log in. You effectively may as well have stored the password. Again please don't roll your own solution for a production login system, you are doing your users a disservice, and there are other concerns beyond what I have mentioned.
You open yourself to risk and lose some subtle benefits running a composer install gives you. The risks are edge cases I grant you but you are introducing them for no reason. Consider the following: 1. I commit vendor directory. 2. I make a custom modification to a vendor directory either purposefully or not and commit those changes. 3. Some other developer clones my project and at some point runs composer update. My custom changes are wiped out and the app breaks. I've left the project and no one saw in my 50,000 line diff that I was an idiot. 4. Curse the heavens and proceed to summon Cthulhu. Running composer install also makes sure that your current environment setup can actually run the app code. It will tell you if the version of php you have is too old or too new. If you need additional extensions ect... In addition to many of the comments already made I think it is important to also point out that keeping your exact dependencies for your project (if that is what you are worried about by commting the vendor directory) is accomplished by commiting the composer.lock file. So there really isn't a need to commit the entire vendor directory. TL;DR there is little benefit and weird risks. Also [Cthulhu is scary](https://i.imgur.com/MhYgwpU.jpg)
I vote for this guy, you should believe him!
I have just finished learning php from a private institution. I'm now looking for a job but I don't feel confident that I can pass the technical round. What things about php should I master and what are the available ways to do that? What kind of questions they ask in the interview?
Face it, you're an idiot. run back to /r/programming where you can feel safe and secure in the knowledge that saying anything negative about PHP will garner support from other idiots just like you.
Programming needs less morons. While most languages manage to reel in their fair share of fucking idiots, PHP seems to be losing the battle. Losing half of all PHP "programmers" would be an excellent start. Most of the people in this reddit should just get a job in fast food now instead of making a bad situation even worse.
Most PHP employers will look for familiarity with a particular framework/CMS, so maybe familiarilze yourself with some of the more common ones (I recommend Symfony). You'll have to judge the market here - if a large number of job postings are Drupal for example, write a plugin/theme for it. Many PHP jobs are "full stack", meaning you don't just work with PHP, but also manage the database and write the frontend code (HTML, CSS, JS), so these are areas you can look into learning more about as well. Knowing how to use JQuery is in many places considered a must-have, for example. Lastly, pick up some programming books (not PHP, just general programming) to broaden your general knowledge and skillsets, such as - The Pragmatic Programmer - Working Effectively with Legacy Code - Patterns of Enterprise Application Architecture
I guess it's more practical. I've always used the procedural style, although I've been endlessly mocked for it by my fellow friend devs, and also some other people online What character encoding would be able to be manipulated such that they could make a malicious query though?
Really over seeing this same shitty article repackaged and reposted. 
somebody should make this guy a moderator of /r/php 
fuck me
Since you don't show how you are doing it currently, it's not possible to tell. Anyway, just because you have 20 different buttons, it doesn't mean that it's going to perform badly (it actually has nothing to do with it).
&gt; The Pragmatic Programmer ++ on this one, great book.
Absolutely! [Open an issue to discuss](https://github.com/hoaproject/Iterator/issues/new) about these new features!
CodeIgniter on top? No mention of laravel (despite of the controversy)? 
So you wrote the same article twice, with different content?
We are very pleased to announce the release of Yii Framework version 2.0.1. Please refer to the instructions at http://www.yiiframework.com/download/ to install or upgrade to this version.
&gt; Sessions in the database are a good thing if you expect your application to scale. If you have replication set up in your database engine, your users session data will be available to them no matter what webserver they hit. Actually, if you expect your application to scale, storing session data in a database is a pretty bad thing to do. The more users you have, the more pressure you put on the database. Also, it has nothing to do with database replication (you can have multiple webservers connecting to the same database w/o replication) - in fact, database replication adds an additional layer of complexity to the scenario because you have consider replication lag, which can get pretty tricky to work around for a session storage because you don't want your users to get outdated session data because they were stored on the database master and later read on a slave which was not yet fully replicated. Best thing to do, IMHO, is to just use the native PHP session infrastructure (or some abstraction layer on top of that, but this is just for convenience). By default. PHP uses files, which works fine if you only have one webserver and don't have that many users. If you want it to scale, you replace the session handler to store the data in a key-value store, like memcache or redis. This switch is transparent for your application though, no need to change the code other than registering the handler. EDIT: typo
Either a play on words or a misunderstanding. These things are usually called web scrapers.
well yes its called scrapping. You can do then anything with the data.
&gt; If you want it to scale, you replace the session handler to store the data in a key-value store, like memcache or redis. This switch is transparent for your application though, no need to change the code other than registering the handler. +1 for Redis. One thing you need to consider though: Default file-based sessions are locked. Meaning if you have two requests from the same user the 2nd request will wait on the `session_start()` call until the first request has closed the session. Some redis session handlers out there don't support locking. So if you have two requests (same session ID) mutating the session data, they may overwrite each other.
WordPress probably isn't an ideal one to learn from. The code is a million times better than it was a couple of years ago, but it still carries that stigma. Try finding a system written using a basic framework and learn from there. I believe PyroCMS (https://www.pyrocms.com) is written in CodeIgniter, which is a basic MVC framework, so that might be a good place to start.
You're right of course - I should have written "mostly transparent". Session locking is something you have to consider whether you use a central session storage or not though and is highly dependent on the type application you use. Sometimes you are better off if you just let the overwriting happen instead of blocking the request... but either way, you have to know what you're doing ;) when aiming for scalability, there are lots of this kind of problems waiting for you.
Well it works using DomDocument which is interchangable with simpledom element
routes replace apache rewrites in modern apps ^^ 
While this sounded like a fantastic piece of software, after downloading the 0.5.1 zip, I have to say I'm slightly disappointed looking at the source code. I appreciate how much effort you have put into this, but some of the code is, well not very good. No use of components, or anything to help make it easier to use. No real framework in place is going to make it difficult for people to pick up, I'm seeing raw SQL queries and also I'm seeing lots of use of mysql_query. At a minimum would have expected to see PDO or mysqli used. Made it sound like a potentially awesome system that could compete with wordpress (FWIW wordpress does do the multi-site setup now), but the source code is, I'm sorry to say worse then Wordpress. I do hope, it's part of a long term plan because as I said in terms of functionality it sounds like a good basis from which to offer an alternative to wordpress but the source code from a developers point of view, isn't that great.
It's a scraper, not a scrapper. If you think the distinction isn't important, ask a rapper's opinion. 
No it isn't. It's called scraping. And where not illegal it's almost always a bad idea. 
&gt; scrapper Oppps thanks
What about some info on the plain 2.0? I'd missed that that happened.
I suggest to use [Codelobster](http://www.codelobster.com)
I would do both. Someone may have already cloned it before you removed the history.
Other tools to check out: https://scrutinizer-ci.com, https://insight.sensiolabs.com
I ran into a problem with Doctrine2 and ManyToMany relations which I laid out in a phphelp thread [here](http://redd.it/2odfbb). You don't have to read through it (although I still didn't find a solution but used a work-around for now). My question, regarding Doctrine2 and m:n-relations is: Are JOIN queries possible from the owning AND non-owning side of the ManyToMany relation or only from one of the sides? &gt; The query &gt; &gt; SELECT u FROM Entity\ScUser u JOIN u.sc_categories cat WHERE cat.category_id = 1 &gt; runs fine and without issues. It returns all the users that are subscribed to a specific category. &gt; Turning the same query around, to return all the categories a User is subscribed to: &gt; &gt; SELECT cat FROM Entity\ScCategory cat JOIN cat.sc_users usr WHERE usr.user_id = 1 &gt; simply doesn't work. The Syntax of the queries is exactly the same. The owning side of the Relation is ScUser which owns (is subscribed to) categories (of articles). One query works, the other doesn't. Even through extensive research I haven't found an answer to this, the documentation is .. sparse, at times. Hope I'm not too late here.
There are so many red flags here I thought China was having a parade. Most notably, the English shows subtle signs of being a second language. While not an issue on its own, the testimonials show the same signs. From looking though the samples it would seem this is more intended to appeal to people who want to outright make a Buzzfeed copy. It's more about giving the source code for a price than it is about teaching these skills. I have sincere doubts about the quality of the information, as well. If you have $50 and you want to learn some stuff, you're better off subscribing to Laracasts and learning current, cutting-edge, and reliable information. Or send it to me, so that I can buy a line of cocaine. Wait.. no, **I'm** better off if you do that, you're slightly worse off. In conclusion, this is pure commercial spam, /u/Juliablind posts little but "tutorial with source code" spam to a number of different subreddits. This user should be banned from posting to /r/php. Spammers hate this one weird trick!
Agreed. Redis is a better solution than DB storage. I just hate the complexity it adds :/
In python you can include braces in the language spec with: "from __future__ import braces"
Er, no, you just get a joke error message: $ python Python 2.7.8 (default, Jul 2 2014, 10:14:46) [GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; from __future__ import braces File "&lt;stdin&gt;", line 1 SyntaxError: not a chance Unless that was your point.
I think Goutte does page scraping with CSS selectors, and I wouldn't be surprised if it can use XPath too. The docs have never been its strong point, but one can dig into Symfony components to figure it out, I think. Have a look at that, to see if your project does something different? 
&gt; Agreed. Redis is a better solution than DB storage. I just hate the complexity it adds :/ not as much as database replication though ;)
I'd do something like this, assuming cc12345 maps to a database table with ID 12345 (or cc12345): * start by adding a column in your database table, something like `slug`, based on the product title. For product cc12345 it would be "precision-set-screws". Add an index to it. (So you can do `SELECT * FROM products WHERE slug = &lt;foo&gt;`) * in your index.php you get your original URL, so you can get your product ID * Get the product title from the database and create the new URL * 301 redirect to the new URL * Change all links on your website to use the new URL structure That's it in a nutshell, I hope I made myself clear enough.
Wouldn't it be better to generate a token instead of outright adding the password (even a hashed+salted one) to the cookies? I'd create a table with token-userid pair (+ maybe the lifetime of the cookie) and match the token to the userid.
Not sure I want to say I may have read about something a few years ago that had something to do with real_escape_string missing a null due to a foreign language character encoding but I can't find any references to it. I wouldn't give someone a hard time for using procedural SQL with proper encapsulation in quotes and real_escape_string. But I also wouldn't ever tell someone it is the current accepted best practice, which I believe is along the lines of for all NEW projects PDO/prepared statements should be used. Note that it doesn't go so far as to say "omfg you better clean up that 50k lines of legacy code project and fix all the procedural SQL asap!". 
Another vote for Goutte. I used it for a decently large project &amp; it made development (&amp; more importantly, maintenance) of the scraping an absolute breeze.
&gt;Note that it doesn't go so far as to say "omfg you better clean up that 50k lines of legacy code project and fix all the procedural SQL asap!". Depending on the [lack of] variations in coding style, you could probably do it quickly with some tacky regular expression replacements.
What you need are validation rules. One of those rules can be `uniqueUsername`. You can use [Symfony Validator](https://github.com/symfony/Validator) and extend it with your unique rule.
it seems like you are trying to insert a record which you shouldnt try to insert in the first place, you should validate before trying that the username isnt taken or an email unique constraint isnt violated etc
I wouldn't do that, if I wanted to update 50k lines of legacy code to PDO I would just do it manually, I mean really out of 50k lines you are probably talking a few hundred SQL statements, you could be done in a few days. But when dealing with legacy it is usually best to not fix stuff that isn't broken.
Add a URI alias table - store the canonical path and the SEO oriented path here. It's easy enough to to add a routing function that handles the URIs after that. You already defined what you need to do pretty accurately 
I could never get myself to do such tedious stuff. Eugh 
My state-regulated agency still get's these from the state at least as of last year. Hopefully that trend is dead.
Thanks, this is what I was looking for!
Not to mention that out of the box the code won't work on my servers due to everything seemingly hardcoded to be placed into /var/www
I actually tried writing my own application, but it just feels wrong. It's far too procedural compared to what I see in other applications. That's why I'm here trying to find examples of large scale, properly written applications. Surely there must be some open source applications that are neatly organized and fast? Preferrably vanilla php and not using a framework.
First, read http://www.w3.org/Provider/Style/URI.html I don't know what sort of products you sell, but there is a potential issue with a URL like http://example.org/precision-set-screws. Say you are selling one set of screws made by Acme Inc, and then later you want to sell another set made by Widgets Inc, what do you call the URI? I like URLs that identify specific products to also include an identifier so that another product with the same name won't cause URL clashes (e.g. http://example.org/precision-set-screws/cc12345). Over all a search engine cares a lot more about having consistent content at a URL, and URLs not changing, than their particular value. Second: To answer your question a little, better. It's hard to say the easiest way to do it without knowing what other URLs you need available, but the general idea here is that you use mod_rewrite to have all your URLs be handled by a specific PHP file, and then that file inspects the URL and decides what to do with it (probably hand it over to a function in another file). http://stackoverflow.com/questions/869092/how-to-enable-mod-rewrite-for-apache-2-2 is probably a decent place to start. Also there is the [mod rewrite documentation](https://httpd.apache.org/docs/current/mod/mod_rewrite.html) which is how I learned to use it.
This is exactly what the AuraPHP project is about. you group the components together into our own framework using a DI container (DCI principles). In Aura this is referred as [ADR](http://pmjones.github.io/adr/).
I have not used this framework, but I've heard about it a lot PHPStorm for example supports natively Yii and Symfony. And nothing else haha
Instead of using a `PRIMARY KEY UNIQUE` on a string (presumably `VARCAHR`), I suggest having an integer primary key as an `id`. This is easier to manage, and usually better (from what I've heard). Then, before allowing a username, just check if the username is already in the database `SELECT name FROM users WHERE name=blahblah` and check if the amount of results equals 0. If it does equal 0, proceed. Otherwise, show the error. This might be slightly slower than a pure SQL based solution (I haven't actually benchmarked either so I don't know) but it's easier, at least for me :).
&gt;Wouldn't it be better to generate a token instead of outright adding the password (even a hashed+salted one) to the cookies? I think it would make the most sense to just create a PHP session and add: $_SESSION['user_id'] = NNN; $_SESSION['auth'] = true; Then the only thing stored on the client side is the PHP Session ID - which is stored there anyways.
Primary Key on an Int is the way to go. Unique on the username also makes sense in this case. Unique works pretty well for strings
I'm surprised it doesn't support Laravel out of the box given how popular it is these days. 
I'm over it, dude! No need to have a bug up your ass about it. Let it go! Glad you found a solution.
true that
Cool, makes more sense now!
Couldn't I just spoof the cookie? What if the session expires but the cookie didn't?
With [Barryvdh's ide-helper](https://github.com/barryvdh/laravel-ide-helper) you get auto-completion for all Facades (and own models), there's a [dedicated plugin](https://plugins.jetbrains.com/plugin/7532?pr=phpStorm) , and (i'm unsure) has native support for the Blade templating engine. (might be in the plugin though).
If I understand you correctly, the way to do that would either be to use JavaScript (or jQuery) to enable/disable different options depending on the users' prior selection, or send a request using AJAX each time the user changes his selected option to generate a new dropdown list. I'd personally go with the first option. Just make sure you validate the data in the backend. 
Ajax call to load the options for the second part depending on what's selected in the first part, or have the initial page include a json object describing the relationship between options, letting JavaScript populate the second choice after the first is made. If you're going with a few dozen options, the second method would be optimal. If you have hundreds/thousands of choices, the first would probably be better.
+1 for a good explanation as to WHY and not just HOW. its important to understand that there should be some sort of unique identifier in the URL.. I prefer `example.com/:id/:slug` or specifically like this: `example.com/cc12345/precision-set-screws` you could setup routing to accept `cc12345*` so that way the person doesn't need to know the slug name when typing in the URL if they didnt know for some reason. And this should go without saying but, if you're going to be parsing IDs from the URI please for the love of god sanitize data before shoving it to *sql for a query.
There are a couple suggestions using ajax/javascript/jQuery already, but you could do a post form submission to the same page if you really only want to use PHP. Not really ideal, but just another option, there really are a lot of different approaches you can take, Also you might have more help if you post to /r/PHPhelp 
Prepare to be bombarded by people trashing get-elephpant.com for no other reason than that they give some undeserved loyalty to the guy who holds the original design pattern. I've not heard anything negative about the elephpants from them other than that they look different from the original ones.
Looks sexy...... If i wasn't using symfony, i'd give this an install. Maybe i'll have to go start a new non-symfony project haha
get-elephpant.com sells "ElePHPants" but they are inauthentic ones which don't match the real ElePHPant design by Vincent Pontier. [As php.net puts it](http://php.net/elephpant.php): (emphasis mine) &gt; Occasionally, official stuffed toy elePHPants designed by Vincent Pontier are made available. You may have seen pictures of them (from Flickr) at the bottom of the php.net homepage. **Beware of imitators.** Now, if you want a genuine ElePHPant, there's a [Kickstarter for an AmsterdamPHP ElePHPant](https://www.kickstarter.com/projects/rdohms/the-amsterdamphp-elephpant) just now. The real ElePHPants are a rare collectable, not a commodity.
Yeah, sorry about that. Answering how is actually quite hard. If you want to do routing of top-level directories (for lack of a better phrase), there a a good number of pitfalls, and mod_rewrite is really sucky to debug. I think the docs are really one of the best resources. Mediawiki also has some really good tutorials, but it's largely specific to their software. &gt; you could setup routing to accept cc12345* so that way the person doesn't need to know the slug name when typing in the URL if they didnt know for some reason. Good point. I prefer the other one because I think of "precision-set-screws" in my mind is a sort of category, and if you wanted to http://example.com/precision-set-screws could just be a list of the various precision set screws.
&gt;The real ElePHPants are a rare collectable, not a commodity. Which benefits only those who seek to profit from the goodwill of the PHP community.
How so? The official ones aren't expensive, and nobody profits from it.
Yeah. I'm sure that everyone along the production line is just doing it at cost for the greater good.
Just as an addition: to "ignore" files, in git you should add them to a file `.gitignore` in the repo root. That way you won't accidentally add the config file.
Can't speak highly enough of xhprof. 
At least for the AmsterdamPHP ones, all the excess money goes to the UG.
Looks really cool! I'll have to give it a try.
The only thing stored in the cookie is the session ID. If the session expires then the session ID in the cookie won't match anything. Edit: Information saved in the session is stored server side. The only thing stored client side is the session ID inside the cookie. The ID can be thought of as a unique token. If I understood your original proposal correctly then this is almost the exact same thing except PHP handles the creation of the token and the setting of the cookie.
I see that you are under the delusion that we are living in a perfect world where people down vote troll comments only. I have seen users in /r/php where they will downvote automatically before they respond to you. [Example](http://www.reddit.com/r/lolphp/comments/2md8c0/new_safe_casting_function_rfc_casting_10_to/cm3cyw4). I have seen people down vote just because some one criticized their favorite framework or a person who they are a fan of. That I have a low average only means that I am unpopular around here. That I don't give a damn about karma. That I have unpopular opinions. Does having unpopular opinions make me a troll? 
You may be a troll, but you aren't stupid. You know the difference between getting dogpiled on an unpopular opinion (which happens to everyone occasionally) and *having an average negative score across almost a thousand comments.*
Yea. I guessed you might have meant that.. By that definition, if I have a 1000 comments with 1 point each and **one** comment at 0 or -1, I ll end up with a 'negative' average score, right. So troll..? Just wanted to put that in perspective....
I have to say, much as I love Laravel and advocate framework use in general for pretty much all projects, this would be one of the few cases I'm a bit iffy about it. A URL shortener should have a minimal overhead. It's intended purely to translate from a given key to a given url, and to do so as quickly as possible. It doesn't have extensive administration, constant development, or a wide range of entity types to connect. It seems to me that this is the perfect case for **not** using a framework. 
Posted mostly because I saw that link to a Shortener and I was amused - but here's the related blog post where I talk a bit about the Angular experience &amp; the reason for building deref: ["Too Many Redirects"](http://whateverthing.com/blog/2014/12/07/angularjs-and-silex/)
Totally agree with you. Not that Laravel is slow, but it just doesn't make sense for such kind of need.
I'm all for the creation of URL shorteners that are not YOURLS. Hopefully yours is more secure in the standard installation.
My sincere condolences.
Your code is quite inefficient. Just sayin'.
It means 27% (1 in 3.7 comments) of everything you write on this sub ends up with a negative score. Anyway, I was only playing along because working with APIs is fun for me. I'm done now, though, and you have the numbers. Spin them whatever way makes you happy.
Looks good. I wonder though whether it could have used some of the code in http://phpdebugbar.com/ - that has a lot of data collectors already. Also, spelling error on the demo page: &gt; To see the **Phophiler** in action, just click one of the buttons above. 
i cant believe how laravel became this big, everytime i take a look at stuff built on it i lose a few braincells 
Thanks for the feedback. I will check out the phpdebugbar, maybe we can provide a general adapter. I also fixed the typo, Thanks! fabfuel
Yes, xhprof is a great tool. Prophiler does not compete with it, it's more an "always on" dev tool, what xhprof normally isn't. The name comes from the framework it was initially built for: Phalcon Cheers, Fabfuel
I am pretty sure you can use it on Wordpress too. I haven't tried yet, but you can probably include it right in your index.php...
blackfire.io is pretty cool, but quite different I think. It is more like a "locally installed New Relic". 'Prophiler' is just a quick and always visible way to check useful informations about your app.
Type `git init --bare .` and you've got your non-github git repo up and running. Git can be as simple or complex and elaborate as you want to make it. 
Why make it bare? You can just git init and never push the code. You really only use bare when you're hosting a git server. 
I'd recommend using bitbucket because it provides free unlimited public and private repos. It also supports git and mercurial. It's also always a good idea to keep a copy of your code "off site" in case the hard drive in your dev box dies. PHPStorm has git &amp; hg support built into the IDE so all you'd essentially need to do is setup git/hg on your staging &amp; production server.
I set it up on my development environment in about 2 minutes and found some really interesting optimization candidates right away. ...also seems like Laravel is spending 12% of CPU time in doing 1939 calls to studly_case on one of my pages...
You can't go wrong with git. Any specific concerns? Do you know how to use git or never done it before?
I only have enough experience with git, and it's very nice to use especially since it's properly integrated in phpStorm. If you don't wan't to use private github repro's you can setup your own gitlab server, it's not as smooth as github, but it's fairly close. If you don't mind using vps's, digital ocean has a gitlab image ready to go. There is a learning curve, Git has to click, especially using multiple branches with multiple team members. Here is an explanation on git workflow (i'm in favor of the git-flow method): https://www.atlassian.com/git/tutorials/comparing-workflows ps: ow man, big applications and no vc, be glad you can now remove all the commented sections that you think should be ok to remove.
It's based on an assumption you are using UTF-8, which is best practice (and which PHP generally assumes anyway unless told otherwise), yes. Inserting Unicode codepoints only makes sense for Unicode encodings, and nobody uses UTF-16/32. So for that reason I judged that it's unlikely to cause problems. If you're using Latin-1, why would you use `\u`? 99.99% of Unicode characters are unsupported by Latin-1. **EDIT:** I say "nobody uses UTF-16". More accurately, nobody uses UTF-16 *in PHP source code and string literals*, since PHP simply doesn't support it.
&gt; So my issue with this is that this is doing an encoding to utf-8 which is not apparent from the code Again, this is not true (the *to* specifically). You can append a UTF-8 code-point to any string and PHP will happily do that for you with something like that: $myString = getSomeLatinEncodedString(); $myString .= html_entity_decode("&amp;#x402;", ENT_COMPAT, 'UTF-8'); // Append Ђ - CYRILLIC CAPITAL LETTER DJE It's not the question here, that this in any way would make sense or be of any use. But when dealing with strings in PHP, the underlying encoding is not "changed". There is no such thing as an associated encoding with a string. So by appending _any_ code-point (not just from UTF-8), you do not change the encoding. You _define_ the encoding when you eventually output the string or you _define_ it with your default encoding. &gt; If you must do that, wouldn't it be better to convert the specified code point into the currently configured default encoding, and if the current default encoding does not support the code point, throw an error? I get your point and first I thought, this would be a neat idea. But on second thought this would be really confusing as it is "magically" happening (so you should have at least a trigger, a ini-setting or a dedicated function)! Moreover, detecting the currently used encoding is not possible 100% of the time, as the code pages overlap each other and you could have pretty "valid" output with two different encodings. So unless you actually look at the text and decide, this makes sense to me, you (or any program) cannot be sure, if the encoding is right. This would only work, if your code-point actually cannot be represented in the current encoding (which for example `iconv()` raises a notice as of today). My point is _not_ that dealing with encodings is easy (the "developer should have a pretty good overview" part). In fact, it is really hard if you don't know the encoding of the provided input (wherever that comes from). What this RFC and the "tool" it includes provides is a way to deal with UTF-8 code-points easy - if you already set your strings to be UTF-8 encoded. 
I didn't have such luck. The probe wouldn't install on my Ubuntu 12.10 Vagrant box.
Git, or mercurial, I wouldn't bother with anything else. Mercurial is easier to start with, if you are worried about git's learning curve, and it's fairly easy to switch between them, or any other DVCS, after you got the basics. You don't want to start learning SVN now, it's legacy. The only valid reason to go with that is "I'm too lazy to learn git/hg".
Git! I've come from CVS -&gt; SVN -&gt; Git and I couldn't be happier with Git. You don't have to use GitHub, you can point your repo to a "remote" that you host over HTTP, SSH, Local Path, etc.. IMHO it's an easy choice. 
Force of habit, I guess.. ¯\\\_(ツ)\_/¯
Git is well worth learning. It's everywhere and a valuable life skill.
Coming from a long and painful experience with svn... Go with git. Even working in your own, it's rampant list of functionality promotes vcs best practices (frequent branching, clean history, etc). Svn just doesn't compare in the end, take a bit more time and learn git 
If you're comfortable installing/maintaining ruby based applications I recommend [Gitlab](https://about.gitlab.com/) if you're looking for a web-based management application for git.
Have you considered Atlassian's [Stash](https://www.atlassian.com/software/stash) product? It's essentially their bitbucket product that you can host yourself. You probably don't need more than the $10 license and you can most likely install it on a t1.micro for free on AWS.
Forums and IRC channel, yes.
&gt; I guess I was more wondering if another, eg SVN, was easier to work with with my fairly basic needs? Nope. The Git integration with PHPStorm is phenomenal and you'll never have to leave your IDE if you don't want to. Anything that you need to do with Git as a one man show is built into the menus and changes tab. PHPStorm has support for other VCS as well, but Git is going to be the most polished for obvious reasons. 
so… it is a hosted web-ui for custom xhprof-based profiler and I have to upload dumps to their server. that's ok for most of my projects, but there's a couple where contract would prohibit doing something like that
Yeah, not really sure why I have 12.10 installed. That particular Vagrant box is super old.
I'm assuming this is for development environments only, no?
[Phabricator](http://phabricator.org) is another alternative (and it's written on PHP)
I'd point out that if OP really wants to keep it simple, there's no need to even have a remote at first. Just initialize a repo and start committing.
PhpStorm 8 comes with Blade template syntax support and works great with Laravel. Barryvdh's package is cool but I use the static ide-helper he provides because the package itself has had some trouble loading the service providers array. (this may be fixed now, I haven't checked)
&gt; The only valid reason to go with that is "I'm too lazy to learn git/hg". All DVCS chokes miserably if you give them big binary files. There are plugins/extensions that can make this happen to a limited extent. SVN is also good if you want centralized control for your assets. So I think SVN is still relevant for some usecases.
I second Gitlab. We use it at work, and it's essentially your own private version of github. it has some really nice diff tools and version browsers built in. It's probably the easiest way to manage a central repository, once you've got it set up.
They say on their that you could use it to see how your application behaves on a production environment. Sometimes you have some constraints on productions like memory but a huge I/O throughput which you didn't foresee.
I'd highly recommend git over svn for ease of use and flexibility - svn's been around for a long time, but there was still a need for git to be developed (not that VCS is ever "fun", but git is comparatively fun considering svn workflows, or at least that's how I recall the difference upon ditching svn). General workflow hasn't been described in detail, so here's a link to a site which explains all things git with pretty pictures: [Git Community Book](http://git-scm.com/book/en/v2) Use of any VCS should be **separate** from deployment. It's not the end of the world when it happens, but the time it takes a VCS to apply changes to the codebase will invariably cause problems if someone hits your production site while that's happening. Here's a quick run-down on seamless deployments if you want to script something up: 1. Create a copy of your codebase 2. Remove any files that don't belong with the deployed application (e.g. development config files, test uploads, VCS cruft) 3. Compress files and copy to production server 4. At the production server: unpack files to a versioned (e.g. YYYY-MM-DD-HHIISS) directory 5. Attempt an [atomic symlink swap](http://blog.moertel.com/posts/2005-08-22-how-to-change-symlinks-atomically.html) from the existing version directory to the latest version 6. If the swap succeeds, gracefully restart your webserver to ensure PHP opcode caches are reset
&gt; The only valid reason to go with that is "I'm too lazy to learn git/hg". If it ain't broke, don't fix it. I know, it's infuriating that some people out there do things differently than you do, but that's OK.
Gave it a try, I keep getting "Starting Blackfire Agent: blackfire-agent [FAILED]" in my vagrant box. 
Aha, this is the bit I was missing, I think - it looks like I don't even need to run a git server, I can do the basics just with regular git installed? Am tinkering with git init... thanks :)
This is very helpful, thanks - I was wondering if I could/should also include my deployment in VCS, but this model is similar to (OK, better than) my current setup. But it sounds like I can restrict VCSing to my dev machine. And the book is very useful!
Just store whatever ID you're generating for the link in your database and keep track or the number of times it is accessed. Once the limit is reached, don't allow access anymore. Done.
Go with **[fossil](http://fossil-scm.org/)**. It's rightly called GitHub-in-a-box, and its SQLite repo databases don't plaster checkouts with dotfiles, and easily allow carrying it around (to clients). The semantics are similar to other DVCS, but it's *way* less effort to get accustomed to (very lean CLI methods). It provides a built-in VCS browser (`fossil -ui`), adaptable [themes](http://fossil.include-once.org/fossil-skins/wiki/GitHub), a JSON API, built-in scripting (TH1 or TCL), and can import/export git repos if need be. PHPStorm even has a plugin for fossil meanwhile.
Dude, you've gone 10+ years as a php developer without using version control? I'm not sure whether to be impressed, or scared. As for an answer to your questions though: just use git. And check out /r/git for more info. 
Since you passionately disagree with my suggestion, I'm curious as to what your suggestion is for /u/Lighnix. OP's question is very clear. OP would like an example project to use as a tool for refining PHP knowledge and skills.
@sam_dark - convince me of why I should try Yii 2 vs Laravel 5 (to be released in January 2015) I was interested in Yii a couple years ago, but then I found Laravel and fell in love. Not because of marketing, because of awesome. Sell me on Yii 2, anybody.
Use git simply because it's the most popular. This is good for your career move and good for your company / projects. Adopt a feature branching workflow as soon as you can, again because this is good for your career and good for the business. Once you're familiar with the underlying concept, you can consider branching out and finding a solution that better fits your needs, though in truth they're probably all good enough that your time is better spent doing work rather than evaluating a less popular VCS. Further to that, check out http://www.phptherightway.com. The most important thing you need to do as a developer, is deliver results. With 5-10 year under you belt, I imagine you do this. However, given that you don't use a VCS I suspect you're lacking in a lot of other areas and with the community maturing, you'll find it harder to get jobs in the future.
touche :)
While the git intergration with PHPStorm is pretty good, I still prefer my git in the command line. It's really not that bad, especially for just one person to keep track of changes and stuff. https://www.codeschool.com/courses/try-git
Yup, pretty much. Although I'd recommend getting a server, once lost 3 months of progress because of this stupid mistake.
&gt;nobody uses UTF-16/32 This is a pretty ignorant thing to say. 
+1 for Mercurial. It is really good and It is such a joy to use it. IRC channels are also super helpful. You can actually speak to the developers if you hit some snag and they have been very helpful.
The biggest reason why I used Yii 1 and now Yii 2 is personal preference. I don't know how to convince you to change your preference. If you are convinced Laravel is the right framework for you, I cannot change that. While Laravel is excellent, the following points really make me keep using Yii. 1. Documentation - Yii is very very well documented. The Yii2 guide may have some work-in-progress sections, but if you can read the class documentation, there is no need to touch the Guide unless you are new to PHP in general. Every single class is well documented. Plain and simple. 2. Code organization - I like how Yii code that I write fits where it should logically without requiring me to create too many namespaces, folders or defining paths. The default folder and namespace structure is sane and logical. 3. Tooling - I have been coding on top of Yii 2 since the alpha days in PHPStorm. I am very pleased to say that Yii2 does not require special plugins, extensions or hacks to provide code completion, syntax highlighting, project view, etc etc. It works. It works well and improves upon my workflow from Yii 1 days. The Yii command line tool is another shining example of good tooling. It does few things and does them well. Also, there are no dependencies to manage/install just to get the Yii command line tool working. 4. Sane asset management - This is personal preference once again. I find Yii's asset management to be easy to understand and keep from coming in the way of my workflow. Not relying on Grunt or other build tools is freeing. Once again, it works out of the box. 5. Community and support - Once again, this is my personal preference. To me, a community does not have to be loud or even very visible on the front pages of high profile websites to be effective. Yii's userbase and community are among the quiet (in the media) and effective. I have yet to come across an issue where I was stuck because "That's not the Yii way" or "Yii doesn't support that". The people behind the project, Qiang, Sam Dark, and others are very very dedicated to the project and accompany the community as much as needed. I love that. All that being said, Laravel is a fantastic framework that is very active, has a very large following and I have nothing but good things to say about it. However, going back to my preference, and because I have invested time and energy into it, I will recommend Yii with two thumbs up!
Or, you know, back up your dev machine every once and a while.
well it's not for the community http://www.reddit.com/r/rails 25 present vs http://www.reddit.com/r/PHP 75 present
Great point!
Well said, and I realize I did not give any reasons for my enjoyment of Laravel, though they are legion, I just didn't have time at that moment. I will definitely check out Yii 2, I was impressed with Yii 1.x when I first looked at it. Build tools like Grunt are great, if you mean Gulp and not Grunt. I never cared for Grunt, if you are disillusioned by it, try Gulp, and http://slushjs.github.io/#/ - good stuff
Been using blackfire since I received an invite a month ago. What an amazing system. It was so easy to install the prob on both my local and production box and made comparing differences and testing patches extremely easy and enjoyable. Thanks for this great tool sensio!
do you think this would be useful if I already develop in Symfony and have the Symfony Debug Bar?
It isn't *in this context*. Handling UTF-16/32 in PHP is pain, the entire language assumes you're using an ASCII-compatible encoding. I don't think we even support UTF-16/32 source code, and the PHP parser chokes (or at least used to choke) on NUL bytes, so having a UTF-16/32 string literal in your source code isn't going to work well. **EDIT:** I checked, PHP does *not* work with UTF-16 source code. **EDIT 2:** [I elaborated more on this further down.](http://www.reddit.com/r/PHP/comments/2opcic/rfc_unicode_codepoint_escape_syntax_vote/cmq1jjt)
Svn might prove easier to work with but if you can take the time to learn git you'll be able to contribute back to the industry quicker. PhpStorm has amazing git support and there is http://try.github.com/ for learning the cli
Yeah that too
Also, is it really that hard to learn a new framework once you know one or two? As a symfony dev, im sure it wouldnt take me any longer than a few weeks to have a strong grasp on Zend 2...
Maxmind has a free version that isn't as acurate as the paid version. For timezones it should be enough. http://dev.maxmind.com/geoip/legacy/geolite/ Hostip.info will give you what they think is the lat/lon. YMMV http://api.hostip.info/get_html.php?ip=12.215.42.19&amp;position=true Some others I found with a cursory google search. https://freegeoip.net/ http://www.telize.com/ 
I mean there's really no reason to not "trust" git hosts like bitbucket and github. They're being used by tons and tons of large companies for public and private repos. If multi-million dollar companies can use them, I'm sure your personal projects will be fine... If you're really that paranoid, you can encrypt your entire git repo before it goes off to bitbucket/github. But I don't really think it's necessary.
Yeah, that should probably be rephrased. It certainly enables single page web applications, but it can be used to wire up pretty much anything.
There is a significant time investment in learning and mastering a new framework that cannot be understated. This argument is a valid criticism in this case, and I feel the same way many times.
There was a misconfig in the php.conf file. Once I identified it, it resolved the execution issue. Errors are now produced for the script but I am missing a source file which was expected. Thank you!
Pretty much, yes. Not everyone, of course - but the *vast* majority. Source: I've worked with Ruby/Rails for 3+ years, and still do PHP too.
Er, this is done at parse time, we can't look at encodings other than that of the source file. What other than UTF-8 could your string literals be in where `\u` would be useful?
Don't include the brackets in isset. http://stackoverflow.com/questions/14026361/php-multiple-checkbox-array
&gt; you are introducing this "alway encode to utf-8" into a small part of the language, which is why I think this is weird. We already do this in a lot of places. Are you going to complain that `\n` produces ASCII and not EBCDIC or UTF-16? Or that `htmlspecialchars` assumes UTF-8? 
&gt; Firstly: Not PHP. Agreed - might get a better response over at /r/programming
I have been using freegeoip.net. has had some issues lately but they added some rate limiting so hopefully it is better now. 
Yeah the free version would be my first port of call - if the accuracy ain't there you can always purchase the "pro" edition of the data. Usually I just fetch the CSV data and bring into MySQL/etc. and query it from there as needed.
I didn't say anything about mastering, and the time investment on learning a new framework, as long as you understand the concepts is not that bad
If you just loop that array to assign it to columns, your array is only going to have the items that are set. Unselected checkboxes won't be in that array and depending on what's selected you'll have different items at different loops of that array. Loop 5 won't always be the 5th item in other words. It might be the 10th item if the items 1 to 10 only have 1/2 of the items checked. Next time through if they're all checked loop 5 might be the 5th item. Just a word of caution.
`\u` makes a Unicode codepoint. But PHP doesn't have Unicode strings, so like all other escape sequences in PHP, it produces a UTF-8 encoded sequence.
&gt;so having a UTF-16/32 string literal in your source code isn't going to work well... Why do you assume that the string have to come always from the source code?
Well, because escape sequences should probably produce an encoding matching their surrounding characters, no? If you're doing UTF-16 handling at runtime, what should we do with escape sequences? We don't convert `\n` or `\xhh`, why should `\u` be any different?
Second this, I use it for my own personal projects and host it with some other goodies from Atlassian on a dedicated server.
Well, I can't say I've ever come across a software engineer who needed percentage calculations explained to them, but here you go: subset percentage = subset count / total count * 100 In other words, if Bob has 4 pieces of fruit and 1 of them is an apple, the percentage of his fruits that are apples is 1 / 4 * 100 = 25%. If i_make_snow_flakes has 647 comments in /r/php and 175 of them have a score below 1, the percentage of his comments with a negative score is 175 / 647 * 100 = 27% (or, 1 out of every 3.7 comments). The reason I cited your percentage of negative scoring comments is to disprove your defense that averages aren't reliable. For folks with inconsistent scores (e.g. with large spikes), an average can be deceiving. However, you don't have "a few bad comments" bringing down your average - you are just consistently negative. Anyway, being consistently unpopular doesn't make you a troll; but consistently trolling *does* make you unpopular. You happen to fall into the latter category, as anyone who reads your "unpopular comments" can attest. Trolls rarely consider themselves trolls, so I have no delusions of being able to convince you of that. This will be my last reply to you here, so sum up however you like. I'm looking forward to seeing you change your trollish ways in the future, and begin acting like a courteous adult. Have a great day!
Agreed - how you lasted this long without any form of version control/auditing/rollback - wow....! If you are just "starting out" with VCS, Git would be the default choice for most - or possibly Mercurial is more to your taste. &gt; They are also private, closed-source projects and I would rather do any hosting myself rather than eg private Github repo. Just use Git repositories to manage your projects on your local file system(s)/disks - no need to push to remotes if you are the sole developer. You might want to go the next step (like I do) and setup some bare Git remotes for your projects on a remote server/machine (I'm using Linux on a VPS) to push/pull project branches around. This could be remotes with GitHub/BitBucket alternatively (GitHub with a small cost attached too). I find this really handy as I can keep work synced nicely between several dev machines I use (home PC, Laptop, work machines, etc.) basically push/pulling work between myself.
In general, no. I much prefer to work with music on. If my office doesn't let us play music I'll have my headphones on full pelt. If you're not happy with it then say something, but be prepared to be labeled a miserable git. If they won't turn it down/off then get some good headphones and play something that wont distract you to drown theirs out.
&gt;May be because there is nothing to convert. First one is a single byte and the second once is denoting explicit values. Right? No, there is something to convert. For `\xXX` there isn't, but for `\n`, what if you're using EBCDIC or UTF-16? It won't be a valid string in either. Nor would `\u`, so what's the problem? &gt; So this is already implemented? Uh, no, no it isn't. That just describes how PCRE parses regular expression syntax.
I'll often do this trick assigning variables with isset: $items = isset($_POST['item']) ? $_POST['item'] : ''; As others stated, you don't need the brackets. Try doing a var_dump of $_POST['item'] to see how the array is made out after you submit. 
I disagree with this statement (Though I certainly enjoy Git as well) - Most of the complaints that people have (such as painful branching, or merge conflicts), were issues with SVN 1.6 and earlier. The latest SVN's at 1.7 and now 1.8 have solved all those issues, and are IMO a joy to work with. Now it's a different mentality of course. SVN is all about the 'one project' that you have trusted commits to. Whereas Git is designed to be perfect for the Open Source project with lots of people volunteering (but wanting a gatekeeper on what makes it in). They each have their benefits/drawbacks. But SVN isn't "long and painful" if you use the latest versions, as one should. 
&gt; You don't want to start learning SVN now, it's legacy Legacy? When it's being actively developed, and versions 1.7 and especially 1.8 have solved all the complaints that people had in the past (and keep rehashing)? It's not legacy, it's just another option. Both SVN and Git are awesome for specific use cases.
youtube "rain sounds" are pretty awesome
It's not obvious. Most version control features are system agnostic and will look and feel the same whichever repository you use.
We're using 1.8 and branch management and merging is as painful and arduous as always. 
Only one way to find out
Holy shit, HUGE bug on that site. I signed up, gave them my email, it logged me in as a completely different user, with their email. Gigantic red flag.
I've got you covered man. https://geodb.ga/ Enjoy. Just don't abuse.
Quite the valid point. I hadn't thought about it from that angle before.
It helps to be able to see it in call graphs. Yes, it's promoting the new Blackfire tool from Sensio labs, but separately from that it shows important characteristics: * The garbage collector ran many times * The calls to garbage collector accounted for a significant amount of the program's execution time * The garbage collector was not able to free memory at any of those calls Marketing or not, this is very helpful information that explains why disabling the garbage collector made the program execute faster.
If you're really concerned about it, look into how [Meteor](https://www.meteor.com/) does it. They execute the same code on server and client, so the button can be changed immediately and server corrects the client if it thinks it's wrong. This is basically what is described in top comment, but to a larger scale. Meteor takes care of this, you don't have to do it manually. So if you want to apply it on a big scale, consider trying Meteor for your next project. Also, I used both Ratchet and sockets.io (Node framework for Websockets), and if you decide to use them, I'd like to save you some time and say, if your project is written in php, don't use node, go straight for Ratchet. Ratchet might be a tiny bit harder to start using, but it fits nicely into your project and more importantly, if you use node, you start to have: 1) A lot of code duplication. Need to save to a database? Write it 2 times. Format a string? Write 2 times 2) A need to communicate between node and PHP. I used DNode for that, and it was quite clunky. With PHP you don't need remote code execution, therefore you can use ZeroMQ, that works perfectly for that and is able to work from normal PHP scripts and not just react-based.
OK, let me make things clearer: 1. Unicode can only be represented as a multi-byte encoding, there is no single-byte encoding for Unicode. 2. Of the multi-byte Unicode encodings currently in use (UTF-7 doesn't count), only one is ASCII-compatible (UTF-8).\* 3. PHP only works with ASCII-compatible source files, and thus only ASCII-compatible string literals. 4. PHP's existing escape sequences like `\n` or `\t` always produce ASCII. Now, your position, as I understand it, is that it doesn't make sense for `\u{xxxx}` to always produce UTF-8. However, as elaborated above, there's no other Unicode encoding it could produce which would be ASCII-compatible. So what, then, is the point of having the option of it producing UTF-16, say? `"\u{xxxx}\n"` would be garbage then, because while your Unicode codepoint escape produces UTF-16, *the rest of the string is not*. \*Actually, this isn't *quite* true, there are some Japanese and Chinese encodings that are ASCII-compatible. I'm not really sure what to do about them, though. They're the one case that'd justify having `\u` not always produce Unicode... but that would require the encoding of the source file to be declared and `--enable-zend-multibyte` so it'd not work consistently. :/
At this moment in my working place, in the room where I work, there is 8 people in total, mix of developers, sysadmins, supporters and the only solution to gain focus is to put on headphones. Funny thing is, when everyone is on headphones, and support does not have phone calls, it's like perfect silence out there :D In previous jobs, developers had their own room, 3 people there, we had speakers n stuff &amp; we played some music all the time (luckily we all liked same kinda stuff). That was really "chilloutish"
I'm not sure why music has to be broadcast by speakers. Surely everyone has different tastes in music anyway? Headphones or no music, in my opinion.
[http://ipinfo.io](http://ipinfo.io)
I appreciate that followup. Subscribing now!
With the `curl -L -O` command, the URL appears to be on the next line. I presume that's not deliberate? It's a good article, though I would say it is distracting when referring to "PHP Developers" to find that the phrase is hyperlinked to a site advertising a programming team. Hyperlinks are meant to be helpful _in the context they are presented_, which is not the case here - just SEO boosting. 
Personally I feel I work better with music on in my ears. I find that it blocks out other noise and allows me to concentrate without really listening to the music. I use different music based on different times of days and setup my playlists accordingly. Personally, if it bothers you, I would recommend getting some noise cancelling headphones. Those help very well to block out the music you do not want to hear. If you catch crap for it, just tell them you don't want to hear the music and the noise cancellation headphones help you to concentrate. They will understand. 
Yes. I assume this was mostly developed with Symfony in mind anyway. You can profile dev and prod environments so it's pretty useful to see what's going on in your production environment. Also the debug bar is going to take extra time itself so you can't get an idea of exactly what is getting run and how long it's actually taking. 
Same here, it keeps logging me in as a guy called Rudi.
WE ARE RUDI
https://packagebutt.io/gpg.key appears to be inaccessible. :( Edit: oh. wait... fucking cloudtobutt
If they won't budge then suggest that you should all be able to choose a few tracks in the interests of fairness, and then select some death metal - a bit of Nile, Cryptopsy and Deicide ought to get the message across! ;-)
If you run the site and are reading this, pm me I've seen this bug in production before recently, I may have a solution but would like to learn more if possible
If you're taken to a blank page you most likely have a syntax error in your code. Try enabling error checking on the page that's returning blank to see what the issue is.
What was the config you had to change?
Over the past 14 years I've gone CVS -&gt; SVN -&gt; SVK -&gt; Bazaar -&gt; Git. Wish I'd switched to Git years ago once it had matured, instead of sticking with what I knew. It has a very shallow learning curve and the amount of support available on places like /r/git and StackOverflow is phenomenal.
&gt;If it ain't broke, don't fix it. He has never used a VCS before, he's asking what he should learn. There's nothing to be "broken to fix".
I mean legacy in the sense that lots of big communities are moving/have moved away from it (php, linux, rails, lots more).
How on earth is this a good thing? 
Greatly reduced boilerplate.
Boilerplate for what? Who on earth uses the chaining and returns null for errors? How do you tell what went wrong? Do you lose the entire object? This is horrifying
Yes please!
Instead of having to do if($author = $post-&gt;author()) { return $author-&gt;name; } you would be able to do return $post-&gt;author()?-&gt;name; 
You said that the only valid reason to use SVN is because of laziness. Are you saying that in the context of this question, or in general? I took it to mean the latter, thus my comment, but if you meant it to be only directed at OP then I will rescind my snarky reply happily.
I'd need to see real-world examples of code that benefits from this to be convinced of its usefulness.
Granted - I'm not specifically that paranoid as such, just that I prefer to DIY - I prefer having the control, and learning something along the way - am now a (reasonably) competent sysadmin for most kinds of servers. Anyway, it seems that I probably don't need a server as such to get started - but if/when I do, I'll give it a go...
This looks really cool. Just one tiny thing, for the look up route you're not sending an ```application/json``` header, this is useful for activating browser JSON formatting extensions :)
I went through a bit of retooling in the last year or so, looking to migrate away from Codeigniter; I evaluated different frameworks and learned a lot from phptherightway - ended up making my own slim-type micro framework, but doing it therightway. Quite an education! But concur that git is likely the way to go for all the reasons stated.
Yeah, it's kinda weird that it evaluates the arguments and then doesn't actually call the function.
it allows chaining and returning null if one of the chained calls returns null, rather than getting a "Cannot call method on non object" error. Take Laravel for example: User::find(1); //returns either User or null if it doesn't exist so this can fail if the user doesn't exist User::find(1)-&gt;id; //will return an ID or throw an exception if the user doesn't exist this RFC suggests doing: User::find(1)?-&gt;id; //will return an id number or null if the user doesn't exist 
it's super useful in the case of ORMs, [see my comment above](http://www.reddit.com/r/PHP/comments/2ot15u/rfc_nullsafe_calls/cmqa8jm)
That sucks. It would still help (I could just make name a method that calls the prop) but it would be immensely more useful working with properties.
Ah I see, learning is always a good thing. Knowledge is power.
you are correct, didn't see that. Same thing can still apply to Laravel's eloquent by calling a function on the expected model: User::find(1)?-&gt;comments()-&gt;get(); // returns comments or null if user doesn't exist.
kind of silly that they aren't supporting member access, hopefully that'll change before it reaches a vote
I see how it may be useful but I think it'll just end up encouraging more bad code. There are plenty of improvements PHP needs, this is not one of them.
Yeah completely agree. Love the RFC idea but this part just seems wrong.
Agreed, please add proper JSON MIME type, please.
You shouldn't have to choose a framework with NetBeans (Unless something has gone seriously wrong in the last 2 years). I personally use PHPStorm, but it is payware.
With doctrine repositories, you can do $repo = $doctrine-&gt;getRepository('User'); $repo-&gt;find(1)?-&gt;getName(); // or $doctrine-&gt;find('User', 1)?-&gt;getName(); 
I could be doing something wrong in Netbeans. I start a new PHP project and it prompted for a framework. Stopped before going any further. PHPStorm has a 30 day trial so I can give that a shot. Any tips on getting the most out of the trial period? If it works out I may be able to convince management to get a licensed copy for me. 
+1. Great software and support. It wont be quite as quick and responsive as Sublime Text, but offers IDE level features.
I don't have it in front of me right now, but on the framework box I believe you can just click finish. I've written a bunch of projects using Netbeans without loading up a framework. For a free program it's pretty good! Good luck! **Edit: opened it up because I hate half-assed answers.** * File | New Project -&gt; screen pops up * PHP | PHP Application, hit next * Give it a name and location, pick your PHP version * From this point you can click finish and start coding If you want to run/debug from Netbeans, set up the run configuration to point to your index. You can leave all of the frameworks unchecked. You can search for and use composer packages or just finish out. I prefer to use composer from the command line. 
&gt; Due to an implementation detail, this decreases the maximum number of arguments a function can be called with from 2^32 to 2^31 No thank you, seems like a major BC break to me! /s Please yes!
But we already do this for `\n`... Why should byte strings suddenly cease to be byte strings because they interact with other byte strings?
Another vote for short-circuiting. Frankly it seems like [madness](http://www.youtube.com/watch?v=zRO2VUXQTAI) to allow evaluation of expressions after the chain has broken.
As a long time vim and sublime user, I recently started using PHPStorm (during the 40% off switch). I've been quite impressed with the features - it has made programming fun again. As far as getting value out of the trial period - check out [how to be awesome in phpstorm](https://laracasts.com/series/how-to-be-awesome-in-phpstorm) and [keyboard shortcuts you cannot miss](https://www.jetbrains.com/phpstorm/webhelp/keyboard-shortcuts-you-cannot-miss.html). Another thing you might not be aware of - there is an early access program (EAP) where you can basically keep downloading the beta's and using them, which will give you more than 30 days. 
I am a huge fan of KomodoEdit. I use it at work on a large commercial site, as well as on my personal sites. The part I like most about Komodo is that it is native (Python and C++) and it can be extended with Javascript. The Developers hang out in IRC and are always willing to help. Support for Windows, Mac OS X, and Linux. http://komodoide.com/komodo-edit/
Yes, it gives you much more fine grained information. Usually the largest problems are excessive db calls or unoptimized queries and the debug bar gives enough information to know where to start optimizing that. But, if you have other performance or memory problems that you can't find, this helps you out a lot. They have a blog post that walks you through a real world scenario: http://blog.blackfire.io/a-quick-profile-of-phpspec.html
Sounds ironic considering they run a [security advisories checker](https://security.sensiolabs.org/) and a [code quality checker](https://insight.sensiolabs.com/). There is a feedback tab in web-ui for the app, otherwise I guess you could reach them through their [company contact information](http://sensiolabs.com/en).
While not the main feature of New Relic, the pro version has something similar, but since it just branches off without merging calls to the same functions in different branches, it makes it hard to identify micro optimizations that could have a large impact on overall performance.
Red button on the right? http://screencast.com/t/zAUqHZXg8BW
Probably not.
Yes, I have seen that, /u/mseyedi has been posting about it (also linking to a blog on the domain that no longer exists, you killed his posts!) I will say, excellent job on the video though, was nicely done.
&gt;Who on earth uses the chaining and returns null for errors? The feature isn't really intended for that. I don't know why the author went with that example. See this example of the C# equivalent: http://blogs.msdn.com/b/jerrynixon/archive/2014/02/26/at-last-c-is-getting-sometimes-called-the-safe-navigation-operator.aspx 
http://blogs.msdn.com/b/jerrynixon/archive/2014/02/26/at-last-c-is-getting-sometimes-called-the-safe-navigation-operator.aspx
Indeed. It's certainly not how it works in the referenced prior art. 
With git, you basically have about 30 mins of learning curve that you are trading in exchange for everything you get from bitbucket, and you lose all the cool integration points that can enhance it when you work on a project with others. Also, they provide some if the best documentation out there.
And then you have to check whether you got null or real data back anyway. Why don't we just throw exceptions instead of returning null? You can chain method calls as far as you desire, and catch the specific types of exceptions you can meaningfully handle. I can't yet wrap my head around the support for this RFC, except for that it makes an easier transition from short-sighted code like the above.
If you can afford it then **PhpStorm** is definitely the best IMO. I've user Sublime Text, Eclipse, Netbeans, Aptana and a few others but nothing compares. PhpStorm is not only more productive for me (saving time and money) but also catches a whole range of bugs due to its great static analysis (that may have got into production).
It's called `bind`. And it's [trivial to implement](https://github.com/ircmaxell/monad-php).
most of them have their Drawbacks as their Strong Points? ;)
I am sorry. That was a typo mistake. I just fixed it. Please review about the other things. Thanks
Combine it with IdeaVim and it's awesome :)
&gt; It wont be quite as quick ... as gedit, kedit, notepad++,vim,emacs,... But it's IMO the best and well worth the money. Netbeans, though is quite ok if you're just dipping your toes. Actually, with an SSD the speed difference becomes insignificant.
Making your own micro-framework is pretty cool and a good learning experience, but it's not what you should be rolling in production. Oh sure, you'll understand what it does really well but your replacement wont and unless you've written exemplary documentation and released the thing in public there will be no learning resources or community help for them. You need to be able to write good code to be a good developer, but you need to be able to make good decisions to be a great one. Part of those good decisions is understanding your limitations, which is mostly time, and the limitations of others which should lead you to picking popular components unless you know better. Apologies for jumping on that; I am attempting to be helpful.
This is my favourite comment in this thread
Agreed. `?` is going to be the new `@` (error suppress) operator.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Law of Demeter**](https://en.wikipedia.org/wiki/Law%20of%20Demeter): [](#sfw) --- &gt; &gt;The __Law of Demeter__ (__LoD__) or __principle of least knowledge__ is a design guideline for developing [software](https://en.wikipedia.org/wiki/Software), particularly [object-oriented programs](https://en.wikipedia.org/wiki/Object-oriented_programming). In its general form, the LoD is a specific case of [loose coupling](https://en.wikipedia.org/wiki/Loose_coupling). The guideline was proposed at [Northeastern University](https://en.wikipedia.org/wiki/Northeastern_University_(Boston,_Massachusetts\)) towards the end of 1987, and can be succinctly summarized in one of the following ways: &gt; &gt;* Each unit should have only limited knowledge about other units: only units "closely" related to the current unit. &gt;* Each unit should only talk to its friends; don't talk to strangers. &gt;* Only talk to your immediate friends. &gt;The fundamental notion is that a given object should assume as little as possible about the structure or properties of anything else (including its subcomponents), in accordance with the principle of "[information hiding](https://en.wikipedia.org/wiki/Information_hiding)". &gt;It is so named for its origin in the Demeter Project, an adaptive programming and [aspect-oriented programming](https://en.wikipedia.org/wiki/Aspect-oriented_programming) effort. The project was named in honor of [Demeter](https://en.wikipedia.org/wiki/Demeter), “distribution-mother” and the Greek [goddess](https://en.wikipedia.org/wiki/Goddess) of [agriculture](https://en.wikipedia.org/wiki/Agriculture), to signify a bottom-up philosophy of programming which is also embodied in the law itself. &gt; --- ^Interesting: [^Responsibility-driven ^design](https://en.wikipedia.org/wiki/Responsibility-driven_design) ^| [^Dependency ^injection](https://en.wikipedia.org/wiki/Dependency_injection) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmqoe2l) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmqoe2l)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
now someone write a tool uploading all of them to https://security.sensiolabs.org/ and hacking with known vulnerabilities...
Also git files: https://www.google.es/search?q=site%3A*%2Fcomposer.json&amp;oq=site%3A*%2Fcomposer.json&amp;aqs=chrome..69i57j69i58.13385j0j1&amp;sourceid=chrome&amp;es_sm=93&amp;ie=UTF-8#q=site:www.*.*%2F.git%2Fconfig I think that's a serious issue that people isn't paying attention to
yes, i'm seriously considering a new career reselling elephant poo, spares me the bucking broncos im experiencing everytime i get in contact with this masterpiece. i also thought of becoming an electrician, probably less static there.
These files, like a config file, shouldn't be in your webroot. You want something like this:- * app/ * config/ * composer.json * composer.lock * public/ &lt;- web server points here * vendor/ Further to that, in a modern application, you might only have a single file in the public folder with your webserver sending all requests to that. 
Well I'm definitely going to take PHPStorm for a spin. So far the entire project I'm working on has cost nothing other than my spare time. If PHPStorm helps to make things easier then I think they'll spring for the licence. 
It's the first piece of commercial software that I've felt compelled to pay for at the end of the trial period, it really is fantastic. Set up your MySQL database as a data source in PhpStorm to get the most out of the database integration, it gives you all sorts of cool stuff (e.g. autocompletion of table and column names while you're composing a query inside a PHP string, auto-suggesting aliases for joins, etc.).
Tried the first one and got some vulnerabilities
Hey thanks, this looks pretty good! The only thing I can't figure out is how do you do the menu?
Why? Is there a security risk from exposing composer.lock? Edit: I get it now. You supply hackers with information of your dependencies, which may have known security exploits
Checked few composer.json from that list, a lot of them have `name: "symfony/framework-standard-edition"`. Trying to access `web/app_dev.php` and seeing the Symfony debug bar is scary, very scary!
"Strong security" for Joomla? Dude, that's in top 2 most hacked CMS's. Overall, sorry to sound harsh, but most points are useless or inaccurate. For example: - "Standard coding" - I doubt a CMS would even be in a top 10 of all if it would have "unstandard coding" - "Customizable themes." - All the themes are customizable one way or the other - "Not Blog Friendly" - The title was about CMSes, not about specialized blogging platforms - "Great Admin Panel", "Impressive built-in modules" - Visually, functional, in terms of speed, usability... or what? You need to elaborate a bit when you tell an opinion like this - "Workflow still I development" - huh? - "Couple of security issues." + "Many security vulnerabilities in a standard installation." - this rather creates confusion... - At Wordpress: "No official forum available to help users issues." - It actually has more than one million topics https://wordpress.org/support/ 
Yup, not sure if you are imply that it's a Symfony issue or not. However; from the ones I looked at, it was simply a misconfigured server, for instance, the first result for me was: http://frigiluxvzla.com/ You can see, if you go to that, you get bounced onto ./web/&lt;whatever&gt;/ The web folder is actually supposed to be the web root, i.e. there should be no 'web/' in the URL.
Defining a version or build number to a css or js file should fix that. "scripts/jquery-1.11.1.min.js?v=2.1" or "scripts/jquery-1.11.1.min.js?v=21648458"
Unfortunately method access is intentionally excluded from this rfc. With some of the other threads here I've gotten a grasp of some usefulness though this rfc has thrown most of it out
I don't understand how Google would ever find those. There must be a link pointing to those files, why would anyone do that? Is it possible to find the site's code from there? I know that there are files in the objects directory but they are all hashes so it would require brute force I think.
Thanks for pointing out my mistakes. :) 
Link to the repository: https://github.com/FriendsOfPHP/pickle/.
[**@Pickle_PHP**](https://twitter.com/Pickle_PHP): &gt;[2014-12-10 13:20:16 UTC](https://twitter.com/Pickle_PHP/status/542670130468376576) &gt;We released the 0.2.0 version! &gt; &gt;[*github.com*](https://github.com/FriendsOfPHP/pickle/releases/tag/v0.2.0) &gt; &gt;With love, &gt;\-Pickle's team. &gt; &gt;/cc [@PierreJoye](https://twitter.com/PierreJoye) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/2ov1f7%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
There are several constant named files: .git/logs/HEAD .git/index And many more
&gt; I actually tried writing my own application, but it just feels wrong. It's far too procedural compared to what I see in other applications. Sounds like you need to use a framework to get a feel for how applications should be structured. &gt; Surely there must be some open source applications that are neatly organized and fast? None that I know of. &gt; Preferrably vanilla php and not using a framework. Absolutely not.
It's asking for a framework because it's asking to do a whole bunch of setup shit for you, but if you aren't using a framework then you ignore it and just move on to the next page or finish. It's not a requirement. It's an opportunity for Netbeans to know what frameworks you are using, if you are using any.
This is too common in PHP, everything is placed in the public root, bad habits learned from CMS's.
**WORDPRESS** Drawbacks - Couple of security issues. A+ understatement. Would laugh derisively again. 
Correct me if I'm wrong here... But wouldn't exceptions resolve this whole thing well? Or is this trying to achieve silent errors? I don't see how this contributes anything positive to php as a language..
DateTimeImmutable has weird names because its API matches that of DateTime.
we are usually buying Maxmind's geoIP db once or twice a year, esp. if you have mostly users from a single country thats accurate enough, you do not need to get a recurring contract with them
&gt;Stop coming up with new names for things. It's called a null-propagation operator. Only in C#. In CoffeeScript it's the "accessor variant of the existential operator". In Groovy it's the "safe navigation operator". I don't see why PHP and Hack have to match C#'s naming. What's proposed here only works for methods unlike in C#, and may not necessarily have quite the same semantics.
Yeah, with Nikita's Exceptions in the Engine for PHP7 RFC, the error when calling a method on NULL would become an exception, and I don't see how what's proposed is fundamentally different from, say: try { return foo-&gt;bar-&gt;qux(); } catch (NullMethodCallException $e) { return NULL; }
That is definitely true when writing your own application. But what if you write applications for other people to use? Wouldn't putting all your files in non-public folders be messy? Especially accounting for all the different types of set ups, especially shared servers. Would best practice be to ask the user for the webroot, store it in a config and refer to it from then on? I think that could work?
I know (and sympathize). Still, the name sucks. Not only doesn't it modify the object, but it also returns a different object, something I would have never guessed (from the name alone).
Not all hosts even give you somewhere to put files that isn't public :(
Eh, the whole API is like that. It does the modification, but on a new object.
Shared hosting will always give you a public folder, and if they don't, you shouldn't use them. We shouldn't bend over for non-existent hosting companies that don't get basic security concerns; we should do our best to force people to move their business elsewhere when we encouter them. That said you shouldn't need to store your webroot in a config as your index.php or app.php is the first file that's going to be hit, thus everything should coded be relative to this and thus whether this folder is called public_html, public or webroot doesn't really matter. Most people on shared hosting will probably have a hard time actually running composer or a modern framework, and it's a security nightmare. It'd also be better if we just assumed VPS as minimum standard for hosting these days; It's $5 a month, if you cannot afford this, you're probably not hosting anything important anyway.
It makes it much easier for things to fail quietly. The class API can return null instead of throwing an exception when an invalid condition occurs, and developers can use the nullsafe operator instead of properly catching the exception. Sure it's *less* code, but it's not *better* code. I abhor quiet failures, like "returns a result set on success or false on failure". It lets errors wander through your application until they hit something downstream, like a blood clot.
Yes, it will be public. I'm a little confused what Apigility is. So it's a UI for building an API? Or building an API without coding?
Check out Phil Sturgeons book about building APIs https://leanpub.com/build-apis-you-wont-hate
It's a UI that helps you start an API, and if your needs aren't too crazy, you don't need to code anything. If you just needed to hook it up to your mongo db, you could do that. You define the routes and restrictions, including filters on inputs, API keys, versions and more, and it generates the PHP code for you. If you need it more custom you simply edit the code. There is a lot that goes into a public API, this helps you get down to the core of what you want to do without having to deal with the less fun stuff of API building. 
I was just looking at another book on leanpub, recommended by a friend: https://leanpub.com/restful-api-design I'll end up picking 1.
Komodo is pretty nice.
Writing open source code I have no control or even contact with who uses it. The other option would be to correctly chmod your files, which provides the same level of security as hiding the files away AND works on every host with no fuss. &gt;That said you shouldn't need to store your webroot in a config as your index.php or app.php is the first file that's going to be hit, thus everything should coded be relative to this and thus whether this folder is called public_html, public or webroot doesn't really matter. What if they install the application two folders deep into their public folder? You're assuming one directory back is not web accessible which is incorrect (the code has to make an assumption where the non web accessible folder is). Example would be running a blogging engine, a forum, and a support system all separately. Also can you link to the $5 VPS? In my experience a weak VPS performs worse then a shared server, especially when your website receives light traffic (like 50 people on at the same time). 
you just described php-fpm.
I'm genuinely curious how many support tickets that dumb extension has caused.
It's usually worse when it's SVN, example: http://www.nationaljournal.com/.svn/entries Wrote them a couple of emails several months ago, no response. This is incredibly common, and in the worst cases it allows for you to download the entire source code in the working copy through .svn/text-base/index.php.svn-base etc.
That's not why google finds them though. Google doesn't scrape pages that have no one linking to them.
As /u/_tenken said, this is exactly what php-fpm does. You can google for "LEMP stack" and you should get some guides for setting up nginx+php-fpm. 
I've owned Phil's book for about close to a year as I've been developing a large REST API at work, it's been hugely instructive. I bought it a few months into the project and facepalmed at some poor design decisions it was too late to change (and later came back to bite me).
&gt; The other option would be to correctly chmod your files, which provides the same level of security as hiding the files away AND works on every host with no fuss. &gt; What if they install the application two folders deep into their public folder? You cannot write code that accounts for stupid. If folks can be trusted to chmod, they can be trusted to put their code in the correct directory, something which has been an established best practice for many, many years. Further to that, I'd be suprised if chmod worked on windows hosts, but there you go. &gt; Also can you link to the $5 VPS? https://www.digitalocean.com/pricing/ Do you really write popular open source software that you expect to run on shared hosting solutions by the way? As someone who's worked in the hosting industry, the security implications of shitty software or programmers who don't understand basic security is the reason shared hosting is never really viable long term. You shouldn't cater for this audience, someone is always making it super easy to pwn the boxes and only really the unpopular hosts will give you a better experience than a DO vps. Not that I think DO vps are the best in the business, just good enough when your site isn't important enough to spend money on.
Uh, yes, you can get a VPS. I know, I use one. That doesn't change the fact that a lot of people use shared hosts.
&gt; I'd encourage you to investigate transducers if you're thinking of proposing something for PHP core. I don't have something I can share at the moment, but I think I have a solid start on a library that provides data structures and algorithms (which includes transducers). I'll certainly ping you for feedback when it's shareable.
I just want to get this clear, are you saying keeping files in non-web accessible folders is safer then, OR equal to files in a web accessible folder with correct permissions? and PHP gives us a rather easy way to make sure files have the correct permissions: http://stackoverflow.com/questions/5919638/php-check-chmod-permissions-for-folder 
Trying to understand your question after reading it twice, I gave up. Not using an opensource framework is redundant. Suggestion: laravel, phalcon 
Are those composer.lock files (any of the first 10 results, say) **long** or is that regular length?
&gt;You shouldnt upload unecessary files on the server anyway.composer.json is in no way usefull for an app,unless your deployment depends on it. Why? What if you pull down the dependencies on the server, to avoid having to upload them?
I like to symlink to my public directory. Seems to work very well.
Uhh.. what
&gt; when the apache2 daemon receives a request, it starts the PHP interpreter As others have stated, not with mod_php - PHP is running as part of the Apache childs. What you have described is CGI/FastCGI. &gt; Is this how it actually works? This seems slow (to me) because every request requires a new instance of the PHP interpreter. Also, there's the overhead of starting the interpreter in the first place. PHP-FPM doesn't quite work this way. It manages a number of "childs" to which PHP requests are passed to (say from Nginx, or Apache if you use mod_fcgi/etc.) - PHP-FPM can be setup to control a fixed number of childs, scale up/down based on load/requests/etc. Also, PHP-FPM can be setup so that childs live forever (e.g. they keep serving requests over and over without ending) - or, how I set things up - the childs will live for X number of requests - which can overcome memory leaks/etc. with the childs. I find this nicer - there is always an "active" pool of childs ready to take requests instantly and they will spawn/die after they have exhausted their handled request count. &gt; Would I be able to set this up with Nginx or Apache? Again, I'm using apache2 right now but I plan on switching to Nginx when I get the chance. Self promotion, but should get you to grips with the basics: https://github.com/magnetikonline/webserverinstall.ubuntu12.04
You can use [Restler](https://github.com/Luracast/Restler).
I wish an extension installer would be some day integrated into Composer, so that when a package requires per example "ext-mcrypt", Composer would automatically install it if need be.
Exactly, at very least a composer.lock could be used to install the dependencies 
add the following line to the robots.txt file: Disallow: /composer.lock Disallow: /composer.lock/* This will stop Google indexing those files. To remove the current ones from the Google's index go to Google Webmaster Tools for that site and request remove the URL's. They will disappear completely in a day or so. I hope this helps.
...come again?
Have you ever programmed in a statically typed language? If not, you wouldn't see the benefits of this RFC.
&gt; In php encodings always happend through a function, and the target encoding is passed explicitly. Right? What do you mean? String literals aren't abstract strings of abstract characters that magically become encoded a particular way when used somewhere. They contain bytes encoded whatever way the source file is. Escape sequences produce ASCII-encoded bytes. &gt; So why, for just this instance, we are encoding the codepoint always to utf-8? Well, what else would it be encoded to? It needs to be encoded to something, and having it change based on the encoding chosen would be inconsistent with other escape sequences.
This is company music. We have speakers up on a half wall playing music for the whole office. And most of the time, it's shit (either hiphop, or dubstep, or hipster indie shit)
That is the purpose of pickle
I think that was the intent...
Tell me what the "correct permission" are and which user is running the code and under which circumstances I'll retort on whether or not it's actually any safer.
Which hosting companies do this? I've never come across one, but as I stated above, you'd be better not using them.
If I'm not mistaken, the investment is only $100, which will give you a year's worth of updates. The yearly renewal (which seems to be $50/year) is only for receiving updates after your initial year is up. I think that made sense...?
Thanks for the help! :)
how much of a security problem is this in reality, ok, so people can find out what software i use...admittedly if there are known issues with a specific piece that might be an issue but if ive got that installed and in use someone knowing so is probably the least of my problems.
Menus are done by templates (so not all templates might have menus). For example in the default one, the menu is optional. You can configure it in a `couscous.yml` file. Have a look at the readme of this template: https://github.com/CouscousPHP/Template-Light
Try http://apiary.io. I've had some good experience with it recently.
Unless there are notable differences in the router's speed compared to others, "lightweight" is kind of meaningless as a metric. Unless they're creating problems I don't pay a lot of attention to package dependencies.
What's the use case for a query builder returning null from a normally-chainable method?
This book is REALLY good. I like how Phil often describes more than one way of solving a problem, and then recommends the approach he prefers. A must read if you're developing an API in PHP AFAIK.
MMmmm nginx+php-fpm, good stuff
came here to say this, imagemagik would be my choice.
Agree, you will need a JavaScript call to the PHP server. Validate everything in the back. I would recommend understanding how the http calls work, and drawing out an architectural diagram so that it makes sense before you start coding.
Oh, missed that part of the README. Back when I first heard about it there wasn't any talks with Composer, glad to hear this
I imagine the market is so small, you won't find training outside the official Zend ones, which are all online or self guided.
Imagemagick. You'll also need to install Ghostscript for the conversion to work. convert -density 300 -quality 100 -resize 600x file.pdf[0] file.png This would generate a 600px wide PNG file (height would be automatically calculated) for the first page in the PDF. You can also ignore the `[0]` to create images for all pages. If I remember correctly (it has been some years) then the order of the arguments matters. Otherwise the images will look badly.
Try also site:www.*.*/.gitignore . I bet you there is at least 1 idiot out there having his db credentials in an yml/ini file that is nicely printed in gitignore
Is this lightweight enough to you? // Wrap these to namespace, in a class static methods or in some object if you wish function get($path, $func) { return route($path, $func, 'GET'); } function put($path, $func) { return route($path, $func, 'PUT'); } function post($path, $func) { return route($path, $func, 'POST'); } function head($path, $func) { return route($path, $func, 'HEAD'); } function delete($path, $func) { return route($path, $func, 'DELETE'); } function route($path, $func, $methods = null) { if ($func === false) return false; static $method; if ($method === null) { if (isset($_POST['_method'])) { $method = $_POST['_method']; } elseif (isset($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE'])) { $method = $_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE']; } else { $method = $_SERVER['REQUEST_METHOD']; } } if ($methods !== null) { if (is_array($methods)) { if (!in_array($method, $methods)) return false; } else { if (strpos(strval($methods), $method) === false) return false; } } static $url; if ($url === null) { $url = parse_url($_SERVER['SCRIPT_NAME'], PHP_URL_PATH); $url = strtolower(trim(substr(parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH), strlen(substr($url, 0, strrpos($url, '/')))), '/')); } $path = strtolower(trim($path, '/')); $scnf = str_replace('%p', '%[^/]', $path); $prnf = str_replace('%p', '%s', $path); $args = sscanf($url, $scnf); if (substr_count(str_replace('%%', '', $prnf), '%') !== count($args)) return false; $path = vsprintf($prnf, $args); // if all you need is matching just "return $path !== $url;" here if ($path !== $url) return false; $args = array_map(function($value) { return is_string($value) ? urldecode($value) : $value; }, $args); return is_callable($func) ? call_user_func_array($func, $args) : call(is_object($func) ? array($func, strtolower($method)) : $func, $args); } function call($func, array $args = array()) { if (is_callable($func)) return call_user_func_array($func, $args); if (is_string($func)) { if (file_exists($func)) return require $func; if (strpos($func, '-&gt;') &gt; 0) { list($clazz, $method) = explode('-&gt;', $func, 2); if (class_exists($clazz)) { $func = array(new $clazz, $method); if (is_callable($func)) return call_user_func_array($func, $args); } } } return $func; } And you may use it like this: // calls closure with two arguments (arguments are correctly typed) // ... and cancels further processing. get('/test/%p/%d', function($str, $num) { die('Hello'); }); // calls object-&gt;method with two arguments and returns whatever // the called method will return get('/test/%p/%d', 'obj-&gt;method'); // calls $obj-&gt;get with two arguments and returns the results get('/test/%p/%d', $obj); // calls clazz::staticMethod with two arguments and returns the results get('/test/%p/%d', 'clazz::staticMethod'); // calls phpinfo() function and return a boolean get('/phpinfo', 'phpinfo'); // requires include.php (that can access args with $args) and returns null // or if there is return clause in include.php then it returns that get('/test', 'include.php'); // returns true if matches get('/test', true); // returns 15 if matches get('/test', 15); // returns false (as there cannot be # in url, at least one that can be read // on server-side - fragments are client side only) get('/cannot#match-this', true); // if there is url like http://mydomain.com/test%2F this can be matched like this: get('/test%%2F', true); And this works just fine, if your web application resides in a subfolder like http://mydomain.com/myapp/ (i.e. you can move it whenever subfolder or root without modifying routes). No regexes, just simple plain old sprintfs. Not as flexible as regexes (or a custom parser) for sure, but still quite flexible and handles data types and conversions as in sprintf. There is added %p which matches anything but /. And I'm quite confident that this is fast.
[Relevant](https://philsturgeon.uk/php/2014/10/20/php-wars-attack-of-the-clones/) Writing something like this can be a good exercise, and not necessarily a waste of time, but I don't think this package needed to be released.
Any package can be released, it's as good as free speech. The choice on wether someone uses it or not is entirely up to them.
Try cloning the repository and finding out.
Is there a way to limit what information this stores on their servers?
I can do that, and there are ways to check beyond doing a diff on files. The trouble is, there could be libraries both scripts used that were written by someone else but included in both projects, and unless the script is entirely the same you cannot really with 100% certainty say two scripts were written by the same person. Looking for clues isn't a problem. I can do this for you but I would have to charge an hourly rate. EDIT: I've been a full time LAMP developer for 6.5 years, and have freelanced as a LAMP developer before that for 2 additional years.
Your best bet is to probably find the local PHP users group that meets in your area and go from there. Assuming you're in, or close to, a relatively large city, this shouldn't be too difficult. Ideally you find a Certified Zend PHP Engineer with a good reputation and probably 10 - 15 years of PHP experience. You should be able to find someone like that in your area via the local PHP group. That's not to say that there are probably plenty of highly experienced PHP programmers without that certification local to you that would be qualified to review and testify. I'm just assuming that for legal purposes, it would look better in court when going over the persons credentials regarding PHP and it's really the only PHP certification. It should be pretty easy for any experienced PHP developer to see if the PHP back end code for both sites is exactly the same, or even if it's sharing a majority of the same code. Something like that would be readily apparent. If you are only talking small bits and pieces of code being the same across a large codebase, it will take more work. However, if you are talking about proving that someone wrote both pieces of software based on an "individual's style", assuming the code being reviewed is not an exact duplicate, it may be be significantly more difficult. This depends largely on the nature of the system involved. 
But how does the crawler end up on those in the first place?
I tried telling the HTML5 Boilerplate maintainer about this, but he told me to go fuck myself. I warned him. But oh well.
Nobody has mentioned yet that the performance benefits of the CGI/FPM model are far from guaranteed for your PHP application. There are tradeoffs between the two, but performance rarely enters my mind when choosing, even for very highly concurrent services. One data point: http://www.eschrade.com/page/why-is-fastcgi-w-nginx-so-much-faster-than-apache-w-mod_php/ 
Don't just hide your problems, fix them.
You can try IP2Location DB11 Lite version. It is free with Lat/Long, Zips and Timezone info. http://lite.ip2location.com/
Awesome, I've not heard of Meteor so I'll check it out. Thanks for the good information!
Yes. That whole file would change to like 6 lines.
Care to explain a bit more? The method existence checks will still be there, even if there is autoloading and namespaces. As for the `set_include_path` calls, even in an autoloader I would have to set the locations.
It doesn't matter if the autoloading is from a single folder, or a bunch of them. I know there won't be much difference except for the annoyance of refering to native classes and functions with a namespaced name (prefixed with backslash). I was just curious about whether a more "modern" coding style justifies the annoyance.
An autoloader, with PSR-0/4 you don't really have to do much, and pretty much nothing if you use composer. // In your front controller // public/index.php &lt;?php require __DIR__.'/vendor/autoload.php'; // Do your stuff? $resolver = new Package\Resolver; $resolver-&gt;resolve($controllerName, $methodName); and // In your Controller Resolver // src/resolver.php &lt;?php namespace Package; class Resolver { public function resolve($controllerName, $methodName = '') { $class = 'Package\Controller\\'.$controllerName; $controller = new $class; $action = isset($methodName) &amp;&amp; method_exists($class, $methodName) ? $methodName : 'index'; if (!($controller instanceof \Package\Controller\BaseController)) { throw new \Exception("Controller must extend BaseController"); } return call_user_func_array([$controller, $action], $requestData); } } Ended up being more than 6, but, simpler non-the-less. Also, you shouldn't have to worry too much about throwing exceptions for classes not existing, as that will happen naturally, when you try to construct a class that doesn't exist. To explain composer a bit more... In this situation, you would have a composer.json file that has the following lines { // ... "autoload": { "psr-4": { "Package\\": "src/" } } } Changing `Package\\` with your namespace, and `src/`with the location of your PSR-0 abiding classes/files.
In my example, as it is not namespaced, the scope is the global one. Currently, the executing directory is the root ('./index.php'), 'SomeModel.php' is in '/models/', and the `require_once` statement is in '/controllers/'. Because I have `set_include_path` statements, the system searches all the folders it can for the 'SomeModel.php' file. As for the `use` statement, most of the calls to the models or other classes will be done from the controllers namespace (example: `\Nmsp\Controllers\Profile`), that's why I would need the `use`.
&gt; Because I have set_include_path statements, the system searches all the folders it can for the 'SomeModel.php' file. That just sounds scary... Besides the fact that you can't have multiple files named the same thing, The benefit to the use statements is that you know exactly what class the code is working with. If i were to look at your class, i'd have to figure out where (bad example here...) "SomeModel.php" is... As opposed to a use statement, i know that i need to look in `src/Nmsp/Models/SomeModel.php` (similar reason i have beef with laravel's facades). Your method is also going to be slower than the composer autoloader method, as it has to search for the class in the files.
That sounds like a nightmare to maintain. Reflection shouldn't ever be used in production code and the projects that do so use it to hack in annotations which php doesn't yet support. That's my first piece of advice. My second piece is you're already autoloading from what I'm reading so separate out the autoloading part so each piece of your code is individually doing less. Boring code is easier to work with long-term. Namespaces help you keep everything organized. If you're only dealing with a handful of classes, then it's not really a big deal. Before namespace support was implemented, we just namespaced class names instead. If you're including other projects, say via composer, then namespace your own stuff. You don't need to worry about backslashing everything either: namespace My\Project; use \Exception; $exception = new Exception; Then later if you want to create your own exception class extending the base: namespace My\Project; use My\Project\Exception as Exception; $exception = new Exception; The new class would be something like this: namespace My\Project; use \Exception as BaseException; class Exception extends BaseException { // ... } It's just a way to organize stuff, and when namespaces are used with psr4, it's just how the autoloader looks for them. When namespaces weren't supported, psr0 actually explains what we did to namespace the actual names instead; this difference is why psr0 and psr4 conflict with each other. The namespaces could directly represent file structures, or the files could all just be in the same folder; whatever you do is your choice in the end. An alternative to your reflection usage could be what I have below. The logic is the same, but avoids direct usage of reflections. Whatever you end up doing, unify your current duplicate code where you actually invoke the controller with your arguments so you have it once. if (!file_exists("controllers/{$controllerName}.php")) { throw new Exception("Page not found"); } require_once("{$controllerName}.php"); $controller = new $controllerName($requestData, $auth); if (!($controller instanceof BaseController)) { throw new Exception("Wrong type of class"); } if (!isset($methodName) || strpos($methodName, '__') === 0 || !method_exists(array($controller, $methodName))) { $methodName = 'index'; } call_user_func_array(array($controller, $methodName), $requestData); 
I agree with most people here who recommend Git. I haven't had a ton of experience with other VCSs but I really enjoy Git and it is quite simple to use. That being said, it is well worth your time to learn how to use it through the command line IMO. There are going to be times when you need to use some of the functionality where you can't use a GUI. Especially if you are working with servers where you're going to be deploying changes to by pulling in the latest working version of your git repository.
That is just one of the downsides to not using namespaces and autoloaders.
Don't be so afraid of Reflection :) Actually, having just 5 classes, the `index.php` and `.htaccess`, this decision (autoloading and namespaces) is the only large maintanence in quite a while. The code is separated, I just placed it together as a relevant code. As for the current Reflection use, it's just my preffered way of doing it (I also work in Java), this way I have more control. ^(I was also even thinking of using annotations, but at the moment I don't have the need for them.)
Shouldn't be that hard to compare the two. A single programmer would write basically in the same style. Pretty much like their handwriting. 
Are there really any hosts that give you ssh access, but not a folder that is not public? 
This was my thoughts exactly. composer.lock and json doesn't really contain anything super sensitive in my experience (at least in the symfony apps I've made anyways) it's just a dependency list afterall of course it's always fun to easily crack into a website and see what powers it ;)
Go with a well opinionated framework - they (Silex, Para el, Yii2) all support restful routing and often provide some great out-of-the box solutions for building an API (just return the object/collection and observe the magic ;)). I'm a great supporter of lightweight frameworks but every API is a serious stuff that one day may need a lot more than you now think. (not Para el but Laravel - I'm on mobile sorry)
&gt; If I find someone and it is possible is PHP code personal enough that someone can demonstrate that both sites show the same individual's style? If there is *enough* source code, and they were both written within a short time of one another (or the person who wrote them has been doing it for a very long time), *maybe*. Here are some factors that could cause the code between both sites to look *different*, even if it's the same developer. 1. An individual developer's habits, patterns, and styles change over time. The code I personally write now looks and feels different than code I wrote 2 months ago, which is very different in style from code I wrote 2 years ago. Hell, sometimes my coding style evolves over the course of a single project, and it looks like two different people developed it. 2. Technology changes, which forces or encourages changes in coding style. Again, depending on how far apart the two sites were written, technology changes (e.g. new version of PHP) could result in very different approaches to solving the same problem. 3. There are almost always several ways of doing the same or similar thing in PHP, and it's common for one approach to be used for one problem context as it's something the developer learned a long time ago, but a new problem context doesn't trigger that "cached solution", and the developer approaches it a different way, regardless of the time space between the two projects. 4. Following of tutorials or straight up copying/pasting others' code could lead to disparities in the signature style of the code. Some code on site A looks one way because it was copied from one source, while other code on site B looks different because it was copied or influenced by another source. 5. The use of different tools and libraries tend to nudge developers towards one style vs another. If the two sites were built on different foundations, those foundations can tend to influence the specific style with which the application that is built on them, is written. If I built site A in Klein, and then a week later built site B in Laravel, it may be difficult to tell that I wrote both. Here are some factors that could cause the code between sites to look *similar*, even if they were written by two different developers. 1. PHP is open source, and open source involves shared code and libraries. The usage of the same library between two developers on two separate projects could make it look like the same developer wrote them, because in essence, the same 3rd party developer *did* write some of the code that both sites are using. 2. PHP has what's known as the Fig PSR standards, which encourage a specific naming style and convention. Literally, where you place your opening `{` in certain contexts, is outlined by PSR. Two different developers who closely follow those PSR standards, will have similar looking code. 3. Again, being open source, there is a kind of shared culture that people learn through osmosis. Naming conventions, styles, patterns, solutions etc, are all out there via tutorials, videocasts, source code etc. I personally have been heavily influenced by the quality work of others, and seek to make my code mirror theirs. Two developers doing the same, could have converging styles. 4. Beyond the PSR standards, there are long-standing patterns as well as principles known to programmers, which look as their name implies: like patterns. There are many of these (SOLID principles, factories, abstract factories, observer/subscriber etc etc) which if followed closely, would obfuscate the differences between one developer's code and another. 5. The nature of the sites themselves. Similar sites can sometimes lead to the same selection of approaches and patterns (at a high level, anyway). And finally, here are some factors that could implicate the developer of site A, as being the developer of site B 1. Consistency of course is the thing to look for. If there is no consistency in things, then nobody can confidently say the same developer developed both sites. Those consistency factors could be: 2. A non-conventional style (non-conventional, meaning with respect to what the conventions were at the time they were written). For example, today's class naming conventions is to use title case (ThisIsATitleCaseClass). A few years ago, it was to use title snake case (This_Is_A_Title_Snake_Case_Class). But seeing class names like that for code written *today* could indicate someone following their own personal conventions. Or years ago it was en vogue to prefix private methods with underscores, (e.g. `private function _mymethod()` or `_my_method()`), but not anymore (again, Fig PSR standards). 3. Choice of words and language used when naming classes, methods, functions, variables, strings, and comments. No different than if you were writing normal prose - your choice of words, sentence structure, grammar, punctuation, and many other things create tells. 4. Sometimes people don't initialize properties on objects, which is bad practice, and could be a tell. 5. Some people heavily use class constants or global constants, others don't. Consistency in class constant usage could be a tell (especially when combined with language/wording analysis). 6. A *big* one that I would look for is abstraction level affinity, as this is where you may find the most similarities in code from the same developer, *provided you have enough of it to look at*. Some developers like heavy abstraction, keeping methods and classes very short and focused, but using lots of them. Other developers shy away from abstraction, and use large, blob-like chunks of code in fewer classes and methods. Others still tend to mix abstraction, and observing two code bases side by side could highlight those similarities. 7. Another big one is how certain problems were solved, provided they weren't solved with a library. Problems that are too low level or specific to be guided by a pattern or principle, but not so low level that they are basically language constructs. This one is kind of hard to explain, but consistency in certain "habits" and preferences can point to the same developer, as those habits generally vary from one developer to the next. 8. Comments. If there are any comments, these are often written like prose and if similar and consistent, are strong indicators of the same developer. 9. Folder structure of application. Goes back to #1, an unconventional folder structure that happens to be similar or the same between the two applications/projects could call out the same developer. 10. The use of the same libraries, if those libraries are not open source and available in the public space. This would be a strong indicator, as presumably only the same developer would be re-using their own private libraries. 11. If github or another VCS host was used, ***this could be a smoking gun***. Simply looking at the remote path that was used in each project, and/or the commit author info, could tell you instantly if it was the same developer (but *wont* necessarily tell you if it was different developers!). You can even use the wording in the git or svn commit logs to compare the author of each application. There are many other factors, than this of course, but given the first two sections, determining whether the similarities implicate the same developer requires the following information: 1. The nature and intended purpose of each site 2. When each site was written (the more exact, the better) 3. The more source code to analyze, the better. A handful of lines is not enough (and not just PHP, but the HTML, CSS, JS or LESS/SASS source as well) 4. How long the developer in question (if there is one!) has been writing php, html, css, javascript, and any other language used in the application. Specific time frames for each language would be helpful. 5. For confidence, pray that version control was used, and attempt to obtain the version control repositories (either locally from the machine, or remotely if hosted on github or bitbucket etc)
You can use autoloading without dependencies though
This is very vague. I'm not really sure if you're looking for how to do it, or if you are looking for simple tips?
Not necessarily; I find that my coding style is constantly evolving, and I've been working with PHP for about 14 years.
My error message is also "we dun goofed"
I'm not saying this is the only place you should look, but you can start on the Zend Yellow Pages: http://www.zend.com/en/services/certification/zend-certified-engineer-directory
There's a mailing list with some good information for building REST applications with Symfony2 here https://groups.google.com/forum/#!forum/resting-with-symfony
No apology necessary, input is always good :) This wasn't a decision I arrived at lightly - I had been happy using CI and had every intention of using another supported framework. But I realised I had already made a framework for the kind of internal business apps I develop - mainly consisting of DB/interface/reporting/etc code - that I would have to port to whatever framework I went with. I was really only using - and only needed - the basic MVC/routing/IO to support it; so eg Slim was almost enough, but not quite, hence doing my own. It's only about 2000 loc, around half of which is various utility stuff I've built up and would add to any framework anyway. The rest is as maintainable - if not more so - than keeping up to date on a bigger framework. Again, this fits the kind of jobs I do at the moment; If I were to undertake something very different (especially something other devs would work on), I'd certainly reevaluate for the job in hand.
Not totally true, if someone with Google toolbar visits the page then that could be a trigger too. More likely though is that directory indexing isn't turned off, so visiting the folder on the server will pop up a nice list of links for everything within.
The reason is that Hoa\Iterator has revealed bugs in php-src and HHVM and fixed them. This is where the “bug-free” comes from.
Or multiple developers could write similar code using a common coding standard
When you phrase it that way, any answer is correct. We need a more concrete example. Let's say we're building a LinkGenerator class. It has one job: generate a link from a $url and $text. But the text needs to be clowncopterized* before being used! You now have three options: 1) If clowncopterizing text is an essential part of the LinkGenerator API, then we add a public clowncopterize() method. But the very naming tells us otherwise, we have a LinkGenerator class, not a LinkGeneratorAnd Clowncopterizer class. 2) The clowncopterize() method is an internal helper. You don't see a point in using it independently. Keep it as a protected method. Once it becomes needed in another class, move it to a trait. 3) The clowncopterize() method is a public helper. Other parts of the system might very logically want to clowncopterize their own text. In that case, create a Clowncopterizer class, and inject it into the LinkGenerator. Note: You want #3 more often than #2. * - Phabricator used to use Clowncopterize as the submit button label. 
If an an internal method of some class may be useful somewhere else consider extracting these method(s) into a separate class and pass it as a dependency. In my experience pretty much all protected methods of a class can be extracted as public methods of a nested dependency.
Oh, I definitely fully support using a micro. Just that, in order to get to where you are, I'd have probably started with slim, silex or similar. That said, if all you're doing is pulling together other battle tested libs, then it's still a lot better than using CI or rolling your own monstrosity. Just for the record, I used to work as a PHP contractor until fairly recently. I've had to deal with, on a fairly regular basis, people who just don't get it including picking up a load of bespoke frameworks from that semi get it. It's a lot easier to get poorer developers to produce code to a standard when you're forcing them to paint within the lines. As soon as they own the framework, all sort of craxy hacks ensure. This helps explain what I really like about silex; everything is included in vendor and assuming you a) use what's available and b) don't mess with vendor code, your esteemed out-of-date colleagues wil find it difficult to create said monstrosity. Of course your architecture astronauts can still create DLL-HELL but the former is the bigger problem for PHP in my opinion. *Not that I think you should change a working solution now. My comments are just food for thought for future reference.*
Do you have a handy example? I'm not doubting that this may very well be the case, I just haven't seen it.
Simple criteria: **Public** - If the function needs to be available to client code anywhere else in the program. **Private** - If the function is an internal implementation that should not be exposed to client code. **Protected** - If the function would ordinarily be private, but the class is designed to be extended, and the extending class needs access to it.
I here this a lot from developers working on projects that are going nowhere.
Am I the only one that wants to see Phil Sturgeon on the stand. That would be something
We need to stop thinking that people who ask money for their software do not deserve it. PHPStorm's database client is amazing! Its a fully featured db client for a lot of databases. I think it worths the money. Apart from that PHPStorm adapts really fast on changes regarding php world, for a java app is definitely stable and fast and it's way more configurable than other editors... Go check some laracasts episodes, the guy there is using either phpstorm or sublime. In my opinion if you don't want to pay anything you need to select an open source ide and just stick with it and learn to live with it's drawbacks. (eclipse) edit: Intellij (PHPStorm) has a free community ide that unfortunately does not support php but it's great if you want to play a bit with it. You will notice the difference immediately compared to eclipse, netbeans etc 
The Zend ones are also, arguably, the most useful. A few people on my team teach them, and they're all really good teachers, and highly competent. I put my apprentice through the ZF2 Fundamentals course, and he really enjoyed it.
How would you do that? Look at http://www.burgessyachts.com/.git/config the 'remote' repo is on the server, not publicly accessible.
I've conducted many similar interviews in the past, although not in PHP, and I've generally found that coding exercises like this aren't particularly useful. Personally, I get a lot more insight by asking them about *theoretical* projects, and then asking how they would approach them. For example: "Given a site x that does y (fill in blanks) would you use an ORM?" Deliberately keeping it slightly vague, and then watching out for: * What additional questions do they ask? Do they find out all the information about this to make a good decision? * Which different options are they aware of? * Which different options do they understand well? * Which of those do they have informed **opinions** about? * Why do they go for their chosen option? Is it what they are most familiar with? Is it a performance reason? A technical reason? Code style? These kind of things generally give me the best impression of a candidate. For example, rather than saying: "How do you set up a unit test in (whatever unit testing framework)?" Ask "What is your opinion of unit-testing and the various approaches available?" Gives you a much better idea of the depth and breadth of their knowledge, and their "personality" as a programmer. If you're looking for information about how they'd structure code and how their database skills are, I'd ask questions specifically such as: * Do you work with frameworks? Which do you prefer and why? * You have one week to get a simple application (to-do list, calendar, I don't know.. any small app) working. How would you approach this? (Big framework? Micro framework? start from scratch? which DB?) * What is your opinion on PSR standards? (Or other coding standards). * What is your favourite ORM? Why? (Bonus points if they compare it to others without prompting). * We have a big project, the data-access code is slowing everything down - what might you check? For example.
Anything not private is part of your public interface to other developers and thus subject to semantic versioning. So default to private, use protected where necessary and pretty much never use public because it should be a method working on your variable .
This. If you want to find out how they think, how they build, how they structure projects, a coding interview (unless it's a few months long) won't tell you that. Ask them questions and probe their answers. Perhaps play devils advocate and ask them why they don't use $badPractice (but make it clear that you were doing so before they leave). People are never going to write a throw-away 20 minute block of code in the same way as they would write for a large or ongoing project. If you really want to examine their code, ask them if they have any "portfolio projects" or other public projects / contributions you can look at.
I personally **hate** tasks like you describe for an interview. - Does he participate on StackOverflow? GitHub? If so, these can be much better gauges of breadth and depth of knowledge than a stressful interview performing a task you're making up for the sole purpose of *testing* him. - Pull a bug from your bug tracker; **pay him** to fix the bug. What better way to gauge the fit and skill of a candidate by having them do something they'd actually be doing if you hired them. Paying them shows you value their time. - If you want to know how he thinks, come up with a problem **you** haven't solved in code either *(ie. what is the fastest way you can find the 3000th prime #?)*. Peer program it with him, letting him take the lead. You'll learn how he thinks *and* how he fits in with your culture. The task itself might be equally pointless to the tasks you're looking for, but in this case it's not *really* about the test, it's about the person.
It's not about the contents of the Composer files themselves, it's about the information disclosed. Imagine if someone knew you were using not only a particular package that has a known vulnerability in it (maybe a templating lib that allows XSS) but what *version* of that package you're using if the config is specific enough. Any kind of insight an attacker can gain about the code that makes up an application is a bad thing. You could relate this to the same kind of problem that comes with PHP reporting back the "PHP Version" in the HTTP response headers, letting the attacker know exactly what bugs they can try to exploit.
&gt; If you really want to examine their code, ask them if they have any "portfolio projects" or other public projects / contributions you can look at. Absolutely, I forgot to mention this. Although if they don't please don't think it's the end of the world.. I've been stuck working on stuff for years that I didn't have access to, to show anyone the code, and we're not all coders in our spare time too - some of us have other hobbies.
In the event you are not sure and can afford it; hire two people to see the results of course keep this fact from each party. If you get vastly different answers you know there is something wrong. Of course just because both potentially come to the same conclusion doesn't remove the possibility that they both reached the wrong conclusion but is less likely.
Agreed. For a senior technical role you want someone who demonstrates an ability to weight different choices, think sensibly about them and make a decision. You don't necessarily need to agree with their decision if they are able to make a reasonable case. Bonus if they change your mind or help you see it from a different angle. That is the good stuff. Rather than ask them to code up something, I would ask them to bring in some source code they have written. Have a conversation about what it does and why it was made this way. If you know enough programming to be a senior programmer yourself it will be obvious if the person has mastery over the subject. Also, with this approach you respect the candidates time by not asking them to create new code just for your interview. They should be glad to bring in some of their favorite code.
It forces you more often to duplicate logic instead of using already present code. Protected is default for me.
What I would love to see from an interviewer but still haven't is working on an open source project. For a small example...I would love to go to a php interview for a senior role and having the interviewer asking me to checkout monolog for example which has a few interfaces not implemented and discuss how I would implement one of the missing. Maybe with a bit of code maybe not. You can see very easily how this candidate uses the versioning, navigates through the code and proposes a solution.
&gt; - Learn how to use composer (if you don't know it already) I don't know what composer is, can you explain a little more? &gt; - Learn some basic object-oriented syntax (if you don't know it already) Obviously yes and many of my scripts are object-oriented &gt; - Learn how to use namespaces (if you don't know it already) Could you link me some good tutorials (or maybe explain a little more about it)? &gt; - Use composer to install Cartalyst Sentry and save yourself both a lot of headaches, as well as gaping holes. &gt; - Unless of course you're doing this for learning purposes, then don't roll your own low level authentication system like this for a production application. I'm trying to create a very small CMS but without an external framework. I would like to know how to build it in the most professional way possible. If you have some advice, tips o useful tutorials please link me something, I really want to study 
One easy way (no database change, no refactoring) to get started and avoid title conflicts for similar product and still keep backward compatibility is to append the title after the id (a bit like reddit does): Product Precision Set Screws: Original: /cc12345 New: /cc12345/precision-set-screws Base62¹: /3D7/precision-set-screws ¹ Transforming the id from base10 to base62 (not 64 ;)) would make your url shorter!
i am usually totally ok with him sending me a class or php project or code he is proud of ... i dont tests seniors skills of coding, except if for some reason they dont want / can provide code which maybe happened once in 5 years. i usually rather look how they fit in the team etc, what knowledge they have around stuff that is not directly php, p.exp. best practices for caching, typicle performance bottle necks
i'd like to see that tutorial!
just google for "&lt;framework name&gt; crud tutorial application" or look on laracasts or something.
This is the only one I've ever found. It is really old and the development fizzled out a while ago. http://nanoweb.si.kz/
I'm not sure that it meets your needs but you can take a look at Ratchet http://socketo.me/ It seems to have a http server component: http://socketo.me/docs/http
I like what you suggest, but I do think a small simple coding exercise should still be part of the overall process (in addition to all the things you and others mention) for one reason: you would not believe the level of incompetence some people who apply for jobs have! Even if their resume is filled with years of experience and buzzwords. I speak from personal experience of doing job interviews with programmers -- a disturbingly high percentage of applicants can't actually program the most basic things. So a simple coding exercise is a good way to weed out those folks. I personally like the "basic CRUD" app that another commentor mentioned elsewhere in this thread.
There are a few on github. The most recently updated was: https://github.com/yosymfony/HttpServer 
I really like the "pay them to fix one of your bugs" idea. That way the candidate also gets a chance to see the codebase they will be working with. I did an interview a few weeks ago for what seems like an interesting company. Then the lead/lone programmer showed me his code and it was all thousand-lined non-namespaced classes with SQL statements sprinkled throughout and everything in snake case for some reason. I didn't want to work for that company after seeing that code.
Clearly you are looking for PHP code (?) but on the off chance that you want to stretch the definition of "open source PHP Web server made with PHP" ..well... since 5.4, PHP has it's own built-in webserver which is, technically, open source and made with PHP. http://php.net/manual/en/features.commandline.webserver.php :)
It seems the HttpServer is just for establishing the initial WebSocket connection, if it served HTTP/php it would be ideal because i'm using Ratchet already for the websockets.
This seems interesting! Feels Nodey :D Wonder if i have to code all the http handling by hand or if it has default php server implementations.
As i said in another resposne, it was my first option, but the server is coded on C, and i don't want to mess with it (wouldn't want to forget checking something and introduce vulnerabilities to the code).
As i said in another resposne, it was my first option, but the server is coded on C, and i don't want to mess with it (wouldn't want to forget checking something and introduce vulnerabilities to the code).
I would believe the level of incompetence - I've been in the same situation many times of having to interview those people.. but if they can't code simple code, they absolutely can't give good answers to the questions above. They're certainly not going to be the best of the available candidates. (If they are, you're not paying enough.)
I have to disagree as well. I love Javascript more now that I've read Javascript: The Good Parts by Douglas Crockford, and the entire point of that book is that a good percentage of JS is badly designed and buggy. Though honestly, I kind of like it because of the testing/debugging/coding environment choices I have more than the language itself, which I also quite enjoy.
Always keep each method as secure as possible. If it needs to be public, then it should be.
Some of the authors of phpdbg hang around in SO chat, room 11. You should probably come speak to us about whatever you are doing ... My first instinct is this doesn't sound like something phpdbg would be good for ... but totally up for listening to whatever idea you have in detail ... find us ...
It's obviously a nice to have feature. (Notwithstanding the feelings of our treat-PHP-as-Java crowd..) Not sure about the proposed syntax, since it's really just a rare use-case-specific addition. In the light of future language extensibility, wouldn't it make more sense to implement such things at a higher level → introducing decorators. I'd for instance always considered the silencing `@` operator just as such, but more suitable to overload/reuse it for more contemporary purposes. Instead of the implied `silence@$expr()` it doesn't seem syntactically unfeasible to extend and permit further builtin or userland decorators. In this instance for example a `nullsafe@ $x-&gt;y()-&gt;z()`. (With decorator classes simply providiable as e.g. `before()` and `after()` implementation methods *→ not an uncommon pattern in other contexts already*.)
So where's your contribution then? What else would they need to become senior? Edit: never mind, I see your comment that's heavily downvoted, and for good reason. I hope you're a troll.
Just nit-picking, but MIT/BSD and GPL are compatible. The whole has to be effectively distributed under GPL, which you might want to avoid, but you can still license your code under MIT.
Check with DCPHP - there may be interest in starting a self-study group.
Indeed, i want to license a nice tidy pack under the MIT/BSD license, so anyone can do whatever they want with it.
You do realize PHP is coded in C, too, right? PHP is a scripting language. Please stop trying to use it for more than it's built for. It is not an application service. Don't try to use it as a persistent running application.
Lol, seriously, why. I suggested that a senior developer should be able to build nice architecture by himself. While you say that its enough for him to be able to understand and select between existing implementations.
Please understand that different languages have advantages in different situations. PHP was designed to be a super fast web request language: in and out. PHP is meant to start, process, stop. It is not meant to be a continuous running process. Yes, you _can_ do that, but it adds in complexities PHP was not designed to handle. Use a language and compiled application for services you require to continuously run (web server). Personally, just the sheer lack of an application layer in PHP makes it a horrible application service.
Sounds like you are abusing classes. Please go learn about OOP... The extends keyword should be used very, very sparsely. Composition &gt; Inheritance. And if you are just extending classes so that you can share code even though class b is not a class a, then you are doing it wrong.
Here's your SME.
Holy hell...that was awesome. I will pass all of this onto the attorney and have him take this into consideration when talking with an expert. Thank you so very much.
Here's a challenge I give to mid / senior candidates: &gt; Write a simple API for showing a list of users, and creating a new user. The goal is to be able to swap out the data source for users without having to touch any of the code that uses the data source and returns the response. Provide documentation for consuming the API. This is intentionally vague and lacks detail for various reasons. One is I *want* them to ask me for more implementation details, or if they don't ask me, they deliver something architected in a sane way that makes *reasonable assumptions* given the lack of detailed information. It also touches on a few things that I would expect a mid level developer to at least be able get done, but a senior to be able to get done with ease (and it's easy to tell when someone struggled with it vs did it relatively painlessly - code quality tells all, which I'll outline my deductive reasoning later) Here are the things the test touches on: * knowledge of dependency injection and coding to an interface (generally speaking, how to avoid rigidity) * REST * attention to detail when documenting * tool selection / choice * ability to find holes and then make sane assumptions or seek clarity But the code itself tells a lot about the candidate: 1. If the code is sloppy, then they are either a lazy senior, or a mid that probably struggled to make it work. 2. If the code is clean, they are a senior that got it to work with relative ease, and spent time cleaning it up. Or they are a mid who busted ass to do their best. 3. Regardless of their skill level, sloppy code points to potential overhead as their code becomes hard to maintain and hard for other people to work on. This is not a mythical problem - we had a "senior" contractor build an application in such a convoluted way, it was easier for us to scrap it and start from scratch - built the same application with 30% of the code.... 4. A candidate could interview poorly (hey, were all developers after all - not necessarily the most socially graceful creatures....) but be a brilliant developer who just needs to feel comfortable in a team before opening up the lines of communication. Clean code can help overlook a less than stellar interview. What we deliberately avoid are "trick" programming questions like FizzBuzz (fuck FizzBuzz....) which are completely meaningless exercises in algorithm logic that don't really apply to web development anyway.
I had no idea that existed...searched and found a few. Thanks.
I'm pretty confident that we do. It is going to be a huge case worth tons of money.
Perfect...thanks.
&gt; i don't want to mess with it (wouldn't want to forget checking something and introduce vulnerabilities to the code). To be frank, you are far more likely to introduce vulnerabilities with a custom PHP webserver than with a standard C one.
It isn't being used as an application service, i'm trying to wake up an instance with phpdbg of a webserver and that server's context must be modifiable during runtime from the web console i'm creating. This isn't for a front facing application but instead for an internal application i'm developing for my team (more on that later) that needs this specific scenario. I'm not a newbie, i know the limitations and span of php as a scripting language. Btw, i know PHP is coded in C, i need a simple php server able to be hijacked by phpdbg, that is all, really, nothing too fancy.
I wrote some pretty esoteric PHP challenges: https://github.com/wearebase/base-php-challenges They're not a very good indicator of a developer's skill by themselves at all (most of them you can either see the solution straight away or you won't get it without lots of research) but they're a good discussion topic for an interview and often lead to followup questions.
I'm guessing they will do this. Thanks.
As i said in you other reply, i'm not creating a standalone application, this is just a simple server i need for debugging, nothing too fancy. I know, and handle, a LOT of languages in my different projects, but in this specific scenario i have come to the conclusion that i need a php server coded in php.
Nice, thanks for replying, i'll be sure to get around there if i stumble with something bigger.
Check my other answers, this is a restricted phpdbg environment, meant to go step-by-step through the web request, no fancy millions of serves app.
it sounds like you want a security expert to look for malicious actions on 2 servers. Code is code in any language and a Diff program can tell you if 2 sites share code (blocks). Whatever you're trying to prove legally if the lawfirm doesn't know how to examine sourcecode or server logfiles, or high forensic IT experts -- then best of luck
Fair enough, just thought it was worth another disclaimer as it is a fairly unusual use.