Hey, just wanted to say thanks for suggesting Lubuntu. I'm up and running and everything is going smooth. I'll stick with ths from now on. BTW, I used this link to access the VM from the host. A lot easier than I was making it: http://askubuntu.com/questions/52147/how-can-i-access-apache-on-virtualbox-guest-from-host Cheers!
Heh, wouldn't be the first and won't be the last! I did something very similar in 11th grade. Maaaany years ago now :/
I'm using a combination of Homebrew and a VM. Homebrew is used on OS X to install PHP, then I just use vagrant specifically for the database. If you need a specific PHP version and modules configured then you'll want to do it all in a VM
Is this for like a school project or something?
Reminds me of my project implementing prototypal inheritance in php: https://github.com/danielmunro/phrototype
WHAT THE FUCK IS A CMS? If you are gonna use acronyms in your project definition, spell them out the first time you use them so us non-tready fucks know what your project fucking does.
I'm not sure this is a system for managing content.
It is missing lizard and Spock.
There is intense discussion of getting Value Types in Java 10, at which point Scala will also get them (they depend on JVM support). Swift has them and people find them hugely valuable there. So the situation is not as clear cut as you describe it. Ever used a Value Object in PHP? Ever wanted that you can pass it by... value? Immutability is not a trait of values, it's a workaround for reference-based languages that don't support value types natively (of which structs are a typical use case). And it's a very clumsy workaround for complex values. 
You come off as an ass because you are one. Plain and simple.
https://apiary.io
A novelty, nothing more. EDIT: If you are to downvote, explain how it's more than a novelty. How does it help? It's just a simple router, but the content is no different from using flat-files really, as they are laid out the same way. What's the point? It's main selling point is that index.php has 8 lines of code. To me that is a novelty. 
Source: http://stackoverflow.com/questions/10691540/check-user-name-and-password-on-database-script-included
What does ass stand for?
I looked at the API and examples. It's good. 
For the first part, yes, the reason is technical. At the time this RFC landed we weren't able to do the VM stack management for that case (in a way that isn't either ugly or has performance impact). With the AST-based compiler we should be able to support this without problems. For the second part there already is an RFC: https://wiki.php.net/rfc/additional-splat-usage. Not sure why it didn't go further.
How did you guess? Well actually I intended a "decouple from databases" article first
Agreed. I'm also glad to see that other people advocate moderation: it's not about "decoupling all the things", but it's about decoupling when it makes sense.
I need typed immutable data structures... So I more like the idea of freezing public properties 
Thanks! I'm not very confident in posting code here so this was a pleasant surprise to read.
Thanks! I wanted something simple and reusable.
I still don't understand echo.
Pico CMS barely qualifies (personally I would say no), but at least they use a templating engine so the content can be saved in relatively user-friendly Markdown. Your's is just PHP files. How is that managing content?
&gt; Why can't I set a query param on a client request? If I understand you correctly you are looking to call something like `https://example.com/?query=some-string` , can't the `URI` https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-7-http-message.md#35-psrhttpmessageuriinterface can help with it ? Cookies are not taken into consideration. See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-7-http-message-meta.md#what-about-special-header-values
&gt; Ant CMS is sounds pretty cool I like that name.
Yeah I think I understand what you mean. When the config is correct, everything is awesome, you just change a line in the config and you change the function of the program. But when you're not getting the results you expect, it's harder to debug because there's that extra layer of the program interpreting the configuration. I think the benefits of configuration are pretty huge because it lets you do the job of specifying behavior in the form of almost a DSL, and lets the application do the job of implementing that behavior. You don't have to write a new class for every contenttype in Bolt, for example. I think what would help is some kind of schema validation for the yaml files. It would check the config and let you know of any attributes that aren't defined on the application's end. Otherwise it is too easy for the communication between you and the application to break down by, for example, specifying "host" instead of "hostname" in the DB connection, like I did ;)
Thanks for suggesting renaming the CMS. :) I'll rename it when this topic will be inactive. I afraid to break the link by renaming 8-cms repository on github.
These guys are consultants at my company. On the one hand, yea they are absolutely right. You are writing pretty crappy code to get an MVP out there. And the whole environment thing is absolutely true. Its bad how long it takes to get everyone on the same spec. And this is absolutely against their message of clean code, logical code, and make it extensible. Ive learned a lot from those guys, but it makes a lot of sense to me. On the other hand, its suppoed to be fun and a challenge, so I feel that Sebastian and Stefan may be just a bit removed from the hackathon aspect of everything. But if I had the chance, I would love to be on a team with them. 
https://github.com/secondtruth/startmin
This is not a CMS as it does not "manage" any content, merely enforce a storage pattern for PHP views. Basically you'd need to code any views to do anything dynamic, how could you register complex changing menu's, varied content-types etc? * Also if you call exit() in your views, watch it fall apart... * Also where would you store the data * How would you change the DOM surrounding your data * How would a user of 8 CMS migrate their content to WordPress or similar * Plugins, how will they work? * Auth? * ACL * Multi-user collaboration? * Post Revisions (arguably github I suppose) 
It took me a while to figure out what you meant: simply quoting a function name is not a great way to make a point. Also this would break the CMS's ability to have routes like "blog/aboutme/hobbies", which seems to be a conscious design choice. So the argument you couldn't be bothered to type out isn't even very good.
 If (strpos(basename($path), $_SERVER['DOCUMENT_ROOT']) !== 0) { die('Nice try, GCHQ'); }
Okay, I'll give it a read. As for that specific function, there was a time when I didn't know that JSON existed, and for some reason my mind turned to creating something that did exactly what JSON did. Just a lot more poorly. I don't think that function is used for anything and if it is, I'll take it out anyways and replace whatever's using it with JSON. Thanks for bringing that up, I forgot about it.
Turn off E_NOTICE !
Yes, they are using Monolog and the original class syntax probably was improved for a contributor or FabPot in newer releases.
&gt;( ! ) Warning: file_get_contents(http://api.openweathermap.org/data/2.5/weather?q=Los Angeles&amp;amp;appid=12aee3d63f097b29313be9d002879c8a): failed to open stream: HTTP request failed! HTTP/1.1 500 Internal Server Error in /var/www/bit-co.de/weather/index.php on line 34 http://imgur.com/zXpPWoE.png
I noticed the sound quality went up a notch in this one
los+angeles should work, I'm gonna fix that up tomorrow so it explodes the get variable and implodes it back together with +'s, cheers for pointing that out. edit: aaaand fixed now it should work fine. 
I guess I completely forgot to turn off the development mode. Cheers for the headups, will do later. edit: and fixed.
Disagree. I think I've meet the authors at an event years ago, and I'm familiar with phpunit, and have respect for them. But they fall into a the same trap everyone else does. So the authors dislike the constaints of this hackathon. Now, I'm not saying they are wrong to do so. However, what I'm saying is they are wrong to then go and say "Hackathons should be considered harmful". There are many different forms of hackathon, and many different ways to run one. Just because you don't like how one is done, there are many others that are different. (They kinda touch on this at the end, with comparing a dev-a-thon to a hackathon. Honestly, I have no idea what a dev-a-thon is and I'm not entirely sure what their ideas are around this. Basically, they need to be more specific on what practices they are talking about.) Blog with more: http://blog.opentechcalendar.co.uk/2015/10/18/before-you-criticise-hackathons-dont/
That's my first post to technical thematic subreddit, didn't knew that. I though super-arrogant text will give reader the clue that it's a joke. I guess I tried not hard enough :D Thanks for the tip, next time I'll prefix my next joke post with prefix [joke] or something.
Aye I noticed a lot of ISP's can not be traced very precisely or at all, so I'm gonna switch make it default to my hometown, and tomorrow re-code it to get HTML5 geolocation then send that via AJAX to a PHP script.
Securitywise it is a very bad idea to allow direct access to the filesystem via get parameter. Just filtering ".." is not enough. The available include choices should be carefully limited. Input sanitation is extremely important. Never trust user input. People can inject all kind of things you are not prepared to handle if you allow everything.
This is more of a router and a view renderer than a CMS.
Also, I give you 2-cms https://gist.github.com/Petah/1362b6227ca928c66af0
Oh please. This is a glorified static website, and you know it. It's serving static files. It's using a simple PHP script to make sure you don't have to re-use your layout code in every content file. Pretending that's not a static site is just silly.
Oh I totally agree. I'm not knocking it. I'm just having a laugh at this being presented like a new thing. It's only 1 step removed from the old header/footer include on every page and calling it "dynamic". But more and more with all the APIs out there, and all the backends you can directly interact with, you really don't have very many use cases for having a backend serve dynamic front end content at the server level anyway. Throwing up SPAs on github pages is very satisfying.
&gt; It's only 1 step removed from the old header/footer include on every page and calling it "dynamic". I just threw up in my mouth a little. Those were dark, dark days.
I wish RAML had more useful toolkits. Swaggers often don't work properly or, at least, they don't tend to stay at the same version / completeness level of Swagger. RAML is just a better, more expressive spec all around, but lacks tooling. Bleh.
hahahaha Back when I first started writing PHP, I did my first site that way, then had to build some CRUD stuff for a real basic backend and ended up spending a month writing a code generation framework that I ended up using for a year or so. It was probably fucking horrible, but man, I felt sophisticated.
look at other ones like jOOQ, Slick, SQLAlchemy
That will only fix spaces, though? Should probably use [urlencode](http://php.net/manual/en/function.urlencode.php)
*clap* *clap* you've made my day :) And also, rename $route variable to $view ;)
Wow, even its first commit was bloated :\^) Edit: no one here knows what a joke is then, gotcha.
Thank you for your write up! When you have a demo, reply to me and I will check it out... Your features interest me, but I will not check the implementation until I see a demo.
Not necessarily spam, people often share their own articles. Though it seems OP hasn't posted anything else besides this.
No idea what they program in honestly, gave a list of a few interpreted languages, php was one of them. Probably a mish-mash of stuff with a company this big.
Thanks... I'll post them up shortly. I've tried to include composer support though I haven't used these libraries specifically through composer yet.
Thanks, I've already got them on Github, with as good as I can get at the moment documentation... will post soon. I've tried searching for related questions on Stack Overflow so I can suggest my tools if they would solve someone's problem that isn't currently solved... still searching.
Well that sucks. I don't want to re-implement all the CDF stuff in PHP, it'll be very slow.
Thanks! $isSetCheck is mostly internal, but should still be documented, I'll do it now. There is also the [Config](https://github.com/Hambrook/Config) class that extends this to add JSON loading/saving.
Oh, nice. It looks like you have a couple of numeric functions that have legacy documentation for a $force option which is no longer present.
Someone posted [this library](https://github.com/hassankhan/config) not too long ago, which appears to do pretty much the same thing but has additional parser types. Maybe you can get some ideas, or collab to make a better package overall, or something. No real critique for your code, just that your lib reminded me of theirs. No sense having competing libraries if we can help it.
Thanks, I've updated and pushed :)
Be careful with that... it's usually seen as spam there. Given its open source you'll probably be fine as long as you disclose that you're the author.
FYI https://github.com/Sean-Der/pecl-math-stats/pull/1 Just compile this one and use it. No need to refactor your code around. =)
I'm not sure I get the first example and it's advantage over: isset( $array['one']['two'] );
What IP Geo-location API do you use and how to you get the user's IP? There has to be a bug, I tried visiting it using several different proxies and most of the time it didn't work.
[1Password](https://agilebits.com/onepassword) + Dropbox sync. Best password manager ever. Has browser integrations, good mobile apps, and even lets you open your password vault direct from web (via dropbox) in read-only mode when you get stuck using a random computer. Also stores credit cards, software licenses, and other data types. One of my top 5 favorite apps of all time and worth every penny.
&gt; Aside from writing them all in a notebook Shudder. https://en.wikipedia.org/wiki/List_of_password_managers
http://i.imgur.com/JLvRG0G.gif I know. I'm 5.
If you're wanting to reinvent the wheel I'd start by studying all the other wheels out there already.
I think you're probably looking for a router. [FastRoute](https://github.com/nikic/FastRoute) is one of the most popular. That connects the URL to the controller (or whatever data you like). So you get back the function/class method to call when dispatching. Then your controller can call the model and view.
Drupal 6/7 needs this!
There's one technical difference: isset will return false if the array key is set but is null. Sometimes you may want to pass that around.
You're right, it doesn't have tests or Composer support... but it's still beta and doesn't even have a develop branch yet (I use Git Flow for workflow). But those are coming, thank you for the nudge. I've looked at CLImate _(all the League libraries are awesome)_ as well as Symfony Console, but neither of those are applicable here. But this class was not designed to handle argument parsing, output handling or anything else from CLImate or Symfony Console. Separately I have re-invented the wheel by creating classes that do these as a learning experience., but those aren't part of this class. This class is for when you're running a CLI command *from* your application and need to easily parse the data returned from the stdOut, stdErr or other streams. See the example of streaming one DB to another from the docs. I'm thinking of adding variable escaping for the command, in case you're using user supplied data (I can't think of a use-case though).
Naming things (software, libraries, computers, servers, kids) is very hard... other options were... * Background * CLI Task Runner (CLITR) * CLI Command Callbacks (CLICC) * CLI Callback Subscriptions (CLICS) * Maybe Message Me Pending Something Happening (MMMPSH) * CLI Read Or Write But Always Run (CROWBAR) By the end of it I was just seeing what funny results I could force out of it.
Thank you, I'll be giving this one a good luck. 
 // need to get $array["one"]["two"] $value = $array-&gt;one__two; I don't like that. If `$array["one"]` is an array I think it should look and act like one. The fact that `one__two` is traversing an hierarchy because of the format of the variable name seems really bad to me.
When trying to teach web programming, knowing what MVC is in a simplified example is valuable I personally teach with an old skool concept, using a foundation case statement on a $_GET['page_id'] parameter, where a specified act is performed, instead of allocating a .php page for that act. 
I plan to eventually add benchmarks and fine tune a few things, such as swapping `if (is_array($var) &amp;&amp; array_key_exists($level, $var)) {` for `if (isset($var[$level])) {`when I have some sort of profiling in there.
That's optional... the primary use would be `$foo = $array-&gt;get(["one", "two"]);` I might look at disabling the shortcut usage (would be easy enough). Where `$array` really means "management object for a contained array".
In response to your comment, I've clarified the description in my README a little and added a "What is this not?" section. Will be in the next push. Composer support may be too, as it's trivial. And unit tests *are* coming. Thanks for your feedback.
And the world of php framework was changed. Symfony is a revolutionary piece of software in php world.
PHPStorm doesn't display the colors in a theme at the exact RGB value that is selected. It seems to always be making the colors be lighter. Is there anyway to either make it display them exactly, or to get the formula it's using to adjust the colors?
Are you aware of the [null coalescing operator](https://wiki.php.net/rfc/isset_ternary) landing in PHP 7 next month?
Oh okay. I admit I've done the same thing once as well.
Try pinging SitePoint as per [#sourcehunt](http://www.sitepoint.com/sourcehunt-hacktoberfest-2015-edition-hack-to-glory/), might help!
Thanks for the link, I haven't seen that library before but it looks very similar to what I've done.
You can always discuss on php-fig if you love to see any changes or before this took place.
Have you came across creating your framework http://symfony.com/doc/current/create_framework/index.html . If you want to learn how to build a framework you can also explore the framework itself and how it is working. There are plenty of them. Build and use it, I wished if people don't open-source it.
[PHP7 FTW](https://3v4l.org/4L1mg)
Indeed looks very nice. How come it's not committed as an enhancement (maybe with an optional flag) to composer but a plugin instead?
DI container configuration can get big fast. If you want to distribute a reusable component, that should be configurable no? Don't you need some config for your templating system, your router, assets management, ....
That's a very nice implementation, particularly how you can access data like you would normally access data within an array (via ArrayAccess). I made the decision (because of my initial use-case) to keep the days in its original structure rather than covert it to nested instances and I recognise that I imposed certain limitations on myself by doing this. I thought long and hard about how to make it easiest (object chaining and ArrayAccess like above) but always ended up with an extra key/function on the end to get the raw value instead of the wrapper object. So I went with the implementation I used. If there is a way to do something like `$foo = $object-&gt;sub-&gt;path;` and have `$foo` be the raw value instead of the wrapping object (assuming I converted the array to nested objects on import) then I'm *very* keen to find out more.
phpclasses /s
It was a joke. The '/s' at the end means end of sarcasm as in &lt;sarcasm&gt;phpclasses&lt;/sarcasm&gt; That community is PHP's cancer.
Because isset may not do what you want, like I said. It's just an edge case but it's worth pointing out.
It's important to differentiate application config, and component config. - Application config belongs to the app. - Component config belongs... also to the app. So when you have a reusable config, it should expose a way to inject configuration, but how that configuration is produced is none of its business. And at the application level, most of dependency creation is fixed in the app. Only a very small part of application config change from deployment to deployment. You may change hosts, users, passwords, ports, but it's unlikely you'll deploy the *same end-user app* somewhere with completely different classes that implement the same interfaces. Usually the developer has predetermined that part. So the config then is only the things an end-user or an operations guy would change (already mentioned: users, passwords, ports, keys, hosts, debug flags, logging level, things like that). To go back to component config. I do component config through interfaces. I ask for an interface that's implemented, let's say if I have TemplateSystem, then the constructor will be: function __construct(TemplateSystemConfig $cfg, ... other dependencies) {} Now the caller can implement that interface and I have my config. If you have questions about how specific situations would work out with that setup, don't hesitate to ask.
That's what I'm wondering. I feel like this should have been part of composer itself, not something separate. This is a really good and legitimate new feature for Composer.
Terrible code. md5 is not encryption. It's not even worthy of the term 'hashing' any more. It's been considered unsafe for password hashing for 20 years. Stop using it already. Use the [password hashing functions](http://php.net/manual/en/book.password.php) now available in all supported PHP versions (or [password_compat](https://github.com/ircmaxell/password_compat) if you're stuck a little bit behind)
and in addition to the already mentioned problems: use prepared statements!
Maybe they just want to learn about how it's done. It's quite an interesting process, and if you actually go in with the intention of using it as a learning experience, developing a framework can be very rewarding (and humbling).
Absolutely :)
Haha, thanks, I wasn't familiar with "/s"... Though you've reminded me how much we used to use pseudo html tags in chat... and that hash tags have signalled the &lt;/era&gt; (not my joke, but I can't find the source)
I did read something (no source, for now, so don't take me at my word) which said that a notebook isn't such a bad idea. The sort of person who's going to break into your house and steal your computer isn't the sort of person who's going to steal your password and try and get your identity / bank account. They're two different demographics. The person stealing your computer is shitting his pants trying to get in and out as quickly as possible, and already has a fair few hundred quid's worth of tech in his hands. He's not going to rifle through your notebooks in the offchance that there's a password he can use in there. Notebooks, on the other hand, are very hard for malware to steal... That said, I use and love KeePass and Keepass2Android.
You could also just cast a multidimensional array to become an object. $client-&gt;method((object)array( 'param1' =&gt; 'value1', 'multivalue1' =&gt; array( 'something' =&gt; 'else', ), ));
&gt; While that's true, I don't think it's a big deal in all honesty. I was simply pointing out a functional difference between his code sample and how laravel works. All of what you're doing is lovely, but irrelevant to my previous statement.
&gt;because reflection is used to subvert the natural semantics of the language There is no reflection, it's pure dependency injection (not automatic dependency resolution). I think you are missing the point I'm trying to make in this article. Could you please have a look at the [code](https://github.com/shameerc/slim-skeleton) and still have the same opinion?
I checked this and it's not very clear to me what you're doing to be fair. First, "automatic constructor injection" doesn't simply mean "calling a constructor of a class I'm given", it has a specific meaning for DI containers, which means it reads the signature and resolves it based on types and qualifiers, so your article title might not be the way to word what you're doing. Next, you do say something that I missed first time around in the article: "...as long as they have the same constructor signature", which indeed would change things. But then in your app skeleton, in the dependencies config, you spell out HomeController specifically and you set its constructor argument, by name, to pass the UserModel to it. As an aside, you can't inject by parameter names without reflection, so the comment "there is no reflection" would be inaccurate, but that's a detail. So... anyway, what are you doing? It's automatic, yet not automatic, what's the goal here?
I'm teaching myself front end and learning to work with REST APIs. When I retrieve data from my PHP app, I send it as a JSON response. Should I be sending data, such as a form, as a JSON string as well, or should I just be sending the object as an array and access it via its properties from $_POST / Request object?
My personal remarks (some of this is subjective, so take it as such): - I find stringly/array-typed schemas hard to read, write and extend, it would be better to build the schema from composable objects using fluent API. You get IDE autocomplete, the schema may serve as the graph of serialization, making it extensible with custom nodes, not only what you have provided. - Adding a caching layer to the mapper seems like a mistake. Many people would blindly enable it without realizing that they may be getting stale data in the process, and your caching rules can't be flexible enough to map to the domain (and what it considers stale). This is a concern best resolved outside the mapper. - Nothing is said about error reporting. A mapper should be able to provide detailed errors about when and where in the object and/or representation an error in mapping occurred. - A lot of pseudo code leaving me confused how this thing works and is used and not enough real-world samples. - When it comes to auto-serialization, reflection and code analysis are both neat, but relying on either of them by default is problematic, as it's easy for people to ignore the issues of serializing their objects and just trust the serializer blindly. Magic should be opt-in and the default model, should be, IMHO an interface that allows an object to create itself and convert itself to an abstract representation (which can then be mapped to a concrete representation by the mapper, like JSON).
I'd stick with normal form/POST values, just because most libraries (both front and back) assume that's what most people will be using, so their documentation should have good examples. At the end of the day you're performing the same request, just sending a different type of data, both of which can be interpreted by the back end just fine (JSON requires a little bit more prep depending on what tools you're using).
One of standard for RestApi is JSON objects as reponses. For queries, you should rely on HTTP action Words such as get, post, put, delete, etc. You can learn more from a presentation and a book from Phil Sturgeon http://www.slideshare.net/philsturgeon/api-pain-points-33485932 https://leanpub.com/build-apis-you-wont-hate
The return value kinda depends on your needs. theoretically, a single integer or string could be enough. But if you want to generalise it, having a JSON-sting returned is best practice. You can add all the variables you want without bothering with different variables and also check for required variables on return. For my personal projects, I usually return 'error' or 'success' variable as a minimum, with error being an array of all errors that occured, just adding all the information I currently need to it. I also use an API handler that takes return-format as an optional input-variable. (default = json) So I can decide whether I want it to output json, html or just plain text. Especially during development, that can be quite useful. 
LOL! I just inherited this website and checked the PHP configuration!
One solution that would come to mind is a backend-manager for your htaccess file. Basically calculate what is needed from php and write it to htaccess when needed. If you use a manager it can keep track of what you still need and what you don't need for you. But I'd leave it to an admin or moderator to make these changes, when adding or removing content, but leave it as a static htaccess for users. It could be as simple as a database keeping track of all the rules you need and a parser that combines that into a new htaccess file. Just don't calculate it during runtime with every request. that might be noticable in performance. 
same. /r/netsec usually mentions lastpass favorably, too
Sorry, I was referring to the format of the data that is sent from the web app to the php app, not the other way around.
nice to share, thank you
You might want to improve the order of your readme. On mobile, you only see your name (which is in the header anyway) and a `hr`. I'd rather directly see the short description. EDIT: After reading, I'd like to make the following suggestions: - use constants instead of `'stderr'` as a parameter - Add the pattern-matching filter as a separate method. E.g. `onLine($stream, $listener)` and `onLineMatchingPattern($stream, $pattern, $listener)`. Would make for a more logical order. - For a project I need to pipe output from `convert` to `cjpeg`. Would I want to use your library for a case like that?
thanks. 
I was meant to go, but I thought spending time with my fiancé was a bit more worthwhile right now 
Dashlane is great, although quite expensive! 
I did some axis2 soap stuff with java and if the wsdl changed I had to rebuild my jar which meant setting up build environment again which can be a pain in java. I was using eclipse. I was probably doing it wrong but I did wish I was using php. 
Good idea, I'll shuffle my docs a bit when I can. Thanks for checking it out. I initially had the stream names as constants, but then made the streams fully configurable (and therefore renameable). If there is only ever use for three streams (stdIn is coming) then I'll go back to constants and maybe even alias methods such as `onOutLine()`. I like the idea of a separate function for filtered callbacks, thanks. Yes, this should help you if you need to work with the console output from `convert`. If it doesn't or you have other issues or suggestions then just let me know. I'm currently using this on `mysqldump` and `rsync` but haven't tried it with `convert`. Thanks for your feedback.
Every improvement of doing something always brings a flaw along with it. Using auto-wiring in my projects, I am very guilty of doing unnecessary things like creating a class wrapping a subconfig just so I can type-hint it in the future for any service class that only needs that part of the config hierarchy. Even so, it still makes me more productive. It also encourages me better to split functionality into different classes to adhere better to the SRP.
Very interesting. I think i'm going to have to integrate this into [Bolt's SEO extension](https://github.com/bobdenotter/seo) sometime soon. Thanks! 
It's clearly marked as a joke, there's no backtracking.
Usually it's not convenient to have all the files and directories owned by Apache but for a single file it's not a big deal (especially if you don't version that file). Also, there is no reason for Apache to have write access to the file.
Why 640 and not 600?
I personally prefer this shorter syntax. Some light-weight querying syntax could also be mixed in, for example `$array-&gt;get("one/*/three")`.
Not a tool I'd personally use as my workflow and project setup has something more or less equivalent already, but it's certainly nice to be able to set up linting for a new project in just a few seconds. Doing it via composer plugin is really clever - I like it. On your [main package](https://github.com/BernardoSilva/git-hooks-installer-plugin), I'd personally focus the docs on git hook extensiblity rather than just code standards (e.g. automatically run unit tests pre-push). Did you find that developing the installer itself to be really tedious and fiddly? I was working on one for easier standalone CLI script distribution and found the process of developing the installer horrible.
Good idea, I was just thinking about how I can manage git-hooks for our projects. I'm more interested in the installer. I'll try it out on our base test project.
This was just designed for PHP for now. For other languages maybe there are other hooks already available. Using the composer plugin https://github.com/BernardoSilva/git-hooks-installer-plugin to share those hooks across loads of projects with 0 effort for configuration. But maybe add other hooks. Would like to build a list of hooks for php so people could choose other hooks.
Agreed. I use KeePassX myself.
Really nice interface indeed. 
&gt; I particularly like how the implementation is so simple. You can thank /u/NikiC for that!
https://github.com/WebGoat/WebGoat
According to the other comments, there are 2 similar projects * [/bruli/php-git-hooks](https://github.com/bruli/php-git-hooks) - bootstrap for typical PHP tool git-hooks * [/sjparkinson/static-review](https://github.com/sjparkinson/static-review) - PHP interface handling git-hooks but [/BernardoSilva/git-hooks-installer-plugin](https://github.com/BernardoSilva/git-hooks-installer-plugin) takes the approach of leaving the git hook on it's own and just uses composer to manage loading them.
I know that, I just pointed out that it is better for Apache to be the owner of that specific file, so only Apache and root will have read access to it.
Thats really nice, congratulations. Now at WHM-&gt;Module Manager-&gt;PECL Installer, we can find runkit's newest version and install with a simple click. Thanks Zenovich for his awesome work, and Sara Goleman for the original development. http://oi57.tinypic.com/20rjyo2.jpg Update: Hooray, it's on my remote server now. I can finally use it in production environment, rather than just testing it on my local UBuntu machine. http://oi62.tinypic.com/2nhg4ux.jpg 
Sweet idea! Time to dockerize it!
&gt; The documentation and code for this framework, though, works as a bit of a substitute for the missing Swoole documentation Yes, indeed. Blink is designed to be simple and hide the underlying details as much as possible. This can make people get started more easily.
I am the author of Blink, i'm now trying to develop a generic messaging platform using Blink + Swoole.
Yes your are right I skipped the comment because I found them redundant with named subpattern but definitely there are a plus documentation wise ... I'll update the last example to highlight them
More on http://www.aalpha.net &amp; http://www.aisopensource.com Video produced by: www.aamvideo.com
[removed]
I learned from an old book on how to write PERL. There was a section on how web servers work that explained how a web page makes it into the browser window. The details on what is needed for a web application followed. Going by that Google gives you this: http://www.webopedia.com/DidYouKnow/Internet/HowWebServersWork.asp 
Cool Project, Starred. Although you know some silly sod will put this up on a shared host somewhere. 
It wouldn't be just anti-aliasing. As I said, using photoshop to get the color of the big bar of color in the color picker tool like so: http://i.stack.imgur.com/yVLWI.png results in the color being reported brighter in photoshop than it is in PHPStorm. Additionally, the background colour is also different. That was how I first noticed the problem - I extracted the values for the 'Solarized Dark' theme to be able to display code on a webpage as those colors. The background (and other colors) from the extracted values is way darker than it appears in PHPStorm.
Static review is [pretty awesome](http://www.sitepoint.com/writing-php-git-hooks-with-static-review/), yeah.
0.
Looks like this approach is becoming [more](http://www.sitepoint.com/appserver-a-production-ready-php-based-server/) and [more](http://www.sitepoint.com/build-a-superfast-php-server-in-minutes-with-icicle) popular.
Though AppServer is heavily using threading and tends to be ultimately not that fast. (At least from past benchmarks.) Aerys is really aiming to be fast, great and still being all-PHP. Sending back a static response through Aerys gives me (on my last year iMac) a nice 101 k req/s. If we add routing, we still have 85+k req/s. It's really in every case your application will be the bottleneck and not Aerys or PHP startup/shutdown. P.s.: You say Icicle, just that's just an event loop with a simple socketing functionality, not a full-fledged HTTP/Websocket server ;-)
What's with the shared host embargo? 
Disclosure: I'm the co-maintainer of https://github.com/rdlowrey/Aerys … Daniel (rdlowrey) did really awesome work here. I'd like to note that initial development on Aerys begun in early 2013 and already was tested with real applications. In general Aerys and its API should be already fairly stable and not subject to many changes. But to have bugs found, we need people who are willing to take the tiny risk and play around with it. I happily manage submitted issues and PRs. P.s.: Yes, the blog post is only covering Websocket part… but actually Aerys is HTTP (full HTTP/1 and experimental HTTP/2) and Websocket in one. P.p.s.: Yes, no PSR-7. But that's mainly for technical reasons and immutability sadly has some serious impact on performance.
Hey, I think I've seen this code used in production by a former employer before! /s
Looks like I have a new toy to play with this weekend, then!
You are not in control of your environment.
PHP casts missing array key function parameters to `null` when passed by reference. One way to access nested arrays and/or objects is with a generic *get* function. Eg: function get(&amp;$var, $default = NULL) { return !empty($var) ? $var : $default; } $var = get($foo['hello']['there'][100], 'default'); // $var === 'default' Not as fancy, but can be handy :). It also works with objects, eg. `get($foo-&gt;hello['there']-&gt;bar[-1])`.
Swoole Framework is a full-featured web framework that provides almost all components may used in daily developmnet, such as router, databases, views, log, cache, queue, (async) http client, web services, websocket, and so on. But there are servel drawbacks from my point of view: * Lack of design, all it's functionality seems stacked together and without a design * Lack of Restful API support * Without testing support, hard to write unit tests But for Blink, is it not indended to be a full-featured framework. Instead, Blink is a mirco framework that mainly aims at the API development with elegant interfaces. Hope this is helpful for you.
Actually, the built-in http server implementation of Swoole is not full-featured, in some situations, we may need a nginx as proxy for now &gt; The other downside to Swoole -- and /u/bixuehujin can correct me here if I'm wrong -- is that it does not have a promises implementation. Yes, there is no promises in Swoole
Great to see Aerys released. I've really been looking forward to this. And thanks for the new tutorial and your earlier introduction to Amp. I hope you'll also do a "Getting started with Aerys as an http server" tutorial -- particularly if it also sheds some light on Aerys support for http/2.
Can you explain more about the issues that PSR-7 compliance created? Your feedback would also help highlight where the gaps with PSR-7 compliance are.
The idea is that it is up to the class (or anything else inside the file) to decide if it wants strict typing, not whatever is using the class/file.
Awesome. Again, I really appreciate your putting these tutorials together. They're very helpful.
In general we don't need with() functions on requests or get() functions on responses. The StreamInterface doesn't help much here as it's designed for synchronous access. (Like functions à la getSize() can only be fetched after all the body was parsed, but we want encourage async access). Same for uploaded files. Also we're not parsing the body. That's your task. After all we don't know how it's intended to look like. Aerys is for a part fast because it doesn't tentatively try to pre-parse everything. [I guess I'll still add some direct function for multipart-form-data parsing...] It's basically not matching our needs. EDIT: Just look at the Request and Response interfaces in the repository. You'll note they're quite minimal and only providing what we need.
Paging /u/vrann ...
&gt; Is there a way to set this to true by default in php.ini? No. And there would be a big downfall, which is that third party code that doesn't want to enforce strict types will now do so. &gt; It says this is set per file, does this mean every class flie would require this declared at the top of the class file? Yes, every file wold require it. Not everything will want or need strict types. I don't really see it as tedious, you still have to add other stuff t every file (namespaces etc). There will probably be tools to help - for example maybe there will be an option in PHP Storm to add it to the top of every new file you create. &gt; Will PSR be updated to force strict_types to true? Highly unlikely. &gt; Also how come strict_types isn't just built into PHP7 forcefully? Not optionally, which seems to be the case currently. See above, most people won't need it. Do you realise that types are still converted to whatever the type hint says, even without this option? So whatever the caller passes in, you will get the types you specify. &gt; Also since it's optional how come PHP7 doesn't have a StrictType interface that way it would be written That's not how interfaces work.
Thanks. Appreciate the clarification. Will look closer at the interfaces.
The trouble with shared servers is that hosts are reluctant to change software versions (php a good example) because it could break clients' sites which use deprecated code. You could always ask for a migration to a server with newer software or try a different solution. E.g. If youre in the UK, Tsohost's cloud platform lets you change php versions on the fly just by setting the mimetype for .php in your .htaccess. 
aerys was designed to work just as well in windows as any other sane OS environment, so yes.
How does Aerys compare to [reactphp/http](https://github.com/reactphp/http)?
Meanwhile, I figured out that configuration is quite different when running nginx. I'm just not sure if users should even have the choice to put all of magento in their docroot.
Thank you for responding. I'll try to refactor my [lib](https://github.com/naroga/foreman/blob/master/src/AppBundle/Processor/Processor.php#L153-L157) that uses React/http to try to fit Aerys.
If no news is good news -- does no feedback mean good feedback?
Applies to PHP as well...
Because the whole point of it is that strict types is decided by the caller, not the definition. This means that if you don't want to use strict types, you never have to, even when using third party APIs.
So you're saying I can override third party strict types even if it's declared in said third party api? This also goes back to my last question, what if you only want this for a per method/function use case? Not everything in said file. Something seems off.
I can't believe this wasn't worded like: **They sequel rollin', they hatin'** What a missed opportunity. Also, author's argument seems misguided. GraphQL is not the new NoSQL. It's not a database at all. GraphQL sits at the API layer and it wants to be nothing more than a public API to an arbitrary domain backend. You can power that backend with anything, including SQL. So, you know. Apples. Oranges.
I am currently looking into [JSON Web Tokens (JWT)](http://jwt.io/) standard and it seems a perfect fit for your system too. There are many libraries that implements the standard in different languages. The best for PHP seems to be [lcobucci/jwt](https://github.com/lcobucci/jwt) and it implements all the different algorithms you can use to encrypt, decrypt, and verify tokens. The nicest thing of JWT is that you don't need to store anything on your side, if you don't want. The token itself already contains, or rather can contain, all the information such as user id, expiration time, activation time, etc.
Consider using an [ssoaas](https://en.wikipedia.org/wiki/List_of_single_sign-on_implementations) such as Authrocket or Stormpath or another. I haven't used one personally, but I imagine the right one would save you lots of time and headache.
Fair enough. Wish I did, what's the price like now?
`?` is the "nullable operator" in Hack. `?string` is simply a nullable string. It means that `$input` can be either a `string` or `null`. If it was just `string $input`, then `$input` would always have to be a string. http://docs.hhvm.com/manual/en/hack.nullable.php
&gt; Popular web publishing tools such as WordPress and Drupal rely on it as their main data source - and there is no major change in sight for them. The fucking irony there is that at least Wordpress *COULD* get away with NoSQL document store, since they abuse the fuck out of EAV for their "relational" storage schema.
my question looks stupid now xD thanks for the quick answer !
https://msdn.microsoft.com/en-us/library/ee658099.aspx?f=255&amp;MSPPError=-2147217396 check out references also http://www.amazon.com/Web-Application-Architecture-Principles-Protocols/dp/047051860X https://developer.mozilla.org/en-US/docs/Web
I have a question about the second hardest problem in computer science (naming things). Do you prefer classes to have "full" names including the type of class, or keep that type to the namespace only? For example, this: \App\Controllers\BlogController \App\Events\PostEvent versus: \App\Controllers\Blog \App\Events\Post
Since I'm getting confused again, can you put your words into an example?
Lists are useful, so here you go... * Don't use MD5 for password storage. Use [password_hash()](http://php.net/manual/en/function.password-hash.php), [password_verify()](http://php.net/manual/en/function.password-verify.php) and [password_needs_rehash()](http://php.net/manual/en/function.password-needs-rehash.php) instead. These are far more secure. MD5 or even SHA1 for passwords is *very* bad. * Generating a unique token for email verification etc could be something like `$token = md5(microtime().rand());` * When you store your toekn, simply store the creation timestamp along with it. Then when verifying the token make sure it isn't too old. You could also have a maintenance task delete expired tokens. * Instead of storing a 1 or 0 for "confirmed", maybe store the timestamp instead or as well. More data is always better.
I like \App\Controllers\Blog. It's redundant to say it's a controller-type controller. I'd bet that people's answers will be based on their IDE, and whether it's smart about showing the file name in the tab. Eclipse and NetBeans, when I used them anyway, blindly only showed the file name, so you might have \App\Controllers\Blog.php \App\View\Blog.php which show up as two tabs, both labeled "Blog.php". Frustrating. SublimeText is smarter about this, in that it will show the file name Blog.php when one file is open, but if another Blog.php opens, it shows the folder names, too ("Blog.php - /Controllers/" and "Blog.php - /View/").
IMO it comes down to a judgement call about how *likely* I am to get confused, which depends on what other classnames you think you'll be using together often. Remember you can always alias things, e.g.: use App\Controller\Post as PostController; use App\Event\Post as PostEvent; 
Thanks for posting this! I fixed my hilariously bad example from before, appreciate everyones feedback. I have been working on PHP extension for 6 months (getting ready for PHP 7) and this is my first big change to *hopefully* land in php-src. If it doesn't land at least it was a good learning experience, hopefully get feedback on the internals list.
No more articles like this pls, software is not a game of king of the most generic hill imaginable.
Thank you for the contribution!!!! :-D
Just to be clear, this isn't an object-abstraction as much as a table-row abstraction system, right? Bikeshedding stuff: * `$user = new Users();` sounds wrong, it has a singular-vs-plural mismatch. * SRP, I'd rather see a `User` entity class and a `Users` collection/repository/whatever class, but not both together. * Naming-wise, I've seen some other systems refer to your `Query` as something more like "criteria" or "conditions". * You may want to consider `DateTimeImmutable` instead of `DateTime`, or else make sure that the code makes copies on input/output.
I think it actually varies based on how likely it is the class name is going to be referenced in the middle of arbitrary code. Most controllers are ever going to be listed in a routing file, so the controller class name is not even going to be seen, so just using the 'brief' version is fine. Other classes are only used 'internally' by a library and never exposed to the outside world, and so again, using the brief version of the name is fine. But for other stuff, where it is probable that a class is going to be used outside of the module where it is defined then having clear name is useful to avoid having to alias everything. From your example, 'Post' by itself just wouldn't be clear when used out of context. Even when using an IDE, having all the code be easy to reason about by just scan reading it is a useful thing to be able to do.
Its mostly for semantic reasons. GET to retrieve a resource, POST to send data to the server. As has also been mentioned, GET requests can be cached, and various other functionality that seperates it from POST. There are good reasons to use both.
Referencing W3schools is bad form and borderline misinformation. Either way, it's not a reference from the [W3C](http://www.w3.org/). The bullet points W3schools listed are implementation suggestions. The http caching reference (rfc7234:4.4) implies you don't want to cache when methods used have "unknown" safety...right after listing PUT/POST/DELETE as unsafe. There's nothing in the protocol that technically prevent any of the listed conditions, including POST caching (see: http://www.ebaytechblog.com/2012/08/20/caching-http-post-requests-and-responses/). My favorite attributes of a GET request is that it's easy to transfer and allows for client modification (usually) when you want to expose it. e.g. pagination.
Stas could.
[/r/phphelp](https://www.reddit.com/r/phphelp) is that way. It says right in the sidebar that this isn't a support sub.
This hasn't been mentioned but POST is binary is and GET is plain-text; therefore POST can contain a much higher amount of encoded data (in bytes).
thanks for the reply, for some reason I wasn't notified that I had a reply
If you want to access a web page, you have to GET it. That's how the internet works. Your browser sends a GET query to a server, and the server responds with something, generally a web page. A POST call is more complicated -- you actually have to post some data in some way, and you need to set a header explaining what kind of data you're posting (multipart form data? JSON? A file?). When you're accessing a web page, you neither need or want to do this. More generally, there's a notion that GET requests are read-only -- that is, if you make a GET request, you aren't changing anything in the server. POST requests are generally not read-only. PUT and DELETE requests are generally idempotent -- if you PUT or DELETE the same data a second time, it should do nothing. On the other hand, if you POST the same data twice, chances are you've created two copies of the data! These notions are part of the REST standard, a principle for designing web applications (one of several). They don't actually have to be followed, but if you follow them, your web application is easier to understand. At work, I work on a REST API, and we only use GET, POST, and DELETE. We usually structure things the following way: GET /resources gets a list of resources. POST /resources creates a resource. GET /resources/rid gets information about the resource with ID rid. POST /resources/rid updates information about the resource with ID rid. DELETE /resources/rid deletes the resource with ID rid. Of course, you don't need to design *your* web application this way!
Full disclosure - I don't remember how it was worded originally, if it changed or not, but saying that GraphQL makes graph databases more "adaptable" is nonsense. GraphQL is not serviced better by a graph DB compared to an SQL one - it's just an API format for fetching a tree of data that can be stored or computed on the fly in any way at all. The only thing that is "graph" about it is its name, which refers to Facebook's "social graph", which is a graph in an abstract sense only, and it's not backed up by some sort of specific graph DB. Funny thing, BTW, "relational" in SQL refers to one table, not to fixed relationships between tables, and "relational algebra" means ad hoc combinations of tables that produce new flat relations (result sets), which graph DBs typically don't support **at all**, so the quote about graphs being "natively relational" is nonsense, as well.
but even if a random could post to somewhere to delete something, it is worth noting it would not be any more superior, and would still be a bad idea!
Well, I've held my vote for now because the diff seems way too large for this feature. I would have voted no against the `::class` addition because of side effects of the implementation if I knew them at the time, which is why I'm being cautious now.
All HTTP methods include a REQUEST_URI * should be comprised of the resource * optional query parameters may be included * should be devoid of protocol The GET method, is literally to send a request to a source, and retrieve (GET) the result with response body The HEAD method, much like the get method is for when you do not wish to retrieve a response body The PUT, POST etc extend this further, by allowing a request body in addition to the REQUEST_URI There are only advantages in context for any of the HTTP methods, as they all serve very specific Intent's, which is why HTTP REST is becoming such a useful and expressive way to expose services over HTTP.
Awesome response. Very helpful. 
Vagrant, Docker, many more...
&gt; Did they change it or are you trolling? I choose C. You're bonkers.
I would love a review! I would say just architecture though, it might have some issues that will be caught by better tests (will write if the RFC passes) The diff ended up being so large because of reflection + docComments + compatibility shim (_ex functions) to not break existing extensions. I may have pulled to much into one PR....
The main gain talked about is speed. So yes, if your pages render faster, you can handle more requests with less hardware to a point. Your customer satisfaction should also go up, given that they will access content quicker.
&gt; I personally don't understand why this setting is necessary at all even. At the end of the day, it's a compromise. Adding strict typing in any form was a contentious issue on the internals list that led to one person quitting the project. Once PHP 7 releases and projects start requiring it, it'll be interesting to see how they make use of the feature. I can see libraries using it for all internal calls but still using data validation for external calls since strict types may not be enabled. 
Good catch, talking about how it affects spidering. Worth mentioning: in the case that you DO want something spidered (again, like search results) make sure that you use GET requests to allow spiders to discover that content.
It's still susceptible to remote php execution. You can craft a URL to get it to execute code from a remote server.
&gt; Originally, they were a fraud site used to monetize traffic. Ok, but are they correct with their information now and provide value? Maybe I'm only ever hitting the pages with the legit info whenever my brain stops working and I need to look something up and end-up on their site. &gt; turn off your adblocker Oh hell no. I'll take your word on that then. I always forget that the web I see isn't necessarily what everyone else sees, so that's a fair point... but I can't begrudge a site that wants to earn money. That's what I hope for with my own website after all. &gt; Certificate Yeah, now I remember people mentioning that. But, still, in terms of the info they actually present is there any beef with the data? If you ignore the noise, as I do, and are looking something up people make-out that using W3CSchools is going to give them the plague. tl;dr if you ignore the bullshit, is the actual info provided legit or not? AFAIK I've never come across anything blatantly incorrect. Maybe explained poorly, but not necessarily incorrect.
Who leaves phpinfo() calls lying around?! If you do that then it's your own fault.
I could and would. Seems like needless complication.
Is it really a bug, or is it a change in behavior that users should be notified about? The only bug here, from my perspective, was my previous lack of understanding of how PHP 7 handled strings.
Unless something is explicitly passed by reference, it shouldn't be treated as a reference.
That's not true. The format of the data either sent to or returned from the server is not dependent on the HTTP method.
Thank you for the information on password storage and your suggestions, I'll definitely follow through with the database entry including a date, information is good! :)
As said before, I feel like upgrading to php 5.5 would be a headache, however completely possible. Would you happen to know of any older utilities/free platforms that may support php 5.3?
Murphy's law. Maybe either an inexperienced dev, or youre troubleshooting an issue and are having a clumsy day. If its viable as a possibility, then you should prepare for it.
But what if I want to just shutdown without it consuming resources, wouldn't "vagrant destroy" br too much overhead?
Thank you for clarifying where I wasn't quite right.
The only time I use destroy is if I want to completely re-download and re-set up the VM. Suspend and halt don't do that much, as jacobhenke points out below. They also leave things in a state where they can be brought back up without having to re-set up everything.
&gt; It doesn't trigger autoloading, and the thing doesn't have to even exist. I find it quite useful as a refactoring-friendly way of referring to classes. * It's not "stringly typed" like writing `"\Foo\Bar\Baz"` * It works with `use` aliases * Many IDEs will automatically know what you're referring to for "find usages" and automated refactoring The lack of autoloading is, IMO, the right choice. It's whatever you do *next* with it that should involve autoloading. The important thing is that you can reliably obtain a reference to the class.
As far as the userland goes, PHP 7 should not handle strings differently. It's definitely a bug. Of course, it may be a bug in the Sodium stuff, not necessarily PHP7. I bet `memzero` does something crazy that breaks the normal copy-on-write behavior with the latest optimizations.
To everyone worried that this is a bug in PHP 7, or that you need to start checking if strings are / are not passed by reference: Userland PHP code is *not* affected. PHP userland strings are immutable, which is why PHP 7 performs this optimization - why waste time copying the string for a function call when it's immutable anyway? You only need to worry about this if you're doing something low-level and mutating strings. (Something like `$str .= "foo"` is *not* a mutation - it's creating a new string and assigning that result to `$str`).
OK, so this is one of those gotchas I should mentally file away along with stuff like Runkit-extension or the quirkier depths of the reflection-API?
ah, i haven't ever used libsodium, i thought it was just a regular php class library, not a wrapper for a php extension.
This option wouldn't affect the userland behavior of PHP.
It may be used for seamless updates. Spawn updated droplet, and when it's all ready just switch the IP to it. 
This article and reddit post are just link building for a domain / blog. Get a good page rank and sell the domain
The easiest approach for you at this point would be [Vagrant](http://www.sitepoint.com/re-introducing-vagrant-right-way-start-php/).
I already reported a bug about references, and it has been fixed a few hours after my report. You should fill some reports, so this behavior won't make it to the release.
Laravel Homestead only shares the name with Laravel - the VM itself is able to support *any* PHP installation / framework, not just Laravel. [Here](http://www.sitepoint.com/tag/homestead/) are some *good* posts about Homestead, including a bunch of examples where it was used to install completely off the charts software.
What libs or techniques are there for parsing string streams in PHP? 
can you give an example of what __is__ a low level string mutation that would be effected by this? edit: ok so apparently this library OP is using is an extension, and the bug is not reproducible in userland code, right?
Correct.
A lot of talk about performance here (which is probably the easiest sell, especially if you use cloud infrastructure and can turn down the amount of computing power you are paying for on day one of your successful production upgrade).... But worth pointing out that developer benefit *is* business owner benefit generally. Happier devs using more modern tooling will lead to better morale and generally that will lead to better outcomes. I mean, the null coalesce operator alone is probably going to make most developers weep with joy. 
So the takeaway is: Buggy extensions leads to buggy behaviour. That is hardly news.
for 5.3 you can use sentry, the previous version of sentinel https://cartalyst.com/manual/sentry but it's kind of deprecated
That sounds good, and ultimately it is down to the individual or company licensee to ensure that only they benefit from the encoded files. It's surprising that the client couldn't manage to knock up a simple shell script to do their encoding job though as it's so easy to do. We'd be interested to see the interface and feel free to ask for any input if you need it.
Whenever you want to consistently use anything; purely to pass data, add methods, or test, you should use an object over an array "ideally". The problem is that programming tends to be far less opinionated than people! PHP does not have struct, which is sad; because as someone who knows C, there are lots of places I use arrays, I would prefer to use a struct, so that I could benefit; the data could be verified to be of a type, whilst not needing the overhead of internal methods etc. I'd say for me there is a hierarchy for data-only types * Array (PoC, Prototype, Early Software) * StdObject (Prototype, Early Software) * Object (Most production software, long-term code) It's incredibly easy to write off something that has empty classes, or interfaces, or exceptions, just because, but if you are working in a larger team (10+), then really you should use objects over array's for anything past prototype / PoC stage as it can affect large teams.
Something to that effect, yes.
One among many: validate the data. Even if you access it as an array, you can add code that will reject or sanitize itself. $phone['Evan Edwards']='814889.8845'; echo $phone['Evan Edwards']; (814) 889-8845 That's a bad example when you run into the second person named Evan Edwards (of which there are many) -- use a unique ID! -- but it illustrates the idea.
&gt; POST requests have no restrictions on data length It depends on Content-Type
that one i haven't used, so not sure.
did u restart apache?
The constants, in particular private ones would be used within said class. It would therefore often be useful to know their value within tests, particularly if they are case values or return values.
Now I want to make a ProductCodeGenerator. When those rules were rightly public knowledge easy. On the other hand with them protected I either need to change the class or worse duplicate knowledge of these values making maintenance a nightmare.
Performance, security, maintainability, support. Using much less ram. That means faster applications paying less for availability.
Thanks for the clarification!
Object contains behaviors that can operate on the data, array does not. With objects you can create more elegant APIs that are easy and convenient to sue. You should always use objects, and only use array sparingly. In a perfect script/program, everything is an object. 
Strings in PHP5 were always copy-on-write as well; it seems like it didn't optimize *as much* as PHP7 does but the semantics were always there. `\Sodium\memzero()` is a function that doesn't make much sense with copy-on-write strings. If it worked liked a PHP function should, it would copy the string before writing to it -- but that would defeat the purpose as it would simply zero a copy of the memory. So instead it zeros the original value no matter how many references exist. Theoretically, it's just as wrong in PHP5. 
The case you make is a little different depending how much legacy code you have. If this is a new project or relatively new it is an easy case to make. You just cite the speed advantage and how the older versions will eventually not be supported anyhow, so earlier adoption pays dividends. If you have a 10 year old web app that has will need to be thoroughly tested and over the years it has been built by five development teams with three frameworks (2 of which were homespun) you have a harder pitch because you will spend a good amount of time on this. Granted, it needs to be done at some point but it is always hard to sell developer time to achieve what appears to the higher ups as status quo. By the way, my experience resembles the second case. I've been spending years gradually eradicating mysql_query calls and all sorts of things that I saw on the road map that wouldn't fly with PHP 5.5 and onward. 
Do you hire John Deere to do the retractoring? LOL. Best typo ever.
came in here to say basically this (with respect to YAML). It's a TERRIBLE configuration language, just don't do it. Having things go wrong because you didn't put a space in the right spot is just such a shitty way to do a configuration file.
Not to say the spaceship operator isn't interesting, but do you do those comparisons enough for it to even be more than a blip? It's not adding any missing capability, just making the code a little cleaner in a very specific use case.
Why don't you move the isset into the URL check? 
Other have already dealt with some of the benefits of "real" classes (with names, methods, etc.) so I'm going to answer this assuming you *don't need* any of that, and you're really just asking about the difference between: $a = array( "x" =&gt; 1, "y" =&gt; 2, "z" =&gt; 3, ); $o = new stdClass(); $o-&gt;x = 1; $o-&gt;y = 2; $o-&gt;z = 3; I may choose to make a structure with `stdClass` when: * When I want a quick data-structure with *cycles* * When I want to easily *mutate* deep parts of the nested-list/tree/graph With arrays, you sometimes need to fall back of &amp;-references to get certain kinds of transformations. For example, this doesn't work: foreach($x as $i=&gt; $y){ foreach($y as $j =&gt; $z){ if($z&gt; 5){ $y[$j] = 0; } // Won't work, you're editing a lazy-copy } } Sure, you could use `&amp;$y`, but unless you are very disciplined about always `unset()`ing it you can get some really nutty bugs. 
If you need them outside of the class, they shouldn't be private, no? Maybe use Enum, or add a getter.
Thanks, I was using Vagrant Halt but I'll switch to Suspend (I guess the only downside is that it uses some diskspace ?)
I know the OP said "apart from performance", but this should still be mentioned: &amp;nbsp; Objects, *with defined properties*, are more memory efficient than arrays as of php 5.4. This has to do with the internal hash map which PHP creates to manage the name/value relationship in each case. With classes, each instance can use the same hash map; with arrays (and dynamic properties), PHP must generate a unique hash mapping for every instance, even if the structure is identical to another instance. (Reference: https://gist.github.com/nikic/5015323) Note, this is _only_ relevant in cases where more than one instance of the structure exists at a given time (such as a collection of "people"). Note, the memory gain is higher as the number of members increase and the number of instances increase. &amp;nbsp; Other points are related to creating using `classes`. This points lose value if you are looking at the difference between `stdClass` and an array: &amp;nbsp; &amp;nbsp; Related to documentation... Using classes allows you to create exportable documentation to tell your future self what each property means and what type it should be. Your future self will thank you for this. Your future contributors will also. &amp;nbsp; &amp;nbsp; Related to coding tools... Common coding tools in IDEs can provide autocomplete on the properties of a class which reducing implementation time and helps guard against typo's in member names which cause hard-to-find bugs. Additionally, if a typo does occur, your IDE and code-sniffing tools can warn you that you are using an undefined property. Related to usage of collection members... If you have a multi-dimensional array which represents a collection of "Persons", you can use type-hinting to dramatically reduce the amount of defensive coding necessary. Consider this: &amp;nbsp; The following example can't *know* that the received argument is a person. It works around it with a form of "[Duck Typing](https://en.wikipedia.org/wiki/Duck_typing)"... function outputFullName(array $person) { // Does it look like a person and quack like a person? if (!array_key_exists($person['firstName') || !array_key_exists($person['lastName'])) { throw InvalidArgumentException("Not a person!"); } echo "{$person['firstName']} {$person['lastName']}"; } &amp;nbsp; With type-hinting and classes, you can have confidence in what you are working with: function outputFullName(Person $person) { echo "{$person-&gt;firstName} {$person-&gt;lastName}"; } (_note_: I do not generally advocate public members of classes, but that topic complicates the examples and is out of scope of the OP's question.) &amp;nbsp; And the end of the day, it just gives you more structure which gives you more predictable code and less chance of errors. This does not even scratch the surface of the OOD principles it gives you access to such as inheritance, composition, and interfaces. &amp;nbsp; **Edit:** Editing for formatting.
When you use it on something that is not a class (say a function) it will not resolve correctly under certain conditions. (I think it's in a namespace or if it's been use'd). My point is essentially that it should have had the same side-effects as constants, not some parser magic. Also, for your suggestion to work properly on functions and classes both it would have to do something like this: $foo = nameof function foo; $foo = nameof class foo; This is because functions and classes have different symbol tables, etc.
I tipically use dotenv (https://github.com/vlucas/phpdotenv), with a .gitignore on the .env file while a .env.example is committed to the repo.
* Huge performance boost (which means more savings in CPU/RAM, which means more savings in $$$). * Maintainability: PHP 7.0 introduced a lot of new features (like scalar typehinting and function return hints) that help developers make more 'strict' applications. Here, 'strict' almost always means 'more organized', which means you'll spend more time focusing on the business needs and less time fixing problems introduced by lack of organization. * It's new, which means it'll continue getting security updates, fixes and new features. PHP 5.x will not be getting new features, only bugfixes and security updates. If your company chooses to stay on 5.x land, you will soon be handling legacy applications only - which will drive away competent developers, will lock your apps in deprecated dependencies. Which means YOU will be keeping those libraries that were long upgraded to 7.x (but you couldn't upgrade them because of that) up to date. Which means -$$$.
And sometimes you use 3rd party libraries you can't modify for uses they never dreamed of.
...And you never used code you didn't write/don't control? Never pull anything in with composer?
&gt; Create (POST), Update (PUT) I'm sorry, but that's wrong. The only difference between POST and PUT is that PUT is [idempotent](https://en.wikipedia.org/wiki/Idempotence). Either can be used to create or update a resource, and should be differentiated based on the idempotence of the operation alone. GET is, however, a semantic verb. It should be used to GET a resource (or information about a resource). Same for DELETE. See this stackoverflow answer with 2400 votes for more information: http://stackoverflow.com/questions/630453/put-vs-post-in-rest
I've had problems in the past with `suspend` not re-mapping network bindings when you `up`, which I resolved by switching to `halt`. There may be some other fix for that though..
Did you miss where I said "basically" I know it it not an exact 1-to-1 relationship, but when explaining to someone who doesn't even understand why you should use GET instead of POST I think it is a pretty good starting point.
Build something. Figure out a small idea and start building it. When you get stuck search online. For example, if you are not sure how to connect to a MySQL database in PHP then search "php connect to mysql database". As a side note, please do not use the `mysql` functions; use `mysqli` (notice the i at the end) or `pdo` or some library that abstracts them.
For example the script I posted recognizes youtube and vimeo clips perfectly, however I doesn't change a non-video url like https://reddit.com and doesn't change it into &lt;a href="https://reddit.com"&gt;https://reddit.com&lt;/a&gt; notation. I don't know to finish this script to make it work.
How to connect to the database with PDO: http://www.phptherightway.com/#pdo_extension http://phpdelusions.net/pdo Also consider reading about ORMs while learning any framework. As for other questions, this could be helpful https://gum.co/skjRR
No, just start building your idea! 
Indeed. If a constant is intended as a return value for a public method, then it should too be public. It's not like this RFC magically turns everything private. Stuff like internal state is a fantastic candidate for private constants; in fact, it's been the canonical use case I've wanted it for for the last half decade. Good encapsulation pushes you towards `$order-&gt;isShipped()` over `$order-&gt;getState() === Order::STATE_SHIPPED`.
Hidden form fields may be easily manipulated to fake data. In fact, my rule of thumb is to treat anything in $_POST as if the user entered it themselves and therefore subject to scrutiny. IF that's not an issue you're fine. As soon as you use it to store something you don't want the user to be able to edit you're in trouble.
Well for starters, you would actually need to add another code-path to PHP everywhere just make this even possible; negatively impacting performance even in the optimizing case. Right now this "optimization" is merely how it works -- PHP has always had copy-on-write data structures and PHP7 just happens to do a slightly better job at it. Secondly, with such an option enabled you are negatively impacting performance of an entire application just for one poorly coded incorrect extension. This isn't a debugging, profiling, or analyzing situation -- this would be production code running with a very deep-impact optimization disabled. It's just a bad idea. 
&gt; Changing it without regard to other uses is a really bad idea. Wiping data from memory without regard for how it could be used is a really bad idea, and unfortunately it's up to the developer to use this utility with care. Any change that prevents it from reliably wiping data from memory will only render it meaningless.
Correct, no need for a maria anything its a binary replacement for mysql.
We are doing it for strong typing. The application is headless and CLI based, so that an mobile application as well as a wrapper for a web client can be made. Speed is not exactly our main priority right now, as the application itself will be light and mobile. It will just be me and my friend contributing for now, so that is why we are not really focusing on just PHP. He has already learned Hack on his own, and has made quite a bit of progress in the source by himself already. Modules will be made to attach to the source by a small community we have, hince the need for strong typing. So I don't think we should stray away from Hack, I should learn it sooner or later myself anyways. I may look at Laravel first, before I delve into Hack entirely. I had no idea there were docs for, as /u/jvwatzman and /u/benharold pointed out. :\ Thank you all for the input though, I really do appreciate it.
I'm not quite sure what you are planning on doing. Usually with templates, when you access a page, the template is loaded and filled with data from your database. When you are in list-view, all the pages are listed inside a list-template and when you click on a page, that category is filled into the detail template. But you don't really save any filled in templates to disk. The only reason to save it to disk would be, if you cannot use a database for whatever reason. But in general, if you want to read a template from disk and fill it with data, you can read it into a variable (tons of tutorials about that out there, fopen() and output buffer as keywords) and then replace keywords in the variable-string with the content you desire (Probably from $_POST, hopefully sanitized). Technically you could then save your variable back to disk as a new file. Not knowing your exact goals with this, you might want to reconsider if your approach is best practice. Often it's better to start with the problem, not with asking for help with a solution you came up with, leaving the problem away explaining it.
 $str = "stdclass"; \Sodium\memzero($str); Congrats, you just broke all code on the server! If that's fine by you, okay. There's probably people running runkit in production as well.
When you say "both use $_SESSION and save data using hidden form fields" what exactly do you mean? Can you give an example of the type of data you save and how then you use it on the back end?
&gt; Folks who want more aggressive strict types would rather an error than "10 Bananas" magically getting turned into 10 Yes, but you can't force that onto developers using your API. That's the point I was making.
What do you think would be gained by that? I just see wasted bandwidth.
Cross that bridge when it needed to be crossed. By then you wont be the only one facing the challenge.
Docs bro http://php.net/manual/en/function.mysql-connect.php
Thanks. That is definitely the way I should go, but I guess I was just hoping for a "lazy" way out and have another excuse not to upgrade to newer versions. Time to bite the bullet I guess. 
mysql_* has been deprecated for a long time now. Use PDO or even mysqli instead.
http://php.net/manual/en/function.mysqli-connect.php
Thanks, this is awesome, and I'll no-doubt use it somewhere, but it's not quite what I was going for with this class :)
I see your edit, but I also need URLs covered if it's all going to be done by a single page. 
Thanks... for some reason I've been hung up on the idea that the exact value should be returned... not a wrapper object (no-matter how transparent). If I get past this and swap to converting the data to nested objects on import then I'm pretty sure I could do... * `$Nest["sub"]["path"]; // using ArrayAccess and offsetGet()` * `$Nest["sub"]["path"]("default"); // using ArrayAccess and offsetGet() and __invoke()` * `$Nest["sub"]["path"] = "new value"; // using ArrayAccess and offsetSet()` * `$Nest-&gt;sub-&gt;path; // using __get()` * `$Nest-&gt;sub-&gt;path("default"); // using __get()` * `$Nest-&gt;sub-&gt;path = "new value"; // using __set()` * `$Nest-&gt;sub-&gt;path-&gt;funcName("default", "param1", "param2"); // using __call()` Of course, all of this hinges on having a class implement ArrayAccess _and_ the magic get/set/call functions, which I haven't tried yet but will today. If it works out I'll probably just create a new class since it'll be a rewrite and public API change. Thanks again.
One big wrinkle to consider with `$_SESSION` : What if the same user has **multiple tabs** open in their browser? Perhaps they're ordering two pizzas at the same time, there's nothing inherently wrong with that, right? Two options come to mind: * Give each form/wizard-process a GUID (big, unique, random, unguessable value) which is carried along in a hidden field, and use that GUID as a key to keep session data separate (e.g. `$_SESSION['pizza_wizard'][$form_guid] = $secretData;`) * Dump the data you want to "carry along" into a hidden form field, and *encrypt* it based on a random key stored in $_SESSION. (I'm glossing over some crypto gotchas regarding how you prevent tampering etc.) Then you rely on the web-browser to keep repeating it back and "carrying" it through the various steps. The good/bad thing about the second option is that it "goes back" to old information when the user hits the back button.
John Deere would probably Ioncube it to protect their IP and claim you're renting the code.
Oversight, that's what I thought I had linked too haha. Thanks for the correction 
&gt; W3Schools still has issues but they have at least worked on the primary concern developers had. For many beginners, W3Schools has structured tutorials and playgrounds that offer a decent learning experience. However, it would be a mistake to continue your education without learning from more reputable sources, so when you're ready to level up, move on. http://www.w3fools.com
&gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required)
Never heard of the GUID per form approach before, is sounds pretty interesting. About the second method there are also another couple of drawbacks. First, if the data stored in the hidden field is encrypted then that means you cannot modify it using Javascript, in some cases that may not be a problem though it depends on the application. Second, you need to remember that similar to the cookies data stored in hidden fields is stored on the client side, so the client needs to send it back to the server, for that reason you should avoid storing large amounts of data. Basically, the same reason why it is better to store identifiers in cookies instead of arrays of data. I think that the GUID is the best option if you need to have sensitive data that persists per tab. But, if the user changing the data stored in hidden fields does not affect the security of the application storing it on a hidden field in plane text is fine. For example even if the user is able to order a different type of pizza by changing the hidden input field, there is not security issue with that. Also, as I said you may need Javascript to have the ability to change the user's pizza before the submission of the form on a specific event.
I got it running... will wire up some tests and push it somewhere later.
This looks like something that would be... unsettling to run in a production environment.
&gt; If you're using IIS I would recommend using http://php.iis.net[1] to install the latest version of PHP and the PDO driver for SQL Server. Not all of us are in a position where they have any say over what servers their application will be running on/with.
[Check out this comment on PHP.net.](http://php.net/manual/en/class.recursivearrayiterator.php#106519) [There might also be an undocumented `CHILD_ARRAYS_ONLY` flag you can specify that may help.](http://php.net/manual/en/class.recursivearrayiterator.php#113884)
Alright I understand. Can you tell me what the Query String command would be? Also is there an easy way to have these pages ID automatically based on what the highest ID in the database currently is? Thanks!
So you'd have a db with each of these as a column: game_id, name, description, difficulty, cover img You would then build a few html pages as templates, which are populated by the data in the database. Your html page would have something like: This is the page for &lt;?php echo $this-&gt;name; ?&gt; and it is about &lt;?php echo $this-&gt;description; ?&gt; Before you load this page to the browser you would have a query to the database which goes and looks for that data and returns it to the array, which in turn populates your page. The query might look like this: Select game_id, name, description from games_db where name = $name; Does that help? 
Get a good tutorial about MCV and OOP (also a short one about PDO) and make your first app. Start with a basic CRUD (create, read, update, delete), like a to-do list app, and when you're done you can add features. 
I believe what the parent poster is saying is that this is not an error in PHP (where all vars are passed by reference) and is actually within the extension (C++?) which is not necessarily bound by the same conventions, thus the rift. Edit: I should say that the 'default' in PHP is pass by value, but from what I've read about the compiler this is actually a facade, and a copy is made along the way.
I second this, input parameter/argument verification is a huge plus if you need a strongly typed and structured medium. I'm unversed on what 7 will bring in regards to the memory detriments of using objects as opposed to arrays in PHP, but I don't see those as being prohibitive in the current cheap hardware-sphere.
Agreed. Store your data in the database (I know, but it can't be said enough) and your static content on disk. Never/rarely intricately associate the two. Allow your language of choice to assemble the content. Others have mentioned various frameworks, which for the most part follow an internal structuring such as MVC, etc. which do this very thing. One of the ideas of these approaches is that one day you may want your data to be portable, separate from your processing/publishing language.
Very likely you have heard of the GUID/UUID approach before, but called a 'nonce', a one use key. Given a certain set of input possibilities, this approach makes falsifying client data very difficult, if not useless. (banks usually don't care if you change your name to 'Turd Ferguson')
It depends on the sparseness of the data: * if you have a bunch of very similar data sets where only one or two keys are not set per item, you should use an object because you can exactly model which keys aka object properties can or should exist * if you want to store key =&gt; value pairs that follow no fixed common pattern or where only very few of maybe thousands of possible keys are set, you can use arrays In the later case you may need to refine your model and split the sparse array into distinct small classes that represents specific aspects of the data. (I am not talking about a sparse matrix or a similar mathematical "value container", that's something different)
You should still be able to grab the via Reflection, doesn't have setting yet though.
'Stand on the shoulders of giants' Pick a project on GitHub or similar repo -something you're into and find a problem you can solve and issue a pull request. It will be attributed to your user. Also, start answering questions on one of the solution sites like StackOverflow. Much of it will be over your head right now but you'll learn along the way and some of them you will be able to answer. Both histories look good on job applications. Later, develop your own open source solution to something and publish it, let people know how you think and be kind to detractors, they might know something you don't.
Good luck with your learning!
It's the equivalent of rebooting. I use it all the time in two different situations: * When I want a fresh boot because a server or something else crashed or the shared folders are acting funny. * I'm testing different provisioning configurations/scripts. Using "vagrant reload --provision" forces your provisioning script to rerun, even though it's not a brand new cloned VM. (I play around with Puppet for provisioning. It's pretty good about being aware of state and only changing things that actually need to be changed. If you're using shell script(s) you may want to be cautious about this). Obviously, re-provisioning will take longer...
why do you minify php script?
HA! Bullshit. They never care about these things nor do they understand.
I did a bunch of work for a company using older php and mssql. Sqlsrv is a must have. Mssql and odbc each have a variety of problems.
The reason as explained makes no sense. Data doesn't just disappear "for some reason", this sounds like the teacher encountered some problem some time ago, couldn't figure out the cause, and came up with this odd practice. Session and hidden fields have wildly different properties with different best use cases. And how are they proposing that you can ensure you are "working with the same data"? If you lose one of those methods for storing the data, you can't compare to the other to make sure it's the same, right? Logically doesn't hold up.
Our definitions of "sexy" are different.
How and when your html files generated. I'm hoping to perform batch generation of both html files and pdfs
Can I ask how you utilize prince? I've talked my boss into dropping the cash now I need to figure out how to use it. I'm going to primarily use it to bulk generate pdf files. Right now my data is stored in a dB so I'm not sure if I need to use a templating engine to pass mysql data through and generate individual html files for each invoice then convert those to pdf. Any insight would be greatly appreciated 
TL;DR - There's at least one significant, long-stabding bug in libsodium (an extension) which is hidden by PHP5's implementation details, but is surfaced by PHP7's implementation detail.
[This](http://diffbot-php-client-docs.readthedocs.org/en/latest/api-article.html) might help? Relies on Diffbot, though, so you need a free token from them, at least, and worth keeping in mind it's visual recognition, i.e. does not rely on reading and parsing source but on visual elements, which means it works with many human languages, but isn't always 100% accurate with the fine stuff.
nice, i missed this option when i switched from aws
a micro-framework or a simple router ? And yes, why do you minify php script ?
I found a solution. Thank you for you help. Check it out: https://gist.github.com/kamilsj/9422f3e58c03c0e0fade
It's not arrogant to show a little faith in the PHP process. If it's a bad idea it'll not be accepted. On the contrary those who downvoted me show they have so little faith in the PHP process, they're willing to suppress even the *idea* for a RFC that might turn out bad.
that's a cool idea.. Thanks for your good words. We will be adding few more issues very soon :) 
No offense, (and I will answer your questions) but since these are very basic questions I advise you to first read up about PHP more. There are lots of books and free tutorials online, I believe. &gt; Can you tell me what the Query String command would be? It's not a command. The part of a URL after the `?` is called the query string. In PHP, you can read those out via [the `$_GET` superglobal](https://secure.php.net/manual/en/reserved.variables.get.php). &gt; Also is there an easy way to have these pages ID automatically based on what the highest ID in the database currently is? Like /u/h3rnan explained, if you use MySQL, you can use auto increment.
Lol 
What is wrong with them sharing the same version number?
Enjoy living in the past!
One is a runtime for multiple languages and surely has its own issues and requires its own versioning. Hack should have its own versions. "HHVM 3.10.0 released". Does that mean that its handling of PHP has changed - maybe support for PHP7 is there? - or that Hack has changed? Right now it can probably mean both and you have no way to tell from the version number.
Interesting. I personally haven't used HHVM so I was unaware.
I think I am boned, The server is still on SQL2000 and I believe all of the newer sqlsrv drivers only suppport 2005 on up (correct me if I'm wrong) so that leaves me looking at newer dblib/odbc drivers that still has legacy supoprt for my ancient db. I am going to re-write the stored procedure so to eliminate the second insert. Thanks
Using arrays instead of objects is an anti-pattern, known as [Primitive Obsession](http://c2.com/cgi/wiki?PrimitiveObsession). The main reasons are already mentioned, but I think the link clarifies the wording around ValueObject a bit and gives perhaps a bit context.
It is on Apache, but I am pretty sure the latest PDO dirvers to not support sql2000. The procedure only returns a single resultset and when I comment out the second insert to a temp table and just emulate the result set with a simple Select at the end it works. I think I am going to cheap out on any upgrading for now and just re-write the procedure. Thanks for the tip.
This is exactly my issue. It's an old 7.0/2000 db running in a VM and they have no immediate plans to upgrade sql server. I fount [this](http://stackoverflow.com/questions/19783613/how-to-connect-to-mssql-2000-from-php-5-3-and-up) Stack thread that seems to highlight my exact issue. I am going to re-write the procedure for this issue to go away and then set aside some time to try and get the 2.0 sqlsrv driver installed an running on an updated php version.
Interesing POV. If they launch a bugfix for some specific function in PHP that has nothing to do with Hack, Hack's version will be bumped even though nothing changed. However, it would be kind of hard to follow things. "Hmm, this version is only available in HACK 3.1, but which HHMV version should I download?". The way things are now may not make a lot of semantic sense (bumping version even though nothing changes), but simplifies the hell out of the process.
I don't see that as a big deal honestly.
yes, however the use-case here is for zeroing a key (deleting it from memory). And as long as it's a non-interned string (which it shouldn't be as it's a key) then overwriting other uses is actually what this function is trying to do. Bypassing copy-on-write is actually what the function wants to do, otherwise it would be impossible to actually do what it says it will do.
Now that PHP7 is faster than HHVM it's not clear to me why people would be using HHVM anymore? Unless there's concern about BC breaking changes introduced in PHP7..
Well written Hack will compile to something that PHP7 can't beat, as can [repo authoritative mode](https://github.com/facebook/hhvm/wiki/Performance-Tuning).. If you're not really using the faster advantages of HHVM, then 7 is possibly better for you. (That said, some of HHVM's [built in profiling tools](https://github.com/facebook/hhvm/wiki/Profiling) are also quite awesome)
Which DSN do you use for connecting? 'mssql:host=...' ?
There are *claims* that PHP 7 is faster than HHVM, but you need to realize that these claims are made by parties that have much interest in it being so. If you look at [benchmarks](http://hhvm.com/blog/9293/lockdown-results-and-hhvm-performance) performed by the HHVM team, you'll see that PHP 7 is not far behind, but still slower than HHVM. I personally consider this result to be closer to the truth. PHP 7 will clearly win in other cases (e.g. running tests), but for running actual applications I would be surprised if HHVM weren't the faster for most cases. But really, that's not the main point (just trying to dispel some BS). If it's only about performance, the difference between PHP and HHVM is no longer huge. The main reason to use HHVM is that it also supports Hack. The productivity / maintainability improvement that Hack provides will likely be a lot more worthwhile than a marginal performance difference.
Note that Aerys support for http/2 is pretty much transparent and unified with http/1. After all, most of http/2 can be layered easily into a common API for http in general. the classic req/response cycle still is there, it's just the protocol layer which changed. I'll likely do something for server push too, at least there's a nice way to indicate prefetching with http/1, I'll probably unify that and use server push via that API for http/2 then. There's just PRIORITY frames in http/2 I have no idea what to do with, … standard allows ignoring them, so I do. In case they're needed more, I need someone telling me what exactly to do there ;-)
 $db = new PDO('mssql:host=IP ADDRESS;dbname=XXX', $username, $password); I am going to work around the issue by re-writing to stored proc to get past the issue for now until I can get the server upgraded and new sqlsrv drivers installed.
Why the focus on a single file? Personally if I saw minified php at the top of a script I'd nope out immediately.
In the controller just grab the parameters from the request and throw the values into a model class (e.g. SwitchCurrencyService). That why you encapsulated the logic for switching the currency and when you have another action that also requires switching the currency, than it can utilize the service.
Sorry for confusing you. Hopefully this is a simpler explanation... Let's say you have FooBar.php with `declare(strict_types=1);` and OtherFile.php without it. - Any function calls you make from FooBar.php, to any function with type hints (whether in FooBar.php or OtherFile.php) will fail if you don't pass the correct types. - Any return types on the functions defined in FooBar.php will fail if you return incorrect types. - Calls to functions in FooBar.php from OtherFile.php are not subject to that strictness. - However, regardless of strictness, all functions with type hints will receive that type in the function. Similarly for return types: you will always get back the type specified. So if you have a parameter `int $num` in FooBar.php and you call it from OtherFile.php with `func("123")`, then `$num` will be an int in the FooBar.php function. That means you can pass `$num` into any function requiring an int from FooBar.php and it will always pass the strict test. Hope that makes more sense!
This is really good. Have you put any thought into driving it toward a SPA dashboard (similar to https://rstudio.github.io/shinydashboard/)? I'm on lunch at work atm, but I'm going to take a deeper look at this later on. I'll try and get your code coverage to 100%, by then I should have a proper understanding of what's going on. Thanks.
I'm a big fan of Events and Observers. This is something you can use to open access to your bundle from other bundles. Also, the Twig functions are useful. For example, when you extend a template, you can use a variable instead of a hard-coded string; which means your controller action can return the template string. Another useful feature of using Twig, is you can specify sections in your layout for defining sidebars, and your child templates can choose whether to use them or not. In some CMS', you would need to switch the layout to be 1,2, or 3-column layout. With Twig, it's all the same layout. .. just my 0.02
As long as my version 9 licence is still valid and has the subscription enabled, I can upgrade to 10, right?
Can we open multiple projects in the same window yet?
Yes, see the [Licensing and Purchasing FAQ](https://sales.jetbrains.com/hc/en-gb/articles/204346171-How-will-this-impact-existing-customers-with-an-upgrade-subscription-): &gt; All customers with non-expired Upgrade Subscription can continue using the purchased products and receive benefits according to the original license terms (e.g. receive free product updates).
Only the most hated reason a developer can receive: another program (Netbeans) does it and it's what I'm used to. :P
Thanks for the reply and the advice/links! So basically I'll have 1 Symfony-installation where I develop my CMSBundle. In this first installation the BitBucket repo is set up in /src/CMSBundle and in the future projects I add the vcs-code to my composer.json file and it'll put my CMSBundle in /vendor/CMSBundle. (So basically my repo only contains the code from the CMSBundle-folder) Is that correct or am I missing something? Also, I have used SonataAdminBundle and while it was pretty cool to use, I'd love to have my own CMS to build upon. I was planning to build a CMS back-end, accompanied by GeneratorBundle skeleton overrides and start from there, adding models and using the GeneratorBundle whenever I need new/edit/save/delete pages. Then for the 'pages' model i'd use [Content Tools](http://getcontenttools.com/) to enable the users to make basic changes in the front-end rather than the back-end. Is that a good approach, you think?
Hmm, my license ended a few months ago. Have they finalized their new pricing plans yet? 
Pretty much yeah. The only difference is that it would be in your vendor folder, not the src/ folder. Sounds like a good approach!
Sounds easy enough, I guess :) Thanks for the tip! Phew, I'm relieved you think that way! Hopefully it'll work out as I hope it will, that way I'll have a CMS-base for all my future projects... Edit: One more thing; using a private BitBucket repo for this, how would I input my user/password? Or will terminal prompt me if I do a *composer update*?
I have a single controller exposing all XHR JSON APIs for a project. They have their own simplified routing based entirely on the object tree formed by my API endpoints. Individual routes and controllers are best suited for user facing pages, as you said. APIs can be a lot more streamlined. If you have questions about it, let me know.
They announced a while ago they were putting hack support on old: https://blog.jetbrains.com/phpstorm/2015/06/hack-language-support-in-phpstorm-postponed/
Yeah, I remember. I'm still not happy about that, and this clearly shows they are still full of marketing bullshit. If they are not going to ever do it, just fucking say that. Don't put it "on hold". If they don't have the ability to do this even with the fucking engineers that designed the goddamn thing helping them, I'm not sure why I would want it anyway.
&gt; And still no support for Hack. Has the number of people using Hack reached even 1% of the number of people using PHP? Oh, and Facebook have released their own IDE that lessens the market size for other IDEs that support hack. 
Plus async/await is a killer feature, and PHP the tools to achieve the same things are only becoming mature now amphp, icicle.io.
I think they count upgrades and updates as the same thing, so it should work. I haven't purchased any new licenses and the EAP works fine on my account, at least.
Bwahaha, this is so passive aggressive that it's amusing.
Great, I'll do this. Thanks for the gut check.
Thanks for the assist, I'll do this. 
I, for one, think extension programmers should use the C library functions and PHP development guidelines, and if they don't, then no RFC to change PHP because of it, is worth considering in my view. This optimization is pretty much as fundamental as it gets, and you're saying that because some extension programmer decides to go and zero whatever memory they want, an RFC to make the optimization configurable is worth considering? That's a pretty bold statement and I'd like to see you come up with some solid arguments to back that up. Until you do, or you convince me that you're a PHP core developer, I'll continue to consider your stance arrogant. If I had to guess why people downvoted you, I'd say that it is because of the above, and because the PHP optimization that's causing the libsodium code to misbehave, is perfectly sensible, to be expected, and therefore should always be on, and furthermore is so much a part of the core that implementing such a config option either has such a performance impact as to render the original optimization useless, or takes so much work that it makes no sense to even try. All of which has absolutely nothing to do with "the PHP process" whatsoever, assuming that by "the PHP process" you mean the PHP team's policy of creating, accepting and/or rejecting RFC's.
Sorry, like i said i was burned out. The tables are all "the same" customer data archived from an access db whenever it got close to the 5k row limit. The columns would get renamed, moved, or added/deleted. Ideally i'd like to make one table with consistant data, then break it apart with pivot tables as appropriate
Is there a PK you can use? Or do you need to match by name/email/phone number?
Yeaa
Each row has a pk, the separate tables are all consecutive archives of a single table. The column names, positions change every so often. So each table is like a snapshot of the parent at some point
Yeah, this teacher doesn't seem totally up on the latest in web development. This is through a community college, and I don't think my teacher has any professional web development experience, but rather more experience designing web pages in the late 90's. I'm trying to hang out here and elsewhere to learn how to do stuff properly. Our textbook is this: http://www.amazon.com/PHP-MySQL-Programming-Absolute-Beginner/dp/1598637983 and as far as I know, there is no such thing as PHP6!
Without seeing and knowing a whole lot (and I'm understanding you correctly) I guess what you could do is build a view that unioned all the tables together and aliased things to a common naming convention. e.g. SELECT First_Name AS FName FROM TableA UNION SELECT FirstName AS FName FROM TableB
Looks good, but I'm not a big fan of the slide in navigation on the left for every time you navigate to a new item.
If you bought it less than 1 year ago, then yes, you can upgrade.
+1 That's a really good idea.
This is a really general question. What reports? What data are we talking? Is it real-time or updated on refresh? Do you need charts? Will it produce PDFs? CSVs? Where is the information stored? To get you started most reports are displayed in **graphs and timelines**. A lot of that is really independent of PHP as it is Javascript libraries. D3.js, chartjs, etc. **CSV**'s can easily be created by PHP using that standard library [fputcsv](http://php.net/manual/en/function.fputcsv.php) is quite useful. **PDF**s can be created using multiple libraries but I am not sure what is the standard library at the moment [mPDF](http://www.mpdf1.com/mpdf/index.php) is one that I have heard of but I have no experience with. But you should be using /r/PHPhelp for these types of questions. This sub is for news/tutorials/information about the PHP language not support. Goodluck
I'm not sure I understand your situation/goal. I'd probably solve this with SQL if at all possible. Questions: * Can you reliably link together the tables by primary key, or do you have to "guess" that a row in the first table `(a.firstName='Bob' AND a.lastName='Doe')` refers to the same person as a row in another table `(b.first_name='Bob' AND b.last_name='Doe')` ? * When multiple tables have information about the same person, do you need to use the "latest non-null value"? For example, `COALESCE(c.numWidgets, b.widgets, a.widgetCount)` ? I'd break down the problem this way: 1. Figure out how to "know" that two rows refer to the same person. * If the ID is unique and consistent across all the tables, then this is already done for you. * If it isn't, then you need to decide what things (e.g. names) to look at. I'd either store your results as a link table (that associates a.id &lt;=&gt; b.id &lt;=&gt; c.id) or else add your own `unique_key_for_serious_this_time` column in every table. 2. Go through all the columns and figure out which ones mean the same thing about a person, e.g. a.firstName &lt;=&gt; b.first_name &lt;=&gt; c.givenName. 3. Craft an SQL query which can overlay everything and "choose the best or most recent" of the relevant columns Here's a vague sketch that assumes the primary key IDs are all consistent, so that ID#7 means the same person in whatever table you check even if it doesn't exist in every one. INSERT INTO my_unified_table SELECT a.id as id, COALESCE(c.firstName, b.first_name, a.firstname) as firstName, COALESCE(c.widgets, b.widgetCount, a.numWidgets) as numWidgets FROM tableA AS a OUTER JOIN tableB AS b ON (a.id = b.id) OUTER JOIN tableC AS c ON (b.id = b.id) GROUP BY a.id 
If you can get temporary tables like `temp_new_cols` |ideal_column_name|ideal_sort_order| |--:|--:| |id|0| |firstName|1| |lastName|2| |title|3| And `temp_col_coalesce` |ideal_column_name|src_table|src_col| |--:|--:|--:| |firstName|1|FirstName| |firstName|2|FirstName| |firstName|3|First_name| |title|1|Title| |title|3|Title| |dateCreated|1|DateCreated| |dateCreated|2|DateCreated| |dateCreated|3|Date_Created| You can use those with some PHP (implicitly sorting tables from newest to oldest) to generate all the SQL like: coalesce(t3.First_Name, t2.FirstName, t1.FirstName) as firstName, coalesce(t3.Title, t1.Title) as title, coalesce(t3.Date_Created, t2.DateCreated, t1.DateCreated) as dateCreated You could get a start on the "which columns are the same" temp-table by looking at the information-schema and boiling every column down to an [a-z] representation (e.g. `datecreated`) and using that as a grouping mechanism, but I'm sure there'll be some manual eyeballing necessary... I suppose you could also look at relative column-order positions, but I expect those'll give you less of a bump in progress. You'll still need some manual tweaking to do things like concatenate first/last names when they aren't already available from the full-name columns. ___ I suggest you approach this from the mindset of building a re-runnable (albeit temporary) software tool that takes input-tables and hand-crafted configs and generates an output table. It's likely that a week after you think you're done, somebody comes running and says "But what about Column X? I needed that!" and you'll be glad you can just make a little tweak and slam the "generate" button again.
What if some blackhat troll swapped two column names? You'd have no way of guessing. Is there any other id-ish field you can resort to? I guess you're persisting transactions, so you denormalize user, category, fees, currency, exchange rate, etc. There must be something else to normalize.
First, i'll admit i misuse this sub from time to time... Second, check OP's post history. Turns out he's found a way to be a sysadmin with little to no knowledge.
I'd like to hear more about how you've consolidated this functionality. Specifically: - how you've developed a route -&gt; controller -&gt; service structure that can mapped dynamically using one or a few controllers - if you have different ACLs for different endpoints, and how those are handled - how you handle different response types (e.g. HTTP codes), since I'd consider that the job of the controller (DTO/payload sent to controller, maybe?)
&gt; Facebook have released their own IDE oh? &gt; built as a suite of packages on top of Atom oh ... nooooo "Let's take a slow thing and ... make it even slower!"
I'll never switch to phpstorm for 2 reasons.. automatic saving/no ctrl+s + ask on exit to save all or none and workset/space switching. I use PhpED because of the support it has for multiple projects and the ease of switchiung between the projects (it takes about 3 seconds to completely switch an entire environment over.. all those tool panes you have). I also hate PhpED. &gt;:|
McDonalds is hiring...
I do hope https://youtrack.jetbrains.com/issue/WI-17601 was finally fixed. This bug is annoying the !$#% out of me every single time I use PHPStorm, and it seems like such a trivial fix. Sometimes I get the idea nobody at JetBrains ever really uses PHPStorm to build something, since they keep pushing new features without fixing the truly annoying bugs. I really don't mind the features, but they should prioritize major bugs a little more imo...
I used to work in a company where the application was split in micro-services. You would end up working on 3-5 projects at the same time. Migrating to PhpStorm was extremely painful. Now I'm used to it so I don't mind so much (like you I guess), but it reminds me that my workflow (even today with open source projects for example) could be better. I always have to change desktops (and 2 screens isn't enough if you work on more than that).
You can disable auto-save… Also that's very weird at first but you'll become addicted to it (if you use Git there's no issue you can always revert changes).
I agree this bug is annoying, butr come on, "major bugs"? It's a slight discomfort at best.
&gt; have a legitimate right and reason to be upset with No you don't. No company is required to cater to your particular needs. ***If*** they think there is a market for a Hack IDE, they'll do it. And no, your apparent entitlement does not constitute a market.
I understand it - that's why I don't have anything bad to say about it in particular.. it's a great IDE.. I just don't like that feature because the work I do (I typically jump between numerous projects) and in turn, sometimes I'm doing things that I don't want saved - I saw the local history when I tried 8 I believe. I like making files without having to save it, if im doing something quick-have to edit a clients file on a remote server that isn't in a repo, or a wordpress plugin file or whatever else I can think of.. I also will copy/paste random things (willy nilly) just for the formatting bonus and checking for errors.. I also don't like not being in control of things, and randomly saving things irks me - especially when I'm working in one project then need to open another file from a similar structured project (same framework, etc) which can cause issues if you're jumping tab to tab to tab and realize you touched the wrong one. Some years I'll work on 30+ different projects.. I rarely ever touch less than 2 diff projects a day. If I had 1 *maybe* 2 on going projects at a time, then I'd be fine with phpstorm. I'm constantly getting requests for old shit that I have to be able to easily jump back and forth to if I don't want to lose more time... quote on expanding this, how was (x) built, can (x) be added, do you have original files, make these changes, quick edit, blah blah blah. A good example of an issue with this, is, if I'm doing something and get pulled away from whatever I'm working on, then something else etc etc I lose the file I edited and if it's not something I notice right away that can lead to issues Then finally I've fine tuned my coding workflow that works on average the best for each different type of project well for me. /nosleep can't tell if this makes sense
It's all personal preference, so sure, do whatever suits your workflow :) One thing though: &gt; I like making files without having to save it Tools &gt; New Scratch File (or Ctrl+Alt+Shift+Insert) creates a temporary file without saving it anywhere.
Could you explain a bit more the "simplified routing based entirely on the object tree formed by my API endpoints" part ?
Why wouldn't that be under File (╯°□°）╯︵ ┻━┻ 
&gt; how you've developed a route -&gt; controller -&gt; service structure that can mapped dynamically using one or a few controllers I have a simple interface with one method: interface Endpoint { function resolve($name): Endpoint|Closure|null; } When you call resolve() with a name, it returns a child (as in a tree): either a child endpoint object, or an action (a closure, anon function). Null if not found. I have a trait which implements resolve() through reflection, it looks at public object properties and public object methods for resolution, so, say having method $endpoint-&gt;foo() means that $endpoint-&gt;resolve('foo') returns a closure, which is a direct reference to this method. Magic methods are skipped by ignoring methods that start with double underscore (__construct, __destruct, __call, __get, __set etc.). Reflection is one way to implement resolve() but the interface is deliberately extremely simple so it can be implemented in any way at all. Then I have a dispatcher, which takes a list of strings, and parameters and maps them to an action. For example if I have URL: /api/foo/bar/baz?hello=world Then I have a single route to single controller which captures this: /api/{serviceCall} In the controller I explode the segments by "/" and call $dispatcher-&gt;run($rootEndpoint, $segments, $params), which means that the above URL actually invokes this method in the dispatcher: $rootEndpoint-&gt;foo-&gt;bar-&gt;baz(['hello' =&gt; 'world']); This is a simplified account of what I do, but it's the essence of it. If you have questions I can go into detail. I don't map my endpoints to all the HTTP methods as is modern right now, but it's very easy to *slightly* modify the dispatcher, so that the HTTP method is taken into account and this invokes: $rootEndpoint-&gt;foo-&gt;bar-&gt;baz-&gt;post(['hello' =&gt; 'world']); // Say if method is POST Regarding input/output, all endpoints take a simple associative array as input and produce a simple associative array as output. The input the controller can provide from HTTP form fields and JSON request, and the response is JSON encoded by the controller (typically). &gt; if you have different ACLs for different endpoints, and how those are handled I can filter requests in advance before passing them to the dispatcher, but the core way in which I approach this, is every method requires parameter $auth, which contains a user token, and an application token. The endpoint can then verify this token with the authorization endpoint which handles all security, and decide whether to proceed or throw an authorization error, which the controller exposes as an HTTP 401 error. &gt; how you handle different response types (e.g. HTTP codes), since I'd consider that the job of the controller (DTO/payload sent to controller, maybe?) The actions (i.e. closures/methods) throw one of a few handful of exceptions for key codes: NotFound, Unauthorized, etc. The dispatcher itself throws NotFound when a resolve() call returns null. Any other exception is exposed as an internal server error 500 and logged. However, to speak frankly, for APIs, it's good enough if you simply return code 200 (success), 400 (user error) and 500 (internal error from unhandled exception). All the other codes are far more useful for *user-facing* pages, which are also crawled by search engines, prefetched by browsers and so on, but those codes are less important for API calls.
This bug disturbs the flow of creating classes/interfaces/traits, which I would consider an essential feature of an IDE for an object-oriented programming language. The guys at JetBrains seem to agree with me about the priority by the way: the issue was reported in 2013(well before PhpStorm 7....) and has been labelled as major bug ever since. I can't imagine it is hard to fix, but if I'm wrong they could at least communicate that with us. Nevertheless it is starting to bug me(hihi) more and more, they build lots of fancy features but don't address bugs that have been reported several major versions ago...
Yeah, it's a bit unintuitive :) I only found out about it myself when they mentioned it in a blog post. 
Just did here, I hope it's useful. :-) https://www.reddit.com/r/PHP/comments/3ps7dn/applications_controller_organization/cw9v5k5 If you have any questions about it, let me know!
If they resolve that issue where the code intellisense dialog takes 10 seconds to load I would be so happy.
The hack user base is like 100 people. 
I am the author of this article. It was intended to be the answer on Stack Overflow, but after I realized that SO is highly unreliable platform for sharing knowledge, I decided to post it on a standalone site I have exclusive control of. Having engaged in some recent discussions on Stack Overflow, I found it out that many developers stiil do not qute realize either the nature of SQL injection, and the necessity of protection measures. So, I thought it's worth to share my findings. I hope you find my reasoning reasonable and Appendix part quite entertaining. I'll be grateful for any feedback, questions and critics. Sorry for my blunt English.
Can you share sample code you believe can't be handled with parametrization and builders? I'll try to refactor it without ruining readability and flexibility.
Indeed, the static type system alone will make Hack far more attractive to large projects with many developers working on the source.
Speaking of prepared statements, the usual case is when variable number of fields is involved. Say, an UPDATE query that have to update only certain fields, based on the used input. Inevitable it leads to manual query building, which is proven dangerous. One cannot say that this case cannot be handled at all. It's rather an edge case where one have to mix prepared statements with manual query building. That's why I consider the new placeholder type, `?u` in my library, so much important: with it **we can leave not the safe grounds** of prepared statements: $data = ['key' =&gt; 'val', 'foo'=&gt;'bar']; $db-&gt;query("UPDATE t SET ?u WHERE id=?i", $data, $id)
&gt; softwaredevelopersindia.com Seems legit.
You can decode this here -&gt; http://www.unphp.net/decode/7493d05dd98d98e74abcc3d5e4a8202d/ From my limited understanding it looks like, for the right person (agent/IP) it puts something on the page to give them the ability to upload a shell or similar. A pretty common attack vector IME. Hope that helps!
Yup, I do use similar "macros" in my practice as well. If I can propose slight refactoring in this, though. One observation I have is that these syntaxes, builders and so on have a much shorter life than the bare adapters that expose a DB connection and its core features. So as we add more special functionality to query parsing we both need to choose too carefully what makes it in the $db class and what doesn't (or else we end up with a God class) and we burden the parser with looking for syntax rules which may be used or may not be used. This is why I use the following pattern: interface SqlStatement { function exec(SqlConn $conn); } Notice it says "statement" and it is somewhat similar to a prepared statement, but it may be implemented through prepared statements, or without them. Also a single statement *may* execute zero, one or more actual queries against the connection, that's up to the SqlStatement implementation. I have statements which run several queries in a transaction to achieve an atomic results and return an atomic answer. This remains transparent to users of the statement. To refactor your example: $data = ['key' =&gt; 'val', 'foo'=&gt;'bar']; $st = new FancyStatement("UPDATE t SET ?u WHERE id=?i", $data, $id); $affectedRowCount = $st-&gt;exec($pdo); Notice I'm using plain PDO here, not to recommend we use bare PDO, but to stress that the "fancy" features are not in the same object holding the live DB connection. This means I am free to use statements as simple or complex as I want (from simple examples like above, to complex builders or templates), and I can mix use of them against the same connection ad-hoc. I can also phase out a feature without breaking all the code which just uses my connection wrapper (I do have a wrapper around PDO which implements nested transactions etc.).
An obfuscated malicious code, are you site in wordpress? You should test your script for backdoors.
Anyone can say that. I hit this point a year ago, quit and packed up to a new city to take a new job. Best decision I ever made.
Don't use your real name identifiable accounts and ask them if they have a bounty program or a responsible reporting program. If they say that they don't or don't reply within a time which is satisfactory then do this: Just keep your mouth shut or you will quite likely be sued. The only thing you should do is simply not just trust that particular company with your data anymore. If the risk to public good is great enough and the bug simply must be revealed then it should be done anonymously and with full disclosure. Contacting the company will only give your address to them." Additionally, give info to [cert](https://cert.org),by following [directions here](http://www.kb.cert.org/vuls/html/report-a-vulnerability/) in detail in anonymous fashion and carry on.
I'm not a fan of godaddy either but you're just trying to spread FUD here... [Godaddy uses PHP 5.4 by default and 5.5 can be enabled.](https://ca.godaddy.com/hosting/web-hosting)
&gt; due to the completely hostile technophobic laws in the US, I'm hesitant to report the vulnerability for fear of CFAAA being thrown at me This is a legitimate concern. The first time I reported a vulnerability to a company, I got charged with felony computer hacking. Just walk away from it. Don't publish any more information that could lead anyone to identify the company, and leave it at that. If you already accessed it from an IP address traceable to you (i.e. You were not using Tor. VPNs and SOCKS proxies you should assume are being watched by NSA's TAO), anything you do now will only make it worse. If you want to contact US-CERT anonymously, they will probably know how to handle it. Good luck, hope you don't get arrested. Even if you manage to dodge this bullet, please consider using Tor for everything just in case you stumble across another curiosity in the future. :)
Thank you for the suggestion. Link added and the statement is reworded to be more clear, I hope: &gt;So, "nativeness" of a prepared statement is not that essential, as it proven by PDO, which can just emulate prepared statements, sending the regular query to the server at once, substituting placeholders with actual data, if PDO::ATTR_EMULATE_PREPARES configuration variable is set to TRUE. But it is properly formatted data - and therefore it is safe! 
&gt; Wait, this is a server you control? I have limited FTP access to a server of some kind (could be the agency's server, or it could be the wordpress host, not sure).
Then this is how I would write this: Dear Agency, I was logged into $account via FTP and I noticed download.php had a very serious security vulnerability. I hope by reporting it to your team, you can assess whether or not any of your other clients' projects contain the same vulnerability. Here is the vulnerability. Here is an example Proof of Concept (i.e. the URL snippet in this post) I recommend these steps to remedy these vulnerabilities: * (Actually list them here) Polite closing remark. Feel free to use/discard/remix this to adapt your situation. :) If you're not sure, try the agency first and the host second.
Thanks for the tip. Yeah, I'm actually coming in from a MySQL background and it's not the DB itself I find messy, but the mysqli class, which seems overly verbose and has some weird syntax. From what I've seen, the way Laravel handles it is so much more readable and intuitive.
Don't worry about what it does. You got hacked, and the longer you wait, the more damage this can cause. Here's what you do: * Inventory your Wordpress installation. Make note of every plugin and theme you're using, and any settings they might have * Make a local backup by downloading your entire Wordpress installation * Export your database locally. You can do this through MySQL Workbench, SequelPro, or (*shudder*) PHPMyAdmin * Delete Wordpress (everything except wp-content) * Delete all Plugins * Delete all Themes * If this is a custom theme, go through each file in your local copy and look for any suspicious code. If you have PHPStorm, you can run Find in Path on your active theme directory and search recursively for "isset($GLOBALS" (without quotes). If your custom theme extends a parent theme, repeat this process for the parent theme or re-download the parent theme. * Check all remaining directories for loose PHP files that don't exist within a Plugin or Theme context. This includes your Uploads directory, and its index.php file. Open each PHP file you find and check its content for suspicious code. Most - if not all - of these files should just have a single comment reading `//silence is golden` * Reinstall the latest version of Wordpress * Reinstall, activate, and configure all of your plugins * Replace your active theme(s) with your local cleaned versions, or - if possible - reinstall them from their dedicated repositories * Check your Users section. Delete any users you don't recognize * Refresh your .htaccess file by re-saving your Permalinks settings. * Change your Dashboard, Database User, Root Database User, and FTP passwords. If you have SSH credentials, you should probably update your SSH password there as well * DO NOT USE ROOT AS YOUR DATABASE USER. Change this if you are, and slap yourself for doing it in the first place. * Install [Wordfence](https://www.wordfence.com/) and pray you don't get hacked again If you make a mistake somewhere, you can always re-import your database. It is not recommended to move your infected backup files back to your server. That's about everything I can think of off the top of my head. A surefire way to not get hacked like this again is to [stop using Wordpress altogether](http://bolt.cm)
Please. If you have been granted access to a machine via SSH, then its not crazy to use it. If you've granted yourself access, thats a different legal problem.
And if you use a "fake" From address TONS of receivers will reject it and may even block you as a sender.
That only works with class methods, though. It doesn't work with functions or just general code in a PHP file (which literally every PHP request has *some* of).
Depending on the environment, a host (usually shared) may even block this and only allow outgoing email from your domain or a valid email address you've set up. In these cases the Reply-To becomes handy.
I would also say just walk away from it, unless you are 100% sure the company wont go after you. Dont risk your own ass for somebody elses mistake. If a sensitive site hosted there gets hacked, the owner will probably be able to sue the host and get some money back anyway. 
yeah you're right, no clue what they could do, but I could see it as an issue in the future.
Thing is, if they ignore this email for a while, and somebody actually gets hacked via that security hole, whoever reported it will becme the prime susppect (maybe he told somebody else on the internet? or was bored?). It is not worth it. If it was google, or paypal and there might be a possibility of actually getting a bug bounty, being hired etc sure, go fot it. Ashitty host company willl give you none of that 
Zend? Zend *what*? Zend ~~is~~ was a company, not a product.
To begin with, this was one of the best technical articles I've seen in a while, and the most complete on this topic. Thank you for taking the time to put this together. This one has been rather troublesome for me for a while now. I've been wanting to implement a prepare and execute approach to my SQL for long while now. My problem has been with dynamically generated SQL, that I honestly don't know what it will look like until runtime. I won't even know how many variables will be involved until the user has gone through selections. What's worse for me is that I make heavy use of large WITH() statements involving many sub-clauses. Some of these get into over 1k lines long. In some cases, entire SELECT clauses may come or go depending on needs. Anyhow, I just thought I'd comment on the fact that this can be one extremely tough nut to crack as the complexity goes up. I'm going to need to let this article sink in a bit and see if can direct me to a more viable solution for the kinds of things I'm doing.
Unfortunately the issue with the passwords from this article is that they're hashed using sha1, not a secure algorithm such as bcrypt. It will still take longer on average to crack the correcthorsebatterystaple passwords than the ai3E%9nh passwords, but because of the fast nature of sha1, it becomes possible to do either in a reasonable amount of time. Doubly unfortunately, a lot of prominent sites still use md5 or sha1 for hashing their users' passwords.
This is why I always prefer [calculating password entropy](https://github.com/rchouinard/phpass#calculating-password-strength) rather than using regex requirements. It's less annoying for users and it's generally more secure (with a well-chosen minimum entropy value).
I'm almost wondering if you're running Apache and have mod_mime installed for http but not https. And that because of that the CSS isn't being served up with the right MIME type and thus the browser isn't rendering the CSS.
The approach I had been contemplating focused on getting together one big string (as that's what I've been doing thus far) and then instead of tracking primitives, use an array or object for the value going in along with it's basic type. Kind of like... public function setName($name) { $param['name'] = 'Name'; $param['value'] = $name; $param['type'] = 'string'; $param['placeholder'] = uniqid(); $this-&gt;addToParameters($param); } Or something along these lines where I can track what all is coming in. Once set, then use the placeholder in the SQL and assign the values in one shot. I'm looking at it this way, as I'd be looking at multiple types being applied. Right or wrong, that's my initial thinking on an approach to this. 
I am running apache but I am not familiar with mod_mime, could you point me in the right direction for how I could install it for my https?
Thanks a lot (: 
To be fair, who knows how many wordpress sites this agency has built that are live right now :(
I'd just look at your http config for mod_mime and, if it's there, copy that over to the https config. If it's not even in your http config then mod_mime probably isn't the issue.
You're being reasonable, I was being trolly. I want to respond reasonably, but I feel it would kill the joke. &lt;/meta&gt;
&gt; "but... I already know sql, I already know escaping, and I know how to use both of those things" Except that query builders (good ones anyway) do all of this for you, you no longer need to do any extra redundant work to get the same thing across. I can supply doctrine $foo = (new Foo())-&gt;setTitle("*!@#^%!@LOOK AT ALL THIS USER INPUT GARBAGE fkjdsnaas '';jbsdguasdasd\]"); $em-&gt;persists($foo)-&gt;flush(); Done. This ORM went through my schema, used a query builder for the database of my choice, validated and sanitized everything for proper upsert into a database of various walks of life, from mssql, sqlite, postgresql, hell even mongo. You dont need to muck around with countless lines of redundant checking of input or output. As for selecting, the query builder lets you write a generic statement of instructions to the DBAL and it can translate it into whatever the database engine is expecting. $db-&gt;select()-&gt;from("tableName")-&gt;where($condition)-&gt;join($alias, $table)-&gt;setFirstResult($pageOffset)-&gt;setMaxResults($limit); This will go fourth and conquer any database engine the DBAL has a driver for. This makes migration to new databases a breeze and no need to refactor things. The results from the DBAL regardless of using the query builder or not, benefits from having built in output sanitization and formatting. I love being able to supply a PHP array to a field and it'll just convert it to a simple text array for me, and back out as an array just like I stored it. There's countless benefits and niceties. Also, maintenance. Everyones got a different idea of how SQL should look and operate, manually editing someone elses SQL query is a gross enough feeling that even Mike Rowe would be nervous to do..
Thank you. I'm always interested to hear how other people are solving the same problems as myself. I wouldn't mind hearing more about how the dispatcher and endpoints actually turn into a call stack equivalent to `$rootEndpoint-&gt;foo-&gt;bar-&gt;baz(['hello' =&gt; 'world']);`, but that is likely somewhat complicated and would require a lot more code for me to follow. You can add more details if you'd like, but it isn't necessary. One question related to that, though: How do you handle dynamic endpoints? What if you had a URI such as: /api/user/{userId}/friends That segment isn't a resource, so I assume it is dropped and added as an input or parameter?
Man, password rules can be frustrating. iTunes now makes you reset your password if you guess incorrectly 2 times. And it won't let you choose anything you've used in the past year. I assume they toughened up after the phone hacks last year. The most annoying is specific password rules on websites that aren't protecting valuable information. 
One of my banks has a 5 character minimum password.
md5 collisions. I don't need your actual password. I just need to create the same hash.
Whoa I just spent an hour and a half reading through that. Very very interesting, almost fascinating. 
&gt;evidently this wordpress host does no virtualization or sandboxing - You just described a normal cPanel server.
Oh wow. It's not just me. Also, every now and then the keyboard stops working due to an ibus error. I created a bash alias to restart ibus: 'shit'.
To daemonize the php/service;
Good work :) .
Honestly, I don't enforce any rules with passwords except to make them a minimum of 8 characters unless a client specifically asks otherwise. In fact, on the rare occasion I've done something more like required characters or a minimum entropy, I've been asked to remove it. Reality is that when you're building a system, the client generally doesn't care about password security. They care about being able to remember their password (many have never even heard of a password manager) and being able to type it in quickly. So instead I just enforce a min length which generally pushes them to be a bit more creative without feeling restricted. Edit: For the record, I build CRMs for small-medium businesses where the login page is the only publicly viewable page, sometimes available only on an intranet. So exposure is minimal, but I don't think I'd change that up at all in more public sites unless some user had the potential to wreak havoc if they were compromised.
An admin application goes (roughly) through the same life cycle as a public website, it also evolves over time (presumable). This means that also for an admin application separation of concerns is a good tool to make the system better maintainable and understandable. 
&gt; I haven't seen any CMS's using namespace In the code base you mean? Any _modern_ CMS does. There's absolutely no valid reason in 2015 to _not_ use namespaces, autoloading and packages. Projects that don't do this are the dinosaurs like Drupal 7 (soon to be replaced by 8) and WP. See this anecdotal chart: http://twokings.nl/preso/bolt/files/2015-10/who-doesnt-use-sumfony.png
Oh. I guess I did not do enough research. Haha, sorry to waste your time commenting on my uneducated response. I have to say I'm rather ashamed, as a developer with less that five years experience I'm still trying to learn and understand all these concepts. This thread was so I could see how some more experienced developers opinions differed from my own and maybe I could learn from it.
Problem is he'll forget his password. And then he'll decide he doesn't want your pizza anymore. It makes business sense to not have stringent password rules.
Separating concerns isn't really optional unless you enjoy pain, suffering, and bad code.
What kind of computer can crack my password through a webservice at 4 billion hashes a second - further, why the would anything capable of that want to crack my facebook password?
"red potatoes are my friends" is a ~~paraphrase~~ passphrase, not a password. This service calculates how long it would take a computer to correctly guess your password from generation. A string of relatively random words separated by spaces has high entropy versus a single incomprehensible password. It's not really accurate, however, it's true that you're ~~paraphrase~~ passphrase is relatively secure ~~nut~~ not because of the words themselves, but because they're separated by spaces. [You can accurately calculate entropy here](https://apps.cygnius.net/passtest/). But I don't ~~digest~~ suggest you use this ~~paraphrase~~ passphrase for anything sensitive. Edit: words are hard.
&gt; Zend is was a company, not a product. Zend framework is. http://framework.zend.com/
Your phrase is syntactically correct english, which puts it in an even smaller collection of words that need checking.
The problem discussed here is when an attacker has access to your password hash and can run all kinds of tools on it.
Thanks Hari, still need a lot of works tho
Good content editing experience, complete with built in media management. On the technical side multisite and multilingual built in. These usually suck when retrofitted.
The thing is in the last 5 years password generators have evolved. A lot. You don't generate a series of characters anymore. You don't just follow a dictionary. You use what people do: start with a dictionary of words and phrases then substitute some characters and add numbers. Then you get the passwords you just uncovered and add them to your dictionary. Rinse, repeat with millions of passwords you got from the huge databases broken lately. *P4$$w0rd* is as insecure as *password* nowadays.
Truly. I typed this while dropping a stranger at 3am with Swype. Always fuckin' Swype.
but wouldn't you have 3 or more/less password entry policy on your server which will ban the IP after 3 or more/less attempt? 
You can't (assuming the secret isn't feasible to guess) map arbitrary hash value to some other value such that *MD5(some other value) = hash*. It is indeed the pre-image resistance as /u/hackiavelli mentioned that makes this impossible. The best currently known pre-image attack against MD5 has something like 2^123 complexity, which makes it infeasible to mount such an attack. To mount "MD5 collision" (which is really simple), you are free to choose two different messages such that MD5(message1) = MD5(message2). This has 2^18 complexity. But this has nothing to do with password hashing.
I use this what do you think? $this-&gt;passhash_options = [ 'cost' =&gt; 8, 'salt' =&gt; mcrypt_create_iv(22, MCRYPT_DEV_URANDOM), ]; public function saltPassword( $password ) { return password_hash($password, PASSWORD_BCRYPT, $this-&gt;passhash_options) . "\n"; } // for password requiretments public function checkPassword ( $password ) { if (!preg_match_all('$\S*(?=\S{8,})(?=\S*[a-z])(?=\S*[A-Z])(?=\S*[\d])(?=\S*[\W])\S*$', $password)) { return false; } return true; }
Why do you think that following this wouldn't apply when you're building an admin application?
"I'm not so sure" isn't the same as "I don't think." I'm just trying to keep an open mind.
Of course, I'm not suggesting that you're telling people what to do. I'm just interested in the logic behind the question, there must be a reason why you considered a change in architecture between developing a general user application and an admin application. I was just curious.
No worries. I'm asking because we're intending to build a new admin. The current codebase was designed to run the public website, content management, feeds, 3rd party integrations, ad management, user management, and app management (e.g. Roku, iOS). We've migrated the public-facing website away, but still use the same DB schema. The schema itself is a nightmare and probably won't be fixed until the old codebase no longer interacts with it. The new codebase is a node/React frontend which consumes a Lumen API. While that's been working well for us so far, I'm not sure if it's a 100% good idea apply the same methodology to our backend. For me I think it really comes down to how we're storing our data. There are over 100 tables in the DB and some of them have many, many columns. We don't have the option to migrate the database at all right now (executive decision), so no matter how many services we build, it will still all read from the same DB. The API I've built is pretty simple in that it only uses GETs to essentially transform DB data into digestible JSON. It also only reads from the tables necessary to display content. My colleagues want me to literally copy the current API and then glom on everything that would need for full CRUD. This raises several concerns for me. * Obviously cmd+c/cmd+v of the code is not something I'm willing to do. If they must have CRUD through the API why clone the code? * Since the admin application will handle CRUD for all our data, why should we use a separate frontend? When I say separate, I mean a different repo and the code would be running on different machines. Isn't that kind of inefficient? * The different functions of our current admin are all cross-connected and rely heavily on each other. Even if we pull out some of the functionality into different services, they would all need to talk to each other. Wouldn't that be difficult to maintain? Wouldn't that be taking a large mess and making a lot of little ones instead? **Edit:** bullet points
For the people who were also thinking the article meant PHP-FPM, PHP-PM exists and is a different project. You can find it here: https://github.com/php-pm/php-pm
I hope you're stretching with a KDF, and realize the zxcvbn thinks things like "use the force luke" are pretty great.
&gt; Don't run them blindly over 100,000 rows and then complain to me when your server starts smoking, m'kay? Wait... it returns a collection where all rows are pre-fetched, and then you run where() groupBy() etc. on the *array*? That is a *big* missed opportunity to generalize the interface for collections to work on any *collection* and execute lazily at the last moment by running WHERE and GROUP BY on SQL directly. As it is, with prefetched and locally filtered rows, it's just a dangerous toy. BTW, I build my APIs in a very similar way, but my collections fetch from SQL (or whatever the storage is) directly at the last step. So my point is, it's very possible to do it better.
Sure. This is more along the lines of people getting ahold of a database of password hashes and then cracking those passwords and using them to log into other sites. In that case, "red potatoes are my friends" is a very safe password.
The problem with zxcvbn is that it's not async and makes your browser unresponsive – sometimes for several minutes – if you use a _really_ secure password. See [closed bug report](https://github.com/dropbox/zxcvbn/issues/69).
I don't imagine it is checking some things, like word frequency. Apart from the cases like yours, I like to assume it is generally decent for comparing different passwords, even if the timeframes aren't to be completely trusted.
This is more for those data breaches where the list of every user's password hash is downloaded and available offline. They can then go try those user/password combinations at other non-hacked locations. You'd be surprised that many people use the same password for facebook as their bank.
Are you still stuck on old 5.3, or can you move to newer versions? If you can, generators will address this issue for you - they allow you to iterate over data sets without loading them all into memory first. http://php.net/manual/en/language.generators.overview.php Further, if you can get onto PHP 5.4, you can make use of [League/CSV](http://csv.thephpleague.com/) which uses iterators to make working with large data sets, easier.
&gt; Wait... it returns a collection where all rows are pre-fetched, and then you run where() groupBy() etc. on the array? That's exactly what the author is recommending against. The article is just demonstrating some of the methods available in the Collection class. Collections are not an API for queries, they're containers for data (usually the result of a query). They aren't designed to go back and query again if you call modifiers.
&gt; PHP itself is a perfectly valid template language to embed in HTML. It might be for PHP developers. If, however, you're developing a system to be used by people with different areas of expertise, PHP is a _horrible_ templating system. I really love PHP, but I couldn't imagine letting my front-end devs use a PHP templating engine. 
If you are creating something like Collections, and you never intend to implement a lazy collection with that object, there is not point in wrapping it in an object, you can use static array helpers with the same result, but without the pointless back and forth wrapping and unwrapping. Static helpers also make it a lot more obvious that you are working with an in-memory array, because I can guarantee you, many people working with Collections have no idea what's going on as it is designed right now. Also look at the examples given and tell me how exactly is this a valid trade-off. What are you trading in favor of what? This can be a simple SQL query that runs off of the same exact code.
That's true. It has even *less* entropy than a set of five random, common words.
Front-end isn't just HTML and CSS anymore. Front-end devs are expected to be competent programmers. If they can't figure out how to do `&lt;?=$someVar?&gt;`, then they're pretty lousy front-end devs.
I politely disagree. Sure they might figure that out.. But, are you also going to teach them about escaping, raw output, XSS, and all the other things you need to do? To look at your own example, even plates assumes you're somehat competent in PHP, and _then_ specifies it's own "dialect": http://platesphp.com/templates/syntax/ Let me re-iterate what i mentioned earlier: I think you should let frontend devs use something they enjoy and can use easily. In my experience, my frontend devs are much happier using Twig than PHP or smarty. Also, the question was "What do _**You**_ Look for in a CMS?". This might be something else than what _you_ look for in a CMS. ;-)
7 uses a lot less memory for arrays, and less memory for values overall. Also check out the SPL data structures, they are the native C arrays you mentioned, already done, and they do also use less memory depending on how you use them, ex. SplFixedArray
Not ELI5 but if you have time, watch this lecture by Rasmus https://www.youtube.com/watch?v=ZPvC_HGNqQE He talks about some of the features that makes PHP7 so much more efficient than previous versions. [Watch at 16:30 for an example feature] Having said that, the short answer to your question would be: PHP7 is not twice as fast. In some cases it is, in some cases it isn't. The improvement has to do with how the language processes your code internally, caches it and makes better use of low-level design patterns to efficiently run your code. Some of these things did not exist in PHP before PHP7. Simply put, that's where the performance increase comes from.
Chunk and streaming is the way to go. First option you listed sounds like a massive hassle and waste of time. 
Gotcha, Thanks so much for the reply!
Agreed. I think the initial file "loading" and all other actions/operations performed on the data will have to become serialized Closures which are queued up for when the file output takes place. Then the file lines are iterated over, passed through the queue of Closures, and compiled as output. This is 10-mile-high view of what's going on. It's going to be a massive rewrite, but I think it will come with some unique advantages. ie: When loading a CSV and committing to a database, any inconsistencies between the CSV column names and the database table will be validated up-front without all the time spent reading/parsing the file itself. Problems I foresee have to deal with `groupBy`, summing columns, or any kind of operations that are performed against the entire set of data at once or as a whole. I'm considering "cheating" by using an in-memory SQLite database. This will probably be one of the biggest challenges I've faced to-date. I think a part of me wanted to write it like this back when it began, but I haven't really needed to up until yesterday.
The most significant internal change in PHP 7 are improved implementations for several key datastructures. I have a number of blog posts on this topic, which may be of interest: * [New hashtable implementation](http://nikic.github.io/2014/12/22/PHPs-new-hashtable-implementation.html) * [New zval implementation 1 - Basics and references](http://nikic.github.io/2015/05/05/Internal-value-representation-in-PHP-7-part-1.html) * [New zval implementation 2 - Strings, objects, misc](http://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html) There have been many other optimizations as well, but the new zval representation is really at the core of these improvements. Also helpful might be: * My [slides](http://www.slideshare.net/nikita_ppv/php-7-what-changed-internally) from IPC'15: This is about the datastructure changes. Basically pretty graphics for the blog posts above. * Dmitry Stogov's [slides](https://drive.google.com/file/d/0B3UKOMH_4lgBaHp4YW91RXVzaTA/view) from ZendCon'15: This also touches on many of the other optimizations like VM stack handling.
Media management is a big one for me too. That and version control. Mistakes happen.
I have not but I have heard some positive things about it. I may give it a try sometime.
PHP arrays are going to get smaller in PHP7. All internal zval storage is better in PHP7.
Have you tried using SplFixedArray?
Here's some info on generators for the sake of performance: http://www.sitepoint.com/memory-performance-boosts-with-generators-and-nikiciter
/u/assertchris stated this more eloquently in his reply, but it's not supposed to query anything at all. Consider it adding functionality similar to JavaScript's array, where you can call methods against the collection itself instead of needing to pass it around to other functions. Vanilla PHP: $results = $this-&gt;db-&gt;query($sql); $mappedResults = array_map($callback, $results); Collection: $results = collect($this-&gt;db-&gt;query($sql)); $mappedResults = $results-&gt;map($callback); Whether or not you're really gaining anything by having a Collection object is not something I'm interested in debating. Use it if you want, don't if you don't.
Composer and install script improvements in my Todo List :)
I'd highly recommend you read all the stuff that Nikita Popov (/u/nikic) posted as well. I attended the talk that Dmitry gave at ZendCon15 and it was very informative. As an aside, it wasn't 'casually,' it was quite a lot of work really. What amazes me is that there is still so much more room to gain speed improvements.
Good question I imagine. I do know from the presentation Sara Golemon gave that the CPU instruction difference between the two seems to be multiple orders of magnitude (after the JIT compilation is done).
Except that `mail()` just uses the systems mailer such as sendmail or postfix. You can easily configure it to relay the messages to a dedicated delivery service like Sendgrid or I'm sure some AWS tool. It might be a lesson in system configuration or that email infrastructure sucks, but the mail function works just fine. 
Right, but not nearly enough to make this a good idea.
Bolt uses namespaces, several others do too.
If it's still based on CodeIgniter then it will be massively out of date.
This is only a problem if you start sending email like crazy from day one. In my experience if you get a fresh website on a fresh server that send under a hundred emails hourly max you dont get on any spam list. And if users dont mark your email as spam and actually read it, Outlook and Gmail will be trusting your IP within a month.
So if I'm using Silex or Symphony, I should use `$obj = json_decode($request-&gt;getContent())`?
Most of the heavy lifting is outsourced to the database. There are a few use cases where data never touches the database though, like when we're just providing component files which get processed and returned as a spreadsheet. If we have to use the database as a PHP extension then so-be-it. It's definitely the simplest solution.
The mail function works fine, and if you setup a proper SPF record and make sure you have a PTR record, you will become trusted quickly. This post is ridiculous.
Async/await?
Explicitly letting functions execute without blocking. For example, fetching a file: $contents = file_get_contents($filepath); doOtherStuff(); workWith($contents); `doOtherStuff()` will wait until `file_get_contents($filepath)` finishes. This is how PHP currently functions. With async/await, you can let `file_get_contents($filepath)` run without blocking: $contents = async file_get_contents($filepath); doOtherStuff(); workWith(await $contents); `doOtherStuff()` will be able to run *in the foreground* while `file_get_contents($filepath)` does its thing *in the background*, and then `workWith(await $contents)` will wait until `file_get_contents($filepath)` is finished executing and its value returned before executing. It is usually done with IO (disk, network) to prevent pointless blocking of program execution.
https://en.wikipedia.org/wiki/Batch_processing 
That didn't answer the question, but I'm sure you have some sort of nebulous standards you are trying to apply to the concept.
Yes.
The biggest reasons I have for wanting to move away from PHP and toward a language like Java for these types of tasks are: * Having an actual stand-alone application * Full automation (that doesn't require manually interacting with a web interface) * More robust data structures * More robust concurrency * A stronger type system That's without nitpicking. PHP really isn't the right tool for data analysis, but I wasn't the one who originally called the shot.
It's not a rare opinion that PHP isn't a very good general purpose programming language. Heck, there are people that don't think PHP is even a good web programming language either. However, if your goal is merely to process information from A to B (without the web) then there are plenty of languages better suited to that task than PHP. 
&gt; PHP really isn't the right tool for data analysis I agree with that. Soft typing is antithetical to data analysis. For text processing, there's a question of what tradeoff is being made.
Absolutely, since some queries can take seconds.
That's true. The OP was already using Python which, in my opinion, is a better choice for this. I'm not really sure, however, why he had as much trouble with either of these technologies. Honestly, if you trying to do some kind of numerical processing it would be good to use a language with a bit stronger typing (not necessarily static) than PHP. 
At least for mysql it's already here, mysqli is all right with async. [mysqli::reap_async_query](http://php.net/manual/en/mysqli.reap-async-query.php) acts exactly as described in the example above.
Speaking of the own C module, there is already one that could be interesting. [Judy-arrays](http://php.net/manual/en/book.judy.php) looks like what you're looking for.
I think you meant @voku1987 This isn't Twitter. #response #comebacks #reply #rekt
Are you using an array of objects or a nested array? If memory is the problem, using objects (with the right properties, not magicly created ones) can reduce memory usage **drasticly!!!** Yeah PHP7 will impove the nested arrays but mvoing to an array of objects is a pretty easy and worthwhile improvement. Here is nikic's post about it: https://gist.github.com/nikic/5015323 You should benchmark it. When I tried it out, I reduced a ~~300~~ 200 MB memory array to about 120 MB (No kidding)
You can definitely argue its a bad thing, but Laravel is tied in with blade because they’re created by Taylor.
&gt; If that is the case... Then what? Most frameworks will use a templating engine for several reasons, usually because it's easier for front-end developers, it's safer by restricting what can be executed, and also helps to keep the view files clear of logic as much as possible. That said, they all have their preference of which template engine to use, and it's a lot of work to support them all, so it's usually up to the frameworks' communities to develop 3rd party extensions for the other popular templating engines.
&gt;Then what? What if the front-end developers are used to some other engine ? &gt; Most frameworks will use a templating engine for several reasons, The problem isn't that they use a template engine. The problem is they are so tied in with a particular one and that even resorting to using plain PHP is so hacky.
I don't understand your problem. If you want to use a particular templating engine then use a framework that either has native or 3rd party support for that templating engine. You're basically saying you want a particular feature, so use a framework that supports that feature.
A framework dictating which template to use is okay ? &gt;You're basically saying you want a particular feature I would hardly call wanting to use plain PHP template files a feature.
hmmm I think I see your point. &gt; Using a plain PHP file as your template is as simple as using the .php extension. But isn't this true if there is only one template I want to pass to `return view('home.index') ;`or Is this the way to do things in all PHP MVC frameworks ? Another quetsion: laravel's way seem to be to extend views inside views and then pass then final view to the `return view()` . If don't want to mix my views, is there a way to do that ? 
Your controller shouldn't know that you need to render a header, then a body, then a footer because that is display logic and has no place in a controller. MVC is about separation of concerns and including this sort of logic in your controller is the opposite of that. Your controller knows which view it needs to render, that view then needs to know how to do the rest. &gt;If don't want to mix my views, is there a way to do that ? "Mixing" views is a fundamental part of templating in any language with any templating engine.
I see. I used to think of views as just the view files. Thanks for clearing things up.
&gt; mostly the difficulty to use plain php files as the reason. But I also cannot use a framework that imposes a template engine on me Then don't. Like I said, it's their choice to make it like that, and your choice to use it or not. They're not forcing anything on you. Personally, I would recommend Yii (for many reasons) but for your case it support many templating engines and plain PHP view files. Don't bang your head against the wall because a framework doesn't do what you want it to; just don't use it then!
It does indeed. Thanks for the help!
Why do you want to use plain PHP? PHP is an ugly templating language, it is not suited for modern template/view development. Blade and Twig are much better template languages that make your life 10x easier. Of course its better if these frameworks decouple more from their preferred templating engines, to allow you to choose your own templating engine. But I dont understand why someone would choose plain PHP, all those PHP open/close tags in HTML files hurt my eyes badly and I stop reading a file when I see more than 5 PHP open/close tags. Things like {$title} or { {title}} are 10x more readable than &lt;?php echo $title ?&gt;, especially when used in large quantities. Read Fabian's post about the rationale of using a templating language here: http://fabien.potencier.org/templating-engines-in-php.html
I don't know about Laravel, but in Symfony's config files you can choose your templating engine. Twig is the default, but you can easily use 'php' as a templating engine.
&lt;?=$title?&gt;
- http://morfy.org/config/site.yml - http://morfy.org/config/fenom.yml
Can you post your test code?
But isn't PDO the preferred operative?
Wrong &gt; Starting with PHP 5.4, short echo tag &lt;?= is always recognized and valid, regardless of the short_open_tag setting.
&gt;They're not forcing anything on you. I know and I didn't say they were. This isn't about a particular / mine use case. It's just that this I find coding without frameworks being HIGHLY NOT recommended and yet when I attempt to use one, I find them very 'imposing/restrictive'. This template thing being one example.
&gt; Why do you want to use plain PHP? Really? This is something that has been discussed to death on every discussion board ever, so I am not gonna bother. &gt;Of course its better if these frameworks decouple more from their preferred templating engines, to allow you to choose your own templating engine yes exactly my point in this thread.
Well that's what frameworks are. They try to make common tasks easier, but in doing so they also make it so you have to do things "their way". If you can't find a popular framework that agrees with your coding style, then find a minimalistic one. Or roll your own. ---- You remind me of an old mechanic, complaining about these new cars with all the electronics making it hard to work on the car and do maintenance themselves. Well that's the price you pay for those fancy features of the newer cars.
There are actually clones of Sublime's theme https://github.com/y3sh/Intellij-Colors-Sublime-Monokai https://github.com/shibby/phpstorm-monokai
&gt; Nope, that's not my opinion, it's the opinion of all people who use templating engines, twig, smarty or blade. PHP is indeed a templating engine, but an ugly and terrible one, it doesn't do this job well. Nowadays PHP evolves into more of a programming language, and if you use PHP for the sole purpose of templating, something is serious wrong. Just because a few people are loud about their opinions does not make them right. Ugly does not equal bad. This is what I hate about these hipster tools. Python is a shit ass ugly language, that does not make it bad. In fact, Python's power comes from its ugly syntax. Readability is not the same as functionality or structure. Distinguish between these concepts. I am not saying don't use templates, what I am saying is don't use a tool you don't understand. &gt;If you don't understand what modern templating language mean, how about just google things like twig, blade, razor and django's templates? Maybe you think the developers at symfony and laravel are all stupid because they use templating languages, not plain PHP? That's arrogant, imprudent and nonsense. Why am I even arguing with you? I have contributed to more templating engines than you probably have heard of... Regex templates, compile parse, runtime parse and everything in between. What is annoying about that statement of yours is the word "modern". You make it sound as if we have made some major breakthroughs sine the 90s regarding templating and server side HTML rendering. Templating engines adds a layer of abstraction yet still consist of spaghetti code. They do not solve any problems. NONE! They add virtually NOTHING other than shortcuts and syntactic sugar. That's it. That's all there is to it. Stop using buzzwords as selling points if you do not understand what these things are. Templating engines, just like regular PHP code, violate D.R.Y. and do not offer anything in terms of separation of concerns. They also impact performance and offer NOTHING NEW that you cannot do with stock PHP. In addition, they add a learning curve and include an extra step in which application redundant logic has to be applied (Ex. handlebars functions). The idea back when templates started popping up for PHP was to inject values into given "slots" rather than having to generate the HTML in concatenated strings. And yes, most these fuckers are stupid. Have you seen the arguments that Taylor makes on Twitter to justify his shitty software design? All you get is readability. Get your head out of your ass and stop using buzzwords to market things you don't seem to understand. You still haven't given an example of ONE problem that templates. &gt; And of course, by using a templating language you give up something, Such as performance. But if performance is that important to you, Why don't you just write c or even assembly code at your backend, because they can do the job too, and runs much faster than PHP? You know... at first I thought you were trolling. But then I read this and I couldn't stop myself from facepalming. Fyi, PHP code can be faster than C. It actually is a lot of times. If you didn't know that then you are in the wrong subreddit. And no, "they can't do the job too". You clearly have no understanding of what the "job" is. It seems as if you think that a web application is a mere CRUD portal that renders a view. That's just sad... &gt; Sure there is a performance penalty, but if the main bottleneck for your application is rendering template, something is seriously wrong with your application design. You may need to refactor or even rewrite it then. I agree. However, the same could be said the other way around: if the stock PHP code is a bottleneck for you, then something is seriously wrong with your application design. You may need to refactor or rewrite it then... See how ridiculous this gets? We can all throw around words like bottleneck, design and refactoring. But in reality, you seem to think that templates solve a problem while in fact... they don't. Prove me wrong by showing me what PROBLEMS they solve. You prefer templates or readability. That's fine. But don't mix readability and functionality or structure. 
&gt; If I can jump in here.... you certainly may sir :D &gt; It's the general concesus that templates are good, not only that they are easier to work with, especially for front-end developers (i.e. non-PHP people), but it also helps enforce the MVC pattern by keeping as much logic out of the view as possible. The general consensus was once that the earth is flat. The opinions of the many does not make something right or wrong. First off, MVC does not exist in the web-world. We have pseudo-MVC-ish stuff. MVC assumes continuous state which web-applications simulate with things like sessions and tokens. But true MVC does not exist in a [by definition] stateless network. However, I get your point. You mean separation of concerns. The problem here is that templates DO NOT separate any concerns. They are STILL spaghetti code. Easier to read spaghetti code but spaghetti code never the less. The logic will always be embedded in the view with or without templating engines because of the nature of software. Stock PHP and Handlebars or Twig both contain as much logic in the view. The difference is the syntax in which that logic is expressed. &gt; Yeah, 15 years ago. But not today. Mixing PHP and HTML today is a faux pas. That does not make it right or wrong :D A few years ago everyone moved to RoR. Yet if you use it now, you'll have yourself just as embarrassing of a situation as when youa re using PHP and HTML. Software is not a popularity contest. I leave that to the symbol minded. I am concerned with writing GOOD software that uses the right tool for the job. Templating engines solve nothing and add almost nothing (other than syntactic sugar). &gt; It's the V in MVC. The standard and modern way of coding web applications. It separates the concerns between the models, views, and controllers to allow for easier development and maintenability. If you still use V in 2015 then you are as non-modern as you can get. Web-applications are not websites. There is a difference. Websites tend to utilize pseudo MVCs. Real applications most often use RESTful services and APIs in order to adapt their data for mobile, websites, tables, etc. this MVC charade is not only wrong in the context of the web, but it also does not solve the problems we currently face in 2015. I don't mean to be a dick but utilizing MVC-ish pseudo patterns to build a website is all fine and dandy in this day and age. But using MVC-ish stuff for building serious web applications is nothing short of a mistake. Having said that, templating engines STILL do not separate the logic from the view, model and controller... 
I haven't seen this as the case between Twig and Symfony2 as it seemed rather simple to switch tempting languages but trying to remove assetic is kind of a pain in the ass. I was working with creating a JSON API with Symfony2 and didn't see the need for a bundle dealing with assets (css, js, images) really needed to be in the application. Best I was able to do was remove some components and just not use the rest.
&gt;You have no idea how refreshing it is to see php.internals contributors here. Refreshing? I see internals around here all the time, /u/ircmaxell practically lives here.
That's not really what the article was getting at, in reality all they showed was that their strategy of adding a LLVM back-end was just as performant as their pre-existing back-end. it's still very impressive though.
Have you considered loading the CSV into a temp db table as the first step, using shell level MySQL load commands, then looping through the new table to process your data?
I agree I was wrong about laravel , its not tied in. my understanding of 'views' in MVC was 'different'. 
Of course, but what features does restricting templating engines add to a framework ?
Who says it's a feature? Besides, which frameworks actively disable it? Either way, *if* they decide to do that (perhaps to enforce readability and keeping logic out of the views), that's their right.
Do you go onto every programming language subreddit to suggest people shouldn't use the language the subreddit is dedicated towards?
http://phptherightway.com/
[removed]
&gt;Additionally, because of the very basis of the algorithm for both bcrypt and scrypt, hash collision attacks are meaningless, as the same iteration of salt, work factor, and passphrase will hash a different key each cycle Maybe I'm reading you wrong but the same input, salt, and cost will give the same result every time. All the examples have different salts.
Correct. The logic failed there for a minute. The salt should __always__ be different for two hashes, so in __theory__ because the salts __should__ be different, the same passphrase and work factor will always yield different hashes. Obviously, or possibly unobviously, if the salt and the same, the string will be the same.
You suggested so. And they dont disable it, but they do make it inconvenient. I don't know why you keep talking about their rights. that's quite not the point here.
as /u/rupaheizu says - http://phptherightway.com/ - but first, go through the manual looking at least with generic language sections, and the functions that are available to you. You may not need to read sections on topics like LDAP, but do go through the Language reference http://php.net/manual/en/langref.php in its entirety. Knowing what is built in, and what you can do, rather than trying to rewrite things will save you a lot of time and effort. 
The result here was that using an LLVM backend did not yield any performance improvement, because LLVM is not capable of optimizing the kind of IR, that a JIT for a dynamic language tends to generate, well. The conclusion to draw from this is that HHVM is correctly focusing on implementing custom optimizations tailored to PHP on their own IR. This situation is the opposite of NIH. It's a case where a generic library (LLVM) fails in a specific situation (optimizing PHP) and one should use a custom implementation instead.
bingo! how the parent got his understanding from the aricle is beyond me.
&gt; The extra compilation time introduced by inserting LLVM into our pipeline is quite large, but it can be mitigated by only using LLVM for the highest gear of our JIT, which is only used for the functions executed during an initial profiling phase. As Brett mentions in the article we pay a steep compile time penalty when using LLVM as backend, we've always suspected this would be the case. The fact of the matter is that LLVM was built to perform best as an AOT, and tends to trade compile-time performance for code quality. One of the key takeaways here is that we may someday run with LLVM for our hottest translations but we don't ever see it being something we can use by itself. We definitely want to take advantage of as much existing technology as we can, that's why we went to all of the effort involved in making this work, I fundamentally disagree that our backend and LLVM serve the same purpose. JavaScriptCore does something very similar if you're curious this may be an interesting read: https://www.webkit.org/blog/3362/introducing-the-webkit-ftl-jit/
As a freelance web developer making web sites with custom admin panels, I can say that node is in no way an alternative for at least 90% of the market in my country. I have played with it a bit and I can say that it'd be awesome to JavaScript everywhere, but at the end of the day a guy who wants a website with a CMS on a cheap server won't pay more for hosting.
No.... Just no.
Your using mysql_ functions, look into mysqli and PDO as well making use of prepared statements, they are a good habit to get into. To import a CSV into MySQL personally i would make use of MySQL itself using "LOAD DATA" or a CSV package such as http://csv.thephpleague.com/
This would have been a good approach 15 years ago maybe.
Hi, I am using SF2, not really a framework specific question, and working on abstracting my code into testable classes. In the process I am also trying to reduce the duplicate CRUD code among my app. The first way I decided to reduce some of my code is creating a Resource Controller that my controllers extend off of. That includes some of the following code: http://pastebin.com/DQ9RZh3C Then in my actual controller it would extend it and just call the method return parent::newAction(); I also decided to add events to flash messages to the user through the session. I was also thinking about abstracting forms to a handler, but the ResourceController contains very simplistic form code. How do you typically structure your apps when you are doing a lot of CRUD operations? Do you use form handlers at all? Is this a poor way of structuring the app? Thank you for your input!
You might want to take out INSERT statement with the the 80,000+ blank records in the .sql file.
Sorry, what is NIH?
ZCPE here. Read the study guide (don't remember if it is free or not). You can also read the slideshow in this page : http://edward-designer.com/web/passing-php-5-3-certification-exam/ . Also, read the documentation about the new features from PHP 5.4 and beyond, you'll need to get familiar with these.
no you dont, basic knowledge is enough to pass the silly examn. just memorize the inconsistent order of arguments of all the str_ stuff and youre fine. because this is what they like to ask--not what makes a good developer. maybe a few basic questions about design patterns but thats about it.
I passed ZCE for PHP 5 in 2011. From what I remember the demo exam was very good preparation for the actual exam; the types of questions found in the demo really matched up well to the actual exam questions. I did not find the actual exam to be particularly difficult. Be sure to study the features introduced in PHP 5.5, the last version covered by the exam.
Is there a way to use composer and dynamic class __autoloader in the same project? 
Why do you think you need it?
I'm not a Zend Certified engineer, and I haven't used this myself, but Lorna is the first person who I would go to if I were heading down the cert route: http://www.lornajane.net/project/zend-certification-questions-pack
Bad. Every "security enhancer" always forgetting that a user may wish to open *several tabs from the same site.* Which they will be unable to do if some sort of enhancement (like session_regenerate_id()) is implemented. **If you want security - go for SSL.**
That's a good question. I'm not OP but I was also interested in buying this certificate. Mainly because I thought that a lot of companies would recognise it and it might help to get a job. I'm wondering if this is actually true.
Try clearing the Symfony cache directory manually if you haven't yet :) 
Yes I saw that in the videos and images of the latest release. I downloaded it and tried it again but meh. 100 bucks. I'll probably have to switch one day but not today. Phpstorm just doesn't grab me. that's the second time I've tried it. 
My bet is on opcache. What revalidation policy do you have set up?
Are you using php-fpm? I had this issue once to and I needed to restart php-fpm.
I think it's fixed now. Probably something with opcache indeed, although I disabled it and it wasnt immidiatly fixed after an apache restart...
The thing I hate the most is when they forbid you to use white spaces so I can't use passphrases. Makes me very suspicious about their hashing as well -.-
Take a look at all php-fpm running process. In some distros, a 'ghost' process keeps running and mess everything.
oh and btw, i got multiple zend certs, even php4. i used them 3x in job interviews and got laughed at 3x, so you might want to reconsider putting money into it if youre paying yourself ;) symfony is a different story, especially if you can get the expert one.
In argentina, when we say "te caché" (i "cached" you) means I was pulling a leg on you. So I guess you got cached.
Really interesting! One thing that strikes me is that everything is static. Personally I'd rather use a normal API with objects and method calls. Objects can be injected as dependencies, mocked in tests, configured in a DI container, etc. Also the `Crypto` classes do both the encryptions and the authentication stuff. Maybe those are 2 separate needs? And +1 for PSR-2 examples, it's a cosmetic detail but it's something we've all become accustomed to since most major projects follow it. Edit: some phpdoc could be improved (e.g. https://github.com/paragonie/halite/blob/master/src/Symmetric/Crypto.php#L23).
Well, if anyone is interested, I'm working on my own LLVM back-end for (a statically type-inferred subset of) PHP, [here](https://github.com/olleharstedt/subsetphp). No benchmarks as of yet, though.
``` $objPHPExcel-&gt;getSheetByName('Worksheet1')-&gt;setCellValue('A1', 'Cell A1 in worksheet 1'); $objPHPExcel-&gt;getSheetByName('Worksheet2')-&gt;setCellValue('A1', 'Cell A1 in worksheet 2'); ``` So what's the problem?
why is this voted down?
I passed the ZCE back in 2008. The exam was easy, however. Buying the demo exam is worth it because it will help you identify any areas in the exam that you don't know. PHP has a lot of features in it, and even if you work with PHP for 10 years, there are parts you may never touch.
Maybe it's just pissed off on general principle because you're trying to use print_r / die for debugging?
Well, I just tried it as you suggested, but I am having exact same problem. And the problem is, I am only able to save any one sheet out of 2 sheets... Depending where I put the 'header' functions. If I put the header function inside for loop, I am getting output in sheet1 alone.. And if I put header function outside the for loop, I am getting out put in sheet 2 alone. I think, now my problem statement is clear..
Doesn't matter how many systems and test suites are put in place, doesn't matter how integrated the IDEs get, when there's s problem, the debug is always 'die(var_dump())' or alike. 
hmmm Was this called Monstra at some point?
Last time I tested this, it was just with Faker as a dependency and a single class autoloaded in. After the require autoload.php line, __autoload couldn't do his thing. I will have to check the documentation again. 
I suspect it has something to do with my `nginx.conf` or possibly the php-fpm socket somehow. I intend to trace the issue this weekend to see what the deelio is.
Not pushing for gulp but it seems there's a difference. Gulp is a task-runner, build tool, it does more than what that Asset library offers. I don't see how the Asset library will help you with the build process. Gulp or PHING or Robo (to name two PHP build tools) will let you auto generate documentation, run other commands like composer, interact with a git repo, run PHPMD, or help with the process of creating PEAR packages or PHARs. The idea behind a build tool is that you don't have to remember to run various commands, you just use the build tool. 
Thank you, that helps. Most tutorials and articles I found regarding using Gulp with PHP is just asset compilation and minification. 
I agree, I didn't ditch it for the entire application, just that one specific piece. Most other pieces of the application use the ORM thoroughly. What part of the documentation am I missing?
The problem is the identity map. An ORM doesn't have to retain all those objects in its cache, but it does. The problem is not you, but Doctrine's naive implementation of their cache which only handles basic use cases.
It also is from when the actual records are flushed to the database. You can't take advantage of any unique validation constraints if the records are being written for the first time and the transaction hasn't technically started yet.
I'm confused by your links. Here is the conclusion of the first article: &gt; - Encryption is not authentication. &gt; - Encryption provides confidentiality. &gt; - Authentication provides integrity. &gt; - Confuse the two at your own peril. Does that mean that these should indeed be separated? Why are those things in the same class in your library then?
Thank you for the feedback ;) I will try to update the article to cover those things too!
Unauthenticated encryption is not secure against active attackers (contrast with passive interception), and developers should be deprived of any opportunity to deploy unauthenticated encryption if we can help it. Some developers reason, "But it's encrypted, nobody can read what it says!" But as the article demonstrates, they can still tamper with the message to get a useful result. Use `\Sodium\crypto_stream_xor()` and `\Sodium\crypto_auth()` if you really want the individual encryption/authentication primitives. (Also: people who *use* this library really should not need to care about this detail, as it does the secure-by-default thing for them.) TL;DR you want authenticated encryption; I will not separate them.
I took the ZCE back when it first came out. Since it's a perpetual cert, I still have it, even though the test is completely different now. I think I got the first 500 badge on mine too. Funny how many contract projects being listed on that site has landed.... Back when I took it, the exam was almost entirely shit like: The str_replace() function takes which of the following arguments? a. ... b. ... c. ... d. ... Hehe
ORM came to make application development easier by creating a map between the database and the application dynamically. This does not means that all applications will benefit of using an ORM and there will be cases that an ORM can cause more harm than good. For example I'm not aware of any ORM that can handle insert of composite primary keys. In an application under this scenario you will be required to create your own db layer. Now if you should or shouldn't use an ORM the answer for that is based on 2 questions: * Can your database structure support the ORM ? * Will it be quicker using an ORM or building your own DB layer ? In your case I believe the ORM should suffice and Doctrine is amazing as an ORM, but only you to judge.
Gulp can do a lot more than this. I have BrowserSync integration for instance, I also make it execute shell commands on occasion automatically. It's capable of a good deal.
1. What happens if you `var_dump($fp)`; after the fsockopen? 2. What happens if you remove the `@` from the fsockopen? 3. What happens if you change it to like [the example on php.net](http://us2.php.net/manual/en/function.fsockopen.php#refsect1-function.fsockopen-examples) and do if(!$fp){echo 'Offline';} 4. Why can't you use $ip and $port directly?
Looks like the exam didn't change much, then, in the years between us taking it.
Yup. And ORMs could work just fine if they wrote to the DB explicitly, there is almost no reason for this indirection and magic to occur, and cause so many troubles. I suppose the primary cause for Doctrine to work like this is because Hibernate does it...
Ah ok thanks I understand now. But then shouldn't it be a dependency. Maybe my approach is naive here :) but how it would make sense to me: - an service responsible of authentication - an service responsible of encryption, which depends/uses the authentication service I.e. separated (for separate needs), but the dependency is still enforced (and it's more explicit/less confusing).
web server might not allow outgoing connections on the port you specified. 
Thanks for the tip about the code block. &gt;I chuckled. What can I say? I'm a comedic person.
I wouldn't work at a job that required it.
CakePHP 3 supports composite primary key
Nice blog post, thank you.
And there are better certs! Well, maybe "better" is the wrong word, but "different". If you had the Zend cert and the new Symfony cert, that would should two different but very important skills. I'd hire someone who had both over someone who didn't have either or one or other. I mean, unless they come off as arrogant. That's the WORST.
&gt; but that's one more thing I'll need to remember to do (run 'gulp') every time I work on development I use [`gulp-watch`](https://www.npmjs.com/package/gulp-watch) to detect when changes have been made to any file in my project, which then triggers the appropriate tasks. For example, when changes are detected in my Coffeescript, the files are re-compiled to JavaScript, my [`karma`](https://github.com/karma-runner/gulp-karma) test suite runs and [`gulp-livereload`](https://www.npmjs.com/package/gulp-livereload) automatically reloads the page in my browser.
The key is to use `spl_autoload_register` not `__autoload`.
Oops!! My bad! My bad! I was reloading the file 'template.xls' inside loop.. :p Sorry. And thank you so much for your time. :) Have a good day!
One issue with zxcvbn (which is otherwise a great library) is that it only supports the English dictionary, so it spectacularly fails when used in localized websites, as it fails to catch even the most common words. And providing more dictionaries require a re-architecture as you can't possibly ship all of them to the client. I consider this a strong showstopper for its wider adoption, at least without additional password constraints; I hate those, but they set a minimum level that zxcvbn fails to set, by itself.
I find that Eloquent breaks separation of concern by letting Objects save themselves.
I don't have any hate for Laravel; but I did just try and use it on a mid-sized project and found it to be so much more cumbersome to work with compared to CI (yeah yeah, break out the pitchforks). I still want to get into it more but there is so much more "stuff" you have to do to just get a project started. CI is the tits for small to mid-sized apps in my opinion (and you still get all the power of composer compatibility). 
But you could just choose to use that possibility? Also I don't see whats wrong with that, if I have changeSomething() method on a model whats wrong with being able to call save() inside it?
Not according to this: https://3v4l.org/EOFjD Edit: apologies, I didn't notice the part about concurrent requests.
So .. hate on an entire framework because it's shipped ORM is ActiveRecord....You don't have to use it you know...
&gt; Because is popular That's the main reason I think... tall poppy syndrome. &gt; Nobody like the lead developer I think that's quite a stretch... Taylor can be ridiculously defensive about his work which people like to point out - but can any of us honestly say we wouldn't take the constant barrage of criticism even a little bit personally? &gt; Facade are not different from singletons. They are also entirely optional and you don't have to use them (in fact, outside of a few evangelists within the community who offer some fairly weak reasons to continue to use them, the recommendation is to *not* use them, and inject instead). &gt; Is not very modular. In what respect? 
Woah, I had no knowledge of CommonMark, thank you so much! I will look into it right away.
Why would you use arrays in constants? **EDIT** To whomever down voted me, fuck you. It was a legit question that I purposefully tried to leave unbiased to try and get legit answers. **EDIT 2** well, fuck me! ಠ_ಠ now, *I* look like an asshole.
&gt; I think that's quite a stretch... Taylor can be ridiculously defensive about his work which people like to point out - but can any of us honestly say we wouldn't take the constant barrage of criticism even a little bit personally? He is a plain dick and just throws ad hominem attacks on twitter all the time. Being defensive is one thing but being a plain dick is another. 
I don't have any alternatives to suggest, but know that NR can be quite flexible on pricing if you speak with a sales rep. Do it soon if you have *some* budget for monitoring, as you can almost always get the biggest discounts towards the end of the month. You could look into XHProf, but it's a pain in the ass to set up and will require a lot of configuration to get the information you want out of it.
Devils advocate here, you could use [Robo](http://robo.li/) and call out to an ES6 transpiler, Sass, or anything else using terminal executions. However, you'd still need to get bable, sass (or node-sass), and whatever else you want to run (like ESLint) installed. Further, it doesn't seem as if Robo would easily allow you to say, work with streamed data like gulp. So you'd end up writing your own script to handle failure reporting and other piping issues. It would be much more work (and you'd still need npm to make things efficient), but you could get the same effect setup with more mess using raw PHP and shell scripts within your project. Devils advocate over. I don't recommend it since it is just too much pain. Use the right tool for the job and PHP is **not** the right tool for asset compilation and management.
Prepare for your world to change then! Composer is so awesome once you get used to it. Makes it a breeze to just add a package to try stuff.
I am one of these "haters" and I will tell you why I think Laravel is actually a BAD thing (IMO) for the community in general. - Other than the fact that Taylor is the "my way or GTFO" type of guy, the framework itself tries to do too much. It violates its own embedded assumptions and have very poor separation of concerns in many places. - The way its marketed that is completely off-putting for non-artisans such as myself. - Try looking at their internal discussions regarding improvements, feature suggestions or bug fixes. God it is a hostile community of us against them mentality. - When I tried using Laravel I realized that a simple framework of 10 classes could do a better job than Laravel in many regards. So why is there such complexity? Especially considering that it is so popular that newcomers use it. - The miss-named and badly implemented design patterns drive me crazy - Does syntactic sugar really justify [this](https://github.com/laravel/framework/blob/5.1/composer.json) compared to [this](https://github.com/slimphp/Slim/blob/2.x/composer.json)? check [this](https://twitter.com/rasmus/status/618301957095055360/photo/1) out... That's nuts. - Most importantly, decouple the tools from the framework for the love of GOD. A framework should be just that. Any additional tools outside the scope of the Application's runtime itself should not be included IN the framework. Have them be a standalone library or something. There is a bunch more but the dark side is calling me now so I have to go *TA TA TATA TA TATA TA TATA*
Well... does your system regulate temperatures for a nuclear reactor, or is it more like an API for cat picture management? For the record, I'm just diving in head first on 7.0.0. Users got a code 500? Blame it on Internet Explorer or something!
Revealing those decisions is, itself, an even bigger abstraction leak.
We recently moved to gulp for our sass compilation, CSS and js minimisation and js compilation. This is all through gulps watch, which means it's automated on file edit (we had to write some more extensive rules as it didn't fit as is for us). I took gulp over grunt as it seemed like a lighter weight application. Both are good and can be used for a hell of a lot of automation and helpful things. A word of warning about gulp though (from my experience with it), if you stray from the beaten path, don't expect too much help. I found most plugins had a good enough write up. But if you need something to bridge a gap between two plugins, good luck! 
Or the designer of that feature did not know what a facade is - just saying! It's completely fine not knowing something. I am not saying this as an insult. But it might be the reason!
Because it's popular and not modular as Symfony. About AR: Rails has been doing it for what, a decade? And it's still excellent for the majority of projects ( i mean, how many php projects have the size of a portuary system or Amazon or some SAP at General Motors?) It's a great tool for some small/medium project. Really. Using Symfony for small projects is overkill and the dev costs are high. If you complain A LOT about OOP and ORM, just use Java/Spring/Hibernate.
Like others have said Gulp is great as a general task runner. I use gulp for stuff like creating versioned builds, update config files, creating zipped up files, livereloading during dev and tons of other stuff. 
Thanks! Sorry, I have never used php before earlier today, and only need it for this small script.. I have now changed it to use POST, but I doesn't work yet. Does the url limit matter even though I post from a c# script ?
&gt; the Artisans - The Descendants of Da Vinci himself Any real need for the snide remark here? Can't we defend the guy for being a human being and a fellow developer without this kind of bullshit? &gt; Yes, he is not alone in this but he is certainly not innocent! Never said he was. Simply pointed out that other community leaders (far more influential than him) equally share at least equally in the blame. If you are going to call Taylor a "dick" for taking what are in many cases personal attacks (and if not personal, known that they will be taken personally) personally, then you're going to have to start a laundry list of community leaders who are likewise "dicks"
Sorry for the misleading title. If you look at the error message though, somehow it's trying to allocate MUCH more memory than you'd expect from such a simple script. What could it be?
I would like it to be independents and very plug-able libraries with good documentation for each, instead to be tied in one place and a concept. Also I forgot to tell...Laravel documentation is lacking.
Very easy. It's been done many times. I'm sure there are a handful of packages available to bridge it.
Web servers often limit the size of post and get variables. I'd check your web server settings and error logs to see if that is the case. 
&gt; Any real need for the snide remark here? Can't we defend the guy for being a human being and a fellow developer without this kind of bullshit? We can and we should. The "remark" here is meant to show you how annoying it is to hear that kind of BS constantly when talking to Laravel developers. The way this framework is marketed is really annoying. &gt;Never said he was. Simply pointed out that other community leaders (far more influential than him) equally share at least equally in the blame. If you are going to call Taylor a "dick" for taking what are in many cases personal attacks (and if not personal, known that they will be taken personally) personally, then you're going to have to start a laundry list of community leaders who are likewise "dicks" You are 100% correct sir. But to be honest with you I don't like the guy. The way he talks and the arrogance in his voice makes me really dislike him. I am being completely honest here. The list of dicks is long for sure (no pun intended) but he just is on a whole different level.
And there is a good reason for that https://twitter.com/rasmus/status/618485620919308288 That is actually the problem. It is not the the number of classes, it is the hidden complexity they breed. Why are these files required if they are not used? By definition if they are required then they are part of the framework. It is not a fair assessment if we have to exclude an entire directory that the framework rely on to run [btw, this was a partial map, which boggles my mind]. Saying that /vendor directory is not a part of the project (any project that is) is not honest IMO. You are using other people's code to make yours run, in other words you are creating project and class dependencies. Hiding it in a different directory does not make it less of a dependency... Coupling is the issue here, not file structure.
Facades are fine in plenty of situations. Blanket statements and generalizations are not.
Yeah I am pushing huge for NR at my office, but actually XHProf looks like the free options I want. Do you know if there is a way to do a cluster all reporting to a single install? It looks to be more like a single instance per server.
That's YOUR fault, not Eloquent's fault. If you use Eloquent like a data gateway, and keep the Eloquent-y stuff totally hidden behind repositories, and make sure you're returning only simple interfaces for the objects in those repositories, then you won't have a problem. If however your leaking Eloquent calls all over your app, that's your choice. Eloquent did not force it upon you. And I would argue that "ActiveMapper" with Eloquent is *STILL* easier to build and use than Doctrine.
You are entitled to _dislike_ people. To _disrespect_ people? I think that's entirely different. There is a level of basic respect for a human being, and a fellow developer which should be, imo, granted unconditionally. And I don't believe some other _very senior_ and prominent members of the community have ever granted that to Taylor.
How you continue to motivate yourself to build this awesome framework with such unnecessary criticism astounds me, keep up the awesome work that makes so many people's lives so much easier, most of us actually appreciate it 
&gt; There is a level of basic respect for a human being, and a fellow developer which should be, imo, granted unconditionally. This has turned into a sociopolitical discussion and I have to say that I disagree. There is nothing that should be granted to everyone ever just because they are a member of a group. Period. Respect is something you earn. A serial rapist should not be respected just because he was born a human. I am obviously not comparing Taylor to a serial rapist. I am talking about the principle of granting something to someone based on their group. And btw, I never said lets disrespect him. **There is a big difference between disrespecting someone and respecting them.** Taylor might be the nicest guy in the world and the best most loving human-being ever if you know him personally. But he does not deserve my respect - just like a bunch of the other "thought leaders" as you call them. Why? simply because all I have seen from him over the past few years has been insults, refusing to even consider other people's opinions and being a bad example for new developers to follow. &gt; And I don't believe some other very senior and prominent members of the community have ever granted that to Taylor Maybe not. But just like you thought it was childish of me to be passive aggressive with the "Artisan" remark. I find it to be extremely childish to be passive aggressive about requiring respect from others when it is not given to you for the sole reason that you exist. I have myself been insulted by him on multiple occasions on Twitter just because I was talking to someone else about Laravel... like come on. That is not how a respectable human-being should behave. I don't dislike Taylor because of what he created. I dislike Taylor because of the way he behaves and the arrogance he has within him. 
[Here's my experience with ORM.](https://www.reddit.com/r/programming/comments/3npb8g/you_probably_dont_use_sql_intersect_or_except/cvqfyrk?context=3) - abysmal at best.
I dont see how pointing out a single gripe constitutes "hating on an entire framework".
Have you looked at Blackfire? It's somewhat new, and from SensioLabs. Not as feature rich as New Relic, but has a decent pricing.
I haven't used any other PHP frameworks apart from Laravel and Lumen. The two frameworks make it very easy to get going. In just a few hours you can have a skeleton proof of concept up and running. I've used both Eloquent and Doctrine and of course Eloquent is well integrated while it took some effort to start with Doctrine. The Artisan command line is a great tool and makes it easy to add further commands (I miss it when using Lumen). That said, I have a number of pain points which encourage me to look for either another framework: 1. The documentation is severely lacking, even in the 5.1 series. It is endlessly frustrating to read Lumen's documentation only to be redirected to Laravel's documentation and then *still* not have anything close to what I was looking for. I've given up and now just read the source. /u/utotwel, documentation is hard and you may need help from a third party because you are too close to the framework. 2. For the size of the apps I'm writing, Laravel provides too many features. This is largely why I've switched to Lumen but Lumen has its own issues stemming from trying to be so small: Once you want to do something nontrivial the documentation tells you to turn on the façades. 3. The framework is slow. I'm on shared hosting but a cold start when the opcache is empty takes 2 - 3 seconds. For Laravel a warm request is a minimum of 800ms for me and for Lumen it's a minimum of 450. I was surprised since I'm coming from a C# MVC background and my apps were in trouble if request time was over 200. I expect a bit of a speed difference due to my hosting but not by an order of magnitude. 4. Not quite related to Laravel itself, but I'm not a fan that this site is considered the resource to use to learn how to best use the framework. I shouldn't need to pay for what is essentially advertised as the documentation. All that said, I am skeptical that I would get a much better experience with a different framework. In the end, rapid application development is a pretty strong feature. Second to that, Laravel has a large community and so there is a higher likelihood that someone has encountered and solved whatever issue you may come across.
Regarding point #1: the documentation is open source at https://github.com/laravel/docs
I actually work *harder* after reading threads like this. It inspires me to make things better.
Bleh. Typical blanket statements and nonsense. 
How's your test coverage and infrastructure? If it's good, you should be able to spot any issues with 7.0.0. If not, wait. I wouldn't do it launch day though. 
Speaking of no context: &gt;&gt; throw it in a boiler &gt; &gt;But not for too long, especially if you prefer your sex toys *al dente.* [What's the context?](https://www.reddit.com/r/CrappyDesign/comments/3mdypw/the_fasterslower_buttons_on_my_dildo/cvehxqs) | [Send me a message!](https://www.reddit.com/message/compose/?to=no_context_bot) | [Website (Updates)](http://nocontextbot.herokuapp.com) Don't want me replying to your comments? Send me a message with the title "blacklist". I won't reply to any users who have done so. 
As stated above/below, you definitely want to be sending via POST request and not GET. However, there are a few things that will be useful for us to know to help you: - How are you sending this? HTML form? Ajax request? Some other means? - What does your table in MySQL look like? - How are you finding out that it's not working? Are you getting an error? Is the data simply truncated in the database? Also, 60KB is a pretty small amount when you're talking about POST requests. [PHP's post_max_size is 8MB by default](http://php.net/manual/en/ini.core.php#ini.post-max-size), well beyond 60KB. That said, I don't think you need to worry about POST size limits imposed by PHP or your server. Finally, echoing other concerns, definitely drop mysql_* for PDO and prepared statements. [This is old vs new tutorial should get you where you need to be](http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers). Definitely checkout the bit about [named placeholders](http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers#Named_Placeholders).
Note: What a actually dick would say. Joking aside, nobody here personally know you to be sure of that (aside from u/JeffreyWay). Just your public persona, which for most folks, then to be just a fabrication or a blurry projection. So I would suggest don't take it personal.
Ahh right ok, and then the GUI just reads from that DB? 
That's not an abstraction leak. An abstraction leak is having an abstraction that purports to be neutral to certain aspects of its implementations, while the interface or behavior ends up leaking implementation aspects that are supposed to be irrelevant. ORM is full of such moments, like N+1, lazy or eager loaded relationships, arbitrary interpretations of callers intent of atomicity, poor or no transactional safety, and so on. It is not an abstraction leak to say "ok we will not hide this and this, we will instead make it an integral part of the abstraction, so all implementations behave according to it in a predictable way." That's just good design. The problem of many ORMs is *guessing*. Instead of asking the caller what do they want, what to read and what and when to write, they guess. It's one thing to wrap implementation details with a simple interface so the caller doesn't have to decide. It's a completely different thing to have implementations that *have to know what the caller wants to do a moment in the future and guess it* because the abstraction doesn't allow the caller to tell them. When you cache something, you guess it'll be read again, and this gues is often wrong in short-lived PHP. When you serve from cache, you guess the user doesn't need fresh information that may have changed, a guess that is also often wrong. When you eagerly load data that ends up not used, that's a wrong guess. When you lazily load data that was inevitably going to be loaded in the very next loop at the caller, that's also a wrong guess. When the called said "write" and you guessed the write will go fine and reported success, but then decided to write later, and the write failed due to a failed unique constraint etc. that's a really, really bad guess. I can go on forever, ORMs are full of bad guessing like this. And the worst thing is it doesn't have to be like that. An ORMs purpose is to take remote data and map it to local objects, and then back. It's *not* its job to *pretend* that remote data *is* local objects that are always in memory. This is an undue burden that many ORM libraries have decided to take on entirely arbitrary. When you stop pretending and just ask the caller what the hell they want, it becomes drastically simpler. See also how GraphQL works for an example of a specific query API, as an alternative to a naive resource mapping the way many people implement REST these days (resources are entirely analogous to objects). Think how an ORM based on something like GraphQL might look like. 
What is $_GET variable's max limit? And how PHP does limit its post/get variables?
1. Good IDE already can save you time with typing *any* function name. 2. Instead of this repeated use of mres() one have to use prepared statements. 3. There is no use for stripslashes() functions at all. 4. mysql_query() function is deprecated. 5. This indeed doesn't answer the question.
I've always used Graphite + StatsD to do graphing and stats collection (see https://www.digitalocean.com/community/tutorials/an-introduction-to-tracking-statistics-with-graphite-statsd-and-collectd for a good overview) which has been excellent in my experience if you don't mind managing it yourself. For alerting based on various stats, I've used Alertra, but it looks like there are some OSS alternatives like https://github.com/scobal/seyren
It is not enough to change only HTTP *method*, leaving `action` the same long string. Everyone is talking about not the `method`, but rather of the `query string` which, for the average PHP user, is pretty much the same. You have to change the way you send the form, making form's action `http://www.mysite.com/script.php` only and sending other fields as POST variables. Of course you have to use `text` type field in mysql for storing 60000-character long data. Or even `mediumtext` if the text size expected to exceed 64Kb. As of the other limitations, it is very unlikely that they would be in effect. Either way you have to debug your application first, **to make yourself certain at which point the data gets truncated** - is it indeed the database, or PHP or even your C# client. 
what on earth is [this](http://i.imgur.com/ZXdL7Gn.png) coloured line trying to tell me in PHPStorm? It's some old project I've been handed.
The most common reason for me would be in model classes where i have a list of valid values that correspond to a mysql-enum field. Assuming ENUM('ok','incomplete','new','deleted') in mysql. Before i always did something like static $allowedStatuses = ['ok','incomplete','new','deleted']; And then i can use this array when i render a &lt;select&gt; element, or when i validate user input. But it's really a constant, having it in a static variable doesn't seem as right as having it in a CONST .. because the list IS constant, it never changes during runtime. It only changes if the underlying mysql column changes (and i dont change the column type during runtime.) *Edit* One more, not so common usage is like a list of countries for a multi language site. currently a site i'm working on has this: define('POSSIBLE_COUNTRIES', serialize(['au','th','sg'])); notice the abuse of serialize to be able to have a constant/defined list of values. Thoughts? 
&gt; Of course you have to use text type field in mysql for storing 60000-character long data. I thought that too, but apparently the max size for a [varchar has been bumped to 65,535 as of MySQL 5.0.3+ (as long as the row doesn't exceed that)](http://stackoverflow.com/questions/13506832/what-is-the-mysql-varchar-max-size).
ZF2 isn't any better, at the beginning you spend so much time learning the actual framework which is contradicting the sense of a framework. One of the reasons for that is - also here - a bad, partly incorrect and incomplete documentation. Just check the comments on almost every doc page - people complaining the examples do not work or are outdated.
overflow or reading uninitialized value ... probably ...
 cat api &gt; /dev/nucular
`$_GET` is a php array and browsers know absolutely nothing of it. May be you meant the URI length.
I'm curious as to what you are doing that requires you to send a post request to a PHP server from a c# script. Care to elaborate?
I doubt this is the issue. OP's only sending 60k of data. I've never seen a host reduce max post size below the 2mb default.
I'm in the same boat, we use lots of small server which cost $20-30 each, at $150 per host its just not feasible. Sure I could just dump all the things into 1 massive server for $400pm and maybe NR pricing would make sense. 
Well, it's the hyperdrive regulation system from the Prometheus. The one that goes to Pegasus galaxy.
We're also having problems. Getting in touch is really difficult. Got one mail in two weeks but no solution. Our account is also having builds from different repositories that aren't linked to our own. I've just sent an email for cancellation and money back. I also like supporting developers of open source software, but there has to be some kind of service.
+1 also if you have enough ram, just use memory table storage
Also I've noticed a lot of methods that are on concrete implementation but not on the contract yet calling them on a type hint of the contract. Zend MVC has a lot if this. Thank god PHP isn't strict. https://github.com/zendframework/zend-mvc/issues/23
The downside is they don't work on VMs hosted on windows due to symlink issues and absurdly long filepaths. That's a third of the developer base just flat out ignored by the amateurs at Node/npm. Another downside is error messages so stupidly written only the person who wrote could know what they mean, but that's a minor issue. They wouldn't exist if the things were actually as cross platform as advertised.
I can get responses with 70ms in Laravel it self.... Your shared provider or your code base might have a little to blame on this.
I partly agree. You're right that you shouldn't always avoid using facades. Facades are fine in some cases, but that doesn't make them good code. Anything designed for RAD is fine in some cases but is likely to be bad code. Eg using global state, mixing concerns and avoiding tests are fine in some situations but not good code. I don't like how the Laravel documentation promotes bad code in places. If you're experienced and understand the tradeoffs then using facades _might_ be a good idea. Laravel attracts lots of new programmers (which is great) and it's embedding bad practices. I've seen a developer do extra work to implement a static proxy pattern, trying to copy Laravel's facades, when dependency injection would be both simpler and easier. I'm going to generalize again now: unless you understand the tradeoffs of using static classes and understand how to manage the global state then never use Laravel's static facades. Note: I've used Laravel a fair bit but am in no way an expert in it.
No it's not Monstra. Monstra is another stand alone project
Try rollbars. Gives you a nice graphical interface that basically opens a job everyone a new error in encountered. Only issue is that you need to install it as an exception handler. Other option and what I have settles for is just pushing all logs to logentries and setting up the rules and notifications based on this. Either way will help when managing a large load of servers and different apps.
What now? I've used windows in my darker development days and gulp worked fine. What am I missing here? Also, you're losing an argument so throwing around "amateurs" as some sort of ad hominem attack? The fact remains - the solutions work for nodejs and don't currently for PHP. You are essentially arguing we should all stop being productive today and start making PHP stuff to do what already works in node... And you can't see that this is madness. It's a solved problem. Use the solution and get on with innovating your own solution. Or quit whinging about it and start building a PHP ecosystem which can compete. When you have a well maintained, supported and fast implementation of the various pre and post processors, transpilers and linters which exist in the node ecosystem we can have a debate about whether node is appropriate for PHP projects. Right now you're offering no compelling arguments to move from a working solution. 
&gt; PHP-Mock is a testing library which mocks non deterministic built-in PHP functions like time() or rand() You'd need to mock time() and rand() if you want to test functionality that depends on them. You could have time() always return the same date, for example, in order to test your yesterday() function or something.
I think the default Apache/PHP POST limit is 10M, so 60k should be fine.
Sorry, but a repo that says it will contain the work-in-progress spec doesn't count for me... Too far from being finished for me to trust it. As for the manual link, thanks for that!
How is it different from existing packages (e.g. https://github.com/myclabs/php-enum)?
This is one of the use cases for which I really appreciate the [Cake 3 ORM](https://github.com/cakephp/orm) way of doing things (disclaimer: I started writing the ORM for solving this kind of problems). It sits very close to SQL and lets you work with data as a bulk, without making too may assumptions about it. A big part of my daily job is processing bulks of data coming from feeds, CSV files and our own database and I have totally found the same problems the author describe in this article.
There is probably not much difference if any. the idea of an enum is a pretty simple one and not many ways you can implement it efficiently. I didnt know of that package until you linked it and I do notice alot of similarities. I guess mine is slightly different as it gives the ordinal values as well. If your asking, why I built it when there are probably many other packages, the answer is two fold. 1, because I wanted to. 2, I want to get into the habit of releasing many high quality packages, so why not start off with something simple :)
If you're aware of the server environment, either is fine. If you're building a plugin (or otherwise distributable code), use `$array = array()`. Stylistically `$array = []` is considered neater and is visually similar to other languages than `$array = array()`. Functionally `$array = []` is shorthand and was introduced in PHP5.4. This means if there's a possibility of your code being executed by an earlier version of PHP then you may be introducing a bug, where `$array = array()` wouldn't have the same problem.
The second one is better, especially when you make big configuration array. You only need to use the first one if you have a PHP &lt; 5.4 compatibility issue.
PHP &lt; 5.4 is deprecated anyway
Don't worry about PHP &lt; 5.5, it's not supported anymore. 
Thank you so much everyone, everything works as it should now. Not sure what exactly fixed the issue, as I pretty much applied everything I was recommended to do on here. Thank you as well for warning me about SQL injection attacks, and I will definitely look into how to fix this.
I got burned by this (not `array()` but something similar) about a week ago running on this assumption. The client was using cPanel on their own server and refused to upgrade past 5.2 (5.2!!!!!). I didn't lose _that_ much time, to be fair (just had to update a few lines in a template), but it does happen.
People who is arguing about the lot of dependencies: you can always remove Service Providers from your configuration, is the same that removing from the main composer.json, will get the framework lighter, and a lot of crashes that can be solved. For me, Laravel is a wonderful framework, with a lot of out of the box features, you can get a lot of functionalities easy running. Is easy see from outside the problems than the inside, but I think the balance is the key.
I think the second is more readable, but you can use whatever you want, don't be afraid to experiment in this cases.
Aha, okay cool thanks :) Yeah thought it had something to do with the HTML, just wasn't entirely sure, but now that you point it out, yep!
[], it's the replacement, it will probably last forever, while array() could be removed at some point in the future.
If anyone has any feedback then please raise an issue on github and I'll be sure to look into it. Thanks!
Maybe they got the respect of u/demonshalo, but it deplete repeatedly when they became more public.
Well you have to worry even if you are on PHP 5.6 or PHP 7 yourself, since your clients may well be on shared hosts. If you develop a free or open source software like wordpress, joomla, phpbb, you have to consider. 
I honestly hope they remove it, but doubt it will ever happen.
I find myself replacing array() to [] in other peoples code... The brackets should be viewed as the new standard, as array() is very old, and at this point I view it as backward compatibility.
The question is not which syntax is valid, but which is recommended. In essence, this question is about [Coding conventions](https://en.wikipedia.org/wiki/Coding_conventions)
I find it amusing that you have posted almost half of the comments in this thread. I guess the louder you yell, the more important your opinion sounds. (Funny because that's exactly what you accuse Taylor Otwell of.)
yeah, its not that big of a deal for simple arrays. The advantage of [] over array() is more evident when you create multidimensional arrays on the fly such as this: $oldArray = array(array(1, 2), array(3, 4, 5), array(6, 7, 8)); $newArray = [[1, 2], [3, 4, 5], [6, 7, 8]]; Now you are much better off with new array syntax. If I recall correctly, in Zend framework multidimensional arrays are frequently used for routing, view data and other configuration information, so its a good place to use square brackets over array function. Consider this piece of code fragment below from ZF2 example, using square brackets will be a lot better: 'router' =&gt; array( 'routes' =&gt; array( 'archives' =&gt; array( 'type' =&gt; 'segment', 'options' =&gt; array( 'route' =&gt; '/news/archive/:year', 'defaults' =&gt; array( 'controller' =&gt; 'ArchiveController', 'action' =&gt; 'byYear', ), 'constraints' =&gt; array( 'year' =&gt; '\d{4}' ) ), ) ) ) 
ELK can be a pretty good option. Spin up a couple boxes and route traffic (statsd can be great for collection). Then use the awesomeness of Kibana.
Did the latter notation even exist when PSR-2 first came out?
Good try, but this is rather a documentation problem.
&gt; Just curious to which is recommended? on `php 5.3` use `array()` on `php 5.4` and `+` use `[]`. (`[]` not supported on `5.3`) 
Why not link directly to the PHP FIG website, instead of your own site?
Who is u/pmjones?
Where is the cut off, though? When do we as developers start saying to hosts 'look, you need to upgrade your PHP version'. It's frustrating seeing all these cool new PHP features coming out, only to realise that we need to wait 5 years before we can even consider using them in open source projects.
Based on [PSR-2](http://www.php-fig.org/psr/psr-2/) you should use `[]`.
That's even better. If your host doesn't support PHP &gt; 5.5, your host is shit. 
I typically declare namespaces on the same line as &lt;?php, like: &lt;?php namespace My\Namespace; use DateTime; ... I can't say I've seen anyone else do this on github or the like, and it is one of the FIG standards I've chosen to ignore (along with spaces over tabs). Any reason I should avoid this? As soon as "declare(strict_types=1);" becomes a thing, I'll embrace that with love, probably put that next to &lt;?php instead.
It doesn't matter what you use, just be consistent in the project codebase.
Well the cut off point is totally subjective, but to me if the unsupported version's usage falls below 20% it will be a good time to drop its support. My own software dropped PHP 5.2 support 2 years ago, PHP 5.3 will continued to be supported for at least another 2 years, and then we will support only PHP 5.4+. You can take a look at this webpage to see the current usage of each PHP minor versions: http://w3techs.com/technologies/details/pl-php/5/all Keep in mind that the number may be misleading, since some users are stuck on PHP 5.2 simply because the webhosts have it as default and they never bother to change it. For some webhosts, you can configure your own PHP version in CPanel, and this is very easy. Also there are some people who rely on legacy application that will never change anyway, so they dont bother with upgrading. For this reason, it may be safe to consider dropping support for old version even if the usage is around 25% or higher. The bottom-line is, be pragmatic. Dont just blatantly upgrade to the newest version, and dont let extremely old and outdated versions that hold you back. I know someone called Tony Marston whose softwares still support PHP 4, I mean PHP 4 lol. 
Tell that to Site5
Considering they don't use `array()` once in all of the examples, I assume they accept `[]` as the standard for PHP 5.4 and up. There are also benefits of using `[]` over `array()` but those have already been stated elsewhere.
Because is the Ubuntu of the php frameworks, and with that I say that is a framework with NIH syndrome, Apple Marketing selling like new things already developed with another name, and a bad copy of RoR.
Nah, dude. I'd be a hypocrite if I mistook direct language without any context in tone to be negative. Careful with who you send terse texts to...
Can't you please post the link yourself, as a brand new post? It seems this one will be nuked soon, and for a reason. While the authorized (and direct) link will be much more appreciated by the community. 
try http://prometheus.io/
I have a rep at NR from when we were originally looking at it, and from what they told me they try and stick to whatever number of servers you actually pay for. If you tell them you need 2 servers, and you start using 4 they will continue to bill you for 2 until they see the average you use is more than 2. Then if the average you use stays up, the will just continue to bill you for 3. 
Coding style is subjective by nature. If you and your team are happy with a single coding style, no matter what it is, you have no reason to change. 
http://paul-m-jones.com/about
How come PHP7 didn't give up support for a lot of the bad practices introduced in old versions of PHP? The things people give php shit for like the inconsistencies with strng function params, etc... Do you think php will ever make that transition in the future?
Heh -- you haven't realized yet that it's not possible for you to make me angry. ;-) More to the point, though: have you improved as a programmer over the past 5 years? 10? 15? Do you expect to improve as a programmer over the next 20? I expect the answer in all those cases is "yes." Why then would one feel resistance to the idea that someone else has become a better programmer over time as well, and further, that they might have acquired hard-won knowledge and heuristics that would be valuable to incorporate into one's own growth?
&gt; except for auto increment counts, but I can live with that What about ` ALTER TABLE tablename AUTO_INCREMENT = ? `
Tell you what: I will go back and re-inspect your work. If the code has changed that dramatically since the last time I did so, I will publicly update my assessment. If not, I will publicly reiterate my existing one.
I note you have no technical argument in response. ;-)
"No-one of consequence." 
Which reminds me, I need to add the Action-Domain-Responder paper and a couple of other projects to that page.
I never thought about it; but I think the reason CI works so well is their amazing documentation that is easy to navigate and has examples that work well. I am rarely ever looking outside of their documentation (that is included with every download) for how to do something. I have not tried ZF yet. I don't mind the idea for learning a large framework; but it has to make my coding easier. 
I use [] in all my current projects, but revert to array() when working with clients since some servers haven't upgraded past 5.4 (unfortunately), luckily some projects are slower than they should be and my employers read about PHP7's performance gains, so my convincing them about performance jump has made their eyes open :) so I'm excited about going forward.
...More fuel to your ego, I guess. Kidding, I couldn't whole myself :)
Appeal to authority? Something said by an authority does not imply that the sentence is true. 
That was just an example. In fact, many (I would contend **all**) of them are **already actual facades that manage access to multiple classes**. Did you see my code examples?
Good article series. Thanks.
Hi OP (cevit), I helped define PSR-2 and I can tell you that there's nothing in there that suggests what direction you should go with this. PSR-2 is more about the layout and position of where tokens should go, and not about the type of token that translates to array open/close. "[" is an alias of "array(" at the engine level. If you're looking to support a legacy codebase that must run on PHP 5.3, I recommend array(). If you're developing a project to run on a current supported version of PHP (5.5) then I recommend "[". Hope that helps.
okay. sure.
Because it's very difficult to measure the pros/cons without actual code to look at. Saying something is always a bad choice is silly. Million-line codebases are not the same as fifty-thousand line codebases.
Are you insane or too modest? If it wasn't for you and your work/marketing on "netttus" years ago, Laravel wouldn't be on the map today. Something that I am certain is that people like you more than Taylor.
"Anything designed for RAD is likely to be bad code." Well that definitely plays into the fear aspect. Anything that improves workflow and the speed of building up an app is instantly bad... No application ever burned down because a developer used a View facade in their controller.
It's not *that* hard, at least not in this case. For example, which of the two practices (injection vs static-proxy) leads to less coupling? Which one ends up being easier to test? Which one promotes better long-term maintainability by developers who did not originate the project? The answer here, in all cases, is "injection." This is true for small codebases as well as large ones.
~~Looks great in Chrome, looks terrible in Firefox.~~ Looks like RequestPolicy blocked typography.com and when I right-clicked the first time it wasn't in the blocked list.
Hey, I'm the designer of the new site. I cannot reproduce this in Firefox. Do you mind submitting an issue [here](https://github.com/php-fig/php-fig.github.com/issues), and include screenshots and your browser version? Thanks!
Because Doctrine has an obtuse API and disorganized Documentation, while Eloquent is incredibly easy to use and versatile, and I would argue can be used in a DataMapper-like way *more easily than using Doctrine directly*. I can get most or all of the benefits of DataMapper, with the simplicity of Eloquent.
Yeah, it was a simplified example :) in the real file I have the array keys as class constants too.
You still might want to go to 5.6 now - if your scripts run clean of deprecation and strict notices in 5.6, you'll almost certainly have no problems under 7.0. 7 still has no working xdebug extension (though it's almost ready), so 5.6 might be the only stable, reliable version for a while longer. 
Opend it on mobile, looks great!👍🏻
They're *willing* IE users, do you really think they'll know any better? /s
Although if an "authority" (however construed) says something that is true, the truth of the statement is independent of the "authority."
Ok so maybe you can answer this... does it do app level monitoring? It looks to be more of a server level monitoring where I can feed it logs and get output based on that, but what I am really looking for is something on the app level that reads every single php call and breaks each call out to what they are doing.
You've gone from "the product very likely won't exist" to "oh well, some of it may need to be rewritten." Quite the shift. ;-) The point here is that if a better practice is known, it should be practiced, especially when doing so has minimal additional cost over the worse practice. If using injection instead of a static-proxy is trivially easy, especially when you have a DI mechanism already in place, one should use injection. &gt; Anyways, to call something bad, without understanding the codebase, or the product, or the requirements, or where the facades are used, makes no sense. That's the neat thing about having good principles: they can be applied sensibly to any codebase.
Really nice. Great work
Hey, put down the whitepapers! We have a new ruler to measure by... Everything should be compared to site5...
don't assume, but this is a missed opportunity to migrate the customer to a host that supports their needs for modern IT. If they have 5.2, I dread to think the patch status of security holes in their infra...
I would definitely support such an RFC. IMO basic language structures should have only one single way of definition. This makes the language more consistent and helps new developers so they are not as irritated.
Absolutely! That's what Instrumental is built for. It's a custom monitoring tool. We don't do any log parsing at all.
There could be multiple reasons as to why this happens. Most commonly, people sometimes serve the content of "/img/avatars/workingImage.jpg" via a script. This means that you might need to add a content-type header before you output the image. If you are serving the image directly from the drive then this might be due to an error, incorrect apache redirect, or a host of other reasons. Try using an absolute URL and see what happens (just curious to see what happens if you do that). 
I think this is a well-written article. It accurately describes the tradeoffs involved in using Active Record, and why combining concerns the way Active Record does is troublesome to those of use who see the wisdom of separating those concerns. If someone *must* use an Active Record implementation, the practices you describe are one way of attempting to constrain its all-encompassing nature with better practices. However, one is still left passing around Active Record instances. With good discipline, one avoids using those instances improperly, per the approach you outline. Unfortunately it is much too easy to give in to temptation when everything you need to subvert that discipline is *right there for the taking* in the Active Record instance. The fundamental problem remains: the concerns are still combined and available in Active Record. The approach you describe ends up being a series of workarounds that do not (and admittedly *cannot*) address the underlying issues of that combination. Again, I applaud your efforts to show people how to work around Active Record to get better separation of concerns. If one is stuck with Active Record, then the approaches you advocate will help to minimize the negatives of its tradeoffs. But if one can replace Active Record with an actual Data Mapper, and build a Domain Model on top of it, so much the better. UPDATE: As a followup, I found &lt;http://www.mehdi-khalili.com/orm-anti-patterns-part-4-persistence-domain-model/&gt; to be very enlightening regarding persistence (data source) modeling vs domain modeling. Perhaps you will like it as well.
By the time I thought learning RoR might be interesting it had already peaked.
PSR-2 doesn't explicitly cover this. PSR-12 Extended Coding Style Guide doesn't either, but it's currently in draft so a PR may be welcome. https://github.com/php-fig/fig-standards/blob/master/proposed/extended-coding-style-guide.md
Not like its a bad idea, given how infrequently the content changes
Connect two modules that hasn't been before. 
Great! I have question though: in what situation is the **Huggable Interface** useful? I've never heard of this pattern.
Why? There so many other languages better designed and with better tooling than PHP.
Great job, I love it! Typography is to the point. I would wrap *N/A* in an &lt;abbr&gt; instead of &lt;em&gt;, as it's semantically more correct.
I *love* oldstyle figures, although I don't think they are the right choice for a table. They are meant to be used in body text to avoid having them stick out. See [font-feature-settings](https://developer.mozilla.org/en/docs/Web/CSS/font-feature-settings) (CSS).
What language did you use? ;)
How would the "Sloppy approach" be hard to maintain? Are controllers calling $someModel-&gt;save() really that big of a problem that you would invest tons of hours (especially while having lots of models with lots of fields) in the "Tidy approach"? Why don't you simply write superb tests to make sure nothing breaks while your app is growing?
&gt; and should be rewritten in Java lol
How are "coupling" and "maintainability" scary terms Jeffrey? They are fairly important terms that we all have to deal with daily. Facades make for some great presentations and documentation. They are immensely terse and can get a concept across quickly - but _in my experience_, in a real life medium to large size production app they have always caused more pain than they are worth. Not because they are "bad" or "death to static" or whatever, but because they tend to mask the amount of complexity and coupling you are dealing with. On a fully injected class you can look at the constructor signature and immediately understand which objects your object depends upon. They tend to _hide_ complexity. Given that there is a huge upside (understanding of intent and revealing of hidden complexity) and no downside, why not inject? I mean you can throw around "terse" and "developer happiness" and "readability" - but in my _personal experience_, terse is not always the best at revealing intent, I am far happier as a developer since I decided to inject everything, and I find fully injected classes to be far more readable because of the revealed complexity.
I love Laravel. AR works fine for me. It performes great. It comes with great features. It's easy to set up.
&gt; That's the neat thing about having good principles: they can be applied **sensibly** to any codebase. This. Also emphasis mine. Sensibly is important here. There is a nice cop out position which is held by some which is that "not everything applies to every codebase, therefore I don't have to do X if I don't want to". And it's true - you don't have to apply CQRS or event sourcing or what have you to every project - they may not apply. You can reasonably assume that an app will never be large enough to apply such large and complex techniques. But given that a) injection is easy in Laravel (by design, it seems) b) there is no downside to doing so c) the upside is revealed intent Why wouldn't you, regardless of the size? Every single project regardless of size benefits from it. Applying the position that "each project according to it's complexity" to something so _trivial_ and straight forward is madness. And even if it was slightly harder than using a facade (one might argue it's less keystrokes, so less physical work but I think we're into hair splitting over fractions of calories here), when you want to find out which type is being used a 'facade' is slower to trace back... Where I can just throw my cursor on an injected class and cmd+b, I have to look up some docs and find the underlying type in a facade. It takes real time. I mean pick your battles on simplicity with respect to large scale techniques and principles...but dependency injection?
Ruby as well.
&gt; How would the "Sloppy approach" be hard to maintain? For the same reason that any lack of encapsulation is hard to maintain. Naked save() calls points to procedural updates like: $foo-&gt;bar = 'something'; $foo-&gt;baz = 'else'; $foo-&gt;save(); $bar-&gt;foo = 'this'; $bar-&gt;fuzz = $foo-&gt;id; $bar-&gt;save(); While that whole operation might need to be used in several places. Thus at a minimum, you want to encapsulate it behind *something* - whether that's an Eloquent model method, or a service class method. Same goes for queries like `Article::where('foo', $bar')-&gt;orderBy('baz', 'DESC')-&gt;get()` scattered everywhere. Encapsulating that into one central location improves maintainability dramatically. &gt; problem that you would invest tons of hours (especially while having lots of models with lots of fields) In my experience it's not lots of hours, it's very quick to write those things. Secondly, that time investment pays for itself very quickly once your app reaches a certain breadth and depth. Code is easier to reason about because it expresses its intent, your IDE can help you *tremendously*, and changes are done cleanly and reliably. &gt; Why don't you simply write superb tests to make sure nothing breaks while your app is growing? For one, because it's easier to write fewer, faster tests when you have well separated classes defined by interfaces. You need fewer integration tests (which are slower to run, and slower to write thanks to the need for lots of DB fixtures), and can test specific variations of inputs and things more rapidly. Tests are a necessity, but they are not a substitute or a crutch for poor encapsulation.
I think saying RAD = bad code, or RAD = technical debt is overstating it... RAD is a collection of things which let you write things quickly. Code generation, dependency injection containers, ORMs (regardless of flavour) etc all exist to support rapid application development and they are not inherently going to lead you to bad code or technical debt. The issue comes when you use RAD tools without taking any care and you build something which is difficult to change. There is a trade off between getting a product to market so you can start making money and spinning your wheels taking the slow way around. You don't want to sit at either edge of the spectrum. If you take the slow way around you'll never ship and you'll go broke. If you build something "quick and nasty", ship it and happily what you wrote becomes popular then you are dealing with all of the problems of scaling up customers while trying to live with a big ball of mud. One of the core tenants of agile software development is responding to change. A lot of people see this as a _willingness to accept change_ and that's part of it, but the other part of it is being _able to respond to change_.. having a codebase which will accept changes readily and is adaptable. Poor use of RAD techniques can (not saying does... wouldn't want to be accused of over generalisation) lead to code which is inflexible. If your business is growing this is probably not a satisfactory position to be in. Disciplined use of RAD gets you shipped and leaves you with a codebase that is adaptable and future proof. Undisciplined use ... well yeah. bad code, unhappy developers, unhappy customers, death to your business... 
Ah ah, nice one :-) I thought it could be a joke but you're never too sure.
&gt; These things do matter, even in the mid-term (as little as a year). Shorter term than that. As soon as you reach for refactoring they start to matter. If you practice TDD things like dependency injection start paying off in a timescale of *minutes*. On the other side, if you practice TDD things like globals and statics start hurting you in the exact same timescale. I'm not saying these things to hate on Laravel. I use the framework everyday.. but using a specific technique which is known to be superior to it's alternatives regardless of the scale seems to be the kind of thing that should be done for your own sanity and the sanity of others.
Doesn't Laravel itself offload a lot of work onto other projects, but they just get abstracted using some of the Illuminate classes?
Use `...` and there are no issues: sort(...$data); // works with references
oh geez. as a current web developer i would basically ignore everything you've pointed out. you fall into the 1% of internet users that is paranoid about everything dynamic and cloudbased on the internet. you either trust the websites knowledge and implementation you're using, or go use another tool that has no such problem(s). since you were bold enough to voice your 1-sided opinion -- I feel compelled to do the same. I'm sure the happy medium is somewhere between our viewpoints. :)
I tried what you said, no luck. I created a new image, using Gimp, and exported it as a JPG. As far as I can tell, it appears to be a legit JPG, like the other ones that work. However, when I reference it in code, I get the same issue, it's content-type is text/html. THIS ONE BELOW FAILS Cache-Control:no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Connection:Keep-Alive Content-Length:15 Content-Type:text/html Date:Tue, 27 Oct 2015 23:41:27 GMT Expires:Thu, 19 Nov 1981 08:52:00 GMT Keep-Alive:timeout=5, max=95 Pragma:no-cache Server:Apache/2.4.7 (Ubuntu) X-Powered-By:PHP/5.5.9-1ubuntu4.11 THIS ONE BELOW WORKS Cache-Control:no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Connection:Keep-Alive Content-Type:image/jpeg Date:Tue, 27 Oct 2015 23:41:27 GMT Expires:Thu, 19 Nov 1981 08:52:00 GMT Keep-Alive:timeout=5, max=96 Pragma:no-cache Server:Apache/2.4.7 (Ubuntu) Transfer-Encoding:chunked X-Powered-By:PHP/5.5.9-1ubuntu4.11 
Looks great. I wasn't expecting much before clicking the link, but was pleasantly surprised by how nice it looks. My only suggestion is giving more credit to key people involved with each draft. If not on [the index page](http://www.php-fig.org/psr/), then as a footnote on each PSR page.
IT looks great, and with the interfaces as well as guides it's a lot more useful. I was not an early supporter, but I have to say, you sure showed me
So you are telling me that you are creating an image using an image software, saving it on the disk and serving it to the client. Yet somehow the server sets the header as "Content-Type:text/html" for the images you create but "Content-Type:image/jpeg" for all the other ones? That doesn't make sense because the server does not keep tabs on the files you have on your harddrive. You either saved the picture incorrectly or are serving it via a script and should manually set the content type header in PHP via **header("Content-Type:image/jpeg");** Dunno what else it could be O.o
Looks fantastic. Very modern and professional. Lends a lot of credence to the "officialness" of the FIG.
Using PHP 5.3 (or less)? `array()` Using PHP 5.4 (or greater)? `[]`
The images in my directory that are working were there to begin. I am just adding new images, by creating them, as I normally would, then copying them into the same image directory that is successfully serving the original images. It is my new images that appear to not work. I have done searches on the titles of the working images in my codebase and I have not found anything other than a reference to them in html. I even took an image (jpg) that I know works and is served fine from another website I can access, and I copied it over into this same directory, and it is still being served as text/html. For whatever reason, Apache2 is serving these new images (any images added to my directory) as text/html. I ran the linux command "file my-image-name.jpg" and I get valid image output, so I know the images are valid. my-image-name.jpg: JPEG image data, JFIF standard 1.01, comment: "Created with GIMP" This must be an Apache2 issue for me then. It is odd. Thanks for any suggestions. 
Unfortunately when people go repository crazy with their applications they use PHPUnit as a spell checker and aren't actually testing *anything* of substance because they are re-creating their implementations directly in their tests by mocking everything. You **need** integration tests and end to end tests. In fact, in the GOOS book they discuss a case where a project had only these types of highly mocked granular tests and "everything" was tested yet the system as a whole did not even function.
You could start with the series of blog posts written by its originator, which begins here: http://jeffreypalermo.com/blog/the-onion-architecture-part-1/
Did you try the absolute URL? http://www.domain.com/img/avatars/NEWFile.jpg? Could it be a file permission issue? Can you commandline to the /img/avatars/ directory and run "ls -lsa" do all the permissions match? How about owner/group? 
Really? You are using file_get_contents and not readfile?
Yea, we had a brief conversation and we're moving them to a modern host. His server is (obviously) quite old, and was set up by an overzealous IT person who wanted to keep everything in house. That person has since moved on and now the server is an unwatched/unmaintained liability which we only found out about on launch day, hence the "getting burned" I mentioned. Upon discovery I wrote a (very quick) patch, deployed, then immediately had the "WTF is happening at your company" conversation with the owner. Migration happens in a few weeks.
I tried listing the image in my directory. The permissions were NOT the same as the ones that worked, so I changed them to be exactly the same, but this still is not working. I reloaded Apache2, deleted my web cache, etc. -rwxr-xr-x 1 mule mule WorkingImage.jpg -rwxrwxrwx 1 mule mule NotWorkingImage.jpg. It has to be something like this. Do you have any examples of the header("Content-Type:image/jpeg"); Thanks.
 There is a chance that we will be switching over to Sculpin soon, but we use Jekyll since it's built in. 
I hadn't considered how this design would have behaved it in a more strictly enforced language. It's interesting (and troubling) that this design only works because PHP has looser enforcement rules. A work-around would be to use the model itself to save the attributes from the model I'm passing in by doing manual mapping, but Laravel doesn't fire model events when you do that, so any model observers you use to enforce data integrity upon save would not be triggered. Plus it's an additional mapping layer to maintain when one of the models themselves changes their API, when the point of this approach is to only do pseudo data mapping.
Asking PHP to send files is HUGELY inefficient, no matter which way you choose. Either way, a sort of CDN server for static content with no dynamic capabilities is preferred.
np. That's pretty common actually. If apache cant access the file, depending on how its configured, it would send you something like status 500 - internal server error with text/plain as content-type. That's my guess. Permission/file access error that is causing the server not to be able to serve the file. Gl hunting!
As far as I can tell, the new approach that the Onion architecture is proposing is that we draw layers as circles instead of rectangles. Kidding aside, everything he says about the Onion architecture also applies in a healthy layered architecture, and in any bigger app, layers are not a choice, but a natural byproduct of separation of concerns both in code and in terms of programmers, teams, organizations. It might help you to read the Onion architecture as an opinionated "tips for doing layers well", because that's what it is, nothing more. And don't forget - any opinion about how to do things better has an untold number of assumptions that may or may not apply to your project. Think critically.
The author is talking about how to format messages, he never said that you must only have one exception for a range of error conditions. Even if you split your error types in multiple classes, chances are you'll have sub-types that are not semantically distinct to your code, but might benefit from a distinct message to a human reader. Take PHP7s ParseError. Your code can't do much about some code having a parse error, it's all a parse error to it, in terms of handling the error. To a human reader though, you might need several dozen message methods to cover all types of parse errors. Additionally, classes are not the only way for your catch statement to differentiate error message, we also have codes. The methods as suggested in the post can also throw with a distinct machine-readable code, the way SQL drivers like PDO do, for example.
Generally I favour being conservative with which plugins I include. Gulp-watch is probably being left to rot because 99% or the time you can use the built in `gulp.watch`. If you need more than that then I would put forward that your setup is too complex.
Agreed, mod_xsendfile can help in this situation too.
Code Complete http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670
There are only a few truly essential computer science texts. This is the one I recommend: https://mitpress.mit.edu/sicp/full-text/book/book.html
[removed]
This article is behind the times. Upload to S3. Even small projects can use this for pennies. The free tier will cover you for a long time on a side project and anything serious should have S3 involved. We can debate AWS and other services, but S3 is the real deal.
Onion architecture makes a bit more sense visually, but excel, visio and my napkins and whiteboards suck at creating it.
Yeah the really type-safe approach would be to map the incoming entity back onto a new Eloquent model, since you can't be sure you actually have an Eloquent implementation of the interface. Something like this: public function save(MemberInterface $member) { $record = new Member; if ($member-&gt;getId()) { $record-&gt;id = $member-&gt;getId(); $record-&gt;exists = true; } $record-&gt;login_name = $member-&gt;getLoginName(); $record-&gt;display_name = $member-&gt;getDisplayName(); $record-&gt;save(); } I would think it *should* still fire the correct events no?
If its large and provides business value then it is almost impossible for the answer to be rewrite. If it is a small codebase providing little critical function (i.e. revenue) then it likely doesn't matter. So is this a small, hugely valuable codebase? If so, refactor slowly. If it is a large, low value codebase then... don't pay for too many hours for a consultant.
This code base is a company's core product and is in the final stages of launching. It works well. A power struggle has ensued at my company to discredit the code base to take the lead developers job and thus the need for a third party to review it to prove to management that they would be seriously misled to embark on a rewrite by a brand new guy who just joined the company and fire the original developer. 
Program or Be Programmed Best $20 you'll ever spend.
While not practical, there's some serious wisdom from programmers who have done it for a very long time and built languages and tools we all use in Coders At Work. It's a series of interviews about what works and what doesn't. https://www.goodreads.com/book/show/6713575-coders-at-work
I'm currently working my way through "Database design for mere mortals" by Hernandez, which I am enjoying. I have found that as the size of my applications are going up, I'm still really relying on the SQL knowledge that I thought myself 10 years ago. I'm not sure how good my database architecture decisions really are. "Clean Code" and "The Clean Coder" by Martin come highly recommended, and are currently sitting on my wishlist waiting for me to finish up what I have. "Patterns of Enterprise Application Architecture" by Fowler and "Domain Driven Design" by Evans have also been recommended to me. On the most recent edition of the laravel podcast, the hosts spoke about books that they thought every backend developer should read. It's a good mix of stuff. Show notes have been typed up by @eli4d here - http://eli4d.com/2015/10/15/laravel-podcast-episode-36-dev-school-the-unofficialinformal-show-notes/
An ideal `.htaccess` is called `nginx.conf` ;-)
yes, you can generate a unique url for each resource with instant expiry based upon app-level permissions, although tbh, it's probably going to depend on how sensibly you code your app how much of a hit you'll take from the requests to generate, then serve n url's. Addendum: S3 does nothing without being told to, so while S3 can be used to manage this using user-permissions, you have to code your app to set this up.
Just uploading everything to third parties isn't a good advice. It's another option, sure, but it's not *the* solution.
* Clean Code - Uncle Bob Martin * Pragmatic Programmer - I forgot the authors. * Patterns of Enterprise Application Architecture - Martin Fowler * Real World Solutions for Developing High Quality PHP Frameworks and Applications - Sebastian Bergmann &amp; Stefan Priebsch
Official ? Really ?
Yes, I was one of the original devs. Team of between 3 and 5 guys over the last two years. We hired the new guy because he had lots of experience with areas that we didn't yet have (horizontal scaling and deployment) hoping to leverage. Instead he refused to work with the existing team brown nosing to the coo and effectively has taken control of the dev team in about a months time. He was hired as a developer to write code and hasn't produced anything other than putting the company on a crash course into bankruptcy. Things look bleak, but this is a fight worth fighting. I still have a chance to right this ship and expose him. I just need some outside independent experts who can help back me up.
Good luck finding a consultant. I suggest finding an older PHP dev/consultant. Young devs like rewrites because the ability to write code outpaces ability to read it. I suspect your Java dev is in this situation. I would suggest that you demand the articulation of specific issues. Hand wavey statements about code quality are the hallmarks of smart coders with low reading ability. I would also suggest finding Joek Spolsky's article on the Netscape rewrite. People give Joel a hard time but he has some real good nuggets and that is one of them.
Why would a real expert work for such a moderate salary?
emm, that is one COSTLY .htaccess file in terms of performance O.o
Apparently you are underestimating PHP.
Have you tried with a much longer string? Usually that's the factor people talk about when comparing usage of the two.
So what? Are they restricted from Internet access and can't get any other job online? How one can become a real expert without access to internet then?
Object Oriented Software Engineering by Ivar Jacobson, probably the most important OOP book out there for large-scale development.
I'm not sure you understand the economics of S3, nor the nature of my recommendation. S3 does adress the security issues for most uploaded content and does it handily. It is also not expensive in the least, especially for small projects and even more so for large ones. Not when you add up all of the benefits.
&gt;Interesting, strtr is behaving slower than str_replace with your test. Yes, because in your test strtr isn't doing the same job as str_replace, you are not comparing the same functionality. strtr is really meant to replace characters individually. echo strtr('abcd', 'dcba', 'wxyz') will output "zyxw".
The issue isn't the price tag, it's where the money goes (Amazon; which furthers the centralization of the Internet and is not a notion I warm up to).
&gt; Yeah, that's a horrible analogy. Thanks for playing though. Not really. If your threat model is "someone breaking into the door", a prison has better locks than you do. Sure, it costs a lot of freedom to implement. But apparently that's not a concern.
I'll give you the benefit of the doubt and say you seem to be mistaking S3 with AWS as whole. If you are doing file uploads in the modern web, with a new app, or adding new functionality related to file uploads and you aren't starting by looking at S3 then you are making a mistake. Simple as that and it has nothing to do with funding.
I am not mistaking anything. This applies to any kind of outsourcing of infrastructure. Again, assuming a third-party service as a default shows a fundamental failure to understand how the web was designed, and how it was supposed to work. S3 *is not* a default, it is really as simple as that. There is no reason for it to be, either.
Well, I understand you have your opinion. You don't have to take it as anything, but I've got 20 years of dev experience, fundraising experience, and building web teams and product artchitecture in Fortune 500 companies and numerous startups. I consider that a pretty reliable reference point for understanding "how the web was designed". You can argue your point, but I don't think you're coming from a pragmatic place, it sounds like it's coming from a rather dogmatic place relative to something about using third parties. Which is fine if that is your angle.
&gt; You don't have to take it as anything, but I've got 20 years of dev experience, fundraising experience, and building web teams and product artchitecture in Fortune 500 companies and numerous startups. I consider that a pretty reliable reference point for understanding "how the web was designed". Not really. In fact, it shows the *opposite*. The web *wasn't* designed for enterprise usage. What you are familiar with is enterprise *usage* of the web, which is almost directly contradictory to what the web was designed for - to be open and equally accessible to each, with no single points of failure. You are a part of the industry that walked in and started actively destroying the web-as-designed. This is not a thing to be proud of, nor a thing to be waving around as a 'qualification' in anything other than enterprise circles. You're part of the problem. &gt; but I don't think you're coming from a pragmatic place, it sounds like it's coming from a rather dogmatic place relative to something about using third parties. If you believe that vendor lock-in, loss of control, loss of privacy and a single point of failure are not "pragmatic concerns", then I honestly do not believe you have any business touching software development.
Smart, experienced, well educated and a depth of experience scaling multiple products to millions of users. It's a wonderful combination. You don't have to respect it, but I'm not talking out my ass.
And I would counter, "While S3 is an option worth considering, it shouldn't be your [starting point/default] (select appropriate)." Anyone who understood how the web was designed at a networking level wouldn't be so hasty to centralize it. It is a decision that everyone should make carefully, not with wild abandon like you suggest. "Just throw it in the cloud!" That mentality is ultimately what will make side-channel cryptanalysis (see also: FLUSH+RELOAD) profitable for criminals.
[Ref](https://www.reddit.com/r/PHP/comments/3qi52e/how_to_securely_allow_users_to_upload_files/cwfwgsk), for readers passing by. No point having duplicate threads.
I hope this RFC gets through. It'd make my development life much easier working with web services that have named types for everything and my IDE complaining about me using strings for the types. (After generating PHP code from wsdl2php) 
I have this [list on SO](http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read) bookmarked in my browser. I'm assuming the answer to your question is somewhere in that list :)
&gt; That's why you've heard so much bullshit like "single quotes are faster than double ones", "echo is faster than print" and such. This isn't in and of itself bullshit. What's bullshit is that people talk about it as if changing these habits will have a measurable performance impact. They won't. If the extra opcode for `print` is the bottleneck of your application, *congratulations*. Definitely, 100% agreed that people should profile their code before they start talking about optimizing anything. Sure, your text might be output a nanosecond faster, but your database queries take 3 seconds to complete so you haven't solved anything.
&gt; I don't think this is a real concern. ... &gt; &gt; I had the same concerns when I was thinking about this approach about 3 years ago in the L3-L4 era until I thought harder about it ... &gt; &gt; just trust people to obey the implicit contract and not call methods that might not actually exist on every interface implementation, even though PHP is happy to let you do it. The last part is where we diverge. When there's only one developer, or maybe 2-3 tightly knit developers, you can get away with "trust" and a social enforcement mechanism. But over time, or as more developers are added, it's very easy for that gentlemens' agreement to slip away. I say "don't tempt an honest man", and simply don't make the methods available in the first place. The corollary benefit is a better separation of concerns overall, even in systems that provide better automatic enforcement. &gt; I don't think it makes sense to discredit a design due to PHPs enforcement system AFAICT, neither I nor the OP are "discrediting" Active Record. AR has positive and negative tradeoffs; for some of us, having used it for a long time, the negative tradeoffs weigh heavily. Discussing those in a technical, clinical way is called "accurate observation" not "discrediting." 
Yes, you're right, that's more correct statement. 
Also the video lectures: http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/
Could you link to documentation about that? I've wondered about this a few times but have never a way to do this. Maybe I'm searching for the wrong thing. My use could would require session-based access to a directory (with everything in it). Any idea if something like that would be possible?
I know the Software Design and Principles class at Brigham Young University uses these two books: * [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/dp/B000SEIBB8/ref=r_soa_w_d) * [Refactoring](http://www.amazon.com/Refactoring-Improving-Existing-Addison-Wesley-Technology-ebook/dp/B007WTFWJ6/ref=pd_sim_351_1?ie=UTF8&amp;dpID=51ttgxwzArL&amp;dpSrc=sims&amp;preST=_AC_UL160_SR125%2C160_&amp;refRID=16NPMJQQFHRVCY9VJ67T) by Martin Fowler I enjoyed them and I think they are helpful for improving application architecture. For example, if you notice that you are basically using a design pattern already you can formalize that to make it easier for the next person who comes along. Plus it helps you see where you violate boundaries.
&gt; The Art of Computer Programming by Donald Knuth You got to be kidding. That's the book everybody quote to sound smart but one one actually read it. It's written in the 70s with machine code.
Once you go *short array* you never go back. 
Why not configure your upload directory to block the execution of scripts?
I tried to avoid requiring the user to configure their webserver at all. Reason: Sure, you might get your vhost/htaccess configuration right now, but what happens when you leave the company and someone else decides to migrate to nginx or lighttpd? Unfortunately, if your web application security is needlessly dependent on configuration, rather than convention, it's not a secure design. This is a blog about security engineering. :)
&gt; You need integration tests and end to end tests. Hear hear; a full unit test suite is necessary, but generally not sufficient, especially at the application level.
The best .htaccess file is no .htaccess file. .htaccess is limited to being usable by a single product and, as a rule, it's seen as bad practice to use the old PHP 'routing' of putting all your various .php files under the webroot. A real router that loads the same environment on all requests is much, *much* easier to port to any other arbitrary web-server, and has some other benefits to it. Of course people still do it plenty because Apache/modphp is easy and shared hosts do it, but making a solution that's wholly depending on it is just asking for legacy support problems later. Write systems that can move around readily, save yourself a huge pain later. 
It isn't in any specific project, but if everyone basically moves to the use of the [] delimited array definitions it'd be easy to shit-can that array() construct in the future, which would be a good thing. The fact that 1) array() is needlessly verbose and 2) appears to be a function call, but is not is reason enough to let it die and a silly choice.
"Drop files outside of the webroot. Don't have other LFI/RFI vulnerabilities" -&gt; Easy, effective way to mitigate attacks on file upload features. There are other things you can do on top of this or instead of this. Could you set up a separate vhost to serve static content and never execute scripts? Certainly. That's a cakewalk. &gt; Still, way better to do it up the chain than attempt to lock down scripts in the script itself. Why? I argue that, yes, defense-in-depth is a good thing, but stopping attacks at the application layer is something developers are most likely empowered to do. We always have some measure of control over the code we write, but not always the operating environments it's deployed in. If you were designing a CMS for general use, would you consider it acceptable to drop files into a publicly accessible directory as long as you told the user that they should lock down their webserver configuration? Or would you find it preferable to, instead, ship a solution that is secure by default regardless of where or how it's deployed, within reason. Hardening your webserver configuration is important, but it's often a wholly separate concern from *how the code should be written*.
I rofled so hard. The fact that he does not understand the difference between a decentralized network and a distributed network yet has 20 years of experience is mind-boggling :D 
This is so stupid. I can buy a server instance anywhere and render it into a storage box where nothing is executed. Why Would I need S3? if your argument is that S3 is safer because they do some under super under the hood shit, then you sir are wrong. Any dumb storage box would suffice regardless of where it is hosted. So your point is not about S3, it is about setting the execution permissions in the storage-architecture. You can proably do that on your Comodore 64 ffs. Outsourcing infrastructure has a bigger cost than you think. Rendering a decentralized network into a distributed one is the fucking biggest evil of them all. 
Agree. Need both. EDIT: As a side note - one interesting thing I found in the GOOS book is that their very first test on a new project is actually an end to end test in the sense that they have a test procedure for deploying a blank screen all the way out onto a server and making sure their whole process is sound. They found that if this is put off until the end teams get delayed at the very end before launching and have to work out a lot of infrastructure woes.
Hey there all of you dissing the article by saying doing X (nginx) instead of Y (apache). Give the author some credit, the article is not bad. The topic is to create an ideal .htaccess. Stay on topic, even with comments. If the poster wanted to deal with some alternative in Nginx - then I guess that should be in the article - but its not. Cheers for giving a sample file for .htaccess with a lot of fruity examples. I may have other ways of dealing with some of the examples but its still a collection of valid and useful stuff. Creating a .htaccess is not trivial for a beginner so the examples might be useful for them. If one has access to the webserver one could argue that some parts is better of in the httpd-config, than in a .htaccess. But still, the examples you show are valid no matter where you place them.
Just subscribe to Laracasts, you'll learn a lot there as a PHP developer. They have lessons not specifically tied in to Laravel as well.
Actually, that's just a translation, of relatively outdated article. 
I respectfully disagree with &gt; "... for example Proof of Concepts are usually thrown away once the experience they were designed for are done." I can't count how many times I have created PoCs for client estimates that then get green lighted for projects. Again it comes down to "it depends" ...
Why 'The best .htaccess file is no .htaccess file' is because of performance as Apache httpd has to read .htaccess every request. .htaccess allow you to set httpd configuration options, usefull in case where you do not have access to your vhost configuration file 'the old PHP routing'? rewrite rules? you could do the same in nginx using nginx syntax `rewrite (.*) http://www.example.org$1;` and shoot yourself in the leg just like with httpd Author post should've been titled "Trying to create an ideal Apache httpd host configuration" 
The article has little to do with routing beyond the essential rule of directing all your request to index.php which is then going bootstrap everything, including your PHP based router. Its about web server configuration for things like compression, cache, filetype handling, etc; things you need to configure in a specific way on any http server.
Jesus freaking christ dude. I sometimes use Amazon, sometimes use DigitalOcean, Cloudinary or a bunch of other ones. I am not like you. I structure my services depending on WHAT IS NEEDED, instead of WHAT IS COOL AND HIP! *In general*, S3 is SHIT for images. S3 is a dumb file bucket. It offers you nothing in terms of images which is a SPECIALIZED vertical. *In general*, you should use **Cloudinary** or some other specialized service provider. *In general*, your recommendation is SHIT. And most importantly, *In general*, try having it as a requirement to pre-proess the images before storage and lets see how much S3 offers you in terms of security when execution is a MUST DO on the server side. What a load of bullcrap. You have never worked with a real image-related application. I can tell from your lack of experience. &gt; So, the biblical truth is to upload files to your local server? Here, I will give you this [list](https://i.imgur.com/AvTNimG.png). One of those fit you perfectly, can you guess which one it is? The biblical truth is, it DEPENDS. It ALWAYS depends on your spec. ALWAYS! &gt; So, I seriously hope you get huge benefits from your home spun infrastructure and 100s of cloud alternatives. Sigh... I said one of those fit you perfectly. Turns out, almost all of them do!
I've been needing some of these!
Check out the Carbon package! And also Moment.js if you need stuff in JavaScript. 
Yeah Carbon's pretty awesome
Not being able to speak fluently is very far from "can't read". Reading is far simpler than writing and speaking
But even then .htaccess is worse than using your Apache config files.
My 2 cents: depends on your project and the spec. If scalability and req/sec is of concern you might want to go with something more lightweight/optimize-able. Otherwise, stick to what you know or would make your life easier.
Actually, I'm pretty sure Paul, himself, made a tweet about how adopting AR signals the death of your app or something. So it's not hyperbole. Facades are like sharp objects. Incredibly convenient, but potentially dangerous if you're not careful. If you have a dozen different facades in a class, then you're potentially in trouble. If you're using a View or Request facade in a controller, you're fine. It all depends...
I'm not, and have never suggested that you throw facades around willy-nilly. To your previous points, I say "scary" because people throw around that word "maintainability" far too often. "In five years, you'll regret this decision." They're scare tactics. You can't measure something like that. In fact, whether a product survives five years has very, very little to do with the choice of AR or DM. 
Looks nice, will give it a try later today. Congrats on the new lib btw!
Yeah. I am thinking about the future. Yii 1 is ending its end of life, and we'll have to continue pretty aggressive development on the app. 
To confirm, you do not use Laravel's View facade or function. Is that correct? I don't inject the view factory because it benefits me in no possible way. Developer workflow is important.
&gt; Nothing more permanent than a temporary solution
Not a hater, but my reccomendation is to try to build a functioning project, frameworkless. You'll gain a massive understanding of how things work behind the scenes. Feel free to use composer and pull in libraries that you need, since after all that's what you'll be doing in the real world. Start with a small idea and keep growing on it. Eg : make a project for people who want to upload images of their dogs. Grow on it : - allow users to favourite other dogs - gamify it : have badges for people who use the site (most comments, most uploads, most likes? blabla) - call google's locations/weather APIs in so the users can see what the conditions are like at the local dog park. - etc Learning core concepts will help you understand frameworks better, simply due to the "Oh, I've done that, but a little different" connection you make when doing it in said frameworks.
Personally I do not use Laravel's view facade or a function. I don't use the View factory either, I only use Laravel to build APIs to communicate with SPA front ends these days, and they tend to live as separate repositories, deployed independently of an API - but to your point, I do not use the global redirect(), event() etc functions, or their facade equivalents either. I used to. I have found since moving away from this approach the code has become far more understandable. Complexity has been revealed and has become far easier to deal with (where dealing with it is accepting it, or refactoring it as the case may be). My argument remains, still unchallenged: 1. It is just as easy to inject as it is to use the other things 2. Injecting has clear benefits with regards to revealed complexity, clear intent, and code quality heuristics Therefore why would I chose to use the other things? **Edit** and as a followup, just to head this off - I don't think that if you do use global functions or facades that your app is going to die, that you are a horrible person or that it's just the worst thing. However I would continue to recommend injection _over_ facades or global functions precisely because it is equally simple to use and has additional tangible benefits over the alternatives.
The issue turned out to be a bug in a file in my codebase, route.php, that was failing to serve the assets I had created. I tribute this to not knowing what the hell I am doing in PHP at this point. In due time. Thanks for all the help!
Ill just leave this here https://github.com/h5bp/server-configs-apache/blob/master/dist/.htaccess
Check this out: http://symfony.com/doc/current/create_framework/index.html
Yeah frameworkless is probably a good idea. I've actually been working frameworkless for a few years before I decided to pick up Laravel, but you can imagine how terrible my code was. I know a lot more about coding style (all the PSR's) and best practices now than I used to, but I think trying to build a small MVC-like app using best practices would be a neat idea. 
Maybe you can search for "hierarchical comment tree" or "self relationship model" basically, it can be done using single comments table, where it contain something like id | parent_id | post_id | user_id | comment | timestamp where the parent_id refer to other record on the same comment table. comment with parent_id = 0 or null means that comment is directed to the post, not comment of comment
Feels really weird to see the Room 11 crowd split up like that.
Nothing says Humanism quite like echo Number::fromRoman("MMMCMXCIX"); // 3999
Because humans don't have ids. 
You could search for "hierarchical data" -- a good place to start would be this presentation by Bill Karwin on the subject: http://www.slideshare.net/billkarwin/models-for-hierarchical-data
Yii has always been built to be fast. Just because a framework is minimalistic doesn't mean it's fast, and just because a framework is larger doesn't mean it's bloated and slow. It all depends on how it handles it's resources and how/if/when they are loaded.
Data driven design at its finest. How-ever you believe your application should be built to suit your needs is up to you. I would have a Article model with a method "createReply" and that would return a new comment model with reference to the Article, a comment model would also have a "createReply" method which would return a new comment with reference to the parent comment. These methods would require a reference to the identity maybe user_id, comment but think about it a bit more. Notice how I didn't say the time? The model it self will add the time and status (if your requirements include status) to the model and make sure it is immutable. Don't be stuck with this guys database table, think about persistence last! - You could use MongoDB to store all of this in a nice single document. - PostgreSQL you could have the article table with a JSON define schema comments field. (Also available in latest MySQL) - Use a relational schema which is what this guy is trying to use.
&gt; Don't be stuck with this guys database table that is why I am saying 'something like...', and not 'exactly like...'
Again, that's probably the matter with understanding the term 'expert' or 'REALLY good at programming'. To me, to be REALLY good, one have to be able to know English fluently, to be able to learn not only from tutorials that were translated to their native language a decade ago, but also from recent books, articles, blog posts and slides. And one who is really good with learning a programming language, should be able to learn a foreign language as well. I know no exceptions from this rule. But I know too much self-proclaimed "experts" who only pretend to be one and their code doesn't worth even pennies they ask.
&gt; Are there any resources or books you recommend? Angulars home page recommends course at [Code School](http://angular.codeschool.com/), but I liked [one](https://www.codecademy.com/learn/learn-angularjs) at Code Academy much more. Both are free. **edit:** formatting quote.
$_GET['login-pass'] run!
Your post somehow makes programming indivisible from English language. There are lots of devs in russia who study from Russian books and Russian manuals (a lot of stuff is transated to that). Personally I know about 4 other languages other than English with varying levels of proficiency, but could read a manual in any of them without sounding very fluent face to face.
Yeah, people seemed to think I was bitter, and it was really just that I was doing far too much stuff. I need to write a follow-up post at some point so people looking at my blog don't think I'm still gone. Also, I probably shouldn't have quit the way I did. A graceful hand-over would've been far more sensible, but well, that's how things ended up happening.
Yes. *Expert* programming is indeed indivisible from English language. English is the *Lingua franca* of the modern times, just like Latin was couple centuries ago. Without the Latin language one was very limited with their education. Same goes for English in modern times. Especially in such a rapidly evolving area as web-development.
So what you're saying is that a person cannot be a good developer if they are not fluent in English? you know that there are Linux kernel devs like that?
Is there a list of available filters somewhere ? I did not see any
It mentions that the filters are public methods of [these classes](https://github.com/PHPixie/Validate/tree/master/src/PHPixie/Validate/Filters/Registry/Type)
Writing on the mailing list in English !== being able to speak freely. It really seems to me you've never learned a foreign language. Its not a boolean value to know one, there are varying levels. And toget decent clients you have to pass their spoken interviews, and on top of that you have to have good people skills. That is why most outsourcing companies have a PM that acts as a contact point with the client, is fluent in English and has excellent people skills. Its a separate job
Some corporations beg to differ...
don't let yourself get burned out again, please. your RFCs were some of the things i was looking forward to being implemented. can you also revive the function references rfc again?
not wrong - thats how it came, I've since changed all that. 
Well not everything is json, this works with forms too. And using callbacks and rule nesting you can even achieve logic like some field being able to be either a document OR an array etc. So its a bit more flexible than a rigid schema
I have voted YES for this. I'm excited for this addition to help clean up people's messy code. I'm also very happy that "return;" i still possible with void functions, it was the first thing I thought of that'd make this addition bad. Vive la PHP7!
WOO 2 weeks guys and gals.
Not just an idea, i experienced developing app with angularjs and symfony. angularjs act as frontend that calling resource on backend API symfony act as backend API with REST format.
[removed]
The others have answered your question. But you can always look at reddit source code! https://github.com/reddit/reddit
Do you not agree that when trying to access the return value of a void function, an E_NOTICE should be thrown? I mean... you can't `return null`, but `$a = myVoidFunction()` still assigns `null` to `$a` silently. When doing `$a = $b;` and `$b` being undefined, an E_NOTICE is thrown. Wouldn't it be a similar case? There is a lot of discussion going on to figure if PHP should allow use of return value on a void function, which is why a lot of people are voting `no`. There is no need to forbid use of the return value, just throw an E_NOTICE to warn the developer he's trying to access a value that doesn't exist, like we already do for variables. It wouldn't break away from PHP's current behaviour (assigning null when the return value is absent) without doing it silently.
&gt; don't let yourself get burned out again, please. […] &gt; can you also revive the functionreferences rfc again? Heh :p 
I've said something similar before, that the RFCs that come from people work work at Zend are very likely to have most of those people vote for them. This is natural and not nefarious as for any group of people: * People who talk to each other frequently are more likely to be able convince each other of something either being a good idea, or conversely that actually it's a bad idea. The discussions on internals just aren't that persuading a lot of the time as the discussions are short and not always particularly rational. * There is a correlation selection effect going on. i.e. If someone does decide to push ahead with an RFC that they've thought up, it's usually due to most of the people in the group being approving of it. i.e. if someone comes up with an idea, and a significant people who they talk to regularly tell them it's a bad idea, then they're unlikely to distribute it wider. * People in a group usually encounter the same sort of problems, and so think the same sort of solutions are the best solutions. Other people might encounter radically different problems in their day to day programming, and so for them a different set of solutions is the best set of solutions. An example of this occurring is in the 'name parameters' and 'default parameters' RFCs. I can totally understand why for some people those solutions would be awesome....but for other people those solutions just are horribly inappropriate. And while I'm here......this RFC would be at about 90% approval if it was suggesting adding 'null' as the return type rather than void as null: * accurately describes what is happening in the engine, instead of being an instant source of confusion. * is compatible with the proposed 'nullable return types' and/or 'union types', void isn't. * avoids adding a new pseudo-type just for a single use case. 
There's a million of them. What were you looking for exactly? Remember, Bootstrap and jQuery's primary focus is client-facing. PHP is server-side code, and because of that the frameworks that you'll see for PHP are wildly different than something like Bootstrap or jQuery.
That is absolutely true. But in my experiences, I am still yet to see a huge framework that is fast. Granted I haven't tried Yii so I have no idea how well it works so it might be awesome! :P
Since they are just adding more of this wier stuff, like a `BaseException` class a a parent for `Exception`, don't count om them fixing the old stuff... The backwards compatibility argument is BS as well, since it's a major release. This was the perfect time to get it together... seems like they do not care.
Well, it's a personal preference, but there always a trade-off, and not speed trumps all (e.g. development time, maintainability, etc). Not many web applications written in assembly. :p For your interest though, you might want to have a look at [Phalcon](https://phalconphp.com/), which is written in C. P.S. been very happy with Yii and Yii2
3000 + 900 + 90 + 9 MMM + CM + XC + IX
I don't want to put any words in Anthony's mouth. But I feel like I share his point of view. IMO it all comes down to this: &gt; Most business problems can in fact be solved using the same architecture. That doesn't mean that they should be solved with the same one though If I understood Anthony correctly, he, just like Rasmus, wants the community to be less fixated on general purpose frameworks and instead focus more on problem/domain specific tools/frameworks (see https://www.youtube.com/watch?v=anr7DQnMMs0#t=31m40s). The idea here is that while you can solve a problem given a standardized architecture, it is not always the best way to do things and I can give plenty of examples of that. Can most problems be solved using a standard model? sure. Should they? perhaps not! What I found to be funny was the first comment on that post: &gt; The very act of coding, whether from scratch or using libraries, is the act of creating a framework. I've seen developers, myself included, try to write applications without a framework, and what do we get? A framework--only it's specific to that application. No application exists that hasn't defined a structure for the code it is comprised of. There is no such thing as a non-framework. Patterns have to find their way into code, whether it is code you write or code you reuse. [...] It's hypocrisy. As I see it, the community at large seems to mix up horizontal assumptions with vertical ones. A good example of that would be: if your business requirements are constantly aggressively changing, then the last thing you want is to tie yourself to a large and not-so-modular framework. Using such a "general purpose framework" (such as Laravel or Zend or whathaveyou) CAN work as Anthony points out. However, designing a domain specific solution for your business's vertical **might** be a better option. Just my 2 cents!
For anyone hoping to use this on Windows with MSSQL (unlikely, but there are those of us who have no choice) - Microsoft is not updating their SQL SRV driver until January.
The main idea is than symfony and angularjs application should be independent application, which will interact with each other via HTTP API. The things like "speed up bootstrapping" of angularjs by inlining some mandatory data into html page or something like is not so useful. Angular2 will be released in a few months and it will support server-side rendering.
Ooo, touché. Very good points.
And then we're going to make things complicated because of dynamic function dispatching. When we throw a notice there, it'd mean that we can't use void functions everywhere where the return type is forwarded (even if it's not going to be actually used for any meaningful action). This is an additional reason to use `null`, I think, as we're unable to really enforce void without breaking other things. Void really yells for semantic enforcement, which is impossible due to PHPs dynamic nature. After all, we should just be clear and tell our caller what we return, `null`, and nothing else. Because that's what the caller will get. Not "nothing"/void. There's no "nothing" in PHP.
When can we expect most hosting companies to have PHP 7 availability after release? I know cheaper hosts == longer waiting usually, but I haven't been a developer during a major version update.
What difference does it make exactly? You want your existing exception handler to catch things it didn't used to catch breaking backwards compatiblity for the sake of your sanity?
I think he's overestimating the importance of frameworks and underestimating the development efforts going into libraries. &gt;Composer is a decent step forward (in this respect), but finding and vetting libraries with it is no easy task either. With so much effort going into framework development, I wonder what will happen to the individual libraries that are so desperately needed. At least the way I see it, there's a very high pressure to write libraries framework-agnostic and to decouple the components of frameworks and make them framework-agnostic, too. So many individual developers and projects are mixing and matching as they see fit. As it should be. I would even go as far as saying frameworks played a big role in promoting the use and development of libraries (apart from composer itself).
That is his style I think.
Breaking backwards compatibility is not an issue since it's a major release. I don't know why they keep using this argument. If you're just gonna go ahead and run your old code on a new major release without checking what's changed, you're gonna have a bad time anyway.... And if you are already using `catch (Exception $e)` then yeah, you probably already want to catch *anything* going wrong... In every language `Exception` is the root class. It adds to the learning curve, it's going to cause confusion and it's not aesthetically pleasing to catch `BaseException`. I know there's no functional problem with it. It's just not a good choice imo. And adding to the pile of "weird things in PHP"
So, are php5 extensions at all compatible with php7?
Well that sounds like a good idea, could you please create a issue on github with feature request? 
The most common ones are already compatible, and are compiled on `ondrej/php-7.0` repository. Some aren't and won't be (`ext-stats` being one of them, by the looks of it).
However, if you use pdo_dblib, you're good to go. Just run your webserver using docker or whatever.
I use [php5-gdal](https://github.com/geonef/php5-gdal) and compile it from source. Any ideas on that one? Or how could I go about testing it? I've not yet set up a php7 instance 
yes, my whole reply can be summarized with "it should break backwards compatibility for convention with other languages sake".....
The resulting variable could be undefined/unset, instead of null. More logical. "$a = void_function();echo $a;" would throw an E_NOTICE, saying that $a doesn't exist (void don't return anything, therefore $a can't exist. "null" will make it exists, and it would make "void" behave like "?string", if you see what I mean). I guess this can be changed in a future major version, and implementing this "void" type version will make the code more readable. So I would vote "+1" if I could, even if I'm not completely satisfied. EDIT : I would add something.There has been a lot of dramas around "null" in the discussions for "exists()". By making a "void" function assign a "null" value to a variable, it implies that "void" === "null". That's not the case at all. "void" means "nothing" on a system level, and it is not a value, while "null" means "nothing" in user-land, and it is a value. Some sources will return "null". Like databases and such. It is considered as a value by PHP and its extensions. "void" is the absence of any value, null included. Not null, but unassigned/undefined. It will cause confusion if there aren't any kind of error or notice triggered. At least when strict_mode=1 is enabled.
From our [documentation](http://php.net/manual/en/language.types.null.php): &gt; The special NULL value represents a variable with no value. NULL is the only possible value of type null. `null` is a type with a single value, which is also called `null`.
php5-gdal is not compatible with PHP7. I'm not sure if it will ever be, this is not a core extension nor a very common one. You'd have to check with the people in charge of it. It hasn't been updated in over 2 years, so I guess this project was abandoned.
Yes, true 64-bit goodness.
and with PHP7 on the way. Zooooooooooom.
about damn time
General practice for LDAP is to have a built-in user that you connect with to ensure you always have a consistent connection to the LDAP service. From there, you can then attempt to bind using the credentials requested. I would assume either the LDAP options are incorrect for your ldap instance or that binding is failing or being limited by attempting to bind so many times in a short period of time. Our [connection class](https://gist.github.com/solocommand/a1913021dad9c5eee6ee), which is based on [LdapBundle](https://packagist.org/packages/fr3d/ldap-bundle)
PhpStorm. I still use Sublime when I want simple and fast text editor capabilities, but PhpStorm is my primary editor when writing code.
I probably use more machine generated code than the average PHP programmer. Say you've got two functions: function foo() : Foo {..} function bar() : ____ {...} And you want to combine them through inside some code that is automatically generated from the two functions: function fooOrBar($x) : Foo|____ { if ($x) { return foo(); } else { return bar(); } } In the place of the blank the bar function actually has as a return type. int works fine......float works fine.....any class works fine. Null would work fine as a function declaring "I am either going to return an instance of this class, or null" is fine. But void fails because it's not going to be part of the union type RFC. Yeah, you could work around it and people will, but it's still a cognitive gap, that you having to convert from void to null while you're thinking about the code. 
[AppDynamics](http://www.appdynamics.com/) is the only other one I know of, but I think their pricing structure is similar. We're a NR shop now, running against 6 servers; we run on an additional 20-30 with just the free version.
Of course pdo_dblib is available for PHP7.0. It's even compiled in ondrej's repository. Obviously, running your webserver through docker is not optimal, but if you really need to run php 7 with mssql, you can use it in your production env until microsoft releases PDO_SQLSRV for windows.