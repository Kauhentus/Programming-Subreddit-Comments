I use both. Different pros &amp; cons.
&gt; Without bothering to check, it's probably possible to use Drupal in exactly the same way (by using index.php in the URL rather than URL rewriting) - it's just not considered desirable by the vast majority. True, until the just released Drupal 8. "Unfriendly" URLs are not an option with D8. Rewrite is required. I think Drupal (Dries or whoever did this first) was quite smart with the URLs. Even with unfriendly URLs in D7 or earlier, it was all in one query string parameter. The URL would be something like index.php/?q=node/1234 which I guess is more of a standard type URL, still relatively "clean" without rewriting and works everywhere, even if ApachePathInfo is off. AFAIK, Drupal never used the index.php/node/1234 format.
Anyone got a link to the unedited NameCheap post? I always liked namecheap but I won't be supporting FUD from the old guard.
There's a contextual bias there, but yeah, no. You're wrong and that statement is generally true. 
It's generally true? It has to mean something for it to be true or false. Stated like this, it's not even falsifiable, as it doesn't mean anything specific. Why would Java scale "harder" and in what context? And scale *what* exactly? You're using "scale" like a buzzword and not explaining what stands behind an awfully generic statement.
&gt; I also believe that you can refresh opcache with refresh doesn't affect shared memory, or at least there is some problems with it. It just restarts free workers to re-apply configurations. &gt; or the equivalent Yep, you can reset all opcaches with [opcache_reset](http://php.net/manual/en/function.opcache-reset.php) function call. But it works only if you call it via target SAPI (FPM in our case).
As with many things, I think it depends what you do with it. For creating a simple blog site, WordPress is in my opinion more straight forward, as you can simply set up a site, download a theme, install some plugins and edit the source files – straight from the administration panel. While they can do the same things, Drupal includes more things out of the box like caching and content types which you can only achieve in WP using plugins. Drupal is less accessible, and hence more complex, since it is geared towards like sites like newspapers, and a lot of the modules, themes and documentation available reflects that. Drupal's learning curve is in my opinion very steep. You need to do a lot of reading to begin really creating your own modules and themes, while with WP you can easily get an idea of how things are done by looking in the theme file, but WP's complexity goes up the more you do that because of the relics of older WP versions: the non-object oriented structure and the "post loop" can make for some ugly spaghetti code, where in Drupal you'll have a better chance of organizing more things in modules or classes.
Debunk myths with stats. Best talks are the talks that do just that!
I picked Drupal as my first choice, because it was supposed to be the most powerful CMS. And it really is. While the "Drupal is complex/complicated" saying is true, so is "If you can imagine it, you can build it". 
I had the idea to create a porn language like: some loops with keyword 'fucking' or sime classes with porn stars. Seriously, i work with Ruby now and work as PHP and Java freelancer.
&gt; like pthreads, pfork, etc. event loop on amphp or reactphp, php-pm and other approaches. pfork and pthreads covers more specific use-cases. &gt; to use or not to use template engines like twig. By not using template engines with autoescape you increases risks of xss vulnerability &gt; MVC patterns like autoloading, lazyload wat? Maybe something like "[Evolution of MVC](http://www.doria.fi/bitstream/handle/10024/92156/Model-View-Controller%20architectural%20pattern%20and%20its%20evolution%20in%20graphical%20user%20interface%20frameworks.pdf?sequence=2)"? &gt; Approach taken by HHVM and PHP7 - pros and cons. HHVM works terrible with postgresql.
I used to be a big fan of namecheap, but they've been pissing me off lately... * retarded new empty-whitespace-everywhere design completely ruined what used to be a usable website and control panel * have found multiple bugs in their control panel, I reported them, only to be ignored * listing on the marketplace rarely works * charging for whois privacy on renewals * shitty customer support, a lot of my emails are just ignored Moved everything over to [namesilo](http://www.namesilo.com/?rid=6397278qz) recently, they're shitloads better on all counts, [cheaper](http://www.namesilo.com/pricing.php?rid=6397278qz) and have more features. Yeah it's an old skool looking design, but who cares, it's way more usable. If you're new to namesilo you can get $1 off your first domain with the coupon code: s (yeah it's just the letter s)
I am curious, is Drupal considered superior to other frameworks (like laravel)? Where does Drupal sit in the grand scheme of php frameworks out there? I have worked in Rails and now laravel but have only looked at Drupal in passing. 
I'm on the side of always having some general 'and here are my sources' whether or not you have an audience that knows you. Even if you are correct in assuming that your audience knows your sources or basic facts, the truth is that your audience could and should be larger, if your message was more accessible. I face this a lot when trying to pursue my interests in politics, environmentalism, physics and computer science: most authors only write for the tiny percentage of people who have read the same articles, and often work on top of unchallenged beliefs and un-analyzed claims. It takes work and experience, but I will always recommend more information rather than less, if the subject matter is supposed to be non-fiction. It doesn't mean the main text needs to be littered with expansions, parentheses and footnotes, but the margins of the article can and should point to all the main, most reliable sources. Hypertext makes this even more natural, pointing to sources via the words being cited or paraphrased. 
Drupal 8 is built on top of Symfony2 components. From what I understand, Laravel is built on Symfony as well but it is a pure framework. Drupal is more like a CMF in that respect. It gives you the means to solve practically any issue a project could have with a large community to boot.
I've seen the similarities in the dependencies within composer (in laravel) but I am so used to pure MVC platforms...it's almost like a step back to include everything and not include the packages you need. Interesting, i'll have to take a look at Drupal again. Thanks!
I'm not being very concise or coherent. We can all say whatever we want, and we don't technically owe anything to anyone. But people should at least be conscious of the difference between throwing out opinions which might be based on random, possibly false information, and forming opinions based on facts we can all share. In short, every time you write a 'mere blog', you should choose whether or not you want your thing to just be an opinion, you know, the thing everybody has many of, or if you want to add to the overall conversation by helping people track down the original facts of an issue, and pointing to those while making your personal observations. 
I haven't used phpmyadmin for about 6 years luckily, really don't miss it. If you want something free, fast, lightweight etc, check out http://www.heidisql.com/
Thanks. Yeh basically a different post isn't it.
You are thining in the wrong direction. Nobody wants to listen to generic talks with content that you can easily google. Talk abut your own experiences, however small, that is actually interesting. Talk about problems you faced etc.
A modern framework like Laravel is miles better than Cake 2, and you've not even tried Cake 3. So that means you're recommending OP use ancient technology, or something you've not even tried yet? OP, use Laravel or Symfony over Cake 2. I've not used Cake 3 so I can't say anything about it one or the other. But I can say unless Cake 3 changed almost every line of code since Cake 2, I would be hesitant to recommend it based on my experience with Cake 2. My personal recommendation is Laravel since it's the easiest framework to get very proficient. Simple, straight-forward, logically organized documentation, and a simple, straight-forward, logically designed API.
Don't get me wrong, what little I've played around with Laravel, I thought was great. And I know Cake 3 is really good, much closer to Larevel. But I'm also not going to recommend something I haven't personally used. I use Cake 2.7.* every day and so I know how well it works. Yes, there is a newer, most likely better version. But Cake 2 isn't exactly ancient. And they still are maintaining the 2.7 branch, so I still believe it's a solid suggestion. All that said, OP, if you haven't ever used cake, there's no reason not to start on version 3, which should be much faster and more streamlined. 
&gt; A newbie who hasn't programmed before would have to know the following concepts to completely understand this: They don't need to know any of this, they can just take that snippet and learn "code goes here". Do you feel the need to learn every single button and function on a car's dashboard before you can drive? No, you just spot the pedals and steering wheel, and that's mostly what you need. That said you'll need to learn classes, strings, arrays, etc. in both languages if you want to do anything useful in them. And if we have to be honest to both languages, Java is a simpler language than PHP is these days. As in, literally, Java has less concepts, primitives and keywords than PHP has. It's a brutally simple language. 
&gt; Get an account at drupalize.me Did you edit that in?
Yeah, thats actually what got me on discord lol
Sorry, I mistyped, edited to reflect that rewrite rules are server level unlike URI/L standards. The RFC section you linked to basically says not to do this. &gt; The server MAY impose restrictions and limitations on what values it permits for PATH_INFO, and MAY reject the request with an error if it encounters any values considered objectionable. That MAY include any requests that would result in an encoded "/" being decoded into PATH_INFO, as this might represent a loss of information to the script. The fact that it goes out of the way to indicate there's no standard behavior here is a strong sign that it's unintended and will likely eventually change.
Just saying, despite a possibly misleading post, I'm still definitely sticking with Namecheap when it comes to domains (or at least definitely won't ever use GoDaddy). 
No, it's not superior at all. What people don't understand is that Drupal, Wordpress, and Joomla aren't general purpose frameworks. They're not even frameworks at all. They're *applications* (CMSs) built on proprietary "frameworks". This means that they come with all the assumptions and rigidity you'd expect a fully pre-built application that solves a specific problem, to come with. If your use-case can't be solved by the application directly, then you'll need to dig through a jungle of application abstraction and framework abstraction. And arguably, the underlying "frameworks" are also not very well decoupled from the application they were built to power, so they have their own assumptions that might not fit your use case. If you want to build an application in a framework that has made minimal assumptions about how it should be used, and what types of applications should be built on it, then use a framework like Laravel or Symfony. Otherwise, be prepared to fight numerous layers of abstractions to customize a pre-existing application to your needs.
Discord be awesome! :D
If you're completely new to Drupal, there's a free Drupal 8 Beginner class on YouTube with over 60 videos: https://www.youtube.com/playlist?list=PLtaXuX0nEZk9MKY_ClWcPkGtOEGyLTyCO Comes from http://OSTraining.com and http://Acquia.com 
In what way are they limiting? I am fine with managing server when needed, its just not scalable. If I have 10 clients now each with at least 1 VPS, I will be spending at least an hour a week just to run apt-get. 
Before you agree to new projects get in writing the scope, and the cost per hour if the scope changes. People plan a lot better when they know changes cost them, rather than cost you.
Have you considered the Rocketeer application for simple deployments? https://github.com/rocketeers/rocketeer
Drupal, WordPress and Joomla are "content" frameworks. Laravel, Symfony and Zend Frameworks are "application" frameworks. I.e. Drupal, WordPress and Joomla are of a higher level of abstraction than frameworks such as Laravel, Symfony and Zend Framework. To build something like Drupal you could use Symfony, which is exactly what they are currently doing. 
How do you guys write api's in php?. I mean are you using some framework or some structure ?. I used to write api's in pure php with a particular structure that I found from 9lessons. Just want to know if I am doing it right. It would be great if you could provide a skeleton of your api or maybe a tutorial link.
Go with wordpress there many plugins which will help you easily made this :) 
PHP is the language which is build for decades and it is developing day by day keep the need of its users in mind.
We use Laravel / Lumen. They provide an expressive syntax and a lot of features for larger applications.
How to update XAMPP to php 7 ? 
I was wondering who you guys follow in the php world, that I should also follow, like php "it" people. Basically who are the MVPs of PHP? 
You posted many links in your other comment. mysql_query() (and PHP's mysql driver in general) do not support multiple queries in a single query() call for security reasons: It eliminates one of the SQL injection attack vectors. In other words: YOU CAN'T DO IT. –
Right, so a testing framework that has pretty much no popularity outside of Drupal usage. That's my point.
Well &gt;5 years ago when Drupal 7 was released, few testing frameworks really had much popularity. Drupal 8 now uses Mink and PHPUnit
Cool. In the last 5 years simple PHP has evolved immensely and we don't need to rely on frameworks nearly as much to do things. I just don't see the value proposition of Drupal at all anymore.
I mostly just follow local PHP people and people whose talks I've seen. Here's a good place to start if you are looking abroad (i'm sure someone's made a list on twitter) http://people.php.net/ http://www.php-fig.org/members/
Oh. You couldn't have made a bigger mistake. `DROP TABLE` case is just an example, widely used for it's vividness and for it doesn't require much knowledge in SQL to be understood. Yet, unfortunately, SQL injections aren't limited to that silly case.
Sure. And every programmer MUST also know at least one another language. Moreover, you should briefly know as much as you can. I use C++, Java, Python and PHP. Sometimes I also write some JS-code. I also learned LISP, Haskell, C# but just dont use them. In my oppinion having skill in multiple languages can help you with: 1. Be sure that you think abstract enough 2. Use some ideas from other languages 3. Know things inside your language better For example, 5 years ago I learned Java. Then I started to code PHP and OOP there was just awful. Java helped me to understand OOP and do it RIGHT even in PHP. same time millions of PHP users didn't.
Why does this same BS article keep getting posted? 
Tha value is mostly that it is not aimed at developers, but more towards site builders. You can create a lot of functionality trough the UI with little to none programming experience. If you desire to do a lot yourself in code, skip drupal and use something like Symfony CMF of other more developer orientated systems. 
Look, colshrapnel, give me an example where mysql_real_escape_string would be unsafe and prepared statements would be safe. Just one example. Really curious if you can find one. You seem to have researched this much more than me. And yes, I did read your article, and I could not see an example that actually breaks mysql_real_escape_string. 
Nope. Look, the topic is not multiple statements but SQL injections. And I am saying that one could have an SQL injection without multiple statements allowed. 
Actually, you are right, with mysql_real_escape_string one must always enclose the result in quotes, (or cast to int or something) Which adds one more way to mess it up! Prepared statements are always safer!
How would you implement some kind of an API which is protected by login? I don't really like the idea of /user/login and storing session, but so far it seems like the only reasonable idea.
I would recommend using OAuth if you're exposing a public API.
But I would need to pass the token in the URL of the GET requests, wouldn't I? :/ Which is someone I don't want to.
I would say it depends more on the features you want to use than speed. Yes, it's often twice as fast, but its feature matter even more to me. Note that there's no PHP7 with HHVM. HHVM is an own runtime and doesn't support the same features as PHP7 currently.
Also unless I'm missing something, let's encrypt does do domain validation. You set it up on the server by running commands that contact the CA directly. Seems like an excellent way to do it actually.
I apologize for wasting your time here too. MY ego got involved. Hope someone benefits from this. Hope. :)
Yes, that's how it works.
[removed]
Even worse, I *have* demonstrated it on several occasions, and they see the benefits, but still they consider it too much hassle, and they keep var_dumping things... 
I could recommend reading a book or two about project management in IT. My favorite would be Facts and fallacies of Software Engineering, http://www.amazon.com/Facts-Fallacies-Software-Engineering-Robert/dp/0321117425. He discusses this problem, and other problems to why deadlines are blown in IT so often. (With some google-fuh, so can find a PDF of this book).
&gt; "scalar objects" would definitely be nice Why, really? What's the benefit? OOP-style programming?
Still on the front page: https://www.reddit.com/r/PHP/comments/3tld7j/any_book_recommendations_to_learn_php/ Also: https://www.reddit.com/r/PHP/search?q=book&amp;restrict_sr=on&amp;sort=relevance&amp;t=all
Well, personally, I would like them for two reasons: 1) Cleanup of API and consistent API for different stuff in the process (because ie. the string functions are pretty inconsistent, half of them is `strwhatever` and half is `str_whatever`, something takes $needle as first argument and something takes $haystack as first argument, etc etc etc) 2) foo(bar(xyz($str)) isn't as readable as $str-&gt;xyz()-&gt;bar()-&gt;foo() (yes I know this is subjective)
Yes, performance was the only reason right now.
How difficult is it to start learning Laravel for a PHP beginner? I use PHP for some basic things like sending mandrill mails, validating things, and making wordpress loops, but I want to start getting a little more in depth. I also worry about security basics so I was wondering if Laravel would be a good fit for me right now?
Second this. The Laravel Fundamentals videos are actually free on Laracasts and pretty helpful.
What?
I know this may go against your design, but if you made your functions static members of a class then you would solve your autoloading issue: collection_pluck_by_method($objects, 'getId'); Becomes: Collection::pluck_by_method($objects, 'getId');
I usually put them in inittab, execution time limit 0, and have the script die() on a fixed schedule (like 10 min to 1 day, depending on the job)
ReactPHP i think is pretty mature now.
`collection_pluck_by_method` sounds like something that would be better as a function you could compose functionally with `array_map` etc., e.g.: $ids = array_map(method_caller('getId'), $objects);
This is looking good. I've been developing something similar for collections myself, for my internal framework. One way to break up class code is to logically put groups of methods into traits. They may be reused more than you expect.
here you go http://followphpdevs.com
step 1: delete xampp step 2: install virtual box step 3: install vagrant step 4: go to puphpet.com step 5: build box step 6: read instructions step 7: have fun. 
This shows that its about time to drop PHP 5.3 support, at least in recent future. If your script still supports PHP 5.2 or below, shame on you. 
you mean ASCII emojis? 
Please update this post-- -Change this chunk Note: I know that "use another language" might be the best way, but I don't want to add another language to the mix if I don't have to. -To this Note: I know tried and true conventions are available and probably already installed to boot-- it is not my technology preventing me from using a better tool. I don't want to be bothered with learning or growing to use a better tool for the job. Maybe later, but today just tell me how to use this hammer to pound this screw in. Use cron to call your scraping script using php cli -- I will sometimes use MySQL as the 'pipe' from system code to webserver code. My CLI scripts store their work in MySQL. The webserver builds the page or makes processing decisions with the database data. Then in the future when you are open to learning the way of 'the screwdriver' it won't be so bad to swap out the CLI PHP and your webserver code can more or less stay the same. 
I want to test how my website handles downtime of my payment provider. I use their provided API but I'm not really sure what happens if they go down. Does my entire site crash or do we provide a proper error message? Their API has a call `performHttpCall` which uses curl. Can I just add a `sleep()` in there to "fake" downtime on their end? Or is this not what would happen in a "real" situation?
I think I see a bug in `collection_first_n`: /** * @param array|Traversable $collection * @param int $n First n elements of array * * @return array */ function collection_first_n($collection, $n = 1) { return array_slice($collection, 0, $n); } `\array_slice` doesn't work on `\Traversable`. I don't think there is an `array_slice` in the `Funct\CodeBlocks` namespace, so I think this is likely a bug.
No Unicode emojis. Like 😀 and 💩 for example.
could you please submit an issue on github? :)
I don't understand who went through the trouble to update to 5.4 and 5.5 but then didn't go to 5.6. Compared to the 5.4 update, 5.5 and 5.6 were totally painless. I see if people stick with their OS packages, so that explains 5.3, but the others? I don't know. We've updated our own infrastructure to 5.6 the day it came out and we'll do the same for PHP 7 (in-fact, I have already deployed PHP7, but only test-systems are using it yet, at least until is released for real) 
We use supervisord to manage a remote polling application with about 40 pools. It works very well, but you need to be aware of exit statuses, as well as failure states of dependencies. Specifically we have issues with MySQL silently failing and causing issues with polling runs. You just need to be aware of how things might fail and how to deal with them. Often times it is better to just exit, than it is to throw an exception because the application can exit cleanly, supervisord can recycle whatever went wrong and build back up with a clean state.
I'm looking at Doctrine right now and it is exactly what I need. I am looking for a Bootstrap/AngularJS/Php GUI framework as well. Is there a php pre-baked one out there? I especially need a paging PHP grid that is open sourced and SEO ready. Thanks for the recommendation! 
that doesn't explain the 5.5 chunk.
Ubuntu 14.04 probably.
Step 8: take forever to find out how to administrate your mysql database from outside your virtual box (e.g. with HeidiSql)
Yeah, I'm asking for best practices related to this. Sounds like your best practices is "Don't", which is fair and as I alluded to in the post I realize there are other tools. However, I really really also enjoyed your completely baseless, uninformed and totally not presumptuously dickfaced opinion of my ability to evaluate project tradeoffs. You really are some sort of soothsayer. All hail the soothsayer.
We use Slim Framework, it's small and easy to write in few line a simple API.
&gt; $array-&gt;length can just call count(), for example. Hm, but that would also mean you would have to hardcode all the special cases into the compiler/runtime?
Use composer. https://getcomposer.org/ setup composer in your project. composer init require slim (http://www.slimframework.com/) composer require slim/slim then write your file. call it index.php or something. &lt;?php require 'vendor/autoload.php'; $app = new \Slim\Slim(); $app-&gt;get('/account/:id', function ($id) { echo "Hello, account $id"; }); $app-&gt;run(); then you'll be able to do something like http://yourdevdomain.local/index.php/account/1 to run the code. Good luck. 
Yes, that's what they say, but it didn't work for me at all. I only got in after I basically opened up the mysql port for the whole world. Which is okay for development but keeps me from dropping the vagrant box anywhere online. 
I built this. We use a form of this process in production and have been for many years. https://github.com/jayesbe/php-process-executive
Interesting, thanks!
This seems sensible. I could just write the real time piece in Python. I was hoping the state of the world of PHP Dameons had improved. Thanks for the detailed info and context. I really appreciate it.
As much as i might like the idea, this: collection_pluck_by_method($objects, 'getId'); is something I did in the past, and given today's static analysis tools, I would not want to go back to again. Is getId() ever used in/on $object? IDE - no, grep - no, runtime - yep! PS collection_get can be greatly simplified, else is just pointless, you can use ternary etc. 
Truth hurts, but its good for you. 
Are there any books/articles that talk about project architecture **in php?** Also what are some repositories that represents good project architecture/design in a real world php application? A lot of the trending and top repos on github are mostly frameworks, not actual applications. I learn by seeing and doing a lot better than trying to take a generalized concept and apply it incorrectly to my own projects.
The more skills you have the better it is always, however having said that I can't design for shit. I can take a design and implement it, build all the UX elements and the front-end interface using Angular, React, Knockout, jQuery or whatever else you might want, build the backend in whatever framework doing whatever you want but I can't take a request asking me to design something new and come up with a coherent good looking mockup or take a mockup and convert it into HTML/CSS. However once I get HTML/CSS, anything else is fair game. I've never been a designer but I don't think it ever held me back, someone good at both design and programming is pretty rare and in larger teams there are generally separate people who do both. Even in larger projects the clients are willing to hire someone else for design (or already have one) while you do your work.
I start from an existing template but it changes drastically depending on the client and I need my talent for that.
For freelance work like you're describing, I typically find a designer looking for contract work to help me with the design aspects of the site. Design is an entire field in and of itself, so having a professional on hand who is dedicated to it can really make the difference between a mediocre product and a great product. Making relationships with designers can be really useful too, as they'll likely have clients approaching them who also need programming work done and vice versa. It's a win-win situation for both of you. Full-Stack developers are capable of implementing the vast array of technologies that go into both front and back end development. It refers mainly to your knowledge of the programming languages involved and how they work together. Design skills aren't a requirement to be a full stack developer. In the non-freelance world, there are typically design teams who draw up wireframes, mocks, and all the visual stuff, then hand it off to the full stack developers who are responsible for turning it into an actual website. It's fairly uncommon to find people in the industry who excel at both the design and programming aspects of web development, so don't worry if your design skills are lacking. Just find a good designer to work with. 
there is tools like code coverage if dont know if your code is executed...
I think this is a pretty good explanation, but I'd argue/add Drupal is pushing harder and harder to make assumptions that are more adaptable to different data patterns. I'd argue Drupal is more and more becoming a full fledged CMF, while Joomla and Wordpress are CMS's. So one assumption in Drupal would be that all most of your data will be stored in some type of entity. All entities share common properties/functionality, ID's, UUID's, access control, exportability/configuration management, cacheing, etc. Then optionally, entities can share additional properties/functionality, for example, ability to field them, revisioning, etc. Then entities can have functionality that is unique to them, users:authentication, taxonomy:hierarchy. Now this wasn't always the case, Drupal 6 pretty much lacked this entirely, Drupal 7 unified more of the core components, and Drupal 8 has finally unified everything. After unifying data on entities, Drupal then provides you the ability to access this data via services. This is out of the box in Drupal 8, and requires a few contrib modules in Drupal 7. One of the benefits to these assumptions is that it provides a bit more rigid guidelines to how things should be organize. It's not to say you don't see a shit ton of variance and crap from project to project, but as an agency, we can acquire a rather large enterprise site from another agency and find our bearings. Laravel and Symfony provide some of this, just not necessarily to the extent something as rigid as Drupal would. In my limited experience with Wordpress, I'd say it makes far bigger assumptions about how it should be used. Yes, people have been able to do some pretty incredible stuff on it, but it's very architecture isn't made to adapt to a wide variety of purposes. You put it in the hands of someone who knows what they are doing and they can crush marketing sites, blogs and so forth. There's a reason Drupal powers many of the largest sites in the world, it's assumptions have generally provided value over it's shortcomings. The problem is it achieved much of this sharehold while ignoring best practice and doing things the 'Drupal' way. This has jilted a lot of developers who don't want to spend the vast amounts of time learning something that leaves them tightly coupled to one specific platform. Drupal is making a lot of moves to fix it's past mistakes. It's not going to please every Laravel and Symfony developer out there, but it's making strides to be closer aligned to industry standards. I should also note, while I primarily work in Drupal; Laravel and Symfony absolutely kickass. I'm big fans of them. 
We use monit, and currently have it configured to check processes every 10 seconds. That gives us quick enough restart times without increasing load. I've also experimented with reactphp and react-process that can detect a process quitting within .1 seconds.
I assume plenty are. Personally, I'm a graphic designer first. That's what I went to school for. I got into programming when getting into web design. For your case, maybe you should find a designer to partner with? 
That's how I read it. Blimey. 
"We realize that it's impossible to rewrite WordPress. And if we're to start a parallel effort from scratch, we wouldn't use PHP."
"So we thought, why not use another poorly designed language and, even better, one not even designed to be used server side."
I predict wordpress being forked soon.
Support for major PHP7 language features in HHVM is getting very close -- we're hoping to make an announcement in the next week or two.
Good for them... Wp is a nightmare of shitty php code.
I'm toying with supporting both with a pair of tagged versions (e.g. v1.0.3 and v2.0.3) for below and at 7 respectively. 
Slightly different to the WordPress install base, which has 77% of sites on PHP 5.4 or lower (which don't even get critical security updates any more). https://wordpress.org/about/stats/
Hmm, someone wasn't paying attention in the last few years (promises, generators, observable sequences, async/await, etc.). What is this "callback-hell" you speak of?
Easy downvote to a likely-poor programmer. Enjoy bud
&gt; leveraging WP's REST API Indeed -- having REST API means that the backing code can be anything. It's a decoupling of the language from the application resources.
This is awesome. Check out all of the React components!
Mmh, can't say that I know of anything. I know Sonata has an AdminBundle. Maybe look at this (that's really a shot in the dark though). 
I know javascript very well, and HTML and CSS, most of the concepts of semantic markup, and how to do some interesting CSS things, but I have no eye for design whatsoever and I am open with any jobs I've interviewed at that *I am a shitty designer*. At my current job, I work on backend stuff exclusively, creating our API and features for the frontend team which is outsourced/remote, and doing database stuff. I don't touch any presentation code and that's good for me because my strength is backend dev. And regarding full-stack developers - always been a myth, will always be. Everyone is better at some things than others, and anyone attempting to hire a jack-of-all-trades developer is kidding themselves if they expect someone who's a pro at everything. It's nice to know about what's out there, and maybe have a little experience playing around with some of everything, but for the most part nobody is actually a superb server admin, db admin, backend programmer, frontend programmer, designer, and marketer, all at once. And you'll make more money having a specialization as well.
&gt; I disagree. I require a version of PHP that is still supported by Core. You're missing the point of require then. Supported or unsupported is irrelevant as far as technical dependency requirements go. The *only* thing that matters is what version of PHP your project ceases to function properly on. It's "require", not "very-strongly-suggest". &gt; I truly believe that the faster we all say "Nupe. Not supporting it anymore" the faster legacy environments will update. That's just not how it works in practice. There is a very small number of extremely influential projects, and they hold all the cards. Wordpress, Drupal, etc. are the only ones that can bring about community-wide shifts like what you're talking about. We've already been down this road once with GoPHP5 many years ago. &gt; I'm interested to know what the difference between me requiring 5.5 and WordPress requiring 5.5 is btw. Surely it's the same. Surely you understand the difference in scale and influence between you and Wordpress when it comes to the PHP community.
or you could just install apache, mysql, and php directly and use cgi this makes it super simple to swap between versions (assuming this is for dev)
http://unicode.org/charts/#symbols
I'm not sure this will mean they'll rip PHP out of the backend. The reason they wont require &gt; PHP 5.2 is because of their users using shared hosting environments. Is there really a rash of hosting providers who haven't upgraded PHP in a decade but support Node? Unless they change their support policy, I can't see how they change the backend. 
No, it won't.
&gt; not use another poorly designed language So .. JavaScript is not a poorly designed language ?? 
Totally agree! I have seen some great plugins and they are great to work with code wise but the admin sucks. You can't really rerole something running 25% of sites but you can clean it up. The new JSON API is great, it is making app interfaces so much better.
I'm at my wit's end here. I don't know what I'm doing wrong and I don't know what else to try. Help me Obi Wan Kanobi, you're my only hope.
I was really questioning the part about writing events--it seemed strange I had to do that--but then your edit lead me to the answer I was looking for. Thank you, Obi Wan! Looks like I need to set Name to Email. Modified Example: $newEmail = new Foo\Entities\Emails(); $newEmail-&gt;setEmailAddress('something@mail.com'); $newName = $em-&gt;find('Foo\Entities\Names', 1); $newEmail-&gt;setName($newName); $em-&gt;persist($newEmail); $em-&gt;flush(); 
You said each email has one name. So why would the property be called names?
You are absolutely correct--that was indeed bad naming. I kind made those Entities quickly for a working example.
Nope, not a big impact. There's more to PHP than Wordpress, you know.
I was having a few problems with that myself, ended up using Chrome MySQL Admin (from Chrome Web Store) and I haven't had any problems since.
&gt; One to rull them all, one to find them, one to bring them all and in darkness bind them
&gt; Supported or unsupported is irrelevant as far as technical dependency requirements go That's where we disagree. I'm saying it is relevant - I don't think saying "I guess there's no reason it won't work" is acceptable enough for me to set that as a min dependency. &gt; Surely you understand the difference in scale and influence between you and WordPress when it comes to the PHP community That's not what I'm asking - why should WordPress be allowed to require a higher PHP version than they actually need if I can't? The only difference is "WordPress is bigger than me" - from how I read your argument that isn't good enough. 
oops - commented in the thread linked by /u/Disgruntled__Goat - but here it is anyway: [Modern PHP](http://www.amazon.com/Modern-PHP-Features-Good-Practices/dp/1491905018) by Josh Lockhart is great for getting up to speed with the best practices of php and its advancement from version 5.2. it will save you lots of time from searching the internet, reading tutorials etc. the book covers all the topics you need to know about the php ecosystem as it stands today. not a difficult read, but provides lots of information. i finished it in a day.
&gt; Some strong, well-vetted best practices have been developed.. // like ?? &gt; it's downright pleasant to work with.. // Are you sure that you are talking about (https://developer.mozilla.org/en-US/docs/Web/JavaScript) ??
thanks, you're a good person
thanks, you're a good person too.
I think this is a huge mistake in logic, as who will be called in and slate any non-intuitive system? Developers.
Maybe have a look at [API](https://github.com/reddit/reddit/wiki/API) and [API Wrappers](https://github.com/reddit/reddit/wiki/API-Wrappers).
&gt; I am not talking about Collection only Uh... *you* weren't talking about anything. &gt; as there is functions like not_empty, null, not_null Hmm, guess so. I'd still prefer the class version. Nearly all the functions would be shorter, and a few miscellaneous ones would be longer. But honestly, those short functions are pretty useless. You don't need a function to test for equality. Plus `not_empty()` is still longer than `!empty()` etc.
Yeah, I'm familiar. Just need one.
What didn't work? `ssh vagrant` or `mysql` once you were in?
You can use [Artax](https://github.com/amphp/artax), it doesn't have any curl dependency.
&gt; I don't want to add another language to the mix How about a php extension? http://php.net/manual/ro/book.pcntl.php $pid = pcntl_fork(); if ($pid == -1) { die('could not fork'); } else if ($pid) { // This is the parent process. You need to save the pid to a file and exit // You can use this pid to stop the process later } else { // This is the child process. You run your background code here }
Fair enough. I would definitely add some of the more dangerous functions to your default list though. I see only `fopen` as a default, which is actually not inherently unsafe, whereas there are some functions that should **never, ever, ever** be used on a production site.
Why are you unable to use cURL? That would be perfect for this sort of situation. You say you're unable to use `file_get_contents` due to the site being on https, but have you looked at altering your php.ini configuration to actually allow secure connections via that function?
1. I choose specially underscore to much php function naming style. 2. It will be changed to single file then stable version will be released 3. I have aliases just for better readability and understandability because I work with many new developers who doesn't not know what reset(), end() functions does so as using aliases I am easing their work. Imagine this library as jQuery but just for PHP so beginners could find easier 4. It's specially made so I could merge many arrays to first array without again writing assignation .
sshing into vagrant worked fine (after I transformed the key into something puttysc could read). But for the life of me I couldn't tunnel with Heidisql (or any other external SQL admin tool) into the box to administer the databases. Neither with username/password combination nor with private keys. After two frustrating days I found some stack overflow messages with similar problems, but the suggested solutions didn't help either. At long last I just opened up the database to basically admit anyone from any IP.
Most likely won't be compatible with just using `file_get_contents`, and if the server does not even have cURL, IDK if it will have sockets either
Great... They could have worked on more reliability and flexibility; even by making it a complex content authoring generator, but instead they went towards the easiest thing available... Expose what they have as JSON, and blame the front-end for the lack of reliability (reading the post, Matt seems to think reliability and predictability have been holding WP back). I am so glad this guy doesn't own a zoo... "Release the tigers, we need to disrupt the visiting experience"
&gt; Plus not_empty() is still longer than !empty() but you can't use !empty as a function to use in, say, `array_map`
&gt; I don't think saying "I guess there's no reason it won't work" is acceptable enough for me to set that as a min dependency. The minimum version of a dependency that will still allow your project to function is what belongs in require. What's acceptable enough for you is subjective and has no technical justification as far as your project goes, so that's something that belongs in a README, blog post, or website. It's your project, so you're obviously free to misuse require if you wish, but don't fool yourself into thinking that you're using it properly just because you have good intentions. &gt; That's not what I'm asking - why should WordPress be allowed to require a higher PHP version than they actually need if I can't? The only difference is "WordPress is bigger than me" - from how I read your argument that isn't good enough. I think you misunderstood. I'm not saying it's okay for large projects to require higher PHP versions than they need to. It isn't okay for *anyone* to do that. What I was saying is that large projects are the only ones that have any effect on the community's rate of adoption, so your justification for misusing require is misplaced.
Can I be a complete bastard and point out that iterable mapping functions like `array_map`, `array_filter` and `array_column` can all fulfil much more readable `pluck_by_method`... Also, on "why not put it in an object", "why put it in one?" is my counter
I'll try these out (auto-wiring) I did see them before. It just still seemed like I'll need a ton of boiler plate entries in my services config. Maybe I since auto wired services have a simpler definition, I can make a compiler pass to set those up!
Thanks for the input
Just use a nosql store such as mongodb and elastic search which store everything in json.
Replying to myself because this just happened: [WordPress REST API](http://ma.tt/2015/11/dance-to-calypso/)
I'm not sure I understand the announcement. Is this just referring to Wordpress.com, not wordpress the Open Source blog application? 
Wordpress allows you to inject code, so that's an easy way of verifying if they are running php, also wordpress is never leaving php, there's thousands of plugins built in php, plugins are a fundamental piece of the cms
Yes, you are wrong :) The wordpress plugins are not normalized in a way to allow for such a change. For example, there are numerous ways a plugin, a theme or a framework can implement an options page, many have their own widget (eg: color pickers, sliders etc). Calypso is suitable if you have everything under control. I doubt many of the good plugins out-there would make the switch because there is no financial motivation (which exists for Wordpress.com).
You can log in to WordPress (not Calypso) via https://wordpress.com/wp-login.php
There is a plugin you can install to enable it on self-hosted sites.
https://www.reddit.com/r/PHP/comments/1ztstd/rant_it_baffles_me_that_people_think_using/
But they're not really fooling anyone. They're taking a substantial component and replacing it with Node and React. So, is the expectation that you have to run PHP and Node? How can this mean anything but an eventual replacement of PHP with Node? Sure, there is a ton of existing code. It won't happen overnight, but people are fooling themselves if they don't think the entire codebase will slowly be eaten by Node as various developers "rewrite small pieces in Node".
[Betteridge's law of headlines](https://en.wikipedia.org/wiki/Betteridge's_law_of_headlines): &gt; "Any headline that ends in a question mark can be answered by the word no."
Append `.json` to the URL. Grab it with `file_get_contents`. Decode it with `json_decode`. And there you go. You say that "file_get_content is not working due to https" - it should work. Are you using an old version of PHP? Is this a custom PHP build or did you download the official ones?
That was quick! Meanwhile I'm still waiting for PHPNW15 to upload the talk I gave a month and 21 days ago. Though two months or so isn't that bad of a wait, really. I'm just impatient.
I'm finally doing good with wordpress as it is and now they want to change the backend I'm not onboard.
Many thanks to all for your answers, now i know why its not good practice serialize data and store it in db, i will create a good relational db and properly normalize it. Thanks programmers! nice answers!. Best regards from Mexico :) .
Nope, we're at least two. People should read the article and have a look at the Calypso project before commenting and saying pretty much the opposite of what the article tried to point out.
Well yes of course there would be the plugins compatibility problem, I was just wondering how hard would it be to adapt it on a fresh and clean self-hosted WP installation.
Very this. Knowing how each element interacts and operates is an important skill that the all-in-one installers and managers shield you from. At some point, you're going to be thrust into a situation where you're going to need to troubleshoot something without the aid of the GUIs.
This is only the start Slowly but surely they will phase out the old backend. I'm sure. Good for them.
Really dumb question, maybe it's just early: for($x = 0; $x &lt; 4; $x + 2) { } vs for($x = 0; $x &lt; 4; $x += 2) { } What exactly is going on in the first loop with the $x+2 ? Second loop is the outcome I want, trying to figure out why +2 and +=2 are different in this situation. Output for the first loop would be 0, 1 indefinitely.
The first loop calculates $x+2, but never assigns that value to anything, so $x remains 0. $x+=2 is equivalent to $x=$x+2; the difference from the first loop is that the assignment takes place, so $x ends up being 4 after two iterations and the loop terminates.
Thanks, yeah I had a feeling I was derping this morning :).
It's a valid statement. We don't submit facebook.com announcements here, but we do submit articles related to Facebook's open source software. It doesn't make sense to submit stories about wordpress.com to /r/php, but stories about wordpress.org, the open source software, do make sense.
That would only be a component replacement, not an overall ditching of the core codebase.
ha. you wish ;) 
Yes I know and I personally do not code for Wordpress but you can't deny how much of the market Wordpress holds. Last I read 25% of websites run on Wordpress. If they ditch PHP, that will be 25% less of the web that is running on PHP. That is kind of big.
Exactly my thoughts. This seems to be the first step. You don't spend over a year on a project like this without the intention of extending it further.
Another day, another "WordPress.com the hosted service getting conflated with WordPress.org the FLOSS project" problem.
&gt;PHP 7.0 **might** be officially release on December 3rd. FTFY
why the downvote? Is Node and React better?
or, you just stop caring and use other tools. 
I don't know the folks in the WordPress core that well (only Dion really), so I don't know if they even visit here. That said, you'd probably have better luck convincing them if you actually brought this up in their Slack channel.
There is no new backend. This is simply a client that uses the wordpress API.
This is a 1-week pushback.
dafuq is a gitter
Yes, they already get venomous enough about WP in general, add this in and the misinformation regarding anything to do with Node and React, and you get it even worse.
On it chief http://www.isphp7outyet.com/
Previously it was a 2-week increment. Oct 29 -&gt; Nov 12 == 2 weeks Nov 12 -&gt; Nov 26 == 2 weeks Nov 26 -&gt; Dec 3 == 1 week
This all the more strengthens what I'm trying to say
great info - notice my original post did not make this claim. 
"Calypso is the new WordPress.com front-end – a beautiful redesign of the WordPress dashboard using a single-page web application, powered by the WordPress.com REST API. Calypso is built for reading, writing, and managing all of your WordPress sites in one place." - https://github.com/Automattic/wp-calypso
You summed it nicely: &gt;EDIT², because apparently people can't read: annotations are awesome, COMMENT ANNOTATIONS ARE AWFUL. Arbitrary annotations are extremely difficult to use, but for validation, ORM mapping, and routing I think they are well defined and used often enough to make an exception.
I really don't care, it's been how long? I can wait another 2 months. #1 Goal. DO NOT BREAK PRODUCTION.
wasnt complaining
I completely agree. The folks at Magento understand this. "When will Magento 2 come out?" When it's done, that's when. They had a beta or maybe a few, and then a couple of RC's and then without warning they released it. Everybody was looking forward to it, but none of the end users or developers kept getting disappointed because they hadn't made any promises they couldn't keep. "We'll release when we feel it's ready" sounds like a damn good promise to me. Seems like the release team feels like it can't go back to waiting indefinitely for the product to be ready. But they can still do it. Just feature freeze, fix *all* the bugs and then release. That is, unless they keep finding new bugs or are running into regressions, which it seems may be the case...
in PuTTY, did you bind port 3306 in Connection&gt;SSH&gt;Tunnels to destination 127.0.0.1:3306 and click "Add"?
Who / where do I go to report issues I'm having with a specific extension? Do I make an issue on github?
Oh so the bad code persists... 
If it's something bundled with PHP (ie it appears [on this list](https://github.com/php/php-src/tree/master/ext)), then please report it at https://bugs.php.net/. Otherwise, if it's on PECL you can use the report bug link on the page for that extension. (Otherwise otherwise, follow whatever the author says!)
[MySQL 5.7 has a JSON data type now, as well.](https://dev.mysql.com/doc/refman/5.7/en/json.html)
This is pretty awesome! Its a shame that this doesn't get more attention ...
 #dontcare #downvotescoming #yolo
[You should not use MongoDB as your primary database without reading this article](http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/). tl;dr: If you ever need joins, MongoDB is the wrong database. ElasticSearch is a fantastic search engine but doesn't make for a great primary datastore for a variety of reasons, including that not being the intended use case.
Sure you can, with a closure. Since `not_empty` is already calling through to `empty` there is no extra overhead to `function() { return !empty(...) }`
If you need help feel free to ask in the [#cakephp](http://webchat.freenode.net/?channels=cakephp&amp;uio=MT1mYWxzZSY5PXRydWUmMTE9MjQ2b8) channel. I use Cake 3 every day and I love it.
Short echo syntax isn't enabled by default anymore, is it?
As promised above, I have re-inspected your work in 5.1. I am sorry to say that you have not improved your situation. None of the classes in Illuminate\Support\Facades is a facade. Each of them remains a static proxy to a single instance. Not even one of the Facade classes coordinates between multiple objects. Now, an instance in the container may itself be a facade. But even if *the instance in the container* is a facade, the static proxy to that instance is *not* a facade. It is a proxy to a facade. Thus, the Illuminate\Support\Facades\Facade classes are most certainly *not* facades. They are proxies to individual objects. As such, I maintain that those proxy classes should be renamed to something that indicates they are proxies and not facades.
My body is ready... Actually i've been running the RC builds on my main server, so I've already been trying it out.
No never! but they are separating wordpress.org from wordpress.com
 $message = $_POST['message']; $conn = Connect(); $query = "INSERT into tb_cform (u_name,u_email,subj,message) VALUES ('".$name."','".$email."','".$subj."','".$message."')"; $success = mysql_query($query,$conn); Really?
if(!$success) { die('Couldn't enter data:',mysql_error()); } Syntax error 
This tutorial is bad practice on many levels. Please do not use it. mysql_* functions are deprecated. Google how to implement PDO instead.
It does not look like they have anything specifically for reports
This is bad, and the author should feel bad. Here is a **bare minimal** contact form with DB logging and email: https://gist.github.com/Petah/9ac4963c354d89f7c1dc It would be even better to use libs like [Symfony Validator](https://packagist.org/packages/symfony/validator) and [Swiftmailer](https://packagist.org/packages/swiftmailer/swiftmailer) etc (forks welcome, does the email message need escaping?)
If I remember correctly I bound port 3307 to 3306 of the destination, because that's how we do it at work.
Nothing new for me, but the key points are supported by good examples. Hope this will help to direct a few beginners into the right direction. 
Whew, glad they cleared that up. I thought they might be getting with the times.
Kudos for testing the RCs!
It's not a default but an example. Any recommendations for making it clear is just an example?
Why do you all prefer that long and windy notation, stretching just two lines of code for a whole screen? $sql = 'INSERT INTO contact VALUES name=?, email =?, message =?, created = NOW()'; $pdo-&gt;prepare($sql)-&gt;execute([$_POST['name'],$_POST['email'],$_POST['message']); 
yo this cloudways.com spam has to stop
A tedious (but obvious) solution exists, if there's no in-built functionality for this: * create a copy of the right hand edge of the image, cropped to 2 * $px wide. * round the corners on that image * crop the right hand edge again, this time to $px wide, to trim off the corners you don't want * merge that image over the existing image
A comment from the author replying to a person who took the time to list all the wrong things about the code: &gt; Thanks for pointing out my mistakes. I am just creating contact form so I think security doesn't matter here. If I was creating login or signup form than this matter a lot. 
Wut? This is an internal message, not a release announcement.
I like having dates, even if they can be pushed back. I'm in the middle of a PHP7 project, which is scheduled to be released on December. If the official release is delayed, so is my project, so I keep track of it. And I think most people are curious as to when it is *probably* going to be released.
1000000*$this
Interface segregation principle violations in first place (the flushing logic, mainly), plus we kinda prefer JSR-107 (https://github.com/jsr107/jsr107spec/blob/master/src/main/java/javax/cache/Cache.java). EDIT: we'll expand this on the mailing list
I don't know exactly what your use case is but you might be better off using CSS to achieve the effect. You can add rounded corners to any element, including images.
&gt; Am I the only one who recognized he is talking about Wordpress' admin interface? It's still confusing. He's talking about Wordpress.com's admin interface, not the interface for regular Wordpress. Plus mentioning Node implies there are changes on the back end. They royally fucked up this announcement.
If it's just a change in the admin interface, why is Node involved? Is the back-end still PHP or not?
Remember that the JSON data type is for tables only (like InnoDB or MyISAM). You still cannot create a single JSON field and query it like the new JSON type.
It will be useful for framework agnostic libraries that optionally can make use of caching without rolling their own.
This is the answer
Cannot build it though (caused because of an incompatible extension, trying to figure out which): Generating files configure: creating ./config.status creating main/internal_functions.c And then nothing happens while it consumes all the RAM &amp; swap until OOM. Edit: found it, the apcu extension. And the imagick extension needs an extra patch in the php root dir: wget -O patch.diff "https://gist.githubusercontent.com/reeze/89fd045f1d0960d2add3/raw/1d62443cb1fa63366271ea17edd246cea24b6253/not%2520compatible%2520with%2520m4%25201.4.6.diff" patch -p1 &lt; patch.diff 
Well, yes would be a lot easier, if it wasn't for a image editing tool which inserts another image into an exists image, and the inserted image is the one that needs to round some corners. In that case I can not use CSS to achieve this, however I recommend using CSS for everyone who can do this instead of having to remaking images.
This worked for me. Thanks.
No, the libs would be able to use any implementation or none at all. That's the point of having the PSR for caching. One the interface is approved then any lib can depend on the interface and not care about the actual implementation.
Whoops! I can't maths apparently :) Thanks for pointing that out.
I agree, although Magento is possibly not the best to point to in this case; Moving 7 lines in composer.json took them &gt; 3 months (because they have an internal tool #WTF). Also it's now released and broken, and the fix is to rollback composer...
WOW... just wow. I'm all for early adoption, in fact we have some internal projects using 7 since RC1, but none are due for release until mid 2016... That is a white-knuckle ride you are setting yourself up for
I hadn't heard of stash, looks to be an abstraction for caching. Allows you to swap out redis for memcache in the future if you wanted. The redis bundle allows you to use redis for everything from sessions to emails, which is awesome, but does lock you into redis until you Want to roll out a major change. So basically if you are looking at redis for the long term, you probably don't need to worry about stash unless you want a little simpler of an interface when making calls. After reading the docs though, I am tempted to use Stash with my symfony app and give it a shot (We use memcache right now)
Really? Fantastic, happy to help!
Dude, just chill. These are minor non-important and non-commercial projects.
Also, when I try something like $timestamp = date("Y-m-d") . time("h:i:sa"); the time is 10 digits long, 
I watched it for a little while and even I seen the hype. They were saying "It's coming! It's coming!" for a good few years. The last year they even had a schedule saying this is when it will be out latest.
It took a while but they eventually listened to the suggestions made in the [GitHub issue](https://github.com/OWASP/phpsec/issues/108), hopefully the repository will be deleted soon. The whole site is actually full of really shoddy security practices which is unfortunate. As an example, their [PHP CSRF protection code](https://www.owasp.org/index.php/PHP_CSRF_Guard) uses mt_rand to generate tokens rather than a CSPRNG. This is especially significant because in environments such as PHP-FPM the random number generator wouldn't be reseeded between requests in a worker thread. I had a long email conversation with the author of the page who has refused to accept my suggestions of using the random_compat library or the OpenSSL API (because of PHP&lt;5.2). Instead he suggested using the [OWASP library "CSPRNG"](https://github.com/OWASP/phpsec/blob/3d3f1a99736d72e7fd850690585e9e5bb1063515/libs/core/random.php#L50) which is awful (notice the &amp;&amp; FALSE). This library also [converts passwords to lower case before hasing them](https://github.com/OWASP/phpsec/blob/master/libs/auth/user.php#L71) and is [vulnerable to timing attacks](https://github.com/OWASP/phpsec/blob/master/libs/auth/user.php#L88). **update 1**: I thought they were listening to the suggestions in the thread - it has since got much worse. **update 2**: Success! They've taken all of the code down and replaced it with a warning. **update 3: oh jees** So overnight abiusx reverted the repository, deleted a series of comments on the issue thread and then disabled the issues section. This was particularly irritating as I'd just been requested by an OWASP board member to [log all of the security issues that I had found](https://github.com/OWASP/phpsec/issues/) (for educational purposes and to justify the decision to abandon the project). Anyhow, his access to the OWASP GitHub has since been removed and the [project page](https://github.com/OWASP/phpsec) has been fixed! I would stress that he appears to be acting alone. OWASP is a community of volunteers and that makes situations like this difficult. All of the other people associated with OWASP that I have communicated with have been helpful and understanding. As community members we have the option to improve the situation at OWASP, which is still a trusted name by many in the PHP community. I'm going to spend some time over the next few weeks working on updating [this PHP security cheat sheet](https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet) to give more specific advice on using trusted frameworks and components. I'd encourage anyone else with an interest and some time to do the same :)
Sad to see they decided to be liars and not tell the truth about the version. This is version 6. They’re doing the same dishonest garbage Microsoft does with 10. Windows 10 in truth is 9, but Microsoft lies constantly just to lie. They are so dishonest, and now PHP has taken steps down that evil path too. When will the PHP lies stop? We can no longer trust PHP.
I'm admittedly ignorant when it comes to cryptography - but has there been an ACTUAL implementation for timing attacks? I've seen some of the theory and a talk about how it "works" - but no implementation proving it works. NOTE: I'm not debating the seriousness of timing attacks, but still curious how ~~serious~~ feasible it actually is.
https://github.com/dmayer/time_trial
I talked with people who told me [Imagine](http://imagine.magento.com/) '10 was all about v2 and how great it was going to be. Most of the devs and store owners I talked with didn't plan on upgrading to 2 either. If you have an ecommerce shop that cost 6 figures, you're probably not very eager to upgrade it.
Cross-posted: https://www.reddit.com/r/PHPhelp/comments/3u87yz/trouble_with_date_and_time_function_example/
yet the reality is that people won't consider php .0 versions stable and that the new php versions are slowly adopted, usually the adoption only grows when ubuntu lts and debian picks a new php version. I understand where you are coming from (and I even mentioned in my original comment that this "pragmatic" approach is suboptimal as it keeps the current situation where people don't trust the new shiny version). I was merely showing you where do these other people come from when voting for the "just ship it it will have bugs anyways, nobody expects a perfect .0 release".
Definitely an iteresting point. Didn't thought about it that way. +1
Sad that reddit doesn't follow the liars policy and only allows your silly post to be downvoted in increments of one.
Why is it silly to complain about stupid marketing?
Why complaining about the version? It is explained countless times why 7 long time ago and the people moved on. Are you just trolling?
You could use Socialite or OAuth 2.0 Server for Laravel depending on what you're trying to do. Also check out the list of packages at https://github.com/chiraggude/awesome-laravel
While well-intentioned, your post is a perfect example of https://xkcd.com/927/. Suffice to say, I disagree. I'm guessing you use HTTP, but not the whole thing. Doesn't stop you from using what's relevant to you, even if a subset in a simpler implementation would be ideal. (This has nothing to do with my opinion on PSR6)
&gt; Sad to see they decided to be liars and not tell the truth about the version. This is version 6. They’re doing the same dishonest garbage Microsoft does with 10. Windows 10 in truth is 9, but Microsoft lies constantly just to lie. They are so dishonest, and now PHP has taken steps down that evil path too. When will the PHP lies stop? We can no longer trust PHP. The name "Windows 10" was unveiled [30th September 2014](https://blogs.windows.com/windowsexperience/2014/09/30/announcing-windows-10/). The [php6/php7 RFC](https://wiki.php.net/rfc/php6) predates that by several months (5th July 2014) - and the discussion of "php6 - will they, won't they" as a whole predates *that* by several years. To cut a long story short, stop talking bollocks. PHP are not "emulating Microsoft" (as you said in another comment), so your incredible tirade isn't at all relevant to the thread.
&gt; your post is a perfect example of https://xkcd.com/927/ You have missed the point of that comic. "We need to develop one universal standard that covers everyone's use cases." The person in that comic is saying that i) There can be a universal standard ii) the other standards failed because they weren't good enough to cover all use-cases. I'm saying that they cannot be a universal standard for caching interfaces, and that the attempt to cover all use-cases is an inherently flawed attempt. &gt; I'm guessing you use HTTP, but not the whole thing. Yeah, so are you talking about [PSR-7](http://www.php-fig.org/psr/psr-7/)? That is the HTTP one.....this discussion is about the caching one.
I haven't played with the technologies involved and so I may be speaking out of my ass here, but apparently the JS library that runs in the browser to run the UI is also designed to run server-side and creates the initial HTML. This is the only involvement of server-side JS. 
Forget *timing attacks*, it's also vulnerable to the PHP misbehavior of treating a string that starts with 0e and then a digit as being a number in scientific notation, which can cause two hashes to appear identical to == when they are not. This really saddens me. I've been pointing people at OWASP for ages, and they seem to be just as accidentally clueless as the users they allege to be educating.
In fairness, the line I referenced used strict comparison (https://github.com/OWASP/phpsec/blob/master/libs/auth/user.php#L88) But I wouldn't be surprised at all if they did weak comparisons elsewhere.
It's nice that this is finally being voted on, but a handful of issues I brought up a year ago still haven't been vetted: https://github.com/php-fig/fig-standards/issues/389 And theses as well: https://github.com/php-fig/fig-standards/pull/361 It would be great if someone could bring this up in the Group.
You can sorta fake it: doSomething($foo = 'foo_value', $bar = 'bar_value');
Depends on the client and what their needs are. My cousin does the opposite she is almost entirely front end. She can install the basic joomla/wordpress themes along with plugins then she does all the art, css, etc to make it look nice. but then a client wants something custom backend stuff done that there isn't an existing wordpress plugin for and she is stuck. So then she outsources that specific part to a programmer. So you could always try to find someone to partner with or outsource to. Of course you either have to build that into your quote or know upfront it will eat into your profit.
Asking for a friend: What if you just wanted to implement OAuth between 2 APIs you maintain?
&gt; Can someone explain to me why unserialize is bad in PHP? There are two main concerns here: 1. [PHP Object Injection](https://www.owasp.org/index.php/PHP_Object_Injection) 2. A lot of built-in classes don't play well with `unserialize()`, leading to memory corruption in outdated versions of PHP. For example: * https://gist.github.com/chtg/ffc16863cbcff6d9a034 * https://bugs.php.net/bug.php?id=70155 * https://bugs.php.net/bug.php?id=70168 * https://bugs.php.net/bug.php?id=70169 &gt; Is Laravel's decrypt function open to PHP object injection attacks? It's not exploitable, because it's guarded [by authenticated encryption](https://github.com/laravel/framework/blob/de142d2e73bd2911dc3f039ab291247338962001/src/Illuminate/Encryption/BaseEncrypter.php#L37).
Easier to read, easier to refactor (don't have to count the question marks etc), can be used more than once (when using emulated prepares). Also this is a relatively small query, when they get more complex one line is very hard to read. Also commit diffs are better.
Thanks for the answer, really appriciated.
No, I know the intent of the comic. Proposing three different standards to cover slightly different use-cases will only lead to someone trying to create a fourth standard to unify the three later on.
Ever since it was purchased by GitHub, very little has happened on that site. I'm thinking it might just get shutdown at some point.
I'm not one of the voting members but I know there was talk of closing the GitHub issues to keep all discussion on the mailing list. You'd probably get more people noticing your input if you started a topic here in future: https://groups.google.com/forum/?#!forum/php-fig Subscribing to that is also a really good way to get updates about what they are doing :)
[**@speakerdeck**](https://twitter.com/speakerdeck/) &gt; [2015-06-26 22:05 UTC](https://twitter.com/speakerdeck/status/614555183343755264) &gt; @MarijnvdWerf not abandoned. A lot of behind the scenes stuff. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Looks like they deleted the main repo, or at least the latest commit wipes it all. https://github.com/OWASP/phpsec
I am very chill, I was just commenting that it's brave to be using 7 in release before 7 is released (please consider that even Rasmus seems to be testing existing apps)
A hero emerges: https://github.com/OWASP/phpsec/issues/108#issuecomment-159745139
If this eventually expands to allow text input fields &amp; border drawing, I will love you forever. We have a home-grown `ext/ncurses`-based system that works well, but the extension has been abandoned for ages and we don't expect anyone to come and update it for PHP7...
In the context of that comic, the all 14 competing standards are trying to be the one true standard. Adding another standard to unify them all just leads to 15 standards all trying to be the one true standard. For the set of interfaces for caching, none of them are ever the one true standard. It's fine for multiple of them to be used. Probably multiple interfaces will even be used in the same project. They don't need to be unified. If you can't see the difference between these two scenarios, then well, good luck! &gt; will only lead to someone trying to create a fourth standard to unify the three later on. It's not my fault if someone else wants to do something that is not going to be a fruitful idea. 
I'm not using PHP 7 in production before it's released. I'm developing some minor projects using PHP 7, which won't be released before it's stable.
You're clearly taking this too seriously as anything linked to XKCD is at least 50% joking, but what you're suggesting *is* what leads to people trying to unify things later on.
Added your suggestion and after adding var_dump($response); got a bool(false) then added to the bottom a echo ini_get('allow_url_fopen'); which returned a 1 checked the php.ini and allow_url_fopen was set to on so should have returned a result. Sorry for the time to respond but wanted to try it on my locally controlled machines and not my hosting which I have no control over. any more suggestions. Thanks for your time. Edit I have tried another quick script &lt;?php echo (file_get_contents("http://google.com")); ?&gt; return the page as expected I just assumed my code would return working or not working as in the if else statement. May have to install a debugger to see what is going on. like I said very new to this just assumed I would get some kind of response uskng the example provided and my credentials.
I use stash too, its pretty good. The developer voted on PSR6 so I assume he will also comply with it. 
Ah OK. That makes sense.
Congrats, go tell the people over at PHP, I'm sure they will see the case for enums http://php.net/manual/en/class.splenum.php
What I would suggest is just making a really simple prototype by: * Storing the strings to store into Redis. * Use supervisord or monit to run multiple (maybe 10-20) instances of PHP workers that do the analysis. * Put the results of the basic analysis into Redis. * Have another process that collates the basic results every x seconds, and presumably saves them into a DB somewhere. * Watch in amazement as your CPU usage barely creeps above 5%. 300MB an hour is about 80kB per second. This isn't even going to measure on Redis's capability for storing and retrieving data. And even PHP is able to process that amount of data. This wouldn't scale infinitely, but even on a single box, I would guess that it wold scale until you were processing maybe 5 megabytes of text per second, which is 18 gigabytes per hour..... 
PHPNW15 also did live streams. I guess they just take their time to edit things (which can only be good!)
Pretty close. But check http://phppackagechecklist.com to see how close you are. On a side note, I would like to point out that you shouldn't be afraid to deviate from all the hype... they'r guidelines not rules. There's no such thing as "The Right Way". PSR = PHP Standard Recommendation, The Right Way = Guidelines "The Right Way" and PSR's are optional and guidelines help to help point you in the right direction. Sadly that hyper sensationalized name seems to make people think they are rules; I think it's sad people are afraid of being judged if they don't comply. And it's not unwarranted. I've seen the pattern of behaviour change since they were introduced. And that's not an attack on those projects. Both of those projects state multiple times that they are not rules, nor are they forced or required. However I did notice that people behave as if they are.
SQL injection doesn't discriminate on tables that can be modified / retrieved
What is bad in it? Can you tell me?
I'm really confused by the line OWASP have made here. They go on to state that "anyone can start a project at OWASP", and make it sound like anyone anywhere can put together anything and call it an "OWASP security library". That's then used as a justification as to why it apparently doesn't matter how bad this is. They talk about it being an "incubator", as though the code just hasn't had time to go through an audit or something, and even the warning in the README only talks about it being "immature". Even with the codebase pulled from Github, [this page](http://phpsec.owasp.org/) still exists at OWASP, and appears to actively recommend the library. How does no one at OWASP see an issue with this?
Right? He fights tooth and nail to insist the same things repeatedly that keep getting shot down by multitude of others. I mean, it's one thing to think it's not garbage, it's another thing to be willing to debate with others on that. And for what? A library that ultimately does nothing useful? I particularly enjoy the irony that he believes using the default private key (that is shared online) is sufficiently secure, but ROT13 is not because one can memorize letters and perform ROT13 in their head. So the actual technical security is irrelevant, but the security against attacking savants is a Big Deal.
I thought OWASP was the authority on security. Now I don't know who to trust.
1. You are training new PHP users to use long deprecated functions, which will be officially dead in PHP7 2. There is 0 excuse, ever, for SQL injectable code. I read your updates, and no, it's not "good enough for a contact form". When call something a training guide, you are educating people, and you take on a responsibility not teach them the worst of the worst coding practices.
Well again I don't understand why PHP users are so inclined in "counting" variables. The only explanation I can think of is that they like to draw their code, not to write it. They draw it diligently and they like the look of it. 
Yes I will be changing it to mysqli in the future. I will keep this mind :)
I've had good luck with this package: https://github.com/jeremykendall/php-domain-parser
What the intercourse? Who lowercases passwords before hashing? Why is there a strtolower call there *at all*? It's completely insane!
OAuth is a good way to go but there are some caveats.. OAuth 1.0a utilizes signing with a digest and nonce and probably is the most straightforward to set up. OAuth 2 gets rid of HMAC signing in favor of authorization/request token in exchange for access token/refresh token... if it sounds a bit more complicated it is and therefore easier to implement incorrectly. A lead dev of OAuth recommends going with OAuth 1.0a. 
I used to write apps in pure PHP, until I found out about Ruby on Rails. Then I found out about Laravel. It's really, really good and you can write a fully-featured and complex application much faster than coding in plain PHP. Lumen is a lightweight version of Laravel and can probably get you up and running faster. 
The thing about Laravel is, it takes care of security basics for you - It has built-in Authentication and SQL injection protection. It also has built in CSRF tokens to prevent form spoofing. All of the standard security practices are provided for you from the start in such a way that you'll both learn about them and also put them to use.
You would use an OAuth server, such as the one PetahNZ mentioned
I've used Apache Kafka to do a similar thing before. You pipe all the data into a main stream, and then your processor (which you can write in PHP or others if speed is more important) pulls an item of the main stream, processes and feeds it back into separate streams based on the result of the processing. Doing it this way gives you the advantage of your main stream being distributed / resilient plus you can have multiple jobs that fetch, process and push between the streams.
https://dev.mysql.com/doc/internals/en/avoid-too-dense-code.html
That sounds great! Thank you very much. I was hoping this was the case.
Thanks. I was think about search for, or developing, one of these just an hour ago. I'll check it out tonight hopefully 
I need it for two purposes: - backend API for JS app to get/send data (people syncing their progress in learning app, getting data, etc) - "internal API" for communication between eshop and information system
How come there are so many XSS vulnerabilities? I thought that was as simple as using `htmlspecialchars()` or am I missing something?
This could be greatly mitigated if Wordpress had (back then) a proper template engine like Twig that would auto-escape everything by default. Of course, it is an old code base and those were different times... :)
Likewise, we're pretty close now!
Eh, you could just use phpMyAdmin. Perfectly fine to use it on your dev machine.
What? Did you even read? I simply loved the interview. When he was asked how was it like to be a Moderator for StackOverFlow PHP tag, he said; "Getting elected by the community and trusted to uphold their values is indeed a great honor. Getting access to the moderation tools was very exciting to me. So was getting to know all the other moderators. They are a fine bunch. And that feeling that you help to maintain the quality of the biggest Q&amp;A site in the world is just awesome. Also, engaging with the community at that level can be very rewarding. The most challenging aspect of moderation for me is finding the time. You never run out of work as a moderator. On the one hand, you want to handle as many flags, resolve as many conflicts, help as many users and catch as many cheaters as possible in the limited time you have. On the other hand, you owe it to the community to do all this with good judgement and quality. When I was elected as a moderator in 2013, I was mostly working from my Home Office and my son wasn’t born yet. Nowadays, I commute to work and have a kid at home. It’s become increasingly difficult in the last months to still find the time it takes. This is why I am stepping down as a moderator after the November election." 
WordPress does do auto-escaping. It [auto-escapes $_POST for MySQL](https://core.trac.wordpress.org/ticket/18322) ;-) Edit: change :-) to ;-), so it's clearer that I'm joking.
Well you'd have to look at my.conf (or mysql.cnf, or however it's named on your system) to see what the server's port is set to, then bind that to whatever port you have your local mysql ide open to. 3306 is the "normal" port, someone can correct me if that's wrong for homestead. Why not just run the program from local folder with XAMPP or WINP, or mysql/mariadb and `php -S localhost:80` if you're solo dev'ing? 
Indeed APC is outdated, however: - The opcode cache has been replaced by http://php.net/manual/fr/book.opcache.php, which is officialy part of the core. - For the userland cache, there's https://pecl.php.net/package/APCu which provides an interface compatible with APC. I've not used it in production though.
Damien Seguy speak about it on the AFUP 2015 (take on 2015-11-24) His slide (Is in French): http://fr.slideshare.net/dseguy/machine-learning-pour-tous
Yeah. I use codeigniter for web apps. I write only api's in core. Btw, have you used codeigniter before ? How is laravel different. Form my limited knowledge, I think it take time to configure and set up the project. Where as ci require very less configuration, Just drop the framework folder in xampp folder and that's it.. That's one of the reasons why am sticking with ci. So hosting in a shared server also require minimum configuration. 
I keep seeing comments like these. Why is Node and React hated? Isn't it being adopted by big SAAS companies very rapidly?
Date | Release ----------- | --------- Jun 11 2015 | Alpha 1 Jun 25 2015 | Alpha 2 Jul 09 2015 | Beta 1 Jul 23 2015 | Beta 2 Aug 06 2015 | Beta 3 Aug 20 2015 | RC 1 Sep 03 2015 | RC 2 Sep 17 2015 | RC 3 Oct 01 2015 | RC 4 Oct 15 2015 | RC 5 Oct 29 2015 | RC 6 Nov 12 2015 | RC 7 **Nov 26 2015** | **RC 8** Dec 03 2015 | GA
Looking forward to Angular 2 nonetheless, I just hope it's some time in the next decade :P
I think it would be better to make this a more like JS lodash style, eg: $ids = pluck( $objects , function( $obj ) { return $obj-&gt;id; } ); This way you do not lose IDE and analysis support.
I share office space with a group of 10 or so Drupal developers, though myself I haven't used it. The consensus among that team is that they seam to all hate the changes to Drupal 8. They don't want to learn Symfony, believing it to be a waste of time. They don't like that all the modules they rely upon haven't been ported yet, and are unwilling to ever write their own modules. More than that, they have a custom workflow in Drupal 7 specific to their team, where they minimize ever having to write code and instead configure *everything* as "blocks" through a WYSIWYG. Apparently it's going to be nigh-impossible to port this workflow over, and they don't like the suggested workflow of having template files in a typical MVC setup. Personally, I hate a workflow that replaces coding with clicking and would absolutely jump no the chance to get paid to learn Symfony, write open source plugins, etc. The attitudes this team hold are unique to any team of developers I've come across, and they're also the only team of Drupal devs I know. So, are they connected, or is this coincidence? Can anyone speak to whether these attitudes are common across Drupal devs or it's just these guys?
UGH PLZ STOP DOING STUFF LIKE THIS IN BLOG POSTS. ```php $link = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ```
drupal devs are the most painful to work with in my experience.
I feel if they did that then the problem would be vaster. Imagine how many people starting in Wordpress and coming away from it would not think about escaping.
I'm sorry for the caps... My concern is that people read your article and then come to the conclusion that the old code is fine because this article was written in 2015.
Even experienced programmers screw it up all the time, but that certainly doesn't help. 
जो आया है, वो जायेगा पर इसका ये अर्थ तो नहीं कि वो बेकार है :P --------------- What is born, will die but this doesn't mean its bad :P
Still using Apache + mod_php (Don't use .htaccess) regardless. And will do until it blows up and I have no other option but to replace it. 
They sound more like site builders who know a few PHP methods instead of developers. 
I'm a Drupal developer and work with about 15-20 Drupal developers. I can confidently say that we all can't wait to start using D8 and expanding out repertoire
Well, point remains, they aren't Drupal developers. They are guys who click around in the UI and can only really work with pre-made stuff. Personally I think the Drupal project is worse for trying to support them.
It seems like they should just keep using Drupal 7 for two more years until a lot of it can be just handed to them without effort.
A Drupal and WordPress developer walk into a PHP meetup. That's the joke. 
I consider myself a fairly average programmer, but seriously, are people still not using prepared statements?
install it locally. Can use PEAR, composer or the phpdoc PHAR. All of the instructions are on the phpdoc site.
lol
All going well RC8 should be identical to GA.
As a previous drupal developer, the fact that they're moving to symfony makes me really happy. Should have a better set of standards, less confusion on implementation, and complete abstraction - couldn't be a better choice in my opinion. Writing drupal modules (last I did was drupal 5.x) was a real pain in my ass.
You might be interested in https://github.com/whois-server-list/whois-server-list
Sorry for being ignorant, but who's this guy? Which book is worth it? I've been thinking of buying "Modern PHP", what do you think?
Many PHP tutorials on the internet still tell people to use things like `mysql_query("SELECT * FROM my_table WHERE id = {$_GET['exploitable']}")`. Even in this subreddit, there usually are 1-2 that reach the front page every week (which get downvoted to oblivion, but not before they get seen by many, many people).
sorry to say but i posted in wrong subreddit
No joke. I hired a senior engineer a few years ago (MS in Comp Sci, 10 years experience, great dev otherwise) and his first commit used a SQL statement that was not a prepared statement. It happens, and is far more common than you would think. To be clear, I called him into my office, showed him the problems with it, how to fix it, and he then went back. The fact is, unless someone is doing research and reading blogs (you would be very surprised how many devs don't), these things slip past.
Fortunately yii 1 is very stable. Large project conversion to 2... Anyone done it without 'having' to do it? 
Well, not entirely, you're percentage is off. 25% of websites run Wordpress, but more than 25% runs on PHP (like more than 80%), and if Wordpress were to stop using PHP (which it won't), 25% of that would go. So in theory, 60% of the web would still be PHP.
Sadly nothing on that horrendous config system and structure that pushed a lot of ZF1 fans like myself to Symfony 2. Still an interesting read. I always strive for powerful concepts that can still be simple to use (seems also a goal currently in over-engineered Symfony).
Happened this week. And the author stated in a comment that was "just" a contact form that needs no security measure.
Could someone explain how there could be orders of magnitude of differences between [for example Symfony, Silex and Phpixie](https://www.techempower.com/benchmarks/#section=data-r11&amp;hw=peak&amp;test=json&amp;l=sg)? - phpixie: 35,957 rps - silex: 8,177 rps - symfony2: 1,130 rps The test is supposed to be about simple JSON serialization, so it's not hitting a DB. It's not that I don't believe those benchmarks, but it sounds a bit much.
without considering Phalcon I see phpixie is at about twice as fast as the next one in list. Either 1. there is something wrong with the php frameworks landscape 2. there is something wrong with the benchmarks PHP only resuts here: https://www.techempower.com/benchmarks/#section=data-r11&amp;hw=peak&amp;test=fortune&amp;l=sg PS: laravel &amp; symfony have high error rate
last time i checked i didn't find any - but i'd love some markdown-producing one too.
php is only suitable for cms and ecommerce website.
Still $29.50 too much
In which case there's always [Aura.Di](https://github.com/auraphp/Aura.Di); I'd suggest 3.x for that. (I am the project lead.)
Thanks! I will eagerly await its release.
Bootstrapping the universe.
(Disclosure of my vested interest in the topic, I'm currently writing a book on Machine Learning using PHP (https://leanpub.com/machine-learning), so I may be a bit biased). There a couple of core points I think he's got wrong - Performance : The performance of PHP for many real-world ML tasks is perfectly adequate, even with 5.x. And as with web services, many larger ML problems can be split and scaled over multiple machines, and the use of 7.x and HHVM etc. can help as well. Performance of the actually software often isn't the key thing ML developers look for, the process of selecting and refining an algorithm (and starting again from scratch when the algo or model you pick doesn't do what you want) mean that a rapid development environment wins out (even if just used for prototyping) and PHP is certainly that. - "There just isn't a viable machine learning library for PHP" : There are many, depending on what you want to do. NumPy and scikit-learn cover certain classes of MP problems, but are by no means comprehensive, and many of the algorithms they include are available in PHP librarys, classes, extensions etc. There perhaps isn't any single toolkit that individually has the breadth of one of these, but don't think that you can't easily find what you need. The are literally thousands of ML algorithms (and many more related AI, Data Mining etc. algos) (and I mean of the base algorithm, not the variations on implementation), no language or library has anywhere near all of them covered. Conversely, all the major languages (including PHP) have all of the common ones covered. 
Seems to have the same problem on 5.3 and 5.4 (CentOS), but works OK on 5.6 (Fedora). That said, I don't have a problem reading it in from a file (file_get_contents) and would be very surprised if that were an issue - maybe it's reading it fine but just not displaying it for you?
Based on the information [here](https://github.com/TechEmpower/FrameworkBenchmarks/tree/master/frameworks/PHP), it looks like the PHP-related benchmarks were run using PHP 5.5.17. Caching is turned on, and APC is also installed so that those frameworks that prefer to work with it can do so. I tabulated results for the "PHP-Raw" "Fortunes" test over the last five rounds of the benchmark, and there seems to be a downward trend in the performance. I'm not sure why. Here's the results Round|i7|EC2*|Peak -----|--|----|---- 7|29,389|3,299|NA 8|29,149|3,300|NA 9|28,861|3,086|97,508 10|NA|5,028|92,355 11|NA|5,016|90,469 *EC2 switches from m1.large instances for Rounds 7-9 to c3.large instances for Rounds 10 and 11. Round 7 was run October 31, 2013, just to give a sense of the time frame covered by the benchmark rounds.
Have a look at Magento/Magento 2. 
Yes No - don't know what to look for,
&gt; maybe it's reading it fine but just not displaying Yes, that seems likely. I can copy/paste a string but those specific letters will be removed.
&gt; PHP 7 RC8 and on Debian 7.8 with PHP 5.4.41-0+deb7u1, both are working fine Hmm. I wonder if there is some config option to change that behavior..
welcome to asp.net mvc mono, is nice to see in the list 
Wait. `php -a` works on Windows, now???!
Apparently PHP uses the [GNU Readline](http://php.net/manual/en/book.readline.php) (libedit on Ubuntu) as underlying mechanism for its interactive ~~s~~hell, neither of them having UTF-8 support. If PHP uses libedit, you might be able to add UTF-8 support if you compile it with `--enable-widec` flag - I haven't tried it ([link](http://thrysoee.dk/editline/))
So the suggestion is to replace the exising readline module (readline.so) with another readline tool that supports utf8/widechar? I downloaded the source code but I'm not sure how I get from there to a working php-readline module.
Why would I use this and not xdebug??
The [Drupal Security Team](https://www.drupal.org/security-team) has a process for handling reported security issues in contributed modules as well as core. Most often that entails working with the module maintainer to fix the issue and coordinate disclosure and releasing the fix.
Sorry, I've pinned the public release to one week after PHP 7. If 7 doesn't come out until January, neither will my project.
`php -A` is an even bigger pain in the ass. 
I would be very interested to see code quality for such benchmarks, as most benchmarks are useless for making "big-picture" decisions. Seriously, how many of us are about to start pushing ulib projects out the door because of this? https://github.com/stefanocasazza/ULib seems to be the repo if anyone is interested, but although it's clearly fantastic, I'm not sure I'll move just because of the work to gear change for compiled long-running web-apps
Ok, so it is definitely my system. 
Two points here: 1) these benchmarks (like all benchmarks) are not a representative sampling of normal web traffic for the vast majority of applications, and 2) with few exceptions, the throughput of all of these frameworks is capable of withstanding the traffic of apps that are likely to use them. So, what does it matter that Symfony is orders of magnitude less performance than some micro libs in compiled languages? If it matters *at all* in your actual use-cases, then you've got no one to blame but yourself for picking the wrong tool for the job.
Here's some more information if it helps: 0 /root&gt; dpkg -l | grep xfce4-terminal #I'm using this terminal ii xfce4-terminal 0.6.3-2 amd64 Xfce terminal emulator 0 /root&gt; dpkg -l | grep -Pi '(readline|libedit)' ii libedit2:amd64 3.1-20150325-1 amd64 BSD editline and history libraries ii libedit2:i386 3.1-20150325-1 i386 BSD editline and history libraries ii libreadline6:amd64 6.3-8+b3 amd64 GNU readline and history libraries, run-time libraries ii libterm-ui-perl 0.46-1 all Term::ReadLine UI made easy ii php5-readline 5.6.15+dfsg-1 amd64 Readline module for php5 ii readline-common 6.3-8 all GNU readline and history libraries, common files ii rlwrap 0.41-1 amd64 readline feature command line wrapper 0 /root&gt; locale LANG=en_US.utf8 LANGUAGE=en_US:en LC_CTYPE="en_US.utf8" LC_NUMERIC="en_US.utf8" LC_TIME="en_US.utf8" LC_COLLATE=C LC_MONETARY="en_US.utf8" LC_MESSAGES="en_US.utf8" LC_PAPER="en_US.utf8" LC_NAME="en_US.utf8" LC_ADDRESS="en_US.utf8" LC_TELEPHONE="en_US.utf8" LC_MEASUREMENT="en_US.utf8" LC_IDENTIFICATION="en_US.utf8" LC_ALL= 0 /root&gt; php -v PHP 5.6.15-1 (cli) Copyright (c) 1997-2015 The PHP Group Zend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2015, by Zend Technologies 0 /root&gt; php -m [PHP Modules] bcmath bz2 calendar Core ctype curl date dba dom ereg exif fileinfo filter ftp gd gettext hash iconv imagick json ldap libxml mbstring mhash mysql mysqli openssl pcntl pcre PDO pdo_mysql Phar posix readline Reflection session shmop SimpleXML soap sockets SPL standard sysvmsg sysvsem sysvshm tokenizer wddx xml xmlreader xmlwriter Zend OPcache zip zlib [Zend Modules] Zend OPcache
 Well, not really even that ... I think the language in the manual was misleading, I added a note a few days ago, not really happy with the wording, anyone is welcome to change it again (edit.php.net). I don't know how to say it in a language that is suitable, I can't include the following explanation in a manual entry ... It can't really tell you how much memory is allocated, ```memory_get_usage``` can only tell you: - the size of the heap allocated for Zend: ```memory_get_usage(true);``` - how much of the heap allocated for Zend is being used: ```memory_get_usage(false);``` The heap allocated for Zend is used whenever some C code calls ```emalloc``` or ```ecalloc```. Many extensions allocate memory that doesn't use the Zend MM heap (they use ```malloc``` or ```calloc```), so does some of internals. A lot of these allocations are made during initialization of Zend. User code only exists on the Zend heap, but it can invoke code that allocates memory that does not use the Zend heap. All of this makes ```memory_get_usage``` a pretty unreliable function, in the general case ... but that's just opinion, I guess ...
Thanks! This is what I have: $ dpkg -l | grep konsole ii konsole 4:4.14.2-0ubuntu1~ubuntu14.04~ppa1 amd64 X terminal emulator $ dpkg -l | grep -Pi '(readline|libedit)' ii libedit2:amd64 3.1-20140620-2+deb.sury.org~trusty+4 amd64 BSD editline and history libraries ii libedit2:i386 3.1-20140620-2+deb.sury.org~trusty+4 i386 BSD editline and history libraries ii libreadline-dev:amd64 6.3-4ubuntu2 amd64 GNU readline and history libraries, development files ii libreadline5:amd64 5.2+dfsg-2 amd64 GNU readline and history libraries, run-time libraries ii libreadline6:amd64 6.3-4ubuntu2 amd64 GNU readline and history libraries, run-time libraries rc libreadline6:i386 6.2-9ubuntu1 i386 GNU readline and history libraries, run-time libraries ii libreadline6-dev:amd64 6.3-4ubuntu2 amd64 GNU readline and history libraries, development files ii libterm-ui-perl 0.42-1 all Term::ReadLine UI made easy ii php5-readline 5.5.30+dfsg-1+deb.sury.org~trusty+1 amd64 Readline module for php5 ii readline-common 6.3-4ubuntu2 all GNU readline and history libraries, common files ii rlwrap 0.37-5 amd64 readline feature command line wrapper $ locale LANG=en_DK.UTF-8 LANGUAGE=en_DK:en LC_CTYPE="en_DK.UTF-8" LC_NUMERIC="en_DK.UTF-8" LC_TIME="en_DK.UTF-8" LC_COLLATE="en_DK.UTF-8" LC_MONETARY="en_DK.UTF-8" LC_MESSAGES="en_DK.UTF-8" LC_PAPER="en_DK.UTF-8" LC_NAME="en_DK.UTF-8" LC_ADDRESS="en_DK.UTF-8" LC_TELEPHONE="en_DK.UTF-8" LC_MEASUREMENT="en_DK.UTF-8" LC_IDENTIFICATION="en_DK.UTF-8" LC_ALL= $ php -v PHP 5.5.30-1+deb.sury.org~trusty+1 (cli) (built: Oct 4 2015 16:23:01) Copyright (c) 1997-2015 The PHP Group Zend Engine v2.5.0, Copyright (c) 1998-2015 Zend Technologies with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2015, by Zend Technologies $ php -m [PHP Modules] apc apcu bcmath bz2 calendar Core ctype curl date dba dom ereg exif fileinfo filter ftp gd gettext gmp hash iconv imagick intl json ldap libxml mbstring mcrypt memcache memcached mhash mysql mysqli openssl pcntl pcre PDO pdo_mysql pdo_pgsql pdo_sqlite pgsql phalcon Phar posix readline Reflection session shmop SimpleXML soap sockets SPL sqlite3 standard sysvmsg sysvsem sysvshm tokenizer twig uuid wddx xml xmlreader xmlwriter yaml Zend OPcache zep3q zip zlib [Zend Modules] Zend OPcache 
You can find some useful resources/books in this repo: https://github.com/ziadoz/awesome-php
Maybe this can help as well: http://symfony.com/doc/current/book/index.html too obvious? :)
This question AGAIN...
Yeah, using a separate package is indeed a solution, but for now we will simply remove `zendframework/zend-di`, until new plans are made.
I just skimmed through the code: no, that's not what lazy services are. This is how lazy services work: --FILE-- class SomeService { public function __construct() { echo __METHOD__ . PHP_EOL; } public function bar() { echo __METHOD__ . PHP_EOL; } } function does_not_initialize_service (SomeService $service) { echo 'hi' . PHP_EOL; } function does_initialize_service (SomeService $service) { $service-&gt;bar(); } $service = $someFactory-&gt;createLazy('SomeService'); does_not_initialize_service($service); does_initialize_service($service); --EXPECTF-- hi SomeService::__construct SomeService::bar As far as I know, lazy services were initially implemented in `Zend\ServiceManager` (see https://github.com/zendframework/zf2/pull/4146 ) Then I ported them to `Symfony\Component\DependencyInjection` (see https://github.com/symfony/symfony/pull/7890 ) Then /u/mnapoli ported it to PHP-DI (see https://github.com/PHP-DI/PHP-DI/issues/48) Hope that clarifies the scope of discussion around "lazy services" :-)
Modern PHP by Josh Lockhart is worth a read; http://shop.oreilly.com/product/0636920033868.do
Heh, we just hired a new PHP developer for our Symfony2 website. Though the guy we hired doesn't have much experience, so I don't think its you... I've been recommending http://www.phptherightway.com/ to everybody that passed the first round of interviews. Also, be sure to check the Symfony documentation.
Laracasts
cool. Thank you for making it clear :-) .
It's annoying that this gets downvoted. Laracasts covers loads of things like design patterns, not just laravel. This is the first recommendation for me.
So many here think replying with a simple link to "PHP The Right Way" is a catch-all response for 99% of questions asked about learning PHP.
All anyone did was give you proper criticism. But since you have delusions of grandeur and get butthurt at pretty much anything, all you did was accuse us if being part of a giant conspiracy and then whine and bitch just like you are doing now. Your lessons were crap, showed a complete lack of understanding of *basic* software development principles, and worse, you wanted people to *pay* for that pile of garbage. You also wall around calling yourself a PHP expert when it's painfully obvious that you're a low-level amateur at *best*. It's not your skill level that pisses people off. It's the fact that you refuse to accept it, refuse criticism and pointers on how to improve, and that you try to get people to pay you to teach them your bad practices. tl;dr stop whining and lying. No one gives a shit and everyone knows that you were banned for self-promoting your garbage "tutorials".
OP's edit summarizes the problem with blind linking to PHP The Right Way: &gt; EDIT: And before someone says "PHP The Right Way", it's not a tutorial, it's not even a reference. PHP The Right Way is a guide to a few best practices that have developed. But PHP The Right Way will not teach you PHP. It's only useful to unlearn bad habits and pick up a few new ones if you already know the language. PHP The Right Way is absolutely a resource everyone developing in PHP should read and go through, but it's not a tutorial on how to learn the basics of PHP from scratch.
Your tutorial sounds really interesting and useful. Great content (and some marketing) usually gets readers excited! Are you planning to focus on what new PHP 7 provides or is it more general tutorial on modern PHP security best practices? I believe we don't need an another list of new syntax features. Using new or even old features in practice is more interesting. Maybe you could release series of blog posts? Anyway, good luck with the tutorial or any other project!
don't overlook the official docs! learn to love the bomb...
It's meant to be something that you could hand someone new to the language that would help them get from 0 to "I've built my first useful web application" while also learning habits that, at the very least, make their code impervious to most of the OWASP Top 10 with minimal effort. Basically, it's "what I wish a tutorial covered when I first started out". Like the libsodium documentation, it will be open source. (I also need to get around to hammering out the Markdown -&gt; HTML -&gt; WkHtmlToPdf automated build process.)
Unfortunately, some of the docs (e.g. ext/openssl) are terrible (as of today).
In general: Use `!==` and `===` unless it's a security context, in which case you almost certainly want `hash_equals($left, $right)` instead.
X-Post referenced from /r/laravel by /u/live_love_laugh [I made a proof-of-concept alternative MVC implementation and I would like to spar with you on this idea. So please let me know your thoughts!](https://www.reddit.com/r/laravel/comments/3ullto/i_made_a_proofofconcept_alternative_mvc/) ***** ^^I ^^am ^^a ^^bot ^^made ^^for ^^your ^^convenience ^^\(Especially ^^for ^^mobile ^^users). ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher)
If it's not a float it's not a float. If only people would stop using and relying on weak comparisons of differing data types. Convert everything correctly, first.
So, I'm not trying to sound like a downer here - I'm just genuinely curious. I've seen several of these attempts to change up the structure of the typical PHP framework layout with controllers and views (as in HTML templates), and I'm curious about what kind of problems are you facing at your job / projects where this is a solution? I've written several apps that are out in production on Laravel and I just never really have any kind of complexity at this layer that needs solving. The hard part of writing apps, in my experience, is deeper into the business layer, not in this HTTP layer of interacting with controllers ands views - that's the easiest part. To me this and approaches like "ADR" are splitting hairs at the absolute easiest level of application design where there is rarely sufficient complexity to warrant such segregation, at least in my experience. Have I just not encountered an application that needs this sort of re-structuring before? I guess in other words I'm trying to say: is this a solution looking for a problem?
I was actually wanting just an example in psuedo-code but sure that works.
I've read most of the article's on Tom's website, and I believe that this is more about purity than anything else. Basically, web app MCV != native app MVC, but he's trying to resolve the differences between the two by changing the way a web app is formatted. EDIT: By the way, huge fan of Laravel. Thank for all the hard work.
Nice, just what I was looking for!
Indeed I've also not yet encountered any huge problems that are created by the normal way of doing it. However, I do see value in always making my code cleaner. This method might not solve a huge problem, it does help boost reusability and that's always a good thing, don't you think? Actually part of the reason I was showing this here, was because I kinda hoped I might inspire some Framework builder (like yourself) to maybe implement this into their framework. (A)
Yep. Sorta like this: https://github.com/paragonie/pecl-libsodium-doc/pull/5
We must fit more content into the title! Hashtags! Full URLs! MORE!
 foreach ($this-&gt;stylesheets as $css =&gt; $link) { $tagToReplace = "[@$css]"; $output .= str_replace($tagToReplace, '&lt;link href="'.$link.'" rel="stylesheet"&gt;', $output); }
In normal circumstances, yes. In Wordpress circumstances, it would be ironic if it *didn't* have a vulnerability.
I've thought about doing something similar, but I'm not really sure where to start. Perhaps starting a wiki format may be a good way forward? I'd love to spend time fleshing out content but just don't know what people are looking for these days.
I am not quite sure, but wouldn't it make more sense to set the $output rather than adding to it? foreach($this-&gt;stylesheets as $css=&gt;$link) { $output = str_replace("[@$css]", "&lt;link href='$link' rel='stylesheet'&gt;", $output); } I am not sure why you are having this problem, but this makes more sense for me.
&gt; To me this and approaches like "ADR" are splitting hairs at the absolute easiest level of application design where there is rarely sufficient complexity to warrant such segregation, at least in my experience. [ADR](http://pmjones.io/adr) (Action-Domain-Responder) addresses the user-interface concerns in a request-response environment, not the application concerns. (I am the author of the white-paper describing the pattern.)
I like this one: http://www.hackingwithphp.com/ It's from this site: http://www.tuxradar.com/code (the php link redirects to the address above, but written by the same guy). The C# tutorial is also very nice. 
The manual is awful? I disagree.
I know the XSL section is out of date. [chapter on using XSLT](http://www.hackingwithphp.com/12/4/2/handling-the-processed-output) $xsltproc=xslt_create(); $xslt_result = xslt_process($xsltproc,'/path/to/input.xml','/path/to/input.xsl'); 2 lines of code from the example. [php.net search results for xlst_process](http://php.net/manual-lookup.php?pattern=xslt_process&amp;lang=en&amp;scope=404quickref) PHP 5 uses [xsltprocessor](http://php.net/manual/en/class.xsltprocessor.php). NuSphere has it listed as PHP4 for xslt_process : &gt; xslt_process &gt; &gt; (PHP 4 &gt;= 4.0.3, PECL) Says it moved to PECL but isn't listed there either. The reference is from 2006. http://www.nusphere.com/kb/phpmanual/function.xslt-process.htm One I have to review is the PHP Pandas book. 
This makes quite a bit of sense. As you completely replace the replace string in the output, you will be left with no [@stylesheets] left to replace. What you want to do is collect all of your css stuffs in an array and replace those at the same time: $css_holder = array(); foreach($this-&gt;stylesheets as $css=&gt;$link) { if(isset($css_holder[$css]) &amp;&amp; is_array($css_holder[$css])) { $css_holder[$css][] = $css; } else { $css_holder[$css] = array($css); } } foreach($css_holder as $css=&gt;$arr) { $str_to_replace = ""; foreach($arr as $link) { $str_to_replace .= "&lt;link href='$link' rel='stylesheet'&gt;"; } $output = str_replace("[@$css]", $str_to_replace, $output); } This should do the trick. Of course this is not the most efficient method, but the easiest to understand imo. Better would be: $css_holder = array(); foreach($this-&gt;stylesheets as $css=&gt;$link) { if(!isset($css_holder[$css])) $css_holder[$css] = ""; $css_holder[$css] .= "&lt;link href='$link' rel='stylesheet'&gt;"; } foreach($css_holder as $css=&gt;$links) { $output = str_replace("[@$css]", $links, $output); } 
You have to agree that it's not exactly obvious behavior, and probably behavior that the php core devs would change if they went back to day 1.
&gt; none of the standard library is object-oriented I miss the high-order functions...
It is not strictly needed, no; but you could make it behave like shuffle() with a simple change. function shuffle_assoc(&amp;$array) { $keys = array_keys($array); if(!shuffle($keys)) return false; foreach($keys as $key) { $new[$key] = $array[$key]; } $array = $new; return true; } Shuffle itself also returns true/false, so it is not a bad idea to comply to that behaviour when implementing a similar function yourself.
&gt; One of the things I dislike about PHP is how basically none of the standard library is object-oriented. That's because the majority of it was put into PHP *before PHP had objects*. &gt; Remembering the order of the explode and implode functions... Switching from a plain text editor to an IDE that gave function arguments in a tooltip was the single #1 productivity boost I ever received from a single tool. I suggest you do the same.
The problem with MVC is that developers use it as their application architecture. MVC is a UI pattern, not application architecture pattern. The web frameworks we all use and love, such as Symfony, Laravel, Zend Framework etc, are "web tier" frameworks, they help you construct and interact with the UI of your application. 
None of them work. :( Not sure what's going wrong, but here is my complete template engine code: http://pastebin.com/8rJcs4r3 Perhaps the other foreach is causing this problem?
&gt; I miss the high-order functions... Which ones in particular do you miss? 
I was thinking the same. If it needs to stay up to date, it needs to be maintainable by just about anyone. Making it open source and easy to contribute to would help that immensely. The trouble with that is the democracy aspect of things - who decides whether a contribution is actually positive and beneficial?
The problem is two-fold: 1. You're overwriting your CSS files each time you call the `addCSS()` method, because you are passing the same "stylesheets" value in the first parameter. After all of your method calls, this array will only contain one CSS file path - the last one called. 2. When you run `foreach ($this-&gt;stylesheets as $css =&gt; $link) { ... }`, the first iteration will replace the `[@stylesheets]` variable, and all future iterations will not match stylesheets and will replace nothing. So you'd end up with the opposite result: only the *first* stylesheet defined would load on the page. Steps I'd recommend to solve: 1. Your `addCSS()` method should allow one parameter - the path to the CSS file. You do not need the "stylesheets" value, since addCSS is explicit enough that you already know you will only be replacing the `[@stylesheets]` variable. After all, nothing else should go there except CSS. public function addCSS($filepath) { $this-&gt;stylesheets[] = $filepath; } 2. When generating the template output and replacing template variables, check to see if the `$stylesheets` array has any values. If it does, then you can generate the proper string and replace the template variable. If the array is empty, you will not do any unnecessary logic. If the stylesheets array has values, you will need to generate a single string value of all the `&lt;link&gt;` tags *before* replacing the template variable (assuming you only have one `[@stylesheets]` variable and not multiple). if ( ! empty($this-&gt;stylesheets)) { $css = ''; foreach ($this-&gt;stylesheets as $link) { $css .= '&lt;link href="'.$link.'" rel="stylesheet"&gt;'.PHP_EOL; } $output = str_replace('[@stylesheets]', $css, $output); } --- In the future, /r/phphelp is a much better place to go to for assistance with code you're writing. :)
7 /r/PHP mods. Each could be a collaborator on the repository and tutorials could be voted by democratic simple majority? Doesn't have to be too difficult, IMO.
True
If you google 'mysql and php tutorial' I guarantee you most of the results will tell you to do this
1. Many people are never told they need to do that 2. Many people forget occasionally (we're human)
Slightly disappointed that the namespace, classs and initialisation method don't have emoji names themselves. That said... 🐘😊👍
There's various wrapper object things out there, string wrapper classes for instance.
I still want printed books.
Codecourse on Youtube has some nice tutorials: https://www.youtube.com/user/phpacademy/featured
Seriously. Just because PHP is a very forgiving programming language does not mean one should be a lazy programmer.
Github is not easy to figure out and can be a pain in the ass. Don't force your tutorial followers to use it, that's just stupid and selfish. It would do perfectly well with its own website or some other easier to use medium. Seriously.
&gt; So, what does it matter that Symfony is orders of magnitude less performance than some micro libs in compiled languages? The problem is not that Symfony is orders of magnitude less performant than some micro lib in compiled languages, the problem is that anything based on Symfony components is orders of magnitude less performant than everything else in the php ecosystem. 
They sound like point n click site builders, not developers.
... If course this is not going to work. You save your CSS files based on their index in an array, so every time you add one with the same name you overwrite it. Here is a working version: http://pastebin.com/74rtq4KX
Current PHP $string = 'foo bar' $array = explode(' ', $string); // array('foo', 'bar') --- With Objects $string = 'foo bar'; $array = $string-&gt;explode(' '); // array('foo','bar') --- Current PHP $array = array('foo', 'bar'); $string = implode(' ', $string); // 'foo bar' --- With Objects $array = array('foo', 'bar'); $string = $array-&gt;implode(' '); // 'foo bar' --- With Objects, Python Style. $array = array('foo', 'bar'); $string = ' '-&gt;implode($array); // 'foo bar' 
You've missed the point. Only people who want to contribute to the tutorials would have to use GitHub. (And yes, it is a great collaborative platform, especially when you consider all the free add ons you can get like TravisCI.) People who just want to read the tutorials can do so on a nice shiny website that is automatically built from the latest GitHub data.
The python style is possible with scalar objects extension by Nikic in PHP 7, but it wont work on PHP 5 since the old zend parser has limitation. 
Not all php functions are high order functions, that's my point. For example, why not make `shuffle` as high order function... I think that for multi-paradigm language like PHP this would make a lot more sense rather than OO-style API (this could be done as syntax sugar).
&gt; Not all php functions are high order functions, that's my point. For example, why not make shuffle as high order function... Even in functional languages, "not all functions are high order functions". Some have no reason to be high order. As for shuffle(), the high-order version of it is called usort() in PHP.
Wow. From my experience with it, it's the opposite. Jeffrey way does incredibly high quality and informative videos that appeal to all experience levels. Can you give examples of why it's low quality? 
Short answer: backward compatibility. Long answer: until 2.3, migrating from a version of Symfony to an upper one was hard because each version introduced a Backward Compatibility break. Hard to update means leaving developers and projects behind, which is bad so they decided to prevent this to happen (as much as possible). PSR-7 was made official this year, so changing HttpKernelInterface to use it would mean making all current symfony projects imcompatible. Instead they decided to keep it this way. Zend Expressive has been created with PSR7 in mind since the beginning, so they don't have this issue.
&gt; There's also, shamefully, the PHP manual's tutorial, which is awful and everyone knows it, but nobody has stepped up to rewrite it yet. The tutorial on php.net has been largely left untouched since the mid 00's ([blame](https://github.com/salathe/phpdoc-en/blame/master/chapters/tutorial.xml)), and could certainly use a whole lot of love. I am totally open to inviting a collaborative effort to bring it up-to-date for the PHP of today, hopefully there is interest in such a community task. If that's something anyone here is interested in, let me know (message here, or mail salathe @php.net). P.S. There was one similar attempt to rewrite the tutorial a while back (https://github.com/PeeHaa/php-net-tutorial) but that didn't really get anywhere.
You should use prepared statements.
I want to. I'm doing a quick job for a local hosting company. The client wants a cheap and quick user management system put up which he will eventually replace with a better one. I don't want to replace the site since I'm getting close to finishing. Once I am done this job i am going to tell the hosting guy that I need a break to learn some better practices. Until then, would this work?
**NO, FOR GOD'S SAKE NO!** 1. Get rid of `strip_tags`. It's completely wrong. 2. Get rid of `htmlentities`. It's completely wrong. 3. Get rid of `stripslashes`. It's completely wrong. 4. Don't name your function `sanitizeString`. It's wrong. There is no such thing as generically "sanitizing" a string. When putting data into a database query, use prepared statements, or if you insist, **escape** it with `real_escape_string`. When outputting data to an HTML page, **escape** it with `htmlspecialchars`. That's it. End of. (AllenJB83 said this in a more patient way. But such borked "sanitization" attempts seem to infect the PHP world like a disease, and my patience for them is exhausted.)
I got it from [this](http://shop.oreilly.com/product/9780596157142.do) but I may have misunderstood it.
Self recognition or who...?
Usually I'd say *Good, fast, cheap. Pick any two.* But prepared statements are really no additional cost!
Nobody has pointed out the global variable? Globals are evil. Don't use them. Ever. http://programmers.stackexchange.com/questions/148108/why-is-global-state-so-evil
Prepared(really parameterized, but prepared statements are usually assumed to have been parameterized) statements are easier. They take less time, and you don't have to think at all about escaping(sanitizing means something else). The [MySQLi extension supports them](https://secure.php.net/manual/en/mysqli.quickstart.prepared-statements.php) so no major rewriting is necessary. The time you've wasted trying to do it wrong is more time than it would take to learn and switch to prepared statements. The additional time you'll waste trying to fix it is also likely going to take longer than just learning to do it the right way. They make your life easier, they mean you don't have to even think about SQL injection or escaping anymore. Yes it might be new to you, it might sound hard, it's not. They're super easy, just a slightly different pattern than you may be used to. Your solution is not only wrong, it mangles the hell out of the incoming data. What you put into the database should be the same thing that comes out. Any additional logic needed for display(e.g. htmlentities) should be done as part of the display step. If you pass everything through htmlentities before putting it into the database you've mangled your data, you have something suitable for display in an html page but corrupt for any other use. Use prepared statements. Use prepared statements. Use prepared statements. 
Honest, and potentially stupid, question, but why are globals bad but singletons ok?
"Legacy" code is still newly written routinely in 2015.
Get/Post/Cookie
Many people consider singletons bad as well, but they are a bit easier with code re-use and testing than globals are.
Singletons prevent you from creating some kind of object twice, which is not that useful, and introduce global state and break the dependency inversion principle, which is very very bad. Do not use them, use dependency injection instead.
I can't see much use for them in php, but I'm working on a multithreaded java app that uses a singleton for the DB connection pool so that all threads can quickly grab a connection without needing to instantiate a new connection per thread. I can't think of any way to do this without using a singleton. Thinking about it a little more the only time I've used them is for service-type objects and never to store data. Maybe that's the difference?
you may want to move to another language like c#. Php strings are not objects. You can also move to python or ruby but if you want CamelCase mnthods c# is the choice. Method naming on php does not follow any convention neitheir on python or ruby fwiw. 
Here's a scenario that I'm currently working on where I'm using singletons. Maybe you can think of a way to remove them, but I can't. I have a Java web server which receives an HTTP POST containing data to be stored in a database. What I've done is configured each http handler thread to get a singleton Queue object, append the post data to the queue, and return success to the client. I have another thread whose only job is to process the queue and write the data to the database. The queueprocessor thread uses bulk-inserts which are ~100x faster than simple inserts which is why I went this route rather than having each http processor thread insert the data directly. I can't use dependency injection because the http processor thread has a signature which can't be altered, and I only want one queue to be shared across all of the threads. I can't think of any other options 
Could you imagine hackers obfuscating their code with this?
memory usage &amp; unnecessary complexity... sure use one tool for everything if it's what you need, but be sure to note that it won't improve your programming to get tunnel vision...
Do you instantiate the http processor thread youself ? If yes, I guess you could use other injection techniques, like for instance, setter injection. BTW, why can't the http processor thread signature be altered ? Can't you inherit from it on a custom class and change the constructor to fit your needs ? Maybe tell me more about this "http processor thread" you are using. Does it come from Java ? A java library / framework ? 
So what?
There are many books that tell you bullshit. Better get rid of this one. 
No.
So presumably you want to avoid the sql injection vulnerabilities that come from using escaping with string substitution. Using PDO may introduce those vulnerabilities without you realizing.
There are no sql injection vulnerabilities that come from using escaping.
Why not? I give you a code that is using PDO in emulation mode and you break it. 
Why did you ask me if I wanna bet then?
Sure, I'm using Jetty as the http server so I'm limited by the methods that they provide. A simplified version of my main() function looks like this: Server server = new Server(); //New Jetty Server server.setHandler(new RequestServer()); //This is the Object which is called to handle any requests server.start(); server.join(); The RequestServer() object is required to have a handle() method to process the request the work. RequestServer.getQueue() is the method that returns the queue singleton @Override public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { //Do the work of processing the data and adding it to the queue JSONArray payloadArray = jobj.getJSONArray("events"); synchronized(RequestServer.getQueue()){ for(int i=0;i&lt;payloadArray.length();i++){ RequestServer.getQueue().add(payloadArray.getJSONObject(i)); } }
Because you aserted that "There are no sql injection vulnerabilities that come from using escaping." when quite plainly there are. http://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string/12118602#12118602
I use PHPStorm, after trying out Netbeans, Eclipse + PDT, and Sublime Text with a metric fuckton of plugins to make up for the fact that it's not a real IDE. PHPStorm is the only one that was actually able to make sense out of our ass-backwards code layout and provide proper hinting for everything.
Well, if you are so sure, why don't you accept my bet then? I don't need ignorant links. All I want to know is why did you ask me if I wanna bet. And, just to let you know. I don't *assert*.
This wasn't even OK in 2009.
I asked if you wanted to bet on string escaping leading to sql injection vulnerabilities, you then offered to bet on something else entirely. No I do not want to bet on whether your code has sql injection vulnerabilities. I want to bet on string escaping still allowing sql injection vulnerabilities mysql_query('SET NAMES gbk'); $var = mysql_real_escape_string("\xbf\x27 OR 1=1 /*"); mysql_query("SELECT * FROM test WHERE name = '$var' LIMIT 1"); Is an example of string escaping with vulnerabilities.
Pardon the self promotion, but [I wrote this a few years ago](http://stackoverflow.com/a/3126175/168868) answering someone else's similarly misguided question. Your goals are correct, but the way you're going about them will only cause you pain and suffering. You have to use the right kind of escaping and/or quoting in the right place at the right time. Combining them will make your application worse, not better. Also, never, ever, ever, *ever*, *ever*, **ever**, ***ever*** use `stripslashes` or `addslashes`. They are ***always*** the wrong thing to use. Always. Period. No matter what, with zero exceptions. If you find yourself having to use them, then something else is going horribly wrong with your data and you need to fix *that* problem. 
Why would you drag this piece of code here? It has nothing to do with PDO, which you were ranting about. It has nothing to do with proper escaping either. There is no problem with escaping. The only problem is with some ignorant user who wrote it. 
This one should be up to date [https://codedoc.pub/](https://codedoc.pub/)
Well poor Anthony just wanted to make things spicy. He knows the right thing, but he just fooled people to give a little boost for the article. Nobody would read if there is no real vulnerability. You have to scare people off to make them listen. So he cheated. And I still claim that PDO is invulnerable in emulation mode.
Oh hey look, he ported it to PDO as well $pdo-&gt;query('SET NAMES gbk'); $var = "\xbf\x27 OR 1=1 /*"; $query = 'SELECT * FROM test WHERE name = ? LIMIT 1'; $stmt = $pdo-&gt;prepare($query); $stmt-&gt;execute(array($var)); 
I always ask "What's the difference between an interface and a abstract class?"
But the question was not "which is underlying technology under most ORM's", silly ;)
PDO is not a SQL abstraction layer, just a connection abstraction. Using it still requires you to tune the queries to the underlying SQL dialect of the connected database.
Oh, you just don't understand what a *hyperbole* is. First example is related to only your "Everything is valid pdo calls and SQL." statement, which was emphasized below. It explains, why "valid PDO calls" makes very little point here. I hope you can get it at last. If not - nevermind, it's not that important. Understanding is more interesting anyway. You have been shown the proper usage, but called it "workaround". And right after that confessed that you still have no idea what is the nature of the vulnerability you were ranting all the way around :) 
&gt;Also, never, ever, ever, ever, ever, ever, ever use stripslashes You know, unless you find yourself needing compatibility with php versions older than 5.4 in which case you need to be checking magic quotes gpc and using it on every value coming out of GPC.
They're literally the same thing, in terms of global state. The only difference is scope/organization. Heck, you can implement singletons with globals, if you're so inclined (but please don't)
&gt;It explains, why "valid PDO calls" makes very little point here. valid PDO calls makes very little point here because there wasn't an improper usage of PDO, PDO may be broken in its defaulting to emulating parameters but the vulnerability comes from how the characterset is set in mysql. &gt;And right after that confessed that you still have no idea what is the nature of the vulnerability you were ranting all the way around :) I know exactly that it is a character set mismatch from using SET NAMES. There was no "confession" there your "proper usage" is in fact a workaround, the proper solution is to use parameterized queries, anything involving escaping is a bad idea as outlined in this thread. You kept dancing around avoiding naming the vulnerability despite my asking you multiple times. Hence why I say you don't seem to understand the vulnerability at all and you responded with your own broken code that was totally unrelated to the vulnerability. Every example I pasted used escaping, your example just simple used dynamic sql from string escaping.
I wouldn't call a bomb a feature that is scarcely needed. The real power of PDO is totally different. 
Ok, it's no point to continue then, as you just don't understand what you read.
&gt; WHO THE FUCK ARE YOU??!!!!!!! &gt; redditor for 1 month So colorful. 
I like AuraSql. It's just PDO with some sugar on top.
&gt; When outputting data to an HTML page, escape it with htmlspecialchars. Yes, but be sure to put the output encoding and other optional parameters there (and have them *match the page*) otherwise it's not actually safe. And even still, this is only accurate for the innerHTML of a tag. You need to escape attributes differently, and CSS or Javascript values differently still. It's complexity like this why templating tools are popular in PHP, despite the fact that it's basically a templating language at heart. 
Yes, that's one of real benefits. Not really a big deal by itself, but surely a drastic improvement if compared to mysqli. Still inconvenient though. You can't run a prepared SELECT query in one statement, but only DML queries. It's a pity.
&gt; that's simply not its purpose Really. I see. So you believe that a platform which is meant for widespread collaboration isn't suitable for a community project dealing with text which would require widespread collaboration? Wow. That's.. That's just stupid. &gt; A well designed blog is the right vehicle, hooked into youtube for video and tied loosely to github only for code examples. That's the most stupid, and 90s retort I've ever heard. The Blog is dead, let it die. Next you'll be talking about how the most appropriate vehicle for content management is fucking WordPress. &gt; Anyone hoping to develop the best PHP tutorials will do well to minimise friction, and cater to the audience where they are at, not where they are expected to end up. Experienced developers tend to forget how steep and numerous the learning curves are for true beginners. I see, so putting the tutorials in an easy to view, no-nonsense manner is somehow too difficult for the "true beginner?" I mean Jesus Christ, if you can use a web browser you can view the Github project and click on links. How is this difficult in __any__ capacity? &gt; minimise friction Yea. That's what I'm doing. Using pre-existing platforms, which are already incredibly wide used, easy to access and navigate. Good for contributors and readers. &gt; This is how commercial tutorial sites work, and there is a solid reason for that. 1. No it's not. That may be true for a few, but the __vast__ majority do nothing even close to this. 2. Even if it _were_, who gives a shit? This isn't a commercial endeavor. It's a community tutorial repository for the community.
Theoretically, it makes switching to a different DB engine easier. In practice, you'll never even need to, but you'd still need to do a ton of testing. I like the idea of a DBAL on paper, but they all tend to be leaky abstractions. There ends up being some weird thing that's unsupported because it's specific to one connection type. In a simple CRUD app it won't matter, but they show their weaknesses as applications become more complex. Wouldn't generally recommend converting *to* one, but it is often a decent approach for a new project.
I could, but I don't feel like arguing with a stranger on the internet. You win, have a cookie.
Doctrine is a MONSTER. It really lets you switch databases with one option in configuration, but boy, what a monster it is. In fact, in pursue for this *fata-morgana*, you are bound to use even the distinct SQL flavor called DQL. I doubt that ease in switching databases really worth the trouble. Luckily, Laravel has it's own ORM called Eloquent, and to me it's way more sane solution. 
Oh, that's not arguing actually. It's just understanding what are you talking about. Really worth the trouble. You live you learn. It's time to learn.
Yes, with Doctrine it's possible. But the question is, would you ever need it, and what would it cost you.
[Relevant manual page](http://php.net/manual/en/types.comparisons.php)
The problem with "queries notwithstanding" is that once you've tasted some DB goodness like Postgres or Oracle, it is hard to go back to MySQL. No JSON? No CTE? Windows? Filters? No Array / Path types?
This is great to see and I'm looking forward to reading it when its done. On a similar vein, I've been using PHP on a project using Logistical Regression and PHPs speed or lack thereof hasn't been an issue at all.
There are many ORMs beside Doctrine. But Doctrine is only one that can be really used to switch databases in one click. At a price of neglecting all the DBMS-specific features.
Mysql now supports the JSON data type. 
&gt; Luckily, Laravel has it's own ORM called Eloquent, and to me it's way more sane solution. What exactly makes Eloquent a "more sane" solution over Doctrine?
You need to pass the connection as the first variable. An active connection is required to use the the function. Try this: if ($_POST["signUp"]) { $username = $_POST["username"]; $password = $_POST["password"]; $con = mysqli_connect($server,$user,$pass,$name); $username = mysqli_real_escape_string($con, $username); $password = mysqli_real_escape_string($con, $password); $password = password_hash($password,PASSWORD_DEFAULT); $res = mysqli_query($con,"INSERT INTO users (username,password) VALUES ('$username','$password')"); $message = 'Your account was created.'; } http://php.net/manual/en/mysqli.real-escape-string.php
&gt; I understand this is being deprecated in PHP Not is being, has been, for some time. It's being _removed_ from PHP.
It's in the docs: http://php.net/mysqli_real_escape_string See "Procedure Style"
Any examples of some of the bad videos you mentioned? I tend to recommend Laracasts to people that ask. 
I'd also recommend using prepared statements (PDO supports this as well as mysqli) for this sort of thing as you don't have to remember to call functions like these; the tooling takes care of it for you. It also limits the possibility of mistakenly opening up a security hole in the future through accidental removal of sanitization functions. Something close to the following would likely suffice: if ($_POST["signUp"]) { $username = $_POST["username"]; $password = $_POST["password"]; $password = password_hash($password,PASSWORD_DEFAULT); $con = mysqli_connect($server,$user,$pass,$name); /** * Create a prepared statement * @see http://php.net/manual/en/mysqli.prepare.php */ $query = "INSERT INTO users (username,password) VALUES (?,?)"; $stmt = mysqli_prepare($con, $query); /** * Bind the username and password, as * two strings ('ss') to the statement * @see http://php.net/manual/en/mysqli-stmt.bind-param.php */ mysqli_stmt_bind_param($stmt, "ss", $username, $password); $success = mysqli_stmt_execute($stmt); if ($success) { $message = 'Your account was created.'; } $message = 'Something horrible happened and the world is on fire.'; } This is called a "prepared statement". MySQLi has both a procedural and object-oriented interface for doing prepared statements (and pretty much every other feature it supports). The object-oriented interface is a bit less "wordy" in my opinion. Please forgive any syntax errors... I really hate typing code into Reddit text fields. If you use this, make sure you understand what is going on and if you don't, feel free to ask questions and I (or anyone else) can help answer. /edit formatting
mysqli had prepared statements? (not suggesting anyone should be using anything other than pdo tho...)
Does oracle have an autoincrement feature for primary keys yet? 
Dude... as an aside, I hope your night got better; truly. I'm catching up for the day and you've just been shitting on everyone's day. Have a good one, buddy. Cheers.
I used php -a once and never again, you should try psysh, the missing REPL of php
Oracle has sequences, which I'm sure have existed in Oracle for quite some time. If you want it to be automatic just set a trigger.
Actually they added it in 12c, but it did take them until 2013 to pull their heads out of their asses and realize many coders dont want to become or employ a dba to write a simple crud app.
Meanwhile in the real world people work with what their employer gives them instead of committing homicide.
True but MySQLi only has positional parameters where PDO has positional and named parameters.
There are still people supporting versions of php where magic quotes gpc is enabled. As I recall there was one of those such people arguing against one of the changes for php 7 (removal of the deprecated named constructors) because it would make his job of supporting php 4 installations more difficult to share codebase with php 7 installations.
I just tried it. It has the same issue with Danish letters. Strange. 
So what was the long/short of that chain? Are emulated prepares safe in PDO? I use them because it allows me to repeat parameters.
The size.
Not everyone's I'd say. Your recent replies are based on the strong prejudice you have developed against me. But objective observation would easily prove otherwise. Yes, I like to pick on the people's superstitions, I have to admit. And I don't like the way that article in question gained its popularity (don't take me wrong, Anthony did many great things since then). But you can't deny the facts (if you have the courage to face them).
Mysqli "had" prepared statement since beginning. It's the way they have to be used out of the box, which is questionable.
&gt; I'd also recommend using prepared statements (PDO supports this as well as mysqli) for this sort of thing as you don't have to remember to call functions like these; the tooling takes care of it for you. It also limits the possibility of mistakenly opening up a security hole in the future through accidental removal of sanitization functions. You still need to remember not to inject your data in the query but bind it later, so there's nothing "automatic". I've seen people use prepared statements and injecting raw user input in their SQL string and saying "oh I'm protected because I use automatic prepared statements". This branding of "magic" in APIs should be avoided IMHO, because some take it at face value. Additionally, I don't buy the argument "you might accidentally strip your sanitization functions". First, they're not sanitization functions, they're encoding, escaping or even you might call them "interpolation" functions. They don't sanitize anything. It's an important conceptual difference. And second, lots of accidental things can happen all over your code, even with prepared statements, such as injecting an identifier from user input (which prepared statements won't help with, as you can't bind identifiers). Instead of reducing "accidents" by changing your API usage, probably the larger lesson is to organize your code properly, such as using query generators that prepare the query for you, instead of manually assembling queries everywhere (prepared or not).
Sequences. Which mean you can have multiple auto-increment and auto-increments shared by multiple tables.
I strongly discourage making every setter a direct write to the database. This makes your Application harder to scale (more requests to the database. Also network times add up much faster.) Having an explicit save function is not the worst (see active state pattern). Actually it's a definitive improvement to having every setter write to the database. It beecomes a lot easier to test. Though you will have to think of something because of save (), which won't be straightforward to test. Repository pattern is a reasonable alternative, but hardly the other end of the spectrum. I'd consider something like CQRS at the other end. Like /u/CQRS already said, it all depends on your needs. If having every setter write is good enough performance wise and easy (or easier) to wrap your head around, stick to it. 
Move languages, rather than "implement a lightweight wrapper", or "don't concern yourself" seems like moving house because you don't like the colour the neighbours painted their bathroom... PHP doesn't force you to not make managed objects; but PHP has had the new PHP5 style of objects for over a decade now...
I think this should be paired with a great XLST tutorial as it is something I'd guess a lot of programmers would find useful, but don't know about
Well, the point of the comment you replied to was "prepared statements **with no stress**". 
And if you are even lazier there is probably a plugin out there so you don't have to change anything.
well, if you consider named parameters less stressful, then ok, i guess? ;)
Atom (along with Sublime et al.) is a text editor with limited IDE-like functionality. Basically, it provides syntax highlighting and minimal auto-complete support, but IDEs have proper, context-aware auto-complete, debugging support and more.
On your first example, I'm happy for 2 to have a method called persist rather than save - that seems fine to me.
I've never been keen on this question. Contrasting them directly feels odd. I'd prefer to ask a set of questions like this and see what the candidate comes out with: 1. What's an abstract class. When would you use one? 2. What's the interface. When would you use one? Gives a much better picture of their understanding and how they use them both.
I think Misko Hevery separated Singleton (the pattern) and a singleton object (a object which lives only once). If you want a object which exists only once, write a factory for it which caches the created object and returns it every time. Then the cached item must be static (otherwise you could instantiate the singleton twice by instantiating two factories). The most dependecy injection frameworks I know offer a possibility to define if the injectable object is a singleton or generally assume that all injectable objects are singletons (if not stated otherwise). Please note: a singleton has none of the problems of the Singleton pattern regarding global state and testability.
What would be a satisfying answer for you?
Thanks for the link OP, good find. Can anyone recommend any of the PHP books? Any level, really.
So, basically: $ids = array_map(function ($obj) { return $obj-&gt;getId(); }, $objects); or even $ids = array_map(function (ObjClass $obj) { return $obj-&gt;getId(); }, $objects);
Oxymoron
I'm simply pointing out that there's plenty of code that will break if you change mysql_ to mysqli_ and try to call it a day. But it's not a pointless function; it is handy for one-step retrieval of things like select count().
Larry was great.
please dont think that these very technical questions help you get good candidates there are a lot of psychological studies that show that these kind of interviews usually are as effective as rolling a dice. - If you are searching for seniors - come in and work with them for a day or two instead of asking stuff - if you are searching for juniors - look for enthuiasm etc and belive in your companies ability to mentor them to be a good coder, you dont need to look whether they actually code good - if you are afraid of that, rather have them come in for a day or two and work with them. "knowledge questions" are usually just bad in interviews, especially cause I could answer all of those - and i am not even a good coder, i just read a lot about bad interviews and help people to prevent doing them. if you have MANY applicants for one job, then those questions can be good if made online and you give every applicant the except same questions. this is the only place where such questions can be good, as a preselection before actual face to face interviews. Keep in mind: a lot of people REALLY suck in interview situations ... i employ AWESOME coders who would have utterly failed to answer such questions in interviews, cause they are stressed when sitting in front of 3 people having to prove themselves etc. you might be sending away good candidates with those approaches. also a lot of these knowledges can be googled and then understood within minutes - if a coder is really good in learning / being fast at reasearching knowledge, thats a good asset. 
Nah man. Fuck Larry.
You really want to check if the value is larger than 0. [steam sale](http://i.imgur.com/fsOGfvf.png)
the talk was about mysql_result() function. 
Which is why I'm posting this here. I'm not the world's best dev, but I'm not the worst either. If I learned something today, I'm sure someone else can benefit from it.
Sure it will work, just not on PHP 7.
I figured that was a bit of a leap ;)
Experience is how we learn best, so good on you for asking.
Thanks!
I also recommend it.I use it all the time now
eeeugh some of the php questions on these "awesome" lists are awful: "Q) Which will execute faster POST or GET? Explain" "Q) What is the difference between compiler language and interpreted language? A) Interpreted language executes line by line , if there is some error on a line it stops the execution of script. Compiler language can execute the whole script at a time and gives all the errors at a time. It does not stops the execution of script ,if there is some error on some line." 
This is all beside the point. All they said was that there is no `mysqli_result` so doing a quick find-and-replace won't work. There really is no need to be a dick to this person.
Confused_gent asked for keywords in order to educate himself. The most common patterns are (There are more) - Active State Pattern - Repository Pattern - CQRS - DAO In your example number one is the odd one. Numbers two and three make saving explicit. Wether it's SQL, an XML file or an array. All four patterns listed above make persisting changes explicit. Calling active state a bad oop pattern because of that is humbug. &gt; This is not about performance, which as I suggested should be taken into account, but we know nothing about the use case. It's about API design and whether ActiveRecord, which is what -&gt;save() is, makes sense in an OOP design at all. A design that does not consider all constraints is no design at all. Design is all about tradeoffs and making the least horrible decision. So how about talking about tradeoffs? OPs design is easy to use (low cognitive load) but may not scale well and is not easy to test. It is reliable in a sense that atomic updates are made. Active State is also easy but the missing separation of concerns might lead to an abundance of unrelated methods. However it is easier to test than OPs design. CQRS is very performant and easy to test. However it's not as easy to use. Repository pattern is easy to understand. The model is easy to test. A bit overkill in very simple cases. Personally my goto solution in combination with specifications. (Sorry for the multiple submits. The submit button is huge in Baconreader)
&gt; But by no means mysqli is intended for the direct use in the application code. [citation needed] &gt; You have to use a higher lever abstraction layer built upon it. &gt; &gt; Only if you are afraid of new technologies (ORM) and don't want to make your own database layer, then PDO is your choice. This is nonsense of the worst variety: 1. Being afraid of anything has nothing to do with this. You're being a huge royal dick. 2. ORM is not many technologies but one, and it's not a new one by any means. 3. The notion that you can't use anything but PDO if you don't want to build your own database layer is nonsense. It's not a good idea, but you *can* use MySQLi without building a database layer, saying the opposite makes no sense whatsoever. Looked at your article, and the very first sentence is: "There are many tutorials on PDO already, but, unfortunately, they all written by people who have no clue." This is all I needed to read to close the tab. I used to work for someone like you, and I hope you're not in a leadership position where you work.
Best: good listeners, motivated. Worst: know-it-alls, NIH-syndrome. Pretty much the same story with mid and senior level developers.
This. I cant even properly express in words my loathing for video based resources. If its truly lecture-like in nature (like a talk at a conference) that that is fine. But if its an actual tutorial or "cookbook" type of content then it is literally the worst of all mediums IMO. I also realize not everyone learns the same, and some people love video, but I urge anyone who wants to produce one to also create a written transcript.
W3Schools is almost [the 'poster boy' of bad web development resources](http://www.w3fools.com/). Among other things, though, it doesn't really talk about OOP or namespaces, which means beginners are locked out of the modern ecosystem, and doesn't seem to warn you about XSS (or XSRF) vulnerabilities. At least they finally stopped using mysql_, though, and tell you to use mysqli or PDO with prepared statements.
I think it would be worth looking at this line in the README: &gt; This is not meant to be used it its current state (thought it can be). With that said, though, I think non-anonymous gists are more useful. Someone using this will probably have a GitHub account or would otherwise make one in the future, and this way they can keep track of their gists, and they maintain ownership so they can edit them, make them (not) private, delete them etc. later.
Explanation for SSL cert error: &gt; The pear webserver died. Christian Weiske is doing the move. He's &gt; temporarily using his cert. ([source](http://news.php.net/php.internals/89495))
&gt; "Q) Which will execute faster POST or GET? Explain" depends on cache locality ;p
An interface is an abstract class for a language which lacks multiple inheritance ;) ^(IIRC, interfaces are implemented in the PHP interpreter as abstract classes, actually)
Asking about minutiæ like this is not going to assess how good the candidate is.
&gt; When done right it also lets you write code that looks and acts very procedurally so you have choice and it costs little to nothing you weren't already spending on an interpreted language like PHP which already has to do all sorts of spooky magic to work anyway. Hey, you're already working hard... Here have some more work so my brain can remain empty... &gt; And even if it has some speed costs: the people working in the problem domains PHP exists in have already demonstrated their general desire to have OOP magic because a huge amount of web dev is the reapplication of the same things with ever so slightly variations again and again. There's a reason the most popular Laravel frameworks are using objects and have objects like HTTPRequest. It works well, it makes sense, it lets you have magic that isn't to hard to track down and explain with the ideas like magic methods. You heard it here first folks... We need MAGIC, not stable, proven code, MAGIC is the sauce that helps the web work... Of course there are not books written to try to combat MAGIC, but the witches, wizards, warlocks and mages are clearly here to stay... &gt; Andbis that added complexity? Sure. But guess what? That's complexity you end up having in a similar project just organized differently. OOP takes away complexity and adds it elsewhere into what can be called a more reasonable way of distributing the complexity or, as preferences and suitability to the current problem dictates, it could be called less reasonable. Stop re-implementing PHP core in your projects and it adds 0 complexity... Very rarely will this even matter; but assuming it does; stop asking PHP to change for you and your gang of friends; release as an extension (has been done linked in this thread). I am sure if it becomes popular someone will push an RFC, but most people won't give a s##t, it currently just works... sure maybe at some point in the future PHP will become Java or C#, we will have to bring in the system namespace to output to console, but it sure is doing a lot of d##k holding right now, so I'd rather we got new shiny's (which seem to mostly be objects anyway)... &gt; OOP can do that, it can do it readily, and it's the demonstrated belief of most programmers in this problem domain that they want largely OOP systems to work with. Again, I'm all for OOP where it makes sense, but that is not everywhere! Array functions and primitive data-type functions do not fit the use-case for OOP. I'm sorry you don't agree, or that JS, C#, Java and ObjC have all convinced you this is a fantastic idea; and I am not saying I am #1 `programming badass!`, although I've had compliments to that effect from clients; I'm simply telling you that you are wrong, and now admittedly since you are being a bit aggressive, yes I'm taking the p##s a bit
+1 :) Having just spent the weekend implementing friend classes in PHP as a learning experience, I can vouch for the "lot has changed". In fact, that's gotta be an understatement. This is not founded in technical familiarity with `ext/mysql`, but I would bet the amount of work to patch it for phpng and compile / distribute it far outweighs the work required to move an individual PHP application to MySQLi or PDO (or anything on top of those two). 
:+1: agree 100%. Communication failure on my part. Sanitization, filtering, escaping, etc. do have specific meaning in this domain and I abused the term for purposes of communicating intent for an assumed layman. Sorry about that; the perils of assumption. &gt; Instead of reducing "accidents" by changing your API usage, probably the larger lesson is to organize your code properly, such as using query generators that prepare the query for you, instead of manually assembling queries everywhere (prepared or not). This can't be over-stated. Properly structuring source is a better strategy than quibbling over specifics of "do I use MySQLi, PDO, etc." because at the end of the day, it's an implementation detail that shouldn't matter. Advice to use reasonable abstractions of these implementation details is important. Not as an argument against the statement, by any means: I find that there is a gap between long-term outcomes (restructure source) and immediate need (OP's scenario). Threads like this are valuable to show long-term context (from valuable opinions such as yours) as well as shorter-term stepping stones towards that long-term outcome. OP, if you read this deep, /u/CQRS is correct here, but realize that the journey to improving a codebase is done over time; not a checkbox you get to eventually tick. Let threads like this inform "leaving the code better than you found it" on every visit. Thanks /u/CQRS
Most of the bad programmers I know and have worked with have gone independent... Fucking up the industry one client at a time... There's enough IT work to keep em going till 60 probably.
ALL of the following should be understood in the context of my *dramatic* failure in this instance to provide oversight and guidance. So the blame for all I'm about to say 100% rolls back up to me. That said. I had a dude for a couple years who flat refused to ask questions. His first week I sat him down and explained how relational databases work. I was REAL surprised he got to me without any sense of even that a JOIN is a thing, but he did, and I pride myself on nurturing noobs, so there we were. Somehow he projected a sense of competence--enough to fool me into taking my eyes off him, anyway. He had a project where entity A comes in on a CSV import, gets split out and assigned many-to-many into entity B's. A single A may be split up into many Bs, which might contain splits of several different A's. A 1-to-1 between a particular A and a particular B is possible too. You and I are thinking, okay, parent A table, a child table of A to represent the splits, and a many-to-many via a relator table to B. Boom, still got it. That's *not* what he did. He put the children of A back into the same table with a self-reference to the parent record. For each relationship with B, he mirrored this splitting in the Bs as well. So each A split had a new B split that it's 1-to-1 with. There are no real-world analogues of this split-up B record, a B only exists as a unit. That was entirely because he didn't know how to do better. To do any kind of query at all, you have to roll up one side or the other and/or do a grouped, self-joined query on either A or B, which he didn't know how to do. And so her performed that operation *as an in-code data manipulation after each query*. That was the central sin of a litany of sins that followed. He ended up putting ALL this nutty entity relationship logic into the controller code. (That's right. Not model code. Copied and pasted anywhere the controller needed to walk this schema monstrosity.) 18 months later the thing is a nightmare to get finished. Every bug is a hydra (cut off one head, three grow back). He quits in disgust because he's discouraged and sick of working on it, and a mid-level guy and I hunker down for two weeks to figure out what it's really doing. We end up with something we can hold our noses and ship. The project was something like 12x over its budgeted hours.
I vote that we just keep it down!! DDoS the sucker if we have to! Have them setup a github composer packages for the whole damn lot and retire the accursed pear CLI!!
Right out of high school I was a pretty bad junior. My first real PHP job interview they asked me to rank myself in PHP/MySQL on a scale 1 to 10. I said 7. Nearly a decade later, I still don't know if I'd call myself a 7. But hey, I got the job haha. I remember doing stuff like creating new tables dynamically instead of using relational tables. *cringe*
I have a small question about a particular testing scenario with PHPUnit. If I had a PHP class with a method in it to manipulate an array of data, with an expected outcome, I might use a text file (a 'stub' if I have my terminology correct?) as a source of test data. Assuming this test worked well, but I wanted to have several stubs/data sources, would I create a separate test for each data source? Or just 1 larger test with several sources read in and several asserts?
Late 2015 and still this type of questions popup...sad. PHP will never change, never.
Others mentioned sequences, but it also supports "identity columns" which is identical (pun not intended) to MySQL's autoincrement. I have to give credit where credit is due, I think MySQL was the first mainstream DB to offer auto-incrementing PKs, without explicitly setting up triggers for sequences and so on. It's such an essential feature, it's hard to imagine. But these days, all databases have it. SQLite does, PostgreSQL does (SERIAL column), MS SQL does, and as mentioned, Oracle does. I think MySQL was also the first mainstream DB to have limit/offset for queries (which was patched into MySQL by none other than PHP's Rasmus Lerdorf, because he found it useful for paginating PHP pages that read from MySQL). :-)
Why 
I think so, Pear should have git/composer going as well as their legacy tool for installing. Somebody should fork it. 
&gt; We’ve shown that modeling an Aggregate with Active Record is possible – but it is complex and has a lot of pitfalls. It can become quite messy if you try to treat an Active Record like a traditional object. Active Record is solely about the data whereas objects expose behavior and hide the data. We are fundamentally misusing the Active Record pattern – and the best we can do is to add behavior into what is essentially a data structure. And therein lies the problem with Active Record.
We are talking about beginner tutorials here. A quote from that site you linked. &gt; For many beginners, W3Schools has structured tutorials and playgrounds that offer a decent learning experience. Also it does talk about XSS, its probably not the best description, but again this is for beginners: http://www.w3schools.com/php/php_form_validation.asp And you are right about OOP, seems to be a lack of information on it.
The term you're looking for is "fixtures", and [the PHPUnit docs have a section discussing their setup](https://phpunit.de/manual/current/en/fixtures.html). As for arranging your tests, do what makes the most sense in the context of the text. If each data source is designed to test a particular aspect, then each of those would be an individual test.
Long time user of both approaches: we moved away from ActiveRecord because of obvious reasons explained in 10^15 gazillion articles online. 'Been bitten by the drawbacks in every project that lasted more than 3 months. Also note how the thread also pretty much starts from somebody's AR strategy gone a bit too far.
Note that boolean:if($x) and empty() are opposites on every row. Likewise, is_null() and isset() are opposites.
Was Larry the one with the hat? Or did he have the other thing?
Why use that when you can use http://placekitten.com/ ?
https://github.com/FriendsOfPHP/pickle
[removed]
Or http://placehold.it
My "PHP 7 Migration Guide" e-book is also half-price today: https://leanpub.com/php7/c/cybermonday
You've posted this now *twenty* times in different subs. How don't you see that this is spamming?! Also, right after commenting here, you went on and posted it to yet another four subs. No lesson learnt at all. Edit: typo
Sounds like all those WordPress "developers" who did similar things on that platform. As an actual former WordPress developer who wrote custom plugins and understands how "the loop" works, those types are irritating as hell.
Since this is a Symfony thread, maybe someone here has had this issue with the Symfony plugin in PHPStorm. I can't get it to suggest "Create a template" in the quickfix menu when the template doesn't exist. The cache files it says need to exist for quick fix suggestions to work, exist. Has anyone else had that problem, and know how to fix it?
I have to update a project from 2.0.x. I realize that it might require a partial re-write at this point. Should I got for the LTS 2.8 or 3.0? Any hits/gotchas I should be aware of?
Am I right? 1 - A class that cannot be instantiated and implements functionalities others classes can implement. I would use it when differents classes have some same functionality. 2 - A contract that describes what a class has to implement, but not how to implement it. If I think I may change how to implement the same functionability or if I want to implement in many ways the same interfaz. 
3.0 is just 2.8 without the backwards compatibility and deprecation warnings
hmm, I don't see any problems with the [Security section of The Book](https://symfony.com/doc/current/book/security.html). Which example files are you referring to?
I'm building a software system in PHP for a client operating in a Red Hat Enterprise Linux environment. They have some sort of setup that auto-updates whenever a 'secure' build is available, however that works. The current PHP version of this system is PHP 5.3 (maybe 5.4) and the system is slated for public release in early 2017. I want to build a system that can take advantage of what PHP 7 has to offer, in terms of speed, error handling, and newer functionality, but the client I'm working with is concerned that release 7.0.0 will be an 'unstable' release, and will be too risky to use even as early as January 2017. The other concern is that they will no longer be able to receive these Red Hat updates, since it will probably not include PHP 7 even in 2017, and they will have to continually reconfigure their system. Is it a bad idea to design for PHP 7, even after a year post-GA? Why or why not? Thanks for the input!
When I was checking that section, and [Configure Security to load from your Entity](http://symfony.com/doc/current/cookbook/security/entity_provider.html#configure-security-to-load-from-your-entity) the YAML/XML/PHP examples were missing completely. Yesterday, the default version of the manual was 2.7, and now 3.0, but now both seem to have all the examples again. I wish I had taken a screen shot, because now I think I sound crazy. I almost opened a ticket, until I found it elsewhere. Works now though, so that's good. Edit: [what it looked like before/after](http://imgur.com/a/jjRV5)
Symfony is not just a framework, Symfony means two things: a set of low-level components (e.g. an HTTP abstraction component), and a full stack framework built around those low-level components. Laravel, among many other projects, including Drupal 8, uses only the low-level components, not the full Symfony framework. And even then, Laravel puts its own wrapper around those components to augment or modify their APIs.
I'd say that if there's little chance of ever switching DBs, MySQLi is the better choice. PDO works well, don't get me wrong, I use it every single day at work. I just think MySQLi is more tailored to MySQL. Using the same exact library for multiple DBs there's a lot of compromises in the API, such as methods that only work on certain databases and even with certain drivers for said database, eg: MySQL v MySQL Native Driver. All that said, they're both good choices. I just find MySQLi's interface more pleasant.
I think another variation--one with a bit less collateral damage -- might be [deer-in-headlights paralysis](https://www.reddit.com/r/cscareerquestions/comments/2drkjq/overwhelmed_in_first_programming_job_seeking/cjshwfa).
Cool, right after Drupal 8! 
This is 100x easier? Also it is more likely to mimic the actual architecture. 
There is no query() method in mysql ext. there is a mysql_query() function. And now your question can be answered &gt; What sort of error is going to occur that wouldn't get caught during **mysql_query()** All of them.
Yet another long and windy sentiment from someone who never ever laid their hands upon mysqli :)
Attacking the person instead of the points again.
Am I the only one who can't take a website serious when it's almost pure bootstrap, yet claims "Meticulous Design"? Only looked for a minute to the first white screenshot, found two 'bugs' already: - highlighted line isn't centred - 'Ressources' in the project drawer.
If I'd like to code with my mobile it would be the best choice :D
&gt; Am I the only one who can't take a website serious when it's almost pure bootstrap, yet claims "Meticulous Design"? What's wrong with the site being build on bootstrap? To me the site looked fine. Not apple.com like design but will do as a free software site. Also, screenshots of the program looked really good too. The IDE has certainly modern look.
tbh i think cake was modernized recently... wordpress not anytime soon
they better use plain bootstrap than try to reinvent a design which might fail in half the browsers. I assume the meticulous design is about eclipse, not its promo material (aka it's website). I will give it a go, but I am sure nothing can beat PHPStorm at this time.
&gt; Next Generation Eclipse IDE Neat! &gt; Use your browser to program... ... Oh.
And here I'm regularly adding new features to a webapp written in Symfony 1.2...
Having a bad day man? What's with all the hating that you're spreading?
Looking forward to Silex 2.0 as a result.
Although it's valid point for the *general purpose rant*, mysql extension is a very special case.
Yep, and Magento 2.
&gt; There is no query() method in mysql ext. there is a mysql_query() function. Pretty sure you know what I mean. &gt; All of them. And one single example is...?
Yes you can: https://getcomposer.org/doc/06-config.md#platform
Drupal 8 also requires PHP 5.5.9 (so will probably Joomla 4) It's kinda the new 5.3.3 since this is that's what supported by Ubuntu 14.04. Apparently the plan is to update to Symfony 2.8 soonish, and to Symphony 3 later in the cycle but before the Drupal 8 LTS is released.
&gt; This code produces an entire file with minor changes to fix by hand. Yikes. This seems like a really stupid and complex solution to a nonexistent problem. 
If you like to copy paste 33 files to single file then here you go. I also took bit harder path just to show some PHP stuff nobody knows about.
is it supposed to be released at 3^rd dec? as Anthony said, tag is not a release :)
Correct, this is just a tag. I'm sure the php.net folks will publish a full release notice when they're ready.
Yep, the goal is to release on the 3rd. It may come sooner or even be delayed. Regardless, it's still exciting to see the version tagged in the repository!
Just as I was ready to post the Ron Paul "ITS HAPPENING" gif, too :(
If I was a core developer I'd find those posts by people who monitor the repository 24/7 and report every small change quite nerve-racking. Can a coder tag in peace? It's like the nerd version of waiting for white smoke from pope's chimney. "Breaking news, Jim, I think we're seeing white smoke coming out... Wait, nope, just a cloud passing by. Again."
Are there any new php 7 vagrant boxes available? I currently use scotchbox which is pretty nice out of the box where i can start working instantly. Tried rasmus's php7dev box, can't figure out how to get my local files to sync with the vagrant box (and I don't claim to be a systems admin), now I'm here.
Oh, you know what, I just misread the shorthand. That's my bad, dude, sorry about that. People say concat'ing all the damn time, it's an abbreviation, not a slip. 
2.8/3.0 added the ability to run Symfony as a micro http://symfony.com/blog/new-in-symfony-2-8-symfony-as-a-microframework I'm wondering if and how this will affect Silex development.
Use something like Vagrant + VirtualBox and provision a system that closely match your production environment. You will be able to "pre-deploy" / develop your application on that VM before going into production. https://www.vagrantup.com/ https://www.virtualbox.org/ Your PHP 5.3 production system is probably Ubuntu 12.04 LTS ?
Last time I felt this excited was waiting for the Royal Baby. I can't wait to see if PHP 7 is a girl or a boy.
yeah, even my twitter feed full of this excitement :)
I was going to suggest this as well. If some projects are 5.5 and some are 5.3, time should be invested in learning how to set up virtual boxes to run the code. Honestly it takes maybe an hour or two to learn, you can use https://puphpet.com/ to get your base configurations easily and then install them. It doesn't really make sense having TWO versions of PHP locally and trying to switch between them. I mean, it can be done, but doesn't seem like the smart thing to do if suddenly you needed to support 5.6 and/or 5.4 as well.
And how are any of these relevant to the discussion? You have implied that the following: $stmt = mysql_query("select count(*) from potato"); if ($stmt) echo "There are " . mysql_result($stmt, 0, 0) . " potatoes."; somehow fails to provide an opportunity for error checking that's available in: $stmt = mysqli_query("select count(*) from potato"); if ($stmt) { $row = mysqli_fetch_array($stmt); // what could happen here? A count(*) will either fail on the query or return one result. echo "There are {$row[0]} potatoes."; } And I don't believe you.
What's the point of having all your code in one file? You mention performance, but who's that? you are loading all functions / classes for every request where, in a normal lazy-load-situation, only code that is used would be loaded. loading means cpu-time and memory-usage. You may gain a little bit performance if you don't use an op-cache, but on the other hand, if you don't use an op-cache, performance is none of your priorities. So what's the point?
I am loading not classes so autoload does not work here. I have to include this files to composer autoload files section... Before it was individual function inside each file. So composer will load all over 30 files then you only need one of it.
It can be what you want, it's not strongly typed.
Also available on php.net - http://php.net/get/php-7.0.0.tar.xz/from/a/mirror
&gt;Hey, you're already working hard... Here have some more work so my brain can remain empty... Yes, exactly. Computers were invented to offload work onto. That's their entire purpose. In many problem domains a modern computer can be programmed to handle a lot of the lower-level programming concerns for us; memory management and system-specifics like what syscalls to use and whatnot. It has a cost in terms of computation time, sure, and if you want to write something extremely critical like the avionics for a plane you should probably avoid the added technical complexity, but if you just want to write a website? Or some automated QA testing? Why the hell wouldn't you go with a language that deals with minutia for you? This isn't a recent line of thought, people have been aiming for abstractions and black-box magic for a very long time. &gt;You heard it here first folks... We need MAGIC, not stable, proven code, MAGIC is the sauce that helps the web work... Of course there are not books written to try to combat MAGIC, but the witches, wizards, warlocks and mages are clearly here to stay... Why not both magical and stable, proven code? Magic isn't something we came up with 5 years ago. It's not even something we came up with 20 years ago. COBOL is still responsible for a massive amount of the world's financial transactions because the codebases are battle tested to the extreme and nobody wants to replace them... would you say COBOL has 0 magic? That it's so absurdly close to the machine that the COBOL compiler really does nothing for you but some simple token replacements? No, of course not. COBOL isn't machine code or assembly, and it doesn't ask you to think too hard about about what machine code it'll make. &gt;Stop re-implementing PHP core in your projects and it adds 0 complexity Wat? What does this even mean? Are you implying that PHP core has functions for literally every use-case and that you'll never need to add complexity to handle requests? &gt; Very rarely will this even matter; but assuming it does; stop asking PHP to change for you and your gang of friends; I'm asking PHP to change because it can be better. It doesn't necessarily have to be to OOP, even. As I've clarified already: I'm not a massive OOP fanboy, I just take issue with your assertion it's necessarily more technically complex or prone to more memory usage than PHP already is in non-trivial cases. I'm not arguing for OOP, I'm arguing against your arguments against it because I think it's an invalid argument. &gt;I am sure if it becomes popular someone will push an RFC, but most people won't give a s##t, it currently just works So does COBOL. In fact COBOL has been 'just working' for much longer than PHP. Why aren't you using COBOL? IBM's AS/400 and RPG just work. PHP/CGI worked too. Because you and everybody else have higher standards than being able to function. We not only want something to work we want it to be as easy to use as possible, as performant as possible, as extensible as possible and whatever else. Of course we have to choose a balance between these things because there are trade-offs to be made in systems that can make them more performant but less easy to use, or give better static analysis opportunities at the cost of more boilerplate or inflexibility. I'm saying PHP has already made its choices about these tradeoffs and OOP is both a perfectly adequate fit for what PHP has already made clear it wants to be, and is a soft industry standard for the problem domains PHP inhabits and is even a soft standard in PHP itself given the most popular frameworks. I'm also saying that an OOP model - though not exclusively that one - would provide a better language in many respects than does the current stdlib. Potentially reworking the stdlib into a procedural one with the benefit of hindsight and with the benefit of experience that made some of the more questionable choices of early PHP would also, in my opinion, make PHP a much better language. Where we're disagreeing is that OOP isn't inherently more complex or costly than is such a procedural model because PHP is already all sorts of black-box magic and abstractions. It's a fairly trivial added expense at runtime to do the OOP schtick. &gt;Again, I'm all for OOP where it makes sense, but that is not everywhere! Array functions and primitive data-type functions do not fit the use-case for OOP. So make them functions if you want. Nothing precludes functions existing in OOP systems. But in an interpreted language like Python or PHP you're not really saving an immense amount of resources by instead deciding that list.append(5) is the way to do it instead of append(list, 5) Both will require looking up the same things and doing the same inspection to consider the how to go about manipulating the data correctly. Either can do just fine, it's not like procedural has some amazingly clear advantage. &gt;I'm sorry you don't agree, or that JS, C#, Java and ObjC have all convinced you this is a fantastic idea; Hate JS and Java, never touched the other two. I'm using, and don't mind using, Python professionally right now but I enjoy C and Rust as well. C only has fairly true to the machine structures, Rust is like C with some better grammar and systems for static analysis that it uses liberally and a much broader stdlib which uses an 'OOP' model which is quite transparent about the fact it's really just syntactic sugar around procedures that operate against C-struct style data. &gt;and I am not saying I am #1 programming badass!, although I've had compliments to that effect from clients; I'm simply telling you that you are wrong, Good show of humility.
Symfony does the same, and so does every bigger framework. Even with opcache there's overhead for every (virtual) file you load, by the way. Opcache doesn't mean you start your request with everything pre-stuffed in the request environment. 
You have said before that it is handy for *one-step* retrieval. While your present code is two-step, against which I have no objections. 
Wow, it was tagged 2 hours ago and there have already been "943 commits to master since this tag"! Edit: Thanks for pointing out my mistake. Looking at the list of 943 commits, one can see that they go back to Nov 12th which definitely wasn't within the few hours since the tag.
http://i.imgur.com/7drHiqr.gif
&gt;in fact if you place equally skilled coders side by side and don't allow access to their external libraries, a PHP coder can produce a complex product about 20x faster. That's kind of a silly contest - what is it actually measuring in the language or in the coder? Because some languages have obscenely large stdlibs and some do not, yet both can have equal amounts of readily accessible solutions that work just fine. (Or the language with less stdlib stuff might have a better ecosystem entirely.) I'd be hard-pressed to write a C program that interacts with a MySQL database if we're not allowing non-standard libraries. PHP would make that easy... but only because PHP decided that it'll have a MySQL api in the stdlib whereas C has such apis outside the stdlib although still available. If I have a problem that is most reasonably modeled by a trie structure then a language that has a stdlib trie structure like Rust would have a clear advantage over PHP for no other reason than that Rust decided to have a collections part of the stdlib and PHP did not - and it actually made sense for PHP to not have one! In such a contest PHP is unfairly penalized for not keeping cruft people in PHP's problem domain are nearly guaranteed to never need. &gt;This is so evident that in hacking competitions where PHP is allowed, no other language will be used, because participants already know there will be no contest. Most hackathons for the back end are solely done in PHP because you can hash out your ideas so much more quickly. Wat? Maybe once-upon-a-time but as an organizer for such things I see a lot more JS, Python and Ruby rather than PHP. 
One nice thing aboug homebrew on OS X is the ability to quickly switch PHP version. Not ideal but it works: brew unlink php53 brew link php54 Still a pain to manage all the dependencies ( like pear / pecl packages ).
app/bootstrap.php.cache app/cache/dev/classes.php and all other cached resources in app/cache folder
http://symfony.com/doc/current/book/performance.html Scroll down to this part: &gt; Use Bootstrap Files The document suggests bootstrap files matter only if you have stats enabled, that's not quite the case (the document seems a bit dated, mentioning the now obsolete APC), but in any case, for most sites you want the cache to invalidate itself for a simpler workflow, so stats will be on. &gt; but have you done, or read some benchmark about that? the performance you gain is that small you wouldn't be able to messure that in a real world example, the error-margin is higher than the time saved, at least since i did that about a year ago. I've done benchmarks and honestly it's not that simple at all. In fact, I'm moving more towards PHP FCGI model where I serve multiple requests from one environment load, so that wouldn't even require opcode cache. One of the biggest time eaters in bootstrapping is the code that has to run (DI wiring, object initialization, reading configurations, routes, etc.) to set up your app. Opcode cache does absolutely nothing to eliminate that, the only way to avoid this overhead is to not reboot PHP on every request. In a true shared environment model concatenating no longer makes sense, as you only load files once on startup. But there is a price to pay, as you're effectively eliminating one of the key advantages of PHP as an execution model where state is not shared between requests. It requires more careful development and testing.
Just use opcache. To completly remove overhead just [tune it right](https://www.scalingphpbook.com/best-zend-opcache-settings-tuning-config/) and use something like composer's optimized autoloader. 
We dont tag from master.
So what is the point of posting about the tagging?
I did this recently on a project for work, if you're uploading large files you may want to put the file in a queue then have a command that handles the upload, makes the user experience much better. You can also try handling the upload through the AWS CLI. I found that it works much faster for uploads than the put command from Flysystem. exec("aws s3 cp {$file} {$your_bucket_name} --profile root");
Have I done something to upset you? 
Thanks :D
It doesn't work for me... Just a blank page
If you mean popular as in **most-used** - probably Codeigniter due to it being used on more legacy sites. If you mean popular as in **most-liked** by developers - probably Laravel followed by Symfony. SitePoint [did a survey on this](http://www.sitepoint.com/best-php-framework-2015-sitepoint-survey-results/) a little while back.
Sorry Of : Question Way ?
No there hasn't. The tag was 4 hours ago, latest commit on master is 6 hours ago: https://github.com/php/php-src/commits/master
When I setup rasmus's box the path was set to: `/var/www/html/`which didn't point to anything in my vagrant box folder. I'll give it another try later, but I'd rather just use someone elses box.
It's a bit [enterprise FizzBuzz](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition), no? $sieve = new Prime\Sieve; $primes = $sieve-&gt;getPrimesUnder(10); And also rather Java in that you took a function - some that that maps a set of inputs to outputs - and made it a class. A class only really makes sense for something stateful that needs to manage that state; if all the methods of a class are presumably indempotent - which a prime generator should be given math never changes on us - you're just wrapping a set of functions in a class for... reasons? // Get the sum of our primes. $total = array_reduce($primes, function ($running, $next) { return $running + $next; }); Isn't that just array_sum($primes); ?
http://i.imgur.com/TxD4924.jpg
https://wiki.php.net/rfc/php6 tl;dr PHP 6 has already been used for an experiment with making PHP unicode-friendly, plus also there's a number of books and articles already written that references PHP 6.
I see, that makes sense. Now please let me crawl back to my cave...
I'm not upset, no, not exactly. Sorry for being so vague before. There's a library that provides the functionality you're trying to provide. It does so nicely and succintly: https://github.com/powder96/numbers.php // gets you all primes up to and including 101 Prime::sieve(101); There's no need to have instance variables and all that jazz you've written in your single-purpose class, as the sieve of eratosthenes can be represented as a pure function. All that's needed is a single static method to return the result of the sieve. Additionally, when you write a library, you generally only want to expose as public those methods you actually want people (library consumers) to use. This is called the public API of the library. This means seedToLimit, unsetOne, and filterPrimes should be private. Since you're just providing a utility library, it would be good to mark the class final as well. Also, your docblocks are malformed. A basic docblock looks like this: /** * */ Yours look like this: /* * */ Furthermore, your example: // Get the sum of our primes. $total = array_reduce($primes, function ($running, $next) { return $running + $next; }); Can be accomplished by: // Get the sum of our primes. $total = array_sum($primes); There's no need to use array_reduce when there's a function in the standard library that does exactly what you want.
Probably a string.
There's also [CHH/phpenv](https://github.com/CHH/phpenv) unfortunately I've had issues with PHP &lt; 5.4 due to build dependencies.
Cheers :)
Can't you do this with a single line of bash? What am I missing?
I could see the 6 months of free access offered on the higher tier plans, but there is also a $0 plan (forever) that is available to single users. This would allow developers to try the IDE and then perhaps pursue the 6 months of free access (to gain the collaborative features, etc.). The mobile page looks fine on my end. Is there something more specific about the mobile design you don't like? I'm not attached to codeanywhere.com but I felt like your feedback could have been better. 
Not every float is a result of such arithmetic. Sometimes there's just a range like 0...1, the value is provided by the user, and 0 has a special meaning. If there was any chance that the result could be approximate, this is easily resolved by adding "EPSILON" to your conditions, where EPSILON is a very small number which is a range of permissible deviation that is not semantically meaningful to the result of your check for a given use case (or according to the precision of the used float, which in vast majority of PHP distros is double), for example: define('EPSILON', 0.00001); if ($a &gt; EPSILON) ... But again, do you need this depends on the source of the float and its semantics. Check: https://en.wikipedia.org/wiki/Machine_epsilon
better than that would be to have the user upload directly to s3 via a javascript uploader like dropzone. then you get notification after upload on the server side.
Why is this in /r/php? EditorConfig doesnt work for all IDEs/editors, nor does it support all the possible formatting options across any possible editor.
"You can call me Susan if it makes you happy."
if they could easily swap couldn't they all just swap to the CAD version and pay less? are you not worried about US purchasers doing this?
There should be an easy way to change this, but it will totally depend on the code. Whether pieces of logic are 'abstracted', e.g. only need to be changed in one place only, or if it's more of a 'mess' where everything is all over the place. The fact that you are stating 'keep building a new site everytime I change programmers', indicates to me that this involves a lot of 'custom written code', instead of using existing popular frameworks where multiple programmers are experienced with. There are ways of mitigating 'legacy code' in the somewhat longer term (measuring software complexity, writing automated tests). Hope this helps.
Weird. The default sizes don't work, but if you change the dimensions it does: http://placekitten.com/200/301 .
Yeah that is perfectly fine if US people want to do that. 95% of our sales are from Canada and to be honest the demographic isn't going to be smart enough to swap the currency to see if it's cheaper for CAD. 
yeah i guess the programmer we used last time uses like 5-10 year old code. And the new ones only really use templates from websites like joomla. It's also quite a bit of a mess. I have a php programmer now, im just wondering what the easiest thing i could tell them to fix this, because hes saying the only way to do it is rebuild the website and i can't do that for every programmer. Is there any way to stop the code and have them choose a country then start it back up in 2 directions, one in canada one in us? 
You have to get your programmers to follow standards that the majority of other developers agree on like the recommended PSRs by FIG. http://www.php-fig.org/psr/ Only having knowledge of 5-10 year old PHP is unacceptable and should make you unemployable in the real world.(unfortunately it usually doesn't) PS. I've seen on many occasions overengineering of solutions for the sole purpose of job security as no other developer can easily work on the project after you.
Looking for a bit of advice, I work as a junior for a company. The company itself is amazing and I really get on with everyone I work with, lots of work perks, etc. But I'm a little worried that the work environment might be blind-sighting me so to speak. I'm purely working with legacy code, and the legacy stuff (5.3 and below) isn't really up to today's standards (md5 hashes without salts, mysql_*, etc). There's no immediate sign of change, so I'm sort of worried if I stay there too long then I'll be setting myself behind in where I should be due to only working with outdated technology. I have other offers for other places but I guess i'm on the fence about what to do I know I'll not find a place with the same culture as this place (at least I highly doubt I will) but I just can't help think that I'm not going to advance as much as I'd like skill wise while working there. I'm trying to keep on-top of new stuff outside of work hours but i think its starting to burn me out. This is my first job in the industry so for all I know a lot of places are like the above, and I'm just stressing about this more than I should. Just wondering if anyone else has been in a similar positions and can offer any advice.
&gt; Yes, exactly. Computers were invented to offload work onto. That's their entire purpose. Agreed, but how much workload you offload will impact performance, and if it's not in your business plan, or an objective to "produce unicorn code", you can make trade off's because you are not a machine... &gt; Why not both magical and stable, proven code? Because the two are mutually exclusive at scale... Also COBOL is incredibly clear; after basic it was one of the next langs I learned from a 1.44MB floppy disk; it's a fantastic language that I wish I had got a more in depth grounding in. It also reads incredibly well IMHO in the GNU COBOL variant... Also don't slate FORTRAN, My Radio Ham dad uses a program for bouncing low-power signals off the moon with most of it's DSP logic handled in FORTRAN. &gt; In fact COBOL has been 'just working' for much longer than PHP. As you said people still use COBOL &gt; Why aren't you using COBOL? Because I know other languages better now, didn't have a mentor in COBOL, or FORTRAN; FoxPro died, VB died, QB, DB, ActionScript, AS2, AS3, all obsolete. I noticed inconsistencies and Magic that made me dump C# and the .NET CLR. C, CPP, Java etc take so long, I would have only worked on 4-5 large projects by now... &gt; IBM's AS/400 and RPG just work. PHP/CGI worked too. I only ever used mod_php &amp; CLI, then fcgi.. I don't think I ever used PHP/CGI (I might have, but I cannot recall it, maybe inadvertently when initially learning). &gt; Because you and everybody else have higher standards than being able to function. Of course, but OOP is not on my list of must-have's for every project, I see very little benefit... &gt; We not only want something to work we want it to be as easy to use as possible, as performant as possible, as extensible as possible and whatever else. So as I said, it does all of that now &gt; Of course we have to choose a balance between these things because there are trade-offs to be made in systems that can make them more performant but less easy to use, or give better static analysis opportunities at the cost of more boilerplate or inflexibility. As you go on to point out, in both OOP and procedural / functional syntax you need to pass values (which may be functions, values, or objects); I don't see how this is an argument for anything but arbitrary demands... Demands that would take the core time and effort to maintain, develop, document, etc. All I am suggesting is to not be the fat kid in the candy store rotting your own teeth (time) with garbage that does not provide enhancement. If it does for you, then use / author an ext or library... Just don't drag everyone along for the ride. Next on the long example with examples... &gt; Both will require looking up the same things and doing the same inspection to consider the how to go about manipulating the data correctly. Either can do just fine, it's not like procedural has some amazingly clear advantage. I don't agree; I cannot see how looking up a method could be nearly as straight-forward on object as a direct function call, but in any case, you are not adding something the language is incapable of... Imagine what a mess C would be if Allegro game library or the X window system, (or even Tk) was baked in... If C made those choices, then PHP, Python, other C based languages would likely not be viable for a lot of work, so I'm just stating I think for now at least this should remain an Ext, Library or Framework-specific concern... 
Yeah i was looking at shopify, using 2 different shops, one for CAD and one for USD. the programmer was just saying it was too broken and not worth the time to switch it over. We have 1 product 7 colors and 7 sizes. so 49 items. It seemed like a possibility, but i know very little about php in order to implement it. 
Just don't hire the 1st cheapest (junior) who responds to your ads. Show them what you got (crappy code or not) and ask them "what can you do with this [stuff]". If the first answer contains "rewrite" or "from scratch" he's not the guy you're looking for. All code is crappy. :p Edit1: This doesn't solve your current problem, sorry. But, I do hope it's useful infos. And helps you from ending up in a situation like this in the 1st place, next time. 
I feel like you may be right, i think the last programmer we had, purely just threw in a bunch of trash for no reason. Which is causing this to be much more difficult. And the new one wants to make a new website with his coding, it's getting pretty scary to trust all these programmers. 
If you want to use such a functionality in a production environment where speed is important, you might want to instead use the [sieve of Atkin](https://en.m.wikipedia.org/wiki/Sieve_of_Atkin). Faster than the Erastothenes one. Apart from that (and taking the other comments into account) nice work!
Do you?
Thanks also to [everyone on the documentation and translation teams who have contributed in the push towards PHP 7](https://gist.github.com/LawnGnome/26ce636756b56a59bb03) — we have amazing documentation, and it's only gotten better for PHP 7.0.
It's interesting, and it could be useful if there was such thing as a PHP build step. Perhaps it would make sense if there was an additional step of transpiling your PHP monolitic Func to Zephir, Hack, or a C extension. Even if it wasn't useful at all (which I'm afraid is your case) and you went a long way to solve a problem that's been solved in more elegant ways, you built yourself a tokenizer and a lexer. I'm sure we are yet to see the fruits of such abstractions, of which this example is just a POC.
The PHP that can be taught is not real PHP. Nah, I'm almost kidding. But to write a meaningful tutorial on complex PHP usages one would need to make sure the reader understand certain patterns, structures and types. If one was to write for any kind of reader, then you can't go much farther than "hello world" examples. Also, if anyone knew an effective way to set a link at the top of Google, he would be rich. And if anyone who isn't rich claims to have that knowledge, then he's probably just selling fools gold.
I'm probably higher on that list than I deserve to be. I added some features people like. But the real heroes are the ones who optimised the engine, ported the extensions, fixed the bugs and wrote the documentation! It's important to recognise the other names, not just the most famous dozen. PHP 7 came about by the combined efforts of more than two hundred different people.
The bulk of the extension code is in C, unfortunately: https://github.com/do-aki/gophp_sample/blob/master/gophp.go#L3
GitHub "helpfully" generates those from tags in the repository. (Sadly, I don't think there's a way to turn that page off, misleading as it is.) The release managers can (and have, as recently as a few RCs ago) re-tag before actually releasing if there's a bug fix that has to sneak in, or if there was an issue with a merge. Until it's on php.net, it's not a release.
I'm not insulting the demographic as in Americans. I honestly didn't mean it that way. the demographic wouldn't take the time to check if other currencies would have the same price is what I meant. I didn't mean they were dumb, just not the type of people to know that you can do that. I wouldn't even check that. Also nothing to do with Americans, more the demographic of people buying high end fashion are not too worried about getting the best price. They just don't like being lied to after they make a purchase. Most of our customers won't even use a coupon code even if that's the ad that brought them to the website. It's actually hilarious. Only 30% of the people who click on our ad with a coupon code use the code. 
I agree but that is not an issue limited to PHP developers only. In Europe we tend to hit the salary ceiling much earlier and is also much lower than US.
I don't recall us ever making an official PHP 7 logo...
Indeed. If a senior (in any non-minimum wage profession) does not make 2x a junior then something is VERY wrong IMO. 
So when this is released what will be the next step? will major webhosting companies upgrade? 
Heh. I just realized my last name isn't on my paragonie Github account after failing to find it via Ctrl+F. Whoops.
$1/month shared hosts? Doubt it. Anyone running their own systems can update as soon as they're ready to do so.
As a further heads-up, if you're using the PSR-4 autoloader, you don't need all of the directories. Just do this instead: "psr-4": { "AlanCole\\Maths\\Primes\\": "src/" } And then put everything in that namespace directly into `src/`
OK. PHP is a programming language. JEE is a platform. Hope this helped.. 
I just upgraded a project from 2.3 to 2.7, took me about 4 hours to get rid of all the deprecation notices, they weren't that bad. I thought it would take me longer, specially the ones firing in certain sections I'm not really familiar with like the listeners for kernel events.
As a senior I earn as much as a junior in Finland. But at least I have sun.
TIL learned that I earn 42€ less than on that chart. I live in Poland and here this kind salary in general is not that bad but for dev with 6years of experience could be better. EDIT 42€ less net than on that chart brutto so it's not that bad BTW who cares about salary with tax anyway? 
&gt; I just find MySQLi's interface more pleasant. Got an example?
Well the point is creating the tag is the start of the release process. They create the release days before the announcement to give it time to sync on the mirrors. That's why it's available via php.net. Basically PHP 7 has been created and has been released (it's on github and php.net) it's just not been announced yet. Edit: People look up the meaning of released.
I can only echo the above. Thank you so much to everyone involved in the PHP 7 effort so far.
Is there a logical and non stupid reason they are tagging releases before they are ready, this has actually boiled my egg, tagging is clearly used as a release system, and should not be used in this way
salaries with taxes are the reference because bruto is always the same for everyone but net depends how many children you have, wife, and other things that might influence your tax discounts
You know OOP isn't about type hints, but about sending messages between objects?
Spain 30.000€, I wished to earn that much money
yeah i also thought spain was a bit too high from the source. what is the real salary?
For Romania the amount reported is at least 2x bigger than reality. One of the sources linked http://www.hongkiat.com/blog/designers-developers-salaries-worldwide/#php_web_developers says it's 21600 USD (not EUR) for PHP developers overall, not only juniors.
I think it's a Zend invention.
Don't get me wrong, return type hints and scalar type hints are a huge improvement and I absolutely love them. But saying that it is an OOP feature is borderline misleading. 
For those working in France, there is a very complete study updated each year: http://barometre.afup.org/report/salary?filter%5Bcampaign%5D%5B0%5D=4 (in french).
It's an open source project. I'm sure a well made logo can be considered by the main voting team if the community so desires. You should contribute. 
Well, if your company is as amazing as you write it shouldn't be a problem to talk to your superiors. Just tell them how you feel, it should be a rare boss that holds it against you that you want to better yourself. Maybe you can be part of a new project that will use modern technology and a modern stack?!
 &lt;?php array_walk($contributors, function($contributor) { printf("%s, thank you very much for PHP7!%s", $contributor, PHP_EOL); });
Ok, don't get me the wrong way, but _please_ do not make e-commerce solutions from scratch. E-commerce is _very_ hard to do right, so you should use something that's already out there. 
Symfony and Laravel are on top by now. But they have a large learning curve (IMO), if you want something cleaner and simple you could try Yii or Phalcon
My personal opinions only: * Explicit types will be a good thing for PHP, imo. Majority PHP users might refrain, but eventually strictly typed coding will gain acceptance in large codebases / for new versions of enterprise applications. * Unicode code point syntax will become widespread (if not already) and some good soul will write a library around it and put some useful functions in a framework somewhere which will go around everywhere. * Constant arrays will get used heavily from day 1 in new code. * Spaceship(&lt;=&gt;) is the new ambiguity headache source. Avoid it till 7.2/7.3 when something will get changed / rolled back. * null coalesce (??) operator is a handy addition and will be used widely but might be hated by other language lovers. * Filtered unserialize will be used increasingly by library writers and there will be efficiency wars over it.
this is great info thank you so much!
What problems do you envisage with spaceship?
They won't upgrade until like 7.0.12 or something. Even then, because PHP 7 can break a lot of older scripts it'll take a while for them to upgrade. Most likely they'll offer separate PHP 7 plans or opt-in for a while. 
Out of interest. I've never touched Yii or Phalcon (only Symfony and Laravel). How's their learning curve lower? Looking at the docs they don't seem any easier than Symfony or Laravel.
Thanks for all the helpful comments. I have reached out to an app developer and for a proof of concept is a bit to expensive. Looking at possibly keeping it as a web app, and use some suggestions from here.
Oh yeah the survey where everyone questioned the result because of Nette being third. #goodtimes :D
&gt; 50 requires every request was bit too hard just set `opcache.validate_timestamps=0` or more appropriate value. &gt; With the default settings, whenever a PHP file is executed (for example through include or require) Opcache checks the last time it was modified on disk. Then it compares this time with the last time it cached the compilation of that script. When the file was modified after being cached, the compile cache for the script will be regenerated.
Please do not feed the trolls.
I was trying to figure that out... ok, cool. With zend using it, I thought it was the official logotype.
&gt; Constant arrays will get used heavily from day 1 in new code. What will it be used for? From what I understand from a few searches a constant in PHP means that: 1) the value can't change during run time and 2) it is a global, so you can access the constant from everywhere in your application. The few examples I've found seem to be using it as an enum. I thought it was better to not use globals though? Having everything work with dependency injection for example. And doesn't Single Responsibility mean that if you want to access an array like that you should have a class for it?
Yii, when i last looked at it, it seemed to have a higher learning curve then both of them!
You need a contract and with a developer where you can take action if they break it
I suspect people who actually react by downloading and deploying based on whether a version gets unofficially tagged don't care much what they download and deploy. People have been using PHP7 to test their software for months now, it's not as if the betas and RCs were secret and withheld from the public, there's no reason for anyone to jump the gun due to a tag, if they're serious about what they're doing.
&gt; I don’t expect the acquisition to **effect** Zend’s involvement with open source projects, and in the long run That's either a typo, or a rather revealing Freudian slip. 
previously it happened that a wamp project announced their release before we announced the php release as they were packaging before the announcement based on the git tag alone. so my point is that while tagging is an important step of the deploy procedure but everybody should wait for the announcement.
I see, yeah that's bad.
Not *per se*, but there's a [RFC for generics](https://wiki.php.net/rfc/generics), which would allow to easily define specialized collections, and hint for a specific typed one.
Some of them seem handy, But what's the point of duplicating all those existing php functions?
For beginners, I have many junior developers who struggle to find function, so I thought about aliasing them, but not all of them duplicates, some of them support UTF-8, thinking about porting all functions to UTF-8 in the future
&gt; Since PHP 7 is on its way what are the best resources to learn it? PHP 7 has changed a lot more internally than externally. Going by "Upgrading" section that PHP.net publishes after every release is more than enough to learn what you need, if you know PHP 5.x. &gt; Can it compete with NodeJS? I find it largely complementary to NodeJS. Java, NodeJS and PHP are three key technologies I use in projects. Java is most useful for slower-evolving, mission-critical, complex backend services. NodeJS is most useful for simple, long-running, IO-based services, like streaming files, pushing events etc. PHP is king in the frontend (as in URL routing, controllers and templates of the user-facing web pages that expose backend services to people), and it's also where most backend services start their life for me (as a prototype or even production), unless I have a reason to go to NodeJS or Java directly, based on the service nature. &gt; How PHP performance will change with the implementation of PHP7? It'll be... twice faster :-)? &gt; What problems will occur while adopting PHP7 as it comes. I don't expect any. While I acknowledge the significance of the internal changes, parser and runtime cleanup etc., from userland perspective this is PHP 5.7. Upgrading is a breeze, in fact all our new projects are PHP7-ready. &gt; Do you think Frameworks like Laravel will help keep PHP major programming language? I'll shoot straight: shared hosts will keep PHP the major (web) language. As for frameworks, in PHP they're so many, every gets their 15 minutes and something else shows up. There will be always some popular framework for PHP that's helping beginners get their job done, if that's your question.
E-commerce is very hard to do right. There are so many factors to consider. Simple one, how do you handle taxes? Well, that depends on your tax jurisdiction, the source location for the goods, the destination location of the goods, the tax status of the recipient, the tax category of the goods, and possibly other factors. Then you get into how taxes are calculated and applied. And the prices tax inclusive or exclusive. Do you tax units, rows, or totals? Does shipping get taxed? Handling? How do discounts affect taxes? That's a just a tiny example of the complexity of commerce in general. So, brushing off a statement about E-commerce being hard with a trivial hand wave is a bit naive.
About to start a large refactoring project with PHP 7, seems like a good idea to give this a read. Thanks for the coupon!
json_encode is faster, serialize with filter beyond N levels is deadly slow etc etc. ... my opinion, not necessarily how it will play out.
Should probably add in the contributing doc that you use [Yoda Conditions](https://en.wikipedia.org/wiki/Yoda_conditions) when you're comparing and don't want type casting.
what do you mean?
/u/stubbs is your man for RabbitMQ. The majority of modern languages have libraries to use RabbitMQ, the official list is [here!](https://www.rabbitmq.com/devtools.html)
I'm really not a fan of the `declare(strict_types=1);` thing :(, I understand that it couldn't work like JavaScript or Perl etc, but it could have still been nicer. Most language constructs don't usually have parenthesis for one. What is the significance of the 1? Could this have been some kind of bit flag thing? `declare STRICT_TYPES;` perhaps. Just something that would fit in more with the rest of PHP...
Okay, legacy I can understand, but creating new projects on unsupported stacks - that's just insanity.
&gt; Just something that would fit in more with the rest of PHP... Well, this is perfectly fits, since [declare](http://php.net/manual/en/control-structures.declare.php) already existed in PHP. https://wiki.php.net/rfc/scalar_type_hints_v5#why_not_use_use_strict_instead_of_declare 
Resque is awesome. Depending on the environment, Amazon SQS is also a good option. Just emulate how Resque does job wrapping ( json_encode the job parameters ) and this will allow you to run multiple tasks per queue and a queue per priority. I would stay away from Gearman, it has a tendency to lose jobs and be somewhat unstable under high load. One good thing about gearman is it was possible to create a fork system very similar to Resque.
For example this line in `Collection.php`: `if (null === $callback) {` "Normally" it's written as `($callback === null)` Which can be read as "Does this variable equal null?" or in Yoda logic: "Does null equal callback?" You do it here as well and other places: function ($item) use ($callback) { return false === call_user_func($callback, $item); } Symfony uses Yoda conditions in [coding standards](http://symfony.com/doc/current/contributing/code/standards.html#structure)
It's been awhile since I read the Scalar Typehints RFC. Without using the strict declaration, will PHP emit a warning/error when a type conversion results in a loss of information? For example, passing `1.75`as a method parameter with an `int` typehint would result in a warning, but not `"1"` or `27.0`.
&gt; Without using the strict declaration, will PHP emit a warning/error when a type conversion results in a loss of information? No. It will silently convert it. Normal rules apply, so you'll get a notice if you try to pass "123abc" as it's a "non well formed numeric value", and a fatal error if you try to pass "Apple": https://3v4l.org/UOBDp
&gt; I prefer strict types, I know some developers would probably like the magic that PHP-7 brings by trying to take an educated guess at what the type should be There is no "educated guess". The type hint says what the type should and will be.
God, I can empathize with this. Boss: We can go through [official governmental IT organization] and it'll take about 3 weeks and $15,000. Me: Seriously? Bet I could set up something equivalent with 24 hours and a $1500 AWS budget. Boss: Do it. [Me IRL](http://vignette2.wikia.nocookie.net/video-game-championship-wrestling/images/e/e5/Adam.jpg/revision/latest?cb=20130110091803)
Typo in your text: However, what's not the end. Probably should be "However, that's not the end."
I love seeing these, taking some of the sample data, converting to Canadian dollars, then crying myself to sleep at how underpaid I am.
The client wants to spend a shit load of money on a homegrown ecommerce platform that may not work?
&gt; I doubt it has to do something with national pride I meant national pride is why they use it in the first place (Nette is Czech). &gt; it was just that the link got spread to the place where majority of the users hangs out Yes that's the definition of brigading.
I've actually had a lot of **luck** so far with my older scripts. Just 1 extension keeping me from making the move. I posted the bug last week and had steady discussion back and forth - then it stopped. Oh well.
Agreed. Phalcon is a niche framework and Yii is in no way cleaner or simpler than Symfony and Laravel.
ohh github stars, that's a good indicator ?
Multiple things have to happen after the "release" commit is tagged: the tarballs have to be built (since they include generated scripts like configure and generated files in Zend/ that aren't kept in Git), as do Windows binaries, then both of those have to be tested, then the tarballs have to be uploaded and distributed out to php.net's mirrors. Usually 1-3 days are allowed for that, depending on everyone's workload. If a problem is found (or an urgent issue is reported separately), then whatever new commits are needed are made, and the tag is deleted and remade.
It's an indicator, decide yourself how good it is.
Outside the web root. Ideally you would have a single php file, like a index.php, that maps the requested route to a template. Take a look at [silex](http://silex.sensiolabs.org/).
yeah well, Canada, like Australia, NZ, Brazil, South Africa, Chile, and other commodity exporters saw HUGE losses for their currencies in the last 12 months or so...
Nah, I doubt that's the reason why most people here use it (and personally, I can say that's DEFINITELY not the reason why I use it). And brigading is IMHO something like "omg guys vote in this!!!" which (AFAIK) didn't happen.
!{existing_function} in this line "!" is barely visible then reviewing code, so I used false === something but thats to long... so I created not functions :)
Not in a web accessible directory.
it's not tagging, it's release tagging I have a problem with, not that it matters as I don't core contribute (not that I'm holding anything back either), and I accept that it's just another worthless opinion... I do want them to take as long as possible, it's the pedant in me that would rather they spent those 1-3 days in the 7 branch and then tag release once those extra steps are done.
That's really lazy, imo, and makes for lazy engineers; perhaps worst of all, you've chosen a lazy approach to logical software design common to almost every single modern programming language. `!` is ubiquitous for "inverse" or "not" across the board and very few languages have both positive value check and negative value check functions (empty vs notEmpty, null vs notNull) because of the utility of `!`
I don't use Twig, but I have a general observation about special locations for special source files - it's best not to have them. One autoloader to rule them all. Over time I've dropped special locations for models (services), they became just classes in the "src" directory. Then controllers, they're just classes in the "src" directory as well. Twig templates, someone might say, are not PHP, but they actually compile to PHP classes. In my projects, templates are named like classes, are in "src", and if I have some preprocessor for a special syntax like Twig's, it's handled with a special extension (if it's not .php, but say .twig, then it's preprocessed to a PHP class by the handler for this extension and cached transparently). The only PHP file in web root is main.php, which is the entry point for the whole domain. It's somewhat liberating to think about everything as autoloaded classes, BTW. "Wait what was the API for loading AboutView? Oh yeah, just instantiate it and the autoloader does the rest. What about AppConfig? Just instantiate it." Having a distinct API and directory/naming convention for every type of file rings very PHP4 to me. Just instantiate it.
I think you're confusing creating a general e-commerce framework with doing simple e-commerce. The complexity of the former has no bearing on how hard it is to set up a simple shop to sell your cat t-shirts. The tax questions you raised are all easily answered by checking into the local regulations upfront.
&gt; Or just point different namespaces at other locations in your composer.json, and you can still do what you're doing without littering src/ with templates and config. You call it "littering src/" I call it "putting src files in src/". I do have distinct folders for tests or deployment-specific configuration files etc., but the point I was driving is that they're all structured like class folders (like src/) configured at the autoloader, and not like "special" folders, that require a special API to use. As for templates, think if they're really anything else than code. I see no difference. The more time passes, the less real differences I see between technologies. It's all very superficial, and for templates it's purely syntax. There's no reason to segregate files based on such superficial criteria. If you have a modular codebase, there's no reason why your templates, forming a "theme" or however you want to call it, can't be just another code module.
Compilation of a template file into generated PHP source doesn't qualify it as source to me. Nor do generated files in general belong in src/ (we use var/build/ or var/cache/, depending). I also prefer to load config *into* config classes, rather than writing them *as* classes. I do like the idea of autoloading everything, and it's easy to do, but segregation makes more sense to me, personally.
I hope so, I really do enjoy using PHP, but the lack of a solid websocket solution really is needed.
&gt; Compilation of a template file into generated PHP source doesn't qualify it as source to me. Nor do generated files in general belong in src/ Not the generated files, but the source files they're generated from. Keyword "source files" :P The line of separation is structural and conceptual, not syntactical. That's my focus. When I see a theme as a separate module for a given project (say, swappable themes), I just have it in another module, but it's not separated just because of syntax. Generated files are conceptually different, they're disposable, and aren't in the project repository, so they're not source. But the static human-written files they are produced from, are.
We've successfully been using RabbitMQ with a php consumer for a few years in production, never let us down :) 
So Digitalocean $5 a month is not cheap enough?
I have trained a team of developers, and I have done code reviews. I still would never advocate for the type of development you are fixated on
&gt; And brigading is IMHO something like "omg guys vote in this!!!" which (AFAIK) didn't happen. How can it not have happened? There's no way so many people saw that poll without being pointed to it by someone.
Are there anymore tutorials which are a but more up to date or has not much changed since the tutorial you recommend?
So an include is &lt;?php include 'dsubmit.php';?&gt;, I can just add that to the form and the isset($_POST['name'] ? $_POST['name'] : '' ? code will work? Edit: I've tried this, and it still produces the same result. Would I have to store the form fields as variables in the PHP file?
Exactly. It's not like type hinting means, "I guess this will probably be an int", it means, "I dictate that this shall be an int".
Don't want to blow up your inbox or anything, but I didn't misread the first time. I've put the include in the driver.php, but it still refreshes the page, and the forms are reset.
&gt; the 6 months of free access offered on the higher tier plans, but there is also a $0 plan (forever) that is available to single users. This would allow developers to try the IDE and then perhaps pursue the 6 months of free access (to gain the collaborative features, etc.). The mobile page looks fine on my end. Is there something more specific about the mobile desig Thanks /u/lethalwire was going to write everything you did :) 
That works, by itself. But my sumbit script refreshes the form somehow. I might try rewriting the whole script, but I only have a few days so I'm not sure if I have time for that.
Still, you can't deny the fact that only a small fraction of webhosts offer NodeJS. I think the rise of PHP was very much facilitated by its easy access on dirt-cheap hosting servers. Unless NodeJS somehow achieves this feat, I find it very hard to see it replace PHP in any project but ones that for one reason or another have NodeJS as a requirement (as you have said, real projects at actual companies with budgets and employees).
If you're talking about actual markup, and not generated classes from compiling said markup, then I'm not following how you're autoloading them...
You should start by finding out *why* you're on 5.3. It might be because that's the version that ships with the OS, and nothing more. 
And if the typehint says it should be an `int` then it shouldn't accept `'1'` which is actually a string.
&gt; Unicode code point syntax will become widespread It's a niche feature. You'll only end up using it very occasionally, probably if you're doing something fancy with Unicode. &gt; Spaceship(&lt;=&gt;) is the new ambiguity headache source. Avoid it till 7.2/7.3 when something will get changed / rolled back. What? It just follows the same rules the existing comparison operators use. There's nothing new there. It's implemented with the same built-in `compare_function` we use for such operators. The spaceship is something you'll probably only ever use for sort functions, anyway. &gt; Constant arrays will get used heavily from day 1 in new code. Definitely. I end up using them a lot in 5.6+ code I write. They're just so handy.
At the risk of seeming pedantic: polymorphism !== isomorphism
In retrospect maybe I should have made it `declare(strict_types);` or something. At the time, I thought some files might use =0 with the declare block syntax to disable strict types in part of the file. Anthony got rid of that I think. Also perhaps I shouldn't have replaced `TRUE` with `1` to save three characters. Alas, too late to change it now.
It looks like you're posting to a completely different page, so that data isn't going to make the round-trip back from redirects to your form. Your only choice is to put all the code in one file, store the post variables in the session like flash data, or restructure your application.
I think you're really overestimating the importance of ultra-cheap hosting in the larger ecosystem of programming languages. While that helped PHP tremendously 15 years ago, it being so damned easy to learn was just as much a factor, if not even more important. For a business, it's even less important, since they have their own servers and can install whatever they want. Modern tools make it trivially easy to do so. Hell, one of my recent consulting gigs had me creating scripts that automated an entire datacenter (all this cloud stuff makes it easy to go from no servers to hundreds, fully configured with a deployed application, in a few minutes) People build projects in languages that they like, ones they want to learn, or ones that are employer-approved (just because tools make it *easy* to run fifteen different langs in prod doesn't mean they *want to*). What's available for a buck a month really doesn't matter unless you're following a ten year old tutorial. And plenty of people are, but they're also generally the ones writing the garbage that gives PHP the poor name it has.
Perhaps you should be looking at learning PHP more before jumping on this task.. You are asking basic questions that are more suited for the /r/phphelp sub. One solution would be to write a Javascript function that triggers on submit button click and you could simply prevent the page refreshing by using the prevent default function. To use the data in php you can use Ajax to send the form data to a Php function and return a csv link and display it on the front end. You wouldn't need to have that code in the value because the page won't refresh. 
I didn't get that memo. There is a big push to start calling it "Universal JavaScript" though. edit: As a note you may enjoy this https://github.com/gdi2290/list-of-morphic-javascript
Best website ever: https://www.google.com Literally, dev-by-google. You won't ever know everything, no one will. Just get your [fundamentals](https://developers.google.com/web/fundamentals/?hl=en) down and learn to debug and search for the right things when you need them. Not sure of any good PHP resources to start learning, I just kinda "did it" personally and learned through plenty of trial-and-error.
I am not really sure, but for next time you should try out that sub. I think you got your answers already, but if you need more help I'd post a new one there with more specific questions. Also recommend stack overflow for this kind of thing too but I would try to focus on one thing at a time when asking for help. You mentioned you need to make a csv but it's irrelevant, you can just say you need to process the form data without refreshing the page. Hope this helps EDIT: also use pastebin to share your code instead of linking to the page itself, the second link doesn't help and neither links show any of the Php code
Your suggestion is a horrible design pattern to follow by the way. While it will "work" it breaks things like the back button. look into the PRG pattern, PRG is short for Post/Redirect/Get and is essentially what it sounds like hes trying to do already. He just needs to have his form either read the data back out of the csv (which sounds like a race condition waiting to happen) or store the data in session variables and read it back out of that replace your isset($_POST) ? $_POST stuff with $_SESSION in place of $_POST then in driver.php have it put the contents both into the csv and into $_SESSION
Most developers learn by heavy trial and error. It is called science. Education will help greatly with *certain* fundamentals. Especial in direct math applications to programming, I.e. algorithms. But most of what you use day to day comes from pure experience and giving yourself 40 lashes a few times. The last part is constant though. Learn now, your code is always crap. The next pile is just cleaner crap.
Thank you! Keep up the good work :)
I spent 5 hours and wrote my own job queue. * All tasks must be accessible via a URL only, eg are run via HTTPS. * When the queue is activated all eligible tasks are found and run in parallel with Guzzle and a "pool" so its pretty darn fast at processing lots of tasks in one hit. * Tasks are queued as a URL and a UNIX timestamp so you can something for the future. * Failed tasks are kept on the queue with a fail count that increases on each fail. After 3 failures, the task is ignored and an email is triggered to tell me to say this task has failed. * Successful tasks are simply deleted. * Tasks are triggered via a web based SaaS product called "EasyCron.com", EasyCron can even alert you if a the queue fails as well. ($20 bucks a year, super cheap, love these guys). What I love about easy cron is that if I spin up a backup server, my cron task don't run which would be SUPER bad. I only want them to run on the primary server. So far it has been rock solid, happy to share code. It's about 60 lines of PHP and does a great job (it does not take into account server load, if that was problem, I would get a bigger server, your server monitoring tools should show you if your server is under heavy load). 
A handy trick is to use [argument unpacking](https://wiki.php.net/rfc/argument_unpacking). [example](https://3v4l.org/IRJqe)
&gt;Mightymorphic JavaScript: Where code assembles together from many smaller files asynchronously amazing 
Yeah I don't disagree with you. Was just trying to give a simple solution that explained the problem. Redirect or Ajax would definitely be a better way, both are slightly more complex. Dude seems like he's struggling already, didn't want to complicate it more. 
I think I would have preferred a proposed syntax in one of the other scalar typehint RFCs that use parentheses: Strict mode: function someMethod(int $someInteger) Non-strict Mode: function someMethod((int) $someInteger) But hey, I don't want great to be the enemy of good. I'm ecstatic we're getting them at all. 
I just imagine it can't hurt it, but how much does it help? I need to check out the repository tho
Perfect answer for me :)
If remi has any say in the matter, yes.
https://bernard.readthedocs.org/
I've been following this exact process and I can tell you it's been great. Highly recommend it.
PHP 7 isn't even out yet, but has been in public development for a while. So there are a lot of discussed features (some well known, some lesser known) for the version coming out soon. 
 var_dump(42/0); // float(INF) Wait, why isn't this also NaN like 0/0? Isn't x/0 undefined for any value of x? 
Are you insinuating that only people employed as developers use or care about hosting?
&gt; Wait, why isn't this also NaN like 0/0? Isn't x/0 undefined for any value of x? One-sided limits of n/0 are [well-defined](https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Hyperbola_one_over_x.svg/1024px-Hyperbola_one_over_x.svg.png): the limit of n/b as b approaches 0 from the left is -infinity while the limit of n/b as b approaches 0 from the right is +infinity. It's only undefined if you don't know the direction, but IEEE 754 lets you infer the direction by allowing [zero to be signed](https://en.wikipedia.org/wiki/Signed_zero). Zero's sign in n/0 is determined by the numerator: e.g. 42/0 is actually 42/+0 so limit is from the right resulting in `+INF`, but -42/0 is actually -42/-0 and the limit is from the left, resulting in `-INF`. 0/0 is a special case and is always of an indeterminate form.
The way they handle the divide by zero stuff is still pretty stupid. It should be throwing the DivisionByZeroError exception every time for all cases. PHP already has enough consistency issues so they really need to stop doing this stuff.
Hi Chris, a little feedback: the README lacks a proper introduction (that presents and explains the "distributed async" feature). Without the title of the post I wouldn't have any idea what it does.
Just some "buy my book" clickbait. The "features" are not really that much of a features to merit an article (dividing by zero returning INF is not a feature at all)
Jeez, I don't have time to lose. Thanks a lot, OP, for lying. 0 words on PHP's future in this link.
Node could as well serve one request at a time in a worker thread, it's just not efficient. Threads need a lot more resources and limit the total number of concurrent connections you can have. This is especially important if you have long-lived connections.
Please test it and run your own benchmarks. I didn't ever test Ratchet. Feel free to report your results here. :-)
I'm not sure that English is the authors native language, but some of the statements are well off the mark: &gt; PHP operates on the fundamentals of MVC &gt; The main use of Guzzle PHP framework is to allow developers to create applications that are less time consuming. The applications designed on this platform are extremely simple in managing tasks of an online store.
Nice! I almost missed it.
The tutorial on the RabbitMQ site (http://www.rabbitmq.com/tutorials/tutorial-one-php.html) uses idelalvaro/php-amqplib from packagist.
Hello people, I just discovered this sub while searching for some help for a project. I have never worked with php at all, but had to use some basic html and css for a university project. The only thing missing from the project now is a way of displaying a simple line of text (from a website hosted on an arduino) on our main project website. I am pretty sure I need php for this, although there might be other ways that I have not heard of... Since I do not have the time to figure it out myself right now, I was wondering if someone here knows a simple way of achieving this :) I would be most gratefull!
&gt; Just some "buy my book" clickbait. I'm disappointed to hear you say this Dracony. I've literally spent hundreds of hours trying to learn **everything** about PHP 7 so I can help share that knowledge with my colleagues and the broader PHP community. This includes time [contributing to the PHP docs](https://secure.php.net/manual/en/class.intlchar.php), testing new features, [submitting](https://bugs.php.net/bug.php?id=69891) [bug](https://bugs.php.net/bug.php?id=70451) [reports](https://bugs.php.net/bug.php?id=70452), discussing RFCs with others, and [giving presentations on PHP 7](https://world.phparch.com/speakers/#67228). My e-book is not some "get rich quick scheme". I've set the price fairly low, [given away free copies](http://i.imgur.com/h5mOtdX.png), and [even donated some proceeds to PHP Women](https://twitter.com/colinodell/status/671728042918547456). The e-book is simply another avenue for me to disseminate my knowledge to others while also supporting my work for the community. &gt; The "features" are not really that much of a features to merit an article (dividing by zero returning INF is not a feature at all) True, they're certainly not the most-popular features, but I'm sure some folks will find this information useful. --- **Edit:** I totally forgot to censor someone's email address in one of my links - I'm so sorry! It has been corrected.
I'm consistently impressed by every new async thing you release. Well done, this looks awesome!
The text is changing based on the status of a switch. Sorry, should have mentioned that
You don't have the time to figure something out for your own uni project?
I think the real question is, why don't they know PHP if they're doing a PROJECT with PHP?!@
Clearly it's middle infinity
For Ukraine it's a bit incorrect value. Here a good statistic of Ukraine salaries market: http://jobs.dou.ua/salaries/#period=may2015&amp;city=Kyiv&amp;title=Senior+Software+Engineer&amp;language=PHP&amp;spec=&amp;exp1=0&amp;exp2=10 Median: 3000$ per month = 36000$ per year without bonuses.
I know I've been coding a long time when I start signing off everything with `:wq`
I have the same issue except I keep pressing `Ctrl+S` everywhere...
I have not spent that many hours trying to learn about PHP 7, so I "learned stuff" from this article. Thank you.
I think I did not fully understand your use case here (who are these people you want assign pictures to), but this might help (https://developers.facebook.com/docs/graph-api/using-graph-api/v2.5#search). Also I don't think that Graph API is depreciated/deprecated? Why would be or how did you come up with it? Anyway, i don't think its also legal to download these profile images, so your company could have troubles with it.
This isn't a question fit for /r/php. Ask Facebook support or somewhere else. Stop reposting it.
She's talking about `intdiv()` function designed to explicitly do an integer division and never yielding a float.
In my opinion it depends on how "Senior" they are. I don't think 2x is justifiable for every senior position compared to its junior.
You've not addressed my concern, which is that targeting dev-master is just asking for trouble at the best of times. This trouble is compounded by rewrites - without being able to target an unstable release series (e.g. ~0.3.0) you end up stuck between two shitty choices. Either you; 1. Track dev-master, trying to keep up with any API breakages as well as playing the oh-so-fun game of "I don't know if my code or the library is broken". 2. Restrict to a specific git hash, leaving you unable to easily get bugfixes, security fixes etc. It's simply not that difficult to provide tagged releases for versions &lt; 1 - the only sane move is to avoid libraries that spend years in this state - particularly when there are alternatives that are more developer-friendly.
The only popular languages I know of that return Inf/-Inf/NaN (as the result of dividing things that are for all intents and purposes integers) are Ecmascripts and Lua. From what I can tell, yes, PHP7's behavior is consistent with Ecmascript. Since PHP5 did return a boolean false, I could at least test $n === false and be done. Now the boilerplate will read: (is_finite($n) &amp;&amp; $n !== false). I would in theory rather get an exception in the case of zero division, but since that would add a ton of overhead if I end up processing a lot of zero division, I suppose the new boilerplate is a lesser evil? I don't know. This makes me feel dirty and disturbed. 
Thanks for the feedback :). I have made it clickable.
if you really end up with this much checks i think you better do: ($a / check_divisor(0)); and then check_divisor throws an Exception 
If you are using psr-4 autoloading, then there is a high chance your src and mapping for it look like this: \Vendor\Namespace =&gt; src/ OR src/Namespace, in both cases having your templates lying in the middle of it does not make sense, as they are not loaded through your regular autoloading, and as their naming and mapping scheme is likely to be quite different. Your argument can lead to a slippery slope - as your less/sass files are "source" too - do they belong into src? what about your js, css? 
Bulgaria has a minimum wage equivalent of $1.25 per hour, which, if you work a 4 hour day, nevermind an 8 hour day, you're above the $5 you mentioned. If you're working part time then I don't consider your $5 per day figure to be an apples to oranges comparison. It's also highly likely developers aren't making minimum wage. And prostitutes aren't developers, though I know sometimes it has that feeling to it.
I'd argue that virtually all PHP applications are constrained by IO, not by raw processing speed. At least for me asynchronous I/O is the main benefit of Node. I really hope PHP manages to catch up here.
Thanks, this is something I was just looking for. Wanted to know about return typing for interfaces and there it is in the tpunt/PHP7-Reference.
A minor complaint. It's nice to see articles about some of the new and important PHP 7 features, but it would be even better if your blog posts also linked to the relevant RFCs from php.net, then we can see your explanation of how it works as well as the original author who came up with the idea's explanation.
IMO it's not the price, it's about managed vs unmanaged. DO is too hard for a lot of people, especially beginners, to get up and running with. If you could just press a button and get the site fully set up with Apache, PHP, MySQL, FTP to the root and maybe Webmin, it could work.
I think the best example is something like sending email or logging. Anything where you don't need the result in order to give a response to the user. For example, the user orders a product. You can use async to send the confirmation email and output the HTML to the browser while the email is sending.
Not without the declaration, it doesn't. This is PHP!
That sounds about twice as insane... 
&gt; in both cases having your templates lying in the middle of it does not make sense, as they are not loaded through your regular autoloading, and as their naming and mapping scheme is likely to be quite different. The whole thread was me explaining that my templates load through the autoloader, and that having a mapping scheme that's different for different (preprocessed or not) PHP files is redundant. I realize most of you folks have N mapping schemes for N file types, I'm fine with that, but to me this is doing things the hard and confusing way for no reason. We have an autoloader, and a template is executable: you pass input to it and it produces output, it's a program. So it can be autoloaded as a class and used this way. When you give advice - read the context, because it always matters.
I have nothing against Puli, nice initiative etc., but it's not solving a problem I have. The point of contention is that you see templates like static assets, like you would see a PNG file or a CSS file, and I don't. To me, they're PHP classes that go through a preprocessor (first time) before they can run as PHP source. They're loaded through an autoloader. There's no need for the developer to have to care *how* to load a class depending on whether it's "foo" type or "bar" type (as in, say, "controller" or "template"), only to load it. A template is a class, even Twig does it that way. And a class is autoloadable, so why not take a chance to simplify usage?
Where did you get that rocket graphic? Did you create it? 
I totally understand that. Targeting `master` wasn't a problem, because the project was private until one or two months ago. The project requires PHP 7 which is just about to be released. We will add tagged releases in the near future. It's of course not difficult to provide tagged releases but maintaining them.
Obligatory "IT'S HAPPENING" gif: https://i.imgur.com/7drHiqr.gif
[Ubuntu 14.04 is stuck on 5.5.9](https://launchpad.net/ubuntu/trusty/+source/php5). You'll want to use a PPA like this one: https://launchpad.net/~ondrej/+archive/ubuntu/php-7.0
UPGRADE ALL THE PROD
What does this mean for HHVM
I think that disclaimer will go away once he catches the PPA up to the 7.0 release build.
I'm so happy!
Agreed. I just find it really funny. Do you know if any of the PPAs have updated yet? Or do I need to build this from source if I want to test 7.0. 
Boom! Congratulations!!
CentOS? Probably 2020. 
Remi has had a PHP 7 repo for a while. He's generally quick about adding builds when a new release comes out. As for when this will reach the *official* repos, maybe when PHP 7.4 is released? :)
[Remi's repository](http://rpms.famillecollet.com/) has been pretty good with keeping up-to-date with the PHP 7 RC releases. You can see the PHP 7 packages available in his repo at the [repoview](http://rpms.famillecollet.com/enterprise/7/php70/x86_64/repoview/).
And he accepts donations to keep things that way :) His repos are the essential for PHP dev on RHEL-based systems.
 const LUCKY_NUMBERS = [4, 8, 15, 16, 23, 42]; [Those numbers are CURSED you maniac](http://www.lost.com/images/Locke_sees_content_of_box.jpg)!
We're almost done adding all the major language features of PHP7 into HHVM, and should have an announcement about it shortly. (Don't want to steal the thunder from the PHP7 announcement :))
Build yourself. I've been doing my own little [docker files](https://github.com/garbee/php-fpm) throughout release. New versions are typically a quick bump up on one version and docker hub rebuilds. I only use this for playing around though. I still don't seem to understand docker well enough to get a system working in it reliably.
You da' real MVP!
IIRC they're working on bringing it up to date with the new features in 7. Performance-wise, things are much more interesting, and we'll just have to see what they have up their sleeves. 
http://i.imgur.com/ThwZ3Bn.png
Haha, thanks! It took a concerted effort over a few weeks by several members of the team. But it was faster for us than for PHP7 itself because we had a reference implementation to go by, giving us a bunch of hints as to how to structure things, and avoiding us having to think about lots of edge cases (since their semantics were already de facto defined).
I run PHP on IIS. I just loaded it onto my workstation and tested switching a couple of my projects from 5.6 to 7. The first one was a silex project, i was checking firefox for load times. Taking data from a db and returning a json response was around the same speed as PHP 5.6, 8-15ms. I switched a symfony app to 7.0, and the login page was ready in 20ms instead of 130!
His PPA appears to be on RC 8, which was the last release before this one - so if you want to make it easy I would just do most of your testing on that, and then a final round of testing when he catches up. I can recommend the [PHP 7 Upgrade Guide](https://leanpub.com/php7), which is very good and has instructions on installing from the PPA and also some other methods.
For people using PPA, you'll want to be careful when doing any sort of apt-get upgrade, as bad things may happen. For me, one time PPA installed an apache update that caused dependencies connected to it to break. When visiting a PHP page, it downloaded the php script instead of running it!! So be careful out there!
An oft repeated mantra of doubtful truthfulness. At least insofar as you are considering VMs on local machines, rather than cloud instances with uncertain resource allocation.
Already done. Did they add flames to the new build? My server looks really sweet now with flames shooting out the back like a dragster. Thanks core devs! C levels will love it.
I think that's better suited for a job queue with retries.
Probably you have `opcache.revalidate_freq` set to a non-zero value. But that's not new in PHP 7.
Yes but my point is more, why isn't it "php-fpm7" rather than "php-fpm7.0" as it is in that PPA?
I'm curious as to what it is you find more powerful in phinx than laravel migrations?
You can add a PPM to get an unofficial version of the php 7 fpm packages, but we probably won't see it in official repositories for at least a few months.
This is as close as you're going to get: https://github.com/nikic/scalar_objects
Nikic's scalar objects will allow you to create your own Array and String implementations, that will propably be different from the official libraries it they ever get into PHP. If i had to guess, it will not be officially supported in the next 2 years, but i hope i'm wrong.
Agreed. Amazing achievement, and over such a long period, I'm glad they kept the focus. Can't wait till this one becomes mainstream.
What isn't supported on 5.6? I ask because I've never run into issues.
Wait, whatever happened to PHP 6? Did I waste money on a book for something that never existed?
Who is ~ondrej and why does everybody trust him?
I'll believe it when I see it as an option on AWS elastic beanstalks.
&gt; The main purpose of this repo is to provide a proof of concept implementation that can be used to design the new APIs. &gt; ... &gt; Once the APIs are figured out it will be proposed for inclusion into PHP. So is that actually going to happen, or not?
Well duh, if you don't declare a type hint then you don't get a particular type. What's your point?
Probably true, but equally putting something into the queue is itself a good candidate for async, since you most likely need file/database I/O to do that.
&gt; But that's not really consistant with other languages though is it? Having a seperate function for doing integer division, while the stardard operator provides different results. Having separate operators for floating-point and integer division is hardly unique to PHP. Python and Pascal do that too, for instance. &gt; I'm really trying to understand how PHP's implementation is consistant and "follows the same rule many other languages". In many languages, an integer division by zero produces an error and a floating-point division by zero produces an error value. In C, for example, (1 / 0) is an error and (1.0 / 0.0) is INF, depending on your system.
Kudos to the core dev team and all contributors!
&gt; The only popular languages I know of that return Inf/-Inf/NaN are Ecmascripts and Lua. Do C, C++, C#, Ruby, Java and others not count?
It's quite cheap though, especially an in-memory queue.
&gt;Having separate operators for floating-point and integer division is hardly unique to PHP. Python and Pascal do that too, for instance. I don't see how php has seperate operators for dividing? You can do 1/0 and 1.0/0.0, which in PHP 7 will both produce a warning and return INF. intdiv is a function, patched into the language in a shitty way. This is not the same as pythons / and //, which are both operators, and will both throw an exception. &gt;In many languages, an integer division by zero produces an error and a floating-point division by zero produces an error value. In C, for example, (1 / 0) is an error and (1.0 / 0.0) is INF, depending on your system. But that's not what PHP7 does. It happily accepts float and integer division by zero using the division operator. Only using the function it throws an exception. And as /u/nikic points out, the PHP devs chose the worst of both worlds, even though it returns a value that should be valid and consistant with other languages according to you. Why throw a warning if the return value is as expected? I apreciate that PHP is trying to change into a decent language, but decisions like these are terrible patchwork that introduces even more famous PHP quirks (it's in the documentation, so it's okay, even if it doesn't make sense.).
Just wait for 16.04, the next LTS. This is pretty good timing for PHP 7 actually. By April next year we should be a couple of patch releases in, perfect for their LTS.
Downloading!!!!!!
&gt; I don't see how php has seperate operators for dividing? You can do 1/0 and 1.0/0.0, which in PHP 7 will both produce a warning and return INF. The `/` operator is for fractional or floating-point division, it never does truncating division. &gt; intdiv is a function, patched into the language in a shitty way. Yes, it's a function rather than an operator. So? `fmod()` is a function too. In JavaScript it's an operator. &gt; This is not the same as pythons / and //, which are both operators, and will both throw an exception. Indeed they do both throw an exception in Python. Python is unusual here. &gt; But that's not what PHP7 does. It happily accepts float and integer division by zero using the division operator. `/` in PHP does a fractional division. If you give it two integer factors which are not divisible, it does a floating-point division. It behaves similarly to Python's `/`. &gt; Only using the function it throws an exception. Not true, `%`, the analogue of `intdiv()` for getting the remainder in an integer division, also throws an exception. &gt; Why throw a warning if the return value is as expected? My main objection to removing the warning is it prevents converting to exceptions if you want that.
Forgetting that you said that PHP has more than one division operator... &gt;Yes, it's a function rather than an operator. So? fmod() is a function too. In JavaScript it's an operator. It's a very basic arithmetic operator, I think it should be an operator not a function. &gt;My main objection to removing the warning is it prevents converting to exceptions if you want that. Why would you convert the warning to an exception if the way PHP7 handles division by zero is consistent with other languages and the return value inf/-inf/NaN is expected and consistent with IEEE 754?
&gt; Private methods aren't inherited Yes, they are. They just [aren't callable](https://3v4l.org/ckNeC): class A { private function foo() {} } class B extends A {} $b = new B(); $b-&gt;foo(); The output is: &gt; Fatal error: Uncaught Error: Call to private method A::foo() from context '' in /in/ckNeC:10
I took it from the Zend infographic about PHP7. Image credit in the footer.
Docker has php 7 images, though they're still on RC8 
&gt; The manual can be changed if that would make you happy? I don't care particularly about the manual, I care that this warning being emitted under these circumstances (private method in base having the same name as method in derived) basically transforms `E_WARNING` into noise since it emits spurious/meaningless/unnecessary warnings. Having a warning/error level which it's so tempting to ignore really undermines the purpose of having it there in the first place.
If it creates a more productive development experience for the users. If not, then no.
Let's hope something can be done in 2016 about our remaining PHP 4 sites … 
Mkay.
Yes, but going by history, 99% will not already be using PHP 7 in 2018. There will still be many, many projects on 5.x and even some on 4.x.
&gt; No matter what 
@Danack you forgot about namespaces
Does it have Unicode?
Thank you for sharing that. I got it up and running (RC8 anyway for now) with relatively no hiccups. Had to switch to apache though to make it work which is ok with me.
Unless we don't trust your Pharaoh. ;) ohh, we need to go deeper.
It does seem odd how often people using open source software rely on some package written by some guy/gal in their spare time. Just the way things work, I guess.
Doesn't need major bump for new features using PHP7 (and requiring it), but yeah, required major bump for interface changes. Even there though: they should be avoided unless strongly required.
Just upgrade to PHP7. The risks of using a transpiler are MUCH higher than the risk of just upgrading to a stable release.
It isn't so much the "migrations" as much as it is the migration system itself. Laravel's migrations only rollback step-by-step in migrations. Phinx allows you to specify an exact timestamp to rollback to. Whether it be halfway through a set of migrations or not. Phinx also has the "change" method, where if you are doing certain task it will know automatically how to reverse it. So you aren't stuck building an up and a down method out for simple changes. Another recent addition is [easily viewing your migration status from the web-side](http://docs.phinx.org/en/latest/commands.html#running-phinx-in-a-web-app). So you can setup a special page to check out the status of things if you want. Niche case here, but still nice to keep an eye on things. The downside to Phinx's setup however, is writing migrations. Their interface is non-fluent. It works by passing the options as an array to the main calls. Which, as we all know, is *very* easy to typo in there and mess things up. I've done it before a few times. In the end, I'd rather have Phinx's capabilities as a CLI tool with Laravel's syntax for migrations. Along with the extra nice things like the `change` method. That would be the power-house migration system.
I can't wait until my host installs it sometime around 2020.
Oh, I found RFC about this but don't know what's the current state. https://wiki.php.net/rfc/consistent_function_names
&gt; Integer division is what I was referring to. PHP's `/` isn't integer division. &gt; Of course, other languages wih strong type systems don't really support integer division, but whatever. They do have it. Unfortunately a lot of them have `/` do either integer or floating-point division depending on the operand types. &gt; Basically what I'm getting at is that php is doing a lot of coersion that makes the division operator more fraught with complexity than in some other languages. Not really. 2 / 3 is 1.5, 2.0 / 3 is 1.5, 2 / 3.0 is 1.5, 2.0 / 3.0 is 1.5, this is less complicated than other languages.
I feel like this might solve some problems I didn't know I had yet. Cool idea. 
I've install php7.0.0 and added the xdebug extension, but APC is not yet available? will it ever be?
I think PHP7 is a kick start or say new revolution in the field of web development. Although it was in development process since last 2 years but its time of release is awesome as Wordpress has shifted from PHP to Node.js. Wordpress owns 25% of the websites. It means PHP share will drop by 25%.but PHP7 is too faster so lets see how much this release will be enable to retain the market.
(The below is all for CentOS... I've no idea bout Mint) If you use the remi repository, I can confirm that that's exactly what happens, you end up with two PHPs. One in the default system location and one in /opt/ folders. It'll also be called "php70" rather than "php", and if you use php-fpm that's now php70-php-fpm. If you then decide to remove your php5 you can use symbolic links to map php70 to the default, e.g. `ln -s /usr/bin/php70 /usr/bin/php`. 
Why the downvote? He is right. Without HHVM the Zend developers would probably keep their slow paced evolution of PHP core.
Seems sketchy
Then don't display errors to your screen? That's the sane thing to do anyway. Just have the errors write to a log file. Or maybe just stop trying to do the thing the warning says not to do.
Take look at this link: http://php.net/manual/en/migration70.php There is a lot on informations about migrating from 5.6 to 7.0.
ha hahahaha, Normal production apps don't have test suites. :D
You can use [phan](https://github.com/etsy/phan) for a static analysis. See [deploying php7 talk](http://talks.php.net/afup15#/bc7).
[**@oerdnj**](https://twitter.com/oerdnj/) &gt; [2015-12-04 10:07 UTC](https://twitter.com/oerdnj/status/672718876359176192) &gt; PHP 7.0.0 has finished building in ppa:ondrej/php-7.0 and ppa:ondrej/php; Debian Jessie repository is next... https://twitter.com/racecore/status/672703710397640704 ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
i guess it goes on the résumé
Thank you, I'll have a look.
I'm not so sure that many people hold certificates like these in high regard, people like to see actual products, or hear about problems you've solved with experience. Just like now, my degree is basically useless in getting me a job, it's my side-projects and past-experience. Spend your time making some things to show off what you can do, solve some kind of problem you have with development, and show that off instead.
Thank you, I know that link. I'm looking for a tool that will go through a large codebase automatically.
Unlikely. However, why do you need APC? Opcache + apcu(if you don't already use some other approach here) is superior anyway.
How did WP move to node? I thought they just built yet another layer(which is driven by node) on top of their existing PHP apis?
You don't want much do you?
As an employer of PHP developers, I wouldn't care for certificates. I'd rather see your GitHub account and a reference.
Even with automated testing, how can you be sure your tests will reveal PHP7 incompatibilities, let alone all of them?
Apcu is just the user facing cache component. If you didnt use the APC_store functions, you don't need it. Opcache(which is bundled with php), caches opcodes, so that you usually don't have to recompile the files on every request. (And AFAIK does some other optimizations)
For OS X, there's also Homebrew.
&gt; how about you show some code that makes it easier for everyone to understand the advantage of what I perceive as chaos? I don't think your attitude is productive. The industry is full of examples that work this way: - React's .JSX upgrades JavaScript with inline templating. You place the files in the same folder as your .JS files and a preprocessor transparently compiles JSX syntax into JS code. - ASP.NET differentiates C# and Razor files by extension (.cs versus .cshtml, also .aspx for the older XML-based syntax), and treats Razor files as a domain-specific case of a C# source that from the user's perspective is just a different way to write a C# file, no special handling. - Likewise in .NET - .XAML files, which are an XML dialect which internally compiles to a C# source. You create a XAML file as your view, and next to it, you create a "code-behind" (Microsoft terminology) in the language that you want to create the controller in. Both compile to a single C# class. Transparently. All of the above are "meta formats" that compile to a base format (JavaScript and C# respectively) and allow users to flexibly choose the DSL that best fits a given purpose when they work in a language. Saying it makes "little sense" and calling it a "chaos" doesn't show intent to learn more, but if I'm wrong, check the above. As for PHP, I was plenty clear enough how I implement this there. If you have specific questions, I'll answer. If not... keep doing whatever you were doing I guess. The same "chaos", BTW is how your favorite web server works, it assigns different handlers to different files based on their extension. You're then free to organize files in directories to match your vertical project structure, and not to sort them in horizontal flat directories *by type*. It's also how your OS works. You don't have to put all your Word files in a special /word/ folder and use a special "Word File Explorer" for it to open in Word. You just double-click a .docx file that's anywhere, and it somehow opens in Word. It's all very simple, really.
It only works if your test suite is good enough. A test suite is all about confidence you shouldn't be able to break your application without your test suite breaking. Therefore if you test suite passes it means all the code works. 
Migrations ( like in https://phinx.org/, Rails, Alembic, etc. ) exists to allow versioning the database schema and to help with the distribution of the changes between machines / environments / databases. You could always create a structure dump of the database at a certain point in time to discover the actual schema instead of looking at migrations. Tools like http://www.sequelpro.com/, phpMyAdmin, pgAdmin, etc/ will allow you to visualize the database. Can you explain what makes onboarding not fun? I worked on several big systems and they all had hundreds of migrations. EDIT Automatic diffing with no human verification is a recipe for disaster. I once worked on an ASP.NET MVC system with EntityFramework automatic migrations. The database would auto-update on app boot which caused several concurrency / race conditions in productions. We ended up moving to automatically generated migration files which almost always ended up needing manual modifications.
Thank you, I'll have a look at it.
Microsoft has stated that they will release a preview driver with PHP 7 compatibility in January. See https://github.com/Azure/msphpsql/issues/58#issuecomment-151664246.
I can't wait until my work-selected host installs it sometime around 2020.
and planning my suicide
Because I have confidence that my test suite isn't just comprehensive, it was well written.
Who do you use?
Yup, changing a dependency is not a BC break, as the upgrade will simply be prevented by composer. BC is about not making running things break, nor forcing changes on the user: any "upgrade" that isn't a "patch" may lead to dependent upgrades as well. Still OK as long as no code changes are needed. This has been already discussed ad-nauseam, and both symfony and zf bumped required PHP versions in minor releases anyway (even since PHP 5.3.23 IIRC)
We'd still be breaking BC for anyone upgrading to PHP7 then: not acceptable.