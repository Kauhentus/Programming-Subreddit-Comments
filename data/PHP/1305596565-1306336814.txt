Nonce, in Britain, is a slang word for paedophile. Just FYI. :)
TIL ... you gotta love British slang, lol. 
And we are here for any questions you may have. You can always come chat with us on the site (indextank.com) and give us feedback!
Stalker. Get dbuthay to merge my PHP client fixes =(
Whoa woops... thanks for pointing that out. I don't know how I missed that :/
He's sitting next to me. Looking at your pull request right now :)
I loved this idea so much I created a regularly used function for it: http://pastebin.com/RHde9QyC#
Yes, please do! I want to know the best and recommended way of achieving the description above. 
I'll give it a go thanks. Worth the $100 for the licence you reckon?
I guess that works. But that also stops the brackets/parenthesis being auto inserted which was a feature that was working properly and was handy. Is there no way to just disable the quote/double quote auto insertion?
interesting link, im reading through all of these attack types now. is there any software that can run a fake attack on a local server to test its vulnarability.
It works with chrome for me- the Audio options are disabled when Video is selected and vice versa.
http://us2.php.net/rawurldecode
Well - it's not. You can't use JS to fetch data from different domain (see *same domain policy*) and you can't use - lets say - PHP to fetch the HTML for speciffic user. Youd either need to trick the user into supplying you the number or use some browser bug.
sshfs is one of the best alternative to NFS . ` sshfs -o reconnect user@server.com:/storage ./storage ` In your php script use readfile() to serve the files. You can use an offline folder too i.e. a folder that is not accessible from the browser.
Don't use short_open_tags on a production server.
No. How would the forgerer know the password to put in the field in the first place? And if the user would have to enter the password himself - the forgerer would already have all he needs - no reason to change the password.
[Let me google that for you](http://www.lmgtfy.com/?q=zend_form+ini) , also here's a [Relevant Link](http://www.vayanis.com/2008/03/17/using-zend_form-with-zend_config/)
One, reply to the comment, not the page, or I won't see it. Two, that passes a form, which does not actually do what you want - it will send a form value to a backend, rather than to send an email. (That looks like generated HTML, which suggests you haven't actually considered what that hooks up to yet.) Those email fields you're trying to use aren't defined. A few mail programs - thunderbird and outlook - make a best effort to support them, but nothing else really does. I hate to say this, but I don't know if you can get this done in three hours. Here's sort of the general form of your PHP backend. &lt;?php mail('target@joe.com', 'amazing subject', $_POST['formField'] . ' and ' . $_POST['whatever'] . ' and ... '); ?&gt; But honestly, you should have spoken up last night. Tell me less about what you did, and more about what you're trying to achieve.
Okay first of all you never, ever want to service a file with PHP. PHP is memory greedy and the longer the process exist the worse off you are. A file download will keep your PHP processes open for possibly hours and make you waste a ton of memory (maybe even start swapping!) The proper solution here is to have your web server handle it. Apache/Lighttpd can do this with x-sendfile and Nginx can do it with its [x-accel-redirect feature](http://wiki.nginx.org/X-accel). The theory is that you have your PHP script do the authentication and whatever not and then you issue a header with a path to the you want to serve and then end PHP execution. Your web server sees this header and takes care of actually serving it. With a good web server like Nginx you can then handle the file serving in any way you want, specifically you can use a proxy_pass call to send a HTTP request to your server B where the HTTP server there will answer it like any normal request and pass it to your server A, which will then pass it to the client. This gives you options on how you want to handle buffers and caching as well.
No one is ever looking for a query like this. Most databases uses left-prefix indices causing a query like this to be a full table scan. If you have any decent amount of data you're killing your performance by doing this.
Do you know what software is running the cart? If not, look around in config files and try to find the program, that will help immensely. What you are basically trying to do, is add another field to the cart item to carry the data. As far as verifying it, you can do this with javascript clientside at checkout, or add an input box on the item page, and display that input on the cart, and trigger an event when/if it isnt filled in when they add it to cart. Step 1 though, is finding out what cart software you are running. Reply back, and I can offer further help.
Have to admit, I started learning PHP about a week ago and have already formed this habit. When I have a problem that i've been debugging but can't figure out and i resort to echoing in strange places I either use echo 'well... shit'; or echo 'The fuck?';
The forger still benefits by having the user enter the password herself--the password ends up being reset and the user has no awareness that they were duped. If the form didn't actually post the values, the user would become aware that something was wrong when they next tried to enter their password. I'd group together this form of phishing with CSRF since they're very similar and both are solved with the use of a nonce.
I update the nonce with ajax. So when the form is submitted, it fetches the newest nonce from the db, puts it in the form, and continues the submission. To fetch that nonce, the browser must already be cookied with the secure session token. The trick with CSRF is that the admin is tricked into submitting a form (via GET) on an unrelated site. If someone builds a trick form submission on an unrelated site, they will not have the nonce. If they have figured out how to break your passwords or sessions to fetch the nonce, they're already way past needing the CSRF.
In the back of my mind I always had a qualm about using PHP to pipe files through. x-sendfile looks very good. I've bookmarked a few pages already. However, I want to be able to throttle the download speed. Each user is able to control the down speed of their files. Does x-sendfile include the ability to do that? I noticed in the x-accel-redirect plugin it looks like you can control the download rate, which is awesome. Your post definitely allows me to look at handling the downloads differently for the end user, and is good to know. I will experiment with it soon. My main concern right now is still figuring out the best way to transfer files between dedicated servers in a local network. NFS looks the most straightforward, and there is another post in here which mentions sshfs which I'll have to read more about. Thanks for the insight!
OK, what you have there is just HTML. I've never seen 'action' used that way - if it even works, it doesn't get used like that. You need to change your 'action' to be a php page. ie **action='http://www.someserver.com/submit.php'** or **http://localhost/submit.php** Then, you need to make that action page, which will make and send the email. This is the PHP bit. PHP Looks like **&lt;? if(blahblah)?&gt;** If you are using 'Post' as your method, you access your submitted data through the $_POST variable. $_POST is an array full of the stuff from your form. Form item named **Telephone** becomes **$_POST['Telephone']** (Note: Case Sensitive). So you go over those and do what you need to do with them (which it looks like, is setting up an email). You might start that by having a variable called $email_text. Just say you need to add **$_POST['Telephone']** to **$email_text**, write **$email_text .= $_POST['Telephone']** You've got heaps to do (and not enough time to do it) but that might help?
Thanks! If there were a choice between sshfs and NFS, which solution do you think most people would go with? From what I've learned, a network mounted share (NFS) only needs to be mounted once, then it can be accessed as though it were just part of the filesystem. That level of ease seems advantageous, particularly when a small farm of storage servers being to accumulate. 
Ah, but in that scenario you're talking more about phishing - luring the visitor to a site that looks exactly as the one he was expecting to visit. Most CSRF are carreid over by invisible forms that are running in the background not requiring any user action.
Thanks for the suggestions. I could be wrong, but from what I saw on the rsync wiki, it's more useful for synchronizing data across multiple locations. I'm concerned with only one copy of a file on one server. The issue to be solved in getting it from the initial power server to the storage server as its final resting place, then retrieving it when a user wants it. I can't remember the sources, but I remember reading something about FTP being used on the backend for transferring files between local servers (I think it was a flickr write up), and it causing more problems than it solved. 
Thank you that was helpfull :)
OpenID is sort of dead - even some of its former proponents have left it. Unless it's absolutely crucial to you to learn how to use OpenID, forget it. If you're just looking to learn more about passing credentials to other sites, try learning [OAuth](http://en.wikipedia.org/wiki/Oauth), which is used by [Twitter](http://dev.twitter.com/pages/auth#intro) and others (note: OAuth doesn't do the same thing as OpenID and isn't supposed to).
You can try Samba as well. It works without much fuss. What you do is mount it on the power server so that it looks like a local filesystem. Read/Write files there from PHP as you would with local disk. One word of caution is that you want to make your samba shares available as the same user that runs php-fpm or spawn-fcgi. Else you will have write issues. Also, make the share with 777 perms on the 5TB machine. Last but not least don't forget to update firewall rules. Use something like ufw to set rules quickly.
Judging by the comments you have hear and from what I've seen you simply can't code PHP. I wouldn't trust yourself to make an email form, when sending email with PHP there are many vulnerabilities you need to make sure you secure to make sure it doesn't get abused, and considering you don't even know the *most basic* PHP techniques, I really would not trust any code you write without doing some major homework on the topic - Especially as this will most likely be a consumer application. tl;dr: Homework
Not dead, I cherish the use of Google Account's OpenID for my own PHP authenications
I suggest you to start with this http://code.google.com/p/lightopenid/ Comes with examples, you need to figure steam's url's tho IIRC garrysmod.org uses it maybe you could sniff it out there
I use Nginx so I only tried x-accel and yes, it most certainly allows for fine grained control of download speeds. You handle it all via headers set in PHP. So you can set the download speed on a per-connection basis. I used this to implement premium user accounts at one point, works really well. As for transferring files between servers you don't need the overhead of NFS or SSH, just use standard HTTP. The biggest problem with NFS and sshfs is that you need to maintain the mount points, if you become successful and need to scale to multiple servers this become a maintenance nightmare. Simple HTTP connections between IPs allow you to maintain it much simpler.
Hmm can't find the PHP code anywhere. Is it in Java?
Not sure yet. So far i've noticed that it's faster than netbeans. I have 15 days left in my evaluation phase so i'll decide then. I'll let you know if I choose to buy it!
Sorry Pear Mail is outdated and hasn't been updated for over a year now. Main problem is if you're using PHP 5.2 onwards and strict errors/warnings enabled (as you should be) it'll throw like a hundred errors onto the screen with 'Non-static method Mail::factory() should not be called statically.' etc. Better alternatives are Zend_Mail or Swift Mailer which work properly and are kept up to date.
OpenID is my preferred login method. We are developers, and APIs exist. Things are dead if we let them die.
Things are dead if they are confusing to the users. Ultimately, user adoption decides what becomes a success or not. OpenID has a number of usability issues, design issues, as well as issues that affect those who own the sites using OpenID as a log-in method. I wish I could remember the URL to the blog post where some Internet hotshot who'd been using OpenID for his high-traffic site for a long time finally abandoned it after numerous problems.
No. Thunderbird is coping as best it can with being told to do something that doesn't make sense. I gave you that PHP for a reason. It's your fastest, easiest way out. Sadly, I'm worried that it might by now be too late.
What a waste of space. It's a real shame people like you have found proggit.
No. Look at the code I gave you again; what rrrhys said is correct, but it's the same thing I said, and I said it in a way which, while harder to understand, is basically impossible to get wrong.
I like it.
Why not? Don't use them for software you're going to release (like WordPress), fair enough. But why can't I use them on my own server?
I apologise for my abruptness, but take a look at the mess of this post, there are multiple replies/cries to no-one and the "here's my PHP code" comment **doesn't actually contain any PHP**. People need to learn to walk before they can run, judging by the urgency that OP is portraying, this is homework anyway, and just pasting OP a bit of code he doesn't understand won't help him.
It's a feature of PHP and I'll be damned if I see people tell me not to use it one more time. This only applies if you're writing a web app for others to install (and it can be enabled anyway).
It's not a language feature, it's often a framework feature. 
The value should also be stored in a cookie. Sessions can be stolen, it's tougher to steal both session and your cookie. Submitted value must match the cookie and the session.
This one? http://productblog.37signals.com/products/2011/01/well-be-retiring-our-support-of-openid-on-may-1.html
As of this year, google are starting to implement OAuth in some features, so it may only be time that will kill OpenID.
your best bet is probably going to be [contacting the theme's developers](http://templatic.com/ecommerce-themes/emporium) and asking them. this isn't separate ecommerce software or a plugin, the commerce functions are part of a wordpress theme. *edit- really, a downvote for that, huh? also- [here is the support forum](http://templatic.com/forums/viewforum.php?f=50) for your specific theme. you'll have to register to see it apparently.
Actually the one I was thinking about was problably the one that the above article linked to: [http://blog.wekeroad.com/thoughts/open-id-is-a-party-that-happened](http://blog.wekeroad.com/thoughts/open-id-is-a-party-that-happened). But both get the point across. EDIT: See also [this](http://www.quora.com/OpenID/What-s-wrong-with-OpenID).
Perhaps you did not notice that he said *on a production server*, right?
Good point, it seems to be noticably missing... Well here's a blog post on it: http://shiflett.org/articles/cross-site-request-forgeries It's not that difficult to implement, you basically just generate a random token, store it in the session and also a hidden input. Check on submit to make sure the two version match.
It can also be disabled. &lt;?php can't.
Almost seems like you could just look for a substring... But you might want to remove punctuation and lowercase the letters (in boh strings) before testing... But I am curious if the actual "sounds like" functions would say that McDonald's sounds like McDonald's - Northeast Plaza or whatever.
 A PHP Error was encountered Severity: Notice Message: Undefined property: stdClass::$last_lock Filename: models/user_model.php Line Number: 39 Fatal error: ob_start() [&lt;a href='ref.outcontrol'&gt;ref.outcontrol&lt;/a&gt;]: Cannot use output buffering in output buffering display handlers in /var/www/public_html/ci-blog/system/core/Exceptions.php on line 166
What editors are people using that keeps doing this to them? I've never, ever, in the many years I've been doing this run into this issue even once. :/
I hackily disabled account locking before posting; should be ok now. Thanks for trying it out
couple things 1] if i violate the post title rules, it doesn't save the content of the post. 2] I tried posting a test post with a hyphen in the title "This is an actual post - not a test" and received a 404 error, i assume because it attempted to replace my &lt;space&gt;&lt;hyphen&gt;&lt;space&gt; with &lt;hyphen&gt;&lt;hyphen&gt;&lt;hyphen&gt; when posting. IDK, but something to check out. 3] I like being able to show/hide options, and that the post content remains if i switch from a text post to an image post, and then back. 4] On text posts, it would be handy to have an upload image option, even if you send it off to imgur and get back a url. that said i like it and keep us posted
Note that this is still totally useless for checking for non-existent indexes or variables if you have error reporting turned up (which, really, is the only real use I've potentially found for this operator yet). // 'name' not passed in. $name = $_GET['name'] ?: 'stranger'; echo "Hello, $name!"; // No bar defined. $foo = $bar ?: 'red'; Both cases still throw a notice. You must continue using the old ternary operator: $foo = isset($bar) ? $bar : 'red'; 
It's seamless. As far as you are concerned, after the mount the file system is the same, there is no transferring. If you run into any troubles, I'd be happy to help. I've set up a lot of NFS shares.
Actually, PHP sessions simply use a cookie to store the ID for each user's session (or alternatively, this ID can be sent along as a GET parameter - giving you ugly URIs in turn). While cookies are not very reliable, and using them to store sensitive information is a terrible idea, they are generally safe from any sort of outside attack. Up until a few versions ago, session IDs could theoretically be forged given enough information, but they've since added extra entropy. If you are worried about session hijacking, there's also a few mitigating steps you can take, but for any serious transaction you should be using SSL anyway, which makes the actual hijack impossible(?).
Thanks for the feedback. I've committed fixes to 1 and 2 and pulled these through to the demo. On no3 thanks, I'm trying to keep it as simple as possible whilst keeping some more advanced options. #4 is on the list of to-dos! Thanks again
To whoever replied "It's unlikely to be disabled" and deleted their comment before I could reply, well here's the reply regardless: How is it unlikely? Unless you set up your own servers from scratch (which I doubt OP does), you rely on whatever default configuration your distro/host decides on. In some of those, short_open_tags is disabled. How do you fix it without having root access on a shared server? How complicated is it, really, to adhere to good practice instead of having a stupid philosophy of "well this is common, it's never disabled, if it is, it's easy to fix"? This guy is asking for help, might as well give them answers that do not pose a potential problem.
Weird, my production servers all support short tag syntax. Am I doing something wrong?
If you're writing your code using short tags, why on earth would you disable them?
The problem is I need to match the other way. I need to use the string returned from Google to do the search, not the other way around. 
You wouldn't. People who use your code on their servers might. Servers on which people use your code might have it disabled by default. Maybe even when another developer migrates your code to another server.. It's not like there's 0 possibilities for it.
I've been tempted to do that very thing. Create a \String namespace and put all the string functions with consistent prototypes in there, which are just wrappers to the core PHP functions. There are, of course, problems with this 1) mostly that people won't be immediately familiar with these functions, but that's a chicken/egg issue, and 2) You ever so slightly degrade the performance of your applications by adding one more function to the stack. Also, PHP core functions are typically compiled and execute natively. The wrapped versions wouldn't be native, so there's more to push onto the stack for a tiny wrapper. Personally, why aren't the core developers talking about this already (or are they)? Namespacing the core functions (ergo, String::replace(), Array::push(), etc) with consistent parameters wouldn't break backwards compatibility...
Although I don't think this is exactly what nodren was talking about (you're trying to "objectify" PHP), the "solution" to this problem would be to made an append function in your String object (similar to Java/C#'s String.equals()). &gt; $string = (new String("Hello"))-&gt;append(new String(" World")); Ugly, but it aught to work?
 html {overflow-y: scroll;} Add that to your CSS and it'll always show a vertical scroll bar to prevent the awkward shift when you go from a page with a scroll bar to one without.
Shell out a few quarters and dimes, and try NearlyFreeSpeech.net. Much more reliable.
+ Added. Thanks for the input
My bad, it's actually called [Same origin policy](http://en.wikipedia.org/wiki/Same_origin_policy) and is true for JS and Flash (in flash it can be worked around using crossite.xml file). *edit: also, note that in order for this to work as explained in your second link the server you're connecting to must allow for such connection by sending a specific http-header witch is not sent by default.
The point of the original parent is that not all servers have the same configuration, therefore you should prepare such that it will not run into such blatant incompatibilities (either through defensive coding -- not using `short_open_tags` -- or determining the production servers configuration beforehand).
A significant proportion of the existing frameworks/codebase's switch to foo successfully. 
I'd switch for new applications. You'd have to get things in place like Linux packages for popular distros, and WAMP / XAMPP, and the like, but yeah, people would be interested. Really, though, this is just what PHP6 should be.
I'd run it on BeOS with Apache and MySQL just so I could be a BAMF Developer.
I've toyed with the idea of making a bridge between PHP and Python as it seems like a good match; models &amp; library code in Python and then controllers and views in a mix of Python &amp; PHP. Really the one thing PHP trounces most other languages is it's dirty simplicity towards view logic, but then fails miserably ( to be fair its gotten better ) at advanced OO principals. Otherwise if that seems too crazy, a PHP NT would need to be as easy to deploy as mod_php. A major stumbling block for a lot of junior developers and hackers is getting a working lamp stack going that can be reasonably production ready. That said, pull out the Zend engine or abstract it away so that language and implementation are more independent and you would probably be ahead of the game. Maybe something like this? http://code.roadsend.com/rphp
Turn literals into objects and add python's sexy index slicing notation, and you got yourself a deal. Like mike_sol said, I probably wouldn't convert existing projects, that's just not worth it. As long as it used a new file extension and can run on the same apache server as normal PHP, I'd write every new project in it.
Rather than forking PHP, herp and derp should write something like coffeescript for PHP.
If you use [DBus](http://developer.gnome.org/notification-spec/), that should be the same going to Gnome as well. The kdialog part is the only KDE specific information in there.
No thanks, I'd rather keep the syntax as is.
Love the idea. Step 1: Make everything an object. Numbers, strings, arrays, resources, etc. should all be objects, as they are in every other "object-oriented" language such as Python and Ruby. Step 2: Define a bunch of methods for the default types. - `substr($str, $start, $length)` becomes `$str-&gt;substring($start, $length)` - `str_replace($search, $replace, $str)` becomes `$str-&gt;replace($search, $replace)` - etc. Step 3: Meanwhile, keep all the old functions as they are. Just make sure that they have object-oriented equivalents, so that people can code new projects using the new standards while existing projects have a few years to be ported. Step 4: In the next major version, start throwing `E_DEPRECATED` when using the old functions. Finally, in the next-next major version, remove them. 
&gt; (all the things that force us to browse php.net to be 100% sure) I used to do that, but once I got an [editor](http://www.activestate.com/komodo-edit) that has auto-complete for both function names and arguments, I didn't need to anymore.
In terms of syntax it probably wouldn't beat Python - so I'd have to say no.
&gt; PHP is memory greedy and the longer the process exist the worse off you are. A file download will keep your PHP processes open for possibly hours and make you waste a ton of memory [This is no longer true as of PHP 5.3](http://us2.php.net/manual/en/features.gc.performance-considerations.php). As long as *your* code doesn't leak memory, PHP won't. (Rather, long-running PHP scripts won't abuse memory; a long-running download served through PHP without the assistance of things like sendfile will keep PHP open.)
yeah, but at that point why not just switch to python or ruby? coffeescript is necessary since javascript is interpreted by the browser, which we don't have any control over. For a server-side language, if you want to make something that different, why not just switch?
A helluva lot more than that. There is no real business case to make here; actually, there's tons of cases to make _against_ it, but I don't see how you could make a case to support it. You lose TONS of the following: * community support (php.net + any other php-related content would be absolutely useless) * development support (complain all you want about their current processes, but I doubt anyone could create a better dev team centered around a fork) * training (retrain all existing employees, any new employees) * dev tools: IDE's, static code analyzers (Fortify, phpmd, etc.) * userland code: libs, frameworks, PHP extensions (like PECL), applications (like PEAR) * server support (you'd have to recreate the SAPI's for Apache, IIS, nginx, etc.) * fast-track certifications from external auditors (good luck getting it past anything such as PCI-DSS, HIPAA, etc.) I realize that this is probably a "for fun" question, but I don't see it as being feasible at all. Facebook has gillions of dollars and influence, and I still haven't met a single person who's ever used HipHop.
I don't think it would work so well because the main draw of PHP is it's widespread acceptance.
Do it TODAY, with BeOS, [AOLServer](http://en.wikipedia.org/wiki/AOLserver), MongoDB, and Fortran!
I hear ya, people switching to "foo" would have to know what they were getting themselves into. The real solution would probably be just to switch to Ruby or something. Still, most of the complaint I hear are from confusing naming conventions. Just wondered if that change if people would stfu about it :P
I'm curious now, I haven't done any python programming. Any examples you would care to show us that might educate us on the similarities/differences?
This is really the better way to do it, and it's what PHP should do itself. This saves us from breaking the majority of old code.
Good point, I have been programming in php for roughly 10 years and never used an IDE. Recently I started up a small team of programmers and tossed around the idea of using phpDesigner for it's phpDocumentor integration. Personally I feel gross using auto-complete, but i'm getting over it. I guess I feel like "I don't know it if it's doing it for me" which is just silly.
Oh Fortran, [FLOG yourself](http://dominionofawesome.com/flog/) &gt; FLOG is the culmination of that thought process — a blog CGI written entirely in FORTRAN 77. Why? Why not? If you think about it, all a CGI script really is is a very fast form of batch processing. You send in a stack of cards (your HTTP request) and some time later, you get a stack of cards back (your webpage). After the page is loaded, the web server forgets about you, and if you want another page, you start another job (send another request).
I like php syntax, no need to change it. I just hate the naming conventions and argument ordering.. I mean for example, the names of the unrelated string functions substr and str_replace is just embarrassing. To think that naming inconsistencies from years ago are still plaguing us today..
A few days late to the announcement, but here's just a little suggestion. Your app displays dates in the format "12-11-1988", which is November 12th in your country ("eye colour"), but December 11th in the USA ("eye color"). Try using an unambiguous format such as "12 Nov 1988". Families of missing persons will appreciate it if they don't have to get confused about, for example, the last time somebody was seen in the area.
I couldn't agree with you more. PHP6!
He's just being elitist. I personally can't stand Python syntax. What was recommended would be nice, but as someone else said that really should be what PHP 6 ends up being.
Step 5: Replace `#!/usr/bin/php` with `#!/usr/bin/ruby` to get rid of the bugs and fill in the features.
Well, it's not like the old documentation would be useless. If they changed the names and argument order they would just start by linking to the old documentation for now (I think people willing to use Foo would already understand what they are getting themselves into..) and start deprecating everything else. We could do something like: newMethodWithStandardNaming($arg1, $arg2) //points to the old (soon to be deprecated) function: Method_Is_Old_It_Is($arg2, $arg1) Using the latter would throw an E_DEPRECATED.
Frameworks are very nice (CakePHP, Kohana, Zend) but they hide some of the low-level implementation. It's really a distinction of whether you need to learn PHP, or a framework built on PHP. I can't find the specific article I'm thinking of, but there was a discussion recently that frameworks should be used to ease the pain of the developer implementing a login system for the nth time, not to provide a drop-in black box that you use without knowing the details. PHP of all languages is so friendly to use. This also means you can pick up bad practices easily, because it's so forgiving. I would at least do some projects on your own that implement your own login functions, say, before just using a framework. For many small sites, that could be all you need. If you're eventually looking to do something more enterprise-y a framework helps alleviate much of the repetitive heavy lifting.
Yeah but the main reason people companies especially choose to do stuff in PHP is because there are way more low payable newbies who can crack out awful applications that just about work, and run servers that just about work. The sort of newbies that would be screwed by a "new" PHP.
PHP: if ($object-&gt;someVar == 'hi there') { $firstPart = substr($object-&gt;someVar, 0, 2); } Python: if object.someVar == 'hi there': firstPart = object.someVar[0:2] As you can see Python has a simpler syntax with no parenthesis around the condition and no brackets. Instead of brackets you use indenting, and the block of code ends when the indenting ends. [Here's a tutorial](http://net.tutsplus.com/tutorials/other/python-from-scratch-getting-started/), and here are some [other ones](http://www.google.com/search?q=learn+python). As for web frameworks, I prefer [Django](http://djangoproject.com) (the most popular Python framework). Recently a [Hacker News](http://news.ycombinator.com) poll showed that the most popular serverside language among the startups who participated in the poll was Python. PHP came second, if I remember correctly, and Ruby third. So Python is definitely becoming very popular with web programmers.
I personally prefer brackets. I just like how it looks way better. &lt;shrug&gt; so don't assume everyone will think indenting is better.
Thats forking insanity. 
I agree that it's a matter of taste, but I will say that it's also a matter of getting used to (in other words, once you've worked with Python for some time you'll likely come to like the fact that you don't need brackets). One thing I particularly like about Python is that there's simply less typing. You can achieve the same thing with less characters.
Instead of rewriting the entire language, why not do something ala coffeescript where you create a new syntax that translates to the original PHP code? There is a project out there that has started doing this, but is written in C# for some insane reason.
[Nettuts+](http://net.tutsplus.com/) has a lot of PHP tutorials. (I would, however, look more into [Python](http://net.tutsplus.com/tutorials/other/python-from-scratch-getting-started/))
I've suggested this several times. I proposed calling it QIQ (pronounced "kick"). No one was interested even though I also pointed you that writing php2qiq to do an automated conversion would be simple.
You could easily write a small extension that create aliases for those functions. Hell, if i had a list of changes to do, i could probably spit it out in a couple of hours. As for forking, yeah i though about it, specially after i had put my hands into extension writing, started to fuck around with the language itself. It's a messy place, few PHP developers actually know/realise that, and would require a real lot of work. May be one day...
It'd have to be implemented to avoid the PHP overhead associated with using objects vs procedural code, as shown here: http://www.theserverpages.com/articles/webmasters/php/performance/Performance_of_OOP_PHP_versus_non-OOP.html I'm not to keen on all my PHP code suddenly becoming 15% slower.
How about use Python No bullshit. I am a professional PHP guy, but python has all that you've described
If you're churning out particularly easy code in a high enough volume than having an auto-completing IDE saves so much time it is truly a sanity saver. Normally I don't code faster than I can think though.
Just pushed a big update to include the CMS, can read the reddit post here: http://www.reddit.com/r/PHP/comments/hdeup/embr_a_lightweight_blog_tumblelog_engine_formally/
The question is, what would be gained from this? Updating the library naming would be the same as re-writing the entire language... You're better off just starting from scratch.
That benchmark was written 7 years ago, using PHP 4.3. PHP 5 uses a completely different object model. I grabbed the two scripts from the page you linked to, and ran them several times with PHP 5.3 on a virtual maching running Ubuntu. Both scripts averaged 0.044s. In short, in PHP 5, there's no difference whatsoever.
I disagree with step 3 and 4. The whole point is to move on. Might as well do it from the start.
The problem is that python is not a web language (meaning, it wasn't built specifically for the web, it was built as a general purpose language). As such it lacks many of the features that make PHP so popular: drop-in deployment on Apache, native templating, easy access to form data and cookie management, easy database integration, etc The biggest appeal to PHP is that if all you need is a quick page to handle some form data, you can write it up and drop it in with the rest of your site without any configuration or mucking with CGI. You can't do that with Python. mod_python tried to solve some of these issues, but ultimately just isn't as seemless as PHP is and eventually failed (the project is effectively on hiatus and many of the sites I found while learning python said to avoid it). Most people agree that the best way to use python on the web is through django, which is nothing like PHP. We don't want to learn a new system, we want the system we know to get fixed.
You misunderstood. I was not talking about memory build up but rather that each PHP process is heavy to the point of 25-30 MB each. Considering that each process handle 1 request at a time that makes PHP memory greedy and long running processes will kill any kind of performance. As far as I'm concerned it's not even worth talking about PHP 5.2 as it has been end of life'd and anyone running it is insane.
I respect your hesitance in using an IDE, but I really can't relate to it. I've also been at PHP for 9-10 years and *still* to this day need to double-check parameter arrangement (is it $haystack /then/ $needle for this function, or vice versa?). But today, when I need to do that, I just type the function in my IDE of choice (Eclipse PDT) and pause a few milliseconds for the documentation tooltip to appear and remind me which order to put things in. It's little features like that, and awesome SVN/git integration, object browsers, declaration jumping, integrated line debugging, etc etc, that make using an IDE a no-brainer to me.
$this. It would be so much cleaner than a fork. Forks have the problem with an initial lack of acceptance, and then years of competing and incompatibilities after.
Also, Python's lack of braces is icky. I see no problem with fixing an otherwise decent language instead of letting it rot and switching to something more trendy.
You can do that while still retaining support for the old. For example, if `strtoupper($string)` became `$string-&gt;upper()`, the developers could still have dummy functions that basically do this: function strtoupper($a) { return $a-&gt;upper(); } That way legacy scripts will still run, but you can encourage the new, cleaner code.
It's funny that you should mention Python. I have been using Python for about a year now for my Computer Science classes. May I ask why you would recommend Python over PHP?
I love Python too. But I don't want PHP to die. PHP has some really neat features that I would miss if I moved full time to another language -- even one that is vastly superior in many aspects. I don't want this thread to devolve into a PHP-vs-Python flame war, so I'll just list two features of PHP _as a language_ (vs. Python _as a language_, so let's not talk about Django) that I personally find attractive: * The ridiculously simple view logic. In Python, you'd have to import a third-party library (or roll your own) in order to do something as simple as interpolating strings into an HTML page. * The execution model. Every request begins in a perfectly clean environment, and not a single variable remains once the request is complete. PHP is stateless, just like HTTP. You start it up, deliver the page, and GTFO. In my opinion, there's something really neat about this idea. By contrast, Python frameworks are expected to bootstrap their own WSGI server and ensure that an error condition in one request handler does not affect other requests. * Bonus: This is not a feature of PHP itself, but I've never seen the equivalent of [HTML Purifier](http://htmlpurifier.org/) in any other language. In Python, Beautiful Soup with your own whitelist can only get you so far.
If I were to switch to this new language I'd have to be sure that it remains supported for a very long time. Unfortunately, that means that it'd have to be Zend doing the work.
I've been using Eclipse with the PDT and subclipse plugins... works great. I hear netbeans is also very polished for php dev though. 
I absolutely agree, though tread lightly. .NET brings a lot to the table and switching to "raw" PHP will probably feel pretty ugly. However, it's really not too different than switching to C after playing with Java for a while; highly powerful but a comparable beast with an overwhelming feeling at times. I'd start with an empty canvas and some low-level PHP tutorials to start out with so you understand the concepts of how PHP works both as a functional and OOP language. It shouldn't take too complex of a project before you gain an appreciation for what a framework can bring to the table. I'm actually senior developer at a local web company that was once entirely .NET-based when I started. Our project manager knew my heavy PHP background and saw it as an opportunity to migrate technologies. I've been helping four developers make the switch for the last year or so. Unfortunately we just don't have the time to start them from scratch, so they've hit the ground running in a framework (CakePHP for now, but we're considering Lithium). Generally it's going fine, but it makes me cringe to see some of the odd assumptions they make about PHP because working in the framework has blinded them of the lower-level aspects.
I came into this thread pretty much being a realist ready to say "Nope, most won't switch" - but actually these are all the things all developers dislike about PHP from what I know. Add to the fact that a source-conversion tool could be made to aid in porting forward old code.
Changing some function names and argument orders is nowhere near the same as rewriting the entire language. All you need to do is download the source code, change a few lines of C, and recompile. The real problem is that nobody will use your fork because it's incompatible with everything else. 
I've tried 000webhost before took them over a year to activate my account and once they did, they were almost the same as 0fees.net, they added a tracking code at the end of all your files. http://hbalagtas.freeiz.com/robots.txt Basically renders your site useless for generating xml pages as this breaks everything.
Name the session token slightly differently for each page maybe? $_SESSION['tokenPageName'] = 'XhjXCKJHSD9sdf9randomchars897sXd'; So then if they have different pages open it will get the right token for that page.
Python makes it much easier to write good code by enforcing a lot of good practices that PHP will wink and let pass. It also has a lot of really awesome datamunging ability that takes several times the code in PHP. That said, it is not a web language first-and-foremost, as PHP is. So you'll need a web framework to take care of things that PHP handles for you. Most common: web2py, Django, Flask, Pylons. PHP lets you drop in some code into an HTML file and run with it in five minutes. It's easier by far to get started since it was designed for the web. Python is more flexible (and I think it's hella fun to write) but it takes a lot of getting used to if you just want a quick-and-dirty app. Learn both if you want, I did. I would pick PHP first, though.
I wouldn't say you are crazy, in fact I admire you spirit. I have 10 years of web development experience, I guess I'd just say be sure to learn a little HTML, CSS and JS too, you will need to be able to make client-side stuff too should you work alone. Make sure from the start you support at least IE and Firefox and strive for Chrome and learn the css hacks. Using Smarty Templating Engine for php will save you a lot of time when it comes to outputting page content and separating your code from your presentation. php.net is the best place you can go for not only documentation but for code examples, there is a ton of user contributed code examples and workarounds for common problems such as wanting a 5.x feature in 4.x.
I dunno where you're working, but if you have even basic PHP chops you should probably be making more than this. What area of the country? One of your greatest strengths as a PHP programmer should be your flexibility. PHP is so tightly coupled to HTML that you should really have excellent HTML / CSS / JS+jQuery skills to be "the whole package", as it were. This will make you very valuable to lots of different people.
I dropped out Orchestral Conducting for PHP. Am I crazy? (Sounds like a joke but it's exactly what I did). My point is,...do whatever you want to do. You might get the kind of cash you want in a couple of years though
Okay, Midwest I can see that being an entry-level salary, though I'd still look at moving up soon :P Do you have portfolio pieces / active sites you've worked on, any self-written side projects?
that's a feature (give it a try, we have cookies)
that's not a bad point **however** when you go beyond the most basic single-page CGI-like scripts everything you described starts to play against you. there's a reason PHP has frameworks too.
&gt;All you need to do is download the source code, change a few lines of C, and recompile. Heh, riiight. You make it sound like you'd have no trouble doing it in a weekend... If it was that easy, someone surely would have done this already since this is PHP's greatest weakness.
I know Python, Ruby and PHP and I choose Python any day but besides that I don't think those are real advantages. &gt; The ridiculously simple view logic depends, if you're using pure-CGI you can print to stdout and use Python's string interpolation that works like sprinf. for large files it won't be practical of course, the idea of "embedded Python" was kind of rejected by the community in favor of the WSGI approach, in part for the reasons explained on the next item but also because it's usually best to separate the logic from the presentation and having the full language available as embedded code tends to make people get lazier and just mix everything right there. in any case there's template engines (that you have to load, yes) which resemble embedded Python and those can be used without a framework, it's uncommon but possible. &gt; The execution model I don't think this a good thing either, both in terms of performance and code quality. as for performance, no matter how lean your interpreter is it'll always cost you to start from scratch every time, even if you precompile. the other problem is that I think it allows you to forget about good practices, I mean who cares if your code leaks memory, uses global vars or lots of memory? you wouldn't notice because after the script finished all your crap goes away and that's a terrible incentive to remain sloppy.
Does anyone else find it slightly depressing that when asked about what they'd most like to see change in PHP, this community almost always responds with either syntax changes or changing OOP to be more like other languages? Nobody seems to be interested in performance increases, memory use optimization or how the internals of PHP even work. 
In PHP4 (Zend Engine 1), any OOP calls required a double lookup in the massive hash table of PHP stored every variable, function, constant etc name in, which made for a slight performance hit. This same setup caused using uppercase FALSE to be slightly slower than using lowercase false, because the lowercase version was before the uppercase version in the hash table. I believe PHP 5 (Zend Engine 2) uses parts of DBJ's hashing library to create intermediate hash tables with pointers to be significantly faster. While OOP still (I think) requires double lookups, the new setup has trivial performance difference.
As I said, changing `str_replace()` to `strreplace()` is easy. Adding a bunch of new classes and functions is easy. After all, that's what all those PECL extensions do. The reason nobody bothers to do this with the built-in functions is not that it's difficult, but that it breaks backwards compatibility.
Simpler syntax, faster to write - plus, [Django's ORM is awesome](https://docs.djangoproject.com/en/1.3/intro/tutorial01/#playing-with-the-api).
What did you do with .NET? I mean there is a big difference between say VB.NET with code behind and C#.NET with ASP.NET MVC. There are related PHP frameworks that correspond to various MS technologies that might make it easier to get going. Definitely learn the basics first though. CakePHP is nice, I use it a lot because for basic apps I find it quite quick to get things up and running. You could do fancier things with it as well, but the support of PHP4 leaves the ORM layer with something to be desired (you could of course sub in Doctrine or something else). Cake is loosely based off of Rails, though it often leaves me wishing that php was more like ruby... I like the direction the Fuel framework is going, though it's young I plan to use it next chance I get. Other good ones are Koahana, Yii and CodeIgnitor and Symphony. There's also Prado which is more event driven code behind like so I've avoided it :) They all do most of the same things, look through some examples and see what strikes your fancy and pick one, can't really go too wrong.
Well, one of them! Or maybe it's the FTP programs. I suspect it's a faulty Windows &lt;-&gt; Unix line ending conversion or an editor wanting a blank line at the end of the file. All I know is this problem occurred a bit while I was working on a PHP product. As a developer I also had to do some amount of support for the product, and bumped into this issue. It made sense to just remove all the closing tags from the included libraries. Never had the problem again.
Those are features that I personally find attractive. I didn't mean to imply that they're "advantages" in any objective sense. They may or may not be advantageous depending on what you're trying to do. For example, PHP's view logic would be irrelevant if you liked Smarty. Anyway, people who write sloppy code tend to go to absurd lengths to find a way to write sloppy code, even in a language that tries its damnedest to prevent such disasters. Microsoft lovers welcomed C# as the perfect alternative to VB.NET's chaos, but nowadays there are just as many C# horror stories on TheDailyWTF.com as there are VB.NET horror stories. Ruby and Rails is all cool and shiny, but Diaspora's alpha was riddled with gaping security holes. Just wait until everybody and their dog learns to use Python, and we'll begin to see more than our fair share of appallingly unpythonic code.
On your OOP/MVC, if you need MVC explained to you, then I have a **[blog post here](http://voloreport.com/learn-kohana-mvc-php-in-under-an-hour1)**. Then, check out either of these two frameworks: [Faster](https://github.com/volomike/Faster) [Kohana](http://kohanaframework.org/) I suggest you start with Faster, first, in order to understand MVC better. Then, learn Kohana. Once you know both, you can try some other popular ones and make your own decision on which one you want to go with. Some great areas for asking questions about MVC and OOP are: - forums.devnetwork.net - the forum on Kohana - stackoverflow.com - here, perhaps 
I would say the bias is because 98% of the PHP programmers don't deal with CPU, memory, or IO limits when writing PHP scripts, but everyone has to deal with the language syntax, and it's problems. I'm sure most people would like PHP to be faster and not have such an god-awful memory system, but, I think PHP is good enough for the majority of people (and if it's not you've all sorts of 3rd party tools available).
I use php as a functional language why would I want to be forced to use objects.
Hmm, because PHP is pretty broken as a functional language anyway? (Having said that, PHP is pretty broken as an object-oriented language, too.)
Some little things I like with Python # List comprehension are like map/filter without any mucking around [number * 2 for number in range(1, 11) if number % 2 == 0] [4, 8, 12, 16, 20] # This isn't syntax for print, but for strings themselves print "Hello %s, how are you %s" % (name, date) Hello John, how are you today Oh a non-sucky memory system is great too... The class/object system is a little odd, but for bit of extra noise, it makes some complicated things fairly simple. I'm sure a lot of people are turned off by lack of braces, and indentation to being significant. I was too at the start, but now it feels perfectly normal. (I'm just a casual Python programmer, most of my day to day work involves PHP)
sloppy people take the path of least resistance, that's why a language, an environment and a community that promotes good practices is best. of course the more people there is, the more noise you have; also people who go to absurd lengths to write sloppy code isn't sloppy, they're just evil! :(
I don't see the upside either. The whole reason I learned PHP (and this is _after_ learning Ruby, Python, blah blah) is that I just want to put the crap on the web already, and there are a whole metric ton of other people who are doing the same thing, so not only can I find documentation, screencasts, etc, I can find a bunch of competing, active frameworks. To me, the whole _point_ of PHP is the size of the community, not the language itself. I think that's the reason that it keeps going, not the design of the language itself. Hell, even the designer said he hates to program :P
Performance increases, memory use optimizations, or internal changes are non-controversial. You submit a patch that improves performance and has no other side-effects and it will be included. **What is there to discuss?** 
Last I heard, CI was written to work with PHP4, not PHP5. Sure, it runs on PHP5, but doesn't use the object-oriented features PHP5. That's why Kohana was created -- originally it was a form of CodeIgniter. Then, Kohana went through a major overhaul between 2.x to 3.x, and so now it's not similar to CodeIgniter. I have to give CI credit though -- great docs. OOP takes a bit to grasp. Sure, anyone can rapidly understand how to make a class and some class methods, and then understand private, protected, and public scopes, as well as global scope. But understanding PHP's magic methods for stuff, or the "extends" and "implements" keywords, or interfaces, or iterators, or abstract classes -- these things are hard even for a seasoned Java OOP guy because PHP does them a bit differently. These other parts of OOP really take a book and a lot of time to learn. If you already understand OOP, then MVC is actually easy from a teacher/classroom perspective. But actually using an MVC framework and learning the quirks with how a particular framework uses MVC -- that's something else entirely. Faster does make it easier to understand and implement MVC rapidly. Kohana is also one of the easier, more minimal frameworks out there, although not as minimal as Faster.
[Autoboxing](https://wiki.php.net/rfc/autoboxing) is cool, although I fear the overhead it might add to the runtime. I also doubt step 4 would ever happen in PHP considering how concerned they are with protecting BC.
Do what you love and love what you do. If you are just doing it for a paycheck then you really shouldn't be doing it. (unless the paycheck is insanely huge)
I think its a good idea as long as you don't go to far. Don't OOP everything just remove non OOP functions where OOP ones exist. I think php is popular because of it's non OOP nature, if you changed it you might as well switch to java. Don't mess with loose typing either. That said I think you can gain lots of momentum for the idea provided the documentation is good.
*People* would. Existing codebases, not so much.
I have been doing web forms with C# code behind. We use something called netTiers to handle our data interface though. I have also thought about playing with ASP.NET MVC. Sometimes I wish I didn't have a job so I could take time to play around with all of the stuff I want to learn. However, most of the companies I would like to work for list PHP and Python as desired languages. I'm really used to the event driven model of web forms and MVC stuff kinda scares me. I learned what I know by being thrown into it so I never really got a formal education in programming. That's why I'm now in computer science. :)
Man what the fuck, are you serious? Im a fucking retard apparently, or ive been doing something horribly horribly wrong, i have years of php experience, years of front end web dev, and i don't make fuck all of barely anything and im eligible for food stamps, my life is a fucking joke, im embarrassed at how much time ive wasted and just fucking god damnit. just fuck man, fuck.
Can't up vote any harder....
I'm working on such a project on and off called [Snow](http://code.google.com/p/php-snow/).
It would take the years and years, and wide userbase responsible for testing PHP on a daily basis.
It took more than 5 years for people to move from PHP4 to PHP5 even though the latter was, aside of a few very small points, a drop-in replacement of the former. How many years (if ever) would you think it's going to take to move to this new incompatible language? Look at python 3 adoption to get a feeling of this.
You're not crazy. I do nothing but lazy server-side programming for a company here in Los Angeles and I make $80,000 a year, and that's not an uncommon pay scale for someone that really, really knows how to code. **My 2 pesos:** Learn as much as you can from your new job, including learning front-end code like Javascript and CSS. Once you learn a little more about OOP you can start working with more complex applications. But even still, keep your options open. $35,000 a year is lower than the low end of even a mediocre web developer's pay scale.
Well i am bored of my php job because i get underpaid.. i have a computer science degree but i started my career with php (i did not know where i was going and no one guided me.) After 2.5 yrs of exp i still am not able to get a good job with MNC. No MNC is looking for php. It is JAVA that matters to them. I have decided to switch to JAVA. Work on web projects was fun, but if it does not pay you, then wats the point...For me JAVA it is..
SMARTY TEMPLATES? NO^O^O^O^O^O^O^O^O^O
http://netbeans.org/bugzilla/enter_bug.cgi :)
congratz on finding a PHP job in the midwest They are very few and far between out here. 
Best of all, I go into work loving my job because I love what I do. (coding)
tl;dr();
Done! Thanks http://netbeans.org/bugzilla/show_bug.cgi?id=198699
Fix unicode handling and I'll switch.
Valid point, thanks! I have removed the kdialog call (it was there from a previous non-dbus version). There's really no need for a notification to appear there anyway so I'll just leave it as a console output. Thanks again!
The example you gave won't work because you can't use a new object directly, but you can do it with some trickery: function String($test) { return new String($test); } class String { public $rawString; public function __construct($string = null) { if ($string !== null) { $this-&gt;rawString = $string; } } public function upper() { return String(strtoupper($this-&gt;rawString)); } public function append($string) { return String($this-&gt;rawString.$string); } public function __toString() { return $this-&gt;rawString; } } $test = String("Hello")-&gt;append(" World!")-&gt;upper(); echo $test; // HELLO WORLD! So it is possible to do this, but it's not really as nice as being able to write: $test = String("foo"); $test .= "bar"; echo $test-&gt;upper(); // Fails because $test is now a string and not an object
Truth. Thank you.
yes, though depends on the company. If they just care about your quality of work and ability to work rather than "qualifications", you can be on a professional wage without a degree (as I was straight out of school)
The reason I don't try to use python more on my own projects is because of the wsgi crap. Just give me a folder to drop some files in and be done with it.
&gt; $tl-&gt;dr(); FTFY
I was at just under 6 figures by the time I was 22 because I kept convincing my boss that I could easily earn double what I did doing freelancing... which wasn't a lie, but a full-time job has much more income security.
I don't really care for IDE's either, just give me gedit and I'm good to go.
Not sure why you're getting so heavily downvoted, this is a fairly common and long-standing misconception. 
Depending on the school, AFAIK PHP isn't taught in college. HTML in Dreamweaver *shudder* is as far as it goes. Programming-wise in general, in CS they covered C and Assembly. Everything I learned was self-taught, started programming in 5th grade with BASIC on a Tandy 1000. That ended up being more valuable than the $50,000 piece of paper on my wall haha
MOAR
[**NO**](http://www.reddit.com/r/PHP/comments/gk7le/i_just_dont_get_mvc_or_oop/c1o8457)
yeah, but python lacks things that PHP has... I like python, sort of, but I think this would be closer to ruby than to python.
How in the world is `strreplace` better than `str_replace`?
not anymore
man, with modern IDEs (including a pimped out vim) this is such a non issue compared to what else is wrong with PHP. No finally block, inconsistent error handling, unable to type hint scalars. These and more are much more important than putting a _ in substr or removing a _ in str_replace. Much more of my time has been wasted on other issues of PHP then which order needle and haystack arguments are in.
Strait out of college the offered me 37k at my first job, I laughed because I had been making around 50k at my IBM coop, so they ended up giving me 40k. In 6 months I got tired of that place, switched to a position for 48k. In two years I was making 55, then I went to another place for 70k. I was there 6 months and they offered me a salaried job of 100k. The secret... I was constantly learning on my own and trying to improve myself. I was never willing to accept that my current position was the best I could do. From day 1, I bought my own server to play around with Linux and learn how to control the entire LAMP stack. Now I'm more than just the hacker I was growing up, I'm the guy people know they can come to to get things answered. It takes work, but you can do it. You really get the best salary increases switching companies.
CI dropped support for php4 a while ago.
I mentioned in the big post on the bottom the one I use, Agavi. The now defunct Mojavi was one, there were several classic frameworks like phpmvc. As I don't normally venture out of the Agavi world, I can't point you to other alternatives.
A hammer doesn't tell you how to use it. It can be used to drive a nail or crush a testicle. The hammer doesn't care. A computer language should be exactly the same thing. It should be a simple tool that doesn't advise or enforce good practice or bad practice or any practice at all beyond what is necessary to run it. That should be entirely up to the programmer. If the programmer wants to go off and do some damn stupid thing, that's their business. If they happen to go off and do some damn stupid thing, well, so be it.
What does "interpolate strings into an HTML page" mean?
Ah yeah, good call, thanks for fixing that up. I definitely agree, though, that it'd be nice to overload operators, but that would be a hairy ball of wax. It works easily in C/C++ because of the strict typing. PHP's type hinting facilities might be able to make overloading operators more practical, but I'd still see it being a mess.
Yes I know, I was being sarcastic. My point is that not everyone writes code that's going to be shared, so the blank statement that one should not use short tags is making assumptions on how the code will be used.
If the code I write for my company is running on someone else's servers without our consent/assistance, then there is a breach of license/contract. There's absolutely no reason for my fellow coworkers and I to avoid short tags because we have firm control over where that code will run. It cleans up our view code (&lt;?=$variable?&gt; vs &lt;?php echo $variable; ?&gt;), so we'll take the 2 minutes to enable short tags on a new server if for whatever reason it's disabled. But my point is that not everyone distributes their code or hands it off for others to host on foreign servers, so making abrasive statements like "Don't do this. Period." is just silly. Edit: I realize you were probably trying to help, but the way your statement was phrased irks me (and apparently also irked samkellett). Saying "If you ever distribute your code, you should really avoid using short tags" comes off much friendlier :-)
&gt; Unless you set up your own servers from scratch (which I doubt OP does) Being newer to programming doesn't mean you can't have the know-how to set up a LAMP server. It's in the realm of $15-20/month these days to have your own virtual server with root access. Throw Ubuntu on it and you're one `sudo apt-get install lamp-server^` command away from having a ready to go web server. &gt; This guy is asking for help, might as well give them answers that do not pose a potential problem. There we go. Nothing wrong with that attitude, and I definitely support it. But, as I said in an earlier comment, rephrasing your original statement would have saved a lot of grief.
hmm, I don't think this is where my comment was supposed to go...
As long as said someone provided an mod_foo to work with apache as well as mod_php, sure :)
His statement has also irked me.
we could change strstr to str_str, point is just to make them consistent.
If you want to fix php, get rid of loose typing, get rid of the retarded syntax (eg. backslash for namespacing), and get rid of the majority of procedural code. When I'm using "join()" it should be in the context of an array... $arr = array(1,2,3); echo $arr-&gt;join(','); Also, this should not be a problem (yet it currently is): (new Object())-&gt;someMethod(); There are tons of problems with PHP, the naming of the library is NOT one of them.
not quite, you're ignoring the human nature. I agree that bad code is the programmer's fault but unfortunately we're not perfect logical beings thus a language that helps produce better code is a better language because in overall it'll get better results.
No. PHP is so popular in part because it is so widespread. A PHP-like language that is incompatible with standard PHP would not have the advantage of penetration, and would face an uphill battle to acceptance.
Wow. Thanks.
In other words, Python (and most languages, for that matter) is tyrannical, whereas PHP is autonomous. Sure, in a tyranny it's harder to shoot yourself in the foot, but you won't nearly enjoy yourself as much once you become a sharpshooter (e.g. craftsman). Trust me.
In my experience, HipHop cannot compile any thing remotely considered "intermediate OOP", either, such as interfaces, abstract classes, etc. And you can forget any 5.3 feature. The stuff that did compile was mostly just 4.4 boiler room code.
Language design is no simple matter. I applaud your enthusiasm, but if you're looking for a more consistent language, you should explore other scripting languages. However, everything looks easier looking from outside in.
I love PHP, I use it all the time. What is so confusing about it?
 &lt;html&gt; &lt;head&gt;&lt;title&gt;&lt;?php echo htmlspecialchars($title); ?&gt;&lt;/title&gt;&lt;/head&gt; &lt;body&gt;&lt;div&gt;&lt;?php echo nl2br(htmlspecialchars($content)); ?&gt;&lt;/div&gt;&lt;/body&gt; &lt;/html&gt; Try doing that in any other language with an arbitrary number of variables. `printf` will get tired very soon.
I also did what you did, and make just as much, it's totally possible if your willing.
Oh shit, yet another magic method `__autobox()` to do what the language should support natively! Wait a second, that ain't a method, it's a function in the global scope...
While I have not explored every language I have used others (some for years) and I still come back to PHP for anything major. PHP has some really nice features, it's just a shame the naming convention is it's greatest downfall. Still, that's not enough to keep me from using it, I'm just suggesting it could be better by making it easier to remember argument order. That's it. Technically frameworks can already do this, but that's another layer on top of the madness.
the key part here is there's always other job opportunities out there, and they don't have to know what you made before. Walk into your next job opportunity like you already make 90k+ a year, and expect 90k+ for your time. Confidence is key. I've made 3 job moves since becoming a web developer, each one provided a huge pay increase over the prior. You should also check out what the competitive rates are for your area, major metropolitan areas always pay better then smaller towns, and you may find yourself in that kind of rut. You can always freelance with people who work out of major cities, and probably come in cheaper then what those guys are asking, but still more then double what you can make in town(this is what happened in my case)
I had to take it as a directed study... I also had a JSP course (mainly focusing on MVC) but the only other one you might get is an ASP course at a "microsoft-only" school... 
And I think that's fine. Initially this would be for advanced php-er's anyways. It would be a new language by most definition. There would practially be zero learning curve for those who already know php. It would gain acceptance via people saying "oh shit, this is way easier to remember now" Honestly, I'm already happy with PHP 5.3, if they never changed it again I could live with that (although some of 6.0's features would be nice). Having said that, forking it and making the proposed changes mentioned here and on other threads would seriously be a wet-dream come true. &gt;A PHP-like language that is incompatible with standard PHP would not have the advantage of penetration, and would face an uphill battle to acceptance. PHP has broken compatibly through it's lifetime anyways.. PHP 1/2 are not compatible with 3/4 which wont be compatible with 5/6. Some tidbits still work fine, but I don't think many major app have gone from one major version to another without any problems. This would be for new projects, however as someone else mentioned, a conversion script could be made pretty easily.
lol, why don't you like smarty?
Exactly.
I totally disagree with your MVC argument, at least from kohana's perspective(disclaimer: I'm one of the Kohana developers). For starters, Kohana doesn't require you to utilize ORM, and designs models in a way that they can be any representation of data, which is truly what a model is meant to be. The current version of Kohana has 4 different types of ORM libraries maintained by 4 different people. Kohana has the officially supported ORM library that the entire team maintains, and the others are community maintained projects. You can also roll your own models with out any ORM magic if that pleases you. Your model classes can chose to extend any class they wish, or none at all. You can encapsulate any data you see fit with a model, regardless of it's source, or what other libraries you chose to use to encapsulate other data. Secondly, there's no built in templating to kohana, but to PHP. PHP is naturally a templating language, and we utilize that with views by simply limiting the scope of what variables are available to a view. Templating options do exist but none are officially supported by the Kohana team, though we tend to like Mustache templating for our personal projects, which in my opinion only furthers the cause of MVC, allowing View logic in views but outside of actual templating. Thirdly, Kohana utilizes a Front Controller pattern, there isn't much that can be done to go around this with a non-OOP language like PHP. There's also the fact that PHP isn't stateful, so a huge amount of communication between the 3 concerns doesn't happen(For example a View doesn't really call the next controller, since a whole new page request happens for that, however Kohana 3 is HMVC so it is entirely possible for a second controller request to be called from a View.) Kohana also doesn't restrict people from doing things the wrong way, our belief is to provide the necessary tools, and allow developers to develop, rather then limit their ability by forcing them to develop our way. Most languages provide a console for sending debugging output to STDOUT but PHP doesn't. This means we allow developers to echo output and kill any script from any point and Kohana shut's down cleanly from this. I think it's safe to say anyone in this subreddit can agree you need that kind of functionality to work with PHP.
&gt;Don't mess with loose typing either. I agree. However, there should be a way to specify the type of checking (like you can specify the type of errors reported).. type_checking(V_LOOSE); //default if not specified //vs type_checking(V_STRICT); Just a though. Visual Basic has a similar feature "Option Explicit" for requiring or relaxing the declaration of variables before usage. &gt;When Option Explicit appears in a file, you must explicitly declare all variables using the Dim or ReDim statements. If you attempt to use an undeclared variable name, an error occurs at compile time. &gt; &gt;Use Option Explicit to avoid incorrectly typing the name of an existing variable or to avoid confusion in code where the scope of the variable is not clear. If you do not use the Option Explicit statement, all undeclared variables are of Object type.
Yes, that should work. Drop in a couple test redirects first, if you're unsure.
I make way more than $50,000. I'll IM you the amount.
that would actually be nice. I was debating in my comment to say to include loose typing or not in risk of contradicting my point. If you did strong typing, you could also easily bring some features to the language that don't exist, like better IDE support
The point is to not pigeon hole yourself. Learn how to do the front end stuff too. Take a photoshop class if you know absolutely nothing about it. Learn jQuery. Learn CSS. And dear god make sure you know the shit out of some HTML. It's all about marketable skills. For someone who just knows PHP and can do literally nothing else except for procedural PHP, yeah, you're right at about where you need to be salary wise. But if you can manage people, projects or fuck, even clients, then you now have a marketable skill. You don't have to be the best at something to make a living or to be a good manager. 
From the example output, I wasn't sure if it was failing because DBus wasn't working right in the KDE setup or not since the KDialog was only executed with an exception. Is there some reason DBus was throwing an exception originally?
Hell yeah on the VPS plan. It gives you free reign to try out what the fuck you want and play with new technologies whenever you want.
Yeah, it's a compromise. PHP will never abandon literals in favor of boxed objects, for the same reasons that I don't think PHP will ever offer native boxing: BC + KISS. Nothing breaks KISS like offering 2 ways to do the same thing (and yes, there are instances of being able to do the same thing &gt;1 way currently, but I believe most of those are side-effects and not bona fide features). I think the main goal of the magic function is to not slow down the runtime for the vast majority of users who will never use this feature; of course that's a double-edged sword, since making a feature harder to use results in decreased adoption, but I understand where they're coming from. Perhaps if `__autobox()` is widely accepted and used, then in time it could become core, but not for awhile.
Yes that should work fine.
See, you assume that I haven't worked with Python for some time. You assume anyone who works with Python will come to prefer its style. This is not a guaranteed Python effect. :/
&amp;#3232;\_&amp;#3232; 
&gt;Walk into your next job opportunity Who the fuck hires people to do this shit for that kind of money? That's what i cant get over. Apparently i live in the wrong place, but i have &lt;never&gt; heard of anything close to this, this is a huge blow to my understanding.
Dear sir and/or madam, I would buy you a beer and donate your open source projects well. Sincerely, Yes.
Yeah, I just imagine it's hard for an IDE to determine all the code paths.. consider working on a file that's included by 2 other files, and those files are included and the index.php sets the type_checking.. ide's might not "know" what mode it is without a lot of work.
I agree with you, on all points, I was just saying why flyingfirefox mentioned dropping the _. Also, (new Object())-&gt;someMethod(); will work in 5.4, which is supposedly soon
It depends on the work. Every job I've switched to has been more and more complex and I've been compensated for the switch. I currently make more than that kind of money and I feel I am compensated fairly for the level of work I do. I am a Senior Engineer with 5 years of 'real world' experience in a company that has 46k employees. It's all about finding the next opportunity and seizing it.
I'm not sure what kind of development work your doing, but I'm dealing with complex problems daily that rarely have one good answer. I've also dealt with problems where there isn't an answer, and one must be developed in house. The point is, programming isn't a cake walk, if you think so you're in the wrong field, if you think programmers don't deserve good money, you're in the wrong field. I can walk into an interview and ask for more then what I made previously because I can recognize there's a huge amount of value in what I do. The bottom line to places hiring is they are trying to cut cost, especially in this economy. They will hire you in one of two situations: 1. Custom intranet work that will make what they already do faster and easier for existing employees. 2. Maintaining their website that drives their business(such as ecommerce shops or custom websites). If you walk in there and show you know your stuff, you're capable of working independently creating something for them that will carry them on for the next several years, it'll be hard for you to get turned down. Also another huge thing is not going into an interview just trying to get a job, but actually showing you care(or at least pretending well enough) about what they do, and showing them that you enjoy working more then collecting a paycheck. I'm guessing here, but based on what your saying, it sounds like you work for some largish company who doesn't really show a ton of appreciation to developers and what they can do. Find a place that can recognize your talent and get the hell out of wherever you are, because it sounds like they cant.
College degrees are for suckers (no offense to any suckers). 
Sounds like you're getting paid to learn PHP. Woot. Do it for a year or two and then look for a job at at least double that salary. 
This is not the appropriate place to ask this question. I would suggest the Apache tag at [StackOverflow](http://stackoverflow.com/questions/tagged/apache) (since [/r/apache](http://www.reddit.com/r/apache) looks desolate).
Interesting, thanks.
One last tip: You almost never go wrong choosing salary over equity. That might not be the usual advice you get. Equity can be really great, but 99% of companies are never going to go big and make you rich off of equity. Only take equity over salary if you really believe in what they're doing. Of course if you can have both equity and high salary then do that. 
That would require leaving Reddit.
ohhhhhh noooooooo!!!!! Don't leave reddit
I've never seen that syntax in .htaccess - I do it with mod_rewrite, something like: RewriteEngine on RewriteRule .* http://newdomain.com/$0 [R=301,L] Assuming your old and new sites are on different virtual hosts, of course :)
Well, they don't have the same names. So, it's more like: Redirect 301 /this-page-about-cats http://example.com/our-cats-page 
Here's what I don't get, why not just write it in C++ to begin with? Sure it may be easier to just convert all your old code with this kind of tool, but moving forward it seems a little silly to me.
oh right, fair enough. You can still do that in mod_rewrite (only suggesting because that's how I'd approach it). You can obviously still do what you're trying to do with mod_rewrite, but if that Redirect thing is built in, it's probably faster.
Maybe not. http://www.reddit.com/r/apache/
I don't administer their server. So, is there a chance that Redirect 301 wouldn't be an available command? 
or /r/webdev
My main problem is that most of the people complaining want to force everyone to conform to their ideal. I'd rather see lead-by-example than rule-by-fiat. Additionally, the idea of using technical solutions to social problems leaves me feeling somewhat ill in most cases. If you want to encourage good programming behaviour, thats what the community is for, but the language should be agnostic.
*deleted as i see a similar answer has been given*
ok, it's a valid pov. I disagree because I think the way the language works models the way you think and use it but notice on my previous reply I mentioned the environment as well as the community being important parts on this process so I won't deny your point.
Well, depending on the changes wanted, your fork might just work fine with mod_php, as long as you don't go in and screw up with the hooks at the SAPI level...
Redirect 301 is not an available command. Assuming that the apache setup you're using will allow you to do redirects in your .htaccess file via [AllowOverride](http://httpd.apache.org/docs/2.0/mod/core.html#allowoverride), which, if you're using a .htaccess file at all and it's doing stuff, is a safe assumption... then, what you want is exactly what jaspertandy wrote, although he wrote it to redirect everything. For your example, it would be: RewriteEngine on RewriteRule ^/this-page-about-cats http://example.com/our-cats-page [R=301,L] You can read more here: http://httpd.apache.org/docs/current/rewrite/intro.html#rewriterule
for what?
I started my first 9-5 after college making $90k, doing software dev. If you don't live in the wrong place, you're just in the wrong line of work :P
I had no idea this functionality existed before I read your post; but now, I do. Many times the question is more valuable than the answers provided.
Here's my custom search for chrome - http://www.google.co.uk/search?sourceid=chrome&amp;ie=UTF-8&amp;q=inurl%3Aphp.net%2Fmanual%2Fen%2F+%s keyword "php". I've found good has a better job of getting me to what I want than the manuals own search.
cool, hope it comes handy. For what I've learned so far it's not hard to understand but a bit of an eyebrow lifter when you see it the first time.
The Redirect 301 works, I think, but the issue then is the last one: Redirect 301 / http://www.example.com It redirects everything. I was hoping the redirects above it (the specific URL to URL ones) would happen before the last one.
Agreed it's not PHP related, but I think he reached his target audience and with the traffic/size of /r/PHP I don't see it as a big deal.
Okay, I changed to RewriteRule, but there's still the issue of "If it's not mapped specifically, redirect to new homepage."
Yeah I dunno, at one point it wasn't a misconception, but yeah, they seem to have taken care of it. I think mostly I thought it was still an issue because I've seen benchmarks of frameworks vs no framework, and there's a pretty huge amount of overhead, and really, I've always thought OO was overkill for a lot of web projects since every request is pretty atomic, they're requesting a resource, which to me seems pretty nicely translated over to calling a function. Anyway, yeah, I was apparently wrong about the OO overhead itself.
I definitely live in the wrong place.
I actually freelance, but have been looking for a steady work type of situation. I think it might be a geographic issue more than anything else. There aren't many companies around here that do anything remarkable. I often joke that its like trying to run a service station in Amish country. There is just no demand for high level web development in my area. The catch22 is getting the oomph financially to relocate to greener pastures.
you can find steady work freelancing, you accurately described my area in regards to the companies around here, I have to freelance or move as well. I've been able to have steady full time work for a year and a half now spanned across 4 different clients(with lots of time with only 1 client working me full time) It's possible, just got to be picky about what jobs you pick up.
PHP is taught at MIT.
By that rationale, I should be able to post marketing material (ads) here, as I would be reaching my "target audience". I agree that it's not _that bad_, but I certainly don't want to encourage off-topic posts under ANY subreddit. Lastly, I posted it as a general FYI to point out the fact that he would likely receive much better responses when self-appointed Apache experts are responding, instead of PHP coders who may/may not know an OS from an .so.
Somebody from Facebook came and gave a seminar on HipHop a few weeks ago. Your question was asked and the response was basically its easier to find people who can write a lot of PHP fast. They initially looked into python as an alternative, but that conversion was ditched when the new features being added by the php team far outpaced the conversion process, and in the end it would've been for a minimal gain. Another point is that PHP is just easier to write, even if its the code is poor or potentially error prone. The way he put it, and which most people found amusing/shocking was that "maybe you don't care so much about finding all the errors before runtime and things like that." In the end, it seems Facebook is more interested in rapid development with code that works, even if doesn't necessarily work well. Which, is kind of reflected in the amount of odd things you see in Facebook (chat plagued with issues, rendering quirks, etc)
I love you. &lt;3 &lt;3 &lt;3
&gt; he would likely receive much better responses when self-appointed Apache experts On SO he would, but not here at reddit. The apache sub-reddit has very few readers, and in general I don't think most reddit users are looking to keep a separate sub-reddit for all the various little projects they use. I have a bit of a bias on this, as I've been completely unable to get legitimate responses from any chat that is centered around apache. However, I get a good response and helpful feedback from fellow developers that are using Apache.
You can do the same with a rewrite rule as a catch all: RewriteRule ^(/|)$ http://www.example.com/ [R=301,L]
&gt; 50k is entry level for web development, Holy god, I'm doing Financial work in Java and I'm only getting 43. I should rethink things...
Big name sites like Comedy Central use it, and I've been actively working with the devs which are pretty nice folks...
I'm waiting another year for "life things" to settle, then moving on to another company. I like the job, but I want 6 figures
Do what shit? Web dev? I do mainly PHP and Python, it's all back-end services for huge products we have. Most people think "web dev" is just a shiny CMS driven site, or something e-commerce, but it does get very complicated and huge. We have numerous daily builds, it's not all HTML :)
SSHFS &gt; NFS . I haven't heard of people using NFS for a while.. I don't think it's an encrypted connection either. You can use the reconnect option with sshfs so that the link comes back up if there's a network glitch.
That's exactly what I was alluding to originally, that ideally /r/Apache would be popular and he could turn to that subreddit for help, but considering it's current state, he'd probably have much better luck at SO (including much better luck than on /r/PHP). I wasn't trying to admonish so much as educate.
Forgive me, im not a good salesman apparently, lol. Once i learn and "assimilate" something into my repertoire i tend to not think of it as such as big deal. I think that is probably my biggest shortfall considering my particular situation, underselling myself.
Hiphop can compile Wordpress and Magento. IMHO this is pretty impressive and can lead to huge performance gains on each. Yes, there are minor limitations but the payoff is sometimes well worth the trouble.
I think they just want to try a lot of wild ideas and see what sticks on with their users. Get the functionality up on the site and worry about the details after they know people will use it.
Get cozy with Linux. Maybe you already are. The majority of php applications run on LAMP stack. Granted, PHP is a cross-platform language, but there are a lot of server-related tasks you should be able to do e.g. restart the stack from command line and edit files with vi. I recommend installing one of the latest Ubuntu's. It's become a popular distro for both servers and developers. Also, debian-based linux uses apt for software packages, which is much easier to work with than rpm.
&gt; I use php as a procedural language why would I want to be forced to use objects. FTFY
I take it ID is auto incrementing. "INSERT INTO Portfolio (ID, Title, Description) VALUES (NULL, '" . mysql_real_escape_string($_POST['title']) . "', '" . mysql_real_escape_string($_POST['description']) . "')" Double check the quotes since I'm on a phone. EDIT: You should also check that the POST values are set and valid before you insert.
 &lt;?php $title= mysqli_real_escape_string($_POST['title']); $description= mysqli_real_escape_string($_POST['description']); $mysqli= new mysqli('host', 'username' 'password', 'database'); if ($mysqli-&gt;connect_error) { die('Connect Error (' . mysqli_connect_error . ')'); } $mysqli-&gt;query("INSERT INTO Portfolio (ID, Title, Description) VALUES (NULL, '$title', '$description')"); if( $mysqli-&gt;errno) { echo $mysqli-&gt;error; $mysqli-&gt;close(); } else { echo "Successfully Added to Database!"; $mysqli-&gt;close(); } ?&gt; creates two blank rows and I also get the error message "mysqli_real_escape_string() expects exactly 2 parameters, 1 given"
In addition to the correct info on auto increment id's, you are also not escaping your sql query, which means you'll get errors if your post variables have quotes, as well as being open to sql injection attacks. You at the very least want to do this: $title = $mysqli-&gt;real_escape_string($_POST['title']); $description = $msqyl-&gt;real_escape_string($_POST['description']); $mysqli-&gt;query("INSERT INTO Portfolio (Title, Description) VALUES( '$title', '$description')"); (Note: if you have an autoincremented id column, best to just not insert it. mysql will handle it automatically, and if you need the id you can get it with last_insert_id) 
I used to agree, but the habit of using braces around your variables lets you easily do things like '{$title}{$description}' or even {$someobject-&gt;somefunction()} and fancier things. I don't think using the braces detracts in any way.
Unnecessary, maybe, but not wrong.
All mysqli functions expect the connection as the first parameter. You should use the OOP function, since that's what the rest of your code is using. $mysqli-&gt;real_escape_string($str)
The only reason you could be seeing two rows is if you're hitting the page twice. You should add an error message if your $title or $description are empty and exit the page. That will show you that the page is being loaded twice - once with the post data and once with no data.
mysqli_real_escape_string expects a database link to be the first param. Since your using the MySQLi object anyway do this instead: &lt;?php $mysqli= new mysqli('host', 'username' 'password', 'database'); $title = $mysqli-&gt;real_escape_string($_POST['title']); $description = $mysqli-&gt;real_escape_string($_POST['description']); ... since your Id is auto-incrementing you can just leave it out of your insert statement: $mysqli-&gt;query("INSERT INTO Portfolio (Title, Description) VALUES ('$title', '$description')"); ...
I don't see anything in that code that would cause two rows to be inserted. Are you calling the same page twice, by any chance? This could happen if you have redirects in another part of your page. Try inserting the following line at the beginning, right after the `&lt;?php` line. If this solves the problem, your page is being called twice. (Make sure you remove this line when you're done. It's only for diagnostic purposes.) if (!$_POST) die('REDDIT'); 
Super fast **base file path** and **base url path** identification without having to create our own functions. On subsequent hits of these lookups, it caches it per connection (page click or page redirection) so that repeatedly running those lookup functions run much faster than the initial lookup.
I support your idea. Can't upvote this one enough.
Very nice, Synewaves. The way I was doing it was like this: function returner(){ $oReturn = (object) array(); $oReturn-&gt;Value1 = 'test1'; $oReturn-&gt;Value2 = 'test2'; return $oReturn; } $oResult = returner(); echo $oResult-&gt;Value1 . "&lt;br /&gt;\n"; echo $oResult-&gt;Value1 . "&lt;br /&gt;\n"; But your idea is also nice too. 
I agree, this is kind of a circle jerk here, but I do find I'm learning something, and do hope that the PHP maintainers are being inspired by posts such as these in order to implement something. I mean, we can't just give up hope. 
Better error handling regarding class inheritance loops that cause out of memory errors or segmentation faults. Instead, PHP needs to detect these inheritance loop problems and mark them as such, and head off a segmentation fault or memory error for such conditions.
Why not just find the bottlenecks in the PHP and then hire C++ developers to make functions we can call instead of doing it the way we did in the bottlenecks? And why not use HipHop as a way to solve the problem in PHP, then compile into a C++ function, perhaps optimizing the C++ if necessary, and then reimplement as a module to load into PHP again?
* Pull out the interaction with `$_GET`, `$_POST`, and other `$_` variables, or the cleaning up of those variables. That's your controller and usually you want these thin. * Pull out the interaction with injecting variables into a template, rendering the template, and displaying the template. That's still your controller code, but is calling the View APIs. * Pull out where you are in the template and are interpreting the injected variables, doing a short if/then logic on an injected variable, or iterating through a loop regarding an injected variable. That's your view. * What you're left with is the model code. It's the heavy-lifting part of the code, such as database queries, computations, etc. 
I now use [Twig](http://www.twig-project.org/) which I'm very happy with. Do you approve, or do I get some of that cool superscript textage too?
Because PHP is a templating language. That's *what it is*. Adding Smarty is nothing but a performance waste and it just complicates things. Keep your code and your display separate, but there's absolutely no reason you shouldn't simply use PHP. This has been stated by Rasmus repeatedly, and I agree with him.
Who disconnects? I don't. The system handles disconnects for me.
Start [here](http://devzone.zend.com/article/1021) Extensions are an arcane art. Good luck.
I do a lot of rewriting. Do you have a list of both the old url and the new? A good way to get the old urls is either from their sitemap.xml or yahoo web master tools, where they allow you to export up to 100 urls. the rules you need will vary depending on whether you have any query parameters ie ?id=89&amp;cat=6 etc. In the old url 
I think it's a matter of abstraction. One needs a tutorial PDF or page they can follow, and then some pre-built things that they build to make this faster. From there, you can focus on the C or C++, run the pre-built command you built to compile it and load it up into the php.ini, and off you go. 
I've not done it for several years but I didn't find it that arcane TBH. I seem to remember using some tool or other that made it relatively painless. I'll see what I can remember and maybe do a blog post on it if there's much interest. 
There are some helpful tools, but you are still coding explicitly for PHP, and they use dozens if not hundreds of preprocessor macros to make it all possible. It's been a number of years since I've worked in C, so I'm definitely rusty, but last time I tried I fell flat on my face. Getting a single simple function running shouldn't be that difficult, and there are examples available in the PHP source (along with the tools to help you get going), but if you want an extension that actually does something new and useful... it's going to take a good bit of time.
Try logging to a file to see if the page is being called twice. Firebug used to have this problem, also broken images and JS may cause issues if you have URL rewriting on. &lt;?php file_put_contents("log.txt", "Log from request: " . $_SERVER['REQUEST_URI'] . "\n", FILE_APPEND);
It's arcane for PHP programmers. It's straightforward for C++ programmers.
Some excellent advice right there folks.
Maybe your lack of English skills has more to do with this than the field you work in itself?
I let my clients (power users) and designers have direct access to the templates. Using Smarty allows them to adjust a couple variables here and there, not much that would break things. Not using Smarty would give them full access to adding and executing raw php code. To circumvent this, I would have to write a templating system or use pear's.. no thank you. I like the layer of security Smarty adds. Sure they can mess up the smarty code, but they can't add code to delete everyone else's files!
Thanks, I'll be looking into this as well. 
I would be quite interested.
In my opinion the easiest way to do this is to use a [gearman job server](http://gearman.org/). You basically define a job and a worker to handle that job. The worker connects to gearman and waits to be assigned a job. You then have PHP contact gearman with a job and it distributes it out to any available worker. The theory here is that since you have the gearman job server as an abstraction layer the workers can be written in any language that has an API to connect to gearman - and there are quite a few of those. For instance this is a client and worker which fetches a file from a remote site. I did not want to handle this in PHP as it would keep a process alive for a long time. With a C worker it took only a tiny bit of memory to handle it. Lots of extra code to write, though. http://pastie.org/private/7f2wwjmwx7worehdqwyna
I recommend checking out behat for BDD, phpUnit for unit testing and Symfony1.4/2 (or other framework). They won't hide too much php from you since you still need to code the business logic and Symfony2 makes a lot of use of 5.3's new features. Best of luck in your new adventures.
Ive always felt the best way to learn a language is to write a simple page the involves includes and db connections. Then take what you learn from that shitty page and write a really simple framework. Who cares if it useless, just give it a try. If you do that, youll have a better feeling for the language. Then go and use a real framework... this way youll understand some of the things the framework is doing for you.
Have you got a session_start(); ? Or is the session working and not the cookies? Do you have Firebug? You can see if the cookies are being set at all, or if they're expiring immediately etc. Have you got error reporting turned on in PHP or access the the PHP error log? Might want to make sure no errors are being thrown. 
Yeah I have session_start() at the begining of every page that uses sessions. The $_SESSION['TEST'] becomes set after it redirects to the next page but not the cookies. I have error reporting on but no errors and being sent besides when i tried to print_r $_COOKIES. No I dont have firebug, ill check that out. 
Well it's oppposite, implode() can accept arguements in either order!! Implode($glue, $pieces) OR implode($pieces, $glue) This is because the arguements were originally the opposite to explode(), so it made it confusing, so they allowed you to put them in the same order as explode().
I believe your problem is the first setcookie line. The fifth parameter is supposed to be a domain, not a URL. Also, I believe certain browsers (IE?) set the maximum cookie expiry time to 30 days and consider anything over that to be invalid, so you may want to change the 3153600 to 2592000 (or 60*60*24*30). 
I had looked into this before, it is very simple and effective way to run distributed tasks. Especially when certain task will be faster in a different language. 
Give firebug a shot. Kill the header redirect and let the page load and see if the cookies are set. Also, just found this in a comment on http://php.net/manual/en/function.setcookie.php (don't know how reliable it is, but worth a shot) &gt; When setting a cookie on a page that redirects, the cookie must be set **after** the call to header('Location: ....'); 
Just following that the php.net documentation said. I tried changing the expiration date. But no dice.
Commented the redirect out and printed the cookie values and they were correct. So it my be a problem with the header redirect. I tried placing them the header function but that didnt help it. 
It really makes me wonder what's under the hood that the above code snippet isn't currently doable...............
This worked!!! But how do I maintain this?
The tool I used was called PECL_gen and its spiritual successor is called [CodeGen_PECL](http://php-baustelle.de/CodeGen_PECL/manual.html). Its documentation looks very good and I'll have a play with it when I have time and maybe do a writeup.
Cheap computer and many sleepless night. Dude you are awesome.
You're storing a hashed version of the password in the cookie? Bad idea. A potentially better solution: ini_set("session.gc_maxlifetime","2592000"); session_set_cookie_params( 86400*30 ); session_start(); /* ... */ if(isset($_POST['rememberme'])) setcookie( session_name(), session_id(), time() + 86400*30 );
It's actually usually the twitter call that fails (times out etc). I could rewrite it to just catch that particular failure, but it was just an experiment.
I hate it when people write titles like this: "Cool thing in PHP" with a body text of: "Anyone know how to do cool thing in PHP?" Because the title should be a summary of the article. Put a freaking question mark if it's a question, otherwise I'm going to assume your post explains how to do "cool thing in PHP".
You could have a look at [SWIG](http://www.swig.org/).
I agree, and am sorry I didn't do that. Thank you very much.
Because this sort of server protection isn't the role PHP should play. The server should be properly setup otherwise and not rely on PHP's protection which is cumbersome and just damn annoying for programmers.
Because it's useless.
Because it's misleading. Newbies would enable it and think they are safe (because, after all, isn't it called *safe* mode?), when they're not. At all. Something similar happened to magic quotes.
... and it just didn't work.
Your English is just fine. Though this is a small sample it's indistinguishable from a typical native English writer. There's my off-topic two cents. :)
Here's [the full story](http://www.php.net/~derick/meeting-notes.html#safe-mode): &gt; **Issue:** safe_mode is a feature in PHP that checks whether files to be opened or included have the same GID/UID as the starting script. This can cause many problems, for example if an application generates a cache file, it will do this with the user ID that belongs to the web server (usually "nobody"). As an application is usually uploaded by the user belonging to the web account (say "client") the scripts can no longer open the files that the application. The same problems happen when for example an application generates an image. &gt; **Discussion:** As safe_mode is a name that gives the wrong signals as making PHP safe, we all agreed that we should remove this function. It can never be made totally safe as there will always be ways to circumvent safe_mode through libraries. This kind of functionality also better belongs in the web server or other security scheme. open_basedir is a feature that we will keep, and we will point users to this functionality in the error message that is thrown when we detect this setting on start-up. &gt; **Conclusions:** &gt; 1. We remove the safe_mode feature from PHP. &gt; 2. We throw an E_CORE_ERROR when starting PHP and when we detect the safe_mode setting.
The first sentence could possibly be changed to "I haven't used php for long." Other than that, I agree. Good english skills. 
That is a problem and good for you to realize it. I also had that problem when freelancing in the past. The biggest thing to remember is people are paying for your knowledge, not just the time it takes you to finish a project. What's not hard for you is almost impossible for your clients which is why they pay you to get the job done. So don't be afraid to charge what you're worth (or move to a more tech area).
Did you change the URL (http://127.0.0.1:8888) to an actual domain? Does it work if you remove this argument completely? Also, are you setting your virtual hosts to point to example.com? The point of that argument is to set it for your domain. You can't set it for another domain, as it becomes a Cross Site Forgery attempt.
I like Zend Framework if you go the framework path.
I suggest before using a framework you attempt it without. Not for anything other than perspective on if in the future you find frameworks to be worth it for such a task. Believe it or not, simple login and session management touches on a lot of different aspects of php and is a great way to get a practical, useful taste of the language. That said, personally, I have a user management template that I put together myself to deploy in these situations, while using a framework seems easier, IMHO, its a bunch of fluff for something relatively simple.
Great tutorial. Anyone able to provide the download so we don't have to register?
I had created just such a template for myself in the original ASP Classic, actually, I just thought I'd try to learn more about PHP the way people are actually using it and try to avoid newb security pitfalls..
Unless you're writing production applications already in PHP, which is extremely unlikely, it is okay to take a few security shortcomings at first if you are learning, but you need to know they're there soon after.
Note that it'll be removed in 5.4 and not 6.0.
Im looking to try this out, but I have one question. How would you make use of the cookie to retrieve the session data. Like previously I had if(isset(cookie[name])) .
There are two ways to request a web page. One is GET, which is used whenever you point your browser at the page, e.g. when you enter the address directly, when you click a link to the page, or when there's a `&lt;script&gt;` or `&lt;img&gt;` tag pointing at the page. One is POST, which is used when you submit a form, and the form says `method="post"`. (If the form doesn't specify a method, GET will be used instead.) As the name implies, GET is used when you fetch some sort of information (such as a web page, an image, or a JavaScript file) _from_ the server. On the other hand, POST is used when you submit information _to_ the server. You want this page to be requested with POST, because you're submitting data to the server. But if the page is erroneously requested with GET, `$_POST` will not contain anything. If `$_POST` is empty, `$title` and `$description` will also be empty. That's why an empty record was being inserted. The line I suggested causes the page to die if `$_POST` is empty. This is a quick and dirty solution, but not the best way to do it. First, you should make sure that the page never gets requested with GET in the first place -- which you already fixed. Second, add a few lines to check `$title` and `$description`, and produce a meaningful error message if they're empty. This will not only prevent empty records in the future, but it will also help if the user accidentally clicks "Submit" without typing anything. if (empty($title)) { echo 'Please enter the title.'; exit; } if (empty($description)) { echo 'Please enter the description.'; exit; } If you have anything else to check, for example, if you want users to enter at least 10 characters in the description, you can also check for those in a similar way.
I like [Ion Auth](http://benedmunds.com/ion_auth/) for CodeIgniter. It's got just about everything you'd need for user authentication and management. I believe a demo is included so you can see how it is implemented, which can really be helpful when you try to plug it into your own web app. The [CI forum thread](http://codeigniter.com/forums/viewthread/145263/) is very active.
What specific question do you have? "I'm looking to use Google maps API, how do I do it?" is way too broad of a question to ask on here. Have you actually looked at the Google maps API? It's really quite simple and well documented, they even have example code that does almost exactly what you're asking.
You'll need to dump those variables, for arguments sake $city and $state, into some javascript (for a live map), or just straight into an &lt;img src&gt; if you're happy with a static map (code below). Like so for Chicago, Illinois: &lt;img src="http://maps.google.com/maps/api/staticmap?size=512x512&amp;maptype=roadmap\&amp;markers=size:mid|color:red|Chicago,%20Illanois&amp;sensor=false" alt="Map of Chicago, Illinois"/&gt; Or using your variables: &lt;img src="http://maps.google.com/maps/api/staticmap?size=512x512&amp;maptype=roadmap\&amp;markers=size:mid|color:red|&lt;?php echo $city . ', ' . $state; ?&gt;&amp;sensor=false" alt="Map of &lt;?php echo $city . ', ' . $state; ?&gt;"/&gt; Full docs for static maps @ http://code.google.com/apis/maps/documentation/staticmaps/
this. yeah the new google maps v3 javascript api is simple and plenty of examples... especially for what you want since you're looking for the most basic usage. the only thing i'll warn you about is that google's examples tend to take advantage of global namespaced variables in javascript so with more complex usage some bugs can creep up from scoping issues but nothing you should even run into. just read this... you're basically looking for their "hello world" example http://code.google.com/apis/maps/documentation/javascript/tutorial.html
Safe mode was an ugly hack built on to an insecure PHP. PHP has been significantly improved now, and developers are more educated that security is their responsibility.
safe_mode implies that it is making your code 'safe' but it is very easy to make unsafe code while safe_mode is turned on. It's just a collection of features which are available through other config options.
I can't thank you enough for your insight, I've never heard of the staticmap feature before but it's absolutely perfect for my project.
Yea, sorry for the open-ended question. I had done some research on the API but not enough when I created this post, definitely my bad. However, I did discover an awesome alternative through mamber12345's comment so all in all -- a success. Thank you for your information!
...and then you can check her book covering the same topic: [Extending and Embedding PHP](http://www.amazon.com/Extending-Embedding-PHP-Sara-Golemon/dp/067232704X)
Thanks
Cleanup in cubicle 12 please. 
I don't understand the question - it does have namespaces. http://php.net/manual/en/language.namespaces.php Are you asking if it's a good feature of the language?
please look at my example; php does not allow you to add variables to a namespace. echo \inc\$version;
why?
oh, sorry, I didn't pay enough attention.
If you're trying to _sell_ this (as in the idea), then you might want to include some documentation for those who might not have heard of or used underscore.js. I follow JS pretty closely, but with the bandwagon effect of microlibs out now I ignore most of them, so I really have no clue what underscore is or why I would want it ported to PHP. Oh, underscore.js is simply functional wrappers? PHP is slow enough as it is, if I needed to do real functional computation, I'd do so in a language that implemented it natively.
Location? I'm assuming the US? Those figures could vary by 20% or more depending upon where you are, even within the US.
Check this post: http://24ways.org/2010/finding-your-way-with-static-maps
This isn't to do any heavy computation. A use case will be when you want to extract only even numbers from an array and map them to strings. _($arr)-&gt;filter(function($val){return $val%2 == 0;})-&gt;sort(function($val){return $val;})-&gt;map(function($val){return $result;}); Though this functionality currently doesn't exist, it's only a matter of a couple of days before it is implemented.
Well, uh, yeah. Knew that.
You're welcome, glad to be of assistance!
You can't hash since you need the original value. AES/Blowfish with a different key for each user. Since the user has to login to post (I assume) and that you hash (presumably bcrypt) their password to your site, base your encryption key on the original password. Since you don't store the original password in your database, you won't have the enckeys until the user logs in. When he logs out, gone are the keys till he logs in again. 
&gt; why don't you try not being a douche to people &gt; And by the way... $version = 0.0.1; Will give you an error. You can't have two decimal places in a number dumbass. Feel free to take your own advice, keyboard warrior.
Who the hell has 200+ blogs and maintains them by themselves?! Let alone posts the same content to every blog... 
Cheers that sounds like a decent solution. 
I don't have an immediate need for this but might in the future. edit : Why the downvote? I watched the project on github and might use it in the future.
PHP 6.0 is our Duke Nukem Forever.
Does it work like this? echo \inc\{$version}."\n";
&gt;Its for affiliate marketers. Sure sounds like spam to me. In any case... open id logins? One password per account for many blogs? Using twitter / oauth? 
 // TODO: enable arguments $val-&gt;$funcName(); Just do: call_user_func_array(array($val, $funcName), array_slice(func_get_args(), 2));
Become familiar with the semicolon;
Affiliate marketing is the Amway of the internets. It may not be boner pill spam, but it isn't much better either.
No, because there's little advantage to having a bunch of global variables lying around. 
Sessions are already relying on a cookie to identify the data. What this does is simply extending the lifetime of the session data and overwriting the cookie so that it doesn't delete the cookie once you close the browser. 
It's awesome when non-native speakers apologize for their English when they have English skills indistinguishable (and often better) than the people that were born into the language. Those people instead just say, "STFU grammar nazi. You know what I mean."
Yeah thats really the best idea i can think of.
[](http://)
Excellent! I tried that as the solution and worked beautifully, and a learned a bit more. Thank you!
No problem.
I've just started using [Tank Auth](http://www.konyukhov.com/soft/tank_auth/), which is based on DX Auth. Has anyone tried both? I'm curious to know how they compare.
Except that Google detects that kind of crap and it actually *harms* your pagerank when it's done...
Disclaimer: I've never written a plugin for blog software (or even investigated doing so) so I'm not 100% sure my solution would work. Instead of asking for and storing the user's password you could write a plugin that the user installs on their blog that allows for remote posting when the correct API key is used. You would then generate that API key randomly on your server and tell the user to set it on their end. This way you never need the user/pass and if you get compromised then the only access the hackers get is limited to the capabilities of the plugin.
Better hope nobody wants to ever change their password...
Just re-encrypt all data... When a user changes its password, you still have access to the old password before the changes are committed. Re-encrypt everything while changing.
I have to second this. More off-topic, but here it goes. I lived in Germany for a year and had many people apologising for their "bad" English, when in fact it was just fine (and I live at home in a big city so I'm used to immigrants that actually have very bad English skills and don't care). The biggest facepalm for me was *they* were apologising for their "bad" English when I was in Germany and the reason we were speaking English was because my German language skills were so incredibly terrible. (Jetzt spreche ich Deutsch viel besser als frueher) Edit: Also, if it wasn't for the sentence pointed out by Razed, I would have said native speaker too :) The wording was just a little off on that sentence, but honestly I originally put it down to typo.
I don't know why but I read that as "Google detects the crap out of that and..." and I laughed, then realised that's not what you wrote. :/
Not to be a grammar nazi, but just to genuinely help teach I think the best wording would be "I'm new to PHP." or "I haven't *been using* PHP for long." Otherwise it sounds like you're saying you haven't used PHP in a long time.
Nope, I've never used it.
Ah, ok, well looks like a good use of PHP's new anonymous functions. For quite a bit more flexibility, you could allow objects. For instance, you can iterate an object's public properties with `foreach()` just like it was an array, or you can create specialized objects which implement the [`Traversable` interface](http://us2.php.net/manual/en/class.traversable.php) so that you can have exact control of how that object is iterated.
Someones got a case of the Mondays :(
Thanks! Committed! (I'm still relatively new to PHP)
Actually the user provides the objects for iteration. Right now, it's restricted to arrays, but I might loosen the restriction on objects and other classes that have implemented the Traversable interface.
It's not email spam, it's blog spam. Posting variations of the same article on 200 different blogs is meant to spam the search engines. You search for a term in Google and the 200 articles show up. It craps up the search results with worthless blather. 
All you really need to know is that session_start() _always_ has to be called in order to get access to stored SESSION variables.. A session is a session, whether you create a login process or not. I'll agree with the other comments that you should try building _something_ from scratch if you haven't before.
nice one
[Zend_Service_Twitter_Search](http://framework.zend.com/manual/en/zend.service.twitter.html#zend.service.twitter.search) is pretty simple to work with. If you look at the twitter api, you'll see you can specify the offset tweetId. Quick hint: tweetId's are too big for PHP so you have to use floats or strings before it goes into mysql.
http://usercake.com/
I love / will love that game.
It does not harm the page rank of anything they care about. It only harms the page rank of the spam sites and that doesn't really matter very much. The page rank of the site being linked to is not affected neither positively or negatively - if it was affected negatively then no one would try to promote their own site, they'd just try to drag down the competition.
How big of a project is this? If it's a one user CMS for a website you might as well try and build it yourself. It won't be that hard and you'll learn a lot about sessions, cookies and hashing.
Im gonna give this a looking at in the next day or so, I will report back. Also, thanks for sharing.
What advantage does this confer over doing the three operations separately? (array_filter, usort, array_map).
 For performance one idea is to use custom iterators to loop through the array/iterable the minimum number of times (instead of calculating the new array on each call just return an iterator that calculates it for you when needed). I'm not sure that this is what the original underscore.js does though. This stuff is sorely needed in PHP. LINQ4PHP implements some similar functions (mainly the collection/array ones) (http://github.com/halfnelson/LINQ4PHP) using the iterator approach. ie $a = //some massive array of numbers From($a)-&gt;where(function($i){return $i%2==0;}) -&gt;where(function($i){return $i&gt;10;}) -&gt;take(5) Only loops through the original array on the first access and the results are streamed. resulting in only 1 iteration and stopping when it finds 5 that are &gt;10 and %2==0 But for small/medium arrays the current implementation of underscore.php is no problem and the code looks nice and easy to read. 
The best way to solve this problem is to die in a fire. I've had several clients perish in an inferno and everyone of them felt that death by heat was the best way to get laid and increase penis size while not going bald. I also made $2k a week ceasing to live near flames and expect that by the time I expire from ignited flamables I will probably need my horoscope read.
This is /r/php, where people straight-forwardly suggest using namespaces with procedural cruft! I mean, seriously???
&gt; Welcome to Costco...I love you.
On Wednesday ;o
Namespaces only work with classes. And I'm sorry, but the NICEST way I can say this is, "Really?!?!?!?" You need some training, bro.
Namespaces are an internal workaround that only works with classes, functions and constants. (Internal workaround means there are no real nested namespaces in Zend. All identifiers just get stored with backslashes in the global lookup hashes). Variables thus cannot be namespaced. There would be no syntax to access them later. Short of doing `$GLOBALS['namespace\xyz\var123']` of course. The advisable solution is, as already pointed out, just using a class as last level namespace for holding a static variable. (Which is what namespaces should have been anyway.)
I've built it from the ground up in other languages, I just figured this would be a good opportunity to look at something "done right" in PHP and compare it to my previous experiences
I'm writing one of those in Zend right now
Nope.
Lots of other languages have namespaced variables outside of classes: C++, Python and TCL for example. PHP is the only language I can think of that allows variables outside of classes, has namespaces, and doesn't have namespaced variables.
Does this return the same data that getData() does?
Solved! Just copied the function from the old source, [here](http://pear.php.net/package/DB_Pager/docs/latest/__filesource/fsource_DB_Pager__DB_Pager-0.7.2Pager.php.html#a167). :D
Can you give some good examples of when a goto should be used rather than some other statement/function/code??
and anyone who uses it deserves to be fired. Even http://www.php.net/goto includes a helpful xkcd comic saying goto is wrong. don't use goto!
The Linux kernel uses it a lot for error handling.
Although this is not the same as [autoboxing](https://wiki.php.net/rfc/autoboxing), the resulting benefits are very much alike. From the php.net example: // current method $sum = array_sum(array_keys($arr)); With this, you sort of have to peel away the layers of the onion and start with the innermost section of code, and then work outwards. This is not very natural with respect to perceiving the flow of logic. It's also a PITA to debug, since you have to worry about matching parens up and stuff. Now, here's the counter-example: // proposed method $sum = $arr-&gt;keys()-&gt;sum(); As you can see here, this is a much more natural representation of the logic flow, and IMO much easier not only to mentally parse (read), but also to code and debug with.
Yeah, I'm starting to think reddit has a bot that randomly downvotes comments. Nothing at all wrong with your comment IMO.
You could try redirecting all of the ones you know with a 301 to the new page, and then do a catch-all with a 404 to redirect them to the homepage. That way any page that isn't found (all the ones you don't specify) will go there. Seems like it should work but not sure. Also if you wanted to have a custom 404 error page this might interfere. 
Gads, are we back in BASIC days?
I would think try/catches are the preffered error handling method these days.
&gt; To OP: Also, why don't you try not being a douche to people who try to post, you might get a better discussion. what is this in reference to?
Oh yeah, but Linus makes a much better argument than I ever could over using goto's, even in languages that support exceptions.
Excuse my ignorance but wouldn't it be okay to use it in, say, a nested loop that you wanted to break out of?
0, null, '', ' ', false and there are still seven other ways of saying 'nothing' in PHP 
Tough to argue with him, he's a smart dude. Do you know the gist of his argument?
Creates less indented code, I believe, so it's much easier to read. He says if you're a bright developer, and people hacking on the Kernel are, following goto's is easy.
 &lt;?php $repetitions = 1000; $results = array(); $text = 'still testing...'; $newline = "\n"; $results_str = ''; ob_start(); for ($y=0; $y&lt;10; $y++) { # using arguments $start = microtime( true ); for ($i=0; $i&lt;$repetitions; $i++) echo $text, $newline; $arg_time = microtime( true ) - $start; # string concatenation $start = microtime( true ); for ($i=0; $i&lt;$repetitions; $i++) echo $text.$newline; $cat_time = microtime( true ) - $start; ob_clean(); if ($arg_time &lt; $cat_time) { $percent = number_format( 100 - ($arg_time / $cat_time * 100),2); $results_str .= "arguments win ($percent faster)\n"; } else { $percent = number_format( 100 - ($cat_time / $arg_time * 100),2); $results_str .= "concatenation wins ($percent % faster)\n"; } } echo $results_str; ob_flush(); ?&gt; the results im seeing are something like this: concatenation wins (17.33 % faster) concatenation wins (8.78 % faster) concatenation wins (9.54 % faster) concatenation wins (9.47 % faster) concatenation wins (9.64 % faster) concatenation wins (9.64 % faster) concatenation wins (8.95 % faster) concatenation wins (8.59 % faster) concatenation wins (9.47 % faster) concatenation wins (9.47 % faster) 
Fair enough. Most of the people I work with are idiots, so we keep it as simple as possible :p
I'm re-building a CMS from the bottom-up. it's very rewarding. be sure to get your database design right the first time.
I don't know if this answers your question or not, but try this query instead: INSERT INTO Portfolio (Title, Description) VALUES ('{$title}', '{$description}') If ID is set to be auto-incremented, then the field has a default value (the incremented ID) and does not need to be provided in an insert statement. Also, never EVER concatenate strings directly in like that. At the VERY least, pass the values to a function to escape the strings, like others have suggested. Better yet, use a prepared statement, as is [documented here.](http://php.net/manual/en/mysqli.prepare.php)
mod_rewrite is a separate module. The easiest way to tell if it's enabled is add: RewriteEngine on to your .htaccess and if you get a 500, it's not enabled. As the other person said, best way to do it is to try one and if it works, you're golden.
&gt; "Really?!?!?!?" is that in response to me asking this: &gt;any thoughts on whether php should have namespaced variables? ? &gt; Namespaces only work with classes. what about functions? 
A date column and sort by that in the query?
that would work too I suppose, but I made it work with this: $var = $pdovar-&gt;fetchAll(); $reversevar = array_reverse($var); 
There is no guarantee with the return order from your query without an orderby clause. If you delete row #1 and insert row N+1, the database may put it in the place where row #1 was to minimize table fragmentation. Plus, let the database handle sorting when you can, it's much faster than PHP will be.
Gah you're right about that. Thanks for the help :)
Yea, somehow I feel like nesting classes and giving each class an __autoload() to grab subclasses would be really elegant.
this would work I think... &lt;?php namespace Foo; function bar($input == NULL, $setNull) { static $val; if(isset($setNull) &amp;&amp; $setNull) { $val = NULL; } else { static $val = $input; } return $val; } ...And then in another file... &lt;?php \Foo\bar(1); echo \Foo\bar(); But don't.
...*nice*, exactly what I was looking for. Thank you.
PHP lets stupid people do stupid things. Don't get me wrong, I was born a PHP developer, but it's almost as bad as Perl when it comes to maintaining code written by idiots.
Update: Later that night I went through the whole thing again and made it work. Thanks for the tips. Redditors are the bestest. If anyone else is trying to do something similar just let me know and I'll be glad to share what I learned in my trial and error.
no. you use break; to get out of a loop prematurely.
Clever. 
Wow, Linq4Php seems pretty good. I should check it out. Underscore is more like a tiny utility belt for writing cleaner, more readable code. This method seems to be quite efficient when you're "take"ing a specified set of numbers. This way you can stop iterating through the array when 5 numbers are available. Maybe I should take a closer look at Mono's LINQ implementation [1] and write something like that in the future. [1] - https://github.com/mono/mono/blob/master/mcs/class/System.Core/System.Linq/Queryable.cs
Well, underscore.js for javascript (and my port for php) is more of a utility belt to make certain pieces of code slightly easier to read. By chaining filters, maps, sorts, etc. through this - I've already managed to make some of my code more readable - albeit at a slight performance penalty.
What you are really after is IEnumerable (https://github.com/mono/mono/blob/master/mcs/class/System.Core/System.Linq/Enumerable.cs). Check out (http://msmvps.com/blogs/jon_skeet/archive/2011/02/23/reimplementing-linq-to-objects-part-45-conclusion-and-list-of-posts.aspx) for this guys reimplementation and excellent explanations
I will. Thank you.
You're absolutely right, I had forgotten that you could break out of nested loops with break.
sounds interesting...
On /r/php, actually.
if i'm too lazy to look something up, somebody else can; especially when it involves old technology. maybe you can tell us if nfs is encrypted, and why encryption doesn't matter
No. For the love of god DON'T go with the lang1, lang2, lang3 approach... You're probably going to want to go with a couple separate tables for this that you join your users table to. I'd go with 3 tables: users languages users_languages `users` obviously stores your users `languages` stores the various languages for your system `users_languages` keeps a relationship between your users and which languages they speak. This has the advantage of allowing you to continue to add languages long after development has ceased, without having to update the users table and deal with the coming nightmares, along with having a consistent and scalable system. 
I like it. it's cool. Images can be such a pita . 
Very cool, you should throw it up on Github or something for people to download. The upload to imgur is a handy feature too! My only gripe would be that clicking the image itself from the front page should probably go to the info page, but it only took me a second to find the link anyway :)
This is the correct answer. In relational database design this is known as a Many-to-Many relationship, where many users may have many different languages. You would probably want your tables to look similar to this #users id|name :--|:----- 1|Evan 2|John 3|Jim #languages user_id|language_id :-------|:----------- 1|en 1|fr 1|es 2|en 2|fr 3|en user_id and language_id would be compound keys (Both set as primary keys) #user_languages id|full_name :--|:--------- en|English fr|French es|Spanish jp|Japanese 
thanks I think I figured something out: user ------------- | id | .... | language ------------- | id | name | user_language ------------------------- | user_id | language_id | SELECT language.name as language FROM user INNER JOIN user_language ON user_language.user_id = user.id INNER JOIN language ON language.id = user_language.language_id WHERE user.id = $id
Open Source it for the greater good. People who also have your camera will love you for it.
Huh?
Chrome autodiscovers search engines after you search at least once, so this requires that you've used the php.net search engine before. Honestly, I find that the word 'php' followed by what I'm looking for in Google will usually return a php.net result in the first page, and requires less keystrokes.
vim, there is a lot of stuff to learn with vim the learning curve is high but when you know how to use a few keystrokes makes the job done http://www.reddit.com/r/vim/top/?t=all will help you.
I just tested it out and with php.net in your history you can just type php&lt;Tab&gt;strtok&lt;Enter&gt;
Be careful with sanitizing input in urls like this http://photos.karsonenns.com/?filename=index.php Just a heads up! The gallery looks great! =)
See also: [Manage Search Engines…](http://static.bwerp.net/~adam/2011/05/21/Preferences_-_Basics-20110521-233647.jpg), and creating a [custom search](http://static.bwerp.net/~adam/2011/05/21/Preferences_-_Search_Engines-20110521-233554.jpg) (sorry for all the redacted entries in that screenshot). I type "php in_array" to bring up php.net/in_array, saving a few keystrokes every time I bring up a function reference page.
As BauerUK said, Chrome autodiscovers search engines. If you go to the Options menu, then click "Manage search engines", you can find php.net in the list (or add it if it's not there already) and then set a keyword for it, like "php". This makes it even easier to search. Just type "php" and then either space or tab, then type your search query.
Looks great! perhaps you can implement a small map using the Google maps API for displaying info from geotagging
As well as 'schema solutions' with the many-to-many relationship, there's also the 'schema-less' approach, or a 'key-value store', like this: create table userkeyvalue (user_id int, keyname varchar(50), keyvalue varchar(255)); insert into userkeyvalue (user_id, keyname, keyvalue) values (1, 'lang', 'en'), (2, 'lang', 'fr'), (3, 'lang', 'es'); suppose user 1 went to night school: insert into userkeyvalue (user_id, keyname, keyvalue) values (1, 'lang', 'jp'); select keyvalue as 'language' for userkeyvalue where user_id =1 and keyname='lang' but then you can also go: insert into userkeyvalue (user_id, keyname, keyvalue) values (1, 'favourite-flavor', 'Cherry Red'), (2, 'hobby', 'fishing'), (3, 'pets-name', 'Snoopy'); after which you might want: select distinct keyname from userkeyvalue; it's pretty flexible: depends what you want. you'd also want to create appropriate indexes for that 
Even without that, if you're looking for function name etc all you need to do is go to php.net/**function_name**
DUDE! THIS! I had to fix some fucking dbags table and he tracked all his topics with the lang1, lang2 approach all in 1 table. OMG worst nightmare ever! 
Do you want one? Just pm me your email
Yep! I definitely would like to try it out. :)
Right mouse click on address bar - "Edit search engines..." - Change keyword to "p". Enter "p preg_replace". Voilà. While you are at it change a few other search engines to accommodate your needs.
Its an SEO miracle!
Nice and clean looking, but let me click the image to view it instead of clicking "view".
Yeah, I made this mistake once before. There's nothing to keep a malicious person from changing that to http://photos.karsonenns.com/?filename=http://www.example.com/reallyevilcode/index.php
So I would need to create only one extra table for this,.. right? And what did you mean by indexes there?
Looks neat indeed though it feels a bit sluggish (too many redditors trying to test it?), but this being a PHP subreddit I expected to see some code... :-P
This requires the user to be logged in or else the updating won't happen. That seems like a serious limitation for the application described above (assuming I understood the description).
&gt; Who the hell has 200+ blogs and maintains them by themselves?! Let alone posts the same content to every blog... Spammers. They post keyword-rich text on a bunch of blogs that in turn link to their actual spam site. This helps them in the search engine rankings for a short while.
Yes, one extra table for this purpose, and it can provide for many other purpose too. That's why you'd need indexes: this table could grow large, causing 'linear scans' to have an ever-increasing poor-performance impact. Indexes allow a 'phone-book' type look up (binary search) where even in a table of a million records, the look-up could be accomplished by looking only a few records. In a linear search (i.e. without an index), to discover that the thing you are looking for does not exist would require the inspection of every row in the table: this could be very slow. So at minimum you'd want an on the keyname field, and probably on the other fields too. Here's a rule of thumb: if a fieldname appears in an sql 'where' clause in your application: then it should be an indexed field. 
I understand what your saying, I actually learned about the binary search algorithm this very week, but yet I don't know how to technically add an index to a table. Maybe it's something as simple as having an 'id' SERIAL in MySQL,...or something like that. Is that what you were suggesting?
alright :p ill relase the code later today when i get home.
I'd love to see it.
This is the main reason I use firefox (google name search + search input keywords) I hate how chrome just dumps you to a standard search page when you type a word in the address bar. Well that and firebug &gt; chrome's dev tools.
Open source code?
Good sir, this would be an interesting open source project. I like your concept!
You can download the source at http://karsonenns.com/gal.zip :D Let me know if you come up with anything cool! hello@karsonenns.com
You can download the source at http://karsonenns.com/gal.zip :D Let me know if you come up with anything cool! hello@karsonenns.com
You can download the source at http://karsonenns.com/gal.zip :D Let me know if you come up with anything cool! hello@karsonenns.com
You can download the source at http://karsonenns.com/gal.zip :D Let me know if you come up with anything cool! hello@karsonenns.com
Oops! I'll get around to fixing that.
You can download the source at http://karsonenns.com/gal.zip :D Let me know if you come up with anything cool! hello@karsonenns.com
You can download the source at http://karsonenns.com/gal.zip :D Let me know if you come up with anything cool! hello@karsonenns.com
I use DuckDuckGo, type in my url bar: !php explode Bam, function definition page.
I read through your source. If you're thin-skinned, stop reading now. ... You've been warned! 1. Don't use short-tags in PHP, ever. They're non-standard and a lot of configurations have them disabled. They also break the parser, if it ever has to deal with proper XML. 2. You follow very... bizarre coding practices. You should never close a PHP block (&lt;?php ?&gt;) unless you're jumping into print mode. This includes at the end of your file (no ?&gt; unless it's necessary)! You don't seem to indent in places that should be indented, either; logical blocks like 'if', 'while', etc. need to be indented. 3. You mix presentation code with logic code. Don't do this. 4. The PHP classes that you've used are ancient and terrible. Upgrade them or roll your own. I'd be happy to tell you why for a particular one, but I'm not going to criticize old code that you didn't write unnecessarily :P
Hey! Thanks very much, I appreciate all the help I can get. I'm fairly new to php. I am more of a Designer than a programmer, but I'm learning. I love coding and I want to get better.
There are quite a few. If you are looking for multi-role multi-user framework/cms, Drupal should get the job done for a community based website. Or maybe I misunderstand completely.
WTF downvoted -.-
If you do what OP suggested it uses php.net's search page, so where you to search for 'echo' it wouldnt dump a standard search page, it would give you http://se2.php.net/manual/en/function.echo.php
I second the suggestion of Drupal. The new version isn't terribly hard to get rolling, but it can be a little difficult to wrap your head around the deeper nuances of it. But, that's the thing with Drupal - It works for people that don't know development, but it also allows people that do to extend the hell out of it.
But with FF I just type in `php call use func` without having to type the `.net` or hit tab. FF wins this round.
Elgg and SocialEngine if you want something remotely Facebook-like. Just search "php &lt;website&gt; clone script" on The Google. You can find one for Reddit, Twitter, TwitPic, and so on. You'd be amazed. Some are open source, while others cost a little bit of cash. 
I use Chrome, i edited my search keyword to p p&lt;tab&gt;explode I win by 3 keys :p
http://www.reddit.com/r/PHP/comments/hgzxm/chrome_protip_searching_phpnet/c1vgkau
&gt; *The Google*
[This](http://stackoverflow.com/questions/346980/what-codeigniter-authentication-library-is-best) is a good comparison. It doesn't list Ion Auth though.
ok i checked and I can actually type `p strreplace` and it takes me there so it's a tie, and that's without setting anything special up. I still like FF more than chrome. Edit: in fact I don't even have to type in the `p` so FF wins
How did you manage this? All i get is google, which makes Fx lose big time.
Well I kinda lied. FF4 fucked the address bar so you have to change it to google name search. about:config &gt; keyword:URL &gt; http://www.google.com/search?ie=UTF-8&amp;sourceid=navclient&amp;gfns=1&amp;q= but changing it once for every site to work is better than changing the settings for every site.
You are right, but it comes at a cost, one of the reasons i like chrome is the omnibox - i dont like the seperate search field in Fx, when 1 is enough. ~~I think we can call it a tie though.~~ EDIT: Actually Fx doesn't guarantee to return php, which is slightly scary/impractical/unproductive. Taking my tie back :p EDIT2: Gets worse if you program in other languages than PHP.
PHP was loosely taught at my community college (lol). Although it was bastardized with Dreamweaver automating a lot of it. I did learn some syntax and basics on variables, GET, POST, and setting up mySQL DBs. Since then though I think the professor, who I speak to occasionally, has upped it to learning just the code, skipping the DW.
Maybe^e^e^e^e^e^e^e^e^e^e^e^e^e^e^e^e^e^e^e^e^e^
[Zend_Paginator](http://framework.zend.com/manual/en/zend.paginator.html) [Zend_Search_Lucene](http://framework.zend.com/manual/en/zend.search.lucene.html)
But I have the power of many :) http://duckduckgo.com/bang.html
Which requires DDG to support them, Chrome is generic, works for everything.
Can you find this documented somewhere?
C'mon. You know I was kidding about "The Google" part. Just being friendly in my answer, see?
I told that to all the people I interviewed for a Jr. php position. 
The OP is a spammer who links to scraped presentations. [Here is the original](http://www.slideshare.net/sebastian_bergmann/phpunit-best-practices), although slideshare isn't much better re registration.
gpEasy
WordPress is nice for dealing with images. And we also have [/r/wordpress/](http://reddit.com/r/wordpress/) to help you out of you get lost. 
Wordpress definitely. The downside is you need to keep on top of security but if you ever need something more like easy youtube embedding, there's a huge community for plugins.
Ill throw [chyrp](http://chyrp.net/) into the ring for the lightweight part.
If you're just going to have a gallery, I recommend [zenphoto](http://www.zenphoto.org/). It's pretty simple to use and well documented with a good API. I built [this site](http://nohasb.com/) and [this site](http://blackantdesign.be) with it. If you want to add dynamic pages that aren't galleries, there's a CMS-like plugin called [zenpage](http://www.zenphoto.org/news/zenpage) but I haven't tried it yet. If you want something a bit bigger, I suggest using wordpress too.
I like CMS Made Simple for very small projects. Just because end users seem to find it easier to use than wordpress/drupal etc, which means less time supporting them.
I love Chyrp but it's more of a tumblelog solution, which doesn't really fit here.
Like everyone else said, WP would work, but I tend to lean towards Wolf CMS for simple sites that are page-based rather than article based. It's really nice and simple and easy to learn and use.
Just posted about mine a few weeks ago. Really simple - [nakid.org](http://nakid.org)
You are thinking too one-dimensionally. The program itself is just posting and getting data from a database. The fact that it is somehow related to 'tumblelog' exists only its in presentation of that data. Luckily, they make themes/templates that you can use to change this presentation. That said. The reasoning behind selecting chyrp over wordpress, is chyrp is a lighter program, it has all the functionality of what you are looking for (creating pages with content), and since its less endowed with features than wordpress perhaps learning curve is easier to get onto. There are more options than wordpress. Not that i have an issue with wordpress, i use it on a multitude of sites for various levels of sophistication, im just sayin'.
In my narrow minded opinion, and based on nothing you should consider whatsoever; CMSMS is an abomination.
Thanks for reminding me, i was meaning to give this a try and totally forgot about it.
GetSimple - http://get-simple.info/ Pretty lightweight, and uses XML instead of a database, so it's fast to set up for small sites. There's also a gallery plugin if you want to expand in the future.
Thanks for your constructive comments. Care to expand? I find it very useful because it takes about ~5 minutes to be up and running, and completely non-technical people have no trouble with it at all.
Ooh.. this looks interesting for small projects. Cheers.
I amended my comment above so as to avoid explaining myself.
Haha, I genuinely would've liked to have heard your complaints about it, but upvote for making me laugh.
I was tossed into it coming from years of working with wordpress, modx, and other cms's. I equate CMSMS to that of microsoft frontpage. It was (for me) goofy, not intuitive at all. The fact that it used a "smarty type" of template system drove me insane. The UI also looked very 2001/2002 and was irritating to look at. I know these aren't 'real' issues, but when you have to deal with shit for hours a day, little things like that matter.
Can't lock things down for dumb users who delete the things you're trying to link to in the page. Way overkill of code one has to go through for a page to load. Confuses some clients. Most hacked. You have to really stay on top of security with it. 
I might use some sort of forum software for that. It takes care of a few things at once(*Individual searchable items, comments, user registration/administration, categorization*) and you can format the threads however you want. I haven't found a good CMS that does any sort of itemized data handling out of the box. 
Wish I could lock down the interface so that stupid clients can't delete things I've keyed off of in the code. Other than that, like it somewhat, but think that the interface needs even more dumbing down for dumb users. 
http://www.concrete5.org/
Thanks to you, I made my first simple Swig component today. Also, the Swig PHP docs don't tell you an initial step on the example.i file, and I had to hop over to the Python docs and guess, then come back to the docs in the PHP, to make it work right. However, was very excited to see my function load up in PHP. Now to think up the most critical places where I think I need some C power in PHP.
Very, very nice. I like Swig also.
Note you can speed up WordPress tremendously with these 11 steps: 1. On the volume where the web files are, plus /var/lib/mysql, remount it with noatime. 2. Tweak MySQL differently than the defaults. 3. Tweak Apache differently than the defaults. And if you can figure out how to use an alternative, faster FOSS-based web server with WordPress and still get pretty URL support -- even better. 4. Upgrade the blog to latest WP version. 5. Ensure PHP 5.3 or better is installed -- it comes with faster PDO drivers and the PHP is faster. 6. Install PDO for PHP -- I believe the EasySQL API used in WP will automatically utilize it if present. 7. In WP, install the WP File Cache plugin and configure it. 8. If not using it, turn off anything on the server that is constantly writing to the event log a bit too much, such as a firewall or SELINUX process auditing. 9. Ensure full duplex is arranged for your net card. 10. Stick your nightly tape backups on a separate net card running full duplex. 11. Install the Chennai plugin in WordPress to throttle good spiders and block insignificant ones. Also, some of the steps above can help virtually any PHP app, including Magento. 
Here's what I don't get. PHP is really just a wrapper of C functions. If one wants to speed it up, they can make an SO file with Swig and C and link it in. However, there are a lot of low-hanging fruit one can do before this, such as a load balancer, net card settings, multiple net cards for different purposes, caching anywhere you can, mount web and mysql volumes with noatime, upgrade PHP, utilize PDO because in later versions of PHP the PDO drivers run faster, throttle good spiders and block insignificant ones, block DDOS and other hacker attacks, etc. 
No problem, let me know if you run into any issues
I thought the interface was klunky, but the idea was good. Also, why do I have to pull items by a number, rather than a keyword? Would have been more handy if I could do something like this in my code: `&lt;?= nakid_get('intro text'); ?&gt;` 
I'm not saying Chyrp wouldn't work, I'm just saying that it makes more sense to pick a CMS already geared specifically for page-type content already, instead of having to work around Chyrp's mixed-media-post mentality to get it to behave like you want.
One of my clients was using Open Realty before. It's a property CMS.
Drupal has a good following and might be a decent candidate. Personally, I just don't care *that* much for developing in Drupal. Might just be my ignorance. What I will say about Wordpress is that the community and plug-in set is HUGE. There's a real big chance someone has a "searchable listing" plug-in that already does what you want. I'd look for any tutorials or plug-ins aimed at realtors or real estate sales. Not a far jump to apartment listings. If you're new to it, you can probably configure each listing to be a unique post type. That will let you leverage a lot of functionality already built in. Note: Not a super experienced wordpress guy, so hopefully someone can jump in if they have a better idea. EDIT: The posts below have reminded me that the taxonomy and views in Drupal are the balls. That makes stuff like what you're doing way easier. I'm now thinking you'll like drupal better for this.
I recently created it, very lighweight.. http://stmframework.co.cc
Kohana is perhaps the least messy framework of what I've looked at, but it still seems to suffer from the very problems I've described. In fact, Koahana 3 is even messier in some aspects. For example, K3 replaces the url::redirect() with request::current()-&gt;redirect(). What? An HTTP redirect is a property of HTTP *response* (do I misunderstand the Kohana notion of "request" which refers to the entire request lifecycle as opposed to HTTP request object?) What is it doing in the request, and why is it a recommended practice to issue redirects in *controllers*? Why are there templates in controllers? I don't see how this is MVC to be frank, not to mention the technical strangeness such as abstract classes on top of an existing hierarchy of concrete classes, "helpers" that don't fit in any part of MVC architecture and so on. Sorry, I don't like it. 
Yes there are definitely some things I need to clean up. Keywords like you mentioned are the next thing that I want to implement along with a photo gallery. Anything else you see let me know and I will add it to my list of changes for the next release!
Wordpress, because not only is it the most widely offered CMS for hosts, it has the support (community+addins+etc) which make it quite expandable. I say this because almost every one of my engagements begins with "all I want to do" / "That's all the functionality I need." and each and every time when the clients keep the website, they end up wanting to expand it. As far as I'm concerned, Wordpress is the default CMS choice unless the client has some less common requirement (eg: multiple administrators with narrowly assigned rights = Drupal). Just about all the others have either become a part of internet history (PHPNuke) or are best used as examples of PHP programming and/or website design.
I use GetSimple for one-off really simple sites. It's free, simple, and it works well. Besides adding the content, I built http://losbanostrees.org in about an hour with GetSimple.
I highly recommend Perch. It's not free, but it's pretty cheap, especially if you're doing this project for someone else (just pass along the cost to them). It's the definition of an elegant, simple CMS solution in PHP. http://grabaperch.com
I haven't tried it yet, but [PyroCMS](http://pyrocms.com/) is on top of CodeIgniter, which is pretty light and a great framework.
&gt; Can't lock things down for dumb users who delete the things you're trying to link to in the page. Not exactly sure what you're saying here, but you can lock down just about any settings or dashboard pages you want via plugin/theme functions. If you're talking about clients deleting content within posts... If they're that braindead, then they should be paying you to add/edit/update their content. &gt; Way overkill of code one has to go through for a page to load. Subjective opinion. I'd say it depends on the purpose it's used for. &gt; Confuses some clients. 1. Provide them with the more than ample documentation available, including newbie tutorials (lots on youtube). 2. Educate them on the basics yourself (on the clock of course). 3. Get smarter clients. &gt; Most hacked. You have to really stay on top of security with it. Speaking of the core code, bullshit. Utter bullshit. Speaking of vulnerabilities introduced by shitty plugins, or pebkac errors, it's a legitimate concern. Solution? Don't let your client use the plugins page if they're incompetent.
Take a look at [WolfCMS](http://www.wolfcms.org/), I use that for any small web projects I have to do.. however I will say it doesn't handle images as nicely as Wordpress does.
Whoa there! It's better to mock wordpress with a false sense of PHP elitism! Don't ruin the fun!
smarty templates are pretty common...not always the best solution for sure though.
The fact that it doesn't require a database (*One less thing to worry about*) is very nice. And it apparently handles backups in the administration control panel which is pretty great. I'd consider this a win for simple client sites.
Upvoted for what I assume is a tongue in cheek use of an unregistered version of WinRAR in your video. note: [7zip totally does rar files](http://www.7-zip.org/).
[PyroCMS](http://pyrocms.com) Built on CodeIgniter. Very simple, straightforward, and easy to extend. Also pleasing on the eyes.
Excelent points. First off, the request v response for hosting the redirect function. I see your point, especially since the function starts an instance of the response class to send the redirect. So maybe this is semantics talking, but a redirect isn't actually a visual response the user sees, but a function of the users browser, so in my mind, the user is still requesting and getting a page, just not at the same location they expected, to which end, having the request redirected to a different location fits. If you disagree with this, feel free to [post a new issue](http://dev.kohanaframework.org/projects/kohana3/issues), We have no problem breaking API with a major release(such as from 3.1 to 3.2, which is currently in development) to fix something to that doesn't make sense. There have been countless times things have been influenced by the community for the better due to these kinds of reports. &gt;why is it a recommended practice to issue redirects in controllers? The nature of the web is very different then desktop software, as explained in my last response, you cannot have MVC applied the same way. For example, you would never need to "redirect" the user to a different page with a desktop application, that would be silly. However due to the different required mechanics of the web(a browser that you have limited control over, and sessions, cookies, etc) redirecting a user is one of those things that logically don't make sense anywhere but a controller. Keep in mind, the users browser is not the View of a MVC web app, it's simply a representation of a View. &gt;Why are there templates in controllers? We're constantly innovating with new technologies outside the core of Kohana. As I can see you've used it, you're well aware of it's modular capabilities. Check out [KOStache](https://github.com/zombor/KOstache). It's not "officially" supported, but is maintaind by the Kohana Team. It's something you'll hear us recommend to people often. That's because it does a great job of removing template logic from the controller and giving you a whole layer of View logic that didn't exist before. I've found using Kohana 3.1+kostache to be a much closer representation of MVC then any other web framework out there. &gt;not to mention the technical strangeness such as abstract classes on top of an existing hierarchy of concrete classes We may be talking about different libraries, if so let me know. I know with cases such as the Database, we have abstract classes to allow for drivers to be built around something other then MySQL. We only officially support MySQL, but one could easily roll their own Postgres library, which if it matches all our defined abstract functions can be plug and played with other libraries such as ORM, Jelly, or even straight Database Builder calls. &gt;"helpers" that don't fit in any part of MVC architecture and so on Helpers no longer exist as they once did, for 3.0, they were combined with libraries(in 2.x was a valid helper and Validation library, combined in 3.x as a Validate class). We no longer make a specific distinction between a class a library or a helper, this allows for framework logic to exist outside of MVC to facilitate MVC. Great examples of a class that isn't specifically a model, view, or controller, would be one that handles Auth logic, or one that implements a new kind of ORM. &gt;Sorry, I don't like it. Totally ok if every developer liked all the same stuff, there wouldn't be any challenge when something wasn't good or any variety out there.
Yep, this is the lightweight winner.
That pagination class you have included is pretty cool, I've got another project in mind for that one. 
YouTube embedding is in the core. Paste a YouTube URL and it turns into a video automatically.
non OP here. Unrelated question, suppose I send a user elsewhere if they are logged in (index.php if they are not, dash.php if they are) will that screw up on a linux box? I'm not echoing anything, but it's not exactly close to the top of the file either. There's If statements and such. Thanks in advance!
Oh, wow! See, Wordpress is great! :D I was thinking more of letting people easily curate a gallery of youtube videos on their own site... because I recently had to extend a wordpress site+blog to do that via http://tubepress.org/ 
Look at WolfCMS if you haven't. Now that's a great interface, although unfortunately some clients could end up deleting things because they're not blocked with a permission level on deleting things.
No, HTTP redirects will not screw up a linux box.
Again, mostly writing in C becomes more difficulty for "rapid development." With PHP, you can write something that works, but maybe doesn't consider all the edges cases it should like you'd have to do with C (memory errors, etc). Secondly, Facebook is definitely already exhausting and innovating on low-hanging fruit. At Facebook's size, you don't really look towards PHP being the bottleneck until you've exhausted options in terms of load balancing, caching, improving the databases, etc. Not saying they can't do more, but I think by the time they decided they "needed" HipHop, it was because they were getting marginal gains from other areas.
I think WordPress will handle Vimeo URLs automatically too. The downside being that you have no control over the size and whatnot. But it's easy enough for posting videos intermittently within an article. The dotcom has more features than a hosted install, but you can run [Jetpack](http://wordpress.org/extend/plugins/jetpack/) to get those features.
&gt; I see your point, especially since the function starts an instance of the response class to send the redirect. So maybe this is semantics talking, but a redirect isn't actually a visual response the user sees, but a function of the users browser, so in my mind, the user is still requesting and getting a page, just not at the same location they expected, to which end, having the request redirected to a different location fits. I'm afraid you misconstrue me. The conflation of request and response is a general problem, but what I am talking about is that thing people do with placing calls to the redirect method *in the controller*. This is inherently a part that belongs only in the *view*. It is a straight up violation of MVC separation (do bear in mind that I haven't carefully checked if it is in fact a practice to do redirects inside the controller!) I see that in 3.1 there is implementation of subcontrollers, and so a more abstract mechanism would make sense, hence (I presume) the change in the approach. Still, there are other places in the source, by the quick look at API docs, where this kind of breach of MVC would take place. Also, the framework components feel too Web-specific to me to be useful when you have to venture a little outside the normal web application world - imagine that you need to generate reports for a legacy system in a kind-of-CSV-but-not-quite format like I sometimes do, and the leaks accross MVC separation will become very evident. As of templating, I don't like the native PHP syntax. Designers are unwilling to learn it; HTML implementers need to be confined to the limits of the application. [Dwoo](http://www.dwoo.org) does the job for me, as it compiles and caches. &gt; We may be talking about different libraries, if so let me know. I know with cases such as the Database, we have abstract classes to allow for drivers to be built around something other then MySQL. We only officially support MySQL, but one could easily roll their own Postgres library, which if it matches all our defined abstract functions can be plug and played with other libraries such as ORM, Jelly, or even straight Database Builder calls. This is more a question of style, so you get no real argument for me. &gt; Totally ok if every developer liked all the same stuff, there wouldn't be any challenge when something wasn't good or any variety out there. I wish more people understood that. 
I love wolf cms, it's the best cms I've encountered so far. But as I've found out with some clients, it's meant for a developer, not for stupid clients.
I've installed it but I can't access it. Browser errors are saying it's looping. Tried with chrome and firefox. Gets to a point where it fails after too many redirects. Also, the stm site mailto points here: www.online.php@gmail.com
There are some great ideas in there for any php app but I would hope most of us are already doing most of these. [This benchmark](http://huichen.org/en/2010/06/wordpress-3-benchmark/) shows that even with a somewhat fine-tuned php install you can still get a massive **40%** increase in throughput using hiphop. I understand it's a pain in the ass to set up but there can be some considerable monetary savings to be had. It could be worth the trouble in some situations. 
Didn't know about Swig. If it's a lightweight solution then I can see it being very useful as Gearman does require a bit of time investment to learn about how to install and use it.
I'll second this. jQuery is my best friend, though I likely use it for some things that I shouldnt.
Sounds like an excellent use for WordPress.
Drupal's node system is already really geared to this sort of thing. Additional fields can be added to nodes very easily (things like "price" text fields, "number of tennant" dropdowns, "pets?" yes/no checkboxes). You or your content manager can easily add hundreds of listings a day, and you can then display these very powerfully with Drupal Views module. Theming is cake with drupal as well. There's a bit of a learning curve, but completely worth it.
Happy B day...
* "at the blog of Sjoerd Maessen" * "sjoerdmaessen.be" * "by sjoerdmaessen" This is the plug-whoriest thing I've seen in a while.
Thanks mate.
I would never have known that this blog belonged to Sjoerd Maessen if you hadn't said so!
Yeah this wasn't QA'd.
Haha Sorry guy's won't happen again, used the suggest title option.
I've noticed with Wordpress that if it doesn't exist, there is someone out there that can make it exist. Drupal (just noticed my misspelling in the OP) seems like a Joomla clone (or maybe the other way around...) but the dev site itself seems to promote finding a private dev team to help you build your project rather than Joomla's "we haz components" solution. 
STM has a very specific (and increasingly important) meaning in the software world ([Software Transactional Memory](http://en.wikipedia.org/wiki/Software_transactional_memory)). You might want to consider a name change, as your current one is misleading. 
[Here is a thread on Drupal.org](http://drupal.org/node/35109) talking about this already. Specifically, [here is a realtor's site](http://www.spanish-living.com/property_sales_search) running on Drupal. 
This is a project that might better be suited using an MVC framework like CakePHP or Symfony. I guess it really depends on your level of coding expertise though.
Drupal's module system is vast and endless. I'm a former Joomla guy (going all the way back when it was still Mambo) and Drupal changed my life.
Agh, hungarian notation.
I built a fairly large apartment listing site with Wordpress. It's worked ok more or less, but has become increasingly frustrating lately due to all the meta data associated with any given listing. I *think* I will continue to stick with wordpress for now, but I really need to get the PODS framework setup for storing apartment data rather than the built in custom fields. I wish I would have thought of it from the start. http://podscms.org/ On the other hand. I build another real estate listing site with Silverstripe that pulls in MLS data and that's been working quite well. Silverstripe is my favorite CMS in many cases, but can be difficult when you have hundreds/thousands of pages.
I think you're spot on here. A lot of the time someone will try and shoehorn a solution into an existing CMS when a better solution would be a bespoke application.
HTML5 doesn’t support it: http://stackoverflow.com/questions/3590058/does-html5-allow-drag-drop-upload-of-folders-or-a-folder-tree But you could probably do it with a Java applet. I found one on Google that claims to be able to do it, but it costs money. http://jumploader.com/ Here's another applet solution: http://www.jfileupload.com/products/jfileupload/index.html [edit: I've never used either of these...]
Uhh, no. Look at http://fuelphp.com/ instead.
Looks interesting, might come in useful! Do have a couple of suggestions at first glance: * Add a teensie bit of documentation to _'s utility methods * Consistency in using curly brackets, would recommend against the use of the short-hand if-form * In the _::sanityCheck method, ensure to calculate $listValue *within* the if body, to prevent print_r() calculation at all times.
There are plenty of resources out there for drupal as well. And out of the box drupal gets you much closer to what you want than wordpress. Drupal7 for example has built in custom content types and fields. Your apartment search could be mostly done with stock components. You'd create an apartment content type, add fields for photo, number of bedrooms, etc etc. You could use taxonomy for some attributes too if desired. Throw in the views module to let you browse, and use the views exposed filters for searching and filtering. That does almost all the basics of an apartment search with no custom coding. Now obviously, depending on your needs, you may need some custom code. But the beauty of drupal is that it get's you 90% there. And while I don't particularly enjoy developing for drupal, I do enjoy all the free functionality I get and the fact that I can massage it to do whatever I want. Plus, while the drupal codebase isn't exactly a model of modern software engineering, it's a heck of a lot better than wordpress :)
drupal is the linux of CMS's. Wordpress is the windows. joomla is palm.
Thank you! I just started looking for the same thing OP was, and this seems great :)
I wanted to write a spelling suggestions module a while ago, and was about to implement Levenshtein's algorithm. I was wondering why levenshtein was already being highlighted by my editor before I'd written the function, and then I realised... php already implements levenshtein - amazing!
It's all fun until somebody uses your insecure form to hack your site and add images/base64 encoded eval programs, etc and your whole system is compromised. 
Ahh... the good ole' Wordpress days...
Great, but why?
If you know nothing about the distribution of the input numbers, then the generally accepted way of modelling this is with a uniform distribution. In that case, a simple modulus is optimal for generating hashes. If you want fewer collisions than that, you need to have information about the distribution.
The binary should be optional. 'extends FlagEnum' or something similar. This will make it much more obvious whether something is meant to be combined or not.
sadly my coding experience is fairly limited. I can modify, customize and build my own limited functions, but lacking some sort of framework I'm lost. Joomla I've liked because I can tear it apart and put it back together in fairly short order. The current software we use is "phpMyRealty" which is nice and functional, but isn't "pretty" (which, IMO, is just a matter of fixing the template and getting it how they want it, but I don't pay myself...). The guys there were even nice about giving us a quote for customizing it that was not stupid...
I would have just used a google form. Getting a spreadsheet with all of the results is just awesome. I'm not hating on php here so much as saying there are far easier ways to accomplish some things.
I write many applications using joomla as a framework. I think its great if you know how to code
Have you tried ezrealty? 
Don't stress OP, not too much they can do to your site with your form if it's only emailing the input.
I think what you want to do is rewrite it as a component for joomla. This way someone can easily download your component and install it to there existing site through the admin panel, no problem. 
Don't forget XSS.
Yes, I know that there are many good and great PHP frameworks. Some of them are more complicated, some less.. each framework has its advantages and disadvantages. This framework fits best my needs, and I think it fits many other projects as well (because its like a skeleton for normally formed web app.). P.S. Now it's on http://stmframework.com too (.com) 
When importing some Java concept in to the PHP world, you have to be careful. I don't know what your library does. You just keep saying "it's enums from Java, but in PHP". But I've never done anything serious in java, and enums to me are something out of a SQL database. My (unsolicited) advice: lose most of the java references, and tell me why your library is useful to me as brain-dead PHP guy. Seriously.
Make sure to check all input for example: http://photos.karsonenns.com/?filename=image%27s/11-05-17/DSC_0009.JPG Gives: Warning: exif_read_data() [function.exif-read-data]: Unable to open file in /home/eaweb/public_html/karsonenns/photos/index.php on line 227 Warning: Invalid argument supplied for foreach() in /home/eaweb/public_html/karsonenns/photos/index.php on line 228
so, you just found out what a form mailer is. Great. No, really, great ! Welcome to the internetz. 
Google Docs support it now, so you can try to guess if they're using flash or java :)
I don't know if it supports it, but you could try [Gallery](http://gallery.menalto.com/) maybe there's already a module that does what you need, or you can modify the code ... You can also check [ZenPhoto](http://www.zenphoto.org/)
But for now, Drupal 7 + Views = Problems. Stick with Drupal 6 + CCK Module + Views Module, works like charm and if you add taxonomies it becomes very powerful.
Generate PDF, no, that's not easy, that sucks. :)
Either in this approach or the Many to Many, you'll need indexes. A good practice, is to execute your queries with the EXPLAIN keyword before the actual query, that way, MySQL tells you how is searching for data and you could guess wich indexes will be good. ALTER table table_name ADD INDEX name (column); ALTER TABLE users ADD INDEX idxid (user_id); Something like that
*huge cumbersome MPL license for a simple utility library* No thanks. Try MIT or BSD
ok, I actually already solved this but I think my logic is failing in that I have two models to insert one form. One for the registration of an user and anotherone to link the languages and users together. We'll see how I fix this so I'm not "one of those guys" developers talk about when they say you should not confuse models with tables.
Thanks for the heads-up on the enums. I had made an assumption that they were well-known. I have added an introduction in the README on the GitHub repo outlining their usefulness.
As mentioned in the reply to timdev's, I have added an introduction in the README on the GitHub repo outlining its usefulness.
Thank you kind sir, for this informative remark on the contents and usability of the library.
Good point! It might make the implementation of EnumSet a tad bit more complicated, but I'll definitely take it into consideration. Edit: No it won't make it complicated at all, heh. Will have a peek at it later!
The more the merrier, right? hehe In similar situations, in my zend form I have a save function, then, there i call different models "insert" function, in your case: Form Add/Edit user, add the save function function save(){ $values=$this-&gt;getValues(); ... //Check everything... langUserModel-&gt;delete all user's record langUserModel-&gt;insert() } So, in the save function, you call different models to do what you need, maybe if it's a new user, create it first to get the relevant id user, then insert the records on the user-lang table. Hope i helped!
&gt; $rowUser-&gt;password = md5($password); Not addressing your original problem, but what the fuck? At least use something remotely secure like bcrypt, alternatively something actually secure like stretched Whirlpool.
I really don't understand what problem you're trying to solve (sorry?). But I do use Zend a little differently, what I usually do is have a User object, which I set a bunch of parameters (name, age whatever). To then create the user in the db I'd pass the whole object to a "db mapper" class that handles all db interaction (saving/fetching) something like this: Random code somewhere in a controller: $mapperUser = new Application_Model_MapperUser(); // This is for interacting with the user db table $this-&gt;_user = new Application_Model_User(); // This is just a usual object with getters/setters $this-&gt;_user-&gt;setFirst_name("John"); $this-&gt;_user-&gt;setLast_name("Doe"); $this-&gt;_user-&gt;setId( $mapperUser-&gt;save($this-&gt;_user) ); Then in Application_Model_MapperUser I have: public function save(Application_Model_User $user) { $data = array( 'first_name' =&gt; $user-&gt;getFirst_name(), 'second_name' =&gt; $user-&gt;getSecond_name(), ); //If this record already exists, update it. Otherwise - insert! if (null === ($id = $user-&gt;getId())) { unset($data['id']); return $this-&gt;getDbTable()-&gt;insert($data); } else { $this-&gt;getDbTable()-&gt;update($data, array('id = ?' =&gt; $id)); } } // save Hope that helps, otherwise can you explain your problem a little more?
Ha, I had to do this at work just last month. I'd share the code if it belonged to me. I can think of a few pointers though: Using @ to suppress errors isn't a good practice. http://michelf.com/weblog/2005/bad-uses-of-the-at-operator/ Redeclaring that embed HTML more than once is a potential maintenance headache. What if you add more cases? Consider printing it once at the end if you've found the ID by then. Speaking of more cases, there's youtube.com/embed/12345678901. I'd also suggest checking that the URL given is a youtube.com domain or a subdomain at least. Although I suppose the worst that'll happen if this isn't the case is an invalid video URL. Bet you're pleased you figured out regexes! I remember being pretty satisfied when I finally got it.
Would you perhaps link to some of your joomla based web apps?
if you just need a simple one-way hash, why not use something like sha1 or md5 and concatenate/implode() the array? $hash = sha1($person_id . " " . implode(",",$home_ids)); which hashing algo to use pretty much just depends on a balance of cost vs. collision odds
How secure does the hash need to be? How long do you want it to take? What is it for? You could just implode the list and concatenate it to the number, so something like 123:456.
Although it was put in a brusque and unfriendly way, LongBilly is right to point it out. The license directly impacts upon the usability of the library as it can be a make or break proposition for a lot of people. Unfriendly license = unusable. I didn't actually notice it was MPL. IANAL but I was under the impression it was not GPL compatible, which I'm pretty sure writes it off for a bunch of stuff for me. Dang. Would you consider an LGPL dual-license?
Update: Have now licensed it under the MIT. It is not GPL compatible, however it is GPL dual-licensed. Whether that would allow the LGPL I am not quite sure, but [this](http://www-archive.mozilla.org/MPL/relicensing-faq.html#why-not-mpl-lgpl-gpl) seems to indicate in some cases it might. The main reason I picked the MPL is that it nudges people to contribute back to the original project, which sounded like a good idea in general. Am open to suggestions as always, when worded nicely, like yours. Thanks again :)
I think this helps. And it's not a problem but just me trying to understand how to work with models if models != tables...because that's pretty much the approach I was using so far. This mapper makes sense though, what happens if the user object is to be stored in two or three different tables?
A model does not *have to be* a table, but there is no reason why everything for a single model cannot be located in one table.
take it easy... I'm just learning the framework following Apress's "Pro Zend Framework techniques" not working on an app for the pentagon. I'll try to find more about whirlpool though so thanks.
I'm not sure if you're joking or actually think md5 is even remotely secure. But it can be broken in about 2 seconds, and I'm not even exaggerating here.
not joking. I still have lots of things to learn, security is always a concern and as I said I'll go deeper into that later.
Yeah, one thing at a time. :) I just wanted to make sure you understood not to use it for anything serious.
I won't. I'm googling for something on the matter as we speak though I only seem to find stuff from 2-3 years ago. Any good place to get me on my feet with credential encryption in zend?...or would something like this be enough?: $rowUser-&gt;password = crypt($password, $salt);
I have taken both shabbyrobe's and your advice to heart and have now licensed it under the MIT license. Thanks again :)
http://codahale.com/how-to-safely-store-a-password/ http://php.net/manual/en/function.crypt.php (Read carefully! You'd want CRYPT_BLOWFISH) &gt;would something like this be enough?: &gt; $rowUser-&gt;password = crypt($password, $salt); Not really. The salt is used to identify the crypto, and needs to be formatted in a specific way. A blowfish salt needs to look the following way: $2a$&lt; two digits for work factor &gt;$&lt; 22 (0-9A-Za-z) characters for salt &gt;$ And to compare the password against the hashed password, you use the password hash itself as the salt: if (crypt($_POST['password'], $hashed_password) == $hashed_password) { //authenticated }
Took a quick look at the Zend documentation and this seems to be the only option: http://framework.zend.com/manual/en/zend.acl.introduction.html
[Access Control Lists](http://en.wikipedia.org/wiki/Access_control_list) have nothing to do with handling credentials. It's for specifying which users have access to what resources.
I don't think ACL's has that much to do with it. It's just to give or deny access to the different parts of the app depending on the role you gave the user on creation
I'm not sure what's going on with some pieces of your code :( For the ?v and ?v&amp;hd&amp;t strings, you can easily use http://www.php.net/manual/en/function.parse-str.php Your code seems to be indented weirdly - or is it just me? Are you putting your if/elseif/else in stacked indents? Not function related, but still! Line 19 looks like it'll throw an error.
&gt;what happens if the user object is to be stored in two or three different tables? I assume you mean splitting up the data into multiple tables. You use the user ID as as a foreign key in these tables. You write the mapper yourself, so how you want to store the user data is completely up to you. 
You can call one model from inside another, so in your createUser function, after the "save", you can just use: $pais= new UserHasPais; $pais-&gt;updateUserPais(z,y); Also in my Zend site i've a custom Class for easily instantiate models, it works like this: Web_Class_Loader::getModel("Usuarios)-&gt;doAction(); Hope it helped!
ok, I found an interesting answer to this in [stackoverflow](http://stackoverflow.com/questions/1581610/help-me-make-my-password-storage-safe), where the guy basically states that the best way of doing this is with a standard library.
This also works on other sites, like youtube...
ok, so I'm basically just missing a mapper. I wasn't completely off-track with this. And by mapper that means I need a class with getters, setters, a find() a fetchAll() and a save() method, right?
 $pais= new UserHasPais; $pais-&gt;updateUserPais(z,y); Cool, I have some "fat" controller code I could get rid off with this. Web_Class_Loader::getModel("Usuarios)-&gt;doAction(); seems pretty useful, I should try to replicate something like that.
Meh. A bit overkill IMO.
Very possible. Not a Zend user so I just took a glance and it seemed like the only related thing. (Zend seriously must have something to do with handling user credentials)
I can send you my class if you want. 
how would the code for crypt with CRYPT_BLOWFISH be? the stack overflow user who suggested the library also mentioned that's the correct approach but I didn't find it yet.
:) that'd be lovely
I found that model getter methods annoyed me because my IDE didn't know the class of the model being returned, and therefore couldn't code hint any custom methods (e.g. doAction) in the model.
&gt;And by mapper that means I need a class with getters, setters, a find() a fetchAll() and a save() method, right? No. A mapper only has the save(), find(), and fetchAll() methods. The getters and setters belong in the user class. A mapper is responsible for mapping the data from its data source to an object (and vice versa). * The find() method would find a record with the specified ID, instantiate a user object and populate it with the data found in the record. * The save() method would take a user object, read its properties, then insert those values into the data source. If the object has an ID, it'll update the existing record. If not, it'll create a new record. * The fetchAll() method would return an array containing user objects, representing all records. The user object itself should only contain setters and getters which will populate its properties. It should not contain any logic.
I edited my post and provided an example for you. 
thanks A LOT. you just saved me a lot of time with that explanation
&gt; But it can be broken in about 2 seconds That's cute. No, md5 can't be broken as it's not a encryption algorithm. You can find a collision, but for longer passwords it takes a lot more than 2 seconds. Even with rainbow tables.
No problem, mate. Just glad to help.
Well, there's Zend_Auth for authentication. However, how to create user records is up to you.
 $2a$&lt; two digits for work factor &gt;$&lt; 22 (0-9A-Za-z) characters for salt &gt;$ I'm not sure how to apply that to this: $rowUser-&gt;password = ??
Actually, [DOMPDF for PHP5](http://code.google.com/p/dompdf/) makes it really simple to create and generate PDFs, you can pass regular HTML right to it and save it or output it.
That's just the salt. Let's take the following salt as an example: $2a$07$usesomesillystringforsalt$ When used with the crypt() command, like this: crypt('rasmuslerdorf', '$2a$07$usesomesillystringforsalt$') It would generate the following string: $2a$07$usesomesillystringfore2uDLvp1Ii2e./U9C8sBjqp8I90dH6hi As you can see, the first 28 characters are the same as the 28 first characters of the salt (the excess characters are ignored). Because of this, you can use the hash itself as the salt for authenticating your users. 
cool, I understand now. So bcrypt's implementation only consists on a "type" of hash + crypt()
Fair enough, it's good to get good habits early on.
When making the hash: `crypt($password)` When comparing the hash: `crypt($attempt, $hash)`
&gt;So bcrypt's implementation only consists on a "type" of hash + crypt() Assuming you mean bcrypt is equivalent to crypt() with CRYPT_BLOWFISH, then yes. 
phpass is alright, but make sure your hashes are being made starting with $2a$ not $P$. TBH I'd use my replacement for phpass: https://github.com/radiosilence/core/blob/master/core/hasher.php Might take a tiny bit of adaptation to not use things from my libraries, though.
Not with GFX card based processing and attacks that can break the hash itself not simply brute force. For a password that is [a-zA-Z0-9]{6}, (so 34^6 combinations), and given that a single 9800GX2 can break 608m passwords per second[[1]](http://www.elcomsoft.com/lhc.html), it would take 2.54 seconds to do every possible combination. Say you have password length of 8, and the person who has got your database has an array of 20 9800GX2s (not uncommon for crackers, possibly all owned PCs), all possible combinations are done in: (34^8 / (608000000*20)) = 146.858051 Bearing in mind that serious crackers, especially funded by criminals, have access to hundreds or thousands of GPUs, you might want to make sure you're using a decent hashing strategy.
cool, thanks a lot for your help Nicoon
No problem.
Also it should be pointed out that youtube now has a shortener: youtu.be which may complicate things if you're checking to make sure the url is valid.
Interesting, i never had that problem because I'm not used to code hint... Good to know what problems can come with it...
http://www.kb.cert.org/vuls/id/836068 http://en.wikipedia.org/wiki/MD5#Security http://codahale.com/how-to-safely-store-a-password/ http://www.golubev.com/hashgpu.htm http://www.cryptopp.com/benchmarks-amd64.html http://www.economist.com/blogs/babbage/2010/09/passwords_redux
thanks!
For future reference, when you have a lot of HTML you need to print, you can break up the php and html like this: &lt;?php foreach($things as $key=&gt;$thing): ?&gt; &lt;li&gt;&lt;a href="&lt;?php echo $thing; ?&gt;"&gt;link&lt;/a&gt;&lt;/li&gt; &lt;div&gt;with more html etc...&lt;/div&gt; &lt;?php endforeach; ?&gt; you can also do something like this: &lt;?php if($this == $that){ ?&gt; this is html.... &lt;?php } else { ?&gt; this is other html &lt;?php } ?&gt;
Not really. A md5 hash takes so little time to compute that the rainbow tables out there are huge. To have a password which isn't already listed in a rainbow table you'll need a lot of characters, and at that point the chance of a collision becomes rather high. md5 is completely broken.
Hmm, I'll look into why some are messed up. I should put in something to stop the error from ever happening.
That's just bad code.
I'm not saying it's in any way secure, or un-crackable, but in most cases it takes a little longer then 2 sec - be it minutes or hours. And from what I understand it's easier to hit a collision than to crack the real password. That's all I've wanted to say - maybe didn't make that clear enough.
Can you elaborate? It's not my code, it's an old project that I'm porting.
 &lt;td class="row2"&gt;&lt;?php echo $emp_record['room']; ?&gt;&lt;input type="hidden" name="originator_room" value="&lt;?php echo $emp_record['room']; ?&gt;" /&gt;&lt;/td&gt;
I wondered if it should be using echos instead. The `&lt;?=$blahblah?&gt;` syntax is prevalent throughout much of the code. Welp, looks like I've got some editing to do.
That's typical of Indian developers.
Okay, now I'm rather more confused... Eclipse says your code is ok: &lt;td class="row2"&gt;&lt;?php echo $emp_record['room']; ?&gt;&lt;input type="hidden" name="originator_room" value="&lt;?php echo $emp_record['room']; ?&gt;" /&gt;&lt;/td&gt; But it doesn't like the next row (formatted just about the same as yours): &lt;td class="row3"&gt;&lt;?php echo $emp_record['emptype_name']; ?&gt;&lt;input type="hidden" name="originator_type" value="&lt;?php echo $emp_record['emptype_name']; ?&gt;" /&gt;&lt;/td&gt; I don't even...
The guy before me wasn't Indian, but I know the sentiment -_- The whole project is a mess of undocumented functions, and 9000-line files.
That syntax is server dependent depending on how you set up the ini file. I don't think eclipse actually consumed the ini, so it has no idea if that it turned on, so it'll give you a syntax error. the &lt;?=$blahblah?&gt; is just short hand for echo. You'll find it in a bunch of languages.
Ah, okay. I've got it working now. I forgot to rebuild the file after trying atheist_smartass's code, so the errors stayed (which confused the fuck out of me). And thanks for the tip about the shorthand, I had no idea. :)
Post the entire row.
Gah. Please take this code out back and shoot it. At least printf() so you can make it generic. // get rows or something foreach($row as $num =&gt; $r) { printf('&lt;td class="row%d"&gt;%s &lt;input type="hidden" name="originator_%s" value="%s" /&gt; &lt;/td&gt;',$num,$r['name'],$r['type'],$r['value']); } Ugly so I can compact it for posting on Reddit but you can heredoc a template and such to make it clean and easy to follow.
Nevermind, I'm just a dumbass. Didn't rebuild the file in Eclipse (I figured Eclipse would be smart and automatically build when the file is changed), no issues now. :)
Aye, it's also compatible with a sister class in python: https://github.com/radiosilence/wire/blob/master/wire/utils/hasher.py
I have a Java applet I wrote about 5 years ago that can do this. It's very poorly written, but it works, and I'd be glad to share if you so desired. It damn near kills the browser cause the thing is huge, but it works. It just posts all content to a php file that accepts the POST data.
They're well-known to anyone who has any programming experience outside of PHP. A lot of PHP programmers have never touched another language, unfortunately. Good choice with the README.
This is very elegantly written, well thought out, and reasonably well-document code. (If you're just attempting to use the library, the examples are more than sufficient.) To be honest, I saw the post and thought "Oh, why didn't I think of doing this before?" and figured I'd take a look at yours then probably end up writing my own. I have high standards for my code, and usually find it easier to rewrite projects of this size myself rather than try and clean public ones up (especially for a development library when I develop with error_reporting at -1... makes so many projects unusable!). I'm guessing from the "error_reporting(-1);" at the top of all of your examples that this won't be throwing any notices of any sort, and after looking at both the examples and library, I really can't imagine anything I could have done better. You succinctly and elegantly reproduced enum functionality in PHP. Very well done. I'll definitely be including this in my 'home-grown' framework. If I do somehow manage to make any improvements, they'll definitely be pushed back upstream. :)
Cool, if only I knew more python :\
Honestly I'd recommend learning instead of PHP but I usually get lambasted for saying that in /r/PHP ;)
If you have any other suggestions for how I can code this better let me know!
try ctrl+b it will revalidate the document.
Don't legislate morality. Anyone who is moral would contribute back. Forcing them to is unethical.
Don't legislate morality. Anyone who is moral would contribute back. Forcing them to is unethical.
Believe me, I know it's horrid code. I'm going to be cleaning it up as best I can. :(
Surely it's not too big an assumption on my part to believe that most senior PHP developers know a lot about MySQL?
Don't legislate morality. Anyone who is moral would contribute back. Forcing them to is unethical.
It's terribly lazy and potentially insecure, but you can upload a zip file and have the server uncompress it into folders.
At one point in on GitHub you say: *One would pass in a constant (currently ranging from 0 to 3) and some additional data, and the send() method will do its job.* As I agree, one *could* send a number as an op code, a good PHP programmer (although I find opcodes to be a rather poor way to alter a function most times) would use the defined name. For example, array mysql_fetch_array ( resource $result [, int $result_type = MYSQL_BOTH ] ) The $result_type is an enumeration that takes the values: MYSQL_ASSOC, MYSQL_NUM, and MYSQL_BOTH When using this function, I would *never* push the actual numeric values into it. When writing a function, I would use the same methodology. I can see the real world value in this, but it seems more like a crutch than anything. Your class is something an inexperienced programmer would use, imho.
I know, Django and Rails are nice things and I did gave python a try...it's probably much more "useful" or at least it's general purpose nature is more obvious than PHP,... but there are more PHP jobs out there and I'm currently also learning some C...so python is gonna have to wait a little bit longer for me ;D
There are two things you need to deal with if my shallow-browsing of the PostgreSQL docs was accurate: 1) The [CAST()](http://dev.mysql.com/doc/refman/5.0/en/cast-functions.html#function_cast) function in MySQL does not allow numeric as type. Instead, use DECIMAL. 2) As for the [date_part()](http://www.postgresql.org/docs/7.3/static/functions-datetime.html) function (when using 'epoch' as the field), that would seem to correspond with MySQL's [UNIX_TIMESTAMP()](http://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_unix-timestamp) function. Additionally, uppercasing all functions and keywords (such as SELECT) would make the MySQL query a teensie bit more readable. 
Appreciate the response! I will make sure to update the readme as what I meant to say was that its usage would become: send(OPCODE_VOID, null); Which is what, indeed, for example the PHP docs indicate. However they still suffer from all the disadvantages listed. This library provides more than type-safety for 'inexperienced programmers', and I would recommend reading the [Java article](http://download.oracle.com/javase/1,5.0/docs/guide/language/enums.html) on how enumerations attempt enhancements.
Thanks for the help! I rewrote the query, added in your suggestions and made it easier to read. (for reference). Going to try it out now. **$score = upvotes - downvotes** SELECT ROUND( CAST ( LOG ( GREATEST ( ABS ($score), 1.0)) + SIGN ($score) * ( UNIX_TIMESTAMP() - 1134028003) / 45000.0 AS numeric), 7)
Will definitely keep this in mind, am glad I switched! :)
I'm sure most senior PHP developers know how to drive a car, too; doesn't mean this is the right place to ask that sort of thing.
[DocRaptor](http://docraptor.com) is teh shite.
My query looks like so: Bear in mind that difference is the result of upvotes minus downvotes. SELECT * FROM video_submissions ORDER BY ROUND(CAST(LOG(GREATEST(ABS(difference),1.0)) + SIGN (difference) * ( UNIX_TIMESTAMP() - 1134028003) / 45000.0),7) Edit: Changed to: SELECT * FROM video_submissions ORDER BY ROUND(CAST(LOG(GREATEST(ABS(difference),1.0)) + SIGN (difference) * ( UNIX_TIMESTAMP('1306264388') - 1134028003) / 45000.0),7) I still seem to be getting: &gt;You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '),7) LIMIT 0, 30' at line 1 
Whoopsie, as per the UNIX_TIMESTAMP() documentation, it comes in two forms. You would need to pass in your $current_timestamp variable, like so: UNIX_TIMESTAMP($current_timestamp) You might even have to wrap it in quotes, depending on how you construct the query. Have a look at the documentation, you need the variant that returns the number of seconds since the UNIX epoch. Also make sure to use DECIMAL, instead of numeric at the end.
A set should probably have constant time lookups (EnumSet._contains()). A set that's backed by a hash map usually uses the hash map *keys* as the set values. All of your operations that call in_array() are going to be O(n) rather than O(1). 
But that's a false analogy. This would be more along the lines of asking an XBox forum about a TV setup. 
My opinion, also, is that this implementation removes most of the reason for using enums in Java (because they're just syntactical sugar). If you want Java enums in PHP, you should probably patch the parser and not this userland implementation.
Thanks for the kind words! I tend to take the same stance with the 'rewrite from scratch'-approach. Before starting this I investigated a couple of existing PHP enum approaches, but they all seemed to lack the features and robustness that I was seeking. As for the error reporting, I cannot guarantee it is completely fool-proof, but if something does creep up, do not hesitate to let me know. This being one of the first projects I've open-sourced I'm quite psyched to enhance it with external input. Always great to have a pair of second eyes around!
I guess your IDE doesn't read PHPdoc blocks, then.
Make sure the query ends with: as DECIMAL), 7) The CAST() function requires the as keyword to figure out what type it should cast to.
Completely agreed. However, it is going to take a while before [this PHP enum proposal](https://wiki.php.net/rfc/enum) will be implemented, if at all.
Woo! I got a resultset. Query that worked (in case anyone stumbles upon this thread): SELECT * FROM video_submissions ORDER BY ROUND( CAST( LOG( GREATEST( ABS( difference ) , 1.0 ) ) + SIGN( difference ) * ( UNIX_TIMESTAMP( '1306264388' ) -1134028003 ) / 45000.0 AS DECIMAL ) , 7 ) Thanks a lot!
This seems like something that should be implemented at the language level, not as a library. Something this basic, if employed as a library, will introduce a giant ubiquitous dependency. And as it stands I really have no problems with the define() type enums or the class constant type enums as they aren't that much of a pain and have much less overhead. But your library does bring to light the need for some convenience enum syntax in PHP. Maybe we'll see it in PHP6. /cross fingers
I'm not familiar with the low-level implementation of in_array(), but that does sounds like a terrific enhancement. How would you propose to speed it up? Instead of using numeric indices, use an enum's identifier as the key? 
Can someone explain how this algorithm "works" or point me to me to an explanation of something similar? I'm interested
&gt; operator overloading, at least for + and - Ctrl+F, "operator overloading", upvote. I'd also like to see "finally" support on try/catch. There's a bug against PHP asking for this, but they apparently don't see the need and do not want it implemented.
Indenting for readability and indenting for syntax are not always the same thing.
Agreed. Surely hope the proposal goes through.
There's a really good explanation that I found [here](http://amix.dk/blog/post/19588) 
I use it for dynamically loaded plugins. (With some __call hackery, it's actually possible to implement it in PHP right now.) Contrived example - I've got my base object, say, "User". I can then load the "EmailPreferences" plugin, which dynamically adds the appropriate properties and controller methods to support and expose the additional functionality. Our frontend knows which modules/plugins are enabled and loads the extra files on the frontend as appropriate. Why dynamically loaded? We can enable/disable them per customer/user. This allows us to demo new functionality to a subset of users, disable it for users that absolutely hate it, and charge for certain plugins if the business end decides to. To me, this is much cleaner than just plastering "`if (pluginEnabled('EmailPreferences')) { }`" all over the code.
&gt; Read-only object properties. The only way to do this now is to use __get, which can get messy and is less efficient. I'd settle for get/set handling like C#. public $ModuleName { get { return "MyModule"; } } Add a "`set { }`" block if you would like it read/writeable. Basically just a slightly more organized way than using \_\_set/\_\_get, as the code for each variable name is kept together.
Re #7: &gt; Java-style enums timkurvers wrote a really nice [PHP Enumeration Library](http://www.reddit.com/r/PHP/comments/hih3j/php_enumeration_library/) based around Java-style enums. Might tide you over until PHP 9 when something like that would finally get implemented. :)
prolly, but no need to be a dick about it.
I think you're still being too generous.
It's a shame that you can't get a reliable object hash in PHP, otherwise it'd be really simple. The problem with using the enum identifier as a key is that you probably can't get the enum identifier (if someone tries $set-&gt;add(MyEnum::FOO_BAR) all you're going to get is a number - and you can guarantee that they're unique because you can't specify their type in any type of generic way. Well, at least not easily. So, we have to somehow specify the generic type of the enum that's to be used for the EnumSet and we need some identifier safe to use as a PHP array key. It looks like Enum.getBinary() is what we want... Which gives us this (just threw this together to show you my idea, it's incomplete and untested): http://paste2.org/p/1432604 This looks like: 1. We'll get constant-time insertion/removal/retrieval. 2. You don't have to hide functions from the users (\_remove, \_add, etc.) which is itself a pretty dubious code practice. 
There is a way to get an identifier, the enum's unique name as defined. One will be passing in Enum::FOO_BAR() - for example to add() - which is an instance of Enum, as opposed to Enum::FOO_BAR which would be the regular PHP constant. Would in that case the identifier/name suffice? Let's assume the set is stored as (instead of numerically indexed): ['FOO_BAR' =&gt; instance for FOO_BAR] Would this suffice: protected function _contains(Enum $enum) { return isset($this-&gt;_set[$enum-&gt;getName()]); } Also, the current set implementation does not allow adding enums by value, only by actual enum instance.
Yeah, I didn't realize you could get names out. As long as names have to be unique, they're probably preferable to use anyway. &gt; Also, the current set implementation does not allow adding enums by value, only by actual enum instance. As well it should! The whole idea of Enums (that the PHP proposal totally misses!) is that you should never actually need their values! I didn't realize that you had to pass the enum around as Class::ENUM() rather than Class::ENUM. There's no \_\_staticGet() and \_\_staticSet() yet, is there?
I'm positively sure that the current implementation forces the names to be unique, so that might work indeed. I appreciate the proposal! And unfortunately, I couldn't find the static get and set either :(
&gt; Instead, use DECIMAL. Why the hell would you use a BCD type for something like this?
Seeking a MySQL equivalent to 'numeric', using the CAST() documentation, yielded 'DECIMAL' as the only suitable type. Enlighten us.
Given what it's being used for, the clear choices are integer or floating point, depending on whether you think the logarithm mantissa is important. Is it that you don't know what BCD is, and therefore do not understand the criticism? I mean it's such a bizarre choice. To be fair, given that what Reddit implemented is a buggy, incorrect attempt at a confidence interval, it's not clear to me why you're imitating their approach at all.
Use Netbeans PHP it won't throw errors on the short tags.
Eclipse doesn't either. It was being thrown because of the quote types, I think.
I misinterpret your 'for something like this?'. As may have been obvious, I took the OP's 'Does anyone know how to convert this into a MySQL query?' quite literally. Given PostgreSQL is to be converted to MySQL, therefore it is not my concern whether the Reddit implementation is faulty, and should make clear to you why I'm imitating their approach. Appreciate the concern though :)
I'm working on this now!
So basically, just completely avoid the issue that the Reddit implementation doesn't use BCD and you do. Got it. I kind of get the impression that you don't know what the thing you recommended even does.
Please don't cast as decimal. That's bizarre and awful.
It looks like you have plenty of experience to back up your "no degree" bs. And I say bs because I have plenty of developer friends who have been paid more than me yet never went to college. I'm at a junior level (procedural experience, learning oop as well). Two years ago I was hired on as a "jack of all trades web guy" (php, html, css, content editing, 'social meeddiaaaaa'). I was *not* at all confident that I could fulfill that company's requirements of basic php support. I didn't even want to apply to that company. But a close friend of mine / mentor said something to me that I'll never forget: "we all start from zero". He was a php developer / contractor doing freelance work for huge enterprises. How do you know you're not going to get a job if you don't try? How will you improve to get an even better job in the future if you don't try for that job now? I applied, got the job and I've since improved my basic php skills by supporting that company's spaghetti code (oh god it was a nightmare) and I learned a lot. After coding and debugging and coding and debugging for a year, I convinced them to switch their low budget clients to WordPress and I improved even more. Now, I consider myself a bit of a WordPress expert. My point is if I didn't grow a pair and delve into the unknown, I wouldn't have gotten that job. Also, I wouldn't have gained the confidence I have now. If I consider myself a junior php developer and I have the confidence to apply jobs where I'll be competing with people with your experience, you should have even more confidence than me. Oh also - I've since left that job and I've become a freelance web design/developer. And while I do have a degree, it's an Honours, Bachelor of Arts. In Communications. I'll just leave you with that. [And this.](http://www.youtube.com/watch?v=1XrvkPgwo2I)
Adequate experience will trump education in most circumstances. Most people who hire developers care most of all whether or not you're a fit for their teams. Personality and maturity are a huge part of what gets a person a job or not. Of course, there's a base level Of things you have to know, but if you can demonstrate you are competent, eager, and not a Rockstar (Rockstar programmers are all sizzle and no steak for anyone with a real project pipeline), then you have a fighting chance. Don't sell yourself short.
You're thinking way too hard about it. ;) I've been a fulltime LAMP dev for 5 years, plus a few years of part time before that. I've got a degree in CS, but I work with people that don't have CS degrees, and it's really not even a requirement to have a degree - as long as you've got the experience to make up for it. If I was interviewing you, the most important question I'd ask is "show me something you've built." If you've got one thing to show, cool. If you've got more, better. If you've got something awesome to show (ie a community that you built - not just installed) then you're doing great. And really, focus on your positives. It sounds like you've got some good ones. Hope that helps.
It never hurts to apply. It gives you interview experience which is a great boon. Your concerns are valid however. Most companies would want a strong understanding of OOP, and if I was interviewing(which I have on many occasions), a lot of what you said would be red flags, however just because they are red flags doesn't mean in the end you wouldn't be a stronger worker than someone with a college degree. A lot of this depends on the job, how much they are willing to pay, if they are willing to take on a beginner for smaller pay. Competition in the market place(where do you live?) Every interview I have ever been to has been 90% based on technical tests where they ask you questions, however your resume is your step for getting your foot in the door to even get to the technical test, so make sure you have a good resume right off the bat. Living in Silicon Valley i've worked at one of the largest companies in the area for 5 years now, and I got the job straight out of college. I was much more of a beginner at the time in actual programming sites, but my college degree in CompSci helped a lot and the tests they gave me were much more based on CompSci questions like algorithms and data structures and OOP, than actual language specific questions. There is no reason not to apply at all. Basically as an interviewer here is what I would be thinking: 1. When you say you are doing everything procedurally, it is a huge red flag that you don't understand more advanced computer science concepts. 2. When you say you do everything in notepad, it probably means you arent familiar with unix, which is a red flag to me, and all of the things that go along with programming for real companies such as version control(svn/git), and deploying solutions in a larger environment. This may not be the case, you might know a lot about these things but it would just make me question. There is so many better editors out there(I develop on a mac so I use TextMate, recently converted from BBEdit), which are still light like Notepad, but do syntax highlighting and lots of other time saving features. 3. No formal eduction, while not a necessity, scares me as an interviewer because I at least know if someone got through a comp sci program at an accredited college they were able to put the time and work in and understand higher level programming concepts at some point, however this doesn't mean they are automatically a good programmer. 4. I would want someone brushed up on whats new in the php community. If someone came to me and said "I've heard I should look into Drupal/Wordpress", It would be a red flag that they didn't know what they were doing. You should look into how MVC frameworks work because many companies end up using them and if you understand them it means you can jump into their projects more easily. I'd recommend looking at Yii, CI2, Zend and others just to have a basic understanding of them. I started at my company doing C/C++ work, ended up getting on web projects and learning php/mysql, and finally have moved on to working on ruby on rails projects which is what I do currently. So Once you get in you can really learn a lot on the job. TL;DR: Get your resume up with examples of your work and make it polished to get your foot in the door, because no formal training is going to hurt. The rest depends on how you do on the technical aspects of the test. However don't be afraid to apply, there is never a reason NOT to apply/interview, that is experience in itself. 
I would appreciate - and I do believe I speak for all here - if you could simply get to the point. Apparently, using either numeric (PostgreSQL) and decimal (MySQL) casts are incorrect, an integer type would have been more appropriate. My remark three replies back, is still waiting for an honest answer, yet you chose to neglect to answer what type it should be casted to in MySQL (if at all). How does this back-and-forthing help the OP in any way with answering his/her questions?
Don't be afraid of rejection, that's just silly! If you never try you'll certainly never get a job. I started working as a web dev my sophomore year of college, while studying mechanical engineering. I sorta happened into it, working as a tutor for the math department and gradually taking on the role of updating and revamping our website. It's a classic case of learning what you need to know to do what you want to do. That led to a full time job, which meant it took me 9 years to graduate as I went to class part time (side note, do not recommend, it's quite difficult to take a senior level class that builds on a junior level class when you took the previous class 2.5 years ago). I then went on to work for a private company, do a lot of challenging work and consider myself pretty darn competent. I'm entirely self taught, short of one 1 week Java class with sun... I do have a degree, but it's in a completely unrelated field. With your skillset, I'd say you could get a job. It will likely be an entry level job that pays not all that well, maybe $30-40k a year (depending on areas). You can either do that and use it as a base to improve your skills, or dig into some more advanced programming. My company, as an example, would probably not hire someone who could not develop an MVC application (be it using a framework or one you piece together). Being able to do more serious enterprise level MVC development is generally the next step up and comes with a serious bump in pay. Since you're working on projects, I would recommend trying them out in a more MVC fashion. Learn a framework, doesn't really matter which one. Zend, Kohana, Fuel, CakePHP, etc. Once you've mastered a framework you can fairly easily transfer knowledge to another one (albiet with a learning curve) so don't get hung up on picking the right one. When you get a project going with a nice MVC implementation, then sign up for a github account and put the source up there. That looks fantastic on a resume... So to recap... I think you could get a job with the skills you have now, but probably a entry level position. I wouldn't worry about the lack of degree or formal education at all, if you can show code and projects you've done that's worth way more. However, I would strongly recommend taking your skills to the next level if you want to land a solid job.
if there's ever a web design themed radio station you'll be set!
Fuck the last two, start doing OO, it's piss easy once you get the hang of it. Make sure your knowledge on security is excellent. Start learning to work within other's code bases. Learn to use Linux for stuff. Learn a SCM like Git. Use an editor like Sublime Text 2 that highlights. TBH most PHP developers in jobs are ignorant and write shitty code, so the competition isn't particularly hard.
This topic is awesome. Everyone boosting the OP's confidence is indirectly boosting mine. I'm probably a great deal less skilled than the OP, and would probably end up referencing php.net, google, stackoverflow, etc every 20 mins in order to do half the things he's done. STILL! It encourages me to hunker down and finish that half-built CMS I've been building for fun.
This is the hardest part about becoming a professional programming. I've been programming in PHP and Python for as long as I can remember and I'm still not convinced that I'm employable material. I envy professional programmers.
Since you've spent most of your time programming custom coded sites, you will want to ensure you're fully aware of the current web security practices. XSS, CSRF, SQL injection, and secure password hashing (bcrypt) should represent concepts you've already learned and mastered
It's natural to be afraid of changes and challenges, as radicalradical said, you just need to try it, go for it, and every step will make you better. Maybe you don't fit on the first company you start, but you'll find another, and in the meantime, you'll be learning, and confronted with challenges you'll never have on your own, managing old "spaghetti code" is a nightmare, but also will make you learn more. I suggest you start developing with some FW, Drupal/WP aren't true frameworks, they're CMS, learn symphony, or zend FW or cakePHP, they're OOP. Knowing how to create/manage sites with CMS like Drupal, Joomla or WordPress is also important, they can be time-savers sometimes, but if you already know zend or cake, you'll learn faster. Good Luck!
I took a look at nabyn.com. Based on that, you seem relatively competent. I don't think you would have too hard a time finding work. That said, your development practices are pretty retro and I imagine your coding style is a little retarded as a result. Luckily, this will take very little effort to fix. 1. Pick up a modern MVC framework. I like Kohana, but Symfony/Zend/Yii/CodeIgniter are all good choices too. The latest version of Symfony will probably be the most useful for the "finding a job" issue - but it's a "heavier" framework and will likely have a lot of ramp up time for your. CodeIgniter is probably the best starting point for a cowboy coder like yourself. Using a MVC framework with ORM will force you into OOP development practices in a way that should very quickly make sense. This is how you should learn to use OOP -&gt; MVC + ORM. 2. Pick up a modern IDE. Some people like Eclipse, but Netbeans is far and away the best choice these days. Version 7 just came out, and it is awesome. AWESOME. Using Notepad is sad. If you are "hardcore" and just love the keyboard - try out VIM. Not my thing, but people swear by it - for good reason. 3. Learn to develop locally. For some reason, I'm imagining you editing files and then FTPing them to a server to test. This is retarded. Since you are using Windows, install something like WAMP or XXAMP. Learn how to edit php.ini, apache.conf, etc. 4. Learn to use git or mercurial. Mercurial might be easier to start with since you can use TortiseHG - but both are distributed version control system (DVCS). This is a must. Get GOOD at using these tools if you want to work in a team. 5. Learn to use xdebug. Netbeans works GREAT with xdebug. If you are slowly adding print statements to fix shit, that HAS to stop. Seriously, this will seem very confusing at first, but it is an absolute must. 6. I'm assuming you already know your way around the Linux command line. If you don't, you need to fix that ASAP. You are going to need to be able to fix permissions, delete files, kill processes, restart apache, etc etc. This is pretty much non-negotiable for LAMP developers despite not actually being programming. 7. Learn the basics of Javascript, and of jQuery. A simple test to see if you are mostly ready is if you can implement an autocomplete input box that uses Ajax to call some php code that queries a database, pushes the data into an array, encodes to JSON, sends that back to the Javascript where you build an autocomplete dropdown. Sounds more complicated than it is, but that pretty much tests basic competence. You can become mildly competent at everything I mentioned in the space of a month of hard work. If you do this, you will become way, WAY more employable.
Everyone feels like this when they start. If they don't, then they will be surprised when they are trying to catch up. Everyone has up "ramp up" period at a new job.. just be honest about your abilities and you will be fine IMO. 
I don't think I've ever been qualified for the job I've gotten, the trick is being able to learn as fast as possible and BS so that they don't realize the truth before you've had time to impress them. To be completely honest, I have no idea how the heck I've ended up where I am (a lead at a major e-commerce company), but I know I wouldn't have gotten here if I was afraid to fail and go out of my comfort zone. In the end, give it a try, the worst that can happen is they say no. When you get in, you' prolly won't be left out to dry (unless you go for a lead position). Believe me, there are people far worse than you higher up the food chain... To get started, get a linux box and start hacking around in it. Build a LAMP stack and a simple application, go from there. Always look to learn from people better than you, and don't think you know everything. I had that trouble when I first started out, only to realize a few years later they were actually right.
&gt; I would appreciate - and I do believe I speak for all here - if you could simply get to the point. I did. &gt; My remark three replies back, is still waiting for an honest answer It was immediately answered. &gt; yet you chose to neglect to answer what type it should be casted to in MySQL (if at all). No, I didn't. You're just making up complaints so that you can feel like the victim, then editing your post when your criticisms get caught being wrong. It's right here in black and white: &gt; &gt; Given what it's being used for, the clear choices are integer or floating point And yet I have no doubt that you will fail to admit or apologize for the false accusation, and feel like a victim when this costs you the answer you want. You do realize that you're supposed to say thank you when someone teaches you something, not get nasty, right? That way, when it turns out you have more to learn, as is the case here, they don't turn their back on you, as is the case here? &gt; How does this back-and-forthing help the OP in any way with answering his/her questions? It keeps them from following fantastically bad advice. But hey, you want to be nasty, you do what you want. No skin off my teeth if you don't know the basics. Funny thing: for your false complaint that your question went unanswered, I've asked you three times whether you know what BCD is - a yes/no question - and have yet to acquire an answer. But hey, I guess you're more comfortable biting the hand that feeds you, and complaining that answers you were too busy not reading to notice aren't there. Have fun with that. You're welcome, not that you seem to understand the favor. Mass downvote away, though. That's certainly much better than "thank you for teaching me not to use decimal. Would you please explain why this is a bad idea?" And then you would have gotten the answer "it incurs a logarithmic slowdown in everything you use that column for." And maybe you could have asked why. Oh well. Be sure to get rage sympathy upvotes for not thanking someone for showing them the mistake in the advice you googled up without understanding it.
In the same boat. Very comforting reading these posts.
Every problem has an answer which is short, simple, easy to understand, and wrong. - H L Mencken Seems the same is true of broken algorithms and explanations.
Jesus, what a terrible implementation. Round cast float as numeric? First off, yours and theirs get different rankings, because you used cast as decimal - decimal is mysql's binary coded decimal type - at the advice of someone who googled it up and doesn't even know what it is. Decimal rounds differently under an implicit cast than do other numeric types. This is a broken attempt at a confidence interval. Here's how it works. First, UNIX_TIMESTAMP( '1306264388' ) - 1134028003 is trying to get a count of seconds since some date which is very near when Reddit started. So, what they do is they encode that count of seconds as a decimal string, so that they can convert it back to an integer literal, instead of, I don't know, keeping it as an integer literal. Stripping the single quotes off of that number right there will have an enormous impact on server load, because it's doing this for every comment and every story. *Retarded*. (Notably, MySQL doesn't parse that at all - that's 0 in MySQL - meaning you have no date component in your ranking, currently. That's why looking and seeing that it has results is not the same as checking whether it's working correctly.) mysql&gt; select UNIX_TIMESTAMP( '1306264388' ); +---------------------------------+ | UNIX_TIMESTAMP( '1306264388' ) | +---------------------------------+ | 0 | +---------------------------------+ 1 row in set, 1 warning (0.00 sec) The correct code is of course 1306264388 - 1134028003 because as the author apparently does not know, the result of unix_timestamp(string unix timestamp) is the same damn integer. So next, you take the second count since reddit's birth, and scale it by the magic constant 45,000, which is effectively thus a decay speed. Then you multiply that as the sign of the difference in votes, because apparently you want a story with 500 votes that's 1-positive to have the impact of its age flip if it gets two downvotes (which is absolutely not how a confidence interval is supposed to work, and easily gamed.) That is a defect, which you are faithfully copying. Then, you take the absolute vote differential, set its minimum at one, and logarithm it, and add that to the broken age modifier. That way, stories which are at least break-even float upwards, but stories which are negative to any degree are not affected - which means that a story which is new and massively downvoted is kept on the front page, but a story which is old and just slightly down-trended will suddenly disappear. This is exactly the opposite of the desired behavior, especially in smaller subreddits. You also shouldn't be scaling to Reddit's birthday, but rather your own. Replace 1134028003 with whenever your site started. Finally, you take that, and cast it to an integer type to truncate it, which is an expensive and dangerous replacement for just truncating it. This is further exacerbated that you have followed the advice of someone who doesn't know the meanings of the datatypes he's advocating, while giving SQL advice straight out of a search engine, and have followed him to a specialty encoding meant for legacy money support called "binary coded decimal," which has no place here. *After* that, you attempt to round the value off. This is amusing for four reasons: one, you just truncated it, meaning anyone reading this code knows you have no idea how SQL or basic typed programming works; two, you are using two completely different transitions between integer and non-integer math, and both of them are wrong; three, neither of them are the one which is in the code you're trying to imitate, which is *also* wrong, and four, this would be faster and more accurate if you just left it in floating point. Now it's not clear to me whether I should give you a better implementation of Reddit's ranking function, because of course Reddit's ranking function is so very broken in the first place; still, it is what you asked for. select * from video_submissions order by ( log( greatest(abs(difference),1) ) + ( (sign(difference) * ($itemUnixTime - $siteBirth) ) / (45000) ); But again, that's still a better implementation of a broken, wrong algorithm. What you really want is called the "Wilson Confidence Interval", and it doesn't work this way. It's faster, it gives better results and it's easier to implement.
lol as a host?
&gt; I don't have any friends who program so I haven't had anyone around to tell me whether I'm doing something wrong or not (or even someone to talk to about programming, for that matter). IRC.
You're conduiting the upvotes out of and back into MySQL. Why? That's hella expensive and prevents tons of important shortcuts MySQL could be taking. 
sure! Let's make it together. Rad Rad and the Toxman.
I've taken plenty of programming classes but feel I'm in the same boat as you. I applied for my current job (first full time job) and killed it at a place that's really hard to land a job although my primary job title is not IT/programming related . Keep in mind that if you have other skills that you can use to land a job, programming may just help you kill it. I do some programming in my job but being a programmer in general can end up giving you an extra edge on the competition especially if you have social (sales) skills which I'm sure most programmers don't. For those who don't, suck it :-p
I'm going to second everything he posted minus the framework. While I am in the same boat (php skills are not that good IMO), I can at least state that I can do all of the above. You would not want me developing a large website from scratch, but debugging etc or working on a smaller site, I could see myself doing that. The only thing that makes me hesitant about a framework is that they all seem to be in the middle of a huge rewrite because of 5.3, and the documentation has been pretty shoddy for the ones I've seen. Maybe I should give Symfony or Kohana another look.
Thanks for providing the extra option. If you're looking for feedback on your open source project, your handling of the comments in this thread resoundingly demonstrates you couldn't be doing the "community" aspect of it any better :)
Know web security. There are plenty of PHP security "cheat sheets" to refer to. If you aren't aware of attack vectors, you might write exploitable code. Write modular code - it keeps bugs to a minimum. You want your team to be able to modify things with as little knowledge as possible of the other parts of the system. The worst case scenario is one where you cannot write any code for the application without knowing every part of the entire code base, for fear of breaking something. Get progress reports from your team as often as possible. Good luck!
Eh, don't be too hard on yourself. I have a degree in CS and 3 years of experience in programming PHP and feel like I'm not experienced enough for the job I already have, let along interview for another one. I run into problems that I need to solve in which I don't even know where to start, and barely am able to solve them (after many tears and blood) just before the deadline. I think no matter how experienced we are, (excluding all the 10+ year freaking PHP geniuses) we feel what you feel on occasion. Just don't freaking give up. Good PHP programmers, these days, are hard to find. 
Don't get in their way, but make sure you understand what they are doing. Ask questions, and occasionally when they hit a milestone have them scroll through their code explaining what is going on. They'll hate it, but appreciate it later. You find so many bugs when you actually talk your way through code. Your job is to make sure they can work more efficiently, not to control the project. Sometimes people need a little more control however to become more efficient. Need to find that balance.
&gt; Learn to develop locally. For some reason, I'm imagining you editing files and then FTPing them to a server to test. This is retarded. Why would that be retarded?
To "go pro" you should definitely familiarize yourself with existing software like Wordpress, Drupal, Magento, etc... Know how to set it up, add plugins/extensions, etc... Also know how to create themes. It's also good to get into frameworks -- Zend, CakePHP, CodeIgniter. This is going to speed up and standardize your programming in a good way. Bottom line though, it sounds like you know how to program. There are plenty of CS grads who can't program their way out of a cardboard box. Plenty of guys copy &amp; pasting java code without having any idea of what it's doing or how it works. Don't sell yourself short. You're more capable than you realize.
Because at some point you're going to develop a site/app in a context where you don't have control over the environment, and if you're not able to get your dev environment to match (or acceptably simulate) your production environment, you're going to be screwed. Your client's going to be chewing your ass over the phone about how you obviously don't know what the fuck you're doing, and at the same time you're going to be slamming your head against your desk while you try to figure out why the XML parsing functions you used on your dev server don't work on the client's production server, or why your htaccess rules don't seem to be doing a goddamn thing. Eventually, girls will stop paying attention to you because your forehead is perfectly flat from all the banging-on-your-desk and your voice is hoarse from your wails of despair. edit: this is just to say that not having maintained an environment almost always means not understanding environments in general. 
You don't need to know fucking anything if you have hired good people. If your programmers are shit, then you're fucked. There's pretty much no way around this. Also, many people get comp/sci degrees but cannot program. In short, you are not particularly relevant to the success or failure of the project. However, there are things you can do as a manager to increase your success rate. I will list them below: *Keep your programmers happy. If they have a pet architecture, don't discount it unless there's a goddamn good reason for it. You're clueless about the language, so go with your programmer's pet architecture if they have one. Trust them, and listen to them, hopefully they know what they're doing. If they don't, you're fucked anyway, so you might as well listen to them. *Limit the scope of the project. Get a concrete project charter and get the project sponsor to sign his name on it in **ink**. If the charter needs to be changed, then you get to re-spec the whole project from scratch, no exceptions. *Have a project sponsor and SME's (Subject Matter Experts) with time committed to the project. If they are "too busy" then stop the project bbecause it is waste of money and will probably fail. You need (ideally) a bunch of business people giving constant feedback. *Prototype early and often. Stay away from Ivory-tower discussions about the best way to do things. The first order of business is to build a prototype that WORKS. Expect your SME's to shoot holes in it. If they criticize it, then you're on the right track. Give them immediate results. If they want to add something trivial, add it immediately and re-release so they can see it. Ugh. There's more, but that's a few that might be useful.
&gt; try to figure out why the XML parsing functions you used on your dev server don't work on the client's production server Well, that would be an argument to develop on the client server from the scratch ;) In many scenarios it's not possible to develop localy - usually we allow the client to monitor the progress by giving him the dev URL - that would be impossible while developing on localhost. I would rather recommend to develop on a machine you own and can setup just the way you need it to be - be it a in-house server or a dedicated machine. Developing apps that run on speciffic configuration is usually a no-no.
I was in a similar state a while back, except I did mostly OOP. College dropout that mostly taught himself (minus the foundation I learned in School mostly C++ and Java not the Php I do now) Then I got "a real job" doing it and found out I was better than some of the people who had degrees and more experience, although certainly not the best. Just keep a positive attitude, be useful (know a lot of diff things - learn some front end stuff too, understand how the two interoperate), know useful things (frameworks helped me a lot), and admit when you fuck up - it happens to everyone. Also learn version control, I like git.
1) Team meetings to discuss pain points, ideas, side projects, and deviations from the scope. 2) Learn to scope and understand the requirements. 3) Learn the code as best as you can (you don't need to fully understand it, just know what it does and the limitations) and never say "I don't want to hear about the technical stuff, just get the job done." 4) Tools (IDEs) don't matter, as long as they play nice with your repositories. Let the programmers use what they like. Ask them. 5) Learn how your code repository system works (git, svn, cvs, mercurial, the dreaded SourceSafe) 6) Peer review works. Let more than 1 person work on the same code. Have code review meetings, if applicable. 7) If a developer has an idea, listen to it and either let them work with it or shoot it down quickly. Any idea is a source for mental growth, even if it's a dead end. If it fails then you'll know not to go down that road again. 8) Enforce documentation in code (check out [PHPDocumenter](http://www.phpdoc.org/)). Make a wiki for a knowledge base.
&gt;Or should I go back to the books and learn some more before trying to apply for a job? That depends on your current level of knowledge. If I were to hire you, I'd expect you to have knowledge of: * [How to safely store a password](http://codahale.com/how-to-safely-store-a-password/). * [SQL injections](http://en.wikipedia.org/wiki/SQL_injection) and [prepared statements](http://en.wikipedia.org/wiki/SQL_injection#Parameterized_statements). * [CSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery). * [XSS](http://en.wikipedia.org/wiki/Cross-site_scripting). * [Session fixation](http://en.wikipedia.org/wiki/Session_fixation). * [Various other security considerations](http://www.sk89q.com/content/2010/04/phpsec_cheatsheet.pdf) (PDF!). * [Various](http://martinfowler.com/eaaCatalog/) [design patterns](http://en.wikipedia.org/wiki/Design_pattern_%28computer_science%29#Classification_and_list). * Good familiarity with [PHP and its APIs](http://www.php.net/manual/en/index.php). * Framework experience. I don't really care about a person's formal education as that's a poor measure of a person's skills. I've seen many people with a university-level education which haven't actually learned anything about programming. That's why I ask them various questions during their interview to test what they actually know. 
We use Git now, do you suggest sticking with this? We have a fairly large number of clients, is there a way for us to release features to only a small set of them easily? Thank you!
Hell, EVERYTHING has already been said here. I'm in much the same boat as you - no formal education, all I know is self taught, over long hours of reading, coding, debugging, testing, screaming, and coding again and again until I understood very clearly what it was I wanted to do, how to do it, why it fucked up, and how to fix it. To some employers, hard experience is nearly as valuable (sometimes more) as any degree. As for OOP - I cut my teeth on [Codeigniter](http://www.codeigniter.com), and am now working to learn other frameworks as well. I spent a lot of time looking at different frameworks, and ended up choosing Codeigniter because it was less confusing than other frameworks (it's not as robust with features either, but many of those you may not even need for some projects) I wrote four applications while doing tech support at a job, all of them using CI. When 2.0 came out, I upgraded all of the apps to use the new framework, partly to keep them up to date, and partly as a good way to learn the nuances of the new version. If you lack a good IDE, I highly recommend giving [Apatana Studio](http://www.aptana.com/) a try. I absolutely love it. It's up to version 3 now, but I still like 2, personally. If you're into Javascript, give [Mootools](http://www.mootools.net) a shot. It's a great framework that helped me learn a LOT more about JS due to it's structure, and I also learned a lot about OOP via it as well. I recommend you forget about your second points (education, degree) and work on getting your OOP up to speed. It's the best thing you can do, and is a LOT cheaper and faster than the other two. Best of luck to you (and me!) as we both nervously step forward to do what we LOVE, damn the obstacles!
&gt; function limit_string($str, $len) { return substr($str, 0, strrpos(substr($str, 0, $len+1), ' ')); } 
The Morning ZOop
same here, this makes me want to go write more code lol
So, since you are dishing out links, obviously php.net is outstanding. For C++, [cplusplus.com](http://cplusplus.com) is the best. Is there something on that level for javascript?
[Certainly](https://developer.mozilla.org/en-US/learn/javascript).
Git? SublimeText? Haha, Macs have come to web development too and have brought there "THIS IS THE ONLY WAY" style of thinking along with them. 
Note for number 8: automatic documentation will clog up your code like hell. You can still easily be organized without it, and you can avoid writing documentation blocks longer than methods themselves. 
&gt; Get progress reports from your team as often as possible. However, it should not be more than once a day, IMO. 
Rewrite or not, don't get too caught up on the specifics of one particular framework. It's the MVC pattern itself that's important to know. Going into my current job, I knew the MVC pattern only from a little bit of experience using Zend. My current project uses a fairly lightweight custom MVC, but the skills were 99% transferable. Knowing how the MVC design pattern works, why it's generally good practice, and how to actually use it is incredibly helpful. You'll also learn a lot of OOP playing around with the MVC pattern, using more abstract OOP concepts, rather than $dog = new Dog();. Instead, you might work with DAOs and say $user = new UserDao(); and see how you can have an object oriented abstraction layer from your DB.
Wonderful! It seems that's their new "default" is to use this shortener as well. So I'll definitely have to include a method for this. *edit - I do actually have a function checking the url. I did not code this, I found it somewhere off of google. http://pastebin.com/HGh0ft78 
Definitely comes down to specific situations, but I'd say that in a lot of situations, managing your own environment will give you the freedom to say "Oh wow, using SimpleXML could save me a lot of time, maybe my client's hosting provider will install it for me." Instead of being the 3,402,308th developer to write a series of functions to parse the specific XML format they need to work with (or insert whatever use case might benefit from using a 3rd party extension). Again, in some situations it probably makes sense to write those same functions over again, but if all you've ever done is FTP files to a one-size-fits-most PHP host, you're probably missing out on some opportunities to be more efficient. 
Sorry if I wasn't clear. I meant that the devs could write documentation like JavaDoc and have the PHPDocumenter produce a webpage for the document. It doesn't clog anything up because it's a separate website that is populated by the code comments. I don't believe it should be a requirement for every function, but the more complex ones may need some guidance in the docs. /** * MyFunction creates magic. * @param $staffstyle - an integer representing the staff style. * @return An object of class Magic. */ function MyFunction($staffstyle){ //Do your magic. }
That's exactly what I'm talking about - but I'm not suggesting you use localhost, as in "your developement PC" but a server that you have total controll over - like in-house dedicated server, or a real dedicated server. &gt; or insert whatever use case might benefit from using a 3rd party extension I'm trying to get my client to instal SoapServer to make my life so much easier. Hope he'll het it right ;)
The indents may be a bit off, I pulled the snippet out of my template. And in regards to the error, I looked back over the code that I added to pastebin and realized what had happened. I did a copy and paste out of nano with no wordwrap. So, line 19 was longer than my screen and the selection didn't copy the end of that line. I'll update the pastebin right away, thanks for catching that :D
Stick with what you have for your repo. Git is good and people say it's easy. I've never had the luxury of working with it, but I'm sure people would say stay with it. As for releasing features, this requires knowledge of your system, which you don't need to answer here (these questions are rhetorical). Is it a single hosted system that many customers use? If so, could you create a database table to manage the "pluigins" that are available to each customer? If it's a system that your customers download and install on their servers, then you have to package the features (or plugins) with the code. One way to do this is to license the packages with a licensing algorithm whereby the customer would pay for a module and you would generate a license for the module. Each module would read the license and determine if it can execute. This process requires compiled code or some form of protected license checking mechanism so that the customer couldn't bypass it by modifying the code. I'm not entirely certain how you would do that. Alternatively, you could just give the customer the appropriate plugin files when they've paid for them, but these still would need a way to make sure they don't get used on another customer's system.
Depends on the relationships of the model, a join table would be a reason that a single model can't be located in one table. 
I was extremely excited to see the regex working, the concept is so simple and powerful. But it can make your eyes roll back into your head after a little bit. I still don't have a good handle on it. But having played with it for this a bit, I can see it is more of an art than a skill in a way. 
Just apply. There are plenty worse and plenty better out there. That said, I have to ask: why are you so arse backward after 7 years? No OOP, no frameworks (wordpress is not a framework, so that's no cms too), no ORM, not even a half decent IDE let alone something like netbeans???
First of all huge upvotes to ell0bo and BabylonDrifter. They touch on actual manager issues as opposed to programmer issues. Your job as a manager depends on the size of the team/company, but it is never to code or even make design decisions - hopefully you have people under you which are much better at that. What a good manager should be doing is manage people! * Make sure your programmers have absolutely everything they need to work at their best. * Facilitate communication between programmers, it's your job to keep track of who does what and if programmer A depends on code from programmer B then you need to make sure programmer A knows about delays from programmer B * Keep upper management satisfied, avoid extra pressure from management. If there are delays then tell upper management and justify the delay. (just give the reason why) high amounts of pressure help some people focus, but it causes rushing and bugs and bad decisions. This pressure should be on your shoulder, not your programmers. * Handle conflicts. This is probably the biggest if there's a conflict somewhere then you're the one with final decision. If a group of programmers cannot decide between two solutions then you have final word and it's your job to make sure you step in and don't let the stalement evolve into a problem. As someone with a programmer background my idea of managing a project was skewed towards the technical aspects, a book which helped me understand a lot of the actual managing and people issues was this, I highly recommend it: http://www.amazon.com/Making-Things-Happen-Mastering-Management/dp/0596517718
I have almost the same experience as you, 37 yo, no college, just hobby development experience and a fear of being under qualified trying to make a start in the industry. Your post really hit a cord with me. I'm currently on my second week as a junior programmer. Even during my first week I was having panic attacks looking at their code and wondering if I had the skills. They have been really cool and even reassuring me themselves they don't expect me to jump right into their system and start coding major features away, they know from my interview and resume what to expect from me. Now I'm getting used to the code and structure and and getting more confidant I can perform as we have been progressing faster than they (or I) had expected. I was pretty nervous but decided jump right in. I had a couple of phone interviews that never went anywhere and another in-person interview with other companies before this company came along. The previous didn't give me a hard time, they just moved on to other candidates quietly and politely. If you're an over thinker like myself, I can tell you, it's not bad at all.
godofthunder gave you an answer that seems to have focused on a generic ability to manage a development environment. I certainly agree that it's great to have all this knowledge, and I hinted at that when I said the OP should be able to edit apache.conf and php.ini - but this really isn't the primary reason to develop locally. The reason you develop locally is that when working in a team environment you need to have a good, standardized way of managing code conflicts with your coworkers, and you need to be able to track changes to the codebase, who made them, when they made them, and why they made them. You do this using a version control system; I suggested git or mercurial. If you make changes to a shared server, it becomes difficult or impossible to manage change in a reasonable, sane way. If you don't understand why this is a major problem, you haven't worked on a big project. Now, this is not to say that you shouldn't have a shared testing machine, and honestly, depending on the size of the project, also a final QA phase on a staging box. You mentioned in a later post that you want to send clients a link to an "in progress" project - great! - but you don't send them a link to stuff that is actually, as of this exact moment, being developed. You want until you finish small, logical chunks of code, commit them to your VCS, and then rebuild the project from the updated repository on your shared testing server and test for conflicts. Send your client a link to that. Now, all of this seems like a lot of work for a one man website, huh? Well, honestly, it isn't. Takes a little while to get used to, but in the end it organizes your development practices, encourages backups, and even helps you communicate with your "team" (ie, your future self - wondering why you are so stupid). Plus, you know, you can program when your network goes down or you are on an airplane or whatever. (this gets more complicated when you start using a lot of external APIs, but you learn to work around that) If the OP wants to greatly increase his value to quality development companies - he is going to need to be able to develop locally and should already be in that habit.
I have to say that I don't fully agree with 3. I develop almost always remotely, I open SSH connection to server and code with vim. However FTP'n files all the time is just stupid. And yeah, you should know at least php.ini and apache is also good to know.
Now now, let's not get ahead of ourselves here. All I'm trying to say is that's it not good to *only* develop on 127.0.0.1 - that way you're cutting yourself from the rest of the world - there is no way to show the work to your client or even your co-workers. My idea? Develop localy / on a shared machine (as in - you share the machine with other co-workers working on the same project, but each of you is using his own docroot) - when things work - push them to git/other version controlling system, see if it merges without conflict - pull to staging / production server.
Apply for jobs in coding houses (you'll get one, they'll be people working there for years that you'll be better than), working with other PHP developers is a great way to learn. If you're in the UK, we'll give you an interview.
I really don't think my original post implied that the completed code would never leave localhost, but if it was confusing, I apologize. I DO mean to imply that "in progress" (ie. broken) code really shouldn't ever leave your personal machine. Secondly, "your idea" is what I suggested and is the standard operating practice throughout the industry, so we 99% agree. The only part we differ on is using a shared machine with individual docroots to actually develop. I really don't see the point in this. The major downside is that if you aren't connected to the sever, you can't really develop effectively. Another downside is that if you all use the same MySQL instance, your test/development data can be changed without your knowledge. I mean, what does developing on a shared server with separate docroots buy you? It's the same thing - plus obvious downsides. You really don't need to be looking at a coworkers half finished broken code, and if you absolutely do you can just connect to their IP address directly or ask them to commit what you need. It also makes using debugging tools more of a PITA, and generally just adds complexity to something that need not be complex. Running a local server is easy, simple, and makes good organizational sense. Your code, your machine. Shared code, shared machine.
This is definitely a messy case, but something like what's listed below works. I should say, though, that this setup is complicated enough that I would recommend maybe using the `Zend_Form_Decorator_ViewScript` decorator instead of this mess, both for simplicity and for performance. $contactPreferenceOptions = array( 'home phone' =&gt; 'Home Phone', 'work phone' =&gt; 'Work Phone', 'mobile phone' =&gt; 'Mobile Phone', ); $this-&gt;addElements(array( array('radio', 'contactPreference', array( 'label' =&gt; 'Contact Preference', 'multiOptions' =&gt; $contactPreferenceOptions, 'separator' =&gt; '&lt;/li&gt;&lt;li&gt;', 'decorators' =&gt; array( 'items' =&gt; new Zend_Form_Decorator_ViewHelper(), 'listItem' =&gt; new Zend_Form_Decorator_HtmlTag(array( 'tag' =&gt; 'li' )), 'list' =&gt; new Zend_Form_Decorator_HtmlTag(array( 'tag' =&gt; 'ul', 'id' =&gt; 'contactPreference-element', )), 'labelEnd' =&gt; new Zend_Form_Decorator_HtmlTag(array( 'tag' =&gt; 'div', 'closeOnly' =&gt; true, 'placement' =&gt; Zend_Form_Decorator_HtmlTag::PREPEND, )), 'label' =&gt; new Zend_Form_Decorator_Label(array( 'disableFor' =&gt; true )), 'labelStart' =&gt; new Zend_Form_Decorator_HtmlTag(array( 'tag' =&gt; 'div', 'id' =&gt; 'contactPreference-label', 'openOnly' =&gt; true, 'placement' =&gt; Zend_Form_Decorator_HtmlTag::PREPEND, )), ), )), )); 
You should try developing locally for the reasons I expanded on in my replies to BTMPL. It's worth it in the long run. That said, VIM *is* great. Have you tried using the VIM plugin for Netbeans? Best of both worlds - worth giving a shot. Debugger integration is SO nice. I know plenty of awesome developers who are converts from pure VIM.
You should try developing locally for the reasons I expanded on in my replies to BTMPL. It's worth it in the long run. That said, VIM *is* great. Have you tried using the VIM plugin for Netbeans? Best of both worlds - worth giving a shot. Debugger integration is SO nice. I know plenty of awesome developers who are converts from pure VIM.
I'm assuming the setup is something like this. class Web_Class_Loader { /** * @param string $classname * @return Model */ static function getModel( $classname ) { // get model instance for class name // ... return $modelinstance; } } class Usuarios extends Model { public function doAction() { // do some custom stuff only Usuarios can do } } Using a generic getModel method, the IDE always assumes that a Model instance is returned, and doesn't provide access via code-hinting to any methods defined in the concrete subclasses of Model ( i.e. Usuarios-&gt;doAction() ).
This will be my last attempt at showing you why this whole conversation has gone on too long. &gt; 'Seeking a MySQL equivalent to 'numeric', using the CAST() documentation, yielded 'DECIMAL' as the only suitable type. Enlighten us.' &gt; 'It would not be a good idea to use a BCD type here, as it would incur a logarithmic slowdown in everything you use that column for. I would recommend not casting at all, like so &lt;insert example&gt;' &gt; 'Thank you kind sir for explaining! Was unaware of the slowdown the cast may have caused, the OP will benefit from this greatly.' + upvote. Good day.
Thanks for the write-up, this is the sort of post I was hoping for. Clear, concise albeit a bit snappy. Congratulations on your 5-year Redditness :)
I present for your consideration the word "like".
I picked them because they're both cross platform. Also "like".
Are you already a team manager of some other discipline? I'm not sure what you're asking. Do you need more info on team management in general, team management of software teams, team management of php teams in particular, or php programming in particular? What have you done up to now?
&gt;Using a generic getModel method, the IDE always assumes that a Model instance is returned, and doesn't provide access via code-hinting to any methods defined in the concrete subclasses of Model Why, of course it does. That's how it's supposed to work. I don't suppose you've ever worked with a strongly typed language, such as Java (and PHPDoc is borrowed from JavaDoc, FYI). When returning an object as a specific type, it does not matter if it extends that type with additional methods; It only knows the methods defined by the type you're returning the object as. Your IDE does not execute the code, and it does not know more than you tell it to. It does not operate by magic.
&gt; Thanks for the write-up, this is the sort of post I was hoping for. Given the way you behaved, if there hadn't been someone else asking for help, I would have declined to write this. &gt; This will be my last attempt at showing you why this whole conversation has gone on too long. You really need to learn to not bite the hand that feeds you. You're *still* trying to vote punish for someone asking you to explain the extremely bad advice you gave. Notably, this *is* *not* the help you asked me for, and you still haven't admitted that you have no idea what BCD is.
&gt; &gt; This will be my last attempt at showing you why this whole conversation has gone on too long. &gt; Thanks for the write-up, this is the sort of post I was hoping for. The cancer that is killing reddit.
The purpose of an enumeration is to provide a string label for an integer. That isn't what the PHP library does. The PHP enumeration library is written by someone who doesn't know what enumerations are, or are for. It's chock full of defects and should not be used. (This is the same guy who just told someone else to cast their logarithmic ranking to binary-coded decimal in SQL, then to round it afterwards, and downvoted me for asking if he even knew what the code he wrote did. You really should not trust his technical merit.)
What do you mean? The score, upvotes and downvotes are all stored as an INT number in the original submission. Votes are stored in a separate table, but they're not counted - they're used as a reference to make sure that nobody is trying to game the system.
&gt; Suggestions and constructive criticism more than welcome! Unfortunately, we've all seen what happens when you get suggestions and constructive criticism: you throw a tantrum that the person giving you help isn't helping you hard enough, and play downvote patrol. Even, of course, when you later pretend to be thankful that someone else got the polite form of the answer, you leave your downvotes in place, even knowing they were on posts filled politely with correct information criticizing the defects in your work. Therefore, when I tell you this library is full of much more serious defects - that it isn't just hilariously slow for no reason and occasionally wrong like your other work, but primarily wrong - I look forward to seeing how you react.
If you knew anything about the history of PHP, you'd know why these proposals have been getting shot down for more than ten years.
&gt; A set should probably have constant time lookups (EnumSet._contains()). At which point it is no longer an enumeration. &gt; A set that's backed by a hash map usually uses the hash map keys as the set values. All of your operations that call in_array() are going to be O(n) rather than O(1). Which is your first hint why this code is garbage. He could be using defined() and a simple array.
&gt; I'm not familiar with the low-level implementation of in_array(), but that does sounds like a terrific enhancement. Yes, let's take something that isn't an enumeration, and turn it into something that's even less an enumeration. That sounds like a terrific enhancement. I'd ask you if you knew what an enumeration was, but, well, we've all seen what happens when someone asks you if you're publically advocating the use of incorrect code that you wrote and do not understand.
&gt; It's a shame that you can't get a reliable object hash in PHP $what = array('why'=&gt;'NOT'); And why the hell would you need a hash for a string label for an integer, anyway? Are you trying to make lisp atoms, or something?
Thank you very much for such an in-depth reply. Math is definitely not my strongest point, so some of this stuff feels a bit overwhelming at first.
It never will be. Far better proposals have been being made for ten years; they're all universally shot down because the rest of us know what enumerations are, what they're for, and why they don't belong in a language like PHP.
&gt; This is very elegantly written, well thought out What? You of all people. One, enumerations are labels for integers. This is a wrapper around a container library. Every enumeration lookup would be a logarithm hit. Two, he did a piss poor job of it. These are o(n) hits where they could be logarithm hits. Three, this thing is hilariously defect ridden. Four, enumerations are for assigning labels to bit patterns in castings. PHP never deals with such things. It's an abomination for PHP to have enumerations. This is an atom system, not an enumeration system at all, and it's a really, really bad one. Five, this is different than the enumeration stuff already in the standard library, in bad ways. Six, this is different than the Java stuff it pretends to imitate, also in bad ways. Seven, botched comparisons. &gt; To be honest, I saw the post and thought "Oh, why didn't I think of doing this before?" Because it's a terrible idea? &gt; I'm guessing from the "error_reporting(-1);" at the top of all of your examples The correct interpretation is "jesus christ why can't this guy even get bit patterns right, that's hideous and undefined." Indeed, in some PHP versions that line itself throws. &gt; and after looking at both the examples and library, I really can't imagine anything I could have done better. Think harder. &gt; I'll definitely be including this in my 'home-grown' framework. Please don't. The code is wrong, the idea is bad, and there's a better implementation already in the standard library.
&gt; Although it was put in a brusque and unfriendly way No, it wasn't. Please stop using Reddit as your personal whining pulpit: you're quite a bit less friendly in personal criticism of LongBilly than he is of pointing out the thing that turns him away from one license. &gt; IANAL but I was under the impression it was not GPL compatible There's one version of the BSD license which is not GPL compatible because the GPL people specifically changed their license to create an incompatibility. The rest of us just lol'd and moved on with life. MIT license is safe. &gt; Would you consider an LGPL dual-license? What improvement would this create? That's ridiculous. You just want the letters "GPL" on the product. :( No wonder you thought Billy was "unfriendly" to make a license switch reccomendation.
&gt; [MPL] is not GPL compatible Wrong again. You really should stop believing the internet. Tom Hull is full of crap. The GPL does not disallow bundling of source which is under a different license which itself cause no GPL violations. The correct interpretation is "The MPL doesn't force me to do anything the GPL requires, so distributing the MPL source as an MPL object within a GPL project is safe." Tom Hull would only be correct if every time you included someone else's software in a GPL project, you stripped away the original license and supplied your own. Whereas many GPL assholes do that, it is unethical and inappropriate, and not required. That Tom Hull has based his entire "they're incompatible" on "I can't take your work and relicense it" when no relicensure is required is hilarious, sad, and incorrect. Of course, there's a lot to be said for being GPL incompatible just out of spite.
Maybe you should look into his behavior more deeply. When I asked him if he understood the code he was recommending to other people, his response was to refuse to answer, and to downvote the question with an impatient "get to the point." Because he cannot thank someone for pointing out his mistake, or even admit his mistake, at this time he still doesn't know what he did wrong. That's pretty much the opposite of doing the community aspect right.
Agreed. Not to mention it's stupidly impractical: I wanted to use Dillo to implement a help system in my Nintendo DS game, but couldn't because it's LGPL, which means I would have to export it as a replacable binary, which Nintendo's license doesn't allow. Dillo would have gotten an immense amount of free work out of me.
&gt; and enums to me are something out of a SQL database. MySQL has an enum extension. That's not part of SQL at all. Enums come from the BCPL family, and exist for the sole purpose of assigning labels to bit patterns, for dealing with hardware. They shouldn't be in SQL, and what this guy made in PHP isn't even remotely similar to an enumeration (it's kind of close to a broken lisp atom system, but it's missing comparability, ordering, its uniqueness mechanism is broken, and it's hilariously incompetantly implemented.) &gt; tell me why your library is useful to me as brain-dead PHP guy. It isn't.
&gt; I had made an assumption that they were well-known. Much like BCD, you don't correctly understand what these are.
Hilariously, what he made isn't an enumeration system at all. Maybe you should read more closely.
Why are you trying to re-implement the language's fundamental datatype?
I have not tried Netbeans at all. I don't generally like IDE's, but integrated debugging sounds pretty awesome. Atm I just drop random echo()'s when I need to debug something.
Because he's a Java programmer, so he doesn't know what enums are. He's trying to implement an atom system which is also a typed data system. It's Poor Phillip's I Don't Quite Know What ML Is. &gt; Enumerations can be used to define a fixed set of constants. &gt; However, there are a set of disadvantages to this approach: &gt; * No Type-Safety - One could pass in '4' which is not a valid opcode &gt; * No Namespace - Collisions may occur when using global constants &gt; * Uninformative - Debugging $opcode will result in a 'useless' number &gt; * No Behaviour - No behaviour can be attached to the constant &gt; * No Data - No data can be attached to the constant This is, of course, all garbage. But it's his reasoning. That he attempts to implement sets in PHP without needing anything other than membership is a bold, underlined explanation of the quality of his work.
No problem. Here's the TL;DR version: Reddit tried, and failed, to implement a confidence interval. Don't copy their code; it's broken. Just go implement a confidence interval directly. Wilson score confidence interval is one good choice.
Dude, that's SQL's job. Don't do SQL's job for it. SQL will perform much faster with an index over the vote column than with a whole new column full of data. Why? Because it looks up a couple offsets and adds them, instead of paying for loading that other column from disk every single time it wants to grab a comment. There is a reason that every SQL manual gets on its knees and begs you to keep rows as narrow as possible: it's because reading rows from disk is your biggest, most common cost, and it's in IO, your tightest bottleneck. The reason I thought you were pulling it into PHP was that $score = upvotes - downvotes looks like PHP. If you were doing that in MySQL, it'd be set @score = (select upvotes - downvotes from tablename); Look, instead of trying to be tricky like this, try doing it the straightforward single table way too, and benchmark it. You'll find that most of the "performance improvements" that you learned on Reddit are actually terrible, terrible mistakes.
And yet you're still off downvoting other posts for saying you're wrong, and you're cutting and pasting my posts together to create posts you want me to write, apparently unaware that I wrote them. You're also complaining about the tone of messages I wrote to not-you, while your own messages to me are actually quite nasty. In the meantime, you seem to have completely missed that the reason you didn't get this answer when you asked is because of *your* tone; now you want to lecture me on my tone in helping someone who isn't you, because I wouldn't help you. The fact that you *still* haven't admitted that you don't know what the code you handed to someone else does means I *still* haven't been able to give you the help you actually need; I asked you that question for a reason, after all. The cancer that is killing proggit: novice programmers who think they're better than they are, who think they're entitled to give bad advice without criticism, and who downvote people who are helping them be less bad.
If you program all day, Netbeans + xdebug + jVi (or viex) will rock your world. Netbeans has integrated SFTP functionality so you can just work directly on the server with ease if you insist. I love watching people's faces when they see xdebug in action for the first time. It's like Christmas came early for them!
As long as you look in the right places you shouldn't have any issues. I was once in your boat, got a lower paying programming gig where I worked for 2 years getting experience. In my head I considered it a paid co-op rather than a career. It was the stepping stone to the next job.
As mentioned in the private message to you, I feel you have crossed a line here, and I would appreciate it if you did not hijack a thread with unrelated ongoings in other threads. Also, I severely hope you are not downvoting yourself as to make the impression that I am. Also, constructive is there for a reason. 'And occasionally wrong like your other work', does not fit into that category. As we all appreciate people helping each other, you are not. If you do feel you can contribute in a non-brusque and helpful way, you hereby invited. If not, I would ask you kindly to stop this ad-hominem behaviour you're displaying.
As for my last post on this ordeal, I have downvoted exactly **one** post of yours, for reasons specified in the reddiquette. Therefore, I am not 'downvoting other posts'.
&gt; As mentioned in the private message to you, I feel you have crossed a line here By telling you the code you got out of a search engine and didn't even know what did was wrong? By telling you your enumeration library, which you held up for the explicit purpose of community feedback, was broken? &gt; and I would appreciate it if you did not hijack a thread Hi, and welcome to Reddit, new guy. That isn't how things work here. &gt; Also, constructive is there for a reason. Everything I've said has been constructive. That's why you can't quote contrary examples. &gt; As we all appreciate people helping each other, you are not. Funny thing: the people you're "standing up for" disagree with you. You sure do like to speak for other people to make your own opinions seem more important. That's the third time you've done that - incorrectly all three times - in the last 24 hours. &gt; If you do feel you can contribute in a non-brusque and helpful way, you hereby invited. Reddit doesn't work on invitations. If you put up code which is both mechanically and conceptually broken, and tell other people to use it, you're going to get called on it. Stop using words you don't understand. "Brusque" is not a fancy way to say rude. Brusque is a compliment. &gt; If not, I would ask you kindly to stop this ad-hominem behaviour Ad hominem means discarding someone's argument based on a character evaluation. You are doing that by saying this. I have not done that yet. Either way, the answer is no. If you put garbage code up in public, you're going to get called on it, whether you like it or not.
I am not aware of what LISP Atoms are, however, using a string label for the enumeration instance would get rid of the need of using in_array() as mentioned by oorza in his/her original post.
The purpose of this library is very clearly outlined in its readme, as well as in the OP: an implementation similar to the one in Java. Whether you favor or disagree with Java enumerations is irrelevant. As for the chock full of defects, feel free to contribute. Will be avoiding your ad-hominem in parenthesis.
1. As mentioned, this is similar to the Java implementation, therefore your first statement is language-specific. There are probably numerous areas in which speed could be improved. 2. Idem. 3. Feel free to contribute. 4. Which is exactly why I wrote the library, to have the convenience and feature set, as available in Java. 5. It is different, that's why it exists. No-brainer really. 6. Would love for you to point out where the (big) differences are. 7. I'll leave the unrelated down-the-belt remarks, however the implementation you mention in the standard library lacks in the feature department, again, as mentioned.
&gt; The purpose of this library is very clearly outlined in its readme Yes, I know. I quoted from it while replying to it. That you just told me in private mail that you'd rather keep the defect in your enumeration class than say "thank you" for the help says everything that needs to be said.
&gt; I am not aware of what LISP Atoms are Much like enums! &gt; however, using a string label for the enumeration instance would get rid of the need of using in_array() as mentioned by oorza in his/hes original post. There's a much simpler answer, but you're still playing the mass downvote game, so you can't have it or the bug fix to your critical defect.
The [Java article](http://download.oracle.com/javase/1,5.0/docs/guide/language/enums.html) on which it is based.
&gt; I have downvoted exactly one post of yours Liar. Nine comments of mine were all downvoted at the same time. Four of them were from a dead thread on a dead post from yesterday - all a conversation with you. At the same time, five other comments - also all in a post about your code, also all critical of you - were also simultaneously downvoted, even though everyone who was actually talked to directly who has responded has responded positively. And, of course, you admitted to downvoting more posts in private mail, where you also said you'd rather keep the critical defect in the software you're handing out to other people than say "thank you," and you're also doing that in a comment in this post. I think at this point it's pretty clear that you're actually here looking for adoration, not for ways to improve your software. You haven't even asked me what any of my criticisms mean yet. *You* *don't* *want* *to* *know* *what's* *wrong*. Novice redditors and novice programmers - they have the same poor behavioral traits. Every time it leads to someone trying to help them, getting whined at, and walking away. I feel bad for anyone who uses your software without independantly testing it first. I've already found a second and third critical error in your "library." That there's a much faster, simpler, safer, better defined four-line implementation of the same API is just hilarious. That these still aren't enumerations at all, and you don't even care to ask why? Well. Good luck with being a programmer.
Yes, that is the article which you don't correctly understand.
I am quite fond of Java's enumeration implementation, as it stands if provides quite a bunch of useful features. Whether that coincides with what you tag as enums, is irrelevant. The library clearly states it attempts to base itself on the Java implementation when possible. Feel free to point out where the disadvantages lack in explanation.
SublimeText runs great on Windows and Linux... Git was written by Linus Torvalds who *wrote the Linux kernel*...
For reasons mentioned in the readme, as well as in [this Java article](http://download.oracle.com/javase/1,5.0/docs/guide/language/enums.html)
I did in fact admit my mistake, when you ultimately pointed it out. And, through your explanation, I am now aware of what went wrong. As far as doing the community aspect right, may I kindly remind you, that what you're currently engaging in, is called harassment?
&gt; As mentioned, this is similar to the Java implementation, therefore your first statement is language-specific. No, it isn't. You just don't understand it. Stop downvoting comments which add to the discussion merely because you disagree with them: that's against the Reddit rules, which I've already pointed out to you. Hilariously, in another thread you're falsely claiming you only downvoted once. &gt; Feel free to contribute. Maybe you missed it: these aren't enumerations, these are atoms; PHP doesn't need enumerations or atoms. I contribute an enormous amount of high quality open source PHP. I will not be donating to a pile of code that I think is stupid. &gt; &gt; Four, enumerations are for assigning labels to bit patterns in castings. PHP never deals with such things. It's an abomination for PHP to have enumerations. This is an atom system, not an enumeration system at all, and it's a really, really bad one. &gt; Which is exactly why I wrote the library, to have the convenience and feature set, as available in Java. So, I say "Not what they're for, job doesn't exist, abomination, these are atoms, as atoms they are broken," and your response is "that's why I wrote it, was for the convenience and the feature set!" Jesus. It's like you aren't even reading. &gt; &gt; Five, this is different than the enumeration stuff already in the standard library, in bad ways. &gt; It is different, that's why it exists. You appear to have missed the "in bad ways" part. &gt; &gt; Six, this is different than the Java stuff it pretends to imitate, also in bad ways. &gt; Would love for you to point out where the (big) differences are. I already did. What is it with you asking me to do things I've already done? That's the third time you've done it. The last two times I even cut and pasted the already-done part, and you didn't even admit it. &gt; &gt; Seven, botched comparisons. &gt; I'll leave the unrelated down-the-belt remarks, however the implementation you mention in the standard library lacks in the feature department, again, as mentioned. Translation: "I don't know what botched comparison means, so I'm just going to talk about something different."
&gt; I am quite fond of Java's enumeration implementation, as it stands if provides quite a bunch of useful features. You don't even know what it's for. That's why when I asked you, you didn't answer. Now you want to tell me how you're fond of something you don't understand, which is why you implemented something very different, and don't care that it's also broken. &gt; Feel free to point out where the disadvantages lack in explanation. It's in one of the many comments you falsely downvoted.
He should learn some basic design patterns but I don't use an IDE and neither does anyone on my team. I also don't use ORMs... so, different strokes.
I will be continuing this conversation through private message, as this is diverting from the discussion.
So few people can describe all 4 of those things correctly in an interview... sad.
You will be continuing to ship defective code to unwitting users without telling them that you know there are defects in place. This speaks towards your character.
You are hereby invited to contribute to the library in regards to what the Java article mentions.
Yet again, feel free to point out how I fail to grasp the concept of Java enumerations and how this supposedly is implemented completely different. As mentioned many times, I downvoted one comment and am getting quite fed up with repeating myself. 
&gt; I did in fact admit my mistake, when you ultimately pointed it out. I love how you say this in the singular, about the last batch of wrong code, when I'm talking about the current, when there were three mistakes in the last batch of wrong code, when the one thing you admitted isn't one of the three, but is rather something you cut and pasted me saying and appear not to understand, and you still won't admit your mistakes - again plural - here in this code. Hell, you won't even say what you think the defects are when I ask you over and over again. Why? Because you don't know. You're talking about how you admitted mistakes, but you don't even know what they are; that means you can't go fix them, you're just saying "I admitted it" to get me to go away. You're not even going to fix anything. &gt; And, through your explanation, I am now aware of what went wrong. No, you aren't. You tried to explain it by cutting and pasting something I said once about a logarithmic slowdown; that isn't the problem, though. &gt; As far as doing the community aspect right, may I kindly remind you, that what you're currently engaging in, is called harassment? No, you may not. You're new here, you're incorrect, you're shopping around garbage code, and you're knowingly breaking the rules. Responding to people who aren't you isn't harassing you, and responding to your responses to me isn't harassing you. Putting text on reddit saying your code is broken isn't harassing you, and pointing out your mistakes when you're explicitly asking for your mistakes isn't harassing you. Get off the cross. You're not a victim. You're just a programmer who reacts hilariously poorly to discovering you've made an error.
All right, I have to try it then.
&gt; Yet again, feel free to point out how I fail to grasp the concept of Java enumerations Yet again, I did. &gt; As mentioned many times, I downvoted one comment and am getting quite fed up with repeating myself. 1) I don't believe you 2) Nobody's asking you to repeat yourself. Nobody's asking you to respond. I was talking to someone who isn't you. If you're getting fed up with repeating yourself, stop doing it.
I already declined. It's a stupid idea, for reasons I already explained. I have better things to do than to write your bad idea hobby for you. You still haven't asked where your defect is, in code you're giving away to others. That's appalling.
Did you even read what I wrote? If the getter method only always returns one type, then it works as you say, because you can define that type in the @return value. If, however, the method can return an instance of any class that extends a certain superclass (or implements a certain interface), we can't define all possible return types in the @return comment, so the IDE can't know to hint any methods defined in the subclasses. As you say, "it does not know more than you tell it to". And where did I say anything worked by magic? And please don't make condescending assumptions about my programming experience. I'm assuming you *do* know what polymorphism is.
Why not just create a GitHub repository to house these utilities? GitHub would be a great way to host &amp; distribute your code while also giving you some powerful collaboration tools. Unless I'm missing something, it seems redundant to built a site from scratch to do this when there are great tools like GitHub out there.
I have asked you numerous time for contributions. If you decline, there is not much I can do for the library or its users (if any). Case closed.
As you tag the idea as stupid, one would assume the chances of you explaining why '[I] don't even know what it's for' are getting quite slim? I have offered you sending proof, and am patiently awaiting your response, and as such will stop repeating myself.
I've heard so many mixed reviews on IDE's and the ability to use a debugger that I don't think it matters one way or the other.
I see a lot of posts here recommending various frameworks and specific tools, but none of that really matters. It's everything *behind* those tools and frameworks that's important; focusing on the specifics could lead you away from seeing what's really going on (can't see the forest from the trees). I can't stress a proper source control system enough. Not only is it a mess when refactoring code without source control, but it's just plain stressful. I can hack away at something as an experiment and know full well that my SCM has my back if things get hairy, and that's a great feeling when you experience it for the first time. Please, get a proper code editor. Notepad is for grocery lists, not code (disclaimer: I learned HTML in Notepad ~10 years ago). Even the minimal jump to Notepad++ would be a saving grace for you. Editors that are made for code help assist you in proper code formatting, track variables, syntax highlighting to avoid stupid mistakes, etc. Your coding style and code clarity will naturally improve, as silly as it may sound. Some people don't like full blown IDEs because they're too invasive, and that's fine, but Notepad just isn't a proper alternative. Some people will say OOP is overrated, but this is another fundamental building block I'd personally say is absolutely required. I would have a hard time hiring you if you didn't have at least a minimal understanding of classes/objects and concepts like inheritance and abstraction. These concepts shouldn't take longer than a week or two to understand, so there's really no excuse not to sit down and learn. OOP concepts are nearly 40 years old and form the foundation of most modern languages today (not to belittle modern procedural languages). There's certainly a reason for that. This leads into where others suggest using certain frameworks. Where you appear to stand, I really don't see this as a good time for you to dive into a framework just yet. I imagine you've got a pretty established process of developing sites procedurally, and a framework will throw a massive curve ball at all of that. Once you pick up OOP and figure out how to make it useful in your current processes, start looking into design paradigms (MVC, HMVC/PAC, MVP, Observable, etc). You really can't appreciate these paradigms until you're already familiar with OOP because you won't be able to easily see where a paradigm's principals help you. MVC is definitely the most popular, so at minimum, start there (I also personally like HMVC, which is very similar) and see how it works for you. Don't let someone else do your MVC for you though, write the controllers/models/views yourself and write the code to get them talking to each other; it's the best possible way to understand what's going on. At this point, you could probably look into an ORM like Doctrine to replace your Models with automagic-ness. Once all this makes sense, I'd say you'll be more than prepared to properly evaluate any frameworks out there. Frameworks rid you of the details so you can work faster, but if you don't know the details, then you don't understand what you and the framework are doing. **tl;dr:** as an employer, understanding the concepts is paramount over having particular experience with a specific source control system, a specific framework, or even a specific paradigm. Being able to prove understanding of what's at work behind those specificities and how they apply to what I'm doing in my company is what will get you the job, and really is what will make you a better developer.
Thank you for another ad-hominem :) Will start collecting them. As for it not being an enumeration, I'm quite sure this implementation gets quite close to the one found in Java. And again, if you do not agree with Java's enum implementation, then this thread will be painful, as it is what it's based upon.
As I'm not 'playing the mass downvote game' - as mentioned seve.. oh never mind - I cannot see how you would not be willing to contribute. Pity.
Surely I do not have to say 'thank you' before you contribute? If this is in the Reddiquette - as odd as it may be - I hereby pre-thank you.
Downvoting accusations aside, the Java specification clearly describes the concept as enumerations. We could call them Purplies, Thingamabobs or Fluppies, as long as they are pre-defined instances enabling type-safe usage we can agree on discussing the same thing. Whether PHP needs them is up to personal preference, which is also why nobody is forcing you to download this library. You may use it as you see fit, or you may run circles around it. And, again, you may choose not to contribute to it, if you find it stupid. That's the beauty of it. And I do read your posts, you seem to be in great pain with the Java implementation. Which is absolutely fine, but then this library is unfortunately not for you. As for the bad implementation on my part, the invitation is still there (with or without pre-thanks, how odd I might find that concept) to contribute. And you still have not pointed out how this implementation greatly differs from the Java's, but I am not expecting any miracles.
Hi awgy, Sorry i wan't very clear, it's not a website to give away the code (that's not to say it's closed source) it would be a set of online tool, user can use in the browser. Eg. The user goes to www.website.com/password and a form allows them to generate password. Or the GeoCode finder tool, would be a customised Google map to make it easy for users to search and get GeoCodes. I know a lot of this is already possible with diffrent apps and websites but I was thinking of making one website with lots of tool gether.
&gt; the Java specification clearly describes the concept as enumerations Yes, keep repeating how Java wrote something you don't understand correctly. That'll change that you don't understand it correctly. &gt; And you still have not pointed out how this implementation greatly differs from the Java's You keep saying that, but it's still not true. &gt; but I am not expecting any miracles. Oh, so just a few hours after I pointed out to you other defects which you pretend to be thankful for, after you said you didn't think they were real, you're back to thinking these new ones aren't real either?
Thanks for the write-up. I had used numerous articles to come to a conclusion, and made the wrong choice with the MPL in the end. Had not expected things to become complicated. Good to hear the MIT is considered safe.
&gt; Surely I do not have to say 'thank you' before you contribute? You do after you've behaved this badly, actually, yes.