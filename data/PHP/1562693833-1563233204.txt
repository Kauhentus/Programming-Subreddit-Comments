The good news....don't need to use any of it. Doesn't affect any of my old code...i'm happy. The update to 7 was nice from 5.6 but did cause a few headaches on some older projects. These minor updates can thankfully be ignored. I mean, do we really need that array stuff? It seems stupid to even do that with arrays because it's not as simple to read. In an example of 5 lines, sure, now put that into a block of 300 lines and things get printed out with you going "where the fuck did THAT come from?"...no thank you. The arrow functions...really? does anyone like that crap? I mean even in javascript, every time i see the damn things, i just hate em. It's not "prettier", it's not "better", it's harder to read than having a function with a name, a function that's reusable in other places. Arrow functions bah. The number thing actually makes numbes easier to read....but really that's what number format is for. You don't need to read numbers in code, you need to read them on display. You might type out an actual number once in a blue moon, but most of the time your data numbers are in variables, so you don't need to see them in code. Typed properties i guess that's ok? Meh, just feels like more unnecessary stuff.
For that last part an updated version - PSR-12 - is being discussed at this moment. It will extend PSR-2 and add guidelines for new language features. When PSR-12 is finalized PSR-2 will most likely be deprecated. Exactly the same way PSR-2 succeeded PSR-1.
You can even use PSR-12 as of now (I do on most of my projects, and at work). Just use latest PHP_Codesniffer for example, it will simply support PSR-12 code style.
PHP 7.4 (js edition)
Solid freaking answer though. Def worth the upvotes.
Well, yes, technicaly, its logging, but you are "selling" it as debugging tool, so you know, its just semantics... Sure give xdebug a try, you won't regret, it often gets you to the problem much faster then you would be able otherwise And the time saved by not having to write var_dump (or relog in your case) on many places and then removing it, invaluable....
Thi biggest sideeffect is it allows to mess up in yet more ways :)
I hope you take this the right way. Anyone getting started on PHP should not be rewriting any application, let alone a large one. at. all. &amp;#x200B; You will make a mess of it, create more problems than already are.
I hope you take this the right way. Anyone getting started on PHP should not be rewriting any application, let alone a large one. at. all. You will make a mess of it, create more problems than already are.
I am just trying to do a research on that !! I will definitely keep this in my mind !! Thanks
The array unpacking is probably a slight boost to performance, as it allows to do an equivalent of array_merge (more flexible too) that's a language construct instead of a function. Arrow functions (and anonymous functions for the matter) definitely have their uses. I'm not a fan of the locally global scope because often I'll use callbacks *for* the limited scope. But that probably also means a slight performance improvement if it's easier on the engine to stay in the current scope. And really they're actually easy to read if you have practiced/read other languages. Typed properties are way overdue. I can't stand having to PHPdoc everything to work with PHP's limitations. All in all, great stuff that's more than welcome. ^That ^formatted ^numbers ^crap ^can ^rot ^in ^hell ^though.
That could be a feature in the IDE though.
As someone who maintains Angular front ends with PHP back ends, might I ask why?
If you need to type out a long number, it's useful to have the separators so you know you're correctly putting in the base 10 number you thought you were. We all know what can happen if you add an extra zero, or leave a zero out... It can greatly help with readability. This is a pretty good QoL release.
And it's the thing I'm looking forward to the most. I work with Drupal, so, any performance gain is a win...
How? You don't want it to apply to every number, many numbers shouldn't be grouped at all and there's no consistent way to separate numbers you do want to group. For example it's common to represent monetary amounts as integers of the smallest denomination, in which case you can use it to separate out the decimals, rather than the thousands: `const SURCHARGE = 124_00` If you _could_ implement a simple way of implementing a similarly flexible system in an IDE that would work reliably for everyone on a team, why would you do that rather than supporting a simple feature with no overhead already found in the majority of mainstream languages?
PHP 7.4 (C# Edition) PHP 7.4 (Kotlin Edition) PHP 7.4 (Swift Edition) Most of these are features found in the majority of other mainstream languages, there's nothing in there remotely unique to JS.
Typed properties is the best thing, another step to remove useless php doc code Is there any util that can transform php doc types into php types? /** * @param $bar string */ function foo($bar) Into function foo(string $bar)
&gt;PSR-1 is Basic Coding Standard which only specifies basic requirements for PHP files. And PSR-2 actually extends it with more requirements and suggestions. I don't fully agree with this. &amp;#x200B; PSR-1 is Basic Coding Standard which only specifies basic requirements for PHP files. And PSR-2 actually extends it with more requirements and suggestions. So, PSR-1 is not deprecated by PSR-2. It will be same with PSR-12 which will also extend PSR-1. This mean that both PSR-1 and PSR-12 will be accepted standard, just PSR-12 will have more requirements. But PSR-12 will completely replace PSR-2 which will become deprecated. &amp;#x200B; For reference, here are the quotes from PSR-2 and PSR-12: * [PSR-2](https://www.php-fig.org/psr/psr-2/#1-overview): Code MUST follow a “coding style guide” PSR \[[PSR-1](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md)\]. * [PSR-12](https://github.com/php-fig/fig-standards/blob/master/proposed/extended-coding-style-guide.md#21-basic-coding-standard): Code MUST follow all rules outlined in [PSR-1](http://www.php-fig.org/psr/psr-1/).
Not anymore.
Most of those features came to other languages before JS.
You got me.
Elimination of IIF's with ?? is the best news I've read today. Also like that they included shorthand functions like ES JS.
Also handy for bitwise values that can get large when using large static flags.
That's not a typed property mate. That's just typehinting function arguments. A typed property is a property of a class with it's type preceding it.
I mostly like PSR-7 compatible frameworks (i.e. Slim) because I can write unit tests (in PHPUnit) that simulate the behavior of subsequent browser requests and verify the expected result **without** having to tear everything apart or use a separate testing suite for that purpose. This is most helpful in automatically verifying that specific routes are enforcing ACLs in applications with thousands are endpoints in a way that prevents regressions and requires no cognitive load on behalf of the developer.
I was the lead on PSR-1 and PSR-2; you may find my contemporary reporting on them useful: http://paul-m-jones.com/post/2012/06/04/php-fig-psr-1-and-2-accepted/ And if you have other questions I'd be happy to answer them here.
I've recently started a Patreon for my open source software. For example, [this easy-to-use cryptography library that wraps libsodium](https://dholecrypto.com/) in PHP and Node.js. You probably aren't using any of my projects today. That might change in a few years. :) I'm also working on a bunch of projects that will be generally helpful for PHP developers the whole world over. [AnthroKit](https://github.com/soatok/anthrokit) is my "Slim Framework" augmentation toolkit. I even wrote an [authentication package](https://github.com/soatok/anthrokit-auth) that supports Twitter Oauth, or username + password + mandatory TOTP two-factor authentication. My current projects include a [package manager for indie game devs, with Ed25519 signatures baked in](https://soatok.com/projects/canis). [Patreon link](https://www.patreon.com/soatok). I also do all of my open source development live on Twitch, if anyone's interested. ([Channel link](https://www.twitch.tv/soatok).)
You are right; PSR-1 is not deprecated.
I was the lead on PSR-1 and PSR-2; you may find my contemporary reporting on them useful: http://paul-m-jones.com/post/2012/06/04/php-fig-psr-1-and-2-accepted/ And if you have other questions/comments/etc on that topic I'd be happy to answer them here.
In your scenario, MyService is the only service that ever needs to do logging. So yes, a trait is not needed and no code is being duplicated. But if you have multiple services that need to do logging then no, you have duplicate code. And you are complicating your constructor by always requiring the logger to be injected. Makes inheritance somewhat harder and can easily lead to a large number of constructor arguments not directly related to the service itself. Consider: trait LoggerTrait { protected $logger; /** @required */ public injectLogger(Psr\LoggerInterface $logger) { $this-&gt;logger = $this-&gt;logger ?: $logger; } public function log($level, $message, $context) { // whatever } class Service1 { use LoggerTrait; } class Service2 { use LoggerTrait; } $service1 = new Service1()-&gt;injectLogger($logger); With this approach you can add logging capability to any class that needs it with just a use statement. And keep your constructor free for relevant services. I know some people will object to the injectLogger method but, with the @required attribute, the Symfony container will automatically inject behind the scenes. I think it is safe to say that most DI containers have similar functionality.
Is Docker an option?
&gt;&gt;&gt; All of the other features bring the language closer to parity with other languages, except this &gt;&gt; [These languages listed] have the feature &gt; Yes, but no-one uses them Talk about moving the goalposts.
Won't drupal also speed up when details it handles get moved to compiled extensions &amp; core. IMO most slow frameworks are taking on too much filling gaps in the runtimes
question about tools to automate the transition was nice though
arrow functions in JS automate binding
You don't know what you're looking at.
Any plans to support Firefox, as [Puppeteer is working on](https://github.com/GoogleChrome/puppeteer/tree/master/experimental/puppeteer-firefox)? Ideally you would have a solution that works for both browsers, because switching between Chrome and FF is useful in case one is faster than the other for a specific PDF (although I'm not sure if the difference would be significant).
&gt; That's not a typed property mate. i know
I rely heavily on this [cdt protocol client](https://github.com/jakubkulhan/chrome-devtools-protocol), so if it wont be too complicated to switch headless browsers I'll add the support.
Anything that can be completely probably should be. However, it is useful to patch core, so what do you do in those scenarios? Working in enterprise, this is a frequent need. I'm all for compiling what can be compiled though!
Bold of you to assume the business actually works.
Bold of you to assume we write documentation
*Assuming...*
If your team wishes reeeeally hard, a documentation will magically appear. &amp;#x200B; &amp;#x200B; At least thats what the team thinks: "We need some documentation" 2 years later "We need some documentation" &amp;#x200B; But what do you mean with how it manages? Tools? Maybe use something like *Confluence.* Motivating people to document without payment? . .Tell me plz
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php2019] [How does your team manage documentation around business logic? (domain concepts, how the business works, etc)](https://www.reddit.com/r/PHP2019/comments/cb88em/how_does_your_team_manage_documentation_around/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I think it's worthy to strive towards readable code as a living document as much as possible. Sometimes it can be nice to have a SMALL AND CONCISE document about something specific but mostly I find documentation doesn't play well with an often highly dynamic business process and tends to be outdated quickly if ever correct in the first place.
&gt; As a library developer, I like PSR-7 because it makes interop simple. In theory, yes but I am yet to find a simple implementation that fulfilling a single interface works. Since PSR is a recommendation then : * Does it work for your needing? * Yes, then use it. * No, then kick them out.
Technically they are way too different to even be viable a migration. * Now, let's say your database. Your database could stay the same (if it is compatible with js). So it is a problem less. * Second, Do your PHP system use a template system?. If yes then you could do the migration to angular of each template. Considering that Angular does not need to "POST" but AJAX (fetch/http). * Third, the server side code of your application must be rebuilt from scratch. The server-side code must be: * Static files (including the template). * REST web services. * You could replace PHP entirely (and it is advisable, sharing two technologies at the same time doubles the maintenance) so it could mean to rebuild the features of the server. * Reconsider it. Your end user could earn nothing from it but problems ("hey!, the system runs slow on my machine, the system does nothing in my pc")
That's one pro, still hate reading them. At least you said something, the rest just downvoted without any valid come backs :)
Yea, but if you actually ran some tests, you'd immediately know if it was right or wrong? I mean, don't people test their code? Like, -\*\*test, it breaks\*\* -"oops i have one too many zeros, let me remove one" -\*\*resave\*\* -\*\*retest\*\* -"sweet it works". Is this really something necessary? I do agree on the readability bit, but again, how often do you actually hardcode large numbers into your code? IRL.
PHP is not the problem but the third-party library under gpl v3.
Hm, i wonder how much of a boost to performance, mostly i don't like the readability issue it brings. Sure, hardcore devs can read through a wall of code easy, but most just can't, and this adds another bit to it. Still not a fan or arrow functions, but they're not going anywhere, i just gotta deal with them :) I"m really curious why typed properties are so necessary. I mean, we can validate for type right? and we probably should validate for it even if we're using typed properties, but if we already do, then the typed properties aren't needed? I mean, can you tell me what i'm missing there?
:-| It is not how PHP works. PHP allows using arrays for everything. Arrays are not OOP but they are dynamics so they are really flexible for most jobs (most jobs that languages such as Java and C# are unable to do) they fit perfectly with JSON (schema-less) and another kind of schema-less architectures. &amp;#x200B; Now, let's say we try to convert array and object into a JSON: (10k objects) &amp;#x200B; | **conversion** | time (sec) | |:-|:-| | arrays conversion | 0.0028018951416016 | | easyConvert() (convert object into a json)| 0.031358957290649 | | loopConvert() (another way to convert an object into a json)| 0.027074098587036 | &amp;#x200B; So it is not a "small" optimization. We are talking about a difference of performance of an order of magnitude. [https://dev.to/jorgecc/php-is-bad-for-object-oriented-programming-oop-282a](https://dev.to/jorgecc/php-is-bad-for-object-oriented-programming-oop-282a) ps: what is easyConvert and loopConvert() ? They are two hacky functions to fast convert an object into a JSON. Now, if we add setter/getter to the fray, then the performance is way worse.
&gt;mostly i don't like the readability issue it brings. Sure, hardcore devs can read through a wall of code easy, but most just can't, and this adds another bit to it. I see it as the opposite, instead of big lumps of code merging arrays or pulling individual elements out one at a time, you just have a single, visually distinctive operator (there's nothing else in PHP that looks like `...`) that sits in the code exactly where it's used. &gt;Still not a fan or arrow functions, but they're not going anywhere, i just gotta deal with them :) For me it goes back to your first argument, especially if you need to pull in variables from the outer scope you end up with a wall of code primarily comprised of syntax that's completely unnecessary. Arrow functions remove visual clutter that doesn't help you understand the code in favour of single short keyword that can be syntax highlighted. &gt;I mean, we can validate for type right? and we probably should validate for it even if we're using typed properties Why? If you're using strict types you will encounter a fatal error if the wrong type is set, there's no need to validate the type yourself. If you're not using strict types, whatever ou set will be coerced into the named type. The point is that you can rely on the contents of the property always being in the type you expect so you don't need to perform any type checks.
confluence
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php2019] [argon2-refiner: Find appropriate time\/memory costss for your environment and performance targets](https://www.reddit.com/r/PHP2019/comments/cbamvj/argon2refiner_find_appropriate_timememory_costss/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php2019] [PHP array implementation that consumes 10x less memory](https://www.reddit.com/r/PHP2019/comments/cbamv5/php_array_implementation_that_consumes_10x_less/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Interesting tech for some edge case. How about optional gzip to save more ram? Also should be compared with Spl data structure classes like FixedArray
Get the book The Joy of PHP by Alan Forbes on Amazon for 4.99 or so, you'll love it
Well you complain about complicated construction, then you claim to use di container to resolve it for you. Whats the point then? What if I dont use Symfony? How Will annotation help? Yes i Will object against separate injector method. The instances are not functional before you inject. Or they keep checking for null. My constructors usualy take at most 3 services including logger. I can separete concerns pretty well. Is 3 deps too much for you?
The gzip option is actually a good idea! And testing against FixedArray would be a simple modification to bench.php
Code should mostly document itself through friendly class names, method names, parameter names and formatting (yes, consistent style is important). However there are sometimes cases where the "why" of the logic needs a note. This should be used sparingly, so when you do run in to one you know that it really means something.
Who said anything about unpaid work? I was once given a ticket to implement swagger/openapi in our REST API. It took me a least a week working on nothing but that, and they were fine with that.
That's a good thing to strive for, but it doesn't cover all the things OP seems to want to know about. For instance "why did we implement bucket sort instead of using the built in quicksort?". It also doesn't help much with optimizations from other fields, e.g. function sumOneToN($n) { return $n * ($n + 1) / 2; } No amount of perfect self-documenting code is going to explain why that works. I suppose that's where your small and concise documents come in, but I think "documentation doesn't work well" isn't a good answer for OP on it's own.
I try to keep as much of that as possible in code comments, PHPDoc if possible. That gives it the best chance of staying up to date. For the higher-level stuff that doesn't have a logical place in the code, a wiki's the best bet.
Hey, it's worth documenting how the business doesn't work too.
Btw you also have duplicated the use statement :). You have exposed an unrelated method on the public api of all your services. You became coupled with a specific framework. Construct `(new Service1())-&gt;injectLogger($logger)` is yet more verbose then `new Service1($logger)`. You will probably not have many different loggers in your app, probably just one, so whats the problem with having logger injected with some other service. In fact does your services ever use all the LoggerInterface methods? Probably no, you use either the named ones, or just the generic one. In my design, those two are separate thing (well almost, I kept them together to keep the reference to current psr) and you can depend on one or the other. In fact I usualy use the ::log() method and not the other ::alert(), ::emergency() etc. So my services would actualy depend on the SimpleLoggerInterface directly, gives me option to configure the seriousness of different events that occur inside the service which logs those events. So actualy problem here is LoggerInterface does two things. SRP boy, SRP.
I can't imagine this implementation would be suitable for all cases. This implementation seems best for lots of scalar data. Storing objects (like a collection) with this implementation means they loose reference. How is utf8 support? I noticed the strlen call to check for length to set the index.
A+ for creativity. .. storing an array as a string lolol
Maybe for PHP 8.0
Don't even try it here.
Did you try [Judy](https://www.php.net/manual/en/book.judy.php)?
So reading the benchmark results, it has a smaller footprint at the expense of CPU, right? Just making sure I am reading that correctly.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php2019] [Which PHP framework is right for your application?](https://www.reddit.com/r/PHP2019/comments/cbdaze/which_php_framework_is_right_for_your_application/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Woo 10x less memory (actually only \~5x by my tests), but about \~32x times slower. Not sure if its worth it. \\ Also it throws a lot of \`Notice: Uninitialized string offset: 4607500 in C:\\work\\lessram\\bench.php on line 440\` errors.
But it's been at least two whole days since we had a thread about frameworks.
thanks! i'm bout to cop a php course on Udemy by traversy media john doe!
Paging u/Tomas_Votruba - can Rector do this?
Nice blogspam.
I think they downvoted for many reasons. I abstained from voting at all. It's your opinion, this is an open forum. Not upgrading syntax is something that isn't awful, but the level at which you picked (php5.6) is awful. It's EOL so it's actively harming anyone using it. You think distro maintainers will do as good as core runtime maintainers? I think not I think PHP7.0 is EOL now though [source](https://www.php.net/supported-versions.php), so you can shed 5.6, and know that any company still needing PHP5.6, or 7.0 are unworthy of your time. As for array unpacking, the point is to own less code and defer to the runtime. There may be costs at some point of this flowery syntax, but you have to prove it and provide alternatives, not just stay in the cave beating your chest. &gt; now put that into a block of 300 lines and things get printed out you make a good point for improving at being a programmer. There should be absolutely zero PHP or any other scripting runtime taking up 300 lines. If they do, they are programmed by idiots. De-compose the printing (presentation) from the logic and the control planes. You'll have more choices. How far to decompose could be a thing, but if you're regularly authoring 100+ line blocks, re-consider training, or being in the profession at all. Arrow functions in JS allow binding to context implicitly, so they are a double-banger. I'm unsure if this is true in PHP (does anyone know if they auto-bind?) Typed properties are a godsend, but the issue is then migration path. I expect it will be mostly greenfield. numeric literal separator reminds me of ruby, but will for-sure make things easier to read. The problem will be with the decimal. It's an Anglophile thing that period characters mean decimal. I've been lucky enough to work on multi-lingual systems where I first flagged a bug in decimals being used as a separator with comma's dictating the decimal. Thinking about it like a python tuple a comma makes more sense. Deeper null coalesce is also fantastic. At work where I'm doing a lot of Ruby right now we often have methods that use `||=`. It's a similar shorthand for retrieve or assign and I like not having to type a lot to get these behaviours, just as I like null coalescing Maybe these features are not for you, or maybe you're not giving them a chance. If so I don't know why, you'll get no prizes for being the last person in the cave
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; I can’t imagine this implementation would be suitable for all cases. I doubt the intention is to be a replacement for arrays entirely, just for specific cases where you need a lot of data in RAM
Not exactly the same, but I've upgraded a Symfony app to Symfony+VueJS and on the PHP side it was about writing a REST api. I had some jQuery scripts that I converted to VueJS and that's about it, the hard part was to understand how webpack works XD
&gt;If you use DAL/DAO/REPO/Service class, then you could salvage them and wrap inside a REST service. Can you suggest me any tutorial related to the same ? &gt; Reconsider it. Your end user could earn nothing from it but problems ("hey!, the system runs slow on my machine, the system does nothing in my pc") My task is to make a report, final call will be decided y someone else. Thanks for the valuable input !!
hmmm, I dont see a real use for this in live applications. As we are mostly needing response time for web app. But this could help in cron jobs, queues and some microservices which dont have a user waiting on the other side and which might be working with large amounts of data. &amp;#x200B; But as other comments have mentioned, your implimentation is more error prone and is missing checks native has and are required.
&gt;I had some jQuery scripts that I converted to VueJS I also have some scripts related to JQuery and Vanilla JS, main idea is the same , converting to Angular. Rest is how I make the action calls into REST API calls and how can I remove the view part of PHP one by one.
excuse me?
There is already a [good one](https://github.com/ziadoz/awesome-php). I would rather contribute to this than helping yet another Indian company with blogspam source.
Same note US courts have upheld state to state jurisdictional establishment if you’re say a MN company getting sued under a Texas state commerce law (especially in states with long arm statues) even if you don’t directly market there other than having a website. That said I doubt the US would uphold enforcement of EU laws directly. If a company has assets etc In the EU they can force you to play ball if to protect those, but I just don’t see how that would work without a staked interest in the EU.
This list is pretty much dead, their integration bot is broken, the author is absent. You can check the amount of open PRs and their merge stats. &amp;#x200B; See: [https://github.com/ziadoz/awesome-php/issues/981](https://github.com/ziadoz/awesome-php/issues/981)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php2019] [Care to help me in adding more PHP goodies to this list?](https://www.reddit.com/r/PHP2019/comments/cbe988/care_to_help_me_in_adding_more_php_goodies_to/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
For the REST API calls I have used axios. https://github.com/axios/axios As for the PHP, I didn't remove all of it. Since it was a Symfony project, I've let many twig templates, the thing is that with VueJS you add component tags to your html, like: &lt;component&gt;&lt;/component&gt;. I'm not sure how it works with Angular, I've followed a tutorial but did not integrate it with Symfony.
Which is the best, because I know I love nothing more than having something running it’s own cache system independently of the one I’ve configured.
After reading some of the replays by the author I would like to ask: &amp;#x200B; How much experience do you have with web dev? With PHP? With JS? With Angular? &amp;#x200B; What's the expected budget for the project? &amp;#x200B; What's the size of current project? (Files/Directories/ Lines of code excluding 3rd party libraries)
 How much experience do you have with web dev? 8 With PHP? 0 With JS? 8 With Angular? 3 What's the expected budget for the project? No idea What's the size of current project? (Files/Directories/ Lines of code excluding 3rd party libraries) Still calculating
A pity. Still, not the reason to waste your time on a half-assed list popped out of nowhere. This is sort of naive notion, "All right, guys, I created a list (a forum, a discord channel, a fecebook group). Now gather me a content for it." **Put some effort yourself first**, prove that you are eligible to be for such a list moderator, make it useful and only then ask for contributions. This is how things are done.
It’s more agreeing on standards. Failed connections etc? Throw an exception. Getting a valid response that’s coded 5xx? That should be handled as validation, since the cURL exchange itself executed properly. Sure you can make either work, but it’s about clean separation of roles when you’re building that route. A curl exception should relate to the curl process, and not try to impose its own arbitrary validation on the response.
&gt;add component tags to your html, like: &lt;component&gt;&lt;/component&gt;. Same kind of tags are also available in Angular also :)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php2019] [PHP Development Company in India](https://www.reddit.com/r/PHP2019/comments/cbehot/php_development_company_in_india/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Empty doesn’t behave like !isset at all... if the variable is initialized but set to 0, null, [], etc both isset and empty will return true.
Course mate.
Typo3 is missing in the CMS section and Wordpress is no CMS its a blog system.
Because doing what stream\_for does is a ton of boilerplate for something as simple as stuffing json into a response. Have a quick look at its code to see what I mean: [https://github.com/guzzle/psr7/blob/e1f4aea234d9faaff9b6a222202c7f7e5fc470e1/src/functions.php#L78](https://github.com/guzzle/psr7/blob/e1f4aea234d9faaff9b6a222202c7f7e5fc470e1/src/functions.php#L78)
There’s tons of situations when you’d want to check if a variable is initialized.... While you’re right !$var does do that, it’s a bad habit to get Into. The fact that It’s just abusing php’s loose type casting aside, it can lead to improper returns. Simple example say you have an integer input and someone inputs 0. !$var would return true, when if you’re validating a variable exists (ie isset) you want it to return false. Not to mention filling your logs with warnings.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php2019] [Tech9logy Creators is best PHP Development company in India offer quality and affordable php development services. Our PHP professionals are provides complete solution of Custom PHP Web Application Development Services.](https://www.reddit.com/r/PHP2019/comments/cbeq71/tech9logy_creators_is_best_php_development/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
It’s not really dangerous, and I distinctly use !empty and isset for different cases. That said as long as you understand what they both do, they both have a distinct niche that they fill, issue is that people use isset and !empty interchangeablly
spam
I have seen that code, and its exactly what I am saying, there is no need for stream_for function. If I have just generated a short string response I will do `new StringStream($thisIsStringBody)`, If I have large body in a file and an opened resource pointer to it I would do `new ResourceStream($thisIsResourcePointingToFileConainingMyBody)`, etc... no boilerplate code is needed since i know what I have and what to wrap it in to provide the StreamInterface.
Yes, I know it handles falsey values differently, that's not what I meant.
I don’t really get what you’re trying to achieve here, I read you’re readme to see if I was missing something, but I still don’t really see what you’d ever want converted from php to JS from and architecture standpoint. In a properly build application most stuff being rendered server needs to be rendered server-side regardless. You use php to build the api / manipulate data, and JavaScript to add async / present the raw data nicely. I cant think of a reason I’d have anything written in php that would be practical to do with JS or visa versa, unless the app was a mess to start with, which would require structural changes. Backend and front end shouldn’t really have a lot of overlap, and if you’re talking about just converting php to node or some such I don’t really see a practical use case.
Yes I acknowledged that wasn’t exactly what you were saying, but given that the !empty vs isset is a really common stupid opsie, I just felt the need to clarify becaus you said they behave the same as those waters don’t need any muddying.
TLDR "Everything is just depend upon the requirement of the application." Wow, so insightful, so glad you cleared that up.
Should always pass things along to a queue if they’re so resource intensive, or potentially thread locking, that they’re gunna be hanging user responses.... Not really sure how you’d ever come to the opposite conclusion other than it saves you 10 minutes of structuring. Sessions aren’t intended to be juggled like that for a reason. Same reason pthreads type stuff had to force disable people from using it on FPM despite all the warnings they gave saying it’s a bad idea before they did.
Sure, but these are either some library's implementation, or your own (or both). There will be stuff in them doing something similar to stream_for. My point is, whatever it is, it's outside of PSR-7's remit.
BPMN Documentation of Processes saved in confluence DMN for decisions
So twig is a "tempting engine"? Yes, indeed, very tempting.
TIL about Judy
But look at how much slower it is...
Uhhh.... lol
Why shouldn’t you use floats for money out of curiosity?
TBH I think the feed back he got was fine. I think the caveat added was fine. Guy wasn’t a dick, but if he can pick out that many issues in a casual review it’s probably not safe to implement in a serious project yet. If you can’t take someone who clearly put some real time into an honest and valid code review giving you valid feedback politely, doesn’t bode well for the future.
What are instance types?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
If you're going to do something like this, why not create a C module plugin to meet your goal and not have such horrible performance.
Well for some reason, I thought this was limited to scalar types, but replying to your Q prompted me to double check the RFC, and sure enough it's got class instance types already supported. Wish granted \o/
Why is that even a sub...
I want to start my web development company based on one of these two technologies First Stack: HTML - CSS - JavaScript (Node.js - React - React Native) with this stack I can do Front-End and Back End and Hybrid Mobile Apps Second Stack: HTML - CSS - JavaScript -PHP - MySQL (WordPress - WooCommerce) with this stack I will use only JavaScript for Front-End and PHP for Back End and I can use WordPress and WooCommerce for creating E-Commerce Websites. The question here, which one of these two stacks will be more (lucrative - ease of use - practical - fast delivering ) for the company. simply which stack I should go with it for lucrative business?
Sounds like you want to found two different companies.
Wordpress is perfect a small agency that is starting out. Wordpress also has powerful SEO features, so that your client can be indexed and found by their customers once the new sites are live.
Asking for free: * market research * sales strategy * human resources potential research * market positioning * etc &amp;#x200B; /r/php is not a place for any of this, in fact /r/php is not a place for any of the questions that would help you calculate "lucrativity".
\+ a copy paste of PR catchphrases from framework websites (facepalm)
I think you missread the question. "Dependency" is not PHP itself, it's 3rd party lib written in PHP and licences under GPL3
Neat, this is a lot better than the simple benchmark I made for the original rfc: https://gist.github.com/charlesportwoodii/ceaa87c9a9adb069b9f2eaddf56ab871. Are these values meant to be drop in though to password_hash though as-is, and that's in KiB? ``` Recommended Argon2id parameters: Memory cost: 79691776 Time cost: 3 Real time: 124ms ``` eg ``` php &gt; password_hash('pwd', PASSWORD_ARGON2ID, ['memory_cost' =&gt; 79691776, 'time_cost' =&gt; 3]); PHP Warning: password_hash(): Memory allocation error in php shell code on line 1 ``` With the values generated the underlying argon2.c lib password_hash uses throws `ARGON2_MEMORY_ALLOCATION_ERROR`, which forces PHP to throw an E_WARNING. 79691776 KiB is ~ 81 GB of memory, which doesn't seem right. Maybe I'm missing something.
I wonder if they compiled it with Zephir it might be more viable? Assuming it keeps the same memory consumption benefit while improving speed from being compiled C?
It reminds me way too much of PEAR.
I think this post might be interesting for people who think PHP arrays are not enough for their use cases: [https://medium.com/@rtheunissen/efficient-data-structures-for-php-7-9dda7af674cd](https://medium.com/@rtheunissen/efficient-data-structures-for-php-7-9dda7af674cd)
I don't understand why you have to ask this. You arent' even asking for pro's or con's. You're just ask us where you'll find the most money.
Isnt GPL v3 basically saying that you can sell it as long as licensing and open source parts are shipped along with the deployment of sold software?
The code trades off faster native storage for storing everything as a string. So while the memory footprint is lower, you now have to do a ton of string operations.
What sort of environment are you working in (large, small, agency based, what stack)? How old is the kid? What sort of experience are you meant to be imparting? &amp;#x200B; Unless the kid (assuming &lt;=16?) is gifted in terms of programming ability, and could be able to work on a portion of a real project, any dummy task is going to be less than useful for getting an idea of what the workplace is like - you're effectively giving them homework that gets done between 9-5 instead of after dinner or at the weekend. You would better serve their learning experience by having them shadow a variety of roles or tasks across the company, give them an overview of development, ops, design, etc. It's going to give them more of a feeling of inclusion and involvement than being given a throwaway task that nobody cares about, and also means you don't have to spend time coming up with and grading something that has no bearing on your day-to-day work.
Technically for frontend stuff, you should be caching, so the code shouldn't be executing on every single page load. Although i know many many many sites do this anyway.
That implies the devs know both PHP and C and longterm maintenance becomes more work. Easier to keep it all in one language, one code base?
JSON? but everyone loves that one :)
From the sound of things you're not familiar enough with either to be thinking about pioneering a software company specializing in them.
Imo, don't give them a dummy project, give them a small change in your codebase - there must be something in the backlog that's relatively simple? Pair with them, walk them through some of the code. Give them a feel for what working on a software team is like over giving them a tutorial and a desk.
1. Large e-commerce company 2. 15ish 3. He's already very interested in web development so I guess just to help boost his interests in it as a career and keep him motivated. That's not a bad idea, we have loads of devs doing different things that he could shadow and what not.
You seem to have fallen into this worldview that is sadly prevalent on the internet, where "stacks" are some choice-unto-themself to do battle with other stacks, like a selection of Magic the Gathering cards or something. Meanwhile in the real world, this is complete drivel, customers just want problems solving.
Usually you would trade memory for speed. Memory is cheap, time is expensive. Optimizing for memory, especially in the context of PHP, felt backwards to me. Was this motivated by a problem or more "for science"?
Now, that's chasing a dollar the hard way.
No, sorry, I don't agree with your example. First of all, the check for the value (!$var) should always be separate from the check for existence, which should always assign a default value anyway (either null or one appropriate for the scenario, like an empty string, zero, or an empty array). You should get into the habit of working with data which is in a consistent state, which means you don't have to worry about it being half missing or something like that. &amp;#x200B; Put into practice, this means never dealing with raw input values, but always making checks when working with sanitized data. You need to make assumptions on its value, not on its presence. Checking for both means your check is either way too early, or you're working with unsanitized data.
If you distribute your app as a .deb, can't you somehow list PHP as a dependency ?
If you have a local/development environment you can just drop him/her into, I'd say to have them start making simple changes to the front end like changing navigation or adding a right rail or something. Just to get the cause &amp; effect nature of small changes to the existing codebase.
Both options are entirely valid, and neither is “better” than the other. It depends on the project you are working on. If your client wants a mobile app, react native and node.js api is a good choice. If they want a web site or a web shop, WordPress and Woocommerse fit the bill. Just sticking to single technology limits what projects you can take or leads you to use wrong tool for the job.
Simple rule. If you are not gonna make a blog then dont use wordpress.
The results being sanitized or not has literally no bearing on that being a terrible habit. &amp;#x200B; "Not" should be used only as a Boolean switch. Jerry-rigging php's loose typing into making "not" also be a check for NULL, Not initialized, Empty Array etc is just a bad habit to get into, and can lead to some goofball results. &amp;#x200B; If your expression is if (!$var) ... it should literally be saying do this if the var is false. If you mean do this if the var is, false, null uninitialized etc, then you should say if (empty($var)) .. The whole point of empty is to check for value and existence at the same time, which is really useful when you're say, making an API that you aren't sure if someone will send a null, \[nothing\], or value. &amp;#x200B; I mean you said you "avoid isset and empty" but then next breath say "you should already check if a variable is initialized". How pray tell do you check that without isset or empty.
uhh what...
Good catch. Yeah, I'll need to change the output to be more helpful.
Your PHP shouldn't be executing on every page load if you're caching the pages you are rendering. You cache the HTML output so you reduce/eliminate most of the heavy lifting done by PHP and rebuild those cached files as needed only.
A meaningful contribution is always going to be better. Quiz him, see where he's proficient, and where he's not. If you don't have time for that, then give him some busy work. Debugging, maybe. Looking for some missing `;`'s. lol
None of it has any particular risk of hanging. Also the session is ended at the same time so there is no risk there. It's somewhat slow because we log remotely and it takes upwards of 10ms a query for 3 to 10 queries. That's time we don't want on the response. It does mean we run a larger FPM pool, but that's just RAM which we have to spare.
I guess, more clearly, storing it in memory as a string, no one does that.
Worth it? Isn't that the whole point of the memory / performance balance... It depends wholly on your situation whether this is worth it.
Honestly if I'm working with large data sets I prefer iterators and generators instead. They don't have the unbounded memory issue thay arrays do. You work with one item at a time and GC is free to clean up as it goes.
strlen is binary safe so it should work with any data, utf8 stores everything as a char.
Man if only had that optimism on how to start a company. I'm sitting here with 7.5 years of experience with web dev and not feeling confident enough to take on even small freelance-gigs in my spare time...
I've seen more than a few companies using WordPress for their "storefront" - page presenting their SaaS-product...
Find some poorly named variables and have him refactor them. Make sure to branch off obviously 😉
Probably the companies bought that from the cheapest freelancer they could find.
Not sure why you got downvoted. Seems like a legit issue to me.
What might be interesting for people seeing this are SPL Data structures: https://www.php.net/manual/en/spl.datastructures.php They are not built around PHP's mutant hashtables (which are not only hashtables, but also linked lists and have some indexing magic and so on) but more basic data structures therefore can in some scenarios be more efficient, while less flexible. With PHP 7 the benefit became smaller, but is still there. In the past there were also pure PHP implementations of those for reference, which have been removed for reasons I don't understand: https://github.com/php/php-src/commit/80c6ba26e3fe83174a0e7dce367d8a39aa093ae1
People have opinions, especially backenders, strong strong opinions about what a "real dev" should know. ;)
Yiiiiip, thats my take on it as well. Like if time, maintenance, the search for talent, budget and simplicity aren't issues why even use such a high level language as C to write your server side scripts, just use assembler! /s
Maintenance is certainly a legit issue. I would also consider using some weird class to manage an array is also a maintenance issue. If you want pure standard PHP, then use PHP's arrays.
If you have no internal work for them to do, then you could expose them to an API and then get them to make an interesting UI for fun/practice? I dunno, say a movie/tv show web app using TMDB [https://www.themoviedb.org/?language=en-US](https://www.themoviedb.org/?language=en-US) or a cryptocurrency price list [https://coincap.io/](https://coincap.io/)
The output as of `v0.2.1` now looks like this: $ vendor/bin/benchmark 125 Recommended Argon2id parameters: Memory cost (sodium): 79691776 Memory cost (password_hash): 77824 Time cost: 3 Real time: 124ms That should be way more helpful.
I'm testing on linux, maybe something in windows is slower (usually php code is slower on windows). And good catch on the error, I have notices disabled, will fix later.
Dammit. I maybe wouldn't have wasted all that time porting some software to HackLang if I had known about this :-/
Once JIT hits, this will give the internals guys a run for their money!!!
This is another great extension that would be nice to test: https://github.com/php-ds/ext-ds
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php2019] [TCPDF and OpenSansEmoji](https://www.reddit.com/r/PHP2019/comments/cblh6t/tcpdf_and_opensansemoji/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Most modern, dynamic applications are going to have a lot of dynamic stuff going on that will not cache well. Of course, if you are serving up static pages, cache away.
Might as well save it to disk and save all the ram.
You do know it's possible to cache and rebuild dynamic data? For ecommerce for example, you can easily cache the product tiles on pages, but rebuild them every few hours if there are pricing changes or content changes. How it's done will determine how well it works and how fast it can be. Sure, things like a cart and checkout shouldn't be cached, but there are ways to optimize them to where you're not executing a ton of code on every page load or every action. And you can make use of localstorage and cookies to leverage what's "stored" temporarily too.
Install Proxmox or esxi in an old computer/server, create a LAMP linux virtual server with Dokuwiki.
That could actually be slower because of disk I/O and PHP overhead on file functions, but who knows what can happen with a speedy SSD and kernel caching.
I have had this problem. Gave up trying to make the fonts work. I ended up replacing the emoji character points with b64 img tags using the twemoji (https://github.com/twitter/twemoji) library. Not perfect but it was good enough for what we were trying to do.
&gt; Am I the only one here to have up and down days as a developer Yes, this entirely unique experience is shared only you and Bob. But we don't talk about Bob.
Absolutely not. Even we experienced devs have ups and downs.
I felt the same way my first few years as a developer, but after I while I tried to look at it as a resource instead. I learned a lot by asking a lot of questions and making more experienced developers look at my code for brief moments to point out what I could do better, or just to confirm any questions I had.
nope. this happens to everyone. I've been doing this for 9 years and have lots of down days. it's a hard job that involves working with unknown tools and tech all the time. you're constantly faced with the problem of doing something you've never done before and don't yet know how to do. part of being a good developer is learning how to work through those doubts and frustrations. it's not easy but you can do it.
I bet your two highly experimented developers feel like monkeys compared to the devs they look up to. Embrace the feeling because it will never go away.
Because you might pick up a legacy project that you want to update. It's less of a PITA that two create two different development environments and possibly two different databases just to get the legacy project up and running before you start shifting it.
It's called impostor syndrome, and pretty much all developers feel it. I've been doing this stuff for over 15 years, and I'm still amazed at how much I don't know, or feel like I'm just hacking my way through and waiting to be exposed. https://en.wikipedia.org/wiki/Impostor_syndrome
Want to know the funny thing? The more experienced you get, the more you'll get that feeling. Impostor syndrome is a very real and prominent thing in the programming field. It gets worse the higher up you go and the more skills you acquire. You can be a senior engineer and a subject matter expert in half a dozen fields, and still end up hating on yourself because some guy flummoxed you with a question about something you've never encountered before and yet you still expect yourself to know the answer. I've been a senior dev for almost a decade. I still occasionally go back and re-write my code out of a sense of shame because I've learnt something new and now my old, still well written code, just seems below my new standards and I don't want someone else to look at it and think I'm a fraud.
Devs are like quarks. We have our ups and downs. When you get to the top you're expected to get to the bottom of things, things rarely work like a charm, and new things seem strange.
If you don't feel dumb, then you aren't learning. Whenever you feel like you've "got it down" as a developer, you might want to try something new.
In 2016 the small 5-person agency I worked for had a 17 year old who was on the autistic spectrum in on work experience once a week for six months. The first week he was there, I needed something done on a Django site via the admin interface, and he had some knowledge of Python so I had him write a script using Splinter to automate the browser, but it was very much a one off task. &amp;#x200B; At the time, I was one of three developers, but also doubled as the company systems administrator, so I did all the setup and maintenance on new servers. This was quite a big demand on my time so I'd begun looking at using Ansible to create playbooks for standard setups. We had several different stacks we worked with, namely: &amp;#x200B; * Laravel, with PostgreSQL, Redis, Nginx and PHP 7 * Django, with PostgreSQL, Nginx and Gunicorn * Wordpress, with MySQL, Apache and PHP 7 &amp;#x200B; We'd also started using Digital Ocean as our main VPS provider, so we wanted to have one playbook we could run to create and provision a new server for each stack. I talked to the work experience guy and he said he was mostly interested in server administration, so I agreed with my boss that we'd assign him an ongoing project to set up a series of Ansible playbooks to create new servers for each stack. &amp;#x200B; That kept him busy and engaged with the project for the rest of his time there.
I fixed the code snippets, now it's only `require rawr/t-regx` :) thanks for the idea
Um, once you reach the C-Level it basically disappears.
Like everyone else is saying, you're always going to have up and down days. Just today I found myself, the tech lead on a project, asking a junior dev some questions about a particular framework I have very little experience with. Just learn as much as you can from your colleagues with more experience, and enjoy the times where you can teach them something, hopefully they'll be open to learning from someone with "less" experience.
I've made some tests on my own on your code. With strings, it consumes 4 to 5 times less memory, not 10x. It is when storing arrays that you get the 10x benefit. Timings are very disappointing. We're talking a factor of 6 to 30 times slower than native PHP array management. You definitely have to optimize that, even if the purpose is just to load a huge bunch of data. However, I've checked the peak memory usage by dividing your benchmark in individuel tests and the gap is lower in this scenario (3 to 4x less memory with strings, 5 to 6x with arrays). I think it is the true metric to look at as it will require that amount of memory from your server when your code will run (not just a certain quantity once the job is done). My results: Peak usage: memory_get_peak_usage(false / true) String ====== - Static: 114 / 118 MB (2.54x less mem) - Dynamic: 73 / 76 MB (3.94x less mem) - Native: 299 / 300 MB Array ===== - Static: 224 / 227 MB (5x less mem) - Dynamic: 181 / 184 MB (6.16x less mem) - Native: 1132 / 1135 MB
I'd argue that you're more of a manager than a dev at that point.
The only differences between you and an experienced developer: - They've felt dumb more times than you have - They've made **many** more mistakes than you have - They've had more time to learn from those experiences So just keep at it :)
It's hardly unique to developers.
Absolutely not. You, and I, are in *very* good company in this regard. There are two things you can do to turn this into a positive thing. In order of importance, they are: 1. Learn as much as you can from those other two people. If you make a mistake or there is room for improvement, try to learn from that. If they do or say something but you don't know why, ask. 2. Realize that there are many people who know more about developing than you do, but there are many more who don't. Also [this tweet](https://twitter.com/b0rk/status/755020037979856896) by the delightful Julia Evans can be generally helpful, I think it is very insightful and I hope it will inspire you.
It's not... it does however carry significantly more prominence in our industry due to the rate of change.
I'll be honest with you both: I have no idea what C-level means.
&gt;You do know it's possible to cache and rebuild dynamic data? Sure, but there comes a point where rebuilding the cache every time something changes is no longer beneficial. That point arrives rather quickly when dealing with fast changing data. Of course you can cache the static parts of the page and then load the dynamic stuff via ajax, but then those static parts usually don't take much processing power anyway to serve up so it is much better to simply allow the client's browser cache to handle that stuff.
Fixed the notices and improved serialize/unserialize peformance, but can't do anything about Windows performance :(, also notice that when storing arrays it does takes 10x less ram, not trying to exaggerate here :)
Oh, i fully agree. There are things that you don't want to bother caching, but overally almost everything can be cached. Anything dynamic should probably use an endpoint to load in via ajax like you mentioned, though anything on the endpoint that doesn't need to be live 24/7 can probably also be partially cached. All in all it helps massively with performance if it's done right and you have the ability to quickly clear small section of the cache to rebuild things without causing a spike in cpu time needed to rebuild the cache.
Same lol
Hear hear. Also after a while, where "a while" is a very flexible time frame, you sort of end up in a situation where the people you look up to and ask difficult questions of, increasingly often don't have an answer ready. That's the start of a phase where you learn to just dive into things yourself, at the end of which people come to you for questions on things you've learned. At that point, you are the one who's felt dumb, made mistakes, and learned from them more often than some others and can share your wisdom with them.
Added SplFixedArray and gzdeflate test to php native arrays and SplFixedArray. Hint: SplFixedArray consumes more ram and is slower than native php array.
Ah yes I agree. In that case dockblocs are perfectly good to use imho.
C-level means high ranking executive. Think CTO (Cheif Technical Officer), CEO (Cheif Excitutive Office), etc., which is why the other poster would argue they are a manager.
Didn't say it was.
Every time you run into a problem or road block it's a learning opportunity. Make sure you take everyone of them.
With 10x, yes I was referring to arrays. Interesting results, I'm curious on what data you stored on the structures. Maybe memory_get_peak_usage isn't that reliable... And the only way to further optimize this would be to port the algorithm to C and test how fast are native C string functions without the PHP overhead and the realloc call (which would be needed to increase the char* containing the data). Then write a php extension wrapper over the C algorithms.
Ya no, thats not how websites function dude.
I am an intern software dev working with full stack. Net core stack. I feel stupid as hell every day. It'll get better.
I would say that both, sometime ago I was working on a project that needed to load lots of data and the php script went out of memory so I had to modify the php.ini file to increase memory. When learning about the zend engine (while developing a PHP extension) I saw how huge zval variables where and how much data they needed to represent each value, so I thought, "real ram is similar to an array of char*", so storing everything in a string is similar to dealing with ram and wanted to see how it performed... Maybe porting the logic directly to C would yield better performance, it is up to how fast C string functions and realloc are.
I upvote this definition
You're right. It won't hang cause you killed the session. I said it -should- have hung. &amp;#x200B; That same user could do this again, and again, and again... and again... and again... &amp;#x200B; Should have hung, but instead 1 user can create 50 processes that do.. whatever
if you think about it, it is not a string but an array of bytes... A string internally on PHP and C (of course) is represented as char* which is equivalent to char[] and char represents a single byte, even your computer ram works similarly, but it is much more efficient because it uses memory addresses to retrieve data which is faster.
Lol um, please elaborate. I’ve only been building sites for fifteen years. I think I know how they work, but I’d like to hear what you mean by that.
Added missing checks to prevent overflows reported when having E_NOTICE enabled, but... maybe some more checks are needed :)
My point is that if you're gonna sacrifice speed for RAM, you can just go all out. Next step after that is a database.
Holy shit this exactly! I've been doing this stuff for about 10 years now too and have barely scratched the surface! There's so much to know and experiment with! Chin up OP! You got this!
I love that every day I get to work on something I have never done before. But at same time depressing knowing the feeling of being an amateur hack, or that I have been duping people will never go away.
Anything I have written that is more than a couple days old is an embarrassment and full of "why would anyone do that?"
&gt;27 comments Ds\\Vector uses \~50% as much memory, and Ds\\Map using the same amount (but supports objects as keys). Not nearly 10x, but not slower either. Really depends on what you want to optimize for.
There is actually zero benefit in PHP 7+, until someone reworks the SPL data structures. I tried my best to explain that [here](https://medium.com/@rtheunissen/efficient-data-structures-for-php-7-9dda7af674cd) but will do more analysis when 2.0 is finished.
Every day you have, they have had too. Being them has an advantage of being able to cope at a high level with the challenges at the job, but being you is good too-- you don't have all the garbage in your head that they learned, used once, and became obsolete! I regularly find younger programmers to be much better at learning than I am and have a more open approach to problem solving because they haven't had the biases built in yet.
Why do you need to test your database? Doesnt Mysql code already have tests?
I know this is been thrown out a lot and i definitely don't want to sound like superior or anything but i have never felt that. You should know what you know and know what you don't know and communicate that. It's ok to say that you don't know something. At the same time you should also communicate that you will do anything that is possible to learn it as soon as possible. It is more appreciated if you are transparent and willing to work on it than lie or try to cover your lack of knowledge.
It's normal to feel dumb when you are new to something. Your mind tends to give that feeling when you get out of your comfort zone. I will deviate from anyone elses opinion here and say that I never have down days anymore. If i don't know something I will be transparent about it and make sure that I will let the people that are in charge know that I will learn it as soon as possible. This job needs constant learning which I like a lot. You should embrace it and become good at learning fast.
Nice! would be interesting to have some script that benchmarks Spl, Judy and Ds extensions, would be really informative.
This is random and you don't know me, but I've inherited some of your work at a place that starts with a V. I just had to drop this comment here cause I recognized your name hahaha
Never.
What I've found as I've gained more experience isn't necessarily that I know every answer to every question about code, but rather that I know how to ask the right question and let Google do the rest.
Thank's to every of you ! You did make my day lighter :) I'll try to get use to this feeling then !
Yes that's crazy how fast you would write code differently !
Well, there's not much to master, cause it's a pattern, not an application model. At the application level it's just, I mean basically... - M: your services/ORM/classes with business logic. The "naked logic" of your app. State and logic. - V: Uhmm templates. Someone might popup to say "no views are not templates". They are basically. - C: glue code between M, V and HTTP. Read input from HTTP, based on it makes calls to M and gathers data. Give some (or all) of that data to V to render. Tada.
15 years in and i still feel that way too. The thing with development is that it evolve and fast. Youll always have something new to learn My advice would be to stay confident in your work and dont be shy to keep trying to improve and learn new things.
Thanks. I do understand that but when the applications get more complicated I sometimes fail to wrap my head around them. I think I just need to work with it more.
The Model in MVC is not just one thing, it is all of the stuff that makes up your application/business logic. MVC is purely a UI pattern, you'll need other patterns inside the Model part to build maintainable and testable applications.
When I started with it, I put most logic in the controllers. I just assumed the Model part was what held data (e.g., the data from a database, sessions, etc.). I wouldn’t worry too much about what’s what, but try to put logic somewhere accessible if it could be used in multiple places.
Every year I feel like I know less, despite knowing more than I did the previous year.
You inherited code from me? From there? Weird. I was gone before I could contribute much. Still have a lot to learn as my code will show you lol!
P.S. love the team there but I was way too green to be working with them. They're an awesome group and my good friend is still there. His name starts with an S. Not sure if he's on this sub but he's definitely on Reddit.
Go with Design Patterns if you want to master something. visit phptherightway to learn more...
Haha you showed up in git blame here and there :D
Try building the same small site using a few of the most popular MVC frameworks: Laravel, Ruby on Rails If you don't want to get into Ruby, then also try Codeigniter 4 and CakePHP. (I loathe the latter, personally, and many have contempt towards Codeigniter, though the latest version 4 is actually getting close to Laravel in many ways) This approach will help show you what aspects are common to all MVC frameworks, what varies, their strengths and weaknesses.
I have those days after 20 years in the field! It doesn't even take being around very experienced developers - even when you find people on equal level, they will have different strengths, and you'll always have to solve new problems that will not have obvious answers, you will always make choices you will later wish you did differently. That kind of pressure is part of the field. At least we get to work cushy desk jobs! :-D
I don't think it needs a tutorial unless you want insight in some tried and tested patterns from experienced developers. I learnt Laravel MVC in 7 days but my pattern keeps evolving still after 6 years. There is just so much to it other than just MVC. I would even say sticking to just MVC makes code less maintainable. Code needs to be more fragmented into focused parts, automated and aligned to some conventional patterns. In my current project also on Laravel, has little logic in models and controllers. Models only contain ORM relations and all reactive logic is abstracted to queued events. Controllers mostly just validate request parameters, send them to service classes or generic resource classes for processing and finally return results in response. Overall I predominantly use separation of concerns pattern and enhance it with further fragmentation into events and queued jobs for higher throughput. I also align my code to a convention scheme which allows me to build logic which generates functionality on the fly for the most common tasks like CRUD operations and much more.
MVC is better suited for frontend / GUI development. It's far more profitable to master other patterns and abstractions. Please see [https://github.com/pmjones/adr](https://github.com/pmjones/adr) as a starting point and [https://martinfowler.com/eaaCatalog/](https://martinfowler.com/eaaCatalog/) for useful ways to express your needs in PHP.
Shit, I’ve been doing this since 82 and I still have lots to learn. Buck up. :)
You don’t think there’s lots of change on the Ops side? Ansible, Kubernetes, Perl, Python, Ruby, Puppet, Chef, ELK, Splunk, Greylog, Docker, Swarm, AWS, PCF, PKS, GKE, Red Hat 6, 7, 8, Ubuntu, SUSE, Agile, Sprints, SAFe, Scrums, Jira, Confluence, Wiki, Sharepoint, Ansible Tower, Satellite, Spacewalk, Terraform, Jenkins, Bamboo, git, Github, Gitlab, Artifactory, Technical Debt. About 30 of those 42 I fairly regularly deal with as an Infrastructure Engineer. Some of those I deal with on my homelab and work, some are home or work only, some like AWS I need to take some training on, on my own time. Change? We got change.
Heh, I’ve been a senior unix admin since around 2000 and ops engineer for the past 4 years going on 5. I’m **the** Subject Matter Expert on Kubernetes, and one of the other guys tracked down a problem I was hunting for. It’s humbling at times :)
Humorously, I have three weeks of vacation coming up and at least part of that is rummaging through my code fixing all the stuff to my current level of figuring things out. :)
The thing with MVC is that it's not supposed to become complicated, keeping a large flat MVC is quite the bad practice IMHO, but it's very popular and widespread with frameworks. It's NOT a good thing. It's much better to keep MVC in small, focused modules that interact at a higher level. But explaining this requires more focused questions. If you have, ask, please, I'll try to answer.
Try Tom Butler's [Immutable MVC: MVC In PHP 2019 Edition](https://r.je/immutable-mvc-in-php). Write up the one page mvc, then start breaking it apart into a sensible directory tree. Might help.
MVC in PHP does not exist. MVC is a client side pattern. The reason being in MVC, the view send events to the controller and is bound to a model. In PHP the view and the controller don't interact (e.g you cannot call a PHP function from a view once it's rendered). Moreover the model cannot send data to the view for this very same reason.
There's a lot of stuff out there claiming to be MVC... Honestly, it's just some buzzword and everyone has their own understanding of what it is and isn't... Generally you want your application to have a single-entry point so your code can decide what to do for various situations. Generally this would be the index.php file. This generally also gets into rewriting HTTP Requests to use the index.php file so you can have prettier looker URLs than constantly writing index.php every time or whatever other file you decide to use. From there you'd boot up your framework or library that will deal with routing logic to find the controller to use for the request and the method to call. Generally you want controllers to be thin, really thin, like an extension of the router itself. Then you'd have your services. Generally you want each aspect your entire application testable in various aspects, one of which is unit tests. When you want all aspects of your application testable, I can't emphasize loose coupling enough. If things are too tightly bound together, you'll struggle to find a way to test things in your application, you'll struggle to understand your application, and struggle to find ways to make it adopt to various environments. You can look at one piece of code and find yourself wondering what calls it, pull up some functions.php file, then find ourself looking at some god class or god function that handles pretty much all of the application's responsibility. Then when you try to rid yourself of one of the responsibilities it handles, the entire application goes with it because it's too tightly bound together. Instead you want loose coupling in your application. This means instead of doing things like extending a class and extending that class creating tight coupling between all these classes, you'd instead design classes with design patterns like decorators, adapters, and factories. When you know how you want to bundle these patterns together, you can use interfaces to enforce the relationship you desire between all the extra classes you wind up writing. There's also the persistence or storage layer. Many people refer to this as the model, or the entities. This is where you'd define your relationships for your database. Keep in mind there's various kinds of databases. You might also need to store things through an API and might run into persistence issues such that you'd need to get into aggregates... Many frameworks provide you with an ORM along with a bunch of framework-specific jargon to go with it regarding how they refer to stuff. I generally like to abstract over this with repositories and/or services. But ultimately, there's many ways to design the model.... It is the most flexible piece of the entire application, and it's up to you to decide how to design it when factoring in things like time constraints, budget, and best practices. However, if there was ONE good tutorial I'd recommend for all this stuff, I'd recommend reading up on hexagonal architecture. There's some really good material out there on the subject. You might also read into DDD (domain driven design) afterwards but keep an open mind when reading into it. It's more of a theory and open to a lot of interpretation regarding how to achieve it. Finally, a nice read is "clean code" that should give you some inspiration.
I've used your bench.php, but sliced it to run the tests individually and not sequencially (as memory\_get\_peak\_usage() gives only the maximum memory level for a single run). So I use the very same data as you do.
I'm going to have to frame some of these comments. I have turned down offers and opportunities to work on projects with others because I thought I wasn't good enough. Good to see that some of the best here also felt and still feel the "impostor syndrome." Lets me know its all in my head and aren't alone.
&gt; This repository has been archived by the owner. It is now read-only. Yeah, it's pretty abandoned! Personally, i create fixtures necessary for the app to be run in every way from the initial startup. That means having 1 valid user, 1 valid admin, 1 valid product, 1 valid user note, 1 valid product note, you get it. The goal is for 100% of your code to be testable without NEEDING to insert junk data. Now, I've gotten into serious debates w/ architects I deeply admire and respect (@Chekote!!) about whether or not the database should be FULLY reset before EACH test or even before the test suites. I say no, it should never ever be reset for tests. Tell me, have you ever reset your production database? No? How good are your database integration tests if you RELY on the fact that the database will be completely reset, maybe even PRISTINE, before each test is run? TO me, it sounds like you're testing a brand new application, not one with years nad years of data in it. How, also, will you be able to gauge, on a dev machine, how fast the database schema is, if it only has, say 5 records total in it? So for all my projects, i say that tests should not be destructive and can clean up themselves (e.g., create, update, read and then delete teh record, all part of the test), but don't necessarily need to worry about it. AFter about 6 months, your average dev db will have a few hundred thousand records, largely aligning wth actual production DB table sizes, too. Then instead of worrying about how the tests are taking long and longer (we need to cleanse the db!) isntead, fix the database ;_) Add indexes, change queries, etc. It's full of win. No room for dbunit in that world.
Pair program with them on a small reap issue. There has got to be something they can do.
Some people claim that mvc for the web doesn't exist. It does. It is, however, very uneven. M part accounts for like 90% of the code leaving for VC only ten. This is really all you need to understand about mvc. Basically an mvc framework is just an *interface* for your application. A web interface. There are other interfaces like CLI interface. When understood like that it takes no problem to implement it. Given that knowledge you will never make your controllers fat anymore. What you should take care about is layering your Model. Some time ago I wrote a short article on the matter, [MVC in simpler terms or the structure of a modern web-application](https://phpdelusions.net/articles/mvc)
I generally agree!
I'd second this,I read and read about MVC but seeing it in action in a framework helped me make more sense of it.
I think you need tests to make sure your queries come back correctly?
If you're writing unit tests you are testing a very small unit, with expected data.. Suppose you're writing a test to get the details from a product. If the product does not exist, you cannot test it.. but it won't break your application if the product does not exist. How I do this is every unit test has a 'create transaction' and 'rollback transaction' (in the beforetest and aftertest).
Which is still part of the 'Tech' industry, which is how I read SB's comment...
&gt;Has dbunit been abandoned? Yes. &gt;... because it is usually easier to implement a custom, project-specific solution for database fixture management than to use the generic solution provided by DbUnit. The effort to build such a custom solution is usually quite low, resulting in less than two hundred lines of code in a trait that is used by the database test case classes. * [https://github.com/sebastianbergmann/dbunit/issues/217](https://github.com/sebastianbergmann/dbunit/issues/217) &gt;What are you guys using now for database testing? I just use phpunit + phinx + a [DatabaseTestTrait](https://github.com/odan/psr7-skeleton/blob/master/tests/TestCase/DatabaseTestTrait.php).
I've been there man and still here but I love it. Although it's sometimes depressing but at the end of the day, I always check myself to look at it as a challenge to learn and get better everyday. Just be open and don't compare yourself to others, and you (we) will be fine. ;)
If I do DB integration tests, I am going with Doctrine + Alice ( [https://github.com/nelmio/alice](https://github.com/nelmio/alice) ) The advantage being that you have your complete DB structure through your doctrine entities and the tests will create and fill the db with fixtures using alice.
Not everyone who thinks they suck at their job has imposter syndrome. Some people just suck at the their job. But if you co-workers have more experience than you do it not like they would expect you to perform at their lever. You were probably hired to do the simple jobs they don't find interesting and to do them at a lower cost. Just keep at it.
Of course:) https://github.com/rectorphp/rector/blob/master/config/set/type-declaration/type-declaration.yaml
Hi going with doctrine + alice ( [https://github.com/nelmio/alice](https://github.com/nelmio/alice) ) the advantage being that you have your complete db structure through your doctrine entities and the tests will create and fill the db with fixtures using alice., I'm dad.
I thought so!
You should know that there are two "versions" of MVC. [MVC Model 1 and MVC Model 2](https://www.javatpoint.com/model-1-and-model-2-mvc-architecture). Only MVC 2 works for web applications. If you here people saying "MVC in PHP does not exist.", then they are just talking about MVC Model 1. The user LogiUpgrade has explained MVC (2) very well. * **Model:** The core application, business logic, data manipulation * **View:** Presentation layer, display of information * **Controller:** Mediates between View and Model As addition, here is a [diagram of MVC 2](https://user-images.githubusercontent.com/781074/59565895-13315500-9059-11e9-9815-34ce85ed498a.png).
I would say Controller rather meditates between http and Model, it makes its purpose more clear
I like the idea that you can basically hit two birds with one stone by never resetting your db, you are running your tests and you are doing some application profiling at the same time. But I would argue that this way of profiling is actually ineffective. The kind of performance issues that you'll run into by running the same test suite over and over again until your database is full, are very different from the kinds of issues you'll run in to in production. This is the exact same reason lots of load tests frameworks may say that an application is fast and responsive, but as soon as real users hit the application it all comes crashing down. Now the way I understand it there are roughly 3 types of testing 1. Unit testing where you try to test one method or class in isolation 2. Functional testing where you may want to test 1 use case in isolation (like an API call) 3. Acceptance testing where you just deploy your code to either acceptance or production and you run a test suit that checks if you can log in and create a blog post. I think that functional tests should hit the database, and those tests should run in isolation. The best way to accomplish this is by staring a transaction before every test and rolling it back when it's done. This way your use cases can easily be tested in isolation without your tests failing because of other tests causing weird side-effects. I think for acceptance tests you could make the argument that you're making. For these tests you, for all intents and purposes, want to pretend you're a user doing stuff on the actual application. These tests should probably not run in isolation and could be used to safeguard or profile some performance specifications if needed. Although it would probably still be best to run in isolation if you have an infrastructure that allows you to deploy disposable environment. TL;DR using functional tests to double as performance benchmarks is dumb.
If the M in your MVC is 90%, then why even have your view or controller? Save that 10% by making your application entirely model driven. (Usually, my angry "Get off my lawn, you youngsters!" rant is aimed at people who put the controller as their primary entity, so feel good that I'm disagreeing with you for a novel reason.)
To have a troll in this thread was only a matter of time
SQL is code too.
Google clean architecture php. There are a number of options, but the general principal is separating application code from business logic and separation of concerns. There are a bunch of good articles and books available. There are a set of principals SOLID specifically that work in all oop programming. Good luck, once you master it you'll never want to go back.
Troll? Nah. I don't mean to instigate or tear people down. If you'd accuse me of being a curmudgeon who sees young developers spending a decade chasing buzzwords and cargo-cult programming, so can be critical of people they see promoting those flimsy ideals? Then yep, guilty as charged. MVC isn't new. It's older than I am. (It's older than 99.9% of software developers, and that's significant in such a young profession.) I've seen it eb and flow a couple times; from GUI programming to web development. At its core, it's separation of concern. Don't mix your business logic with your database. Don't mix your database with your UI. Don't mix your UI with your business logic... Don't mix unrelated things! So yes, if most of your code is in your model, you are mixing things in a way that reduces maintainability. I'm not trolling here, I'm warning.
(And by the way, I read your article, thankyouverymuch... It was rather short on any sort of depth that I'd expect from anything that's actually informative rather than instructional... and since it's somewhat short of \_actionable\_ instructions... er... it seems somewhat short of any real \_content\_ besides one person's opinion that doesn't appear to be backed up by facts... Then again, you have a whole website, and I haven't browsed it yet, so maybe you just happened to link to a particularly bad article that you wrote, and the rest of the site is full of 30,000 word treatises on development standards, practices, and nuances that any software development topic truly deserves as their absolute minimums...)(And yes, I'll check tomorrow when I'm sober.)
[removed]
Could you explain what exactly is application/business logic?
1 dislike. &amp;#x200B; There's always a faggot man
Isn't mvc one?
Wordpress doesn't count
What deaign pattern would you recomend for rest apis?
What's with the homophobia?
100% the disliker is a .NET dev :v)
Wow, I didn't knew that there were actual (real) people who live in Greenland!
https://youtu.be/U-otAJrtY-w
Wow, I didn't knew that there were actual (real) people who live in Greenland!
Or even Python, Java or Node, who knows! The competition on lamp has grown too much.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Acceptance (Behat) tests.
You should not need the \`Autoloader\` at all. In \`bench.php\` you should include \`vendor/autoload.php\`
Frameworks usually come with their own integration, as the dbUnit issue itself even mentions: [https://github.com/sebastianbergmann/dbunit/issues/217](https://github.com/sebastianbergmann/dbunit/issues/217) &amp;#x200B; I work with Laravel and it provides DB integration out of the box (running migration, test isolation via transactions, DB factories).
Impostor syndrome is caused due lack of leadership / people management. Hey!, we never said this was easy or fun :)
Is mgtow the new incel hangout?
Everything that your application does that provides usefulness. If your application is a todo manager it might be: store todos, mark todos as complete, provide a list of incomplete todos.
I do about 15-20% management, 15-20% meetings with other departments / CEO, 20-50% mentoring / code reviews / pair programming, and 10-50% coding my own stuff (usually about 33%). I consider bad weeks the ones where I only code a few hours. Most weeks, I put in a good 15-20 of solid programming. I'm the CTO.
#1 in use web scripting language?
Fascinating to see how far an accidental project has come. I am unreasonably excited for indented heredoc.
lol dude, you can't do it with wordpress, because wordpress isn't built to cache that way. I guess you don't have an actual explanation for saying "that's not how websites function" so you just shut down. Can you elaborate on your point? I really want to know why you think you can't do the caching the way i described it.
Ah yes, Louis CK, that famous paragon of appropriate behaviour.
Suppose I have a computer system with multiple projects. Some use the computer's globally installed PHPUnit, many have their own PHPUnit coming in through composer. Now suppose I want to, across every project, run a command line function when a test suite starts, fails, and passes, regardless of 'which' PHPUnit is being used, and from where (ie could from command line, could be from PHPStorm, etc.). Is such a thing feasible? (the context here is that my company bought an old traffic light, with the intention of having the light turn red if tests fail, green if they pass, yellow while running)
&gt;MVC is better suited for frontend / GUI development. It's far more profitable to master other patterns and abstractions. Please see [https://github.com/pmjones/adr](https://github.com/pmjones/adr) as a starting point and [https://martinfowler.com/eaaCatalog/](https://martinfowler.com/eaaCatalog/) for useful ways to express your needs in PHP. This is the best advice here. I constantly see people saying MVC and its pretty much impossible to implement MVC in a request/response type of application, example the web. MVC was never designed for the web but for desktop UI components.
... What?
Not globally (at least I'm not aware of any solutions to achieve this). However you could create a small library with a custom listener and then reuse it in all your projects. See https://phpunit.readthedocs.io/en/8.2/extending-phpunit.html#implement-phpunit-framework-testlistener and https://phpunit.readthedocs.io/en/8.2/configuration.html#the-listeners-element.
php ist faster. This discussion ended with php7
Sound like your company is missing a tool called CI Server. Ever heard of travis/jenkis/circleci/gitlabci? it doesnt matter what you use they are pretty similar. Just google one of that. The idea is that you start the run centralized on your CI server where all the diffrent testsuits are configured.
Why did Rasmus say ColdFusion wasn't the way to solve the web problem? Form what I recall coldFusion was a BETTER PHP in the early days. IT had more Database bindings, easier to use tags, more functionality, the only real issue was that it was proprietary and cost money to license a CFM server.. Eventually free and open source PHP caught up..
loved the video, especially because he goes into the new stuff too. It's great to see how this language was mostly developed "by accident" and just kinda "happened" because nothing better came around for a long long time hah. Great story :) I didn't realize the new typed properties will affect performance. I guess it'll be case by case so we'll find out how much.
I... I know what a CI/CD is. We're not using these traffic lights as some sort of stand-in for a CI server. It's a fun novelty.
I just wanted to point out that such a service is helpful for that. At least for collecting all the different sources.
Yep, though I've heard that with 3.8, the python guys are coming up with a ton of speed optimizations.
Which is faster, Ferrari or Lamborghini cars? &amp;#x200B; Meaning, you've asked a subjective question, with zero context
Ferrari I'd say considering their reputation for winning car races!
The important question for executives is: Which one looks faster? Real-world performance be damned!
2008, when 5.2 was hot.
&gt; 3.8 does it break all code &lt; 3.8.\* ?
I usually can't sit through long videos like this, but this was pretty entertaining and interesting. "I always thought 6 months was how much PHP had left before it was replaced" :D
I did find that - I was hoping there was a way to accomplish this that wouldn't require installing a package on every project. Sadly it seems that won't be the case.
I think that was the missing part for the NodeJS guys. Nice Job!
Higher quality original version appears to be this one: [https://vimeo.com/channels/phpday/345936757](https://vimeo.com/channels/phpday/345936757)
I submit that you need to check that your application handles itself when the database disappears, that it handles itself when expected data types arrive, and when an unexpected data type is returned, and that it knows how to handle null values. Simply inserting something and making sure it returns is probably going to be part of an abstraction layer. Unless you're rolling your own and not separating it to its own package. Am I wrong in my thinking?
Check out [https://github.com/google/closure-templates](https://github.com/google/closure-templates)
well, ADR is a good place to start. If all you've ever known is MVC (and nothing wrong with that) then some gaps really need to be filled in. Be patient. One of the crappiest things about using MVC for server / client apps in PHP is that people argue ad infinitum about where they're going to bloat the codebase...slim models, slim controllers, fat models...blah blah blah. It's all bullshit and overburdening an ill suited pattern. In a few codebases I've had the displeasure of working with, people assumed there were only three places to put domain / business logic...a model, view, or controller. Applications get complicated fast and if you want to stay SOLID, testable, and sane, get yourself a copy of Domain Driven Design discussed here: [https://medium.com/the-coding-matrix/ddd-101-the-5-minute-tour-7a3037cf53b8](https://medium.com/the-coding-matrix/ddd-101-the-5-minute-tour-7a3037cf53b8) and checkout the previous resources of Architectural Patterns and read that ADR piece. Hell, while you're at it, pick up Martin Fowler's new edition of Refactoring. Refactoring books immediately start to put in your mind how wrong something can go before you try it. &amp;#x200B; Organizing your codebase, keeping it intelligible, and most of all easily changeable keeps you agile and as defect free as possible. That's a win for you and your users. It's a diverse and crazy world outside of MVC as there are so many more patterns and architectural techniques to employ, but don't let that turn you off. Complexity is always complexity, the better you organize it, the more you'll love going to work in the morning. I hope this helps!
&gt; It is said that PHP operator precedence is from left to right No it is not...
`&amp;&amp;` has a higher precedence than `||`. It's the same if you write: php &gt; echo true || (false &amp;&amp; false);
\&gt; only real issue was that it was proprietary and cost money to license a CFM server What other reason would you need?
Double eval, genius. We have transcended humanity.
Alright, thank you very much. I'll check all that out and try the ADR for the project i working on.
Oh, dear, I had so much fun with C++, Erlang, Scala, Haskell, Python and even Agda. But each day I like PHP more and more!
Woah. Now I can use all 19 modern frameworks AND still use ol’ reliable PHO
So just write one routine for every .travis.yml to make the light red whenever a test suite fails...
instead of running `phpunit`, run `/usr/bin/phpunit`. Then it will always use your global one. If you stick w/ PHPUnit 7.5 then you should be OK.
CF is slower in execution. It crashes under parallel load (even until today, you can replace the underlying MS JVM implementation and get better stability). The features in CF are more dependent on what deals MS had at the time and was motivated to work on, as opposed to say Apache and MySQL which provided the trinity of free tools for performance that was impressive for scripting languages (at the time).
Ferrari. Hands down. Acceleration: Ferrari Top speed: Ferrari &amp;#x200B; PHP is also the Ferrari.
I think you making this harder than it really is. With 'true OR' the processing will stop as soon as true is encountered. Does not matter what you have after the OR.
Then why does http://php.net/mb_strlen exist?
or as /u/ahundiak says its short-circuiting the OR (||) operator. It exits with a `true` as soon as it encounters the `||` and may not be reaching the `&amp;&amp;` at all. I remember learning something about short-circuiting AND/OR operators in my CS classes.
I'll just leave [this](https://www.reddit.com/r/SuicideWatch/wiki/hotlines) here, in case you need it later.
This hasn't been posted to this subreddit before, (although it was [mentioned three years ago](https://www.reddit.com/r/PHP/comments/433bq2/how_do_i_find_unnecessary_composer_dependencies/czg5rna/)) What do people think about: 1. The principle that this tool enforces, i.e. avoiding mentioning any third party symbols (i.e. classes, constants, functions etc) in PHP Code without adding the package that declares them to composer.json . Is that worth following? 2. Using this tool to enforce the principle. Is it worth the time it takes to run it in a pipeline?
you're just salty because your slutty girlfriend likes my dick better than yours
Nope. Maybe this will make it clear: https://3v4l.org/RncGM `&amp;&amp;` is evaluated first, then the `||` is evaluated with that result.
Yes and yes. Although I am more a fan of dumping it in your pre commit hook.
But you actually **can** run PHP in JavaScript... Using WebAssembly and [PHP in Browser](https://github.com/oraoto/pib)!
`die('nope!');`
1) Yes. If you remove dependency from your code and composer you may be surprised what else broke down because that dependency removed it's dependency which you used as well. 2) I presume it takes quite some time to finish and I would say it's not worth it to run it everytime. Technically it should be only necessary when you do composer update
If you want it to catch errors as soon as possible just running it when you do composer update (or when composer.lock changes) isn't enough. If you require package A, which in turn requires B, but you don't write any PHP code, ComposerRequireChecker will not find any problem. The next day if you write some code that uses B\SomeClass ComposerRequireChecker will fail. Only running when composer.lock has been updated could discourage people from running composer update, which would would be bad.
how would I go about running this in a pipeline? How can I fetch the latest release every time etc?
Though oddly just about every bit of advice I give here gets downvoted. I'm sure not you, obviously. And none of it will dent my karma - I just find it puzzling that whenever I offer some reasonable advice from the point of view of 20+ years in this field, published author and teacher of the subject, so many find reasons to downvote without stating what they disagree with, or at least discuss.
Exactly how you'd run it in a pipeline would depend on what tool(s) you use to build your CI/CD pipeline, but as the docs say, you first need to install it, either by downloading the *phar* file, using *phive*, or using `composer global`. Then you add the command to run it, e.g. `php composer-require-checker.phar check /path/to/your/project/composer.json` to the list of commands / steps for your CI tool. If it finds a problem it will return a non-zero status code to the CI tool, which should then tell you about the problem and block later steps. Not sure what you mean about fetching the latest release. If you do the installation as one of the steps on the pipeline that's possible, and for some tools that's the default way of doing things, but I don't think it's a big problem if it isn't updated for months.
yes
&gt; The next day if you write some code that uses B\SomeClass ComposerRequireChecker will fail. Checker will but your code won't. &gt; Only running when composer.lock has been updated run it before it gets updated and add dependencies - it's pretty straighforward fix. Time saved doing just that would easily overweight time spent waiting for the tool to scan entire codebase after every deploy in 99% needlessly.
True, your code will fail only the day after that if A stops using B and you then run composer update. At that point you could run CRC to discover the failure, but then running either unit tests or a static analysis tool would also tell you about the problem of B\SomeClass not existing, so I'm not sure CRC would be adding much. Or A doesn't make any relevant changes, but you run composer update anyway. At that point CRC will usefully fail, but I don't really see the link to running composer update. You might as well just run it once per day, or only on commits sha1s that start with '00'.
&gt; I don't really see the link to running composer update. Because your code will break only when you change your dependency tree. If it's left intact then no worries. So unless you're gonna delete stuff from ./vendor by hand the composer update is the only point of failure. If you run it once a day then you can theoretically have a 24 hours long window where your application ends in 500 error.
When your code is broken I think you can better detect that with either PHPUnit or a static analysis tool. The point of CRC is to tell you about potential breakages before they happen.
same. really fascinating talk. my biggest takeaway is that php is not inconsistent w function argument order after all!
&gt; The point of CRC is to tell you about potential breakages before they happen. That why I think it's only necessary to run it before composer update as otherwise the breakage cannot happen.
Cold fusion is not free, and it’s price tag is way too expensive, far more than it’s actual worth. That’s adobe’s typical problem, except that cold fusion is in no way comparable to Photoshop in terms of usefulness and irreplaceability.
Maybe this isn't the most important case. A more difficult case is where B changes it's API. A is updated to use the new version of B. Your code is written against the old version of the B API. To fix that you'd have to either update all your code to use the new API of B, or add the old version of B to your composer.json, which will should automatically make Composer switch your project back to the older version of A.
I mean long before, not a few seconds before.
That also happens only during composer update. Unless A depends on some dev-master dependencies. But even then I think composer checks out only a commit specified in composer.lock.
Doesn't matter. It won't be broken until you run update so why worry about it earlier?
I think it costed money even before Adobe bought it, right?
I'm not sure in practice whether it's worth worrying about it earlier, which is why I asked the questions at the top of this page. I don't have much experience of using CRC, or of getting into situations where I really felt it would have helped. But in principle I think there are N potentially good reasons for worrying about it earlier: - You (or a colleague) might be running composer update when you are working on a completely unrelated part of the code, or just doing a regular update for security. At that point you shouldn't need to be diverted into thinking about how best to use or replace the B dependency. - If you don't worry about this you could do lots of development work that couples your code tightly to the B api. Perhaps running CRC would prompt you to think more about what B is, where it comes from, and what its policy is around BC breaks, and then decide to do all that development work in a different way.
I don't think composer will allow you to require A if it depends on dev-master of B, unless you also directly require dev-master of B.
loved this video!
&gt; We are looking for a more local resource It might help to indicate where the position is located.
You don't have to be confused. Just use parentheses. It's all you need to know.
This is not correct. The short-circuiting behavior of || does not obviate operator precedence. &amp;&amp; has precedence over || - https://www.php.net/manual/en/language.operators.precedence.php
I don't understand the need for this. Am I missing something?
PHP 7 is faster.
* PHP 7.x is still faster but it depends. For example, using PHP with Laravel could increase productivity but decreases performance. But I'm talking about plain-php 7.x * Python 3.8 is fast but it is considerably slower than PHP 7.x. However, Python doesn't come in a single variety. * PyPy is insanely fast but it is not fully compatible. (and some people claim that it is not product-ready). &amp;#x200B; Anyways, usually, the bottleneck is the database, not the code.
In most languages, the M from MVC is a business-less class (also called anemic domain class). PHP is one rarity that calls M as a service class.
MVC name is a bit misleading. First, the pipeline doesn't start with "M" but with something that it is not even part of the MVC name: ROUTE. &amp;#x200B; Customer --&gt; Route -&gt; Controller (C) ---(Model M)---&gt; View(V)
I love the idea of this, and am very much in favor of its goal. I'll likely try to get it added to our CI pipeline :) General feedback: - IMO, suggesting a global install is really bad advice (and I feel this is a near-universal truth, not specific to your project). It runs fine when installed as a project dependency. - A progress-meter of some kind would be nice. I had assumed it simply locked up rather than takes a while to run. - Including core functions in the standard library simply because `php` itself isn't listed as a dependency seems... weird. I can see it for non-default extensions like `pcntl`, but warning me that I used `count` is pointless - Outside of extensions, it was completely unable to guess dependencies. Not a big deal, but slightly disappointing - It caught a false-positive in some dead code that static analysis missed. This is great, but it was quite difficult to track down the source of the error - some way to reveal where the missing dependency is present would help a lot (e.g. `composer-require-checker find-usage My\Missing\Class`) It did catch a handful of legitimate issues for me, which is great news (in terms of it working as intended, at least!). Thanks very much for posting this!
\&gt; It's called impostor syndrome, and **pretty much all developers** feel it. HAHA no. Working in an office, any office is always a rat-race. In this case, some developers are at the top (and they know it, especially rock star, prima donna and such), most developers are in the middle, and a few one are at the bottom of the race. Now, does everybody feels impostor?. No from the guys (and girls) at the top and not from the guys at the middle (when they know who is at the bottom). Every developer that has asked for a raise (or jumped to a better job) in the last 3 year, then he or she doesn't feel any impostor syndrome.
\&gt; still end up hating on yourself because some guy flummoxed you with a question about something you've never encountered before and yet you still expect yourself to know the answer. As a senior engineer, I earn solving business needs, not answering technical stuff that everybody (including me) can search on the net. If I don't know something then I hire somebody to help me with it. It is not a big deal. If I work recurrently in a problem, then I solve it and I learn it. Again, not a big deal. If I work in a problem that I will never use it again, then I solve it then I forget it. &amp;#x200B; We are senior not because we are a dictionary, we are senior because we deliver results. Something that a Jr is unable to do without our help.
Fringe benefit, but this also catches bad imports (incorrect or no used namespaces) and misspelled class instantiations for that one goober on your team who is a badass and uses vim and doesn't test or spell check their work... &amp;#x200B; It's part of every CI suite I setup on PHP projects now.
tsk tsk. Do you think Go Template is horrible?. Are you tried React?.
Some people should just buy a simple dead tree notebook they can use for their diary instead of dumping their every thought on the internet.
Have you considered trying to make this a Composer plugin so that it can happen automatically or somewhat automatically when someone just runs `composer install`?
East Coast of us. I’m in Connecticut
I've worked with CodeIgniter for years. I'm more than willing to take a look at the project and tell you if I'm interested.
How do we get connected
Nope.
The chad php vs the virgin go
Suitable or not good luck finding a decent library for doing anything practical. You'll most like have to work for any meaningful results.
Thanks
Can i run JS in PHP then run that PHP with this I want to write JS in PHP and to it in nodejs ? &amp;#x200B; yea sounds fun
Arguably it would be *less* dumb in 7.4 using FFI, but it’s still the wrong tool for the job. Maybe as a fun experiment, but absolutely not for anything that should even glance in the direction of a production environment.
I think, some php extension needed with c.
Sometimes the available libraries are more important than the language itself. And in this field Python win there.
About 2; you can change code without updating your dependencies. So unless you run `composer update` on every change I think running it in a pipeline is a good idea.
From a business perspective, its rather cost effective to outsource this project to freelancers or even agencies or IT firms (depending on your project) rather than insist on local resources. PHP framework business has got too fragmented lately, there are slim chances that a CI3 dev looking for work will be found in your exact locality. But if you post this as a requirement on Fiverr, Guru or Freelancer.com, chances are that you'll find a very skilled CI3 dev willing to work on this at a reasonable price.
I think, now days PHP is faster than python.
I've liked using this one: [php-ai/php-ml](https://php-ml.readthedocs.io/en/latest/).
Thank you
I can't claim to be an expert in all-things framework, but those advantages / disadvantages seem awfully sketchy to me.
It's MUCH faster than python. The speed of PHP between 5.6 and 7.2 jumped by HUGE amounts. While Python 3 got a bit slower. But speed isn't the only factor.
Yes, in this case it's short-circuiting. Still doesn't mean that operator precedence is RTL. https://3v4l.org/khEWp
You are wrong, in this case `||` short-circuits. https://3v4l.org/khEWp
In this case, you are wrong. `||` short-circuits, so the `&amp;&amp;` operands are not evaluated. https://3v4l.org/khEWp
Python loads webpages faster than PHP.
If I use Laravel, what kind of performance decrease are we talking about on average (in terms of X milliseconds per request)?
But that doesn't break your code
Also fascinating to see that nobody cared for his original idea at that time (C API as a backend) but today, we are all moving in that direction (Frameworks, MVC, micro-service architecture, etc.).
That's only because python compiles to `.pyc` but the same can be achieved using opcode cache or similar in PHP. Also, PHP 7.x literally circles around Python 3.x based on most anecdotes.
There's also [RubixML](https://github.com/RubixML/RubixML), however I haven't actually tried it.
A while ago I made a small composer plugin which does the "cleanup" part of unused composer packages. It simply scans your project source for packages that are not in use (by checking the provided symbols). If they are not, this tool will fail so it can easily be used within CI. [https://github.com/icanhazstring/composer-unused](https://github.com/icanhazstring/composer-unused) This is in no form a replacement to ComposerRequireChecker, as it only checks provided symbols from packages in your code. At the moment it can't predict that you might use symbols that are not defined in any package or even suggest the package you might want to require. (Which I might add in the future)
Not anymore. php-ml was the first very good lib with a good useable api to get you started in the topic. Since then there are a ton of new options and [https://keras.io/](https://keras.io/) did definitly won the race.
Every heard of [Haxe](https://haxe.org/)? I know, close but no cigar.
People either weren't around then or don't recall that back in the day that shit crashed, like, a lot. IIS 3 was unstable as hell, NT4 servers were unpleasant beasts. Microsoft was unguided in the ways of the web, and alternative (read open source et al) really was little more than binding to unstable, bad memory allocated c utils via common gateway. I'm not saying we're much further along the track, but timing was important, and even early stability of the ecosystem was great, at least for the price point. With CF you were literally paying for licenses to then have to pay for support tickets, and Macromedia was more known for creating cd startup screens than web servers.
Because strlen knows how to count bytes but in utf8 more than 1 byte could represent a single letter, that is why you need mb_* functions which can distinguish a character that needs 2 bytes to be represented. In this case there is no need to count amount of letters but the total amount of bytes which strlen handles properly.
Have you checked out [RubixML](https://github.com/RubixML/RubixML)?
That’s wrong. Anemic domain is not a recommendation in any framework or language. It’s a universally recognized anti-parent
Also, most of the compute intense steps of machine learning are offloaded by the common machine learning frameworks in python to C code. Python really only sits there as an interface and for some of the data preparation.
&gt;I think, now days PHP is faster than python. That's a broad and sweeping statement. Python, even more so in a lot of the AI libraries, offloads the processing to C which dominates when it comes to anything performance related. That aside its all about momentum, Python has the community, libraries, and tools. It's very high up on the list when considering a new AI project. I'm not saying you can't do it in PHP but it's all about making an informed decision about the right tool for the job and I couldn't look past Python in this use case.
Sorry... I am seeing, many issues with python. First thing is server issues. 1. We need at least vps to run python. 2. We need to configure mail server also to send a single email. No tool available like cpanel. 3. Python also interpretor language
That's true. But when it actually breaks you are already too late. If you tackle this early on the person introducing this is the one that needs to handle the situation instead of the person changing/updating the dependencies. That is why I would actually like it to be part of the CI pipeline. But that is a personal preference :)
If you hook it up the way you are proposing every time somebody runs a unit test that fails the light will become red. I don't really know how you write tests, but when I'm writing tests they tend to fail a lot. If that's what you want; your best bet is to create a plugin of some sorts for PHPUnit and make it a dependency for all projects. Or create a separate command to run unit tests and let that command report success or failure. Afaik there is no such thing as a global messaging/event system for php out-of-the-box. You'll have to build something for that.
Is there a way to _exclude_ certain (vendor) files purposefully?
Why do you argue that python is faster and then say that python just uses c libs. You can do that in PHP.
Why would you run your code in other than VPS or a cloud?
Is it possible in shared hosting?
Reality is just an endless chain of evals.
I mean that you shouldn't use shared hosting in the first place.
Sweet, now you can slap together a hello world example and only use 1500 npm packages.
Ya, I feel like the author googled and is making assumptions rather than experienced input. They mentioned no active record for Yii, when it does in fact have that.
Thought about replying inline but makes more sense on the top-level: &gt; I think, now days PHP is faster than python. You miss the point: it's not because Python is faster but it has bindings to the most popular libraries out there. If PHP would have the same established bindings, it could be in similar position. If you want to use ML seriously, like *seriously seriously* there is currently no production-ready alternative for PHP. I went down the road until a few realizations: - you need to know what you're doing / need to have a good grasp o the science bind - it's just Python, it's the bindings AND the ecosystem for serious work - you also want to take advantage of CUDA for training the models, otherwise it's not very economical - you are web developer and know what you are doing: hire a data scientist who knows _his_ stuff and does the heavy lifting Of course php-ml is nice and I also played around with it, but in all seriousness it's not the tool for something you can use in production. The other alternative is something like https://aws.amazon.com/sagemaker/ but still requires a good grasp of the topics. I'm not challenging your wisdom, I don't know you, just making it clear what I think about the topic given the question you asked.
k.
Some of the topics posted here are real candidates for r/bonehurtingjuice...
well, let's be honest here. It can be done. Hell, you can do it in assembly! It can be done, it will be faster, it will be quicker and will be usefull for servers. Problem: you have to write a lot, A LOT of code to do what it's in python for the ML stuff. You will have a hell of a ride to make, you will learn a lot. But will it be worth it? New idea! Make everything in assembly! Ok, jokes aside, it can be done, it's not practical, it's not recommended. programming languages are just tools, nothing more. PHP is mostly to develop web stuff, python is more universal but I think the best is for ML, AI, science stuff and sometimes API.
I think you just try to make too big of a project. Split it up. Make one that will handle the web part(API, mail etc.), one for the ML stuff that you need, one for the front end or what you need. &gt;We need at least vps to run python. I think this should be the minimum for today's day and age. Have one VPS or just some cloud service to host it, as you just need to ssh and then you are done, do whatever you want, don't wait for the customer support at the hosting service to answer, to make it, to make it bad, to wait again etc. &gt;Python also interpretor language Yes, Java it is. TS it is. A few languages aren't. So what? It's not a big problem this, it's not a huge draw back, it's not an issue. Most of the times it's slower than a lot of others but if you are not using like sort 2000 billion elements, you won't even notice. &gt;We need to configure mail server also to send a single email. No tool available like cpanel. Again, as in my argument for VPS, most of the times YOU WILL DO IT, cause it's easier, helpful, faster, own it and you don't rely on the customer support. For me, not relying on customer support is the one thing that is just DON'T GO INTO SHARED HOSTING!
I've never seen a post list out 3 reasons and have every single one of them be the most incorrect things I've ever seen. 1. Wrong 1.1: No, plenty of shared hosts offer Python hosting. 1.2: Having a VPS shouldn't be a concern. Why are you bothered by a few dollars difference? Hell, AWS offers a free damn VPS. 2. Wrong 2.1: What? Why? No... just no... 2.2: Why can't you just use an external mail service that has a free tier for up to 2,000 emails like Mailgun? 2.3: Hell, why can't you just use Python's core mail functions - no need to install an entire mail server. It won't be pretty but it'll send. It'll probably get caught in spam but... you're too cheap for a VPS so who cares? 3. Wrong 3.1: What.. the fuck is interpretor language 3.2: If you mean _interpreted_, what do you think PHP is......? 3.3: Why is this a bad thing? You don't seem to understand what it is so why would you assume it is bad?
I don't think you understand what I'm saying. My point is, you should have two separate steps: 1. You fetch and sanitize input 2. You make some choice depending on its value These can take multiple forms. These examples are extremely silly, but I hope they convey the idea. Plain PHP: ```php // Check and sanitize $hasAcceptedTerms = (bool) $_GET['hasAcceptedTerms'] ?? false; // Use if ($hasAcceptedTerms) { // ... } ``` Using a Symfony request object ```php public function show(Request $request) { // Check and sanitize $hasAcceptedTerms = (bool) $request-&gt;query-&gt;get('hasAcceptedTerms', false); // Use if ($hasAcceptedTerms) { // ... } } ``` I don't ever use `!$var` to check for existence (in the meaning that the variable may not be set). Having to check for existence means you're working with raw user data, and data should always be cleaned and set in a consistent state before it's used. When I said "this means never dealing with raw input values, but always making checks when working with sanitized data", perhaps I didn't express myself well enough. What I meant with "making checks" was "actually using the value". So to rephrase the sentence, "this means never dealing with raw input values, but always using them after having them in sanitized and consistent state". Hope this clarifies.
Yea, but when do we can do Brainfuck in Assembler? Thats holding us back for decades! /s
&gt;for simple machine learning tasks Neural networks are like a sledgehammer.
Indian seo spam, just look at this guy post history
I now made it better, thank you all for your suggestions. Here it is: [https://github.com/makoru-hikage/mantrain/tree/1.0.0](https://github.com/makoru-hikage/mantrain/tree/1.0.0) However, there's still an Issue that I shall solve: [https://github.com/makoru-hikage/mantrain/issues/8](https://github.com/makoru-hikage/mantrain/issues/8)
This is exactly how SEO spam is written.
He didn't say it's faster. He said it offloads to C. And that's because Python has the libraries to offload to C. PHP is extremely sparse in that area.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt;Isn't mvc one? It is a design pattern but you also need to understand other patterns. In a modern php you need to learn S.O.L.I.D. principles, PHP Standards Recommendations: middleware, etc
Everyday we stray further from god.
I think this will change when FFI comes to PHP
Depends... e.g. k-means will need alot less memory/space/whatever if done via network.
&gt;Why do you argue that python is faster I didn't.
Since you'd still be spending the overwhelming majority of on the far side of the FFI whether you're using python's FFI support or the PHP one in the works it won't really make a difference.
&gt;Sorry... I am seeing, many issues with python. First thing is server issues. &gt; &gt;1. We need at least vps to run python. &gt; &gt;2. We need to configure mail server also to send a single email. No tool available like cpanel. &gt; &gt;3. Python also interpretor language Python is a very mature language and is the dominant player when it comes to AI so many other developers don't see the 'many issues' you speak of. 1) You don't. 1) b) Are you really trying to run AI learning tools on a shared host? You will be shut down pretty quickly for resource usage anyway. 2) What? No, you don't. There are many ways to send mail in Python without your own mail server. 3) So is PHP. 3) b) The fact Python is interpreted makes little difference in a lot of the AI libraries for it, as said in my original post a lot of them offload the heavy calculating to C.
What would you consider some a "must" to learn about? Like what patterns, what topics or subjects., etc?
I hated working with ioncube. How great is the "need" to really encrypt code though?
It is helpful for PHP product developers. They can encrypt source code and escape from the nulled world.
Options are always good. Never saw the need for it though.
I already developed extension. Now it is in my local host. I will upload as soon as possible. phpBolt.com it is free.
That's why I love developing the open source parts of my product. No benefit to encrypt or hide anything when it's available on Github to begin with!
/r/phphelp
I would recommend a book Mastering PHP Design Patterns by Junade Ali
Ok, thank you very much. I'll check it out.
I use a language according to its strengths. PHP is crazy strong in dealing with http requests &amp; responses. It is literally the task this language was created for. Can you, sure. You can. (I don't. Not when it is so much easier to bind Python to machine learning tools.) PHP may be faster than Python 3 at this point-- but Python has an advantage in already available packages so that you will have to write less functionality yourself. The scientists have been pummeling these problems for over a decade with Python.
It's missing 3 things needed for AI - you can't access the GPU - you can't multi thread ( share the same memory on all threads ) - you can't share memory between PHP processes ( you need to serialise/de-serialise the data) Example: - to multiply a 1mill x 5k matrix, it can take 1.2sec on a cpu core. - but you have 10 cores, so it could take 0.1sec - with PHP, if you split the work in 10 workers, you need to serialise/de-serialise the data for each worker, and that can take more than doing the work on one core. - so on the 10 cores, it takes 0.3sec instead of 0.1sec. You get 3 times less max throughput than doing it on one server. If they ever make it possible to multi-thread and share memory between threads by reference ( like on a function call ), then tools can be developed for PHP to help with AI work. But PHP currently is not meant to do that.
Pre-commit hook would be good, alternativly, you could add it to as a merge constraint via a CI check.
I came in here to say something similar. The example that the used with the full `function` keyword read a lot easier to me than the one like code golf style arrow fun
Y'all need Jesus.
If anybody here has some ioncube or else encrypted php code feel free to contract me. I decrypt this shitty thing for free! I hate encrypted php that much! Really!
IF your source has null value there is nothing to be nulled. Normally this is what encrypted code is.
I love the whole webdev for that. It feels very open and the people are actually working together and not against the others. The IT sector is big enough for everyone.
is there really need for such product? I used ioncube some 6-7 years ago for magento plugin, we ended up reverse engineering that piece of shit, because ioncube just murdered our app performance. If you are so concerned about keeping your code secret, just run SaaS, no sane person will want to install black box on their servers they can't debug
&gt;you can't access the GPU &gt; &gt;you can't multi thread ( share the same memory on all threads ) &gt; &gt;you can't share memory between PHP processes ( you need to serialise/de-serialise the data) &amp;#x200B; you can do all of that with php.
C# and JAVA use it in this way.
I wanna start cracking!
Do you want to use GPL v3, then everything must be GPL v3 or compatible. So it is not possible to use on a closed source project, the whole project and not just "one part"!.
Thank you..
No, they don't.
Machine learning is a concept, not a discipline. And there is a different kind of problems that could be solved by machine learning but not in the same way. For example, image analysis and audio analysis are way too different and you can try to analyze using the same tool. Also, we have ML to measure efficiency, performance, future failures, human language learning, to look at new trends and so on, and again the technique used is different than other ML's problems. In the case of an image, it could use a lot of CPU processing and it could use the GPU to do the job. In the case of audio, it is not specifically CPU intensive but it could require some equations to do the job. Those equations are manual. &amp;#x200B; So trying to solve any ML is a fool's errand.
YARLY! From the official page of Microsoft [https://dotnet.microsoft.com/apps/aspnet/mvc](https://dotnet.microsoft.com/apps/aspnet/mvc) Long story short, model must be serializable.
Entities are part of your model. They're not THE model. Also ASP.NET is not C# and C# is not ASP.NET. ASP.NET both in its original variant and the newer MVC variation has always valued overly simplistic layouts, bindings and what not to make it easy for beginners to crack out basic sites and enterprise apps. But it was never a good architecture, out of the box, for a serious project. For the record, frameworks like Laravel also seem to "prefer" anemic models. It's simply easier to write a framework around dumb data records. It doesn't mean the end result is great.
And assembly is faster than PHP, but you ain't going to do any machine learning in the assembly language.
Sure. There's nothing wrong on checking early. But I think this is pretty rare problem so the question is if it's worth the time it will add to the total time of your CI.
Write a test that consists of `assertTrue(false)`?
Sounds a little like Test-ception. I know [php-mock-phpunit](https://github.com/php-mock/php-mock-phpunit) has a bunch of tests. Maybe you can find something in the code. There’s not a lot to it.
But that test would then fail for real. If I had a CI/CD integration, it would say the tests failed, when I don't want that. I want a test to fail without failing xD
It sounds like you need a separate CI/CD system to test your tests, then.
Honestly create a single separate test that loops through and runs `exec phpunit` on each test.
Would it work if you just don't prefix or have an annotation for the test so it doesn't run automatically and then just call the failing test method manually? Other than that I can't really think of a way other than catching *AssertionFailedError* inside your test and then checking whats inside **Exception::getPrevious** but your code probably requires the test actually failing for real.
Oh this is nice
I never realized what a big deal the foreign function interface is. I thought it was meant for optimization or something, but if in the future we'll really be able to essentially install extensions via composer, that would be insane.
AfterActions on suites or methods or stubs if I understand your question.
Is that addressed to me? I'm not involved in the ComposerRequireChecker project, I just posted the link. I haven't thought about that, but I don't think you'd need a composer plugin. If you want this to happen just add the C.R.C command as a [composer script](https://getcomposer.org/doc/articles/scripts.md#command-events) for `pre-install-cmd` or `post-install-cmd`.
I'm not sure I understand the question. What files would you want to exclude? Why?
Just put a wrapper script between PHPUnit and your CI/CD system, that will detect the failure code and turn it into a success code. (And generate a failure code if PHPUnit doesn't fail). You can write the wrapper script in bash, or if you don't like bash you could write it in PHP using the [Symfony Process Component](https://symfony.com/doc/current/components/process.html#usage).
How? * How can you pass data from one PHP process to another without serializing it first? * How can you communicate between threads without serializing data? * How can you use the GPU without having to pass serialised data to a 3rd party script?
I just tried creating a new symfony project, using the command given on the symfony website, `composer create-project symfony/website-skeleton my_project`. Running ComposerRequireChecker on that fails like so: ``` my_project$ php -dxdebug.max_nesting_level=5000 composer-require-checker.phar check composer.json ComposerRequireChecker 2.0.0 The following unknown symbols were found: +--------------------------------------------------------+--------------------+ | unknown symbol | guessed dependency | +--------------------------------------------------------+--------------------+ | Symfony\Component\HttpKernel\Kernel | | | Symfony\Component\DependencyInjection\ContainerBuilder | | | Symfony\Component\Config\Loader\LoaderInterface | | | Symfony\Component\Config\Resource\FileResource | | | Symfony\Component\Routing\RouteCollectionBuilder | | +--------------------------------------------------------+--------------------+ ``` May be one data point against running this in CI, at least for Symfony projects. It doesn't seem like the Symfony team expect a tool like this to be run.
It was but never mind, I guess. I meant making the project, ComposerRequireChecker, a composer plugin. https://getcomposer.org/doc/articles/plugins.md#creating-a-plugin
A new Laravel install passes, however.
write a cronjob to run every minute and look for events that match the current time, then execute whatever event you want. Laravel offers this with [Scheduled Tasks](https://laravel.com/docs/5.8/scheduling), and I'm sure most other frameworks have their own scheduler built in
Especially if publish libraries, the gained stability is a must. There is still a scenario that isn't caught by this (due to it doing just an AST-level scan), which is finding usages of indirectly imported API, such as: $foo -&gt;gimmeSomething() -&gt;aCallOnSomethingIDidNotImportExplicitly(); // problem
Please open issues - will gladly review and provide implementation guidance.
I'm already doing something similar with https://github.com/Roave/you-are-using-it-wrong, which is just an experiment, for now.
If your project uses symbols from `symfony/http-kernel`, `symfony/dependency-injection`, `symfony/config` or `symfony/routing`, then they **MUST** be included in your `composer.json`. The rationale is that any of these dependencies may change API, and you may be relying on them without realizing that. Yes, Symfony and major frameworks may have strong stability guarantees, but a `composer update` gone wrong can always happen. If the code is executed optionally optional, then it is better to split it out to a package that has all related dependencies.
That makes sense. It just seems like a shame then that the project isn't set up like that automatically when running `create-project`.
Filed #113 and #114 for the enhancements. Left out the personal opinion items (global, stdlib) for now but I can file issues for discussion on those too if you'd like.
What’s not robust with those services/applications? Your use case must be crazy complicated, if they’re not robust enough for you..
I'd do `assertFalse(true)`, but that's a personal preference
It's not the robustness. It's the functionality. None of those applications or services offer scheduling as far as I know. Just queuing things up for immediate delivery.
I'm talking about the ability for users to schedule reminders and notifications. So hundreds of thousands of reminders every day. Probably millions in the queue at any given time. I currently do run a master cron every minute that runs any necessary jobs. For example, one job looks for any scheduled notifications or tasks in the db that have passed and executes them. But this is not ideal as you start down a rabbit hole of complexity and fixes. You have to handle and report or retry failures. What if it fails more than a few times? What if a task is still running from the last time it was run? How do you keep from doubling up, etc... Which is why there must be some software out there that does scheduling of large amounts of tasks/jobs easily.
&gt; ability for users to schedule reminders and notifications and tasks Redis/Kinesis + Cron job for script execution /lambdas. Customer devises eventing, call service to set it up, fire event into queue. Parallelize consumers or not (up to you), each consume (non destructive) and execute. Aging out eventing, failure handling and throttling (in the case of multiple failures) is always application specific and you'll have to decide what to do with them. There is no "one way" because it's there is no universal pattern.
There's also this: [https://github.com/oraoto/pib](https://github.com/oraoto/pib)
It might be better to stick code in a docker image. You would need to secure the image by either removing shells or renaming them so users can't enter the image.
SSE, redis queue and consumer for that queue. Boom!
Docker uses layers. Someone could just use your image as a base and add in what they need to access a shell env.
Those bastards.
If the code you wrote is sufficiently tightly coupled to the third party library to be considered a 'derivative work' of it for copyright, then you can't distribute your code without a licence from the copyright holder of the third party library. The GPLv3 gives you that licence **only if your code is also licensed as GPLv3**. PHP is licensed under [The PHP Licence](https://www.php.net/license/3_01.txt). I don't think that should give you any trouble as long as your product name doesn't include the word 'PHP'. Note that GPLv3 doesn't say that you can't charge money for your product, and it doesn't say you have to release it to the public. But it does say you have to allow your customers the right to make copies and distribute them to the public, which someone will inevitably do if your product is popular and you don't release it publicly yourself.
What is SSE?
Server sent events
If this was Stack overflow, this would be the accepted answer.
$this-&gt;fail(string) with try catch that catch PHPUNIT_BADLYNAMED_Exception. That is why I feel phpunit sucks. (Though there is no way to implement a good test framework in PHP, which would be another story)
So you've probably heard of web sockets which is a 2 way communication. But SSE is one way communication where you will just receive messages . Then you could create second endpoint to confirm you've read that and remove it from the queue or mark it as complete.
Lol I got down voted. You schmuck wannabe coders.
&gt;fire event into queue I assume this happens when you are ready for it to fire? The whole part about storing scheduled tasks and checking on a regular interval is the part I would like to find an existing application to handle. &gt;Aging out eventing, failure handling and throttling (in the case of multiple failures) is always application specific this is already handled well by a myriad of queuing and pubsub services like rabbitmq, gcp pubsub, kafka etc. Sure, it's application specific, but usually you just configure the queue service as you desire.
But where is the scheduling component of that? Redis doesn't have scheduling. Once it's in the queue, it's getting sent asap.
Create data objects within the queue with the relevant information you need user_id, job_type, schedule time etc then filter based on some parameters. Use an SSE endpoint maybe containing a token or hash to identify what items in the queue you have permission to view. This kind of system with a bit of thought could be robust enough to handle most tasks
I'm curious, why?
I think he's making a joke, since they're the same thing.
Redis doesn't seem like the right tools if we are going to need to filter objects in the queue based on certain criteria. Can you even do that with redis? How would I get all objects where "scheduled_date" has passed?
Okay, in simple terms - it's a simple tool for converting certain file formats. Yes there is paid software out there already but i found a way I can implement few libraries together in PHP and be able to use it commercially without having to pay license for anything. I have customers already who use my product X, but for a very long time they have stated they are ready to pay if I provide Software Z to them that can do certain things (which is convert files I mentioned above). Surely I can release software Z under GPL v3 and offer it for money for implementation and support? Software X is closed source. Software X and Software Z are completely independent of each other, one can work without another. Sure I csn give customers Software Z for free as open source project, but I know what will happen already - they will attempt to implement/deploy it alongside Software X and end up taking down entire production server. They have no tech savy IT personnel.
Upvote for the most correct answer in this thread.
Wouldn't assertFalse (false) work? You'd prove it was wrong.
If your backend is cake php why do you need a cms on the front end? Could just use Vue or React or something. Concrete5 has an excellent page builder system. Best I've ever used in that respect. Wordpress is junk. Grav cms is great. Incredible what they can do without a database. Really nice to use. October cms is impressive. Bolt is nice. So many to choose from these days.
Especially these days
Bad bot
I see. I missed the scheduling hundreds of thousands of tasks. I doubt there’s a “software” that you can just use. I’ve never heard of anything like it. Maybe there’s a paid service that exists online, but you’re gonna have to be more specific what these user generated tasks are. It’s too vague, so you’re not gonna get anything useful.
Craft CMS is my favorite!
Well, the vagueness is intentional. I just want it to deliver data objects via push or pull. Because I would need it for lots of things. In simplest terms, I want AWS SQS with scheduling. As it is, you can only delay something a maximum of 15 minutes. Google pubsub doesn't offer any delay. Nats and Kafka don't seem to have that option. Redis has some hacky things you can do with sorted sets (sorting them by timestamp and checking it periodically). Rabbitmq also only has hacks for scheduling. Seems like with all the queing services out there, someone would want to offer scheduling. I know it's not an uncommon need.
I tried Concrete5 a few years ago, but I had to downgrade my PHP to get it to even run. As I recall they used “Object” as a class name - I’ve been meaning to look if they’ve fixed that yet. I want to say it was also MySQL only, and we’re a Postgres shop. So last I knew it was great if you’re willing to run old PHP versions and can deal with MySQL. For me the juice wasn’t worth the squeeze. I did like the interface though.
Let’s say the message is put into one of those technologies you mentioned. Does the message contain all relevant scheduling information?
I unfortunately manage a Concrete5 site, it is the worst CMS I have ever used. Buggy and can never do what J need without some sort of hack. Do yourself a favor and stay away.
I don't really follow.
I would think the scheduling portion is what you need to develop yourself using the general queue tools like SQS. It’s a common need as you know in some domains. Subscription services, for ex, have scheduled payments/queues. You can develop it yourself (use SDK/API for payment captures and scheduler will be custom work) or use a hosted service for subscription billing provided by Stripe, PayPal, etc. These exist because (my conjecture but probably right) it’s a common business model. Yours may not be, so I would expect to have it custom built. What’s preventing you from developing your own scheduling software?
I have developed my own. I put them into my MySQL database with a scheduled datetime. And a running process that constantly checks if any scheduled times have passed. It works fine, but it needs reporting features and logic to handle scaling and longer running tasks and concurrent process logic for when I scale it up. So I just don't want to reinvent the wheel if something exists. My use case is basically any app in existence that uses calendar style scheduling and reminders and scheduled emails, reports, etc. Seems like a centralized schedulable task queue would be very useful.
Ideally I would have the option to include all necessary info or just some, like an id that can be used to retrieve additional information. My current Homebrew system stores all of the information in json. Including metadata that the consumer needs to know how to handle it.
I hate both lanaguges on a good day, but jesus christ.
Joomla...custom themes are easy to do.
hmm I onyl had option for title.. I guess that's how it works on this subreddit &amp;#x200B; I'm working with company where someone long time ago was really good at php and wrote bunch of server applications in php... so now they are facing situation where bunch of legacy machines are sending request to server in [http://192.168.0.100/report.php?machineid=12345](http://192.168.0.100/report.php?machineid=12345) format ...12345 indetifies machine.... there is other data after that, but goal is to redirect just machineid now they have a new software and they migrated database and kept same machine id, but new database is running on different port so goal is to redirect [http://192.168.0.100/report.php=12345](http://192.168.0.100/report.php=12345) to [http://192.168.0.100:7000/12345/report](http://192.168.0.100:7000/12345/report) any idea how to do this?
Just... redirect there? What is the problem?
Yeah this, otherwise show us the redirect code.
&gt;Just... redirect there? What is the problem? php is not my stronger side... I'm even ashamed to show what I came up with.. but here `&lt;?php` &amp;#x200B; `$port = '7000';` `$machineid = $_GET['manid'];` `header('Location: '` `. ($_SERVER['HTTPS'] ? 'https' : 'http')` `. '://' . $_SERVER['HTTP_HOST'] . ':' . $port'/'$machineid'/report'` `. $_SERVER['REQUEST_URI']'/report.php?report='.$machineid);` `exit;` &amp;#x200B; `?&gt;`
12345 is a variable
Hi r/PHP, author of [Rubix ML](https://github.com/RubixML) here, &amp;#x200B; Indeed PHP is becoming suitable for serious machine learning &amp;#x200B; You can check out some example ML projects [here](https://github.com/RubixML) &amp;#x200B; The biggest challenge for the deep learning stuff so far has been ... 1. An efficient array datastructure that benefits from sequential and/or strided memory access patterns 2. An multithreaded (CPU/GPU) linear alegbra computation library &amp;#x200B; I'm happy to say that we are getting BOTH in the near future with the CArray project that my friend Henrique is spearheading, and that Rubix ML is designed to benefit from &amp;#x200B; In some preliminary tests we've seen as much as a 550X speedup on certain operations &amp;#x200B; So stay tuned ... and if anyone has any questions about Rubix ML, I'll be happy to answer them &amp;#x200B; Here is a link to the [CArray](https://github.com/phpsci/phpsci-ext) project
have you look at this https://medium.com/walmartlabs/an-approach-to-designing-distributed-fault-tolerant-horizontally-scalable-event-scheduler-278c9c380637
I totally agree, which is why I decided to work on [Rubix ML](https://github.com/RubixML) &amp;#x200B; I took what I loved about Scikit Learn and Keras and combined it into a library for PHP
I’ve seen solutions where you consume the message and then according on its data you put it into an sqs queue for “scheduled” sends. You can make queues on the fly using sqs‘s api. I don’t know enough about your problem if this would work though.
1. Your attitude isn't good. 2. Your answer wasn't good. Doesn't answer his question.
Your are missing some dots (.) after some of those variables.
You forgot joining dots: \`\`\` &lt;?php $port = '7000'; $machineid = $\_GET\['manchineid'\]; header('Location: ' . ($\_SERVER\['HTTPS'\] ? 'https' : 'http') . '://' . $\_SERVER\['HTTP\_HOST'\] . ':' . $port . '/' . $machineid . '/report' . $\_SERVER\['REQUEST\_URI'\] . '/report.php?report=' . $machineid); exit(); ?&gt; \`\`\`
You just turn on xdebug when you need it. I have a keyboard shortcut that will add/remove a file called `toggle-xdebug.ini` with the contents `extension=xdebug.so` then restart fpm. *this process takes less than 0.5 sec*
holly shit, I think it works.. I was soooo close
I never read logs in development, just use xDebug.
Your code looks very good, but I am not finding it useful for my current projects.
How is craft? Do you encounter lots of bugs in huge websites? Multsite? Performance issues?
Yeah, I was pretty tired last night and thought it'd be funny
You people always seem to discuss the trees instead of the motherfucking forest. &gt; Tell me, have you ever reset your production database? &gt; No? &gt; How good are your database integration tests if you RELY on the fact that the database will be completely reset, maybe even PRISTINE, before each test is run? This was, fucking obviously, the main fucking point of my earlier statement. You missed it. It flew over your head.
SQS queues do have delayed message queues. But 15 minutes is the maximum time it can be scheduled out.
Imagine you create a queue on the fly “7-11-2019-13:00” you have something then to consume all the queues in the past. Have some cron check every minute or w/e interval makes sense and spin up new consumers to handle messages. If it’s all aws you might even be able to put them into these timed queue and do some fancy sns/sqs/lambda things
Wow this confirms it for me. You are actually mentally retarded.
If you're worried that a cron job isn't enough, which I highly suggest you test, you can try something Apache Storm. But lets say you set up a queue. Thing about the max number of entries in the queue at one time. Then thing about how fast you process them. Then realize that you can run your cron on multiple boxes.
+1 for Bolt. Used October in the past but I found the mix between database and non-database a bit weird, maybe that was us using it wrong. As parent mentioned, though, maybe a CMS is overkill, since your C is already M-ed elsewhere.
Less bugs than Wordpress with plugins. The plugin store is pretty high quality. How huge is huge? You could go headless with Craft with GraphQL and serve the site statically with netlify which is extremely performant.
I tried out bolt and October and ended up going with grav for a little business site I made. Grav is so nice to use. They have these brilliant multiform at files where the top section is yaml 'frontmatter' like jeckyl. And the next section is markdown. So your data is at the top and your template at the bottom. Sounds weird but it's great. Whats interesting about grav is there's no database. Apparently once you get over 1000 pages it would be better to have a database. But having all code and content changes in git is just incredible. No database migrations or anything. It's really a joy to use.
If you cant see how it works then maybe you should think about a different job.
I think huge is a blog with 100k post, &gt; 5 million page views a month
CraftCMS gets a thumbs up for me, as does Kirby CMS Neither is free but craft is for personal projects and both are open source with lots of plugins.
Learn to use php and dont throw serialization at everything? https://github.com/Ponup/phpopengl
1337 hack
Looks like you need something flexible and powerful but also easy to use. Have you tried Drupal 8?
Use typo3
please use /r/PHPhelp in the future and look at more info in the sidebar
Hello, take a look at Rabbitmq. It's a queuing and you have plugins for delaying a mesage. The drawback is that you need to create a worker that is processing the items in queue For eg: you send in queue a notification id and delay time and the worker will process that.
I did see that and it seemed a bit hacky at first glance. But I will give it a closer look.
Interesting. Will take a look.
No u
No you both
I don't think it's hacky. It's a queue that have a delay mechanism and the worker can be build inside your app ( symfony offers this possibility, i don't know if other frameworks can do that as well). Another worker that i worked with was build in nodejs.
&gt;It is helpful for PHP product developers. They can encrypt source code and escape from the nulled world. If one of your project requirements is code obfuscation then why are you even considering PHP in the first place? It's just not a good fit when there are better languages for the job.
Gooooood, gooooood! (in the voice of the emperor).
That's a really interesting collection of languages, only to settle on PHP. What makes you like PHP over the others?
Sounds lile reinventing above mentioned amqp solutions
Documentation? Can we eat this?
&gt; So hundreds of thousands of reminders every day Still doesn't tell much, I mean: assume 50.000 per day, that's ~2000 per hour or 34 per minute =&gt; not really much. I do this in practice and it works: - scheduler every minute - checks the db - dispatches a job for each found item - have `n` workers concurrently process that queue I work at a company where we do this for ~100 jobs / minute so technically we _could_ be at 144k per day but in reality the distribution isn't linear nor continuous but even 2k jobs per minute are not a problem if you've enough workers. We've a lot of customers and this system _still works_ without too fancy / complex stack behind it. I suggest to start worrying about things when you can _measure a problem_.
That means nothing, especially given accepted answers are accepted (more often than not) by the person who knows the least about the answer.
Laravel's queue component supports [scheduled jobs in Redis](https://github.com/illuminate/queue/blob/7bd0245bb51e1f3b353bdabee8a3534cf47c9349/RedisQueue.php#L137). The value is inserted using Redis's [ZADD](https://redis.io/commands/zadd) functionality, which supports providing a score for queued retrieval. Laravel uses the timestamp the job should be retrieved at as the score.
When comparing a string to a number, PHP will attempt to convert the string to a number then perform a numeric comparison. See this: [https://www.owasp.org/images/6/6b/PHPMagicTricks-TypeJuggling.pdf](https://www.owasp.org/images/6/6b/PHPMagicTricks-TypeJuggling.pdf)
It's what /u/Max-\_-Power said and also it's because you're using == and not ===. Pretty much always, === is what you want.
yes but it should return true on comparing 1 to the b as it returned true for when loose comparing between 0 and a took place .
The integer value of 'a' in PHP is 0. The integer value of 'b' is zero too. Because strings are not numbers, so they have zero numeric value. That's why you should always use ===, that compare type and value. You could do 3 + "5 birds" and the result would be 8, PHP would try really hard to find a number there, this behavior changed in PHP 7.2 or 7.1, not sure now.
That's right. Always try to check identity with the "===" operator rather than only equivalency with the "==" operator.
var_dump( (bool) 'a' );
Yes with your logic and my logic that's true but that's not PHP's logic :)
Trying to cast a letter than otherwise doesn't actually represent a number yields 0. B does not represent a number, so it's cast to 0 (basically a default for "we don't know what else to do with this).
What happens is that PHP sees the string, and that you want to compare it to a number. Because you're doing it with ==, it decides that it needs the same thing on both sides so it tries to convert the string to a number. It does this by stripping everything off the right side of the string that isn't a number. In both cases it's left with '' and then decides that it's zero. You get false in the second case because 1 isn't equal to zero. All of this is [in the manual](https://www.php.net/manual/en/language.types.string.php#language.types.string.conversion), it can be counterintuitive if you don't know about this behavior so it might be worth looking into.
'a' and 'b' are not chars. This is not C. They both evaluate to 0 then converted to integers.
That's a really good question, one I ask myself too. From time to time someone on the team will complain about not having enough documentation. This will be most probably the same person that never reads documentation when it exists. The first thing you should do is make sure documentation is always up to date, never stale, stale documentation reduces the faith in documentation until no one cares about it anymore. So how can we do that? Things always change, we can't keep up with docs and still deliver on schedule, you might think. The closest I got to an answer is: make your own code part of the documentation, good method names, good variable names, some PHPDoc, do things simpler sometimes even if a more "clever" but hard to understand solution exists. Write tests that really test something behaves like it should. Tests must be up to date or they won't pass, so your "documentation" is alive, it's not a dead piece of text someone put together when forced to. Finally, write a readme.md in the root of the repo that explain basic things, how to install, how to test, what the project is about, tech stack used, it the readme gets too long creake a Wiki of some sort and link the articles on the readme. No one will find the wiki if it's not there. That's as far as I got, hope it helps you.
But be wary of what types you are working with. For example this: ` if ($_GET['page'] === 1) { // this will never be true } ` Because everything in $_GET &amp; $_POST is a string or an array.
 0 == 'a' evaluates is true because 'a' evaluates to int 0 1 == 'b' evaluates is false because 'b' evaluates to 0 and 1 is not equal to 0
That's interesting, why should 1 equal 'b' in your view?
But b and any other character will convert to 0. So 1==0 is false Try 0==b or 0==w
You are confusing me with the OP apparently.
[J](https://github.com/TomorrowIdeas/plaid-sdk-php)ust wanted to share with the community an SDK I wrote for Plaid. Plaid does not offer an official SDK for PHP and the 3rd party SDKs that were available were horribly outdated and no longer maintained. Available here: [https://github.com/TomorrowIdeas/plaid-sdk-php](https://github.com/TomorrowIdeas/plaid-sdk-php)
Because to PHP, both a and b will always equal the numeric value of zero. Because of that, b never equals 1, and so var_dump returns False.
You said this when OP said `var_dump( 1 == 'b')` should be true if `var_dump( 0 == 'a')` is true: &gt; Yes with your logic and my logic it should I was responding to that, and I don't think I am confusing you with anyone because your name is
Because both strings are false. 1 is always true. 0 is false. Therefore, the first statement is true
This is why I made [Ionizer](https://github.com/paragonie/ionizer). (Also, I wanted a scalable solution for preventing `param[]=value` errors when `param=value` was expected.)
Couldn't you just debug it?
In production?
will do .. thanks
In production?
This tool to improve code quality
Production would be running, I meant debugging...
With Local Server
That's not really how static code analysis works... due to the "static" part...
In my experience, psalm is a strictly better phpstan.
Yes... I checked now. It is good. https://psalm.dev/
That's the whole part of why you should debug it. Success comes from experiences and experiences come from bad experiences. You do not only get to know where the problem starts but you also know why the problem began since you look more into it. Unless a person is calling asynchronously... Which is quite difficult..
I agree that the program is quite helpful for asynchronous calls.
What... are you on about? Static code analysis and debugging are two completely different things. SCA (phpstan et all) look for code patterns that are logically wrong before their state is even considered.
Sounds like they’re embracing the jamstack
People would stop learning their mistakes if these programs were being used. Debugging gives a whole damn explanation on where the program goes wrong, I think you are trying to make a program that is pre-existing, it's only that you are making some mistakes more compact to be seen which is not good for beginners, it's an easy way out of programming world if people just gave hopes to their automation stuff. This is extremely harmful for beginners as they don't get into specific details on they did wrong. And the part with intermediates and pros, it is sometimes good but again they are intermediates and pros, they know what should logically make sense. Yes, it can help intermediates and pros if they are in a rush of making a program as everyone makes mistakes, but at the same time, it is going to be difficult for beginners to jump into intermediate if they find easy ways out a solution.
http://nickgravgaard.com/elastic-tabstops/ They indent column-based rather than character-based.
Symfony + React is my company's primary stack now. We still use serverside templating (i.e. Twig) for some things, but anything that's a huge project or app-like in its level of interactivity (e.g. admin panels and the like) gets a React-based frontend, more or less. Personally, I'm all for this sort of thing. You can only do so much on the frontend without bringing something like React or Vue into the mix, so I think it's far better to just embrace these tools rather than trying to hack complex interfaces together with tooling that really isn't suited for it. You always want to be using the best tool for the job, and while PHP is great as a backend stack, it's clearly beat by clientside frameworks if you're building complex interfaces.
I've been developing with Drupal 8 lately (based on Symfony), and we that's what we call "headless" Drupal. Where we do all the backend stuff and, through API's, give full control to our Front End friends (who also use Vue, in our case) to do what they want with the content created using the platform (sometimes even ignoring the Drupal admin interface for creating content, and creating it directly through the API, which I personally think is quite an overkill, but I have seen it happen too). It's a change that I rather welcome, it pushes the boundaries of what a CMS can be. You're no longer tied to the platform itself, so, if say, we wanted to change from Vue to React, there would be no actual changes to the backend for it to happen, since it would just need to use the same API already developed. It doesn't work for all projects, some are simple enough were using the Twig templates as a gateway to sending props over to the Vue component is ideal. But I like that we have more choices for how to approach a project :) Since Javascript frameworks are gaining more and more traction, I think the industry will slowly move towards this approach. I think PHP is still a fantastic backend language, and working alongside the Javascript frameworks seems to be the way to go going forward.
I've had a PHP app purely to serve the API for years now. We run a sophisticated React app on the client, and PHP exists mainly for graphql. No need for twig when I'm simply building JSON responses.
1. It is difficult and time-consuming to exhaustively a large program, and that testing needs repeating after changes are made. 2. Static analysis can find problems not easily found at runtime.
Learn how database injection works and how to prevent it. Then learn the other 9 items on this list: https://blog.sucuri.net/2019/01/owasp-top-10-security-risks-part-v.html Ignore the PHP haters.
Just RTFM: https://www.php.net/manual/en/types.comparisons.php
Question everything. Frameworks are made by mortals.
It's becoming much more about "cloud native" and " serverless" which means a type safe backend, possibly a like bff (backend to the frontend) and a JavaScript frontend, based on a modern framework such as Angular, react or Vue.js. To me, you have two choices in 2019… get into JavaScript or get into DevOps.
in PHP strings are regarded as "true". &amp;#x200B; Therefore "fuckthis" = true "hello world" = true "A" = true (1 length string) &amp;#x200B; Now, let's go to numbers, 0 is false and anything past 0 is true. 0 = false 1 = true 200000 = true &amp;#x200B; Also, in PHP numbers can be numeric and booleans at the same time &amp;#x200B; 0 == false //true 0 == true //false 0 == 'string' //false 0 === false //false 0 === true //false 0 === 'string' //false &amp;#x200B; 1 == false // false 1 == true //true 1 == 'string' //true 1 === false //false 1 === true //false 1 === 'string' //false &amp;#x200B; Also, you'd expect 1 === 20 ? because after all both numbers are "equal" (==) to true, right?, in this case the interpreter compares numbers by value. &amp;#x200B; Also, PHP automatic conversion. 0 == '0' //true 1 == '1' //true 1 === '1' //true (automatic conversion is made)
Same, though my API isn't graphql. I don't want HTML anywhere near my backend. The only HTML I've produced in PHP in the last... six or seven years? was an intermediate layer for an HTML-to-PDF library.
I'm fine with JS-based GUIs for web*apps*, which admin backends are a part of, as you say. But I don't like how seemindly every web*site* needs JS these days. It's turning the web on its head for no good reason IMHO.
Especially these days
So what do you mean by that? Financial interests? Or „smallest common denominator“?
Pretty much this, but you almost got to learn some DevOps to understand how to optimize the apps since the deployment strategy can greatly affect scaling and performance in ways you didn't have to think about 5 years ago when it was just a server running the full stack.
TDD. first tests scenarios/tests then code.
I got the same experience late in my career and was frustrated not knowing TDD before ..
This.
I’ve poked at both and had a generally similar experience with the two (though my CI pipeline only runs PHPStan right now). Can you elaborate on why you find Psalm better?
Yeah exactly my feeling. Previous companies started before tests were a thing, I knew PHPUnit exists and it can bring "some" benefits but TDD is real deal programming pattern Anyway this is my suggesstion because when you teach your trainee tests first then code, no matter how messy code will be, it will have less bugs and every failed tests will stop them to commit buggy code
Code maintenance is like keeping a house clean. You have to make it easy for yourself and do little bits often. Specifically: version control and automated tests make refactoring and maintenance low risk, so make sure you invest in them and keep them ‘clean’ (up to date and well maintained).
I wanted to pack a little bit of wisdom in a short sweet sentence and I utterly failed. Hehe. No, my point was there's a prevailing attitude of "use frameworks, and do what they tell you, they're made by people much smarter than you". That's very harmful. Popular packages (libraries, frameworks) are made by mere mortals, and asking the all important "WHY" about the design choices in a framework is very important both so you figure out both how to most effectively use a solution, and to understand where a solution falls short. "WHY" is the most effective tool of learning and growing in any professional field, as well. So my point was, let's not be afraid to ask "WHY" about things that are popular and liked in our industry.
What. The. Fuck. Am I reading.
Google and stackoverflow are your friends, but you must understand the code before you use it...so encourage them to write out the code themselves and not just copy and paste
How to troubleshoot code. I'm on the sysadmin team for a group of developers mainly php oriented. But one of the things i really dislike is when i have to dig through the code to find a problem and point it out to the developers. Sure there are times when it's a system issue, but 98% of the time it's an issue in the code. Also as part of troubleshooting, how to read error messages. Most error messages are easy to follow to diagnose the problem. And make a point to say this is the first thing any developer should do when they encounter a problem. These are two skills that i believe will make any developer's life so much easier and make bug hunting a much smoother process.
You are correct, BUT: As time goes on, you'll notice that maybe 90% of the people who are hired as "developers" are nowhere near capable of understanding even slightly complex architectural decisions. Some will often draw the wrong (because those are often the simplest) conclusions when asking "why", others wont even try. Now, if OP picked his trainees himself, and they have potential, your advice is valid. But if he works at some corporation, there is a very big change they just filled sits with warm bodies, and your advice will go to waste.
&gt; As time goes on, you'll notice that maybe 90% of the people who are hired as "developers" are nowhere near capable of understanding even slightly complex architectural decisions. Hiring is hard. Learning is hard. And so on. Doesn't mean we shouldn't do it. &gt; But if he works at some corporation, there is a very big change they just filled sits with warm bodies, and your advice will go to waste. Sure, but I think OP is asking because they wanna try. So, there goes. A players hire A players. B players hire C players.
So you are not using an IDE? since they usually provide static analysis..
Yeah! There we go!
The fact that he's asking, especially on a place like Reddit, already tells me he does not understand some fundamental things, especially since his best bet on getting good advice is this godawful site. The best advice for him is to actually stick to those frameworks and their well written documentation, and teach his trainees to do the same, UNTIL he understands the WHYs you talked about. By then, he'll no longer need advice from places like this, and will also be able to train other people efficiently.
Learn how to configure and use XDebug.
I usually code laaarge grid applications. Unlike most of the stacks in this thread, I preferred to stick with SSR.
Such a good point! I would like to add that we write messages for people and therefore we should give them the most support possible in errors as well. It is frustrating when a general error like „something went wrong“ appears.
Such a good point! I would like to add that we write messages for people and therefore we should give them the most support possible in errors as well. It is frustrating when a general error like „something went wrong“ appears.
I picked my trainees wisely 😅👌🏼 so his advise applies to them
Hm. You say that I disqualified as a trainer by asking on reddit? 😅 Then i might explain a bit more: I prepared the full three years for my trainees. I asked friends, colleagues and coworker. I asked in two LinkedIn groups and as a public post their with many responses. I joined a EU trainer program. I seek out for help and advice because I feel responsible to deliver the best training I can. I take this training very seriously. It would be nice to know a different place to ask my questions - if you could recommend one?
In my experience, it catches everything phpstan does and also points out bad habits like forgetting a return type.
Maybe as one of the first lectures? Maybe in combination with automated testing?
At my agency we use Laravel as an API and Nuxt.js for the client side of the app. Works really well and it's a pleasure to work with.
Asking colleagues, friends and coworkers are by far your best bet - assuming they actually know their shit. Asking for advice on a place like Reddit is almost always a loss-loss, after a certain level (a bit past Advanced Beginner) - lots of very subpar people will be lurking here to give advice. If you don't know the answer already, you might actually consider that terrible advice on par with proper advice, or at best, lose time sifting through all that shit just to find trivial courcses of action you could either think of yourself or have those real life people tell you. Your time is way better spent not looking for different places asking the same question, but to take the answers you already have and try to reach the best solution you have with them. And if you do ask, consider that if you don't know the answer yourself, listening to advice of some Redditors who's skill level you don't even know is at best a coin toss. Ask only people that you can confirm their skill and experience, like colleagues you know IRL.
Developing a framework requires experience as it needs to be able to anticipate the use cases for the said framework. And without a real professional experience I doubt it would end with a very useful product.
PHP at the backend doing backendy things and vue, react or whatever consuming apis and doing frontendy things. Easier to test, easier to deploy. No html generated anywhere on the server side.
Good bot
Thanks for your explanation! 👌🏼
&gt;1 === '1' //true (automatic conversion is made) I don't think that is correct: https://3v4l.org/8CR7j
The gain of experience is the goal. Not the resulting framework as a product
Developing a framework is an extremely valuable tool for learning, but it's a labour of love. You start off with a particular objective but you'll end up tearing it up and completely re-factoring it 50 times until you get something you're happy with. If they're not getting a kick out of the actual process of making / learning / improving it, then they'll just find it incredibly frustrating and unrewarding. Perhaps have them write an abstraction to an existing framework instead, some kind of adapter layer that decouples the framework from how you want to use it.
I agree. The fact is building a framework alone as a trainee may be unproductive. In my experience, you have to build several projects with similar features to understand how to build a framework to handle those features. Without this scenario, writing your technical specifications for your framework will be complicated.
Even the most basic of websites could benefit from a.g. some ajax on the back of a toggle button. &gt;Performance certainly isn't one, because you can make page-based website just as fast This site I'm posting on is proof that's not true. Aside from doing a full page load to post this comment I'd also lose any interaction I had like collapsing comments etc.
You have to differentiate. A static code analyzer tool, like phpstan, can find "technical bugs", but not "logical bugs".
So true. I don't trust any developer that doesn't use a debugger or says it's not worth the effort to set up. It doesn't take much to get xdebug working, but even if it did it would still be worth it
The adapter is a good idea!
I feel nervous writing code if I can't step through it via XDebug.
Good point! So better let them gain some good experience and let them build one after several months ..
I never said websites mustn't have *any* JS, I said websites shouldn't be *all* JS. Where nothing shows up whatsoever, if you turn off JS. Progressive enhancement n'all. Reddit is a webapp like Gmail and Twitter. Requiring JS is fine for those.
Do you use server side rendering with that? Do you know of any good guide describing how to get started with that?
With Laravel you'd generally use Laravel Passport and set up an OAuth server. With Symfony, I think you'd use FOSOAuthServerBundle. Maybe there is something newer these days. That I was I used in 2016, and I found it difficult to use. Either way, some kind of JWT auth, probably OAuth. Then on the JS side, I'd recommend first learning how to make Vue apps without any server side. Learn how to use the router and so on. It's much more like traditional mobile apps. You now have a separate app running in the browser, and a server which is just an API. Only difference between this and mobile apps, is that it needs to be really small so it can be downloaded in the same time you'd normally load a traditional web page. Unless you do code splitting, but that is more advanced.
Especially these days
that true, however i havent found any as good as rails. laravels are pretty empty in comparison (im sure by design, not judging just stating)
the problem is it's very easy to cross that line where your progressive enhancements become a webapp but now your frontend is a complete mess to develop. another problem with not taking a client server approach is if you want to develop another client none of your backend is reusable because it's all twigg/blade instead of a json api. reddit is absolutely not a webapp btw.
API, Slim, some libraries from Symfomy, Bootstrap, Vue.
Every delete statement must have a where clause
While I definitely agree that it's a pretty bad look for largely presentational websites to totally rely on clientside JS to even work, I want to point out that this isn't inherently caused by JS frameworks so much as it's caused by people doing JS wrong. Every remotely popular JS framework (React, Vue, Angular, Ember, you name it) supports some form of serverside rendering, which solves this exact problem. It's just that you naturally have to _make use_ of this functionality (and also figure out how to do that, which is easier said than done, especially if you e.g. inherit a large codebase that doesn't do SSR already) to benefit from it, so sometimes it just won't get done. I can also pretty easily imagine a scenario where non-technical management decides they know better their engineers and orders them not to bother with SSR for dubious reasons. All that being said, anecdotally speaking, I feel like websites totally breaking when you disable JS is actually less of a thing now than it was maybe a few years ago. I can't remember the last time I disabled JS on a non-appy website and had it totally fall apart and/or just not render at all.
I could not agree with both of your points any stronger. If I could upvote this comment 100 times I would. It’s surprising how many developers can’t read error messages. Or get lost in the stack trace.
Yes, that is basically how I do it now. And my concern is not so much scalability but just another bit of code to maintain and expand. I run on k8s so I like being able to just launch a separate service in a container that can be independently scaled. So with my current system, that is like yours, if I continue with it, I will need to add reporting to Prometheus, notifications on failures, notifications for when it gets behind, retries, dead lettering and probably a few more things that normally would be included with a nice pre-packaged implementation. So would be nice to offload that. But I am liking some of these redis plugins that others have mentioned so I may look more into those.
Learning curves scare me away easily. What's the learning curve like?
Completely agreed with you. I don't use a lot of JavaScript and try to really avoid it where possible. I'm also incredibly annoyed with the amount of dependencies that the various npm modules bring in. &amp;#x200B; I have 6 dependencies in my project and when I look in node\_modules I have 768 directories. I don't even know where to begin with security auditing any of it and ensuring updates don't introduce vulnerabilities.
Been doing PHP 20 years, so I certainly don't have anything against it. In fact I did 99.9% of all of my programming in it for like 18 years... even non-webdev stuff. But for medium-large new projects going forward, I feel that there's no longer really a need to be writing the frontend + backend rendered templates in different templating systems or languages. The main frontend frameworks these days also have options to do server-side rendering... * Vue &gt; Nuxt * React &gt; Next.js * Angular (includes SSR) * Svelte &gt; Sapper So to me it makes a lot of sense to just use these. Just get to know your frontend framework (and JS) as much as possible, which does take some time if you're mainly a backend dev... I hated JS for those 18 years, because I never actually took the time to learn it properly. But I starting learning it properly about a year or two ago, and now I prefer TypeScript over PHP for most of my programming. You only need to create the templates once, with the option to switch between server/client side rendering at the flick of a switch, especially with Nuxt where you can just move some HTML inside `&lt;no-ssr&gt;&lt;/no-ssr&gt;` tags to change SSR to CSR. You don't even have to decide up front if you want to render on the server or browser... you can swap so easily later on. Plus the fact that the web-component model just makes templating much easier and more re-usable overall. Stuff like Vue single-file-components and scoped CSS make webdev so much easier. I'd hate to go back to having to match HTML/JS/CSS up with IDs and classes for everything. For the backend, I'm getting in GraphQL, and Postgraphile is pretty cool in that for a large chunk of most websites, you don't even need to write much of a backend at all... you can just point postgraphile to a database schema and it'll instantly create a graphql API for you with a single command. The only work really involved is adding the security where needed, which you can either handle in postgraphile itself, or you can just use postgraphile to serve your public data, and write your own small backend API for the stuff that needs auth. I'll still use PHP for WordPress and off-the-shelf stuff like that on small projects. But after doing nothing-but PHP for about 18 years, and being very happy with it... I don't see myself starting any more big custom-built projects with it.
Especially these days
SSR with Nuxt? Comes out of the box with the 'universal' mode so you don't even have to do anything except learn about the asyncData() method which makes a request to your back end before the page is rendered on the server and sent to the client. After that, it's full on SPA mode.
Symfony, angular, docker, postgresql / mysql, rabbitmq, jenkins, sonarqube, gitlab/github/bitbucket then all the tools specific to the language, php Stan is a decent starting point.
How dare you mention Joomla. So much Joomla Derangement Syndrome (JDS) around here. OP, take a look at Joomla. Has a lot going for it. :)
i have a hard time thinking of a website that wouldn’t benefit from a separated client and server approach. maybe if the site was (and always would be) 100% static? creating a modern web experience requires JS and usually something like React or Vue. it’s best to just start a project with this approach these days if you’re unsure about a project. it’s pretty wild to me that this is even something people still debate.
Especially these days
Quite a serious release this one!
how to learn APIs ?
I would guide them through a debugging session, or some code review.
If youre gonna go to your trainees tomorrow play this song: [https://www.youtube.com/watch?v=Wm2h0cbvsw8](https://www.youtube.com/watch?v=Wm2h0cbvsw8)
yea, experience is mostly gained from failing, except when you start building frameworks with a lack of knowledge you dont really know youre doing it wrong resulting in trying. if knowledge is what youre lacking youre better off reading good books. building a framework from scratch can be a learning process, but that isnt always the case by definition
&gt;All that being said, anecdotally speaking, I feel like websites totally breaking when you disable JS is actually less of a thing now than it was maybe a few years ago. I can't remember the last time I disabled JS on a non-appy website and had it totally fall apart and/or just not render at all. [www.protondb.com](https://www.protondb.com) to name a recent example that's very much just a web*site*. But you're right, it happens less often. Thanks for the insight though. Being more of a backend guy, I didn't know that &gt;**Every** remotely popular JS framework (React, Vue, Angular, Ember, you name it) supports some form of server-side rendering
Sure. The framework development would be guided of curse. So the feedback would prevent them from missing left and right most of the time. What books would you recommend reading?
😂 maybe..
We live in 2019. Dont delete stuff.
(New) reddit consist of millions of mostly small, individual text snippets which lends itself a lot more towards an app/API treatment. It probably saves a lot of bandwidth not presenting the content and the interactions in a page-based manner (less back and forth between the same stuff). That said, I agree that you need to know what type of site you're building from the start. But if you know at all what you're doing, it should be trivial to turn your HTML-based output into a JSON based output. Just JSON-encode the template variables you already have and output those instead.
What do JS and cloud naitive / lambda have to do with JS at all?
would be -1 == 'z' or == 'Z' in this system?
Backend always API design. Front end always consumes API. A lot easier to scale especially if one of the layers is more resource intensive, more cost effective and say the company chooses one day to develop an app - api already there. Also allows micro services to be created easily.
&gt; Progressively enhanced would work as well though. No, it wouldn't. That was my point. &gt; Just JSON-encode the template variables you already have and output those instead. Jesus ...
&gt; I'm curious how you do it? Mostly I don't. I used to do Symfony+Twig, or Laravel+Blade... Now I just build APIs with Laravel and let someone who actually know what they're doing handle the front end.
Cool. I'll check that out.
AWS Lambda functions are all about keeping compute power to a minimum. When AWS Lambda functions launched it primarily launched around [Node.js](http://web.archive.org/web/20141115184429/https://docs.aws.amazon.com/lambda/latest/dg/getting-started.html)because it's really fast. People who are familiar with Javascript as a client-side language will find Node.js a familiar starting point, rather than learning a new language such as PHP or Python. Serverless Framework is written in Node.js and is arguably one of the most popular ways to orchestrate a "cloud native" approach. I think there's lots of parallels you can draw between the rise of things like Nodejs, Javascript and the rise of Lambda and cloud native. This is just a few I could think of off the top of my head.
What a hopelessly naive question. If you have to ask that you really don’t understand what a software licence is for.
You’ve, what, surveyed all the companies out there?
What library do you use for graphql in php? I've found the most popular one is confusing and hard to set up
That was fixed a while back. Concrete5 is compatible with anything from PHP 5.6.x to 7.3.x &amp;#x200B; As for Postgres, I cannot confirm it for sure but it might work now. Concrete5 runs on Doctrine these days and lets you use pretty much any driver Doctrine will take. But again, that's theory, I didn't test it.
Funny thing with Concrete5, users either never run into any kind of significant issues or find it buggy as hell and all broken up. Not much in between. Usually, the latter is because somebody who didn't know Concrete5 was in charge of developing the website. Not always but very often. If you inherited one of those, I totally feel your pain. Having said so Concrete5 is stable and happily used on thousands of websites of all sizes.
[Professional PHP](https://patricklouys.com/professional-php/) Starts from scratch without a framework (but uses composer and 3rd party libraries) and you end up with a small web application with clean, production quality code. You will learn quite a bit about how a framework works and what it does in the process (in addition to other lots of useful stuff).
I think that's mostly in your head imo. JS and decoupled presentation layers became popular way before lambda. Also hosting presentation layers components is a pain and added complexity for very little reason. 99.9% of people can host using an autoscaling group, ecs, or fargate and not notice a cost difference. Decoupled apps are popular for the learning a new language reason. You aren't avoiding Js so why add unneeded complexity with other languages.
I am training two people who have never coded before right now. I have been mentoring people of all levels of proficiency for 10 years now. Here's how I'm teaching them, in order: 1. How to print out data to the console. 2. What a variable is. (only discuss strings -&gt; int -&gt; float). 3. What an array is. (don't discuss nested arrays yet). 4. What a function is. 5. Have them write an age, in years, calculator as a function. 6. Teach them what a class is. Including how a method is different than a function. 7. Teach them about include and require, and why only (really) idiots use them by and large in 2019 (the company where we work at uses them everywhere, and only one of the devs knows what autoloading is). 8. Teach them autoloading and set up a `spl_autoload_register()` autoloader working on the PSR-0 standard. 9. Teach them about the PSRs. Require them to research PSRs 0, 1, 2, and 4 before I will continue teaching them. 10. Teach them all about composer, how to create projects (composer init), how to include packages (composer require) and, importantly, how to create their own composer packages. 11. Teach them ALL ABOUT modern autoloading and teach them how to set up PSR-0, 2, and 4 autoloaders via composer, and how to include function files, etc. 12. Teach them method and properties scopes. 13. Have them write an age calculator as a class. 14. Teach them an amazing metaphor I invented in 2012 on what classes, objects, interfaces, methods and properties are. Watch their heads explode in significant comprehension and excitement. 15. Teach them for loops and foreach loops. 16. Teach them DTOs + Value Objects. **Explain how the majority of PHP devs rely on undefined, sloppy arrays and how DTOs provide structure that will help them out immensely compared to their "more senior" peers.** 17. Teach them what abstract classes and interfaces are, using the metaphor. 18. Teach them what inheritance is (and why they should rarely use it), again, using the metaphor. 19. Teach them composition. 20. Teach them XDebug, particularly breakpoints. **Explain how not a single developer at the company and very few I've worked with actually know how to do this, and how it will give them a huge leg up.** I encourage them to become the hero of the office, helping out stuck seniors. 21. Start teaching them patterns. Start with the Factory, then Abstract Factory, then Adapter, then Command pattern, finally Strategy Pattern. This occurs over 2-4 lessons, depending on their proficiency. 22. Time to start our own project. I have them create something needs users, etc. 23. Teach them JWT tokens. By this point, they're largely self-sufficient. I tell them now's the time to start taking programming tasks at the company. If the business won't assign such tasks to them, then create their own projects at home or ask the devs if they can give them some simple tasks. I will constantly give them simple projects. Like, for instance, this guy who's taken 3 weeks of lessons, about 2x a week for about 2 hours each (so about 12 hours). We have gotten down to Point 15 above. Yesterday, he created a Random ID generator by, himself, finding and including `ramsey/uuid` and I quickly taught him `str_replace` and `substr()` and in no time, he had created a little composer package that he put in a new git repo and then we got permission from the CEO and he published it to packagist. So when he did this, and gave it to the senior "I know Everything! I have FIFTEEN YEARS EXPERIENCE" guy, who didn't even know about composer until I introduced it to this know-nothing team (only 1 person knew composer, and he's the "junior" but he codes better than all of them) four months ago... well, this "senior" know-it-all was shocked. shocked! "[guy's name] isn't a coder! How could he do this? You must have done it." and the guy got really angry and said, no, [my name] taught me but I made this almost all by myself!" lol, I keep telling him that in just 3 or 4 more months of training, this newbie is going to be a better coder than the 15 year-guy, and that is the power of 1-on-1 apprenticeship with a master craftsman, who's also a skilled teacher, such as myself.
Usually when I see developers gripe about "digging through the code", they mean that they do it 100% manually. And yeah, that's a bitch. 96 out of 100 times, however, these same developers have no idea how to set and use an xdebug breakpoint and step into the code and see how it actually operates, automagically. That's how I can enjoyably run circles around these types. It is really astonishing to me how many PHP devs are like this.
Just use Laravel.
This is fucking sad, man. Use my list and you'll be a lot better off.
This comparison site is handy: https://headlesscms.org/
OP was asking how to teach trainees, now how to troll them.
Thanks for sharing! I will take a look
🤩 brilliant! Thanks for sharing!!!
Javascript has existed since the 90s, decoupling is a concept from the 60s. AWS Lambda functions was launched in 2014, in response to market demand. So yes, it did exist before. The market demand is that server-side Javascript (Node.js) allows you to take advantage of managing compute usage at a more granular level. You can't achieve that same granularity with autoscaling group, ecs, or fargate. Decoupling apps allows you to scale in a much more linear way, which again supports the whole purpose of using cloud native technologies such as lambda functions.
I've personally worked for companies who refused to pay for PHPStorm licenses. You wanna sass off some more or are you actually here in good faith?
This comment surprised me, but it makes sense. Now that I think about it, it's insane how often it happens, that a junior will come to me for help, and all they had to do was go through the code, leave a few console messages, until they found at what point exactly the code breaks. Or they spend an hour thinking the problem is in component X, whereas the stack trace clearly indicates that the component's *parent* is actually missing something or passing props the wrong way... It happened once to me, that I was working on a project with a stack I'd never worked with before... I asked a senior's help at some point after getting weird error messages. He basically told me to come see him again only after I'd made sure I added relevant warnings in my code at potential breakpoints. I never needed to go see him again.
what documentation are you using to do headless drupal? i've tried, but have had issues with creating nodes using the jsonapi.
Our company does it (for the most things at least) like this: 1) Symfony 2) Easy, uncomplicated view (CRUD views for example)? Twig + Symfony Forms 3) Complicated view (lots of transitions, state ...)? Vue.js + Api Endpoints So, once a feature hits a certain complexity it will be build with vuejs and Api calls. That is, because the code generators are just too good. A new entity (even with lots of relations) + a crud view takes like 30 Minutes like this (max). Also there are a lot of nice packages for vuejs which you can take advantage of. One example of the top of my head is vue-good-table, which we simply build an Api endpoint for containing basically a doctrine query builder. Boom, pagination, filtering, sorting, responsive.
Your site is dead. Can't connect.
Yes, definitely, do it. But don't use it for any critical project, because you will soon find various issues in it and will want to either delete it it entirely or make a full rewrite (doesn't play well with strict deadlines and all).
I didn't uploaded. I will upload soon.
Incidentally, the article you linked to says terrible things in regard of how to prevent injection. &gt; For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter. This is terrible. The whole world already knows that "escaping" has nothing to do with injections and should never be used for the purpose, while only prepared statement should be used for dynamic queries. &gt; Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection. This is ridiculous. Whoever wrote this has not a faintest idea how injection works.
I'm bothered by that twig and symfony needs so much freaking boilerplate. I've been using Symfony for developing Web services, and React for front-end. I've always found it hard to serialize stuff correctly, so i've switched to JS (in which you've got JSON serialization for free basically) and GraphQL. I don't think i'm going to get back to PHP ever, concerning web services. I might be tempted to use it for simple websites (WordPress or Magento stuff) because PHP has the best frameworks. But when it comes to webservices and micro-services, it sucks.
I let ppl write code, then improve it by introducing frameworkish parts like routing orms and rendering. I do this with absolute newbs and it works wonders. Also I tell them to stick to php.net for their questions. No guides that I haven't personally approved. After 3 months these ppl are middle devs that only need a little bit of exp.
I was under impression that it's rather a general practice. Reddit, Stack Overflow and other big sites provide rather a generalized page that ways "quick maintenance" something like that. What kind of support you suppose to provide instead?
Just keep with your booze.
1000 times this. /u/ph2ph please pay more attention to this suggestion. From your other comment I have a feeling that you aren't fully realize both the cornerstone importance of this advise and the fact it consists of two parts: how to troubleshoot in general and how to read error messages as a part of the process. The ability to troubleshoot your own code is what makes a programmer out of a trainee. At first people take programming as a sort of Lego. One just bangs some existing blocks together and thinks it's a program and therefore they are a programmer. They couldn't be more wrong. One can only call themself a programmer if not only their program works but if they also can fix it when it doesn't, neither emits any error message. It means they understands what does every single line of code do and so they can add breakpoints and check the intermediate results and compare them with expected values, to find the problem spot.
The classic example of such a difference is a frequent question from such Lego builders: "The database ate up all linebreaks in my text!". For some reason they blame the database, not the browser which ignores the linebreaks in HTML. For them, the web application s a solid black box, not a set of distinct operations such as displaying an html form, getting the data in the php script, adding it to the database, then requesting it from the database, then displaying it in the browser. To realize these distinct operations and to be able to troubleshoot them distinctly is what makes a web-programmer
As much as I appreciate tests (they're the most important thing that's different between my old job and the new one) I don't think I'd like to be told as a newbie that I have to write tests before I code the actual functionality. Write the tests, sure, they're necessary, but when and how to write them beforehand is something that you'll grow to understand. It's just my opinion though, perhaps it's done the way you say in practice and it works.
What’s your list? Now I am curious!
Direct error messages which describe the input an what was expected and a reason why the given input was invalid
Ah, you are talking about input validation. Here I can only agree. But /r/ITBoss was talking of different error messages which are intended for the programmer, not user.
I meant the programmer as receiver of error messages. They should be as clean and helpful for the end user as well as for the dev debugging! Why differentiate?!
Great man! He knows to help in the right way - not by doing the work for you
I can’t agree more!
If you are talking about serving the code for development then PHP has a built in server. https://www.php.net/manual/en/features.commandline.webserver.php Otherwise please be more specific.
Try /r/phphelp
I downloaded XAMPP.So I made an html file and a php one in htdocs like i saw in a tutorial, but when i run the php file(i did a form in html) it juat downloads the php file
Are you running it through Apache? Is PHP enabled?
Never knew I had to do any of those.Can you please message me how to do it?
Try Laragon https://laragon.org/
Will definitely try it
Are you accessing the file via the web server or directly? What are you typing in the address bar of your browser?
I am using atom, and i am using atom-live-server.
I don’t think that’s for PHP. Try https://atom.io/packages/php-server
ohhh yeahh some guy said it doesnt work with php i remember holy shit thank you this may work
I use this to develop: https://github.com/cytopia/devilbox
Mate, go and Google this.
Lumen and Angular (microservice architecture) with a healthy mix of C++ and flask where needed
XAMPP is your friend. Put your PHP files in the htdocs of your XAMPP installation, run Apache from the XAMPP control panel, visit localhost on your web browser and away you go. There really isn't much more too it than that, XAMPP is perfect for development as it takes all the headaches out of setting up a server.
Bad bot. You went out of control on this post :-/
This is why I made InputData [https://gist.github.com/Petah/d90d7258d10e7334dbff](https://gist.github.com/Petah/d90d7258d10e7334dbff) Although its not really a full blown library like yours.
there is only one article pointing on differences and kind of features comparison between available static analysers (phpstan, psalm, phan) [https://badootech.badoo.com/php-code-static-analysis-based-on-the-example-of-phpstan-phan-and-psalm-a20654c4011d](https://badootech.badoo.com/php-code-static-analysis-based-on-the-example-of-phpstan-phan-and-psalm-a20654c4011d) \- please share if you know about more articles comparing php static analysers ; this article is only one I am aware of which is comprehensive enough &amp;#x200B; IMHO I don't think someone can say "this one is better" - it depends on your needs; codebase; and how you are using this tool and obviously all this tools are under relatively heavy development so all this comparison articles etc. are obsolete pretty fast
What's Plaid?
You know, I started having to use NeverBounce two months back, and BOY! Their PHP client is nothing to write home about! As I found myself writing the 3rd PR to them, I suddenly realized it'd take me less time to completely reimplement it. So I did. https://github.com/phpexpertsinc/NeverBounce I [licensed it](https://github.com/phpexpertsinc/NeverBounce/blob/master/LICENSE#L23) under the MIT License, as usual, except I put an exclusion in it: &gt; EXCEPTION: NeverBounce, Inc., is PROHIBITED from the terms of this licese. &gt; NeverBounce, Inc., only has permission to read the content of this project. &gt; They can reach out to discuss terms of a specialized license for their own use or &gt; they can make this their de facto PHP client.
So I'm having a little bit of fun doing some command refactoring, if by "fun" I mean "wanting to throw myself off a bridge into a pit of sharp pointy sticks". The problem I am trying to solve is that I have a large project where most of the data handling is based on Active Record patterns, specifically big fat models where almost all of the business logic is wrapped up inside those models. This is presenting something of a problem as I have recently developed a need to pass additional information deep inside these models which was previously global (statics), no problem at the time with PHP's fresh-slate-each-request, but with moving a fair chunk of this code over onto Swoole, the use of globals is no longer viable and one of my favourite pet anti-patterns is becoming something of a hassle. Much of this data needs to be cached, which usually involves serialization, so short of a complex de/rehydration process, injecting full dependencies into each model is something of a non-starter. My plan at the moment is to put the models on a diet, and move most of the logic in them into single-action classes and use dependency injection to set them all up, effectively writing a mini autowirer that pulls services out of a standard PSR container, plus some other stuff. All of the actions only exist for the duration of the parent call. It works, makes the code much clearer, and I can inject just the dependencies I need into each action class, in effect making a mini class which has only the methods I need to perform a single action. Here's where I want feedback... I feel like I am losing the object-orientated nature that I really benefited from before. Rather than operating with ` $object-&gt;doThisAction($arg1, $arg2); ` I'm having to pass the object to these actions as a parameter: ` $action($object, $arg1, $arg2); ` [they all use __invoke]. Because the object to be operated on isn't known at the time of autowiring, if I wanted to put the data inside the instance to operate on directly, I would need to do one of 3 things: 1. Only autowire in factories. This poses something of a problem as there are thousands of these actions, and I cannot reasonably double up my classes to give each its own factory that takes in all of the needed dependencies, then has a build method that adds one more (kinda kicking myself for going one-action-per-class). 2. Pass a service locator into each action, and let it instantiate services it needs, passing through additional information to the constructor as part of autowiring (think Symfony action autowiring with extra ArgumentResolvers added as part of the -&gt;get(class_id ...)). 3. I could throw the idea of one-action-per-class out the window, combine multiple related functions into one class, and just accept that there may be some dependencies injected that are not used for every method. This seems really inelegant but would open up the possibility of creating a smaller number of factories. Does anyone else have any other suggestions or thoughts on the 3 options above?
That's what PHP started as so you kind of just reinvented the wheel.
Can you elaborate more on that? What do you mean?
&gt; move most of the logic in them into single-action classes and use dependency injection to set them all up Is this a common thing to do? It seems a little barmy to me.
PHP was originally meant to just be a templating language for HTML with all the heavy lifting done by C extensions
To aid with splitting up your code, you could use traits to segment/group the actions logically into separate files. Just a thought. Not sure which DI you're using, but some implementations come with an invoker which lets you inject into arbitrary functions instead of just on constructors. E.g. http://php-di.org/doc/container.html#call which would look something like `$di-&gt;call([$object, $action], [$arg1, $arg2]);` (think call_user_func syntax)
10x you say?
Right now I'm really liking Laravel + React, using [Inertia.js](https://reinink.ca/articles/introducing-inertia-js) to save me from having to deal with writing a router in the frontend. Ends up being really easy to do the frontend stuff. Inertia is framework agnostic, so it should work with whatever you want to use. If you're using another backend framework, there's really not a whole lot to it to make it work. See here: https://github.com/inertiajs/inertia-laravel/tree/master/src that's the entirety of the backend portion. It just deals with making responses with your data, either via a template including a &lt;div&gt; holding the data, or just a regular ajax call.
Without more context, it's a bit hard to make a clear suggestion here. "Because the object to be operated on isn't known at the time of autowiring" scares me a bit, but the `$action(....);` bit is basically just FP instead of OOP. Which is fine, even if it feels a bit weird in PHP. Swoole changes things a lot. I haven't used it personally, but I'm assuming it has the same high-level characteristics of e.g. ReactPHP, where anything that looks even remotely like a singleton can and will leak across requests. When I tried to go down that path, I ended up roughly having to rebuild PHP-DI with _way_ better support for factories to prevent all sorts of weird state leakage. For unrelated reasons I ended up not rolling out React, but the container itself has had no production issues for relatively large-scale autowiring. It's on my github if you think it might be useful, and is fairly close to a drop-in replacement for PHP-DI. On some downstream but semi-related stuff, I ended up borrowing "context" from GraphQL, which (in my case) is just a basically just a strong-typed slice of my DI container (more accurately, it proxies the main container), acting as a service locator. It doesn't feel great from a design standpoint, but is working quite well in practice and with a little bit of tooling doesn't make testing any more difficult (granted, this is in an API that is quite similar to gql, so it translates well). This is more or less option 2 that you outlined. More generally, I'd say start with doing the least amount of work that factors out the globals and other things that are fundamentally broken in Swoole, but minimize the surface area of changes. Don't necessarily treat that as done, but just the first step towards wherever you want to end up.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Hi guys, in advance thanks for your opinions and help about this. &amp;#x200B; Recently I have started to read about Swoole and now I want to start to write some code. I have been searching for an ORM that supports the [Swoole Async Mysql Client](https://www.swoole.co.uk/docs/modules/swoole-async-mysql-client) but I have not found an option yet. I am not sure but I have read it doesn't make sense to use MySQL PDO because it is not async, then I can not use any of the popular ORM like Doctrine or RedBeanPHP. &amp;#x200B; Do you know some async ORM that I can use? Maybe I have not understood correctly and using MySQL PDO is not a problem? &amp;#x200B; Thanks,
It seems we've come full circle.
You missed the context (which is ops fault) . "the php library" referred to this little gem: https://www.reddit.com/r/PHP/comments/cbae56/php_array_implementation_that_consumes_10x_less/
&gt; More generally, I'd say start with doing the least amount of work that factors out the globals and other things that are fundamentally broken in Swoole, but minimize the surface area of changes. Don't necessarily treat that as done, but just the first step towards wherever you want to end up. Exactly. Also, make sure to have tests! Not unit tests but integration tests, so that you can see if your big refactoring breaks anything.
Those are some pretty huge savings if true. 500mb down to 32mb for just double the execution time? Very nice.
Plaid is a service that can provide financial institution OAuth (instead of doing micro transactions) and it also provides transactional data from those financial institutions.
Moderators should remove such low effort content. Not only it's clickbait, the info is inaccurate.
Prepared statements can't be used as prepared statements in PHP due to the nature of its execution model. I.e. unless you're running a process manager that is persistent (multiple requests per PHP "environment") there's no point of thinking about prepared statement reuse. This means if your driver supports parametric queries without preparing them as Postgres does, do that instead. If not, then either quote or prepare-and-run on the fly.
After being on twitter if I use this will I be a #10xengineer?
Well, "seven if statements" is not silly, it's how the thing is usually done. However, if you like something original, there is a trick, I've got it explained in my article [Create a WHERE statement dynamically](https://phpdelusions.net/pdo_examples/dynamical_where) of PDO Examples series: You can add your conditions right in the SQL query this way: WHERE (name LIKE :name or :name is null) in your case it will be WHERE (field = :var or :var =0) which is effectively "if $var === 0, don’t have a clause".
I've also been using an action-based approach in some of our projects at work. I had the same doubts as you at first, but I don't anymore. Let me explain: First I started to think of actions as a lightweight version of "commands" and "command handlers" in DDD. Lightweight meaning that an action combines the two into one. It's not as flexible, but I find that it works for the scope of our projects. No need to overcomplicate the architecture when there's no need for it — I figure. On the topic of the project's scope, we've been working with 2-6 developers on it for the past year, and we'll keep working on it in the foreseeable future. It's in production for 5 months now, and it's the most easy to maintain project I've ever worked on. We're also using this approach in two other projects, but these aren't in production yet. To address the "losing of OO nature" argument: I recently watched a talk by Alan Kay, the one who came up with the term OOP. Interestingly enough he himself says "OOP" with the wrong name, and it would have been better to call it "process oriented programming". In his vision there are objects, but also processes using these objects. It's best to let him share his vision, so here's the talk I'm talking about: https://www.youtube.com/watch?v=oKg1hTOQXoY — I _highly_ recommend it! In closing, I wrote some thoughts down about this action approach in the past, which dive into this topic in more depth. Here you go: - https://stitcher.io/blog/organise-by-domain - https://stitcher.io/blog/laravel-queueable-actions
It sounds like you're moving your logic into what could or should be a command bus. This is similar or somewhat an implementation of CQRS. Martin fowler talks about that architecture in his blog. https://tactician.thephpleague.com/ https://martinfowler.com/bliki/CQRS.html Command objects perform business writes using your auto wiring, other services, etc, (works nice with doctrine repository pattern). Query objects perform your reads. A halfway approach is to only create query objects for complex read operations and using standard service classes for simple ones (get all, get single, etc).
I see what you mean. Here I would say that the best way to provide a programmer with a useful error message is *not to interfere*. Trainees often write a condition for the every step, like if (!fopen("file"))... and then write an error message you are talking about in the else condition. The truth is, *PHP would already tell you why fopen failed*, and in a much more detailed fashion. There are many reasons why fopen could fail and one just cannot foresee them all or tell which one happened this time. So the best a programmer could do is just not to interfere with PHP error messages. I've got an article on [PHP error reporting](https://phpdelusions.net/articles/error_reporting) which I recommend. However, speaking of a case when a programmer have to varidate some data manually and then write an error message, I agree, the manual error message must be as informative as possible.
You should try /r/phphelp
I would recommend developing a CMS, not a framework. It's more fun to build a product than to build the tooling to build any product. It also requires more creativity in terms of execution because you can focus on any aspect you like. It's important to become a fanboy of an ecosystem and try to push its boundaries in terms of ecosystem, code quality of third parties, freshness of packages and identifying the limits. &amp;#x200B; On a side note: Exploring a different ecosystem is important to find the strength of your favorite ecosystem. If you've never used Ruby/Node/Java/C# and you are a PHP developer, you're missing on a lot of information.
They do but they all live in USA, and so we have to wait until they wake up. This sub definitely needs a mod from Europe/East, so we will have a blogspam from India removed on sight. All you can do at the moment is to report and wait
Correction: "which is effectively "if $var == 0, don’t have a clause" with two-equals as mysql does a non-strict comparison.
Legacy: Symfony + FOSRest + React or Angular Modern: NodeJS/Express + Angular (100% typescript both backend and frontend) Cutting Edge: Node AWS Lambda Serverless Framework + Angular
Considering how slow LIKE is, I'd be very nervous using bunch of conditions that might get short-circuited the wrong way, despite most values are set to null.
there is even a native population there, come on
Please describe troublesome activity in more details. Why should any business model need require globals? How many if Then there are? How are methods consuming them related to other methods in models.
Well, technically speaking, LIKE is only slow with a wildcard added in front but I agree, better to check the null condition first. Going to fix the example, thank you.
That's a trick and a really ugly solution to the problem. A much neater way is to use the [Specification pattern](https://en.wikipedia.org/wiki/Specification_pattern) and have your repository translate those to DQL/SQL. ``` $myRepo-&gt;query(ColumnIs::between(3, 7)) ```
&gt;Trying to cast a letter that otherwise doesn't actually represent a number yields 0. B does not represent a number, so it's cast to 0 (basically a default for "we don't know what else to do with this"). This has probably been mentioned before but wouldn't it make more sense to cast it to a null rather than 0? Meaning 0 == 'a' would return false.
I'm kind of with you on this, using JS is *okay* to enhance a users experience. I think my biggest gripe is a lot of developers have never even heard of progressive enhancement, nevermind have the slightest clue how to implement it. Websites should still work without JS but very little of the new 'modern' ones do.
I didn't mean to imply the example is necessarily bad, rather, I don't know what the optimizer will decide. In PHP (and most languages) we do know for a fact that in boolean conditions, the first conditions are executed first. Intuitively that's the case with SQL as well. But SQL has this habit of messing around with the order of execution and I don't trust it. Hence why I tend to always send exactly what I want it to run and nothing else, when possible. Still, neat trick though.
Instant downvote for doing a cheat**sheet** *video*. You went too far
In the range from "every possible way to poop" to "every possible way to transcend existence and find purpose in life" I'd say this is more on the lower end of the spectrum.
I'd like to use swoole and vue.js Swoole written in SOLID principles, Behat BDD, and using PSR is fun. Imagine your api can process request around 100k+ instead of 1k in other framework. and you pair it with Vue.js and progressive web app... its perfect!
You are ideologically opposed to sheet-shaped things, or?
What are sharp objects ?
A video defeats the whole purpose of a cheat sheet
What if it's a video where every frame is a cheatsheet?
It's an enterprise cheatsheet. You tell your boss "I'm using cheatsheets to improve performance" then you spent 16 minutes picking your nose, watching a video.
They are given a more concrete character in the OP's first sentence.
Want a good advise?
Correction, you can't use the same named parameter twice in a PDO query
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Why my post was removed?
Dude you saved my life.After 3 houra of trying XAMPP and WAMP, I got laragon, it first didnt work but they literally told me the problem, my port 80 was occupied.I just did it now, and it works great.I can code PHP, and SQL/MySQL.Just a question, i code in atom and when i dont use php i code using atom-live-server.Can I make laragon's sql/mysql work with the atom live server?
Don't understand why you goes from: &amp;#x200B; &gt;It works, makes the code much clearer, and I can inject just the dependencies I need into each action class, in effect making a mini class which has only the methods I need to perform a single action. &amp;#x200B; To: &amp;#x200B; &gt;I feel like I am losing the object-orientated nature that I really benefited from before. Rather than operating with $object-&gt;doThisAction($arg1, $arg2); I'm having to pass the object to these actions as a parameter: $action($object, $arg1, $arg2); \[they all use \_\_invoke\]. &amp;#x200B; Why not `$object($arg1, $arg2);` ?
Correction, thchnicqlly it's possible however not available with recommended settings. That said, there is a simple code provided to overcome this simple issue
I haven't written much before but after putting something together for the team here I decided to cross post it to [dev.to](https://dev.to). Let me know if anybody has questions/queries. For most of you the post will contain nothing you don't already know but hopefully it is of some assistance to newer devs.
&gt; but with moving a fair chunk of this code over onto Swoole I'm not going to address your options, but just point out, you're probably making a mistake. Trying to refactor a massive codebase, in two separate ways at once, is very unlikely to succeed. You should either clean up the active record stuff first, to make the code manageable, or move it to Swoole first. Trying to do both at once is likely to be just too much work.
dev.to is not the best platform for blogging. Most of articles there are crap written by complete noobs and people habitually downvote after just spotting the domain name.
I believe that without your students help it's impossible get initial upvotes. No matter how many videos you posted here already, people just habitually downvote youtube links without looking, because most of them are, indeed, crap. There must be a positive trend set up first, and then you will get the deserved voting, because of the herd consciousness.
I just dont need a tutorial for namespaces a week. There are a lot good tutorials out there.
You should try /r/phphelp
I am afraid you are not fully correct. There are a lot of tutorials indeed but good tutorials are scarce. /u/arboshiki is a teacher proved to be a good tutorial maker, you can see his posts history. Even if you are personally not interested in learning such a trifle matter, think of people who are only started learning. Even basic things need to be explained.
Sorry, no idea. I've never used that.
Np you saved me
Do you have other recommendations ? I don't like that medium is behind a paywall now (although I did cross-post to there)
Can you also add Judy and Ds to the benchmark?
It is not clear (to me) if you are using a query builder or not but using one can be easier then trying to manipulate sql strings directly. Here is an example using Doctrine's DBAL layer. The goal is to query teams using up to six different IN conditions. $qb = $this-&gt;regConn-&gt;createQueryBuilder(); // Select * should probably be avoided $qb-&gt;select('*')-&gt;from('regTeams')-&gt;orderBy('regTeamId'); // List of possible IN conditions $whereMeta = [ 'regTeamIds' =&gt; 'regTeamId', 'projectIds' =&gt; 'projectId', 'programs' =&gt; 'program', 'genders' =&gt; 'gender', 'ages' =&gt; 'age', 'divisions' =&gt; 'division', ]; list($values,$types) = $this-&gt;addWhereIN($qb,$whereMeta,$criteria); $stmt = $qb-&gt;getConnection()-&gt;executeQuery($qb-&gt;getSQL(),$values,$types); while($row = $stmt-&gt;fetch() { ... addWhereIn is implemented as a trait so it is easy to share among multiple queries: protected function addWhereIN(QueryBuilder $qb, array $metas, array $criteria) { $values = []; $types = []; foreach($metas as $key =&gt; $col) { if (isset($criteria[$key]) &amp;&amp; count($criteria[$key])) { $qb-&gt;andWhere($col . ' IN (?)'); $values[] = $criteria[$key]; $types[] = Connection::PARAM_STR_ARRAY; } } return [$values,$types]; } Needless to say, but I'll say it anyways, make sure that the database column names are properly filtered if they come from outside of your program.
He's refactoring his one huge class with a ton of action functions into many single-function classes (with __invoke). Those single-function classes need the instance of the object to work on, so it needs to be passed as an argument.
I wonder how bad a basic tutorial about namespaces can be.
The fat object is refactored in single method objects who need the fat object?
Yes, but the object goes on a diet, no longer fat :P
This makes no sense.
Are you actually uploading the new files to the right place/server? (sounds silly, but the number of times I've worked on one server, and wondered why the other isn't updating)
I'm not sure what you don't understand. Basically the main model class ended up with a ton of functionality dumped into it, so he's refactoring to pull them out into smaller chunks so that their dependencies are separated and easier to manage.
Just keep an eye on this subreddit
Well I am running a site of my own, so i think this platform is the best :)
From "I know everyone has seemingly moved on to ORMs " and "Dynamic prepared statements" I make it they are using raw SQL
Your own blog
No, it is not worth. PostgreSQL is usually slow than MySQL unless you are doing some complex operation.
&gt;He's refactoring his one huge class with a ton of action functions into many single-function classes (with \_\_invoke). &amp;#x200B; Ok nice so now instead of `$object-&gt;someAction1(...)`, `$object-&gt;someAction2(...)`, he can do `$someAction1(...)`, `$someAction2(...)`, which is cool because now he can decouple his code by injecting a different set of dependencies for each action. &amp;#x200B; There is no need to pass the original object through the `__invoke()` method. The original object behavior should be split into services and injected through the constructor of `SomeAction1`, `SomeAction2` when building them.
I did not realise it was so poorly thought of. Weird that hosting my own content on a platform which does not encourage collaboration or feedback would be seen as more authoritative than one which explicitly does. &amp;#x200B; I appreciate anyone can write a bad blog on [dev.to](https://dev.to) but conversely they could do that on their own website
right place
Seniors could help you but you are not entitled to spend their time. **So, if you want help then make it concise and short**. If you ask "can you help me?, I have problems with this line" = OK, while if you ask "can you help me?, my code doesn't work!". Why? Because you are asking for an audit, it means a lot of time, and everybody must fulfill their own deadlines and training the new guy is not in their schedule.
&gt;I'm having to pass the object to these actions as a parameter: `$action($object, $arg1, $arg2);` \[they all use \_\_invoke\]. Why not inject them in the constructor of the action class?
Back or front end? You could easily be running into a browser cache, and you can't rely on visitors clearing caches/ctrl-F5'ing. Simplest approach is to have a version number in your code which you append via query string to any files that are being included (js/css). Look up 'cache busting'.
It depends on the project. In some projects XDEBUG is painfully slow and some other problems. XDebug has never been a stable plugin. I prefer to write a log file or simple with VAR\_DUMP.
Because they may not be known at the time of injection. For example, if one action looks up a record from the database, and a child action then performs something on that, the child action could not be injected as a dependency of the parent action as one of its constructor values would not yet be resolved.
&gt;Teach them DTOs + Value Objects. &gt; &gt;Explain how the majority of PHP devs rely on undefined, sloppy arrays and how DTOs provide structure that will help them out immensely compared to their "more senior" peers. I give it up trying to force PHP doing that. PHP doesn't work correctly that way. For example, serializing an object is not funny on PHP, it's slow and for what? for a bit of syntax sugar.
&gt; In closing, I wrote some thoughts down about this action approach in the past, which dive into this topic in more depth. That's certainly interesting, that's more or less exactly what I came up with myself and will give me some avenues to research how others have done it. Thanks!
Shared functionality should be injected as services in your action constructors. &amp;#x200B; In your exemple the "parent action" looks like a legitimate action (take user input and return some output) whereas the "child action" looks like a service which cans be shared by many actions.
Easier to filter out the crap when it’s on their own site! I have big RSS reader of decent personal blogs.
I made the switch in my last company and now I'm back to working with MySQL. I really miss PostgreSQL. Apart from some smaller differences in function and type names that can easily be resolved by googleing it was an easy transition. It was definitly worth it for us. The better type handling and the datetime types were quite useful for our application and the more powerful explain responses plus the included performance tracking helped our application performance a lot.
Personally, I have never heard of dev.to so I have no opinion of it as a platform. I thought your article was a well written intro into dependency injection and testing. Maybe the next step would to go over a few different strategies to inject the dependencies and their relative merits (constructor versus setters, etc). I recently learned about php-mock which allows unit testing on functions that rely on Rand() or time() by allowing the test to set the return value ahead of time, to look for edge cases.
&gt;PostgreSQL is usually slow than MySQL This is simply not true tbf.
I personally prefer postgres over mysql for many reasons like datatypes, utf8 support, json, geographical data. For the vast majority of apps they're both interchangeable to be honest, but when it comes to more complex data imo postgres really has the upper hand. Command line postgres client however is pretty awful compared to mysql client.
If you're just doing basic SQL, there's no significant difference aside from some syntax idiosyncrasies. There are some differences in initial setup of the server itself but nothing more complicated if you know how to read manuals. &amp;#x200B; From personal experience PostgreSQL makes it easier to go beyond typical table CRUD -- it supports several languages allowing you to turn the database into a full fledged application. While not unique features, I've found them easier to make use of using PostgreSQL. Other niceties include things like Array/JSON datatypes for you columns and table inheritance. Overall, I prefer it to MySQL.
Fyi, MySQL has utf8 and json. There's an extension for geo stuff.
FWIW, here's a case for staying, maybe? Not that their requirements have anything to do with OP's but I thought it was an interesting read given I usually see MySQL to PostgreSQL articles. [https://eng.uber.com/mysql-migration/](https://eng.uber.com/mysql-migration/)
It's active record, i.e. each instance of the model objects map to a row in the DB. This isn't something you'd want to put in the container to inject. He still needs to pass that object instance to the action, and the convention would be as the first arg.
You could always follow users you like on [dev.to](https://dev.to) or similar sites. &amp;#x200B; That being said I am going to get my own site back up at some point so when the time comes I will just post there.
thanks. I am looking to contribute more moving forwards so will bear those topics in mind for follow up posts.
It also has some geo support out of the box. I’m not familiar enough with PostGIS to say how the features compare but it has worked well for all of the use cases I’ve had.
Most of my tutorials posted here on PHP subreddit are the most upvoted post of the day or the second most upvoted. I get more positive comments then negative, So I think I am not spamming the people here. I am trying to share something tiny, but worthy to beginner developers using reddit, share my many years of experience and it turns out to be helpful for a lot of them. So I think that I should continue posting useful posts until they are useful.
Back in like 2010 it would have been worth it but with the improvements to MySQL in 5.7 and also the new features in MySQL 8, there isn't really a reason to switch anymore.
Went from MSSQL to PostgreSQL 11, I really like the native partitioning and the admin interface. Secondly writing Stored Procedures in python makes life a lot easier.
It's so worth it!!!! Materialized views, inherited tables, great triggers and better sprocs. What's more, you dont' run into WEIRD MySQL edge cases, like trying to put a view into a JOIN (won't work in MySQL, what the fuck?!).
&gt; it was an easy transition. It's worth noting that it is statically typed. That means that where MySQL will turn an empty string into a `0` number, Postgres will throw an error. Where MySQL stores booleans as 1 and 0, Postgres stores them as actual booleans. It's not a terrible transition, but the static typing will be difficult if you were not already treating your database this way and/or do not have a good test suite to confirm that you are passing valid values. A good DBAL/ORM definitely makes the transition much easier.
DDL in PostgreSQL is [transactional](https://wiki.postgresql.org/wiki/Transactional_DDL_in_PostgreSQL:_A_Competitive_Analysis) , so you can wrap commands like "ALTER TABLE" into a transaction block. This is very useful for migrations.
Thanks
For production applications, you should use sprocs as much as possible. You'll get slightly better performance out of them, injection is a lot harder, and you can hide the implementation details of how you retrieve your data better. Additionally, your DBA's can do performance tweaks without touching your application too much. My database needs also complex because during updates I need to store the user who updated with a timestamp. On top of that, I keep a record of all previous values the record held so I can replay. All of that makes updates and deletes a bit on the complicated side. I really don't want all of that in my code.
I find myself in the same situation. I’m considering a static site on Github Pages.
You should add a short description of the video here as well. The reason you get downvoted first is because no one likes a "tutorial" being added that doesn't at least talk about about what it's doing. Also, personally, i don't watch video tutorials. I prefer seeing written code on a web page. A page that walks you through the code and you can copy/paste the parts so you can test it yourself as you work through it, is much more useful from a learning point of view. To me.
In my experience, that you are asking this question in this manner indicates you should not make the change. And I would say the same thing if you were considering going the other way. Changing such a core dependency should never be taken lightly, and absolutely should not be done without very good reasons. Since not a single specific reason was given, I have to assume that's not the case here. In short, going from MySQL to PostgreSQL is something I would only do because I felt like I *needed* to, not because some people say MySQL "ain't that great". That's... arguable... but beside my point.
I guess I should say that we started a completely fresh project with PostgreSQL so there wasn't any code that needed to be converted. But you are right, that that might be an issue if you're moving from one database to the other. MySQL with its lax typing was a good fit to earlier version of PHP but with more and more code being strictly typed or at least type hinted PostgreSQL helps to keep these restrictions in the database as well.
I'm in the process of switching and arrays are great. I know you can use JSON or whatever in MySQL, but having it as an actual supported data structure with its own ways of searching is great. It's also forcing me to properly learn SQL rather than have MySQL's crutches propping me up, which can only be a net positive.
Huh? I use the same named parameter repeatedly just fine with emulated prepares on or off. That's with postgres; is this just an issue with the mysql pdo driver?
I think what u/rmbl_ is meaning by "transition" is that they used postgres at their previous job. I don't think they're saying that they actually moved from MySQL to Postgres within one application. The statically typed nature of Postgres is much easier to get used to when you start with it as opposed to moving a system over to it.
php script [https://www.phpscripttr.com/vizer-ucretsiz-wordpress-film-ve-dizi-temasi/](https://www.phpscripttr.com/vizer-ucretsiz-wordpress-film-ve-dizi-temasi/)
Short description? Agree... I personally also like written tutorials. I can have an overview of the tutorial, copy and paste code, search for some words. Convenient... But I discovered, that for beginners video tutorials are much more helpful. As soon as they reach some level of knowledge they prefer written. I helped many developers to grow from knowing very basics into the intermediate level and most of them were just Like I described.
I'll be honest, 95% of people/companies won't notice any real difference. If you're used to one or the other, use that one until you have a specific use case where it might matter. Once you're at a scale where it actually matters, then educate yourself (or bring in an expert) and make the choice/decision/switch.
I've used PostGIS and MySQL spatial functions quite a bit. They honestly serve the same exact function/purpose 99% of the time. You only need PostGIS if you're doing some serious geographical/scientific work.
&gt; Also, the performance is a LOT better. Uhh, what? Got anything to back this up? In a generic environment, neither one has any significant performance increase over the other. &gt; What's more, you don't run into WEIRD MySQL edge cases, like trying to put a view into a JOIN (won't work in MySQL, what the fuck?!). This is well documented and not an edge case. If you Google it, you'll find the reason why. &gt; Oh oh oh and its support for JSON is AMAZING! You can do SELECT jsonColumn-'person-'name' to get { person: name: "Mark" }. You can do this in MySQL.
There is not much information about this issue. All I was able to find is pretty much summed up in [this answer](https://stackoverflow.com/a/42244257/285587)
I've been using MySQL since 1999. One of the things that disgusts me the most is IT "experts" writing or stating claims that are untrue. &amp;#x200B; Before you make a switch from X to Y, you need to ask yourself what is it that you expect to **gain**. &amp;#x200B; There are two valid reasons for switching from X to Y: 1. You **gain** something - performance, readability, scalability, etc. 2. You **simply want to** switch based on personal, non-objective reason &amp;#x200B; MySQL 8.0 is an amazing RDBMS. I won't list MySQL vs Postgres, Postgres is amazing too, but it's sufficient to say I'm working with MySQL databases that are in petabyte range. It does the job, if you know what you're doing. There's no software that will correct inherently stupid, incapable or uneducated person. &amp;#x200B; Don't listen to opinions blindly. Try the software yourself. If you like it, use it. In my opinion, liking something is the best reason to use it.
Keep up the good work :)
&gt;window function MySQL 8 does. The rest of your post is not worth responding to. It feels like people against MySQL in this thread haven't looked at MySQL 8 (some not even 5.7). Which is ok but they should check out the new stuff. You are just obnoxious tho.
Probably only for the licensing, lots of entities avoid copyleft like a plague.
Why then GitLab ditched MySQL support
Dude what? https://dev.mysql.com/doc/refman/8.0/en/window-functions.html
Apparently because they lack the knowledge to use mysql the same way they use postgresql (so for them its easier to just drop it).
Thanks for the link. If you click through to the referenced page in pmjones' blog, it says at the top: &gt; UPDATE (2016-05-30): Rasmus Schultz comments that "this does work – it was fixed after this article was published." So apparently the issue described herein has been fixed. I'll leave the article in place for archival purposes. So sounds like it might actually have just been some temporary breakage.
The fact that you are asking makes me think it might not be worth it for you :) That said I wouldn't be able to go back to MySQL, there are so many reasons to use postgres. Here is my list: better query planner, better type management, more/better indexing options, better fulltext search capabilities, schemas, faster alter tables, concurrent indexes. I haven't used MySQL intensively since 5.6 so some things might work better now.
More like "how to make a title not including endtest shit"
Your info about MySQL "aint that great" is likely 10 years out of date .. This is like comparing current Windows 10 and Apple MAcOs Mojave , back in the day you could make arguments for one or the other, but really today their equivalent for the vast majority of applications. I've worked in both MYSQL/PostgreSQL , and once you master some of their idiosyncrasies, you quickly realize they are more or less equivalent from the end user (aka app developer) perspective . Both are powerful mature RDBMS that are are par with in many commercial RDBMS. A good database is one that disappears into the background and just works, and most of your focus in on the queries, stored procs, replication etc. and any of the other business logic that you need for your app, and both those systems work perfectly well at that.
You really ought to reevaluate your usage of the extension and your expectations of it. It's a debugger, the whole nature of the extension means it will add an overhead to the execution of PHP, it's not meant to be use in production.
Api with Slim, Eloquent and twig for pdf and email templates. At the end you will use the same libraries but with less bloated structure. Frontend AngularJs and React.
Why then Uber ditched Postgres support
It doesn't list the talk for "25 Years of PHP (by the Creator of PHP)" posted 4 days ago on this sub? https://old.reddit.com/r/PHP/comments/cbtgq3/25_years_of_php_by_the_creator_of_php/
Not that I know about yet. Maybe make one yourself? I would join for sure! This is a coding discord in which I currently stay : https://discordapp.com/invite/hZM8Z3
At least get up to date on MySQL 8 features instead of rehashing shit from 2003.
No. There are maillists only.
"MySQL ain't that great" is more of an opinion than fact. In my humble opinion, a thing that powers wikipedia and millions of wordpress blogs on the planet ought to be at least "practically good" if not great! A whole lot of "new age" coding experts have hijacked the narrative these days who judge the greatness of a technology based on pedantic stuff like syntactic sugar and aesthetics, and things like whether or not it supports anonymous function. These are the same people who call jquery/PHP *ancient and useless* despite it being used by 3000+ IT companies of the world! I wouldn't take the 'judgments' of these new age mongers too seriously if I were you.
&gt; allowing you to turn the database into a full fledged application Not that you should. I live in sproc and trigger hell with a legacy SqlServer database. Being able to write those in pl/python or whatever other language would cause alcoholism. But postgres is more a data platform than strictly a RDBMS these days. Geospatial? Check. KeyValue? Check? Time series? Check. PubSub? Check.
Because React doesn't need boilerplate? And what about the insane job of keeping the dependencies up to date AND without some conflicts between libs?
What do you mean?
I only mention that in terms of potential. It only makes sense to do so if it's the main platform and it's actually thought out. This problem of ownership rears its ugly head all the time. I'm a little numb to it just cause I enjoy the pain of C++ :)
Because: 1) they needed to drop 1 database for maintainability issues (it really doesn't make sense to maintain 2) 2) they use Postgres internally and most devs they have preferred postgres. &amp;#x200B; There was no technical reason. At least, not as far as stated in the blogpost about this decision.
React doesn't claim to be a full solution. It's intent is to solve UI problems, to which you add whatever you want. This is by design. Symfony claims to be a one-size-fit-all solution. Althought I love Symfony, to me it failed in this matter compared to Laravel. It's normal i'm expecting my development flow using a framework to be way more faster and with way more boilerplate than a UI tool.
This sounds silly but i made a simple solution for this using version number. The problem is with cauche, and i added the concept of version no for all js and css. I user ./style.css?locver=5, and once i change the css or any one i change the global version to 6 and then 7. This change reflects and pulls fresh data of version7 . Done issue fixed.
I switched a few years ago, wish I did it sooner. Wasn't very hard. &gt; What were the biggest hurdles? Mainly just that it's stricter, i.e. you can't drop views that other views and depending on, and stuff like that. But overall it's all a good thing, because the DB is safer in general.
I know this isn't the topic, but I strongly encourage anyone to DITCH MySQL in favour of MariaDB (unless the specific new functions in MySQL fill your niche). MySQL is was an amazing piece of software, then Oracle bought it, and as you know more or less anything Oracle touches slowly turns to shit. The creator of MySQL forked it and created MariaDB, which now has a very large, solid company behind it, and while it might not support some niche functionality like Spatial Analysis functions, it also doesn't pull bullshit like locking features like encryption-at-rest behind a grossly overpriced Enterprise Edition. And the company behind it is super solid.
React is great but yeah that's why I prefer Vue, way more easier to update as the store &amp; router are in sync with the main lib. To each is own.
That's the choice of Vue to deliberately take store &amp; router into their ecosystem as to reduce the entry level to the lib. It contributes a lot to their success I believe.
&gt; In my humble opinion, a thing that powers [..] millions of wordpress blogs on this planet ought to be at least practically good, if not great! I mean, having that run that hot pile of spaghetti with a serving of horrid architecture sauce doesn't make it great. If anything, the association with Wordpress one of the things that reflects on PHP most badly.
The performance of Postgres actually gets a LOT worse the larger the DB has to scale. [Here are some good reasons Uber ditched Postgres for MySQL](https://eng.uber.com/mysql-migration/)
I agree with this statement. Having worked with both systems, it's all in how you use the tool for the job. Recently have built a reporting tool that uses databases gargantuan in size. The reports have to be generated in real time, as they use variables from various sources, have to deal with currency exchange values, etc. MySQL is handling it like a champ, there was never a debate what to use for the project. Aside from a few particularities that are packed with PostgreSQL, you might as well flip a coin. If you know how to use them it makes no difference.
&gt; BTW, the PHP team forced Rasmus to implement anonymous functions in 7.x branch just to conform to the whinings of these new age experts. Totally unnecessary and a huge waste of time IMHO. This statement is not just silly it reached the point of just being stupid. Nobody forced anybody to implement anything anywhere. Also note that anon functions have been in the language way before 7. You might be confused about anonymous classes instead. Just as you are confused about how features are being added to the language or how involved rasmus in that process. In case you are wondering everything you said in that statement is wrong and stupid.
&gt;judge the greatness of technology based on pedantic stuff like syntactic sugar and (...) whether or not it supports anonymous functions Preach, brother!
I’d recommend posting this in /laravel.
I've switched to Mariadb years ago because I don't like oracle as a company and prefer open source (not even sure if mysql still is OS, if so, apologies). I've heard many people say postgresql is better, but I've never understood why and I haven't really needed more than mariadb. If I find a use case where I need it, surely I'll use it.
I didn't know that. That is really cool.
Have you worked with Mariadb as well ?
&gt; lots of people say MySQL ain't that great. I think the problem isn't with MySQL, but with toxic opinionated trash people read online. Next they'll be body-shaming Jason Momoa, and say that Star Wars and Game of Thrones aren't that great. ;-)
&gt; Nobody forced anybody to implement anything anywhere. Also note that anon functions have been in the language way before 7. You might be confused about anonymous classes instead. Just as you are confused about how features are being added to the language or how involved rasmus in that process. &gt; Yep, it was anonymous classes, not functions (sorry, I goofed that one) but Rasmus [admits it himself here](https://youtu.be/fYTKm2oUzAg?t=946) that he had to approve it despite he didn't like them.
MariaDB is pretty much identical to MySQL (other than missing the proprietary Oracle stuff)
That talk has been linked tens of time already. Rasmus has been doong the same talk for the past few years, always a little updated
I switched from MySQL to Postgresql purely for the native UUID data type support in Postgresql.
As mentioned in the sidebar, this question is better suited to /r/phphelp.
I switched from MySQL to MariaDB because Oracle. No technical gain, the same would be true for 99% of projects switching from MySQL to PostgreSQL.
&gt; having that run that hot pile of spaghetti with a serving of horrid architecture sauce doesn't make it great. That can be said about a whole lot of things, even C code is spaghetti and so is that of C++. But will you stop using Windows/Linux/OpenOffice/MSOffice just because of that? &gt; If anything, the association with Wordpress one of the things that reflects on PHP most badly. Au contraire, Wordpress and Drupal are saviors when fanboys of X language point out PHP's weaknesses and ask what has PHP achieved? Despite all their pretty and beautiful syntax, neither Python nor Ruby has managed to churn up one Wordpress, one Drupal or even one Magento! Those languages are just there for creating beautiful frameworks, not real world and practical apps. If spaghetti code is really that bad, why do you think 70% of interwebs is still powered by Wordpress or Drupal? Don't you think at least some of them would have managed to switch to something else by now? Or do you think that all those businesses are dumb-wits and you alone are a genius?
Again you don't understand rasmus' involvement in the project nor how the project is run. He does not implement any features (are at the very least very rarely), nor does he decides what gets added to the language or what not,not does he decide what is being worked on by anybody.
Considering that he is the creator of PHP scripting language, people like you (and those who implement these features) should have some respect for him. But then again, showing respect or compassion to someone is the last thing I expect from this current generation!
I am I a similar boat. How are handling large size of data for reports ?? Am facing memory exhausted errors here and there ??
We run on two servers with generous amounts of memory. Never had an error like that. But I don't remember ever forcing such an error from my db. Profile your queries, see where you're lacking, optimize, optimize, optimize. Split very large queries into smaller ones, use swap tables if needed to store temporary sets of data, etc. Nobody can really tell you an exact answer to your problem if you they are not intimate with your app :)
&gt;My apologies. I will post there.
And what generation may that be? I do not show disrespect. Unlike you I just understand how the process works and what people's involvement in it is without making unsubstantiated and uninformed claims. I am more than happy to give credit where credit is due, but giving him credit for the improvements / features of the last years that make PHP still a great language that I more than happy to use is just wrong.
No problem. Good luck finding the solution.
It is a plague. Anyone who did open source responsibly in the early-to-mid 2000s remembers when it was a global pandemic. Now, there's non-FSF licensed stuff for almost everything (except Blogs like Wordpress/Drupal).
&gt; Over the years MySQL has been nothing but a pain in the ass. It's support for modern SQL features is limited, That's what they said: https://gitlab.com/gitlab-org/gitlab-ce/issues/51173 And that's my experience, too.
Wow, it's the only time I've ever heard of a project moving from Postgres to MySQL. It's almost universally the other direction.
I wrote this little calculator to help people estimate how much their PHP app would cost on AWS Lambda. It isn't restricted to PHP applications though, but I focused on the main PHP use cases: APIs and websites.
Last I checkes, Maria doesn't have the full set of JSON function like MySQL. I'm sure it coming. Maria does some other engines thou. Now if there was an ORM that would support all the features of MySQL/Maria, such as cross schema (DB) forien keys, but that is a topic for another discussion.
Actually Oracle bought, Sun bought MySQL.
https://mysqlserverteam.com/mysql-8-0-uuid-support/
I understood some of what you said there...
Is this secure? I don’t think even PHP 5.6 gets security updates anymore. You should be on PHP 7.0 minimum...
&gt; your DBA's can do performance tweaks without touching your application too much But you're counting on your DBA to understsand your application's business logic enough to not break it when doing these "tweaks". You can use sprocs, but they should be defined in your your code's repository, and not under the control of your DBA.
Your Medium posts are behind a paywall by default (which sucks) but you can turn it off. Unless something changed recently that I don’t know of.
Yes.
Fair enough. It was the first time I saw this presentation and a good part contained upcomming updates.
Just use this [https://phptherightway.com/](https://phptherightway.com/)
I see a lot of people dumping a link to that site the moment somebody mentions "php tutorial" and albeit a good resource it is mostly utterly useless for beginners.
That is a different problem. There is an initiative to upgrade everything but the servers have to be rebuilt first and it's a big deal. Also this is all internal to the network nothing is public facing. So meanwhile I am trying to figure out if this is even possible. Googling on the internet doesn't seem to show any examples where be have done it. I would have thought that it was a common practice.
This has to be one of the best and ny far the most honest post i have read. Ever. The last bit, liking something, is an absolute truth.
This link \*is\* the reason we decided to switch over to Postgresql. I don't want to write queries where I have to run a system level function to query against the primary key. That's not real UUID support. That's some band-aid sh\*t right there.
I think this is the best direct answer. If those things would make OP's life much easier, then it might be worth a switch. Otherwise, MySQL is fine.
You sure that's correct? I just my own stuff, but after adding in some of my stats it comes up to 100 times what I actually pay with my own servers.
You could just use a char(36) column and use as you do in Postgres. It's not complicated.
If/when we scale out of Postgresql, we'll most likely make the move to Cockroach DB (which uses the Postgresql driver BTW.)
I just wish sysadmins didn't have this apparent burning desire to stay on MySQL 5.6 forever.
Better respect of the SQL standard? 100% worth it
Do you have more details?
I added [Ds\Vector and Ds\Map](https://github.com/jgmdev/lessram/tree/master/ext#benchmarks), but Judy hasn't been ported to PHP 7 so I discarded it, also the Judy C library is huge.
That's not the same thing. Otherwise I could just create a 36-character column and shove a string in there in Postgresql as well. Postgresql has a UUID data type for a reason: there's a lot going on under-the-hood. Internally, Postgresql is storing the UUID as numeric (binary) data. But when the field is presented in query results, it's presented in its human readable form: a UUID. No need for a band-aid/crutch function call to convert data between formats as in MySQL. And because it's being stored as binary data, there are already better performance implications when indexing as binary vs text.
Sure, I'll give you that. The MySQL implementation is not as seamless as it should be.
&gt; You can use sprocs, but they should be defined in your your code's repository Well, yes. And we do that. Generally they are written in collaboration with data modelers, DBA's, and developers. I think it goes without saying that if your code is written in silos you are going to have trouble.
If you're just using the basics and something like php for the complicated stuff, there's only really the syntactical difference in the use of quotes. It's a very similar language overall.
For most use cases, either will be fine. For my last project, I used PostgreSQL as we felt that the full text search capability was better - I liked that full text searches can be updated in triggers, and different table columns can be weighted differently.
What are the better indexing options?
OP (Endtest) is spamming up tech subs, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus), [5](https://www.reddit.com/user/jos_cu_klaus), [6](https://www.reddit.com/user/sa_vina_werner), [7](https://www.reddit.com/user/ihavelepower), [8](https://www.reddit.com/user/viorica_presedinte), [9](https://www.reddit.com/user/werner_sclavul), [10](https://www.reddit.com/user/basist_infect) ultimately in an attempt to make you pay money for the service he runs (endtest). [This is the kind of person you're dealing with here, still want to give endtest money?](https://imgur.com/xyfZ59P) See for yourself. **Vote and report accordingly.**
In addition to the above, I’d suggest finding out what the software you’re pairing it with is _actively_ developed with. You may find that it supports MySQL but a majority of people develop the software against Postgres for example. I know that’s certainly the case with the software I work on.
I have used both Maria and percona, both of which have had inconsistency bugs with mysql. The work 99% oc the time but its that 1% that can really bite you.
I switched years ago and never looked back. There are a number of reasons -- from security to features to performance. Both are fine for smallish sorts of environments where basic RDB functionality is required, (I still support both, but prefer mariadb to mysql) but I have come to prefer working with postgresql. Of course, I get a bit nervous when companies like Oracle start getting involved with anything open source, so there is that too.
&gt; PHP 7.4 will throw a notice for invalid array accesses like $null[0] or $int['foo']. Previously this silently returned null: I'm torn on this, returning null for a non-existing key position in an associated array seems rational to me. You can then check the thing you tried to get out to see if it's null or not. Now we will have to use `array_key_exists` all the time.
What details do you need? I got some 10 mill hits per day, added that plus the page size in your calculator and the monthly came up more than I paid for the servers. ( Hosted in a colo facility ) It just seemes way to high to be real...