 $sql = 'SELECT * FROM shashi_users WHERE name='.$uname.' AND password='.$pass; Also note this is a VERY bad way of doing it, not just because you're not using prepared statements. In addition, this is not a support subreddit. Please visit /r/learnphp in the future.
[The manual from PHP.net about prepared statements.](http://php.net/manual/en/pdo.prepared-statements.php) Please do the PHP community a favor and always use prepared statements.
I totally understand the concern of bindParam but note that I have to use mysql_connect driver because of legacy issues with server and the current project.
I'm also speaking there as well :-D
If I'm not mistaken, all these tools (at least PhpStorm's plugin which I also use for other projects) verify the whole file. If I want to modify a few lines in a large file with improperly formatted code, I'll get tons of errors. I only need to see the errors related to lines I'm editing.
Thank you. I haven't seen it yet. AFAIK, PHP_CodeSniffer 2 will also support automatic formatting. I'll definitely take a look at them at some point.
 $sql = "SELECT * FROM `shashi_users` WHERE `name`='{$uname}' AND `password`='{$pass}';" **Side Note:** Specifically select the columns you want instead of using `SELECT *`
best thing someone I mentored ever said to me was "Thanks for making me learn and work in terminal."
The PHPAcademy and PHPtheRightWay that people have mentioned are really great resources so I second them. But if you want more personal/interactive information, there are also some sources of online PHP training that you can look into as well. Such as [Zend's PHP Training - http://www.zend.com/en/services/training](http://www.zend.com/en/services/training) and the online training offered by [php[architect] - http://www.phparch.com/training](http://www.phparch.com/training?utm_source=reddit&amp;utm_medium=website&amp;utm_campaign=training&amp;utm_content=eliw) ... *Disclaimer* - I'm one of the owners of php[architect]
Normally you shouldn't need to worry about it, the opcache will automatically detect that your files have changed. If you do need to flush it manually though, besides the ways mentioned before, you can also just restart your webserver. An Apache Graceful restart, for example, works smoothly.
I would really recommend this: http://buildamodule.com/collection/php-programming-basics
Yes, they will complain about the entire file. Chances are your codebase needs it if you're implementing CodeSniffer anyway. It forces everybody to clean up as they go. However, yes, it is a little rough getting started with it because of that fact. I think it's better than just forcing the lines you touch to be clean from a given point in time onward.
Not sure what piped input you mean. In my case I [copy](https://github.com/morozov/diff-sniffer-pre-commit/blob/master/src/DiffSniffer/Changeset/Staged.php#L74-L75) changed files into a temporary directory, run code sniffer there and then [remove](https://github.com/morozov/diff-sniffer-core/blob/master/src/DiffSniffer/CodeSniffer/Reports/Xml.php#L165-L257) all the errors which are found in lines not affected by commit or pull request. As for new features: &gt; Allow user to configure hunk vs full file mode via `git config` If I understand it correctly, it's probably solvable by using some different type of report that CodeSniffer already supports (this is already on my TODO list). Otherwise, please explain what you mean here. &gt; Advanced prompting Do you mean static message explainig the reason why commit is rejected? Or some detailed explanation of every violation of the standard? &gt; Displaying issue errors in-context. This is also probably solvable by using different type of report. Thank you for sharing your experience, it's really useful!
You could try Eloquent (https://github.com/illuminate/database) with this add on Mongo package (https://github.com/jenssegers/laravel-mongodb). Not sure how well it works as I haven't played around with it.
We do this too, it's easy and works great. Just send the signal to the pid of the master and it will take care of everything, without downtime.
okay, why is that expected to print 3 but not 1? O.o
Oh, that raises a good point. Not all of libsodium's features are in the PHP extension. I'll bug jedisct1 and see if he wants help writing the ext docs :)
I'd find them and bring a shovel.
BTW this concat didn't worked.
That is default behaviour - but not optimal. 
I don't think you undertand what "intended" means. Indeed, you even contradicted yourself by conceding that it wasn't intentional: &gt; Yes, it was probably unintended Bugs (like this one) are not intentional. Backwards compatibility is only guaranteed for intentional features. Bugs get patched, and break BC *all* the time.
I've always found that when I need to execute quick PHP snippets for testing, [Textmate's Shift+CMD+R shortcut](https://www.evernote.com/shard/s127/sh/06a0ce13-23a7-491b-9afb-314073457f9d/f7219c80c5cc1453bed2063769bcf781/deep/0/Textmate-executing-PHP.png) in a PHP file is the fastest way to get it done.
&gt; The == operator is already non-transitive so it wouldn't make it any worse :) It is in *some* cases, yes. Adding more cases (especially more common cases) *would* make it worse, though. &gt; Do you think a newbie who doesn't know/care about types (a crowd which PHP specifically caters for) would understand why md5('240610708') == md5('QNKCDZO') returns true? There has been many, many public exploits based on this, so I'd say no. A few points here: * PHP does not "specifically cater" to newbies. It's an easy to learn and easy to use language, but that's a far cry from catering to newbies. * Said newbies are going to fuck things up in *any* language (the examples are too numerous to even try to cite here), and designing PHP around people like that is a recipe for disaster. * You can't use this argument when "solving this problem" introduces cases like I mentioned above, which are equally (if not *more*) newbie-unfriendly.
I dont actually think goto should be removed, the symfony router makes a pretty good use of it.
Furthermore (unless this has recently changed) if you use FastCGI/FPM each worker thread will have its own cache, so if your threads are frequently being destroyed/created they will not benefit from opcache.
Thanks, I'll check it out!
Thank you for this! In that first link, the php to delete a record is this: &lt;?php // Connect to MySQL // Delete Bobby from the "example" MySQL table mysql_query("DELETE FROM example WHERE age='15'") or die(mysql_error()); ?&gt; Do you know how I can automatically set the id instead of age so it knows which record to delete?
Keep reading. You have a lot ahead of you. 
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to [##php on Freenode IRC](http://webchat.freenode.net/?channels=%23php).
I just fixed you error, but you need to make it work. The text is contained in single quotes, to escape it you add a . $world = 'World'; echo 'Hello'. $world; //Hello World echo 'Hello'. $world .'!'; //Hello World!
please don't recommend tutorials that use mysql_query. the extension is deprecated.
Unfortunately I haven't had much experience with external SOAP libraries, but with a tinsy bit of work you can extend the PHP SoapClient to parse XOP. I've always done this by extending the __doRequest method in SoapClient, then write a method to look for XOP data and decode it. I can dig up some old code if this sounds like it would be of some use to you? Forgive me, it's been a while since I've worked with this stuff! (thank god)
 mysql_query("DELETE FROM example WHERE id = $_GET['id']"); Jokes! Don't do this. Ever. Seriously.
I would if there were any comprehensive tutorials. /u/boots135 is clearly a beginner and needs the complete picture. If you have any suggestions for replacements, you can post them too.
Please don't use the mysql_query() function. It was outdated years ago. At the very least, use mysqli..
Thankfully the API is somewhat sane instead of trying to be clever like `Sodium::chloride($something);` or `Sodium::seaSalt();` like some packages do...
Check the disabled functions option in your php.ini file to see if php_info() is disabled. That has happened in the past with me.
Assuming this is what OP meant... I use it all the time and it's great.
It looks very similar. I seem to recall the github was more recently updated though, and was more of a stable product than labelled as 'work in progress' Maybe it is the right one though, I'll check it out thankyou :)
you don't have to see the whole staircase, just take the first step... aka just do it...build something
Thanks, thats good to know. Im always a bit nervous when a repo hasn't been updated in ages, yet there's a bunch of outstanding issues (Granted they're probably edge cases or maybe not even real bugs)
Yeah, right: https://github.com/leroy-merlin-br/mongolid/blob/master/src/Zizaco/Mongolid/OdmCursor.php#L52 https://github.com/leroy-merlin-br/mongolid/blob/master/src/Zizaco/Mongolid/Model.php#L310 https://github.com/leroy-merlin-br/mongolid/blob/master/src/Zizaco/Mongolid/Model.php#L399 https://github.com/leroy-merlin-br/mongolid/blob/master/src/Zizaco/Mongolid/Model.php#L588 https://github.com/leroy-merlin-br/mongolid/blob/master/src/Zizaco/Mongolid/ServiceProvider.php (WTF is this?) And that's just bad design decisions, all over the project. Over and over again. Have you heard about "Tell, Don't Ask"? "Encapsulation"? "Law of Demeter"? Practice some object calisthenics and refactor that. Now, about being professional and creating a decent library: have you even heard about PSR 1 &amp; 2? Even if you don't want to follow that, stick to your own coding standard for christ sake. You have a nasty mix of "public function" and "function", absolutely no coherence in control structure indentation &amp; bracket alignment, etc. Choose a standard and stick to it, stop coding like a crazy person.
if you have that old code, it might be of great help to me. I'd really appreciate taking a look at it! 
Could you provide some more information, like what features it has right out of the box (assuming I don't know what Pico is).
So... What is preventing me from just using Pico instead of yours?
As the documentation points out, you need to be careful about which php 5.3 build you use. In reality, you would be *much* better off just upgrading to 5.4.
Nothing at all. If you prefer Twig templates, underscores in method names and slightly less flexibility when it comes to context, then by all means use Pico. I think Pico is great, considering its size and feature-set, which is why I modelled the features of this around it. But this code is neater and more testable. I haven't written the tests; as the API has changed so rapidly in just two days, but Pico doesn't have tests either so that's not a reason to choose one over the other (yet). These are file-based CMS applications. The CMS part is in making new files which are automatically routed to. Things like automatic Markdown-to-HTML and variable interpolation are done for you, so that you can define variables before creating a new application instance and overwrite them in the header section of each page, as you see fit. Another difference is that Pico uses a custom INI-like configuration language (in the header sections) and does not share these variables with the previous context data. Whiskers uses YAML, and page context can modify the initial context. Plugins, in Whiskers, also have the ability to modify this context. I've tried to make the code simple and easy (for a developer) to read. I encourage you to take a look at `public/context.php`, `public/index.php` and `workbench/source/Application.php`. The other classes (in `workbench`) are just to separate out different responsibilities. The system is still undergoing much change, but I would appreciate any feedback you have for how I can make it better. :)
Yep, that's 100% correct - and running things this way (watching for file changes) is sub-optimal behaviour with the need for PHP to do lots of fstat calls, so the question is more than valid in /r/PHP IMHO. 
Hopefully this sets your out on the right track! It's very specific to the service I was writing it for, but it should give you a little bit of an idea about how it was done. Like I said, it's been a while! WSSoapClient.php class WSSoapClient extends SoapClient { public function __doRequest($request, $location, $action, $version, $one_way = 0) { $response = parent::__doRequest($request, $location, $action, $version, $one_way); //if resposnse content type is mtom clean up to only have xml and replace xop with base64 of attachements return $this-&gt;parse_response($response); } private function parse_response($response) { //if resposnse content type is mtom clean up to only have xml and replace xop with base64 of attachments if (strpos($response, "Content-Type: application/xop+xml") !== false) { $xopSpilt = substr($response,0, stripos($response, "\r\n")); $responses = explode($xopSpilt, $response); for ($i = 0, $size = count($responses); $i &lt; $size; ++$i ) { //Check the current chunk is a soap response if (stripos($responses[$i], "Content-ID: &lt;soapPart&gt;") &gt; 1) { //Remove the Content type/transfer/id information $responses[$i] = substr($responses[$i], stripos($responses[$i], "Content-ID: &lt;soapPart&gt;") + 26); $xopElements = explode("&lt;xop:Include xmlns:xop=\"http://www.w3.org/2004/08/xop/include\" href=\"",$responses[$i]); //xopElements wont be returned if no results were found / search failed if(count($xopElements) &gt; 1) { $cid = rawurldecode(substr($xopElements[1], 4, stripos($xopElements[1], "\"/&gt;") -4) ); //clean up xop tail "/&gt; $xopElements[1] = substr($xopElements[1], stripos($xopElements[1], "\"") + 3); //reloop for binary data for ($x = 0, $size = count($responses); $x &lt; $size; ++$x ) { if (stripos($responses[$x], "Content-ID: &lt;". $cid ."&gt;") &gt; 1) { $object = substr($responses[$x], stripos($responses[$x], "Content-ID: &lt;". $cid ."&gt;") + strlen($cid) + 18 ); } } $response = $xopElements[0] . base64_encode($object) . $xopElements[1];// . $xopElements[2]; } //no xop elements. A pdf wasn't returned, so there's probably an error message contained in soap envelope else { $response = $xopElements[0]; } } } } return $response; } } test.php require_once('WSSoapClient.php'); try { $soapclient = new WSSoapClient(&lt;your_wsdl&gt; , array('trace' =&gt; 1, 'exceptions' =&gt; 0, "location" =&gt; &lt;location&gt;)); } catch (Exception $e) { echo "&lt;h2&gt;Exception Error! D:&lt;/h2&gt;"; echo $e-&gt;getMessage(); } 
There are libraries online, documenting all known weaknesses of all known software, including how to exploit them. This is why we actively maintain our world-accessible sites and religiously patch any security holes.
Yeah, I got stung like this once. Go though every account you have on the server and change the passwords, make sure you don't have FTP accounts with username:passwords test:test etc. Check the permissions on the folders you have and look at anywhere that uploaded files to make sure it was not them doing it. If it allowed you to upload a PHP script then then you could execute it for example so, might be a good place to look. As for the logs you said go though them with a tooth comb and check everything. Also google your domain and see as sometimes they report there results online for others to see. 
Well, The community should have moved to better things and let php die a graceful death, instead of prolonging it's survival by shortsighted workarounds and stuff, which is considerd as amazing for some time, but get ridiculed after a while, even by php users..
I've seen similar attacks where a single compromised account can lead to mass defacement of Joomla/Wordpress sites on cpanel-based server with suphp via symlink exploits. It goes something like this (assuming a phpwebshell or similar is already in place): 1. Obtain a list of account names (easily available via `/etc/passwd`, `/etc/trueuserowners` or various other methods) 2. Within the compromised accounts public_html, make a directory in which symlinks with a ".txt" extension pointing to `/home/*/public_html/wp-config.php` (WP) and `/home/*/public_html/configuration.php` (Joomla). This is done blindly, and many links will be broken, but given the popularity of WP and Joomla, quite a few will hit. Eg. `ln -s /home/anothersite/wp-config.php sym/anothersite-wp-config.php.txt` 3. Make Apache requests for all these files, ie. http://compromisedhost.com/symlinks/anothersite-wp-config.php.txt. Since Apache sees a .txt extension, suphp is bypassed and the file is displayed in plaintext, exposing database credentials (which is usually the same as cpanel/FTP login). 4. Use harvested db credentials to overwrite admin user password, and fetch URL to admin login. 5. Script a login to wp-admin, where usually the theme editor is employed to inject some code and markup in a header/footer/widget which replaces the entire page. `Option FollowSymlinks` is more than often required for stuff to work, and is usually enabled. .htaccess overrides is also more than often required, so even if you add `FollowSymlinksIfOwnerMatch` the attacker can simply disable it via .htaccess. The solution is (aside from using mod_ruid/jailshell) to remove world read bits from all PHP-files, especially config-files. But often this is overlooked, leaving database credentials vulnerable. See http://docs.cpanel.net/twiki/bin/view/EasyApache/Apache/SymlinkPatch and http://whmscripts.net/misc/2013/apache-symlink-security-issue-fixpatch/ 
Naa..I don't think so. I think i ll stay..
You assume (incorrectly) that it's about retaliation. Don't torture yourself with the Why-question. Just fix your world-readable sites. Also, you are never going to be 100% sure about how they did it. Just undo the damage, fix your world-readable sites, and next time, keep your 3rd-party software up-to-date. You'll know it's working because of the lack of successful intrustions. ;) (edit: it can't hurt to try to figure out their attack vector though. You'll wanna know what to fix of course - but keeping everything up-to-date is the most blatantly obvious security best practice)
Make sure to sweep all the files sitting on those domains. Look for .php files that are named something incongruous (like 'image.php' ) but contain foreign code. You will very likely have code injected into many of your regular files also.
Would the config getExtends help in anyway, e.g parent sections?
I think that you assumed that he *did* know what Pico is...
I think you are right, but there's a better description of what they both are in another comment. :)
I've never made specific containers for Zend_Config, but it depends on your application. If you want your application to only accept certain types of Zend_Config and for that config to be validated before being created then, yes, you probably want containers so you can type hint. 
if PHP 4 wasn't enough for people to stop using it, I'm skeptical about PHP losing numbers on some markets so maybe the only solution is to make a BC break that fix most things, so you have 2 paths: PHP loses popularity for a saner language || PHP becomes a language that you don't want to commit *sudoku* after using it 
"This was a shared...." That was your problem. Shared hosting servers... a hacker can just buy an account and then drill down into the system to gain access to everyone's account on the server. So it probably wasn't your account that was hacked... could have been a vulnerability on any of the hundreds of accounts on that server.
This is awesome news. Thanks !
I should also add - I am aware of Symfony CMF Media Bundle (https://github.com/symfony-cmf/MediaBundle) - but even they recommend Sonata. 
I have not, but it looks pretty cool. I didn't start building this because I needed a CMS. Just looked at Pico source and decided to try to do the same thing cleaner. :)
If this attack spanned across multiple accounts with multiple owners then this could have been a rooted box. I have seen this a few times. The key here is if multiple accounts were ejected with multiple different owners.
Spend _enough_ time planning what to build. Use an IDE (with autocomplete and templates/auto-generated code). Frameworks don't always make you go faster. Often they just cover more bases than you are able to cover, well.
Whether you use a pre-made or roll-your-own framework or pseudo-framework, being familiar with how to get things into it and out of it make for building new apps fairly quickly. The same would go for either working closely with a great designer or working with a great front-end framework (Bootstrap, Responsive, etc.). When you're comfortable and familiar with your tools, you can concentrate on actually DOING something rather than figuring out how it's going to be done. But like assertchris said, planning can make or break it. If the problem has any complexity at all, I'll sometimes spend days noodling the ideas in my head working out what I'm going to need to deal with before I touch a single line of code. Sometimes those 'Eureka' moments come driving down the road, or in the shower, or trying to fall asleep at night. Just remember that the REAL problem-solving tool is between your ears, not connected to your keyboard.
I think this is a good idea. I would like to learn a framework inside and out. I am pretty impatient and get frustrated easily, but I need to take the time to do this. It seems like it would be very helpful.
Thanks! I really need to get comfortable with a framework. How well would you recommend knowing the language that a framework is developed in before diving in to that framework?
I really highly recommend learning PHP before diving into learning a framework. Develop a few small applications in vanilla PHP ... Then pick a framework. If you're undecided on a PHP Framework may I suggest Laravel. But as said above its a choice you must make for yourself after seeing what you're comfortable with the most.
Or 5.5 for that matter -- with 5.6's impending release we should expect to see 5.3 hit EOL in the near future, and 5.4 soon after.
we've been doing the same for three years now (except we're a general technology group and not just PHP focused). We've found that the topics most interesting often are technology outside of the core of programming languages (such as different databases used from PHP, message queues, design, etc). There are a vast amount of subjects to talk about there. Get other people to host talks by following them on IRC, Twitter, Facebook etc. and seeing what they're spending time with. It's a lot more effective to ask someone "Hey, you've been doing a lot of stuff with xyz lately. Could you talk about what and how for 30-45 minutes?". People will say yes, although they wouldn't say anything if you just asked if someone had something they wanted to present to the group. Get a meetup-account (.. which you've already done). It greatly simplifies things and allows you to keep track of the group over time, even if someone drifts slightly away. Friday nights might be hard, we've standardized on Wednesday nights, as there usually are fewer people out and we can get private rooms and venues that both serve food and beer (we've gotten a large room at a bar and bowling venue downtown that we've used the last year). Access to food is a good thing, as many people might come directly from work. Invite local companies to come talk about themselves and what they do if they're hiring, as long as they pick up the tab after the evening. Make them talk about challenges and projects they've been through, and not "WE'RE GREAT: HERE'S WHY!!". That's a waste of everyone's time - unless you went to the meetup to get hired, of course. We've had two of these, both well received by everyone (and three people got their first jobs after being students). We end each "season" (christmas and summer) with a 20 question quiz, featuring both technology and local questions. It's a good way to bond as well, and has been very well received. It allows a quiz environment with nerdy facts (be sure to throw in questions that's relevant to stories shared, nerdy fun facts, etc.) and performs well over beers and pizza. Skip summers. People travel and do other stuff. We're usually offline from mid june to mid august. 
i'm in, just rsvp'd. 
Haha I have only heard good things, so I will keep trying. Thanks!
Its actually not for any project specifically, but just my own personal knowledge. I agree that done is better than perfect though!
While I hate that this makes me seem like a shill, [this PDF](https://www.engineyard.com/community/meetups-and-user-groups/community.pdf) put together by my coworkers and I has gotten quite a lot of praise for those starting, or re-invigorating user groups. If you'd like sponsorship, please do reach out to us (email in the PDF) and good luck! :D
back in the days, i didn't know anything about computers. then a guy at school showed me : this is a html file, if you edit it with notepad, you can change the title and the body.. then with your browser you can check the result...this is how web pages are on the internet came back home, tested many things... then: "is it possible to create dynamic html ?" ... and that's how i started php :)
&gt; Regarding your scale statement, I don't really know as you have come to the conclusion that ORM's don't scale. I never meant to imply as a flat statement that ORMs don't scale. There are lots of factors when scaling out, but where I use to work performance was key. The quicker a page generated and responded (assuming we're CPU heavy and not IO wait heavy), the more throughput you will get from that box. ORMs are more complex than just using straight PDO. How much more complex is debatable dependent on your use case. For us, running an ORM based test through XHProf vs a PDO based test gave us results that spoke for themselves (I don't work there anymore so sadly don't have the data to hand). It was more CPU heavy, more memory intensive, and generally slower. For the vast majority of people, ORMs are a great solution. But the pros for using them do not apply universally. I was trying to give the perspective from a company where ORMs' (and frameworks') development cost savings (which are arguable IMO) didn't outweigh the performance costs.
Keep the codebase small (relatively speaking -- some projects require a large footprint). There's been a fairly consistent correlation in my career between codebase size (aka bloat) and speed of software iterations.
I would counter this. I will say it right here I am the ultimate lazy programmer. Every decision I make is designed to maximize my potential laziness. To that end, it's worth doing everything as right as you can the first time. Spend the extra time to write some interfaces. Think about division of responsibilities. Do some TDD. Your code will be better for it and your work demand will be less over the span of your tenure at your job.
Ah right, in that case just spend some time making projects in the same framework. Eventually you'll end up memorising things like installing libraries/bundles, overriding configuration, default dependencies etc.
honestly except the actual frontend, i can copy/paste most of the usual stuff out of my former projects, theres not much i havent done yet, and as i always stick to nearly the same framework/structure theres little refactoring that needs to be done ... in essence what i want to say is REUSE YOUR OWN CODE! which also makes it encessary to write your own code in a way that you can easily reuse it, document where necessry, maybe write yourself a problem wiki that "tags" sepcific problem solution to a project/class etc (if you are not good in remembering such stuff)
Ahh right, that sounds cool, and a huge thank you for the extra info. I will add that code in and see where I get. 
In my experience, if you have to develop functionality as new, it takes A LOT longer than "throwing some code together" because you can already picture how it works in your head from experience. But if you try to write generic code and reuse libraries you already know, you'll be faster than writing them from scratch every time. 
You can use the arrow keys to re-add lines. Besides that, if you're making a 10 line "program" to "quickly test something", you're probably doing it wrong.
Eh, I just prefer editors/IDE's which allow me to run the current file; pretty much all of them have a way to call an external tool and display the results in a built-in console window. Mine isn't even a darling editor that's ever talked about here ([Edit+](http://www.editplus.com/)), but it's trivial to set it up so that when I hit `F4` it runs against PHP 5.4, `F5` runs 5.5, etc., allowing me to test against multiple versions within seconds. Just seems like a whole lot more trouble setting up a webpage just for testing, because surely you're not going to actually use it as an editor....right?
Test driven development is harder at first, but once you have done it just a few times it can really make you much faster and better.
&gt; You can use the arrow keys to re-add lines... Well, that is not very nice.. &gt; if you're making a 10 line "program" to "quickly test something", you're probably doing it wrong... Please explain..
Abstraction.
This is a pretty big deal. PHP 5.3 has had a HUGE impact on PHP, in particular with namespaces. I seriously doubt Composer would have been as successful without them. Oh, and closures, couldn't imagine not having them anymore. Also see: [PHP 5.3 - Thanks for all the Fish](http://schlueters.de/blog/archives/178-PHP-5.3-Thanks-for-all-the-Fish.html)
RHEL7 ships with 5.4.16 as far as I remember
Compared to hitting `F5` in my editor, it's indeed a lot more effort. Plus, mine supports multiple versions of PHP without restarting Apache, can this project do that? How about changing `php.ini` values without having to restart Apache? I also prefer to work in plaintext when developing -- HTML rendering is not something that'd benefit me, it'd just get in the way -- so with this I'd have to be sure to add `&lt;pre&gt;` or `&lt;code&gt;` tag to the output. &gt; But unless you are using a plugin, you have to save the file somewhere before the editor can run it. That is the whole issue. That's a non-issue for me. I have a `test.php` file that I just keep scrolling down as I add more code, and once or twice a year I save it and start over (it's currently at 3k lines). This makes it easy to relocate snippets of stuff that I did previously, and it also allows me to set some common variables/constants that I use all the time, so that I never have to worry about redeclaring -- stuff like paths to working copies, autoloader includes, etc.
If you haven't already, join ug-admins@lists.php.net 
 switch(true) { wat
Why in the world would you need a packagist package for finding the median of an array? 
Latest Debian (Wheezy) ships 5.4.4
I feel the walls closing in on the day when I will finally be forced to use PDO (or mysqli) :( I know it's the better option but I wouldn't go down without a fight.
All the other things are nice and all that, but first get yourself a secondary display
Don't be afraid! I once felt this way, and now can't believe it took me so long to make the switch to PDO.
Hi sinkingfish, You have many options to make it: 1 - Global anonymous function using a php file: $mean = function(array $array){ return array_sum($array)/count($array); }; Later you could call this variable with an array inside as follow: print($mean([1,2,3,4,5])); 2 - Using a Math Custom Functions Object and the Mean method: class MathFunctions { public static function mean(array $array){ return array_sum($array)/count($array); } } Later you could call it using the static MathFunctions Class as follow: $mean1 = MathFunctions::mean([1,2,3,4,5]); print($mean1); You may combine anyother way to make it possible with another statistical functions. Hope it helps you. 
This is nice, I'd love to see a more in-depth one potentially using some packages like fractal (to avoid directly using models) and a Laravel API package such as dingo/api which would make it a bit easier.
Namespaces and composer kind of became popular at the same time... but I'm not sure how they would be dependent. Composer works fine for old-school pear-style namespacing as well.
THIS is exactly what I meant by pseudo-framework. It's not a published framework per se, but rather a group of classes and tools that you're very familiar with, know work, etc. You can leverage those into a new task fairly easily with little excess headache about wondering how to handle something.
I know how to write a function to write calculate median. FYI you're implementation is wrong. If there is an even number of elements you average the two middle elements. The median on your array would be 5.5.
&gt; It is written by the same person who implemented the functions in core. Thats good to know, Thanks for your reply &gt; Second, a repo like this, not having been updated for a while is a good thing. I agree. I had only looked briefly, trying to decide if its the one I saw previously or not. As I say, the issues are not necessarily bugs, and may not even be valid (again I just skimmed them briefly). I'm now confident this is the lib I saw in the past, thanks &gt; UPDATE: Also, do remember password storage is done using hashing not encryption Yup, I understand all that :-) 
PHP 5.3 was announced as EOL today :-)
I'm in the process of upgrading from 5.3 to latest, but with a large legacy codebase its not such a trivial task The password_compat lib will help as a stepping stone while I finish migrating fully
Sorry I understood the mean, I will give you the median function. As I commented here, you could use several ways to make custom math functions. Here is the function that you could implement using any of the ways I told you: $median = function(array $array){ rsort($array); return $array[round(count($array) / 2) - 1]; } Hope it helps you. 
We had a pizza party to celebrate. We're still running it on a couple of old servers.
Just make sure you're on a php 5.3 build that doesn't have the crypto bugs. You want a *minimum* of 5.3.7.
The transition was brutal, but changing our code base from mysql-ext to PDO made our code so much nicer to work with and it keeps getting better as we get better at using PDO. One of my co-workers just discovered -&gt;fetchAll(PDO::FETCH_KEY_PAIR). I'm not sure how I overlooked it, but I love having it.
I created a small setup I use for my fast applications. It's based on Slim &amp; Twig. You can find it here https://github.com/napolux/helloslim Or you can create your own... 
What's wrong with `explode(' ', $string)` ?
One great way to NOT develop an application quickly is to get paralyzed by all the frameworks and tools and places you could start. Better to pick one and own it, like /u/laurencei says. In my department we've standardized on Yii, and in the end, after lots of haggling and evaluation, we basically picked Yii out of a hat and went with it. We weren't going to invest in everybody getting to do their pet framework. It took a fair amount of rampup to get the team up to speed on the framework, but we now find it does like 80% of the "wiring-up" work we used to do by hand. Field validations, user account/role maintenance, database access, etc., just totally taken care of right out of the box. Point is, we like Yii, but that choice was fairly arbitrary, and what makes Yii valuable to us is isn't anything Yii has that another framework doesn't, it's that we spent the time to learn it and use it well.
That doesn't handle \n, multiple spaces, or trailing/leading spaces. In perl this works like you would expect: @w = qw( one two three four five six );
Thanks, Ive been keeping on the latest 5.3.x all along (although theres a new and final 5.3 release out today, which Ive yet to upgrade)
 function qw($string){ return array_filter(explode(' ', implode(' ', array_map('trim', explode("\n", $string))))); } $w = qw(' one two three four five six '); /* array(6) { [1]=&gt; string(3) "one" [2]=&gt; string(3) "two" [3]=&gt; string(5) "three" [4]=&gt; string(4) "four" [5]=&gt; string(4) "five" [6]=&gt; string(3) "six" } */ $w = qw(' one two three four five six '); /* array(6) { [1]=&gt; string(3) "one" [2]=&gt; string(3) "two" [3]=&gt; string(5) "three" [4]=&gt; string(4) "four" [5]=&gt; string(4) "five" [6]=&gt; string(3) "six" } */ I doubt the parser would be able to easily discern a list of strings if they are not quoted properly as strings.
Typing faster =/= coding faster. It's better to diagram out what you're doing before going HAM and next thing you know you have to scrap your method of doing a task because you forgot about a dependency.
Do you happen to have a PDF on raising children &amp; becoming independently wealthy? Possibly one on attracting beautiful &amp; intelligent women for my single friends? Shill away, yeah, I will be in touch.
Yep, you can easily do that using the [mock subscriber](http://guzzle.readthedocs.org/en/latest/testing.html) that comes with guzzle in your unit tests.
404 Not Found
Thanks for taking the time to reply, a lot of good stuff in there. --Yeah, I've been to a (sales) meeting. A lot of people got up and left after they finished their pizza! Two wrongs don't make a right, but the members should expect that you'll keep them in mind when planning things...
Laravel! I did some pro bono work for a church camp this week and built them a registration, camp management and payment system in 18 hours. No Bootstrap or templates. Once you know one framework well you can work very quickly. 
development is pretty-much stalled. minor patching is sill done, but that's far from "development" These 2 projects are forked from XHProf and are much more alive: * [uprofiler](https://github.com/FriendsOfPHP/uprofiler) * [web3tracer](http://www.exteon.ro/en/products/php-tools/web3tracer)
Your colleague's interpretation is the more correct one, as your implementation actually has more to do with the Liskov Subsitution Principle. If you read the [Wikipedia article](http://en.wikipedia.org/wiki/Open/closed_principle), it actually goes into explaining that the open/closed principle is solved using inheritance. However, it is applied in two different ways: One way being [Meyer's Open/Closed Principle](http://en.wikipedia.org/wiki/Open/closed_principle#Meyer.27s_open.2Fclosed_principle) which states that it should be implemented using implementation inheritance, and the other being the [Polymorphic Open/Closed Principle](http://en.wikipedia.org/wiki/Open/closed_principle#Polymorphic_open.2Fclosed_principle) which states that it should be implemented using inheritance from abstract types.
Neat, I should've seen that I guess !
&gt;IMO, in this very simplistic example I'd say the Laracasts implementation is much better than your friend's. OP's implementation isn't an application of the Open/Closed principle so much as it's an application of the Liskov Substitution Principle. His friend's implementation is actually more correct here, as it's an application of Meyer's Open/Closed Principle. &gt;For your friend's implementation - why extend any class if all you're going to do is completely overwrite its one, single method? Because the friend is being made to apply the Open/Closed principle on a scenario in which one wouldn't normally apply it. The problem here isn't how he solved the problem, but the scenario itself. Not every problem is a nail to be hit with a hammer, you need to leverage your tool set and know when to use what. The Open/Closed principle shouldn't be applied in isolation, but in conjunction with the other SOLID principles. Different principles apply to different scenarios.
&gt; Well, that is not very nice.. Neither is `eval` on an arbitrary block of code validated by a fakeable HTTP header. &gt; Please explain.. Those kinds of "quick tests" are neither quick nor tests.
If you have large hard-coded arrays in your application, you're probably doing something wrong. It's best to store this sort of thing in a data file (like a csv) or a database.
A flowcharting software always worked well for me. There's lots of free ones, like [Dia](https://wiki.gnome.org/Apps/Dia/) (also available for windows and mac).
Common starting environment, an excellent rapid prototyping framework, and coffee.
Looks good. There might be a *slight* performance penalty using PRCE but it will do what you want.
To tack onto this, you could also look into [draw.io](https://www.draw.io/). Also useful for UML stuff. 
I hope you're kidding, because to isolate behavior of PHP between different versions, Apache has absolutely nothing to do with it. 
I have my own framework and I have build a code generation application for the apps that use that framework. I have an application that reads the DB and allows me to generate the Models, the forms definitions, validation rules etc. Once I fill out the form in that app I pretty much have the CRUD available (with ajax, modals, javascript uploads, client-side validation and the like). The generator is good enough for simple models but I need to write the code for fields that are autocomplete, repeatable groups of fields etc. 
No one else dealing with this? NuSoap with the hack-patch, does that work? Does WSF-PHP work? Can it be compiled on windows? Any help?
Here's a breakdown of how you spend time building an application: 1. Learning the tools (whether that's PHP itself, a library, or a framework) 2. Figuring out implementation 3. Testing &amp; debugging (whether that's automated tests, or manual tests) 4. Actually writing code So, if you want to increase your development proficiency: **1. Knowing the tools** - Hampered only by experience and recent memory - Become faster over time with more experience - The less new stuff you have to learn, the less this becomes an issue **2. Figuring out implementation** - Partially hampered by lack of experience - Partially hampered by intelligence - Enough experience can help supplement your problem-solving abilities - Problem-solving abilities can be improved, but not easily. - If you're not good at problem solving, you may have to "baby step" your way through a problem, which is time consuming. - Minimize refactoring by planning ahead and thinking the problem through **3. Testing &amp; debugging** - Directly correlates to the complexity of the application. - More complex applications will naturally result in more time spent testing and debugging - Can mitigate debugging time by using automated testing tools - Can also mitigate debugging time through experience and focus (not making simple mistakes like typos or syntax errors) **4. Writing code** - The smallest time factor. Writing code is actually not *THAT* time-consuming - Not much time to be gained here unless you're a slow typist - IDEs save *SOME* time, but mainly for refactors. - Minimize the amount of code you have to write by using as many pre-built tools as possible (frameworks, packages etc). Of course, if you have to learn these tools, you're shifting time spent writing the code they provide, to learning how to use them. But once you've learned it, then it's an investment that pays for itself over time. I've found that testing and debugging and thinking about implementation, followed by "shit, that's not actually going to work, I have to do something different" are the biggest time sucks in development. You can minimize testing/debugging/"shit" time by front loading more of it into thinking about the implementation. HOWEVER, thinking about the implementation can lead you into over-engineering and analysis paralysis. Be mindful of this.
&gt; Better to pick one and own it This has advantages and disadvantages, and the disadvantages are very important to consider before deciding in favour of the advantages. Sticking to one framework can ensure that your team is highly productive with that one framework, which is a very good thing on its own. However, that framework *will* become outdated, probably even by a competing framework from the same developer. You may not be able to transfer much of that knowledge even to a replacement and it may not be relevant to other jobs. My team is now in a situation where the framework that has replaced the framework we're productive in is about to be replaced by another framework before we have achieved proficiency in the first replacement. Because of this, I'm fully of the opinion that full-fledged frameworks are rarely worth it over individual components.
We've committed to staying current with our framework of choice. There's a 2.0 release coming up that we're all very excited about. It'll require some relearning, but from what we've read so far the general concepts are the same, while addressing many of the things we've been annoyed with.
There are a lot of times I want an array of: Months, Days of Week, Ninja Turtles etc. Anything that's static, always end up getting hardcoded.
We have a live product that *starts* breaking on 5.3.
For starters, usage of the term "most popular" implies that you are discussing no more than 10% of whatever set they are part of, OR a maximum of 10 items (whichever comes first). 27 "most popular" implies that there are 270 file functions in PHP. There appear to be only 81 http://php.net/manual/en/ref.filesystem.php 27 "most popular" is therefore fully 33% of the filesystem library. 1 in every 3 is "most popular?". Weird. The other issue is that 27 is too many in general. I don't need 27 "best" options to choose from. I really only need maybe 5, 10 at most. There could be a set of 150,000 total options, but that does't mean I need a top 10% list of 1500. So there's an absolute upper limit to how big a "Top" list should be, and 10 I think is perfectly adequate. A third issue is that a "Top X" list or "most popular" list implies that all of the options have the same purpose or function, and you are narrowing it down to only the ones that are worthwhile. That is not the case for a list of this type. Each function serves a unique purpose. Popularity has nothing to do with anything here.
This is helpful to me. I looked at Yii about a year ago and really liked it, but since I was new to the MVC structure I went with Cake - since Cake has lots of docs and a big SO community. I'm thinking I might try Yii next time. Thanks!
Indeed, 5.3 was a pretty respectable release, throughout it's life. With 5.2, all I can say is "Good riddance"... but with 5.3, it definitely feels like a Doug Adams-style farewell is in order. To be fair though, I think part of my revulsion to 5.2 is the fact that a fair number of shared-hosting providers ran it as the standard version for way, way, way too long. 1&amp;1, HostGator, GoDaddy, BlueHost, just in my own experience. It was probably a pretty cool release in its own right.
That's a great analysis, thanks for the feedback. If I could, let me explain the rationale behind the article. Similar to the post that deals with PHP Arrays http://vegibit.com/php-array-functions/ This list takes the same approach, "What would you get if you combined the worlds most popular PHP CMS applications and dumped all of their source code into one bucket, then analyzed their most used file related functions? Well you would get this awesome list of course!" This does not imply the functions listed are the best, it does imply their "popularity" based on the number of times they were referenced in the collective ecosystem for popular PHP projects.
It's honestly not that hard to stop these things from happening, especially with wordpress. I have a WP hardening checklist I go through every time I set up a site, it takes about 20 minutes.
 print_r(str_word_count(' one two three four five six ', 1)); Output: Array ( [0] =&gt; one [1] =&gt; two [2] =&gt; three [3] =&gt; four [4] =&gt; five [5] =&gt; six ) http://3v4l.org/TnQfl
&gt; Neither is eval on an arbitrary block of code validated by a fakeable HTTP header. Not sure what you mean. I said 'not very nice' from a usability point of view. Who cares about using eval for something like this... &gt;Those kinds of "quick tests" are neither quick nor tests.. Quite subjective. No point arguing about...
&gt;Apache has absolutely nothing to do with it. Oh. really? Php behaves absolutely identical when run from command line and via webserver..right? Well good luck with that..
`qw()` sounds like a neat shortcut, and a semi-standardized name. I'm also frequently using something alike to not needlessly lengthen list declarations. str_getcsv("Mon,Tue,Wed,..") Not quite the same, but the closest you get as built-in. For some APIs I even just make it a default alternative to plain arrays, e.g. `$_POST-&gt;list-&gt;text["id,title,name"]`.
I can't tell you the number of times I've hardcoded Ninja Turtles arrays in my production code :)
I didn't know about `str_getcsv()` that's kind of handy. Not as handy as qw() would be, but still good :)
You're right. https://www.perturb.org/display/1177_CentOS_7_has_been_released.html
Neither is very desirable, in my opinion. Here is how I would do it: interface AreaInterface { public function getArea(); } interface ShapeInterface extends AreaInterface /* ...and probably more... */ { } class Circle implements ShapeInterface { public function getArea() { return M_PI * pow($this-&gt;radius, 2); } } class Rectangle implements ShapeInterface { public function getArea() { return $this-&gt;length * $this-&gt;width; } } In this way, you get rid of the confusing `AreaCalculator` class (in your interpretation, it was useless anyway), maintain the [interface segregation principle](http://en.wikipedia.org/wiki/Interface_segregation_principle), and leave area calculation up to the classes most likely to know how to do it anyway (the shapes themselves).
That's how you become a bad programmer. Embrace the new technologies at your disposal.
This says northeast Ohio - where exactly? CLE? 
When looking at the farewell mind that the posting is not only a "good bye PHP 5.3" but also a "Good bye PHP" from my side. (while I won't leave completely, there meanwhile is a new generation of contributors who handle some things better than I ever did and so they shall. PHP was a major part of my life for 10 years and sometimes one has to change perspectives)
Just strip out the schema from the URL: //www.domain.com/path/to/image.png 
I found Yii to be great at setting up a CRUD website really fast but how do you manage sites that are more complex?
This isn't the issue. All the images I actually host myself will be fine (and I'll probably deal with them via a relative schema, as you say). But you cant deal with externally hosted images this way The external site in many cases wont even respond to an https url (these are just random sites which I dont control, just like reddit alllows you to embed imgur)
&gt; EDIT: oh no, it appears that whoever has been setting up the servers for me was picking the distros that are one version older for "stability" and "support" reasons -.- A good systems administrator is a cautious systems administrator. There are good 3rd party repos out there for putting newer PHP version packages into older distros. If push comes to shove it's not too hard either to roll your own RPMs for your chef/puppet/etc setup.
[You can use PEAR in your composer config](https://getcomposer.org/doc/05-repositories.md#pear).
Indeed, absolutely worth noting. Thanks for all the work you did man, that is a crapload of code that you were in charge of. What's the future looking for you, in terms of projects that you're involved with? 
Is that true though? Do you have any examples of this? I think many of us applied the very same OOP concepts as before. Several larger frameworks were written from the ground up (symfony, zend), but despite this being around the time that namespaces landed, I don't think the structure of these frameworks would have been significantly different otherwise. Namespaces are primarily syntax sugar. I don't see any direct correlation between application structure and namespaces, but perhaps I'm missing something obvious?
PHP 5.2 to me was the first truly stable PHP 5 version. PHP 5.0 and 5.1 suffered from several big breaks and performance issues. I see PHP 5.2 as the first PHP version that was mature and stable and finally swayed people to upgrade from PHP 4.
Would you mind elaborating? At my job we have half a million LOC relying on register_globals (and to a much lesser extent session_register), and it's the main sticking point with updating the version of PHP we run. edit: nevermind, 10 seconds of google found the answer.
I completely agree, but I don't want to speculate about their environment. They may have wacky compliance rules or something.
&gt; The pm variable should be set to dynamic instead of static Have had mixed mileage with using dynamic for FPM children and have seen this crash out/fail. Typically I stick with static with a controlled number of children, with each child set to die/respawn after a 250-500-1000 request served count.
Care to share the script?
I had no idea this function existed and I've read the entire PHP manual several times over the years.
Number 2 provides you with the most control, and if you wanted, you could pair it with Number 3 by using Amazon CloudFront, and then pointing it at your image proxy as the origin server. The first time you see the image, you should do some basic analysis on it. If you always expect it to be an image, it should be easy enough to validate that the source file is one of a few valid types. This would also give you the opportunity to resize the source, if that helps with your bandwidth or simply the visual formatting of the image inside your forum. I applaud you for going full SSL. These days, you should be running SSL for any site that takes credentials, even if it's low traffic and non-sensitive info. You and I might know better than to use the same creds on multiple sites, but our users may not be so savvy. I suspect yours are, but all the same, good on you.
Downtown Willoughby, Ohio which is roughly 25 minutes east of Cleveland. http://downtownwilloughbyohio.com/
Yes, we have been sorely lacking a PHP group here. I check meetup every few months just in case but always come out disappointed. When I clicked this thread and then saw "northeast ohio" in the URL I hopped out of my seat a little. Needless to say, I'm joining up. Thanks for putting this together. 
Took me two tries to find the subscription instructions, but I got it. I had to email ug-admins-subscribe@lists.php.net . Also, on the same page was https://wiki.php.net/usergroups/handbook . Light and useful reading. 
Pre-planning/organization, practice, and learning how to use your available tools better. Yes, I will use a framework if it makes sense to. No, frameworks are not always the appropriate answer.
You could retrieve the old 2m forum posts images dynamically yourself via the PHP readfile() - then display it on your website as part of your server. So to the user and browser it is served from your server and you can continue to use SSL. I.e it looks like the image is hosted on you website, but it's not. Then in the future host the other images yourself as other people have mentioned. It does mean your bandwidth will go through the roof.
&gt; You may not be able to transfer much of that knowledge even to a replacement and it may not be relevant to other jobs. Firstly, concepts are always fully transferable. Secondly, framework knowledge counts for just about zilch to a good employer. I've been hired for programming positions where I haven't written a single line of code in their primary language.
You shouldnt test externals in your main project. Plugins need to be tested independently. If you, however still are in nees for external requirements, I reccommend you to do some mocking that can extend the usual unit tests.
&gt; Incidentally, is there a keyboard shortcut for activating the editor window? I can activate the project tree with Ctrl+1 but I haven't found a way to go back without the mouse. I thought it was Alt+1. You can just press Escape to get back to the editor, but you're doing it backwards. You should almost never let your 'focus' leave the editor. Use Ctrl+Shift+N to open a file. Ctrl+N to navigate to a class. Ctrl+Shift+Alt+N to navigate to any symbol (function, property, class, etc). Also, the completion works a bit funny. You can type the first letter of each 'word'. For example, if you have a class called MyAwesomeClass you can get to it by press Ctrl+N and searching for "mac", or if that doesn't refine it enough, you can try "myawcla", but not "ysomeass". This works quite well in practice.
I understand, but these are not externals, they are frontend plugins that require the project to work (yes, really old codebase:/ ). 
Once a plugin is listed in your vendor, you have to treat it as external component. Regardless if the autoloader can load this class for you. I don't see a problem there. The codebase has nothing to do with it :)
Fantastic overview
47 to 2 vote. Makes me wonder why kriscraig and levim voted "no" on this...
The problem is that it is really hard to do changes to the plugin when you maintain it outside the project. None of the changes can be tested until you have commited, pushed, then done a "composer up" in the project. 
Solution 1: meh, if anything else fails. why not? Solution 2: you really want to serve that much of additional bandwidth and also host another server? Solution 3: This seems to be the best solution for your case. Just write a small script which uploads images to amazon &amp; insert the AWS-URL instead of the image url. You can use the JavaScript API for this, so you don't have to write much server-side code. This is also the fastest way since browsers contact aws directly without going through SSL tunneling. I'd prefer solution 3.
Well, I had this problem myself, and converted all links to images (get the MIME types) to a reference to my own webserver which returned a cached version of the image. So, for example: https://yourforum.com/image/externalhost.com/image.jpeg This not only makes it save, it also makes sure the page loading time improves significantly because you are no longer dependent on slow image hosting websites.
The script I've got so far is from a course I've been doing, but I do plan to clean it up and add a few more better comments.. but this is what I have: upload_example.php &lt;?php require_once('file_upload_functions.php'); ?&gt; &lt;form action="" method="POST" enctype="multipart/form-data"&gt; &lt;p&gt; Chose a photo for your profile picture:&lt;/p&gt; &lt;input type="hidden" name="MAX_FILE_SIZE" value="&lt;?php echo $max_file_size; ?&gt;" /&gt; &lt;input type="file" name="profile_picture" /&gt;&lt;br /&gt; &lt;input type="submit" name="submit" value="Upload file" /&gt; &lt;/form&gt; &lt;?php echo "&lt;hr /&gt;&lt;pre&gt;"; var_dump($_FILES); echo "&lt;/pre&gt;&lt;hr /&gt;"; upload_file('profile_picture'); ?&gt; file_upload_functions.php &lt;?php // Configuration $max_file_size = 1048576; // 1MB expressed in bytes $upload_path = "W:/Web/localhost/codebox/test"; $allowed_mime_types = array('image/png', 'image/gif', 'image/jpg', 'image/jpeg'); $allowed_extensions = array('png', 'gif', 'jpg', 'jpeg'); $check_is_image = true; $check_for_php = true; // Sanitizes a file name to snure its harmless function sanitize_file_name($filename) { $filename = preg_replace("/([^A-Za-z0-9_\-\.]|[\.]{2})/", "", $filename); $filename = basename($filename); return $filename; } // Returns the file permissions in octal format. function file_permissions($file) { // fileperms returns a numeric value $numeric_perms = fileperms($file); // Change it to octal value $octal_perms = sprintf('%o', $numeric_perms); return substr($octal_perms, -4); } // Returns file extension of a file function file_extension($file) { $path_parts = pathinfo($file); return $path_parts['extension']; } // Searches the contents for a file for a php embed tag function file_contains_php($file){ // Use fopen/fread is large images as file_get_contets might be slow on large files. $contents = file_get_contents($file); $position = strpos($contents, '&lt;?php'); return $position !== false; } function file_upload_error($error_integer) { $upload_errors = array( UPLOAD_ERR_OK =&gt; "No errors.", UPLOAD_ERR_INI_SIZE =&gt; "Larger than upload_max_filesize.", UPLOAD_ERR_FORM_SIZE =&gt; "Larger than form MAX_FILE_SIZE.", UPLOAD_ERR_PARTIAL =&gt; "Partial upload.", UPLOAD_ERR_NO_FILE =&gt; "No file.", UPLOAD_ERR_NO_TMP_DIR =&gt; "No temporary directory.", UPLOAD_ERR_CANT_WRITE =&gt; "Can't write to disk.", UPLOAD_ERR_EXTENSION =&gt; "File upload stopped by extension." ); return $upload_errors[$error_integer]; } function upload_file($field_name) { global $upload_path, $max_file_size, $allowed_mime_types, $allowed_extensions, $check_is_image, $check_for_php; if(isset($_FILES[$field_name])) { // Sanitize the provide file name $file_name = sanitize_file_name($_FILES[$field_name]['name']); $file_extension = file_extension($file_name); //$unique_id = uniqid('file_', true); //$new_name = "{$unique_id}.{$file_extension}"; //$file_name = $_FILES[$field_name]['name']; $file_type = $_FILES[$field_name]['type']; $tmp_file = $_FILES[$field_name]['tmp_name']; $error = $_FILES[$field_name]['error']; $file_size = $_FILES[$field_name]['size']; $file_path = $upload_path . '/' . $file_name; if ($error &gt; 0 ) { //Display Errors caught by PHP echo "Error: " . file_upload_error($error); } elseif ($file_size &gt; $max_file_size) { echo "Error: File size is too big. &lt;br /&gt;"; } elseif (!in_array($file_type, $allowed_mime_types)) { echo "Error: Not Allowed mime type.&lt;br /&gt;"; } elseif (!in_array($file_extension, $allowed_extensions)) { // Checking file extensions pevents files like evil.jpg.php echo "Error: Not an allowed file extension. &lt;br /&gt;"; } elseif($check_is_image &amp;&amp; (getimagesize($tmp_file) === false)) { // getimagesize() returnts image size details, but more importantly, // returns false if the file is not actually an image. // you obvously would only run this check if expecting an image. } else if($check_for_php &amp;&amp; file_contains_php($tmp_file)) { // A valid image can still contain embedded PHP echo "Error: File contains PHP code.&lt;br /&gt;"; } elseif (!is_uploaded_file($tmp_file)) { echo "Error: Does not reference a recently uploaded file. &lt;br /&gt;"; } elseif (file_exists($file_path)) { echo "Error: A file with that name already exists in target location"; } else { // Sucess ! echo "File was uploaded without errors .&lt;br /&gt;"; echo "file name is '{$file_name}' . &lt;br /&gt;"; echo "File references an uploaded file.&lt;br /&gt;"; // Two ways to get the size. Should always be the same. echo "uploaded file size was {$file_size} bytes.&lt;br /&gt;"; // filesize() is most usefull when not working with uploaded files $tmp_filesize = filesize($tmp_file); //always in bytes echo "Temp file size is {$tmp_filesize} bytes. &lt;br /&gt;"; echo "Temp file location: {$tmp_file}&lt;br /&gt;"; // Move_uploaded_file has is_uploaded file() built-in if (move_uploaded_file($tmp_file, $file_path)) { echo "File Moved to: {$upload_path}&lt;br /&gt;"; // remove execute file permissions from the file if(chmod($file_path, 0644)) { echo "Execute permissions removed from file.&lt;br /&gt;"; $file_permissions = file_permissions($file_path); echo "File permissions are now '{$file_permissions}'.&lt;br /&gt;"; } else { echo "Error: Execute permissions could not be removed. &lt;br /&gt;"; } } } } } ?&gt; 
Great news! 
I think the simple answer here is they shouldn't be externals. 
But is he cautious because he's very pro and is has legitimate concerns for the versions of software he'd be installing, or is it because he doesn't really know what he's doing and therefore doesn't dare to try anything new? It's quite annoying to not have Git on the server and only have a 7.0 version of vim installed without visual support (no v command). Also the very fact that the OS version that was installed a few months ago was the one with the PHP version whose EOL was yesterday. On the basis of cautiousness, I think this is almost equally as uncautious. Also, it would be great if all the Linux fans would have more faith in their favorite OS's, because the fact that they think it's a great OS and that they are overly worried about stability and support is a huge contradiction IMO.
What did you use to inspect the MIME type after downloading? In many cases the remote servers HTTP response headers would be accurate, but this isn't secure as anyone could just configure a malicious server and embed an image Im thinking maybe ImageMagick to actually ensure the image is an actual image (and not some sort of script with a PNG MIME type for example)
[Your function doesn't actually get an array of words, it does a very, very, very, very rough approximation thereof.](http://www.unicode.org/reports/tr29/#Word_Boundaries)
I like this. Makes a whole lot more sense. I agree that my AreaCalculator in the end was useless.
This is the correct answer, but it's a good illustration of how cryptic this function is! Passing a 2 to the second param is super-useful too.
I mean that I'd choose Solution 1 only if any other possible method fails. I also don't like relying on third party API's too much. If you can accept one more third party API, I'd go with AWS. However, you can just as well use Solution 2 which gives you more fine-control on caching and other mechanisms with the cost of one more server to manage. 
gophp7 :-)
I like how you managed to make the API super simple. I would just have named `ScreenShotr\Core` as `ScreenShotr\ ScreenShotr` instead, since you have only 1 class.
I see you found an answer. Regardless, here's the solution I wrote that might be a bit more flexible: https://gist.github.com/adduc/be043e165790db0587ed
I can't say I've done any benchmarking, but I would certainly move it over to Composer. If you are already using PSR-0 or PSR-4 for your application, this couldn't be easier. Otherwise you may want to look at using the classmap, which actually scans your specified directories for all classes and then saves this to a reference file. Since the scan only happens once (not on every request) this is going to be really quick. This is also going to simplify your app by allowing you to manage all your autoloading in one place.
Yep. See Zeev Suraski's [tweet](https://twitter.com/zeevs/status/500213818845196288) from earlier today: &gt; #phpng is now merged into master. PHP 7 under way! #php7 #FAST
In other words: apparently they already merged phpng into master branch.
Correct, as I noted elsewhere: See Zeev Suraski's [tweet](https://twitter.com/zeevs/status/500213818845196288) from earlier today: &gt; #phpng is now merged into master. PHP 7 under way! #php7 #FAST
I'm still at MySQL/Oracle.
Composer
2nd the coffee.
&gt; Firstly, concepts are always fully transferable. The *framework specific* knowledge. The *concepts* are largely irrelevant when it comes to choice of framework, but that assumes your employer grasps that. &gt; framework knowledge counts for just about zilch to a good employer. Many employers are not good.
now give us the AST! :)
TIL PHPStorm is Emacs. &gt; You can just press Escape to get back to the editor This definitely doesn't work for me. I have no idea if it's because of IdeaVim or if it's because PHPStorm let me pick between predefined keyboard mappings. &gt; Also, the completion works a bit funny. It uses subsequence matching, except sometimes it seems like it forgets.
I saw a 4-7% performance gain for switching to composer from my company's autoloader.
I haven't been around long enough to get a good idea of this type of thing, but how long should we expect to wait for an official release of PHP 7? I know 5.6 has been in the works for a while and it's still not out.
5.6 is pretty much done.. Release Candidate 4 should be the final before release. Officially 7 is penciled in for a year's time, in reality it may well end up being longer in which case there may end up being an interim 5.7 release too.
Thx
interesting thing about 5.6 RC4... I thought typically they only went out as far as RC3
Interesting. At the risk of sounding dumb, can you give some practical use cases for a tool like this?
Not really. PHP 5.4 had eight RC releases :D http://www.phpdeveloper.org/news/17581
I smell dejavu... 18 months from now we'll be on PHP 5.9 wondering if the next version should be called 7 or 8.
I never realized... and now I know
No 6 ??
nah
I can't speak to performance, but the biggest pro is being able to register different PSR-4s in one place in composer.json (though the autoloader you're currently using may support something similar). 
&gt; It's likely a disappearing issue considering that Google has now began to rank non-SSL sites lower than the one that do have SSL enabled. If that's not acceptable.. Sorry, I don't follow. Whats Google got to do with it, and what is there to 'accept' here? &gt; If re-hosting is what you want to do, why not do it on a service such as imgur? By automating it you mean? Well, its a douchy thing to do, to push thousands of images onto imgur just so I can power my business for free. But not only that, I could wake up one day and imgur decide to block my sites ip from uploading. Then I'd be scrambling to fix it 
This is the main problem I have with ANY contrived examples like cars, shapes, kittens, or bears crapping in the woods. Trying to illustrate SOLID principles on non-real-world-problems can confuse the issue.
I voted no on it because the vote was premature in my opinion. Right now we are discussing on list whether there will be a 5.7 or not, yet we've already voted on merging PHPNG into master, which can't be the basis of a 5.x release. I have no qualm or argument against PHPNG itself. 
Not new... just able to count
Forgetting SOLID principles here for a second, I don't like your colleague's interpretation because its fragile, and you need 1:1 area calculators for each shape. What happens if I pass a square into the circle area calculator, and the square doesn't have a radius property? Given the simplicity of the example, the laracasts implementation is more desirable, but /u/drrck2403's implementation is better still.
&gt;Sorry, I don't follow. Whats Google got to do with it, and what is there to 'accept' here? Google is now punishing websites which do not have SSL certificates (in their search ranking), so the number of websites which do have HTTPS is likely to increase. HTTPS is moving to become the default on the web, so that's why I said it's a disappearing issue. Now, what I meant by "If that's not acceptable" was if that doing nothing is not acceptable for your website, then there are other options. &gt;Well, its a douchy thing to do, to push thousands of images onto imgur just so I can power my business for free. Uhm. Imgur also offers paid options. Additionally, they have a review process for what they call "Heavy Free Usage". I suggest you read this: https://api.imgur.com/ It's not like I'm suggesting you should free-load off of imgur, but rather utilise a service dedicated for this kind of thing. 
Yeah, folks I speak to generally have their preference for this. It's not wrong, either way. For instance, I don't mind using interpolation as long as it's not to substitute array items/object properties.
You could potentially use it as part of generating a thumbnail for the video.
Well I agree to that. But sonata media doesn't have file manager. So if I need to implement file manager I need sonata admin bundle.
I'm in exactly same position right now. I was interested in sonata media bundle. But because it doesn't have any file manager Im in position to go for symfony cmf media bundle with integration for elfinder ;/
I'm gonna have to read about this after my weekend trip!
No. It is not. Post you've linked informs that VOTING was ended and this one announces that php-src's master was MERGED. So, they basically did what they planned to do. And this is important step.
Maybe us a static method instead? MyClass::statuses() ? It won't hurt your TDD since you can basically consider this method a constant. You'd have a problem only if you ever wanted to mock that call, but why would you mock a constant array?
Injecting the 'choices' would remove any decisions about where it actually came from; at which point, storing them statically can suffice until it needs to be changed. 
It's called XSA. 
Why are you using double quotes for string literals that require no escaping?
Google Docs to write the content and then a very talented designer to make it look good :D
I've created an upload library and the "how it works" section pretty much sums up my experience with the upload process. I hope it helps https://github.com/siriusphp/upload/blob/master/README.md#how-it-works Venting ahead! Because I didn't make the library explicitly work with PHP 5.3 the repository was cloned, the composer file was changed in a few places and now it's being used by a relatively popular CMS project. So I must have done something good.
You could also use this to generate an image for each frame and use those images as previews for when a user hovers over a seek bar. 
Why? I've find the first technique to be significantly more readable than the second.
Yup! :) Both of these are exactly what i needed it for
I had that.... But having the name twice looked weird to me.. Am i just crazy?
that is the coolest blog post image background I have ever seen
Seven, just like James Stewart
Composer is indeed taking over the world (of php)
Performance. Single quoted strings are treated as literal. Double quoted are parsed for escape characters and interpolation. Gains are negligable in small amounts, but if you get in the habit of using double quotes for everything and bring that in to a project that ends up parsing thousands of strings, there will be a hit.
Until the first database query, file read, HTTP request...This has never been a problem for anybody I've ever spoken to, in any project they've ever worked on, ever. I do have a note about it in the post, so thanks for the feedback!
Like I said, negligable gains. I'm just a stickler for standards ;)
okay, see phpacademy channel on youtube.com
I hear what you're saying, and I'm glad you're not zealous about things, one way or another.
~~php++;~~ Err... $php++;
I wish we would stop embarrassing ourselves with stuff like this. Version numbers should be decided by the language developers (and, you know, math) - not by overzealous publishers. Would the php community have voted [to make Dewey president](http://en.wikipedia.org/wiki/Dewey_Defeats_Truman) to avoid confusion?
It's not that weird to me but I see your point. `Core` looks weirder (given it's the only class).
That escalated quickly (c)
Yeah... that was also weird. But, i felt like, if it expanded...? maybe. Idk. I could switch it. 
https://www.owasp.org/index.php/Unrestricted_File_Upload These are my rules - Whitelist MIME + Extension. Don't use blacklists. Do this serverside + clientside. On the serverside, don't roll your own. Use this: http://api.symfony.com/2.3/Symfony/Component/HttpFoundation/File/File.html - Don't store where you can access it from the webroot. In the event that your barfed your whitelist, and he successfully uploaded c99.php, pwned. - I rename all files to md5(filecontent + salt).extension. Don't take the extension that the guy gives you. Read from the MIME, make sure its in your whitelist, then rename. I like Md5, it's fast, and it's not for hashing passwords so it's fine. If you're scared of collision, use something else. - I then split them up like this uploads/ab/23/4c/restofhash.jpg This is to prevent the maximum of files in a dir of ext3 - Restrict file size. Not just big files, but small files. (DDOS yo!) - if it's an image that I need to display on the frontend, I resize it/crop/convert/jpegoptimize it and store that modified version in the public. This also makes sure it's an image, and most likely strips extra [uselesss] data. That's all I can think of for now. 
Glad I could point you in the right direction.
I'm really hoping we don't have a ton of BC breaks. We don't want another python on our hands.
oh boy
Yeah, I'm still waiting for Windows 4.
I would love a improved stdlib (I'm getting tired of typing this) but I know it's never going to happen. I was thinking more about removing bad things from the language. Similar to: - https://wiki.php.net/rfc/removal_of_dead_sapis - https://wiki.php.net/rfc/switch.default.multiple - https://wiki.php.net/rfc/magicquotes - https://wiki.php.net/rfc/deprecate_mcrypt_rand
Sure, it's gotten [plenty of criticism](https://en.wikipedia.org/wiki/Duck_typing#Criticism) and you definitely should be consistent with the philosophy of the rest of your system. It's an integral part of Python, though, as well as a number of other languages, so it's an interesting thing to think about if you're used to always doing things a certain way.
I can't believe I didn't know about that one, thanks! very cool
Magic quotes were removed in PHP 5.4.
You can check this https://github.com/bivoc/bulletproof I made it some time ago, It is very secure, and does more than uploading. Once I made it, I asked lots of onions, even here http://www.reddit.com/r/PHP/comments/1s04xl/review_pls_a_simple_secure_image_uploading_script/ though this was 8 months ago, the script has improved a lot. 
&gt; Similar to:
I think you covered just about everything. I just want to point out that people can also use PHP's built in [Fileinfo](http://php.net/manual/en/intro.fileinfo.php) extension to determine mime type. And using a [html5/flash uploader](http://www.uploadify.com/) can help with file validation on the client side.
I have recently made a file upload script fully commented @ http://peter-kelly.com/2014/08/file-upload-with-md5-duplicate-file-check/
&gt; Performance. &gt; &gt; Single quoted strings are treated as literal. Double quoted are parsed for escape characters and interpolation. &gt; &gt; Gains are negligable in small amounts, but if you get in the habit of using double quotes for everything and bring that in to a project that ends up parsing thousands of strings, there will be a hit. As a PHP internals developer, this is nonsense. "foo" and 'foo' compile to the same opcodes. There is zero performance penalty.
[Can you explain tests like this then?](http://www.classyllama.com/development/php/php-single-vs-double-quotes) I've seen plenty of contention that it's so small it doesn't matter, but never anyone saying the penalty is nonexistant.
Mavis Beacon taught me typing.
If you use \n wrap it all in &lt;pre&gt;
If you're going to use string interpolation you can and should write it all as one string. `echo "$row[name]\t$row[score]\n";` Either way it outputs a new line character (ASCII 10).
By far the best answer right here. Where I think you'd see the biggest benefit is when drrck2403's `/* ...and probably more... */` starts to get filled out with all the different things a Shape can do. When you're writing out methods later, you can give very clear type hints for your arguments based on what that method needs to do: is this a method you pass any shape, anything that has an area, anything that has a perimeter, anything that has coordinates, etc. 
I cringed when I read the colleague's approach. I would describe it not so much as being 'wrong' as being 'old fashioned'. It's the sort of approach that seems reasonable on paper, but we've all seen blow up on so many projects because, like you said, it's damn fragile. I liked /u/drrck2403's also, because it challenges the base assumption that both approaches in the article make: the need for an AreaCalculator at all.
Yep, this is the most likely cause ... it looks like the code would work fine in the CLI, but not in a web browser.
Thanks :) I was going to switch it over as long as there was no drop in performance. So the fact that it improves is even better, thanks.
This comment was so good, it made me tear up a little bit.
I did not think about small files for DDOS usage. This is a good point. * I'd also suggest installing anti-virus and scan the upload directory often. I know it sounds old fashion but unless you are determine that each file is what it should be (ie: opening the jpg with your fav library and/or making sure only the image bytes are there, not only headers) I'd secure the shit out of that directory. You don't want a creepy virus crawling to your production servers. * The owner (chown) of the directory and permissions (chmod) should be as strict as possible. no bash users or anything like that. Make sure the group ownership is the same for the php as this directory, but the owner of those files should be strict as in not be able to remove even it's own files (the owner of uploaded files should be able to do as little as possible) * If possible (maybe if not uploading images only), I'd host the files in the cloud (meaning, on google drive, dropbox, etc') so I'd get a "free CDN capabilities" but most importantly, I'd leave the hard work of detecting bad files and such to them. * consider making sure images uploaded to your server won't contain any XSS (which an anti-virus may not be able to detect). So validate if you can. * limit uploads per IP (per day) to a reasonable number. You don't want someone uploading all night and filling up all your disk space. * I like adding the user ID as a prefix to the file. With simple wc and grep I can check how many files this user has uploaded. You can also create a directory per user, but may hurt your distribution strategy if some percent of users upload many medium/big files are partitioned to same server. * Client side should have restrictions for fair users, but be sure to double-include all of them on the server side and more.. client side can validate and show errors, but when an hacker comes around to your website, he'll use the command line or external utility to create the http requests and not your website UI.
Interesting that you mention minimum file size. Now I'm left wondering. What would be a good value? I know it depends on the use case, but say I'm uploading images, what is a value that you would say: "man, this definitely is not an image"
&gt; Don't store where you can access it from the webroot. In the event that your barfed your whitelist, and he successfully uploaded c99.php, pwned. I also have a question about this if you don't mind. I'm not sure I get what you say. Lets say I let my users upload images. If I don't put them in some place where they are accessible by the browser, they cant be displayed, right? Or do you have a php script read the file contents, echo the appropiate headers and then echo the file content?
This has absolutely nothing to do with PHP. It's also an advertisement.
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to [##php on Freenode IRC](http://webchat.freenode.net/?channels=%23php).
Come on, every one knows you count 3.1, 98, Me, XP, 7, 8
Ah! Sorry. I wasn't aware. I won't make that mistake next time. :)
Of course, YMMV. Good luck!
Where does that show a significant penalty? It's shown by that test to be very marginally faster, but that's almost certainly random error. Even if double-quoted strings are very, very slightly slower (and I don't see why they would be, it's a lexer thing), they would only be slower at the compilation stage. If you ran a loop appending double-quoted strings vs appending single-quoted strings, they'd both have the same performance assuming the double-quoted ones have no interpolation.
How do you write a book quickly? You don't. Which is the best framework? That's another question...
You can google it per type, for example [smallest jpeg is 125 bytes.](http://stackoverflow.com/questions/2253404/what-is-the-smallest-valid-jpeg-file-size-in-bytes)
If it's an image that should be displayed in front, best is to validate it, crop it, optimize, etc'. do not forget owner permissions. OP's and my reply has suggestions on how to secure it properly..
It's existed since 5.1, so I guess you haven't.
I hate this about frameworks... you always use others code rather than learning to properly do it yourself. If he doesn't know how, then fuck no, don't use Symphony components to do it for you... do it your damn self. Learn from the process. After you feel you know what you are doing should you be using others code to make the development process easier and quicker for yourself.
If you're note letting on the actual error message, it's less likely that you'll receive an answer. See /r/phphelp or /r/learnphp for basic language or debugging questions, btw.
I've never heard it called a standard, until now 
When you have a lot of variables to put in the string, this method gets pretty ugly.... 
I've never worked in a shop where it was acceptable, honestly.
That's true, it just became a part of the work to me. 
&gt; Johnson, WHY HAVE YOU USED THESE DOUBLE QUOTES?! You shall rectify the matter at once.
Yeah, but the decision is made now, so we can stop pointing these things out now and move on. No more arguments on the 6/7 choice :-) 
Post attempt #2 There's a difference between denying a merge because the code breaks code style guidelines, and denying a merge because of faulty code. Using double quotes for a string literal does not make code faulty. SeniorDev does sound marvellous though...
seniordev is actually the one who told me that the reason for the guidelines were there because double quotes were slower. He was a hilarious source of entertainment/contention though.
Are they going to change the `++` modifier to skip 6 now too?
At this point PHP could really do with "another Python"
Well there was [Windows NT 4.0](http://en.wikipedia.org/wiki/Windows_NT_4.0)
So does the lexer treat either the same way?
It only takes one set of slightly raised eyebrows.
 $n = 25; for($i=0;$i&lt;$n;(++$i^6?:++$i)) echo $i,"&lt;br&gt;";
Question, since you seem to be very knowledgeable in the subject. What difference is there between the mime type that the symfony package gets you, and the $_FILES['uploadedFile']['type']? Is the second modifiable by the user client-side?
That's sent from the browser. Don't trust it. 
You can't do exactly what you want. Besides, it's not good OO design for classes to know anything about classes that extend from it. I would probably just forget the whole idea of "locking" a property beyond public, protected, and private. The end result of any enforceable "lock" will not provide a benefit that outweighs the maintenance cost of the code.
Yep exactly. I would also go as far to say the locking should be done at the storage engine level anyway, and add some form of save action on the objects to check this when the object changes. Mutable objects are a tricky one to get right. 
I'm dealing with excessive DRY in my codebase right now. I see models re-used in other contexts by tacking on more and more properties until they become gigantic. I'm working on migrating components into zf2 modules right now. There may be a lot of overhead and duplication of code but they are small and decoupled enough that I could completely replace a dysfunctional or deprecated module in a day with minimal risk to the rest of the system. https://www.youtube.com/watch?v=2rKEveL55TY
Shouldn't this be in the persistence layer? If you are using Doctrine you can simply [detach](http://docs.doctrine-project.org/en/2.0.x/reference/working-with-objects.html#detaching-entities) the entity. Also works for children entities. &gt; An entity is detached from an EntityManager and thus no longer managed by invoking the EntityManager#detach($entity) method on it or by cascading the detach operation to it. Changes made to the detached entity, if any (including removal of the entity), will not be synchronized to the database after the entity has been detached.
How about: &lt;?php // example 3 class ProductContainer { protected $products; protected $limit; public function __construct($limit) { $this-&gt;limit = 3; } public function add($product) { if ($this-&gt;limit === count($this-&gt;products)) { throw new Exception("Max " . $this-&gt;limit . " products allowed"); } $this-&gt;products[] = $product; } } final class Basket { // A shipment is not allowed to have more than three products const MAX_PRODUCTS = 3; protected $products; public function __construct() { $products = new ProductContainer(MAX_PRODUCTS); } } final class Shipment { // A basket is not allowed to have more than three products const MAX_PRODUCTS = 3; protected $products; public function __construct() { $products = new ProductContainer(MAX_PRODUCTS); } }
Gives me a thought - how will `version_compare()` treat values of 6?
Well the problem here is that the abstract class was doing too much. It's not the product collections responsibility to throw that exception. That's just bad design. Why should an abstract class contain a hard coded specific rule that could clearly change depending on circumstance? So the DRY solution here would be to still use that abstract class, but remove the max product check completely. Then any subclasses that wish to enforce any specific check of their own are free to do so, and you can also skip the check altogether. This way you eliminate code duplication and maintain flexibility.
final on clasess and flipped logic comparisons feel a bit hipstery
Just isn't worth the time if there's an API already because the DOM could be changed in the future.
&gt; I personally think that too many people think like you, and think their solution is good, when most of the time, it's not. This x 1000 I hate the mantra of "The best framework is the one you write yourself". Its bullshit. You wanna be a better developer? Use a framework thats maintained by thousands of people and learn from their code. Help fix bugs in said framework and learn from their mistakes. Thats what makes you a better, more mature developer. Work smart, not hard. 
***mgenov asked:*** &gt; Why you prefer inheritance over passing of product limit to the constructor of the Product Container? ***Mathias Verraes (Blog Author) responded:*** &gt; In my example, the rule "Max 3 products in a basket" is static. If the limit is injected in the Basket, it means that you can choose the limit for each Basket you create. The knowledge about the rule is now spread over two or more places: the static part is still inside Basket, the dynamic part is in all the clients of Basket. Every developer that instantiates a Basket, now has to know about the "3". They can inject a different value, with undesired results. If the rule changes, you'd need to track down all the places where the 3 is used. &gt; That's why cohesion is so important in OOP: keep the state and behaviour that governs the state closely together.
I went back and did some research on this, and it is indeed the "Right answer". And by right answer I mean, the fastest and most correct. I benchmarked the samples I got here: http://www.perturb.org/tmp/benchmark.php See the code of each: http://www.perturb.org/tmp/benchmark.php?code=true
That reason sounds too strange. It sounds like he's overlooking a bunch of details. Did you show him /u/Zerotorescue's code? People who use/create a Basked object, given /u/Zerotorescue's code, don't have to know the 3 limit. The ProductContainer class is flexible on its limits because it's meant to be a general base class for product containers. The Basket class can just as well enforce a limit for all its objects without its users being aware of it, as it does in the given code. There are all sorts of things which could be applied to absolutely enforce staticity of $limit. It could be private (instead of protected) and required to be set in construction for example. /u/Zerotorescue chose basket's limit value to be a public constant I imagine because he/she thought it could be useful for users of Basket to know this limit. He/she also chose $limit to be protected because, again, it could be he/she wasn't trying to enforce staticity here. That doesn't mean you cannot trivially change the code to enforce the desired properties. As his code goes, as a user of these classes, you can't create 2 baskets with different limits, neither 2 shipments with different limits. Although you can create 2 product containers with different limits (given the presence of other derived classes), that's not an issue because the rule of limit=3 is for shipments and baskets only, as far as I can tell. Basically: &gt; Every developer that instantiates a Basket, now has to know about the "3". They can inject a different value, with undesired results. Given /u/Zerotorescue's code, this isn't true. If you're interested in preventing users to know about the limits (and not just not have to know), which I'm not sure is wise, you could make $limit private, and MAX_PRODUCTS in both Shipment and Basket a private static member. &gt; The knowledge about the rule is now spread over two or more places I'm not sure I agree with that. The 3 limit is still in Basket, and only in basket. ProductContainer simply allows you to apply a limit constraint. The domain logic of "baskets have a limit of 3 products" is in only one place.
Sounds like what you want are Immutable objects. Also making your properties private would be a good start.
The community largely doesn't have access to HHVM, time to look into Hack, or is so bogged down and disconnected from the PHP community in general that they missed all this stupid drama (the PHPNG fork vs typehints patch, PHP 6 vs 7 nonsense, 5.5.7 breaks of DateTime backward compatibility (entire sections of timezones, including EST, CST, MST, PST, JST, etc. missing, resulting in hard Exceptions being thrown) that haven't been fixed for 6+ months, the multiple switch defaults nofix nonsense, etc.). Anyone who sees just how much the Facebook devs have done with HHVM, and the PHP language specifically (fixing weird Zend Engine quirks, writing the spec, creating strong-typed PHP (HackLang) in so short a time — minus *all* of the BS and idiocracy of the PHP Internals list and the entire RFC circus — *knows* that the future probably isn't with Zend Corp. or even the Zend Engine, but HHVM.
 7c7 &lt; $this-&gt;limit = 3; --- &gt; $this-&gt;limit = $limit;
the plugin packages themselves should have tests within their own packages testing it does what it's supposed to do. The site you're using the plugin with can be tested with End-to-End tests to verify it does what it's supposed to do.
Just please oh please let's not do what [Java](https://en.wikipedia.org/wiki/Java_version_history) did... * 1.0 * 1.1 * J2SE [Java 2] (v1.2) * JSSE [Java 2] (v1.3) * J2SE [Java 2] (v1.4) * J2SE 5.0 (v1.5) and this is where things really fell off the rails * Java 6 (v1.6) ... Note that MariaDB did something [similar](https://mariadb.com/kb/en/mariadb/what-is-mariadb-100/) with version 10, to distinguish itself from all the MySQL 6 stuff floating around 
You might also look into the (Symfony ClassLoader)[http://symfony.com/doc/current/components/class_loader/introduction.html] which can make use of caching as well.
What is the purpose of this? Not having to declare static arrays as arrays? Because the next guy will hate you for that.
And Vista So By all accounts it should be: 3.1, 95, 98, 2000, Me, XP, Vista, 10, 11
This article makes an interesting point that tight coupling is not confined to code itself, but also to business rules. By tightly coupling the representation of two separate business rules, you are making changes to one affect changes in the other. Abstraction for the sake of abstraction can cause as many (or more) maintenance headaches as keeping similar code up to date can.
This isn't always possible, especially with older codebases. Look at Magento for example.
That's a really good reason to vote no actually, unless you guys think that PHP 7 will be released relatively soon.
ME was literally Windows 98 with a couple of experimental modules added.
1 file with header and left content, 1 file with right and footer content, and 1 file for each page that includes them. I also recommend using bootstrap for formatting. pseudo code:: Include "HEADER-LEFT/FILE/PATH.php"; PAGE CONTENTS HERE Include "FOOTER-RIGHT/FILE/PATH.php";
If I were to write a full-fledged parser, I would look at the [DOM classes: DOMDocument / DOMElement / DOMNode](http://php.net/manual/en/book.dom.php). You'll need to recurse through the document tree, then when you find a tag with those values you can handle which parent tag needs to be deleted.
why not have Shipment and Basket accept ProductContainer as an argument? They could then have the same interface/abstract
a little more detail on the applications requirement wll help. Generally having the same data in different models is makes it hard to maintain data consistency.. Generally speaking, do not try to be too wise and complicate things..see if the requirement can be met by Postgres alone. And may be one additonal system as a cache for quick graph type queries. I would try NOT to mix these two too much.. So in general, I would adapt a conservative approach and ll only use tried and tested things for the foundation.. Good luck. Source: Once had to port relational data from a Cassandra cluster to MySQL and had to keep the application running in 'mixed' mode for a while...
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to [##php on Freenode IRC](http://webchat.freenode.net/?channels=%23php).
I've been exploring graph databases lately. I first set eyes on Neo4j but dropped it because of its price. I've been lately watching and playing with [OrientDB](http://www.orientechnologies.com/orientdb/). It's nice cause it's a NoSQL with graph, with a SQL syntax. I didn't integrate it with the main app yet, but I'm planning to. As for mixed data environment - we use MySQL, Redis and ES. - MySQL as truth - Elastic for search (Collections) - Redis for cache (Entity) - Graph database for relations I feed ES and Redis with Model Events. - OnCreate: - Create ES - Create Redis - OnUpdate - Update ES - Delete Redis (Redis is pretty fast, if it returns null, I query the DB and store in Redis) - OnDelete - Delete ES - Delete Redis Let me know if you have any questions, cause I'm not sure what you wanna know
To develop applications quickly, use a RAD framework. To keep development on applications going quickly, you have to invest time in refactoring.
&gt; I'm dealing with excessive DRY in my codebase right now. I see models re-used in other contexts by tacking on more and more properties until they become gigantic. I don't think the issue is DRY, it's god objects. It's still good that stuff isn't being repeated, they've just applied it horribly.
ORMs and relational databases are a leaky abstraction that breaks down when one wants to get the most performance out of a system. Making a new ORM backed by a hybrid relational/graph database sounds like biting off rather too much. You'd be busy poking holes in the abstractions for various special cases endlessly. So, keep things simple. If you are using a relational database, use an interface to a relational database. If you are using a graph database, use an interface to a graph database. You can still use inversion of control, just inject two database connections, one of each type. 
Complex schemas but only one database?
wat
Why can't the sub class just override it as needed? I think a base class is to contain a common set of rules or logics that all child classes needs and be set up in such a way that whenever a child class's rules change or morph, they can always easily override it on their own.
Sounds a bit future programmer-ish. Why not just implement the most straight forward code to solve the problem as it exists NOW and refactor when the requirements change. If you're designing your code around hypothetical scenarios what about the one where the company stops shipping things entirely and that code can be deleted. Which isn't to say there isn't merit in the idea that just because some code looks the same it should actually stay separated. Your code is more cohesive when you keep related things together and move unrelated things apart, even if they look similar. 
Because what happens if the check isn't required at all in one subclass, or if the check is more complicated than that? Why try to abstract so early when you know so little about the system? I thought about this a bit more since my early comment, and now I'm of the opinion that there's actually no need at all for that abstract class. There's no code duplication here :-) The fact that they are both checking for "3" products happens to just be a coincidence - the fact is the check is specific for each concrete implementation, and you may have some concrete classes that don't need any check at all. So in reality, my solution would be to remove the abstract class altogether, at least for now, and then to just have the two concrete classes. I would have an interface though, which the two would implement, but that would be it.
Never heard of OrientDB before I saw your post.
Isn't that the point though? To prevent duplicate logic and give future changes a chance through polymorphism. The idea is pretty much to take down many birds as you can with the same stone without compromising any extensibility. I think the authors code accomplishes that just fine.
Well, 'Canada' is a pretty wide country, but just speaking to Toronto it's definitely a developer's market here. I started my own firm years ago, still don't have a proper website or business cards, and have always been able to find jobs by just going out to events and letting people know I'm available. I wouldn't worry about being a foreigner - the large majority of devs I've worked with over my career have been from elsewhere. A few could barely string together an English sentence. A xenophobic dev team wouldn't do very well. In fact, that's true for nearly all of Toronto, since we're one of the most diverse cities in the world. We have a 49% immigrant population, with 51% of us being born outside of Canada. You won't find many with a "the took our jerbs!" sort of mentality here, since we look at all skilled workers as job creators and industry builders, not as competition for getting a piece of an ever-shrinking pie.
&gt; Second, a repo like this, not having been updated for a while is a good thing. It means it is sound and stable. This is not necessarily true. Plenty of abandoned repos are terrible.
But it doesn't. He does compromise extensibility because you wouldn't be able to have a child class NOT do this check without doing a dirty hack. You're putting too much knowledge into the abstract class this way. Also, there is no duplicate code in the first place, so there's nothing to DRY anyway. On top of this, I'm against trying to be too clever too early - early abstractions cause more problems than they are worth. If it turned out that this abstraction was useful, you could apply it at a later stage by simply moving that method up from the child classes - but at that point you'd be doing it when you have more knowledge about the wider system. As it stands, I think the best solution is what I said - remove the abstract class, have the two implementations inside two separate child classes, and extract an interface which the two child classes implement. That's all you need to do.
If your'e going to do the Canada thing, my search would begin and end in the GTA (Greater Toronto area). The amount of developer jobs there compared to anywhere else in the country is impressively higher. Also salary is the best in the GTA. PHP devs here I've found are in the 70-90k range for reputable shops for int-senior level devs. Not too many places I've found give much of a premium for team lead exp, but some do. In comparison, shops that I've interviewed at in Ottawa, Eastern Canada and Vancouver pay 40-60k for the same experience level. As for if they're open to sponsoring....thats' a good question. If it's a multinational maybe, but they dont' usually do PHP work. that's a aprt of the market that I've never looked into. tl;dr Focus on the GTA, go for larger companies, and cross your fingers. As it's PHP, you have a lot of competition (including myself)
Montreal has a great job market for PHP developers at the moment too. I usually get contacted for 3~6 positions a week at the moment just from a somewhat incomplete LinkedIn profile (anywhere from the 55 to 85k range).
could use ssh. ssh -q user@server uptime then use regex out the uptime (since it includes cpu load values too) or curl lots of options 
Okay, so you wound up basically doing what I did with regards to getting phpcs the information it wants. Sometimes (most times?) a user will want to only see the problems with what *they* did, but other times they will want to see problems with the entire file. Since you've already done the part of showing problems with what they've done it is just a matter of having an option to run phpcs against the entire staged file they are committing (not just modified parts). For advanced prompting, yes. Just messages explaining why their commits were rejected. The output of PHPCS can be daunting for newcomers, so a followup message explaining what happened is nice. This is what ours does at the end: CLI::out(); CLI::hr(); CLI::out('%YThere were coding style errors in one or more files being committed.'); CLI::out('%YThese errors must be fixed before the commit will be allowed.'); CLI::out(); CLI::out('%yYou can bypass this check by using the --no-verify argument when committing.'); CLI::out(); If there is a report that does issues in-context I'd love to know what I need to do to use it. I didn't find anything that gave minimal lines of context around the errors. I wound up writing my own that compared line numbers, inserted messages into the git diff, and pulled out the lines. Think "git diff with style check". It gives you a sense of "is this really a problem?" immediately. It's definitely a useful feature, but I don't like my implementation of it at all. 
The market for really good developers is very hot. As an employer it is a daunting task whenever we need to hire someone new. That said, average / intermediate developers might struggle to find good work because there are a lot of them. Schools are churning out under-qualified think-theyre-hot-shit devs all day. In Montreal we're generally happy to pay around $70-80k for a good dev, and would go higher for exceptional talent. 
In regards to going to either Vancouver or Toronto: I think you'll find Vancouver culture more similar to what you have in NZ. There is a demand for PHP devs in both cities (and really any major city in the country).
By default, php will not parse files that don't have the extension. Also, your editor (don't use notepad) will not know what language it is. Your FTP app will not know it's a text file, for converting line breaks.
Technically, yes you could. There is nothing in PHP preventing you from doing that. As long as the files are not accessible from the web, there is no real danger. You might lose syntax highlighting, though, if your editor uses the extension to guess the language. You'll also lose the ability to open the files from a file explorer, since it will not know how to open them. I you are just tired of typing .php in required statements, or if you find them cleaner without the extension, you should take a look at auto loading and remove all your requires : http://php.net/manual/en/language.oop5.autoload.php . 
File extensions are the way most* operating systems and filesystems identify a file type. Use them for their intended purpose, please. It's a PHP file, so identify it as a PHP file. On the other hand, there's no reason you can't do URL rewriting magic if the PHP extensions *there* irritate you. ^*: ^Some ^OSes ^use ^other ^filesystem ^records ^for ^this ^purpose
it is not irritating me, it just seems a little silly and wondered about possibilities. But I get your point. Rewriting is not an option since files are not public facing anyways.
* Do **NOT** trust the mime type. It's sent by the client, and exposed without validation to the PHP script: http://php.net/manual/en/features.file-upload.post-method.php: &gt; $_FILES['userfile']['type'] &gt; The mime type of the file, if the browser provided this information. An example would be "image/gif". This mime type is however not checked on the PHP side and therefore don't take its value for granted. * If possible, the directory where the files are stored should have php disabled * HTML files are harmful too, they could contain XSS vectors; make sure that you are never sending an uploaded file with a text/html content-type * You should be using a whitelist of allowed extensions, and refuse anything else * Use a whitelist of allowed characters in filenames too, and remove everything else (e.g. [a-z0-9]+, no more); or generate a name (I like maktouch's solution of using the md5 hash as the filename)
This might be interesting if you haven't already seen it. [Silicon Valley North: Vancouver tech surges as U.S. immigration reform idles](http://www.cbc.ca/news/canada/british-columbia/silicon-valley-north-vancouver-tech-surges-as-u-s-immigration-reform-idles-1.2732667) I'm a kiwi developer in the US. Everywhere has it's pros and cons but Canada would be a good choice. 
PHP dev in Vancouver here. It's definitely good to have some enterprise experience as being a WordPress developer has its ceiling. Quite a few Drupal shops here, node.js too. We have a pretty active community with relevant meetups every week. Network, network hard! This should give you a good overview of the market: http://vancouver.en.craigslist.ca/search/jjj?query=php
It'll work. Your coworkers might look at you a little funny, but it'll work. :)
You should solve the real problem, which is that you're not using an autoloader.
The demand seems to be centered in Toronto, Vancouver or Montreal.
I am using an autoloader. Autoloader is irrelevant to the question
This makes me want to move to Canada...
I freelance from home and really should get out more. Any chance you could share the meet up info?
Since PHP is executed on server side theres no PHP code that can cause memory leaks on the client side. The only thing your browser gets is the generated HTML Code, in this case 100 lines with numbers.
The right solution is to leave the extensions on the files, but use mod_rewrite so you can use external URLs that don't contain the .php in the URL.
as you could've read, it is not about public facing files. But thanks
Thanks for the references. I'll have to go through them. It looks like many of the best practices aren't too dissimilar from JavaScript. I tend to prefer to make pretty static pages then dynamically control page content through AJAX. So the first thing I'm looking to is database interactivity and having a clean way to push XML or JSON to the client. And from what I see there are definitely best ways to talk to MySQL to prevent injection attacks.
That's a good question and one I've always wondered myself. I love Quebec but my french is grad 12 from years ago and mostly forgotten.
Well, I assume you already know a thing or two, about XML, JSON ... if you want to know how to prevent mysql injection attacks, then you should use PDO or MySqli APIs. Almost everyone these days prefers PDO. For which you can get a very good, and easy to understand tutorial at http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers 
You're searching for where album = an empty string, use album = null. Also, I'd recommend formatting the album string in PHP and not using SQL. Edit: Also, I'm not sure SUBSTRING_INDEX() takes negative index values, another reason to use PHP.
PHP.NET has really good documentation, including examples. One of the sections it's about MySQL. Take a look, it's worth it.
Thank you -- I will see how far I can get -- I find the PHP side of things still a little confusing.
Search the sub, it's been asked and answered hundreds of times.
Meetups has quite a few listed; I don't go to many of the php-specific ones, but Go and node (and formerly ruby) tend to have a lot of interest these days. Individual dev firms also will host events, as will a few of the city's co-working spaces.
Shouldn't it be `album IS NULL`?
&gt; being a WordPress developer has its ceiling I second this - if you brand yourself as a 'WordPress developer', nearly all the postings you'll find won't be for a serious developer, so much as looking for a person who knows computers and can do trivial updates to php. 
Using composer to autoload files would avoid these types of dilemmas.
&gt; I wouldn't worry about being a foreigner - the large majority of devs I've worked with over my career have been from elsewhere. Agreed. Even in the middle of Québec, in a 100% French-speaking community, I've worked with a surprisingly high number of people from outside the country, especially from South America but also from the Middle East and even China. The language and culture barrier was always present, of course, but was quickly overcome in all cases. I loved their cultural quirks and hearing them awkwardly cursing in true Québecer fashion is really cute. TL;DR Even outside of large cities, you'll find that people will welcome you with open arms, especially if you're a skilled worker.
PhpStorm for an IDE. You'd be doing yourself a disservice by not trying the 30 day trial. 
Overapi.com Cheat sheets for tons of languages and technologies. An overall great resource
What kind of development do you do?
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to [##php on Freenode IRC](http://webchat.freenode.net/?channels=%23php).
It really depends, I've worked for 2 companies in Montreal as a PHP Developer, one was 100% anglophone (most people in the office could barely speak french, if at all) and currently I work for a company based out of Toronto, so probably 85~90% of my day is done in english (one of the guys I work with doesn't speak a word of french actually)... but other companies here that some friends work for are 100% francophone... its really hit or miss.
As a Halifax dev I can confidently say that you should look at Toronto or Montreal.
I got deported from Quebec for working without a permit :D true story. It happened in 2002
I second this, I downloaded it because it was what we use at work when I got the job; and I can never go back. It's simply amazing. Beats any other attempt at web IDE I have ever tried.
I just took a quick look, didn't really peruse the code. I think your code is very readable. I tend to work with badly readable code a lot, because of some of our peers who have moved on from my current employer to greener pastures, and this is not badly readable at all, in fact I'd say it's quite the opposite. I personally like the opening brace of a function to be on the same line as its name, but that's partly personal preference, and partly because in my favorite editor Sublime Text, this makes selecting the entire function a matter of pressing Ctrl-Shift-Space and then Ctrl-L. So that's basically nitpicking. I didn't see a single comment other than the occasional PHPDoc style comment, well those are always useful so I say keep that up. Other comments, that explain code, well let's look at a method in your code: private function processPropertyRules($property) { $rules = $this-&gt;ruleMap-&gt;get($property); $proceed = true; foreach ($rules as $rule) { if (!$rule-&gt;execute()) { $proceed = false; break; } } return $proceed; } I, for one, fail to see why that code needs comments. I'm sure there are examples of less self-explanatory code in that repo, but I am personally a believer in only adding comments to code if they are needed, because comments can clutter code. I actually think adding comments to that particular method will make it worse, not better. If comments are needed, then perhaps a check is in order, to see if a better named variable, or even a refactoring, will make the code better readable. A little Googling will show opinions on both sides of the aisle, but for me personally, I'd say don't fret about the lack of comments too much, especially as long as you take the time to name your variables, classes and methods well. *That*, IMHO, is much, much more important than comments.
I'd say that code also doesn't need comments but I think there should be a DocBlock at the top. What does *processPropertyRules* actually mean? What does it do? It's not obvious from the name and it really isn't even all that obvious from the code. 
I disagree. You have a property and a set of rules, and this code checks if the property complies with all of the rules. It returns true if it does, and false if it doesn't. I saw that in a handful of seconds. Are you arguing that this code needs to be readable if you know absolutely nothing about what a property or a rule is, or a rule mapper even does? Because if so, this is me disagreeing with that, too. I don't need to know what a rule or a property is to see what this method does with them. If I were to actually do any work on this code, the first thing I'd do is find out what it is actually used for, and the sort of entities that are involved. I think a fair bit of background knowledge may be assumed.
u guys rock
I'd call it *verifyPropertyRules* instead of *processPropertyRules* and then perhaps such a comment would be unnecessary. Of course, the DocBlock comment could be "You have a property and a set of rules, and this method checks if the property complies with all of the rules. It returns true if it does, and false if it doesn't." and I would think that to be quite reasonable. Then I don't need to look at the code to figure out what "processPropertyRules" does. I write comments like this for *myself* because I have literally written so much code that I am no longer capable of remembering the reasoning behind it all. 
it is usually a good style to NOT commit composer.lock in library-projects, because you want to be flexible here. It is different for applications where you need to specify exact versions which are tested
coding styles are like assholes. everybody has one, but nobody likes the other ones.
Thanks for replying!
Looks good but, like pthreads, it would be much better as part of the official distribution. This should be easier to get included in core compared to pthreads, right Joe?
Doc block is a must. Also typehinting for $property would be very welcome, because in this version I can't really tell what the function is expecting of me. A string? An object? An instance of Class "Property"? An instance that implements "PropertyInterface"?
If you care about coding style you could just follow psr1, and psr2. Looks good though, except: use docblock comments for everything. Mostly just for intellisense/code completion.
There's also an unnecessary variable in there (`$proceed`), I'd probably have written it like this: private function processPropertyRules($property) { $rules = $this-&gt;ruleMap-&gt;get($property); foreach ($rules as $rule) { if (!$rule-&gt;execute()) { return false; } } return true; } You could arguably also inline `$rules`, too. Or wrap it up in `array_reduce()` and a closure, but then you're losing readability plus it won't exit early: // (Untested) private function processPropertyRules($property) { return array_reduce( $this-&gt;ruleMap-&gt;get($property), function ($carry, RuleInterface $rule) { return $carry &amp;&amp; $rule-&gt;execute(); }, true ); }
That would be if the filename was a field in the table and not something he's retrieving elsewhere. But yes, if he's using a value already in the table, he may as well manipulate it through SQL.
Yeah, I was just showing what the comparison should be. I probably should have made it clearer, thanks!
Dumb things often have dumb origins. They're often surprisingly persistent, too.
&gt; no one will know if it's a code file, an image, a stylesheet, etc. In fact, it will look like a directory to a lot of people browsing. This would confuse and anger me. 
Try couch cms, ... www.couchcms.com ... you define editable regions, very good for custom / boutique sites. See http://www.couchcms.com/docs/tutorials/portfolio-site/about-us.html for a quick intro ... very easy. Also look at perch cms.
Everyone needs to take a step back every so often and consider "Why exactly are we doing this? What is the benefit?"
If you're going to automate it then you may as well just use the MySQL command. Something like mysql --defaults-file=/path/to/config.cnf dbname &lt; /path/to/file.sql (Where config.cnf has your username/password.) Alternatively, just read up on how to execute SQL commands in PHP. The [PHP manual](http://php.net/manual/en/book.pdo.php) should help.
agreed. Hard to get adoption if its not included...
&gt; So they have decided to name this next release php 7 so that people looking it up don't get confused by these very old books and articles. Now users are going to be confused about upgrading from PHP 5.x to PHP 7. Success! Honestly this is so shortsighted. Are people really going to be confused by 10 shitty books from years ago? Most people don't even read the books. Clearly it's much easier to explain "those PHP 6 books are way out of date" than reeling off your long explanation of why there is no PHP 6 and you're supposed to upgrade from 5 to 7.
Disclaimer: This is my personal opinion, you don't have to like it Things I do differently * 1. I think method chaining is bullshit, it doesn't make your code easier to read and you are using (albeit negligible) performance returning an object. You can actually find quite a few good blog posts on this subject. * 2. 99% of the time I don't like seeing exclamation marks in code. Because of PHP's magic type casting it makes is somewhat hard to see what a piece of code is doing if (!$collection) Makes me wonder what collection is in this context? Is it a boolean, int, an object that can be null? I see no type hinting anywhere around the code to tell me what it does. Instead I prefer to use the more explicit version if (null === $collection) or if (false === $collection) I also use Yoda-if statements, if you don't like it, by all means turn them around. Anyways this way it's much easier to see what collection actually is. * 3. I also strongly disagree with /u/spin81.. In my opinion every function in your code even the most obsure hidden private methods should have docs. It allows you to add type hinting to the parameters and return types making it much easier for IDE's to work with. Like in his example I don't know what the $property argument is. While this version ^^^^^REDDIT ^^^^^SUX /** * @param Property $property */ private function processPropertyRules($property) { //abc } tells me that $property is supposed to be a Property object. This way my IDE will also start complaining if I accidentally pass a string, int or a different object. You should definitely add docs to all methods in your library. 4. I do really like the verbose function names like `getWithCallback` definitely worth it IMO! That's it as far as I can see. Also putting { on a new line after a function or class definition and keeping it on the same line for if/for/while statements is good practice IMO. It's the standard that Symfony uses as well!
Looks great, but I wish the implementation was immutable. `$ustring-&gt;toUpper()` should return a new string, not modify the old one in place, IMO.
I would recommend MODx - http://modx.com/ It gets completely out of your way and lets you control exactly how everything is displayed and managed. It makes NO preconceived ideas of how the content should be dealt with.
This would have been a decent tutorial, had it been posted a few years ago. These days there's no excuse for many of the bad coding habits presented here. - The database is hard-coded. The class should accept a PDO instance in the constructor. As it stands I can't change any connection params without modifying the class. - Mixing presentation and logic. There are several light-weight ways to solve this one, even without adding more dependencies. It's just lazy. - Poorly named methods which don't describe what's happening, and useless properties. For example, Why do I need to call `$this-&gt;feedURLS()` and then read `$this-&gt;feedURLS`? Why not `$feedUrls = $this-&gt;getFeedUrls()`? - You're kind of sortof almost using Composer. Actually, I thought its usage seemed out of place compared to the rest of the article. Feed readers are very, very simple programs. They're decent tutorial fodder because they're small yet require gluing together different pieces. This tutorial just seems to miss the mark, though. It contributes nothing that an example repository with well commented code couldn't accomplish. There is no "why", and very little "how." Lots of "this file does this, copy and paste this code." A new developer following along will end up with a working feed reader, but a very poor understanding of how to write decent code. 
I agree with the naming. It could have been more clear. I'll keep that in mind moving forward!
I'm taking care to make sure I follow PSR-2 standards. However, it only takes me so far. People really have been making very good comments about the mehtod names not being explicit about what its purpose is. Thank you for your input!
Not totally sure why you were downvoted. Your comment's a bit crass, but I think it has some merit.
This is nearly exactly what I'm looking for. A bulk list of organized syntax linked to more detailed explanations. Years ago when I was initially learning JavaScript I was looking for something similar and found a lot of lists that didn't quite cleanly list everything the way I wanted to I made my own, which I still reference from time to time today. I should be able to study and memorize the list and be pretty functional inside a week. Thanks! I'm also open to check out any other favorites.
Thanks for bringing something new to the discussion. /s
That's a pretty glowing endorsement. In general what I'm looking for is good syntax highlighting, formatting and syntax suggestions to aid through the initial learning process when I don't know all the commands by heart. Likewise I'll check out Netbeans as well. A coworker endorsed the use of Sublime (for another language we use) and so far it's been pretty cool but I'm definitely interested in checking out what's most popular since things rarely become popular if they aren't pretty damned good. But of coarse everyone has their preferences so I'll try a few things.
&gt; I totally agree with you. I actually wrote this article and the code many months ago (early this year). the first code commit on Github will prove me right. Not sure what this matters. I'm not arguing about the age of the code at all, but "early this year" is not really old code. &gt; I had practically abandoned my blog so i decided to just publish the article to sort of keep it alive. I know the feeling, I really need to publish some new content on mine as well. &gt; That said, there are many bad practice in the tutorial like the abuse of composer like you pointed out and poor naming convention. &gt; The aim of the tutorial is to show beginners how stuff is done. If you're aware, then take an evening to clean it up, or a few minutes to point out the issues in the post. As it stands, the post is showing beginners how to copy and paste code which ignores best practice and has a number of code smells. This isn't a problem unique to this article, most tutorial-type posts in any language seem to do this. &gt; i wrote the code while i was pretty new to the php world. No offense, but if you just wrote this code earlier this year, you're still pretty new to the PHP world. I'd suggest not presenting your posts as expert-guided tutorials and more as "learn with me" style write-ups. I think the community would be better off if more bloggers would do so, regardless of experience level. &gt; Sorry about the mess. No need to apologize; you're learning. Writing anything, from code to blog posts, is iterative. I'm not trying to be a jerk, I just hope my feedback can help you learn.
I asked the same question actually ... from the internals perspective I understand why UnicodeString (the underlying ICU api) is mutable, and yet as a user of the API I hanker after immutable objects ... If I make the decision to force the string to be immutable then I remove your ability to create an ImmutableString as part of some fancy library, at the same time I remove every chance of optimum (technically) performance. We are not writing in C++, I do not know that the arguments put forth by ICU documentation for mutable objects actually hold true for us. That's all I know about that ... TL;DR I agree, but what you gonna do :D
"For your library you may commit the composer.lock file if you want to. This can help your team to always test against the same dependency versions. However, this lock file will not have any effect on other projects that depend on it. It only has an effect on the main project. If you do not want to commit the lock file and you are using git, add it to the .gitignore." From https://getcomposer.org/doc/02-libraries.md
I understand your concern. I am just like you. I still do not know a thing about jQuery, in favor of learning vanilla JavaScript/Ajax first. But the argument not to learn the raw mysql is [this!!](http://php.net/manual/en/intro.mysql.php). It is deprecated. It means, no longer used or recommended ... because using functions that start `mysql_` are so far the number one reason, why sites get hacked, through mysql injection. The [PHP Community](http://stackoverflow.com/questions/12859942/why-shouldnt-i-use-mysql-functions-in-php) has learned to no longer use it. So, why waste your valuable time to learn a bad idea?. Plus, PDO is not very different to mysql, as jQuery is to JavaScript. But the performance and security you get from PDO is just monumental.
So from my experience NetBeans isn't very convenient. What I like about PhpStorm is the amount of functionality in it, while generally keeping the essentials easy to reach. You have amazing refactoring tools, which are usually hard to achieve with PHP, and the highlighting, autocompletion, generators and auto fixers are very useful and smart. 
So the $200 price tag on PHP Storm for non-professional use is a bit of a killer. It would only be worth while if you can still use it after the 30 days or I write a LOT of PHP.
Good to hear! Any idea if we can expect a similar push for pthreads? ZTS-by-default would be great :)
&gt; I intend to push this through as hard as I can ... we should see it in 7 in some form, do the same for pthreads and Promises.
Agreed. I know almost nothing about PHP's internals, but from a PHP user's perspective, this makes much more sense.
Could also be refactored a bit. private function verifyPropertyRules($property) { $rules = $this-&gt;ruleMap-&gt;get($property); foreach ($rules as $rule) { if (!$rule-&gt;execute()) { return false; } } return true; } If one of the rules is going to break it might as well just return false right then and there.
&gt; Good to hear! Any idea if we can expect a similar push for pthreads? ZTS-by-default would be great :) &gt; do the same for pthreads and Promises. There is a measurable difference in performance of ZTS builds and non-zts builds (not enough to dwell on in the real world, but enough for internals to dwell on, probably rightly). The current implementation of TSRM could be changed for one that removed measurable overhead, so that ZTS could be the default build. You would have to argue for so long about that, I'm sure no one will ever live that long ... Let's assume you have access to the fountain of youth from __insert sci-fi film here__, when the first epic battle is over, you would then have to convince internals that threading is something that most users want, and need, and are prepared for before I could get it moved from pecl into the core. This might all seem very depressing ... hold on though ... threading at the frontend of a web application will never make sense. Just because PHP could do it, doesn't mean, at all, that you *should* do it. Basic maths prohibit a model of execution where a single request results in X user threads being scheduled for execution from scaling. I cannot imagine what a CPU would have to look like to make me think anything else. You don't want threads at the frontend, is the long and short of it; if part of your application requires what threading provides then that part of the application should be separated (isolated) from the frontend, run as a system service, communicating with the frontend of your application via some form of RPC. In the real world, the installation that you run your backend services with can and should be configured differently from your frontend php servers, in the real world, if things are done right, you can just build a thread safe php for the purpose of running your backend ... That's not really what you were looking for, I get that .... it's the best I have ... and not bad reasoning either ;)
I think Perch is a lightweight CMS, worth checking out perhaps?
Any reason not to pull a DateTime and add a `UStringImmutable`?
These two groups exist solely on the fact that some things need to run on **your** servers, and some things need to run one almost **every** server. One takes little more thought and experience (shared dev) than the other. But I don't see how that distinction affects my work. Two groups that I've seen at various jobs that have a way way **waaaaaaay** bigger impact on my activities are: Devs and scripters. Scripters can also be categorized as "OOP scripters" (as in "put similar procedural code into class methods") and the you-know-what. And you wouldn't believe how much success people have, that are "just scripters". Scripters also most of the time come with a good set of NIH attitudes. Struggling with this code, and then trying to explain to these people that there are design principles and good practices is exhausting. And for the fast Dev cycle of PHP: **Good**. It's a fast moving business. Deal with it. Yii 2.0 will require PHP 5.4+ and I wouldn't be surprised if other PHP frameworks are moving faster now too. &gt; As a user who doesn't know what root or a compiler are I want to upload this PHP project to my cheap web host and have it "just work" So that I can share pictures of my cats without having to learn anything new Or you know, use facebook, instagram, picasa, imgur, tumblr or any of the other 4 gazillion social media sites. If you handle source code, you will have to put some work in it.
There's nothing forcing us to keep PHP APIs close to underlying C APIs. Actually, trying to that that is a major reason why the currently standard library sucks. I suggest doing what is reasonable (toUpper/toLower returning new strings), rather than sticking with the behavior of C++ APIs, which target C++ needs.
Well I hesitate because of performance, but I do agree, not at all objecting to deviating ... EDIT: we have immutability ...
A co-worker of mine came up with a solution for this exact problem, the results are here: http://www.contain-php.org/ The documentation is a bit rough but this is in production for several non-trivial sites with a mix of different data sources (both graph and non-graph) like you're proposing. What it does well is provide a single data structure for all your models regardless of backend. It doesn't try to get smart about handling things like relations (although these things can be implemented). It was built with performance in mind - collections don't hydrate objects until they are actually being used, properties are compiled in, models don't contain unnecessary metadata (such as the database connection). It's by no means a panacea for this problem, for complicated queries and things you'll still want/need to drop down the database driver for some things, but even after you do that you can easily hydrate it into your model so your data is ultimately accessed the same way across your application. 
Very good point. I think a lot of ppl don't think about this divide when discussing how useful various tools are.
In case it's not clear, I'm quite confident that the php code is valid. As far as I know I set up the database tables in the exact same way. The code works for one table, but not for another.
Thanks for your constructive criticism. Will keep them in mind going forward.
ah, the $200 price is for the "Companies and organizations" which is the default tab. For individual developers it's $100... or $50 to "renew"... Not sure I like the ongoing cost... but I suppose it can be worth it depending on your use.
marking final on classes and methods makes you think more about your design upfront and encourages composition or inheritance. The flipped logic comparisons is called [yoda conditions](http://en.wikipedia.org/wiki/Yoda_conditions). Mostly just a way for you to not fat finger your code and accidentally assign something when you're trying to compare. You might have already knew that but both those things confused me when i first encountered them
What is the result of "var_dump($query);" (before the fetchAll())? Because if the query fails, $query will be false and you will get this error... You can also add: if (!$query) echo '&lt;pre&gt;' . print_r($handler-&gt;errorInfo(), 1) . '&lt;/pre&gt;'; after the query to view the error information (if there is any).
I don't see failing tests? https://travis-ci.org/doctrine/orientdb-odm/builds reports some timing-related problems that are likely race conditions between the DBMS bootstrapping and the test suite running before the server is ready.
var_dump($query); is returning false. Then when I switch everything to my other table is returning the correct string. Any idea why this would be happening? The table does exist and the PDO request is connecting to my database as far as I can tell.
I worked with Andrew's contain for a bit more than a couple of months this year. It was designed with performance in mind. That said, I liked some parts of it, but in general, it feels messy, suggests inheritance and leads to very messy persistence-oriented code in my opinion, whereas the focus should pretty much always be readability and SOC. I pretty much prefer to retain control over my models when I need to hydrate data across different persistence layers, for example with stuff like https://gist.github.com/Ocramius/f8504800183cf0210793 (notice the fact that nothing persistence-related is going on in the actual entities in this example).
As the author of the unfinished SPL improvements RFC, I think it would be a gigantic effort to get a better standard library into PHP "7". One of the reasons the current SPL isn't very good is because the API wasn't heavily reviewed and tested before release; if we had something ready now there might be enough time. Moreover, I think there are other more pressing library improvements needed, such as better functions for working with both Traversable and array types.
[Relevant](http://i.imgur.com/0qTAssG.png).
What, exactly, are you disagreeing with? That there are two kinds of PHP developers? I don't think anyone claims composer is *only* useful to non-root devs.
"index" is a [mysql reserved keyword](http://dev.mysql.com/doc/refman/5.5/en/reserved-words.html), it is strongly discouraged to use those. You can rename your table "index" to something else (would be the better solution), or use: SELECT * FROM `index` (mark the extra two symbols around the word "index")
I think this is more of a tale of two PHP devops teams. The old school ones are more familiar with PEAR, PECL, and the like, while the new folks tell the dev team "ah ah ah there's something on packagist for that". To me the major PHP divide is in use of the language itself. It's Java vs Perl. The JavaPHP developers have a head for design patterns, testing, class hierarchy, namespacing, and the like. PHPerl developers are on the other end of the spectrum. Their code tends to be more procedural, have band-aid solutions, rely on PHP's type casting, etc. They treat PHP as a scripting language while the JavaPHP folks treat it as a programming language.
To bad you can't give more details about the case..Because drupal 7 can be used as a CMF and handle most stuff your throw at it. Just forgot about views when it comes to quering and stick with entity field query combined with entity api and you got a pretty scalable content building toolkit. 
One reason this is hard to debug is because PDO starts in silent error mode. Add `$handler-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION)` after you create `$handler` and you should get much better error reporting. Cf. http://us1.php.net/manual/en/pdo.setattribute.php .
This solved my problem. Thank you very much for your help.
Like making array Traversable.
&gt; It's a fast moving business. Deal with it. Move too fast and nobody will use new versions of PHP because all their code is broken. &gt; If you handle source code, you will have to put some work in it We shouldn't be elitist here.
it's simply an easy source of confusion to write Javascript in an HTML tag in a PHP expression. Separate your concerns better. You'd also have to escape single braces. Why bother doing all that when you can do it cleaner?
Think of it like this--you're reading an english novel, suddenly, on page 138, there's a bit of spanish.
This is a great question! IMO, the second option is superior. Declaring something in global scope is generally a bad idea because it makes it theoretically available to every class and every method (with the possible exception of [singleton configs](http://en.wikipedia.org/wiki/Singleton_pattern). Source: developer with 5 years of experience.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Singleton pattern**](https://en.wikipedia.org/wiki/Singleton%20pattern): [](#sfw) --- &gt; &gt;In [software engineering](https://en.wikipedia.org/wiki/Software_engineering), the __singleton pattern__ is a [design pattern](https://en.wikipedia.org/wiki/Design_pattern_(computer_science\)) that restricts the [instantiation](https://en.wikipedia.org/wiki/Instantiation_(computer_science\)) of a class to one [object](https://en.wikipedia.org/wiki/Object-oriented_programming). This is useful when exactly one object is needed to coordinate actions across the system. The concept is sometimes generalized to systems that operate more efficiently when only one object exists, or that restrict the instantiation to a certain number of objects. The term comes from the [mathematical concept of a singleton](https://en.wikipedia.org/wiki/Singleton_(mathematics\)). &gt;There is criticism of the use of the singleton pattern, as some consider it an [anti-pattern](https://en.wikipedia.org/wiki/Anti-pattern), judging that it is overused, introduces unnecessary restrictions in situations where a sole instance of a class is not actually required, and introduces [global state](https://en.wikipedia.org/wiki/Global_variables) into an application. &gt;In [C++](https://en.wikipedia.org/wiki/C%2B%2B) it also serves to isolate from the unpredictability of the order of dynamic initialization, returning control to the programmer. &gt;==== &gt;[**Image**](https://i.imgur.com/LIXVeAT.png) [^(i)](https://commons.wikimedia.org/wiki/File:Singleton.png) --- ^Interesting: [^Object-oriented ^programming](https://en.wikipedia.org/wiki/Object-oriented_programming) ^| [^Double-checked ^locking](https://en.wikipedia.org/wiki/Double-checked_locking) ^| [^Lazy ^initialization](https://en.wikipedia.org/wiki/Lazy_initialization) ^| [^Multiton ^pattern](https://en.wikipedia.org/wiki/Multiton_pattern) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjtuifp) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjtuifp)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
 public function add($transformer) { if (!($transformer instanceof TransformerInterface)) { throw new InvalidArgumentException('$transformer must be an instance of TransformerInterface'); } parent::add($transformer); return $this; } can't you just typehint $transformer and let PHP handle type checking? I personally dislike using `'$transformer` variable as a string. My first impression was it was a buggy code. I would prefer something like `sprintf('Expected TransformerInterface, got %s', get_class($transformer)).` Also, in your tests, you do `$expectedMessage = '$source must be an object';`, but you're already checking if it throws an exception. It seems a bit overkill and may lead to tests failing just by modifying output string in the function. Just test what needs to be tested. I'm pretty sure not relying on strings during testing is a good practice. Ps. Your code looks really good.
`$this-&gt;attacks` is undefined.
My reasons? 1. Looks ugly. 2. IDE won't properly syntax highlight it since it is written in a PHP statement. 3. You won't be able to lint your Javascript. 4. Seperation of concerns. 5. Using `echo` is a bad practice itself. 6. Using `document.write` is a bad practice itself. 7. You're polluting global scope. 8. Missing semicolons is a bad practice itself. 9. Hard/impossible to cache.
Instead of an `array`, keep your units in a `UnitCollection` class. That way, you'll have more control on your units. $collection = new UnitCollection(); $collection-&gt;add(new Priest()); ... I would probably keep special abilities as a trait. use HealingTrait; use HealerInterface; final class Priest extends Unit implements HealerInterface { use HealingTrait; //code } trait HealingTrait { // Heal functionality } You could bind more functionality with traits to your Priest class in the future (e.g `GroupHealingTrait`) and traits make it pretty easy. I use a similar way on my javascript game development (I'm still a newb) with prototypes. I'm pretty sure traits would be a fair choice since they act similar to JS prototypes. Ps. Capitalize class names. :)
Check the index.php in your root folder. There may be an execute() or another command at the end of it which propagates through all other index.php's. THis had happened to me, I believe it was a timthumb exploit on wordpress a while back. It executes some bad javascript and oftn there is some weirdly named php file with a base_64() code in it which contains the XSS javascript. Hope this helps. Good luck! https://gist.github.com/jasperf/3191259 this might give you a lot of false positives but if you run it you can often find the offending code. It's a pain to clean up dso like other people have mentioned, make sure your applications/CMS/etc is patched. 
Why is using echo on a php page undesirable? When filling in charts with text what do you use?
Anyone from Internals care to comment on whether the AST will be exposed via an API? (It really should)
A templating engine! :) Twig is what i prefer
I am "from internals", the answer is "yes, if someone writes an extension for it". Nobody has yet. So, well, maybe.
Nice! All green, I'm starting to get excited for PHP 7.
Well, it really should be part of core. It would allow us to do a lot of things, such as static code analysis, sandboxing, transliteration a la LINQ-&gt;SQL etc.
&gt; Move too fast and nobody will use new versions of PHP because all their code is broken. Yeah, that's my main concern with PHP. That people won't use it, because they have to move on. If I may ask, how long did you actually work with PHP? &gt; We shouldn't be elitist here. Truism. Not worth my time.
Embedding JSON in the page itself is a good idea, you shouldn't make a separate request if it's unnecessary. It is, however, possibly the only justifiable use of outputting JS directly.
The only reason why I can't typehint the specific collection types, aside from docblocks, is due to PHP complaining about the CollectionInterface not being adhered to. Unfortunately, method overloading isn't really a thing yet in PHP. I'm hoping that day comes soon, though.
&gt; We shouldn't be elitist here. Agreed. PHP exists for all sorts of developers. If people want to hack together a cat-sharing site in PHP, even if their code is horrible, at least they're doing something constructive.
Yes it can. If you look at how Microsoft does it, it looks at the AST of whatever lambda expression is passed to it then creates a SQL expression from that. This is already implemented in [Penumbra](https://github.com/TimeToogo/Penumbra), however it is grossly inefficient since it relies on a [userland implementation of an AST](https://github.com/TimeToogo/Penumbra/blob/1a5c11b1b55e4942d86f088c5210ccff60b59fad/Source/Pinq/Functional/PHPParser/AST.php). Nikic has already laid out the ground work with a [userland implementation to use as a reference](https://github.com/nikic/PHP-Parser) which you guys really should consider mapping over to core. 
I really like where all of this is going. #ChangeIsGood
Good, we're in agreement then. Now I'll just go ahead and sacrifice a goat during a full moon in order to see it realised :) 
Even if you're not using RequireJS, you don't need to echo javascript. I use the method described here http://stackoverflow.com/a/7956249. &lt;script id="data" type="application/json"&gt;&lt;?=json_encode($config);?&gt;&lt;/script&gt; followed by var data = JSON.parse($("#data").html());
http://www.heise.de/newsticker/meldung/End-of-Life-fuer-PHP-5-3-2293804.html
You know how with web pages you usually have separate files for the html and css? This is to separate the structure of the page (html) from the display of the page (css) - it means you can easily find and change one aspect without worrying about interfering with the other. The same deal goes for php and javascript - server-side and client-side code. They both do very different things and mixing them up together means more hunting around your code when you want to change things. It also makes your code a lot harder to structure and more difficult for others to read and improve upon. Also, by having your javascript in separate .js files, you allow browsers to cache them and prevent additional tcp requests, meaning your page will load faster for everyone and will use less bandwidth.
The fact that list() will assign in the opposite order is a big deal - surely this is a breaking change that the PHP devs previously weren't keen to do? That was the argument they used for not deprecating old non-OO methods anyway. Also, I was not aware that list() assigned right to left - what a counterintuitive design choice. 
Seems to be missing any kind of link to [the actual source code](https://github.com/vlucas/spot2). I tinkered with the previous version of this in the past, it wasn't a bad tool then but it was full of MySQL-isms. Glad to see it's improving.
Not gonna lie, I don't understand this RFC.
&gt; If people want to hack together a cat-sharing site in PHP, even if their code is horrible, at least they're doing something constructive. Given some basic tools and wood, anyone can build a dog house. It's just a box with a roof. So is a tool shed, and to a certain level so is a house. We as a society don't let just anyone build houses though, or at least we require that someone who knows what to do (and more importantly in a lot of cases what not to do) signs off on the work before anyone's allowed to use it. I'm not saying don't write hackish code, obviously that's impossible, we all go through that stage as we learn. What I'm saying is that whatever you're doing has probably been done before, so unless it's truly novel or you have reason to believe it's better quality than what's already out there keep the hacks to yourself. There are a million existing cat-sharing packages, most of which are also hacks written by someone learning and scratching an itch, the world doesn't need another one to be released and abandoned, yet found by enough vocal "upload and go" users that shared hosts will refuse to upgrade past whatever version phpMyCatsRAwesome was last updated for. It's not elitist to have standards, nor to acknowledge that on internet-facing machines not updating software is foolish. Computers have always been and will always be a moving target. Just because some have been able to ignore this longer than others doesn't mean they're not wrong when they do so.
I think you have an extremely poor attitude. I value programming discipline very highly, but everyone has to start somewhere. A lot of people don't realize there are ready-made solutions to their problems, so they just start developing their own. Or they just program as a hobby, and enjoy the challenge of creating things themselves. Or they do it as an exercise to better appreciate the work done by others in creating available libraries, or to hone their own abilities. Discouraging a person from programming because they're not automatically good at it is like discouraging a child from reading because he might not know all the words. You're not just "having standards," you're effectively stating that you think people have no business programming if they don't do it *your* way, or at least in the "conventionally accepted" way. And that's just plain wrong. Creativity should be encouraged, not stifled based on your "standards." **Edit:** I realize that I think we're talking about two completely different circles here. You don't want to work with people with sloppy code, and that's completely understandable - neither do I. I'm just trying to defend the newcomers to PHP, people who are typically doing it at a hobbyist capacity for themselves or maybe a small group, and not typically working on large enterprise-level projects. Sure it'd be ideal for everyone if they learned proper principles from the get-go, but PHP is widely used and freely available, and it flourishes thanks to that. If you want everyone to have the exact same style, maybe a different language that has more strictly enforced syntax would be better for you.
Oh, this kind of thing usually scares me. Maybe it's because I have never taken a test or never applied to work as a dev. But how could you possibly 'prepare' for anything? There are hundreds of things to learn about web development. If it was down to me, I would at-least ask what the theme of the test is going to be. Is it about frameworks? which one? Is it all about PHP, or font-end and sysadmin are also included? without these, I wouldn't even dare to prepare for anything. 
Many of these things were pushed in prior to the introduction of the process... So there was no formal review or testing, it was committed, so it shipped :-D
I saw DateTimeImmutable as a PHP bandaid fix for getting a proper immutable API in there whilst keeping backwards compatibility. I don't think it would/should have been the choice to have both from the start. And we have a chance with a new major version to fix these prior mistakes.
&gt; So here's my question - should objects be aware of variables and functions outside of the class? I would personally not use a trait for healing abilities, because by doing so you are tightly coupling that specific implementation of that behavior to all classes that use it. Using a trait like this is EXACTLY the same as inheriting the code from a parent class. As an avid gamer, I can promise you that different unit/character classes will heal in different ways (some over time, some up front, some as a percentage, some as a fixed amount, some as a health drain from nearby enemies etc). Each class that implements healing, should implement it's own behavior, even if that code is exactly the same.
Good call! Checking, it shows a **very** slim improvement: http://www.perturb.org/tmp/bm/sample.php code: http://www.perturb.org/tmp/bm/sample.php?code=true
This struck a nerve with me - I've been working with PHP for 9 years. Though I never have considered myself a Senior Developer due to the fact that I don't get involved with the 'root dev' side of things. I most likely couldn't set up a VPS, I don't dabble with unit tests, and I am vaguely comfortable with the command line. That being said, I feel that if there are others that know what I don't know, then great! It's best if they perform those tasks as opposed to myself as they have the expertise in there. I've always been able to land decent projects as a freelancer, but have hit the summer slump and feel like I'm just too far behind to sharpen my skills and still smile knowing I've got 9 years with so little advanced knowledge.
Basically instead of going from PHP to OPCode, it'd go PHP, AST, then OPCode. This added middle layer called AST will restructure how the parser/compiler system work allowing for a lot more advanced language features, and allowing them to remove a lot of hacks put in place. As a metaphor, it's like if the PHP runtime was a website it'd be like refactoring to have separate Models and Controllers (kind of). That's my understanding of it at least.
"Best" is a worthless qualifier. Please elaborate on *any* objective or subjective criteria. (Features / bloat, API style, code size, robustness / extensibility, ... ?)
File upload, specially one not designed for frameworks is pretty rudimentary script to write or even more so to ask for a 'better' one here. Just use `exif_imagetype()` function to get the real image/mime type, and use `is_uploaded_file` to check for a secure upload.... My point is, you can create and and use it right away, as it is too simple to make. Every answer for every question does not have starts 'someone's open source project' 
There is a [link on the Installation page](http://phpdatamapper.com/docs/installation/), but you're right - it should be more prominent.
If it's anything as specific as one framework... I would tell the person doing the technical interview they are terrible. 
True. But these days, people are religious about frameworks. For example, I know a place where everyone uses nothing but Symfony 2. And one framework does not always express on item. You could get asked along the way about Doctrine, Twig, Composer ... 
Really, I used to do that all the time. I'd rather not have to worry about this and just use someone else's well-tested code. The library I linked to is written by the guy who wrote Slim and he's much, MUCH smarter than me, and there are a lot of people checking his code for bugs and vulnerabilities. Why even bother?
Testing for frameworks just gives you people who already know your framework. It doesn't matter that you've passed up (likely) better developers just because they didn't know your chosen framework (big whoop... You saved a few weeks of onboarding) or that you may have hired a dope who knew your framework (but may not know good design principles).
If the job was requiring a specific framework it would be noted within the posting. If the posting did not say anything about a specific framework then I don't think the OP would be tested on one. That being said, if an employer doesn't hire you because you don't know a framework then they probably aren't worth working for.
 * Performance * stability (OPCache vs the very unstable APC, for example) * forward compatibility (libraries are starting to drop PHP 5.3, mine included) * a decent password hashing API * the `callable` type-hint * generators, to reduce the mess of iterators that you (may) have, and enable you to write much more memory-efficient apps * no more short-open-tags mess. `&lt;?=` always works, no more production vs development misalignments on this setting. * `Closure::bind()` and `Closure#bindTo()` * support for connection encoding in `PDO` (I'm cheating, it's actually there since 5.3.8 or 5.3.6, can't remember) * `::class`, which is awesome and makes strings for referencing class names completely useless! * function array dereferencing, so you avoid adding variables with typos everywhere * direct usage of objects at instantiation: `(new App($config))-&gt;run();` * the internal PHP development server, which is really awesome when you want to debug something quickly, or you need to run a demo And much more. I can tell you that upgrading my code to PHP 5.5 unveiled a load of bugs due to missing types/classes just by using `::class`. That one enhancement solely is already worth it :-)
There we go - I added a link with GitHub icon in the footer, and a large prominent button on the homepage, as well as another button beside it leading straight to the docs. Thanks for the constructive feedback! :)
They just want to see how good you are at taking an idea and turning it into a working program on your own. If they're doing it right, you should be able to do it with just pseudo codes. No frame work, no external api should be necessary. How difficult depends on what level they want. 
The fact 5.3 is now EOL should be reason enough for any server team that values system security. http://php.net/archive/2014.php#id2014-08-14-1 
I doubt that the strange `list()` assignments that this change will affect are common in the wild. Certainly the kinds of constructs used in the examples would be avoided by any sane developer, and the only other case where it would be a problem that I can think of would be `__set()` with side effects (e.g. `$list-&gt;c = 1; list($obj-&gt;a, $obj-&gt;b) = [1, 2];` where the setter for `a` adds its value to `c` and the setter for `b` multiplies `c` by its value; with the current behavior `$obj-&gt;c == 3` and with the new behavior `$obj-&gt;c == 4`—but seriously anyone who does anything like this deserves to be punished). The old behavior feels like a bug.
&gt; The point is, if something is easily achievable... This assumes you know all there is to know about the 'something' in question, which is not always the case. There can be 'unknown unknowns' in every situation. Hence It is always better to use code that are already used or being used by a lot of other people, even if it is something simple. So the point is not if there is a 'test' folder or if it was being written by a wise guy. The point is 'a lot of other people have used this code already', so there is a good chance that any issues have been spotted already and taken care of. Of course you can take a look the the projects history to see the past bugs and fixes, if you are so inclined..
One of the main differences between a professional and someone who isn't, is the professional will consider all available tools and select what they feel are the best tools for the job. They don't give a rats ass about dependencies because dependencies are a fact of life in any professional project. If your system administrators are not giving you the tools to do your job properly and can't give you a damn good reason why, the fault lies with them and it has to be fixed with them. In short: - In unprofessional environments you ask for something, they so no and that's the end of it. - In professional environments you ask for something, they say no, and then you have a discussion about why until understanding is reached on both ends.
As a sysadmin by trade, let me give you some insight that might help you. Sorry if some of this seems harsh, but I honestly want to help you. First off, 5.3 being EoL'd should be the biggest reason, however they might be *stuck* as well, depending on what Operating System they are running. If their management has decided that RHEL6/CentOS6 is their main platform, then they are limited to PHP 5.3 unless they use a 3rd party repo, which is likely against the security policy. RHEL7/CentOS7 is still on a .0 release, which means that it's likely not considered a stable enough release to be production-ready. It only comes with PHP 5.4 anyways, so PHP 5.5 might not be a reality for quite some time. No offense, but as a sysadmin, I don't care a single bit about the short array syntax. Same with just about any other "insert cool new language features". It provides no benefit to us. Approaching it from that front is like trying to sell ice to Eskimos, it might even worsen your case with them, welcome to politics. Honestly, if this is the situation you are in, your best bet is to find out what their deployment plan is, and express interest in being part of the team to help ensure your code base will work with the updated software, and that you would like to get a test environment set up for that purpose. Just realize that it might be a while before that gains traction, as it can take a while for the server team to ensure that they are prepared to support the new release. I really do wish you the best of luck!
Try telling that to the admins in charge of the PHP 3 app I helped someone with a couple of months ago...
Just remember, PHP is pronounced fffp.
&gt; In the real world, the installation that you run your backend services with can and should be configured differently from your frontend php servers, in the real world, if things are done right, you can just build a thread safe php for the purpose of running your backend ... True, but since ZTS is off-by-default a lot of things have never been tested with thread safety in mind, so they break in very hard-to-debug ways. This is *especially* the case with third-party extensions. I *hate* getting random segfaults with extensions that the author never bothered testing, which they won't be debugging/fixing until PHP forces them to. &gt; That's not really what you were looking for, I get that .... it's the best I have ... and not bad reasoning either ;) Definitely not bad reasoning, it's just sad I guess... I know this would get a lot of resistance from internals but we can only dream :)
Excluding the first 2, the others only apply when starting new project. Upgrading an existing old app may cause too many issues.
&gt; The old behavior feels like a bug. This is true for a lot of other PHP shittyness that still isn't getting fixed.
I really like flysystem and there is a wrapper for Laravel. https://github.com/thephpleague/flysystem
5.5 would be ideal, but really, it is 5.4 that has killer features. More and more libraries are now requiring 5.4 because of `Closure::bindTo` and traits. **Sidenote**: what is your distro ? CentOS has a very different ecosystem than Debian.
They won't care about language features, so don't focus on that. Keep it to the things that affect their worlds. * They'll see noticeable reduction in load and memory use, around 25-40% less memory if they move to 5.4. I forget where the benchmarks are, but I saw reports at ZendCon 2012 talks to that effect. That means spending less on more hardware. * You'll get even more performance improvements if you use PHP 5.5's OPcache. * No more register_globals! That giganto security hole is a thing of the past. * The built-in web server (php -S) hopefully means they won't get devs harassing them for development environments. * Many modern libraries are now starting to require PHP 5.4. Staying on 5.3 could hamper the SDLC. * If you use &lt;?= in your code then the sysadmins don't have to turn short tags on anymore and make more edits to the default php.ini. Warn them of potential caveats: * If the systems rely on deprecated things like register_globals, safe_mode, the mysql extension, or magic quotes then there'll be an adjustment period. * They'll have to actually do the upgrade. IMO the best way to maintain a good PHP installation outside of using the default RHEL/CentOS 6 and Debian 6 repos is to roll your own RPMs/deb's and throw them into your chef/puppet/salt/etc setup. It's kind of a pain the first time you do it, but once you get it down it's pretty easy and then you're not relying on old base packages, insecure 3rd party repos, but packages you built with your own two hands from signed upstream downloads.
&gt; True, but since ZTS is off-by-default a lot of things have never been tested with thread safety in mind, so they break in very hard-to-debug ways. This is especially the case with third-party extensions. I hate getting random segfaults with extensions that the author never bothered testing, which they won't be debugging/fixing until PHP forces them to. It is off by default in many packaged versions, but you might like to know that by convention the vast majority of us (internals devs) test with ZTS enabled; they don't necessarily do it because they care about ZTS, they do it because with TSRM sprinkled *everywhere*, you can easily break the build if you don't develop with ZTS enabled. So [it just so happens that] we run tests all the time with ZTS enabled, most of the time I would say. We don't package PHP, hound [the ass off of] package maintainers for ZTS versions of their builds. If maintainers put out ZTS packages then these 3rd party extensions that fault (and I don't doubt they exist) will become obvious. Noteworthy; any extension that is written by the book, that uses a re-entrant library (if any) and is programmed correctly will not fail in ZTS, there is no theoretical pathway to failure, *none*. If you have the name of some extensions that do fail, report bugs to the package maintainers, and if that fails then report them to me directly and I'll fix it. It's not that I cannot imagine a version of PHP that, as it happens, is thread safe by default. It's that I don't know how to approach the issue without being smashed in the face with barrels of FUD. So I'll keep doing my thing, maybe one day some more research will pay off and we'll have a solution you'd have to be mad to argue with. Don't let the difficulty (if you can describe it as difficulty) in getting setup put you off of conducting your own research, if research shows that your application[s] can benefit (and your skillset allows you to create the infrastructure to do so), then you will have all the reason you need to pester the crap out of your sysadmin (and package maintainers).
I've had a couple of 1h tests for different interviews, usually here in France it's just about doing a CRUD using the MVC pattern... Can't do much more complicated in 1h. So make sure you can do that fast, both with the framework of your choice and without any framework and it should be fine. Good luck!
php 6*
like what?
Wow.. I just though every single serious language out there used an AST
Link for the interested: /r/phphelp: Post specific problems or questions you have about PHP or your code. Hopefu[...] --- ^This ^is ^a ^bot ^and ^won't ^answer ^to ^mails. ^Mail ^the ^[[Botowner](http://www.reddit.com/message/compose/?to=DarkMio&amp;amp;subject=BotReport)] ^instead. ^v0.4 ^| ^[Changelog](http://redd.it/29f2ah)
Did you try [Silex](http://silex.sensiolabs.org/)?
I guess you haven't heard. We now live in la la land where numbers don't follow in order. 
Checkout Stapler on GitHub. It's absolutely great, especially for image work.
I'm just in the market for a lightweight ORM based on the Data Mapper pattern. This looks really interesting. Thank you for your effort. - Is it possible to map different entity properties to column names and back? Eg. the property might be named `$isAvailable`, but the column name is `available`. - [The documentation for queries](http://phpdatamapper.com/docs/queries/) mentions a method get() but doesn't list details. - ~~Is the documentation open to contributions?~~ Just spotted the big Edit button on each page. That answers my question.
Slim's always my goto
If that's the biggest issue you have with PHP7. Then its obviously a going in the right direction. 
I was very confused by the wording, so just to be clear: the RFC is only talking about the **assignment order**, i.e. the order in which assignments are made. list($a, $b) = [1, 2]; Here, in both cases, `$a` is still `1` and `$b` is still `2`. It's just that currently `$b` gets assigned before `$a`, and that will be changed, that's all.
My God. So tractor.
they will upgrade soon as they HAVE to anyway, so just be patient, whatever linux distro they use, php 5.3 is going byebye soon. 
Okay, but knowing NOTHING about compiler/interpreters, would such an extra step not make this whole thing slower?
Well that's just fun thing to say. haha
This had me confused as well, wording is somewhat ambigious for the average user (who I guess probably shouldn't be looking at a compiler RFC).
Because you'd tend to have Opcache running in production, which would cache code and remove the slowness.
Surely the server team are there to service the needs of the applications that they host? What reason can they provide as to why not?
Ah, that makes much more sense, thanks for the clarification. Assigning $a before $b seems like a better order.
Yep it makes sense to me too.
Most places I've been asked to do this have given me a very short brief, I.e. Write a blog. Extremely simple and many ways of doing it right and wrong. It doesn't matter if you finish, it just matters that they can see how you work. I usually start with comments/to-dos' which I then replace with code. It shows you are planning/thinking ahead. Just make sure you ask questions if your stuck! One of my last jobs gave you email addresses of current developers and said they will help if you need them. They marked you down if you didn't ask for help (showing you can work with a team)... Anyhoo, good luck!
The title should read **PHP 5.4 is about to start to receive only security fixes**, sorry for the mess!
PHP is really one of the easiest things to upgrade...imo they are just lazy. isn't performance and security enough reasons to upgrade?? What exactly they need more?
I don't know how you extrapolated that from what I wrote. Also, you take jokes way too seriously. 
This is exactly the thing I'm doing to practice oop. It keeps me interested because i can be creative at the same time.
&gt; Their stack build somewhat amuses me since the requests are handled by Nginx and PHP requests are proxy'd to Apache. And I know that this decreases performance and increases memory usage. Actually, it's fairly common to see Nginx as a reverse proxy in front of Apache. Nginx's architecture lends well to serving static resources (images, css, javascript, etc.), while Apache's flexibility in doing everything else allows it to work well for dynamic content. Additionally, if .htaccess files are disabled (AllowOverride None) and the proxy pass occurs via a *nix socket, the performance would be the same as if PHP-FPM were used. And Nginx's memory footprint is surprisingly small for the amount of connections it is able to handle. You should run `top` or `ps` watching Nginx during a benchmark some time. EDIT: Enable PHP error logs and crank up error reporting to E_ALL. Make sure the developers have access to logs somewhere visible (we used NewRelic). After doing this at prior client, the developers started paying attention and the percent of page requests with any sort of error reported decreased from 60% down to around 1.5% over the course of a few months as the developers started paying attention.
you're doing a lot of writing and closing for just caching. Are you sure memcached is "overly sophisticated"?
I am working with it now, and i like it. I just need to find out which ~~modules~~ dependencies I need and which I can delete. Will post results.
It's probably not, but I'm not a SysAdmin so installing stuff scared the bejebus out of me! Also we use MemeCache at work and 90% of the developers seem to be cursing at it most of the time. I'm open to other options if there's something easy I can install? What's the issue with opening/closing sessions like that? I tested it in a loop and my script execution times didn't appear to grow at all.
I'm still trying to convince my ops team to upgrade from php 5.1...
Your top link to "Introduction" is broken. &gt; it's support deploy via copy This is wrong. The main issue I have with this is a common one to web tools... **What problem does this solve and how does it work?** Explaining the syntax is not that relevant if I have no idea what it's actually doing or why. Why would I use this? What benefits does this provide over simply pushing a git repo to the server? How does this compare to something like Envoy? I'm actually genuinely interested in something ala Capistrano to handle deployment of PHP sites, particularly builds of front-ends, etc. But I have no way of knowing whether this is the tool for me.
Memcached actually sounds way less complicated and more appropriate than the solution you've come up with. My advice would be to spend the time to learn it, rather than trying to hack around it. You'll be a better developer at the end of the day. Not trying to sound condescending or anything.
Absolutely doesn't come over condescending; I definitely took it as constructive! Thanks :D
Aah good point about the concurrent requests to the cache... PHP locks the session when it is still writeable and will hang other scripts. This would absolutely bottleneck it... granted, at the scale it is at the moment no one will ever noticed, but the idea is for this to work to scale, so yea, my idea is bust because of that! Thank you for highlighting it!
&gt; and with other essential features for creating modern web applications wat EDIT: Making pretty syntax is not an "essential feature for creating modern web applications". Writing `$str-&gt;length()` instead of `strlen($str)` is not going to improve your application.
Because I might get some Ruby on me. :D Seriously, thought, it's something I've been meaning to look into. If a more focused PHP tool came into view first I'd probably investigate it instead, but looking into Capistrano (and tbh, Ruby itself) is high on my list. It's just a long list. The fact is my deployment solutions at present are entirely adequate. I generally deploy from a git repo to something on Forge, or Heroku. But I'm not really sure how I should be handling certain things - most particularly things like deploying/committing dependencies. It's not a critical issue, it's just... something that's been on my mind a bit.
Why? I mean, why did the extra step make it faster?
I think he was joking, and that was a good one.
Right now it's like trying to build a building by digging raw materials out of the ground. It's just hard. There are impurities, and other materials in the way. It's a lot more effective to have someone process those raw materials before giving them to you in a refined way, even though it's technically an extra step.
Blogspam. Here's the real announcement: http://blog.parse.com/2014/08/05/parse-for-php-a-fractal-of-rad-design/
Here's the [announcement](http://markmail.org/message/wmbcrpuglxmix4dz), the [API docs](http://devel-m6w6.rhcloud.com/mdref/http/), and the [github repo](https://github.com/php/pecl-http-pecl_http). Personally, I've wanted this for a _long_ time -- I think it just makes sense for a web-based language such as PHP.
I have been working with Doctrine, Doctrine2, RedBean, Propel and other ORM systems. Spot looks promising as well. They are all great, you only need to know **which** to use **when**. But for my needs i have created [mikron](https://github.com/fordnox/mikron). It in the case when you only need to get "Entity" from database. No relations, no magic. Pure model from database row. That's it. 
For cat-sharing sites, whatever. But 'devs' like this are found in far more 'professional' teams aswel. The 'if it works, it works' mentality. I've worked for years implementing and writing plugins for a huge codebase written and still maintained by a lead-dev just like that. It's extremely frustrating, and it held me back from improving, as I had to deal with that hacked together code for the majority of my time coding, hell I'm still bound to using PHP 5.3 for compatibility issues... And I'm not the only one, and this is not the only reason why more devs like me are around. There's plenty of projects to be made where this attitude towards coding hasn't got any clear disadvantages. 
Dunno. I really liked v1. While the namespacing here for once makes sense to avoid identifier clashes, it also somewhat reminds me of the urllib / httplib / urllib2 / urllib.client fiasco in Python. Ultimatively it belongs in userland by now. Core extensions that easily could, should be made available as API testbed reference, or as backward compatibility shim in any case. There's obviously an excessive amount of work that went into its progress. But why was the manual presentation neglected like this? And what happened to the request pool?
I was going to criticize you because of *expensive AJAX calls* but then I found a simple way to do it. //js code variable = value; $url = 'x.php'; //AJAX $.get($url, {name: variable}); And feelsgoodman.jpg
How is that different to what you wrote?
I really liked v1, hated v2 so much that I went back to curl.
I think project structure like the [Symfony 3 directory structure](http://stackoverflow.com/questions/23993295/what-is-the-new-symfony-3-directory-structure) make sense: the *app* directory contains "glue" to configure the application. Such as the `AppKernel` and `AppCache` as well as things like resources specific to global app -- overall twig layouts, the global `Resources` directory, etc.
&gt; Your framework and application code are not special. Nobody thinks directories are special. They are organizational. The interpreter is not the only thing that needs to understand how things are grouped. Simplification by concrete categories is cheap. Almost every framework does it, because filesystem delimiters are effective at reducing confusion.
&gt; Internals in a nutshell... hehe ... it's really this subject though ... threading scares the crap out of people ... for all the right reasons, probably ... but it scares them such that they might not approach the subject rationally, ever ...
Two words were swapped. What a mess!
Yes, but its pretty negligable already according to the benchmarks in the RFC they provide, not to mention the OP Cache introduced in 5.5 would keep the files from being compiled more than once.
nice write up, I like the use of laravel and composer as examples - the memes are a nice touch too!
Time to start moving onto 5.5, if you hadn't already. 
No, being venomous never helped anyone. I, as everyone was once wet behind the ears, and still am to an extent. Which is what I was hinting at. When under the yoke of lead-dev who simple doesn't care about good practice, being shoveled projects that either lack any challenge, or the challenge being wrestling with the code like that... you 'could' stagnate in developing your skills. Having real challenges, and/or an enviroment where you are shown the ropes of better practice, helps a huge deal. Doing basic dynamic websites for small organisations for instance doesn't prompt you learn much. Wether it's hacking together database-data and html with mysql_query and short-tags, or copy-pasting one Zend Framework project to tweak for another. 
Calling it "essential" is just marketing noise from the author. The project itself seems somewhat interesting, but I don't see myself or anyone I know ever actually using it. Having said that, you're off your rocker if you think OO syntax like this wouldn't improve your application. Readability is *huge*. And you chose an obviously poor example to make your case, since single-argument functions don't benefit much on the readability front between functional/OO syntaxes. A better example would be `in_array($a, $b)` vs. `$b-&gt;contains($a)`.
&gt; A better example would be in_array($a, $b) vs. $b-&gt;contains($a). This problem literally only exists if you're writing code in Notepad. Everyone over exaggerates the whole argument order thing. Yeah, we get it, it's not consistent. It's a little bit annoying. But it's not that big of a deal. Does nobody use an IDE?
I desperately wish I could even use features from 5.3. It feels like the majority of Wordpress users are still on 5.2 :(
PHPStorm. Try the 30 day trial atleast, just give it a shot and you will *fall in love* with guaranteed.
PHPStorm but I find the commercial license to be expensive especially for a mom &amp; pop company.
http://php.net/eol.php
I've been using PHPDesigner for years, but there wasn't a version for Mac, so I switched to NetBeans which has been pretty good. However, I don't like that you can pretty much only deal with files in Projects in NetBeans. Working on other people's stuff, I often need to only edit a few files. So I fall back to PHPDesigner or sometimes Notepad++. My next foray will likely be to try PHPStorm as I like what I've seen of it thus far.
There are probably as many good ideas as bad ideas in this.
It's not so easy. And it's not about which one looks nicer. And, if you are using known-length integer-indexed lists, you should be doing new SplFixedArray anyway.
Bloat. We already have enough ways to communicate over HTTP, built in or otherwise.
Sublime Text on Mac. Love it. I can blaze through code with the keyboard shortcuts. I tried PHPStorm on Windows at Uni but couldn't get into it. I never learnt the interface. I have friends that swear by it though.
Vim
The problem is that leaving them in the dust means abandoning [40% of our users](http://wordpress.org/about/stats/) which is just crazy. I think Wordpress has a **huge** problem with education and knowledge; even if we did abandon users and provide recommendations on how to upgrade and what the issue is I would absolutely be blamed when people upgrade and find that their plugin has deactivated itself and is telling them to do something. I want to agree with you, I really do. I **do** agree with you; I'm envious of developers that can use something so damn simple as namespaces, but I also just cannot tell 40% of my users to get lost. The majority of frameworks out there are better written than Wordpress and don't insist on maintaining 10 years of backwards compatibility. One of the lead devs (Andrew Nacin) has said they may move to requiring 5.3 **as early as the end of 2014** ([source](https://core.trac.wordpress.org/ticket/23880)). Now 5.4 is only getting security updates and there isn't even a single line of code in Wordpress taking advantage of 5.3's features.
Sublime Text
Very cool. Thanks.
Come on Microsoft, time to officially release the [Windows SQL Server driver](http://www.microsoft.com/en-us/download/details.aspx?id=20098) for PHP 5.5. (Yes I know their is the widely referenced unofficial driver, my work won't allow it unles it is from MS). 
/r/learnprogramming 
Geany, without the sidebar or message pane. I love that it starts up *instantly*, handles mixed HTML/PHP/etc. well, and has a built-in color picker.
PHPStorm, bought v6 during a year's end sale, jumped on the EAP and tend to upgrade each year. It's worth the end of the constant (though minor) annoyances and frustrations with eclipse and netbeans.
Mikron looks like a nice super basic mapper, and nice name! My goal with Spot was to build something a little more robust though since I always need things like relations, etc. To each his own! ;)
I used netbeans for several years. In phpstorm there is an option to set it up with various key configurations, I was lazy and just chose the netbeans configuration.
At this point WP just needs a rewrite. Think how nice a wordpress based on a min 5.4/5.5 with fully event driven code, based on a stable framework (symphony or laravel), name spaced everything, and standard practices respected. I know WP has made progress in some of those areas but the last time I looked it was still shit compared to what it could be.
It's absolutely shit compared to what it could be. At that point I wouldn't even bother rewriting it, just build something new that adapts or copies from Wordpress what it must.
Just consider how much you pay your devs, and then consider how much time PHPStorm will save them. You can't afford _not_ to pay for and use PHPStorm.
Tried. Ended up wondering what's the big deal... 
I'm the dev, and I'd have to pay it out of my own pocket.
Same here. I've been using Netbeans with the CakePHP plugin for my development.
I've tried it and I hate it. It's extremely sluggish on OS X plus (and that's very personal of course) ugly. I'm gonna stick with ST3+iTerm for now until there's a native OS X PHP IDE.
Definitely this if you are on Windows. I have tried Pspad (very small, very viable alternative), notepad++, sublime text but phpStorm is a very low effort, very easy to get used to (at least for me). I love the replace, remove features with refactoring - it tells you if the resource you are about to delete is in use or not. Quick code formatting, class/function explorer. I'm sure you can get these for other editors as well, but I find it appealing to have all these without plugins or anything.
"PHP" 
I've used Scite for years. It's nothing fancy but frankly I hate the fancier features that a lot of other programs have.
So which one to use when?
I can see your problem, but I still don't see this being an issue, unless you work for Wordpress itself. There's nothing stopping WP plug-in writers from requiring their own increased specifications... or is there within WP terms of use (... like I've read it)? As far as I know, you can easily require 5.3+ for plug-ins. There's nothing stopping WP from working on 5.4 and above. If you're responsible for maintaining wordpress installs, again, WP works just fine on 5.3 and above. Still nothing stopping you from building custom features, using more modern standards.
Also check out Jeffrey Way's series on PHPStorm. https://laracasts.com/series/how-to-be-awesome-in-phpstorm
It's actually cross platform, Mac and Linux included!
I recently switched to PHPStorm from Sublime Text, but I still go back to ST quite often for certain editing functionality.
Vim on mac and linux, sublime text on windows.
Netbeans here. Most of al because xdebug works well on it, for me. I also like the fact that i can open my other projects to copy parts. It can get slow, but so am i.
I recently started using [Atom](https://atom.io/) and it has worked really good so far!
Change the theme. The default one looks terrible to me, so I switch to Darcula and love it. Also, it runs fast for me on OS X, Windows, and Linux (one reason I love it is that I can use it everywhere) and I use it as my example that not all Java programs have to be slow. If you tried an older version maybe it's time to give it another try.
Vim. It's free, mature and I can use it everywhere (even over SSH).
Made the transition roughly 6 months ago and I tried just about every resource there is. The best i found, syntax related at least, is PHP Object Oriented Solutions by David Powers (mainly the first couple of chapters). Assuming you have a reasonable understanding of PHP reading the first couple of chapters should have you pretty much down on the syntax. Learning how to apply that in the most efficient way is down to experience (aided by looking into design patterns).
How can you lose a days worth of work because of an editor. Don't you ever save?
[ No love for CODA? I'm even sticking to CODA 1 xD ]
Neither PSPad, Notepad++ nor Sublime are IDEs, they are text editors. You should compare PHPStorm with NetBeans, Eclipse, Komodo etc. It would probably still be at the top positions, but it makes no sense to compare two distinct software groups.
Netbeans. Regularly use "Goto Symbol" (text search or click on class/function name) and "Search/Replace in Project" which are both very handy. Also the Format function which automatically indents and nests HTML and CSS documents. 
Vim with https://github.com/shawncplus/phpcomplete.vim, Vdebug, and fugitive (among a bunch of optional ones)
Thank you for such a great tool! I've been using deployer for my personal project it's been working so good. I was surprised how simple it was.
PHPStorm Love!
What are your system specs? I haven't noticed any issues with sluggishness on OSX. If you have an old system with only 2GB RAM I could see where it could get that way.
Nice, I see the purpose of this tool. A few things however The method call set("repository", $repo); seems to have a magic meaning but it is mentioned only in a passing comment in Getting Started. Is there a way to create dependent steps in a task, where if a step fails, the rest of the steps are not executed anymore? Good luck.
Came here just to upvote for Atom. 
Xemacs
Ok, how much is your time worth to yourself?
It may be easier to use [Yelp's API](http://www.yelp.com/developers/documentation) where you can search for restaurants for a given location directly, and don't have to 'scrape' anything.
Vim, with a [few plugins](https://github.com/Rican7/dotfiles/tree/master/.vim/bundle).
&gt; This problem literally only exists if you're writing code in Notepad. The problem I was referring to exists everywhere, unfortunately. &gt; Everyone over exaggerates the whole argument order thing. Yeah, we get it, it's not consistent. It's a little bit annoying. But it's not that big of a deal. You must have misunderstood what I was saying. Whether it's `in_array(&lt;needle&gt;, &lt;haystack&gt;)` or `in_array(&lt;haystack&gt;, &lt;needle&gt;)` doesn't matter for the point I was trying to get across, and nor does the (in)consistency with other similar functions. What matters is that `in_array(&lt;something&gt;, &lt;something&gt;)` is much less readable than `&lt;something&gt;-&gt;contains(&lt;something&gt;)`. The latter is very DSL-like, and pretty close to natural language (for English speakers, anyway). Basically, it's all about how easily you can skim code and tell exactly what it's doing. Multi-parameter functions are like mental speed bumps that increase the cognitive effort required to understand the code in question.
Yea it's nice... but dat memory usage! Wow... and it can bring my computer to it's knees if I click the wrong button by accident.
+1 for Eclipse. I've heard a lot about PHPStorm, but from the looks of it, there's nothing it can do that I can't already do on Eclipse.
Have you tried building something using a framework?
I second this. Like any editor, I feel like once you learn to interact with it in a fluid workflow, you'll be hooked. But what I truly love about Sublime Text are, in no order: - in-app packages (CTRL-SHIFT P) that are effortless to install - Instantly search &amp; open any file in a project (CTRL-P) - Code in any language, with Linters available for all of them What I've never been fond of is the name because it reminds me of the band Sublime, which I sorta hate (prepare for the downvote storm). 
As you said, it kills the script. You shouldn't use learn to code PHP, but try to learn to give a user a good way through your application. It's called user experience (or short UX). If you kill the script, you kill the user flow. But if you return to the login script and show an error message, the user can try again immediatly.
I get aroused just thinking about how php storm changed my life
I've used it on both mac and windows. It's been fine on both since 2010. You can turn off features, if you need performance (due to some niche introspections going berzerk).
One little thing I like is that it can be set to automatically upload files when I focus away from the program. I only have it turned on for non-production projects, but it's very nice. Oh, and Composer support is great, too.
Notepad++. Is my G. 
For about 7 years I used Emacs, with a bit of Vi(m) here and there. I loved every minute of it. For the past month or so, though, I've been using Acme pretty much exclusively. Definitely not for everyone, but I really like it.
`if (expression) { return true; } else { return false; }` can be simplified to `return expression;`.
Love sublime. I have the php packages installed to update syntax errors in realtime, and also an sftp plugin to upload all changes through ftp upon save. 
It runs fast as hell in a 1024MB JVM on Windows, Linux and OSX for me - even with a 12GB Ingeniux root loaded into the local tree. If it's sluggish, something's wrong with your Java install or your available memory. As for ugly... try different themes, son.
It's cheaper than SublimeText. What the balls are you going on about?
Really? Xdebug integration and PHPUnit run in the IDE is enough for most people.
please do not use sha1 for passwords, use [crypt](http://php.net/crypt) instead. 
It's sooooo good
Yup. I currently use ST2. Keep meaning to get to 3, but work keeps getting in the way. Some chaps at work use phpStorm and I'm all for the full IDE, however for me, the speed of sublime is why I love it. I have prob 8 diff windows open each to a different project. As one of the more lead programmers on my team I rarely see a day where I'm not working on 4+ different projects. People often arrive next to me with questions on code and I'm only meer seconds from having the code at my fingertips. When I go visit another programmer to review something he worked on a while ago I always have to wait a while before they have the project opened in storm. I know its only a matter of 15-30 seconds... But multiply that over a dozen times a day every day. After a while it adds up. Other then code linting and themes I don't use many extensions/packages. I find it keeps me closer to the code. I know where in files things just by feel. But I admit a function listing would go a long way some days.
NuSphere PhpED What it lacks in features, it more than makes up for in performance compared to Java-based stuff like phpstorm 
Thanks, but when I remove lines 19-22 I only get submission for key1
TextMate. It seems I'm one of the few who still like/use it :-/ Next editor will most likely be Sublime Text, or its opensource clone, http://limetext.org/
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to [##php on Freenode IRC](http://webchat.freenode.net/?channels=%23php).
You can add multiple source folders to a single project in PHPStorm
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to [##php on Freenode IRC](http://webchat.freenode.net/?channels=%23php).
...or use source control?
I've looked at a couple of them, but I really want to start on the nuts and bolts side of things so that I really understand what's going on. I fear that I would learn the framework and not so much the concept.
I actually really liked Coda 1. I used it for quite a while. Coda 2 seemed to just break everything. It was buggier, slower, and most of the UX changes made things worse.
Thanks. I'll look into that.
ok will do, thanks
Wow. That is a wall of options. I'll definitely check it out though. Thanks.
You're damn straight.
Notepad++
Runs great on OSX
Couldn't have said it better myself. The latest versions are so chock full of features and still amazingly fast on my windows and Linux machines. 
Have you verified that key2 is coming through in the post? Or more fundamentally, do you know how to check? 
The personal license is cheaper than sublime text. The commercial one is $200
Ah, my bad.
You can actually use the personal license for commercial purposes under certain conditions; this basically comes down to you buying your own license with your own, non-reimbursed funds and having the software be used by nobody but you. On the plus side, you can also use that one at home. [It's in the license matrix](http://www.jetbrains.com/phpstorm/buy/license-matrix.jsp). The personal license is still around $100, but it's half of what the commercial one costs. As an alternative, there's also a 50% startup discount, which comes down to roughly the same pricing but with the commercial license terms instead.
vim + tmux
I have found it useful to use several editors for different things. PHPStorm is the main IDE and have one or two more support editors for doing different things like editing configuration files, quick edits, referencing files from other projects... Etc. 
I use it on OSX without issues. I tried Coda first, and liked it, but php storm is more flexible, and that won for me.
I don't know anyone running it... this seems to be a pretty good resource on the issue http://sqlsrvphp.codeplex.com/discussions/441706 
I'm a moderate vim user. I like it because if I need to edit files quickly via ssh or located outside of my project (/etc/php.ini for example) I can do it quickly in the terminal. Outside of that I use phpstorm for mostly everything(and a little sublime text now and then). However I've never configured vim for syntax checking and autocompletion (or static analysis if thats possible?). So that's what I'm more interested in (and maybe nabbing a few cool things I see). Thanks for sharing!
There's actually no good reason __not__ to use `die()` to kill the script to view errors. It's a time honored coding practice that is prevalent in the majority of complex programming languages. 
Same, I use different editors for different purposes for example PHPStorm is the only one I use for actually PHP coding while SB3 is something to find stuff quick and edit config files.
Second. I like the idea of PHPStorm but it looks really large for what it is and that = slow to me. That and I don't like an editor that wants to take a bunch of decisions away from me. I don't want it to handle my whole project. I want something to open the file, color code the shit, let me make an edit and then close the file, the end.
Not a fan of open source projects asking for donations rather than actual contributions and community effort. No where does it mention pull request rules or ask for help. meh.
Reads good - if it helps getting bigint support getting baked into PHP7, that would be really nice.
When you're a solo dev, it's less about the time, and more about your bank account.
Argon, Marihuana and Thulium :)
/r/learnphp has various programming exercises that may interest you.
Don't use the deprecated mysql functions, use [PDO](http://ca1.php.net/manual/en/class.pdo.php). I don't think [break](http://ca1.php.net/manual/en/control-structures.break.php) does anything in an if statement, [die()](http://ca1.php.net/manual/en/function.die.php) will do what you want. [Sleep](http://ca1.php.net/manual/en/function.sleep.php) doesn't do what you think it does. Setting a [header](http://ca1.php.net/manual/en/function.header.php) after you send output will cause an error.
thanks deffo checked them out but they only have 250 ppl on the sub :(
No. Use password_hash.
Atom is the most customizable editor I've ever used and it's pretty awesome
Sublime Text 3 for local, or Nano for remote.
Be yourself, and ask them good questions about the organization. The technical stuff is the easy part, get excited about how you can build yourself with them.
I use vim for everything. This includes ruby, javascript and anything else in general.
Painless debugging, multiple git roots, nested projects, extreme configurability, dependency managament, full phpunit integration (going from a failed test to the problematic file/line in one click), impressive refactoring support, code reformatting on vcs commits (so you don't have to type to a coding style, the commit stage will do it for you) etc etc. If you don't really see what the big deal is, I'd recommend using it for a month or so to fully get the hang of it. Once you do, you'll never go back :)
Yep PHPStorm supports both multi-projects and multiple vcs roots.
This. I can also have multiple projects running on different languages at once, which is pretty cool when I need to hack something in Java/C++/whatever. Very useful when you have for example a simple Java program communicating with your php web application.
Sounds like your real problem is that you aren't using a version control system of some sort.
PhpEd when I was on Windows. Netbeans when I switched to a Mac.
phpstorm 
I don't like this approach. My colleagues seem to tolerate it but it gets in my way a lot for some reason.
If displaying errors poses a serious security concern for you, your app is a piece of shit with holes that will exist regardless of whether the error is shown or not.
gVim + an extensive .vimrc
Some of the other intellij IDE's have this too... I wish phpstorm would add it.
+1 for Sublime 
Down vote for Sublime comment as predicted. 
This might help: http://stackoverflow.com/a/11369679/727208
Just think of how the PHPStorm guy feels.
Sounds like a prank or virus. Does anyone have physical access to your machine who knows how to use PhpStorm?
Project's directory structure **should** communicate the intent of your application: https://www.youtube.com/watch?v=WpkDN78P884 So .. unless the intent of your application is *"have a framework"*, there shouldnt even be a generic `/app` map to begin with. Basically, that article is complete cr*p.
I doubt he gives my choice to use something cheaper any thought at all.
If you're using KDE anyways and like fancier editors (or IDEs) try PhpStorm EAP.
yes, but crypt does use bcrypt in most modern versions by default.
well yes, if php 5.5 is available, although some distros simply do not have it yet (looking at you RHEL), at least in the official sources.
At the risk of a down vote, I'm going to recommend you ask/hire somebody to edit/rewrite that for you who speaks English natively. You're effectively asking to be hired by professionals, but your sales pitch is very difficult to read due to the numerous grammatical errors. ....after looking at more of your site, it's not just the blog post that could use some help.
It's astonishing how far that flew over your head.
Logging passwords to a log file isn't all that much better, though.
Haha, so very true. 
Here's a more in dept discussion about this: http://security.stackexchange.com/questions/15452/should-passwords-be-revealed-in-error-message TLDR: It's true that display_errors is bad on production but passwords should not be displayed or logged in any way whether on production or dev setup.
Already have a nice dark theme in netbeans.
We need more Maya prophecies
It's still ending up in a file that often gets shared between sysadmins, developers and sometimes even third party consultants. Because PHP is literally the only piece of popular software stupid enough to log passwords, their presence can be easily overlooked by those unaware of it. Email is even worse than logging, it's insecure on a lot of levels unless special precautions are taken. Encryption is not mandatory by default and it's very rarely properly authenticated. Better than displaying it to end users, sure, but having secret data in an exception is the real issue.
Which button would that be?
I do wish to point out that there's a difference between disclosing credentials in the error message and the stack trace that led up to it; both being part of the same exception object logically makes it less obvious. Removing credentials from a stack trace is much harder, because it would involve an internal API to mark function arguments as sensitive; it's not impossible, but imho the effort involved in the implementation is disproportionate to the problems it attempts to solve.
If you don't have 5.5 available, then you should use https://github.com/ircmaxell/password_compat
In my experience it is hard to optimize slow queries with ORMs like Doctrine which uses its own query language (DQL). You have to rewrite queries in plain SQL in the end. My rule of selecting ORM is like this: * Do you really need ORM at all? * What your team prefers (competence)? * How "big" project is (bigger projects always requires ORM) * Data Mapper or Active Record? I prefer data mapper. Data Mapper is way more easier to mock in unit testing. * Do I need to extend my entity classes?
I will definitely try Spot at least for personal use case. 
Mailing list discussion available [via gmane](http://news.gmane.org/find-root.php?message_id=88F3B0AF%2d786C%2d43BA%2dAD39%2d3D8B77D13B2F%40ajf.me)
Not going to happen. WordPress is inferior to other already developed products in almost every respect. There are more user friendly ones. More developer friendly options with proper namespacing and the like. Also, there are far more performant options with full internationalization capabilities. The only thing in WordPress favor is that it has a giant amount of community developed themes and plugins. If you rewrite the code as you've described you break compatibility with every single one of those. You take away the only thing that WordPress actually has over its competition. 
You mean [this face slapping](http://www.youtube.com/watch?v=xCwLirQS2-o)?
I, much like you, was talking about where I'd like it to be, not where it is.
Period.
Not sure I want to fall in love with something that carries a £139 price tag, especially when this is just a hobby for me =)
I think what people do not really grasp is that it isn't the error message that contains the password, but the stack trace. The password is nothing more than a normal PHP string, that gets printed as part of the exception stack trace. PHP *could* prevent it from showing in the stack frame of the PDO::__construct call, but it is technically impossible to hide it in higher stack frames - simply because there is nothing telling PHP that some particular string is a password that needs to be hidden. To illustrate what I mean: function createDB($dsn, $user, $password) { // &lt;-- here it's just a function argument, could be anything return new PDO($dsn, $user, $password); // &lt;-- here we know that it's a password, could hide it }
The readme file is not the place for full documentation. This one is stuffed with so much info it is useless to get a quick overview (and won't even load on my Moto X with Chrome.)
You're raising a good point about how connections are typically established through higher level implementations and it augments my earlier statement about the effort it would take to implement argument hiding. Not showing a stack trace by default may mitigate the issue; or otherwise not showing the actual contents of passed arguments inside of it.
"security only fixes" means the only fixes applied would be security ones. "only security fixes" means exactly the same.
That sounds like either a misconfigured keymap, or someone's prank.
correct, but i was trying to help and not confuse ;)
What's wrong with shared servers?
PHP is pillared by some major improvements that hold it strong and help it thrive. Let’s have a look at some of them.
You can take a look at: https://puphpet.com/ It takes a couple of minutes to configure your box and it just works. Now everybody who is working on your project will have the same development environment. Still beats WAMP!
Ideally you will want to intercept uncaught exceptions so that you can log only the error message (and perhaps the script path and line number), because in this particular case the error message doesn't disclose the credentials. Setting up exception handlers is considered an advanced topic for most developers, though, and if the concern of logging passwords were the only thing to be addressed we wouldn't be having this conversation here right now.
I despair sometimes! 
The first time you set it up, it is indeed a pain.. especially if your knowledge of devops is limited. Vagrant is nice, but let's be honest, I'd use it only for these scenarios: - If there's more than 1 dev - If it's a custom app that might require special extensions, PHP version and/or 3rd party dependencies (imagemagick, extra databases, etc.) The benefits of setting up Vagrant when all you want to do is have wordpress, is really short. But.. the nice thing with Provisions is that it's easy to reuse. If you do a lot of wordpress sites, for examples, you'll only have to do the tedious work once.. the rest will be: - copy/paste the provision - change the hostname in the provision 
RESOLVED, thanks everyone
Vagrant takes a bit to setup and personally I have found Puppet to be abysmal. I prefer Chef to puppet any day but most recently I have really started to get into using Salt, it's a hell of a lot better than puppet. It's configuration by yaml file. http://www.saltstack.com Also, don't use NFS on windows. Use rsync for your shares.
Well, the biggest problems I had with Vagrant is that most box images have a very limited disk space, and making the drive larger is a real pain the ass (it didn't work for me) . Then I discovered that a single provision can provision multiple machines https://docs.vagrantup.com/v2/multi-machine/.. so I decided to replicate my clusters with 1 node each, instead of trying to cram them all in 1 machine. It's nice cause I can also adjust the memory for each cluster (For example, I give less memory to the WEB cluster since I'm the only user, but more to ES and Redis cause they need more) What are the issues you have? By the way, I never had a really great experience with Puphpet. I tried vagrant with that first, failed, got confused, went back to MAMP. Then I discovered https://github.com/fideloper/Vaprobash and it started to make more sense to me. My current provision script is a fork from this. 
Don't forget "Ctrl + R" and "Ctrl + I" too! :&gt;
first half of the title maybe
Yep, I do the same, but like I said, the list of benefits (for this scenario) is really short. - Separation - ? My files are not in my vagrant boxes, they are on my host machine (and shared to the vagrant boxes thru NFS).. so, separation of what, really? And each project has its own database anyway, so tables don't overlap. Don't get me wrong, Vagrant is super nice and I swear by it everyday, I just think it's overkill for simple stuff. Cost/Benefits ftw. 
From what I've been told the CTO and possibly one of the program directors for the project I'd be working on. They both have strong backgrounds in IT but I'm not sure how technical the interview will even be. Some people I've asked say not at all, but the recruiter who got me this far said to expect it to be technical.
well it depends on your setup for that project. I have simple wordpress sites for me, but also large scale sites which use redis, elasticsearch, influxdb, mysql, php 5.5. These require pretty specific setups, so i would rather keep everything, even the simple stuff seperate, then the provisioning can just throw everything in the right place if i loose the box 
Actually the technical stuff isn't for me, lol. This is only my 2nd or 3rd programmer interview (been doing it for years personally but professionally I always went for the sysadmin roles).
Would your company allow a driver that you built yourself? I built the thing last night from the latest 5.5 snap and the sqlsrv30 driver source from Microsoft. Wasn't hard at all. Haven't tested it under heavy load but it seems to be working fine in my dev environment. 
I'd ignore all security-issues, as long as there is no checkout yet. On checkout, I'd store the whole basket server-side and from there on, only use those values to display the confirmation-page. So the user confirms the values stored on the server, not the ones read from his browser. But that's just from the top of my head, how I'd approach it. 
Hmm... this is exactly what I said. If all you do is wordpress, then it doesn't benefit you. Separating 50 simple wordpress site is not that big of a benefit. If you do complicated custom apps (even if it's just 1) then yes it will benefit you. 
From Tools -&gt; Plugins -&gt; Available Plugins The plugin is named PHP CakePHP Framework. Just install and you're good to go.
And developers who develop without the loudest possible error environment should also be slapped in the face. I fucking LOVE installing a Wordpress or Joomla extension that is so unbelievably poorly coded that I have to turn off errors in my environment temporarily just to see what else is on the page. What is so hard about turning error reporting on full blast and initializing your god damn variables and array keys???????????????????????????????????????????????????????
Thanks, I'm checking it out now!
Why? If you're going to do that, why not just make it a global function or method in a class?
It helps a bit, it means these changes (which were sort of necessary for bigints and so included in the bigint RFC) are over with before that RFC happens and I can worry about other changes.
Explicit casts in PHP (`(int)` and the like) never fail, and I don't think that's bad, it's what you want. For implicit casts, it might be worth being a bit stricter, though. **EDIT:** I'm probably going to make an RFC at some point to add more implicit cast warnings and errors.
nvm, I figured it out with a Stackoverflow post I found
Interesting post linked from here: http://www.reddit.com/r/programming/comments/2e2csa/programming_language_subreddits_and_their_choice/ What stands out is that apparently /r/php has the highest ratio of curse words per comments.
Totally agree
Doesn't bother me in the slightest. I want to get fucking work done, not sit around and circlejerk with a bunch of other asshats about some dumbass design patterns they're just discovering for the first time because they've never actually had to work on production code.
Haha, nice. :)
You should post the link to the Stackoverflow post so if anyone stumbles across this post in the future they'll have the answer too
&gt; You take away the only thing that WordPress actually has over its competition. Nope, you have the name. Yes you would break BC but you could work with the biggest community plugins to get them on board before hand. The name is the biggest thing they have going for them because almost everyone knows what WP is.
It pisses me the fuck off that they somehow link the amount of curse words used to php being a shitty language. Fuckers.
Good point http://stackoverflow.com/questions/6322247/dynamic-paypal-button-generation-isnt-it-very-insecure
I think all future PHP devs should be required to learn how to program a strongly-typed language before learning PHP, just so they learn how to initialize variables and check the type before making assumptions about it. If I had a dollar for every time I had to go into somebody else's code and wrap a foreach loop with if(is_array($var) &amp;&amp; count($var) &gt; 0){ To prevent errors from flooding the logs I'd have quite a few dollars.
&gt; What matters is that in_array(&lt;something&gt;, &lt;something&gt;) is much less readable than &lt;something&gt;-&gt;contains(&lt;something&gt;). Okay, fair enough. It is nicer, I can't argue that. But, I still don't think it's that big of a deal the way it is. I mean sure, if PHP7 rolls around and they decided to rebuild the language from scratch in an OOP fashion then I'd be all for it. But at the same time, I don't really mind the way it is. The only time that your scenario is really a problem is if variables are poorly named. If it is obvious which one is the array and which one isn't, then it's still easy to read. It probably sounds like I'm defending PHP with my life, but I'm not trying to. I totally get its ugliness and it could be better. I really enjoy other languages like Python that are more human-readable and all that. I just don't think it's worth getting my panties in a twist over.
well.. shit.
Direct link (further down the fucking page): https://github.com/Dobiasd/programming-language-subreddits-and-their-choice-of-words/blob/master/README.md#cursing 
I'm not sure how to respond to this that won't seem kind of insulting, so please understand when I say that I come from the same background and concerns. I put off Vagrant for a hell of a long time, I resisted it because it didn't solve any problems I actually had. MAMP worked fine for me. But then I was essentially forced into using it for a job, along with having someone around who actually knew it. More specifically, I was forced to use Homestead, the Laravel-esque implementation of Vagrant. One advantage Homestead has (aside from nice automatic integration of Laravel which doesn't sound like an appeal to you) is that it's actually well documented. Vagrant all too often leaves things up to you. Homestead has actual instructions, which are intended to help you actually know what you're doing. The fact is, Vagrant/puphpet is a tool like any other. It's a contemporary and current tool that facilitates contemporary and current development practises. If you're using something old and shitty like Silverstripe or Wordpress, then you might as well old-school it. But something like Laravel plays extremely well with a vagrant setup, especially Homestead. For example, Laravel's default database configuration and environment detection are already setup on the VM, node, pgsql and mysql already installed, etc. It sounds to me like the problem wasn't just Vagrant, though. Setup of a vagrant box should be just a few commands. It sounds like some of the problem is your environment. It sounds like you ran into some yaks. Essentially you hit an issue called "yak shaving", where in order to get a solution to A, you first have to fix B. But for B to work you need C updated. And C won't update without a new D. And before you know it, you're at the zoo, shaving a yak. Yak shaves are a fact of life in IT, but they're avoidable and minimisable. One of the worst I've encountered was a similar situation to what you're talking about - I wanted to install a package. It used composer. But my version of PHP was actually 5.2.12 instead of the required 5.2.15 or something like that. So I went to update Xampp and found that there wasn't an update for Mac. So I had to get MAMP, which meant I needed to re-setup all my hosts, etc. It turned into a giant clusterfuck. Whose fault was this? 100% mine. I hadn't been keeping my dev environment up to date, and yaks got into my garden. Part of this is Windows. I'm not going to try and turn you to the dark side, but there's a reason a lot of people use Macs. It's not because we are hipster douchebags who care about the brand. Well... it's not **just** because of that. Web development has changed, and the mac environment's default installation of a range of tools (ruby, PHP, python, etc) and its ease of installation of others such as node make it a great platform for a world that has gone command line rapidly. Issues like you mentioned seem to come up less frequently, there are fewer of these roadbumps that make you want to walk away. Another factor is... dude, you're using an Ultrabook. I'm not sure what the specs are on that, but it's possible your platform is just underpowered. I'm using a Macbook Air myself, which should be in the same ballpark, but if you're really struggling that much with performance, it might actually be your machine. Before you give up on Vagrant as a bad idea, I highly recommend using Homestead. It's not really that different to using something like WAMP, but you might find easier to use and better documented than most Vagrant setups. http://laravel.com/docs/homestead I'm probably going to have to conclude with something: people use different tools, and it annoys me when communities like this decide on the **one true tool** that everyone must use or they're a dumb noobie who probably poops in their pants. But I increasingly find that if there's a tool that everyone loves and I really hate or can't see the benefit it's *usually* me who's wrong and I'm just not doing it right. Except for Coffeescript. That shit is dumb. 
&gt; Painless debugging, multiple git roots, nested projects, extreme configurability, dependency managament, full phpunit integration (going from a failed test to the problematic file/line in one click), impressive refactoring support, code reformatting on vcs commits (so you don't have to type to a coding style, the commit stage will do it for you) etc etc. I use a shell and cmd lines programs I call from vim..and that works well and that's all you are ever going to need. Use an editor that is focused on text editing. Delegate the rest to external programs that the editor can call on users behalf...Simple. You really don't need a heavy program like phpstorm...I never understand why people fail to see the stupidity of using something like that...I mean, you really don't need to. I wouldn't mind so much if these people weren't so vocal about it.... So here is my advice for you. Instead of spending next 5 years in PHPStorm. Start using Vim now. Once you get the hang editing text in it (in 5 - 6 years), you wouldn't even care about the rest of the things, and you could never go back. You wouldn't even want to use a mouse for browsing..
&gt; I just think it's overkill for simple stuff. Compared to what, though? Like, I've stopped using MAMP for simple stuff and now use a Vagrant machine (Homestead) for all of my apps, even trivial shit. All I need to do is add a mapping and a hosts entry and I'm good to go. If there's an easier option I'm all ears, but I'm not seeing where this is "overkill". Kind of seems like... just the right amount of kill.
Watch your fucking language. Jesus fucking christ. This is why we can't have nice fucking shit fuck cocking things. Dick nipples.
Downvoted for Sublime comment, because I like Sublime. But upvoted it because that's a dick move to downvote someone for having their own opinions. Also because Sublime Text. 
Yeah, for fucks sake. Their fucking data might be sound but their conclusions are fucking shit. Don't you just hate that kind of crap.
I thought the OP was referring to cappytoi{at}yahoo{.}com's comment because the comment that OP was actually referring to was off the top of my screen. Whoever's in charge please fix your anchors. Thanks. Back on topic, catch your damn exceptions! Minecraft developers too are really bad at this but Minecraft is a whole 'nother can of worms.
Whoo! /r/php is number 1! Other subs get your shit together.
If that graph tells us anything, it's that we all need to get our colons checked out.
I found vagrant to a massive pain in the ass to set up the first time around. I had to restart my computer three times before the virtual machine would start up. I forget what the problem was, I think it had something to do with port forwarding.
Yeah, it's largely why I haven't gotten past learning HTML/CSS. Every post I make is just downvoted to hell and I never receive kind words of advice. We should make a r/phpkind subreddit.
Swearing happens a lot when people are getting real work done.
And 99% of that is /u/philsturgeon. (I still like your work)
Are you seriously saying its reddit's fault you aren't learning fast enough Reddit isn't the idea platform for asking specific technology questions. If thats what you're looking for go to stackoverflow. Reddit, however, is a great place for discussing and keeping up with the current trends for whatever language or platform you are using.
Wow what a patronizing attitude... &gt; You really don't need a heavy program like phpstorm Heavy is subjective. What I call "featureful" you call heavy. &gt; I never understand why people fail to see the stupidity of using something like that The only *stupid* people are the ones who think those in disagreement are all stupid and their preference is invalid... &gt; Use an editor that is focused on text editing That's the point. I'm not editing text, I'm editing *code*. There is a *huge* difference. &gt; I use a shell and cmd lines programs I call from vim..and that works well and that's all you are ever going to need. That maybe all **you** are ever gonna need, but different people have different needs. Personally I really like the "you get full package" approach of Intellij IDEA/PHPStorm. Everything you need/want is already there and it is done in a completely cross-platform way. *Nothing* is platform specific, unlike using a shell/command line programs. &gt; So here is my advice for you. Instead of spending next 5 years in PHPStorm. Start using Vim now. Thanks for the unsolicited advice. I'm also quite well versed in vim and I use it all the time. But for 10 hours per day development, it just doesn't fit *my* needs. I mean, look at [this](http://2bits.com/articles/using-vim-and-xdebug-dbgp-for-debugging-drupal-or-any-php-application.html) tutorial on how to use xdebug breakpoints in vim. That is way, *way* too many commands if you are setting/removing/stepping through hundreds of breakpoints every day. In PHPStorm? I click on a line. That's it. In the end, everyone is entitled to their own preferences, but calling others stupid is just childish and immature...
There's no link, but PHP is still a shitty language.
The issue with patches like that, is that it doesn't solve the real problem here. Whomever wrote the code in the first place not knowing the problem is there. Having adopted a huge legacy project, you can't imagine how many times I've cringed at seeing a wallpaper of **Notice: Undefined index SomeIndex in...** errors. Or worse **Notice: Undefined variable: ...** followed by an Invalid Argument exception some hundreds of lines later when doing a function-call. On your dev enviroment, all errors should be always on. 
Just curious... if $password were a hash then what's wrong with using PDO prepared statements? I might bind to :password rather then ? but other than that I don't understand the problem...
god damnit /u/philsturgeon why the fuck do you have to cuss so much.
He's the hero PHP needs along with ircmaxell.
came in here expecting /r/php to rank highest on list for cursing, was not disappointed. Good work ladies and gentlemen. You make me proud to say i'm a php developer.
Yea, the fucking wankers.
Oh yeah I fully understand my code is a band-aid fix, but at least it stops the website from completely breaking in the mean time while I track down the author and say "Hey asshole, figure out what to do if your data set doesn't actually exist".
Part of learning programming is knowing where to ask for help. Follow this easy list 1. Google it and find the answer on stackoverflow 2. Ask in irc on freenode 3. Ask on stackoverflow 4. By now you've done enough digging around in related material that you might able to answer it yourself, if not, consider asking in a subreddit specifically for help in that area.
I've used Puppet and Chef in the past. My experience with them was very poor. Of course I could get things working but the amount of work needed was too high. Not counting when cookbooks were applied in a different order and everything failed at some point. Then I moved to Ansible and things couldn't be simpler. If you know *nix and SSH that's definitely going to be a breeze for you. Everything is very predictable and the maintainability is super easy. Like puphet, we also have a generator for Ansible: [Phansible](http://phansible.com/)
From the [PDOStatement::bindParam](http://ca1.php.net/manual/en/pdostatement.bindparam.php) page: &lt;?php /* Execute a prepared statement by binding PHP variables */ $calories = 150; $colour = 'red'; $sth = $dbh-&gt;prepare('SELECT name, colour, calories FROM fruit WHERE calories &lt; :calories AND colour = :colour'); $sth-&gt;bindParam(':calories', $calories, PDO::PARAM_INT); $sth-&gt;bindParam(':colour', $colour, PDO::PARAM_STR, 12); $sth-&gt;execute(); ?&gt; 
The real issue is, when you need to use **isset()** or **!empty()**, then there's something fishy that needs to be refactored. **$var** should always be set if you'll use it. You use **if(is_array($var) ...** because PHP isn't statically typed and you need to validate arguments. if (!is_array($var) || count($var) &lt;= 0 ) { throw new Exception('param $var must be an Array and not empty'); return false; } // do stuff with the array
I skipped steps 1 -3, and I was hoping you could tell me what are array()?
This thread alone is going to stretch that lead
Oh, thanks. I didn't know.
I try to explain this to people at my job and they just link me to that "fractal of bad design" article. That article is a fractal of bad writing, and PHP is *the* shit.
\*twitches\*
Well, you're using Homestead, which is nice and easy. The goal of using Vagrant is to replicate your servers, which is nice if homestead is the same as your server. If you don't care about that, then yeah it's fine, setting up homestead is quite straightforward, but it's still more complicated than setting up MAMP. Try to look at this from an angle where you don't know much about system management. You know, the average (PHP) devs who knows about SSH but is clueless about generating a key. The ones who got a contract to make a website for uncle's barbershop. You'll see that, yes, installing MAMP and clicking around its GUI is way easier than dicking around in /etc/hosts and /etc/nginx/sites-available Like I said, Vagrant requires effort in the beginning (your first provision), after that it's easy. Even with homestead you at least have to know basics around unix. Not saying it's a bad thing though, just sayin' it ain't worth it if all you're doing is restaurant + barbershop sites. 
Isn't the PHP community (at least on the online places I visit) picking up what others have been using for at least 5~10 years? And accordingly to more experienced people than me, the same things were already discovered by Smalltalk and other languages, decades ago. Maybe not with the same name. It's just cycles and it's stupid. I really wish there were a few silver bullets on our field.
Thanks, you miserable fucking bastard you. 
fuck you, vim is better oh wait wrong post
My theory is that the PHP community is simply just very unoriginal in their cursing. Most other communities have since a long time switched to newer, better swear words.
If you're going to use reddit, make sure you put the right gear on before playing http://mashtop.com/blocking-out-the-haters/
Yea, the term is news aggregator. Reddit is a news aggregator.
PHP groups, including ##php on freenode, can be quite harsh and immature. More so than groups for other languages. Ask a dumb question in a C++ group and someone will usually reply with "RTFM noob". Ask a dumb question in a PHP group and someone will reply, "wtf. Are you stupid? You're problem is PHP 101. How do you not know that? I knew that shit back when I was using PHP 3.0!" Both answers essentially mean the same thing, but devs from PHP groups have a way of sounding particularly nasty. There's probably a bunch of reasons for the differences, but at least one of them is that PHP is stuck in [Eternal September](http://en.wikipedia.org/wiki/Eternal_September).
&gt; v0.2 - Closure::apply renamed to Closure::call for consistency with JavaScript (former takes an array in JS à la call_user_func_array, latter bare parameters) does it means that 2 methods will be added? say `apply` and `call`
(author here) Haha, awesome responses. I probably should do this analysis again soon to check for the hawthorne effect. "Just act normal." ;)
It's good to update and [refactor](http://en.wikipedia.org/wiki/Code_refactoring) your code, though you don't want to get carried away or you'll never get anything new done. At some point you have to be okay with code that is different than how you'd do it now. As long as it works, is maintainable, and has no security issues, you may want to leave its style and functionality as is. If it's not just a personal project, you may not have a choice anyway. It's also good to be able to code in different ways and work with different objects. It makes you more flexible. If you work with a team that requires you to use a different database object than you're used to, or requires different coding style (spacing, braces, etc). I find PDO much easier to use than mysqli, especially with prepared statements. You may want to give it a try.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Code refactoring**](https://en.wikipedia.org/wiki/Code%20refactoring): [](#sfw) --- &gt; &gt;__Code refactoring__ is the process of restructuring existing computer code – changing the *[factoring](https://en.wikipedia.org/wiki/Decomposition_(computer_science\))* – without changing its external behavior. Refactoring improves *[nonfunctional](https://en.wikipedia.org/wiki/Non-functional_requirement)* attributes of the [software](https://en.wikipedia.org/wiki/Software). Advantages include improved code [readability](https://en.wikipedia.org/wiki/Readability) and reduced [complexity](https://en.wikipedia.org/wiki/Cyclomatic_complexity) to improve [source code](https://en.wikipedia.org/wiki/Source_code) [maintainability](https://en.wikipedia.org/wiki/Maintainability), and create a more expressive internal [architecture](https://en.wikipedia.org/wiki/Software_architecture) or [object model](https://en.wikipedia.org/wiki/Object_model) to improve [extensibility](https://en.wikipedia.org/wiki/Extensibility). &gt;By continuously improving the design of code, we make it easier and easier to work with. This is in sharp contrast to what typically happens: little refactoring and a great deal of attention paid to expediently adding new features. If you get into the hygienic habit of refactoring continuously, you'll find that it is easier to extend and maintain code. &gt;Typically, refactoring applies a series of standardised basic *micro-refactorings*, each of which is (usually) a tiny change in a [computer program](https://en.wikipedia.org/wiki/Computer_program)'s source code that either preserves the behaviour of the software, or at least does not modify its conformance to [functional requirements](https://en.wikipedia.org/wiki/Functional_requirement). Many [development environments](https://en.wikipedia.org/wiki/Development_environment_(software_development_process\)) provide automated support for performing the mechanical aspects of these basic refactorings. &gt; --- ^Interesting: [^Integrated ^development ^environment](https://en.wikipedia.org/wiki/Integrated_development_environment) ^| [^Test-driven ^development](https://en.wikipedia.org/wiki/Test-driven_development) ^| [^Source-to-source ^compiler](https://en.wikipedia.org/wiki/Source-to-source_compiler) ^| [^Database ^refactoring](https://en.wikipedia.org/wiki/Database_refactoring) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjvq051) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjvq051)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
+1 for Netbeans, very powerful and you can sync it with x-debug for debugging.. instead of using var_dumps all the time.
fuck this shit, fuck everyone fuck fuck fuck fuck fuck 
Not sure why you got downvoted - it's a valid question, and it'd be interesting to see a response from leyou in retort. I also have some things to add. * You're not following PSR1/2 which although isn't necessary, is nice when you're working with vendor code. * Things like this: https://github.com/asgardphp/entity/blob/master/Entity.php#L35 ... just wat? An entity has access to the container? That is showing something SERIOUSLY wrong. * And this: https://github.com/asgardphp/entity/blob/master/Entity.php#L84 Why is it in this class? An entity should be portable, this is tying it down. Your validator should be put in a service, or a controller or something else and the entity should be passed to it to be validated. All that heavy lifting that goes with it should go in the validator too. * https://github.com/asgardphp/entity/blob/master/EntityDefinition.php#L5 Use statements generally go under the namespace, outside the class. * Lots of static calls everywhere, without much reason from what I can ascertain. * No docblocks / very few comments in code. * Some other very odd decisions have been made, like here too: https://github.com/asgardphp/db/blob/master/DB.php#L37 Do you really want mysql to be a default? Why not throw an exception instead? Save that weird functionality. I've not looked through much, but from what I can see there are plenty of issues - I mean, I could see many more in the files I looked in, but don't have time to list them all. It's good that you've taken the time to do this, but I honestly doubt that unless you go back to the drawing board and make something seriously impressive that anyone will use it. That's not even a bad thing in reality - I'm sure you've learnt a ton from this, and in fact, I can bet if you did start again from the beginning you'd do things differently, and probably better. I actually wrote my own framework myself as a learning exercise. I've used it for a single project - and it was great; lot's of fun, I can put what I like in, how I like, it's built on Symfony, it's super fast - but I wouldn't want to release it without some SERIOUS time and effort put into it (I can see you've put a lot of time into this, but compare it to a project like Symfony, or even other smaller frameworks) - and unless I was sure it could stack up against the alternatives - why reinvent the wheel?
good to see someone is responding to my bullshit fucking post.
&gt; No other language does this. Ruby and Python allow this..
Those "newer, better swear words" aren't new. Most of them originated with LISP and the rest of the programming world is only just starting to catch up.
Well shiiiiiiiiiiiiiiit.
&gt; This part here is quite comforting, because a conjecture many of us probably have is confirmed. Troll article. Data says nothing of importance.
How would you know?
I'm not trying to replace Symfony. Sf has great libraries, but my framework has different objectives, among others easiness and rapid dev. I don't believe in such a thing as a "standard/accepted library". Some libraries are more accepted than others, but it doesn't mean someone else can't propose a different solution. And that doesn't necessarily mean re-inventing the weel. It's just a different way of doing things. Edit: I also want to add: did you read much on http://asgardphp.com/? I don't think the features are or work the same in Symfony.
I agree with all your criticisms but need to put on my "pedantic ass" hat and quibble with one point: &gt;https://github.com/asgardphp/entity/blob/master/EntityDefinition.php#L5[3] Use statements generally go under the namespace, outside the class. True unless you're using a trait, which turns out to be the case here: https://github.com/asgardphp/hook/blob/master/Hookable.php 
&gt;Sf has great libraries, but my framework has different objectives, among others easiness and rapid dev. I think everyone prefers ease and rapidity over difficulty and slowness. How does asgard make development easier and more rapid?
We curse the most because PHP makes the least fucking sense. 
Seriously, why did you link swear words to the quality of the language?
by that metric using the same data Visual Basic is better than Haskell
Thanks for your feedback, I appreciate. I'll reply for each point. * Besides a couple of wrong methods naming (that I'm correcting), I think my libraries follow PSR1. For PSR0, I definitely prefer PSR4. About PSR2, I concede that. I'm a bit reluctant with this coding style, especially spaces/tabs. * I need the container because of entity behaviors. For example, the ORM behavior uses the DB service. I don't like using static methods for that, but I want to keep the syntax: $article = new Article();, without having to pass a container to all entities. See the point? I'm open for ideas though. * I agree with you on that. It's one of the many things that I'm improving with time. * Uh, I think you missed something: http://php.net/manual/fr/language.oop5.traits.php * I'm trying to get rid of most of the static calls, and if you find some for no reason, let me know. However, when it doesn't affect the application state, they can remain static. * Yup, I know about the docblocks. Again, need more time. * Hum, that's probably a valid point. As I have always been the only user so far, I've made it default to my favorite DBMS but I may change that. Oh yeah I learned a lot. But I really think it offers something else than the major frameworks. See the form library? I'm not aware of something similar. Same for entities/orm/behaviors and modules. If you go through the examples on the homepage you can see some examples which I think make Asgard different. I don't think I'm reinventing the weel. Same purposes maybe (webdev), but different solutions. It's then up to anyone to use the solution that he feels the most comfortable with. Last thing, I know it still has some issues. I know it's not a bullet-proof framework yet (maybe it will be one day). But implementation issues is not the only thing. I'm not just re-coding Symfony or another framework. I'm presenting (or trying to) a different way of building applications. I'm not aware of all the existing PHP frameworks, but I believe some features explained here http://asgardphp.com/ are new.
Fuck the fucking fuckers.
I did not make the link explicitly, I just told my personal guess, the reason for it and gave some data. And then I left it as is for the lolz. ;) I also did not expect this article to become nearly that popular.
If you have the courage to do so, I would advise giving a try to the quickstart ;) http://asgardphp.com/docs/quickstart Otherwise, bundles generation, automigration, simple forms, tests generation, among other things, do, I believe, make development easier and more rapid. About simplicity, Symfony is pretty complete and solid, but at the cost of simplicity. Laravel for example, is another solution trying to make web dev easier.
i think it was a php snippit where i first saw the concept of a 'goodbye world' program instead of a 'hello world' program
fuck 'em if they can't take a joke 
Might just be you, anchors position the page to perfectly show the comment for me. What browser are you using?
It will just be `Closure::call()`, as explained here by the author: https://twitter.com/andreafaulds/status/502094521891844097
The people you share them with.
Aah, in which case I'll have to follow suit and say that the trait should perhaps have been called HookableTrait (which is also part of the PSR coding standards) - in which case it'd be easy to realise that at a glance.
If I'm not mistaken it only concerns code released by PHP-FIG: https://github.com/php-fig/fig-standards/blob/master/bylaws/002-psr-naming-conventions.md
Unless I'm missing something you shouldn't need the count. An empty array will be skipped by foreach.
A global function would look disgusting here, kinda consistent with the rest of PHP, but still. What do you mean by method in a class? The way author proposes it seems nice. What exactly do you dislike?
Haha, that was actually my first [Java] program in my first CS class. Our instructor gave us some swing code, so our assignment was to create a "Hello World" program that displayed some colorful shapes. I created a smiley face that said "Hello World", and looked up Thread.sleep so it would wait a few seconds before turning into a frowning face that said "Goodbye World". Then it closed the window.
Not all servers are poorly managed and oversold.
&gt;What gotchas should I be aware of? Everyone is still counting.. &gt;What gotchas should I be aware of? Where can I find PHP code/resources that make use of higher-order functions.. No list comprehensions. We have our range() function though.... Closure in php are not really closures, but we still call it a closure, because you know, that sounds cool. It wont capture the scope as you might expect. You need the use keywords to 'import' the variables from an outer scope into the scope of the function. But, if you want the changes made to those variable to be visible outside of this scope, you need to import it as a reference.. http://php.net/manual/en/functions.anonymous.php For higher order functions, user defined functions can accept closures. But don't be surprised if you see an array in place of a callback. In php land an array that holds and object (or even its name) and a method name can act as a 'callback' too, most of the built in function will accept either of these... http://php.net/manual/en/language.types.callable.php And the gotchas with php arrays, (dictionaries+lists)..Don't ever mix associative with numeric indexes, despite any of the examples you might see. And expect php functions to reindex your arrays as they see fit. So handle with care..Don't ever assume things to work in any sane way, because often, they don't. Oh and Maximum size of an integer in php is different depending on whether your code is running on a 32 bit or 64 bit machine..So if you serialize something on a 64 bit machine and unserialize it on a 32 bit machine, you might have some surprises... On and you will have to explicitly namespace everything. Php include is not like pythons import. All the included files will inherit the scope of the parent file, just as if it were typed in the middle of the parent file... So all in all, I would say there is nothing in PHP to be excited about, any one who tells you that is either stupid or trying to sell you something....So I would suggest you go back to Python and forget you ever set foot in /r/php.... One more thing...users of /r/php are absolute morons and will downvote anything that they don't like..So don't count on the vote count too much...
It really is. People complain an awful lot about PHP and JavaScript, but if I actually want to get shit done, I use them. And the result isn't even half-arsed, either... you can write really nice, clean, well-written applications in both languages, just avoid the warts.
I can speak a tad from experience over last 6 months (had around 5-6 job interviews for PHP programming roles). Many of them asked the basic questions like (Tell me about yourself? What did you do when...). Once I got past that point and the CV was combed over they would ask me programming problem situations. So things like reversing strings in PHP, what happens with "headers already sent" things like that. My advise would be to develop yourself a mini web application before you go and experiment with a fair amount of random functions in PHP and ensure you understand what they are doing. Then go over and continually refactor your code until you have it as clean as you can! Just anything so you are confident with talking about the languages itself. Also understand that most companies will not expect you to answer everything about PHP, but having an understanding of the language, concepts and debugging helps. Examples of previous work makes interviews a little easier (once again, this is situational).
&gt; I need the container because of entity behaviors. For example, the ORM behavior uses the DB service. I don't like using static methods for that, but I want to keep the syntax: $article = new Article();, without having to pass a container to all entities. See the point? I'm open for ideas though. The thing is, the entity should only know about itself. Literally nothing else. It should be something that's transferable. Take a look at how Doctrine, Eloquent, etc handle their entities - none of them know anything about anything but themselves. I think the principle that's missing from a lot of the code in your framework is dependency injection. If you had the principle down properly then your code would become far better (easier to test, more modular, it'd have better separation of concerns, be easier to see what was going on in a class at a glance). I'll give you an example: &lt;?php // ... class FooController { private $em; private $validator; public function __construct(EntityManager $em, Validator $validator) { $this-&gt;em = $em; $this-&gt;validator = $validator; } public function barAction() { // ... $article = new Article(); // Entity $article-&gt;setTitle($title); $article-&gt;setContent($content); if ( ! $this-&gt;validator-&gt;validate($article)) { throw new \Exception('Invalid article...'); } $this-&gt;em-&gt;save($article); // ... } } As you can see, everything is separate, they are components that are indeed completely independent, whereas currently yours are not. That example is fairly crude, but the first clear example of this problem I saw in your code was here (I didn't look far): https://github.com/asgardphp/entity/blob/master/Entity.php#L84 That I already mentioned. There are many advantages to doing things this way, some are obvious. It's probably easiest to Google things like "service location vs. dependency injection" or "advantages of dependency injection" etc. I actually am finding it difficult to understand why an entity would ever need access to the container still, what exactly is it doing with it? &gt; Uh, I think you missed something: http://php.net/manual/fr/language.oop5.traits.php Indeed! I didn't actually look in the class. One of the PSR standards does mention that traits should be suffixed with 'Trait' though - and things like that make code readability much better; as this has clearly proven! &gt; I'm trying to get rid of most of the static calls, and if you find some for no reason, let me know. However, when it doesn't affect the application state, they can remain static. This kind of goes hand-in-hand with my above comments on dependency injection. You shouldn't really need statics at all with the way you're using them - aside from in Facades (not 100% on that one, not used them before). &gt; Oh yeah I learned a lot. But I really think it offers something else than the major frameworks. See the form library? I'm not aware of something similar. Same for entities/orm/behaviors and modules. It's great that you have learnt a lot, but have you truly tried other frameworks? What do you think your form library includes that for example the Symfony library does not? Now, I know that's a pretty stark comparison - but that is precisely the kind of thing you're up against - simply because the libraries / components that are available such as the Symfony 2 form component are so easy to use, and implement in your own code if necessary. Same for your other libraries. I have had a look at the form component, just as an example and I can say without a doubt that your form component doesn't offer anything new over the Symfony form component, and in fact its' the other way around (though, that shouldn't come as a surprise, given the amount of time and effort and number of contributors that are involved with Symfony). &gt; If you go through the examples on the homepage you can see some examples which I think make Asgard different. I don't think I'm reinventing the weel. Same purposes maybe (webdev), but different solutions. It's then up to anyone to use the solution that he feels the most comfortable with. Again, after looking at the examples; I don't think it's all that much different. There's nothing new (it is extraordinarily hard to make something 'new' these days, so, again, don't feel bad about it). It is no doubt a different solution - but is it a better one? Is it even that much simpler in reality? I honestly don't think so unfortunately - when looking at the documentation and stuff. &gt; Last thing, I know it still has some issues. I know it's not a bullet-proof framework yet (maybe it will be one day). But implementation issues is not the only thing. I'm not just re-coding Symfony or another framework. I'm presenting (or trying to) a different way of building applications. I'm not aware of all the existing PHP frameworks, but I believe some features explained here http://asgardphp.com/[2] are new. Perhaps it will be one day - and if you plan on attempting to make it so, then I wish you the best of luck with it. --- I know I am coming down pretty heavy here, but it's because I want to help ensure you take this as a learning experience. I don't want to deter you if your intention is to take this very seriously. But I also don't want you to delude yourself into thinking it could be used as an alternative to something like Symfony, Laravel, Silex, or whatever you fancy. If you wanted my advice on something you could do that'd be potentially very helpful. Take some just one of your components, compare it against the equivalent from another framework, Symfony, Laravel, etc. MAKE it better than theirs. Follow all the standards, use some great programming principles, focus on it and make it something really, really good. Try to get people to contribute and then expand from that if you want to take it seriously - and then just use the framework you're trying to make better / make a component for. At the very least - once again - it'd be a fantastic learning experience, and it'd give you some great insight into the components that they offer too - and the level of quality of their code has. I do have to say though. I like the website for it a lot - it's got some nice docs and the examples are great. That libraries page is very, very nice. Altogether, you have at the very least something nice to show off on your CV to say you've done this too.
&gt; Hum, it's possible to use a separate class to read the annotations from the controller classes and creates routes according to them. I guess that respects separation of concerns. Unfortunately not - your controller is still concerned with the routing in that case - it is tied to the routing configuration. For the concerns to be truly separate, you'd want to have a dedicated configuration for routing. 
Fair enough, I'm probably thinking of the Symfony coding standards! http://symfony.com/doc/current/contributing/code/standards.html#naming-conventions
Fuck yeah :) We did it!
I mean separation of concern in the framework classes (Controller and let's say AnnotationsReader). For the end-user (the developer), I don't think it's a concern. There is no confusion between the code and the annotations.
 class Foo { private $x; public function getX() { return $this-&gt;x; } } The main example shows the closure being able to access a private class member, which absolutely should not happen without a getter.
I don't think it's a problem. In fact, it makes things quite simple, however; this is not separation of concerns, in fact it's how things become more tightly coupled.
You're not alone, I also use TextMate.
Haskell
What did you just call me?
+1 this guy knows his shit.
Why are you coming to PHP?
Now, that would be an interesting bit of analysis to do. Amazeballs, you might say.
That thing has global state all over the codebase. That make is worthless even before exploring your baseless claims of MVC implementation.
Oh, I agree. I hate WP with every fiber of my being. But try to tell that to a marketing person and they wont know what you're talking about. To them WP is awesome.
Firefox 31
I'm all open for remarks, but not for unfunded ones, so make your point.
It's not a serious code example, that was just to demonstrate how it's used and functions.
Odd. Using Windows 7 it was perfect placement for me on the latest Chrome, Firefox, and IE. Not sure what is causing yours to misbehave. 
&gt; One more thing...users of /r/php are absolute morons and will downvote anything that they don't like..So don't count on the vote count too much... Or if it's something they don't want to hear.
http://www.phptherightway.com/
But still, vim is better :)
Sure they are. My code doesn't have a single static or global. My tests aren't over 200 lines of code each. Context isn't really necessary in this case as much as basic OOP best practices which are violated by your code in the name of "context". No sir. $argv can be copied and passed in as a parameter. Static is not a part of OOP and should never exist in an OOP framework. You can try and justify all you want, but my code does a lot of work, and it does it without a single static or global. This isn't personal against you or your framework. I'm merely stating facts here. You are using practices that should not be used in a framework. That is all.
Replace Annotations with Monads.
Too slow for my machine.
Thanks for your support /u/dops! Skittle farts.
We can talk about best OOP practices all day and night. But is it possible that you mix tabs and spaces?! https://github.com/asgardphp/asgard/blob/master/Common/Bag.php#L54 (Also a honorable mention is the lack of curly brackets around many code blocks)
Another file where they're mixed: https://github.com/asgardphp/asgard/blob/master/Entityform/composer.json
It depends entirely on the specific application really. It's not *always* a band-aid fix. It really just depends on where the check happens and what you do with it if it doesn't pass. If you write this code if(is_array($var) &amp;&amp; count($var) &gt; 0{ doSomething($var); } Then you're completely ignoring the fact that $var is empty or not an array at all. Sometimes that's fine, sometimes it's not. If it's critical that $var has a value at that point in the execution of your application, then you need to throw an error if(is_array($var) &amp;&amp; count($var) &gt; 0){ doSomething($var); }else{ throw new Exception("Hey, your variable is empty or not an array!"); } As I said, sometimes it really doesn't matter and you can ignore the error until you get all the way to the presentation layer. For example, if you pull a user's address book, and then you're displaying it on a web-page, the fact that the address book is empty doesn't really matter until you try to display it, at which point you'd just throw up a block on your web page saying that your address book is empty. Same concept as above, just not as immediate. Also, in general you should try to avoid the is_array check from *ever* failing. If your data is supposed to be an array, even if that data doesn't exist, make sure whatever function populates the array returns an empty array as a fall back rather then just null. 
Might want to read through this to be aware of the few pitfalls of the language: http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/
Don't take a sip of any fluids before reading somebody else's code. You may ruin a keyboard or something. Source: I do a lot of work on other's php code.
/r/vimmasterrace ?
Love how it "confirms" a belief that PHP sucks. Use what you like, I'm too busy getting shit done to care.
Did, anyone else notice we are way down on the happiness graph? Cheer up fuckers!
Sorry but sounds like you are playing the biggest dick contest. I don't care about your code. Report me issues if you like, but without excess and pedantry. Good on you not having a single static or whatever. You might be aware though that some statics do not affect global state. But if you are a static-nazi..
Thanks, I will fix that. I happen to copy/paste small snippets of code and don't notice the spaces in sublime text. I will check other files to make sure it's not recurrent.
You could just use `sed` or the like over the entire codebase.
I agree. Especially in certain environments, this just makes it incredibly easy for an attacker to get a webroot if they need it.
Is it a software engineer or an intermediate PHP programmer job? There's a huge difference.
Guess what, even your beloved Symfony uses globals for argv: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Input/ArgvInput.php#L57 And again for the ORM, there are two ways to use it. One with plain objects, one with statics, for the ones that prefer this syntax: Article::where('id',1)-&gt;get(); over $dm = new DataMapper; $dm-&gt;orm('Article')-&gt;where('id',1)-&gt;get(); Up to the dev to work with statics or not. I wasn't aware there was a witch-hunt against the first kind of developers.
So, are you saying Closures cannot access private variables of classes?
I'm saying they already can: $x = function () { return $this-&gt;x; }; $x = $x-&gt;bindTo(new SomeClass, 'SomeClass'); var_dump($x);
Then the problem is with closures, not the example. It's horrible that is even allowed. Someone made the variable private for a reason.
Yea, I hate those crappy fucking shitfaces. 
Fuck the fucking fuckers. 
All the curse words mean bad stuff? What about "hell yeah, PHP is the fucking shit bitches!"
probably not, though I'll see what they say.
I may have missed it, but are the cursing words averaged when compared to the number of posts in a subreddit? Or just a total? Could that not indicate that PHP is also the busiest subreddit?
Try this [application/framework](https://github.com/devosc/Application). I may be able to answer some basic questions; but the demo should get you going. To realize the answer to 'M', imo, you'll need Dependency Injection (see the configuration and how the view model is being injected into the controller class). This is a simple MVC framework, everything is configurable, but it doesn't have everything, e.g ACL, DB etc; find other libraries for those (or create your own) and inject them as needed. The sample application does depend on another framework for their actual Request and Response objects (maybe later I'll just dummy up some sample objects to remove those two dependencies). 
Yay, yet another framework nobody will ever use.
well fuck you very much!! that was a pretty fucking awesome personal guess ;)
..except that it wont work with `Iterator`s ;( we need better api for that
"='" . $username Get out of this habit. Kill it now, burn it in a fire and never look back. OK, so you've "sanitized" it. What happens when Bob O'Malley opens a ticket saying he can't make an account called BO'Malley? You go and whitelist the quote. Boom. There is simply no reason for this pattern, which you are inevitably going to try and use elsewhere, including in a "comments" field where every character should be allowed.
In no way I can make an informed comment about the subject. But a week ago I found this: [Multi-Threading in PHP with pthreads](https://gist.github.com/krakjoe/6437782) That makes for an interesting read (Id din't finish it, thought)
I imagine it's because half of the subscribers join so they can tell everyone how much PHP sucks.
Edit: Also if you're looking for people to bounce design/development ideas off of or just discuss methodologies, send me a PM. Symfony irc and stackoverflow irc chats both tend to have more advanced level developers hanging around. Also, since you say you're a Java dev you might want to checkout the Symfony framework if you haven't. It uses a bunch of Java inspired design patterns (doctrine ≈ hibernate), use of a real DI/IOC container. The framework was heavily influenced by spring and django. A lot of the literature, blogs, and whatnot about Symfony will reflect what you refer to as "Java Style". Edit: Just noticed the cough symfony at the end of your post. Some Symfony specific links: * These guys have a lot of a good blogs: http://labs.octivi.com/tag/symfony2/ * Another good blog http://php-and-symfony.matthiasnoback.nl/ * [Symfony Cookbook](http://symfony.com/doc/current/cookbook/index.html) * [Symfony Controller Utility Class](http://www.whitewashing.de/2013/06/27/extending_symfony2__controller_utilities.html) * Also check the various bundles pull requests (open and closed) on github. There's a lot of really good discussions on github to learn best practices and more about the framework. [Here's a link to the Symfony github PR's sorted by most comments descending. Tons of good reading here to learn about Symfony and the mindset of the people who contribute](https://github.com/symfony/symfony/issues?q=sort%3Acomments-desc+) Some Good Links, That Aren't Symfony Specific: * [Integration Tests Are a Scam by J.B. Rainsberger](http://vimeo.com/80533536) * [Cool talk by Fabien Potencier(Symfony Creator)](https://www.youtube.com/watch?v=gpNbmEnRLBU) * [Good discussion on phpspec github PR about how to write good tests using BDD](https://github.com/phpspec/prophecy/issues/23) * [Sitepoint.com, PHP blogs filtered by advanced](http://www.sitepoint.com/php/?level=advanced) I'll add more later, when I have access to my bookmarks. 
You gotta wade through shit anywhere. Luckily we have amazing things like composer and packagist and you can just bypass all that and it's all love, baby.
penis
'##php' is the somewhat official one on freenode. You need to be verified with ident services though.
Why aren't you trying [laravel!](http://laravel.com)? I know you are looking for simple one, but starting with laravel isn't very hard I guess, though it have a whole lots of advance areas as well. But it will be IMO as students will be able to go ahead with the most advance framework while learning it from the beginning! They also deserve to learn modern php based development(composer etc). However, that said, though official development is not active, [codeigniter!](https://github.com/EllisLab/CodeIgniter) still can be considered as a starting guide as it is very simple MVC for beginner and has the most easy to understand documentation yet!
What the hell? I devote my free time to this free product and try to fix bugs as I have the time, there is *honestly* no need to be a jerk if I hurt your feelings some time in the past.
Hi, dev of puphpet here. The slowness you're experiencing could be a million things. Here's some info that may be pertinent to you, though: http://mitchellh.com/comparing-filesystem-performance-in-virtual-machines Another issue could be that you have xdebug installed, and don't have a listener enabled, looking for connections. This is usually the #1 reason I see for php devs complaining about speed. Another could be you're using a spinny drive instead of an ssd. Another is that you may have your app's cache folder inside the shared drive. Move it outside of the share! I was already called a cunt by some guy here, but really if you have questions just ask on the github tracker and I'll try to help when I get free time.
There is no such thing as "mvc frameworks". MVC is an architectural pattern, that introduces additional set of constraints in order to make large projects manageable. It's not something that a framework would implement. Instead one would implement it in the application's code. As for "mvc frameworks" in PHP, most of them are just crappy RubyOnRails clones. Here is a rule of thumb: if frameworks documentation talks about "models" (plural), then it has nothing to do with MVC and instead it is implementing something like ORM-Tempalte-Logic architecture.
&gt; So my question is why? Mostly, extremely out of date information, in addition to an unhealthy dose of FUD. &gt; And if it is possible ... *It is possible*; pthreads is the only proper userland multi-threading implementation for PHP. &gt; when will it be available as a supported feature? I answered the same question here: http://en.reddit.com/r/PHP/comments/2dv7na/unicode_string_support_for_php7/cjtoj2q Read the gist that /u/LastOfTheEtyls linked too ... read all of it ... twice ...
&gt;you can write really nice, clean, well-written applications I don't understand this "*argument*". It's meaningless. It literally says nothing about the languages-in-question, and therefore doesn't refute the assertion that PHP and JavaScript are bad languages. A rock is not a good tool. That doesn't mean that you **can't** build beautiful/functional/useful things with it. &gt;just avoid the warts Which is exactly the issue. The fact that the cognitive overhead of avoiding the warts exists is what qualifies JavaScript and PHP as bad languages.
Laravel isn't a good choice for this because it's a bit too hard to install and explain in that short a time. There's a lot of required knowledge, composer, etc. Much as I hate to admit it, CodeIgniter is probably the best example here. It's relatively unabstracted, and the logic and advantages are easy to follow. It's kind of a "my first framework", and in this case, that makes sense. 
`##php` is pretty much bogged down by beginner questions, though.
I've found it depends on the time of day. During peak hours (10am-6pm EST) it seems to be flooded with beginner questions. Good discussions seem to happen more often outside of that time window.
`draw_white_space: all` should do the trick :)
Why not show them what MVC means by building a small framework by themself? IMHO teaching the basics of routing and MVC makes it much easier to describe the principles and allowing them to switch to a framework of their choice. The web is full of tutorials about MVC, you should easily find some articles that fit your needs.
I'd just like to quickly chime in here and say, Symfony is using a superglobal there. It's a bit if a different scenario to what these guys are talking about.
Or badmouthing Laravel.
The website is back online. See the doc? You want me to put the whole doc in the readme? Oh yeah good idea..... Other frameworks have similar readmes with links pointing to their doc. Sorry the website went down, I didn't notice, I doubt it was very long.
There is no difference. Its global state..
Got something interesting to say? I bet you didnt even read my post or check out the libraries.
`#cleancode` is also a good IRC channel
It's a valid point. There are hundreds or even thousands of PHP-frameworks out there. Some of them are developed by a huge community or enterprise. So I don't like working on projects with some random framework that was once built and when the project is finished maybe not even anymore supported by anyone. 
I think the concern around the lack of {} is that this was one of the contributing factors of Apple's recent goto fail: http://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/ so whilst arguably it is a stylistic thing. It's a style that introduces some unnecessary risk.
Composer doesn't take long to teach and that knowledge is non-framework specific and transferrable to other projects (and even other languages environments that have similar package managers - ruby, python, javascript, perl, etc). As a bonus, once you've learned how to use Composer / Packagist you'll be able to find and install additional libraries easily (especially as many are now moving to using Composer as the primary installation method, often not bothering to document other avenues for grabbing packages). As part of teaching Composer / Packagist you can also touch on autoloading (which Composer provides "out of the box"), which is a fairly important concept in modern PHP development, and again is also a concept transferable to other languages. Also, again, autoloading is another staple that a lot of libraries are assuming you have in your project and trying to work without it is going to be troublesome. The OP says they want a framework that's under active development - while CodeIgniter 2 is still receiving some patches and there is some work on CodeIgniter 3 going on, it's definitely not what I would call active development. CodeIgniter is also full of old practices which are either considered not best practice, or worse considered bad practice today. It's not a framework I would choose to teach people today. I don't see how Laravel (or other modern frameworks that leverage Composer and autoloading, among other modern practices) is going to take much longer to explain than developing with CodeIgniter - in my opinion you're going to end up having more problems than you solve if you use such an old framework and actively try to avoid current best practices.