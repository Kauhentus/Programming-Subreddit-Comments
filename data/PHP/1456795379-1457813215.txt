This blog post attempts support the blogger's opposition to CoCs by opining that if the sexes of the parties involved were switched that the discussion would be different. I would opine that this case would have been handled in a very similar way if the sexes were switched. This is certainly not a case where common negative ethnic/racial/gender/etc. language or behavior occurred. I certainly don't think the offended person could cite a history of having those aspersions cast his way. Had such a strange occurrence happen to a female, it is quite probable that the outcome would have been the same. Using this story is a poor argument and in doing so diminishes very common and real issues females deal with. So not only would I opine that this blog post's premise is false, but it also makes a category error in its argument. I should also note that many of those opposed to CoCs state that it is really the responsibility of the offended person to deal with things like this. That is not what happened in this case. It was communicated by a third party and was resolved amicably. This incident seems to be more an argument for CoCs because it would create a channel for resolution in cases, unlike this one, where there was no available intermediary. 
Or just prepared statements in general.
Not trying to be the party pooper here, but I've never understood why people want to configure a PHP app in .ini or any other format as opposed to native PHP, which it needs to be converted to anyway. To me it just seems less functional and slower. The main argument I've heard that that it makes it easy for a non-programmer to edit the config in an emergency or something like that, but I've never had that happen in the last 20 years. And even then, other formats are pretty much as easy to break anyway. I guess it would make sense for something that you distrubute to non-programmers though? Like publicly released softare for people to run at home etc?
Yep, Sebastian's Money library is great. It's what I would have used if it was created earlier. 
It's a fair concern. While I didn't actually create an Ini Driver, I think it all boils down to how people like configuring their own applications. Frameworks like Symfony and Bolt largely stick with YML files, so I'm sure there are a number of developers out there that either got used to them, or even prefer them. Same thing with XML and JSON. But still, I think that the only significant overhead one might see outside of non-native PHP configurations would probably be with YAML or TOML. Things like XML, INI, and JSON parsing are all baked into native PHP itself so as far as performance is concerned, you're probably safe (unless you have exactly one metric fuckton of configuration files, then it might be best to stick with Native PHP). Long story short, yes, for simplicity's sake I prefer native PHP configurations, and this endeavor was largely inspired by Laravel's configuration syntax. But others might like different formats, so I wanted to support them as well.
&gt; Now they are openly political, spending tons of their time and resources on pushing forth feminist ideology, instead of doing the technology work we all love them for. This.... This right here sums up the fucking internet. &gt; Leaders in the PHP community have become openly political, trying to oust anyone who doesn't believe exactly as they do. I co-founded PHP Mentoring, but late last year had my access to the IRC channel and GitHub organization removed because I criticized a PHP Roundtable discussion (which Samantha from this latest controversy was part of) as being a radical feminist echo chamber, and subsequently had a whisper campaign enacted against me, trying to get me fired from the company I manage. I am all for women's rights but radical feminatzi's need to be stopped. I made this point about how before no one cared if you are white, black, gay, trans, women or space alien. they just cared about what you contributed to the community. Now we have SJW's and Feminatzis running around bitching and complaining that some guy looked side ways at them or flirted with them. We have people with radical views and ideas turning whole communities and organizations into side show freak shows, its a litteral american horror story and its the tech edition. &gt; I have clear evidence that my access was removed the day after I criticized that talk Criticize a women and be removed from the community? Why: You are a sexist white privileged man who needs to be taken down a peg or 10 .... radicalism at it's best. &gt; It's also worth mentioning, Anthony Ferrara (ircmaxell), the original proposer of this CoC, has since made accusations of professional misconduct against me, openly in #phpmentoring, in front of my friends and colleagues. He's accused me of abusing my moderator access here in /r/PHP to further my own political will, but really what he's complaining about is that I haven't shut down threads that have been overwhelmingly against the CoC proposal, making harsh criticisms of his proposal and his motivations. I don't mind a CoC that states: treat people with respect and at least listen to there opinions before shooting them down. But the direction this CoC is going is disgusting. Its a political mess with SJW fingerprints all over the god damn cookie jar. Ever since the whole game gate bull shit this crap has steadily moved deeper and deeper into the tech world. And it needs to stop. I want my community back. &gt; My fellow mods, and several people in the community, have rejected those accusations out of hand, as baseless. Instead of responding to what people are saying, he's made himself a victim, talking about how he's being harassed, and having death threats directed at him. But he'll offer no evidence of these things, because it's a more effective tactic if he doesn't. This is what happens when you disagree, you have sensless morons who come around and downvote you to hell and then complain and make you seem like some sort of racist or sexist or what ever else pig. Its the whole idea of "I disagree." "ok why?" "oh now im a victim and you're the enemy" .... Like grow the hell up people.
Using floats can and usually does lead to loss of precision errors when working with money, but an unintuitive API leads to arguably more gratuitous errors. Say, for example, writing `new Money(150, new Currency('USD'))` to represent $150 instead of $1.50. It's even more error prone in currencies where the divide between the standard unit and the smallest unit is larger.
I suggest you use guzzle instead of just a plain old curl class, one reason is it would allow you to pool multiple requests and use the concept of promises.
the key word is reasonable. the other key word is SJW .... Welcome to the jungle baby - it will kill you.
&gt; At the point at which we are now in, in theory, should someone wish to call for a vote of no confidence to have Samantha removed ... I suddenly hear her calling you sexist. Why? because thats what happens in the tech industry today. Weather its the right or not ... 
&gt; This out rage in your tone is hilarious. You might be going a little overboard with your take-home dramatic reading class exercises or something. &gt; you act as if I am the one asking why. When I am not. Do I? &gt; (And I'm using "you" generically, by the way - nothing personal.)
How would that work with gas prices that are $1.999 per gallon?
Yeah fair enough. And I can imagine it would be kind of a fun thing to code compared to most typical business webdev projects. Nice to actually program something that "does something" compared to the usual text string in &amp; out of DBs that most webdev is.
You do. Listen to the pod cast. And overboard? Least I am not the one drowning in my own pretentious fallacies. 
I don't think it's accurate to assert that the costs are widely accepted as large. Tight coupling? Sure. I think the cost of poor code is large. I don't think using active record means poor code. I have a lot of personal experience to make that distinction clear to me.
Originally I was planning to use Guzzle but ended up not using it. I'm a little confused about promises. Are they the same thing as what a promise is in JS? Where you assign a function that will be called once that data/whatever is available?
Essentially yes but with out all the call back hell.
I'm just speaking from experience. In a small project, yeah, you might miss those if you're really careless. If you're working in a company with more than one programmer, hopefully someone's reviewing your financial code. Mine certainly was. It literally never once has been an issue for me, and my code has moved over $3 billion. Don't get me wrong - you have a valid point. I'd prefer if it used the more natural approach. But every conversion is an opportunity to introduce an error.
Doctrine entities are just classes though. The only mention of Doctrine is that fact that collections return a `Doctrine\Common\Collections\ArrayCollection` which I'm sure you could configure away if you wanted to. I have a project here with 86 entities, and not one mention of doctrine, excepting the above caveat.
Not the most informative post ever. Can you give me an example of the difference between a real and non-real app? And the relevance of which format is used for text config files? I've written plenty of multi-server config systems over the years, but they've always been in PHP rather than parsing ini/json/yaml etc. You may very well be right. I'm actually not trying to start a debate, I'm genuinely curious to know what you meant exactly. 
damn! i make less than 12$k a year! 
Most other programming communities are amazing when compared to the Php. But if you don't have experience with others, you might end up calling the Php community 'amazing' because, Composer, PSR-* and Php7....
In PHP, I wouldn't. See the original Money library I mention at the start of the post, which avoids floats. You could implement PreciseMoney using the BCMath extension. My article however makes no assumptions about the programming language, so I ignored the problem. To avoid confusion, I've just added a note in the text. &gt;&gt; this article suggests some really bad ideas Any others?
Try messing with the C community sometime. They'll tell you to RTFM and GTFO.
that's the perception of people that don't know, they assume writing tests will result in longer development time, when in actual fact it takes no longer once you get into a flow. Also, by not writing tests, more often than not issue rear their ugly heads after the software has been delivered and end up coming back into development teams in the form of bugs. By that time developers are shit scared to tweak anything since the system is so fragile and LIVE, which adds even more time. Net result is that they spent probably the same amount of time developing without tests so didn't really gain anything, but then have a shit tonne more time fixing issues and bugs, so probably ends up double the amount of time. 
It is because they don't know who you are and what you have been doing if you know what I mean.
https://ocramius.github.io/blog/when-to-declare-classes-final/
yep, whenever possibble, I use it always.
Seriously this guy posts all the fucking time and will jump in with "well in my framework...." Where it has no relevance. He's a spammer at this point, so of course there will be hostility.
I agree. Using a PHP array as a config file makes a lot of sense since config files are usually read (and parsed) on every request. Keeping the config file in PHP means its parsed once and cached in the opcode cache improving performance over XML/JSON/YML/INI formats.
No, it's mainly written in Ruby and JavaScript (Node.js). My job is maintaining the PHP SDKs and integrations with the PHP ecosystem. For every language community we have at least one dedicated developer, to ensure the libraries we write work as PHP developer (in this case) would expect them to.
Another decent library is https://github.com/m1/vars
I wouldn't be a php hate train without /u/phpguy2 as the conductor!
this subreddit is not "the php community".
The name has embarrassingly escaped me but I'm convinced I have used a language in which the idiomatic (at least) way of creating heritable classes was to use the keywords "open class". Edit: Kotlin. I tend to start projects using final by default. I find using a combination of traits and dependency injection a more hygienic means of sharing bahaviour then inheritance. Having said that, I agree whole-heartedly that declaring classes final seemingly at random will not make for an intuitive environment. It's a decision which needs to be made and observed at the package level.
All other opinions here are that final avoids that people use your class in a way that you didn't intend to. Which I can understand if people are working on large teams, where the application in divided in parts. But i'm totally against using final or private in public packages you put on Github. Everyone knows that by extending you class there's a possibility your API will change later. But what are the options? Copy-paste your code? If they are doing it is because they really need it (eg: your class uses Curl and they need to set an option). 
It's useful even when writing code by yourself. I don't trust future me, and I bet future me won't trust current me. Adding `final` means future me has to actively make the change and be responsible for any effect that comes from it. It also makes refactoring much simpler, as there's fewer thing to have to consider.
Proud of the ally delivered unto him by the gods of shitposting, /u/phpguy2 pumped his fist in the air. His faith, his will to overcome those nagging doubts, it was rewarded! He quickly say down to type out a scathing critique, his fingers limited only by poor circulation and small flakes of confectionary sugar. This would surely deal a heavy psychological blow to the ignorants!
I agree that it should be configuration, and it was just an example. So options are: * Copy-paste the class * Fork the package * Write your own All options above are worse than solving the problem with inheritance, and it can't always be solved by composition, because the Curl option, for example, is completely locked inside the class. So what I mean is: don't try to predict the future, don't final everything, you don't know if someone has a legitimate use for extending your class.
If you don't want override members or method of a class in a subclass, you must set final there 
I just thought of something but I don't know if it has any value so it's more of a question than an answer. I just got this idea after seeing explanations about honeypots: basically if bots sumbit forms using the submit button, can't you put a submit and say a reset button, and using javascript you reverse the actions performed by each one It would look like this ( pseudo-code ): submit.onclick(function() { resetForm(); }); reset.onclick(function() { submitForm(); }); &amp;nbsp; So is this just retarded or could it work ? &amp;nbsp; Edit: forgot to say the reset button would have Submit written on it and vice versa so humans would click on the reset button to submit but bots would use the submit button
I've just taken a look at HTTPPlug, and to me it seems just too sparse. For example, the [HttpClient interface](https://github.com/php-http/httplug/blob/master/src/HttpClient.php) has just one method - `sendRequest()` - and that is it. If I were to use this module, along with an adapter to my favourite HTTP client implementation, I would want more than that. I would want to be able to pass options to the client when instantiating, and maybe options when sending too, just to name a few. This leave me needing to do that kind of thing explicitly with the underlying client, and that would be in a non-portable way which defeats the object of using a portable interface with adapters. So am I missing something here? Why would I use this interface if it only covers a tiny fraction of all the actions that a HTTP client would be offering me? Personally, I'm interested in how packages can be more portable by using whatever PSR-7 implementation is available on the framework or application the package is used in. That includes standardising not just the sending of PSR-7 messages, but the creation of those messages in the first place. Implementing a PSR-7 message object is not trivial. It's not hard, but involves lots of code that just should not be reinvented by every package that has PSR-7 messages as its output, and it would be helpful if that package was dealing with the messages at a slightly higher level than what PSR-7 strictly provides.
Absolutely nowhere. This obsession with protecting ourselves from ourselves is one of the biggest signs of the PHP community's general mental retardation.
Are the same extensions loaded / not loaded in each separate PHP version?
so I basically need to first and foremost learn the most of HTML/CSS as I can. And then once I have the basics of the HTML website informtion, then embed my php in to my .html file?
Check your extensions. Dig deeper into the benchmark to figure out what is causing the delay.
Constants can work for many use-cases. I've used them in places where a separate configuration file just wouldn't make sense. When you start looking at Package/Bundles and how they're built, you'll find that they're usually broken up into a number of classes. For instance: Let's say you're creating a social aggregator that scans a number of social media sites for posts using a given hashtag. The class structure would be something like: /Social /Networks - NetworkInterface.php - Facebook.php - Instagram.php - Twitter.php - Vine.php - SocialService.php - SocialServiceProvider.php - SocialFactory.php - SocialException.php If we were dealing with something like just oAuth Tokens, then it would be perfectly acceptable to encapsulate those values with their corresponding Network. But as you start dealing with configuring values that affect the Package/Bundle as a whole - for instance, the hashtag that you're searching for across all networks - then it doesn't make quite as much sense to apply that hashtag value to all Network classes, now does it? It also doesn't quite fit as part of the Service class, because what if you wanted to package this up for general use on Packagist? People would need to alter the service just to change the hashtag value. Maybe the ServiceProvider? This would probably be the best option, but then we still run into the issue of users needing to roll their own ServiceProvider just to change the configuration, rather than using what the package offers. What if you want to use development oAuth keys on a local Vagrant installation, but deploy to a server using production values? Would you want to change those values every time you go to deploy? You can see there are a number of variables at play here when it comes to setting up a package of reasonable complexity. This is where a single configuration file can come into play. Having a single point that users can look to in order to find all of the various behaviors they can modify is usually easier to understand than having to dig through the source code. In addition, when you're using something like [DotEnv](https://github.com/vlucas/phpdotenv) to modify your config values based on the presence of a .env file, it makes management of those values between local/dev/qa/prod environments that much easier to work with. But that still doesn't mean you can't use constants. Even if you decide to use a configuration file, if you're using standard PHP, the above social config can look something like this: *aggregator.php* use Acme\Social\Networks\Twitter; return [ 'hashtag'=&gt;'#reddit', 'oauth'=&gt;[ 'twitter'=&gt;[ 'consumer_token'=&gt;getenv('TWITTER_CONSUMER_TOKEN') ?: Twitter::CONSUMER_TOKEN ... ] ] ] It all boils down to organization and personal preference. Hopefully this helps answer your question.
Keep in mind that "xdebug" is a big source of slow down. You also should take a look at APC, which is a good accelerator (perhaps enabled on 5.4 but not on 5.6)
Oh wow, that one is actually really nice! I'm gonna keep this one in my back pocket.
So you using you pi as webserver only. Pi is also a hadrware platform so you able to control devices, pins or send commands to Arduino using it.
you can use zend's opcache extension for 5.6.
[removed]
[removed]
[**@everzet**](https://twitter.com/everzet/) &gt; [2016-02-28 13:16 UTC](https://twitter.com/everzet/status/703931822028296197) &gt; I’m really considering removing support for doubling classes in \#Prophecy 2 &amp; leaving support only for interfaces. At leas in the core. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
&gt; I don't trust future me, and I bet future me won't trust current me. I've had this thought for a while. Thanks for putting it into words for me!
The php community is a lot less pretentious ....
OK
Can you at least English before you troll?
The only time I've ever had to deal with money was at the thousandths - this was retail, so lots of bulk orders and the unit prices always broke down into prices like `2.025`. Unfortunately, I'm not sure how the software stored the money, but I do remember there being a precision configuration option.
I don't think that makes a lot sense because you'd end up with a lot of classes that aren't marked as final that should be considered final. Then you just end up with an inconsistent mess where the absence of the word final indicates nothing. 
&gt; Which framework of these two is more secure and performant? The answer is both. They are both very fast and secure. I would advice you not to think too much about the framework, they are all (not only symfony and laravel) pretty fast, the biggest issue that you will run into is going to be YOUR code, if you can manage to write efficient and clean code then you shouldn't worry too much about your framework. However, there is still a way to squeeze a bit more performance: * Use a micro framework for API's for which you don't need the entire framework, this is where those micro frameworks shine, use them. * Cache your static pages, database results etc. Again.. make sure that your code is efficient because caching is for scalability, it will NOT fix your slow and inefficient code. If you are talking about plugins, social integration etc then again, both have a very active and awesome community and you will find pretty much everything you need for both frameworks. 
Create a new currency like "USDgas" with an exponent of 3.
That's exactly what the author (Mathias Verraes) wrote, and it's a very popular lib too: https://github.com/moneyphp/money
I'm finding some evangelists are tagging just about everything they produce with `final`. It doesn't feel right - it is like they think they know every possible use-case their code will be used in, but often they don't.
I think it has to do with learning from you own mistakes. I didn't understand the value of clean code until I did my first Big Rewritte. We were expecting 2-3 months, but in the end that became 7 months without a new feature being added to the project. Years later, working for another firm, someone proposed the exact same thing, but luckly this time some senior was against the idea...
Composition over inheritance. If you need to add functionality over something that is `final`, and the relationship you're dealing with a 'has a' kind of relationship not a 'is a' kind of relationship, instead of removing that keyword, look into ways to consume that class all together by wrapping your code around it.
This, a 100% this! Spot on :) EDIT: Same reason I make everything private.
It's not double login, its verification of login data on the backend using token. Since you cannot trust anything from the client side, this is the correct approach
If I give you a 1% discount on your rounded $4.99 beer, you have $4.9401. I wouldn't want to round that implicitly. (That is to say, in the context of the post. If I ran a bar, I'd subtract the $0.0001 as a gift :-) ).
Taken from the lumen [website](https://lumen.laravel.com/) &gt; Lumen is the perfect solution for building Laravel based micro-services and blazing fast APIs Care to elaborate your point? 
WTForms has a great API. I wish it would be ported to PHP. The UI resides in the template and the data model / validation logic in the form class, allowing you to easily compose forms and re-use them. https://wtforms.readthedocs.org/en/latest/ EDIT: TLDR version: https://wtforms.readthedocs.org/en/latest/crash_course.html
Thank you, that was the kind of informations I wanted to know
Like a ton of enterprise crapware?
I personally would not use a static class here. I would pass an instance of the class to the class you need and then use it from there allowing you to mock it out.
See the comment above you
I would recommend you not to use static classes at all. Testing static methods is always painful no matter what workaround you find for it, and more important, the presence of static classes is usually a sign of code smell, which indicates that your application is poorly designed. What you should do is to refactor and use true OOP, rather than statics(which are no more than namespaced functions). 
Understood. I think the confusion rises in the fact that I associated "PreciseMoney" with the precise cost of something. Multiplying a RoundedMoney returns PreciseMoney, which is no longer the precise cost of the product multiplied by a quantity.
APC isn't supported on 5.6.
Interesting approach, would still need to have some way of applying fake responses from my mock client, but will definitely consider this idea
I don't understand why you're doing it this way though. Since the backend has to call FB anyway to validate the token, why don't you let the backend handle the whole thing in the first place? Not criticizing, genuinely have no idea what approach it best.
Well its not even half. Also if I just have a topic I talk about here, doesnt mean its spamming. Spamming is if I mentioned it in every thread. I maybe drop a PHPixie thing once per two weeks. 200 comments is nothing really, considering the time I registered on reddit.
&gt; there would be no surplus labour value for the employer The employer does not need to have the surplus value, for you dont have any problems with that when you make the employee, the employed. All problems arise from there being a few people who dont work at all compared to the rest, but they own entire establishment and take the profits. And the solution to that is there since a century: https://www.commondreams.org/view/2012/06/25-4
&gt; A full stack symfony request with no custom code is around 10ms How are you getting this number? I just showed you a benchmark with 100 ms and you keep going back to 10?
Is any of this possible if you're using a VM to run PHP? I don't have PHP installed on my host machine, it and composer are handled through a Vagrant box.
While I might be helpful on SO, there still are plenty of people who are not.
I like this benchmark site as well: http://onlinephpfunctions.com/benchmarks Give it a try and see if you get the same results. In this list you can see that 5.4 is a little slower than 5.6 with this tool. 
It looks like it. I haven't tested it, but it appears that you can create a Run/Debug Configuration, and selecting "PHPUnit by HTTP". Under the Remote tab, you should be able to select, or configure your Vagrant Server.
With apache benchmark against a prod config
Are you going to show us some benchmarks? Or will you just state some random numbers?
uh ..... 
So this will ultimately end up in an ios or android app. I wanted to create this taxonomy to allow for a selectable/searchable list of artists that will resolve to all of the permutations. Is that something elastic can do?
I was taught to write well tested, well documented and clean readable code. Regardless of (spoken) language.
This.
The first time I tried to setup composer to autoload with PSR-4 I couldn't get it to. But got it working now. Should I get rid of the jdf221/Pheddit directories inside the src directory? And what about the exceptions file, should I move each of the exceptions into their own files so they can be autoloaded correctly?
Did you google this? Googling for "sftp forwarding service" gives exavault as an advert....which seems to be what you're after?
? 
Not quite. Customer wants to SFTP files. (No other options unfortunately I would prefer it via API. ) Looking for something that will accept the SFTP and notify my system that there is a new file. To support SFTP on S3 my understanding is you need to mount it on a server. 
You will probably have to have a database that maps multiple artist names to name combinations, and name combinations to albums/songs. There is no tool that natively understands the difference between pink usher and pink Floyd, but the tools the other guy mentioned will handle the searching for you.
You could pretty easily come up with a list of joining words - featuring, with, and, etc. Dump all of the distinct artist names into a collection, and iteratively pull out instances of names where the names are made up of two or more other names separated by joining words or characters. Now you know which of these are artists and which are collaborations, and who the collaborators are. This will probably get you to 95% accuracy. Manual review will likely be necessary for false positives, but I don't think a solution exists that will be 100% accurate with no manual review. Then you can monitor user behavior to see what people search for and when they have to refine or when they get zero results, and you fix that. Lastly, have a feature where users earn badges for suggesting better data than you have, and let users do the last bit of work for you.
I think the first problem is how to get a clean list of distinct artist names. Without that as a starting point it's going to be tough to know what to search for.
I came here to suggest using a dependency injected factory if you *must* use static methods.
Your 2 listed "annoyances" with using non-static methods are solved by using a DI container such as Aurora or Symfony 2 framework. 
Somebody mentioned Solr and Elasticsearch. I add "Sphinx" http://sphinxsearch.com/ To people that have used all? Do you know which ones can solve the problem of "pink" but not "pink floyd" without hardcoding it?
I'm using it and it works "okay", but you have quite a few windows that pop in your face every once in a while. You can vote for this bug https://youtrack.jetbrains.com/issue/WI-29759
This is true for every search engine that does not get told so. So this kind of filtering needs to be vreated manually. 
Yes, I use this setup. 4 steps are involved in getting it working - In `Languages &amp; Frameworks -&gt; PHP` You need to add your VM remote interpreter. - In `Languages &amp; Frameworks -&gt; PHP -&gt; PHPUnit` you need to use this remote interpreter. If you installed phpunit it globally on the vm you can use the `Load from include path` option. - For xDebug to work with it you need to configure the path mapping using the unintuitive `Build, Execution, Deployment -&gt; Deployment` menu (there was an hour of googling involved in finding this). Add you vagrant machine as an SFTP server, then in the mappings tab you can add the mapping. - Lastly add your Project configuration in `Run -&gt; Edit Configurations`. Select the normal `PHPUnit` option and behind the `Use alternative configuration file` click the last button to select the remote interpreter.
In my opinion, only make sense when a class is a collection of functions without enough entity to become an OO class. In example SF2 Services
TL;DR of the TL;DR &gt;Theoretically, the final tag sounds great. In practice, maybe it should be sporadically used.
This all gets extra-"fun" when stakeholders ask for interactive input fields with *different* levels of precision displayed.
I didn't write that comment but I mostly agree with the statement. Micro frameworks are cute until you need to build a production quality piece of software. Somehow we seem to think that API's are analogous with micro frameworks in that, an API is much "smaller" than a website because it only outputs bits of JSON, it's "micro" compared to what a website does. Not in the real world though. I have never worked on an API that didn't need; configuration, database access, service wiring (a container), authentication and other types of security, etc, etc.. Most micro frameworks are just not suitable for anything other than a) simple stuff b) a proxy in front of micro services. I like Slim though... 
Yes to the exceptions. Removing the empty directories (moving stuff up) is not essential, but PSR-4 does allow you do do that. I always try to, and it just makes directories easier to navigate. You would drop PSR-0 support if you do this though, which is fine - PSR-4 is no more complicated or difficult to implement.
Great minds think alike: http://www.sirius.ro/php/sirius/input/ :)
That's right ;)
Hey, Do you think this approach would work, it should simplify testability. Constructor injection of $client and a (static) factory class to build the dependencies: &lt;?php class WebServiceHelper { private $client; public function __construct(SoapClient $client) { $this-&gt;client = $client; } public function getCitiesByCountry($country) { return $this-&gt;client-&gt;GetCitiesByCountry(array('CountryName' =&gt; $country)); } } class WebServiceHelperFactory { public static function webServiceHelper() { $client = new SoapClient('http://www.webservicex.com/globalweather.asmx?wsdl'); return new WebServiceHelper($client); } } //test call var_dump( WebServiceHelperFactory::webServiceHelper()-&gt;getCitiesByCountry('United Kingdom') ); ?&gt;
Here it is: https://github.com/phpthinktank/blast-orm/blob/master/src/Query.php
Yes that wasn't a great idea. I removed that in v0.3 and introduce mappers. Repositories will be bound to entity by contract.
My documentation for connections is incomplete. Please take a look here (v0.3) for information about connections. https://github.com/phpthinktank/blast-orm/tree/0.3-dev#initialize
Have you looked at [Git submodules](http://git-scm.com/book/en/v2/Git-Tools-Submodules) ?
Even more messy, from my experience (used both submodules and svn:externals, back in the pre-composer days). Submodules work great for local dev, but the dependency resolution mechanism of composer is completely kicked out, which makes it hard to keep them all glued together.
I quickly read through the readme file so forgive me in case I misunderstood what it is that you are trying to do here but... I have been wrestling with this Auth problem for years and every single time I end up banging my head against the wall with nothing to show for it. The problem is not route based vs. annotation based markers. The problem is actually the application flow itself. The user has to be first authenticated (looked up) using a session lookup or persistent storage query. Later on, after the correct route is decided, the authorization part comes into play by matching the user object, the route, the application state, as well as a host other factors in order to determine in case authorization is grated. Having annotation based or class based markers does not really change much in terms of application flow. We still have the same problems as before. The only difference is that this delegates the auth responsibility to a separate object instead of having the router dealing with that schtuff. Which is cool an all. In fact, you state that this is the intent of this library. However, I think that dealing with this extra layer of abstraction will end up being a bigger hassle than the problem it actually solves. 
The "vcs" option is annoying because you can't just test code, you have to commit it first. No good for development IMO.
I have this comment saved from a while back: https://www.reddit.com/r/PHP/comments/2f24zq/question_do_i_need_to_use_composer/ck79rx3?context=3 In short: use the autoload section of your composer.json file to link to the folder on your system: "autoload": { "psr-4": { "YourLibrary\\": "/path/to/yourlibrary/src" } }, `/yourlibrary` would be your git repo. Make your changes in there and test. Then commit it whenever it's in a stable state.
What were all the other PHPStorm 11 EAPs before this one if not public previews then?
This looks nice, but how would you achieve reusable, extendable forms with this notation? I'm using class inheritance with the plus that you can use the autoloader to load forms. https://github.com/seanmorris/form/blob/master/EXTENDING.md#creating-reusable-forms
The only surprise I had about this thread was that you weren't the OP.
ive been using symlinks ever since before composer had the repositories path feature, works fine also. symlink the vendor/* directory to the right sources, add the libraries to external sources in phpstorm for example, and exclude the vendor directory. obviously require you to do require dev-master
Yeah, but your code from LIB1 is separated from APP1 right? I'd like to be able to edit my LIB1 from with my APP1, and sync it with the remote.
Okay, makes sense. But how would i test it if the package im creating would make use of, for example, Laravels Eloquent.
&gt; Im a bit lost as how to allow composer to get private packages from gitlab? Here's a concrete example. { "name": "headzoo/my-project", "repositories": [ { "type": "vcs", "url": "https://github.com/headzoo/different-project" } ], "require": { "headzoo/different-project": "3.0.*" } } From my list of requirements, Composer will find the "headzoo/different-project" by looking through the list of "repositories". It's important to note that Composer is _not_ matching package names in the requirements against the urls in "repositories". The fact that the package is named "headzoo/different-project" and the url contains "headzoo/different-project" doesn't matter. For instance I have a composer.json which looks like this: { "name": "headzoo/my-project", "repositories": [ { "type": "vcs", "url": "https://github.com/headzoo/swiftmailer" } ], "require": { "swiftmailer/swiftmailer": "&gt;=4.2.0,~5.0" } } Even though I'm using "swiftmailer/swiftmailer" in my requirements, Composer still finds and uses my fork of Swifmailer hosted at "https://github.com/headzoo/swiftmailer", because the file [https://github.com/headzoo/swiftmailer/composer.json](https://github.com/headzoo/swiftmailer/blob/5.x/composer.json) uses the name "switfmailer/swiftmailer". In other words, Composer discovers the name of each package from each repository by looking at the composer.json in the repository, and not the value of the url.
Don't be put off by the comments dissing your use of annotations. I think it's great - makes it very clear which methods should be accessible to outside users and makes it easy to audit. I'd use this. Keep it up.
Thanks for your feedback, let me start by saying that I am by no means a writer. I do see your point on how the anger comes out, to be honest I had no idea so many people would actually bother reading it, and when I started writing the argument I didn't actually think I'd end up writing so much, but due to the kind of toxic environment it was, and my inability to have a say I guess all my frustrations poured out into my writing. I think the bold shouty bit I just added in anger at something that I've been told about having left due to these issues by certain people. My anger at the whole situation definitely does come through in the article - so I take your point there. I'll consider what kind of alterations I could make to make it a bit more of a proper read instead of a rant. As for the unfair payscales at that company, I don't think they want to fix it, as the message basically from the manager in charge of hiring was basically try to get the best people possible for as cheap as possible, so it wasn't at all an accidental thing that happened. Your suggestions for improving the pay scale issue are good, but it's the case that some companies unfortunately do still try and exploit people... 
How do you deal with a situation where a user is only authorised to edit some fields of an entity but not others?
You're welcome. Yes, writing has an great capacity for catharsis, and sometimes sounds angrier than we intended; I've had that happen too! I agree as well that sometimes companies are beyond repair. With few exceptions, I recommend offering honest but kind feedback in an exit interview, even if it is thought they will never change, and then go on to new and better things. It is positive to try to reduce the resentment we feel after a frustrating exit - I have one that is 18 months old, and I'm still processing it. 
http://devstickers.com/
So lumen can talk to the database 3x faster than laravel can? Lumen can write to disk 3x faster than symfony2? You're really not understanding this. The framework is only a small part of the request. If you want to get 3x performance you will **never** get that by replacing a full stack php framework with a micro, see [here](https://www.reddit.com/r/PHP/comments/48hkeh/frameworks_and_concerns/d0k9iwe) for more detail. 
I need to read a bit more about this before I can formulate a decent opinion. Having said that, the way I see things, you are absolutely right about this part: &gt; the Domain layer is where authentication and authorization belong in a server-based app, not in the user-interface portions. After doing dozens and dozens of attempts at structuring things differently. I reached that same conclusion. However, the problem most often in this scenario is that every domain entity has to do its own internal checks. Which means that every one of those entities should at some level have some basic knowledge of how the "UserEntity" works in order to authenticate/authorize it. Which in turn means that all domain-objects have to, by design, know how to do their own job as well as the UserEntity's job. That to me is a violation of SRP. I am, like I said, not educated enough in the ADR architecture so I might be wrong about this. But, I have a hard time envisioning how such an application wide feature (such as Auth) could be delegated to each separate domain of responsibility without massive repetition of code or violation of SRP. Then again I might have missed something. If I had to bet money on this, I would say that the entire idea of a "triad" (MVC/ADR/MVP) or even non-triads such as MVVM is flawed in the context of the web. Partly due to how state works but also due to the fact that the HTTP protocol itself was made to request a file via its URI and that's it. I tried creating architectures/frameworks where you as a developer get to decide how many layers you want a particular instance of a particular app to have using the same ONE framework. But that didn't work either. It just seems to me as if a web-application's flow is always leaking. It is really hard to encapsulate and separate these layers from each other. Take something as simple as a view. Any moderately complex view will require logic in it and thus we pretend as if we can separate the business logic into its own layer while infact all these layers constantly leak. This year, I found myself being drawn back to the old procedural style where a request comes in and gets handled by a function and that's it. No layering and no BS. get the route, do the work and pump a result out. All in one function. Slim is a good framework for that kind of stuff (which was mentioned in your link and you are 100% on the money there). I dunno, I might be going crazy after thinking about this for too long but I don't think that this is a problem that can be solved using a "triad" or any other pre-defined responsibility-leaking model. &gt; The opinion is worth what you paid for it. :-) So is mine =D **EDIT:** Looking through the example provided. It seems as if the way I think about things is pretty darn close to ADR. The difference between what was given in that example and the way a micro-framework like Slim is pretty small. We can basically convert each Action into a closure and include the Responder part in that closure as well. Check out these lines: #BlogCreateAction if ($this-&gt;request-&gt;isPost()) { ... } else{ ... } #BlogCreateResponder if ($this-&gt;data-&gt;blog-&gt;id) { ... } else{ ... } Those two checks are exactly the same thing. Like I said earlier, the state of the Action leaked into the Responder. We had to do two checks in each case in order to determine which of the 2 possible paths the code took. Currently I would instead write it like this: #closure only gets called @POST function($req, $res, $args){ $post = ...; #do the blog creation here if($post-&gt;save()) return $res-&gt;withMessage("success); else throw new HTTPException_400("you fucked up the form!"); } #closure only gets called @GET function($req, $res, $args){ return $res-&gt;withMessage("HTML_TEMPLATE_FOR_FORM.php"); } 
I'm on my phone right now so I can't actually check, but I don't recall seeing something like this before. Can someone else confirm that this is legitimate?
can confirm, i'm using manjaro 16.02
*Tagged* 12 hours ago, not released. Probably waiting for the 5.6 release.
http://www.stickermule.com/marketplace
That's actually the proper way to get those. Buying stickers is like paying for sex, defeats the point entirely ))
I recently bought stickers from these two sites: http://unixstickers.com/ http://www.redbubble.com/shop/dev Github also has a bunch of cool stuff in their store: https://github.myshopify.com/ 
Yeah neither did I. Wtf happened with that?
Arch is probably a bad choice then :)
Try using vagrant, helps a lot with that.
What exactly do you mean by `system services`? I'm going to assume you mean something like syslog or some other starts-on-boot daemon. &gt; I have nothing against it but am a firm believer one tool isn't right for all jobs. Well given my assumption above PHP isn't really the right tool for the job here. Even if it's theoretically capable of doing it it's simply not a common thing to do, and so the library support for a lot of nice things is lacking and some non-existent language features like a C FFI makes some things much harder potentially.
It doesn't look like it but are you using any form of IoC container? Most decent implementations enable you to *tag* services, which in turn enables you to register them with your system. I wrote an article about doing this using Symfony's container a while back: http://thorpesystems.com/blog/tagging-symfony-services. Might be worth taking a look at. Easy enough to implement outside of Symfony.
In [Aura.Project_Kernel](https://github.com/auraphp/Aura.Project_Kernel) we examine `vendor/composer/installed.json` to see what other packages are loaded.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This is like asking people if they have opinions on cars, tires, roads, or traffic signals. They're all loosely related, but they serve very different purposes for different reasons.
Do not upgrade to this version if you use Symfony framework till https://github.com/Haehnchen/idea-php-symfony2-plugin/issues/626 be fixed
PHP is just fine. I have process written in PHP that have been running without problems for more than a year and these processes are constantly doing stuff. Having said that, you need to understand how memory works but if you want to write long running processes in Golang you'd also need that knowledge.. Edit: Oh, forgot. Don't write services such as daemons in PHP and don't try threading either...
I'm curious, what do you need the information for? Knowing that foo/extra is installed doesn't seem to allow the application to do fancy things. If it's just an information thing, I would parse the composer.lock since it already provides everything you and composer needs.
I logged in just to upboat you!
What youve tried to build is more comparable with the resource loading part of the config component, rather than the treebuilder ;) http://symfony.com/doc/current/components/config/resources.html 
I have [AstroSplash](http://astrosplash.com) ([source code](https://github.com/AndrewCarterUK)) running on [PHPFastCGI](https://github.com/PHPFastCGI/FastCGIDaemon). This uses FastCGI directly to keep my app alive between requests, which made it quite a bit faster. It's using the [Zend Expressive Adapter](https://github.com/PHPFastCGI/ExpressiveAdapter), but there are adapters for [Slim](https://github.com/PHPFastCGI/SlimAdapter), [Silex](https://github.com/PHPFastCGI/SilexAdapter) and a bundle for [Symfony](https://github.com/PHPFastCGI/SpeedfonyBundle).
In your composer.json change the line for LIB1 from "LIB1": "\^1.0" or whatever it is to "LIB1": "dev-my-branch" (or dev-develop if you want to create your branch inline. The dev- prefix is important). Do a composer update. When you're in the vendor/LIB1 directory it now has the .git directory for LIB1 so you can make commits, push, etc. as necessary from in here.
It is a notices and notification package that i will plan to add to any of my future websites that need the functionality. Package will use mysql tables to store data but of course, no website shares its database, its would be just absurd. I will only use packages in laravel websites so i plan to use a lot of functionality and helpers that it provides - eloquent for example. I also plan user to user messaging system that at least 2 of my future websites need, so i plan to start creating many packages. I know that everything will not have to be a package and i will try to strike a healthy balance for sure. But the bottom line is this (?) - I should try to avoid testing packages on a laravel install and do all tests inside a package? If i use eloquent and helper functions and laravels auth, how would i go about the testing then?
So maybe post a reply on the ticket so they can fix it instead of complaining here?
I know on the threading part but why not write daemons?
Awesome, thanks!
Anyone to decipher this stream of consciousness?
explain my ego feels hurt
I'm sorry, I'm not sure what you're actually asking. PHP sessions are intended to be secure. They use a unique ID generated by a hash algorithm to determine the current session. In other words, PHP already does what it sounds like you're talking about.
You shouldnt use it though
okay, let me print the array and see what it says. maybe I can't see it (internal php). Maybe I'm just having a dumb moment being paranoid because of the unknown. Setting the $_SESSION['user'] to be the username entered by the person logging in doesn't sound right.
PM me your mailing address and I'll see if I can send a few :)
You cannot get muh Reddit karma if you post on any website that's not muh Reddit.
Showing this on a mobile screws the design 
But anything else is just a high-level lie!
&gt; no website shares its database, that would be just absurd Just checking, I've seen worse. I assume now that you're using [Laravel's package system](https://laravel.com/docs/5.1/packages). In that case, I'd say that your standalone package's composer.json should require Laravel, plus any other packages it requires, then setup integration tests on the package. [Here's a short laracast on how to set that up.](https://laracasts.com/discuss/channels/general-discussion/guide-how-to-run-integration-tests-from-a-package) Like that guide shows, your tests will setup everything needed which might normally be provided by the application you're using the notices package in, like DB credentials, but the tests will only provide a test database. Then, setup integration tests that test everything your application will use. When you've finished the feature you want, relying heavily on running tests to make sure it works, then commit, and composer update in your app. At that point you should be confident that the new feature works and won't require any editing of the vendor/ folder.
It sounds like you're worried that anything you set in `$_SESSION` is sent to the client, but that is not the case. When you set a session variable in `$_SESSION` PHP saves that data to a text file *on the server*, generates a unique ID for the session, and sends only that unique ID to the client, which stores the ID in a cookie. When the client makes subsequent requests to the server they send their the session ID cookie back, which PHP uses to fetch the relevant session data from disk and load it into `$_SESSION`
That's nice. I didn't know that.
Just set the session when POST data contains the correct password and username of some user. This way you know it had to be this particular user or someone who had the password.
Just received mail notify. Changelog: http://php.net/ChangeLog-7.php#7.0.4
Yes, this is true. But it requires copying the session ID, which is much harder to guess, rather than the username, which was what OP was assuming. I guess I should have said the session is *intended* to be unique to a single computer.
This happened with 7.0.2 or 7.0.3 as well. 
Yes, I'm aware. What I was saying was I had seen the Tree Builder and mistook it for the actual resource loading portion. After I had taken another look at the package, I realized how similar (and how much better) Symfony's Config component was. How I missed the rest of the component the first time around, I'll never know.
Upvoting because downvote should not be used on disagreement, it should be used when the comment does not contribute to the discussion. This comment *does contribute* to the discussion, so it shouldn't be downvoted.
Yeah I thought this was a new 7.0 feature that I missed lol.
I have been doing that. But on those pages assuming a person is logged in... can you fake a session? Can you create an HTTP request with a fake session value that uses the person's username? I mean, when I have an insert query, for the user name I will use the username session. I use that to redirect them away from a page that's supposed to be accessible only to people that are logged in. I did print_r($_SESSION['user']); and var_dump($_SESSION['user']); and I aside from saying it's a string, how many characters, I don't see anything else on a session. I mean what about when they're initially logged in, I get that, it's paired to their hash on the database. I don't know, I should look at headers/http request I guess. But I have been using what you wrote. I don't know why I'm having doubts.
use it only for login/registration and nothing else
This part: On subsequent page loads, check $_SESSION['user'] to make sure they are the correct user for whatever action they're doing. What do you mean by check to see if it's correct? I should have stored the initial login session? Or... I don't know I'm being really dumb right now.
This was a great read. Thanks!
So really it doesn't matter what is stored in the $_SESSION because it's not determined by me when I create the session? If someone else sent the same value of $_SESSION['user'] wouldn't that match to the server, which would pull the unique ID? Man I'm really feeling like a dense brick right now ,can't absorb what you're saying Jesus... time to read.
The contents of $_SESSION remain server side, the client can't modify it. The client passes a session ID to the server which then populates the $_SESSION superglobal with the values stored on the server. The server handles sessions for you, you don't need to do anything to manage sessions. Put simply, if you do: ``` &lt;?php $_SESSION['username'] = 'GreenAce92'; ?&gt; ``` You can be confident that $_SESSION['username'] will **always** be GreenAce92 until you change it server side or the session expires, at which point the value will be null. The visitor cannot change the value. I guess you're confusing cookies and sessions? A client can change their cookies values.
I'm also using PHP for never-ending scripts, and been fine for me too.
Thank you for your post. I don't know... I just feel really, really dumb. An easy excuse sure. Is it IP address based? How does the server know which computer set the session value? How are they independent of each other... for this I will need to read. But to finalize the takeaway from this post: Setting the $_SESSION['username'] = "whatever"; is fine? or in the case of $_POST['username']; after having trimmed it/filtered. And this in conjunction with HTTPS is secure? thanks for your time.
Interesting approach. One one hand, the package name is less likely to change than any particular class name, so it's more reliable than `class_exists(Dependency::class)`. But on the other hand, if the class name changes, you'll have to refactor the code anyway, right? It seems like 6 of one, half-dozen of the other. Still though, I kind of like it.
I've used it in a switch statement before. But otherwise prob not a good idea
AUR does have a package! Its PHP56! I am new to arch and have yet to use AUR until now. Thank you so much!
You might find some inspiration how to solve the problem by looking at [ocramius/package-versions](https://github.com/Ocramius/PackageVersions).
Its about time. Congratz
I didn't know PHP had a goto function. Lets use it every where :DDDDDDD - said no one ever
Thats good news, now that Composer is in Beta, it may be added to WHM/CPanel soon, which means even those on shared hosts will gain access to it. 
I like codeception, I would start there.
If you want to have a testable software design you should look at test driven development. TDD focuses in writing tests first and forces your design to be testable. For technologie you can look at testing frameworks like phpunit, behat or phpspec. Its also interesting to learn about the differences of unit testing and acceptance testing. Additionally you will come accross mocking frameworks to fake other components while testing your current pice of code. From code perspective are dependencies your worst enemy. They make testing harder. If you feel comfortable writing tests you may be interested in continues integration. A nice and easy solution is travis ci. It integrates with GitHub and worth a look at.
How would you handle caching? Especially relationship caching? Someone made a gist with a code example about this, could you reply? I'm very interested how you handle this using eloquent. https://gist.github.com/guiwoda/c2cd020d410c24cab98d#gistcomment-1714197 Thanks!
Unless you work for Apple, then [use it twice](https://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/).
&gt; it still makes a big difference if your framework takes 100 ms or 20 ms, I'm sure you can do the math for yourself But I showed you it only takes 10ms for a full stack framework. You seem happy with 20ms but not with 10ms? Are you by chance religious? &gt;20+2 ms vs 100+2 ms is pretty huge. Symfony runs in 10ms, you say lumen is 3x faster, 10ms vs 3ms is not significant. To quote yourself "stop pulling numbers our of your arse". (You might be tempted to argue that 10 vs 3 is significant, and I agree it could be, however at that level you need to look at your choice of language, not framework.)
I discovered this yesterday: https://secure.php.net/robots.txt
Excellent, no more plaintext HTTP by default.
I've got a couple shared accounts and I have ssh access for all of them so not sure what issue is unless you're using really shitty shared hosts.
https://www.reddit.com/r/PHP/comments/48hkeh/frameworks_and_concerns/d0k6n2o I trashed the server and cbf setting it up again so don't have higher concurrency numbers. These guys are a lot faster http://labs.octivi.com/handling-1-billion-requests-a-week-with-symfony2/
Composer is seriously an amazing tool. I feel it's far better than npm, gem, and pip, although I will admit I've used it more than those tools so understand it better. Seriously mad props to the maintainers, you've been massively critical in dragging PHP in to the 21st century!
Well I am talking about using composer in Cpanel without SSH, like what you'd use Pear in Cpanel: http://oi67.tinypic.com/2lc0m69.jpg
I wasn't even aware it was in alpha; Composer feels like a very mature utility.
I didn't realize it was still in alpha... Seems kinda strange when most major projects have been using it for a couple of years
Thanks for the super-clear example!
There is also https://secure.php.net/humans.txt.
PHP didn't have a formalised feature development system at the time: you posted an e-mail with a patch to Internals, and if people didn't scream too loudly (or you thought you were right) you committed it. That was pretty much it.
You guys must have been super close.
I was trying to come up with an elegant way to say this earlier today... only difference is I was aware it was in alpha and haven't been able to grasp the wide adoption of a pre-beta product, practically to the point of it becoming a necessity in order to use numerous projects.
They were just trying to one up gmail.
get used to it
Some of those bugfixes listed are security-related. For example https://bugs.php.net/bug.php?id=71449
If your application's work is cached, why bother with booting a framework at all, you could just use varnish. Like I've said a number of times, the cost of the framework is ~10ms. That is an insignificant number for most cases. There is no point in throwing out the full stack just to save 7ms. 
Alpha? Beta? No way... Might be the best non-released tool I've used in a while.
Thanks, that's really similar to WTForms. I personally prefer a class-style declaration but symfony/form look really good.
npm has so many problems, especially on windows.
For profiling something like this I would use Blackfire, their free plan should be enough for this. Their SDK is pretty good: https://github.com/blackfireio/php-sdk Their profiles show a flow chart of all the stacks and what methods are eating up the memory. I used it before where I was also trying to reduce memory usage.
Interesting I will check this out for sure. This should help me. I dont know if its a curl issue and I see they dont allow me to do network monitoring, but I cant forsee it being a guzzel issue
&gt;and yet claim 10ms I claim nothing, that was the output of ab. Also if you look at the case study they hit 30ms WITH DEBUG ON!!! That costs me 100ms alone. &gt; The fact that after seeing that micro frameworks can be up to 8 times faster you still refuse to accept that as a significant increase of speed just gets to show how ignorant you are.. Only when it does nothing. I long ago admitted it could run in 0ms, it doesn't matter for reasons explained multiple times. &gt;Why do you think they offer those micro frameworks in the first place if they are so insignificant? Well silex was only an example/tutorial of how you *could* use the symfony components. Idiots like yourself overlooked this and just ran with the word "micro" and the catchphrase "micro is blazingly fast at shining on your api's". Then taylor realised he needed to compete for the idiots lest he lose them from the his blazingly coupled framework and created lumen - because he's a business first and a software developer second. &gt;Bottom line is that you should in most cases just use the full framework, but if you really want to increase performance and have a very large amount of requests to a public API then it's definitely worth looking at those micro frameworks to squeeze an extra 10-20 or even up to 80% of speed per request **sigh**
As much as I feel you should always want SSH access to support a site, I would then argue you shouldn't be using cPanel. Logging in and running CLI commands is very much against the grain of what the product was designed for. The intent, and everything they have gone out of their way to support, is that no one ever see the CLI.
Upvoted. yml allows comments and won't complain about stupid commas
WAMP has PHP inside some /bin folder. He just needs to search it and add the directory to PATH on environment variables
Congratulations, the house you've been living in for years is finally safe to live in. What!
 I am more looking for a service where I can tap into there api or something easier to set up the xdebug profiling. I need to get this up and running in no time and I don't have all day to mess with xdebug. Do you know of any other services?
&gt; you will be able to mock them and isolate the code under test I just want to preface this statement with a warning: isolating code under test is a fool's errand if in the process you have to mock so many things, that the test becomes brittle and hard to maintain as a result. Unit tests have two purposes: 1. Give you confidence that your code does what it's supposed to 2. Give you confidence that it continues to work, even after you refactor or change some unimportant implementation details. If you end up mocking a dependency, and that dependency changes, now you have to update your tests. The question you should always ask yourself before mocking is, "*should I have to update my tests if I change how one of these dependencies works or is used?*" Usually the answer is no, you shouldn't. So the solution is often NOT to mock the dependency, and instead, pass in the actual dependency in the test and let it behave how it will actually behave within the code under test. Then your test remains ignorant of those implementation details, is more indicative of the production behavior, and you can test only what the unit under test is supposed to output. But what if a dependency has dependencies which have dependencies? Now you must construct that whole object chain before injecting it into the unit under test. This is a different form of a maintenance headache that can be just as bad, or worse, than mocking implementation details that will need to be maintained. In these cases, it may make more sense to mock the expected return value from a dependency call so that you don't have to construct a complete object. However, it may also make sense to take the time to build some test factories that act as a single source of truth for constructing complex dependencies so that you can pass in the *actual* dependencies, rather than mocks. It should be apparent from this that the simpler and more focused you make your code, the fewer dependencies it will need, and the easier it will be to write tests for. 
&gt; So if you’re just getting started as a web developer, our advice remains the same: focus 100% of your time on mastering JavaScript. "Mastering". The course is 436 hours, plus or minus a few. 11 weeks. That's not mastering, that's an intro.
Profiling As A Service? Not sure, sorry.
Not that different from pip really... Govendor is a very similar golang package manager.
Govendor is very similar. Check it out. Perfect for 1.6.
One step closer to making PHP Java! Seriously, I think the PHP community has lost touch with the original point of PHP...
Wow, way to just give up all hope, eh?
Probably not the case here, but there are tax credits for leaving your products in beta - http://www.kbkg.com/research-tax-credits
Hopefully my articles can help you! https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/
To code a personal home page?
You know it!
Hi, Look for debugging and profiling here. There are also services. https://github.com/ziadoz/awesome-php/blob/master/README.md#debugging-and-profiling
You're working with an object, which by definition is always passed by reference.
Your articles have helped me. Thank you :) 
My experiences with npm have been slow and shit. Fuck I hate npm.
Not in the sense of a by-ref parameter.
Config is data to write, store, read and understand. And in my opinion, config format have to provide comments. Because otherwise how would you know why you use this flag, or this version? JSON does not provide this. Even XML provides, despite the fact it's hellish format. composer.lock is json as well, but it's fine - because it has different purpose and nobody edits it manually.
Isaac Asimov approves
How is using a static factory different than using a static class to manage this? I get that the factory is only used for specific instances, but he's still making static calls. Probably just a few less.
Would explain some things at my work, hah. What would you suggest for this then? Not a big fan of Go in general but I've been looking at Elixir a lot, especially since it has the foundation of Erlang.
I was never a big fan of Go either. If you can stomach the syntax of Rust I think that could be a good option. Elixir is great, I've run into problems getting the Erlang VM running on multiple platforms though. Python would by a good choice and probably my recommendation, but I don't know your intended projects. I however do not personally like the forced-tabs style &gt;_&lt; Some langs I would exclude (this is merely from my own experience): Ruby (same reasons as PHP), Javascript (crashes too frequently), Bash (fun, but dangerous) :P
Rust is okay but if I'm going to write C-like code I may as well move to C, lol. Elixir would only run on Linux for my purposes anyways. Basically I'm wanting to rewrite my Python projects to something else for a few reasons (portfolio, exposure to languages, etc...). My idea was to originally rewrite them in PHP but most are system services that will be long-running, and from the sounds of it PHP isn't the best solution to this. Bash would be out of the question for this anyways, but would be nice if it could integrate w/ XMPP (one of my projects is a system bot using XMPP for communication).
Nothing is preventing you from writing PHP the same way you did before Composer. Personally, I think that time sucked but hey, to each their own.
SSL is *NOT* a nice-to-have. http://cdn01.androidauthority.net/wp-content/uploads/2014/06/SSL-Added-and-Removed-Here.jpg TLS is absolutely essential to securing your software. Any packet sent over unencrypted channels? We call that *barebacking*.
Yep, this bit us on tuesday as all our servers had an updated version of composer and our private repositories are on http. It was a bit of a PITA to fix
Composer I would argue is by far the best thing that happened to PHP since PHP5
[**@taylorotwell**](https://twitter.com/taylorotwell): &gt;[2016-03-03 20:25:57 UTC](https://twitter.com/taylorotwell/status/705489410372956160) &gt;Now is probably as good a time as ever to announce that Spark will not be free. Spent 8 months working on it. ---- [^[Mistake?]](/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=/48xll5%0A%0APlease leave above link unaltered.) [^[Suggestion]](/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/joealcorn/TweetPoster) [^[Issues]](https://github.com/joealcorn/TweetPoster/issues) 
Sorry for your frustration. Hopefully this change encourages more people to deploy TLS. (e.g. https://caddyserver.com)
Why do you think it hasn't been released for 8 months? Because I re-wrote it from literally scratch. As in a blank Sublime Text window.
&gt; Then you will be shocked. I started from a blank repository and re-wrote it. I am confused. Were there PRs to the original repo? That's what I was/am wondering about. 
Fair play to you.
I think what the point Taylor is trying to make is: Even if there were PRs against the original, copyright law wouldn't really apply here. You can't claim stake to the new Spark because you contributed to an experimental design for the original Spark. There's also nothing compelling Taylor to keep the experiment alive forever.
This post just implies that there is going to be no backwards compatibility. Nobody would infere it as "its not going to be opensource anymore"
"$75 to save $X0,000? Sign me up." - Most successful companies.
So you'd have 0 issue if jQuery announced the same tomorrow? A huge deal of hype and support came from it being opensource. The community supports paid products way less than free. Also I don't believe it was a random recent decision. Spark was clearly planned from the start to not be free. But Taylor knew that announcing it at the start would greatly decrease the hype. To be clear: I wouldnt have any problem if it was a paid product to begin with, without misleading the community. It's not a matter of how much will it cost, it's a matter of not being honest from the get go.
Lesson learned: Don't jump on experimental products.
&gt; Also I don't believe it was a random recent decision. Spark was clearly planned from the start to not be free. But Taylor knew that announcing it at the start would greatly decrease the hype. You're free to have your beliefs, but this is bordering on a personal attack. Do you have any evidence that this was a conspiracy?
It's an attack on shady business practices, has nothing to do with Taylor himself.
So what you're saying the entire point of the rewrite was keeping the copyright? In that case it's basically a different project piggybacking on the popularity of a shared name?
&gt; So you'd have 0 issue if jQuery announced the same tomorrow? Spark's intended specifically to help accelerate development of revenue-generating SaaS projects. jQuery is very, very different.
If X person contributes to Y project under MIT and Z person takes Y project's code and makes it closed source, limits distribution it breaches MIT. 
Read my Tweets today. I said I re-wrote because the quality wasn't up to what I wanted. I wasn't satisfied with it internally. I'll tell you what. You get a free copy of Spark. Heck, free Spark for life. Then you can examine the code at no cost to you and tell me if it looks different than the original Spark. You can write a report on here with your findings. Totally serious.
No it doesn't. All they have to do is retain the copyright statement and/or credit anyone who contributed to the code base.
I believe it's a different code, so you can get the copyright. But what made spark popular was actually that previous "bad" uncopyrighted version
Feel free to sue me in the UK for any arbitrary reason you can envision but: a) I have no presence there, and b) their laws mean nothing to me
is this the alpha version?
Whether it was re-written or not, and legalities aside, this is the kind of announcement that makes me a little bit concerned about the future of Laravel. Taylor's obviously completely entitled to release a paid-for product, legally and ethically, and has put a great deal of work into a wonderful product with Laravel, and I'm assuming Spark too. The problem is the way things like this seem to come out of the blue to many Laravel users. From the tweet that "now is probably a good time", well.. to me, and others, I suspect that the "good time" for this announcement would have been 8 months ago. Personally, I have every confidence that Laravel Spark will be a great product, and likely well worth the money. I don't think I'll be using it though, because I'm not sure I *trust* it not to change or become more expensive once I'm hooked in. At this point I'd also be much more comfortable using a community-maintained fork of Laravel than Laravel itself, because I do have concerns that it will switch its licensing or paid-for status or whatever else at the drop of a hat.
after looking at some of the code in there, it's no wonder he decided to rewrite it from scratch
&gt; Uniform Foreign Money-Judgments Recognition Act
If it were GPL, you'd be correct. :)
Wtf? Why can't you fork it yourself? The works been done for you. You are just applying a bit of extra logic and then deploying it. Outside of security updates what are you waiting on Taylor to do for you?
I said that only to make a point, not to insinuate that Laravel would ever not be free. *If* in some alternate universe frameworks like Symfony or Laravel required a license, I wouldn't find that to be unfair or unjust. They save a ton of time. However, that isn't the universe we live in, so Laravel will always be free.
Thanks for the reassurance. I'm sure you will get a lot of undue criticism for this move, as there are certainly people who just don't want to pay for anything. In my case, over 50% of my work is still in .NET - which comes with plenty of (very expensive) tools and support software, so I'm not concerned about that aspect of it - as you point out, the amount of time your work saves me is immense, and I'm sure Spark will be well worth the money. My concern is about the level of "surprise announcements", I've had about Laravel since starting to use it a few years ago. Is there any way I can keep myself better informed about current and future changes to Laravel and associated products? I know after you replied to me on here a while back you announced that 5.1 would be LTS - which is exactly the kind of move I was hoping for - so thanks very much for that.
It's very hard to report any "future" changes to Laravel because, like I said, it's entirely community driven. What Laravel looks like next year will be driven by PRs, GitHub issues, and community feedback.
&gt; What are you planning to PR? See my other comment, maybe I'm just not sure the best place to follow Laravel news and updates. I don't think anybody (certainly not me) is questioning the time, effort, or quality of the work that you put in. FYI, I have PR'ed one or two things over the years, I just use a different name on Github..
Regarding news and updates. We are actually working on a blog redesign at the moment to better distribute those.
"Man builds a thing to improve on an old thing. Man sells thing for hope eat food and drive car."
Very thankful for Composer, it has changed PHP for the better in a massive way.
&gt; Laravel users Last time I checked I thought we where developers. Go figure.
Laravel and Lumen are awesome. Thank you.
You can be both. If you're going to be so fucking pedantic you should learn to spell.
That sounds like speculation.
uh ......
There's a lot of downvoting going on here, needlessly. Please remember, free as in free beer doesn't keep people's lights on, and /u/utotwel has the right to benefit from his work. I appreciate all the people here whose shoulders I stand on.
&gt; "Fuck off, retard." –-Imakesensealot
Rtf readme.md: "This is an alpha, experimental release of Spark. Things will change. Things will break. Thank you for testing!"
Considering that a single developer costs 1-2k (sometimes more) per week, I don't think it even warrants analysis. Once you throw in considerations for time-to-market and job scheduling, it gets straight ridiculous to be critical of a $75 price tag. We spend double that on lunch during a meeting to discuss playing topgolf. I guess the only complaint I have with paid software is, as a developer, I like to try out frameworks/tools in my spare time and probably won't do so if I have to pay for it. But there are ways to let developers play with your stuff without making it free for commercial use.
Assuming it would take a single developer the same amount of time to build a similar product: - $6,000 out of pocket costs per month for a senior level developer at a company (wages and benefits) - 8 months development time = $48,000 Even if Spark were priced at $5,000, the company is still coming out very far ahead. That sort of time and cost saving is a no brainer.
Sure feels like it. 
People hate him because he took down an alpha concept of a tool that will save people hundreds of hours of dev, rewrote it from scratch for 8 months and is going to release it for under $100? Please.... Anybody serious about building a SaaS would spend that in a heartbeat. You spend the same amount to get the privilege to work with iOS/OSX development.
While I agree on the principle, 8 months is the time it has taken to build a general, extensible and sellable product. The time savings for a SaaS app is probably just a few days.
But he wouldn't be allowed to use that license to work on Spark ;)
The belief that open source must also mean free is why open source will always be the niche, hobbyist market. At any rate, you can go and get the open source version of the original Spark for free right now and no-one can stop you. It's not really relevant to anything if the new version has nothing in common with it.
Just an FYI, 0.14.1 has been released to fix a serious issue in 0.14 that I over looked.
Anyone else get annoyed when a readme or the front page of a product web site doesn't plainly state wtf the product is? I have no idea what Laravel Spark is, and the readme didn't answer that question. &gt; Spark is an experimental project primarily intended for building business oriented SaaS applications, and is highly opinionated towards that use case. http://i.imgur.com/CXKhOgc.jpg
That's a good idea, but the reason I wanted to try out freelancing is because I wanted to gain some experience before trying to get a job. I've been learning for 6 months now, and I'm fluent with PHP right now, but I still feel there's some bumps that I don't know about, but I should know about.
Saw his code now. may be I confused you with 'simple factory'. I didn't mean 'static'. Even if he uses a static factory, the factory simply returns an instance. There is no static in the actual class, making it much easier to test. How is it not better? I agree you on static factory though.
The only thing freelance teaches you that a job doesn't is that people are unreasonable and they think it's your fault. If you're lucky you might accidentally learn some project management skills on the way.
Same! Wow, can't believe I forgot about those.
I recommend XAMPP over WAMP. My experience is that it just works better, and the control panel is also easier to use, in my opinion.
&gt; Rewriting the software from scratch clears away some of the legal issues It was MIT licensed. He can do whatever the hell he wants with the code. Hell, if you have a fork of it, *you* can do whatever the hell you want with the code. That's the point of MIT.
If the original Spark is open source and the new one shares no common code (ie nothing from any contributor to the original) then what is stopping those contributors who are apparently so invested from continuing with a fork? Sorry, but I don't see any loss from this. If Otwell is so critical to the project that his lack of input makes the original spark impossible to continue as a forked project then surely a non-open, non-free version of 100% his own work is the better option? Or is it really simply because of the fact it wouldn't be free? 
Is this an SDK used to connect to an API? If so, why is it directly tied to Laravel? Removing the direct Laravel dependency and making it stand-alone would improve the usability. You can create a separate package that acts as a bridge if you want to easily integrate this with Laravel.
Could you expand on this?
Who hates taylor? He's one of the greatest guys in the PHP community and saved thousands of people hundreds of hours ...
It's not really a shady business practice though. He released the code to the alpha version of Spark under the MIT license after a couple of weeks of development, that code is still available and anyone can fork it and even sell it if they wanted to under that license. After spending many months rewriting it from scratch it's essentially a different product with the same branding and concept. It's hardly shady to give people free things with a very non-restrictive license and then later sell a similar product. 
Not only, as others have mentioned, can you go and use the alpha code of Spark for free still, but under the MIT license you can sell that code yourself, assuming you can find someone to pay for it. He's written an entirely separate product from scratch that shares the same name and concept and is selling it. He is coincidentally no longer hosting the alpha release code himself, but it is still available if you would really like it.
Yes It is a SDK of sorts used to tie directly to the Eve Online Public Crest API. Its tied directly through two apsects: A) I use laravel for my own application so these are a set of "Facades" and "Providers". B) The logging mechanism used is very opinionated in what logs are created when responses for pass/fail are logged and they also use the laravel way of logging. As you can see in my tests Laravel is not a direct dependency. How ever to use in your own app it would have to be a laravel app. As I get closer to a potential 1.0 release I may create a bidge library that seperates out laravel.
Mate, I'm in the UK but the same is true all over the eu backend developers are in such a shortage that you can pick up an apprenticeship at the drop of a hat.
Yeah, I know what SaaS is, but that doesn't tell me what the software does. Is this a framework for building SaaS apps? Is it a software library you integrate into an existing framework? Is it a full blown content management system? Is it a full app like DreamFactory? I already use SaaS, but nothing about the documentation tells me where this software fits into the ecosystem.
A lot of people use MIT by default, because it's easy to reason about, not realizing that people can *literally* steal your work with impunity and resell it, pocketing all of the money they made off your work and never giving you anything more than "oh yeah, $person contributed to this at some point". Plenty of people do this full knowing what they're enabling others to do, and they're okay with it. That's cool. I publish plenty of MIT licensed software myself. But I'm aware of the risks and consequences. Someone could literally sell random_compat for $500 per download and there's nothing I can do to stop them besides possibly try them in the court of public opinion.
Well, they have to keep in the copyright and license in but I see what you're getting at. It's common for open source software licenses though. GPL, BSD, and Apache all allow for reselling. Even if they didn't Taylor Otwel is the copyright holder so he can change it to whatever he wants (less any contributor work). Personally I love MIT/BSD like licensing because they fit with what I consider developer freedom.
No-one would be stealing anything. You can choose which license to distribute your software under. You can even choose to not distribute it at all. You can choose to contribute to pieces of software that don't use a license allowing commercial work with it or you can choose to simply not contribute. At every stage you are the one that has made the choice and if someone takes a piece of software you have worked on and distributed under a license allowing them to use that work for commercial gain then they're 100% legally and morally entitled to do so because *you gave them that right*. 
hahaha,ha haha ha ha hahahahahah, HAHAHAHA.. HAHAHAHAHAHAHAHAHAHAAAA
Stealing is the wrong word, but it was chosen for dramatic effect. You're correct.
Learn how to use Selenium, then don't use Selenium. Seriously, avoid it when possible, it's harder, slower and less predictable than other tests. Sometimes you don't have a choice and got to test a real browser, but for all else don't use Selenium
I didn't even know what Spark was until just now. Is it something useful for you to sell your own software as a service? And some people are complaining that Spark itself is also not free?
Does this mean that if you start a project as free, it's morally wrong to try and sell it at any point later? Or that you can only try to sell software if you announce it's going to be paid for when you first start?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
OP, check out XAMPP. It's a tool that lets you run PHP files on your computer. It's easy to install and great for getting on your feet with web development. You'll have to put your PHP inside a folder typically called htdocs, and that can be found inside the XAMPP folder once you install it. Start the XAMPP control panel and navigate to http://localhost/yourfilename.php in the browser. These other guys in this thread are giving you advice that's only relevant to more experienced coders / developers. 
Your hard work helped me become a developer. I owe you a lot more than Spark's fees, whatever they may be. Listen to criticism but know when to quickly dismiss it. Keep kicking ass. 
Forget freelancing. Contribute to some github projects.
This is the worst till for this. Just because PHP can be used does not mean it should. PHP is for web development. Don't try and be cute and use it for anything else. 
Wordpress is not written in Node, just terrible PHP code. http://sulu.io is great and based on full stack Symfony. https://bolt.cm Is also good, based on Symfony components.
WordPress is NOT mainly written in Node. You are referring to Calypso (https://github.com/Automattic/wp-calypso). I used to be a big advocate of WordPress. I still prefer it over Joomla and Drupal. Mostly because Joomla IMHO was a mess back in the day, and WordPress had way more of an intuitive interface than Drupal for my non-techinical clientele. Now, I tend to roll my own custom solutions together, so I cannot complain about WordPress' antiquated structure, Magento's reliance to XML all the things, Drupal's lack of UI/UX. If time is a constraint, then I would say go with Drupal. They are the largest PHP CMS adopting much of what most PHP Dev's would expect. Composer, etc. There are other great flat-file solutions out there too, OctoberCMS and Sculpin are great examples of these. *NOTE: Much of my assessment is based on my opinions from years ago.*
&gt; that a job doesn't Work at a web dev client services agency and you'll definitely still learn that people are massive cunt hammers.
If you start it up, let me know and I'll contribute on github ;)
Any idea on a release date? I've got the perfect client for this and it could save a ton of work.
Agency work is just freelance with an agent.
I must be missing something here with all the comments of 'Don't Freelance'. There's not that many job openings for entry level PHP or other web development engineers. The majority of openings are for experienced engineers that can prove they've worked in other companies and have built good products. Never have I seen a job position say 'Hiring entry level-engineer, learn while you do!'. Thats why many are stuck in the open-source community loop. Can't get a job without products, can't make a product without time, can't sacrifice time without losing money, can't lose money while paying bills.
I felt this recent influx of (seemingly indian) new developers who have to start from scratch while announcing themselves as "wordpress/php developer" on several subreddits as well. I wonder who is gonna end up very surprised by the code quality of the lowest bidder they chose.
Very funny
Sublime is a debugging tools check this http://www.sitepoint.com/debugging-xdebug-sublime-text-3/
hahahaha. var_dump() is a function not a tool :D
I agree, its not working.. 
My eyes ..... MY VIRGIN EYES ....
I can't even see anything in [that shitty screenshot](http://36.media.tumblr.com/dc0c8478e1d86fd7277320b7a9fc228c/tumblr_inline_o3jypo64bT1t1i0r3_500.png). Does that make it a tripleLOLphp?
It's not just a means to an end for a lot of people. If they're passionate then it's the end itself. But I agree with what you're saying. We shouldn't discourage people from doing it because they're not as into it as us. It can just be a tool for them.
"plz suggest me" Golden.
We have to stay respectful to everyone, in particular people starting. That's how the community grows bigger.
Forget cookie sharing. OAuth or a simple Auth microservice that runs as an HTTP API are the 2 solid options you got to pick from. There are other authentication methods you could utilize but they are all different flavors of the same idea(s). I personally would run the Auth microservice as an HTTP API and have each game check against that API when validation is needed!
No redirects. That's not how APIs should work! what you can do is basically this: 1. User enters login credential at the game app (SSL Encrypted). 2. The game app takes those credentials and send them to the Auth app (a microservice that could be located on the same server or a different one) using a standard SSL encrypted HTTP request. 3. The Auth app validates those credentials and returns a response to the game app telling it in case the login credentials were right or not. 4. The game app gets that response and works its way from there accordingly. Extra: 5. The Auth app could basically have a sessions table where it stores every login there. That's where you maintain your sessions 6. If you now have another game that needs the same Auth. Repeat the process above with N app nodes talking to the one and the same Auth App. 
Point 1st is not so comfortable. I want the user to only sign on at main app, and when he clicks the button to go to the subapp from there, he should get authenticated without any further input from him.
[removed]
Except if it is MIT licensed then it's not stealing.
Thank you. I think the blog is just kinda shitty and negative
Talking out of experience? Because i disagree 1000%, i did freelancing for 2 years and the only thing i was doing is fighting time, delivering ASAP and making concessions WHEREVER. The important things i know and experience i gained is all from fulltime jobs, heart for the project, and actuall trying to build cool stuff instead of wordpress here, webshops there. What makes developing cool is playing with lego building cool stuff, freelancing goes against everything developing is about, dont expect to learn anything and expect to work 24/7.
[removed]
My mistake I seem to remember seeing the "latest" version of WordPress was supposedly written in nodejs.
I agree. But I hate to say many of them don't even make an effort to debug things on their own. It doesn't personally concern me much. What concern me more are the peoples/pages/online group whose only purpose is to make fun of Indians. 
check ur pm :)
Any time you wish to, y'know, not be here is fine by everyone else.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Look elsewhere where I clarified my word choice.
The same reason I cleaned up the bad crypto advice on StackOverflow.
Incidentally: https://paragonie.com/blog/2016/02/one-login-rule-them-all-seamless-and-secure-cross-domain-authentication
wrong move, i you want to gain experience, then get some jobs. Don't freelance before you have experience. Freelancing usually end up you working alone directly with end customer who don't know how to code. So you didn't have anybody to supervise your code and end up become a disaster for your customer.
This is not a good post to learn anything from. The English is bad, the code examples are not even formatted correctly, and some of the statements are simply false: &gt; PHPExcel is part of PHP language that helps you to view and create excel files No.
/thread
That was a mistake that some people made and spread. &gt; Banning WordPress, one because I hate it Please don't hate what you don't understand.
You still haven't given a reason.
&gt; mistake I seem to remember seeing the "latest" version of WordPress was supposedly written in nodejs. I've had to play around with it, I hate those old style PHP applications where things aren't made to be object orientated or use dependancy systems. I'm not knocking it, if people want to use it, but ultimately I won't use it so it's that simple for me.
Lets face ist, it's a Facebook-group, what did you expect? :)
I agree with this. PHP's accessibility can be its undoing. 
I agree with "everybody has to start somewhere", but computer programming is not a joke either. Becoming a developer doesn't require a degree, like becoming a lawyer or doctor, but that doesn't mean that you don't have to study or work hard. One of the first things aspiring developers should learn is "try to do it yourself" and "use google". Too many devs basically get a task, then go to Facebook, IRC, or *insert platform here*, and ask if somebody has the entire thing ready and available for them. I am very willing to help you, I am not willing to do your job. Have a problem? Tell me exactly what the problem is, don't dump 5 pages of code and say "it doesn't work" or "what is wrong with it?"... Add all the info you can. What is it supposed to do? What does it do exactly instead? You see an error? What error? Developers should also grow thicker skin. When I produced stupid code, I got made fun of, I got scolded, and I learned from that. Now, if you show me seriously stupid code, I will scold you. Learn! 
I don't hate him, but a lot of people have really big issues with Laravel: https://www.reddit.com/r/PHP/comments/3bmclk/why_experienced_developers_consider_laravel_as_a/ https://www.reddit.com/r/PHP/comments/3h3nv8/ircmaxell_tries_laravel/ https://www.reddit.com/r/PHP/comments/3qbwng/why_the_hate_on_laravel/ It does get you to use some bad practices, but it's still a lot better than writing your own spaghetti code framework.
He can. And we can bitch about it and use something else
It *is* shady if you fully intend to sell it later and you let the community contribute to it under the pretense that they're contributing to a free and open source project. If you start a project for fun, later realize it has huge value but you're going to have to sink a lot of time into it, then maybe not, but I don't believe for a second that Taylor didn't know.
The difference is whether or not you know ahead of time. You should give the community as much advance notice as possible. Dumping them on their asses is not cool.
So it'd be legal even if he didn't rewrite it, but no one would buy it if he just added 10 more lines of code.
Because education is the only scalable security strategy. The more you educate developers, the less insecure code gets inadvertently written, and the better off everyone is.
I went to school with these people, they will cheat on exams and copy your code without hesitation. I have worked with these people, they copy worthless snippets they found on Google without hesitation. They are incompetent and lazy, and helping them is a waste of time.
I don't think 6 months is enough experience - unless you are spectacularly talented or have something extra to back it up (e.g. great github profile, public facing projects or good contacts).... You'll struggle to justify a decent salary, or compete with other freelancers (who will have years of experience). The only people who'll employ you will be those hoping for something on the cheap - and in the process of ensuring you don't fail you'll end up putting in way more time than you should have. I've employed someone with minimal experience in the past who was starting out as a freelancer. It was a total waste of time (I didn't want to take him on, but my customer wanted to see something happening, so I gave it a shot to appease him). 
I think you may be forgetting a link to the actual library/repository. :P
OK, sounds like a can of worms I'm not interested in opening.
I don't use it, myself, either. But I don't hate it. I have very strong opinions about their policies (they STILL support PHP 5.2 FFS), but harboring feelings of hatred fixes nothing.
For the lazy ones: https://github.com/Imangazaliev/DiDOM
Still get cheap clients in an agency and they are fucking dire to deal with. But I'd agree get a good agency.
You learn that "Corporate Level" is not as high as you think. I rolled I to my job being self taught and even during the interview knew my skills where more than enough. (PHP/.NET and linux sysadmin)
yes, put simply REST and SOAP are php scripts returning JSON and XML respectively. You would use webservices to communicate between apps. Or between the backend and the frontend. You use JSON and XML because all languages can read and write it: php, javascript, python, .net,....
That's plain old racism. Like people in central Europe making Polish plumber jokes, or people in the southern U.S. making fun of Mexicans and African Americans, etc. I've seen plenty of "Web-developer" or "PHP-developer" Germans writing *God-awful* code. Most recent example, a template for a price display, which — in the *view* of the MVC, in the actual smarty template — multiplied the price by 1.19. Why you ask? German VAT is 19%. And on the other hand I'm using a couple of applications and libraries written by very competent Indians. India is huge. There are more idiots in India than people in the EU, just by sheer proportion (I assume that about 1/3 of *every* given population are idiots when it comes to coding. A fair assumption, if you ask me.) But the people who come to equate nationality with potential or intelligence are racists. Pure and simple.
To make this easier to understand: You pass a the value of the reference. If you modify the object using the reference (e. g. call a method), your original object is changed. If you set the reference to something else, the original reference and the original object remain unchanged and the copy of the reference changed.
There's an expectation that the project will be maintained. The author is of course not obligated to maintain the project, but that's generally what you hope for when you adopt a library/framework. If the author is hit by a bus or rage quits, you can hope that someone else will take over. However, if the author decides to maintain the project *and* add a price tag, it's unlikely that anyone will bother to maintain the FOSS version, so anyone that can't afford the paid version gets screwed.
Oh, I see. Making the World a better place one step at a time kinda guy. Good luck with that.
A blog system
Don't understand why you got the downvote, don't agree with the wording necessarily but I understand the intent. That said, if you are the maintainer of a package, you really should know what the license means.
&gt; But is it difficult to understand for me. If i describe a Webservice with my own words, i would say that this a PHP file which return a JSON or XML content. Is it right? But what was a real use case for a Webservice, when i need this? Both allow you to expose your API to the outside world and communicate in a way which is language agnostic. ie: If you want to trigger some service remotely via HTTP but you need some way of communicating whether the request was handled successfully to the client. 
Sorry? I don't understand...
I won't link them. Reddit is the one place I'd like to remain anonymous. The PR or two I've submitted is smaller stuff, but for one of them I proved there was a bug with a unit test but they didn't seem to care. One of them I think they rejected because my code formatting (whitespace) wasn't quite to their liking -- I'm pretty sure I fixed it and resubmitted but it still wasn't accepted. Maybe I'm being over-dramatic and he's just a busy guy, but it sure is infuriating when you spend hours trying to build a PR just the way they like and it's rejected.
IED is a pretty good drop in replacement that is a lot faster i've found https://github.com/alexanderGugel/ied
Are you familiar with any frameworks?
I dare say you're reading into my comment a bit too much...
Sure, if you want throw-away code and technical debt the moment stake holders give it the green light to be more than just a demo. To build a SaaS app *correctly* is more than a few days. It's definitely true that there is no need to rebuild Spark itself since you would only need a single use-case, it's still a non-trivial amount of work to build the foundation of a SaaS app the right way. $75 @ a senior developer salary is *about* 1.5 hours of work. That's not a lot of time to beat the financial sense of Spark ;)
ITT: people whose biggest problem isn't software that's $75, it's not having a solid idea of what they would do with it even if it was free...
Learn another language..
Yes, because [Dash for OS X](https://kapeli.com/dash) provides a "CakePHP" docset for it. However, it's _not highlighted_ as one of the most popular downloads in [the list of available docsets](https://kapeli.com/dash#docsets) .
Ok, SOAP define a specific structure with XML and REST take the web request. If i write a app and use my own webservice then i can use REST but if other developer would like to use my webservice i should use SOAP. Now i understand it better, many thanks
Alternative http://devdocs.io -terminal +browser +offline +os +[extensions](https://github.com/Thibaut/devdocs/wiki#plugins-and-extensions) and also includes documentation for Cake 2.7, 2.8, 3.1 and 3.2
Yup, plenty developers. You should try it :)
To new. http://museum.php.net/php1/php-108.tar.gz running on top of https://www.kernel.org/pub/linux/kernel/v1.0/linux-1.0.tar.bz2
I wish more people are like you. To them, it is just a joke. But it offends a lot of peoples.
I think everyone failed to mention that a REST API is bound by certain rules: https://en.wikipedia.org/wiki/Representational_state_transfer What most of the comments refer to as REST is actually just an RPC (Remote Procedure Call) web service where you just call a a file.php and it returns whatever you want it to return. An RPC web service is not bound by any rules and is chaotic at best, because rules change from implementations. As for SOAP service I believe it is the dinosaur of web services and is used in a more corporate environment.
PHP Academy are now https://www.codecourse.com/ and still make free up-to-date php tutorials. https://www.youtube.com/user/phpacademy/videos
Why not open source it anyway? That's surely the easiest way to find out if there is a demand for it...?
It is incomplete right now. If there's demand I'll continue working on it. If not, I'll probably abandon it.
&gt; it is incomplete So?
No
If you open source it, then people might contribute to make it "complete". Release early, release often.
lol no
WAT
From IRC: &gt; (4:06:37 PM) ciphper: sorry, I saw this and my brain melted: http://www.peachpie.io/ &gt; (4:07:26 PM) Amun_Ra: kill it before it lays eggs 
Can't tell if joke, actual project, or both.
cool, i tried to use your lib some years ago for caching and logging, besides that i couldnt find real practical use for it. phpstorm didnt support completion or hinting for it also, that took away from some productivity.. any tips for more practical use? aop doesnt seem used anywhere still in the php ecosystem, kinda strange, i always thought it would be the next big thing.
Is this a joke?
I feel like this needs to be posted to /r/shittyprogramming but at the same time if this is fully functional it's kinda cool. 
&gt; Only with Peachpie, you can run PHP code within the most secure platform available, Microsoft .NET. Wat.
I wouldn't call the default console MVC, since you have no separation between view and controller. The view in this case is just some output to a terminal, but it's still a view, and it's defined in the controller. My framework solves this by separating the view into a html file (or multiple for multiple controllers), which IMO is a lot more maintainable when your commands get overly complicated.
It's okay. It's still a fun project to work on, since it's so entirely different from the normal request/response routine. Makes you think outside the box.
There is a plugin for PhpStorm with pointcut syntax highlighting and basic autocompletion: [Go! AOP Framework](https://plugins.jetbrains.com/plugin/7785). However, it's work in progress, because it should also add a link to the advices in methods, properties, etc. If you don't like annotations, then there is a PointcutBuilder class that accepts string with pointcut and a closure for advice. Nice usage for AOP is profiling on production via pinba extension and one single aspect to rule all public API. One more useful feature - "introduction", it allows to make all doctrine entities JsonSerializable by adding an interface and trait to each class in runtime. Some more ideas: controlling feature toggling on production (with https://github.com/qandidate-labs/qandidate-toggle, for example), asynchronous method calls (by wrapping methods into the promises or by sending requests into the queue brokers), automatic failover for methods to retry them in the case of fatal errors in PHP7 or exceptions (via https://github.com/odesk/phystrix). So many interesting use-cases to show and describe, but haven't enough time to do this )
http://img.pandawhale.com/post-31230-Ryan-Reynolds-BUT-WHY-gif-Haro-MfFW.gif
The reason there wasn't any separation between view and controller is because you didn't put any in there. That's like blaming symfony if you do echo '&lt;html&gt;'; in your controller.
That doesn't make any sense? If you don't know what you need to do know, you shouldn't be selling your limited skills on the freelance market, and using clients as some kind of guinea pig. Look for a junior developer role. This will give you valuable experience and then you could realistically think about freelancing. Unfortunately your idea of freelancing before experience is one of the reasons there are so many shitty freelancers out there.
I was going to make this as a post, but as it's Monday, I shall post it here. I would like to start making Web wrappers for a whole bunch of APIs just to move myself into the Open Source community. I wanted to start with Marvel's API as it seems cool. My question is... When I start adding PHPUnit tests, how should I authenticate the API requests? For example, Marvel asks for a public and private key in order to authenticate, but I don't want to hard code my personal keys in for everyone to see. Should I do a check for environment variables and if none are available, display an error in the command? Then again, not everyone uses environment variables in the same way, so could I get PHPUnit to ask for a public and private key when the tests are running? If anyone has any experience with this, it would be great to find out what you have done.
You put the authentication stuff in it's own class, and during testing your mock the class. See the [documentation for test doubles](https://phpunit.de/manual/current/en/test-doubles.html). So imagine this is your api class. class MarvelClient { private $authenticator; public function __construct(AuthenticatorInterface $authenticator) { $this-&gt;authenticator = $authenticator; } public function doSomething() { if (!$this-&gt;authenticator-&gt;isAuthenticated()) { $this-&gt;authenticate(); } // ... do something else } } And this is your authenticator class (sorry for the bad example): class Authenticator implements AuthenticatorInterface { public function isAuthenticated() { // ... generate stuff // ... make api request // ... return true or false } } In non-test code, you would use it like this: $authenticator = new Authenticator(); $client = new MarvelClient($authenticator); $client-&gt;doSomething(); In your tests, you mock the authenticator like this: class MarvelClientTest extends \PHPUnit_Framework_TestCase { public function testDoSomething() { $mock = $this-&gt;getMockBuilder('AuthenticatorInterface'); $mock-&gt;method('isAuthenticated') -&gt;willReturn(true); $client = new MarvelClient($mock); // ... test the client } } The variable `$mock` is a special PHPUnit class which will be an instance of `AuthenticatorInterface`. So you pass the mock to your client and not a _real_ instance of `Authenticator`. The code above configures the mock class to have the `isAuthenticated()` method return true. When your client class executes `$this-&gt;authenticator-&gt;isAuthenticated()` it will actually be calling the mock method, which always returns true. This is one of the reasons dependency injection is so important. You need to be able to easily swap real classes for mock classes to make testing easier.
That is interesting. I wonder if there's (good) practical reason for making xor work on strings. I mean, it's a fine and all, but kinda unexpected. I would have expected it cast to int so `'2' ^ 3` would work as expected (weak typing and all). [Works](https://secure.php.net/manual/en/language.operators.bitwise.php) for bitwise `and`, `or` and `not` too I also like how italic `|` in the documentation looks like a `/`. ^(This is the PHP rambling thread right?)
Your tests are in your src folder, which is slightly unusual shall we say
Cool. I very much like the idea, but the real question is: how does the speed compare to normal PHP5? (or PHP7 if you support it) Is it/will it be production ready or is it just for fun? This looks very similar to [JPHP](https://github.com/jphp-compiler/jphp), which is a PHP compiler for the JVM.
I like Wikipedia's definition of a Web Service (https://en.wikipedia.org/wiki/Web_service): &gt; a software system designed to support interoperable machine-to-machine interaction over a network - "a software system" implies it's a program ; it can be written in a wide variety of languages ; "a php script" is a (trivial) example of such a system. - "support interoperable machine-to-machine interaction" implies there's a way for the two ends (the service on the one end, the client on the other end - whether it's a smartphone app, an SDK in whatever language, etc) to understand each other. JSON is a serialization format that helps to achieve this ; SOAP is an application communication protocol that helps to achieve this ; REST APIs is an architectural pattern that helps to achieve this. - "over a network" : to do this you can, for instance, expose your PHP application through a Web Server so that you can use HTTP as a way to talk over the network. In the end "a PHP file which return a JSON or XML content" is "an implementation example" of a Web Service, but the definition of the concept is a little bit broader. &gt; In this case i hear REST and SOAP but i also not understand the difference and which i should use if i create a webservice? There's a lot of debate and standards around which one one should use. SOAP had it's glory days in corporate IT systems ; REST has been the API buzzword for the past years, now HATEOAS is the new buzzword. There's not right or wrong answer to which one you should use ; try to use one that actually fits the problem you're trying to solve, though. Hope it helps.
Auburus --&gt; Indeed your comments are right I will update this. mbthegreat --&gt; Thanks for the feedback, I will move them Thank you !
I know this is a novice friendly discussion, but I'd like to point out that [private isn't an absolute](https://3v4l.org/mqXoM) in PHP. You can easily break the private restriction in at least two ways. The 'oldest' would be via reflection. The newer would be via closure binding as shown in the link above. It's not super important, but it is something to be aware of if you have some expectation that your private properties will never be touched.
Whatever tickles your fancy. You could pick a specific platform, like a framework or CMS. Or, you could specialize in stuff like security, cryptography, networking, API's, etc. It's better to be well-rounded though in my opinion. Know a couple of the popular frameworks, know a couple of the popular CMS platforms, know a couple of the popular ecommerce platforms. The more different things you can do means the more jobs you can apply to.
WordPress is always great to know, because there are always people who start their own WordPress website and have absolutely zero idea what they are doing.
I wouldn't personally use this. The method of escaping is far too primitive and is very prone to SQL injection if any user input is passed through to the methods. I would recommend Aura.SqlQuery as a much more robust alternative.
Hello guys I have a question, How long on average will it take to obtain the zend certified php engineer? I am experienced in Html5, Css3, Jquery, and javascript. thanks in advance! 
There is $img-&gt;resize(100, 100, false) //becomes 150x100 -&gt;crop(100, 100) -&gt;save('avatar.png'); //We even have a predefined fill() function for this =) $img-&gt;fill(100, 100)-&gt;save('avatar.png'); 
&gt; method of escaping is far too primitive Could you elaborate on this, pls, thanks.
Not sure I'm a big fan of the API decisions that you've made here. I think you should 'create' the image with the image object, rather than creating the image object then loading the image into it. There are numerous reasons for this but an obvious one is that you know that if you have a valid image object you also have a valid image (rather than a limbo state object that may or may not be initialised). I like the driver support and most of the implementation, but specifying this a parameter to the constructor like that is a bit messy, I'd prefer to use a factory class: Rather than: $image = new Image('gd'); $image-&gt;read('...'); Maybe: $imageFactory = new ImageFactory(ImageFactory::DRIVER_GD); $image = $imageFactory-&gt;fromFile('...'); This gives you a bit of extra type safety with the constant, and it also allows for future flexibility to be added much more easily (because you don't direct people to the constructor of the image object). A feature that you might consider is providing access to a stream resource containing the image. Currently I can only save the image to the disk or output it (effectively 'echo'), this isn't very useful for framework support. However, being able to write the buffer to a stream resource (without hitting the hard disk) would make integration with Symfony Foundation or PSR-7 trivial.
You misunderstood something. $image = new Image('gd'); // instantiates the library, you do this only once $img = $image-&gt;read('bla.png'); // Create image resource in a separate variable Are you sure you're looking at the api for v3? I have already changed the render() method to return the contents instead of echoing them. Actually says so in the docs: $data = $img-&gt;render('png');
Yup, but if I have a large image I don't want that loaded into a PHP variable by default. [`php://temp` and `php:://memory` streams](http://php.net/manual/en/wrappers.php.php#refsect2-wrappers.php-unknown-unknown-unknown-unknown-unknown-descriptios) are very useful here. And yes, I have misunderstood. I didn't realise you were using `$image` and `$img` to refer to **different types** of object. Calling your driver object `Image` and having it return images that actually have a `Resource` type is massively confusing. Why not `Driver` and `Image`?
The confusing thing is that the driver is named `Image`. Any name that you choose for the actual image object is going to be misleading when you have an actual `Image` class that is used for something else. I don't think the driver/factory class needs to have the same name as the library.
Well technically your image is loaded to RAM at the time anyway (as the image resource). If you render it to a variable and exit your function, the GC will collect the Resource object which will call the destructor to remove the image from memory. So technically in the end all you are left with is one variable with image data in it. 
Fair point, although I try to be consistent with other PHPixie components (ORM, Database, Template) etc. I'll ask around for maybe a better name. Since it's so early after realease changing it will be no trouble =)
am I being stupid or can I use REST and JSON with a remote asmx webservice that returns SOAP responses?
Fair enough. Using streams rather than buffers would allow the flexibility for the processing of images without loading them into RAM. In many environments the PHP memory limit might not be sufficient for very large images. If the underlying driver implementations that you're using don't support the processing of images in this way (I've never used any of the drivers) - then this might be pointless.
you might want to check out $client-&gt;__getLastResponse() to see what it says. Also you need to specify [trace=&gt;1] as a second param to your SoapClient constructor
Which is good for people who specialize in WordPress security I guess
Any time "refactoring legacy code" is mentioned, my mercenary heart demands that I mention my book [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp). The book is all about "technical detail", giving step-by-step instructions on how to slowly convert a spaghetti mess of an include-oriented page-based application to a system that is autoloaded, dependency-injected, unit-tested, layer-separated, and front-controlled.
That's kind of like saying, "Installing a window makes it that much easier for someone to break into your house!"
Reading the php docs for __soapcall... SOAP functions may return one, or multiple values. If only one value is returned by the SOAP function, the return value of __soapCall will be a simple value (e.g. an integer, a string, etc). If multiple values are returned, __soapCall will return an associative array of named output parameters. On error, if the SoapClient object was constructed with the exceptions option set to FALSE, a SoapFault object will be returned.
well, it's not wrong :)
Look's pretty neat. I could see this being useful for debugging, not sure about anything else though. Perhaps you could show how actually intercepting the method calls could be more useful to change application flow/state. Logging is great fro dev, but aside from that I just don't see how I can use this tool. It's more or less like a middleware of sorts, but how you can use it to modify a request?
Use Imagick driver and you'll get performance =) Imagick is REALLY hard to get properly running on windows, but you can use GD if you're developing on a windows machine and use the same code on the actual production server but with the Imagick backend =)
Personally I'd hate to become a WordPress monkey. If you desperately need to put food on the plate, sure, but it's just not the kind of job that is going to challenge you and push your skills forward.
great idea! Never even crossed my mind that there would exist some kind of UI for testing. Thanks!
Hmmm.. I don't see how this explains that it doesn't return anything but NULL.
&gt; I would prefer not to use a framework A lot of employers are going to look for specific framework experience in your cv/github profile. I knew a company for example that outright rejected candidates with no framework experience out of fear for spagetthi code, regardless what they had built. If your goal is to get employed, I would say you should hop on one of the most popular frameworks and build a project with that. Other than that, whatever catches your fancy. Think of something that would be fun to build, something that you want to make. 
My point is, if it returned FALSE then you would know there is a client error. It appears that your web service is returning nothing of value.
Frankly this has been a long time coming. I love the idea of a Reddit/Digg CMS but Pligg was just... abhorrent. Terribly unsecure and mostly used to create spam graveyards. I personally will not miss it.
Thanks, I appreciate that. As to the dependency on PDO, I believe that the dependency on PDO is not and should not be essential to the library. The goal of the library is to provide a quality interface to database management and this is more important than the particular implementation or even language. The same interface should make sense in other implementations and other languages.
+1 to the idea of making something fun to build. At the end of the day someone who is passionate about coding and making stuff is way more interesting than someone who hooked up a bunch of random api calls or skated the margins of this month's popular framework.
Because the code is based on a convention that dictates that variables that hold class instances should be capitalized.
The why for this need is simple. Some companies mandate technology. So they will say .net MVC only and then hire a PHP web developer, and that poor developer has to figure a lot of stuff out quickly. 
thanks! I'll have a look at it later.
Unless you already have experience with frameworks, I'd suggest going with a well-known framework first. The reason is that there are a gazillion of decisions that you didn't think of, and that are taken by these larger frameworks for you. Once you have your year (or more) of experience with a framework, then you can go build your own. You can also start right now, but only with mentoring from a dev already experienced on the subject.
And I had to do the same on projects where people used frameworks. You can write shitty code with or without one. I prefer the flexibility of working with components and it paid off really well in the past. And at least some of the frameworks you listed encourage bad OOP in their documentation (service locators, facades, active record and other stuff like that).
There is a reply button on the bottom right of everyones post.
Heh, people in general have no idea what they're doing. The amount of shared hosters out there that people fall for gets pretty tragic. It doesn't matter the service, either, compared to the same price VPS you're only paying for the convenience of not having to setup apache or nginx yourself.
Having anything on your website was a great way to get your website hacked back in the day. 'might be different' isn't a phrase you use when its a known fact that modern wordpress is used on an incredible number of popular websites and has become the standard of CMS's.
Please don't. There are too many forums out there. Pick one and customize it to fit your needs.
Yup, but that can be said with anything. The average person has no idea how to maintain 90% of what they own. 
Good.
It's not "DB management". Instead it's just another crappy query-builder.
Pretty much everything has a tutorial for it online somewhere, the first mistake is trying to learn it from an instructor.
can you please share a link?..i am beginner tried few but without luck
i am looking for any tutorial where a step by step instructions are given
It seems to me he understood perfectly because the code you've showcased exemplifies exactly what he was underlining as flawed. If that truly is your API then it's retarded. How does `$image = new Image('gd');` make *any* sense? What is the instance data in that case? It seems like you're missing a factory. I think you don't understand how to write object-oriented software at all. But you know what? I doubt it's going to stop you. You've been working on this PHPixie garbage for how long now? Nobody uses it, and for good reason, but you keep on keeping on doing your own thing anyway.
Peel your eyes open and notice that $image and $img are different variables. $image is the library factory itself, it is initialized only once. Also, fuck you.
Googling for these terms would have got you 95% of the way there, and adapting it to your needs would be the other 5%. If you want to get the most out of your course I'd work on reflecting on yourself before you blame your instructor for anything. [What is CRUD?](https://www.google.co.uk/#safe=strict&amp;q=What+is+crud%3F) [PHP and CRUD](https://www.google.co.uk/#safe=strict&amp;q=php+and+crud) [PHP and database basics](https://www.google.co.uk/#safe=strict&amp;q=database+and+php+basics)
i have tried most of these links but failed...now trying a new one https://www.livecoding.tv/jadson/videos/lmEbY-create-forum-on-yii2 hope it works 
I think your analogy is dumber than my statement honestly. At least windows tries to stay updated and secure on it's own. And again, if the code was written better there wouldn't be the need for a million updates every week to patch this flaw or that buffer overrun would there?
Sure, some are more secure than others. That being said, the WordPress core is pretty damn secure. Do they find issues? Of course, and when they do, they are patched immediately. There's no such thing as a 100% secure CMS. &gt; If the code was better in the first place there wouldn't be such a need for admins to stay updated to be one step ahead of hackers, would there? Show me any 2+ year old CMS that has zero security flaws, please. Show me any OS that hasn't had security updates in the past two years, that's still actively maintained. 
Libraries like these are clearly made for people who want to get up and running fast without the hassle of setting up models, schemas, DI etc... I'd say these libraries are where it's safest to assume developers will pass in `$_POST`.
This is a little bit similar to [fluentpdo](https://github.com/fpdo/fluentpdo), which I think could be useful eventually. It looks like development has picked back up on it.
This is very similar to an ORM that I use: http://redbeanphp.com/index.php
I guessed I missed this announcement. I had no idea it was in voting.
Which is why I generally don't recommend them. I'd much rather built my own CMS specifically tiered to client needs than a widely available one that hackers look for. My original point was that it's good to know WordPress because you'll have plenty of clients that need to recover from a hack, on top of regular WordPress jobs.
I think you missed the point here. I was backing your post up the whole way and for some reason I think you took it the wrong way. WordPress is great to know because on top of working for clueless people that start their own WordPress site you'll get jobs fixing WordPress sites that got hacked, or at least that's how it was a few years ago the last time I worked on WordPress. Better?
So, now we're relying on you not writing shitty code? Versus a team of people not writing shitty code? That seems less secure..
[removed]
I think he tried, he was just wrong :/
phpguy2 strikes again 😮 But I don't actually think he is wrong this time... To get better at programming in general it is always helpful learning more languages, to get a new angle at it:-) But tgen again him (and me!) are way of topic... As a project I would recommend was to build a great todo list, with collaboration, priorities and due dates:-) Good luck!
Its probably best to start working without a framework, because then you will develop an understanding of the problems that frameworks set out to solve, and put you in a better position to know when you need one and when you don't. It will also mean you'll become proficient in developing without a framework, because often projects don't have any need for a framework and the overhead they bring. If you only ever develop within a framework, they can become a crutch just as much as they can become a tool that enhances your capability.
Seems really cool, it would be super-awesome to see your code against a Doctrine setup side-by-side.
eh, by the way, you can reply to each comment separately :)
No. Just, no. Better luck next time.
damn. /u/dreistdreist just got totez rektz
I can't understanding how sinking that much money into the site will ever ROI, particularly based on the descriptions of what they've done with the site since.
You know there are far more successful people to suck up to than Paul Jones right?
Always, if you can, framework.
It … yea… should be that way, so just quickly forget about it :-D
Bingo.
I dislike Paul greatly as a person, but Aura is more than just Paul: https://github.com/auraphp/Aura.SqlQuery/graphs/contributors
&gt; Imagick is REALLY hard to get properly running on windows, People say that.....are you able to clarify why? Don't all you need to do is download: ImageMagick from http://windows.php.net/downloads/pecl/deps/ Imagick itself from http://windows.php.net/downloads/pecl/releases/imagick/3.4.0/ Put the files in appropriate paths, add the extension to php.ini, and then Robert is your father's brother? 
I wouldn't mind an actual interface definition for this :)
agreed. 
Thanks man, I'll check that out.
&gt; Ok I didn't know about that :) ! Thank you
It's not entirely surprising.... //This could easily iterate through the array once. $count = count($iterator); //This could easily be implemented by iterating through the array a second time, $iterator-&gt;seek($count - 1); Add in the fact that foreach has special optimisation rules in the PHP compiler/optimiser somewhere and yeah.....taking 3 times as long is pretty easy.
I'm a fan of phpcbf. I always include it as a composer script, so I can just type `composer cbf`. In that case, the cbf stands for `can't be fucked` for me
$client-&gt;__getLastResponse and __getLastRequest both returns NULL.
&gt; While PHP allows setting instance variables implicitly (so without declaring protected $bar), it is usually considered bad practice to do so. Yeah.....I've never really understood the desire for dynamic properties, that don't get handled by __get and __set. And although static analysis can catch those types of errors, I also tend to use a trait to make them be forbidden for most classes. trait SafeAccess { public function __set($name, $value) { throw new \Exception("Property [$name] doesn't exist for class [".get_class($this)."] so can't set it"); } public function __get($name) { throw new \Exception("Property [$name] doesn't exist for class [".get_class($this)."] so can't get it"); } function __call($name, array $arguments) { throw new \Exception("Function [$name] doesn't exist for class [".get_class($this)."] so can't call it"); } }
&gt; Apperently Imagick 3.4.0 doesn't work with the latest binaries of ImageMagick So what happens if you follow the [install instructions](https://github.com/mkoppanen/imagick#installing-on-windows)? "For Windows please install both Imagick and the underlying ImageMagick library from:" And for the record, yes - because Imagick is a thin wrapper around the C libraries of ImageMagick, downloading a version of Imagick that is compiled against one version of ImageMagick, and then trying to get it to run with a different version of ImageMagick is explicitly not supported: "Once compiled, Imagick should be run with the same version of ImageMagick that it was compiled against." Or to put it simply, downloading random binaries from different websites is not a sane way to install Imagick, m'kay? 
Does seek iterate through the array? I would've thought that it kept some kind of index. You are right on the count assumption, it probably does internally iterate over the iterator once. Setting the `$last` variable is probably such a cheap operation that it doesn't make a difference to just iterating the array without doing anything with the items?
There's examples in the [documentation](http://instagram-sdk.readthedocs.org/en/latest/endpoints/users.html#get-id-self), does that help?
Apparently nothing, see the comments at the end under Future Scope: &gt; It was suggested during the discussion that, since array access and string offsets are very different operations, the official documentation should recommend using the '{}' syntax for string offsets, instead of the ambiguous '[]' syntax (and potentially deprecate '[]' for string offsets in the future). &gt; &gt; On the opposite side, it was also suggested that array access and string offsets are so closely-related concepts that we should recommend using '[]' in both cases and disable the alternate '{}' syntax for string offsets ! &gt; &gt; So, as the subject is controversial and very tangential to the subject of this RFC, it will be left for a future RFC. I didn't even know you could use {}, as I've always thought of strings as a char[], so [] made sense. 
Hmm, do you think resizeAndCrop sounds better? Could be...
I have been waiting for this moment for the past couple of weeks now. So much excitement. :D
It will work if you use the Imagemagick 6.8.* from that repo. The problem is, you don't get a verbose erro message. Actually if you download the dll from PECL it doesnt even say which Imagemagick it was built against. The scenario I was talking about was downloading latest Imagick from PECL and latest Imagemagick from the site. I actually fixed it by compiling the dll myself in the end, so idk if the link you wrote works or not. The actual shitty part is support for Gmagick, which was great before,100% mimicking Imagick. But the new Gmagick PHP extension really, really fucked up. There is no normal way of getting the pixel color at coordinates (there is a retarted way of cropping the image to a 1x1 size and getting first pixel: http://stackoverflow.com/questions/19338629/php-gmagick-how-to-get-pixel-color ) . Even if oyou get the color in this way, it won't tell you the opacity value. And it no longer supports writing half-transparent text over the image (for sme reason). Really gone to shit =(
&gt; Does seek iterate through the array? I would've thought that it kept some kind of index. The SeekableIterator method `seek` tells the iterator to jump to a certain position. This is hopefully an O(1) operation but you might want to implement an iterator where it is not.
&gt; for Gmagick, which was great before,100% mimicking Imagick. But the new Gmagick PHP extension really, really fucked up. When you say it's "fucked up", do you mean that it hasn't had features added to it that match the features added to ImageMagick, since the projects forked? I think the issue is that there is basically only one guy supporting the underlying GraphicsMagick library. And it's a rather thankless task of supporting it. What I usually recommend is: * GraphicsMagick - use this if all you want to do is resize huge numbers of JPG, PNG or any image that isn't GIF. * ImageMagick - use this if you have any other needs. 
Well I analyzed both cases with Blackfire and indeed : * With Iterator we got 17MB memory usage and 3.9 s of execution (https://blackfire.io/profiles/8621aa4e-f61d-4197-a8a9-0b44774371ca/graph). * With Loop we got 392 KB memory usage and 307 ms of execution (https://blackfire.io/profiles/09bb741b-5883-4233-bccc-6f6a5bd2f445/graph). I didn't have time to analyze both graphs yet but maybe you can already take a look :) ! 
This article might bring up some good, but the author clearly missed the point of generators. A generator is still "generating" the values. If one would try to use array_ on any value that is not an array the same problem would occur even before 5.5. You wouldn't pass anything else but an array to the array_ functions, why would it be any different with generators? **There is no "fuck up"** **I clearly am new to reddit and don't know how to format a message**
&gt; Does seek iterate through the array? What array? I can't see an array.....there are RecursiveDirectoryIterator's inside the finder...... &gt; I would've thought that it kept some kind of index. I do not believe that it does or should cache the data. Although it is an iterator, the 'data' it contains is not static data, but instead represents the state of the files on the disk. Iterating over this is a safe thing to do, as the internal state of the iterator is consistent during the course of iteration. Seeking to a particular position is probably not a safe thing to do, as the state of the files on disk can change when the iterator is re-run. Mildly discombobulating - that does mean that cloning any type of 'directory iterator' is not a safe thing to do.....even though the SPL does allow it, which causes a few of the SPL tests to fail randomly. If iterating the performance is an issue, just iterating over the finder once, and storing the filenames in an array, would be the way to go to improve the performance, as well as have a consistent set of data to work on. 
`fit` maybe better. `fill` is usually for... filling up a box with a color
Can't you just store the result in variable and array_flip ??
Ok, I see your point but that is not how this works. Because, there is no array to traverse. The generator is accepting values without indexing them, to be passed to a handle or action. There is no map of anything. If the developer chose to build an indexed array from the **values** returned from a **generator**, he or she can do that once it's been populated. This is somewhat how you should look at it; foreach ($this-&gt;getFromGenerator() as $value) $value; // "See this as a direct value, not array value" If you want to build a working array; $array = []; foreach ($this-&gt;getFromGenerator() as $value) $array[] = $value; array_map($callback, $array); // It is now an array, not just a value If you want a callback for each value during the generator, you'd have to implement that into your generator.
&gt;&gt; Does seek iterate through the array? &gt; What array? I can't see an array.....there are RecursiveDirectoryIterator's inside the finder...... Yeah, that was stupid phrasing. I was influenced from you always using the term array in your comment: &gt; //This could easily iterate through the array once. &gt; $count = count($iterator); &gt; &gt; //This could easily be implemented by iterating through the array a second time, &gt; $iterator-&gt;seek($count - 1); You brought me on the right track though: $files = \Symfony\Component\Finder\Finder::create() -&gt;in('searchdir') -&gt;directories() -&gt;depth(0) -&gt;sortByType(); echo count($files) . PHP_EOL; mkdir("searchdir/abcdef"); echo count($files) . PHP_EOL; As you remarked, every time the iterator is being iterated, through `foreach` or `count`, the listing is done anew. Thats why the count numbers this script outputs will differ. for ($i = 0; $i &lt; 100; $i++) { $files = \Symfony\Component\Finder\Finder::create() -&gt;in('searchdir') -&gt;directories() -&gt;depth(0) -&gt;sortByType(); } takes basically 0 time, while $files = \Symfony\Component\Finder\Finder::create() -&gt;in('searchdir') -&gt;directories() -&gt;depth(0) -&gt;sortByType(); for ($i = 0; $i &lt; 100; $i++) { foreach ($files as $file) { } } takes many seconds. So, as you suggested, I will use [iterator_to_array](https://secure.php.net/manual/de/function.iterator-to-array.php) now to get rid of this.
I'm too scared to try echo "{$string{3}}";
He tested and documented his code.
It had features removed (those features were in Gmagick before), no idea why that was removed. Basically the old version worked and this one doesn't. Also, getting pixel color by coordinates to me is the most essential feature you can have in an image library. 
&gt; https://blackfire.io/profiles/09bb741b-5883-4233-bccc-6f6a5bd2f445/graph $files-&gt;getIterator() is the problem....apparently it's sorting the data....which leads to 107,500 calls to get the file name.....so it's a lot slower than 3 times.
I'm still learning PHP- why pass in FETCH_ASSOC as a parameter to the PDO when you are going to map it to an object? Why not do FETCH_OBJ and just get an object?
Filezilla is available for many Linux distros (with any GUI desktop environment of choice...), Mac, &amp; Windows so that you can have something familiar anywhere-- which is nice sometimes.
But why? An array is, in the most simple sense, a variable that holds multiple values. Why should the array functions care what type of data structure holds these values? As long as they don't logically depend on the key-value-model, of course.
You might not want the object to be built automatically, e. g. if your database structure is not strictly the same as your model structure. Of course you should avoid this if possible, but it can't always be avoided - and to be honest, it is easier to iterate over an array to for example filter the objects to be instantiated instead of constructing each single one and then filtering which ones you want to return.
Care to share how to do that?
I am pretty confident Gmagick::getImagePixelColor used to also exist at one point, at least I clearly remember using it. Or at least a different method that allowed you to get pixel color by coordinates (perhaps named differently). But now I searched the api back and forth and there is none. At the very least getting the image opacity was definitely supported.
For the ones not knowing Edin: He was the creator of he PDO pgsql driver, the pgsql extension, CLI and a few other things in PHP. For a long time, till his health became worse, he was also the person behind the official Windows builds. Unfortunately I never met him, but from online conversations he seemed like a good guy. Sad that he's gone.
May I suggest adding some docs on the README.md? Just a simple how to get started? 
I install it locally per project, so that I don't have to set it up on each machine I work on. It's fairly easy. First, you need to require cs and cbf to use it `composer require "squizlabs/php_codesniffer=*"` Then you just need to add it to the "scripts" section of your composer.json "scripts": { "cs": "./vendor/bin/phpcs --standard=PSR2 -np src/ tests/", "cbf": "./vendor/bin/phpcbf --standard=PSR2 -np src/ tests/" } And congratulations, running `composer cbf` will now automatically format all of your code in `src/` and `test/` to PSR-2 compliant code
Zeal (http://zealdocs.org) for Windows/Linux and works with all of Dash's docsets DevDocs (http://devdocs.io) browser-based Velocity (http://velocity.silverlakesoftware.com/) for Windows LovelyDocs (http://lovelydocs.io/) for Android
You are not hearing me. `array_` functions accept `array` as parameters. If I must simplify this further I'd say the `generator` **is** your callback, but it's not (lol, what?). If you want a callback to handle each value, you must build your generator to support that. function getFromGenerator(callable $callback = null) { if ($callback !== null) call_user_func_array.... } I wouldn't do this though, you'd simply just pass the value on yeild instead of through array_map; foreach ($this-&gt;getFromGenerator() as $value) { $value = myFunction($value); } I really don't see whats so hard to see here? Maybe if you give me a real-life scenario it might be more obvious, but it all boils down to design. The difference is that with `generators` you work with the values in "real-time", instead of first caching them. Ofc - caching is still probably useful, but then, yet again its simple to just traverse the array after cache procedure.
I think you might have a naming issue. If I'm working with a class named Image, I would expect that to be the actual image object, not a factory which creates image objects.
If you have the opportunity, and don't rely on any extensions that were removed, then definitely. It's faster, seems stable and provides new features.
Hm, that is weird. I'll have to check the code I wrote there then. Actually since we're on the subject, do you know of any way to write smitransparent text with Gmagick? setFillOpacity does nothing for me =(
You're the one that's not hearing him. Your explanation for why it works the way it does is "because that's the function signature". For array_map, anything that's Traversable can be mapped, an array specifically is not necessary. And that's the point.
&gt; array array_map ( callable $callback , array $array1 [, array $... ] ) From what I can tell from the documentation, the function accepts "array" only. But, ok, I'll back off, though to me its obvious.
You mean other than use ImageMagick? I don't know - and testing it does seem to be broken in GraphicsMagick, and almost certainly has been since the projects forked. The only thing I can suggest is to do the annotation in a blank canvas, and then composite it into the actual image with the appropriate alpha channel values set....but honestly, although GraphicsMagick may have been better shortly after the projects forked, and probably is still faster, it just isn't as reliable as ImageMagick now. 
14.04 is php 5.5 IIRC, anything older is php 5.3? If you're already on 5.5 there's not too much to worry about moving to 7 - worth a shot on a staging server IMO!
Tried that also, but can't get alpha compositing to work too (. I can overlay a png over a different png, but I cannot reduce the opacity of an existing image before overlaying it =(
This problem has other solutions. Like [Supervisor](http://supervisord.org/)
Which language you go with probably isn't the problem if you have to ask, if I'm honest. 1. What do you define as "enterprise level"? 2. Do you have a team of developers or just you? If a team, what is their experience with what languages? Their competency level? 3. Are you prepared to handle a compile step in your work flow if you choose a strongly typed language? 4. Assuming you are, are you confident enough in your design and architecture skills to properly modularize your code so that you don't have to re-compile the whole codebase every time you make a tiny change? What about your team? Those are just some questions to consider. At the end of the day, it's developers that will make or break an enterprise project, not the technology stack. You can build clean, well-separated, well designed architectures in just about any language, including PHP. You can also produce a sloppy spaghetti mess in any language. [You can also produce an over-engineered "enterprise grade" disaster in any language.](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition). The language isn't the primary issue when it comes to the architecture of enterprise systems.
The biggest mistake you'll make is choosing the wrong design of a system, and no language will save you from that mistake. All other mistakes, (including the silly case with PHP arrays that you seem to be fixating on and using as justification to demonize the entire language), are mistakes that are easily fixed and corrected. A fundamentally poorly designed and architected system, is not.
At a bit of a quandary at what to do in this situation, I have a site with a list of registered users and I want to create an event app where users can say if they are going or not. What's the best way to track which users have said they are going/maybe,etc? So far I have figured on storing all the id's as an array in a table field then just pulling up the array whenever someone wants to see who/how many are going? Is that the best option for this sort of thing? Only registered users would be able to declare so I can user the user_id's in the table/array. 
Yeah, it's 5.3, but whether or not 16.04 will include PHP 7 or not will decide if my company uses it in the next 2 years or not...
By the looks of it, 16.04 will include PHP 7 https://www.reddit.com/r/PHP/comments/3zvlso/we_need_your_help_to_get_php_7_in_ubuntu_1604/
OK I think you are missing the point from the article *entirely*. The author is not saying you *can* pass generators into the array functions. They're saying you *should be able to*. In other words, the PHP language should be updated so that those functions will accept generators. Currently, yes the only way is like your second example. But you can do the same with basic arrays too: foreach ($arr as $key=&gt;$val) { $arr[$key] = myFunction($val); } The whole point of `array_map` is to make that simpler. So for a generator it would great if we could do: $newArr = array_map('myFunction', myGenerator()); This wouldn't make sense for every array function. For example the sorting functions where you pass the array by reference could never work.
This article was, to my delight, rather comprehensive. The title might be a slight overreach (as all "everything you need to know" titles are, by definition), but it's not practically misleading.
Your participation in this sub makes me wonder why you waste your time here.
What do you consider enterprise?
Yeah, I re-read what I wrote and realized how horribly click baity it seemed. It definitely wasnt my intent, I was just excited to find something so *thorough*.
W3school is a perfect source to learn from. This tutorial is the thing that you need to do form actions. http://www.w3schools.com/php/php_forms.asp
This is one of the rare instances where I'm okay with the click baity title. :)
checking it out now, thank you
https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu
That escalated quickly. 
I see, I will check that tomorrow morning. Thanks!
You have to start with baby steps. That's what google is for. https://www.digitalocean.com/community/tutorials/an-introduction-to-securing-your-linux-vps
haven't gone down that road yet, thanks!
This does NOT in any way save you memory! When doing database queries PHP will usually fetch the entire queryset into memory. (Unless you use unbuffered queries which you should not because they hurt the database server.) If you take that queryset and return it as an array PHP can garbage collect it when the function ends. If you use a generator you save that queryset in memory. There is no difference! In method A you have an array taking memory and a garbage collected queryset. In method B you have a queryset in memory, and you have to call a function for each loop - which is at least 10 times slower. Generators are great! But not for this.
Well, no, most of my code is PSR2 compliant as it is. I don't automate it any further than that, because not seeing that there were errors to fix encourages lazy coding. The goal is to write PSR standard code from the get go, not to write code that will be transformed in to standard code.
Only array_map and a few others that return new arrays could. Most array functions work directly on the array. Doing this would be very inconsistent and would be bad design. So /u/inotes is correct. Making it MUCH worse, function are not supposed to have side effects! But using a generator would be a huge side effect because you consume the values from it. No. The suggestion to let array_map use a generator is terrible.
Well I think the going rate in india is about $5 US / hr then you can multiply that by 2 since it would probably take them 2 weeks to make. $5/hr * 8 hrs/day * 2 twice as difficult cause indian * 10 days ~= $800. I don't hold anything against indians and I am totally being a d*** painting them with the same brush.
yeah, one usually uses a paginator. I used yield on scrappy, import scrapy from tutorial.items import DmozItem class DmozSpider(scrapy.Spider): name = "dmoz" allowed_domains = ["dmoz.org"] start_urls = [ "http://www.dmoz.org/Computers/Programming/Languages/Python/", ] def parse(self, response): for href in response.css("ul.directory.dir-col &gt; li &gt; a::attr('href')"): url = response.urljoin(href.extract()) yield scrapy.Request(url, callback=self.parse_dir_contents) def parse_dir_contents(self, response): for sel in response.xpath('//ul/li'): item = DmozItem() item['title'] = sel.xpath('a/text()').extract() item['link'] = sel.xpath('a/@href').extract() item['desc'] = sel.xpath('text()').extract() yield item $scrapy crawl dmoz -o items.json 
http://www.practicalheatingandplumbing.co.uk/
I personally just use laravel which sets up cron job to run. If there are errors that prevent it from running then I go back and check the code ... 
Funny story - I've heard this phrase (mistakes can be easily fixed and corrected once we find them, my architecture is da bomb so we probably won't find any) from Java developers and Python developers as well. PHPs lower barrier to entry means that yes, there are a lot more beginner-level just plain bad developers than in languages that are more difficult to get setup and gain access to, but in the end there are bad developers in every language. Singling out PHP means pretty much nothing.
Sure, humans make mistakes. I just like being reminded when I make a mistake, makes it less likely to happen again than if I didn't realize I was making them at all
Roger, guess I skimmed the article and kinda missed 'the point'.. On second review though I guess my big red flags are that this process does nothing to prevent the same thing that caused the job to die... To not just keep dieing. I'd rather have it die, and log why, so I can fix it, or.. Not die. I should have taken more time to read the whole thing, my bad
I want to make a big enough website, and hope to make a lot of visits, so I want a working and strong website from day 1. For your websites, do you use CentOS or DigitalOcean ? And you said that DigitalOcean is a decent provider of VPS boxes, isn't VPS the same as cloud hosting, and different from using a dedicated server for a single website ?
A two million dollar 3PAR SAN has a management interface written in PHP. How enterprise do you want it?
Yes, exactly my thought while reading this article, because I had exactly this problem. If my job were to fail and re-run il would fail over and over again. Try catch and incrementing delays upon each retry (+ loggin, of course) works quite well now :)
&gt; echo ('BZVXYiR@\S' ^ "1234567890")('D\R\W' ^ '1231234'); Can't get this to work on PHP 5.5 PHP Parse error: syntax error, unexpected '(', expecting ',' or ';' in [] on line 1
No need for the silly hyperbole. &gt; Doing this would be very inconsistent and would be bad design. So /u/inotes is correct. Except that's not what they were talking about. Or if it was, they articulated it very poorly. &gt; Most array functions work directly on the array. Looking at the manual, looks like less than half to me. As explained above, they already accept a Traversable, so there wouldn't really be inconsistency there. &gt; But using a generator would be a huge side effect because you consume the values from it. Why is that huge? It's pretty obvious that whenever you pass a generator into something it gets consumed. And I already mentioned above about alternatives, like a `generator_map` function that takes *and returns* a generator.
&lt;?=header('Location:chat.com')
Not to be mean, but if you haven't familiarized yourself with these things you probably aren't going to be driving enough traffic to necessitate a dedicated server. As an example, my http://playc4.com website gets about 400 hits a day, with time on the site averaging 7 minutes. That site has no problem keeping up with traffic and is running on a fraction of a VPS (virtual private server) along with a music playlist, pizza tracking site, and a couple others. In order to require a dedicated server, you are probably looking at getting 8,000 hits a day.
&gt; In order to require a dedicated server, you are probably looking at getting 8,000 hits a day. For a poorly written application, sure. A bog-standard SF2 application can run on a $10 DigitalOcean VM, serving out thousands of hits a minute. If you split out the DB and the PHP you can easily multiply the performance gained for not much more money.
For my precedent websites I didn't cared too much about performances, and less about security. And now I'm making the necessary researchers to have as much cards in hand, before diving in the development process, as possible, hopefully this will gradually give me the needed experience to maintain it
Work with the $5/month VPS. For all intents and purposes it is a dedicated server, even if it is just a virtual one. 
&gt; Why is that huge? It's pretty obvious that whenever you pass a generator into something it gets consumed. No, it's actually really bad. If you run: array_map('myFunction', myGenerator()); twice the first time you get results, the second time you get an empty array or an error. That's a great way to produce unmaintainable confusing code. Don't forget that array_map might not be visible right there, it could be in some other function. For example: function getCategories() { return array_map('myFunction', myGenerator()); } And you are asked to print the categories twice, so you call the function twice. It's not in the slightest obvious the second call will not work while the first did. &gt; As explained above, they already accept a Traversable, so there wouldn't really be inconsistency there. A Traversable has a required `rewind` function. A generator does not. A Traversable has a defined end. A generator can keep generating values forever, it does not have to ever end. Sorry, but the author of this terrible post is completely wrong. And he's even wrong about a Generator saving memory - it does not. There's pretty much nothing correct in that post at all. It's quite ironic he's looking for work in the last line - that post is not a good advertisement for him at all.
PHP does have it and it would be this: http://php.net/manual/en/class.traversable.php A Generator is NOT a list or array! A generator does not have to ever stop, it's not a fixed length data structure.
&gt; (Unless you use unbuffered queries which you should not because they hurt the database server.) [I'm not sure I agree with you](http://www.hackingwithphp.com/9/4/9/unbuffered-queries-for-large-data-sets-mysqli_use_result). If you're doing a batch operation on 2 million rows, your buffered query might just explode. Also, in terms of 'hurting the database', the closest thing I could find to being a problem is table locking, [which is a problem of MyISAM and not InnoDB](http://stackoverflow.com/questions/22257471/mysql-unbuffered-query-locking-doesnt-lock).
yea, my main goal is to get my idea out and functioning, and then once i have it established begin working on a stronger version of the site. i'll check out drupal 7, thanks for the advice! 
My ugly idea, but it doesn't break the record (65 chars) &lt;form&gt;&lt;input name=m&gt;&lt;?=!fwrite(fopen(__FILE__,a),"&lt;p&gt;$_GET[m]")?&gt; 
Sorry about that — we have a bug tracking the Laravel 5.2 issue internally (and, more importantly, a plan on how we're going to fix it), but intentionally kept the scope of this release to just PHP 7 support (since it involved a **lot** of changed code internally). For the time being, you can disable framework detection with newrelic.framework=no_framework in your newrelic.ini, but that comes at the cost of automatic transaction naming going away. Support can help you out with that if you want more detail or assistance. We're definitely aware of it, and definitely planning to fix it ASAP!
&gt; Don't forget that array_map might not be visible right there, it could be in some other function. But that will still work as it is. The function returns a generator, so in this case it's the same as any function that returns an array. If you saved myGenerator() to a variable and used *that* twice, then yes. But then it's obvious again because you've "used" the variable. &gt; A Traversable has a defined end. A generator can keep generating values forever, it does not have to ever end. Neither does an array if you keep adding values to it. You can't compare something done right with something that creates an infinite loop.
&gt; But then it's obvious again because you've "used" the variable. No, that is not obvious at all. Since when do variables get used up? What kind of programming do you do that your variables get used up after a single use? Maybe you should do some reading before digging yourself in deeper. Read about why functions with side effects are bad. &gt; Neither does an array if you keep adding values to it. You can't compare something done right with something that creates an infinite loop. So basically you want PHP to add a badly designed feature to the language, so that people will not say that PHP is a badly designed language? Are you serious? Why would you advocate for something with such bad usage scenarios? A generator is the WRONG tool for this job. It is the wrong tool for getting results from a database, and it's the wrong data type for array-type access. A generator is NOT an array. Using it as one is not recommended and leads to poor code. Use a traversable instead - that's what they are for. In fact his entire blog post could be rewritten with a traversable and would have the same result of not saving the entire resultset in an array, and would actually work properly. (It would not save any memory though, but then neither does the generator.) He made a mistake. His post is bad advice, and has a bad feature request. Don't compound the problem by thinking he's right.
I think my answer doesn't differ too much, but I'm offering it as a sanity-check from the opposite direction, since I've been dealing with DDD for a while but hadn't really heard of ADR: 1. "Actions" should: * Parse user input (form-submit, AJAX, STDIN, etc.) * *Construct* the appropriate Command (e.g. `SchedulePurchase`) * Submit the command to the Domain 1. "Domain" area: * Contains the definitions for Commands and Events, which are immutable plain-old-PHP objects. * Handlers see a Command then then call methods on your domain-objects (e.g. `Product` or `User`) * The many domain-objects should emit/accumulate events as they are used (e.g. `PurchaseCreated`) * The Bus/Handlers should return a **set** of accumulated events on success (or bubble an exception on failure) 1. "Responders" should: * Accept the multiple events (or possibly an exception) * Pull out the events which happen to be of interest for a particular workflow * Generate the appropriate response (HTML, JSON, HTTP-redirect, STDOUT, etc.) This is a sketch of a more MVC-ish version, where the input and output aren't so strictly-separated as with actions-vs-responders: public function mvcFrameworkControllerAction(HttpRequest $request){ $item_id = $request-&gt;get('item_id'); $count = $request-&gt;get('count'); $command = new SchedulePurchase($item_id, $count); $events = $this-&gt;commandBus-&gt;execute($cmd); // Filter out the one event we happen to really want, throws exception if not found maybe $event = $this-&gt;filterEvent($events, PurchaseCreated::class); // Omitting any templating stuff for simplicity $productName = $event-&gt;getProduct()-&gt;getName(); $orderedCount = $event-&gt;getCount(); $msg = "Ordered $orderedCount of $productName"; return new HtmlResponse("&lt;div&gt;$msg&lt;/div&gt;"); }
Interesting. For now I just output a list of fixed files if any, so I can understand there were mistakes. Probably I'll make the output more verbose and add the exact fixes for the each fixed file so I could understand and focus more on such things next time.
&gt;A Generator is NOT a list or array! A generator does not have to ever stop, it's not a fixed length data structure. What's your point? In what way does that make it unreasonable to consider it just as iterable as an array? At the end of a given read there's a way to attempt to retrieve the next value in the sequence. In an array you simply increment the index and go again, and when the end of the array is reached you stop iterating. (In Python, for example, you can raise a StopIteration exception to signal you're exhausted.) Much the same a generator can be asked for the next value again and again. Either it will signal it's done, or if it never does then that's not necessarily a bug or undesired behaviour. Wanting to do something in an infinite loop isn't terribly rare - so much so some languages like Rust even implement special syntax for infinite looping. 
Tiny chat needs proper escaping or it will lead to remote code execution and XSS (unless it's necessary by design?). $_GET['m'] &lt;&lt; XSS, escape with htmlentities (or escape when printing) include 'm' &lt;&lt; Code execution, do not include, just print the content 
45 characters, still no security, CGI only, HTML4 browsers only (Chrome removed `&lt;isindex&gt;` support): &lt;isindex&gt;&lt;pre&gt;&lt;?`echo $QUERY_STRING&gt;&gt;m;dd&lt;m`;
I don't think you understand the issue this is trying to solve.
I'd do the following: 1. Look for job ads in your area. 2. Take the average salary 3. Work out what a week at that salary would earn. 4. Double (or more) that amount 5. Be prepared to negotiate down. You generally want to start high because of https://en.wikipedia.org/wiki/Anchoring
The parent stays alive to execute more items in the queue. You can specify the maximum number of child processes (which probably should be the number of cpu's - 1 or minimum 1). The queue can be an array of items or just a counter. Child processes will execute and the parent will listen for child process completion. Once complete the parent executes another child instantly to keep the queue moving. parent will sleep once the queue finishes and after a defined period wakeup and check the queue to see if any new items have been added. There are two different modes.. a single run process where once the initial queue is complete the parent exits. Or a "Daemon" mode where once the queue is complete, the process sleeps for the defined period, wakes up, and checks the queue for new items. If none, it sleeps again, otherwise process the queue. The main benefit is on the github page. The parent process can stay alive indefinitely because it consumes a very specific amount of memory.. only what the parent needs. And consumes very little CPU to do what it needs. All the cost is in the child.. and child's can crash .. they wont take the parent with it. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I'm not trying to have a great discussion here, just letting you know I see your reply, but this is my point of view; * You pass a function as a "string". Generators offer/provide a more OO way. * $newArr have no possibilities of being type hinted, unless you explicitly tell the user or IDE about it (i.e. doc blocks == more time writing code) * Faster to implement? Don't think so, you still need to write the functions. True, you need to spend one or two more minutes considering design. * Debugging? Messy or hard at best, I at least, wouldn't expect data manipulation after the data have already been produced.
Or you can wrap it in a CachingIterator http://php.net/manual/en/class.cachingiterator.php
Nice one! I like the way PHP is evolving...
Cloud is a bit different, but there is no single definition of cloud. You have IaaS, PaaS and SaaS. Elastic / scalable servers depending on your needs. VPS is pretty much the same as a dedicated server, just virtual. It has its own IP address, but shares baremetal with other VPS, although they don't see each other. Using Digital Ocean, you can pick your OS. Many use CentOS or Ubuntu, both of which have a plethora of tutorials on DO to explain pretty much everything you'd want to do, in detail. It's great. I went from zero knowledge to knowing how to setup Nginx with both Python/Django postgres and PHP / MariaDB running at the same time. 
Filezilla should work just fine, but if you want a more "cool" way, try using scp to copy and send files from/to the server. http://www.hypexr.org/linux_scp_help.php
This is a great suggestion and one I think I will take. I really appreciate your feedback!
All you need is symfony and everything else that builds on top of it. The league projects as well. Both groups qualify for the "bloated and slow as f**k" requirements of any enterprise software. 
Good luck!
Nice work! I wrote a tutorial like this that uses Apache: https://medium.com/@wvervuurt/how-to-run-multiple-php-versions-simultaneously-under-os-x-el-capitan-using-standard-apache-98351f4cec67
Tests and documentation is as good as real code. When I recruit this is gives same kind of "points" in my book, when the code is tested and documented. You dont need 100% coverage, but close to it is a big plus
I host some sites with Dreamhost, and I noticed recently that PHP 7 is an option on the control panel (cheekily labeled "new and scary").
Too soon to tell, but we're obviously aiming at a significantly increased performance. 
Correct. This project is based on Phalanger and MS Roslyn.
You can use it for cross-platform development in PHP, for example. The earliest demo we are shooting for is the creation of a simple app for Windows 10 IoT core in PHP.
There are some benchmarks for when we first started the Phalanger project. PHP7 support is in the making, but it is too soon to tell. Please check back on our github repo towards the end of this week, we are working on the ReadMe.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
IMHO similar to Command Pattern because you are defining things to be executed later via deliver method. The handlers take the place of the Commands and the deliver method acts as the invoker
&gt; If you install the OS yourself, or at least choose which one to use, do you need to secure the server yourself ? Yeah, but ~90% of problems can be solve with: 1. Installing a [grsec-hardened kernel](https://wiki.debian.org/grsecurity) 2. [Enabling automatic security updates](https://wiki.debian.org/UnattendedUpgrades)
;)
I'm sorry I missed it this weekend. 
Java has initializers that do exactly this and also get called before consturctor. Sometimes they come really useful: http://www.programcreek.com/2011/10/java-class-instance-initializers/ Would be awesome if those were added to PHP
The `$promise-&gt;setBar` seems unnecessarily obtuse to me. Why not `$promise-&gt;add('setBar', function(...) {});`
Thanks for coming back. I'm just leaving work but I'll try to respond in full later today or tomorrow.
Thanks for the suggestion! Unfortunately, count($cachingIterator) returns 0 until the inner iterator has manually been iterated (which loads the cache): $files = new CachingIterator(\Symfony\Component\Finder\Finder::create() -&gt;in('searchdir') -&gt;directories() -&gt;depth(0) -&gt;sortByType()-&gt;getIterator(), CachingIterator::FULL_CACHE); echo count($files) . PHP_EOL; foreach ($files as $file) { } echo count($files) . PHP_EOL; mkdir("searchdir/abcdef"); echo count($files) . PHP_EOL; will output 0 5000 5000 
At your convenience; I appreciate your thoughtful critique. Also, if you have suggestions for specific rewording or clarification, I'm interested to hear them.
NearlyFreeSpeech.net is a good one.
You don't need bash to use .env. It's just a text file.
If we assume events as a given, it sounds like the difference is: 1. Investigate events within the end of the `CommandFoo` handler, surveying them to construct a fixed corresponding result-type e.g. `FooResults`. 2. Just return the events upwards, and let the controller/UI layer survey them, to decide what the user should be shown. I prefer #2 because the domain doesn't make any judgments about what events a particular UI or work-style might happen to care about or need to organize in a particular way.
Nothing a little `extract()` can't fix, though then you lose the golf.
We use [Vars](https://github.com/m1/Vars) in production for a couple of sites, it's pretty handy, has a nice cache system and it's [flag options](https://github.com/m1/Vars#flag-options) for importing are pretty cool, use the if else flag for dev/prod configs and it works well. Also its [variables](https://github.com/m1/Vars#variables) stuff is so useful, haven't seen any other config loader provide something like that. The only downside is that laravel is tightly coupled to [vlucas/phpdotenv](http://github.com/vlucas/phpdotenv) which is shame as we didn't want to use it for our config loader so we had to build our own provider as vars only supports silex at the moment,
You can also try the Config loader from PHPixie. It doesn't advertise itself as a separate component (sine I didn't think anyoone would be interested) but is fairy simple to use: $slice = new \PHPixie\Slice(); //dependency $configFactory = new \PHPixie\Config($slice); Then you can have either an array loader, file loader, or directory loader (the one PHPixie framework uses) $config = $configFactory-&gt;directory('/some/directory/', 'config'); Using a directory loader is cool because you can specify config values in different places. Let's say you want to store *amazon.api.token* in config. You can either: // in /some/directory/config.php return [ 'amazon' =&gt; [ 'api' =&gt; [ 'token' =&gt; 'foo' ] ] ]; or: // in /some/directory/config/amazon.php return [ 'api' =&gt; [ 'token' =&gt; 'foo' ] ]; etc. Working with it is also super simple (and actually the underlying Slice library works great on it's own with arrays) $token = $config-&gt;get('amazon.api.token'); // null if missing $token = $config-&gt;getRequired('amazon.api.token'); // exception if missing Slicing is the most important feature of the library. Since it allows you to skip long prefixes: $slice = $config-&gt;slice('amazon.api'); $token = $slice-&gt;get('token'); http://packagist.org/packages/phpixie/config
Yes please
Well, the ??= would be consistent with the normal null coalescence operator, just like with += and all that. ||= would make me think of boolean or.
Did you do your homework? Did you read about functions with side effects like I asked you to? Because if not I don't see why you are posting about this. &gt; Just because you don't understand generators doesn't mean they are a bad feature. When did I say they were a bad feature? I said they were a great feature, but they are being used incorrectly here. Treating a generator as an array is simply incorrect. It is not an array, it has a different purpose. &gt; And you're wrong about memory. Generators do save memory - not necessarily in all situations, but in general they do. No, in general they do not. They have great uses. Saving memory is not one of them. And in *this* situation they do not save any memory at all. They only reason (that I can see) that you want to use a generator as an array is to save memory. That is a really really bad reason to use one. It adds complexity, it's slower, it doesn't actually save any memory, it's harder to understand, you end up with tricky code that is hard to modify. It's all downside, with absolutely no upside. I really don't understand why you are still arguing this. You are wrong. Accept it. Learn from it, and move on. Don't keep burying yourself in deeper - you will not become a good programmer that way.
Someone should edit that RFC because it has internally contradicting statements that are due to simple typos. Before the code sample: &gt; If the value is not null, nothing is made. After the code sample: &gt; The value of the right parameter is copied to the left parameter, if the left hand parameter is not null. It should say that the value is copied if the left hand parameter *is null*, otherwise this would be a dangerous and perhaps useless operator indeed. But yes, I would love to have this.
Yeah, `||=` would actually be a good addition for an empty-coalesce instead of null-coalesce.
https://www.nearlyfreespeech.net/ - that's at least one shared host that has it. Great hosting company, I use them for some static pages (costs like $0.25/year). It's not listed on phpversions.info, maybe because it's still beta. You also have ssh access and can compile PHP 7 yourself, or even Ruby or Python or whatever you want and run your own server almost like a VPS.
 This is as small as I could get yours: 53 chars &lt;form&gt;&lt;input name=0&lt;?=`echo '&lt;p&gt;'$_GET[0]&gt;&gt;m;cat m`; * Named the input 0 so it can be accessed numerically meaning the curly braces around `$_GET` and the quotes around the key are not necessary, and won't throw an undefined constant error. * Removed the quotes around the name attribute of the input. * Moved the `'&lt;p&gt;'` to in front of the get value in the cmd call to not have the open input tag eat the first "chat". The input becomes `&lt;input name=0&lt;p&gt;` meaning the first `p` is eaten by the html, but not the chat text. * Removed the space from after the short open/echo tag as it is not needed. Tested and aside from the notice error when loading with no initial query string, it works without problems.
Not even just empty-coalesce imo. It could be consistent with the || operator, assigning the right hand value always if the left value evaluates to false.
I'm totally fine with that. Cashier is one of the many reasons to use Laravel. Braintree support is godsent. Can't wait to use this in production.
Yeah being able to easily support PayPal subscriptions is definitely nice for global markets. Glad you like it!
Is there a CS fixer for blade templates?
I've always wondered why anyone would use array_key_exists() instead of isset(), since it's more of a pain to use, and can't be used on ArrayObject/ArrayAccess instances. Different strokes, I guess. Although, in your proposed method, you would end up setting $username to null if $_GET['user'] was set as such. To make it equivalent, you would need to make it: $username = (array_key_exists('user', $_GET) and !is_null($_GET['user'])) ? $_GET['user'] : 'nobody'; Unless you're going to actually do something different when the key isn't set and when it's set to null (don't think I have ever needed to care), would you really still not rather have, instead: $username = $_GET['user'] ?? 'nobody';
Fortrabbit is supporting PHP7 and also a really cool configurable host for small and lange php applications. https://www.fortrabbit.com/php7-hosting
I wrote a small package blast package with php and json loaders, and also delivering puli and container https://github.com/phpthinktank/blast-config But vars has more loaders. Dotenv is also a cool library for load environment specific configuration.
&gt; the value is copied if the left hand parameter is null I updated it. Thanks.
 class Promise { protected $promise; protected $name; public function __construct($name, $closure) { $this-&gt;promise = $closure; $this-&gt;name = $name; } public function promise() { return $this-&gt;promise(); //execute the closure passed in from the constructor. } public function name() { return $this-&gt;name; } } class Foo { protected $promises = []; protected $requirements = []; public function __construct($promises = []) { $this-&gt;promises = $promises; } public function addRequirement($name) { $this-&gt;requirements = $name; } public function meetsRequirements() { foreach($this-&gt;promises as $p) { //check your list of promises here to see if it meets the requirements, ie, in $this-&gt;requirements } } public function deliver() { //do whatever you need to do with the promises. } } Usage: $promiseA = new Promise('bar', function() { //something here }); $promiseB = new Promise('baz', function() { //something here }); $foo = new Foo([$promiseA, $promiseB]); $foo-&gt;addRequirement('bar'); $foo-&gt;addRequirement('baz'); if($foo-&gt;meetsRequirements()) { $foo-&gt;deliver(); }
MediaTemple confirmed to me recently that all new Grid accounts get access to 5.6 / 7 Also, they boast PHP 7 with FastCGI on their Grid Description. **[reference](https://mediatemple.net/webhosting/shared/)**
"I like to write verbose code because it gives me illusion of safety." Code should be as short and concise as possible. It's no different from assigning default values to parameters.
I agree 100%. To go ||= would just be inconsistent with what we already have.
I like having //= and ||= from Perl. IIRC, the latter's the same in both.
the right answer is.... YEEES
&gt; You are already accessing $_GET['user'] here in the isset() call No, you are not! isset is NOT a function call, it is a language construct. It does NOT access `$_GET['user']`, it checks if `$_GET['user']` exists. Since it never access `$_GET['user']` there is no reason for `E_NOTICE` and the rest of your post is subsequently completely wrong.
(based on the code rather than your statements) I think the pattern you are looking for is the proxy pattern. Proxy pattern lets you make calls on a proxy that can delegate the call to the real subject. PatternCraft has a great video tutorial on it https://www.youtube.com/watch?v=WcAV9rOGjxw Here is how I would refactor your code based on the pattern: interface FooInterface { public function setBar(); public function setBaz(); } class Foo implements FooInterface { public function setBar(); public function setBaz(); } class FooProxy implements FooInterface { public function setBar($barValue) { /* save bar value */ } public function setBaz($bazValue) { /* save baz value */ } public function apply(Foo $foo) { $foo-&gt;setBar(/* saved bar value */); $foo-&gt;setBaz(/* saved baz value */); } } $proxy = new FooProxy(); $proxy-&gt;setBar('barvalue'); $proxy-&gt;setBaz('bazvalue'); $foo = new Foo(); $proxy-&gt;apply($foo);
Never used `??` before (didn’t even know it exists), but … $uid = $this-&gt;request-&gt;data['comments']['user_id']; $uid = $uid ?? 'value'; … would work for me I guess. And then do whatever you want with `$uid`;
A 10$ VPS serving thousands of hits a minute with a PHP app...? What is the stack?
I'd like to love CakePHP, but when they didn't even give me credit in the release notes for identifying [vulnerabilities in their crypto library](https://github.com/cakephp/cakephp/issues/6139) (after [they fixed them](https://github.com/cakephp/cakephp/releases/tag/3.0.1)) it kind of soured the relationship. I really hope most other security folks don't have similar stories. (Haven't asked any.)
Vagrant has [a number of providers](https://www.vagrantup.com/docs/providers/) other than VirtualBox, several of which are noted to provide better performance.
Since we're all showing off our "Config" packages, here's mine: https://github.com/hassankhan/config/
Use NFS and the bindfs plugin. Seems to work well for me on OS X.
Use Vagrant next time. Don't mess with OS X local config unless you go 100% through homebrew which installs things cleanly.
That's nice, I was affraid PayPal support would be exclusive to Spark.
Cloudways is also providing [PHP 7 hosting](http://www.cloudways.com/blog/turbocharge-your-cloud-based-application-with-php-7/). Signup for free trial and you can switch your server to PHP 7 from Server Management tab -&gt; Packages.
That is a nice list, but happens to not include all the hosting providers that support PHP 7. Cloudways is one of the managed cloud hosting provider that announced that they support PHP 7. They have also included the benchmarks of WordPress, Drupal, Laravel and PHP that you can check it out here: http://www.cloudways.com/blog/turbocharge-your-cloud-based-application-with-php-7/ A provider like Cloudways is impressive, they let you launch Cloud servers of DigitalOcean, AWS EC2, GCE and Vultr and all those servers are optimized. With PHP 7 their stack is Debian 8, Nginx, Varnish, Apache, Memcached, MySQL, PHP 7. That is a solid stack IMHO. 
The server side libraries are pretty bad, outdated, sometimes they don't work on newer version of PHP and the graph variety is small, of course this depends on your needs. I made the mistake to use JpGraph 4 years ago, I had to patch the library, even if we bought a license, no support (seems dead now). There is pCharts but never used it as they lacked some charts I needed (hence the JpGraph choice). I think you will be better to implement that on the client side and just the get data required using your web service. Google charts works fine on mobile devices, the API is simple. I have heard good things about Telerik and they provide a library for Android but entry fee is expensive ($500 USD).
I use d3 quite a bit. However it is client side. You may be able to use it to generate static SVG files using NodeJS, or render the output using something phantomJS or wkhtmltoimage. 
I'd go with option 1. If I was looking at your code/class in the third person I'd expect the sendThatMail() function to do as the name suggests. If you subscribe to the "separations of concerns" principle, the logic that determines whether or not to actually send based on a user's preference should be decoupled from the code that actually sends the mail. Also, you can easily force the mail to send: &lt;?php $forceSend = true; function isMailEnabled() { // Logic here to determine whether or not the user allows sending return false; } if (isMailEnabled() || $forceSend) { // If $forceSend is true, this will still be called sendThatMail(); } 
If it's a global flag, I'd put it within the mailer function/class.
I would follow Martin Fowler's TellDontAsk http://martinfowler.com/bliki/TellDontAsk.html and go for second option.
Hie, thanks a lot for your reply. We tried to use pChart but the issue we are facing is, It is not allowing us to display a table below it with detailed info. We were looking at reportico now. Do you have any experience with that? 
Do you use case-sensitive filesystem?
Thank you so much, I corrected it. 
Google visualisation stuff is pretty good, though you need to write your own stuff for manipulating individual series, if you are just showing data and nothing else, its super duper easy.
it should TRY to send an email and return an error if it could not. Things from "invalid" email address to "permission denied". If you forget error handling and leave room for code that will just stop when someone tries to send an email, then you have a harder time maintaining the app in the end 
Can you create them client side? I love highcharts.js 
You can also render Highcharts on the server side, check [documentation](http://www.highcharts.com/docs/export-module/render-charts-serverside). 
The whole list of framework integrations for those interested: http://php-di.org/#integrations
Yeah, the description is unclear, but if you NEED some variables or the object is in an invalid state, just make them required arguments directly in the constructor.
Ha! Never saw that. I love PhantomJS. So good for scraping.
There is this temporary community patch from migrs https://gist.github.com/migrs/716cf7218e6953ee1789 From the forum https://discuss.newrelic.com/t/php-agent-breaks-laravel-5-2/32801
Does the Symfony 2 bridge work with Symfony 3 as well?
Having been on cakephp 1.3 up until the end of last year, and only just moved to cakephp 2, I can say that in both cases the documentation is amazing and doesn't feel lacking (apart from the rare edge cases that resulted in documentation updates).
Composer currently requires `~2.0` so it wouldn't install. Given the amount of code, I think it should be just a matter of allowing `~2.0|~3.0` (and we'll know pretty quickly thanks to the tests). One thing I realize now is that the package/repository is named "Symfony2" :( It might be worth renaming it to simply "Symfony" too. I'll create a ticket and look into that soon (pull requests welcome too).
That sounds pretty good! I haven't looked too much into PHP-DI yet, but it looks very nice from what I'm seeing, my biggest question would be A) Is it possible to have a laravel like Service Container (which automatically injects concrete dependencies) for Symfony using PHP-DI?
The solution there is to stop using such a crap host and go with a respected hosting company.
I did [this](http://danielpetersen.ca/chart.php) with google graphs. It's javascript and pretty easy to pick up.
cake vs symfony vs laravel vs yii vs falcon vs code igniter ... 
Wow, great userland polyfill idea.
[removed]
what you could do is have three objects 1. Client code / business process that calls Biz Email Factory / Service (no ifIsMailEnabled, just Service-&gt;sendEmailForBizProcess()) 2. Biz Email Factory Service can do if () checks and all the convoluted environment checks, construct transports 3. Low level email wrapper (this can control transport mechansim, or even NullEmailTransport)
Ocramius voted in favor of it.
Does anyone have a ballpark estimate on how efficient laravel is when handling multiple requests? As in, let's say 15 different clients hit the same app but the server has limited the number of child processes that can be spawned to 3n (n&lt;=5)
From the website description: &gt; Reddit is an entertainment, social news networking service
MFW people are still using FTP to deploy ( ͡° ͜ʖ ͡°)
This is exactly what i do. I once had to upload a laravel installation and the client was right up on my ass. Then this method sort of clicked to me.Thank you for sharing.
I've seen the opposite -- people eschewing `public` completely because it's longer than `var`. Yes, even in modern and new PHP code. It's an outlier, [as clearly indicated in this RFC's usage research results](https://wiki.php.net/rfc/var_deprecation#low_usage), but it's non-zero and there will be a few vocal opponents.
Not so sure about this. On one hand I see it as a code-smell and, personally, very rarely see it anymore. So for general standards I see it as a positive step. But introducing a fundamental change to the syntax - which removing a method of declaring a variable surely is - when there's no clear benefit does controversial to say the least. FWIW one of my biggest gripes with PHP has been that for all the cool new functionality (I think PHP7 was a brilliant release for example) there's definite reluctance towards breaking changes. I'm not so sure if this is a good example of where breaking old code is a positive step forwards. 
Have you ever played the *"Lets grep this codebase for rude words."* game? 
The "pain" in this case would be doing a search and replace of "var" with "public". New PHP versions do introduce breaking changes, and this one would be a relatively easy fix. The common criticism of PHP is that it has lots of old cruft and inconsistencies it evolved over such a long period of time. Personally I support continuing to clean up the language, even when it sometimes means breaking changes. For people who don't want to or can't modify their code to work with new versions can stick with older versions.
You're welcome, do you also use lsdiff or other similar tools to get the filenames for the files that changed?
I came from a C background long ago, and I used to prefer everything be as concise as possible. But I eventually made a mental shift to preferring code that is more descriptive and readable, even if that means a little more typing. That includes things like naming methods with long and clear names (using "capitalizeSubtitles()" instead of "capSubs()", etc.). "Public" is a more precise and specific keyword, even if it takes a few more keystrokes. 
I had no idea var was even still part of the spec, I assumed that was deprecated since 5.0.0
Maybe just update this note about var with a wording that var is discouraged and MAY be deprecated in the future? http://php.net/manual/en/language.oop5.properties.php
I use it because I keep speling public pubic :)
&gt; Find and replace is great if you only use your own code, but a lot of people use libraries. Do you really want to patch them yourself? Oh pish. Just make an autoloader that, instead of includes, gets the contents of the file, replaces `var` with `public`, then `eval()` the result. So simple.
i have not, but i am going to right now...
Woooosh
how is it an 'alias' but also has different functionality?
YOU'RE HIRED
I'd vote yes. `var` is essentially "PHP4 style public" and since PHP7 already removed "PHP4 style constructors" (eg. `className` methods)... it just seems fitting. Like it's finishing the job that PHP7.0 started. I mean, if you're using these PHP4 style public's then my guess would be you're using PHP4 style constructors, as well, and if so then your code wouldn't work without producing E_DEPRECATED warnings on PHP7 as is. This RFC is just a continuation of that.
But the actual .env file itself is simply a text file. That's all I meant.
The official [Silex Skeleton app](https://github.com/silexphp/Silex-Skeleton) has an example of code layout. I feel like it's a little too bare bones, though, and it doesn't include example files. I have a [Silex skeleton app](https://github.com/dlancea/silex-yeoman-angular-skeleton) myself which might be useful. It likely includes things you don't need, but pay attention to the app/ and src/ directories. &gt; Conroller: What should the controller contain in Silex? Is form validation or sending emails ok? [See these examples](https://github.com/dlancea/silex-yeoman-angular-skeleton/tree/master/src/Controller). In general, yes, they should act as the go-between between data to ad from the user (form submissions and page rendering) and the logic of the app (the service layer). &gt;Service Provider A service, I'd say, should not get passed the Application object. They should be standalone libraries, as much as possible, and contain your application logic as much as possible. &gt;Entities: I have no entities That might be fine. If you app is simple enough, you can probably get away without this layer. If you're just starting out you might want to consider the full Symfony framework. The documentation and tutorials are better at getting you started with these concepts. Silex assumes a lot of pre-existing knowledge.
Anti-fluent-interface Nazism.
It's look great, i will order now. Many thanks for your hint
Well to be fair he is asking about the opinion of users, not developers. So I won't be hijacking this one I guess))
If others are correct when they say most var usage is PHP 4 code then there isn't an autoloader in use anyway.
[Meanwhile in Java they are adding `var` as a keyword](http://openjdk.java.net/jeps/286). It's functionally unrelated to this deprecation, but it seemed funny to me that we are deprecating the word and they are trying to add it.
I should name my fluent API detector tool like that!
Having PHP installed is useful for tools like Composer, PHP CS Fixer, and other PHP applications that can run globally on your host machine.
Uniformity and clarity? If you boil it down to its purest form, there's nothing really technically wrong. It's just an idiosyncrasy that you can overcome. But that's not how people work. My argument is that these seemingly little fixes and tweaks make up a big change over time and to leave it alone is death by a thousand paper cuts.
`public` can be used for normal class variables, static ones, and even constants (in 7.1). `var` can only be used for normal class variables. When this happens, it acts as an alias for `public`. So in all cases where `var` is allowed, it acts identically to `public`.
I'm a big advocate for backwards compatibility breaks when they give solid benefits. There is no major benefit here, so I'm against it. Here's a BC break that would be huge that I would still be in favor of: merge the symbol tables. Namespaces, functions, classes (and class likes) and constants can each have the same name. By removing them we can have a host of benefits like autoloading for all types (not just classes), symbol literals instead of stringly typed names, etc. But this `var` deprecation? This has approximately no benefit and will break code. Even if it is easy to fix there is still no gain.
So much this. Optimizing for writing speed over reading speed is an incredibly junior mistake, and tends to indicate the programmer hasn't spent any time with a large codebase or worked on the same project for very long. Plus every editor with syntax highlighting supports at least some form of autocomplete, negating the keystroke argument.
&gt; You got the break eggs to make an omelet and this barley cracks the shell. I spent way too long trying to think of a food-connection between eggs and barley.
I think you are grossly underestimating the power of the little details and the overall consistency of a language. It's a minor change, if you're still using var you have many years to fix it before 7.x becomes defunct. If you're too lazy to fix it during that period well, then I'm glad I don't work with you.
I have been allotted the task of upgrading PHP at my workplace. We are currently on v5.4 and higher-ups want to be up to date as this version isn't supported anymore. It's more of a security oriented decision rather than functionality based. Should we go to v5.6 or v7.0 from a security point of view? Any input is appreciated!
Ha, typing on the phone. To be honest my spelling is terrible regardless but I'll blame it on the phone to save face.
This frankly is a fix that can be achieved through code standards much easier than by introducing a backwards incompatible change. Should you use var any more? No. Should 'old' scripts that run on modern (5.3+) PHP necessarily be broken purely by removing an alias to turn use of var into public? I'm not convinced. Removing the alias just seems to break more than it fixes to me. A deprecation notice and keeping the silent alias should probably be adequate enough. But, I wouldn't vote against it. I'm just not fully convinced there's a significant enough gain to be made to vote for it either.
thank you
But it's E_DEPRECATED. Surely that sends a clear signal that "hey, this isn't the way we do things any more" unless they're the sort of person who ignores warnings which, well, quite frankly I don't care about those people.
Why is it horrible? It's as cut and dry as it could be.
I guess I don't see what's wrong. Is there a question about the syntax that you don't understand? Or do you have a question about abstract classes that it doesn't answer? The example #1 is a bit more fleshed out too: http://php.net/manual/en/language.oop5.abstract.php
I could have sworn it was deprecated already, also.
That signal doesn't really matter to a script that, for years, fulfils its purpose and otherwise conforms to standards and current, safe standard library features. It should encourage an update to that script, but it definitely shouldn't break it purely off the back of it using 'var' instead of 'public'. But, like I said, I wouldn't vote against it on that basis - in theory the amount of time until PHP 8 would be long enough that it probably wouldn't even matter - but at the same time it seems like there's little true benefit to removing the alias that isn't simply dealt with by modern code standards excluding its use, so I don't really see any reason to actually support it either. This isn't like removing the mysql() functions - old code using 'var' is no more vulnerable than old code using 'public'. Just 'cos you shouldn't use it any more, doesn't necessarily mean it's worth breaking otherwise functional and compliant code over it. 
This particular issue is not so important, but there are plenty of other issues with PHP that are being held up due to backwards compatibility. Unfortunately any attempts at fixing old stupid decisions are at least 5-10 years away, which is really sad and frustrating. I think PHP needs to go the Python route: maintain two versions - one to rip out BC and actually move the language forward, and one to appease the penny-pinchers who can't update their decade old storefront. 
You're forgetting that it's not just old code that uses it. It doesn't matter how long you say "it's not good", you have to guide people away from it. You have to create a language that is elegant and cohesive and has one correct way of doing simple things like declaring an instance variable. "You should" is best left for user libraries, not keywords of the language itself.
It's fine in its simplicity, I think. It's there as a reference, not as a teaching tool. There are generally better resources for learning elsewhere.
http://www.w3schools.com/ is where i started.
&gt; They removed the PHP4 class constructor syntax No, it only deprecated it.
Personally I found working with AuraPHP to be nothing but joy. Author /u/pmjones is exceptional at writing simple, intuitive, and clean/beautiful code and I've learned tons from him as well as from the code.
surely they do. and they can multiply their capital a few times without much moral issues even... But when someone multiplies the initial investment 2-3 times, it becomes a case of making others work and taking the profits after that point. Nothing different than feudal aristocracy - which, a lot of corporate dynasties have become. 
Well there are multiple ways to actually make this more readable. If the function is part of a class, you might define 3 functions: private function _sendThatMail($force); public function sendThatMail(){ $this-&gt;_sendThatMail(false); } public function forceSendThatMail(){ $this-&gt;_sendThatMail(true); } Another solution would be to use constants as flags. So you would have something like: public function sendThatMail($forceFlag); // client code: sendThatMail(MailFlags::FORCE_SEND); Of course, it depends a lot of the use case, and where the function is located;
" stringByAppendingString[string: string]" is clear in what it does?
I agree with those two solutions if dependency injection is not available in the environment. 
Hit them within what timeframe? The exact same millisecond? 
Note that the title on the RFC itself is currently wrong, as it's "Heavily cribbed from Midori Kocak" who wrote the Null Coalesce Equal Operator RFC
Fair enough, but that doesn't change the argument for deprecating other obsolete functionality. 
&gt;&gt; Meanwhile in Java they are adding var as a keyword. [troll] Oh.. for what.. as an alias for *public* in there too.. [/troll] Edit: Added [troll] tags.
Composer is only really useful in the context of development, and so should be in your development environment. Other global utilities, sure (like how I install [httpie](https://github.com/jkbrzt/httpie) globally), but you shouldn't need multiple separate PHP versions for those; just use the one provided by your package manager.
FYI: They have provided a *stats* section in the rfc..
Well, a timeframe of one second. 
Nah, it's not an alias for `public`. It's like C#'s `var` - you can use it to declare local variables with inferred types.
https://en.wikipedia.org/wiki/Humour
No matter what you quote, your buyer will likely try to negotiate down and pay less than they need to. Echoing /u/meadsteve, you should aim high and prepare to haggle with them. I've found that negotiating a very specific number will make the buyer negotiate down far less initialy. Let's say, for instance, you quote $5000 for the time it took you to write that code. Your buyer will likely try and tell you that your code is worth about $3000 to them. Not exactly chump change, but still $2000 less than what you would want. Now if you instead quote something very specific, say $5270, a couple of things might happen. Your buyer will likely become very curious (if they haven't already) about how you arrived at that exact amount (let's say 40 hours at $100/hr with a 30% markup and a $70 installation service fee) and negotiate from there *based on the value of your time*. This is ideal, as you're no longer trying to justify how they should value of a specific piece of code, which is much harder to attach a dollar amount to and therefore harder to keep the ball in your court. You can't tell them how much your code is worth to them. But you can tell them how much your time is worth, and that's how your pricing should be negotiated. If they don't become curious, then they'll likely try to "round out" the value down to a flat $5000, or shoot for around $4500. Even on the lower end, that still puts us in much better shape than the previous scenario. Granted, I'm pulling these numbers out of thin air, but in every negotiation I've ever been through, I've found that making buyers deal with very specific numbers ends up causing them to either round down more conservatively, or be more willing to negotiate on your terms. It's weird, but it's worked for me on numerous occasions.
This helps me a lot and like the idea with Email events with JSON config. I will try to implement this
At what point do you recognize that you're intentionally making the code less readable? The short ternary operator is a travesty, when a function is far more appropriate than omitting/hiding the side effect. This just makes it worse.
Well, it's more like ideally you make a temporary class for sendThatMail and instantiate it with the DIC. $container-&gt;add("sendmail", SendMail::Class)-&gt;withArguments(["mailer.default", "templateClassOrTemplateEngine", "fromConfigArrayOrDataObject"])-&gt;callMethod("setLogger", ["logger"]); Right now you use the $container-&gt;get("sendmail") to get the sendmail class. In the future when you start using DI you just pass a mailer.... to the constructor of service, model or serviceprovider class which handles that service/model. 
Yep, that's why I didn't revive it ... What we really need is to promote namespaces to a real feature, rather than a compiler hack ... not quite first class (as classes aren't), but we need to retain useful namespace information at runtime in order to implement namespace level accessibility controls in a reasonable way. Right now, the namespace is just hacked together as part of the class name ... it's truly awful. It's something I'll revive soon, if nobody else does it first ...
[removed]
This is very interesting approach, but what if your method is mutating state somewhere else in the system? In legacy code there is hell lot of side effects. (updated: this part is already covered in article... just missed it). Anyway, this could be a good addition to test suite!
&gt; sendThatMail(true); That can get ugly, but my way of "fixing" that is creating a descriptive variable as param, while calling a function (if it's not defined already): sendThatMail($forceSend = true); It's a bit of overhead because the var isn't used anywhere else, but I guess I won't burn in hell for that.
&gt; PissOff::wanker This was written by a British person right? We need to i8n the insults :-p
The main thing I notice is that he's doing it on a tablet/phone...
how about move it to be part of strict_types and have something like: var $name: string = "joe"; send a warning if a variable is used but not declared?
I don't like the concept of `falsy` I'd rather just use: $x = $x ?? $y;
i suggest make a project without framework, then redo it with a framework. Redoing will surely be demotivating and a pain, but you will get incredible amount of insights
Take a look at these ervice providers, they helped me understand them when I was trying to work them out; [Twig](https://github.com/silexphp/Silex-Providers/blob/master/TwigServiceProvider.php), [Doctrine](https://github.com/silexphp/Silex-Providers/blob/master/DoctrineServiceProvider.php) and a service provider for a [config loader library](https://github.com/m1/Vars/blob/master/src/Provider/Silex/VarsServiceProvider.php) You can find loads more examples at https://github.com/silexphp/Silex-Providers and https://github.com/silexphp/Silex/wiki/Third-Party-ServiceProviders 
Would you not say that it short ternary is useful for setting default values? That is where we most often use it. function name(array $params = []) { $this-&gt;var = $params['var'] ?: 'default'; } 
Do you have any records in your table? And which extension do you use for the interaction, mysqli or PDO?
You need to fetch the data from the query using mysqli_fetch_assoc(). &lt;?php $conn = // mysqli connection $query = mysqli_query($conn, "select * from table"); $data = []; while ($row = mysqli_fetch_assoc($query)) { $data[] = $row; } return json_encode($data);
`brew install php70-xdebug` works quite well too. Having to install PEAR is something I try to avoid.
I'm worried that we're going to have several difficult to discern question mark operators with similar but different behaviors. I like all of these ideas in general, but I don't think it's leading us toward more legible code. It's leading us toward Perl. 
&gt; Having to install PEAR is something I try to avoid Out of interest why is this? I try to stick with installation methods that work across different platforms as I use many different OS'es at home and work.
I'm fairly sure that almost half of the world population is composed of this demographic: could add i18n for the other half...
Get good with mysql. and get good with getting simplified queries instead of a mess
Off-hand, this feels like a loaded question. A lot of the really hacky "necesities" in PHP aren't really necessary anymore. There is some stuff that is "need to know" or that is quirky, but I can't think of anything too much that's too "hacky" anymore in php 7
After reading recent questions on Stack Overflow 1. reading error messages 2. comprehending error messages 3. trusting error messages 4. googling for error messages
Nice story :)
yes understanding the code is hardest part.
Use postgres instead of mysql. Best php hack ever. Get to know postgres' json(b) data type over mongo. Best mongo hack ever.
Haven't used it and am probably not going to. The only projects involving mysql are legacy on their way out. Pg's jsonb is amazing and getting better with every version.
&gt; people eschewing public completely because it's longer than var Isn't nothing at all even shorter than var? A property is automatically public unless you tell the class that it isn't.
Can you give me some example?
Yes, but why should the change be required at all?
&gt; So why is anything removed? There was no great need to remove PHP4 constructors, or even mysql. No, both had good cases for removal: * PHP 4 constructors prevent you having a class with a method of the same name (which you receive no warning about), and make it unclear what is happening compared to __construct * mysql did not support modern MySQL features, in particular a lack of prepared statements, arguably a security issue There's no such case for `var`. It's a harmless alias.
I love Cake, the Cake community and everything using Cake have taught me. I dont think i would be a php developer today if i didnt had that one project with CakePHP . 
Ruby developers would disagree. x ||= y is so widely used, I can't think of a world without it.
&gt; Yes and said vocal opponents are everything that's wrong with PHP. Backwards-compatibility is literally all an existing language has. An aversion to breaking it is important, change too much and you essentially fork the language (see Python 2/3). &gt; I really despise that mantra of "it might possibly break some persons app". PHP is pretty good at not breaking BC Because of that mantra. &gt; individuals still using var will have at the very least 5 years to search and replace a single keyword. So would people affected by other changes, but it doesn't justify them. &gt; rejecting this RFC just seems like timidity for no real good reason. But there's no strong case for removing the keyword! We have no good reason to *accept* it. And so, to apply reasonable caution, we must reject it. We can't accept every BC break simply because something is old. Breaking existing code requires a higher standard.
&gt; Uniformity and clarity? This would only be achieved in a very, very long time, because `var` would still have to remain in people's minds for however long it is still supported, and legacy code bases will continue to exist.
&gt; I think PHP needs to go the Python route: maintain two versions It's not like the Python 2/3 thing was disastrous. Oh, wait. 
"In my opinion" was how you should of ended this... 
&gt; How I use this? FFS lol....
Modulus was an eye opener for me, it returns the remainder of division. 
`$str{2}` has some usefulness in disambiguating string offset lookup to array indexing. That's one point against its removal.
I wouldn't use it just because Oracle. If not postgres, MariaDb or Aurora.
I fucking love Symfony/Console.
It's probably the easiest and cleanest way to create a nice input, support multiple commands and have a nice formatted output. I do notice that it has some trouble detecting that certain console programs can accept nicer formatting, but that doesn't appear to be Symfony's fault
Or just use `(bool)` casting. Easier to understand.
"Huge safety risk" is an overstatement, but it can certainly be argued that `var` is riskier than `public`. The `public` keyword is clear about what it does--it makes a class variable public. `var` does this too, but the name doesn't tell you that. It doesn't tell you the developer's intentions, and is likely a code smell. Now it could be argued that most people who use `var` in PHP in 2016 probably know that it makes the variables public, but why keep it around when there's a more clearly-named and widely used keyword already in existence?
&gt; change too much and you essentially fork the language And yet you accuse me of overstating the positive impact of this change. &gt; We have no good reason to accept it. I've already stated my reasons and you rejected them in your other comments. That's fine but I haven't changed my position, I still think it's important to discard old cruft over time and aim to achieve a coherent design.
I will look into that thanks. 
&gt; Isn't that an argument for voting no then? No. I think you misunderstand my motive here. &gt; What are you gonna smell when people search and replace var for public to get rid of a deprecation message in old code bases? Every other hidden smell would still be there. I have a mental heap of security code smells. &gt; If you now say it won't matter to how thoroughly you'll review old code then that's not an argument for voting yes either. This will break smelly code, forcing them to revisit parts of the code that have been collecting dust for ages. With any luck, that will lead to teams identifying vulnerabilities without needing me to be personally involved in the process. Win-win.
&gt; We can't accept every BC break simply because something is old. Unless we're getting rid of an extension bound to abandonware. ;) 
I'm the first to download it ;-) I quite like it! Out of the thousands of people inventing their own framework you've at least used some clean components and combined them in a nice way. If you'd also show how to use https://github.com/thephpleague/plates it would be pretty complete!
Probably pretty simple/common for most but it just clicked with me. Instead of public function compareThatJazz($a, $b) { if ($a &gt; $b) { return true; } return false; } I simplify it public function compareThatJazz($a, $b) { return ($a &gt; b); } Um, some other "hacks" - things that changed the way I write code - would be Traits.
Using `list()` is fine. You should absolutely not use `compact()` or `extract()`. There is basically only one place where it's okay to use the latter (your templating library) and I have yet to see an acceptable use of the former.
I think I've been asked to solve it once? But it was excusable, because there was a more interesting part of the test next. I just assumed that everyone would have at least looked up FizzBuzz, since we've all heard about it even though few of us have ever encountered it
you want to elaborate on why?
How was it disastrous? Anybody who wanted to keep using Python2 could do so, and anyone who was starting new projects could use Python3. That's really the only way to make the necessary core changes and still have BC.
Solve it for me, please &lt;3
I think depends on your application needs. In the application i work on we have different mail transports depending on the type of email (marketing, transactional)...using Amazon SES or just regular smtp on the server or even something like mandrill - this setup makes it easier to change depending on the use case of the email. Also easy to add logging via decorators. I agree though that an "if" statement is fine for most cases.
Um, can you post a little bit of context? What "list" were you on? What are they blocking you from?
I remember a story from a few years ago. A work mate of mine was rushed to finish a project full of legacy code. His job was to add our systems to their very old PHP app and in his credit he managed to do it without (much) breaking. However, there was one error message thrown by their legacy code, from what I remember it was to do with namespacing and their primitive "autoloader" and actually didn't effect anything from working. There was just no way to get ride of this error, the code didn't use exceptions, status codes, nothing. The error was returned the same way as the successful data (plain text) and there was simply no time to refactor even a portion of their legacy app. The solution was, at the 11th hour on a Friday night, to cover the error which traipsed the bottom of the application with a giant white box. The client was ecstatic, no other agency had managed to get rid of that error. I am not too sure where I'm going with this...but I guess the hack here is, cover up your shit code with white divs.
In my laravel based projects it is almost always an object that goes to my views, not arrays
`compact()` is a little too magical. I'd rather read the code and see an array being created and seeing exactly what's being added to that array. With `compact()` too much of that stuff happens undercover. It makes it difficult to understand someone's code 
But 4 will lead you back to Stack Overflow anyway :3
https://github.com/compoterhacker/joomlol
If i was in this position id use ob_start() and preg_replace() to hide the error and maybe log it somewhere else
&gt; forcing them to revisit parts of the code I think everyone will just blindly search and replace everything. Somebody already provided a script to do so: * https://marc.info/?l=php-internals&amp;m=145765070116131&amp;w=2 * https://gist.github.com/colinodell/5fb5e5d474674f294a38
Yep. Looks like this is the definitive answer. Thank you! But why it is null everywhere in the result? Doesn't I supposed to get the number of rows etc. by looking at the result?
If you want the count of the rows, use mysqli_num_rows()
Everytime I see "sarciszewski" above comment my mind automatically goes "Well, I'll learn something really cool today". Keep up the good work.
Sounds reasonable. Thank you for your help!
And thats the best news I've heard from Java in years. I hate writing Java code nowadays due to the excessive local variable type declaration, which I find tedious, redundant and plainly annoying. With type inference, Java programming can be fun again, just like C#. Okay this doesnt put Java on par with C# yet, but at least it will be a lot more comfortable for me to write Java code. 
why not (object) [] ?
there is still time.
I'm a self taught, so to me it wasn't.
Ourgh, geez, nothing worse than passive-aggressive smiley faces, I already couldn't stand IonCube before this and this is not helping. However, what's the full context here? What list are you talking about?
&gt; you may want to consider MariaDB It's the standard in most distributions these days. But TBH once I got started with postgres I've never really seen the point in going back. The differences are really significant IMO. I used mysql since around 1999-2000, when I started with php. When I discovered pg around 2008-9 it was like finally breaking free. It's bee such a pleasure in comparison, it still is. I do have to work a little with mysql/mariadb but I would never ever start a project with it.
&gt; MySQL is fine. &gt; &gt; I like PostgreSQL far better Yes, it's fine, but why choose mysql when you can have Pg?
The [Silly library](https://github.com/mnapoli/silly) is a nice extension to Symfony/Console for quicker setup of console apps.
&gt; No faster than new stdClass, I just did a microbenchmark and found `(object)null` *much* faster than `new stdClass()` or `(object)[]`. Best of three: $ time php -r 'for($i=0;$i&lt;10000000;++$i)$x=new stdClass();' real 0m1.591s user 0m1.511s sys 0m0.032s $ time php -r 'for($i=0;$i&lt;10000000;++$i)$x=(object)null;' real 0m1.150s user 0m1.100s sys 0m0.026s
I like to use this to create a new empty object: $obj = (object)[]; Can also be written as: $obj = (object)array();
but... thats what compact does. That would be like saying a `for` loop is auto-magical (especially with `continue` and `break`), and you should actually write the code out 4 times (IEEE-vetted random number). Unless you mean using compact to strangely access bits of array (`compact('someArray[0]')`) but I dont think that works. First time I came across `compact`, i felt the same way as you. Then I started using it, and it makes things a hell of a lot easier. much less redundancy in the micro-scale.
"Months of development time into code written with mysqli instead of PDO" being a large motivator.
MySQL is not fine. Php is not fine. You shouldn't have to use either of them when you have vastly superior alternatives... For example, MySQL won't let you refer temporary tables multiple times in the same query. This has caused quite a lot of pain for me once. I mean, it is similar to Php. It is in the manual and all, but one does not expect that temporary tables will have a different behaviour than normal tables, other than that they are temporary... But unlike Php, I think the problems with MySQL are somewhat limited, and one can hope that they will be fixed one day..Though I am not going to use it in future, if I can help it... 
[removed]
Psr2 and the other standards. Not exactly hacks but very important. http://www.php-fig.org/psr/psr-2/
that and and "how do I populate select options from mysql (in a loop)"
Of course, we are all bound by our previous actions. I don't see anything wrong with mysql *per se*. For me there are a couple of reason to prefer pg. Firstly it's simply much more pleasant to work with on a daily basis. Spending countless ours with an application you enjoy is much better than spending your time with something that constantly annoys you (just a little). Secondly. I like to push the most stable parts of the application logic into the database, pg's good facilities for stored procedures, CTEs and advanced subqueries helps with that.
To clarify: I'm about to release a large open source project that will, eventually, support MySQL and PostgreSQL. It currently only supports PG because I enjoy working with it better.
Oh yeah. It was the OP that spurred me. But python tho... significant whitespace... nuff said. Anyway i like python, I used to build smaller projects with it some years ago. I would like to get back into it but time doesn't really allow it. Golang is also something I would like to dig into.
You can't hijack it if it's already on your intended course. The comment was kind of dumb and insensitive. I'd like to think it was meant to be playful, but it doesn't read that way.
I meant no faster to type; should have been clearer. Thanks for doing the benchmarks! That's awesome news!
Or Zebra striping rows in a grid.
 &lt;html&gt; &lt;body&gt; &lt;style&gt; li:nth-child(3n), li:nth-child(5n) { list-style: none; } li:nth-child(3n):before { display: inline-block; content: "fizz"; } li:nth-child(5n):after { display: inline-block; content: "buzz"; } &lt;/style&gt; &lt;ol&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/body&gt; &lt;/html&gt;
Um... String...point...break? Wat. 
I am not a fan of Cake but I am a fan of José Lorenzo. He seems like a pretty nice guy. My story seems to be the opposite. I was using CodeIgniter and took on a job with Cake thinking MVC is MVC. I lasted about 7 months before I left and went to MVC3 in dotnet. The irony is after 3 years in dotnet, I went to a startup using PHP that first built their site in Cake, so... now I am back in Cake. Hilarity ensues; the original developer that was fanatic about Cake now refuses to touch PHP and keeps wanting us to switch everything into node micro-services.
Or, short: DRM does **not** work. It only makes it slower, but anyone bored enough (read: College student in summer break, aka me) or determined enough (read: Competitor, or piracy team) will break it. If you can watch it, if you can run it, then you can break it.
Oh, interesting. I had been using cilex before (basically Silex for commands) but development seems to have stalled.
How do you feel with `extract($array, EXTR_IF_EXISTS)`? Given our ongoing lack of named parameters or basically any good way to handle `function($required, array $options = [])`, it seems like a decent way to not make a total mess. e.g. function splitWithDefaults($thing, array $options = []) { $size = 6; $split = ','; extract($options, EXTR_IF_EXISTS); return explode($split, $thing, $size); } (somewhat contrived example, but something to demonstrate it) Granted more often than not, having support for an arbitrary array of options indicates a bad API, but that's not really a language issue.
Worth noting that this only works with string and numeric array values (and will produce unexpected results with duplicate values). But yeah, it's great for your common `[Class::STATUS_CODE =&gt; 'status message']` cases.
I can't remember who said it, but I read somewhere: &gt; Debugging is harder than writing new code. So if you write the cleverest, smartest new code you can, then by definition you are not smart enough to debug it.
Note that "programming modulus" may--depending on the language--differ from what your mathematician-friends (or spreadsheet apps) consider to be "modulus". For `(a%b)`, I think it goes like: a|b|programmer|mathematician --:|--:|--:|--:| 4|3|1|1 3|3|0|0 2|3|2|2 1|3|1|1 0|3|0|0 -1|3|-1|2 -2|3|-2|1 -3|3|0|0 -4|3|-1|2 So one way "reflects" along the zero-boundary and turns negative, while the other just rolls along without caring.
Interesting. I typically use `(object)[]` but may have to switch if it's that much faster.
The Ioncube employee seems to be taking it way too personally. It's as tho he has some personal stake in Ioncube's success. Kinda makes me wonder if Ioncube is a one-man shop and if that was the owner who was responding. Ioncube does have a Jobs page tho and I wouldn't expect one-man shops to have that. But who knows...
I'd really like to see a good comparison between the two. I always hear "pg is better" in the abstract, but never accompanied by any actual facts to back it up. Anything that seems semi-valid falls very much under that "fractal of bad design" article in the sense that it's either an opinion based on outdated and now wrong information, or can be changed in about two seconds and the author just doesn't like the defaults. I've built HA terabyte-scale clusters with mysql before no problem, and never arbitrarily lose data. And on a smaller scale, I upgraded all of my personal stuff to a new DB server in about three minutes without even needing mysqldump just by starting the new server and telling it where the old one was. The longest part was figuring out all the apps pointing to the old one and updating their configs. I don't intend to start a debate but am genuinely curious.
If my friends experiences with PG's JSON type are anything to go by, it's probably more trouble than its worth. Putting non-relational data in a relational database tends to create headaches.
Which is "right"?
Locally, I mean on server (don't want to reveal, which passwords I forbid).
I personally don't enforce any password criteria other than minimum length unless it's a site that requires extremely high security (ie, involving financials/SSNs/etc in which case multi-factor authentication is involved). Any other requirements are usually just displayed as a warning to the user. Why? Have you tried remembering your password or resetting it on a site with the following requirements? 1. Must be at least 8 characters 2. Must contain at least one upper case and one lower case letter 3. Must contain at least one non-alphanumeric letter 4. Must contain at least one numeric letter 5. Must not be a previous password 6. Must not contain a dictionary word 
What, you don't like the following? $a &amp;&amp;= ($c &lt;=&gt; $d) ?: $e; 
IMO most ternary statements are fine as long as you put ? and : each on new lines. Makes it super readable.
Short tips? * Organize your code! * Adhere to coding standards, especially if you work in a team. * Test your shit, often and extensively. Automate some of testing with unit-tests but don't assume it covers everythng. * Log, not just errors messages. But also the trace, variables, params, return values etc. You can always clean log files, replicating bugs is a lot harder without context. * Improve, often you'll think "shit, I've could've done that better". Don't just say it, do it. And if circumstances prevent you, we all have deadlines and pressure to deliver, write it down for later so you do it better next time. Keeping tabs on these "tips" will help you more than any specifics of control structures, native PHP functions or "hacks" you use. 
I think it actually is and you need some kind of service running to decrypt at runtime. Could be completely off though. Regardless, it can't be 100% because it has to be decrypted at some point to execute anyway...
&gt; could not help but LOL First day on the internet kid
Actually, I've been waiting for this to happen, not because it's needed, just so that IDE's can auto doc-block and indicate that nothing is returned, instead of just skipping @return parameter.
When I catch me-in-the-past I'm going to give him the business.
There are lots of comments, so this might have been mentioned: Using closures to access private/protected stuff from within classes you can't control but need to extend/improve/etc.
I notice how users here are quick to cast the person sending the email in a negative light. Why didn't OP provide context with his attempt at a PHP related post. It would be nice to see previous email exchanges before running off to the pitchfork emporium.
I'd prefer not setting **that** specific password rules.
yeah, but not enough to belittle a user through email. Its extremely unprofessional.
Relevant blog post: https://ocramius.github.io/blog/accessing-private-php-class-members-without-reflection/
It's a difficult thing to describe, you should look at the posts in this sub - there are a lot of high-quality discussions about it, which are very interesting. https://www.reddit.com/r/PHP/search?q=pdo+mysqli&amp;sort=new&amp;restrict_sr=on
I'm weird, so maybe don't listen to me, but I use zxcvbn.js client-side and [zxcvbn-php](https://github.com/bjeavons/zxcvbn-php) server-side and enforce a score of 3 or higher.
If you scroll down the original email was a request to be removed from a mailing list. So they "blocked" him from that I gather.
Ioncube is a hassle from an end user standpoint. 
Ternary statements are fine as long as they are simple: $status = $disabled ? 'disabled' : 'enabled';
ah. I thought I'd scrolled down all the way, and I saw that it was about a mailing list, I just thought "blocked" was a weird word to use in this context. I suppose they probably intentionally made the choice to use that word to be dicks about it or something. at any rate, I've always thought php obfuscation was a bit silly all things considered. if you want to protect your source code, at the very least use a compiled language. and on top of that, it would seem to be wise to host as much of the application online as you can, and only give access to the return values of various functions and stuff. clients don't (depending on the app) need access to the source code unless it's supposed to be open source and modifiable
In addition to the PHP-language/source-file type stuff, you'll drastically reduce the pain of new systems with: UTF8 everywhere.† UTC everywhere. Strict mode on your database. Strict mode for your JavaScript. † Except MySQL, where you actually want utf8mb4.
`||=`
Thank you for your input, and I tried doing much of what you mentioned. I gave resources on how REST API's work, tons of examples of all kinds of requests and more. I think what bothers me is that I fear I am coming across as condescending and rigid - I feel like some crazy crusader. Every time we get to some integration task I get grilled about what we can do to circumvent the API. I tell you, it's crazy man! I think I just wanted a sanity check, thanks.
This is one of the shittest arguments put forward every time someone proposes a language change based around the fact that you haven't seen it before and therefore it must be unreadable. Of course it's fucking unreadable if you've never seen it before just like when you look at a language based on entirely different syntax than any language you've ever seen before at first appears completely unreadable. But then you learn the language and suddenly you can read it. Regular expressions are completely unreadable the first time you see them but that doesn't stop them being the most popular way to parse strings for just about any conceivable purpose. Do not use the fact that you personally have never seen new syntax before as a reason to denounce the addition of new syntax to the language. Once you get used to the syntax it won't seem any less readable any more. 
If you're getting paid for it just do it. Notate that you believe it to be an insecure practice, notate that the existing developer is inexperienced (unable to understand and use DELETE, etc) and above all else notate that you're not responsible for **any** beaches of security due to lax security standards that you don't agree with. Done and done.
Doesn't make it right because it's encouraged in one community. Also doesn't make it wrong because a respected internals dev says not to use it; but it's a good hint maybe you should double-check!
Thanks, looks like there is a lot to look at. They look interesting though, as you've said.
Drop the client then. I mean if you are not getting any where. Its no point in hacking up something that is well tested because some idiot client doesn't know how to read the instructions.
&gt; at the very least use a compiled language Well, yeah, except in the real world you build your app in PHP and then some client company mandates that it has to run on their own servers because of "compliance rules" from head office. And you don't have time to learn c++ and also rewrite the whole thing. And then someone says we need to protect the code. And you say that's going to be a pain in the butt and it will make the whole build and deployment system way more complicated and harder to test. But you have to do it anyway, and that's how you end up using IonCube (other obfuscation products are available).
Anyone else use bit-fiddling? I think every programmer in every language should know and understand how to twiddle with bits
Sustained 15 requests per second? So 900 requests per minute? A burst of 15 should be fine, even on a small server. Sustained you might have more trouble. Use jmeter to run a test and find out for yourself. http://jmeter.apache.org/usermanual/build-web-test-plan.html
That's reasonable. A zxcvbn score of 3+ is a little on the conservative side, which makes sense for my internal applications. Also, definitely never let the top 10,000 passwords through.
This is based on [Sc00bzT](https://twitter.com/Sc00bzT)'s work, which was as close as you can get to a constant-time implementation of `bin2hex()`, `base64_encode()`, and their complementary functions in PHP. To truly mitigate side-channel attacks, you need to implement them as C functions and use a compiler that won't betray you. My contribution was base32 encoding, which is mostly unused outside DNSCrypt and Tor Hidden Services, but will hopefully gain popularity.
Do you need to use TLS for the connection between your application and your database if they're running on the same host?
The `chr()` function in PHP is implemented by reading an offset in an interned string table (at least on PHP 7 with opcache).
and by hassle you mean money pit right?
only if you are really paranoid about someone installing wireshark
This is where I PHPStorm highlight and Ctrl+Alt+V *Edit*: And refactor the var names. 
See also: the [splat operator](http://www.lornajane.net/posts/2014/php-5-6-and-the-splat-operator)
That's cool!
Why isn't your repo fort knox? If someone adds some malicious code that exposes some critical data then you can have all the production server security in the world, and it wouldn't do you much good. 
It's basically just increasing the minimum password size. This would prevent the use of the most commonly used passwords with minimal additional overhead. Also, most people who reuse passwords won't have a long enough password. So there is less of a chance that their account will be compromised from a breach originating from another site.
If you don't own the hardware, yes (and even then, I'd still advise it). Don't trust the privacy of any remotely-virtualized network (rackcloud, aws, gcloud, heroku, eyc), because you have no idea what sort of wizardry they're performing that could result in your packets being visible to someone else. Plus if you end up scaling the service, which hopefully you do, that annoying part is already done and a known entity. Moving your DB to a new host AND setting up TLS at the same time is two moving parts you're changing rather than one. And PHP&lt;==&gt;MySQL at least is rather fiddly to get the certs set up correctly.
Nicely done. I added it as a suggested package to my TOTP library, since Google Authenticator et al require a base32-encoded shared secret.
Why utf8mb4
I'm pretty sure that's part of cs-carts code. 
What MySQL calls "utf8" turns out to be "only utf8 that takes 1-3 bytes". Try to pass in certain perfectly-legal symbols and characters that require 4-bytes, and it'll emit a warning in its logs and insert a *truncated* copy of the string (from the beginning up to the first problem-character.) If you turn on strict/traditional mode, then it'll actually give an error instead of corrupting your data. Also check the documentation about indexing a `utf8mb4` column, since there are some other things they've had to change due to various engines' formats.
Avoid having God Tables that hold everything. No need for a 50 column user table. 
I've used this as a hack in a Code Igniter application I was hired to work on. The app was built around passing two parameters to an inbuilt class function, but it only accepted one. I extended the class and had to use func_get_args to get the second parameter while having the function signature still match the parent class. Not nice, but this is a hacks thread.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
arent you overcomplicating it tenfold? going down the microservices route is for large ecosystems and usually multiple devs working on the same things. im not saying anything smaller cant benefit from it--but its basically the same as not building any technical dept up front, which isnt a good thing either. especially when building a irc bot..
I haven't found it useful in php yet. But i created a bitmap index with intersection AND in C that is called from PHP :) When is it useful in PHP?
First directive: **Code with E_ALL enabled.** 
I've used bitwise operators when setting up a user permissions system. It was a really simple one though. 
The OP states that it's a simple web game, in which case he could offer bonus 'starting gold' (or some equivalent) when users choose a strong password (over x characters etc).
You can think about that if your project get relevant to more than you ;)
The problem I'm now seeing is that there is a lot of downtime from the bot simply because there are always new features being added to it, but fixes etc. The idea behind this would be to help reduce those downtimes, even though it may last a few seconds, and a lot can happen in those few seconds. The other thing is that some planned features just don't work well in PHP but do in other languages, e.g. Python so the flexibility here would be a given. 
Honestly you have to overcome your will to produce greate code. For how long will you serve this client? For how long the clients project will run? The front end programmer could change too, so teaching him how REST is supposed to work is likely wasted. Does a REST api even add some value if no one other than you agrees upon it? Will it be better in the long run? Again is there even a long run? You have to run a business and to decide what is best for your business. As long you don't have to do anything dangerous you likely have to accept the solution that is most pragmatic for everyone. 
Only use `list` if you know for certain the number of elements in the array. I use it when I need a function that returns more than one type of value; for example: function foo() {return [200, 'OK'];} list($code, $message) = foo(); That is, where I in other languages would have used a *tuple*.
This usage seems less horrible than what you usually see, but I can't say that I endorse it. Unless you have a really large number of template variables *and* your code makes it natural to unpack their values into actual PHP variables (which for thin controllers does not seem likely), it would seem more flexible to just directly construct the array. The actual alternative for your contrived example would be return View::make('pages.index', [ 'pages' =&gt; Page::all(), 'categories' =&gt; Category::all(), ]); which too me is clearer than a `compact` based solution and additionally will play well with static analysis and IDEs (which, unless they are "sufficiently advanced" will mark all of those variables you're creating as unused). Of course using compact(), extract() or something similar will pessimize optimization, though I don't think it's very relevant.
Would be too much of a nuisance. 
So is TFA &amp; complex password requirements for a "simple online game" for the average user. You're going to have a higher rate of password resets every time the person needs to log in. Just saying that Basecamp uses the passwordless system with great success &amp; millions of users.
&gt; I can do it ... in less than a minute Wow you're so cool.
Cool, the reason i guess was to simplify the database? being able to store the permissions in one column in the db? instead of having a second table with user_id, permission and having to join etc? amiright?
Hmm, correct me if I'm wrong but if his calculations are correct, in his benchmark he did it 10 million times. After 10 millions new objects the net benefit was 0.441 seconds. That means `(object)null` is on average 0.0000000441 seconds, or 44.1 nanoseconds faster. That's not really an impressive gain.
The guide says good code shouldn't need to use isset or empty much because you can set default values. How do you get around checking if those default values are the defaults without doing some comparisons or checking if the defaults are empty or null?
If you turn on errors in your PHP settings it will tell you instead of giving white pages. Look for the settings error_reporting and display_errors. Alternatively, you can add &lt;?php ini_set('error_reporting', E_ALL); ini_set('display_errors', 1); at the top of your file.
Seems to me like you've already written your own packages, and Laravel is basically just a set of packages too. Of course, Laravel's packages are maintained regularly, and recieve security updates regularly, so there's that sense of safety when using well-maintained third-party stuff. Now, Laravel isn't really the type of framework you'd use if you intend to poop out a new project every week, because it takes some setting up, and there's a few things that need to be done. It's more the sort of thing you'd use if you make something that might need to scale later on.
So.... That is like hrmm dunno very harsh statement. 
You will be well served to use some editor with basic syntax checking support. Most editors nowadays should have the ability to syntax check php if you have php installed locally. Getting feedback within your editor about basic syntax errors will help you to focus on learning the more important topics.
The whole "poop" thing just refers to creating small projects more frequently, and has less to do with code quality. "Code artisan" is something you call yourself when you're sitting in a coffee shop, with glasses and a scarf, making Ruby On Rails apps on your Mac. [Source.](http://i.imgur.com/gyU0me4.png) But yeah, there are other frameworks out there that have a smaller skeleton, and would be better suited for small projects. Silex, for example, is a lightweight version of Symfony, and has been getting some good traction. Personally, I like Symfony a lot, and Silex uses a subset of the same packages. The head honcho of Symfony (Fabien Potencier) also made a ready-to-use Silex skeleton, so it should be pretty easy to get started if you do decide to test it out. https://github.com/silexphp/Silex-Skeleton
&gt; How do you get around checking if those default values are the defaults without doing some comparisons Mostly by separating code out into separate functions where the parameter is required in one, but not needed at all in the other: interface Cache { // Caches a value until the cache is cleared. function set($key, $value); // Caches a value for a set time-to-live function setWithTTL($key, $value, $ttl); function get($key); } instead of having one 'set' function with an optional TTL, making the caller call the appropriate method means that the code inside the cache implementation can be simpler. You still need some checks against null, e.g. in this case on the get method, as throwing an CacheKeyNotSetException each time there is a cache miss would be horrible, but
&gt; But frameworks in general? It's not meant as an insult to you to say that most frameworks are probably better than your custom libraries. Yeah I'm definitely pro-framework, but my experience is mostly in CodeIgniter, which also explains why its natural for me to combine routing &amp; controllers, and as a default I think that generally works well enough. I'm just trying to evaluate whether switching to Laravel will provide a big enough advantage for me over CodeIgniter (which seems to have the reputation of being "bad") to offset the pain of learning something new. 
Thanks so much, I never imagined I could have fans haha. I'm really glad I could make your life as a developer a bit easier at some point.
Thanks a lot for his story, it is really humbling to read stories like this one; and it is also very inspiring for me, as it convinces me that the work I do does actually come to a good use. I really never thought of myself of mentor, but I guess it could be say that is what I do for the community. Again, thanks for the kind words
I just learned this after 9 years... I've used this function like a thousand times and I never noticed it could do this... I've never felt more ashamed in my developer's life...
Yes, make the users suffer :-) Seriously though, most of the time they don't care either. For this caching example, most of the time you either have something uniquely named, and so the cache should persist forever, or you have something that needs to be refreshed every so often, and so a TTL should be set. Moving the conditional of whether a TTL should be used or not, from the heart of your application, towards the edge, where that decision is made, makes it easier to maintain the application, as there are fewer tests to write, (due to fewer conditionals) and fewer ways for the components to interact. 
What do you mean?
https://github.com/paragonie/constant_time_encoding/releases/tag/v0.2.1 :)