&gt;it's great! slots right into any project. Doesn't set some sort of global state across your entire application? Could be wrong mind just something I read once.
i think i get what you mean, you calculate a value for each child with PHP business logic. You don't want to store the calculated value, and you don't want to duplicate the PHP code as a SQL procedure. Unfortunately only you can tell if the calculation is heavy enough that it's better to store it on a column for performance reasons.
&gt; Most of IO ops are async! Thats my point! You did not seem to understand that. DB calls, Filesystem access, sockets, http, etc etc. are ALL async. In PHP they are not. You seem to finally get it! I dont care about your stream_selects etc. Core php functions are blocking and dont use anything async. Now you're mocking me as it seems, can you please check your reading ability and re-read my comments to get what I was saying? IO can be async or not async on any system, any platform, **any language**, what's needed for it is that the underlying streams are non-blocking and there is `stream_set_blocking` to unblock streams. **This makes streams in PHP async**. Please, I am already using bold-styles to make the important facts visible for you, it's not that hard to read. &gt; As i mentioned already, this (reactphp) is a good effort but please show me how to use code PHP PDO database access, with ReactPHP. That was my point with the code example. It can be done because its blocking. Contrary to node, i can use ANY database layer because none are blocking by nature. Dude, **you** don't understand networking at all, is that possible? Node.js database access is async by nature because all network and file streams are async by nature. In PHP, it's a matter of using `stream_select` and `stream_set_blocking` and you get the exact same results. **Obviously** the current PDO extension is not async, because PHP is not designed async, but it's **simply a matter of implementing an async PDO alternative** to get async database access in PHP. &gt; You seem to have hard time grasping the difference between IO and primitives (like variables assignment, for-loops). When doing IO you wait (like PHP, and other languages) on a response. I **literally** posted code to you that does asynchron streams in PHP, **natively**. Learn reading. It's getting annoying. What I posted is IO, real IO. There is exactly one person in this thread that doesn't understand blocking vs. non-blocking IO and it's **you**. PHP is non-blocking for any network or file stream with a single function. Why, just why are you not able to click on a link, read the documentation behind it, understand what it does and realize PHP already can do async natively? Your sheer ignorance is amazing. You don't want to discuss, you want to get your **wrong** point across. &gt; Yes, ive been using JS long before generators was a thing. That's really nice for you. But you didn't understand the point behind it. async/await can be easily realized through generators. In PHP, too. Since everything the constructs async and await need is a way to switch execution contexts on demand and generators allow exactly that. &gt; Well no shit! Thats just calling functions in a row, just like PHP would. The point was (especially in comparison to the example in my previous comments), that async/await and Promises are not async by nature, and especially not callbacks. That's what I was saying over this whole thread. It's nothing you invented here, you just failed to read and understand what I was saying (and you still do for most of the things I said). &gt; Please, it might be hard to get, but the reality is code PHP IO is blocking, and thats why you cant e.g. PDO with ReactPHP or other IO bound functions. It's not. Run my code. Understand what I've shown you. You're living in denial. Tell me, just answer this single question for me. A single question: **What does `stream_set_blocking` do in PHP?** Come on, it's really not hard to grasp. &gt; Im not spreading any bullshit here, just the facts! Alternative facts, yeah! It's **bullshit. You clearly don't know what you're talking about. You're simply wrong, any programmer understanding the language behind it even remotely can tell.** I gave you everything, links, documentation, example implementations, I've even written the exact code you need to get async PHP going down for you, it's there, for everyone to read. You ignored all of it and still insist that you're right. That's the definition of ignorance. What proof can you give me that PHP can't handle async? Tell me, what proof do you have? Go away. You're just an annoying troll that thinks he got it figured out. You don't. Go jerk off in your JS forums, you're wrong here.
Didn't happen for me, I use uBlock Origin.
Do you still have the box your computer came in?
Incapsula is an anti-ddos / protection service and they likely blocked your IP. Using the curl user-agent makes this even more likely.
Awesome stuff, well done! &amp;#x200B; Article is very well written, contains a wide perspective of the DI component and how it interacts with other components as well, in a standalone fashion.
well it uses singleton pattern, but you can avoid it if you want and as for as global state, the closest thing is using a db "capsule" that it shares per app. but any app ultimately uses one set of credentials to access a db. it's basically a wrapper around that
Okay thanks
If you’re writing a public library then you should just take an array (unless it’s a framework specific library that handles that frameworks collection type). If you want to work with collections then you can do it internally without forcing the user to use them as well. If it’s not a public library then do whatever you want with whatever collection library you want.
The project you linked looks like simply a way to override how services are located. This project is not for that, although you **can** do that. Perhaps my answers to your follow-up will help. &gt; allowing `mixed` as a parameter Signal does not place any constraints on what the reference to the service is. How you resolve references is up to you, so it could be a string style callback. It could be an array style callback. It could be another anonymous function even. The point there is to simply pass whatever you wish to reference it as to your resolve -- then it's up to you to resolve it. &gt; returning a `callable` There are 2 possible callables which are returned. 1. The callable service. 2. A proxy which is able to use the resolver to construct that service only once needed, to then be called. It's returning a callable because it is intended to be used where you would need a callable (as a callback to be registered with some other service). &gt; Retrieving a service of the same type requested would be much more useful, no? No, that would defeat the entire point. If you retrieve a service of the same type requested then you construct that service and all its dependencies when you're setting up (during config, wiring, etc). The point of signal is to delay that construction / service creation until it is actually needed to be executed (not simply when it needs to be registered as a callback). When Signal returns a proxy callback, it is not creating the service at that time. It only creates the service later when it gets called through the proxy method... only once it has created the service once would it return the service directly.
I can't help you with much, but I know that I also had problems with curl and HTTP/2.0, which is the version of the protocol that https://www.whoscored.com/ uses. I hope it helps you find a solution.
As an introduction you could start with a simple CRUD (Create, Read, Update, Delete) application. For example: A TODO application that is connected to a MySQL database and connects using the mysqli driver of PHP. Write it as simple as you want and expand on it by introducing filtering, prepared statements, detailed views of a TODO item, add optional comments to TODO items, you can make it as advanced as you want. You can include all the basic aspects of PHP in your application. If clauses, loops, switch cases, array functions, database connections, classes, interfaces and traits and other OOP. You can then expand your knowledge on all of this so you know when, where and why to use these. Learn how to comment your code, be able to explain why you do things the way you do. Once you've reached that level you'll find that a framework is nothing more than a collection of all these things as opposed to "that magical box that does a lot for me". A bit of a long post, but I hope it helps you.
I just watched this yesterday as well, I figure we found it linked in the same thread. Very good stuff. The payment processing example felt pretty relevant to my current situation :P
Ok sir, this is my last response. 1) If PHP core libs are blocking (eg. pdo) you cant use the PHP ecosystem (1000s of composer packages) in ReactPHP (or any other nodejs clone). This is very bad. For starters, there are 10s of popular ORMs for PHP, and they are all blocking, because most of them use builtin core libraries, like pdo. 2) If i cant use all of the ecosystem, and still want to utilize an event loop, why would i choose PHP? Why not some language thats more suited for the problem at hand? If i need realtime features i never choose PHP, same goes for long lived processes like sockets etc. 3) This was my point, you have somehow derailed this discussion to some weird nitpick about streams. Remember the PHP process model is start-&gt;run-&gt;die. Thats the core of most PHP programs and sites since the 90s. Having async mixed in this model does not fit. 4) Im sure you can use PHP async, with ReactPHP and probably have something working. But then you miss out of the huge ecosystem and lock yourself to a very small group of developers compared to the entire ecosystem. I could build everything in C or assembly too, but why would i? I always choose the right tool for the right job. 5) I use PHP almost daily, and i know when its a good fit, and when its not. You sir have the PHP hammer syndrome!
Hey, I took a look at the examples in `ramsey/collection` but I'm still not sure how/why I would need something like this. What's a typical use-case for typed collections like that?
1. Most JS packages don’t do async stuff either and ReactPHP, Amp etc are currently building up a fine ecosystem of libraries. It’s simply a matter of when it lands in the core. 2. As for the reasons why, **its more performant than JS**. It’s true, check HTTP benchmarks between Express and Nodejs (my first comment here contains a link to it) PHP also has no problems running long processes, you just have to take care of memory (which you do in any language, including JS) Why would it? 3. async is all about streams in the core. That’s the case for JS, that’s the case for PHP. You’re confusing something here. PHPs typical approach is to get executed and then die. But this has never been the case for eg CLI applications written in PHP. The max_execution_time gets set to zero and you’re good to go. I don’t see your problem here. It’s not that PHP isn’t suited for it, it is simply suited for both approaches (and both are equally valid, as it’s easy to load balance PHP when its used without states) 4. Oh, after a shitload of comments including personal attacks you finally admit PHP can do async. Look at my code in the last comment, that’s user-land. It works really well. Now imagine it coming from a proper C-extension in the core of PHP. It will outperform Node.js. Mark my words. V8 has a lot of own overhead (VM/Sandboxing, JavaScripts prototypical class system, duck-typing vs proper interfaces etc.) There is no problem in making PHP asynchronous and if you watch the latest libraries and developments, it will come very soon. 5. I use PHP **daily**. And I also use JS, including Node.js almost daily. And you are right when you say, the right tool for the right job. But that doesn’t mean that you have to rely on Node.js when wanting async functionality. Many things simply don’t even need to be asynchronous or can even create problems when async (eg race conditions in caches). And for the few bottlenecks you have where it actually makes sense, PHP can do it well (and even better soon) At least, in PHP, you can also have threads next to async procedures, which JS lacks completely (check out pthreads) and the library ecosystem is much more mature, with a lot of mature frameworks and DBALs to choose from. JS still has many problems in this regard, the standards are all over the place, everyone codes in a different dialect, JS has no strict typing (PHP does). You also don’t have to reboot your whole stack when you update your application code (which fades when you go async and long-running, obviously) There are many good reasons to use PHP instead of JS in the web. JavaScript looks a tad better (which can quickly change with bigger libraries and also depending on the author itself) and its useful to keep everything in the same language. Node.js also performs quite well (not that it performs awesomely, most languages are faster) And in the end, async and await are not there yet for PHP and will probably still take a while. If you’re writing a big application, like a real-time stock api, you’re surely better off scaling with stateless PHP than running Node.js clusters, through the way it load-balances and deploys. And in the very end, live and let live. I don’t care that you prefer JS, I like JS a lot, too. But the points you stated simply were wrong. That is all. Have a great evening.
I will look into that. Thanks
I've gone back to your article here and there throughout the day, and a few more thoughts: - After re-reading a few times, these are just solving two very different problems. - I'm not understanding how this can possibly be type-safe (regardless of it's a different problem). I'm still trying to wrap my head around how this is type-safe. I'm not familiar enough with ZF2 to know if there's something obvious I'm missing, so I'll try to make an example using what the article shows. Let's say I need my Logger setter injected into some other services. It seems I could, using an initializer do this: public function initialize($instance, ServiceLocatorInterface $sl) { if ($instance instanceof NeedsLogger) { $instance-&gt;setLogger($sl-&gt;get('DbLoggingModule\Logger'); } } For this to be type safe would require `NeedsLogger::setLogger(DbLoggingModule\Logger $logger)` -- OK, I got that. But hen how can you possibly be returning a proxy from `$sl-&gt;get('DbLoggingModule\Logger')` for lazy instantiation? How does the proxy implement the required interface? But how then is this delegate factory thing delaying instantiation? Even if your delegate factory sits in between the DIC request and the real factory, isn't it still resolving This is a totally separate questio Are you just checking within the proxy that the returned
Just look under your seat!
I ported Twitch's Twirp RPC framework to PHP a while ago. I believe it became mature enough to tag a stable release soon.
I’ll be even more blunt: it’s not somebody else’s job to justify the merit of an article to you
First off I would like to say that I don't know any PHP, and I do not frequent this subreddit so sorry if I'm in the wrong place. I am running into some problems building my first website because I only know HTML and some CSS. I started building this website on Wordpress and now I feel like it's holding me back because I can't edit the HTML source code, so I need a few PHP functions for some minor things. I'd be happy to send someone a small token of appreciation for the help, I don't expect handouts. There are 3 issues that would probably be minor for someone who knows the language, but I've spent hours on them and can't figure them out. I will just be using the code snippets plugin to enter them, but can access the php files directly if need be. Feel free to poke fun at me as I'm sure you'll have a good laugh at such elementary questions. 1. I am trying to style a Newsletter signup form, created with the Ninja Forms plugin, but there is what seems to be a text node with 4 dashes (----), in between the h3 "Signup for our Email List" and the box to enter the information in. Looking at the HTML and CSS, it doesn't appear to have a id or class so I don't think I can target it with CSS. The form can be seen at [www.trendypupstore.com](https://www.trendypupstore.com) "Signup for our Email List" link in the top bar menu. If there is a PHP function that could remove that text node, I would appreciate it because I can't edit the HTML code. 2. I am using the Stripe plugin for WooCommerce and unfortunately, it displays 6 credit card icons, including two that are never used (JCB, Diner's Club). The icons look fine on desktop, but on mobile, there are too many and it crowds and pushes some of them down a line. If I use CSS display: none on the icons, they look good on mobile and disappear, but now there is white space where they should be on desktop because of course they aren't really gone. I'm wondering if there is a function that could remove those two icons. I have found them on the web before so I know I'm not the only one having this issue, but all of them state they won't work on the newest version of Wordpress and when I put the functions into the Code Snippets plugin, of course they didn't work. Just google "remove jcb diners payment icons stripe plugin woocommerce" and you'll run across the various solutions previous people have offered. &amp;#x200B; 3. I have variable products in this store because there are several sizes of the same item. When a size is not selected, the Add to Cart button is gray. I don't like this because I have the Apple pay button as well and the black/gray clash. As soon as the size is selected the button turns to black, but I just want it to be black the whole time regardless. I have tried CSS, but all it does is change the color of the button after a size has been selected. I am wondering if there is a PHP function to override this. &amp;#x200B; Sorry for the long post, I might be in the wrong place, but I've tried everything to find the answers to these 3 questions before I came here. Some of these may even be able to be achieved with CSS but I'm just too amateur to know better. I can offer a $10 Starbucks card or $10 PSN card or whatever you want for the help. Thanks in advance. &amp;#x200B;
ElasticSearch itself uses the HTTP protocol, and hence even their official examples are all shown in CURL commands. For example: [https://www.elastic.co/guide/en/elasticsearch/reference/6.4/search.html](https://www.elastic.co/guide/en/elasticsearch/reference/6.4/search.html). That is how it is. Neat and simple. If you think it is shit and you just wanna see "beautiful" things, go play with makeups and lipsticks, and then be a makeup artist. This place is probably not for you.
As far as I know the only use is complex math parsing. Say you have ($var1 === $var2) || ($var3 === $var4 &amp;&amp; $var5 === $var6). I’ve seen code that calculates all the individual comparisons and turns it into (true === false) || ... and then that’s ran through eval to get the final Boolean. Note that all the variables are dynamic from different fields and the comparisons are all dynamic. With this method there’s zero risk for danger. Not sure if there’s any other legitimate uses..
We use it for predefined formulas that might change year by year, and we need to be able to apply the old formulas to last year's data. These formulas are defined in a table. 
tl;dr on what you can do with it?
There is also the usecase of REPL libraries, like [psysh](https://psysh.org/) without eval, we loose that
phpseclib builds crypto functions with precomputed values to get some great speedups like you described.
It's been in since v4 (according to docs), which was released in 2000. [The oldest RFC I can see](https://wiki.php.net/rfc) was created in 2008. My guess is that it didn't pass an RFC. The day an RFC passes to remove it, I will leave the language behind. I have found so many uses for it, not for production settings but in exploration of what the language _could_ be like. It's in the same category of tools as Runkit and reflection, for me.
The data comes from a trusted source, not accessible to the user. 
For someone who never really touched Symfony, that was a great insights; good text vs. code sample ratio (at least for mobile read :) I'm spoiled by Laravels SL/DI. You can almost get away with not configuring anything unless you need to, due to auto-wiring. I now we're talking specific components vs. full framework set up here. But it would never occur to my I would have to make a decision where classes are located I want to be auto-wired. I just would assume: AllTheClassesThereAre, no matter where the come from. I understand this can be a source for bugs if you never specify anything about containers you might end up with wrong instances, but TBH in my years of work with Laravel (mid-sized project) I've never experienced this as a real problem. When I think hard, with Laravel I got used to only define something in two cases: - I want a class to act as a singleton (because it is stateless or has immutable properties) - I do need dynamic information (from config, from something else), so create a closure or factory delegation But it feels like 65% is not specifying it (thx to auto-wiring), 30% is singleton, 5% is special configurations.
This is alternative to GRPC designed by Twitch. Low overhead RPC (over protobuf) are needed when you have to connect a lot of microservices written in different languages and when you need high throughout. You would not be able to scale your application over certain point using REST.
https://symfony.com/doc/current/components/expression_language.html
Not that it is good. But checkout cdtweb/collections. Hell, tell me why it sucks. I dgaf. I use it in several places. It doesn’t need to exist, but I love coding my own shit. Creating my own standards. No reason to do that, blah blah. I don’t care. Peace.
Rasmus keep scratching his back, which makes total sense not to trust him! Still think that Symfony framework is one of the most advanced regarding PHP, also the future I suppose belongs to it - some points listed out why Symfony makes sense - [developmentsym.com](https://developmentsym.com) 
- Worst: Joomla - Best: Laravel
It's not a micro-framework
From a PHP perspective the most important difference is that gRPC cannot be used on the server side in PHP because of the HTTP/2 requirement. Other than that they are almost the same (maybe except the fact that Twirp supports communicating in JSON as well which is extremely helpful during development).
Hi, I checked out PHPStorm and it's a pretty neat IDE, but I have already started on visual code so I think I am going to stick to that as of now, thanks for introducing me to PHPStorm though, I guess I will try it at an advanced stage. 
&gt;What I did recently, was to create a log table in my database, and then I sprinkled commands throughout the code which would write suitable messages to the log file at opportune times. Eg "entering function xyz" or "leaving function xyz with a return value of 7". My code is a web crawler that runs entirely in the background with no visible output, so it was the easiest way. that's what I am doing, but if opportunity presents, check out KCacheGrind as suggested by u/fiskfisk , it seems great. 
&gt; What are you specifically looking for? I went into detail below about the things I need, couldn't fit it all into a title. &amp;#x200B;
I'm not sure, if this helps, maybe its offtopic, sorry... Doctrine can create proxies from "real" entities. Basically a generated code defines every method of the entity and also extends it. So the proxy implements automatically all interfaces of the proxied entity. Every method called to the proxy can decide what should happen (reload data from database on the fly for example) but the proxy is fully compatible to the proxied entity.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I am currently looking for any advice on packages, as well as hosting solutions. To give a bit of context I am working for several individuals with large followings, we have been exploring the idea of self hosting content for a while now. Back when we first discussed I figured I would try to work with cloudflare ( image, and video ) but I am curious if anyone else has experience uploading/hosting content for client(s) or personal project(s). 
ITT: Worst: CMS. Best: Any framework that is not a CMS.
aka strategy pattern?
Is it really fair to compare a CMS to a non-CMS framework?
&gt;That $dayPrice? Oh, it’s been calculated, how is it being calculated? Who cares. No need to worry about it. Someone with almost no programming knowledge can read this method and fully understand what’s happening here. &amp;#x200B; That's carless shortcut ;) \`$dayPrice\` calculator could produce different result for the same inputs applied multiple times, and then we can't reason about \`$dayPrice\` without investigating it's calculator. That's not the case here, because that calculator is pure function. Still, we get that easy reasoning because of what that calculator is rather then from "just" separation.
Not exactly. As you can see here [https://designpatternsphp.readthedocs.io/en/latest/Behavioral/Strategy/README.html](https://designpatternsphp.readthedocs.io/en/latest/Behavioral/Strategy/README.html) the strategy pattern is more about swappableness. &amp;#x200B; This is more an implementation of single responsibility and the open closed principle.
Yes you are certainly right. This was more a way of saying that it's easier to scan the code and get a metal picture of what the code does. I was probably exaggerating about "not caring what the code does". 
Why separate classes? I don't see why calculating one portion of the price is a completely separate entity. Just split it into methods within the PriceCalculator class.
because it's an overly simple example to explain the concept. potentially those separate classes could be much more complex, and that's when you start reaping benefits.
I personally like to have small classes. You could definitely do it in 1 class, but I think it has a few advantages: \- Smaller classes are less intimidating \- You could reuse them less awkwardly, no need to import the \`CarRentPublisher\` to use a \`calculate\` function \- It forces you to think in the single responsibility mindset. As in: this is a calculator class, we only do calculations here.
I've not looking into Woocommerce before, but it might be better suited to your needs. It's build for Wordpress and so isn't that complicated to modify
We're using thirtybees which is derived from PrestaShop 1.6, I think that they are making some great efforts to improve the system but PrestaShop is just badly designed imho. But if I had to make the decision, naturally depending on your resources, I would probably take a look at sylius. It looks pretty solid and if you're already familiar with symfony, it shouldn't be too hard to dive into it and it should give you all the flexibility you need. Although I don't think they have an ecosystem with modules and such, so you would need to do a lot on your own.
User of AWS S3 here. Used it for photos and videos In my (luckily easy) case, I don't need to "post-process" anything. We're using AWS S3 pre-signed URLs and let the customers client upload that image there directly. This means my server doesn't even need to receive the media data directly. The frontend gets back the URL and we store this in the database.
Are there not enough overly simple examples that fail to actually show the benefits of various patterns due to simplicity of the problems that are used.
How does this differ from SRP?
Which version of Magento?
Great post without arguments.
Someone on Twitter asked me the same question: [https://twitter.com/Pelshoff/status/1049976356233195520](https://twitter.com/Pelshoff/status/1049976356233195520)
We are currently running a couple of instances of 1.9 and a couple of 2.2. 
We're in the process of building our own using Laravel for the api and Nuxt.js for the client side. The reason being we didn't like existing solutions like Magento. It's going along nicely at the moment but I'm sure we're going to run into gotchas along the way. I'm sure we'll figure it out somehow.
What breaks backwards compatibility?
in PHP7.2, they changed the behavior of \`count\` and deprecated so much widely used functions, which make it difficult to upgrade code from PHP5.6 to PHP7.2. Maybe upgade from PHP5.6 to PHP7.0 is easier.(You know they add a new \`is\_countable\` function to save ass) &amp;#x200B; Now in PHP7.4 RFC draft: [https://wiki.php.net/rfc/deprecations\_php\_7\_4](https://wiki.php.net/rfc/deprecations_php_7_4#vote), they deprecated or changed a few widely used thing such as \`array\_key\_exists\`,\`\_\_CLASS\_\_\` and \`get\_called\_class\`. I think this make PHP more 'pure' and 'correct' but actually stupid. It doesn't help PHP developers and break BC.
Disclaimer: This RFC draft is a collection of deprecation suggestions by different authors, which are not necessarily endorsed by anyone else. For example, I am very strongly opposed to the deprecation of `__CLASS__` and `get_called_class()`.
upload to file to cloud storage (S3 is a common choice) and store a database row with the file metadata and cloud storage URI for retrieval. 
Take a look at Cloudflare Video. Their pricing is pretty good and very simple to use.
The count change was to remove counting of uncountable things.
Shopware doesn't enable to separate frontend and backend, but there is currently the development of so called "Shopware Next", which gives the ability to separate frontend and backend and let them communicate through an api with the core. It's not production ready but i think worth a look and to wait for.
I second the earlier mention of Cloudinary. You'll end up paying for it, but they handle the upload, storage, conversion/compression/transcoding of images and videos as well as provide an API, libraries in a bunch of languages, a media library widget for your developers and users. I'm not affiliated with them, but I've used it on a few projects and it's so nice to not have to worry about this stuff.
[@Pelshoff's latest tweet](https://i.imgur.com/JG8TEmS.jpg) [@Pelshoff on Twitter](https://twitter.com/Pelshoff) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Actually, since they both have alternatives, I'm not opposed to those disappearing. static::class and self::class are fine, there's no use in keeping two different alternatives for the same thing, and IMHO it's more consistent to keep only static:: and self::.
&gt; Are there not enough overly simple examples that fail to actually show the benefits of various patterns due to simplicity of the problems that are used? Not the guy you asked, but I do. First, I see the point of your article, and kinda agrees. But only when complexity is bound to grow there. You give a principle, the `INTEGRATION OPERATION SEGREGATION PRINCIPLE`. I give you my trumps all acronyms, `YAGNI` and `KISS`. I'd say refactor with this article in mind the moment complexity creeps in, or if you are sure it will at one point. Before that, it's uneeded indirection and LOC blowup, and you might miss some bigger picture, pushing you in the land of "the clever abstraction to a slightly different problem", which has long term costs too. I'd revert the article "commit" as premature abstraction if I was in charge. Maybe store it in a branch for latter reference. I'd even say, half of the best practice I read here these days aren't needed (and sometimes harmfull) for the typical simple crud work most projects are. I also think that as programmers we tends to complicate stuff to keep it interesting for ourselves. --- Let's put it like this, if you had to do a website with a single content page and a contact box who send a mail, what woud you do ? Boot up symfony/laravel/composer custom skeleton, use packages, frameworks, automated tests and architectures, or accept that the problem is dumb enough that gerrilla 90's PHP with a single file in web directory is faster to do, even easier to debug by hand, and better perfs ? OOP might be overkill in this example. I'd even say use a mailto link, and you'll only need an html file to host. All these best practices articles, acronyms, next big idea, architectures and framework forgot to add a kind of `scale and complexity range` of their usefullness. What is the problem they try to deal with, and is it one you'll have ? 
BC break will happen only for PHP 8, not before, it's only about emitting deprecation notices. &amp;#x200B; `array_key_exists()` is not supposed to disappear, it's only supposed to stop working when using it with something else than an array, which is actually an excellent idea, you should not use `array_key_exists` with an objet, it's a misuse of it.
If you want to oppose these proposals then you need to make a argument of why each one should be left as they are. The RFC already includes reasoning for why they should be deprecated so the ball is in your court to formulate a response beyond "because of backwards compatibility".
`__CLASS__` is part of a larger set of magic constants. We will still have `__FUNCTION__`, we will still have `__TRAIT__` etc. Removing support for `__CLASS__` leaves behind an inconsistency. Magic constants and `::class` are two distinct features, that *happen* to overlap at `__CLASS__ == self::class`, but there isn't really cause to remove one or the other due to that.
Looks like one of those guys who vote against some RFC like 80 to 1... Always have something to be butt hurt about. Oh so hard to open IDE and run Find and Replace all... Its like you have to go back and edit tape records for this change... &amp;#x200B; People like you stop PHP evolution with their ten year old code bases crying about compatibility... Language shouldn't cary your lack of will to rewrite old codebase...
how do you deal with files that are uploaded but their reference is never persisted to the database?
Thats a lot of services. Lots of complexity. Isn't there some way to get this done with something simple?
But not modern 
Widely used by you I guess, which doesn't really count as widely. Sorry if you're still stuck with PHP 5, I would suggest upgrading your code or just switch the company
I would normally agree, however: &gt; \_\_CLASS\_\_ constant &gt; &gt; This constant is the old way of detecting current class name. That is the totality of the reasoning given.
sure, as long as your projects are smaller than the likes of Facebook, Wordpress, and Wikipedia, you should be fine using PHP 
Well, that would be a bug and rarely happens, if at all. However: in general your concern is valid. For one: storage is cheap, we may just life with it. At some point we may clean up the oldest ones not being referenced or something. But it's absolutely negligible in terms of $$$. Numbers: storage size is small, currently about ~5TB amounting to ~230 USD or something. But nothing is stopping you from: - run a scheduled clean up script - or apply a bucket TTL which automatically deletes them (depends on your application 😅) after a few years, etc. 
And one hour later another thread like this from the same author.
[https://craftcms.com/](https://craftcms.com/) has a commerce plugin that I have heard lots of good things about. It's pricey, but if you're tuning a profit then it's just another business expense.
In Soviet Russia...arguments post you!
Which should make it pretty easy to make an argument for why it should be kept, no? That's exactly what /u/nikic has done [in another comment](https://us.reddit.com/r/PHP/comments/9myu4e/lets_stop_deprecations_rfc_draft_for_php74_which/e7ica8d/) and I fully agree with their reasoning and also think it should kept. There is some ambiguity to what __CLASS__ means (this class, the instanced class, the class that used the trait, etc) so I can also understand why someone might want to consider deprecating it. I doubt that reasoning would get past a 2/3 majority of the maintainers, though, in light of the reasoning for keeping it.
Sonata media bundle 
On the other hand, this is core business calculation. It's safe bet to assume it will change over time. Especially since company margins \*\*will\*\* depend on tweaking those equations.
You may also find interesting to look for e-commerce projects that use Symfony components: [https://symfony.com/projects/category/e-commerce](https://symfony.com/projects/category/e-commerce)
FWIW, when I added `::class`, use cases outside of `ActualClass::class` were never considered primary use cases, I added support for `parent::class`, 'static::class`, `self::class`, et. al only for completeness sake (secondary use cases). *It might be a distinction without a difference*, but I would be opposed to removing get_called_class() only b/c when it comes down to what's actually happening (or was, haven't checked recently), `static::class` is a runtime lookup as opposed to a compile time lookup. Today, I might generally use them interchangeably now, but I always still consider `get_called_class()` the more proper thing to do (as more work is preformed in the engine, or was to get that class name, the function call denotes that for me).
Generally speaking you only want a collection to have on type of items. If you consider "jar" contents you don't want to add `Cookie` to your `JamJar`, but rather to your `CookieJar`, etc. Iterating a typed collection will also enable better IDE type hinting and it's understanding of your code. The doctrine and ramsey collection packages are over-engineered and you're most likely better off just implementing a collection interface. They are however good examples on the practice and why you might want to use typed collections.
They dont break BC, these are deprecations, not removals. Your code that works on PHP 7.3 will still work on PHP 7.4, I have no idea what the OP's beef is about, seems that he just wants to rant or seek attention. 
You should also consider [X-Cart](https://www.x-cart.com/) We used it for many years and is extremely flexible.
Storage may be cheap, but typically redundant and backed up storage is not.
Their pricing is reasonable given their simplicity, but they're on the more expensive side in general. I don't have the spreadsheet with me, but several other vendors with more normal (and/or convoluted) pricing models wound up cheaper for most cases I checked out. I doubt it'd make the difference between the project being cost effective or not, they're not *that* much more expensive, but there is a definite difference. Source: I made a thing, running on a cron, which downloads new videos as they appear from a couple specific YouTube channels, chops them to shorter length, and uploads them to CloudFlare. (*All above board, it's content we've licensed, but given YT don't allow external ads, this is the safest way we can run our own ads against the videos - having separate copies of them.*) CF's upload API is *mostly* reliable but I do get error emails back from the cron script once every few days. Usually it's only errors that'll get fixed inherently, so the next run of the cron script will go smoothly, but I've had to manually intervene with more extreme edge cases twice in ~3 months. So pretty reliable. One area of concern is their metrics - they don't make a great deal of sense (and they have no granular reporting or graphs or anything, just a list of the uploaded videos with pulled-in-via-one-ajax-call-per-video display of total views and total milliseconds watched, so doing your own analysis can take time and be a pain). My chopped videos uploaded to them are all 60s long, and the way my JS handles their playback on-site means there's no way to replay once it's finished, and users are unlikely to skip around while it's playing - yet we see several minutes worth of playback per-play in their metrics. I've quizzed them about it, but not received a response. So that's one thing to be aware of.
&gt; My go-to is WordPress plus WooCommerce WordPress is the biggest security nightmare on the planet. I wouldn't even put an instance of WordPress on the same server as a piece of e-commerce software, let alone use WordPress *as* my e-commerce software. 
except uncountable wasn't defined anywhere before this change
When your $argv is so empty $argc is -1
It’s alright, but still lags behind in basic features that other platforms supply. I think some things like admin ordering are being added in the Craft3 version, but I’m not sure what the release schedule is for that. 
Oh stop it. It's no worse than any other popular platform. The problem is people not keeping everything updated and installing plugins/themes that are severely outdated or very poorly done.
&gt;here web programming tutorial r/https://www.welookups.com
WooCommerce is good if you want to build a lot of your own functionality on top of a widely available and supported platform. Keeping those installs "light" and "modern" would be a stretch but possible. BigCommerce isn't as suited to developers YET - they are working on a WordPress plugin and Javascript API. They also are working on developer outreach teams, but it's all still very new. They have an amazing partner program. They are hands down the best e-commerce solution available. Not PHP but it is an e-commerce solution.
Hi all, I’m researching Internationalization/Localization for a project and I’m wondering if anyone has opinions on [https://github.com/oscarotero/Gettext](https://github.com/oscarotero/Gettext) or [https://github.com/mlocati/cldr-to-gettext-plural-rules](https://github.com/mlocati/cldr-to-gettext-plural-rules) (this one is for JS) The code base which needs translation is a mix of PHP and JS. The PHP is built on Syfmony but it’s a much older version which only uses xliff 1.0 so I’m trying to find something else. Any thoughts or opinions on the links above or any other tools you've used is appreciated!
I actually do make it work first and then make it good once I have a passing test or have worked through the concept. The real rule is never merge anything in a “then make it good” state. If I tried to make everything good at all times, I’d constantly be redoing my work/be way less efficient. A example is an app that has 3 separate pages, one showing a list of countries, one showing a list of cities, and one showing a list of specific places. I’m aware ahead of time that I can share some of what I’m doing between all, but I don’t do this ahead of time. I want to show a flag for all types, but I don’t know yet until I’ve implemented the tables if I should use inheritance or composition to share this functionality. Once I make it work for cities, I copy paste it to countries and now I change how the data’s fetched but the display is the same. Before I jump to refactoring, I implement the places with another copy paste. At this point, I realize that places would benefit from a full address as subtitle in its table row. I write some tests and everything is working. At this point, I know countries and cities should extend the same parent class, but places are separate. The flag retrieval becomes a utility, and I can make place, city, and country all implement the same interface to facilitate this sharing utility‘s flag lookup. I now doing what’s basically a polishing/reduction and end up with maintainable code. This is how almost all development ends up for me. To me, this is adherence to the no premature optimization tenet and an entirely pragmatic way to develop (especially when not afforded requirements/developing a product simultaneously/organically)
ecommerce =&gt; needs decent security. Recommends Wordpress... You are a maniac.
PHP supports threading, and it works pretty well. You have to use/compile a ZTS build though. Alternately you can fork and IPC. 
&gt; Oh stop it. It's no worse than any other popular platform. If you think that you are delusional. Magento, as an example, is a popular platform and is subject to regular audits from a PCI QSA. WordPress is not. WordPress has features that full on break PCI compliance - like letting admins edit actual files on the server through the admin panel. If you think that's "no worse than any other platform" you have no business producing ecommerce projects.
&gt; Oh stop it. It's no worse than any other popular platform. It's objectly worse than a symfony/laravel/decent codebase based solution. &gt; The problem is people not keeping everything updated and installing plugins/themes that are severely outdated or very poorly done. And the average Wordpress shop/integrator doesn't even understand that. Non sarcastical thumbs up to you, you seems some steps ahead of your peers. But it's an ecosystem of badly engineered solution created and used by mostly bad/non programmers. What can you expect. The problem is also that when you use the same bad software as 80% of the web, the incentive for hackers is self explanatory.
Stop what? If you're living years behind community, that's your choice, but OP asked for a modern solution.
Buy VPS, upload image or file to a folder of that VPS. Store path and any other info to database. DONE.
&gt; you have no business producing ecommerce projects Well, it's a good thing you're not my employer. &gt; subject to regular audits from a PCI QSA Great. It's a dedicated eCommerce platform. WP is not but can operate as one if you want. It's just like every other piece of software in that you have to put in the effort upfront and ongoing to ensure a certain level of security. It's also about scale. I probably wouldn't suggest it for some site pushing out a million a month in sales. But there are a lot of sites that still need to sell stuff online and WP+Woo is completely fine platform.
Symfony and Laravel don't have turn-key eCommerce solutions either. At least not to same level of Woo. I never blame the tool - I blame the user. And honestly, keeping shit updated will prevent 99% of any attacks. Because the attacks are all low-grade scripts looking for known exploits that have been patched. I've seen it in logs several times. It's like going back in time. Hell, I saw one script trying to use an exploit in a plugin that has been patched for over five years. People like to shit on WordPress because they assume all the work is done by some marketing person slapping plugins and themes together. If Symfony or Laravel had the option to do that they would be in the same place. A quality dev/company/team can very easily make WP a solid and secure system.
A quality dev/company wouldn't use wordpress in the first place. If they are actually devs, and not a one stop shop for quick sites on the cheap. 
Wordpress is insecure pile of shit. You can’t rationally debate the opposite. Anyone who uses it for e-commerce is asking for a world of hurt. End of story. 
Redmine is a ruby project (not PHP). This is the wrong sub for this. Also redmine is a bug tracking software and not a CRM.
But as soon as __CLASS__ is removed, someone will come along and see __FILE__ and __FUNCTION__ and __TRAIT_, and __NAMESPACE__ and think to themselves: "Hmmm.... shouldn't there be something for Class / OOP here? I should write an RFC to add a __CLASS__ to fill the gap here"
*LARAVEL action and filter hook system
Not to answer for them, but those are mostly just libraries. **Gaufrette** is a PHP library for filesystem abstraction, so your code doesn't have to change if you need to change storage mechanism (whether it's local storage, S3 or some other future storage service). **OneUpUploader** is a Symfony bundle for handling file uploads using a variety of different JS frontends and implementing common requirements like chunked uploads and orphan file removal. **LiipImagineBundle** is a Symfony bundle to make working with the Imagine image manipulation library slightly nicer within the Symfony ecosystem, most commonly used for producing thumbnails, cropping images, etc. The only external services they're using are S3 and Cloudfront for storage and delivery.
That is a very good point, I forgot about those other constants when I wrote my post. You make a much better argument than OP.
How I have done it in the past: &amp;#x200B; 1) User gets presigned url to upload to "application-temporary" bucket 2) user uploads 3) server gets url of file on that temp bucket 4) server moves file from that bucket to "application-storage" bucket that has tighter ACLs (there is a built in api call to do this on S3 so you dont have to download/upload) 5 server persists filepath to db &amp;#x200B;
Sure, but that's how a language evolves. I think deprecating stuff (without BC breaks) and then removing them in 8.0 which is a major version is fine. It's much more acceptable than breaking count() in 7.2 which is a minor version.
&gt; OneUpUploader Does this work well with webm chunks?
You don't get often people talking about failures. Takes strength to come forward, very much appreciated. Can you share some numbers (database, size, connection, IDK) or other insights you have? Can you expand on why/where threading did help you (do you mean golangs' concurrency, CSP)? I've also seen PHP servers _and_ their backend infrastrucure (DB/Redis) getting hammered do death with too many requests. You can't always afford caching. In my case I was processing webhooks. Lots.Of.Them. They would come in spikes. Big spikes One solution to (my particular) problem was to implement a thin part (ugh, microservice) in NodeJS which simply was much better suited for this part of the application. We _maybe_ could have thrown more hardware at it, but it felt wrong. Wrong because my feeling was the network/CPU/RAM, it was well suited but not the particular technology handling it. Another solution was to use pgbouncer (PostgresSQL database here); it works much better with recycling connections. thanks!
Snipcart. Javascript based so you can build the frontend however you please.
WP is great for small personal blogs, but working with it as a developer is horrible.
Well yes of course, I don't disagree with that. But the point I was making is that if you don't want a feature to be removed, you need to make your case _before it's been deprecated_ rather than saying "it's only being deprecated not removed, what's the problem?"
I run gitlab on digital ocean $5 machine. It's not the fastest but it works. 4gb is definitely what you want. 
I can see only the output, what's the code?
This code is a mess. 
That’s exactly the point I was trying to make. These are just depredations, they will still be usable in PHP 7.4 so at least in a short run, the OP has nothing to lose. It may be removed in PHP 8 or later, but then it will be years and the OP should have plenty of time to refactor his code. If he doesn’t want to, he has a choice to stay in PHP 7, no one says that he can’t. 
Not complicated enough.
Ive used it a few times, I really like it. Its a few steps behind magento but its beautiful to work with. 
My eyes are bleeding.
Where I work we set up amazon s3 file storage and we built a simple API in python to handle serving, uploading the files, checking mime type is whitelisted, verifying user ownership over files and stuff like that. Should be simple enough and you can set up a dev file bucket and a prod file bucket for your different envs.
The is[ shopsys framework](https://www.shopsys.com/) too.
Commerce 2 for Drupal 8 is great to work with (Commerce 1 for D7 wasn't and Drupal 8 might not be your top choice but Commerce 2 is worth having Drupal for. The maintainers are working on decoupling from the front end, if that's your thing https://www.youtube.com/watch?v=sAVn5FS59lU.
Ahh ok, that was not communicated to me. Thanks for the heads up! What are your recommendations, besides the like of Shopify and BigCommerce?
Leaving magento for wordpress.... talk about out of the frying pan, into the fire.
I might have some time depending how quickly you need it, but before anybody's time is wasted... which CRM are you working with?
What corn are you using?
I got my start in ecommerce with Magento, so it’s always had a special place in my heart. Most businesses really only need a simple Shopify cart setup and then whatever CMS you want to bolt on to handle the frontend. The company I work for right now uses Craft as a matter of fact, but it’s taken a ton of work to get the commerce side where we have it now. Craft as a standard CMS is a dream to work with, it’s just their commerce plugin that lacks a bit imo.
Can you show me the right sub reddit then
Perfex crm
Try /r/PHPhelp 
Here's a sneak peek of /r/PHPhelp using the [top posts](https://np.reddit.com/r/PHPhelp/top/?sort=top&amp;t=year) of the year! \#1: [Join the battle for Net Neutrality! The FCC plans to kill Net Neutrality and it will affect everyone unless YOU fight for it!](https://www.battleforthenet.com/) | [4 comments](https://np.reddit.com/r/PHPhelp/comments/7eoq2o/join_the_battle_for_net_neutrality_the_fcc_plans/) \#2: [Please stop closing your PHP tags](https://np.reddit.com/r/PHPhelp/comments/8tq4h7/please_stop_closing_your_php_tags/) \#3: [Making /r/PHPHelp better, Pt 2.](https://np.reddit.com/r/PHPhelp/comments/8jejyf/making_rphphelp_better_pt_2/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Should be in /r/forhire with the tag hiring 
Or /r/forhire with the tag hiring
that's a great approach to dead files!
&gt; If you're a developer, and respond to this type of work, you're hurting all of us, man. You have no idea what he's willing to pay or if it's worth it. Those sort of details get hashed out privately, not on a public forum. I'll agree with you that this is the wrong sub for this, and I'll even agree that OP is going to get a lot of inexperienced devs, but you can't just assume this guy is paying shit. If you're interested in the work, hit him up and start negotiating the price, but don't tell other devs they're hurting you by picking up work for themselves.
Thank you.
&gt; You have no idea what he's willing to pay or if it's worth it. That's 99% my point. If you don't know whether or not it's going to be worth your time, it's not worth your time. &gt; Those sort of details get hashed out privately, not on a public forum. No one is asking for private keys to his server--I want to know what work he wants done. So unless he requires a NDA--which he also didn't disclose--why would it be somehow wrong of me to ask? &gt; but you can't just assume this guy is paying shit How do you know he's not paying shit? Since he included zero information the argument could be made either way. You could argue I can't know he's paying shit, but I could argue you can't know he's paying well. &gt; If you're interested in the work I think it's pretty clear I wouldn't touch this type of work. If anything, I'm here trying to help everyone out. As a client the more information you provide, the better the end result. That's an absolutely incontestable fact. &gt; but don't tell other devs they're hurting you by picking up work for themselves Hurting me? The hell are you talking about. They're hurting themselves. You __don't__ wanna work for someone that doesn't understand the difficulties of vagueness in a project like this. It's simply not worth it by any metric.
&gt; If you don't know whether or not it's going to be worth your time, it's not worth your time. You don't get many clients do you? How many initial client meetings do you walk into with 100% confidence that it is worth your time or not? Do you not bid on projects or give estimates? That is a silly way to look at getting work. &gt; No one is asking for private keys to his server--I want to know what work he wants done. So unless he requires a NDA--which he also didn't disclose--why would it be somehow wrong of me to ask? It's not wrong of you to ask, but you didn't ask. You just started bashing OP rather than actually ask. &gt; How do you know he's not paying shit? I don't, nor did I ever say I did know. When a request for proposal comes in through traditional means, how do you know the client doesn't have a budget before you've asked their budget? &gt; As a client the more information you provide, the better the end result. That's an absolutely incontestable fact. There's no reason to provide all of the details here. Why can't OP discuss those details in private? He might very well need an NDA signed, you have no idea if he does or doesn't. He basically came here saying, "Hey I've got some php work that needs done, I'm willing to pay, is anyone interested?" He's not submitting a formal request for proposal, he's looking for someone to help him out. I am certain that anybody who reaches out to him will get all the details they need to know and if they think any of it is vague at that time they can clarify. As you see here, a few of us asked OP to clarify which CRM he is working on so that we don't needlessly DM him if we're not familiar with his CRM. &gt; Hurting me? The hell are you talking about. You said, "If you're a developer, and respond to this type of work, you're hurting all of us, man." When you say "us" then *you* are included, therefore you believe this hurts you. I am just following basic reading comprehension here. And you're right, you don't want to work for someone that doesn't understand the difficulties of being vague, but this was not in any way a post to outline all of the details of the work, nor does it need to be. Again, all of that can get hashed out in private discussions. I'm not sure why you're so bent out of shape over OP not posting all the details here, you don't think OP will reveal exactly what he wants when talking to someone one on one? IMO, aside from submitting this in the wrong sub, there's nothing wrong with OP's approach to finding some help.
shopify
&gt; How many initial client meetings do you walk into with 100% confidence that it is worth your time or not? Every single one. I don't meet with clients unless I know about the project, what's involved, what the budget is, and whether or not its worth my time. &gt; That is a silly way to look at getting work. Sorry to say, but it's how professional developers operate... I don't waste time. If you don't want to tell me about your project, then you're not going to hear from me. If you have a specific budget, then we can talk, or if I'm interested in your work, I'll submit a bid. Anything outside of that is unacceptable for everyone involved. &gt; It's not wrong of you to ask, but you didn't ask. You just started bashing OP rather than actually ask. As I said, no one is bashing anyone. I'm spelling out to him how to get the attention of experienced developers. I'm _literally_ helping him out. &gt; I don't, nor did I ever say I did know. Thanks for proving my point. &gt; There's no reason to provide all of the details here. If, in any other industry you replied to a job application you would have the base pay, incentives, and work description. To expect anything less for professional development is an abomination. You get paid per project or per hour. Any hour you spend chasing a job from a client who isn't being forward with you is wasted time, and therefore __wasted money__. You're hurting yourself by entertaining them. &gt; Why can't OP discuss those details in private? He can. I never said he couldn't. But anyone who entertains them is wasting their own time. He's the client, and he's bidding for help. Why would I need to _track him down_ for more information on the job? That's just stupid, inefficient, and wrong to expect. &gt; He's not submitting a formal request for proposal Sure he is. He came seeking developers to complete work for him. Just because he didn't fill out a form doesn't mean he shouldn't include __something__ about what the work entails. &gt; therefore you believe this hurts you In the end it does. Responding to "work" like this is condoning the behavior that a client doesn't have to disclose anything about a project to garner interest. It's selling yourself short. It's a business transaction. OP needs work done by someone with a skill that he does not have, or is unable to complete. Developers are not roaming salesmen. Point of fact, when you go to get your car serviced, don't they have prices listed? Don't they have all fees listed? A detailed description of their work? To expect less in development is bullshit. &gt; but this was not in any way a post to outline all of the details of the work Thank you, yet again, for pointing out my issue with the post. No one is expecting a 200 page dissertation of work to be completed but: &gt; Hi, I work with {CRM} and it doesn't do {thing_I_want} and would like to get it implemented. I have a budget of {$money} and/or am willing to spend up to {$budget} to get it completed. and you're coming at me like that's too much to ask. &gt; you don't think OP will reveal exactly what he wants when talking to someone one on one? I've been a developer for over 20 years. I know that this is entirely the case a lot more than you seem to think. &gt; I'm not sure why you're so bent out of shape Yet again, no one is bent out of shape. I'm literally trying to help OP. You're the one that's getting bent out of shape because its pretty obvious that if you're here seeking professional services then there's a __bare minimum__ of information that should be included in your post to garner interest........
Drupal Commerce is full-featured, has a thriving open-source community around it and is highly customizable and extensible. It runs on Drupal 8, which means your composer-importable payment gateway SDKs integrate easily, too.
Shopify is the most amazing thing 
It might be solid, it might be fast, it might be awesome for editors to work with, but have you looked at the code? Or ever written a plugin for it? It's a complete mess. Which is understandable considering it's been around a little longer than PHP 5 and is therefore much older than anything that is good about PHP. So yeah it's a great piece of software for people who use it, but in my opinion at least it's absolutely horrible to work with as a developer. Literally the only good thing about it in that regard is that they have a very good documentation. Also I really don't agree with some of their design choices, like putting almost everything into wp_posts and wp_posts_meta. Posts are posts. Pages are posts. Revisions are posts. WooCommerce orders are posts. Menus are posts. Uploaded files are posts. Custom css are posts.
I don’t have any allegiances myself to any particular piece of software. I believe in the right software for the right job. So I absolutely see your points and respect them. I work quite abit in WordPress and I’ve come to ‘like’ it for some of its features but I do agree, the post thing was a stop gap at best and that was whatever, 15 years ago at this stage? You can get a little more flexibility with some of the frameworks such as TypeRocket and it’s ability to handle ‘resources’ which are basically just standard dB tables. But all said, I ain’t going to argue a corner and stick my fingers in my ears to anyone that disagrees. That said though, I don’t believe in a blanket wide WP bashing. It has its merits, big companies use it and its time to deployment is super short. Has it failings? Yes. But I’ve worked with SAP Hybris (A minimum $500k buy in license) and it can’t do things natively that WooCommerce can, and has similar failings with respect to storage. It’s also slower in every regard. 
We're paying for Magento Commerce Cloud, currently running version 2.2.5 and have had nothing but problems since we launched a year ago. I'd definitely recommend staying away from Magento if at all possible. 
Everything about that screams "bespoke product" tbh. 
What's your budget? 
I'll take a guess of $free to $exposure, maybe $10 to cover a coffee if you're lucky.
Lol. 
I need it like this script http://www.ezleaguegaming.com/blog/2016/09/26/ezleague-pro-v1-4-2-released/
I need it like this script. See its features page http://www.ezleaguegaming.com/blog/2016/09/26/ezleague-pro-v1-4-2-released/
\*slaps roof of car\* This sentence can fit so many words in it.
Use that one, then. Unless you want something custom. Then you'd be looking at around $10k to start. 
I need it like this. But this has no demo. http://www.ezleaguegaming.com/blog/2016/09/26/ezleague-pro-v1-4-2-released/ I need at least a forum. Or a digital e commerce script that allows them to add money to a balance. It's like a sports betting script. They can win a tournament. But ability to add money to their e wallet. To buy and receive.......
This... should be mentioned in the RFC...? 
Recommend looking at this together with Hugo and Netlify or a PHP SSG like Jigsaw
Whilst it's a pain, I'm suffering from it too, from a software perspective it makes sense to me. Why wound I count on `null` or `false `. It's obviously an error, it doesn't make sense. 
See here: r/forhire Expect to pay anywhere from thousands of dollars for a few mods from an existing script, to tens of thousands of dollars (minimum) for something completely custom. Also, this subreddit is aimed at PHP internals and PHP-relevant software engineering, it's not really a suitable place to find such a person or product.
Can you assist me with finding a script a digital product script? Where they can add money to their account.?
2k
No, no I can't.
Damn. What subreddit should I go into. That people know of php scripts
I just can't fathom how can someone read all this labourous overdesigned process of using this container and not realize they can achieve the same effect with 5% of the effort and 5% of the runtime resource use, by typing a few "new Foo()" lines in a basic factory.
Such content does not belong here. If it is a PHP oriented request, please use: https://www.reddit.com/r/PHPhelp/ As this is not directly a PHP oriented request and more of a full stack website solution, you might be better off in sub web development subreddits or freelancer websites.
This is a "nice" example of legacy code which can be refactored, piece-by-piece.
I subscribed there but it's not letting me post?
Clock is ticking. Running an insecure mess like that and collecting PII and payment information is a time bomb. Mate. 
You won't find some one-off script you can just pick up and use. It's not that you're looking in the wrong place, it's that you're looking for the wrong thing.
You need to take a hint that Reddit isn't here to run your Wix consulting business for you. You were already told in another thread in this same subreddit that this post isn't for this subreddit. Just stop and reflect on what you post before you post it.
This may not be the answer you're looking for, but patch 2.3 looks like a huge shift in thinking from the Adobe acquisition. Migration to progressive web app, cache improvements, react, and graphql all signify a serious move to decoupling the front and back end. We host on AWS, so we've never experienced a slow app. Distributing resources is key. I was in the same boat as you recently. It really just solves too many of my problems to drop. I've worked with WooCommerce and it just isn't sufficient in most cases. Not to mention WordPress scales terribly, there's a lot of massaging to get it to work. A good cache helps, but not like Magento. Magento is built to scale. Not owning the system (Shopify) just isn't an option for our clients. Bit of information: https://imagine.magento.com/sites/default/files/What%25E2%2580%2599s%2520in%2520Magento%25202_3%2520-%2520Imagine%25202018.pdf 
This. I'm the tech manager on a Shopify store with 40k SKUs. Here are my general views: * Great asset support (we have 2048x2048 imagery on every SKU/variant we sell, often with multiple images. This was before they upped the max res. to 4096 in the last several months.) * Theme support: we have a heavily modified purchased theme, plus a JS-heavy custom tool we developed just for the site. Shopify's support for theme customizations via their templating engine is great. * Custom apps and services: excellent support and a great app store. My site also has a JS/Shopify API-heavy custom page that they have no problem supporting. If you know how to code and use the API, the possibilities are insane in terms of your projected expansions.
Ok.
Chill with the criticism 
There's gotta be even a peice of shit script. 
Hey, caljamesseo, just a quick heads-up: **peice** is actually spelled **piece**. You can remember it by **i before e**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Do you really want to put your customers at risk with a piece of shit script?
Delete
If you think you can make a piece of shit script secure, why not use your expertise and write it yourself so that it's secure right out of the gate?
Because it's not about security. I mean fixing the bugs
Let me circle back to my original question: Do you want to put your customers at risk? And if the answer is "yes", why should anyone help you?
Trash. Lists deprecated functions and nothing about MySQL as title suggests.
Ok
Thank God
FYI - 2.3 is a lovely release, but has essentially nothing to do with Adobe though - we went into code freeze not long after the acquisition. 
Curious to know what changes you've made for security.
You could for instance use intervention/image to manage the image manipulation. 
Here is demo - 1) [https://demo.commercekickstart.com/](https://demo.commercekickstart.com/) 2) [https://commerceplus.acromedia.com/](https://commerceplus.acromedia.com/) github -- [https://github.com/AcroMedia/commerce-demo](https://github.com/AcroMedia/commerce-demo)
It's not "just" the container.
In general you don't test things that are already tested. A base should have its own tests. In children classes you test only the interface that is exclusive to them.
Ok so why even talk about ecommece solutions at all? Actual programmers then should just "roll their own" huh? In that case, no need for Drupal or anything else. Just custom make it. Your argument is pointless.
&gt;Shopify One huge warning here, you are putting your most valuable asset (your sales channel) in the hands of a closed source, proprietary system run by a corporation with shareholders. Without sounding to tin foil hat you're asking for trouble. What if they rise the prices? What if you want a feature they don't have? What if you want to move to another platform? Basically you're screwed. TL;DR from decades in the industry and being stung myself, never put your eggs into a closed source, proprietary basket.
So is every piece of software, custom or turnkey. From WP to Drupal to Google to Facebook. Everything is an insecure pile of shit. WP is just as valid to use as anything else, period. It's updated frequently and nicely has automatic update options, unlike Drupal. Remember Drupalgeddons? What a shitshow that was.
There were a whole bunch of places where input sanitation was lacking, which will happen when you’re not using prepared statements AND relying on manual escaping Salted sha1 passwords really ground my gears, se we’ve swapped that out with the new password_ functions from 5.4 A lot of the little things can be found in [opencart-ce](https://github.com/opencart-ce/opencart-ce)
I normally test abstract classes at the base level by just extending them with a derived test class in the test. Ex: class TestAbstractClass extends AbstractClass {}
Regarding 2 I'm not talking about helper methods in the SUT I'm talking about in the test it's self. For example, setting up the mocks. 
Ok, that Is what I was thinking I would need to do, but what about question 2 ? 
Oh, I see. Well, in PHPUnit you can achieve this kind of code reuse as you would in non-testing code, like creating dedicated base test cases, that test classes extend, or using traits. I guess in PhpSpec you could do the same.
I maintain a OC 2.3 project. I've personally not come across anything that is too critical. I've seen probable XSS issues - but they require an evil admin. There's also the way that the `route` parameter does not correctly validate methods it's been asked to call. This results in oddities like this: [https://demo.opencart.com/index.php?route=account/register/validate](https://demo.opencart.com/index.php?route=account/register/validate). Bonus points for not turning errors off on a production site. It's still bad, but it's just not on fire. You're right about the password hashing. It's embarrassing. There's [this exchange with the OpenCart lead](https://github.com/opencart/opencart/issues/1269) that's a 101 on how not to maintain an open source project. 
Discription 
[removed]
Shopify connect with CJ APP, maybe u can have a try, of course, you can learn about CJ APP first www.cjdropshipping.com
- What if they raise prices? I’m sure they will. That’s called business. - What if you want a feature they don’t have? Just like on any platform that might not have a feature you want, you’re welcome and able to develop that feature as an extension/app. - What if you want to move to another platform? Just like on any platform you might want to leave, you export your data and leave. 
It’s the bulk of it. 
Sure, not everything needs industrial scaling capability though. What do you mean by not redundant? 
We’re actually based on 1.5.5.1, which predates the spotlight on the author. We had a user break their own transaction by putting two questions in the order comments, because OpenCart’s custom urlencode only replaced the first instance of each bad character(!!!)
This is another winning point for composition vs inheritance.
[removed]
I worked for companies developing in PHP for almost 3 years. Now I changed to Ruby, and there are some interesting things to learn on the Ruby community. Yeah, I miss a lot of things from the PHP community. But I like a lot that "get out of the confort zone focus". I'm with Ruby, but if I would have choose, I would have been with C#. The C# community looks years in the future of PHP.
I would go with Java or C#. If you had to choose one, then C#. I use PHP on all of my personal projects. My last job used Java, my current job uses a full Microsoft stack, including C#. I think C# would be a bit easier to pick up, and it is a very powerful and very popular language.
UML of course :-) 
Thanks for your feedback However &gt; The C# community looks years in the future of PHP. I am not asking what the community looks like, I am asking which programming language will provide new mental models for software modelling respect to PHP.
Where is most of the C# community lurking?
Maybe my question is not clear enough. I am not interested in the "language x is better than language y" I wanted to hear your experiences specifically related to how learning a new programming language has brought you to discover and use new mental models and improve high level software architecting skills
Pottery workshop. Very effective for modelling skills.
I’ve never had a system hacked. I’m not dumb enough to use Wordpress for e-commerce. When I’ve had people who’ve needed WordPress it’s been isolated in its own sandbox in a separate subnet with a hefty WAF in front of it. But look at the code. It’s complete unmanageable spaghetti. People can introduce horrible security flaws with zero effort. You can’t rationally argue that WordPress isn’t higher risk for e-commerce than other frameworks. You just can’t. 
Oh, my love, my darling...
[removed]
&gt; I am not asking what the community looks like, I am asking which programming language will provide new mental models for software modelling respect to PHP. But the 2 things are connected. Languages change and add features to better match what their community is doing with the code. For example, I would suggest looking at Java if you want to learn some design patterns better. It's not because Java is better than PHP at design patterns, but because Java programmers generally use them a lot more often. While I haven't studied the internals of the Spring framework a lot, whenever I do peak under the hood, I do see a lot of them. You're going to run into this type of answer a lot because most common languages (C#, Java, Ruby, PHP, Python) are all written very similarly. The libraries, core API, and communities are really the biggest differences. Outside of the common, useful languages to learn, if you want to learn recursion well, pick up some variant of LISP. [SICP](https://mitpress.mit.edu/sites/default/files/sicp/index.html) is a good introduction. I've solved a few problems with recursion at work, but I can count on one hand how many times I've used it or needed to understand it. &amp;#x200B;
Microsoft Word 3
The biggest change in my programming style was probably when I learned Elixir, because it was my first functional programming language (and later I learned to appreciate its choices w.r.t. concurrency). So I'd say learning functional programming through just about any FP language will broaden your view a lot. When in an OO language I do use OO constructs still, where they make sense, but I tend to think a lot more in terms of datastructures, transformations to them, and small testable units than I did before. Part of it is just growing as a programmer, sure, but that's my answer. :)
Time to learn some [software design patterns](https://sourcemaking.com/design_patterns).
I think there is nothing that stops you from installing laravel and still working with your used environment. Take it step by step. Start by just learning how it is organised. try to understand how it works. &amp;#x200B; I would not make an exclusive jump to a framework without knowing anything about it, but I do install stuff just to play around with it and get a feel for it, without it affecting how I do my other projects. &amp;#x200B; A lot of best practice and years of experience went into it, so you can only learn from it. 
Perhaps try learning to use an MVC -MODEL VIEW CONTROL for your next project. Should help rectify your issue with changing functions in multiple places if implemented correctly
Given that description, I'd recommend going through something like the [PHP Practitioner](https://laracasts.com/series/php-for-beginners) course on Laracasts before jumping into a framework. It teaches you how modern, object-oriented PHP is written, and has you write you own little framework so you learn how it all fits together. 
My classes in Java (admittedly back in late 2k) has been a significant help in understand OO Design, allowing me to implement many principles within PHP. It gave me a huge boost on the PHP OO bandwagon once PHP finally started implementing real OO methodologies. I'd suggest Swift of C#, but they are platform dependent(*). Swift is a good language to get you a heads-up in the iOS (and MacOS) world. I don't know enough about C# to comment. Java is good for Android's world. JavaScript can be used for cross-mobile development, but often not as solid as their native languages. ^(* Ironically I do know I'm advocating PHP, which is "essentially" platform dependent as we're pretty much all on *nix systems)
I think it got a lot to do with what part you want to affect. There is a broad spectrum of applications for code. From hardware to interface. From a UI standpoint and thinking about asyonchronous code, javascript is definitely a good choice though. When going for problems closer to the hardware-layer, you should choose others though. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/laravel] [Should I start using a Laravel or do I need more experience?](https://www.reddit.com/r/laravel/comments/9na0hq/should_i_start_using_a_laravel_or_do_i_need_more/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Go is pretty interesting, they have interest ways of doing things that really turn around your way of thinking a problem through
I was in the same boat as you until around the start of this year. Exactly same approach, self taught PHP in a procedural way, built everything as giant monolithic if statements. I started learning Laravel via Laracasts and that has been really helpful. Using a framework has completely shifted my perspective from "it works, so that's good enough" to trying to write readable, presentable and simple code. So I would say it may help you "automatically" improve your coding style, if you fully embrace doing things "the right way". Before using a framework, I never used OOP/Classes and barely made use of functions despite using PHP for many years. I still struggle to understand the "flow" of data in OOP that was so obvious and easy to understand in procedural, but the power that it gives me is worth it. I won't be able to answer any super technical questions since I'm still newish to frameworks/laravel, but you can pm me/add me on discord if you want any help from someone who came into it the same way you did.
Scala taught me the danger of meta language and how insanely powerful a double-edge sword it can be. Rxjs is not a language but it's really powerful when you do advanced async stuff. There's a whole Functional Reactive Programming stuff around its core ideas.
This right here. Even the most *basic* principles of FP can really improve the quality of code, even when predominantly writing OO code. I didn't realize how brittle state tracking was until I started doing FP. The opacity of a method that reaches into `$this-&gt;` for its input or setting `$this-&gt;` for output became almost toxic to me. FP kind of nudged me to passing in input via arguments and always returning a value, rather than leveraging `$this-&gt;` for inputs and outputs, and it has made a significant improvement in the testability, readability, and understandability of my code. But at the same time, it improved my OO code because it made me think about what state should actually mean in the context of an object. It sharpened my definition of objects and their mutability. So I didn't avoid OO code as a result of my basic experience with FP, rather it made my OO code better. So having experience with both paradigms really helped quite a bit. 
It depends, there is clear answer for you. If you choose a framework like Laravel, it's very, very opinionated, which makes you develop in Laravel's way, whereas some others, such as Symfony since 4.x, will be discrete: it brings you a folder structure, a few components in core such as the dependency injection container, but does not forces you to write code in the Symfony way. You can use a more discrete framework it for pure configuration/service registration purposes and yet write a 100% custom code based application. Or just simply add the components you want to add bit per bit once you need or want to use it. Note that what I said just atop is not 100% true, Symfony with a minimal install is relatively discrete, you still have the kernel in front, and probably want to use at the very least its routing component; that put aside, you're free to do whatever else you want to do with it, even screw it up. There's many other frameworks, in the past I loved opinionated frameworks for their structure, but now I tend to prefer micro-frameworks with micro-kernels to be free to write domain driven code instead, in that regard, Symfony 4 is perfect, but many others will fit too. &amp;#x200B;
C
If you still cant write proper OO code, it may be too early to jump right into frameworks at this moment. You can get this book PHP Objects-Patterns-Practices and read through it, Id consider this one as a very good intermediate level PHP book for aspiring coders who are ready to make a leap from amateur procedural programmer into professional OO programmer. Once you understand all the concepts and practices from this book, and you are comfortable with OO in general, it will be a good time to begin learning/using frameworks like Symfony/Zend. https://www.amazon.com/Objects-Patterns-Practice-MATT-ZANDSTRA/dp/1484219953/ref=sr_1_1?ie=UTF8&amp;qid=1539267445&amp;sr=8-1&amp;keywords=php+objects%2C+patterns%2C+and+practice
&gt; Maybe my question is not clear enough. And this is why there's a box to fill out more than just a title!
&gt; but working with it as a developer is horrible Not really. I do custom shit all the time with it. A lot of times I even use Composer and namespaces and maybe a Symfony component or two if it makes sense.
C# is a very good programming language in general, Id recommend it for the PHP programmers who have never coded anything else outside of PHP(and Javascript maybe). It is also a good idea to take a look at Smalltalk, it is the purest OO language and PHP developers can get a more solid understanding of OO models and philosophy once they learn about Smalltalk. 
&gt; But look at the code. It’s complete unmanageable spaghetti. One, you never have to touch that so it doesn't really matter. Two, the group of highly skilled developers that do maintain it seem to be doing just fine. &gt; You can’t rationally argue that WordPress isn’t higher risk for e-commerce than other frameworks. You just can’t. I can rationally argue that every platform has pros and cons. And WP's pros far outweigh the cons. It's only insecure if you allow it to be. Basically it sounds like &gt; I don't use WordPress or know WordPress but a couple times I didn't understand it and it made me grumpy so I don't like it. That's you.
In general, it's good for every programmer to have experience with: * **C** - so many things, including your other languages, are written in either C or C++, and the models of how they operate (pointers especially) leak through a lot of abstractions. Knowing C makes a lot of otherwise strange behavior of other languages make sense. * **Java** - it's just everywhere. * **a scripting language** - you'll learn just how easy it can be to do things, and it's a great option to keep in your toolset for solving real-life problems. * **a functional language** - the different approach to mutability has tons of effects, and you can carry those techniques back into other languages. * **sql** - the "tell me what you want and I'll figure out how to get it" approach is very different, and despite everyone's best efforts, SQL is still everywhere.
Awesome tutorial, thanks.
Learning Laravel would definitely be easier than getting through this tutorial. On the plus side, if you get through it, you get a good understanding of a whole lot of PHP.
Sorry for the off, but downvotes??
Yes, it would be easier, but I don't think that's what the OP is looking for.
Golang 
Nice work! Glad to see that someone ported Twirp to PHP. We us something similar at work that we wrote before Twirp was released and it's made building RPC services a lot faster. I was surprised by how much of the server logic is in the generated code. In GRPC the generated code is pretty minimal and usually just defines the service + method names and what messages should be used for requests and responses ([example](https://github.com/grpc/grpc/blob/master/examples/ruby/lib/helloworld_services_pb.rb)). This seems preferable to me since the rest of the server logic isn't service specific and doesn't need to be duplicated and if the server needs a bugfix it's easier to composer update than it is to update the compiler and regenerate all of your code. Why does the server have to [eat exceptions](https://github.com/twirphp/twirp/blob/85409da894ade3b52bce1c2d40bc6bf0fc4ed69b/protoc-gen-twirp_php/templates/service/Server.php#L296)? In our framework the server accepts a PSR logger and we put the exception in 'exception' context key. That works pretty well since we can still send the exceptions to Sentry and the framework's global exception handler doesn't need to know how to return protobuf responses. It might be a good idea to wrap the [serialize call](https://github.com/twirphp/twirp/blob/85409da894ade3b52bce1c2d40bc6bf0fc4ed69b/protoc-gen-twirp_php/templates/service/Server.php#L216) in the try/catch block. A lot of errors we see are from data that doesn't encode properly and it's nice to return a properly formatted error response if that happens. It seems odd to have both PSR-15 middleware and hooks. We have just been using middleware and it's worked well. The only real needs we have had for middleware so far are authentication and profiling.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [grpc/grpc/.../**helloworld_services_pb.rb** (master → 73c99f8)](https://github.com/grpc/grpc/blob/73c99f890a42479bc82e2c0ab132a97cbcf8434a/examples/ruby/lib/helloworld_services_pb.rb) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e7ksk4n.)
For me it was learning c# and assembly. Knowing how the hardware thinks really helped me optimize my code.
Code, please.
In our course of "Principles of Programming Languages" we learn Scheme (a lisp derived language, for basic concepts), Haskell (for functional purity) and erlang (for concurrency). Apart from these, in my opinion any programmer should know the basics of C and have a minimal knowledge of assembly/machine code.
&lt;?php class Parent\_class{ private $name; } class Child\_class extends Parent\_class{ public function get\_name() { echo "get name &gt;&gt; ". $this-&gt;name; } } &amp;#x200B; $obj1 = new Child\_class(); // object created for child class $obj1-&gt;name='Bingoo!'; // value assigned to name (private) $obj1-&gt;get\_name(); &amp;#x200B; ?&gt;
You should keep in mind that this is using the DI component outside of the Symfony framework. This is like using Laravel's Illuminate Framework (or is it officially laravel framework now) outside of a laravel project. If you are using the Symfony framework, the DI container autowires most classes (it ignore Entities, and a few other sane folders where classes shouldn't need autowiring. This is easily configurable). It is very similar to Laravel's DI autowiring.
Not saying it can't work. But in my experience prebuilt software complicates longterm maintenance. Whereas a framework gives you more freedom to build only what you actually need. 
facebook is not using php anymore because it could not handle it...
thanks, i share it on php help
I was working in Python and C professionally for 3 years before switching over to PHP for 6 years then I moved over to GO (with a small amount of PHP) for 3 years and I'm currently working full-time with Crystal and advise junior devs on the PHP stacks we have. I can't say which language made me "*improve high level software architecting skills*" I think that is something that came over time and the language was pretty much irrelevant and I beleive it still is. You can apply most patterns to most languages. &gt; brought you to discover and use new mental I started with a Python and C combo so I'm kind of in a minority in the web industry but I have found (most) PHP devs don't understand or see the bigger picture. Yes then can write PHP code but have very little understanding of what it's actually doing under the hood so writing optimal code is trial and error until something works rather than understanding what PHP is doing with the CPU and Memory underneath. The difference being they are programmers not engineers. Any language where you have to manage memory yourself (like C) will help you with 'the bigger picture' no end. Also working in a limited hardware spec (embedded systems) will make you think out problems differently than working on servers with 128GB RAM and 40+ CPU cores. You can write really poor code and get away with it, what you write is mostly irrelevant until you hit massive scales which most people never encounter unless you're at one of the big players. &amp;#x200B;
Hey, mrcalm99, just a quick heads-up: **beleive** is actually spelled **believe**. You can remember it by **i before e**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". You're useless. Have a nice day!
Yeah, or programmers just need to actually read a full sentence instead of skimming everything.
This guy knows whats up
&gt;Perhaps try learning to use an MVC -MODEL VIEW CONTROL Since it's such a poor fit for web applications and isn't actually MCV at all I would stay clear of it and look at the ADR pattern instead which is a better fit for request/response software.
Oops. I forgot that tidbit but the result is the same. $ php test.php /test.php:21: class ChildClass#1 (2) { private $name =&gt; NULL public $name =&gt; string(6) "Bingo!" } 
As it shows in the example he has on his repo. this can be easily used out side of laravel.
Completely agree. I did this, and go is fantastic after you come to terms with its simplicity.
Dan Abramov said "Flux libraries are like glasses: you’ll know when you need them.". I think this is pretty the case now, when you feel it is fuzzy and you need more organization, this is the moment to bend and take a look at PHP frameworks. 
Not a chance. 
That's an interesting sentiment. I've never heard someone call it a poor fit for webapps. Additionally though adr is presented as an improvement over and on MVC, I'm not actually that clear as to how it is better. 
I spent 2 years working with Open ERP / Odoo which was written Python, and really enjoyed it. Its architecture is really well done. If you're an experienced Magento developer, I highly recommend looking at Odoo ; either as an ERP add-on to Magento, or as a complete replacement.
If you're considering other languages, take a look at Odoo / Open ERP. Its architecture and code is some of the best I've seen.
Racket
I've contributed to Elasticsearch's API and documentation. Using Curl over an HTTP library (e.g., Guzzle) is positively time-wasting, leading to the creation of excessive code for problems already solved. If your goal is to integrate Elasticsearch, then integrate Elasticsearch, not the entirety of the HTTP protocol with its associated errors and necessary conditionals. I'd much rather handle any exceptions thrown from within an HTTP library than check to see if the response string is empty and move forward. I stand by my opinion that using Curl for high-level application or integration work as being shit--maybe find yourself a sewer?
I’m in pretty much the same position, having moved from full time PHP to a 60/40 GO/PHP split I love all the things I used to hate about Go when I started using it: * It won’t compile if you assign variables that don’t get used * It is _restrictingly_ strictly typed by design which forces you into an idiomatic Go solution * The GOPATH (though this is becoming less relevant) means all your code is predictably located on your computer However I do miss composer, dep wasn’t as good (and I’ve only just started working with modules)
Hope you enjoyed wasting your time with this spagette code when you could just use the convert command.
Something amazing about Laravel, it's architecture is just wonderful. &amp;#x200B; Dude, if you really have the correct mindset, using Laravel is going to help you a lot. You're going to see how Taylor as built laravel, learn the patterns he use in there. But the important thing is: you must be curious about it.
It really doesn't have anything to do with PHP/backend at all. Though it can be good for Drupal devs, especially those adopting legacy projects. This should probably be on just /r/webdev or something in general. 
So working backwards from the models to the languages... Procedural: C. Object-oriented: Java. Functional: Clojure. 4GL: SQL. Visual: ToonTalk. Concurrent: Elixir. This list is obviously heavily influenced by my own experiences, so think of it as a list of paradigms and potential languages in those paradigms. The one that offers the most, IMO, is Clojure.
Go is one amazing language, I’m working with it last 6months and every time it’s my turn to code with go I’m so excited 
Are you me? This sounds like the path I took. I hardly touch PHP if I have a choice, it's good for doing quick sandbox testing, but beyond that I haven't written a production app in PHP for a client in probably 3 years, and that's only because the client requested that it be written in PHP.
Thanks, I thought that too. I'm in fact using Laravels Container in a project outside of the framework. Autowires out of the box, perfectly. thanks!
Rust Lang
You're creating the $name property in the child class. You did not use the parent classes $name property. It is not necessary to define the property first, you can add any property just by setting it.
&gt;Do you always need to run two servers, one for node and one for php? That's quite obvious when php is only set as an API, but is it the case in general when using these js libraries for front-end? No, if you're using Vue or React on the frontend there's no need to run a Node server for them. The files can be served up to the client by the server running you API. I'm not sure exactly what you mean by PHP "only set as an API". &gt;Vue or React can also do server-side rendering. Does that work alongside php? There are ways to do [server side rendering with PHP](https://packagist.org/packages/spatie/server-side-rendering).
just been learning this lately and so far it's pretty cool!
I've wanted structs in PHP for 20 years. Some of (most?) the internals guys seem to reject every RFC that comes up.
Nah...you're pretty much in the opinion territory. The good news is you're not alone. 
Aren't structs just objects without methods?
I'd also highly recommend that tutorial. My approach would be to go through it step by step and try and understand as much as you can (Googling anything you're unfamiliar with that it doesn't explain and referencing the PHP docs where appropriate), but don't get too hung up on anything you struggle with. Once you've got to the end, install Laravel or Symfony and build something with a few entities, basic user authentication logic (maybe a blog, or a todo list) and then go back and read through the tutorial again to see how it links in with the structure of whatever framework you've been using. If you have only basic experience with PHP and then start using a framework you will certainly be able build things, but there will be a lot that remains a complete mystery and when things break you'll have a harder time understanding why they've broken. Patrick's tutorial takes you through the basic building blocks of most web applications and the general structure will be similar to most modern frameworks, giving you a big boost in your understanding of how they actually work, from the moment the request hits the web server until the time it returns a response. If you want to dig in to Laravel, I would highly recommend Adam Wathan's [Test-Driven Laravel](https://course.testdrivenlaravel.com/) course, which will give you an in depth look at Laravel combined with a strong grounding in test-driven development. 
I think every programmer should know one of each of the following: - Perl/JavaScript - Erlang/Scala - Lisp/Scheme - C/C++ - SQL/XSLT/Prolog Each language highlights a different perspective or aspect of programming and I think any programmer that knows how to approach a problem from so many different angles will be very versatile. 
Probably depends on the language. I've really only used structs in Swift which have a few differences from objects. Swift structs are value types instead of reference, and can be made immutable by creating them with const.
May I Please ask you to expand on when using -&gt;this is toxic and white? Also what are some of the circumstances that you would use -&gt;this in practical terms?
Somehow I felt that bonus is more important that getting a hang of js hell :D 
[***ANGERY SUBWAY SHOUTING INTENSIFIES***]
I fully agree with you!
Story time! During an *interesting* Twitter discussion today, [this was cited](https://symfony.com/blog/security-releases-cve-2013-5958-symfony-2-0-25-2-1-13-2-2-9-and-2-3-6-released) as an argument for limiting password length to prevent DoS attacks. The table in that document seemed odd; 55 seconds for 10,000 iterations of PBKDF2-SHA256 is, frankly, unreasonable. My immediate hypothesis was "poorly-optimized polyfill". Michal Špaček confirmed that [this was, in fact, what was happening](https://gist.github.com/spaze/7392b0e40d8f568db0b4c8f3cff5c86e). I demonstrated a trivial fix, which is what the linked pull request captures. I'm sharing this here on /r/php for three reasons: 1. To encourage people to update `symfony/polyfill` as soon as this PR is merged and the new release is tagged. 2. To dispel the harmful and wrong "long passwords -&gt; DoS risk" myth. * This was only ever the case with badly-written PBKDF2 implementations. It was never true of e.g. Argon2id. * In general, you shouldn't really provide an upper limit on password length. If you must provide one, I recommend 65535 as the minimum allowable upper limit for any implementation. If you have a DoS risk because you're using PBKDF2, fix that instead. 3. To prompt other PBKDF2 implementors to verify that they didn't write a DoS-vulnerable implementation in their own projects (and, if so, to fix it). 
So..... if I'm working on a website I will almost always use a framework because it just sets things up for me going forward in a nice clean way and I don't really have to worry about anything. But if I'm doing a quick one off script on my computer I'd just use raw PHP. For example on Monday I had a torrent crap out at 80% because there was no seeders for the rest of the data so I found another torrent with the exact same files but the files were renamed to contain underscores instead of spaces so instead of redownloading I started the new torrent, stopped it at 0.1%. Copied the files over. Then wrote a PHP script to rename all the files. Then I had the torrent rechecked and it was able to resume with no issues. That required no framework at all. Basically...... it depends.
I’d go for Scala purely cause I here it’s mad money.
I would recommend against laravel. I'm currently migrating a large laravel 4.2 app to 5 and it's a bloody nightmare - previous developers picked a great deal of very bad habits (facades, massive models...). Typical laravelisms that you as a rookie developer will likely be picking up too. 
Install Laravel, watch some Laracasts and just go, you’ll pick it up as you go along
Your logic is backward. My outlook is based on objective fact - WordPress being used successfully for many many years without issue, along with millions of other highly trafficked sites. Yours is based on "I never use it but the code is ugly". 
Sure. Consider these two versions of the same class: class RangeValidationRule implements ValidationRule { public $min; public $max; public $errorMessage; public function isValueValid($value) { return $value &gt;= $this-&gt;min &amp;&amp; $value &lt;= $this-&gt;max; } public function validate($value) { if ($value &lt; $this-&gt;min) { $this-&gt;errorMessage = "Value was smaller than allowed minimum"; } if ($value &gt; $this-&gt;max) { $this-&gt;errorMessage = "Value was larger than allowed maximum"; } } } This has several problems. ##1. Both public functions lie to you. They take *some* input as state, and some as arguments. If you instantiated a new `RangeValidationRule` and didn't set the `$min` or `$max` properties before calling one of the public methods, you'd get buggy output. ##2. There is no validation of the validator! What happens if $min is greater than $max? What happens if one is a string and other is a number? You have no control over this. You just have to trust it was hydrated with the right values. ##3. The object carries state Can you spot the bug here? If you did this: $validator = new RangeValidationRule; $validator-&gt;min = 10; $validator-&gt;max = 100; $validator-&gt;validate(134); if ($validator-&gt;errorMessage) { var_dump($validator-&gt;errorMessage); } $validator-&gt;validate(50); if ($validator-&gt;errorMessage) { var_dump($validator-&gt;errorMessage); // this is still set from the previous time it was run, even though this validation passes } You may be thinking "*Well duh. In the `true` case, you just have to remember to reset the `errorMessage` property back to null.*" And therein lies the problem. You have to remember to undo your state changes. This is error prone, and bugs occur from this kind of thing *ALL THE TIME*. No developer is immune to it. Relying on state like this is just setting yourself up for failure. ##4. The api is just bad This kind of statefulness begets a bad API. First you have to call a validate method and THEN you have to obtain its output separately? This "two step" disconnect is just weird and unintuitive. ##5. The object is mutable, and is not guaranteed to be valid Even if you did initialize the $min and $max properties when you first constructed the object, because they are public, they could change mid-way through the request. Not that you would have a strong reason to do this, but it *could* happen, and thus now things are broken. It starts giving you different results. And since objects are passed by reference, you could end up passing this object into some service that mutates the $min and $max values, and now spooky action at a distance happens whereby you're not getting the results you expected. This means you now have to trace *EVERY* location where this validation rule is passed in, to see where it's being mutated (if at all). Now consider this refactor: class RangeValidationRule implements ValidationRule { private $min; private $max; public function __construct($min, $max) { // you can validate that $min and $max are both valid arguments, to ensure object correctness (e.g. that min is less than max, and both are numbers). $this-&gt;min = $min; $this-&gt;max = $max; } public function isValueValid($value) { return $value &gt;= $this-&gt;min &amp;&amp; $value &lt;= $this-&gt;max; } public function getValidationError($value) { if ($value &lt; $this-&gt;min) { return "Value was smaller than allowed minimum"; } if ($value &gt; $this-&gt;max) { return "Value was larger than allowed maximum"; } } } Now everything is pure. Once the `RangeValidationObject` is constructed, it is immutable. You don't have to worry about it changing. It is also self-validating. You can check that $min and $max are what they should be, and the constructor gives you the opportunity to throw an exception if they are not. Even though both functions still do rely on internal state, it's *immutable* internal state. You can reliably call `$validator-&gt;isValueValid($value)` and `$validator-&gt;getValidationError($value)` without any fear that it will blow up or give you weird results. The *object itself* is almost like a pure function, and is analogous to a couple of pure function like these: `isValueInRange($value, $min, $max);` and `getRangeValidationError($value, $min, $max)`; What helped solidify this concept in my mind was when I understood what a pure function was from FP. Once I did that, I then strove to have "pure objects" like the example above when writing OO. 
I have 18 years experience with PHP and have been coding since 1982. I expanded my understanding of software architecture the most by reading about software design patterns, specifically the book “Design Patterns: Elements of Reusable Object-Oriented Software” by Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides, otherwise known as the Gang of Four in the design pattern world. Learning how design patterns can solve basic commonly reoccurring problems is essential to understanding and building complex software applications.
&gt; Your logic is backward. My outlook is based on objective fact Nah. I can point you to piles of reports about WordPress vulnerabilities. The fact that Cloudflare has dozens of WAF rules just for WordPress is a great indicator of WordPress' health from a security standpoint as well. &gt; WordPress being used successfully for many many years without issue Anecdotes don't actually prove your point. &gt; along with millions of other highly trafficked sites This thread is talking about e-commerce sites, not Soccer Mom Blogs. There are not millions of people stupid enough to run WordPress for e-commerce. I'm not interested in debating the merits of WordPress as a CMS. That's not what this thread is about. This thread is about modern e-commerce apps, and WordPress is a terrible fit for that bill. &gt; Yours is based on "I never use it but the code is ugly". No, that's only what you're hearing because you don't seem to like the truth. The code is ugly AF, but it's also insecure garbage. Everybody knows it. It's not some kind of secret. If you don't mind running insecure garbage for your Soccer Mom Blog, sure, go to town. But the notion that it's acceptable to run WordPress for an e-commerce site is fucking absurd, and if you think this is an acceptable idea, you should be banned from working in e-commerce.
I believe it would be easier only at the beginning. Then, whenever you wish to learn another framework, or start writing SOLID code, it would be a hell of a lot harder.
What, how can you depreciate things like ? - apache_request_headers() function - __CLASS__ constant - array_key_exists() with objects - get_called_class() function this is madness. the change of the count() function was HUUGE mistake and now this? 
The count() change was big change that was unnecessary and broke huge amount of software. Its still breaking new software as developers are used of the old habit on relying on the count() function. I have even seen developers with 10+ years experience to to use the count() as before and making bugs on new php versions. 
Copy-on-assign classes would offer some nice flexibility. 
That's what PHP should have had all along instead of Java style classes.
Nope, Go has struct methods.
Visual Basic for Applications
&gt;Nah. I can point you to piles of reports about WordPress vulnerabilities. The fact that Cloudflare has dozens of WAF rules just for WordPress is a great indicator of WordPress' health from a security standpoint as well. You say that as though every system doesn't have vulnerabilities or that a vulnerability can't be taken care of. Security is a balancing act of risk/reward regardless of what platform you're using. &gt;Anecdotes don't actually prove your point. Then look at the 42% of all online stores that are powered by it. Having said that, the fact that millions of websites that use WooCommerce do just fine, proves that a) it's not anecdotal and b) it's not absurd to use. Dunno what you're on about with the Soccer Mom bullshit. If you can't build your case with strawmen arguments and hyperbole then you need to revisit your arguments. &amp;#x200B;
Go fanboys spotted again. There was a time when this subreddit had such bullshit like 'Go is going to replace PHP', 'Migrating from PHP to Go', and 'Why you should learn Go as a PHP Programmer'. Glad its not as much overhyped nowadays, though we still see fanboys like you every now and then, kinda annoying if you ask me. 
I don't need to build a case about why WordPress is insecure garbage. The whole world knows it except for you, apparently. 
Go being overhyped again, some things never change I guess. Some fanboys just wont accept the fact that it will never be the next Big thing, its far worse than Node hype since at least Javascript is popular and Node may deliver. 
"I've run out of hysteria, bye".
MiniZinc.
You should ask this in /r/phphelp.
Haskell _might_ get linear types, as a first non-prototype language (Rust has affine types). Linear types are interesting because it enables a lot of fancy type trickery, like typestate, session types, etc., so that's something I would consider looking at. Otherwise, learn C and have a look into the PHP internals.
Thanks a lot, /u/shindaseishin . Didn't know about /r/phphelp
Why do quite lot programmers/developers not take PHP seriously? I sometimes see memes about PHP... And I don't see them about another languages. Or it's only in my head?
Check out the performance differences between arrays and objects in PHP. IIRC, there's basically no difference, meaning objects can work as structs.
I'm not sure I understand the fix. I get that pre-hashing removes the problem of the length being too great, but doesn't that change the final output, i.e. breaking verification against hashes computed before this fix? I might be missing something obvious.
Nope. If the length of the key is larger than the digest size, HMAC will prehash the key first. You get speedup without breaking BC by prehashing the password (which is used as a HMAC key in each PBKDF2 iteration).
Oh, interesting. Didn't realize HMAC did that. Makes sense. Thanks!
Depends on your use case. [Pricing](https://www.shopify.com/pricing?term=shopify&amp;Network=Search&amp;SiteTarget=&amp;mt=b&amp;adid=213707809833&amp;adpos=1t1&amp;CampaignId=788843257&amp;branded_enterprise=1&amp;gclid=Cj0KCQjw6fvdBRCbARIsABGZ-vTbkcAgd0wF4JIn6kdkeAE6nX-Qd0xTbupcCGXUrrKXIaRDvtHeg3caAqvgEALw_wcB)
Would you mind providing a link to one of the rfc's? A quick search for "phone struct rfc" turns up nothing related too structs.
That's what http://php.net/hash_pbkdf2 says. `$length` defaults to when it's not specified but none-the-less they're not giving the same output. Seems like they ought to. And I see why the polyfill isn't. Because `$length` is 0, `$blocks` is 0 and because that's 0 the for loop never iterates. But that doesn't change the fact that the outputs aren't matching when it seems to me that they ought to..
Slim: https://appelsiini.net/projects/slim-jwt-auth/
Could you give me some use case for you ? I tried golang a bit but doing websites with it felt unnecessary hard compared to PHP with laravel or symfony. Couldn't find a way to use it for my projects.
Indian.
This attitude of disregarding an industry-standard software due to personal beliefs about it's relative lack of security is what's, frankly, idiotic.
Still wasn't working for me with the test script I wrote. It does, however, work if I add `$length*=2;` in the `if (!$rawOutput) {` statement. That said, I note they're using `bin2hex`, which isn't constant time. You have your own alternate implementation of `bin2hex` in https://github.com/paragonie/constant_time_encoding I note... maybe the PR should be updated to use your libraries implementation? idk
I note you made a separate PR with unit tests... you said "_it should pass before and after this is merged_". idk that it should, tbh, given the issues I'm finding..
In my experience, the advantages of each approach shows in time. E.g. concat is easy to start with, but hard to read by sb else later. What are your experiences with these 3?
I'd say Shopify is great as a backend - their frontend is somewhat limited and slow. That said, it's pretty easy to add a new frontend (e.g: a Vue PWA) 
#NO GHOSTING (I don't recall the origin of this, maybe Community?)
I've been using in-string a whole lot lately, especially since moving to PHPStorm. It syntax highlights mistakes pretty effectively so it's not all that hard to make sure I didn't screw up. It changes the color of the variables in the strings if I use double quotes, doesn't change the color if using single quotes, for example. I've found myself refactoring old strings to use that format a lot too, ends up more readable in general. It's just a cognitive chore to deal with reading concats because of the reasons you listed, potential mistakes with spaces, etc.
I was surprised I didn't see Java sooner because the title specifically mentions "modeling." I guess if you felt like being more flashy you could go with Kotlin or something like that as well which is compatible with Java.
I don't even like Go but the TIOBE isn't the best indicator of actual popularity and replacing PHP (or failing to do so) isn't the indicator of success for other languages. Go's used in some fairly non-trivial projects that are likely to stick around for quite some time even if only on that momentum, and it has a big corporate backer that's going to push it forward. 
`{$juice}` just to keep it consistent. sprintf is nice to use when formatting numbers and stuff, but pretty pointless when all you're using is `%s` everywhere. About concat, I only use it for constants, since you can't interpolate in string!
sprintf is a sure overkill, I guessit's only used as a habit coming from other languages. The only use for it is when you need a predefined template. The rest is a matter of taste, but I prefer interpolation as not to be dazzled by numerous quotes.
When you want to start up something in PHP for example ill like start XAMPP. How do you get started with everything for GO? like local dev and starting it up. When i have tried to google it it's very low level compared. Just looking for a place to start a simple webserver.
String interpolation is the way to go in PHP, it is very convenient to use, it is easy to read, and it’s about as fast as string concatenation. PHP has very good support for string interpolation, and nowadays many other languages are adding string interpolation in their language as well, ie C# and Javascript. sprintf is an overkill in most situations, it’s useful when you need to format some variables like padding 0. It’s a function so I suppose it’s slower, not a big problem but overusing it in large loops can hurt. String Concatenation in PHP though, can lead to hard to read code due to the choice of operator dot being used. It may be my biased opinion, but sometimes I have a hard time figuring out whether it is the concatenation operator or a period character used in a string, especially when they are actually used together. This mental overhead leads to my favoritism in string interpolation for PHP, it’s not a problem if the operator is + as in languages like Java, C# and Javascript. 
There's not a single word about Go being the next big thing in the post you're replying to though
 Hospital management system project in php. hospital management system project manage for hospital system. hms system is manage adding new doctors and user can new listing of doctor , manage patient records managing appoiments can be through patients id and doctor id 
"It is *restrictingly* strictly typed by design which forces you into an idiomatic Go solution" Types in statically checked languages like Go, are there to represent (business) logic constraints on code. Them being idiomatic or not is not really a concern. What matters is that the cost of creating and using them is smaller or bigger then benefits of being certain those constraints are fulfilled. So, when comparing Go and PHP we should see which constraints have more favorable cost/benefit ratio in either of them. That and also what useful constraints are more costly because type system is insufficient to encode them in Go or PHP.
\`XAMPP\` is not needed for PHP development. PHP have built in dev server. SQLite is perfectly good RDMS for local development. &amp;#x200B; It's only when you need environment similar to production that you would want web server, db, and what not.
I agree. Keep consistency with \`\_\_CLASS\_\_\`. Also, it's fewer characters to type than both \`get\_called\_class()\` and \`static::class\`.
Learning Python for scripting and React JS because I want to try what some of what these JavaScript people are smoking.. 
Same here, there was no apparent reason for me to learn Go.
And don't you find Magento 2 more easy to use and develop? &amp;#x200B; Magento and PrestaShop are both based on Symfony framework. &amp;#x200B; If you're used to develop in WP you should try WooCommerce. WooCommerce cand handle big traffics better than a few years ago. This product progressed a lot. You should give it a try if you want to develop extensions/templates in just a few steps. WooCommerce is not for small shops as it used to be. It can scale very well.
For me, it depends on the case. It's all about readability, so the best option depends on the circumstances. In general I tend to follow the following rules: 1. If it's a variable at the beginning or end of a string, then concatenation is fine. Concatenation is never fine in middle of a string. 2. If all the values have been assigned to variables, then string interpolation is fine. If you need complex variables, then think again. 3. If values in middle of a string are return values of functions, then `sprintf()` tends to be most legible. Also, some of the formats are super handy, if you learn them. So, in short, my code could have following different formats: 1. `$foo = 'List of numbers: ' . implode(', ', $numbers);` 2. `$foo = "list of numbers: $numberList";` 3. `$foo = sprintf('List of numbers (%s)', implode(', ', $numbers));`
I never said it was needed for PHP development, it starts a local apache server. And im not looking for a local development database to support PHP. &gt;How do you get started with everything for GO? I want trying to ask how you run your Golang enviroment.
Psst @sarciszewski I prompted you about this PBKDF2 DoS 3 years ago! :D https://twitter.com/htimoh/status/670523989182255104
About non-constant-time bin2hex usage, it doesn't matter here. There is no need for bin2hex to be constant-time as it is not leaking usable information (at least in no practical manner). So security wise it is not required.
so you confirm my statement, but still im downvoted. k then :) 
Concat is creating a massive amount of malloc calls, in-string is just a security problem to happen. It all ends with sprintf anyways, when you need to deliver content in multiple languages.
Contact is not the same as concat
C or any low level language should almost be mandatory for programmers in my opinion. I once got into a discussion with a js dev about how to calculate the digit sum. He insisted that parsing that number into a string, then splitting it into an array and then reducing that array into the solution (involving another round of casting) is faster than doing it with a loop that adds the mod 10 remainder to the result. After pointing out the memory footprint of his solution and that the latter is nothing but simple mathematic operations that cpus are optimized for he then insisted that there's no 'mathematical equivalent of "convert this number to a string"' and so on...
Yep, this highlights my point above which is mostly people in the web industry for some reason. People know the syntax and know how to use the syntax to get to an end result but have no idea of what it's actually doing with the system to get there. The level of understanding computer science in the web space is very few and far between.
&gt; That's an interesting sentiment. I've never heard someone call it a poor fit for webapps. I'm amazed you've never heard or researched into it before it's been heavily discussed. MVC was designed for GUIs for desktop applications, it's a user interface pattern not a architecture pattern, it simply doesn't fit with web applications. /u/pmjones has written at length about it a few times. Here are some good resources if you wish to read up on the subject. [https://web.archive.org/web/20160324211929/http://aredridel.dinhe.net/2015/01/30/why-mvc-does-not-fit-the-web/](https://web.archive.org/web/20160324211929/http://aredridel.dinhe.net/2015/01/30/why-mvc-does-not-fit-the-web/) [http://paul-m-jones.com/archives/6288](http://paul-m-jones.com/archives/6288) [https://www.linkedin.com/pulse/why-laravel-mvc-framework-you-should-forget-kali-dass](https://www.linkedin.com/pulse/why-laravel-mvc-framework-you-should-forget-kali-dass) But don't just take the words of the above profesionales why not hear it straight from Roberts Martins mouth (the guy who wrote Clean Code, Object-Oriented Programming and Clean Architecture amongst others). [https://www.youtube.com/watch?v=WpkDN78P884](https://www.youtube.com/watch?v=WpkDN78P884) &amp;#x200B; &amp;#x200B;
[sprintf](http://php.net/manual/en/function.vsprintf.php) sprintf for array
Benchmark it yourself and you will see.
First of all, I will not benchmark this shit as it will never be a bottleneck of my PHP application. Besides, I don't see how benchmaking could prove statements 2 and 3.
Sprintf all the way!
Easy to write, read and maintain. Also works with objects: ```php $data = (object) [ 'name' =&gt; '0b', 'task' =&gt; 'lol', ]; echo "Hi {$data-&gt;name} have a {$data-&gt;task}"; ```
Is this sarcasm? I can't tell.
The best thing I discovered recently: \- proofs the tests are making sense and finds un-tested scenarios \- helps to find questionable and dead code &amp;#x200B; Might be quite slow, but the parallelization option helps to keep it fast.
I love `sprintf`. You have a template, you have data, and you have a function to bring them together. It's a nicer separation of concerns than $blah.$blah.$blah.$blah IMO.
Positive, mutation testing helped me to write a more effective tests, I am using https://infection.github.io Sometimes I encountered situations where is impossible for me fix the mutant escape, most frequent mutation with === and == operators.
Thanks for sharing this. What do you mean by "for keep it consistent"? You can choose any approach and keep it consistent, right?
You can also just write „Hi {$data[‚name‘]}, have a {$data[‚task‘]}“; (sorry for the quotes) Important are the {}, you can even call whole methods „Title is {$post-&gt;getTitle()}“ I don’t really understand why it’s so rarely used. Maybe many people don’t know about it.
Do you have some overkill example (except the one mentioned in the post)? How would you write PHP code for message with quotes, methods calls and 3 arguments with interpolation?
lmfao
If readabiliIty would be my ultimate goal, I would assign the method call result to a variable, so a sentence would read as "Hello name, your age is age and gender is gender" rather than "Hello %s, your age is %s and gender is %s". As a template for the future evaluation sprintf is perfect. You could store it in a database and fill with the actual data later. But for the inline use it's too verbose and gibberish. 
I've used mutation testing recently and loved it. Infection works really well.
Only if your data is in an array ;)
I'm one of the people that actively works on `infection`, so i can share that in `0.11.0` the === to == and !== to != will be disabled by default. &amp;#x200B; For now you can add the following to your `infection.json` to disable those: ``` { "mutators": { "@default": true, "IdenticalEqual": false, "NotIdenticalNotEqual": false } } ```
I like the idea, but it's unbearably slow even with phpdbg.
Great! Thanks!
[@htimoh's latest tweet](https://i.imgur.com/NMXPFkp.jpg) [@htimoh on Twitter](https://twitter.com/htimoh) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Yeah, obviously. I just wanted to make clear that you don't have to convert it to an object to use the interpolation.
https://infection.github.io/guide/usage.html the json is missing a comman on the "phpUnit" key
Depends on what I do. Usually I use interpolation with brackets (I always use the brackets) "Hello, {$name}" "Hello, {$user['name']}" "Hello, {$user-&gt;getName()}" When I need to put constants or function return values in there, I mostly use `sprintf()` or `vsprintf()` throw new \InvalidArgumentException(sprintf( "Argument 1 of %s-&gt;__construct needs to be string, %s given", MyClass::class, gettype($argument) )); When I have a bunch of things that all need to be joined in the same way, I use `implode()`. implode(', ', array_map(function (User $user) { return $user-&gt;getName() }, $users); I rarely use concatenation and try to avoid it, as it's annoying to read.
The more tests you have and the slower your tests are the worse it is. That said you can apply it only on the changed files to make it faster
And it also allows to more easily translate the strings. 
Your message id generation is broken and allows me to destroy all messages without even needing the password.
This is something I discovered not so long ago and I have to say that this is amazing. It allowed to improve my tests and my code obviously. See examples on my latest stuff: * https://github.com/drupol/valuewrapper * https://github.com/drupol/htmltag * https://github.com/drupol/arraycollection (heavy WIP)
So many good options. If you plan on continuing to write PHP, I'd say Rust would actually make a great choice, if you're willing to put in the time to struggle through the borrow checker stuff. There are two reasons I think Rust will make your software skills better (especially in PHP): 1. Immutable variables by default. Working with immutable variables for a while will make you cringe when you go back to PHP, Java, or JS. But it will make you much more mindful of how you isolate mutable state, which is a huge win. 2. Traits. Rust Traits are like PHP interfaces, but way better. And structs can be made to satisfy a trait separately from their definition, which makes you realize how brittle things are in PHP/Java land. 3. The Iterator API. Things like map, fold, filter, etc will make your code much more expressive than using for loops. You'll probably come back to PHP and use array\_map() and friends much more. You can get some subset of the above from other languages like Kotlin, Go, Swift. But Rust has all of the above and it's really great.
I've been working on a project where I had to wrap objects to be able to compute a hash properly. I had the idea to create this a library fully tested so it can be included anywhere. Feedback on the code is very welcome.
&gt;mcaffee webadvisor why ?
&gt; how ? Because `$id_message = rtrim(base64_encode(md5(microtime())),"=");`is not random. And because there is [a hard coded password](https://github.com/guillaC/privateNote/blob/master/func.php#L13) set.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [guillaC/privateNote/.../**func.php#L13** (master → 377bc22)](https://github.com/guillaC/privateNote/blob/377bc22814bff34b6fec80c62e3a3795e4fd8f03/func.php#L13) ---- 
Congrats on taking some time to finish a project. From now on you'll live in the exciting phase of improving it, enjoy the ride :-) * Mixing HTML and PHP is a bad practice, you should separate your logic from your presentation. Also the database layer is mixed with some part of your logic. * Because that the code is hard to read/understand/test. * No unit testing.([http://softwaretestingfundamentals.com/unit-testing/](http://softwaretestingfundamentals.com/unit-testing/)) * Forms doesn't have any kind of security ([https://stackoverflow.com/a/33829607/4026091](https://stackoverflow.com/a/33829607/4026091)). * \`$id\_message = rtrim(base64\_encode(md5(microtime())),"=");\` So, I can spam you server to get all the unseen messages }:-). Add something to the mix that can vary on every message, like the content itself. * Passwords over GET. * I don't like having to pass the DBAL connection to all functions.
In-string variables all the way. Bonus points for mentioning my fixer :D For those wondering: it's in PR, currently scheduled for v2.14
I understand. When we had an ecommerce site I chose XCart preciously because it was totally customizable. But I also acknowledge that it wasn't for everyone. Good luck in your search.
For your second question, in PHP I do not know any framework giving out of the box solution for SSR, but I know [https://github.com/phpv8/v8js](https://github.com/phpv8/v8js) that could help you give this first load boost of SSR, so you could stick with PHP only if you whish.
Thank you
updated, ty ;) 
I see the most hate toward PHP and JavaScript. PHP used to be a *really* terrible language before version 7. Now, after version 7 it is a passable language akin to Java from 2011. So it's still not great, but it's not quite as much of a nightmare as it used to be.
impossible to generate TRUE RANDOM, no ?
how to fix the problem ?
Adherence to [PSR-1](https://www.php-fig.org/psr/psr-1/) and [PSR-2](https://www.php-fig.org/psr/psr-2/) would help readability a bit.
&gt;Isn't there some way to get this done with something simple? I wish there was. But no. You need all of these to have a working upload + delivering resized pictures to your web app. It's not that complex to setup actually, bundles are quite straight forward to use and well documented. These bundle are also battle tested and carry lots of experience. Sadly, you will always hit this edge case and get pissed that they don't cover it. But that would be worse with any other more custom made systems. &amp;#x200B; The only alternative is paying to get all this shit done.
&gt; But if I understand Go, it's set up like C. The methods aren't attached to the struct. They are methods that take structs as an argument. the implementation details do not matter. Some languages like Ada for instance, support uniform function call where foo.bar() == bar(foo) .
On one side of the spectrum there is true random. On the other side is not random at all (which is your solution). There is a whole lot in between and luckily PHP comes with a proper cryptographically secure pseudo random byte generator out of the box so it's users won't make mistakes: http://php.net/manual/en/function.random-bytes.php
Dumb question, but Go and Golang are interchangeable, yeah?
&gt;$message = 'Hi, my name is $name'; this is gonna end well...
&gt; Hi {$data['name']}, have a {$data['task']} you can even leave out the quotes: "Hi {$data[name]}, have a {$data[task]}"
I was *going* to say that, but realised that the order of the parameters is still important in `sprintf`, unless there is some way to use the parameters out-of-order? Translatable strings always need to be able to use the parameters in any order the various translations require.
they are passed by reference, structs arent
Yes, the arguments can be numbered, like so : ``` &lt;?php $format = 'The %2$s contains %1$d monkeys'; echo sprintf($format, $num, $location); ``` But it adds to the complexity of the initial string, and after all, in-string variable is way better in this use case.
Do whatever will make you productive because doing is learning. If it were me, way back then in experience, but with today's options, Symfony 4 would have been amazing to both learn from and be productive with.
Also those examples are using single quotes with variables in string...
At least read the rest of the article jesus christ
Nah it's poorly written.
It has been posted before... https://www.reddit.com/r/PHP/comments/9l8yat/codeigniter_400alpha1_released/
Well, you can, but I really wouldn't. I see it as somewhat real expressions and `$data[task]` is not a valid PHP expression if you don't explicitly want to get an index that is in the defined constant `task`. I am aware it doesn't throw an error, but personally I think it should, just like `echo $data[task];` would.
Check out this post and you will be amazed how funny Go fanboys sound like: https://www.reddit.com/r/PHP/comments/9n9jlj/ask_php_what_second_language_would_you_learn_if/e7kwgwe/
Go is just too much hype, it has a few use cases but its never gonna be the next big thing. Go fanboys will just advocate it as if its gonna be the next Big thing like C++, Java, PHP and Javascript once did. They are never going to face the reality, may as well just let them live in their teenage dreams. 
but, why?
The general idea is that you relabel the field to be something that, if a human were to see it, they would think they needed to fill it in, but since a bot doesn't necessarily make that distinction, they actually do fill it in, thus invalidating the form. Yes, it's a trick, but a useful one that plays on the idea that most bots aren't very sophisticated. Sneer all you want, butt it's a zero-cost trick that can be used alongside a captcha. Note: captchas have already been defeated by bots.
I once made a long running task in php and the way progress was tracked was with redis, the script updated its progress into redis whenever it advanced through the remaining work, and I had another endpoint that retrieved the redis data, then In the frontend I used polling intervals to give the user updated info. If you don't want to use redis you could write progress into a file and poll the file every n seconds.
You might want to look at Common Table Expressions (easy to write subqueries) and Windowing functions. They really transform SQL 
The memories! I was a long time user of the framework until I left PHP. Can't believe it's still alive!
I've written many bots and to think a "hidden require field" has \*any\* protection is laughable, Sure if you want to fill your html with junk that has 0 use. It's as good as putting a paper sign on your front door saying "please don't rob me". Signup bots pass this with ease. But whatever. get downvoted and people will become reliant on logic that is flawed from the get-go.
Man, this takes me back. 
I've only just started using it, but it has been useful in verifying the quality of my tests.
You're inviting all sorts of unnecessary pain if you're playing with different processes in the context of a web request, at best your web server may murder the process if it runs too long, and at worst all it takes is a coding bug or your cat to stand on the F5 button to murder your server. Instead, set something up on the back end as a chon job. Personally I prefer to leave them running constantly, polling a redis queue, performing any jobs, and then sleeping for another 30 seconds in an infinite loop (plus some restart code to make it break out the loop). You can push any updates you have into a redis list and pull them whenever you end-user polls the server again. 
Nice catch! Can't edit title though
Working for a company and we have a Laravel based web-app. It's been a big learning curve as I'm a junior dev at a very small company with my only mentor being the contractor that has written the app so far. I'm about a month in and things are making more sense, I've been able ton contribute a bit but am open to any resources that might make it easier to understand what I'm doing. (Not very familiar with PHP or MVC frameworks in general). We currently don't have a test suite so any information to help that come to fruition would be awesome.
&gt; Instead, set something up on the back end as a chon job. Oh that is a great idea, thank you!
sounds like a serializer, no? 
While certainly useful, this is quite a large gun aimed at your foot from a security perspective. Really depends on the source of the array.
And of course, there is the full ADR pattern offering at http://pmjones.io/adr
You could also store some basic data in the database or lock files that the script makes, checks for and deletes to prevent a script from being ran multiple times in a row. It would also mean you don't have to run it on a Cron job. If the user refreshes the page, just show them the log and skip the script initialisation
Being a binary file, a MySQL database would not be a great fit for storage in git. Most projects that I have worked with, there is a testing/staging server that you connect to. But, with the source code repository, there is a small MySQL dump file that you can use to init the database to a usable state. &amp;#x200B;
Keep the DB out of version control, I imagine the data you need from the DB is standing data, drop down options and configuration data that kind of thing? if it is, then create a seed file that is just a script that fills the dB up with that stuff.
Didn't you link to your own site? If you can't edit there you would probably want to host your blog somewhere else... 
lol
https://en.wikipedia.org/wiki/Schema_migration
Typically this kind of data are called "fixtures".
- you can put "fixtures" aka a test/dev database into the repo. this is especially useful for automated testing - you should use database migrations to version control your database. i like: https://phinx.org/ as for "setting up the app on multiple computers or vms," the first case would give you a working app using test data. but production apps would probably connect to a prod database somewhere right? use .env vars to control this
I'm running queues with [Laravel Horizon](https://laravel.com/docs/5.7/horizon) progress panel, and background workers. They interact with database and you can message the front end with pushbullet, or ping the server for updates. While this is a "[Laravel Queue](https://laravel.com/docs/5.7/queues)" thing, I've researched it enough to know you can [pull this out of Laravel](http://masnun.com/2015/05/24/using-laravel-queues-standalone-outside-laravel.html) (google more results). &amp;#x200B; Currently: Background PHP workers, pulling from redis, storing failures in a db. 
good options here. it's really a matter of your needs. if you just need jquery to show the user the progress, a `GET /progress/{jobId}` that returns the percent would do it. the percent could come from a local file that is updated by the job runner. also redis, or memcached. or whatever you like. even a db entry wouldn't be too crazy. you could also do long polling or rabbitmq maybe if you think it'd fit into your infrastructure
other than the fact that a pw as query param is inherently readable to the eye in the url, when using https doesn't the param get encrypted too? as in, a middle man couldn't see what your query param was? is there another problem i'm missing or did i misunderstand that?
your db instructions could be simplified with a schema.sql or phinx migrations
Sounds like a task for [CRON](https://en.wikipedia.org/wiki/Cron), which is available in Unix-like systems (Linux, Debian, Ubuntu, etc.) via [`crontab`](https://help.ubuntu.com/community/CronHowto) command. If you're on simple hosting without access to Linux' CRONtab command you can try something like [Web-CRON](https://ostr.io/info/web-cron), which is platform agnostic.
Changes are already under way - these were mentioned at their Magento Live UK event ... &amp;#x200B; [**Magento Payments**](https://magento.com/blog/magento-news/magento-introduces-magento-payments) [**Inventory Management**](https://magento.com/products/order-management) **- With multi source inventory as well** [CMS - Magento Page Builder](https://magento.com/blog/magento-news/magento-enhancing-merchant-experiences) **Magento** [**Mobile**](https://magento.com/blog/magento-news/magento-introduces-mobile-optimization-initiative-merchants) **Optimization -** PWA STUDIO &amp;#x200B; It's as if Magento is in Warp Speed! 
Can you elaborate on any specific problems? TIA
I mean I guess people are down voting you because you said PHP could not handle it. PHP could handle the load just fine. Application servers can scale horizontally very easily. It just gets expensive. They redid it to save money.
Looks good! I think I'm going to start using this
There are a lot of reasons references are bad, but one of the reasons they are bad is that taking a reference to a variable forces it to move to the heap so that its address is not going to get cleaned up on stack exit (or other similar situations). This is bad for performance and makes the code which handles variables more complex. Furthermore we don't mark reference usage at the call site of functions. Now, I'm not talking about a feature that PHP used to have where you could send a parameter by reference regardless of how it was defined -- that was just bad and I'm glad it's gone -- but it makes reasoning about code difficult: function f(callable $fn) { $local_variable = /* . . . */; $result = $fn($local_variable); // will $local_variable have been changed? } If references had been fixed somehow it would have significantly affected many major features, including having the capability of passing objects by-value or by-reference instead of only being able to pass the variable by-value or by-reference.
A quarter of the web is worthless trash. If you're working in the e-commerce industry (which I have for nearly a decade) doing real projects for real companies, trash like WordPress and Woocommerce isn't an option. Woocommerce is not "industry standard software" unless your definition of industry standard is "my cousin's nephew can make you a website from his home in his mom's basement."
In my example the bot would not have known it failed as I did not return any error at all. Also, I didn't receive any spam, so the bots in this case are not succeeding. 
Because they want to follow the herd and sound cool. It comes from the fact that PHP has a low barrier for entry and is used in a lot of bad ways, especialy before PHP 5.6 or with things like Wordpress. You can see the same thing happen with Javascript. Most of the time, these are just jokes, don't take it too seriously.
You usually have config files like .env or parameters.yml *(Symfony)* which contain settings that only apply to the machine it's running on. You never commit these files on a repo. Add these to a .gitignore and make example files like .env.dist or .parameters.yml.dist.
Probably you're talking about the \`database schema\`. As some has point out here, you want to add your database schema to your git repo, you can do that using \`database migrations\`. each change you do to your database is a migration, so, you create migration files that describe the change. Then you can run your migrations. So, when you have a new dev coming to your project would have the last database schema just running a command. Then you have your data, there are mixed practices here: some people prefer to pass a dump, others like to have seed or fixtures files. Seeds are just files who add test data to your database, as above, somebody would run a command who run your seeders and add a bunch of data to your database. I prefer to have seeds instead of dumps, there is always a point where importing data to a database is a little painful :/
I'm in the habit of doing this for all sprintf uses. If you have to go back and edit the string you only need to worry about new parameters and not the order of %s vs parameters of the function.
are you serious? id choose to ignore all of these advices
There are many and funny enough Google Podcast will be the last app you'll ever need unless you want to listen to InfoWars or something banned
If you are looking specifically for something focused on PHP then I would check out Full Stack Radio with Adam Watham. I have listened recently but it’s a solid resource. Coding Blocks,MS Dev Show, and DotNetRocks are all really solid although they are Microsoft/C# centric. Coding Blocks is a solid resource for anyone language as they touch on design patterns, architecture, interviewing, etc.
Not PHP or even server side usually, but I love frontend happy hour. 
They don't always exactly stay on topic but PHPUgly is a great listen for both php and more general dev / life stuff.
You were so preoccupied with whether or not you could, you didn’t stop to think if you should.
+1 for Phinx. It’s not perfect but does a pretty good job with this. 
I have a podcast with a buddy called Code Talk with Matt and Steven. We talk about anything code. We haven't released an episode in a while because I'm super lazy and haven't edited the last 5 that we recorded, but I made a promise to get them released this month. Anyways, here it is! If you give it a listen I hope you enjoy. https://codetalk.simplecast.fm
I really like The Bike Shed (by Thoughtbot) and The Yak Shave. They rarely talk about PHP, but do talk a lot about web and mobile development, and open-source.
Your opinion and experience on the matter is obviously limited. WP is standard software regardless of your personal beliefs, nuf said. WooCommerce works great for many situations. It might not be a viable option for larger companies/orgs, who may need entirely custom software in the first place. But it's otherwise proven its viability.
I've been a guest on [Three Devs and a Maybe](https://threedevsandamaybe.com) a few times. It's less PHP-focused than some of the others, but the hosts are friendly and easy to talk to, so I foresee a lot of good content coming from them.
My buddy just spun up astrocasts.com. It's live programming (with repay of course) but he also does a podcast called That Podcast that centers around dev related topics. The early content is all web dev heavy with php, specifically symfony flex. Also tailwind and general "I'm gonna build a web app" stuffs. Might be what you're after. 
The [PHP Weekly](http://www.phpweekly.com/) newsletter has a section for **Podcasts** which can help keep track of new episodes for various (PHP related) podcasts like [PHPUgly](http://www.phpugly.com), [Voices of the ElePHPant](https://voicesoftheelephpant.com) and many more.
The GOPATH is not a selling point.
I can’t believe there was only one mention of [Full Stack Radio](http://www.fullstackradio.com) so far. By far one of my favorite dev podcasts. Also it is not PHP only, it is based around the full stack. For example, the episode that most recently came out was about Next.js and how that tool can fit into your stack.
The subject matter of that podcast is great but sadly it’s not the best listen imo. I just don’t find the presenters very engaging. Sorry guys!
I’m really enjoying command line heroes https://www.redhat.com/en/command-line-heroes and the rework podcast https://rework.fm/ Both have got great production values and interesting subjects. In no way specific to PHP. Also the changelog https://changelog.com/podcast covers a really great range of programming topics. As mentioned elsewhere Full Stack Radio is great http://www.fullstackradio.com/
What I like the most in this podcast is that you don't need to constantly focus on it to keep track of conversation. Fullstack radio is suprisingly easy to follow for interview format, but there are moslty those "tool discovery" episodes lately, which bore me to death.
Follow this tutorial on Laracasts. Doesn't even have to be EVERYTHING as there are some technical (not-all-that-useful) stuff like Stripe integration (card payments), depending on what you're doing, the first half of the series will give you enough to get your own app up and running. &amp;#x200B; [https://laracasts.com/series/laravel-from-scratch-2017/](https://laracasts.com/series/laravel-from-scratch-2017/)
Checkout DevMode.fm
Yes. I though you mean the title here. I'll fix the website OFC
Greater Than Code and the BaseCS podcasts are great.
it really depends, like perhaps structs pass by value? The whole concept seems under defined.
Not really a tutorial but: When a user requests a password reset you will generate a cryptographically secure random token. You store this in a new table along with the time it was created. You then send an email to the user with a link to reset their password. That link should be to a controller or action to allow resets. On load you will check that the token exists and is not expired. Each token should have a max life time of around 30 minutes after which it is no longer valid. You should also check to ensure that only one active token exists for an user. If they ask for 2 resets, the first should be immediately invalidated by the second. If the token is fine, allow the user to enter a new password and update the password. Once the password is changed the token is invalidated and an email sent to the users email with a message stating the password has been successfully changed. &amp;#x200B; You can also add additional security such as: 1. Recaptcha on the initial request form 2. Rate limit resets by IP. If someone is requesting resets a lot then you don't want to allow it. 3. Rate limit resets per account. This is probably not a good idea except in exceptional circumstances such as a high risk/VIP account. &amp;#x200B; &amp;#x200B;
Yes I didn't think about this. But if the engine can do typed properties I guess it is not a huge step to have a good struct type.
It's a pretty straightforward implementation. When the visitor triggers the forgot password and gives his email you generate a token and store it somewhere (a database is a good place). You send the instructions in the given email including the link to your password reset page, the link should include the token, so that your password reset page will compare it with the stored token. It's best to store the token for a limited time and remove it when the time expires. You may need to implement this expiration mechanism if your database doesn't support it by default.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I started to listen to podcasts recently, beside the mentionend ones I also like the "developer tea" podcast, a short (~15min) podcast for devs.
Yes, read the rails tutorial, it has no equivalent in PHP.
&gt;Try and use that in a web application... And you don't exactly know what my problems are. What are your problems, why do you think you need threads to solve your problems and why are you unaware that you can use threads in PHP? You don't come off as a resourceful person, it's kind of obvious you wrote "Threading." so you get some "street creds". Out of curiosity, do you even code for living or are you just a learner?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/ladydevs] [Podcasts for developers](https://www.reddit.com/r/ladydevs/comments/9nvfnk/podcasts_for_developers/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Where is `$className` instantiated?
I posted the wrong code lol - I updated my post. I was playing around with using anonymous classes to do this but if they can be used it's not clear to me how.
Make a Game object and then register a bunch of Player objects. $game = new Game(); $p1 = new Player(); $p3 = new Player(); $game-&gt;addPlayer($p1); $game-&gt;addPlayer($p2);
I have to say that you took a very creative way to approach this problem. I would've doen something wildly different
+1 for C and mentioning pointers
You don't need to create a player subclass to make them specific to any game. Besides, PHP is not a statically typed language, even though it has optional static typing features. The easiest implementation would be something like this. ``` &lt;?php class Game { /** * @var Player[] */ private $players = []; /** * @var int */ private $id; /** * @return Player; */ public function newPlayer() { // We're just producing a random ID to the player for the sake of giving it one. // You can adapt this however you want. I'm just going with the most naive assumptions right now // for the sake of simplicity. $player = new Player($this-&gt;id); // I'm treating the players list like a makeshift set, because it's easier to find players later. $this-&gt;players[$player-&gt;getId()] = $player; return $player; } /** * @return Player[] */ public function getPlayers() { // Defensive copy is the best mechanism to make sure some else doesn't mutate // your internal player list. return array_merge([], $this-&gt;players); } } /** * Player class * * I'm making it immutable for the sake of simplicity. */ class Player { /** * @var int */ private $gameId; /** * @var int */ private $id; /** * @param int $gameId */ public function __construct($gameId) { $this-&gt;id = rand(); $this-&gt;gameId = $gameId; } /** * @return int */ public function getId() { return $this-&gt;id; } /** * @return int */ public function getGameId() { return $this-&gt;gameId; } } ``` This approach also makes it much easier to persist your models in database in the future.
why not just: ``` public function newPlayer() { return new Player(); } ``` ?
Because I don't want players from different games to be able to interact. I updated my orig code to include an example of what I had in mind for the Player class. See the new `Player::doSomething`method.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I'm liking this approach the best atm. Have a static `$instanceCounter` variable in the `Game` class and assign each `Player` object an `$instanceID`. idk why I didn't think of that lol. Thanks!
 class Player { private $uid; public function __construct( $uid ) { $this-&gt;uid = $uid; } public function getUID() { return $this-&gt;uid; } } class Game { private $players; public function __construct() { $this-&gt;players = []; } public function newPlayer() { $uid = uniqid(); $this-&gt;players[ $uid ] = new Player( $uid ); return $this-&gt;players[ $uid ]; } public function playerBelongsToGame( Player $player ) { $playerUID = $player-&gt;getUID(); return array_keys( $playerUID, $this-&gt;players ); } }
HackLang has this in the form of "shapes". I think that with Type Properties for objects coming we could probably translate some of that to a specialized array type with fixed keys and value types, but using copy-semantics unlike objects.
&gt; Have a static $instanceCounter variable in the Game class and assign each Player object an $instanceID I'd use something like the following: class Game { $players = array(); /* ... */ /** * Add a player * * @param array $playerArgs Arguments for Player constructor * @return bool */ function addPlayer( array $playerArgs ) { $playerArgs['gameInstance'] = $this; try { $player = new Player( $playerArgs ); } catch ( Exception $e ) { /* handle Exception */ return false; } $this-&gt;players[] = $player; return true; } /* ... */ This would allow you to `count($this-&gt;players)`, iterate over players to push game state information, etc.
RSS?
Why not wordpress?
WordPress definitely! ***Performance wise:*** 1. Set up Varnish on the server and install the **Proxy Cache Purge** plugin 2. Set up Memcached on the server and install the **W3 Total Cache** plugin (free version is more than enough) ***Security wise:*** 1. Can't go wrong with **Wordfence Security** (free version is more than enough) ***Feature wise:*** 1. If you plan on supporting paid subscriptions, install the **Members** plugin + **User Switching** to be able to impersonate other accounts for debug purposes 2. These plugins will save your ass while developing: **Log Deprecated Notices** , **Debug Bar** , **Debug Bar Slow Actions,** **Debug Bar Actions and Filters Addon** 3. Other plugins that are really good: **Advanced Custom Fields PRO,** **Post Views Counter, TinyMCE Advanced,** **Google Analytics Dashboard for WP (GADWP)** 4. The upcoming Gutenberg plugin will be a very nice improvement for writers (should be pretty stable within 6-8 months)
Symfony cmf
Then this is a great opportunity to get those frontend skills. WordPress is solid for this purpose, or roll your own solution with Laravel or Symfony. Time/money is your only constraint.
Statamic or Craft
Jekyll
Drupal ;)
Are you really proposing at a BACKEND DEVELOPER to use wordpress. Wordpress is for kid in their basement charging 3$ an hour. Not for profesionnal programmer. Just find a front end template, anything will do, but if you dont do frontend, bootstrap would be a better choice. But dont spread the disease by using wp.
Sure buddy.
Its weird then that some of the largest news organizations in the world use [WordPress as a backend](https://wordpress.com/notable-users/). He is creating a site other people have to edit, why reinvent the wheel?
Bad project like wordpress is the main reason php get a bad reputation. Nobody in the right mind want to tinker with that mess.
For a backend developer I would recommend using Laravel Nova. A lot of people are suggesting WordPress. Personally I think it used to be the best thing around but it's getting a little old so it will be hard if you want to keep the website a couple years.
A CMS like Wordpress can be a good alternative. 
I hate Wordpress but you should use Wordpress, i would 
Build it with Laravel. &amp;#x200B; If you're not sure how to get started check out [https://laracasts.com/](https://laracasts.com/). Many are free and the yearly subscription isn't much!
\+1 for Statamic
I'm familiar with laravel. It just seems like a lot of work to get things that I would prefer working out of the box. 
Any suggestions for a theme? That seems to be my biggest hurdle.
I would start with something like https://www.drupal.org/project/corkedscrewer or https://drupal.org/project/openchurch_theme Use an existing and modify it or make a subtheme to fit your needs. 
Yes I am looking for the reddit street cred lol. Nope, haven't been coding for a living for the last 12 years at all....
Wordpress, Craft, OctoberCMS.
How witty and elevated /s
Wordpress is going to be hard to beat because it already has so much baked in for the end-user. Some will complain about the loop (use timber + twig instead), or that it's cheating or something, but unless you're a UX expert, you're going to miss a lot of the 'back'end editing experience. It's going to be hard enough to get the UX for the reader right. Save the of worrying about complexity for editing and pour your soul into the front-front end unless you've got a designer/UX expert on staff.
We've been using it for about 6 months and have been very happy with it. Our strategy is that run "dumb" controllers + services, then shift the interesting/hard logic into a "functional core". Most of these functions are &lt; 10 lines long but constitute the core business logic rules of our application. All of this is unit tested, with very limited usage of mocking. We then use infection to enforce 100% mutation score index (meaning no escaped mutants) on the functional core, but we don't run it across controllers or services. This is a nice compromise to address that mutation testing is slow - we only run it on the stuff that we _really_ want it on. Additionally, because these functions are small in scope, the work really well with [PHPUnit data providers](https://phpunit.de/manual/6.5/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.data-providers) which then makes it trivial to add a new test case that covers the mutation. It's a bit of a mindfuck at first ("failures" =&gt; good test!) but then you realise it's basically "craft a test that catches this mutation" and it's pretty fun.
that is fine. but use a good one. even as a user, when you use a good one you dont want to back to that.
I’m the author of https://wp2static.com and if you go WordPress, suggest trying it as a means to deal with performance and security. But being a PHP dev, I’d recommend you checkout Jigsaw by Tighten, the static site generator for Laravel peeps. https://jigsaw.tighten.co
TBH just browse the Wordpress theme store until you find one that hits the checkboxes. You'll likely find a free theme you like. If not, there are many high-quality premium themes available in the $20-100 range. There are also lots of 3rd party sites. Just browse. And don't forget you can change the theme later if you're using a CMS. The theme is not that big a decision point. 99% of your site's value will come from the content, so spend most of your time there.
Wait, why would you have both Varnish and the W3 Total Cache plugin?
Please don't do that, that's not valid PHP. My work's codebase has that issue in a lot of areas because people don't understand that, while it works, what's really happening is PHP is converting an undefined constant to a string which is then used as the key. Glad it's deprecated in PHP 7.2 now.
Wordpress all the way! There's plenty of free and premium themes to choose from. You can even use WP as the backend and any sort of frontend flavour of the week you want to use the API. React, Vue, Angular...etc If you anticipate the news site having lots of publishers adding content frequently or having lots of comments etc, then you might wanna go with something better suited for high read / writes over heavily cached pages.
Varnish is an HTTP accelerator and W3 IIRC can help out with memcache, object caching and static asset browser caching within htaccess, etc. Basically Varnish is a HIT or MISS on full page caching and sits in front of Apache. It can do more (like partial/component caching) but for a mostly read only site (like news articles) you can get multiple times more traffic on your site with an HTTP accelerator like varnish. 
scootstah proposed something similar. That said, this isn't the exact scenario I'm trying to model. I'm not at liberty to disclose the exact scenario I'm trying to model (NDA) but I had thought this one might be a close enough approximation. I guess I was wrong. Maybe a better scenario would be... I have a `Species` class and a `MemberOfSpecies` class. Members of the _same_ species can procreate with one another but they can't do so outside of their own species. Iterating over members of the same species is not a likely use case nor is there really a need to know how many of the same species there are. I suppose, at this point, one could fault me for constantly changing the scenario and I think that's probably a fair criticism. Unfortunately, idk what else to do other than to try to create a parallel problem that'd have the same solution.
Ok, so if I understand correctly, you'd have W3 there in case Varnish gets a MISS on cache. But if Varnish gets a HIT, W3 caching is bypassed entirely because the client will receive Varnish's cached page content.
Thanks
Which features exactly? Posts, categories, and...
My local news paper uses BLOX.
I guess it boils down to "why would you resort to creating a new class when you can specify a value to differentiate instances of the class in a member variable?" - apparently only you will have the answer to that head-scratcher ;D
From what I understand this is correct. 
Hate to inject a heretical note amid the Wordpress and Lavavel love, but Joomla w/ a news template (Helix a great framework) https://warptheme.com/joomla-templates/trendi/ Or with a suitable extensions such as the well-regarded https://extensions.joomla.org/extensions/extension/news-display/articles-display/raxo-all-mode-pro/ Joomla of course has great user subscription components as well: https://extensions.joomla.org/extensions/extension/e-commerce/membership-a-subscriptions/membership-pro/ Check the features on that. Fantastic support, too. 
Depends on what's in the code. Try it out first, make a list of the problems, check migration advice on the 'net, and see for yourself. 
Kinda depends on what you're familiar with. I see a lot of WordPress advice being thrown about, and it'll work, but if you're up to your armpits in Symfony code all day, it might be a bit of a culture shock. Personally, I'm a great fan of \[Bolt\]([https://bolt.cm/](https://bolt.cm/)), which is based on Silex and currently being reworked towards a Symfony 4 base. It's fast, it's simple but flexible, and the architecture is a whole lot cleaner than WordPress's. Of course, if you're a Laravel guy, it might be worth it to find a Laravel-based CMS like OctoberCMS. Frankly, as a \_developer\_, I'd stay away from WordPress. It's very clearly a blog system that had some other functionality shoehorned in. As soon as you want to do something non-standard, it's either time to break out a bunch of plugins or fight the system uphill both ways.
I just have to chime in that I don’t agree on the points you make about WordPress. It’s become a pretty good CMS that is easily extendable and with great documentation. A lot of non-devs (and some devs too I suppose) try to shoehorn and bend plugins to create functionally the plugins aren’t meant for which often leaves both the dashboard and the front a UX mess that by any means will be impossible to clean up without starting over. Mostly where you’ll meet problems with WordPress in my experience is poorly coded themes that lacks extendability. It’s quick and fast to create custom post types and custom taxonomies and with a plugin like Advanced Custom Fields you can create mostly any type of custom content input you may need. As a developer I love WordPress ;) 
u/paulwillyjean and u/RH_Demiurge already posted solutions where they using gameId/gameUid which can be used to detect if two players are in same game. Overeal idea is ok but don't use id/uids if u can use actual object intead. ``` class Player { protected $game; public function __construct(Game $game) { $this-&gt;game = $game; } public function doSomething(Player $player) { // it must be !== because it compare references, using != will cause problems if ($this-&gt;game !== $player-&gt;game) { throw new UnexpectedValueException(...); } // do something } } ``` 
Divi theme from elegantthemes. One of the most documented themes out there. It comes with prebuilt templates as well! 
Yeah, and don't forget that logged in users should probably get MISS on every page in WordPress' admin to preserve functionality. Maybe even on the whole site's pages, so that they can preview new content and change stuff ahead of other visitors. For those users (mostly staff, possibly paid subscribers if you show some custom content in each page), having W3TC with Memcached will allow to cache objects in memory, thus dramatically reducing the load on the SQL server.
Let's agree we don't fully agree, then. I've worked with WordPress since before it was WordPress, and I've worked with other systems. I vastly prefer not to use WordPress these days.
Personally, I won't activate it for my clients until at least Launch date + 3months. Too many opportunities to fail dramatically. 
Offtopic but check out these two things: https://refactoringui.com/ https://tailwindcss.com/
Agree completely. But a Jigsaw site, using services that modern static/JAMstack sites use for collaborative content could be nice.
Hello, I tried to enable Opcache, enabled it in the php.ini (and decommented the lines), set some recommended parameters and added zend_extension=/somewhere/where/it/is/opcache.so. Also I restarted Apache (and my server btw). But, it still won't work. Nextcloud recommended stuff is still telling me "oh it doesn't work that's bad blah blah blah". Do someone have an idea about what I should do ? Thanks in advance.
Definitely October. Perfect match! 👍 
You can get jobs with PHP and MySQLi / PDO. It sure is good for some freelancers who know a lot about security and how to build an architecture well and maintainably, with foresight - for many developers OTOH it might be better to join a team because the needed enourmous amount of competence may be divided amond the group's members.
So did you mean you intended to pick up PHP for freelancing work? What's your background?
I'm just a student 17, learning PHP on a course procedural/oop and mvc to mention it. I'm thinking to start to work part time to get a little experiencr.
Thanks
That should be alright. Get your hand dirty as early as possible. Fail fast experience more. We all started somewhere. I have been doing PHP for about 10+ years and I'm still constantly learning new stuff/technique. Also read more, participate in stackoverflow QA, answer questions, see smart codes etc.
After completing this course, I will code as much as possible after a few months I will start to learn laravel.However It would be good even if I get 50-100$ freelancing all I want is experience first.
Memchache will be better when there is high concurrency since file I/O is limited (you can saturate it orders of magnitude easier), but even better is when you have multiple servers and you read from one memchache server - there file cache is just out of the question.
Note: This ain't no fancy test, just a quick one for curiosity. Used a lowest-end VPS with mediocre SSD. Rather small file, lots of reads, very rare writes. Everybody knows file I/O is a bottleneck... but I expected a very different order of magnitude. Instead got 5.6 seconds on file vs. 5.3 seconds with Memcached for 100K reads.
Ofc it does, unless you run out of RAM for buffers (data size groth) and then you hit a brick wall at supersonic speeds :D
There's never such thing as enough RAM :D
Professional WordPress developer here (who also hates WordPress). It's easy to set up, ports to just about any server, has plenty of open-source extensions (called Plugins) and is _relatively_ easy for a Content Administrator to learn and use.
Hm. Keep in mind: * linux comes with memory based file cache * local access to fs will be much faster than a tcp connection (to memcache) * this advantage stops once you are doing a lot of random reads or if you do a lot of writes * local fs does not scale horizontally - memcache does So lets say you generate a single medium sized cache file (serialized data) and its a once-off read - that will be most likely faster than memcached. Or in other words: it depends on what and how you are caching.
Simple, go WordPress. If you want something a bit more fully featured but with a learning curve, go drupal. Need something maintaned by a team, look at symfony or laravel.
Master some popular frameworks like Laravel and Symfony, then go as Backend PHP Developer. 
Why does a news site have to be PHP to begin with? If you're serving static content, always consider a static content generator. I'm sure there's those written in php as well, but those written in Ruby and Python are easy to pick up, you don't need to completely understand the language to just use them, and the performance increase and threat vector is very much improved. 
Should I do core PHP tasks first ? To understand PHP better ?
I’m a freelance developer. Freelance isn’t a good option if you have no experience. People typically get a freelancer in because they either don’t have experience they need on the team or they don’t have enough resource to deliver the work they have on. They’ll expect you be capable of getting up to speed quickly and work without having your hand held. I reckon the best thing to do to gain experience is join an agency as a junior dev. Once you’re up to speed technically, and you’ve seen what’s involved with all the other skills you need to deliver software to people (think gathering requirements, estimating, communicating with clients, etc) then think about freelancing. I’d also recommend getting involved with your local dev community, going to meetups, etc. They’re a great source of advice and work.
May I ask you how much do you earn monthly (average) ?
If you're talking about a population of classes, the Flyweight pattern from the GoF book might interest you. It's designed for when you have many almost-identical instances of a class - say, all the letter B's in a word processing document. If they differ more than Flyweight reasonably allows for, I'm not sure why you wouldn't just have a $members[] array on `Species`.
Depends how much I work. I charge £350/day +VAT, which is pretty typical for where I live in the UK. (Major city. Not London.)
Nice piece of code, thanks for sharing! Few notes (hopefully useful): 1. Stream::factory has @throws \InvalidArgumentException clause, but that's an unchecked exception, i.e. declaring it in @throws kinda defies the point. 2. This one is pretty random, just caught my eye. Same method, Stream::factory, input parameter is declared as string, but the code implies it can be a resource, another stream, object with __toString(). Also, return type is declared as Stream|string, though real return can be only Stream| StreamInterface. 3. Extending ParserInterface from Iterator could open lots of opportunities for interoperability with other libraries.
And those sites have probably gone the last 5 years without a patch anyway. 
Well.... * getallheaders() * self::class * isset() or more likely property_exists() * static::class And these should be pretty easy to update in code without much effort.
I'd personally only compare memcached against database or remote requests. It all depends on the use case.
I get where you are coming from with Nova, but in this case OP said specifically he was a front end noob. Using WordPress means he can drop $39 at ThemeForest and have a good looking well tested front end ready to go in a few min. If OP does want to go outside the WordPress box I would suggest Jekyll. Nice to write in, fast and waaay easier to maintain that WP. Otherwise Weebly / Squarespace type of thing and are really reasonable.
Unless the task is a few hours long, you shouldn't sell yourself that short.
Friendly reminder that 7.0 EOLs even sooner than 5.6. http://php.net/supported-versions.php
The question is, how many exploits are people already pocketing waiting for it to go EOL. It would be a waste to use them now while it's still supported. I imagine we'll see at least a couple in the 6 months after.
Interesting, but not nice for privacy reasons.
Installation can be tricky but once you’re server and mysql database are running you have a ton of functionality. It’s my opinion. You could build a server with Node.js much faster w/out the install Tutorial: https://medium.com/employbl/build-a-task-app-with-hapi-mongodb-and-vue-js-dc05c1bb8778?source=linkShare-9b876f24936b-1539530391
Yes, that may be an issue in a few cases. But it does not track who are the visitors, only their anonymous actions. There is a lot of services that does that already including Facebook Pixel, I think it is best to at least get your own database so you are not sharing your user information with any third parties. And Facebook *does* track who you are btw.
eZPublish developer here, If you have experiance with Symfony try eZpublish its CSM built on Symfony targeted to news publications. CBC news and Finacial Times use it. &amp;#x200B; One CMS I want to get into is iSite built privatly by BBC. 
&gt; Why not support it if the code is pretty simple? Because: - you miss out on new features - your users are vulnerable when they are on old versions like that (5.4 was killed and has been dead for [*3 years*](http://php.net/eol.php)) - people and hosters have no reason to upgrade if the community keeps supporting old versions &gt; here in Brazil most hosting providers do not support php7 See my last point
Downvote for php 5 support. 
Note that freelance gains a lot of revenue however the money you hold after taxes, social system etc is usually - 60%. So let say you earn 550 euro's a day, thats 11k euro per month (x20) however you'll probably only see 4.4k. 4.4k still might seem a lot however when being an employee you get other benefits like an extra salary a year, pension saving (if you still believe in this though ;), payed when sick, payed holidays etc.
Let me be honest with you my country does not give a fuck about taxes. 20% upwork let say 5% local bank so we are good right ?
What would you change when targeting php7? I'm not using deprecated or removed functions.
&gt; there's a hackable solution to every problem. Even though it does all feel like a fragile hack. The worst part about wordpress is the maintenance. ...which is exactly why you don't want to go with WP.
Most of those that run on older versions of PHP will no doubt be shared host platforms that have little to no incentive to upgrade because they've got their over allocation of suspects willingly paying for hosting they don't know what it does etc. 
Maybe this one: https://github.com/PHPCompatibility/PHPCompatibility 
Upvote for php 5 support.
Yup.
We got off of PHP4, despite that inertia, we'll manage do it again and again if we have to. :)
If we are talking about static, then GRAV is the answer :) 
It is still in AD? 
Only in PHP-land.
See that 62% percentage? The amount of websites in which the test environment is the production environment, in all likelihood, is higher.
Why? Upgrade your project!
Do you still need to buy ACF to create arbitrary content types with arbitrary fields? To me that's kinda the baseline of being a CMS at all, decent or otherwise
You'd be better of learning Symfony. You'll still understand Laravel code, but your clean code and best practice skills will benefit much more.
Yeah because loading index.php definitely handles all edge cases. What could possibly go wrong?
No you don’t, but ACF simplifies the task of creating, well, advanced custom fields as opposed to “just” custom fields. In the end ACF returns what an ordinary custom field would but it has some nice bells and whistles. As for creating custom content types that’s pretty straight forward with a few lines of code. The same with custom taxonomies.
Ah fair enough. Somewhere I had got the idea those things werent even really possible without ACF. I stand corrected
In other countries like mine, the law states that you *have* to log the IP addresses because the government have the right to ask you these informations. And you have to log that for *five* years. Yeah, I know, this sucks.
Why though?
Drupal is major overkill.
Missing official support does not mean no support at all. Many long term linux distributions are creating and backporting bugfixes to official unsupported packages. So using php version, which comes with example redhat does not mean you are using vulnerable version of php.
Yea but, gotta give the customer what they want, or else someone else will.
It should be noted that 7.3 is upon us and 7.0 was initially released in 2015. People have had plenty of time to upgrade. 
Oh I am sorry, you seem to think I was serious.
Is PHP still a thing?
I know it's a very bad idea, but is there serious vulnerabilities targetting PHP &lt; 5.3 ?
Also, it is not very difficult to upgrade from 7.0 to 7.1 or 7.2 - there are only minor niche things that can affect existing codebases (like removing mcrypt in 7.2, some new reserved keywords like "void" and "interable", and some deprecations which generate E_WARNING but otherwise do not change functionality - all other very specific niche behavior did not affect my codebase or any library I was using).
Haha :) Not directly, but I've helped migrate stuff of there. Really shit host.
To bad this does not actually force companies to upgrade cause they probably depend on extended support given by the different package repositories.
It's been a while since I've used them but I think their shared hosting was, and probably is, Debian. They're not exactly the latest but are usually secure and stable as long as it's updated regularly. I did investigate recently and they \*seemed\* to be better than in past times. I could be wrong though. I've never been impressed with what I've seen there. 
Tell me about it. They tried to say I owed them over $100 for a hosting plan that I cancelled right after it started last year. They then sent this plus another fee to a collections agency. The support people told me they weren't able to wipe the balance. But after a month or so I was finally able to escalate it to the solutions department and they wiped it, thankfully.
You can say it may work under 5.x but that you only support 7.x
Realistically if you are using php as a database interface to serve up html there shouldn't be gaping security holes.
That's not what this particular thread is about, we're talking about potential security holes in the PHP process itself. 
Nice suggestion! I'll do it.
How long away is 4.0? Any idea on how long 3.5 will be supported?
I use https://phinx.org/ as its part of CakePHP core. When I am going to change the db structure, I don't do it in the database, I create a migration, run that and if it works I commit the change. Our build process on production just runs the migration files. Makes life easy. It can be installed via composer and used independently of Cake. Use that or something similar to it.
Depends on how long you've been coding. I'd definitely learn OOP first. My personal advice to a new developer would be to wait on learning things like frameworks, composer, and git. Learn the fundamentals of programming first, OOP is a fundamental, so learn it. One of the hardest things for ~~developers~~ humans is to step outside of their comfort zone and do something new. Step out and learn OOP. In this case, you may want to learn git so you can post your code publicly and ask for a critique on here. 
Thanks for your feedback! I don't understand what you mean in your firs point? For the second point, I probably never really checked the comment again after implementing a first version of it. I didn't really think of implementing the Iterator part though, but thats because I confused it with ArrayAccess, which is a lot harder to accomplish with streams. It is a nice idea though, and I will definitely implement it in the next version. Thanks a lot for your feedback!
Ubuntu 16.04 LTS ships with 7.0, so some people will use it until Ubuntu's EOL, 2021.
You can use https://github.com/phan/phan/ to analyze your 5.x (not sure about the lowest supported version, though) in backwards compatibility mode for desired (target) 7.x version. I ran it against a monolith which is still running on 5.6 and it did help a lot in terms of preparing the codebase for the migration to 7.2. Just make sure to disable almost all other checks except those related to compatibility; otherwise you may get tons of reported errors that are not necessarily the top priority.
Lol how so? OP didn't give any details of what he needed this site to do. I just offered a CMS that can handle whatever OP will throw at it.
Try it on a local instance, you can do it in a VM if you need to. I have 5.6 code that I upgrade to 7.0 with almost zero problems. If I recall the only change that was needed was allowing short hand tags in php.ini, but just give a go and find out. 
Are you sure you updated the correct config? You can have many different versions of PHP installed or old configs hanging around. What does php -v output? What do you see in /etc/php. Is PHP running through apache or php-fpm or something else?
This should be thrown in a sticky or something, this literally gets asked like once a month.
Is Debian supporting php 7 out of the box yet?
lol.. looks like I will always have a job ;)
This one also instantly upgrades BC broken code for you: https://github.com/rectorphp/rector
As a systems admin for a webhost where every server is either managed dedicated/virtual server, it's not just outdated PHP that concerns me. &amp;#x200B; Most of them have outdated packages and just waiting for a yum update.
I bet most of them are WordPress.
Depends on your OS, disk cache, your cache size, how you set up PHP and so on. In linux, if you read a small file from the disk, then it's cached. Read it again, and it will load from memory, so faster than loading it from the network. But if something else reads allot more stuff, it can push your previous cache from memory, so your disk cache is slower. If your system is small enough to fit on one server, you can use file cache with php opt-cache. Write your cache data as php var_export code to a file, and include/require the php file when you need the cache. First access is slower (var_export + file write), then every other read will be MUCH faster (100x faster sometimes) than making a socket connection and de-serialise the data. But then, the cached data must be small enough, when you go to multiple servers, you have a mix of local/memcached.
heh
Ha! We upgraded our servers all to PHP70 as standard about a year ago... We do still offer PHP54-PHP72, with hardened versions of the early versions... as there are still a lot of people running old scripts that have depreciated functions like **preg\_replace()** , etc. Some hosting companies are still running PHP55/56 for their servers as standard setups... unbelievable. &amp;#x200B;
HA! They were one of the firsts hosts I ever hosted with, before I got wise. ;)
1. Well, exceptions are like another type of function return value (in a sense). By adding "@throws X" to PHP docblock comment you're saying "this function can return blah-blah-blah, or X", and now this is part of the API (or function signature; in many other languages this really is a part of function signature, e.g. Java). Static code analysis tools can use that info to check things like "are all possible exceptions handled?". As for checked/unchecked exceptions, you might want to google for that term, but in general things are like this: checked -- exceptions that legitimately can happen while app runs, like network connection lost, user provided bad input (was asked for a number, but entered a word), etc.; unchecked -- exceptions that happen due to bad programming, e.g. function wants integer, but you (programmer, not user) supplied a string, or your function expects \DateTime object, but another programmer tries to use it against textual date representation. So, checked exceptions -- your code fails to do something because there is some external event that prevents it from doing so, but you kinda anticipate that event, and you indicate it with an exception -- a thing that is thrown to whoever knows how to handle it (your CSV parser can realistically expect non-existing file or unreadable stream, and what it should do in that case is notify higher-level code that things went wrong). In other words, checked exceptions are like your code says "this external event can happen, but that's not my responsibility to fix this, I'm going to delegate resolution to whoever uses my library" -- and then you add "@throws" PHPDoc tag so everyone knows that, and user of your library would legitimately check if these events happen by catching corresponding exception and maybe doing something about it (maybe show user a message like "internet down, please reconnect and try again" or "file does not exist, please check path and spelling"). And unchecked exceptions happen because different parts of code are badly connected, like passing wrong number of arguments to a function, you're trying to access array element which does not exist, you're calling a method which is not defined for given class. So, unchecked exceptions are like saying "c'mon, read the API reference and supply correct number of arguments of correct types, I can't predict every possible way you could make a typo or whatever". If you throw unchecked exception, there is no point catching it (beyond logging it so you -- a developer -- could investigate and fix) because there is nothing to report to user except "this program is really broken, you can't fix it with your actions, just let the developer know and he'll fix it". Sorry about this lengthy explanation, I hope it makes things clearer. If it does not, just google for "checked vs unchecked exceptions", there should be plenty of info. 2. Again, static code analysis tools should help you avoiding that. Something like PHP mess detector, or maybe your IDE built-in code checker, etc. E.g. look at the following sample: function a(string $b): object { return 1; } PHPStorm will report following problems: * Argument $b is unused. * Returned expression does not match declared type (need to return object, but seeing int instead). 3. I've been working with some heavy CSV input, and having iterators was the only way to organize some complex processing (i.e. more complex that just filtering input) with pretty small memory footprint. Basically, iterators are like typed streams, so, since you already accepting a stream as input, it would be logical to use a stream (or stream-like concept) as output. But while previous two points are about actual code quality (i.e. about clear errors, though there might be an opinion re how exactly to fix them), this one is about a possible use scenario. If you're not going to use that for yourself, maybe it's better to not implement that because implementation could be awkward due to lack of real usage examples. Still, I highly recommend diving into iterator concept, as it is pretty cool by itself. I hope my feedback is helpful. Have a nice coding session!
Okay, for some reason reddit isn't letting me post my content: "Post Body cannot contain text"
I've got ample spare time in my evenings, and I'm kinda bored with playing games, or cooking food for several hours to kill time. I've spent time on Stack Overflow helping people but thats got a finite amount of minutes to it before you want to scratch your eyes out. So I was thinking, lets start a project. Something that will take up my time when I've got nothing better to do. I have zero design skills so that doesn't really help, but I can always buy templates to play with. I've got several years enterprise PHP development under my belt, and don't wanna build another CMS, or message board or whatever for fun. I've done enough of those in the past, and they never got far! I've love some suggestions! Some ideas to help me spend my time productively, maybe learning a new library or framework, or just honing my skills by writing something I can publish to GitHub that might actually be useful to someone! Any ideas? Someone gimme an epiphany!
Built a connector that runs a 2-way sync between iCloud contacts and Google contacts *maintaining contact groups* and I’ll give you $10/month to use it. 
This is actually a really good idea. :) Added to my list to explore!
This really isn't appropriate for two reasons: 1. Your private porn consumption habits aren't really a professional topic for /r/php. Take it to a more appropriate venue if you're hoping for a positive reception. 2. PornHub is powered by PHP. Treating PornHub as a negative outcome might alienate your fellow developers. Please think of the PornHub employees.
Are you sure about that?
Released version 3.0 of JIN... https://github.com/dotink/jin New features include: - Section and field names can contain numbers - Use `env()` to get environment variable data - Templating - `def()` defines a template (sorta like a mixin) - `inc()` can be used to include a defined template once - `map()` can be used to include a defined template many times for tab separated lines of data - Use `run()` to execute limited PHP with access to context variables - Section references [&amp;.whatever] resolves the &amp; to the parent section name. BC Breaks: - JSON no longer supports escaped characters. A \\ will still be a single slash for limited backwards compatibility, but moving forward only a single \ is required, but \n, \t, \b, etc, are not supported. - JSON objects are turned to associative arrays by default now. Second parameter to parse has flipped. - Moved to third party collection library for internal data -- no real changes here, it had a similar interface.
Honestly I’d build it but I *hate* writing APIs that involve authentication. Just kill me. 
Lol, lighten up a little. This is reddit, not a board meeting. If people want to alienate me for this, then they're welcome to. [This might help you on your path to enlightenment](https://www.reddit.com/r/DecidingToBeBetter/comments/6m8me3/how_to_develop_a_sense_of_humor/). &amp;#x200B; &amp;#x200B;
It's the ereg_* class of functions that are deprecated(5.6)/gone (7.x).
Its 10pm on Sunday! I missed it. :( I've been on Stack Overflow for too long, I even make sure to me extra nice to people there and I still get shut down! I did wonder when I read the last line if you were serious or not, but the first 2 points were too dry for me. 8-)
A good joke is like a good strip-tease. You gotta work your way up to the climax instead of just flopping everything out there at once. Wait what were we talking about?
You never know, /u/Katie_Pornhub might stop by to talk infrastructure...
Okay, that gave me a good chuckle :) 
Rather than start one, improve an existing one :) To be fair, my contributions here were definitely a case of scratch-your-own-itch, but [https://github.com/opencfp/opencfp/issues](https://github.com/opencfp/opencfp/issues) is relatively fertile ground, with some of the stuff I've mentioned there already built out (albeit without tests, and probably less properly than it should be) in the LonghornPHP fork thereof. &amp;#x200B; As an added bonus, the codebase is in the happy medium where it isn't actually too bad to work with, but there are plenty of refactorings that could be done/tests that could be added/features that could be built. At which point if you get PRs merged your work is guaranteed to be used by the majority of PHP conferences, as well as some others :)
Build something you feel are missing you could use yourself. Then release it as open source. I have a problem remembering what friends have borrowed from me, so I built a database of my movies to start with, then one for games then one for books. Then I turned them into OOP code. I got tired of notes on the computer, evernote made too many restrictions. So I built my own basic version. Next time I've got an extended period of time I'm going to turn my database idea into an open source Whisky / Wine / Beer database. Build it, whatever you build for yourself, share it, then it's useful if you use it yourself of course. I'd like to take a look, maybe I can use it whatever you build, maybe I can learn from you from the way you code and comment it. I'm not new though as in, need you to build this so I can learn, I get into okay now we code, when I have an idea, then I take a break, and back to coding. For 10+ years. 
Joomla &amp; WordPress are not frameworks. I stopped reading there. Sorry. 
&gt; I'm spoiled by Laravels SL/DI. You can almost get away with not configuring anything unless you need to, due to auto-wiring. What if you're literally "spoiled" by this, and this makes your app architecture much less flexible and your code much less reusable? Have you done a honest pro/cons analysis on autowiring? Consider autowiring goes against most of the reasons "dependency injection" was coined as a term and practice in the first place.
Aka HostGator, GoDaddy, 1&amp;1, BlueHost and the rest of the shite hosts, most of which are owned by EIG.
You could have spared your time for reading even that by simply reporting this blogspam.
Exactly. Red Hat backports security fixes to whatever version they ship. 
If this is a small site and you don't really need a database, consider a flat file solution such as [Typesetter CMS](http://www.typesettercms.com/). Free, simple, flat file, established, secure, Bootstrap (now 4 compatible), templates &amp; addons, documentation, active support forum. Front-end editing. Easy to add pages. PHP, so should be easy for you. 
Great information and link, thanks! I will definitely try it out. The way we setup our systems and apps, makes using filesystem caches suitable. SQL databases are always kept on separate servers with different configuration. On application servers, CPU usage is quite high; but disk usage is low to none. No disk activity that could push data out of the cache; and we make sure to have enough free memory as well. Skipping serialization just like you suggested would remove a lot of CPU load, so this will make it much faster. I really appreciate the tip.
Yup, so hard to break a mentality in people who don't know or just look at the price and nothing else. 
Kotlin!
How can you say that? Go is getting very popular and tons of very big and very important projects are powered by it, not the least of which is Docker/Kubernetes.
For me Go is for when you want native performance, compact and portable binaries for software that does a ton communication with other software.
&gt;I'm a full stack developer and I have no desire to build a CMS from scratch. I only want to build the interesting parts He told you to just install plugins for all those interesting parts.
&gt;Are you really proposing at a BACKEND DEVELOPER to use wordpress That's not really the issue for me, Wordpress seems a good fit for a news website as that's one of its original intended purpose. My real issue here is he tells him to install plugins for everything. The Wordpress core is (while messy code) mostly secure and very well audited. Problems arise when people start blindly installing plugins from random developers. If he's a backend developer I would look at adding his own functionality specific to the project instead of installing large plugins that he might only use 1% of the functionally whilst increasing the attack surface 10 fold.
[removed]
[removed]
Ehh. Thats quite normal. I hit your site and you know it. I mostly see this being used by 3rd party trackers though, hence my original comment.
[removed]
In theory, but I’d like to talk with you a little more about the practical side. I would honestly like for you to change my view. One of my projects is going strong on PHP `5.6` and there is no real chance of updating to `7.x`. It’s not WordPress, but it’s not pretty either — a lot of legacy code, little to no unit tests, integration tests are outdated for over a year now, mixed responsibilities. Upgrading would require updating Symfony from `2.6` to at least `2.8` or `3.3`, and a supporting bundle from `3.x` to `3.y` or `5.x`… It’s a clusterfuck. In the last couple of years the project went from a team of about 8 mid to senior devs to one junior dev in maintenance mode. The client wouldn’t understand if we told him he need to foobar over an eglebegle. They just want to update their product boxes once in a while, that’s all they care about at this point. But otherwise the project is fine from the business perspective. If it goes down for a couple of hours because some random script kiddie discovers a DoS vulnerability, the client would sure notice it, but we had 2-3 hour outages in the past and there were no consequences. It will stop receiving security updates starting December. True. But did it receive them to this point? Nope, our PHP version is over 2 years old already, so effectively our support stopped in June 2016. Did anyone notice? Nope. Has anything happened? Nope. Is the project a ticking time bomb? Maybe, but I guess it’s too low profile for anyone to care. So the client is faced with a decision — they can either spend their next years budget on an upgrade, forgoing all feature development for the next couple of months to harden the system of a project nobody cares about, or go with their lives as usual. I’d like to add, that no technical person is in the position to talk to the decision makers at the client’s directly, there is a layer of customer service on our side, and project managers on theirs. Both of those groups wouldn’t even be able to rely the supposed importance of the task. As much as I would like to switch to a more recent PHP version, this just no business justification for that.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [php/php-src/.../**NEWS** (PHP-7.3 → 6b8605d)](https://github.com/php/php-src/blob/6b8605d31f7f4b099a2a79d3d9bf0bcd607472af/NEWS) ---- 
Sure, so long as you're ok with security vulnerabilities I guess. You should have seen this coming a mile off.
At the very least I would define proper function/method signatures by adding type information.
Where is GoLang on TIOBE and other similar programming language popularity indexes? I fail to see it as a top 10 language on any of these, not even close. The fact that there are some developers and companies jumping into the GoLang bandwagon is no indication of the language’s popularity and adaptivity as a whole. There may be ‘tons of’ projects using GoLang, but there are much more projects using other bigger languages. GoLang will never be the next big thing, not even close. It has a specialized use cases but that’s just about it, GoLang will not make it to the mainstream. The fanboys like you can chill out, expecting GoLang to take over the world like C, C++, Java and Javascript once did is nothing but fantasy, a wild dream that Go Fanboys needs to wake up. 
 return new self( ... Article::find($input['article_id']) ); oof
Thx for the response. I'd like CSSTrackr to stay compatible with older versions, because it is a plugin for existing websites. But maybe I can let it stay that way in this current version and in the next releases use the new features. I think it is a win-win: I would give people one more reason to upgrade their software, while not excluding them. What do you think?
Piss off with your spam
care to elaborate?
Have a look at how [privnote.com](https://privnote.com) does it. They have javascript libraries for the AES encryption. The server only sees the encrypted data. The key is shared after the hash: `index.php#abc123`. The server only sees `index.php` and you can use the key in javascript land. 
Hi, it's been a while since PSR-15 has been accepted, even longer was PSR-7. Did anyone used them in production instead of symfony/(http-kernel, routing, http-foundation)? It seems like they had handlers/middlewere in Zend framework (expressive) for more than a year now, but Symfony still utilizes classic MVC. It seems to me that Handlers/Middlewere model is superior to symfony/event-dispatcher + mvc, since all layers is explicitly set for every/particular request handler. I've heard about stackphp, but I don't know anyone who used it in production.
I never said that PHP was *complicated*, so that's not the reason it's a nightmare. It's a nightmare mostly because it worse than every other modern language. It's harder to write expressive, maintainable, bug-free code in PHP than it is in many other OOP-ish languages today: Java, Kotlin, Swift, Rust, Go, etc. There is no concept of immutable bindings. So you're stuck making immutable *types*, and since there's no immutable bindings, it means you have to write these really verbose class definitions with private properties and a bunch of getters. That's also true even if you want the properties to actually be public, since the only way to get type hinting, currently, is from your getter/setter methods. And you actually can't write an immutable class if you expose a getter to an object property that is not, itself, immutable. Since every (object) is an immutable reference, you can call the getter and just mutate the thing with its own methods, anyway. PHP doesn't do concurrency. PHP arrays are horrible and bug-prone because they aren't really arrays and they aren't really hashmaps, and they'll switch from one to the other depending on what you do (like removing an element from an array-array can turn it into a hashmap-array for the purpose of json_serialize). Java-style interfaces are inferior to Swift Protocols, Go Interfaces, Rust Traits, etc. Much more brittle and cumbersome. No Enum. The standard Interfaces for iterable things is giant freakin' mess. There's Iterator, ArrayObject, and actual arrays. So to go through and map some collection to another thing is inconsistent depending on who is giving you the collection. The type system isn't even trustable. The fact that I can do something like this means that the type system is easily subvertible by a bad library: class Foo { public $x = 4; } function returnsAFoo(): Foo { $foo = new Foo(); unset($foo-&gt;x); return $foo; } var_dump(returnsAFoo()); I'm not a huge fan of Exceptions, much preferring Rust's approach of returning a sum type with an Error type. No generics other than using `mixed`, which again, means the type system is pretty meh. So, I guess my question for you, is what about writing PHP is actually enjoyable when compared to the languages I've mentioned?
"PHP 7.2 will get a patch from the PHP team, for free, in a timely manner; PHP 5.6 will only get one if you're paying for ongoing support from your OS vendor." So that means, that there will be a new business? Fixing old versions as a paid service? &amp;#x200B;
Very good introduction, for someone like me that always heard the concept but never took a look at how it is doing practically. Speaking of practice, do you have a real-world Laravel example of DDD projects, with a small idea like a Todo List?
I kind of hate how Swift does the difference between structs and classes. There's too many orthogonal things going on differently between the two: * structs - stack allocated, copy/value semantics, strict mutability rules (let, var) * classes - heap allocated (mostly), reference semantics, always mutable So when I define a struct or a class I have guess how everyone else will want to use my new type. Feels backwards to me. 
That's how they looked when they're defined, but when they're called, they look like methods from other OOP languages.
did you respond to a question that was already answered?
A lot of new developers in the PHP community start programming based on old or bad practices, for example in the /r/PHPhelp subreddit it's common to see PHP code mixed with HTML. &amp;#x200B; Is there anything that this sub could do to redirect this newcomers? I'm pretty sure that you take the same amount of time learning one thing the bad way than the good way.
hi! Here's a good link to answer those questions! https://bakery.cakephp.org/2017/06/23/upcoming-cakephp-roadmap.html 
*triggered*
Great article, I tend to always use this approach now ([I tend to call them "domain modules"](http://mnapoli.fr/organizing-code-into-domain-modules/)). It's basically micro-services but without the separation into multiple apps. The advantages are great: - one codebase, one deployment, one app running in production, etc. - easier to change module boundaries, which is very important when starting the project and "discovering" the domain - easier to do code changes that span across multiple domains (even though those are not that often if modules are well isolated) It's harder than microservices to enforce the isolation because you have to be disciplined, but there's a saying that IMO sums it well: "if you can't write a good modular application, what makes you think you can write a good micro-service architecture?"
I wonder if there is such a GoPHP7 movement like GoPHP5 a decade ago, such organized actions will help with migration to the newer version of PHP. 
Unfortunately I've got no public examples. We use these principles in our client projects, but I cannot share them for obvious reasons. I'll try to work on a proof of concept in the future, maybe a followup blogpost; but the real benefit will become visible only in larger projects.
Perfectly valid in British English: &gt; American spelling avoids -ise endings in words like organize, realize and recognize. British spelling mostly uses -ise, while -ize is also used (organise/organize, realise/realize, recognise/recognize): the ratio between -ise and -ize stood at 3:2 in the British National Corpus up to 2002. 
Tiobe: 12 PYPL: 17 Red Monk: 14 Average 14.3 To me thats not close to top 10, its not top 10 on any spectrum. Even if it cracks top 10, its barely entering mainstream. The fanboys claim that its taking over the world, then I am afraid it needs to make top top 5 or even top 3. I dont see this coming, its not even remotely possible. 
I was actually talking about the comment you are replying to: &gt; PHP 5 support ends in 10 weeks, it's completely irresponsible to be running 5 at this point The thing is, most of us know what is better/best, but we can't always afford it and so we take calculated risks. Businesses do the same thing.
Please don't try to focus on the Laravelisms but rather the underlying principles 😁
Um, Beta1 was released over two months ago. We're on RC3 now.
Does css tracking work in Gmail? As pixel tracking (image) doesn't.
Damn dawg that's a pretty big backpedal. First you were claiming Go wasn't even close to top 10 in TIOBE rankings and now you need to add other rankings to calculate a lower average AND move the goal post to top 5, top 3? I mean I don't give a shit about Go, and I'll agree that it's probably never getting top 3 and that top 5 is very unlikely but... &gt; GoLang will not make it to the mainstream What does a statement like this even mean? Go is already mainstream, just not by your backpedaling goal post moving standards.
It is a good question, I don't think so. Gmail probably will not allow this level of css, with or without tracking, because pseudo-elements or backgrounds may not be allowed. But I think you are mistaken about pixel tracking. There is a service called "Mailtrack" that uses a pixel image and it works on gmail. 
&gt;Mailtrack Doesn't gmail have image-proxy servers?
What O.S. are you on? Do you have an /etc/php7.0 directory or something similar? List what is in there.
You can't really call that new. Most recent big example: Microsoft and Windows XP. 
Dunno, but it does work. There is even a chrome plugin to add the pixel to every sent email on gmail.
You're welcome! Glad to be helpful. Pull requests are welcome too.
Not really unfortunately (the only examples worth it are those big private applications, not small public demos). As to enforcing isolation here is one solution I use, I'm not saying it's the only way or the silver bullet: - define modules by business use cases, don't be afraid to iterate and change the boundaries later because often it's not that obvious - no relationship between entities (aka models in Laravel) when it's cross-modules: yes that means that you manipulate IDs in the code - avoid circular dependencies between modules, try to have unidirectional dependencies (e.g. Billing can depend on Cart, which can depend on ProductCatalog) - interactions between modules should be done through services only (e.g. don't access a repository of another module - or Eloquent queries in Laravel - instead use the service) -&gt; the service is like the public API of the module, everything else is private implementation details (Encapsulation) - sometimes a concept can be modeled twice to serve different purposes, it's fine (e.g. CQRS, I have an example [here](http://mnapoli.fr/organizing-code-into-domain-modules/)) Obviously I don't code all my applications like that, for small applications it's overkill. And some will argue that we should go full hexagonal, CQRS, event sourcing… I don't think it's black or white. What I think is the most important here is that if you have clear modules, you can implement modules with different architecture styles. Some modules are very complex and critical: you can apply very advanced architecture, abstractions and design patterns in there. Some other modules are very simple and CRUD/Eloquent is perfectly fine. Thanks to decoupling between modules it's possible to adapt the solution to the problem. Mathias Noback has [a great book](https://leanpub.com/principles-of-package-design) that covers a bit of this. And it's always interesting to keep applying the same principles of high cohesion, low coupling, encapsulation, etc. not at the class level, but at the module level.
IDK. (I was referring to the http://guillaume.xyz/privateNote/) It states something (I translated it from Dutch): A visit to the domain could be risky. (With an info bullet) Which says: On a visit to this website, we found risky behaviour. ps. don't blame the messenger, I was just informing you. 
yw :-)
I wanted to try [https://infection.github.io](https://infection.github.io/) but unfortunately my tests are not made with phpunit or phpspec :(
Some great insights, thanks for sharing!
A canonical example of blogspam.
Hehe, just looked through your posts. Hehehe
I really can't say. For the past years there have been no observed cons for now... To me it's a practical balance between over-configuration and too much magic. 
Ew
Isn't there better ways to do this?
what's wrong with this one?
I like the simplicity of this comment. That being said, it's always interesting to see how other people implement their means to an end.
Awesome! What's great about this approach is that a php-fpm worker pool offers a very unique balance between isolation across jobs and minimizing overhead. PHP's unique request-oriented architecture should lend itself really well to an async job queue Each job can use any code, but only the code it needs is loaded. When code is loaded, PHP's opcache skips reading from disk and parsing any source file that's been loaded by any other worker in the pool before. You can use apcu to explicitly cache your own data structures between workers under keys with extremely low overhead. Meanwhile the reset process already built into php-fpm for processing requests effectively isolates memory and faults to each job. I haven't gotten to try out your implementation yet, but please ignore the low-effort "ew" responses you'll get, this is a worthy pursuit
Why not use CURL?
Why not follow psr-7, psr-17 and psr-18 and make your code future proof?
This is brilliant 😂 &gt; I have not fully tested this code, so you may find edge cases that need to be fixed. 
Alright I think I agree, sorry for antagonizing you.
JSON files are easy to read in almost every language. 
I like this. Has this been tried in production?
In another language you might have to figure out the best data structure to store that JSON data where in php not only are they in perfect alignment with php associative arrays but as a php dev you can't even name another data structure.
A good suggestion, however that only describes the interface, and not the implementation. You could still use CURL or file_get_contents while adhering to those specs.
From what I understand most of the issues with Wordpress are from crap plugins and themes. I'll use some of the more well known and vetted plugins for the standard functionality that every site should have. For custom functionality I'll write a plugin before installing God knows what crap plugins shoehorned together into a shitty semblance of what the customer wants.
Sorry, I know I'm really late posting this, but I've been busy. All you need to do is make sure you set the following environment variables, assuming you're using PHPSTORM: `export XDEBUG_CONFIG="idekey=PHPSTORM"` `export PHP_IDE_CONFIG="serverName=server_name"` Also make sure `xdebug.remote_enable=1` is set for your CLI configuration. That should be all you need to do to make it work for CLI scripts. In my case, I'm using the `nginx-proxy` docker image for service discovery, and I've added lines to my Dockerfile for my web machine that writes the following to `~/.bashrc`: `export PHP_IDE_CONFIG="serverName=$VIRTUAL_HOST"` This works because $VIRTUAL_HOST is set in my `docker-compose.yml` file for each site that I'm spinning up.
I haven't done what you're asking, but I have manipulated SVG through JavaScript. From scanning both libraries, I'm left unimpressed. They both seem to provide only a low-level abstraction on top of SVG with little in the way of useful logic on top of that. SVG is a markup language, just like HTML. It would be simple enough to output your own SVG. Parsing would be more complicated and likely require one of those libraries, but it's also far less likely of a need.
This podcast might be related if you want to do some non-poc stuff with this: [The PHP Roundtable] 076: Concurrency, Generators &amp; Coroutines - Oh My! http://podplayer.net/?id=54934869 via @PodcastAddict
do you honestly avoid using curl for fear it won't be future proof?
This is something I've tried in the past and never found it stuck. However I've had a good long think about something I find is missing from my automated life, and I think I got a good idea. :) 
This is too simple. The code base I'm working on right now has 150 models. Some of them are organized by what you call 'Domains' but many are used in the majority of "domains" so they make more sense in the main Models namespace/folder. Also some of your examples show logic in the controller that probably makes more sense in the Model. Actually in my ORM you can specify validations at either the model level or the controller level. It's usually good enough to put them at the model level to make sure all the server-side code is validated. Occasionally there will be something I want to ignore a validation on the server-side so it goes in the controller instead but I don't really understand why a controller wouldn't just be a passthrough down to the model. IE the model does the validation and throws an exception which the controller catches and passes up to the client as a JSON return.
I like this 
&gt;Why not follow psr-7, psr-17 and psr-18 and make your code future proof? I'm failing to see how using CURL means you can't be psr compliant? 
&gt;A canonical blogspam example. Coderwall is nothing but blogspam, I'm surprised it hasn't been banned yet
My list: **Codingblocks.net** as the name suggests the hosts are heavily .net based however don't let this put you off as the topics they discuss are general programming that can be applied to anything [https://www.codingblocks.net/](https://www.codingblocks.net/) **Coder Radio** Probably one of my favorites, they cover all manner of development topics which is great. They talk about the topics from a personal experience instead of just a dry monotone of reading release notes [https://coder.show/](https://coder.show/) **Shop Talk** they cover all topics in development but tend to learn towards frontend development still a good listen [https://shoptalkshow.com/](https://shoptalkshow.com/) **The PHP Roundtable** this podcast is probably the most technically in depth PHP based podcast so sometimes the topics can be a bit dry but you can really learn a lot [https://www.phproundtable.com/](https://www.phproundtable.com/) **North Meets South** they have a heavy focus on Laravel which won't be for everyone but still a great podcast [https://www.northmeetssouth.audio/](https://www.northmeetssouth.audio/) **Laravel News Podcast** made by the 2 guys from North Meets South. Obviously heavily Laravel baised but good if you're in that eco-system [https://laravel-news.com/podcast](https://laravel-news.com/podcast) **Full Stack Radio** although it's named 'full stack' a lot of the topics are frontend based still a very well put together podcast with great content. [http://www.fullstackradio.com/](http://www.fullstackradio.com/) **CodePen Radio** great podcast from the maker of CodePen, they discuss a lot of frontend as you would expect but also business topics around running a business online [https://blog.codepen.io/radio/](https://blog.codepen.io/radio/) &amp;#x200B; There are others like syntax and devmode but others have mentioned them.
why would you read a json, then inject it using php echo... why not load the json using javascript. and no, not 9 times out of 10 is json used for javascript. it's used for much more than that but yeah this is weird. it's a glorified blog post about "hey there's this function called json_decode" you could make another 3 page post about "print_r" or "foreach" etc. iunno, i'm not usually cynical about stuff like this but this is strange
&gt; Isn't there **better** ways 
Logrocket looks cool anyone use it?
I'd actually welcome that tbqh
damn scott, well played.
:)
Indeed :) Golang is used since searching "Go" on Google is not really... efficient. At least I think it's one of the reason.
Ask the comment OP, not me.
It was a joke.
No, I’m suggesting additionally adding compliance to industry standards. That will make your code future proof.
&gt;The code base I'm working on right now has 150 models. Some of them are organized by what you call 'Domains' but many are used in the majority of "domains" so they make more sense in the main Models namespace/folder. Obviously I don't know your application or business, but my gut feeling is that many of those models belong in some reusable "subdomain" that is used by other, larger, domains. Having a "models" namespace/directory is bad organizational abstraction in every application I've looked at. It's implementation detail leaking out into your app's organization. Unless your models are just dumb structs. In which case, it might make sense the way you have it. But if you have special exceptions, or helper functions, or controllers for a model, then it's really just part of a domain. One of the points of the article is to not spread your domains out. &amp;#x200B; &gt;Also some of your examples show logic in the controller that probably makes more sense in the Model. I read the article this morning and don't remember it, so I wont comment specifically. But there is definitely multiple points of view with respect to what logic goes in a model. If you're going strongly OOP, then the models are domains and basically contain all domain logic. If you go the other direction(s), then models should be as dumb as possible (only getters and setters) and business logic goes in helper functions and/or global-state-modifying helper classes (DB access, network communication, etc).
Ah, of course. This makes sense - exporting the IDE key. It works! Thanks for taking the time to reply! Really appreciate it. 
No, it's not. I play the board game Go, and man, it's hard to Google.
CentOS, speak up!
Followup: Yes this is written in PHP, or else i wouldn't put it here, ive been working on it for the past month now, and its gotten some cool features, just 30 minutes i commited jit.si support, meaning that you can now video/voice call other people with the click of a button. The main idea was that you can simply message 2 people, but now ive added features like group chats and of course the exciting me, video calls. Suggestions and feedback welcome here
this was great! can you create a pdf of my [website](https://www.safirazmakian.com/)? [https://www.safirazmakian.com/](https://www.safirazmakian.com/) &amp;#x200B;
If we're talking about CLI scripts (cron) I'd like to throw this one out there: https://reactphp.org/child-process/ I've used this in production recently and it's been great. You can set it up to have n-threads running and if one particular job is slow it won't slow down the whole job queue.
This appears to be *founded* on the idea that there are other ways to do this. Queue interop gives you a standard approach for building up the queue, and the FPM Connection factory is but one of many connections you can build contexts from. The big thing I like about this approach is that, unlike installing another MQ solution, everyone already has php-fpm running, so the overhead is absolutely minimal. It's more or less a wrapper around the same stuff you use to let webservers queue up work. For those unfamiliar with why you'd have an MQ in the first place, the main reason is so that all the work done by the server isn't in the context of an HTTP request. e.g. if I had some php that was currently on the endpoint `/reportPdf`, and that code builds a 2000 page PDF full of images, lots of dynamically-generated text, etc., it could take a while to download. Rather than have my users sit there with a spinning wheel (or initiate some async fetch on the client side that risks timing out), the actual `/reportPdf` could instead reply with a job ID. Building the actual PDF would run from the message queue (in this case, a queued up job on the FPM), and once that finishes we could email the user, tell a connected websocket to response, have some endpoint (E.g. `/reportPdf/queue/{jobNumber}`) that the client side polls now return a PDF, etc. People like their MQ solutions, and a lot of devops people can be pretty rabid about their choice. The author seems to understand this, which is why they chose a standards-based solution. You could easily switch from this to, say, rabbitmq if you like. You could even have your dev machines use the FPM factory, and production use rabbitmq.
Every day. It's a couple of lines of JS and you're up.
Wondering why instead of having those global \`steam\` functions, that you don't just provide some additional static methods for instantiation of your Parser class: \`Parser::fromFile(string $filename): Parser;\` \`Parser::fromString(string $str): Parser;\` &amp;#x200B;
why isn't psr-7,psr-17 and psr-18 and some extension implementing all that shit bundled with PHP core directly is the real question here. 
Is it UTF-8 aware? TCPDF is.
Assuming this is a learning experience, good on you for trying out vanilla PHP before getting head first into a popular framework. With that said, those frameworks help you write safer code as they sanitize input and queries for you. Currently, you are trusting user input in a lot of different places. For example, as long as I have a valid username/password (user credentials being passed as GET parameters is bad for a number of reasons - browser history, server logs, etc..) I can see the messages of any user as long as I know their ID (https://github.com/saderror256/starchat/blob/f71c3bac271979aad70608e66da739c46e921fc8/api.php#L61) I just have to pass it in the readmessages param. You have this kind of logic a bit all over the place. I suggest you try to understand and fix this kind of issues by yourself.
Using the right tool for the job. This implementation uses a tool that was designed for web context for async work. Other tools were originally designed for async work, and avoid a lot of dumb pitfalls. For example, if you overflow your "work queue" using this model, requests will just drop on the floor with a 5xx response. With a real work queue, it will just get added to the end of the queue. Unless you have very few async jobs running, this is likely to become an issue within seconds of getting it into production. ANY sort of real work queue software simply will not have this problem. +1 for innovation, -5000 for execution.
I am working on this text filter thing, and I need to remove cyrillic text. Honestly, any non-English/French/Spanish character is probably ideal. Anyone solve this kind of problem? 
Do you just mean: str_replace("world","Peter","Hello world!"); -&gt; "Hello Peter"
[Detecting russian characters on a form in PHP](https://stackoverflow.com/questions/3212266/detecting-russian-characters-on-a-form-in-php) &amp;#x200B; Does this help?
Really cool project, mate! Hope to use it in the future, not only as a tracking approach but in a way to improve my users experience! &amp;#x200B; Thanks! ;)
The master branch now has php 7 features, and a php-legacy branch was created to stay catching dust \^\^ Thanks for you suggestion!
`[iconv](http://php.net/manual/en/function.iconv.php)`?
How do you deal with domains that need information from other domains? For instance, one domain's actions is dependent on another domains? Or another domains value object? Would that be a good example of programming towards an interface that sits directly in each domain that requires it? Further does that mean some models implement contracts of other domains?
Do you think Commerce 2 will fix the issues you currently have with it?
I'm assuming you want to filter all cyrillic characters, not only russian characters, ok? &amp;#x200B; echo preg\_replace('/\\p{Cyrillic}/u','',$string);
The main problem doing it this way is that you lose data integrity in the database, because you can’t have a foreign key from the comment table to the post or page ID. You might be better off having separate comment tables for each entity.
You could try to somehow convert each character into their Unicode variants, then check if the codes match, or something.
Always good to see another approach. Using cron to fire a php file that processes pending jobs has some problems but systemd.timer can be used, everyone has it, and it's async. https://wiki.archlinux.org/index.php/Systemd/Timers https://medium.com/horrible-hacks/using-systemd-as-a-better-cron-a4023eea996d
it's tricky, but array_values will always work
I'm with you. I just wanted to point out that 'better' is an empty statement in development.
A very British joke.
In our projects, there are cases where domains can use actions and models from other domains. Most of the time there are interfaces which define a strict set of rules. I will probably write a followup post on this topic. Somewhere else in this thread I also another good conversation on the topic: https://www.reddit.com/r/PHP/comments/9oavr1/organise_large_code_bases_by_domains/e7t6cgc/
&gt; Also some of your examples show logic in the controller that probably makes more sense in the Model. Which examples? Also, from the start of the post: &gt; It's also important to note is that this approach isn't a silver bullet. At Spatie we choose a different project structure based on the needs of that specific project. It is possible that your project isn't a good fit for what we'll be reviewing today. I can only agree with you that the principles described in the post might not be the best solution for your case. That's fine. I don't know if you meant to do so, but your reply sounds rather aggressive, and I don't see the need why.
&gt; For example, if you overflow your "work queue" using this model, requests will just drop on the floor with a 5xx response. One might setup a different php-fpm pool for their async jobs. There is no need to use the same php-fpm that serves web requests. 
Domains (or bounded contexts) are about splitting at the right level: finding the right abstraction and keeping flexibility. I'd say don't generalize or merge concepts unless you're absolutely sure they go together.
Great article!
That doesn’t solve the problem at all, just increases the delay before hitting it slightly. It’s just the wrong tool for the job. If you’re forbidden from setting up a proper tool due to some security restrictions you can make it work in a pinch, but at that point you’re better off hacking something with cron. In my comment I actually meant that your async job requests would get dropped. But yeah, if you share pools, then you can DOS your web requests too. 
How important is referential integrity when it comes to comments? You drop a post and the comments *could* be left hanging there. Is that a disaster? 
It was the same for me, but with Scala. It changed how I write in every other language, be it PHP, JavaScript, Java, ... Just running through Odersky's functional programming principles with scala MOOC was already enough to permanently change my habits.
Probably not with comments, but the orphaned data could be something you don’t want sticking around. 
I would call it "Service" and not "Action" because the term "action" is already used in the context of controllers.
What?
I second this 
Should phpdbg be faster than xdebug? I wanted to try out infection but it's really "unbearably slow". I don't know if I'm doing anything wrong or it just doesn't work good in our environment... &amp;#x200B; I've got arrount 1000 tests in my project, many of them are functional dispatch tests, without a real database but including all the framework stuff. They take about 1minute on my machine. With infection and xdebug I don't even get past the first step after 20 minutes... and thats without all the mutation stuff... &amp;#x200B; Is that normal? xD
Yeah, entirely not what I expected.
Was tossing up between learning Cake or Laravel and ended up going with Laravel. Cake seems so dead, I mean take a look at the subreddit all it is is mod posts about the latest release and &lt; comments. 😟 I like Cake because it feels more manual to create things and hence less magic than what Laravel offers which I like because I understand more what’s going on under the hood. Just seems like there is no community for Cake like there is for Laravel..
Nice article! What you call Actions I usually call Domain or Application Services (depends on the service). I also like to have a separate folder for Commands (and Handlers), some call them Use Cases, where I place Commands which show you how you can interact with the domain. Web and CLI "controllers" use the commands, but other domains communicate via Application services. Domain services are used only by the objects from that domain.
There are programmers (hired) who don't know that?
You want to open the files in the client? PHP can't do that. You need to download the file and then the OS will do that open and viewing.
Alright thanks. I know... I'm already trying to write more unit tests, but in many cases it's still easier to write functional tests to check for errors (there "might" be too much logic in controllers :))
 array_key_exists($key, $array); // ideal in_array( $key, array_keys( $array ) ) // This creates an array of keys from the given array first, which makes it much slower than array_key_exists() I've never seen anyone write this ever. Some useful information regarding `array_key_exists`: * if such a check is in a hot path, prefer `isset($array[$key])` if you know that the values in `$array` are not null. * [One day `array_key_exists` will outperform `isset`](https://github.com/php/php-src/pull/3360)
Interesting and fascinating hack, but if you do this in production you might as well do crons over SQL... 🙄
Again, I'm not against those patterns per se. I think there is more people than you think that read those, even without needing it, and they will try to apply that where it's not needed. Even worse when they are beginers and don't understand the underlying context and the why the trade off is a net positive. I just ask for a bit more of "what" and "how", and a bit more of "why" and "when". Between my caricatural example of a brochure site and amazon, there is a world where no patterns/thoughts about architecture are a no go, but where DDD has to be worse than some simpler solution too.
Yes, of course. My point was that JSON is actually harder in PHP than in other languages because of its stupid arrays.
&gt; by "manual wiring" is that I need WAY less interfaces … &gt; For example, let's say you have three iterators you need … &gt; In manual autowiring you need no extra classes or interfaces Ah yes, well in such cases _I do_ manually wire. But the *majority* of cases I have are direct instances of a specific type, less interfaces and less so specific like your example with the numbers. &gt; I get reusable components out of every project I do. At the very minimum 10-20% I think that is important to that discussion. For years I've the fortune working at a company on a (single) SAAS product. We don't write libraries or reusable components. We bugfix/impprove/add features to "the product" as such. &gt; And another part of reusability is being able to use THE SAME TYPE MULTIPLE TIMES AT ONCE in a project Totally understand and in those cases I do write manual writes. But that's, like, just a few percentage of all. Mostly they're automatically wired because there's no interface, just the type. The vast majority.
Maybe I'm just lucky, but I hardly have to requirement not being allowed to have dependencies. And for _seemingly trivial_ stuff I usually just use something like GuzzleHttp and don't think about it twice. Also because I know I'm "future proof": - need OAuth1? There's a middleware handler for it - need to perform logging? Sure, I'll add my own handler - need to add HTTP retry capability, tune it _and_ ensure each retry is also properly logged? Done deal That is more important to me nowadays then the minimal amount of PHP code to perform an HTTP request. But: just stating my experience, nothing wrongs with the OP approach.
Yep, kind of misleading.
I started out with C# and then moved to Java because on my personal projects it was easier to set up and copy Java environments than C# (MS) environments. I create an environment on a virtual machine and then copy it for different projects, but MS would go haywire because of licensing issues. I don't know if that's still the case.
Have you taken a look at the [Transliterator](http://php.net/manual/en/transliterator.transliterate.php) class? It's part of the intl package. The top comment has a nice example: `&lt;?php` `var_dump(transliterator_transliterate('Any-Latin; Latin-ASCII; Lower()', "A æ Übérmensch på høyeste nivå! И я люблю PHP! ﬁ"));` `// string(41) "a ae ubermensch pa hoyeste niva! i a lublu php! fi"` 
Neat :) Never thought of this &amp; already know a few uses for it! Thanks OP 
Nice article. I especially liked this from the value object section: &gt; Because of convenience, we're using public properties. You can imagine why we're looking forward to strongly typed and readonly properties in PHP. So many developers recoil against the very notion of using public properties regardless of the use case. I might point out that there is a class level property doc comment that can effectively type your properties and make them read only. At least as far as your IDE is concerned: /** @property-read PriceInterface $price */ class ContractLineData { public $price;
I started out with PHP then used CodeIgniter and then learned Laravel. I would say that your question depends upon what you plan on doing with your coding. Are you looking for work? Is it for personal projects only? If you're looking for work, I would suggest Laravel. If it's for personal projects, I'd suggest starting off with simple projects using something like Symfony or CodeIgniter to build a simple restful service. In either case, create the simplest projects that you can to begin with. Don't be intimidated by frameworks, you can download the basic vanilla framework and it runs out of the box. Experiment by adding things to it. Start out by adding static views and learn how they're called by controllers. Then add some fixed data from a model and then add a database connection, etc... You can pick up writing object oriented code along the way. Most of the examples you're going to see using frameworks will be OOP. Look at them and try to understand them.
Damn. I'm sorry for you. But you're right and I'm wrong: it's not because of that it's called Go and Golang. Actually, the language itself is called Go: https://tip.golang.org/doc/faq#go_or_golang
Yeah that's another good solution. Although more complex than mine, as you now have more tables and models to maintain. I use linking tables in most cases, as extra info is often needed about the relationship. But sometimes my solution above is suitable too. Is adding a column with a default of NULL slow on mysql? I'm using postgres for everything now, haven't been working on anything big lately where I'd noticed it being an issue. Generally a default NOT NULL value will make the change much slower I think.
&gt;Yeah that's another good solution. Although more complex than mine, as you now have more tables and models to maintain. That's not entirely true. In Laravel you only have set the hasManyThrough relation with the Pivot model. There's not much to maintain in there. For Symfony with Doctrine, you don't have to maintain anything, as you have two entities which are related and you only have to provide the join table name: &amp;#x200B; /** * Many Users have Many Groups. * @ManyToMany(targetEntity="Group", inversedBy="users") * @JoinTable(name="users_groups") */ private $groups; &gt;Is adding a column with a default of NULL slow on mysql? I'm using postgres for everything now, haven't been working on anything big lately where I'd noticed it being an issue. Generally a default NOT NULL value will make the change much slower I think. Yes. Adding a column with or without a default value is slow on a large table. An ALTER TABLE in MySQL creates a new table with the desired structure, copies the data from the old table to the new one and destroys the old table. In PostgreSQL it's almost instantaneous.
It feels simpler to add a new table than to add a new column to a table. And with the pivot table, you have a place to store data about the relationship.
Thank you for you information though, I will be releasing a commit today fixing all that you stated, one of which now verifies that the conversation is only accessed between the members (using tokens), and messages have been moved to mysql tables for a much cleaner experience (also allows ability to uninstall starchat while keeping all messages in the table)
this is an abomination, just so you know
All my coworkers looked up from behind their screens when I laughed out loud.
The emulator speed is slow, but does demonstrate that PHP as a language has potential to do a lot more general programming tasks than just web development it was designed to be. 
I am impressed
What in the name of all that is good and light is this!?! (it's pretty freaking cool)
Thanks, I hate it!
[You were so preoccupied with if you could, you didn't stop to thing if you should](https://www.youtube.com/watch?v=9nazm3_OXac)
That is really cool. Imagine it with JIT from PHP 8 
PHP is an excellent language capable of what you throw at it, though this particular code repository I would *not* recommend as an example of PHP's capabilities.
You're right! Create a Short Link using PHP.
bro - you're sitting on a SaaS gold mine. Imagine the possibilities
[the opposite of good code](https://i.imgur.com/L0ChmoG.jpg)
Awesome work! And nice POC BTW, because everybody would have guessed it could work despite being slow, and you just prove it.
I need an old priest and a young priest. 
&gt; The author is completely against piracy and respects all the copyrights, trademarks and patents of Nintendo. So I take it the author tested it with non-pirated NES ROMs? I mean the `tests` directory is empty.
Wow, how amazing. I would love to see more interactive stuff like this with PHP.
There are packages like [league/climate](http://climate.thephpleague.com/) that can do terminal colors, but I bet that incurs a decent amount of overhead, and the author may have to rewrite how command line arguments are handled to use it. 
I feel a little proud of myself knowing that the langage I'm working with is more than that
oh i mean how c# or java print right to a canvas / sprite renderer (e.g. minecraft) has that pipeline never been build using php?
Haha well done! :)
It really is shockingly flexible in allowing you to achieve terrible things with it. After probably close to 15 years now, I don't think I've found a task it was simply incapable of accomplishing, even if that required some truly dirty hacks. Source: have done many terrible things with it.
Technically, he could have ripped his own ROMs from carts he owned (altho I suspect he didn't lol)
Some years ago I had a great page bookmarked about the many ways you could traverse different types of array and object lists. I've lost it though, and Google isn't helping me find it again. Does anyone remember it and still have it bookmarked? Thanks. 
I've not personally played with it yet, but I've heard they've addressed my two main issues which are no backend ordering functionality and no sales report export functionality. I think Craft3 as a whole is moving in a nice direction and I need to find some time to get into it again. 
oh boy...
There actually are bindings for GTK, Qt, Tk and probably more. Shouldn't be hard to get direct framebuffer access either, but I haven't found an extension for that.
that makes a lot of sense. would be a fun project
what's the use case for this? 
The receiving machine has to be configured to receive files. There's no good reason to have a recipient machine that is open to anyone sending any file to it (you could max out harddrive, copy over malicious files, etc). depending on what the recipient has setup to receive files: SCP SFTP HTTP (via POST) I don't think you can do what you want without some control of the receiving machine.
I don't know how the NES hardware works but the slow down with the while true loop in the frame function of the NES class. The frame function consists entirely of a while true loop that loops in excess of 10k times (~10292 times to be exact) before the ppu-&gt;run() call finally returns some data and a frame is rendered with that data causing the loop to end... On my system this process takes about 200ms per call to frame(). Each individual call to cpu-&gt;run() and ppu-&gt;run() take microseconds to execute but do that 10k times each and it really adds up. I'm curious is the cpu could be optimized any. execInstruction() is just a giant switch/case of a function.
Well technically it can accomplish anything 'C' can accomplish. In actuality, the "proper" way to accomplish some task that would seem extremely inefficient with PHP is write the most calculation heavy parts in C++ (for example), compile them for the target system, and just call them using exec() or the sort.
i wrote [this utility](https://github.com/Pamblam/iLoveLAMP) that has a file transfer feature using ssh rather than ftp. maybe it will help you, but based on your directory separator, it looks like it might be a windows server.
Is your app on a Windows server? Check if the server has the share connected. 
PHP really can do anything!!
Sometimes I see something like this and I ask myself why would anybody do this? Then I remember, sometimes it's nice to just explore and try something new. I say kudos. 
Curious, is this automated or you did spend the time changing the image?
Damn, I was about to *try* to make a Atari 2600 emulator in PHP. :)
I also have a problem with outdated practices/codebases, but it's not a problem of PHP alone. I get frustrated a lot more in the Javascript ecosystem.
How is this in any way related to php?
The branch has fixes for HHVM? Must be Mark Zuckerberg.
LOL. This script doesnt do any cracking. It just pulls text from a registry.
Check if the PHP server has the share attached. If it isn't, that's most likely your culprit. If it's attached, test the path with Windows Run (Windows key+R). Once you have the correct path, use single quotes to wrap the path in your program. 
If the folder doesn't exist, you probably need to create the folder before uploading the file. You may need to start at the root folder, and iteratively search for the path folder, and creating it as necessary before uploading the file. If you're connecting via SFTP, you should be able to run a \`mkdir -p /path/to/folder\` before uploading.
I got a good job once just because they had enough with outsourcing to India for cheap and poor code. So, no...
[Why?](https://morbotron.com/meme/S08E04/57683.jpg?b64lines=IFdoeT8=) 
I absolutely agree, the "*thanks I hate this*" thing is a meme. Experimentation has been replaced by shit like frameworks and coding standards. People no longer do things from scratch to see if they can be done in a better way, instead we are all building on aging blocks. This kind of experimentation is needed.
I jest. You’re correct... the code is clean. It’s impressive work
Yeah, it can be used like that indeed.
I meant that I needed to have an easy way to serialize any kind of objects. ValueWrapper allows users to customize the handler of any object type quickly and easily.
“Spent time” for all of 3 minutes. I had the template from a few random things I did for posting around the office. So I mean, yeah - I half-assed this all on my own. 
Sym*f*ony
Did you try mapping the share to a drive? I believe this will work as an abstraction layer and you will be able to save files there
I have an amazing reason: It allows me to sit on my first-country white ass making all the gold.
For major projects it’s not worth it in the long run. Between all of the time lost due to time zone difference and extra management overhead needed to oversee work being done you save little to no money. When you add to that usually inferior work quality because the teams are usually juggling multiple projects at once it’s just not worth it.
With the right team, it's like magical pixies came and fixed your code overnight. It's awesome.
[Rsync](https://www.jbnet.fr/systeme/windows/windows-installer-rsync-avec-git-bash.html) ?
This article is obviously not aimed towards software developers, it is aimed at ignorant business directors. Every single one of those headings/topics is just an outright lie that will have those decision makers salivating at the prospects. Unfortunately when the truth becomes apparent they have already moved jobs with another notch on there belt as having delivered x project.
SCP would be the obvious choice. EDIT: Oh Windows? Not sure if it has great tools like SCP
If it's getting popular we should make a dedicated subreddit!
I don't even bother to read the "articles" if the poster's username is related to the site in question.
They will use it until the first server Kernel error when they'll loose everything) :)
I mean at a fundamental level it is just a wrapper around C functions.
Honestly, what's with the low effort posts lately? Can we nuke this shit?
Downvote this stuff. We need a subreddit rule for this...
Do not downvote. **Report** it. A post with even with 5% score would remain in the feed. While the more reports it gets, the faster mods will move their asses and remove it.
At least I spelt it right in the title :) Any other thought?
That's some savant shit
I figured there was sarcasm in there since you said thanks. 
Outputting to a Canvas object in the browser should be straightforward. The code is even well-organised enough to make that as easy as possible — take a look at src/Ppu/Canvas
The one service that I wish I could casually lazy load is the mailer service as it requires fairly substantial time to instantiate. Sadly the Swift_Mailer has no interface to proxy. Any work arounds besides the usual container injection or writing a factory?
So does JavaScript. And thanks to that, and people's unwillingness to learn new things, we have Electron apps eating up all my RAM. This is a cool demo, but please let's leave PHP where it belongs. PHP is not well-suited to native apps, so let's not keep putting the square peg into the round hole.
I mean, it's a Turing Complete language. Of course you *can* do anything with it.
&gt;you must not be a frequent php user. Still not answered why?
Yep, everything is somehow connected to PHP in one way or another
So why?
So? Was there any kind of information that it would do such things?
I'll have to check if it's possible. I've been using a lot of mapping but on Linux. File Transfer from server to server on Windows is kind new to me. 
The folder exists, but I've tried the mkdir but it says that the path doesn't exists. 
I'll check it. Thank you for the help 
why are you following a php subreddit if you don't know the language's purpose?
it was a light hearted joke. dozens of other people got it but here you come getting all offended and try to analyze it and i'm just not going to go down that road. if you want to know why php isn't meant for writing emulators take a class. but chill the fuck out, ok..
it was a light hearted joke. dozens of other people got it but here you come getting all offended and try to analyze it and i'm just not going to go down that road. if you want to know why php isn't meant for writing emulators take a class. but chill the fuck out, ok..
i answered the question, he (and you apparently) just weren't sharp enough to pick up on it.
You are welcome.
Yeah it has winSCP I used it a lot [https://winscp.net/eng/docs/installation](https://winscp.net/eng/docs/installation)
Saying "XYZ knows why" is not answering the question, knob. I know what you are hinting at, but just like any time this sentiment passes by you are just parroting other people and can't actually explain why. 
They are already available. This (and the blog post) have misleading names/titles.
That actually runs a lot faster than I was expecting.
parroting who? i was literally the first person to comment here, dipshit.
Is your FTP server mapping the root directory to a different place? The physical path of the file from the server’s OS viewpoint (where you are looking) might be /chrooted/physical/path/to/file, but the path provided by the FTP service would be /otherRoot/path/to/file. If you’re trying to mkdir the chrooted path while inside the otherRoot, your request will fail.
Can someone explain what exactly those proxies are for?
"My team and I - including Dmitry Stogov, Matthew Weier O'Phinney and Enrico Zimuel will be leaving the company and looking for new opportunities. This isn't going to happen immediately, but the decision has been taken."
Does anyone actually used Zend Server? 
&gt;here's a question.. I'm still waiting for you to answer mine but you keep avoiding it. &gt; why are you following a php subreddit if you don't know the language's purpose PHP has many purposes, it's a general-purpose programming language so I'm not sure of your point? &gt; to anyone who is familiar with the language, it is obvious why Okay, I have worked with it professionally for 7 years so unless I was asleep for those 7 years it's not obvious to me. So my question once again why is it an abomination?
bug report volume is a good metric indeed, thanks! 
I disagree with the premise of this article. You’re removing referential integrity for the sake of having less tables; not because polymorphic relationships solve a problem. It’s also an abuse of the term “polymorphic”. You do not have multiple implementations of `Comment`. In what context? Is the `commentable` relationship expected to return an interchangeable result? It doesn’t seem that way. The biggest complaint is that this doesn’t offer anything that the documentation doesn’t. All you did was swap `Video` for `Page`.
I used Zend Framework for a few projects and then moved on to Symfony and never looked back. Zend Studio merging with Eclipse was garbage. And Zeev's profile links to Google+. That's all I need to know.
Just tell him it’s insanely stupid to connect something to the Internet without regular security updates. The SSL heartbleed security breach was discovered after 3(?) Years. And now imagine after the support for php 5 ends someone finds a similar problem... 
Haha ...No
Quit and switch to a company with a CTO that actually listens to professionals that he/she hires.
The contributions by the people mentioned in this post are so wide I cannot list them all. But are you using PHP 7? Have you heard of PSR-7? PHP middlewares? I'm gonna stop here.
You mean PHP 5.6 = 4 years and PHP 7.2 = 3 years right? You seem to be comparing the entire support window of PHP 5.6 against the security-only support window of PHP 7.2. In any case, the relevant metric is not how much total support a version received, but how much support it will still receive *from the current point in time*. For PHP 5.6 that's about one month. For PHP 7.2 it's about two years.
I didn't even realize Zend Framework was still a thing.
Oh it is, the devil knows your it is
thanks! keeping old software = growing debt is solid as an argument
Easy. PHP5.6 + PHP1.6 = PHP7.2
No idea why you got downvoted, that's the best advice I read here so far. I'd also say this CTO is in the wrong position.
there is a spoon after all \o/
Because people think fighting with egoistic CTOs is a good way to spend your days at work, stressing as hell. Dunno man, maybe the American culture or maybe secret undercover CTOs are downvoting 😂
Recommended reading: https://paragonie.com/blog/2016/10/guide-automatic-security-updates-for-php-developers#outdated-software-risk
Use a static analyzer or PHP Code Sniffer with [https://packagist.org/packages/wimg/php-compatibility](https://packagist.org/packages/wimg/php-compatibility) to see what (if anything) might break. 
Seconding htis - you can also see Paul talk about the process here: [https://www.youtube.com/watch?v=65NrzJ\_5j58](https://www.youtube.com/watch?v=65NrzJ_5j58)
I was only hypothetical, anyone should run from such a CTO of course.
Consistent with the rest of the code. I mean, the `$` is part of the variable name in every other use of a variable… having it separate inside the string is just weird! Also, it makes grepping a little easier.
I didn't know that one! Thanks! :) 
Ok so so in all seriousness. \- for a developer there should be no question whatsoever to switch just because it doesn't have security support anymore. But you have to think not only about PHP itself, but also the dependencies that project(s) use. No one is patching old Doctrine ORM security holes, old symfony is also not supported anymore. Some of those dependencies might already be switched to 7.1 or even 7.2. \- Another thing is that you might have a very hard time finding developers that are willing to work with such an old version. It just screams "run away" from far away. Unless they are paid a ton of money, no sane person should jump into such an old project imo. \- Existing developers are actually would be impacted negatively too, their future career prospects might be gloomy because they had no production experience with latest PHP versions. Some people just don't want to hire a person who is stuck 4 years back. \- It's not fun. Work should be enjoyable.
&gt; cross-comparing the larger column with the smaller column yep sounds very much like [this](https://youtu.be/3boy_tLWeqA), and it didn't happen yet so your advice will be of great help, thanks!
didn't you mean [5.6](https://bugs.php.net/search.php?limit=30&amp;order_by=id&amp;direction=DESC&amp;cmd=display&amp;status=Open&amp;bug_type=All&amp;phpver=5.6) vs [7.2](https://bugs.php.net/search.php?limit=30&amp;order_by=id&amp;direction=DESC&amp;cmd=display&amp;status=Open&amp;bug_type=All&amp;phpver=7.2) ?
I don't think you realize how big of a contributor Zend was and is to the entire PHP system. The framework may suck, but it was better than most things offered back then. They also contribute heavily to the core.
I thought only "Enterprise"-sized businesses used it?
Wikipedia claims that Idiocracy is a comedy, but I very much believe it's better classified as horror.
I mean what's the minimum version of PHP required to run the latest version of PHPUnit? As unit tests are generally considered "good", it seems you should be on at least [that version](https://phpunit.de/) of PHP. 
All of your replies had a "PHP sucks, but I'm not going to say it, only suggest it" vibe. That's why people pressed you on it. &amp;#x200B; &amp;#x200B;
Ah man, I used to love Zend Studio before that, too. 
You are right. I took the low road and was trying to be sarcastic. I do appreciate all of the great things he has contributed. Zend Studio for Eclipse tho...
5 was the bomb. Eclipse felt like coding through mud.
I evaluated it, definitely had some nice features....of which I can't remember
Yeah, it still allows you to see when the email was opened, but not IP address or anything else since it goes through Google's image proxy.
Man, trying to pass off your criticism as a joke is such a weak cop out. 
I have it for a legacy app because it comes with extended ZF1 support. It's not terrible, but it's also not great.
[TIL: you can use `array_column` with NULL in order to reindex an array](https://3v4l.org/RqoGL) (3v4l)
If you look at the Japanese blog in the Readme and use Google Translate, you'll read that the author bought a copier device and a SMB famicom cartridge from Amazon. Originally the author wanted to create their own copier using a Raspberry Pi, but didn't do it because it seems that NES Mappers would make it difficult.
About 5 years ago my team used the Zend Server CE on Windows, debugging was running really well and the log viewer was nice. But as a said we did not explore the production features. We also had Zend Studio licensed then because it worked well with Zend Server &amp; Framework and had some additional features. But the Eclipse-ness bugged us out so we switched to Netbeans &amp; Uniform Server Z; now we are at PHPStorm &amp; Neard. Still on Windows :)
We have it on one of our systems. It's a proprietary OS so our only option is to use zend server or compile ourselves and hope it works. 
Turn your warnings on while on 5.6 (itf not already) - still something to see? Fix it ASAP. Then transfer a copy to 7.0 on a test server, turn warnings on, classify the findings. Think about what source code changes could be automated and then give your CTO an estimate, times 2. 
How would software where you date php look like?
It would be filled with break ups
Hi everyone, I've just released a new version of [SPX profiler](https://github.com/NoiseByNorthwest/php-spx) (and maybe the last one for a while). For those who don't know this profiling extension: - free - shipped with its web UI (nothing else to install) featuring full interactive time line &amp; Flamegraph - lots of metrics (not only time/memory) - easy to trigger (both CLI and HTTP request) - live profiling support for CLI scripts List of changes here: https://github.com/NoiseByNorthwest/php-spx/releases/tag/v0.4.0 Main changes: - Add sampling profiler mode: It is very convenient to get more accurate results to find a time bottleneck in a CPU-bound script with tight functions. The sampling period is configurable. - Add PHP 7.3 support: now SPX supports all PHP versions from 5.6 to 7.3 - Add Memory allocation metrics: it is now possible to track allocated/freed bytes as well as allocation/free count per function.
"Oh I need a break; before I continue; with this relationship model. You just handle me like an interface!"
is that not how blogger profiles work though?
We used to run Zend Server CE / Free a few years ago. Worked well and helped to get a more consistent stack across environments at that time. We stopped using it when they started changing licenses / pricing etc.
Knowing all the work they do. There must be some company willing to support that.
&gt; Still on Windows :) Glad we ditched that years ago.
Nah, simple old SublimeText here :)
I used it on one of my job few years ago. &amp;#x200B; it was great to \- manage the deployment, with the creation of .zpk (package containing you application) \- activate php features/extension \- restart simply the server \- debugging even in production with Zray (you can activate it just for your session and others options too) \- the Job Queue feature (recurring jobs, like Cron but way easier to manage/configure) &amp;#x200B; and surely other things I forgot. But that's quite pricey too ... 
Huh, neard looks pretty promising. Thanks for the hint
This is my sentiment as well. I used 5.2 for about 10 years (by changing my date to a point within my licensed period before launching). It sucked at modern versions of PHP, but since I was aiming for best compatibility, most projects were fine. One day, something got buggy, so I downloaded a demo of Zend Studio, and I've been using that for a few years now, cursing all the things that are missing from my beloved IDE. I hate how Eclipse manages projects. I hate not being able to do code searches on non-project files. I hate not being able to wrap lines. Sigh. Some day, I will try out PHPStorm and be in the in crowd.
I also read the blog post. 
Me: Are you mad at me? Php: 500 internal server error
date: i got a job promotion, but i can't work me: why? date: my shoes are deprecated
You can do the same thing with iis, the down side is that you have to use iis
ME: @Are you mad at me?
\&gt;looking for new opportunities at my company guy was let go and one condition of his data-transfer cooperation was he'd say that hes' "leaving for new opportunities". were they like fired?
This is really nice. Been looking for an xdebug replacement for quite some time now! Thanks for sharing :)
Both are open source, so can be forked. Worst case it means a new name. 
My last company bought it and spent over $100k dollars. Prior to that, we had a number of glaring problems that were due to growing pains. The main things we used it for could have been solved with capistrano and new relic (or even xdebug profiler) at a fraction of the cost. In the end, we configured a CI system that built the .zpks and deployed them to the servers anyway. After that, we were able to find some solid SRE's and the consensus among them was "wtf is this?" I can't see any SRE's ever getting on board with Zend Server because a competent SRE can do the same thing pretty easily with chef, puppet, etc. Zend server almost seems like it's targeted toward PHP developers that don't have devops/sysadmin experience and they know the name "Zend". We had issues with job queue skipping jobs from day one. We had to go back to having a dedicated cron server. We also had problems with zpk deployment from day one. The deployment system we were using prior to zend server would deploy code to a new directory then change a symlink from the location of the last deployed code to the newly deployed code. This had problems because occasionally apache would prevent the symlink from being updated because it was in use. We were told Zend server would solve that... Well zend server deploys zpks to a new directory then changes the symlink from the old zpk directory to the new zpk directory. We had the same problems. So while they have rolling deployments, it didn't really help because we still had to write code to take the servers out of the load balancer which would have solved the issues with our old system anyway. Granted this was 3-5 years ago, so maybe the project has improved by now (especially if it's a focus for rogue wave) but the zend server i know seems like it could have been surpassed in features and reliability by the scope of some hobbyists on github.
Hell this CTO is far from that even being their worst problem. It sounds like they don't know what versions, security, patches, or PHP are. Maybe they're that dumb. Maybe they're planning to scrap the php side completely. Maybe they're totally checked out of the job and conning your CEO. 
I got my current job because they outsourced to over priced and poor American code. So it is what it is. 
This is fair. Laravel is certainly the hot "new" chick on the block. I am partial to CakePHP having used it for so long. I did try out Laravel for a side project and was not too impressed. In Cakes defense the core team is very active. Mark Story and others on the core team are good engineers and responsive on github. Questions are regularly answered on stack overflow. Cake could really help itself out in the community outreach aspect for sure and I wish they would make this a focus. I'm wondering, did you look at Symphony at all or just Cake vs Laravel?
This looks pretty cool. Can you comment on how it compares with tools like xhprof, particularly in terms of runtime overhead? Looks like the metrics it produces are pretty similar, which isn’t a surprise given the inspiration section!
Just wondering, if you have stand alone scripts run in the browser that use large sets of arrays - say in the order of 500k rows, with the potential of it being used dozens of times during peak times, should you clear the arrays once the output is displayed on the page ? Would that be necessary for resource reasons ? Or does php clean that up once the page is finished loading?