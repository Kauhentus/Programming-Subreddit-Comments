Geat, printed out a bunch already. One thing to note that kind of bugs me... none of the CSS cheat sheets show browser support.
Can I make out with your face?
I agree. Just commenting the function is enough, without all the parameters.
I don't even agree with that. Functions should be 4 lines long, at most. Should give you enough information with the name and argument list as to what it does. Read the book "Clean Code" by Uncle Bob Martin. It'll totally change the way you think about comments, class organization and structure.
very naiceeeeeeeeeee
You're a minority in this opinion. Code completion is very useful for many. I honestly think it _is_ a good idea to be thorough. I don't think phpdocumentor documentation is _that_ useful, but that's not because of output. I don't think doxygen is very useful either =). That doesn't mean it's a good idea to document your code in a standard fashion. Especially stuff that can't be found from glancing over it, such as types and per-argument documentation. You're example is not a real world example. This would be more accurate: /** * The current user's id. * * @var int */ private $user_id; Not as useless in my opinion. I agree that @package doesn't have a lot of use, but typehints certainly do, for a lot of tools. Doxygen will not be able to determine if something is always supposed to be an int. Neither will it be able to determine what type(s) will be determined by the method. Just don't go overboard. Here's an example I wrote that has a ton of php docblocks, and although the documentation is still not complete, I think it's very useful: http://code.google.com/p/sabredav/source/browse/lib/Sabre/CalDAV/Backend/Abstract.php
I agree with the concept of small methods but 4 lines is unrealistic. Even if you use an ORM you'd be hard pressed to generate a query in that many lines unless you write ridiculously compact code. I usually start asking myself if I can refactor a method when it reaches 15 lines, 4 would just be killing myself with refactoring.
1. Read through "intro" tutorial online, get basic feel for whatever it is. 2. Come up with a small project as a goal. 3. Try to code the project, and as new things come up that I don't know how to do, I google it and find sample code. I learn how that works and then incorporate what I learned. The important thing is to not just grab code and use it but learn from it. 4. Reach the point where I have a decent understanding of the language/whatever, and then go back through the official documentation that's 10,000 pages long but now I know 80% of it so I just read through what interests me. This is opposed to... 1. Read chapter 1 2. Read chapter 2 and realize I don't remember things from chatper 1 3. Goto step 1 Everyone is different, I just can't learn from a book, I have to *do* stuff to ingrain it into my memory. You need to always keep in mind your [learning style](http://people.usd.edu/~bwjames/tut/learning-style/). 
Nope, I disagree. Having 5 lines of comments for a single variable declaration where the purpose of the variable is evident from it's name is completely useless and overly verbose. From your example, take: /** * Deletes an existing calendar object. * * @param string $calendarId * @param string $objectUri * @return void */ abstract function deleteCalendarObject($calendarId,$objectUri); I'd say all of that is completely useless. The function name is completely clear as to what it does "deletes a calendar object". The parameters are evident as to what they should contain. What additional information is that going to provide an IDE? Just reiterate the function name and argument list? It can pretty much do that from the signature anyway. Even something like: /** * Creates a new calendar for a principal. * * If the creation was a success, an id must be returned that can be used to reference * this calendar in other methods, such as updateCalendar. * * This function must return a server-wide unique id that can be used * later to reference the calendar. * * @param string $principalUri * @param string $calendarUri * @param array $properties * @return string|int */ abstract function createCalendar($principalUri,$calendarUri,array $properties); is largely useless. The first three sentences are useless. I don't care about being able to use the auto-inc'ed ID in another method. That method name and arguments will tell me that. The only possible explanation I could see here is what $properties should contain or look like. Sorry, your comments aren't that useful.
bookmarked
You didn't pick too great methods to comment on. I'm just going to leave it at that, because you're other comments (such as the one about the id) just means a lack of knowledge about why it's important. That's ok, but not even admitting to one single point of my last comment just proves you want to be right. **Edit**: Better to name a specific example: Return types. I realize the examples are in some cases redundant, but I went for being complete. I feel there's a valid reason to specify return types.
It's really for chapter organization in the generated documentation.
Do you have any public code that meets that requirement? Even if you manage to follow strict unrealistic rules like this, which is I highly doubt, have you ever programmed in a commercial fashion? Can you even name a public codebase where this holds true?
Just posting for later.
I'm not just wanting to be right, I think I am. Lets look at some of your other code: /** * pdo * * @var PDO */ private $pdo; Why is that there? 5 extra lines of codes to describe the variable, is in fact, a PDO object. Look, you could probably find tons of wrongs with my code (http://github.com/leftnode) and I could probably make my methods a lot shorter, but having docblock comments like that are completely useless. Ok, explain to me why this is important: /** * The current user's id. * * @var int */ private $user_id; If I have a class named User and I see that variable in my IDE (or vim), I'm pretty certain what it is. Saying it is an int isn't much help either; ID's have been int's forever. If it's a UUID and not an integer, name it $user_uuid. If that variable *doesn't* describe the current user's ID in a class called User, you're really in trouble.
Yes, I have. This one is harder for me to follow, because it's easy to write long functions. But sure, look at Uncle Bob's code for the framework he wrote called Fitnesse. Follows most of what he says in Clean Code. http://github.com/unclebob/fitnesse
holy shit, I read your comment and then opened the image. I certainly wasn't expecting to feel the same as your comment! Does this qualify for a "when doves cry" comment?
You're picking two pretty simple examples. Those are actually automatically generated, and there was no point in further explaining them. It's not like I'm wasting paper either, so who cares. The good examples are more important, of which you'll find plenty.
"Designers &amp; Developers" sounds like the most boring RPG ever created. Took a minute to get the brain to snap into what this was about.
So it may be a great idea to screen job posters for spam/scams. But, I also submit it would be just as equally great idea to screen job applicants. 
Great work on digging these up. I love the sheets. :)
You realise that IDEs can use the information to in combination with chaining? If I type $user-&gt;department-&gt;company-&gt; Then my IDE will tell me all method on the Company class. That makes PHPDoc comments worth it for me.
Posting to save.. actually what does the save button do?
html5 + xhtml markup is valid
It saves the article on reddit. Then, when you go back to your front page, look up and you'll see a "saved" tab. Click it. There's the stuff you saved. 
[Sphinx](http://sphinxsearch.com/) For real. It's so fast. Right now, I'm using it for real-time searches on an ad-serving platform. It's doing about 10 requests a second searching a table with about 250K records. Search takes an average of 0.01 second. This is hosted on a virtual machine. You cannot do searching on mysql unless you are only searching small documents. on Sphinx, you can make different indexes (1 for each of your tables) and you can query something for index A or for index * (all). 
If you need to do it only once, make a dump of the database with phpmyadmin or mysqldump. Then just search the file. eg. mysqldump -u _username_ -p _password_ _databasename_ &gt; _dumpfile.sql_
Can you point in title that link leads to PDF? :)
Here's a script that someone already wrote: [http://anywhereindb.googlecode.com/files/anywhereindb.php](http://anywhereindb.googlecode.com/files/anywhereindb.php) Let me know if it helped
It's not really about Sphinx being fast but rather MySQL being slow as hell for full text searching. Sphinx allows you to generate indices on the data you actually want to search and then put that on a different machine, so you can scale it independently of MySQL.
wow, that is quite a script!! :-) Thanks!! I will have to take a closer look at that beast, but from the first look I believe that it does a nice job.
Hmmm... good idea! Thanks. Will try that, too!
I forgot about it :/ No way to edit it now, sorry!
You could've deleted it and started over.
So why do you need to search 15 tables? Just wondering what it is about your data structure that creates *the need* to search 15 tables?
I've had this printed on my desk for 2 or 3 years now. It helps **tremendously**.
phpmyadmin has a search built in that will search the entire database for you.
The guy who mentions Sphinx is right but it will not be easy to implement for a beginning coder. MYSQL has "out-of-the-box" fulltext searching that I use on my site currently (upgrading to Sphinx is actually scheduled for this month). here is dcoumentation: http://dev.mysql.com/doc/refman/5.1/en/fulltext-search.html through extensive testing I recommend you use the boolean mode feature: http://dev.mysql.com/doc/refman/5.1/en/fulltext-boolean.html you can build all your indices in phpmyadmin which is convenient. with boolean mode you don't even need to build indices. On my server I changed the min_word_length = 2 and erased the stop word list. Basically it takes **a lot** of fine tuning to get to work right but you can get it working basically quite fast. So maybe you are better skipping all of this and just figuring out Sphinx... here is an example of a query: SELECT *, MATCH (table1.field1,table2.field,table3.field) AGAINST ('$query' IN BOOLEAN MODE) AS score FROM table1,table2,table3 WHERE MATCH (table1.field1,table2.field,table3.field) AGAINST ('$query' IN BOOLEAN MODE) HAVING score &gt;= 0 ORDER BY score DESC Too be honest I don't even know if that query works but it could, and you could have it set up in a couple hours! Edit: again you don't even need indices for that above query, just type it in and see if it works!
I like Netbeans for its FTP integration, but it's a little slow. Monodevelop is pretty kickass and they have a SVN plugin, although it doesn't do PHP yet ([this person](http://lists.ximian.com/pipermail/monodevelop-list/2006-September/004579.html) is developing the language bindings for it). I tried Eclipse, but there's just something I don't like about it. I also tried Aptana (which is Eclipse) and found the same weirdness that I didn't like. Don't let my opinion get to you, Eclipse is a great program that a lot of people use. It's just not my cup-o-tea.
Thanks! I'll check out Aptana -- I like that it has the popular JS ajax libraries there... and I've also found a new one it seems - phpstorm - might be one to look out for in the future. Gonna get netbeans and aptana set up and see how I like each of them.
This should be upvoted to the top. For a simple CMS there is **no** need to use Sphinx or anything really advanced. Take a look at your structure and consider merging tables that have the same structure.
low tek solution: $database_name = "db_name"; $search_for = "foo"; // get meta data: all tables; the text and varchar fields $sql_meta = "SELECT column_name, table_name FROM information_schema.columns where table_schema = '$database_name' and data_type in ('varchar', 'text')"; $result = mysql_query($sql_meta); // make a new query to search database $sql = ""; while($row = mysql_fetch_assoc($result)) $sql .= "select '$row[column_name]', '$row[table_name]' from `$row[table_name]` where `$row[column_name]` like '%$search_for%' union "; $sql = substr($sql, 0, -6); // remove last union // display results $result = mysql_query($sql_meta); while($row = mysql_fetch_assoc($result)) print_r($row); 
I like ActiveState's Komodo IDE personally, and have been using it for the past year. I tried Eclipse/Aptana/Zend and didn't really enjoy it too much. I think I'll agree with Buckwheat469 on this one and just blame it on something not really known or understood. I know lots of people that do use Eclipse variants and enjoy them.
You will never be faster than you are in vim. Seriously, don't switch.
There's thing thing called a 'mouse' that was invented a few years ago. I find it quite useful. But seriously, [Notepad++](http://notepad-plus-plus.org/) (People run it through wine).
I've used Aptana and I believe that what the Aptana guys do to Eclipse is unfortunate. I'd rather go straight to Eclipse or to [Eclipse PDT](http://www.eclipse.org/pdt/)... That said... you're using VIM, considering its extensibility and your comfort... why change?
Pick up or browse the book "PHP and MySQL web development" by Luke Welling and Laura Thomson. They have a pretty good chapter on using automatically generated images in other pages that does just what you need. And in their CMS section they have a good example for resizing images that you will probably need too.
I'll second the vote for Notepad++, though for automated tasks I use editplus. Notepad++ in conjunction with winscp = the fastest for quick code alterations.
PHP Storm, give it a try.
Notepad++ isn't an IDE.
um... this is what I use... http://www.gnu.org/software/emacs/
Agreed. The two big IDE's eclipse and netbeans have some nice tools like debugging, profiling, gui builders etc but in the end these are most useful when programming in Java, even re-factoring in eclipse isn't as useful in PHP. The jvim plugin sucks sucks, it just a few basic key bindings. If you want you can try eclim with eclipse although you will still find the extra features these IDE's aren't any more useful for PHP than the scripts you will find for vim.
Netbeans 6.10/7 is getting a lot faster and generally has a lot of cool stuff. :)
This is true. I haven't found a php IDE worth a damn :/
I'm on 6.9, which is a significant improvement to 6.8, but it still has its bugs. I'll update now.
pico for life!
Well, 6.10 is only at M1 so there are bound to be bugs there as well.
Eclipse PDT is worth a damn
Autocompleting. I have yet to figure out a way to get proper autocompleting in VIM which infuriates me. I can get it to detect classes and functions in my project, but it doesn't take object instances or comment docblocks into consideration. eg: $obj = new ClassName; Now in eclipse pdt if I do $obj-&gt; and get ctrl-space, I get a list of members available in the instance of $obj, including anything from any parent classes. Or how about. $obj = MyObject::factory(); Eclipse PDT uses the docblocks (if written) to determine the return type of methods and functions, so now I can autocomplete a list of members in $obj again. If you can show me how to do this in vim, I will unconditionally have your children, even if it means a sex change. eg: $obj = new ClassName(); 
OH NO YOU DIDN'T
textmate maybe?
another Komodo fan here. Have tried quite a few other IDEs, editors, and emacs since 1995(never used vim), plus mac-based ones (textmate, bbedit), but Komodo has the right degree of simplicity and power that lets me concentrate on the code, not the IDE itself. bbEdit's my second choice. Yes, there are those (particularly in the emacs camp) who suggest taking the time to learn the real power of their preferred tool, but there is a balance between obsessing over one's tools versus actually getting things done.
I use jEdit, an underappreciated gem. It's platform agnostic (java), so windows/mac/linux all day. I think the thing that gets ppl are that they don't find the right plugins for it (like SFTP). If you get jEdit to try: first thing is to find where plugins are managed and UPDATE the mirror list. Select a decent mirror and get what you like. For php dev, "Sidekick" (on 4.3), "PHPParser" I think the same was called on &lt;=4.2 It's a sweet IDE for any lang. Give it 30mins, imo
Vim is always your friend in terms of speed, but I have been rooting for a new IDE as of late. [phpStorm](http://www.jetbrains.com/phpstorm/) is a truly excellent IDE. Very fast, great debugging support, and solid VSS integration. It has a ton more features but those are the ones I mainly care about. 
All the way.
&gt; [Solr](http://lucene.apache.org/solr/) FTFY
We've had a wave of conversions to netbeans here at work. Some people used vim before. I used TextWrangler on my mac. So far, the only thing I don't like is that netbeans can be rather slow with it's constant updates. Netbeans is definitely more robust. But it might slow you down.
I use Vim for writing simple scripts, but for big projects I go with Eclipse PDT with the necessary plugins (which in my case is a version control plugin)
yes it has, but I would like to be able to search the database from the index.php template.
My description was probably not detailed enough. The 15 tables are content (for example a database with adresses and phone numbers, a marketplace, news etc...) So, I would like to be able to do a fulltext search in all tables.
Well depends what you do really?
speed shouldn't really be your only factor to consider.
Have been using Eclipse and Netbeans for the past two years but recently switched to [Nusphere PHPEd](http://www.nusphere.com/) - it runs so much faster and have fantastic code insight for Joomla which is what we develop. I have only been using it for a few weeks, but I might have the whole office switch if there is no nasty surprises. Netbeans is not bad either but it keeps crashing on Windows 7 when doing code completion while scanning, and scanning takes FOREVER!
[Coda](http://www.panic.com/coda/) 
All depends on the plugins you add to the mix.
netbeans. try it before you buy it
Hmm, I used vim, notepad++, zend eclipse, and now I'm on Netbeans. IMO Netbeans beats all the IDE's/editors listed in this comment, but only based on my preferences. If you're gonna try a PHP IDE, try Netbeans first (it's free) and see if you like it. If you hate IDE's in general, stick to VIM or whatever works best FOR YOU.
How did I not know this! Thanks
Yep, it's the only reason I installed wine on my system.
Not really an IDE, but I still love using TextMate. The snippets and macros make coding a breeze for me. I used vim a bit for some programming classes, but I never really became a power user. 
I too wonder how to do this; ctrl+p doesn't really fill the same role as the editor knowing the language and knowing what members a class has so that it can intelligently complete. It's not a killer feature for me which is why I use vim for everything, but I would be an orgasmically happy guy if I could get vim doing proper-IDE-intelligent-completion. Maybe it would need ctags or something? I never got the hang of that either.
They talk about learning the real power of the tool because once it's in your muscles you don't think about the editor anymore, so you're purely "getting things done". I honestly believe that your point only applies to the learning phase of emacs/vim, possibly because you didn't carry on using it long enough to benefit from it later.
I use vim and I lol'd :)
Lucene.
This can be a great introduction to the wonder of 3rd party libraries. Hit up [Sphinx](http://sphinxsearch.com/)
Well it'd be nice if you actually justified this instead of just posting it.
That looks horrible to integrate into anything remotely good. Dependency on $_SESSION? Check. Random PHP in the middle of HTML? Check. Hard-coded to use crappy old mysql extension? Check. Not encapsulated in a class? Check.
If anything, the mouse slows you down more than a keyboard. Tremendously, in fact. A lot of developers use a laptop; using a mouse on a laptop is cumbersome, and thus a keyboard is a much better fit. If you're not experienced with vim (or emacs) it's hard to explain how goddamn useful it is, but saying use a mouse is naive.
well with the work that I do, it is the reason why Eclipse is my number one editor. At the very least, I can use compiz' "negative" plugin and make Eclipse "white on black" instead of "black on white".
I suppose the question is then: given that I can do just about whatever I need with my current tool set, why would I need to invest in something with a substantially longer learning curve? That is, outside of learning for learning's sake (which is great), what direct benefits does mastering vim/emacs provide over the current set of IDE's/editors. Speed is not the issue. Coding shouldn't be a race, nor should not using the mouse (which I actually like). Rather, it should enhance the coding process by facilitating the interface between the code and the user; my main objection to using emacs is that, rather than working with you, it forces you to work *for* it. I'm not trying to troll, I am seriously curious what benefits emacs/vim confer over today's state-of-the-art IDEs and editors, besides some kind of street cred.
Can you explain this? I'd be really interested to understand this debate more from the vim side... It's one of those debates that seems to pop up fairly frequently and I hear the vim/{insert non IDE editor} &gt; eclipse/netbeans/IDE x argument quite often. I started coding with php in textpad (and still do for smaller stuff) but after a couple of years java a while back, and now working on larger php projects, I sit in my IDE most of the time. (Currently netbeans after giving up on the lagging in Zend Studio/Eclipse PDT). If vim adds value/speed/whatever &gt; IDE's i'd definitely be up for giving it a go but I just can't see how it's going to?
Right, you'll need to build something yourself. I was replying to the guy above that was suggesting you do a search of the dump if it is only a 1 time thing.
If the speed at which you can type code is all you care about then I seriously hope we never have to work together. You want an IDE that helps you write GOOD code. Meaning well organized, well documented and well tested (as in unit tested). A good IDE will also have intellisense to help you make use of your framework, whether its open-source or in-house. Having the ability to run unit tests, from within the IDE, while you're typing the code becomes invaluable to making sure your code is well written.
C-s emacs M-x upvote :)
IDE? I use the Edit version, no need for xdebug and svn integration, it just slows down my development time. edit: Asked IDE, because for me it doesn't look like it's work the price.
since we're talking editors, any other **Editplus** user around? I still love it, after about 9 years of daily usage: * builtin ftp browser * all files grouped in projects; some projects with 100+ simultaneously in-memory-opened files makes "search in all files" a dream came true. * text-processing features: regex match/search/replace * speed/speed/speed - here all other IDEs I tried suck. * .. here's where you praise it I don't try to convince anybody, not even myself, I just love it.
I use Gedit but with the Gedit plugins. Provides only just enough features that I want without being obtrusive. Doesn't crash like some other IDEs I know -- not even on long files.
Generally you don't want to search everywhere because that means you're searching for content in non-content columns. You should know which columns contain content, so execute your search on those locations and return the data in a way that makes sense to your UI.
This is a lie. Yes, when it comes to the actual typing and editing part, vim is king. But there is no way that overall you will be more productive with vim than an autocompleting IDE. As a programmer, typing is just a fraction of your job. I'm learning Symfony 2 and Doctrine 2 right now. Docs aren't stellar (yet, they are still in beta/alpha) and I'm not familiar with these libraries either. I can guess what object a method I want is on and then find that method by using autocomplete. I don't have to guess what parameters a specific method takes, or in what order. Every time a vim user has to check the API docs, I simply press ctrl+space. The time you save with your hotkey magic is lost by having to check documentation. The only reason you shouldn't be using an IDE is if you're on a terribly old system.
vim lite, you mean?
I use the mouse to highlight code as i read it. It's a thing.
Just your average random php script. My pet peeve is that the example file uses tabs, since you mentioned session already. The best part is, that it's already written. This is a script that was made to answer a question that many beginners have: "How do i search \*.\* in database" when thinking it from a filesystem point of view. It is usually handy when reverse-engineering an existing program. I use the mysqldump -method though.
This summer. A thread started in /r/php. A guy asking a question about mysql. Gets answered in java.
"OMG the IDE doesn't support FTP! what will I doooooo??" there seem to be a lot of people like that. Baffles me--hasn't anyone heard of FUSE and SSHFS?
I agree! I used to use vim 100% when i was just beginning PHP. Then I grew up.
I can! He's a noob that either doesn't know about debugging and wastes *valuable* time trying to debug complex applications with var\_dump()s and print\_r()s.
The only reasons people don't use IDEs are 1. ignorance 2. stupidity Usually both, in my experience. (e.g. once you show them IDEs, they still don't use them, or at least use them for debugging!)
You do realize that systems can interface together and usually it is a good thing, right? Based on his description of the problem, Lucene sounds like a good tool that is already out there to do what he wants without having to reinvent the wheel. I love PHP, but it's definitely not the only thing out there.
The major killer for Komodo IDE is that you can't have the watch window ... in a different window! It remains fixed to the fucking coding window! That means, I cant' move it to the second monitor and -- worse -- it competes with my view of the code ;o Until that's fixed, i can't use it, and i've been waiting YEARS AND YEARS for it.
Trust me. You'd like NuSphere PHPed or Netbeans a lot more than Komodo, if you gave either a chance.
Thanks :) - I never could see how it could compare... 
NuSphere PHPed and Netbeans.
I bought editplus way back in the day for the regex search/replace.
can't use Netbeans on OS X (since not running 64-bit, thus only Java 5, bastards... too much hassle to use soylatte, plus X11 chrome sucks). will give NuSphere a shot, although, as I've said, Komodo doesn't get in my way, which I really like. Others have mentioned [UltraEdit](http://www.ultraedit.com/), although no mac version (yet). EDIT: grrr... NuSphere not like mac.... grrr...
I so want to figure out how to use Eclipse PDT, I've been using it for 2 weeks and have problems with basic things. Edit over FTP? Sure, add the RSE plugin, which lets me browse and open a file, but it still saves to a local cache! I'm stumped by something as simple as remote editing. Maybe I'm missing some crucial part of setup, but it seems like the Eclipse, PDT, Subclipse, etc all seem to want to work on a local filesystem instead of a remote one. Shouldn't I be able to work on, debug, SVN an entirely remote project? Why doesn't the editor autocomplete variable names all the time? We definitely want to move to using Eclipse for our projects, but don't grok it yet.
I really like netbeans now for php, it's got xdebug, subversion/cvs, and ftp/ssh file uploads in it. If you just want a good text editor, I used geany for awhile and it is pretty good and has code complete and such in it as well.
- screen 1 -&gt; browser, firebug, php docs - screen 2 -&gt; code - screen 3 -&gt; server, command lines &amp; winscp - screen 4 -&gt; email + other code i'm working with but not on..
heres how you could approach it.. its 530PM on Friday and i'm too lazy to type this properly. create an array of table names. foreach tablename { mysql_query("describe tablename"); pull column names from this build an array of $tablearray[tablename][columnname] } now you ahve a structure of columns foreach database. iterate through this array such as - foreach(tablearray as database to columnarray) { foreach columnarray as columnname { mysql_query(select * from tablename where columnname like %term%) stick result into a results array or however you want to deal with them. } } once its ran through you'll have a lot of results in a nice array or echo'd them out.. or whatever.
also check out harudoc. http://www.php.net/manual/en/class.harudoc.php I use it to create invoices every month; its flexible, fast and easy to manipulate.
Komodo Edit doesn't have a debugging interface. http://community.activestate.com/forum/komodo-edit-xdebug With Komodo IDE it's pretty straightforward though: http://docs.activestate.com/komodo/6.0/debugphp.html#remote_debug_PHP 
http://framework.zend.com/manual/en/zend.search.lucene.html
I've been using Aptana, but I downloaded the beta for Aptana 3 and I don't think I like the direction it's going in. Might just head back to Eclipse or try Netbeans.
I've said this before, but I'll repeat it: Coda is the main reason I bought a Mac. I like this editor so much, switched operating systems to be able to use it.
I like Netbeans but it's soooooooo sloowwww, and that's a dealbreaker for me.
not using Xdebug while developing PHP slows down your development time, not the other way around.
Quality of code and speed are separate. Someone good at VIM and someone good at an IDE can both write QUALITY code but the VIM user will be faster.
Note: Vim has autocomplete, and omnicomplete, and line complete, and keyword complete and spellchecking, and file completion. All by default. You can also get plugins like TList that give you Eclipse-style code outlining. Don't say it's a lie if you don't understand Vim's features.
Well I'll admit it took me a bit of tweaking to get things into a form I like. I took a vanilla install of Eclipse then did the following 1. Install PDT 2. Install Subclipse 3. Install SVNKit Client Adapter 4. Install SVNKit Library Then I only create SVN projects. This lets me easily handle versioning and I have Beanstalk hosting my projects so I can have it deploy automatically to my testing server. 
I use vim a lot, but if I was forced to use an IDE I'd go with: * Komodo (Win,Mac,Unix) * Coda (Mac) Note: Komodo has a vim mode. Not sure if Coda has a plugin for that. 
I know vim has some gimped autocompletion, but can it correctly infer types based on php docblock comments? Can it complete based on what type of object is assigned to the svariable? Can it automatically generate a skeleton of all abstract methods when you're extending an abstract class? I didn't think so.
Not entirely true. Most vim users will configure xdebug and then use the DBGp plugin for vim. a tutorial for setting that up can be found [here](http://tech.blog.box.net/2007/06/20/how-to-debug-php-with-vim-and-xdebug-on-linux/).
PDO and prepared statements
I prefer PDO and prepared statements. That takes care of a lot commong problems. Also, setting the type of input data can make a difference
can you recommend a good tutorial?
Yes, yes and yes. http://www.vim.org/scripts/script.php?script_id=2620 and Snippet.vim Want to hear the best part? If you don't like the way it's guessing to which method to pick... You can make your own. (Case in point http://github.com/shawncplus/phpcomplete.vim)
If you want it nicely wrapped and easy to use have a look at [idiorm](http://github.com/j4mie/idiorm). Maybe the framework you are using already has its own orm/activerecord/pdo module.
Is it smart enough to hide private and protected methods from a public perspective, but show them internally? Does it actually parse docblocks and show their documentation when autocompleting, even for native functions? Does it work with namespaces? So does vim actually scan all .php files in a directory in your project and autocomplete those outside of the file itself? What if they don't have docblock comments? And it's cool that you can write your own autocompletion tweaks, but you shouldn't have to. Look at all that work you did to what should be a pretty standard feature. If snippet.vim is just like textmate's snippet expansion, then that's not equivalent to what I was talking about. Netbeans can create a skeleton filled with the abstract methods of the abstract class you're extending.
thank you!
Here is a simple tip. Take a look at the date on any tutorial or article. If the date is before 2005, stop reading because it's not worth your time. If the article uses magic quotes or stripslashes, stop reading. If the article mentions that there are new things in PHP5, stop reading. If the article is about the mysql_ family of functions and does not mention either mysqli or PDO, stop reading. If the article uses the mysqli_ functions in a procedural manner and does not explain prepared statements, stop reading. If the article is about PDO but mentions that it's a PECL extension, stop reading. There are too many old, out of date, now-inaccurate PHP articles and tutorials out there. There are too many people whose knowledge is now old, out of date, and is now inaccurate. The trick is knowing how to tell if this is the case.
Thanks, yeah I meant IDE. That looks a lot like what I am looking for.
the other replies are why i came here... but this is why i stayed...
This is the only fucking correct statement.
If you're referring to my plugin: Yes to the first, no to the second (for native functions use &lt;C-K&gt; on the func.) No namespace support as said on github. For the scan bit it's done with ctags (TList automates this) which generates a file that can be used with a bunch of different editors. As for the abstract skeleton bit I don't believe there's anything that does that currently but I'll write one this weekend :P
As noted in the comment above I've rewritten the php omnicompletion to actually no suck (http://github.com/shawncplus/phpcomplete.vim)
And Ctrl+P is the wrong way to do it. Ctrl+P is only keyword completion. You're looking for Omnicompletion Ctrl+X Ctrl+O (just Tab with supertab.vim) (see previous comments about neocompletecache)
I am using PhpED and it is decent enough.
Just make sure magic\_quotes\_gpc is actually off, and use htmlspecialchars when outputting user input (which includes any input you've stored in your database).
The 100% correct answer to your question is: &gt; mysqli\_real\_escape\_string and mysqli::real\_escape\_string will both make any strings passed to it impervious to SQL injection. stripslashes does nothing in terms of protection against injection. As mentioned by others, however, prepared statements are probably a better idea.
Is the class OOP-focused? There's a lot of people in /r/php that'll tell you to not bother trying to learn from programming books, but I have to admit I couldn't 'get' OOP until I sat down and read a book. In particular, [PHP Object Oriented Solutions](http://www.amazon.com/PHP-Object-Oriented-Solutions-ebook/dp/B001WAJZBW). Now I 'get' OOP and am reading and practicing as much as I can.
When i tried to grok OOP within PHP i got [Object-Oriented PHP](http://www.objectorientedphp.com/) ([Amazon link](http://www.amazon.com/Object-Oriented-PHP-Concepts-Techniques-Code/dp/1593270771/ref=sr_1_1?ie=UTF8&amp;qid=1286584354&amp;sr=8-1)). It's somewhat verbose so even if you aren't very familiar with PHP yet it should still work out, and it did do a pretty good job of helping me get a basic understanding of OOP and how it works within PHP. But i have not read the book you talked about, so sadly i cannot make a comparison between the two. 
A million up votes. 
There is so many books out there for PHP its hard to really know which is best. And yes, learn from books!!! They are paid authors gerenally and will actually take the time to explain small things and nuances that most web tutorials dont bother with. Not to mention the vast majority of webtutorials are very clearly written by amatures who barly know the language themselves. Recommendations: - Get a modern PHP book covering at least version 5.2, alot of good OO related stuff has been added in later 5.x releases. - Dont use mysql or mysqli functions, they are very unsafe, especailly for newer programmers, instead use PDO which other than being a DB agnostic library, allows you to use static field types so fields cannot be interpreted as SQL statments (SQL injection). - Do not mix your markup(html) with your backend code(php). Use a templating engine like Smarty so that your code and markup are seperate.
PHP manual.
For the Mac, grab transmit from panic.com. It costs some money, but is way faster and easier to work with than ftpfs or sshfs under macfuse.
Can you elaborate for a noob?
You can also collapse all the doc blocks in any decent IDE, but i dont think he really appreciates the reasons for doing phpdoc, nor the fact that they are easily automatically generated for the simple things, again assuming a decent ide. So this leads me to beleive you dont use your IDE to its full potential, and use it more as a glorified text editor.
http://php.net/pdo PDO - PHP Data Objects - So you don't have to write that DB class again. Basically, if the methods stripslashes(), addslashes(), or any driver specific escaping methods show up in your code, you're doing it wrong. Prepared statements are faster and more secure. Make sure all data comes in raw and unformatted (which means magic_quotes is off if you're using an older version of PHP) and let the database driver handle escaping everything. Example of a prepared statement: // Error handling omitted $pdo = new \PDO('dsn:goes_here_for_your_database'); $sql = 'SELECT * FROM user WHERE user_id = :user_id AND password = :password AND status = :status'; $stmt = $pdo-&gt;prepare($sql); $stmt-&gt;execute(array('user_id' =&gt; $user_id, 'password' =&gt; $password, 'status' =&gt; 1)); $user = $stmt-&gt;fetchObject(); Edit: See my ORMish framework DataModeler on Github: http://github.com/leftnode/DataModeler or DevZone: http://devzone.zend.com/article/12511-DataModeler-Simple-ORM---Part-1-Models and http://devzone.zend.com/article/12568-DataModeler-Simple-ORM---Part-2-Saving-Models
Say what? Be more explicit on which context do you refer as being the other way around. I use xDebug for profiling and pretty printing of call stack trace/var_dump (not always, because frameworks do a fine job as well for formatting those). I was referring to the context of using xDebug for stepping through code (which is implemented in the IDE), which for me is always a waste of time. Thus I still stay firm to my conclusion that Komodo IDE is over priced. 
By that principle you could call [Linus Torvalds a noob as well](http://linuxmafia.com/faq/Kernel/linus-im-a-bastard-speech.html).
Seriously, I skim through this post and you seem to be the most angered person about others not using IDEs. And many from this thread do not seem to realize that not only IDEs have autocomplete, code hinting. Debugging is such dependent of context. If you work on code written by bad programmers you will definitely need the use of the debugger. But when working in a team project where all members do defensive programming, bugs can be easily detected and var_dump is all they need.
Couldn't you just install a Hackintosh?
What you said about web tutorials is very unfair. If you're missing the good tutorials, you're probably not *googling* with the best terms. The real story here, is that this guy is smarter than his class (via **self-education**,) yet the idiots who can't keep up get the same degree. Worse, many of us self-taught people have no "degree," because college is such a slow bureaucratic scam. Einstein said he only had to take two (big) exams to get his physics degree. And still today, there are open exams worldwide, yet *none* in America.
After you pick up a good book I would also recommend learning the MVC pattern and start learning a framework such as CodeIgniter. Frameworks are invaluable when you are working with a team because everybody can be on the same page as to what the system does and doesn't do. Codeigniter has some of the best documentation out of all the PHP frameworks there. If you do pick up codeigniter start from the soon to be released 2.0 instead of 1.7.x as a lot of stuff has changed and PHP 4 support will be deprecated in 2.1
I'd say go pick up SICP and work through the examples. It's really helpful to understand more than one language when you're designing programs.
I personally recommend [PHP: Objects, Patterns, and Practice](http://www.amazon.com/PHP-Objects-Patterns-Practice-Second/dp/1590599098). It's great if you're somewhat new to (high-level) object-oriented programming, as it teaches you things you can apply to any OO language, but has a focus on PHP.
I'm not sure why people are so dead-set on separating their PHP from their HTML. With Smarty, you're still effectively mixing the two, you're just using a different syntax (which of course adds overhead!). Yes, you should strive to separate _presentation logic_ from _business logic_, but separating _PHP_ from _HTML_ is just going to force you to hack together work-arounds since you will inevitably need logic in your templates. Some people say it should be kept simple so that your designer can work with it... I don't know about you, but I wouldn't let a designer anywhere near template files. He can photoshop and slice all he wants, but leave any sort of logic (aka programming) to the developers.
&gt; because college is such a slow bureaucratic scam I can tell you haven't gone to college. They don't teach you programming languages at any respectable post-secondary school (you're expected to learn those on your own); they teach you theory, patterns, algorithms (and analysis thereof), scientific computing, and a lot more that you probably won't use in a 9-5 programming job. If you wish to be a software programmer for the rest of your life, by all means teach yourself, but don't say that college is useless just because it isn't necessary to reach your specific goals.
This is the only manual (practically) every professional PHP developer uses. The ability to type php.net/FUNC_NAME into a browser and get back a highly detailed doc page for that function is awesome.
Properly named variables don't need a prefix letter to let you know what they contain.
the zend framework has completely implemented lucene in php. no java required.
http://www.php.net/pdo read through that!
Abstract programming concepts. Basically, learn design patterns, and then learn how to not over engineer.
If I have $Member-&gt;doSomething(), and I have $sMemberID, do you see how your eyes notice $sMemberID as the variable and $Member as the object variable for a model class in an MVC framework? And what if I want to delineate that $sMemberID means an ID that may be alphanumeric, while $nMemberID is going to be an integer? If I do $MemberID, you don't pick up on that so easily. And if I were to use $NamesArray, it's more typing than $asNames. Plus, I have no idea with $NamesArray whether it's an array of Names objects, an array of Names' strings, or what.
After you have a good grasp of the language itself you'll want to start focusing on concepts. [Advanced PHP Programming](http://www.amazon.com/Advanced-PHP-Programming-George-Schlossnagle/dp/0672325616/ref=sr_1_1?ie=UTF8&amp;qid=1286609204&amp;sr=8-1) is an excellent book in that respect. Check out the [table of contents](http://www.informit.com/store/product.aspx?isbn=0672325616) and you'll see that it covers a lot of advanced topics and give you a great idea of what to read next. Outside of that it depends on where you want to go next. If you want some front end magic you should read about [jquery](http://www.amazon.com/jQuery-Action-Second-Bear-Bibeault/dp/1935182323/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1286610789&amp;sr=1-1). If you want to optimize your [mysql](http://www.amazon.com/High-Performance-MySQL-Optimization-Replication/dp/0596101716/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1286610873&amp;sr=1-1) queries pick that up. There are [great books](http://www.amazon.com/Programming-Collective-Intelligence-Building-Applications/dp/0596529325/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1286610969&amp;sr=1-1) about [collective intelligence](http://www.amazon.com/Collective-Intelligence-Action-Satnam-Alag/dp/1933988312/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1286610969&amp;sr=1-2). Hell, build an [extension](http://www.amazon.com/Extending-Embedding-PHP-Sara-Golemon/dp/067232704X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1286611101&amp;sr=1-1)!
Learn OOP and design patterns.
Sure thing. 3 things to note: 1. Aside from the DSN, there's no database specific calls. Unfortunately, all databases are slightly different, so you may have to set some PDO specific attributes. 2. You're not constructing the query from string concatenation, so you can't accidentally leave off a mysql_real_escape_string() or mysqli_quote() or what have you. 3. Re-execution of the query is *much* faster. The database (well, advanced ones and mysql 5.1+) will cache the prepared statement, so getting another row is as simple as: $stmt-&gt;execute(array(/* data here */)); $user = $stmt-&gt;fetchObject(); Edit: Ugh, reddit formatting sucks, but you get the point.
For Linux users have you consider perhaps creating an RPM? This way you can set Server dependencies (Apache, MySQL, Postgres, etc) and inject into your builds real data.
Damn. Color me enlightened. I will definitely be implementing this to see how it works out. 
I'm not really sure why you think you have to prepare the server for users. Have you perhaps considered that the average user does not need you to make it more accessible? The average webmaster is a not very technical person on shared hosting using cpanel, their environment should already be configured and locked down tight. If you run an application that's aimed more at corporate users then you should probably offer commercial support where you'll install it for them. 
I have looked at php compiler, but roadsend looks like something useful. Thanks.
That's an excellent idea, I've never thought of that before.
Yeah I'm not really thinking about either of those scenarios, there are tons of small business type folks who I'd like to make my apps available to, and naturally I'd like to automate the install and setup. Providing support is not a problem I'd just like to save time and cast my net wider.
Start freelancing. You learn everything else quickly :)
This is more complicated than you imagine. Basically you have to convert the attachment into base64 and send the email as multipart/mixed. A quick google came up with [this tutorial](http://www.webcheatsheet.com/PHP/send_email_text_html_attachment.php).
Don't do it by hand. If you're a novice - use a class such as phpMailer or other OOP classes.
Yeah don't make that from scratch, phpMailer can help you; http://zainal.wordpress.com/2007/01/10/sending-email-attachments-in-php-using-phpmailer-class/
So true, I took one look at smarty and asked why?
Depends, for some projects speed of coding &gt; speed of code.
[*The PHP Anthology*](http://www.amazon.com/PHP-Anthology-Essential-Tricks-Hacks/dp/0975841998/ref=sr_1_2?ie=UTF8&amp;s=books&amp;qid=1286624729&amp;sr=8-2-spell) by SitePoint I think it might be out of print, though. The Amazon price is a bit ridiculous...
It's a pain in the ass and something php should have built in long ago.... here's my class I wrote for it. You're welcome. http://pastebin.com/PQQWhx3u
You're probably looking for an answer such as "Use the new super-duper NoSQL database XX," but the boring truth is that MySQL is the way to go in your case, because 1. it can easily handle the amount of rows you're talking about 2. you already know how to use MySQL 3. MySQL is stable and well-documented and has so many users that it's easy to find answers to any questions you might have. I'm not saying that MySQL is the right thing for every project. All I'm saying is you shouldn't worry too much about scaling at this point, especially since MySQL can easily handle millions of rows.
I have nothing against PostgreSQL (I used it myself for years until MySQL got foreign keys and transactions), but I don't really see your point about Oracle. The community edition of MySQL is 100% open source, which means that in the event that Oracle decides to do something nasty, there will still be an open source version of MySQL available to fork. Also, many projects in the web world have a life span that are so short that it just doesn't make sense to try to take into consideration things that might happen five or ten years down the line. All major open source projects are in some way or the other connected to a company. That hasn't really turned out to be a problem so far.
You can easily run your project - including millions of rows - on one relatively small VPS with MySQL. So don't sweat. Also, as McGlockenshire said, don't worry too much about scaling, because the sad truth is that scaling isn't the hard part about making such a website - the hard part is getting the users.
I completely agree with this, and unfortunately, Google still indexes those articles and ranks them highly although they're incredibly out of date. To toot my own horn a bit, for my articles, I have a "technically (in)accurate" flag at the top of each article mentioning the latest it's accurate until. It requires manually updating every once in a while, but it's worth it. http://leftnode.com/blog/jolt-routing http://leftnode.com/blog/review-my-new-website-tunetous
I'll echo what everybody else is saying, [phpMailer](http://phpmailer.worxware.com/) will make your life easy. If you're using PHP5 download [this](http://sourceforge.net/projects/phpmailer/files/phpmailer%20for%20php5_6/).
You should use exceptions instead of `$this-&gt;error`.
But pretty.
Probably, but I'm too lazy to refactor it... ;) You'll also notice that the constructor isn't even the right name... and does nothing, lol. The important thing is that it works and it's about as simplified as you can get so it's easy to change/integrate. 
You could easily patch a [Turnkey Linux](http://www.turnkeylinux.org) appliance and distribute it as an iso or virtual machine template.
Could someone please give me an example of how prepared statements are more secure than doing something like $db-&gt;query('SELECT ID FROM table WHERE name = \''.$db-&gt;real_escape_string($name).'\''); ($db is a mysqli object. And there should be underscores in the method name above, but Reddit won't let me write that)
because a) you can force data type, b) all that realescapestring shit is handled by the PDO driver, c) it's cleaner code. $stmt = $pdo-&gt;prepare('INSERT INTO table VALUES (:id,:title,:content)'); $stmt-&gt;bindParam(':id',$id,PDO::PARAM_INT); $stmt-&gt;bindParam(':title',$title,PDO::PARAM_STR); $stmt-&gt;bindParam(':content',$content); $stmt-&gt;execute(); This code is cleaner, easier to read, and necessary steps to escape special characters are handled by the specific driver. Is it MORE secure? Not necessarily, but it is a superior way of doing things. Any API that has "escapeString" and "realEscapeString" as methods/functions should be ignored.
Interesting, it would seem like a lot of overhead to package an app into an OS but if it does the job.
i highly recommend [swift mailer](http://swiftmailer.org/). the docs are great (see [this](http://swiftmailer.org/docs/message-quickref)). i used phpmailer for a while, but switched over to swift some time ago. havent looked back since.
Learn a good MVC. May I recommend [symfony](http://www.symfony-project.org/)
Meant in jest. It depends on what you are using it for, but here you go: http://tinyurl.com/36r7qvd
I don't use mysqlirealescapestring myself, so I'm not defending it. I'm saying that *if* you choose to use PDO, you should do so because you like the syntax or the idea of using prepared statements[1], **not** because of some silly idea that using PDO makes your code safer than using mysqli_real_escape_string. [1] Btw., for web usage you rarely need the advantages prepared statements give you. Keep in mind that there are APIs that have variable substitution *without* using prepared statements, so the fact that you like variable substitution should not be an argument for using prepared statements.
PDO is an API, so... huh? Why would you want write more code, or bring more code into your project unnecessarily? PDO has the added advantage of typing. Sure, you could do: if (!is_int($value)) throw new Exception('$value has to be an integer!') But there is no reason to clutter your code. You could use a pure PHP solution, but why would you take on a needless performance hit? PDO is no more secure than the security practices of the programmer, but obviously the same goes for anything else.
It's funny you should mention typing, because that's the primary reason I don't go for PDO. Having an API where you can write something like this $rows = $db-&gt;rows('SELECT * FROM table WHERE name = ?', $name); is just as secure as PDO *and* requires less typing. (The above is how you'd write it in a db abstraction layer I made myself some years ago, but CodeIgniter has a similarly simple API). EDIT: My primary reason for writing the comment above is that I wanted to get the point across that using realescapestring is just as secure as prepared statements when used right, and we seem to agree on that, so I'll try to resist the urge to turn this into whose-db-API-is-better :)
Not only function names; classes and global variables work as well.
Write your own blog software for that part of the website. Don't listen to jim, he seems to be a wordpress fanboy. You need like what: posts, comments and feeds for a companies website. No tags, categories and the such.
&gt; As many of you know MVC has first emerged in the Smalltalk language, and later on made popular trough the Ruby on Rails framework. Why no, nobody knows that as it isn't a fact. Maybe it didn't occur to him that the current way http is implemented is an MVC architecture de facto. The model is the database or persistent data layer used in processing resources, the controller is apache who takes routes as commands, and view are the resources post-processed...incidentally the resources pre-processed are the layouts/presentation, which is a modern addition to the trinity. Lots of stuff about how MVC in a web application should be done, which is particular to this author's opinion (not a surprise). &gt; The problem with current Model implementations is that they either handle data only from the database. A few issues with editing.
MVC isn't a lie: the author is just (poorly) bitching about bad MVC frameworks or implementations with no proof of a good or bad implementation, just a mention that "Facebook got it right". tl;dr: author attempts to explain MVC, says that everyone is doing it wrong, then insists on his own opinion as the "right" way. Nothing to see here, folks.
I am the author and I don't know how MVC emerging in Smalltalk isn't a fact. Care to explain? &gt; MVC was first described in 1979[2] by Trygve Reenskaug, then working on Smalltalk at Xerox PARC [Wikipedia](http://en.wikipedia.org/wiki/Model%E2%80%93View%E2%80%93Controller#History) &gt; Lots of stuff about how MVC in a web application should be done I didn't say that is the way people should do it. I merely stated that in a strict MVC implementation that would be the way to do it. Please read carefully the post, because it is not meant to be a rant, which is the way I think you understood it. Cheers.
LOL, I was not bitching about current frameworks being bad, I was stating that those frameworks do not actually implement MVC by he book. Also regarding faceboook I said **apparently**, as in the controller being Javascript. Just speculating there for obvious reasons.
There is no "by the book" MVC. It's really just how *you* want to implement it. As long as you have a model that handles database interactions, a controller that handles commands and routes, and a view that displays, you're doing MVC. I've seen far too many developers who insist their version of a MVC framework is the *right* way when it just doesn't matter.
This sounds like you want your app to run on the client's PC. I don't know what kind of app you're talking about, but something's wrong if you're trying to install a web app on the client's PC. Running a full server stack on the client's PC just for the sake of one web app is very very overkill, not to mention it could be a security nightmare. If they're small business customers who will be paying you for support anyway, why don't you just handle the hosting on your side? Is there any reason this app absolutely must run on the client's PC instead of a cPanel account, a central server, or "in the cloud"? 
I second PHP:OOP and submit [PHP: Object Oriented Solutions](http://www.amazon.com/PHP-Object-Oriented-Solutions-David-Powers/dp/1430210117/ref=pd_bxgy_b_img_c) as a secondary OOP book. It's very well-written and easy if you've never had experience in OOP.
&gt; later on made popular trough the Ruby on Rails framework. No no no. &gt; I merely stated that in a strict MVC implementation that would be the way to do it. No no no.
This won't help with server configuration, but you should read up on the [Phar](http://www.php.net/manual/en/intro.phar.php) format for packaging your applications for easy deployment. I've seen it used for a couple PHP projects on Github that have published releases.
I've gone to the last couple PHP-Tek/Tek-X conferences.
I agree with you re the overhead an complexity of running a web app for a single pc, and that's why I dabble in VB.NET for these instances. The apps in question generally require multi-user access and central storage of something. And small business may only have a sbs server or other windows box acting as a 'server', and 2 or more client PCs. The main two reasons that I hear why people generally want to host their own stuff internally, is speed when dealing with files, and perceived security and continuity. I do set up externally hosted system if appropriate, and obviously this is fine.
Thanks for the tip.
&gt; If I have $Member-&gt;doSomething(), and I have $sMemberID, do you see how your eyes notice $sMemberID as the variable and $Member as the object variable for a model class in an MVC framework? I'm sorry, I don't follow at all. Can you rephrase, please? Aren't class members going to be very, very clearly identified by being attached to an object or a class when they're referenced? `$foo-&gt;bar` is obviously the class member `$bar` of whatever class `$foo` is. `Baz::$qux` is even more obvious. &gt; And what if I want to delineate that $sMemberID means an ID that may be alphanumeric, while $nMemberID is going to be an integer? When would this ever matter? Give me some example code that makes it obvious how superior this naming convention is in this circumstance. To drive the point home, also provide the same code block with normal [PHP coding standard naming rules](http://pear.php.net/manual/en/standards.php). The contents of the variable are going to be obvious from the code's context. &gt; And if I were to use $NamesArray, it's more typing than $asNames. `$names` is shorter and just as obvious. It's plural, therefore it's very likely to be a list. &gt; Plus, I have no idea with $NamesArray whether it's an array of Names objects, an array of Names' strings, or what. It's going to be painfully obvious what the contents are from the code. And if it's not obvious from the code, either the code is broken or the coder is broken. If it was a param passed in to a function, both the function signature and phpdoc block are the proper places to document what should be in the passed variables. **Hungarian notation is unnecessary. There is no gain to be made from it in well-written, well-documented code.** If your code is not well-written and well-documented, there are other things to tackle before using a bizarre naming scheme.
You need to change the type of the form to include method='POST' and enctype='multipart/form-data'. You'll probably want to add a hidden field with name="MAX_FILE_SIZE" to your form. Once you upload the file, it will be in a temporary location and you'll need to copy it elsewhere. You get the file name with somethin like $_FILES['uploadedfile']['name'] and the temp name on the server with $_FILES['uploadedfile']['tmp_name']. Here is a good simple tutorial: (http://www.tizag.com/phpT/fileupload.php)[http://www.tizag.com/phpT/fileupload.php] 
Is this an actual problem you've encountered, or is it just theory? I work on a popular open source app whose primary userbase is small businesses and, aside from the occasional configuration problems with regards to email integration (not really something you will be able to control anyway), it's very rare that we run into users who have server config issues or can't meet the minimum requirements, linux and windows alike.
Too bad you suck and your days with us are numbered. Just kidding :P Now get back to the reporting admin.
We actually hired two. The other guy we keep in an underground bunker as your backup.
I have encountered it a couple of times, and managed to resolve it both times but am looking for a better way. A company in another state was interested in an app, they wanted a demo installed to work with for a few weeks with their own data on their own LAN. They are too tight to get their IT guys involved, who quoted hundreds for the preparation of their windows server. They are unable to give me remote access. many emails and phone calls, and I managed to get it up and running with one of their more tech savy employees.
I would go with LucidWorks' Solr to do this.
Ah, yeah, that would be a pain. :( I was going to say, the times we've had it come up, it's usually been something we can resolve remotely, but if they won't/can't give you access to the server then there's only so much you can do. Another option, while not optimal, and certainly more low-tech, would simply be some very verbose documentation, maybe a script that checks things during installation and tells them what's missing, where to get it, and how to configure it (or points them to the on-line docs for doing so). I feel your pain, though, because while that's probably a good idea to provide, it still puts more work onto the end user, which makes them less likely to buy your software and more prone to having troubles setting it up if they do. I'm afraid it's just the nature of working in the business of distributed web-based software applications. I'd be interested in hearing of a solution if you find one. 
Whilst I appreciate your contribution, your attitude is awful. Refactoring is easy and "it works" is never an excuse for poor code.
Honestly... I have better things to do. Like surf reddit after feeding my kid who decided to wake up really early. The insomnia drives you *mad* I tell ya!
That's the key, it's got to be super easy for the end user. You are right, it's par for the course we operate in. I'm working on something at the moment that may hopefully change that for my apps. And I'll post again if I manage to come up with something usefull for others in our situation.
You better be trolling. Read the [MVC specification](http://st-www.cs.illinois.edu/users/smarch/st-docs/mvc.html) and THEN come back here and comment. Otherwise your comments are plain FUD.
&gt;*Author's note: This paper originally described the MVC framework as it existed in Smalltalk-80 v2.0. It was updated in 1992 to take into account the changes made for Smalltalk-80 v2.5.* That's not the MVC specification, that's a description of MVC in Smalltalk. There is no MVC specification aside from the third sentence in my previous comment.
I honestly wonder why they implemented type-hinting at all, if the dev team is just going to reject any feature request that suggests a somewhat useful way to use it. They seem to pick-and-choose the easy things to implement and ignore requests for the rest. As it is, I don't even bother with hinting because I quite often build my methods to accept different signatures, and type-hinting prevents this. PS: [this is a good read](http://www.php.net/~derick/meeting-notes.html). It's amazing how many feature requests they reject because "they don't see a use for it". I don't feel the dev team really knows a lot about complex high-level programming, and it shows when they write [things like this](http://toys.lerdorf.com/archives/38-The-no-framework-PHP-MVC-framework.html). &lt;/rant&gt;
And given Smalltalk-80 v2.0 is the first language to implement MVC, it makes it *the* specification.
They're just making excuses not to do difficult stuff. A lot of programmers are like this.
No, it makes it the *original* implementation. There is no formal specification.
even what I imagine to be simple things like `function foo(String $foo)` aren't allowable :( Unless you use SPL of course.
My primary concern here is that this would wreck havoc on the optimizing ability of an opcode cache. Magic methods are known to be expensive due to being primarily run-time and thus difficult for the opcode cache to optimize, if you wrap all your methods in a magic method call then you are potentially losing out on the 40% execution time reduction an opcode can bring. Extensive testing would have to be done.
Using is_string() or is_numeric() ONLY work if it's well formatted code. End users often put numbers in as strings, etc (if you're developing a library). 
That's a bit of a naive point of view. PHP is a huge project with tons of users and tons of code. Every thing added has to be thoroughly tested on multiple systems. Features have to fit with PHP as well, the language is already a mixed bag of things and that's largely what people ridicule it for. Programming takes time, testing takes time, it all adds up and you really can't do everything. 
Either you're using the wrong language or you're programming things weirdly. PHP is purposely loosely typed, it doesn't matter if $foo is a string or an int to PHP. Can you give a real world case where your code becomes simpler because of overloading?
A good 98% of my mistakes are caught be keeping error_reporting at the highest value possible (mis-typed variable names, accessing properties of null variables, accessing non-existent array indexes, etc) - which points me directly to a file and line. I'm pretty sure the cumulative time I've spend putting a single var_dump in, looking at the data, remove the var_dump, and fixing the issue is less than the time it would take me to install xdebug or something on our server.
Scalar type hinting is actually being worked on last I checked. Unfortunately the current version is too strict imo- if you pass an integer where a float is required it won't just do the conversion as you'd expect with a loose typed language. It is still undergoing work though, so who knows.
This is called type hinting, not overloading- overloading is where you have multiple functions with different signatures. I do see it being extremely useful in situations where people are building out libraries. Often times you'll see code like "if(!is_numeric($foo)) throw new typeerror();" when a function needs a number, and standardizing this in someway has benefits. IDEs will be able to pick up on it themselves, for instance, and if the error is consistent programmers will know what it means quicker. You may have been referring to the blog itself, not the guy you were responding to, about overloading- in that case you are completely right, it is just a silly feature for php to have. 
I'd like to see some benchmarks on just how much of an issue this actually is. Clarity edit- I mean how much of an issue opcode caching magic functions is, not the overloading bit.
A patch was made, that's not the same as it's going to be accepted, though. I imagine there'd be a lot of different opinions for both sides of the case, getting to an agreement on this for the PHP devs would probably be difficult.
I'm aware of this, but the context of this submissions is method overloading and to do overloading you first have to do type hinting so the PHP compiler will know which method to choose. Type hinting *can* be useful indeed, but it does not explain why method overloading is useful.
&gt; to do overloading you first have to do type hinting so the PHP compiler will know which method to choose. Well, if PHP supported a native way of doing overloading, then yeah I imagine it would make use of type hinting. eg: function foo(String $foo) { /* do stringy stuff */ } function foo(Array $foo) { /* do arrayy stuff */ } But that's not currently possible (neither the granular type hinting down to basic types nor the actual overloading), so it's not currently true that "to do overloading you first have to do type hinting"
&gt; Can you give a real world case where your code becomes simpler because of overloading? Any time I'm writing an API for third party developers and want to allow them to be flexible in how they call the API methods. I admit it's not a design pattern I use myself, a guy I used to work with published his solution and I offered an alternative way to solving the problem. Why it's a worthy problem is a different question, but many other languages feature overloading, so it must have its use cases. I don't really follow the "you're using the wrong language" argument. Overloading is hardly the sort of feature that sets languages apart in a "Oh well if you need *overloading* you shouldn't be using PHP" kind of way, it's just a handy convenience. Or it would be, if PHP supported it.
I really like quickphp. I don't know how it is in a production sense and I don't think its free for commercial use. Its great though, and would fit in for what you are saying (put in folder, click 'start', php serving on localhost). 
You're right that overloading isn't something that means you're using the wrong language. Strong versus loosely typed is, though, and in order for overloading to be possible you need strongly typed values. I suppose you can skate by with just implementing type hinting but you still need some semblance of strong typing for the compiler to know when to chose one method over another. I'm not sure whether I actually like overloading, I've used it some time sin C# and the result is almost always code duplication. Yeah it results in a clean API but I can do the same using the native functions to check the type and avoid the code duplication. To be honest it feels like a case where a Java or C# programmer was ordered to do PHP and brings over patterns which are sane in those languages but not so much in PHP.
I responded in the other comment thread so that it's not so confusing. :) But when I say overloading I do mean native overloading, obviously user-land implemented overloading can be done without type hinting.
This is exactly right. You can't issue header('Location: ') after ANYTHING has been written to the output. If you're not sure that's the issue, try putting &lt;?php ob_start(); ?&gt; as the very first line of code. Your header will work because the output is buffered (not sent to the client). It won't work, however, if you have something before your php tags. HTML, just white space, any output sent to the client will prevent header() from working. Also, no, there isn't a simpler way to do redirects in PHP. Like the other guy said, you could use JS, but that's not always the right decision. A PHP redirect is instantaneous, using JS window.location means the page has to be rendered, JS executed, then the page redirected. Also, it requires the user to have JS enabled (usually a pretty safe guess, but for something like logging in it's usually better not to rely on it).
The meeting notes you refer to are almost five years old at this point, and most of the bullet points were extremely condensed versions of larger discussions, as I understand it. I'd be quite wary of reading too much into them.
I'm hoping to get to the PHP UK Conference next year. Otherwise, no, since there usually aren't any PHP conferences within half a dozen time zones of me — I tend to keep my limited conference budget for more general conferences such as linux.conf.au.
&gt;Properly named variables don't need a prefix letter to let you know what they contain. This. It's a rather poor page in general, too (sorry, volomike), for a few reasons: * Hungarian notation is much older than 1999. * Type based prefixes make absolutely no sense in a loosely typed language. * I wouldn't describe an integer timestamp as a "date object" when DateTime exists. * If you're really going to prefix by scalar type integer and float should be separate, given their different characteristics (you wouldn't generally use equality operators with floats, for example). * "Handles" are called resources in PHP. You could argue that the the scope prefixes might be vaguely useful (some coding standards do suggest "m" and "_" prefixes), but honestly, I've always felt that if you don't know what a variable is and where it's coming from, you have bigger problems than your variable naming scheme.
Use filter\_var then
Certainly not impossible, but might be bordering on the impractical considering what you're planning to do is a huge undertaking. You might be better off rewriting the framework.
What you want is just APC. It will cache all of the PHP instead of opening all of those files on every request. Callgrind is great for checking for slow parts of the code. Usually it's slow database queries more than your PHP. No one needs HipHop unless you're Facebook.
You dont' want to use it, but [phar](http://us2.php.net/manual/en/book.phar.php) is a method of collecting multiple PHP files into a single runnable archive. 5.3 includes it natively, prior versions used a PECL extension. You don't want to use it because it's not the solution you're looking for. A properly configured bytecode cache, like APC, will do a far, far better job.
It's worth noting that APC still stats included files every time. You can [disable this behavior](http://us2.php.net/manual/en/apc.configuration.php#ini.apc.stat) if needed. Skipping the stat can bring a major performance boost if the server is swamped with I/O.
This is really useful for before/after hooks which you can call obviously before/after a method call of a class, through your factory... wrap all your classes around a hook_proxy class; something like what I wrote in a past project (there's probably better ways but meh)... public function __call ( $method, $args ) { // Stupid fix for stupid PHP so the arguments can be modified by reference. $kargs = array ( &amp;$args ); $kargs = $kargs[ 0 ]; if ( sizeof ( $this-&gt;hooks[ $method ] ) &gt; 0 &amp;&amp; array_key_exists ( 'before', $this-&gt;hooks[ $method ] ) ) { // The before... foreach ( $this-&gt;hooks[ $method ][ 'before' ] AS $hook ) { call_user_func ( $hook, $this-&gt;proxied_object, &amp;$kargs ); } } $result = call_user_func_array ( array ( $this-&gt;proxied_object, $method ), $kargs ); if ( sizeof ( $this-&gt;hooks[ $method ] ) &gt; 0 &amp;&amp; array_key_exists ( 'after', $this-&gt;hooks[ $method ] ) ) { // The after... foreach ( $this-&gt;hooks[ $method ][ 'after' ] AS $hook ) { call_user_func ( $hook, $this-&gt;proxied_object, &amp;$kargs, &amp;$result ); } } return $result; }
Hi! Thanks for reading through this, and although we're not Facebook, maybe we're approaching Reddit. We already use APC (with that stat disabled), all of our data and pages and such sit in Memcache, we have a lot of giant hardware, but our application's URLs exhibit wildly different CPU and memory profiles, and we can't currently render "portions" of pages and data independent of doing full page renders, which makes using things like Edge Side Includes (whether via Varnish or our crazy load balancing hardware) difficult. Our load balancers are currently distributing load via URL so we can serve more of certain URLs than others, but ideally we'd like to physically distribute the URLs as well, and I feel like "boiling down" our app into components by URL would help us do all of this. I could be completely wrong, but I don't think we have any low-hanging fruit left.
Phar looks interesting! Unfortunately it seems like it just crudely takes a directory tree of files in, rather than only pulling it what is necessary to run the application, or a subset of the application, via a profile. It looks like you can provide files as part of an ArrayIterator; maybe generate the list of files that way. I wonder what the overhead of using the archive format adds to this; if that's offset by not seeking all over the place; if I could just concatenate all the files; if that would be better or worse than actual function extraction; if I'd want to figure out that certain calls always return the same results and optimize them out, or if APC is already doing that...
&gt; builds huge arrays of data on startup based on traversing file paths and files for other functions to call This sounds like the #1 culprit. You shouldn't have to build huge arrays telling you where to find functions. If you use OO, you can use autoload to pinpoint exactly where a class is defined, so you don't have to traverse the whole directory tree. If you're stuck with procedural code, at least use var\_export() to dump your array, save it as a PHP file, and include this one file instead of traversing the directory tree every time. Including every function in every file where it's used sounds like an interesting idea, though you'd have to profile this monster to find out whether it's worth it. But this could easily turn out to be a maintenance nightmare. (What if you fix a bug in a function which is duplicated in 1000 places?) Well-written frameworks shouldn't take more than a few milliseconds to start up, so I'd suggest fixing your framework's include hierarchy first. Nothing takes more time than traversing 100 directories.
I like the idea, but that shouldn’t be done at the instantiated level. PHP 5.3 supports late static binding and I find it really useful. Here my code: http://pastebin.com/VV36erXD I have a couple of points to mention though. 
APC and the framework's caching alleviates some of this, of course... after the first startup. It's the other issues, like not being able to render portions of pages, being able to build with the framework but then not have all of its overhead in production, etc., that are making me consider this path. This compilation would be something that would be done automatically, after QA signs off on the original code, they'd have to then regress the "compiled" code. We want to continue developing with framework, we just don't like its overhead as the application and our traffic continue to grow.
Sounds like you may need a rewrite.
You should also be sure to check that the size of the APC memory segment is large enough; no help in disabling stuff if it just gets evicted at the next page view. Using a profiler is also fundamental to uncover where you're actually seeing issues. Small things like timestamp-entries in SQL-queries (WHERE ..) will make your query cache only valid for a short amount of time. Remember that varnish is well-suited to live between backend services too, and you might have luck in dividing your code base into several smaller services which you may cache separately (this will also help with your future plans for any ESI-rewrites and stuff like that). Inclued may also be able to give you a better view of how everything is loaded. You could also use get_included_files to see if grouping small files together in a large lump can speed things up.
SPEEEEEEEEEEECCCCCCCCCCCCIIIIIIIIIIFFFFFFFFFFFFFIIIIIIIIIICCCCCCCCCCCAAAAAAAAAATIiiiiiiiiion. Where's that all caps guy when you need him!
I agree that HipHop is overkill, but I think it's still a good exercise to get it up and running. In addition to APC, which caches opcode, OP should also look into memcached, which caches data. PHP is a lazy-loading language. Putting all your source in one file just seems unnatural.
That's a really interest product, thanks for the tip.
Been working on vanilla forum, and that does the traversing, then saves the results in an array in a cache file. After the first page load, it knows where everything is (the core files and all the various method and class overrides and pre-/post-method functionality brought along by the plugins) and is as zippy as anything.
Any reason you're still making use of a framework you don't fully understand at (what you're describing as) such a relatively large scale?
Reddit: Where PHP noobs unite!
I hate people on /r/php sometimes. You probably work in the secondary ticket industry; it's full of such shenanigans.
I'm running a course to bring any one from noobs on up to master PHP. Anyone here can contact me in the next 5 days for free passes to the entire course (normally $75/section). Offer ends 10/16/2010. promo-201010@phppro.phpexperts.pro.
What framework are you using?
If you use __autoload(), then APC does not cache those files But agreed on the saving of the file tree in a cache file
I think it's probably best to look into what the framework is doing and rip all that out (since a lot of is generic)
What the hell? Are you serious?!
would it be possible for you to load the website code into ram? using something like /dev/shm??
Others have already hit the logical arguments, but I just want you to stop and think. Where do you ever see this? It is not defined in any of the PHP standards, it is not used by any major framework or library, and it is not used by any decent programmer. You should be naming your variables more clearly so that the type can be inferred. This works in 99% of situations. For the 1%, you can just look at how the variable is used in its scope, or look at the php docblock annotation for that parameter.
By that logic, we should be using [this](http://imgur.com/RdcEX.jpg) as a blueprint to build houses, right? It's how it was originally done, ergo it's the specification? You're never allowed to change, huh?
Yep unfortunately. From Rasmus himself : http://stackoverflow.com/questions/1396501/do-php-opcode-cache-work-with-autoload
Ya, I started using OSC for my own cart a long time ago and i pretty much want to punch it in the face every time I want to do anything with it. I've had to modify the inner working of that thing 100's of times to get it to look/work how I wanted it to. Oh, and it's table hell.
http://www.google.se/search?q=php+faq+script
I think you're reading that wrong. APC will still cache the opcode version of the files, but it won't be able to provide the class and function definitions without actually running through the executor (which will execute the cached opcodes). This happens since APC can't be sure whether the class actually will be defined during the execution of the script.
Can you give an example of what you want? The question is pretty vague and could cover anything from a FAQ script to something like Yahoo Answers
The question seems vague to me. The immediate questions I have are: What is the applications's default state, e.g. I run the script, what happens? What is the user experience? (are you asking and answering or is there an asynchronous element) How do the questions get sent to the app? (input) How many styles of answers are there (multiple choice, fill in the blank, block of text)? (input+formatting+data modeling) How do you store the correct answer and/or wrong answers, in relation to the question?...and how do you store the flag for the correct one (data modeling) This is actually quite complicated as an application and a lot simpler as a static file. You create a simple text file FAQ where you type in questions and their answers and call it a day. Not every solution requires "scripting/programming".
Elaborate please?
Sorry about lack of details, I didn't realize how much thought has to be put into it! I'm no programmer. I think I may just need a FAQ script. However, I would like anyone to answer. 
Hmm, I read somewhere else (trying to find where), that any conditional include()'s aren't found out then cached. Perhaps that's what you're referring to. But I'm also finding contradictions to Rasmus' clain that it destroys any advantage. Weird
I'm still not sure what you mean by "script". Could you elaborate?
Actually i don't need a script. I need something custom made. I edited my question above, hopefully it's easier to understand.
Thanks, but I now realize I would need something custom.
I tried to give a better explanation on my original question above.
Rasmus' claim is not that it eliminates any advantage from APC, just that it works against some of the advantages of using an autoloader. In both cases the opcode cache will be active and will be used - so APC won't have to hit the disk (other than for stat-ing if not disabled). The issue is about the difference about simply including all the files (with class/function definition optimizations enabled) versus including only the files needed (without the class/function definition optimizations). The last case will also add the time used in calling the autoloader call path and resolving the method / function calls. If the time spent in the autoloader itself is longer (together with the missing optimizations) than simply running through the opcodes from the included files, the performance gain from using the autoloader disappears compared with just including all your dependencies unconditionally.
If you're new to PHP, this will take you a while, and I wouldn't recommend doing it yourself except as practice. You'll be writing to a database, and displaying the content from the database to users, which means you'll probably need to beef up on security, or else risk exposin The size gets bigger if you want users to log in, and all that jazz. If you don't expect a lot of traffic, (and, if you don't already have a site receiving a lot of traffic, don't. Only plan for large traffic when it looks like it will start coming in, if you do it before you're throwing money away.) Then this is something someone competent in PHP can probably do in a day or two, if this is all there is to it.
Ahh got it, thanks.
Ya I figured. I don't need a login system, I actually want to keep it straight forward. Anyone can post without a login, I would need a captcha I would assume to prevent spam. How long do you think this would take someone who knew what they were doing? I want this script for kind of a fun idea.
A day or 2, not long.
Ok thanks for the answers. I appreciate it.
Well.. to answer your question. It's not really that complicated it'd take about a day or so to write &amp; test.
Looks neat, and the basic functionality shouldn't take more than a day or two for any competent PHP developer. One observation: Your app is going to be pretty useless unless the "ask a question" box also serves as a search box. (If two people ask similar questions, the second person should be able to find what answers the first person got, even if it was asked several months ago.) Searching for similar questions could be tricky, though I suppose you could just hook it up to [Google Custom Search](http://www.google.com/cse/) for the time being.
A captcha would totally distract users from the simplicity of your app. It's very user-unfriendly. There are several ways to use JavaScript/CSS to catch robots, and services like Akismet are also very good at catching spam. Use a captcha only if you can't validate the submission through these other means.
Would you be interested in helping me? I could PM you the details of what this is going to be.
are you going to put all the answers into a database or pull them from google or another source?
database
Maybe, if you can show me the difference between this and all the other Stack Overflow &amp; Stack Exchange clones out there. [See here](http://www.inspiredm.com/2010/03/14/qa-websites/) for other options.
Useful, but how is it PHP-related?
&gt; A simple approach is to just make an entry in /etc/hosts for each project, but that gets tiresome. A less tedious approach follows: &gt; &gt;(describes a much more tedious approach)
Wouldn't it be easier to use mod_rewrite and .htaccess at your server root to point `http://[thing].dev/` to `http://dev/[thing]`?
Since when does Facebook use JavaScript as a controller? [Watch this](http://www.facebook.com/video/video.php?v=596368660334&amp;ref=mf) presentation. They are moving away from having logic on the client side.
MVC is a **design pattern**, not a specification. A design pattern describes a way to solve a commonly encountered problem in a consistent way. It is not a set of instructions that should be followed blindly.
I didn't authorize it to use my Twitter account, but from the outset, it looks great. Very well designed. While I know it's aimed toward Twitter users, it would be nice to be able to vote without authorizing the app to do so. Since you're available, give us a full rundown of the architecture. This is /r/PHP after all :)
I kept clicking the pie chart icon next to polls thinking I'd be able to view the poll. I had to figure out that I was clicking on an avatar for the "asktwoll" user, so I was being taken to a user page. It seems logical now, but at first it was confusing. Maybe something should be done to make sure the "asktwoll" avatar truly conveys the message that it's an avatar. On a related note, the user page (http://asktwoll.com/u/asktwoll) should probably be a bit more obvious that it's a user's page, and not just a list of polls. Congrats on launching! :)
Smarty is great for letting junior developers / HTML coders fix up the templates and presentation without having them trying to wade through PHP. Seperation of these things works great for a lot of people, myself included, if you don't like it or don't need it, fine, but I wouldn't discourage other people from using it, as it can be very useful to some.
Good call. I figured the avatar works great on Twitter, but on its own site it's definitely confusing. 10 lashes for me for mediocre user acceptance. :)
Yes, I wonder how much of a deterrent the whole Twitter requirement is. In a way I wanted the ability to prevent ballot stuffing. Anonymous voting might be a good idea, though, because getting this thing off the ground initially is the challenge. The site does not, however, automatically tweet anything on your behalf. That's something I hate. At some point creating a new poll will have a check box to allow the app to tweet for you, but only if you check it. None of this "oh hey, we'll totally abuse your trust in this site". So architecture. Zend Framework. At the moment fully dynamic, very little caching. Zend_Auth with a cookie backend (no sessions, although the twitter login piece currently uses it). Data is stored in MySQL (cringe) with lots of help from memcache (interfaced via Zend_Cache), simple array data structures that can be quickly handled with PHP's array functions. Layout is done using the 960.gs css template. Initially I wanted to fully do it up in Jquery UI (I use it extensively for internal business apps), but it felt too heavy, and I would have had to do more customizing work than I wanted to at the moment. I'm using the totally undocumented page static backend for Zend_Cache, which builds complete pages that are served by apache directly (no PHP overhead), although that's turned off at the moment. And the other issue is that it doesn't scale (well or cleanly) beyond a single server. I have a light-weight service layer (thin controller, fat model). At some point real time and MySQL just isn't going to fly (or so I think). I'm hoping to grow the site and eventually switch to Riak for persistence and near real-time results via map/reduce. And I'm thinking about tacking on an Erlang component to be able to display poll results in real time via long polling, since PHP is not suited for that at all. At the same time, there's gotta be more incentive for user generated content. There are so many possibilities... and such limited time. ;-)
In other languages, like Ruby or Python, the web application is an independent process running on some port other than 80 but always at the top-level. For example, [Sinatra](http://sinatrarb.com) runs on localhost:9393/ by default. PHP is usually a web server module, and runs in relative directories. Seeing http://localhost/myproject is common, and it's a pain to have to configure local dev and deployment URL helpers and the like. It's much easier to always treat it like it's top level and run it off of http://myproject.dev/
That is in essence what it does, but you need to mess with your DNS a little bit for *.dev to work in the first place. That's what dnsmasq is for. mod_evhost is somewhat analogous to Apache VirtualHost blocks, you could accomplish the same thing.
I'll second this, phpmailer is ok, but swift is awesome.
i'm very curious about how to use erlang in this website. Only real-time display poll results or had another great idea? :)
Also-- maybe including the username in the poll listing (like Twitter does, avatar on left, username above tweet) would help.
Right now there's no Erlang at all yet. Initially I wanted to build this thing using [Nitrogen](http://www.nitrogenproject.com/) and [Riak](http://www.basho.com/Riak.html), but it was quicker to do in PHP only because there are more ready-to-use components and libraries. That way I don't have to write too much from scratch. But ultimately I'm trying to move more towards concurrency oriented programming, and having those result pie charts update in near real-time would be a great, if slightly gimmicky, feature. A simple comet setup should be sufficient to get that going. Wire a call from the PHP service layer to the comet service, so when voting it'll notify all listeners. Sounds simple, but the devil is in the details. :)
First-hit impressions: Front page loads fast. Design is very slick and professional looking. Initially, the side-scroller interval was too fast but somehow (as I look again) has slowed to a more reasonable pace. (glitch?? I'm on Chrome - OSX) The vertical scroller right next to the side scroller is a bit much visually. The two are constantly fighting for my attention. Perhaps change the side-scroller to a cross-fade instead? The orange box ("Results are in") just loads empty with a link for "More...". I don't know if this is broken, or you just don't have/don't know what content to put there. It's not immediately intuitive that the Title for polls doesn't link to the poll and that I have to click the orange '?'. Don't make the user work, make the poll titles link to the poll. I don't have a Twitter account ... didn't login and try any of the deeper content. EDIT: One more thought. There is nothing intrinsically Twitter-centric about this app, why limit logins to Twitterers? How about adding Facebook connect, Google Auth ... any other Open auth providers? I realize you want to force login to limit ballot-box stuffing, but you're potentially cutting out a HUGE number of users by requiring a Twitter login.
Awesome, sounds like you really know your stuff. Best of luck with it.
Great feedback. The data on the front page is cached, but the view is still rendered dynamically. This is on a large Amazon EC2 instance. I would have gone with the small one, and I'm using it for development, but it's noticeably slower. Glad you like the design. I'm so not a designer, but [colorschemer](http://www.colorschemer.com/) and [960.gs](http://960.gs/) help a lot. Not sure about the side scroller glitch. I agree, though. The page is really busy with all that motion. Good call on the fading, I'll try that instead. The results box is empty because no polls have "ended" yet. (Right now they're all set for a week). So that's a fail on my part of not having anything decent as placeholder. The linking is a tough issue. I've had some conflicting thoughts on that. Initially I did have the poll titles linked. But I wanted to 1) "be more like Twitter" (and they don't make tweets clickable) and 2) I wanted the ability to have #hashtags and linked @twitternames, which would conflict. The difference between Twitter and this site, though, is that the tweets on Twitter convey everything one needs to know, and there's rarely a need to drill down to the permalink for the individual tweet (which is linked using the timestamp), whereas on this site there needs to be a means of getting to the poll itself. There are two links, however. One is the little orange question mark (which is also a status indicator. it'll be a green checkmark once you voted for that poll), and the other is the timestamp. But I agree, it's not quite as intuitive yet. That, along with the somewhat confusing AskTwoll avatar is something I'll need to re-think.
Curious as to why you cringe at MySQL for a project like this?
It's all based on totally unfounded speculation and my own disappointment for not experimenting with document stores and concurrency oriented programming, and instead chickening out and doing it the (quicker, for me) LAMP way. :)
In response to using ColorSchemer: there's an excellent site I use called [COLOURlovers](http://www.colourlovers.com/). It's constantly updated by the community and offers a lot of palettes. If you find that something in ColorSchemer isn't working for you, take a look at that.
Just checked it out, it's great. When it comes to colors and design I'll take all the help I can get. Thanks!
It fucking crashed already? or are load times ABYSMAL? EDIT: 12.85 req/second. [self-censored] 
Neither one according to what I see. There's next to no load (5%).
God! YOU HAVE TO MAKE THE POLL TITLE CLICKABLE!!
I'll throw in my look feedback anyway. Everything is too round. It looks cheesy to me, like a cliche over the top web-2.0 site.
Would you care to elaborate on the "unfounded speculation"? Maybe a couple of us here could alleviate that ill feeling.
I am with you madk - has everyone abandoned mysql when i wasn't looking? I still think it's a great product, but I always see people trashing it.
Take a look at [Highcharts](http://www.highcharts.com). It looks a lot better than the charts you're using right now IMO and it's fully JS. Otherwise, it looks pretty nice.
I've often wanted to set wildcard DNS under windows - so I can just set *.local to 127.0.0.1, then I only need to edit my vhosts to add new dev profiles. Sadly not possible afaik (without running a local copy of bind). This is an interesting way of doing something similar, which I might take a look at for my mac. Honestly though, adding a new entry to the hosts config isn't too laborious.
&gt;Prepared statements are faster When you're running the same query many times in a single database session; which generally isn't the case. &gt;and more secure. If you write unaware, insecure code that doesn't bother to enforce typing of variables *before* you send them off to the database. While it is good practice to use prepared statements (when the situation benefits it), and in general bad coders will cause less problems by using them, you won't see a noticeable speed improvement and your code won't be more secure. 
You have impeccable business development skills.
Okay, so that wasn't me worrying about the suitability of MySQL for this kind of task. It was quite the opposite. I've been doing SQL for over a decade and am quite comfortable writing complex queries all the way from SQLite to Oracle, including MySQL, PostgreSQL and SQL Server. I did, however, want to do the "NoSQL" thing and use a document store. The problem, as I saw it, was that while those things tend to scale up very nicely, they don't scale down very well. Of course, scalability and performance are completely different beasts altogether, with raw performance often taking the backseat in order to facilitate scalability. Makes sense. That said, I started to use MySQL because I knew it would perform rather well on a smaller data set without me having to setup several nodes (incurring additional hosting fees). And I doubt the site will seriously grow to the point where MySQL is having issues because it is MySQL rather than because I'm working with a less than optimal data model. So the cringing had really very little to do with MySQL in terms of capability or suitability and more with the fact that I really want to use something else, and it was 4 am when I rolled out and cobbled together this announcement.
I was about to ask you about your back-end, and whether or not you're using the Twitter api and messaging to handle votes, but it looks like you're just using Twitter as a means to connect a poll/vote with a person? Have you reviewed http://twtpoll.com/, what does your service add to the market? Any extra features?
Ah, I understand. Hopefully your site grows enough to allow the use of those document store databases. ;)
No, just people bashing on easy tools that get the job done. 
So round corners are out now?
Hehe: # Closed 1969-12-31 19:00 EST
&gt; and it's a pain to have to configure local dev and deployment URL helpers I don't get it, you don't have one config value for url? 
This is why I love /r/php, everyone here tells it like it is. Every new framework aught to pitch here first. 
ya hopefully someday your site will do more than 5 uniques a day and you might actually have to build all that crap. meanwhile my site stores data in mysql (cringe) and i net 6 figures running it full time.
I believe queries can be cached across sessions (at least in MySQL) so if User A executes a prepared query with some data, and User B executes the same prepared query with different data, the query (how it's optimized) is already known to the database. My point was you see plenty of code like: SELECT * FROM users WHERE email_address = '" . addslashes($email_address) . "'"; (or even using mysql_real_escape_string()) which is where the insecurities arise. Someone could easily forget those, and your code is now open for injection. If you use prepared statements, you don't even need to worry about them.
[Undocumented](http://framework.zend.com/manual/en/zend.cache.backends.html#zend.cache.backends.static)?
I believe it was, yes. Looks like it's been added since, but it's still very sparse on the details of the [Cache Manager](http://framework.zend.com/manual/en/zend.cache.cache.manager.html) with regards to the page and pagetag cache configuration and the cache action helper. It's got a small mention on the page you linked, but that's about it. If you want actual use cases or feature set you'd have to search your way to the [draft](http://framework.zend.com/wiki/pages/viewpage.action?pageId=9437372) in the proposal section of the wiki. It also isn't very friendly to URLs with query strings and has a few other quirks and limitations (like trying to selectively clear the cache in a load-balanced environment across nodes).
I agree, the javascript is very nicely done, color scheme is very appealing. One way you could do anon votes is have them count WAY less then normal. For example, one twitter vote: +-1, one anon vote +-.1. The "stuffing" would take a ridiculous amount of time. Create a javascript pop up stating that your vote is considered "priority" or something along those lines, if you are logged in. You could also incorporate facebook pretty easily. 
Like anything, it is possible to overuse it. 
lol or nano.
I was using NetBeans for a bit but it has an annoying issue in OSX where you can't open files from finder. So I ended up going back to Komodo Edit. Which has always worked great for me. I recently learned about phpStorm which is built by jetbrains and they usually make a pretty good product.
MySQL prepared statements currently have two benefits as far as I know: * Caching of query parsing so the MySQL engine doesn't have to re-parse if you run the same query in a session 1000 times. I am almost positive this is per-connection and not shared like the old query cache. * Binary protocol, to allow the client to send less data to the server by not having to use the outdated plain-text format. (the mysqlnd library implemented binary protocol, so this is a moot improvement on 5.3+ I believe). Initially MySQL claimed they would also cache the planned query execution instructions so for each statement run the engine wouldn't need to figure out indexes, joins etc all over again. I don't think this is in any "production" version of MySQL yet. I agree that using addslashes() is an ineffective and insecure method of escaping strings for MySQL queries, mysqli_real_escape_string() on the other hand is very much not. Saying prepared statements is more secure is akin to the argument some coders make saying (1 == $var) is a much safer format for conditionals than ($var == 1) because if you typo and do (1 = $var) there are no ill-effects and it's not as hard to debug. By forcing programmers (especially in a language as easy and wide-spread as PHP) to have to worry about variable sanitization in the database, it will force them to think about it when they are spitting it out to the browser (which is equally important). It doesn't matter how many libraries you wrap around your code to make it easier; data sanitization is one of the most important and often overlooked aspects of programming. I think it's safe to say the majority of exploitable software (on the web, your computer, servers) is due to laziness when it comes to validating and scrubbing external data. "Loose Typing" systems have only made this issue more of an issue. Making it standard procedure to validate/sanitize data before you store or serve it should be much more important than the minuscule amount of time MySQL will save by caching a query parse or execution plan. Here's an example of your query on a table with &gt; 250k rows. mysql&gt; set profiling=1; Query OK, 0 rows affected (0.00 sec) mysql&gt; SELECT * FROM users WHERE email='user@example.com'; Empty set (0.18 sec) mysql&gt; select SEQ, STATE, DURATION from information_schema.profiling where query_id=1; +-----+--------------------------------+----------+ | SEQ | STATE | DURATION | +-----+--------------------------------+----------+ | 1 | starting | 0.000031 | | 2 | checking query cache for query | 0.000052 | | 3 | Opening tables | 0.000015 | | 4 | System lock | 0.000007 | | 5 | Table lock | 0.000031 | | 6 | init | 0.000029 | | 7 | optimizing | 0.000012 | | 8 | statistics | 0.000015 | | 9 | preparing | 0.000015 | | 10 | executing | 0.000006 | | 11 | Sending data | 0.182342 | | 12 | end | 0.000025 | | 13 | query end | 0.000006 | | 14 | freeing items | 0.000256 | | 15 | storing result in query cache | 0.000013 | | 16 | logging slow query | 0.000005 | | 17 | cleaning up | 0.000007 | +-----+--------------------------------+----------+ 17 rows in set (0.00 sec) 
Alright so I take it you only asking for the php side? Pretty simple. Want to PM me? I can help you more in depth if you want.
Indeed, I'm working on the anonymous feature right now. weighted votes are a good idea, although I'm looking at it more from the RPG-type angle with leveling up and all. I figured it should award 'experience points' even for "guests", but if they don't login before they leave, they forfeit those points - the vote would stick, however. I've been observing logs, and I see lots of abandonment once the login page is hit. I didn't expect that, but it makes sense that people don't blindly just trust "some site". Gotta get past that early adopter stage. My real work has just begun. :)
Wondering why you used MySQL over PostgreSQL, though?
How much advantage do they give over RDBMS for &lt;10,000 reqs/sec? And which one would you choose? Cassandra? Redis? MongoDB? Voldemort?
No particular reason. The development machine already had it running, and I went with it.
Wow, your awesome. [Here is a mockup of what I want in a nutshell](http://i.imgur.com/foQdZ.jpg) I don't need a login system, simply someone asks a question in that form, and it posts on another page for people to answer. Let me know what you think, should be a fun project.
Okay for the database, this is what I have in mind, tell me if it fits your needs. Table: questions Id, question, time. What about answers? How will they be answered? If they are answered are they deleted? Do you want to store the answer in the database? What about styling? Do you know html and/or css?
Outside of calling it a "web app," it looks pretty good.
is it open source?
Fair enough. I've been trying to work towards using Postgres since Oracle bought MySQL. Unfortunately, I try and build apps database-agnostic so I can't really utilise the features of any :(
I've enjoyed playing [node.js](http://www.nodejs.com) for dealing with real-time stuff like that. As a web dev, it's familiar since it's javascript, but I found that using it in the server context made me much better with it on the front end too which was a bonus.
Cool, I appreciate the write up! I get your point about forcing programmers to think about security. I wish XSS sanitation was simpler without the use of extensive libraries.
Ya I guess the answers should be stored on a database because I dont want them deleted. I guess i know enough html css to get by..
Okay, how are you going to be answering them? Since you do not have a login that is. I can setup a basic html page for you. I have already setup the question box. 
Oh, I guess it would be a comment system. For anyone to answer the questions. Not sure how that works.
No, not open source. I want this to make money. The end product will be free for the public and make money via ads and other stuff. I did my research and about any competing products, and I started my project before Amazon. I compared amazon's features to what I have in mind, and I am beyond that. I already did some coding, db structure already done, did a lot of javascripting, but nowhere near a finished product. I've been heavily thinking about recruiting some help, but I'm a cheap bastard. Like I said, I can code it myself, but I'm lazy.
My power keeps going on and off, luckily I am working on my laptop.. But I do have to keep stopping to start my server. The last power outage just took out my Operating system (ubuntu).. So I have to reinstall it. Good thing I have a backup of the server. Your code is almost done, just need to finish the answering code. 
Wow cool thanks.
&gt;display poll results in real time via long polling, since PHP is not suited for that at all. can you expand on this? how is PHP not suited for this task? and did you mean the realtime part, or the long polling?
Much appreciated on the Komodo suggestion! I've actually been looking for a replacement for PhpEd for a while now. Not that there's anything wrong with PhpEd, it's just that I moved to a Mac and they didn't, and I'm getting tired of using VMWare. Looks like Komodo 6 fits the bill, though!
because Netbeans already supports path mapping for debugging?
"there are open exams worldwide, yet none in America." is this true? that's tragic.
prepared statements
I'd say it's more than normal, it's bloody odd if they DON'T ask.
This is quick and dirty and that is fine with me. Thanks for the suggestion though :)
Then it sounds like you should be using the [Page Frontend](http://framework.zend.com/manual/en/zend.cache.frontends.html#zend.cache.frontends.page) with the Memcached Backend (or similar) instead. This would give you the benefit of having a full page's output cached and served while being able to distribute the cache across a cluster of Memcached instances AND also being able to handle query strings, cookies, POST data, etc.
PDF is inferior in every way to HTML.
Here's a sample I ripped directly out of a site in production: $pageCache = Zend_Cache::factory( 'Page', $backend, array( 'lifetime' =&gt; 7200, 'default_options' =&gt; array('cache' =&gt; false), 'regexps' =&gt; array( '^/feed/' =&gt; array( 'cache' =&gt; true, 'cache_with_get_variables' =&gt; true, 'cache_with_cookie_variables' =&gt; true, ), ), ), $backendOptions ); $pageCache-&gt;start(); Where $backend is 'Memcached'. This small snippet is in it's own file and is included *right* after the Autoloader is loaded and *before* Zend_Application is bootstrapped/ran.
watching this unfold was awesome.
They're two very fucking different formats.
Seems interesting! Unfortunately my company just completely tooled up with Prince XML about a year ago. A webkit-based renderer would've been dreamy!
Both. It can be done, but it's not efficient (from my experience). The (near) real time aspect is more of an observed behavior, with long polling being one of the techniques to achieve that. Another way is to continuously fire off AJAX calls at short intervals. The problem is that PHP is quite heavy, in terms of resource consumption per process. That's especially true for your typical Apache/PHP setup, where each requests consumes an Apache child process. You'll either hit your MaxClient limit real quick or run out of RAM (in which case the web server should be tweaked to prevent paging / thrashing). There are other ways to setup PHP (Lighttpd, Nginx, PHP-FPM, etc) but the problem is similar. The resource consumption for each PHP process is so high that long polling doesn't scale well. And neither does firing off AJAX requests at concrete intervals, which ends up just flooding the server with useless requests. Other applications and language combinations have better (native) mechanisms for this kind of stuff. Those are often light-weight, functional, and have native support for concurrency. Node.js, Scala, Erlang, and Stackless Python off the top of my head. I can't speak to all of them, but with Erlang, for instance, I managed to fire up 900,000 processes on my Netbook. Of course they didn't really do anything and it doesn't solve a separate obvious problem of not running out of sockets, but the point is that these processes are very light weight in terms of resource consumption. And the message passing aspect that's native to Erlang makes it simple to notify a set of processes of newly available information. In PHP you'd probably have to have the process sleep and then check for data via some means (file, memcache, etc), so you're polling and doing work, which also consumes resources. You can scale it horizontally, sure, but it's so inefficient on a per-request level that you'd find yourself adding more servers quickly. That's my experience, anyway. I'd love to be proven wrong or at least shown a better way to do it.
sounds good if it works.
Take a look at c:\Users\PROFILE\AppData\Roaming\NuSphere\PhpED\config - might be stored in a file there somwehere. You could also check/post at the customer forum.
From doing some heavy Googling and forum searching last night, it appears this is a very oft-requested feature that has been left unfulfilled. So it appears an export is out of the question ... The above location doesn't show too much promise, but I think it'll have to be saved to a file somewhere.
Thanks! I appreciate it, I'm aware of the available caching mechanisms, though. I was just experimenting with what I hadn't used before in hopes that I could skip PHP altogether with the static cache. That's why I use a 'signed cookie'-based backend for Zend_Auth, with jQuery injecting the username into the header, and grabbing status of whether someone voted on the polls displayed on the frontpage separately via ajax. The idea was to have user agnostic pages that can be cached in all cases and the user specific pieces get pulled in afterwards. That still applies to the page cache of course, so I think I'll go that route. The one hangup that I've run into, though, is that (AFAIK) there's no distributed cache that does tagging natively. Memcached can't do it -- certainly not atomically. I've brainstormed all kinds of attempts, like using [memcached::append](http://php.net/memcached.append) to just tack on a list of cacheIds to a "tag_{tagname}" key, etc. but it seems there's no readily available component that requires little to no development work. Any ideas on that one? In this case, for instance, I'd want to tag the front page with every poll on it, so if one expires or gets deleted, it'll bust the cache.
So, half square, half round? 
OK. I have used Zend Studio 6 and 7 for a few years, then I became a religious PHPed proponent and now I'm using NetBeans, because it just seems to use less memory than any of them and has a **far** nicer color theme support than any of them. Then I heard all about PHPStorm and decided to download it. I can't get the damn thing to run on my Windows XP box w/ 4 GB of RAM. W/o any projects loaded, it churns and churns and churns the disk, like Zend Studio will, you know? But it seems *so* lagged. I haven't been able to open up a project, so I can't compare. But I like NetBeans -&gt; PHPed -&gt; Zend Studio -&gt; PHP Storm -&gt; Komodo, at present.
Geany rules.
Just FYI: Next time, don't type "self.php" in the URL bar. Instead, click the "text" tab when submitting. The self thing is done automatically. What you did makes a browser link to a nonexistent domain called "self.php"... :-)
HUH?
Thanks. I didn't know that. 
At least put in the effort to type the name in [Google](http://www.google.com/search?hl=en&amp;q=geany)... &gt; Geany is a text editor using the GTK2 toolkit with basic features of an integrated development environment. It was developed to provide a small and fast IDE ...
Is using PHP the best approach for this? Is there a specific need for it? You can automate this kind of behavior with a lot of existing tools. One solution is to have a sendmail server with a local procmail delivery script. Anything being delivered to that account can do keyword matches on procmail, and pretty much do anything you want. Another really cheap and fast way to do it is create a gmail or google apps account, setup forwarding to that address, and have a bunch of filters match the subject and forward. The difference between these solutions and using a php script, is the php script would have to poll the box. The delivery filters on the other hand are triggered events, and only triggered once on new mail arriving. What's the php script going to do, delete everything in the inbox after, or rescan the same messages over and over again? You'll need to keep some kind of local counter to make sure you don't process things twice.
Makes sense. Maybe PHP isn't the way. I'll look into procmail in more detail, thanks for your help. 
1) Use fetchmail. It does everything you could ever need with regard to retrieving and forwarding email. 2) POP3? Really? Is this still 1988?
Does that mean you dislike Komodo?
I started on vim in 97 and moved to emacs in 01, and after using it for a few years tried some other IDEs. Every year or so I try a new IDE (or a new release of an IDE I've already tried) to see if it will make my life easier, and it doesn't. I work on 100KLOC+ projects with a very large number of files and I can do it all from any computer I can get an SSH terminal on. I've done entire projects in various IDEs, to actually try and get a feel for why people seem to think they are so great, any time I find a feature I seem to like, I go to google and lo and behold, there's an emacs plugin that provides the same or better functionality. People telling you that you will be faster on an IDE with a giant GUI versus an editor made so you *never have to remove your fingers from the keyboard* are at the very least misguided. I can code faster, cleaner and better than the majority of people I know who insist on using IDEs, and I never learned to type properly so I only use about four fingers to do so. Thanks emacs.
I've been using geany for about a year now... any tricks you've found? I customized the GTK skin and the color theme, but I need to dig around and see if it offers any code completion for php, jQuery, and html5. Split windows would be awesome too.
THAT THIS IS DOWNVOTED SO MUCH SHOWS THAT AT LEAST FOUR PHP CODERS ARE IDIOTS. ---- Don't trust any online tutorials and very few beginning PHP books. They are all horrendously wrong. Learn only from people who are already professionals earning in excess, of say, $85,000. Although, in my experience, virtually all of my coworkers at similar levels still practice gross anti-patterns like not knowing how to debug, using a text editor en leu of an IDE, not knowing or caring about unit tests, etc., etc., etc. I would say the vast majority of PHP coders do not know how to debug or know what design patterns are. I offer a course that gives you everything you need to get started professionally, but every time I link to it, I get downvoted. PS In my 10 years of professional PHP programming, I have met four...FOUR PHP coders, either as coworkers (Richard, Harmon, Nathan) or members of the open source community (Ted), that knew and implemented at least five of these points: 1. Used an IDE 2. Knew what design patterns were and used them 3. Knew how to debug using breakpoints and the locals window (I know MANY devs that even used IDEs and didn't know how to do this!!) 4. Knew and had made at least one unit test 5. Didn't riddle their code w/ copious amounts of var\_dump()s and print\_r()s with the aim of debugging. 6. Understood SQL enough to not rely on an ORM. 7. Understood what XSS was and actively guarded against it. 8. Understood what SQL injections were and guarded against it. 9. Used something like PDO prepared statements for SQL.
Please link to it or send me a PM
Was it an accident??? Could it be that you were hoping to earn some karma off of your upvotes? Probably not or you would have just liked to the PHPStorm website. No worries you know about the text tab now. ;P
That you can still code very well in it, and it doesn't have to be a mishmosh of HTML/CSS/PHP all mixed together. ALWAYS read the PHP manual. Chances are there's an easier way of doing what you want to do, or a function exists which accomplishes 90% of your tasks. 
On point 3, I could never get XDebug to work properly with breakpoints. It was usually slower than me putting in a print\_r() and a debug\_backtrace(). Of course, experiences helps to know what/where you're looking for. I would also say, learn SQL, then use ORM. I didn't start using ORM until this year, and I've been using PHP professionally for about 7 years. ORM still makes me cringe. 
I was going to post that PHP's official documentation contains a great cheatsheet.. it's one of the few things I have posted to my cubical wall. Then I realized you linked to it. Good stuff.
This is beyond ridiculous. Using an IDE and needing breakpoints and a locals window? If I don't do these things, I am a "bad" PHP programmer?
I've never heard of this, but I think it's a great idea. You're going to inherit a ton of their code and they want to make sure you know what to make of it. Understanding (and enhancing) someone else's work can be a tricky thing to do, and I'm impressed with this method of measuring skill.
Haha! I have a brilliant and very logical coworker, but sometimes understanding his code drives me nuts. For any given scope, there are at least 26 1-character variable names he can use and you better believe there won't be any wasting of bytes until he uses them all and needs some more. His work has given me so much more appreciation for good variable and function names.
I went to ZendCon one year outside of San Francisco. I liked it quite a bit more than many of the more business- oriented conferences, because most of the people there were coders instead of managers. It made for more interesting conversations.
asking me to give up textmate is a lot ;) I'm pretty versed in Aptana, although it is painfully slow to me.
Four Recommendations: 1. Use a Framework. I love CodeIgniter - blazing fast, good documentation, and really well integrated. Zend is also great. A lot of people critique PHP based on its horrible naming conventions; using a framework can alleviate this headache. Try a few frameworks out - you may find one that fits like a glove. 2. MVC. On top of a good framework, splitting your files into Model-View-Controller will save you a ton of time. Makes files easier to read, allows you to write better unit tests and makes debugging a snap. 3. Firebug and FirePHP. These are indispensable Firefox extensions. You will fall in love with them - they make life soooo easy. Screw print_r()'s - use fb and you won't go back (nor will you want to). 4. Don't listen to hopeseekr's crap. You don't need an IDE (I use emacs) though if you want a good one, Netbeans is pretty rad. A good framework will provide good XSS filtering and SQL injection prevention. It is good to know about unit testing and design patterns but in reality you can start building some awesome stuff without knowing any of that (keep in mind you may end up refactoring/rebuilding it later if it takes off).
I've already had wood for firebug for years (coming mostly from a javascript/css background here), glad to know there's a php extension too.
Can you please fix it? or perhaps a moderator?
I tried it... for about two minutes, until I realized that the icons and fonts look horrible. Good interface design is very important to me because I have to spend most of my waking hours in front of the IDE... so I'll stick with netbeans for now... but I'm always open for better alternatives, because netbeans is far from perfect as well.
&gt; Used an IDE Check! Eclipse every day! &gt; Knew what design patterns were and used them Check! &gt; Knew how to debug using breakpoints and the locals window (I know MANY devs that even used IDEs and didn't know how to do this!!) Check! How can you properly debug **without** breakpoints? &gt; Knew and had made at least one unit test I don't write them usually, but I have in the past. &gt; 5. Didn't riddle their code w/ copious amounts of var_dump()s and print_r()s with the aim of debugging. xdebug ftw &gt; 6. Understood SQL enough to not rely on an ORM. I don't think using an ORM is a crutch necessarily. I occasionally use one when I'm strapped for time, don't know what database I'm going to be deploying to or just plain don't want to write SQL queries. That said, I write any performance heavy queries by hand, if I can. &gt; 7. Understood what XSS was and actively guarded against it. If you don't do this, you fail as a web developer. Seriously. &gt; 8. Understood what SQL injections were and guarded against it. Prepared statements? PHP is the *only* language with a community of idiots enough to *not* use prepared statements. DERP. &gt; 9. Used something like PDO prepared statements for SQL. Of course. -------------- Now, I wrote all of that, not to brag, but to make a point. I got out of PHP (I still write it occasionally when I get freelance contracts for supplemental income) and took a full time Java job and there's several people here that did the same thing. I think the problem isn't that there aren't good PHP developers, but rather good PHP developers realize the idiocy and horrible general state of the PHP community and leave disgusted. There really needs to be an organized movement of PHP professionals that are vocal, know what they're doing and, above all else (the largest thing that turned me off of PHP was the conceit of people who know what they're doing) they need to be friendly. As long as PHP developers are perceived (and somewhat justifiably, as a whole) as a bunch of amateur half-programmers, the good programmers are going to leave for greener pastures. Hell, full time Java jobs on average in my area pay more than 30% more annually! Is the programming harder or the perception of the skillset of the developer simply different?
No, no fuck FirePHP. It's not much more helpful than littering your code with dumping functions (print_r and var_dump, most typically). Learn to do things properly and use a proper debugger, like xdebug.
I think some other folks have already said it but, use a framework. There are a ton out there for PHP and it makes everything so much easier. I used to be that cocky guy who would try to reinvent the wheel every time, and while yes it would work. It would take me twice as long to finish a project than it does now that I am using a framework. Though as a fellow developer I am sure you already know this. 
He didn't say actively use or prefer, but know how to use. I've met exactly 0 people that have any level of proficiency in an IDE and refuse to use one and the amount of PHP developers that don't know what a breakpoint is, let alone how to use one, is reason enough to more or less require that knowledge in your developers. Using an IDE and proper debugging practices doesn't make you a better developer, it makes you a more well-rounded/educated developer and it saves you time. If you have valid reasons for not doing these things, great, but I'd like to hear what they are.
See? i was downvoted to -6... &gt; I'm running a course to bring any one from noobs on up to master PHP. Anyone here can contact me in the next 5 days for free passes to the entire course (normally $75/section). Offer ends 10/16/2010. promo-201010@phppro.phpexperts.pro.
I'm being downvoted -4. That shows that most PHP coders are idiots.
Came here to post #1 and #2. Less typing for me this way :)
oorza: My comment saying just that is -5 now. I hang my head in shame of my fellow PHP coders.
Yes, quite a lot.
Neither of these are possible, unfortunately.
I know this is off topic, and feel free to ignore if you'd prefer, but what do you dislike about it (or prefer about the others)? It's my favorite IDE, I don't use it much for PHP though, but am switching to a PHP centric job next week.
Happy Reddit birthday!
&gt; Use a Framework. Yes, this. Learn how to use one, then learn how it works. It doesn't matter which one you use, they all are awesome and they are all pieces of shit, depending on who you ask. The *one* recommendation that I have is to not use a framework that tries to maintain PHP4 compatibility, as those often are built around the patterns and features that existed in 4 and are needlessly crippled when it comes to the featureset of the language. &gt; MVC Close, but no cigar. One of the problems with the PHP people that perpetuate MVC is that they don't know there are other design patterns. This should say "learn design patterns, what they are and when to apply them." A misapplied design pattern (I can't even begin to tell you how many codebases I've seen that are cajoled into MVC when MVC makes no sense, because MVC is the "right way") is actually just as bad as no design pattern at all. Sidenote: I'm actually not a big proponent of MVC in the web, but that's an entirely different thread altogether.
I'm going to conditionally disagree with #1. Don't use a framework *at first*. Avoid them *until you know the language* and have encountered annoyances and pitfalls. Then you will be in a better state to select a framework that fits your needs.
If you're doing anything even remotely complex, then not using either is a sign that you don't know what you are doing.
I like that Netbeans is the consensus (so far), as I love it. I did come here wondering if anything had topped it but no-one seems as enthused about anything else. I did used to *love* phpED though (esp for the server-side debugging), but it's windows only so didn't survive the trip to Ubuntu (and then OSX)
Took me forever to work out to click "comments" xD
php makes your life a lil difficult with the underscores, non-underscrores, setenv or putenv, push or array\_push, etc.. so it's best to set autoreplace shortcuts for the most common functions (i use editplus and in that it automatically changes the word after you press space).. so create a small dictionary like push=array_push(^!), setenv=putenv, etc.. it is also very useful to create shortcuts for commonly used functions like empty = if(empty(^!) { .. and for god's sake don't use the mysql\_real\_escape\_string function with sprintf.. I've seen that done way too many times and it makes everybody's life hell.. use pdo or write a wrapper class (what i do) to handle all the escaping and querying and connecting to db and include it in a separate file.. it just isn't fun to initialize a connection and use the built-in functions db functions inside every script.. if you do it - i promise you will regret it later.
&gt; write a wrapper class (what i do) to handle all the escaping and querying and connecting to db and include it in a separate file Don't. Just don't. Use mysqli and you'll be fine for the foreseeable future. If you need more, you can actually extend the mysqli class.
can you go into more detail on why?
Magic is pain. Avoid it at all costs. Use eclipse/netbeans. "Open declaration" will save so much time and effort. Learn OO and design patterns.
Ruby is a much cleaner and more elegant language, Python too. In fact, I would say that of popular languages in use today, PHP ranks among the least well designed (along with Javascript). There are all sorts of "features" in PHP that encourage absolutely horrible code. Good PHP coders know how to avoid these, but better to use a language designed by someone with the wisdom not to include them in the first place. For a good list of these misfeatures, check out [this Quora post](http://www.quora.com/What-are-the-crawling-horrors-of-PHP). Oh, and if you want some unbiased criticism of PHP relative to other languages, r/php may not be the best venue :-)
that ruby existed.
* Stick to standards just like you hopefully do with your front end code. * Frameworks are great. I like CakePHP. Zend Framework is a beast, and takes a while to setup. I wouldn't recommend it for small sites. I recommend writing your own, and then never using it. You'll learn a lot doing it, but it will never be as good as what a team has put together over years of development. * Wordpress and Drupal are great too, but don't rely on them for everything. They have a purpose, don't try to fit every site you build into them. * I've used an IDE before, but find them to be bloated. If you are on a Mac, Eclipse doesn't perform very well. It's not Eclipse's fault, but that it was built in Java and anything Java runs like shit on a Mac. I use Textmate on the Mac. It's as close to an IDE as a text editor can get, but is still light weight. It could use an update though.
Nobody mentioned Apache, MySQL, and editing the php.ini file. You should also learn a little Linux administration in case you are ever asked to deploy a site on a web server that isn't entirely ready (my recent experience). This project I'm working on has shown me that I need to work on my Linux-Fu.
wip his dick
I use textmate already for all my javascript and css. i prefer when learning a language to have to write everything myself as much as possible, so I'll probably stick to textmate. I've been looking into cakephp this evening too, looks helpful.
As to which MVC framework you should use, I personally prefer frameworks such as CodeIgniter because they're simple and have a getting-things-done approach to programming. MVC is a simple concept, and as such it never ceases to amaze me how Zend Framework can take such a simple concept and make it so complicated (meaning you'll often have to look at the documentation again and again just to perform simple tasks). I understand the reasoning behind it (Zend Framework wants to be a fragmented, modular thing where you'll need to write code to bind those parts together), but I like the idea of a full, thought-through, and simple MVC framework better - and CodeIgniter is just that.
yes, exactly.
I think you're being downvoted because you're calling people idiots, and because your attitude generally stinks. If you had presented the same information without the arrogance, its reception would probably have been different.
I love PHP Storm, easy to setup, easy to use, and fast.
It's Ceases. Sorry but that one drives me nuts. Also... I like CI as well and recommend it to people starting out in PHP and/or frameworks.
I wish I would have spent more time learning python than learning PHP. 
&gt; What exactly can they help you accomplish/why do you use one First, let's [define MVC](http://en.wikipedia.org/wiki/Model%E2%80%93View%E2%80%93Controller). Read that? No? Go skim it at least. MVC is the name for a particular GUI pattern. It does not translate perfectly into web applications because of the stateless nature of HTTP requests. However, the underlying basic idea is golden: the presentation layer (HTML and CSS) should not intermingle with your business logic (data storage, access, validation, manipulation, etc), and there needs to be something else present to tie user requests into calls to the underlying business logic and then throw stuff back to the user. You don't *need* a framework for this. In fact, PHP makes it insanely easy to separate your presentation from your controller glue from your business logic. You *can* do it all yourself, you don't need to use someone else's work. If you're a masochist, that's a fine idea. Frameworks make the drudgery of doing it all over and over a bit easier. Some of them are simple and lightweight and just provide bits of MVC glue and some classes to extend. Some go much, much further and perform code generation of every single model and controller based on configuration files. Some are somewhere in-between. Some offer both, but let you pick. Some have their own database adapters, some have their own ORMs. Some throw in the kitchen sink. Some are tightly coupled, meaning you have to use all of it or none of it. Most are loosely coupled and let you use one component without worrying about all the others. I've been a fan of the [Zend Framework](http://framework.zend.com/) for a while. The components are pretty loosely coupled, and there's a lot of kitchen sink in there. Most dependencies are on interfaces, not actual implementations. It has optional code generation for MVC projects. I don't particularly care for how their MVC works, though. I don't have enough experience with other frameworks to really judge them.
Double Side note: MVC in PHP frameworks is actually not MVC at all, it's just what people search for so that's what it gets called. Double-double side note: If you ever want to be that pretentious old fuck who always knows best, then this is excellent information to whip out.
Upvote for CodeIgniter, it's an excellent MVC framework. There's lots of plugins and community built libraries available too.
Same here, but s/CodeIgniter/[Kohana](http://kohanaframework.org)/g. 
I wonder if the poster knows what dip your wick means.
Upvote for xdebug! :)
I would highly recommend PDO over any of the mysql[i] functions.
and fantastic documentation
+ Toast for unit testing - plugs nicely into codeigniter so you know you aren't introducing stupid regression bugs!
&gt; There really needs to be an organized movement of PHP professionals that are vocal, know what they're doing and, above all else they need to be friendly. They're called python developers :P
0) PHP is much like any other programming language 1) WAMP is great for 5 second startups 2) dont use print("....") to write HTML code...end the bracket ( "?&gt;" ) and reopen ("&lt;?" )...use brackets and print inside the HTML instead (i.e. &lt;div id = "&lt;? print($qry_res-&gt;id); ?&gt;"&gt; div content &lt;/div&gt; ) 3) almost all hosting services provide php and mysql 4) No framework - frameworks are for wussies - build your own. 5) There is a lot of crappy PHP written and the language should not be judged by the poor use of it found in free downloadable apps 6) if you really want to be a great programmer use openbluedragon and integrate java and coldfusion enterprise without paying a license.
Oh yes, I know. It's not really MVC (real MVC would be a horrible choice for the web because of the short lifespan of applications), but closer to PAC / HMVC, although different implementations (all claiming to be MVC fwiw) do things entirely differently. I got tired of explaining what legitimate MVC is, why PHP-MVC isn't MVC, what a design pattern was, why it mattered, etc. and just started calling PHP-MVC (what I used to call it) MVC. There's a reason I said "entirely different thread altogether" :P
Hi
&gt; I recommend writing your own, and then never using it. You'll learn a lot doing it, but it will never be as good as what a team has put together over years of development. I spent 10 minutes trying to write this very thing, but could never get a non-awkward sentence out for it, so I applaud you sir. Well done!
I need to invite you to my next party, we can be pretentious old fucks together.
If you're using Windows, check out VS.PHP, I've been using that for years.
I know it's not a proper response to what you're asking, but I have to agree with 100shadesofcrazy that using Ruby would be the best lesson for any php developer. Mind you, I'm an old school perl hacker myself... But to answer your question: - php *allows* you to do lots of things but *requires* you to do very little. Don't be seduced by the shortcuts. i.e. .... - error handling - use it! write debuggin statements to a log file, use exceptions, etc. - proper object-orientedness - don't give into temptation to work around it! - don't write php code that generates html; don't embed php code throughout your html. keep them separate! Use a templating system (e.g. smarty) or even a full-blown framework if you must - turn magic quotes and register globals off! they are security hazards. - read the comments at the bottom of each page in the docs on php.net. they often point out bugs and provide canonical solutions to common problems 
Can someone explain what a framework is and why it's good to use one?
Alway escape any user data before inserting it into a database. Oh man how I wish I would have learned that early.
Don't trust any online tutorials and very few beginning PHP books. They are all horrendously wrong. Learn only from people who are already professionals earning in excess, of say, $85,000. Although, in my experience, virtually all of my coworkers at similar levels still practice gross anti-patterns like not knowing how to debug, using a text editor en leu of an IDE, not knowing or caring about unit tests, etc., etc., etc. I would say the vast majority of PHP coders do not know how to debug or know what design patterns are. I offer a course that gives you everything you need to get started professionally, but every time I link to it, I get downvoted. PS In my 10 years of professional PHP programming, I have met four...FOUR PHP coders, either as coworkers (Richard, Harmon, Nathan) or members of the open source community (Ted), that knew and implemented at least five of these points: 1. Used an IDE 2. Knew what design patterns were and used them 3. Knew how to debug using breakpoints and the locals window (I know MANY devs that even used IDEs and didn't know how to do this!!) 4. Knew and had made at least one unit test 5. Didn't riddle their code w/ copious amounts of var\_dump()s and print\_r()s with the aim of debugging. 6. Understood SQL enough to not rely on an ORM. 7. Understood what XSS was and actively guarded against it. 8. Understood what SQL injections were and guarded against it. 9. Used something like PDO prepared statements for SQL.
THe deal killer is that it is the only IDE for any language I have ever used where you cannot have the Locals window in ... well ... a pop out window! It's stuck to the coding window, taking up precious real-estate. I can't move it to the other monitors, i can't hide it when i dont need it, and I can't move it to where it is more easily seen. Since Locals is one of the main reasons for using an IDE in the first place, it's a deal killer.
I thought he misspelled genie or something. It's up to the person writing to link to their thing or at least explain what it is.
Just code your own. Or leech mine... http://www.brokertools.us/user_directory/ It's only a few hundred lines.
Wordpress. edit: UR_Penguin laid it all out, but in a more simple, direct way: Everything you want to do is doable in Wordpress. The calls are a little different, obviously: getTitle() -&gt; the_title() getPost() -&gt; the_content() etc etc. Stop over thinking it and just do it in Wordpress. If you need help I'm available for the low low low rate of $100/hour. I'll give you a discount of 10% because it's a non profit haha. But no seriously do it yourself, it's stupid easy.
I can't speak for advanced developers, but I learned on Java and my PHP classes are mostly a collection of functions. I've worked at fixing this and trying to make my PHP as OOP as my Java, but it is easy to be lazy... edit: I mean if developers like me that grew up on OOP can't stay hardcore OOP, then it true MVC can't be expected, right? LOL
It's not expected at all, true MVC would be *insane* in PHP. My point was just that a lot of PHP developers are self-taught and don't actually know this. Hopefully at least some of those thought "wtf" and got curious. :) Also, as someone who has OOP experience from C#, don't just blindly copy all your Java OOP styles to PHP. OOP in PHP can help you encapsulate code nicely, auto loading is sweet, but it's very easy to over-engineer it and come away with a clusterfuck of PHP files and convoluted code flow. Just see Magento code for how not to do it.
It's a way to decrease development time by not having to write the same code over and over again. In PHP, things like handling forms and accessing databases are common, but you shouldn't need to reinvent the wheel every time you start a project. A framework will abstract a lot of the basic code. As for specifics, it doesn't matter. Just pick one and stick with it. Weighing pros and cons is a waste of time, and saving time is the whole point of using a framework.
Yeah, one should exist, and one shouldn't.
Kohana. It started as a fork of code igniter and has since been rewritten into a hmvc framework (h is optional) and you can include zend framework libraries easily too. Best of all worlds. Stay away from php4 frameworks.
&lt;?php switch ($yourCircumstance) { case 'notTooStrictMVC': $fw = 'CodeIgniter'; $docs = 1; $linesToWrite++; break; case 'matureButBloated': $fw = 'Symfony'; $docs = 0.7; $community++; break; case 'matureButPHP4': $fw = 'CakePHP'; $docs = 1; $community++; break; case 'bleedingEdge': $fw = 'Lithium'; $docs = 0.3; $noSQL++; break; default: $fw = 'WriteYourOwn'; $community = null; $documentation = 0; throw new WheelReinventedException(); break; }
I think I remember your other post... :) [WordPress](http://www.wordpress.org/) is by far the best option. You do need to apply security updates every now and then, but it's just a click in the admin panel. [Habari](http://www.habariproject.org/) is probably more lightweight and also more secure, but it doesn't come with a rich HTML editor by default, and there's no easily installable plugin for that. If you have a separate installation of WordPress, you won't be able to use WordPress-specific functions such as the [the loop](http://codex.wordpress.org/The_Loop) unless you load up the whole WordPress engine or use some nasty hack -- in which case you'd be better off just re-doing the site as a blog. An alternative is to look at the database tables that WordPress generates. If you can write a simple SQL query to pull the latest post from the wp\_posts table, it might actually work better. (Just be careful with putting the permalink together. You'll know what I mean when you look at the table.) Anyway, I still don't understand why "re-doing the site with a blog themed like their old site" is incompatible with "keeping his site's layout, colors, fonts, etc". WordPress themes are extremely flexible. You could literally copy and paste the HTML for your header, footer, and other content into the appropriate theme files, and your client won't even notice a single pixel's difference.
Kohana is a great framework, but the documentation for Kohana3 is horrible. For example, [this page](http://kohanaframework.org/guide/about.mvc) is the third link from the top of the sidebar and it's supposed to tell you how MVC is done, but you know what, it's empty! I actually liked the Kohana2 documentation better.
I can't wait till Lithium matures a bit. Seems great so far, a stripped down cakePHP
5. is almost always caused by 4.
That's why I would never recommend it for a beginner: the documentation is all in the code (which is very clean and concise). I spent a half hour trying to find some documentation on one of the classes when I finally gave up and opened the damn file-- what do you know, it's commented and explained.
Yeah, I should probably mention that it's where my bias lies. I was on the CakePHP and now work on Lithium (docs, right now, mostly). Come over and help us - that's the best way to make it mature faster. ;)
I see you guys here complaining about Zend. I've been struggling myself learning this MVC however I think the certification is worth the effort. I think it would seperate me from the would be programmers out there.
Exactly. Kohana devs just seem to assume that comments in the code can stand in for online documentation. A rather bad assumption, _even if_ they think they're targeting experienced web programmers.
I would love to! I've been doing PHP professionally for a long time. But I don't know what I would have time for, got my normal job and a startup (in Cake). I definitely want to get involved somehow, though 
So the take away points are screw unit tests in the beginning and refactor later? A large part of unit tests is so you are able to refactor with confidence. As for the "screw-IDE" mentality, can emacs grey out unused variable declarations, auto complete variable/method names, auto skeleton inteface implementations and abstract methods, find usages of a variable and classify them by read or write references, autogen a PHPDoc method template, provide a pop up list of file names or class names as you type in realtime? And don't get me wrong, I am not familiar with emacs in the least but my impression was it's a scriptable text editor on steroids. If it can do all these things then party on w/ that. Of all of those I think one of the most important aspects is auto complete and unused reference highlighting. With a language like PHP it's all too easy to fat finger a variable or method name and waste time realizing you just misspelled what you meant. Granted it still can't auto compete or resolve everything but IntelliJ does an awesome job doing the best that is physically possible w/ a dynamically typed language. I have heard others speak well of Netbeans as well.
I guess the complexity of ZF gives him seizures...
After years or using CakePHP, Symphony, etc, I have come to prefer using my own "MVC" using a mis-mash or existing PHP libraries. I am currently using a combination of Smarty templating, Doctrine for the ORM a few utilities I have built over the years, and the result is an extremely powerful, super-flexible "MVC" if you may.
I will personally say F eclipse as an IDE in any language. I can't speak toward netbeans but have had heard good things about it. I use IntelliJ and will defend it's honor to the death. It's an IDE jack of all trades. While mostly focused on technologies surrounding java worlds it has amazing PHP support as well as HTML/CSS integration. 
It's not the language but the code. I submit that anything that you can write in any language I can write worse in any other language. For basic web site coding there's almost no distinction between the 'popular' languages other than preference. In the post you link I see a lot about stuff that depends on whether or not the installation of php was done correctly or not. How is that a negative? If you have a shitty install of any software you've got a shitty installation, all those points in my opinion are invalid which leaves a few very good points that you can draw in pretty much anything.
try Coda. it has the things you like about Eclipse but its presented in textmate fashion.
google cakePHP its basically a bunch of common methods ready at your disposal. learn your way around PHP first, then learn a framework. If you do it in that order things will make more sense and you will understand the framework better.
0) It's much like any other dynamically typed scripting language and bears no resemblence outside of syntax compared to statically typed and functional programming languages (yes I know 5.3 introduced lambda functions and closures) 1) Great for a sandbox to dick around on your flight, shitty for a production enviornment 2) Purely a matter of taste. Is this coming from a performance or readability perspective? If the former then let's all go spend our time making sure we replace our double quotes with single quotes in string literals. If the latter print &lt;&lt;&lt;EOF .... EOF works fine too. 3) Yeah, ok, so? 4) Listen to point #4 if you like to get off reinventing simple tasks that have already been automated and don't want to spend your time dealing with the real task at hand. 5) Part of the reason PHP gets a bad rap is it's too easy to make poor use of it. Why are you implying all free downloads equate to shitty code (not that I would defend the argument that a majority of them are) 6) This just seems ass backward. So, build your app largely in PHP then slip some java in? Shouldn't it be the other way around with java doing the heavy lifting? And Coldfusion? Seriously, that's still around? 
One of the best responses I've seen here. I would put an asterik next to your final bullet point to not take anything in the comments as dogma. There are some good things but then there are also some complete BS. Like most things on the internet, don't blindly accept them as truth. I would also expand point 3 &amp; OOP to use Type Hinting whenever possible for method parameters. It makes identifying errors so much faster and lends itself to better unit testing.
True, although I think their API documentation is decent once you know their code. It's bad that a lot of the good docs aren't from them, they're from other users.
&gt; Anyway, I still don't understand why "re-doing the site with a blog themed like their old site" is incompatible with "keeping his site's layout, colors, fonts, etc". WordPress themes are extremely flexible. You could literally copy and paste the HTML for your header, footer, and other content into the appropriate theme files, and your client won't even notice a single pixel's difference. If you say so... how easy is it to figure out for someone whos' totally new to WordPress? Their site has a completely table-based layout. Trying to update it would be a huge undertaking for the great benefit of having it look exactly the same, only being different under the hood. 
I don't have to do any ob_start() stuff?
To start consider PHP being a framework (it's not but follow my reasoning). It provides many built in functions for common tasks that will be faced when using this tool such as sorting arrays, url(en|de)coding things, etc. These are already invented for you so you don't have to waste time implementing them yourselves. Frameworks provide you the tools to complete the routine mundane tasks to more efficiently complete the large overall task at hand. They also provide you a documented template of their interface you get used to overtime so you learn it and don't have to spend time thinking how to build a table or map an object to it's underlying database tables. I will say sometimes they can be so abstracted they become overly inefficient for your use case. In the end they're another tool in your toolbox and experience teaches you which is the best tool for the job.
Are you Bobby Drop Tables? I believe the saying goes "Filter input, escape output"
Don't be afraid of e-commerce API's as they are a joke to work with. Knowledge and courage to stick with linux and keep using it. Knowledge of DNS/bind configurations. Good understanding of SQL Syntax. More Usage of memcache. A good editor. When I started out in 2001, most PHP editors were shit, now they are amazing. Keep finding new frameworks, try one, do a small project, then try the next and replicate your project until it starts to inspire some new growth.
You probably should be using netbeans then. It's not the bloated convoluted piece of crap that eclipse based IDE's are. I use it on mac everyday and it's extremely fast as long as you don't have thousands and thousands and thousands of files to be indexed. Keep it sub 1000 .php files and you are good.
There's not the best framework but the best framework for your use. I prefer **Symfony Framework**. Symfony 2 is not ready for production yet: the final release is planned for March 2011.
If it doesn't seem to be worth the effort, just install WordPress in a subdir, find a pretty theme for your client, and use a one-line SQL to pull the most recent post into the home page. There's nothing wrong with that. If you want to take a shot at customizing WordPress (which is a very useful skill for a PHP guy to have anyway), start with a minimalistic theme such as [this](http://jimbarraud.com/manifest/). Replace the stylesheet with your CSS, replace header.php and footer.php with your HTML, and tweak the rest until it looks right. Figure out [which file](http://codex.wordpress.org/Template_Hierarchy) is responsible for displaying which types of posts, and delete unnecessary files. - [Theme Development Documentation](http://codex.wordpress.org/Theme_Development) - [Functions](http://codex.wordpress.org/Function_Reference) - [Conditional Tags](http://codex.wordpress.org/Conditional_Tags) - [Template Tags](http://codex.wordpress.org/Template_Tags) Static pages can become WordPress "pages". If the page is so badly coded they can't survive WordPress's rich text editor, switch to plain HTML mode and just paste it in. If it really doesn't work or if you need some PHP logic inside the page, create a blank page, and add a conditional to the page.php file in your theme so that whenever that particular page is displayed, something else will happen. (You can put this "something else" in another file inside your theme folder, and include it.) After all, WordPress themes are just plain PHP files. 
sometime ago tried one http://www.tinymvc.com/ it's a simple one, but I like the clean, elegant programming style and also it's quite didactic IMO
Thanks so much for your knowledgeable input :)
This is quite a good summary. Would just like to mention that CakePHP 2.0 will be PHP5 (5.2+) only and that development is moving at quite a rapid pace.
Asking programmers what the best framework is is kinda like asking photographers what the best camera brand is, or asking what the best mobile OS is. Personally I use CakePHP. I've tried other frameworks but Cake was the one that I find fits my way of developing the best. I was recently at the 2010 CakePHP Conference in Chicago and the community behind CakePHP is amazing (Which is a large reason for me enjoying the framework so much). The only thing about CakePHP that I don't like is that the current stable version is php4 compatible. However, the team is working very hard on CakePHP 2 which will be almost 100% API compatible with the current version, but will have striped out all php4 compatibility 'hacks'. I'm almost always on the CakePHP channel at FreeNode (#cakephp), you're welcome to pop in and ask any questions.
good luck with bringing in additional developers for a larger project...
unit testing? that's a myth! you can't scare me.
mysqli_* has its use in simpler cases. mysql\_\*, however, gives you a great opportunity to shoot yourself in the foot. And writing your own wrapper for mysql\_\* doubles that.
Actually, Kohana3 has a userguide module that automatically converts code comments into [online documentation](http://kohanaframework.org/guide/api), therefore creating a personalized copy for each installation (depending on the modules you have installed).
The best php mvc framework is the one I'm writing now... It does exactly what I want and exactly how I want it. Most probably you'll hate it. As others have noted, the choice of framework is entirely a matter of needs &amp; style. But let me tell you why some of the most popular php frameworks aren't good enough for me: * Zend Framework: Too big. Well documented for simple stuff, but no official documentation for common combinations of simple stuff. (layout + modules + languages, anyone?). * CodeIgniter: Probably one of the least elegantly coded pieces of php. Major incompatibilities between minor versions. Perfect for small sites, horrible for anything bigger. * Kohana: v.3 is a completely different framework from v.2. No documentation. (they have a section in v.2 called "documentation" and a section in v.3 called "wiki" but that's about it) * CakePHP: I don't get it. Why bother with a copycat, and not go with Ruby on Rails? Mostly a toy. * Symfony: A little bit of ZendF, a little bit of CodeIgniter. * Solar: Not a framework. Why rewrite PEAR, when PEAR has so clearly failed us, is beyond me. * Lithium: Too early too tell. 
Thanks for the thought-out response. I'm always curious to see what others are considering in this area. (long polling with a traditional backend) I'm currently doing long polling with a PHP application, via lighty, to provide near-real time pushes a la Gmail. Each php-cgi instance uses about 15-25mb. I suspect this could be pared down significantly if I reduced the number of PHP modules being loaded, but honestly ram usage isn't our bottleneck (nor is this code performance sensitive on the level of those sort of gains) so I haven't given much thought to it. Have you looked at [HipHop](http://developers.facebook.com/blog/post/358)? Facebook engineers created it. In their words: &gt;HipHop is a source code transformer which transforms PHP source code into highly optimized C++ and then compiles it using g++. I'm going to check this out soon. I'm curious about the memory usage of the compiled processes via CGI, and also using their ability to be run as an httpd.
I would suggest Silverstripe. Technically its a CMS, but its a framework as well. Its all designed to work with MVC patterns in mind, you can build any kind of app with it, and its just nice to have a CMS to manage pages/database.
You can use the [google directions service](http://code.google.com/apis/maps/documentation/directions/) to get a route between two given points. Check the documentation and probably you will find everything you need. For an inverse lookup of postal codes you can check the [geocoding api](http://code.google.com/apis/maps/documentation/geocoding/)
nice! thanks. I'll update the code. Can you talk some more about this way of doing it, why it's better to do it statically? I would have produced an 'api' for overloading like your overloadMethod, I was just being lazy by using an array.
I've been working with PHP since there's been a PHP. Over the years I have loved it and hated it. I equate PHP to a retarded sibling: as much as you may love it, you know it's never going to be the fastest or most agile or most sexy language. It does some pretty dumb things that make no real sense, but you just accept these things by saying "Oh that's just PHP being PHP" in a mix of pride and shame. (Pride because you finally think you mastered all the PHP gotchas, shame because you choose to work in a language with so many arbitrary gotchas). You find it endearing when PHP uses design patterns that were never meant for the web (or nonstatically typed languages). Yet you press on. I believe that officially renaming PHP to Corky or Timmy is entirely appropriate. If you want the most bang for your buck, use Python. Sure, Ruby is cool, and RoR is great, but Ruby is not even remotely as entrenched in as many different areas as Python. But if you're still going to go to PHP, you should spend some time learning its internals. Profile it with a toolset like xdebug/kcachegrind. Also, use an IDE. Zend Studio is OK, but Netbeans does all that ZS can at a much better cost. &lt;/$0.02&gt; 
&gt; It's Ceases. Sorry but that one drives me nuts. Don't be sorry - I'm pedantic when it comes to spelling/grammar myself, but this one slipped past me.
&gt; I think it would seperate me from the would be programmers out there. See, that's the thing: The fact that using Zend Framework involves a lot of coding and uses advanced object oriented stuff might make people think that it's better because it's advanced. I've been doing PHP stuff professionally since 1999, and let me tell you, the older you get, the more you come to appreciate simplicity and getting things done. Less is more.
I would never ever use a framework that requires me to look inside the code for documentation. Here's why: Framework makers who document things properly on a web page show that they know how important documentation is - and furthermore, when you document things properly, you've made an effort to ensure that the API will stay the same for some time to come (otherwise you'd have to rewrite the docs often). There are a million frameworks out there, and trust me; the first sign that a framework sucks (or will suck in a few years) is that it's poorly documented or documented inside the code.
Or maybe, just maybe, his native language isn't English...
I don't think you'll need PHP, you just need javascript: http://code.google.com/apis/maps/documentation/javascript/
&gt; I'd also like to plug Kohana3 for when you want to get into some awesome OOP at the expense of backwards compatibility Just to be clear: With CodeIgniter you can easily use PHP 5 object stuff if you want to (e.g., I use public/protected/private methods in my controllers) - it's just not used internally in CodeIgniter.
15 - 25mb is quite a lot. Compare that to [Erlang Processes](http://www.erlang.org/doc/efficiency_guide/processes.html) where each new process takes up little over 600 bytes. For a thousand clients, PHP would use up between 15 and 25GB, whereas Erlang would consume around 1MB. Or maybe it needs twice, nay, 10 times that much for handling additional data, then you're looking at 10MB. Still worlds apart. I'm aware of HipHop, but I haven't used it yet. I suspect that their use case is not for long-polling. Facebook chat, for instance, is powered by [ejabberd](http://www.ejabberd.im/). I use [xhprof](http://mirror.facebook.net/facebook/xhprof/doc.html), though, which is another Facebook creation. You can also run [PHP on the JVM](http://www.caucho.com/resin-3.0/quercus/), if you really want to. ;-)
As a total amateur in PHP, I think that's a great site! Thanks for posting.
he does. next I'm gonna dip my balls in it.
I wouldn't throw "poorly documented" and "documented inside the code" into the same category. I haven't had a problem understanding any of the classes or methods once I dug into the code (or the API docs on the site, which mirror the code). I've also been using Kohana3 since ~3.0.2 and haven't had a problem with broken methods or classes, which can't be said about Kohana2 (even though its documentation is much friendlier). I shy away from making blanket statements about frameworks (or anything in general) because I'd hate to miss out on some awesome functionality just because I refused to play around with it instead of reading a tutorial.
Man, did you just use HTTP to post that? What is this, 1991?
No, Wordpress has what is called "The Loop". You don't need to know any details behind it, it's just basically saying "this is where I want Wordpress to show my posts".
I use [this](http://codexon.codepad.org/) to quickly test a piece of code. It's a pastebin that can also run code.
The thing that most frameworks fail at is sustainability under load. So be sure to use the Apache Benchmarker or siege to determine how many users per second a stock (non-cached) framework can support. Then repeat for cache. The results can be damning.
I like the social aspect of eXorithm though, and you can use it as a code library for yourself later on.
you're welcome :)
nice!
Code comments, no matter how comprehensive, are not a substitute for well-written documentation.
What debate? There is no debate. You don't need to include the closing PHP tag at the bottom of the file. Intentionally leaving it off also eliminates the chance of fluke whitespace screwing things up if you aren't using output buffering. Every argument mentioned in the article is absurd. The closing tag isn't really a tag, it's just a magic token that the PHP parser looks for. This isn't XML here, people. And when it *is* XML... well, if you're building XML with inline PHP, your entire situation is fucked. I'm so, so sorry that you're stuck with that mess.
Be sure to do this with non-trivial pages. Just printing "hello, world" doesn't count. Do something CRUDdy, and have all of them do it in the same way. This will also exercise any ORM or ORM-like features that each framework may bring to the table.
the Yii framework website did a comparison of their own (although, they may be a bit biased) [http://www.yiiframework.com/performance/](http://www.yiiframework.com/performance/)
Other frequently mentioned frameworks include [Lithium](http://lithify.me/) (which was going to be the new version of CakePHP before they forked), [Yii](http://www.yiiframework.com/), and [Solar](http://solarphp.com/). A big criteria, IMO, should be how much the framework requires you to use it's own components exclusively. For example, a lot of Symfony bits and pieces coexist well with Zend Framework components. Other framework have been known to force you to use their database and ORM adapters, to the exclusion of all others.
I would touch on: - Security: does the framework promote best-practices or provide tools? - Database: do you have to change your DB structure for the framework to properly use it? - Documentation: how easy is it to figure out how to achieve specific functionality? What type of project are you comparing these frameworks for? Knowing what you are trying to accomplish can help narrow down the wide field of PHP frameworks to compare.
Exactly. I tend to use it just out of habit but then again I've only ever encountered one of those whitespace flukes in my professional career.
You definitly want to store it statically for both time and space optimization. * A class is the definition of objects. * Method are function binded to those objects * Properties are variables bounded to those objects. * Static methods are functions that are meant to be used with of by those objects. * You can consider static properties to be properties of the class definitions. Thus, they aren’t reinstatiated each time a new object it created. With your method, the overloading setup takes place everytime an object is created and it is stored in an array into each of those objects. With my method, the setup is static and the storage is also. When \_\_call() is triggered, it searches into the static array that has already been defined if that class has already been used. *** A word about late static binding: Suppose you have class Foo { static function foo() { self::$bar; //does’t exists static::$bar //exists only if foo was called like that: Bar::foo(); } } class Bar extends Foo { static $bar; } * The self scope is used to call a method/property within the class that the calling function is defined. * The static scope is used to call a method/property within the class (or its ancestor if it’s not there first) that the calling function is called. Does that answer your questions?
wow it's articles like this that explain why is constantly PHP going down hill, some of the suggestions he posted are ridiculous. why can't we just leave off the end tag and call it a day? what harm does that cause? everyone's trying to think of a better solution to the problem when one doesn't need to exist.
Code Igniter, Kohana, Zend things to mention(ontop of your list): 1. Security(xss, sql injection, etc) 2. speed(as in how much does framework slow down site performance) 3. specific features which aid in development, like ORM libraries and such
Well I've done some research. Tried codeigniter for a while then zend. Codeigniter is easy to learn but the fact that it doesn't have php 5 support turns me off. I would use it for small projects but big companies, from what I've read, use Zend. So i guess if you're shooting for enterprise level programming go for Zend.
i've used zend studio 5 &amp; 6, aptana 1 1.5, netbeans and phpstorm. Zend is slow and clunky, aptana was good until they dropped php support. Netbeans i really enjoyed but I didn't like how it was formatting HTML and finally phpstorm is what i'm using now and it's been working great so far.
I personally close every PHP file. It feels like opening a fridge, grabbing the milk, but never closing it. I also pay special attention to removing end-of-file whitespace. But a lot of PHP devs don't due to inexperience/lack of knowledge/laziness.
zzzzzz
Examine lock-in. If you develop on the framework, then down the line decide it doesn't suit your needs, how feasible will it be to switch? Will you have to start from scratch, or will you be able to lift out the business logic and drop it in a new framework? 
Some fridges close themselves if you leave them open, and they tend not to make the human mistake of leaving the door 1/2 inch open from time to time.
Any HTML should be in separate template files anyway, the rest of the project being 100% PHP. And if you have 100+ files in several directories, you don't want to find out which of them is responsible for the stray %20. I just pretend that the opening PHP tag is a shebang or something. This prevents the inner OCD in me from seeing them as tags in need of closing.
So in your book, everyone is equal to less than a percent of the userbase.
Please also compare the quality of the online documentation. Some are absolutely fantastic, others are virtually nonexistent.
Ugh, I don't disagree with this guy's arguments, but the concept feels like fingernails on a chalkboard to me. 
.. and don't forget [json.decode](http://php.net/manual/en/function.json-decode.php) 
Solr, Lucene, Sphinx, any big search engine like that. Besides being faster, it's better experience. Your MySQL search-every-table technique will always be a hack. It won't help you get a job, and it won't help build something that handles any real volume. It won't even be fun in a few months when you're trying to maintain it. 
i'm only implying those who develop the php language(aka not those of us who develop IN php) are getting opinions like this and most likely listening to them, which can explain some of the more horrible things that are done. like.... \ for name space separators, or their wonderful ability to have absolutely no standard for naming functions/classes/interfaces, like str_replace(), strtotime(), and ArrayAccess.
I say "who cares" if you want to close it then close it, if not then don't. That's the beauty of PHP. This is totally going to turn into a big vs little endian thing if it hasn't already.
What do you mean it doesn't have PHP 5 support? The stuff I write with CodeIgniter I write in PHP 5 on servers that run PHP 5. The fact that Code Igniter itself is written in PHP 4 doesn't make a difference. Zend Framework might be a good option if your project involves 10 programmers over a course of six months or more. Anything less, and I'd go with a smaller framework.
&gt;due to inexperience/lack of knowledge/laziness Or, you know, not doing something that's unnecessary...
First, the naming convention fuckup is mostly an old one, since it's in the core of php it's still seen everywhere but everything developped in the last few years is much better. As in, they actually have some sort of guideline now. Should they change the old names and break every legacy app out there for the sake of a cleaner language ? That is up for debate, my opinion is that yes they should do it but at the same time in 2010 with any half-decent editor providing help of functions names and parameters orders it isn't much of a problem (and if you use them a lot, you end up knowing them). Second, every language has basically the same proportion of stupid ideas being given by some of its user who really think they know what they talk about (but they really don't). I'm pretty sure even C++ has its number of idiots lobbying for crappy code becoming standard. That doesn't mean the dev listen to them, and same for the php dev. Again, don't just assume from what you know from php's reputation, just look at where the dev have moved the language in the recent years (the namespace separator is a very specific case, while it made little syntactic reason and kind of sucked it was pretty much that or having an even slower lexer, they worked with what they had). PHP has a lot of issues, and while I love it because it gets the job done I also hate it for being irrational more often than not. But saying that it "is constantly [...] going down hill" is really not knowing the evolution of the language in the past years. 2010's PHP may still suck quite a lot, it's nonetheless a thousand times better than 200x's PHP. Any good php programmer working in a team environnement don't close his tags, because there is absolutly no reason to do so. Those who do are either working mostly solo, or not knowing they can leave it out, or ignorant like the guy who made this blog post (who apparently believes the php tags are like xml tags).
It's through experience and gaining knowledge that I've learned to *omit* the closing tag. The closing tag is a token that tells the parser to switch modes from interpreting code to writing outputting straight to buffer. Why would you do that if you are not planning out outputting anything?
Well, my programmatic side of my brain tells me the following is correct: &lt;?php //blah blah ?&gt; &lt;-- CLOSED! All because the following is correct: if($something == "ur mom") { //blah blah } &lt;-- CLOSED!
What he said. There's no debate.
Hi, didn't know it existed till I saw your post. Quick research seems to suggest it's lightweight so I'm going to give it a go. Thanks.
The fact that PHP even requires an opening tag is incidental to its templating origins. The PHP interpreter defaults to "output mode" every time a file is opened. If you look at a language like Ruby (just Rails maybe?) they use .rb to imply strictly Ruby code, and .rhtml to imply Ruby embedded in HTML. The file extension determines how the Ruby is parsed, and the result is an absence of messy opening tags in every single source file. PS: Not a Ruby evangalist; in fact, I've never even used it.
There is nothing wrong with \\ as a namespace separator. However, yes, the core library is a mess that will probably never be fixed. The PHP maintainers are a bunch of 40+ retro coders that don't know what's good for the language. A prime example is their stance that ANTHING to do with variable typing is bad, because it goes against their "typeless" philosophy. So we end up going to great lengths to immitate useful features (like method signature overloading) that have been brought up and shot down time and time again. And it's not an issue of "if you don't like it, fix it" because people have actually made patches for these things and they've been denied or removed from the trunk. &lt;/rant&gt;
Think of it like this: &lt;?php == #!/usr/local/bin/php 
Previous posts: [1](http://www.reddit.com/r/webdev/comments/dcvp4/anyone_try_out_php_on_pie_yet/) and [2](http://www.reddit.com/r/PHP/comments/ddl2z/crossposted_from_rwebdev_anyone_try_out_php_on/).
\ is escape in every language including php except for php name spacing 
I don't follow php's development that closely maybe I should start 
But they're used in entirely different contexts. Other languages use + for string concatenation _and_ addition, but they're used in different contexts, so it's okay. Parenthesis and curly braces are used for function definitions and control structures, but it's okay because those are different contexts. They considered a [number of options](http://wiki.php.net/rfc/namespaceseparator), and \\ came out on top. Of the available options, I agree it was the best choice.
If you're not using prepared statements I'd make the move to either PDO, MySQLi or a custom DAL like Zend_Db, with preference to PDO. Prepared statements seem like a long way round to do things but will eliminate SQL injections and it's a bit nicer than generating SQL strings. Either way ext/mysqli should be used over ext/mysql for performance and for the fact it uses prepared statements. If I were developing a new app I'd use PDO as I tend to go from SQLite during development to MySQL or PostgreSQL if the site has a fair bit of data.
TLDR
Switching to PDO is definitely worth it, even if your only goal is to prevent SQL injection attacks. Especially if this is an application that you'll need to keep maintaining. PDO also has other advantages, such as the ability to switch to a different database with minimal effort (as rmas said, SQLite or PostgreSQL). This is one reason I prefer PDO to MySQLi. The latter is still locked to one database.
Your problem probably has nothing to do with PHP. You're just using a very very bad algorithm for choosing the recipes, a very very slow random number generator, or both.
Ah, namespaces. I've never really used fXML, but maybe I can get you started on the right path. Every xpath API is a little different. DOMXPath is built into PHP and really easy to use if you're not tied down to fXML. Anyway, to use most xpath APIs, you have to register the namespace you're using. In this case: `pair`. It looks like with fXML, you'd use `addCustomPrefix('pair','a:big:ass:prefix:pair')` to register the namespace. Then, to get the node, you'd simple use `xpath('//pair:WidgetFullName')` (or `xpath('//pair:WidgetFullName/text()')` if you just wanted the text). Does that get you started?
If you're running mysql turn on slow query logging. Use mysqldumpslow to analyze the logs. If there's a bottle neck in talking to the DB it will be pretty obvious there. 
Yes! Thank you!
Quality of the community. How easy is it to get some help from other framework users? How long does it take on average to get a question answered? This could vary greatly between novices and experts, so maybe have two ratings here.
Anyone know of a php console that uses lazy evaluation? All requests in my application have some common variables, like getRequest(), getRequestUser() etc. and I would like to be able to do: &gt;getRequestUser() =User variables: [a=1,b=2,...], functions: [getAccount(), getUsername(),...] Then clicking on getAccount() would run: &gt;getRequestUser()-&gt;getAccount() =Account variables: [x=9,y=10,...]
Well, heres how it's broken down: I have multiple arrays of integers that make up categories such as "lunch 1" "lunch 2" "snack", etc. I use rand() to pick one recipe from each array to fill the slots. Then I look at several different categories - matching against 20 different nutrient categories that must meet a % threshold of RDI, calories must be between 2 values, as do fats, carbs, protein and such. Also price has to to right. I calculate all these values before I ever even get to the loop where it randomly chooses things. The cost per serving and all nutrient info are defined into arrays when the page loads, and then it starts cranking through the combinations. Is there a quicker method to chose 8 random recipes than using rand()? 
It's not the mysql, I only use mysql initially to load all the recipe info into memory, I don't actually look up any info in the loop.
There is likely an explanation sitting in a logfile now. Check your apache error log. You might also fire up xdebug to look for the bottleneck in your php.
Some suggestions: - Use profiling to find out which part of the calculation is taking the longest. - Some people say that [mt\_rand](http://www.php.net/manual/en/function.mt-rand.php) is faster than rand. Try it out yourself. But I don't think it should matter a lot, unless you're literally reading from /dev/random in a blocking fashion. - If any part of your code uses nested for/foreach loops with hundreds of thousands of possibilities, that's probably your culprit. For example, if you have 20 possible lunches and 20 possible snacks and 20 possible dinners and 20 possible drinks, that's easily 160,000 possible combinations. Also, looping over large arrays in PHP is a slow operation. Find a way to narrow your options before you even start crunching the numbers.
Not your big problem, but you have three image 404's on that page that should be fixed. They tend to tax the server quite a bit. Probably need to see a little sample code to really do any troubleshooting. You seem to have a lot of moving parts, so its tough to visualize without seeing some of the method. If you are calculating parameters before you pick recipes, you might be better off checking params, then pulling a random recipe(s) from from mysql that fit those parameters. Again, it's tough to say without seeing a bit how the algorithm works. Regarding oop, it won't help your speed. OOP is good to use, but tends to be slower than procedural code.
&gt; I read all the recipe info into memory (this is a small amount really, a few hundred integer values) into arrays, and then pick randomly from there.... The problem is that if your constraints are too tight you could be picking combination for ever. Think about it - picking from 100 possibilities 8 times leads to 10 ^ 8 = 10,000,000,000,000,000 combinations of meals. What are the chences you'll randomly pick the best one? A better system would be progressively build a menu, and check how good it is after each step: * Create a function rate_plan(array $meals). It should return a score rating a partial plan from 1 to 100. Do this by looking at how many items there are, and how close they get you to your target. E.g. array(Meal A, Meal B, Meal C, Meal D) should give close to 50% of the daily total of each vitamin, too high or too low should result in a worse score. * Keep a list of your plan in `$plan` and all meals in `$meals`. * For each $meal in $meals call `$rating = rate_plan(array_merge($plan, array($meal)))`. This will tell you how good your plan would be if you added this meal to it. * See which meal gives you the highest rating (if there are a some which are equally good, pick one at random) and add it to `$plan`. * Do this until you have eight items in `$plan`. To get the best results you could branch at each step, and choose a few less good meals early on that could lead to a better solution later. If you really want to get tricky you could use a path finding algorithm, like A*. 
I've been looking for something like this, a way to calculate how to have 100% daily nutrients. Maybe you can leech off of wolframalpha.com.
I've been using Eclipse PDT and Netbeans for years, but bought phpStorm yesterday when my 45-day trial period came to an end. PhpStorm is fast and focused on PHP. If I need to switch between PHP and Java|Python|whatever then I prefer Netbeans over Eclipse. However, both Eclipse and Netbeans are really intended for Java programmers and PHP is a second class citizen. Most of their features for formatting, refactoring, code completion, etc are either disabled or incomplete once you switch to coding in PHP, but everything is there in phpStorm. I use it on both Ubuntu and Windows and chose different themes to match each OS so I have no complaints about its appearance.
These are the ones that haven't been benchmarked that much. * Solar - a new promising player * Symfony - just to see how old generation compares to the new one * Symfony 2 (although it's still in development) - the new thing * Lithium - A new player. * Kohana - self explanatory * PHP On Pie - a new player. 
Hell yes, PDO is awesome. Make sure you are using prepared statements. I'd also consider using exceptions: `$pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);` Exceptions are so much sexier than returning stuff all the time. IIRC MySQLi is a *tiny* bit faster, but if you're building your application well, it wouldn't matter. Also its syntax for binding thing is fucking stupid.
Thanks!
Thank you! I did.
Build a timer (I have a PHP object specific for this) and set it to record how long each section of the algorithm takes and echo the results out at the end. You'll probably find one segment taking up most of the time. Then, work on how to speed that part up.
**Myths** in the PHP community: 1. Using prepared statements is the only way to prevent SQL injection attacks. 2. PDO is the only option if you want to use placeholders such as "?" or ":1" in your SQL string (those will then be replaced by the escaped contents of a specified variable) **Facts:** 1. Using \''.mysqli_real_escape_string($var).'\' is just as efficient as prepared statements securitywise. Also, [the main point about prepared statements isn't security](http://www.reddit.com/r/PHP/comments/dremy/is_it_worth_it_converting_my_whole_dal_to_use_pdo/c12ddh4) (this can be achieved in other ways), so you should only use prepared statements if you understand the purpose. 2. Many database abstraction layers (I might even say *most* database abstraction layers) offer placeholders. [Here's an example from CodeIgniter's db abstraction layer](http://codeigniter.com/user_guide/database/queries.html) (see the "Query Bindings" section at the bottom of the page). EDIT: I don't use mysqli_real_escape_string myself - that's too much typing - I use a db abstraction layer with placeholders. So my point isn't that OP should continue to use the mysql or mysqli functions - my point is that security and placeholders are a part of most if not all database abstraction layers, and you should only use prepared statements if you need to run the same query over and over again (with different variables) in the same script run.
&gt; Make sure you are using prepared statements. Prepared statements are mostly useful for when you need to execute the same query over and over again with different variables. This is mostly something you'd do in an INSERT operation (and only in those INSERT operations where you're actually repeating a query). If you're using prepared statements solely to prevent SQL injection attacks, you're writing too much code and making slow pages (remember, with prepared statements there are two queries instead of one).
Profile with Xdebug. Analyze with Wincachegrind/Kcachegrind. That will tell you _exactly_ what is taking so much.
It doesn't matter if it's slower. It's marginal. The overhead of an extra query is pretty much nothing. The fact of the matter is that prepared statements are foolproof and take care of protecting you from sql injection. If you don't use them, I'm going to assume you're using a custom solution, which **would almost definitely be slower** in the first place. 
&gt; The fact of the matter is that prepared statements are foolproof and take care of protecting you from sql injection. So do the rest of the abstraction layers. &gt; If you don't use them, I'm going to assume you're using a custom &gt; solution, which would almost definitely be slower in the first place. That depends on what abstraction layer you're using. Some are heavy, some aren't.
mysqli\_real\_escape\_string is not foolproof. Consider this query: `$result = "SELECT fields FROM table WHERE id = ".mysql_real_escape_string($_POST['id']);` However, if you did that in PDO, it would be foolproof. It's worth it if only for it being something else you don't have to worry about.
Did you notice I quoted the $var **and** used realescapestring? That's safe.
I noticed that, but I just wanted to point out that it's not as idiot proof as PDO is. I guess my problem here is that PDO does all of this for you, while if you use the `mysql_*` functions you have to either be careful and verbose, or make an abstraction yourself. Placeholders makes your code very clean. Assuming you're not using prepared statements, you're going to have to do something like this: $param1 = mysqli_escape_string($param1); $param2 = mysqli_escape_string($param2); $query = "SELECT * FROM users WHERE name = '$param1' AND age = '$param2'"; ..which is ugly and cumbersome, or you're going to have to write your own parameter find-and-replace library which is probably going to be slow (multiple string searches and you'd have to make sure the `?` isn't in a literal string). Even if you do plan on doing all this, I don't see why you just wouldn't use PDO anyways. You can escape stuff with [PDO::quote](http://us3.php.net/manual/en/pdo.quote.php), and you can do non-prepared queries with [exec](http://us3.php.net/manual/en/pdo.exec.php) and [query](http://us3.php.net/manual/en/pdo.query.php). You're getting the best of both worlds, and you're doing it with a more modern and flexible library.
But like I said in another comment, I don't use realescapestring - I use different db abstraction layers with placeholders and automatic quoting and escaping of the data that's inserted into the SQL string. Again: My point is not that everyone should be using realescapestring - that's just too much typing. My point is that people should understand what the purpose of prepared statements is and that it's possible to have security and placeholders without the added typing and db overhead that comes with using PDO.
I've never actually heard myths 1 and 2-- I've only heard it's *easier* to use PDO's prepared statements than writing your own abstraction layer (essentially reinventing the wheel when PHP 5.1 comes with PDO by default). Now if you want to, that's cool, but it would be a good idea to go with a tried-and-tested method like PDO instead of implementing some custom abstraction. Or hell, just use a framework that implements it for you (like CI).
Most would simply type cast id to an int.
Lets be realistic here. Those "at least" 2 days are going to be 10 days. And then you're going to finds bugs for a good while as well. I'm not saying you shouldn't use PDO, but is it really worth spending so much time converting code which already works? If you want to use PDO then great, but do so in future code not in your current code.
I'm not advocating for custom-made abstraction layers, per se - I'm advocating checking out the numerous other abstraction layers out there that offer placeholders and security without requiring extra SQL calls and extra typing. &gt; Or hell, just use a framework that implements it for you (like CI). That is exactly the kind of good db abstraction layer I'm talking about.
High performance is only one of the many things a good framework needs.
Can't upvote this enough. Documentation is essential.
Or one could just use XHProf and not have to change ones source code.
Ah, I was under the impression you were advocating a custom abstraction layer. My apologies.
I was waiting for that. But look at ASP.
You could have if((($x-1) % 9) == 0) on line 3. What else would you like to do?
Actually that was the line I was struggling with. Outside of creating a variable for columns that is all that was needed to make it truly dynamic. Thanks for the tip!
&gt; Using \''.mysqli_real_escape_string($var).'\' is just as efficient as prepared statements securitywise. Your failure to escape this post's data correctly does not inspire confidence.
&gt; Prepared statements are mostly useful for when you need to execute the same query over and over again with different variables. Yes, such as any webpage that gets viewed more than once in its existence. Do you actually have any clue what you're talking about? Prepared statement execution plans are cached in any RDBMS worth using. Ad-hoc SQL strings will crap all over that cache.
Edit: Minor cleanups. Full solution. &lt;?php /* * This is the configuration ($columns) and your "model" (the $numbers). */ $columns = 9; $numbers = range(1, 50); // your numbers. /* * The following is display logic (aka the view), you'll want to keep that separate. * It's also good practice to be in "html mode" and only PHP as necessary. * Also note I'm using short tags. E.g. "&lt;?=" vs "&lt;?php echo". It's neater IMHO. Change it as necessary. * WARNING: I'm not escaping output, this is dangerous. Use htmlentities() / htmlspecialchars() * to escape all variables output in order to prevent XSS. */ ?&gt; &lt;table&gt; &lt;?php foreach (array_chunk($numbers, $columns) as $chunk): ?&gt; &lt;tr&gt; &lt;?php foreach ($chunk as $number): ?&gt; &lt;td&gt; &lt;label&gt; &lt;?= $number ?&gt; &lt;input type="text" size="2" class="scores" name="score_&lt;?= $number ?&gt;" /&gt; &lt;/label&gt; &lt;/td&gt; &lt;?php endforeach ?&gt; &lt;?php if ($missingCols = ($columns - count($chunk))): ?&gt; &lt;?= str_repeat('&lt;td&gt;&lt;/td&gt;', $missingCols) ?&gt; &lt;?php endif ?&gt; &lt;/tr&gt; &lt;?php endforeach ?&gt; &lt;/table&gt;
With mysqlnd there should be no significant performance difference between any of the mysql APIs any more. I agree there's no excuse for using ext/mysql in this day and age though.
Thank you *so* much for reminding people to use the PHP alternative syntax if they're dealing with views composed mostly of HTML and little PHP. It's a ton better, people.
put ; after you endforeach; and endif;
dont mix php and html!!!ASKDf;lkasfjlk;asfa
This still doesn't solve UTF-8 attacks!!! It's been proven that mysql\_real\_escape\_string() is **inherently unsafe**. Anyone who uses it in 2010 is a noob. End of discussion. EDIT: See this for corroborating support: http://stackoverflow.com/questions/2353666/php-is-mysql-real-escape-string-sufficient-for-cleaning-user-input
YES IT IS WORTH IT!
Reddit is home to PHP noobs. What more do you expect?
You can, but it's optional; the closing PHP tag ends the expression implicitly.
Thank you for this. I am actively learning MVC (Code Igniter) for another large project, so this makes sense to me. I also like how your code handles the missing cells for proper HTML validation.
Well, that assumes you have a persistent connection. Prepared statements die with the connection.
I expect constructive criticism/help and not worthless banter such as your comment.
Hmm, I thought the `real` version of that fixed that, since it actually checks the character set? I'm not sure on this though, because mysql is about as terrible as not using PDO.
TIL
You must not have bills to pay then...
Could you be more specific? What I wrote was an example in which the string delimiter for the entire string is a single quote. As far as the fact that underscores disappear from the function name goes: That's what Reddit's commenting system does.
&gt; Do you actually have any clue what you're talking about? It's a complex issue, because up until MySQL 5 prepared statements weren't cached. In MySQL 5 it seems like they're only cached for the script run (["a prepared statement is specific to the session in which it was created"](http://dev.mysql.com/doc/refman/5.0/en/sql-syntax-prepared-statements.html)) - unless you set cachePrepStmts to true. Correct me if I'm wrong on this, but it seems like caching of prepared statements across script runs is not enabled by default.
&gt; &lt;?php endforeach ?&gt; &lt;?php if ($missingCols = ($columns - count($chunk))): ?&gt; &lt;?= str_repeat('&lt;td&gt;&lt;/td&gt;', $missingCols) ?&gt; &lt;?php endif ?&gt; Why repeat in and out of PHP tags if you aren't doing any HTML output in between?
MSSQL is a definitely a worthwhile database, although it's not very popular among PHP users. It doesn't cache execution plans at all, even for prepared statements.
You are correct, GP is wrong.
I built a function around something like this. Would take columns, rows and then column width and style. Your $columns would be array('foo' =&gt; 'Bar','bar' =&gt; 'Foo'); which would create a header row, then $rows would be a 2 dimensional array the first dimension be each row, the second consisting of the same 'foo' =&gt; 'Value','bar' =&gt; 'Value' Then you would simply loop through the rows, looping through the columns each time and applying width and style values as needed. also you can apply an alternating class to give a nice 2 tone row effect. The important bit: foreach($rows as $row){ $row_class = 'row_'.(($c % 2)+1); echo '&lt;tr&gt;'; foreach(array_keys($columns) as $key){ $style = $style[$key]; $style .=';width'.$width; echo '&lt;td class="'.$row_class.'" style="'.$style.'"&gt;'.$row[$key].'&lt;/td&gt;'; } $count++; echo '&lt;/tr&gt;'; } 
For clarity. Could also have just written: &lt;?= str_repeat('&lt;td&gt;&lt;/td&gt;', $columns - count($chunk)) ?&gt; which returns an empty string if the multiplier is 0.
&gt; As far as the fact that underscores disappear from the function name goes: That's what Reddit's commenting system does. You mean mysql\_real\_escape\_string()?
Took the ZCE for free and was surprised to fail it. That being said, I wasn't very impressed with the knowledge they expected of me. 1. Parameter orders. Wouldn't be a big deal if PHP had a bit more consistency... (needle, haystack... haystack, needle, ahh!) It's still not a big deal with an IDE or php.net/functionName and I don't think it's a practical measure of a programmer's worth. 2. Database questions. Completely inappropriate ones. "Max size of a varchar field?" Boo! No database specified, and it doesn't belong on a ZCE test anyways. 3. PHP 4 vs PHP 5 object-oriented inconsistencies. These questions required some intimate knowledge of PHP, but I was frustrated to be tested on the older PHP 4 platform that I had never used. This was almost three years ago as well, there are other links in this thread that indicate the test has been much improved recently and perhaps doesn't include any PHP 4 questions whatsoever.
Doesn't work for me; but anyway: flussence's claim is that my code is insecure, and I'd still like an explanation to that, because I don't think it is.
I thought his claim was just that if you didn't understand how escaping works in Reddit, you may not be trusted to discuss it in other contexts. Seems a weak argument overall, but his premise about not understanding it in Reddit appears to hold up.
He's not capturing with those Regex patterns, but if he was you could run them through preg\_match\_all and inspect the contents of &amp;$matches to see what went wrong. Edit: Escaped special Reddit chars..
&gt; Seems a weak argument overall And it is. I've programmed PHP professionally for 11 years and only used Reddit for a short time (and never had to write function names). The fact that I don't know how to use Reddit's commenting code doesn't mean that I don't know how to use PHP. And besides, isn't it about time Reddit moves into the 21st century and uses TinyMCE or a similar editor instead of asking people to learn stupid codes?
He's not using anything complicated in that Regex. Sub-pattern modifiers, character classes and quantifiers are all listed on the PHP Regex cheatsheet.
I'd suggest looking into Subversion(svn) or Git(git). You'll find more tutorials and support online for svn, but git is sort of the new hotness on the block.
I had never seen `?=` before then... That's all. 
git has a tiny bit of a learning curve, but once you get over that curve it's amazingly easy to setup. You literally have to perform one command to add a repo to an existing project: git init The GUI options are a little weak, IMO, but do exist. The best I've seen on the mac is the [Brotherbard fork of GitX](http://github.com/brotherbard/gitx). I've heard Windows users sing praises of TortoiseGit and SmartGit. SVN has virtually no learning curve, but requires setting up a repo server.
Oh my god. How can I not have known about `array_chunk`? That is my new function of the day!
So, git can be run off of my local machine, without having to set up a separate machine to keep track, right? As for SVN, by "repo server" do you mean something that's totally dedicated to being a repository only, or can it simpyl have SVN installed on it and run concurrently with the main LAMP?
I use subversion as well also in a mostly single developer situation and I've never ran into any trouble with it other than merging. But once you find [svnmerge.py](http://www.orcaware.com/svn/wiki/Svnmerge.py) it's not really an issue. I've also used git the couple times I've worked on GitHub projects. Worked well enough and it's definitely the "new hotness" of version control, but I never took the time to really get as familiar with it as I am SVN. I think for multiple developer projects, it's more advanced branching/merging capabilities would be very helpful, but for a one-man show it's not as big of a deal. Regardless of which VCS you choose, from the sounds of what you're trying to tackle, I would recommend learning about branching your code. That way you can have your refactor/cleanup branch and you can still make other, more day-to-day changes right on trunk and not worry about getting them mixed together. Takes a little bit of getting used to, but once you do it's awesome. At my job, we can sometimes have 5 different projects running around at the same time, applying changes to the same codebase (same files even). Without branching, it would just be a nightmare to try and keep things up-to-date (ie when project 1 goes into production, now I need to make sure all those changes go into the other open projects). But with branching and svnmerge.py, it's a breeze. 
That's correct, you install git on any machine you plan to use it on.
I can heartily recommend [fossil](http://fossil-scm.org). It's a distributed system like git, but it integrates a wiki and bug-tracker into the client. The whole fossil website runs from fossil itself. It's main problem (for some, me included) is a lack of integration. None of the major IDEs support it, and there isn't a shell extension yet either. If you can live without direct IDE support, it's a great little system.
subversion
I second Mercurial (Hg). I use Netbeans as well, and its integration is great. You'll want to install [TortoiseHg](http://tortoisehg.bitbucket.org/), which makes Hg dead-simple to use. Everything is through a GUI when working locally. I also host the repo on [Bitbucket](http://bitbucket.org) which is now free.
 svnadmin create /home/user/repository/project_name And in the folder of your code. svn checkout file:///home/user/repository/project_name . Include all files: svn st | awk '{print $2}' | xargs svn add And initial commit: svn commit -m "Initial commit of the project"
Correct, git requires no other system. An svn repo just requires some sort of server source, it doesn't have to be on another computer. There is an svn service that takes connections itself and can be done over ssh, or it can be run within apache via a module. Apache is by far the easier of the two, imo. I've run svn repos on my local machine before using this method.
Was once with that whole GBK encoding bug. As I remember that was fixed.
Indeed. But then you'll most likely end up with code just as verbose as how one normally does checks. It's a valid method, of course, just think the intention of the blog post was to save complicated checks.
I love SVN but at this point everyone is recommending DVCS systems so there's no point in learning a system that isn't best practice. So go with git or bzr or mercurial or whatever. Git seems to be the most commonly used DVCS at the moment. I'm migrating all my projects from svn to git or bzr but will likely standardize on git (though I prefer bzr). Also, if you're not familiar with github.com you should check it out. Lots of projects hosted there. It's not hard to go between different types of DVCS systems. A bit harder to switch from svn (or moreso CVS) to a DVCS. 
&gt; So, git can be run off of my local machine, without having to set up a separate machine to keep track, right? Yep - which is a feature insofar as it's great for travel, offline work, etc. That said, you would do well to pay a few bucks a month to GitHub or one of their relatives for hosting, or figure out how to host a remote copy of your repo somewhere else you trust. Redundancy is sanity.
A lot of people are saying that you need a server to run SVN, but that's not true. Both git and svn can be run purely locally, with all of their "magic" being handled by plain old files (in the .git directory in the case of git, and in the .svn directory in the case of svn). See [this comment](http://www.reddit.com/r/PHP/comments/drsyc/setting_up_repositoryversioning_system_for_newbie/c12f8bc) for how to run SVN without an actual server.
Ubuntu Maverick, with Apache and MySQL/PostgreSQL running on localhost. projectname.dev resolves to 127.0.0.1 using /etc/hosts. Editor of choice: [Geany](http://www.geany.org/). A nearly perfect replacement for Notepad++, super lightweight, and more pleasant IMO than gedit or bluefish. Version control system of choice: git. All of the above runs inside VirtualBox. Host machine is Win 7 Pro 64bit, where I run non-free programs such as MS Office and Photoshop. (Trying seriously to like OpenOffice and GIMP, but no success so far.) Another VM runs Windows XP, for an authentic IE6 experience.
I'll have to remember Geany. Bluefish has lots of potential, but everything else seems either not enough features or too bloated. 
I don't have a lot of time on my hands lately with college and two of my computers failing. But I said I would so I wanted to give you something. Here Is what I have done and I think it's a good start almost finished. Just needs a few links here and there. http://pastebin.com/F5NvYYYk
vim+screen on *bsd with lighttpd+mysql on top of vmware ESXi.
Mercurial all the way. Git is nice but Mercurial is much easier to get going IMO. First, read the [HgInit](http://hginit.com/) tutorials. If you're a command line guy then you can use the raw commands, however, if you're a GUI type of person then I personally recommend [TortoiseHG](http://tortoisehg.bitbucket.org/). Now, you can go ahead and try to set yourself up with your own Mercurial server but it can sometimes be a pain in the ass (I've done it myself.. and integrated it with Trac.. and on Windows server.. it was an awful experience) so there are some hosted options out there. You can go with something like [BitBucket](http://bitbucket.org/) or something like [Kiln](http://www.fogcreek.com/kiln/). If you really want to host it yourself then do so on a Linux server. Don't make the same mistake that I did. However, you'll also probably want some sort of bug tracking solution which I recommend [Trac](http://trac.edgewall.org/) for its simplicity. It also integrates nicely with Mercurial. If you aren't experienced with configuring servers though then go for the hosted options.
I don't belong here but I saw the words "weapon of choice" so I'll leave this [here](http://www.youtube.com/watch?v=aZbckwYY9r4). 
I was in your situation. My advice is to just jump in. I use subversion. It will feel awkward at first, but you will soon feel fluent with it. I work on the command line, so it's a little different, but I understand there are many IDEs that have version control integration. And the most important new habit to get into is to make branches when you're trying something or implementing a new feature, and then merge them into your trunk. Every so often I think, "Oh, I can just do this in trunk" and then I end up reverting the trunk back a few versions. 
I completely love PHPStorm. I've used (at various times) Komodo, Aptana, Eclipse, PhpEd, Zend Studio, Geany, and PHPStorm wins on every metric of measurement I have. Except maybe the fonts--java's fonts always look ugly to me in linux compared to native GTK or Qt applications. I can live with it though--and given that Zend Studio, Aptana, and Eclipse are also java apps, PHPEd can only be run through Wine, and Komodo is (for me) INCREDIBLY slow..
MacBook Pro running OSX 10.6, connected to two external 23" monitors, giving me functionally three screens. Apache 2, PHP 5.2 and MySQL 5.1 installed from MacPorts. I have an /Apache folder on my root that holds all my current projects. Each folder is mapped to a virtualhost. It's extremely easy to maintain once it's setup, and is always running when I need it. Adding a new project means editing my vhosts.conf and /etc/hosts files, both of which are symlinked to /Apache for easy access, and then issuing an apache restart from the terminal. As far as development software: - TextMate for all code work - Acorn for simple image editing - Adobe apps for more complex stuff, mostly Fireworks - virtualbox for IE testing, with a VM for each version of IE. - Cornerstone for SVN - GitX for git I do all my functional development in Safari, holding off on my testing until the site is functionally complete at the end of a project's first phase of development. 98% of the time if it works in Safari it'll work in Firefox and Chrome as well, and I've learned what tricks &amp; nitpicks IE has so I can usually avoid the worst issues.
Geany looks great I'm going to give it a try. I've been looking for something to replace Notepad++, not that the problems I'm having with Notepad++ are big ones but a lot of little things are adding up.
Christopher Walken is my muse.
Work: Ubuntu before: NetBeans now: SlickEdit Home: Windows 7 before: EditPlus now: SlickEdit For the Win7 setup, I'm deciding between XAMPP, WAMP, or running Ubuntu inside a VM. Thoughts?
It's mostly a matter of personal preference. I use Git, but have heard great things about Mercurial. I used SVN prior to Git and didn't have any issues with it, just find Git a little faster/easier to use. Again, most personal taste, I think.
Similar to yours... MacBook Pro with 10.6. BBEdit for editing, Adobe stuff for images. However I configured Apache on the laptop to use mod\_vhost\_alias, and I set up a wildcard domain pointing to 127.0.0.1 (and another to the machine's static IP on my LAN) for development purposes, so all I have to do to start a new site is make a new folder. It automatically gets a URL like http://foldername.dev.mydomain.com that works immediately. No need to edit any configuration files or restart Apache.
Wow, are you me? That's pretty much me to the hilt. I will use zend studio, netbeans or another ide if I need to profile or step through a complex application. I also use SQLyog as my mysql gui. I also use winmerge and tortoisesvn quite a bit. I assume you use apache virtual hosts in concert with modifying the hosts file?
&gt; It's also good practice to be in "html mode" and only PHP as necessary. Why? I'd say exactly the opposite, because it makes it much easier to follow program flow. HTML code is only a tiny percentage of the text in almost any file in any serious project. In your code example, the program flow is heavily obscured by HTML indentation, which is really unimportant in the source (use tidy post-processing if you want nice-looking HTML). And of course &lt;?= isn't guaranteed to work and is never a good idea.
Running for my os Windows 7. I use it because Windows 7 runs well as an OS. (plus it allows me to run my games.) I use Komodo Edit for code editing, because we used Komodo IDE when I was in school and it works well. (Has all the little things you'd expect in an IDE.) I'll also use VIM for quick edits.
Why don't you try to manually set up Apache + PHP + your database of choice on Windows? I honestly never used complete packages like XAMPP or WAMP but I think you have more control if you are installing each thing separately.
I'll try to sum it up: * Right now I use Apache (httpd) 2.2, PHP 5.3 and PostgreSQL 9.0 running on Windows 7 * As an IDE I use NetBeans 6.9.1 mainly because of its auto-complete features (it can even suggest CSS class names) and because I found an awesome dark theme for it! I also make use of Notepad++ with the Zenburn theme for quick edits. * I chose to use Mercurial as a version control system since it integrates very nicely with NetBeans. * For database administration I use pgAdmin which installs along with PostgreSQL. * Firebug is god-sent for manipulating the DOM or CSS for quick and dirty mock-ups. * Photoshop for interface designing and image manipulations * Xdebug for profiling * I use some scripts to minify my JavaScript ([Google Closure Compiler](http://code.google.com/p/closure-compiler/)) and CSS files ([YUI Compressor](http://developer.yahoo.com/yui/compressor/)).
I wasn't aware that was possible, I'll have to look into that. It sounds way easier to work with, tho I'd probably make it http://foldername.localhost
Tools: * Windows 7 * WAMP / XAMPP for PHP / Apache / MySQL install * phpMyAdmin for MySQL interface. It's horrible but comes packaged with the above. * TortoiseSVN / TortoiseGit and command line Git for version control. Still prefer SVN. * Xdebug for debugging / profilling. * Netbeans for IDE (so glad to be rid of the crashiness that is Eclipse) * Notepad++ for scratchpad / general editor. Project layout: * One folder per project. Each has a sub-directors called "www". * [Apache virtual hosts](http://joshduck.com/blog/2010/07/13/dynamically-define-subdomains-with-apache/) to map www folders to subdomain (projects/some-project/www is accessible at some-project.hexxie.com). * Hexxie as a loopback host (anything.hexxie.com resolves to 127.0.0.1).
I used textpad for years, but when I got a mac I moved over to Komodo, which is really good - code completion! They have support for other OSes too.
+1 for postgres, I made the switch a few weeks ago. Was a little rough to start out but I can already tell its far superior to mysql.
Personally, I think they're better. Reading how the core dev's code is written can teach you a lot.
That might be true, but I can honestly tell you that Kohana doesn't suck. It's sick.
 $ git init $ git add . $ git commit -m "Getting Started" There, now you have version control. Good luck with your new job.
* MacBook Pro 13" * 24" screen * Running 10.5.8 * MAMP is always running * Editing w/ Coda * Graphics w/ CS4. * VMWare with XP for browser testing 
* Macbook Pro 15" * iMac 27" in target display mode * OS X.6 * Textmate + less.js * Terminal * Mercurial for SCM/deployment * Stock Apache2/PHP 5.3 with a few extensions * Mysql 5 / MongoDB (brew) * Adobe CS4 (Photoshop/Flash)
Mainly because I remember it being a pain in the ass last time I did it, and I don't have the time to play around with httpd.conf for hours. 
&gt; I'd say exactly the opposite, because it makes it much easier to follow program flow. HTML code is only a tiny percentage of the text in almost any file in any serious project. In any serious project the HTML code should be in the view, and only in the view. The rest of the files would be PHP only, and shouldn't contain HTML at all. Even if you're not doing [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) and only have individual PHP files with includes, it's a good idea to segment that file for the sake of [separation of concerns](http://en.wikipedia.org/wiki/Separation_of_concerns). The snippet I posted is essential the display logic, view script, or what some folks consider to be the view _template_. Even in something like Wordpress the themes consist of mostly HTML with PHP calls inlined. In larger teams you might be dealing with web designers who have an in-depth understanding of image design, HTML, and CSS, but little experience with PHP. Proper HTML indentation is to make the file more readable for them, inlined PHP should be as concise and isolated as possible, with more complex display logic encapsulated in view helpers. What the final fully rendered HTML looks like is completely irrelevant. &lt;?= is guaranteed to work if you know and control your environment, otherwise you can make all kinds of observations of what might or might not work per potential php.ini settings. If you ever needed to switch to "&lt;?php echo", a simple string replacement in all files (e.g. using _sed_) can do that in one line.
Where do I sign?
So what does this have to do with beer?
Windows 7 64-bit Dreamweaver CS3 Custom build of Apache 2/PHP 5.3.3/MySQL 5.1 running on localhost Production server is a linode 720 instance running debian. 
Yay! Beer!
I use a Win7 box primarily, though I maintain several other boxen for cross-testing. I use ConTEXT for editing, except for c/c++, where I use MSVS, and for ActionScript, where I am screwed into using Eclipse. I use Photoshop (legal, gtfo) and IconWorkshop for most of my graphics needs. I used to use Sony Acid and Sony Vegas for production toolchains, but since they recently screwed me out of an enormous amount of money, I'm looking at jumping ship.
How can I get in on this? I'm a senior cs undergrad and would definitely be interested. What kind of things will be covered?
I am he as you are he as you are me and we are all together.
Mercurial for sure. We just implemented it and none of us had any experience with version control, quite easy and fast to set up. Integrates very well with Netbeans
Nothing really... :)
So why is free beer in your title?
Exactly. I do a lot of 50/50 work with designers and they appreciate the CODE HERE - HTML THERE approach.
Does that follow convention?
Anything you like. It depends really on what you already know about html, css and the web in general...
The inbuilt MySQL functions **are** faster than the PDO object. IF portability is an issue, then I would say that he should use the PDO object. However, MySQLi offers prepared statements and if he's not building a system that is going to be used on different databases, then I see absolutely no reason why he should switch up.
Here actually... 
"Think free as in free speech, not free beer." - Stallman
Then why did you say beer? &gt;**[offer] Free introduction to PHP** If that is what you are offering then why complicate it with beer when, as you said, it has nothing to do with beer? 
Why not just Name.php? To my mind, that ".class.php" thing is simply noise. If you are worried about keeping object-oriented and procedural code separated, putting it in separate directories is a solution too, perhaps even a cleaner one. Not to mention it complies with [PSR-0](http://groups.google.com/group/php-standards/web/psr-0-final-proposal) as well.
are you particularly looking for beginners? I've been doing procedural stuff for a while but I've been out of the loop for some time and I've become decidedly rusty. I would very much appreciate the guidance of a greater mind.
The common directory structure I've seen lately has been / (project root) /classes/ (holds all of the classes in your Project namespace, sometimes named libs instead) Author.php (holds class definition for Project\Author Book.php Genre.php Publisher.php Genre/ (holds all classes in the Project\Genre namespace) Fiction.php (holds class definition for Project\Genre\Fiction) NonFiction.php Fiction/ Mystery.php SciFi.php NonFiction/ History.php /configs/ (configuration files) /views/ (template files) /docs/ (documentation) If you use a structure like this, there's absolutely no benefit to naming your files .class.php. Personally I think it's stupid-- some kids probably did an Intro to Java tutorial and figured "herp derp, this should have a .class extension!"
Hi, I'm interested. I'm from Romania and I'm about to graduate a Computer Science Faculty
Never mix PHP and html. EVER! Use the [alternate syntax](http://php.net/manual/en/control-structures.alternative-syntax.php) Do not: &lt;ul&gt; &lt;?php foreach( $array as $item ) { echo "&lt;li&gt;&lt;a href=\"" . $item['link'] . "\"&gt;" . $item['text'] . "&lt;/a&gt;&lt;/li&gt;"; } ?&gt; &lt;/ul&gt; Do: &lt;ul&gt; &lt;?php foreach( $array as $item ): ?&gt; &lt;li&gt;&lt;a href="&lt;?php echo $item['link'] ?&gt;"&gt;&lt;?php echo $item['text'] ?&gt;&lt;/a&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;/ul&gt;
Disagree. My preference: &lt;?php echo '&lt;ul&gt;'; foreach ($in as $item) { echo "&lt;li&gt;&lt;a href=\"{$item['link']}\"&gt;&lt;/li&gt;"; } echo '&lt;/ul&gt;'; ?&gt;
"I heard that" is virtually never sound advice. If you can't explain why it matters, don't suggest it.
No, no, no, that is so ugly. I don't really see no reason to clutter your file names with a .class.php extension. As a matter of fact, I won't even look at code using that convention. Stick to a convention where class names and namespaces directly map to the file system path. \Project\Component\ClassName =&gt; *lib*/Project/Component/ClassName.php
Why is this? I see this popping up recently and hadn't really heard not to do it when I first started messing with PHP. I'm just curious why this is a big deal?
&gt; In any serious project the HTML code should be in the view, and only in the view. The rest of the files would be PHP only, and shouldn't contain HTML at all. 1) This never happens. 2) Look again at the code you posted. Practicing what you preach? &gt; The snippet I posted is essential the display logic, view script, or what some folks consider to be the view template. In any real world scenario more elaborate than a yoga studio's homepage I think you'd be crazy to waste so much time pounding out HTML tags. &gt; Even in something like Wordpress the themes consist of mostly HTML with PHP calls inlined. Wordpress is a travesty. Anyone who takes their lead from that blighted farrago of spaghetti code and cargo cult programming is headed for a hard fall sooner or later. &gt; In larger teams you might be dealing with web designers who have an in-depth understanding of image design, HTML, and CSS, but little experience with PHP. In larger teams you have someone who sufficiently understands both sides (which isn't much) doing template integration. The only file with any substantial amount of HTML is the master page template. The remaining HTML is generated programmatically, string literals inserted by your il8n mechanism and constructions like tables and form fields assembled by your methods in your preproc classes. Otherwise you will never get enough delineation between view and controller to justify the effort of separating them in the first place. &gt; &lt;?= is guaranteed to work if you know and control your environmen Sure, and if I know and control my environment I can say I'm guaranteed to have 2TB of RAM per process too. Fact is, whether you are deploying to third-party CDN servers, or your client has rigid policies governing server configuration, or you are distributing your software for use by the public, or any of a myriad other situations, you don't want to be relying on settings that aren't guaranteed to be in place - particularly when the only justification is to satisfy an anachronistic affect. The idea that jamming potentially thousands of files through sed sounds even vaguely sensible to you just goes to show how little you've thought this through.
I use myversioncontrol.com . Free svn
Readablility and html is properly highlighted for your editor of choice
may god have mercy on your soul.
I think most people will have a problem with this as the convention is to separate your logic and representation. So you'll have a file that fetches data, sorts it appropriately and another that places the data into HTML. In that case you're not going to want a file full of echo statements.
At first I did have beginners in mind... Now, I don't know :)
In projects with other people I've gone through class\_name.php, name.class.php, name.extends\_name.class.php to finally Name.php. It's pained me the whole way, since I don't have files that just contain functions (aside from a bootstrap). Using namespaces with directories makes everything a bit more sane too.
Because beer works with everything. 
Hey everyone, since there seems to be a lot of you interested, would it be better if we turned this into an [University of Reddit](http://www.reddit.com/r/UniversityofReddit/) course? 
Yes, both MySQL and MySQLi are faster than PDO, because PDO is an abtraction layer. The speed difference in most cases, however, is marginal. [This benchmark from 2006](http://dealnews.com/developers/php-mysql.html) claims that PDO is slow, while [a more recent benchmark](http://jonathanrobson.me/2010/06/mysqli-vs-pdo-benchmarks) claims that PDO is not slow at all. YMMV. If you're already using MySQLi, there's no point converting to PDO unless you want portability. But if you're using old-fashioned procedural MySQL, either MySQLi or PDO would be a reasonable step forward.
I was just going to suggest this. Yes. But the course syllabus should be decided in this thread.
If you are going to do a ureddit course, I'd like to see it cover interaction with a database and setting up something like a user registration system for something like a message board (something with comments) with the ability to upload photos for profile pictures, etc. Also maybe something like voting. Hell you could even do a simple php based reddit (albiet super simple), but a practical applied tutorial like this would help way more than "this is a variable, these are control structures, these are functions, etc..." Also, if you could even do an advanced OOP based PHP course, I would be very interested in that.
If you are going to offer a bit of conventional advice, you best back up your claim with a reasoning behind doing it your preferred way. EDIT: And not downvote me, since I'm curious to see why you suggested your method.
If this is your own website and you're not distributing with compatability in mind I find this looks a lot better: &lt;ul&gt; &lt;? foreach($array as $item) { ?&gt; &lt;li&gt;&lt;a href="&lt;?=$item['link']?&gt;"&gt;&lt;?=$item['text']?&gt;&lt;/a&gt;&lt;/li&gt; &lt;? } ?&gt; &lt;/ul&gt; I do understand why you use alternate syntax though depending on how well your IDE works.
actually i'm working with sphinx right now... 
Using Linux (Ubuntu but the distribution is mostly irrelevant). * Editor consists of mostly *Emacs, with scss-mode, and occasionally Vim* for minor edits * *The GIMP* for any graphic needs, but can reboot and use *Photoshop* if necessary * Projects are stored under a single folder, using their domain as a name, each project folder contains an htdocs folder, logs folder, third-party, and an nginx.conf at this stage * A *deployment script* in the form of a [Makefile](http://github.com/ZaneA/BDSM) sits at the root of the projects folder, this can be used to create projects (from a skeleton), backup projects, and deploy projects to various machines. Projects all sit under their own git repositories which are tagged when deployed, etc * Localhost is running *nginx, php in fastcgi mode, and MySQL* + whatever else is needed, everything can be accessed with simple urls * Production server (at this stage), is a 512 Linode, with a similar setup to my local setup, so deployments become really simple, and consist mainly of rsyncing files to the production server, and then linking in the nginx config + reloading nginx * Also have a script that will tell Firefox to reload the current tab (keeping scroll position) that runs when a file is changed under a project directory. This uses *MozREPL* The end result of this is being able to perform edits comfortably in Emacs/Vim, saving then reloads the page in the browser, and when I'm happy with what I've got I can run "make deploy site=mysite.com server=production" and see the changes pushed to the live site :)
Simple php reddit is a fantastic idea, thanks. I'll start the course sometime tomorrow and anounce it here.
I think I remember [this](http://www.reddit.com/r/PHP/comments/dfoq2/need_some_advice_mysql/)... What kind of patterns? Age, height, hair color, etc. would be easy to implement and definitely useful, but the way your search function works should meet the actual needs of the family/friends/support groups of missing persons. It might be worth doing some actual research, like talking with some of these groups to find out what features they're looking for. Another idea. This might be one of those applications that benefits from some sort of centralization. It's going to be difficult finding information about a missing person if dozens of similar websites each keep their own databases. So think: Who are the administrators? Who are the users? Who is going to be entering data into whose database, and who is going to be performing most of the searches?
i dont rely on IDEs. If youre going to talk about compatability you shouldnt use shorttags, they are deprecated in php 6
I didnt think i had to back it up, i thought it was obvious. But the reason is readability, maintainability, syntax highlighting, and its just prettier =)
yeah, this is terrible.
Well, let me know when you decide :)
Well thanks, I'm just so used to blending it now out of habit.
If you use proper OOP and rely on autoloading, nearly every file is going to have one and only one class in it (except index.php, config.php, etc. and your templates). Therefore, name.class.php is redundant.
Do not close your PHP tag (?&gt;) unless it's a template file.
there is no php 6.
this is news to me =), well then i hear they will be deprecated in an upcoming version, who knows though. If you dont want to risk it you can use the long version.
Use copious and consistent amounts of whitespace.
Why are you still claiming that it is a risk? This is FUD, two seconds with the documentation can confirm this feature is not anywhere close to being depreciated. http://php.net/manual/en/ini.core.php
For the record, interpolating PHP and HTML causes serious performance problems due to the very high cost of the context change, and should never be done in large loops. Also, the alternate syntax is an unreadable train wreck. PHP mixed with HTML is a bitch to maintain too. Use a fucking presentation framework.
What do you most like about.
They reversed the decision on shorttags about a year ago (I didn't hear about it either until recently). I still don't use them, however, simply because by default they're turned off.
I didn't realize so many editors couldn't tell the difference, textmate handles php inside html perfectly.
Being able to put PHP code inside HTML is the entire reason I use PHP. You should absolutely keep your business logic separate from your presentation code, but being able to intermix normal code within your html is a fundamental feature of the language. To tell someone that they should never use that feature is just bullheaded.
I do class.name.php, function.name.php, interface.name.php, etc. I like it, anyways.
The context change is really that big an overhead? Doesn't the HTML just get compiled into an "echo" equivalent and run just as fast? I'm assuming opcode caches are being used. "Using a fucking presentation framework" I would agree with though.
some systems break with an extra line after closing tag! "?&gt; " should be "?&gt;"
Solution: Do not use closing tags at the end of the file, and consider output buffering.
i know the solution i hate the fact that i actually get scripts handed to me like that.
You're misunderstanding my point. Im saying by all means have php and html in the same file/line of code, but do it the right way. Echoing html is wrong, there are better ways to do it, every good php developer will tell you this...guaranteed.
You talk about a high cost of a php to html change??? Do you have anythign to back this up? If anythign using a "presentation framework" would be even more expensive and is useless conisdering thats what php is. Anythign you can do in smarty or whatever i can do in native php without the extra overhead of teh framework.
http://www.reddit.com/help/reddiquette That's not what the downvote button is for.
Remember some people may not want to be found
What's the reasoning for this? I've never heard this before.
Oh, yes, I did misunderstand your point. I thought you were focusing on the use of brackets and standard syntax.
One reason is that if you accidentally put any whitespace after the ?&gt; tag (be it a newline, tab or space) it can corrupt the output of your app (by adding, say, a newline at the beginning of an xml document that is being generated).
I don't know why but this was extremely unexpected and totally hilarious.
No the opposite html inside php text strings 
I would be interest in this. I just picked up two PHP books today actually. [Book1](http://www.amazon.com/PHP-Absolute-Beginners-Jason-Lengstorf/dp/1430224738/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1287286977&amp;sr=8-1), [Book2](http://www.amazon.com/Beginning-PHP-MySQL-Novice-Professional/dp/1590598628/ref=sr_1_2?ie=UTF8&amp;s=books&amp;qid=1287287106&amp;sr=1-2). I am a graphic designer and I have HTML and CSS skills.
Wow thanks for all the great ideas guys! Can't wait for my next day off to try some of them out...
Well I think i eliminated most of the problem with efficiency, I do all the calculations once when the page loads as far as loading up arrays with all the info I need, then its just really one loop that randomly picks 8 menu items using something along the lines of: x = breakfastItemOneArray[rand(20)]; for each of the 8 slots, then just does some simple math with info already stored in memory at page load such as nutrient info, serving size, etc. I'm going to try inserting some timers and see where it really is going wrong.
* *True* full text search * one storage engine * sequences * consistent data type naming It does take some getting use to it, if all you know is Mysql some of it will be very foreign to you. 
Well, what's the problem? I mean seriously, not even a single comment? Well, I know that this is the internet, but I must have done something terribly wrong too. Does the readme stink so majestically that nobody has understood what all this thing is actually for? Could I have some suggestions on it then? Have I failed to focus on the most important things, like explaining what monkey patching actually is? Perhaps [the Wikipedia article that I'm linking to](http://en.wikipedia.org/wiki/Monkey_patch) is too vague? Should I give that one up and explain it all myself? Also, should I leave out all that "Advanced Usage" stuff and put it in the wiki instead? Well, please tell me, because there is no other way to make it better!
To me, those reasons (readability, maintainability, and prettiness) are exactly why one should NOT use the "alternate syntax" but stick to normal &lt;?php echo "&lt;p&gt;Whatever&lt;/p&gt;"; more code(); echo "&lt;p&gt;Whatever else&lt;/p&gt;"; ?&gt; Unless you are doing some trivial thing where the volume of HTML significantly exceeds the volume of PHP, in which case who cares anyway, it makes more sense to have programs look like programs and not like Cold Fusion tag soup.
The people who are downvoting you are writing trivial little scripts with almost no PHP code in them.
In that case you should have a file full of calls that build your code so you don't have to go in and fart around with all the HTML later. &lt;?php $t = new Table('template1'); $t-&gt;add_row($some_data); echo $t; ?&gt;
Somehow, you seem to have missed out on the key rhetorical device used for decades to explain the nuances of the word "free" in the phrase "free software". I don't know how that happened, but blaming yrizos for it is probably not the most constructive response.
How is that different? Oh yeah, it's not.
Use PDO and PostgreSQL.
Ha, no.. I had a quick look through the code and it looks like a really nice project and well implemented, just hadn't had a chance to try it out properly yet. 
Personally I don't like one class per file. Usually organise stuff into modules, based on namespacing. So I'll have something like this: http://github.com/radiosilence/core/blob/master/core/session/remote_storage/pdo.php It's weirdly pythonic (I like python, I make my PHP code conform to PEP8 fairly well), but is consistent and works well. I dislike the implicity of autoloading. I think arguments about the specific naming structure are pointless, as long as you are consistent and logical that's all that counts.
So we can use `&lt;?=$blah?&gt;` now? Fucking awesome!! I can understand the need to move away from `&lt;? code blah?&gt;` but the `&lt;?=$shit?&gt;` syntax always seemed like a fantastic idea for templates.
Surely if your classes are in a `classes/blah/blah.class.php`, the class in the file is redundant? Directory structures exist for a reason.
What's wrong with echoing HTML?
Yeah, this is when I started with PHP about 3 years ago and it was all the rage to have .inc.php and .class.php suffixes.
I personally don't like builders like that, I like having direct control over the markup. Odd that I get downvotes though, it's the way pretty much every PHP framework does it.
&gt; I like having direct control over the markup. The problem is that it just doesn't scale. When you have tables being drawn in 500 places and the client's legal department decides that they all need to have some new widget tomorrow morning, you'll go insane trying to chase them all down.
And mix not thine tabs with spaces.
Ever use a WYSIWG editor? Probably not if consider such code "normal". Tag soup is indicative of a much larger architectural failure. I've written enough code-blobs to know that mixing HTML, SQL &amp; PHP is a recipe for disaster. Embedding PHP in HTML should be relegated solely to your presentation layer and therefore kept to a minimum. 99.9% of your program's business logic should be accomplished *before* rendering. Indirect HTML output is a performance hog, not to mention a blatant disregard for good practice. Facet after facet of the web platform is needlessly complex, why work against the grain and make it harder for yourself?
Aye, I remember the tirade of `blah2.tpl.inc.php.20030104.dave.bak~` files, before people had discovered SCM.
Context changes are typically the most ignored performance bottleneck in PHP applications. You won't notice it in smaller apps - but those microseconds add up in large loops.
While any framework MAY mean more overhead, implementing a presentation layer is one of the best decisions a developer can make. Typically this enables HTML'ers who are devoid of any real programming ability to easily modify the "look and feel" of the front-end, therein freeing back-end developers from said task. This introduces a "separation of roles" which translates to long-term maintainability and general efficacy. Also, a lot of PHP presentation frameworks use native PHP in their templates - no Smarty necessary. Don't get me wrong, Smarty's great. Though Smarty, like interpolating HTML and PHP, represents a context change and therefore another performance bottleneck.
That's what I do. Whoever designed the default SPL autoloader to only accept lowercase filenames needs to be abandoned in the middle of a large desert.
Avoid `private` in favour of `protected`. The former allows only the class's methods to access it, while the latter allows child classes to access it also. (That said, use `private` where it makes sense, but know the difference.)
Follow the conventions set by the framework you are using. If you are not using a framework then follow the Zend Framework conventions. They are pretty decent.
In PHP 5.3+, the best solution is to simply name your file after your class in a directory that is identical to your namespace. Use PHP's built-in C++ optimized auto-loader([spl\_autoload\_register](http://us3.php.net/manual/en/function.spl-autoload-register.php)) and do NOT implement a custom callback - the performance is abysmal.
what does this have to do with beer?
or modifying a http header after a single misplaced space initiates output.
The [ternary operator](http://en.wikipedia.org/wiki/Ternary_operation), found that one out a couple years into using php. Useful in a lot of situations and saves you from writing a lot of if statements.
Some quick points from that linked post: * [Sphinx SQL Search](http://sphinxsearch.com/) is a great SQL search daemon. * [Solr Search Server](http://lucene.apache.org/solr/features.html) is an alternative to using Sphinx. * If you hate the fact that MySQL only uses one index, check out [PostgreSQL](http://www.postgresql.org/) as a database alternative.
For one it's confusing, hard to correctly read at a glance and it's much easier to type. 
Will also break the syntax highlighter/syntax checker of most (if not all) IDEs.
There's nothing wrong with it if you can sort it out yourself. Other might have trouble reading it etc
Please, for God's sake, use only ONE echo or print statement ! In other words, chain a $content variable along and return it when you are done filling it. That way, one of your last statements in your main() or your index.php is the print of the $content which by now has all of the content. That way, when you want to add a cookie further down the road, you can't do so from anywhere since no content has been printed yet. Or if you decide to make a text version, you can strip all of the HTML tags, etc...
Validating/sanitizing their goddamn input. Also, tabs instead of spaces.
The standard way of differentiating between two key senses of the word "free": * free as in beer * free as in speech The former refers to not costing money (free beer). The latter refers to not impeding one's rights (free speech). When someone says something is "free", you don't always know what they mean. When they say "free as in beer", you do.
No, I don't eat raw meat of any kind, thank you sir.
If I were you I would user Mercurial. It is a lot easier to use than SVN and I have set it up so that each clone pushes and pulls to a parent. So we start out with Testing then that gets cloned to Staging and then that gets cloned to Development. From development you can clone it as many times as you want to each individual developer (when it is not just only you). Once you are satisfied with development push it to Staging, once Staging is secure push it to Testing, Once Testing is approved then you can take that code and push it to production however you see fit. I used to have SVN doing all this but SVN didn't allow me to clone where necessary to fork (hg incoming). This is how I do it and the best part of all of this that you can clone a individual developers repository to a web directory and then clone one to their local desktop. On each changegroup made you can tell it to update it's webroot with the most latest code just in case you cannot setup a local AMP stack.
 &gt; That way, when you want to add a cookie further down the road, you can't do so from anywhere since no content has been printed yet. Doesn't PHP default to using output buffering?
&lt;?php $ul = new TagBuilder('ul'); foreach($array as $item) { $li = $ul-&gt;li(); $link = $li-&gt;a($item['text']); $link-&gt;href = $item['link']; } echo $ul; Oh course, this is all up the individual 
Yes there is! ;)
eventually after a while of developing you'll begin to see the benefits
&gt; Use eclipse/netbeans. "Open declaration" will save so much time and effort. apt-get install exuberant-ctags
 /application /models /{model name}.php /views /{view}.{ext} /controllers /{controller}.php Is there really any need to add "class" to those file names?
The issue is that PHP is a template language. The learning curve for a loop in smarty is going to be the same as a learning curve for a loop in php.
This. It's so much easier for a front-end person (maybe with limited PHP knowledge) to template and when you are going in between html and php it's a lot easier to read, as long as you remember to keep indentation consistent. Do this inside a class file I'll hunt you down and shoot you (with a water gun maybe). EDIT: That's not, how commas, work.
It makes it harder to read and validate the html
[http://stackoverflow.com/questions/129677/whats-the-best-method-for-sanitizing-user-input-with-php/130323#130323](http://stackoverflow.com/questions/129677/whats-the-best-method-for-sanitizing-user-input-with-php/130323#130323) this link describes how i feel about this
So where do I get the free beer?
yeah! **controller.php** $model = new model; $data = model-&gt;getStuff; require('view.php'); **view.php** &lt;ul&gt; &lt;?php foreach( $data as $item ): ?&gt; &lt;li&gt;&lt;a href="&lt;?php echo $item['link'] ?&gt;"&gt;&lt;?php echo $item['text'] ?&gt;&lt;/a&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;/ul&gt; if your frontend person cant understand this then you need a new frontend person 
This assumes you are using a certain framework...
This assumes you plan your application before you write a 9999 line index.php of ifs and echos. If you aren't using a "framework" Cod help you.
On the front end, it act like any missing persons website, except that it will allow people to carry out advanced searches based on age, height, hair color etc (something that a lot of missing persons websites lack). I expect the administrators to be charities, social bodies and maybe even law enforcement agencies. I'll give them the tools to create patterns that the application will search for whenever a new person is added. So, if 5 people of the same gender go missing from a certain area and are all within a few years of age, then it will be picked up on straight away if a pattern has been made to search for it. There will also be analysis tools and graphs etc that will give vital statistics on the fly. 
The context switching only becomes problematic if you are doing it in multiple files across multiple includes. You can have as many context switches as you want within the same file; the tokenization is only performed once per file. The cost of adding an unneeded ?&gt; at the end of a PHP block is identical to what you're mentioning here. There is a trivial cost involved with shifting the contents of the buffer retroactively to accommodate the output of the eval'd php blocks, but that is only an issue with very slow machines or machines under heavy load, and even then it can easily be rectified by opcode caching and/or output buffering.
You should record the lessons you do and either edit and release it for a more general audience or just release the source stuff for someone else to do that.
I'm going to copy-paste my standard response to this because I don't feel like typing it out _again_. = I'm not sure why people are so dead-set on separating their PHP from their HTML. With Smarty, you're still effectively mixing the two, you're just using a different syntax (which of course adds overhead!). Yes, you should strive to separate presentation logic from business logic, but separating PHP from HTML is just going to force you to hack together work-arounds since you will inevitably need logic in your templates. Some people say it should be kept simple so that your designer can work with it... I don't know about you, but I wouldn't let a designer anywhere near template files. He can photoshop and slice all he wants, but leave any sort of logic (aka programming) to the developers.
Even if it does, it doesn't allow you to manipulate the output. 
I'm not sure it defaults to it, but it's definitely a better idea to use output buffering than concatenate together all of your output. In fact, you should concatenate as little as possible. Benchmarks have shown this... echo 'I have ',$num,' apples.'; .. to be faster than this... echo 'I have '.$num.' apples.'; ... simply because the string doesn't have to be concatenated before being sent to the output buffer. Of course, it's a completely negligible performance increase.
I'm not sure why you'd want to manipulate the output, but if you really have to, you can use ob\_get\_clean() instead of ob\_end\_flush().
A few I can think of: - **Don't use short tags** - I love short tags, and they make template files infinitely more readable. However, because the PHP maintainers are retarded, they're being deprecated and phased out in PHP 6. If you want forward-compatibility, avoid them. - **Avoid singletons** - this is really more of an OO theology in general, but I see a _lot_ of singleton use in PHP. It's bad for two reasons: **a) it becomes impossible to instantiate multiple instances of a class**. Whatever reason you have to only want one instance, there is always a situation in which you might want two. You shouldn't have to rewrite or refactor your code just to allow you to do something OO allows you to do from the start. **b) it is often used for its global-ness**. I think this is probably the main reason people do it. It makes instances global so you don't have to pass them around to the functions/methods that use them. The result is: function output is not always consistent with input, because it depends on an outside source. This makes it a nightmare to debug and test. The only thing I can justify globalizing is something that communicates with a resource outside of your PHP, and does _not_ affect the rest of your code. Examples that come to mind include a database connection, an autoloader, and a configuration reader which need to communicate with the database server, filesystem, and filesystem respectively. For these cases, **use static methods and members** and **do not do it in away that prohibits opening multiple database connections**.
But like I said, by default PHP has shorttags disabled, so if you write anything you expect to distribute you should probably avoid it. We've been bit before when a customer migrated their site off our system onto a new server and everything broke.
Representation goes in CSS and XSLT. Reminder: [The downvote button is not for disagreement](http://www.reddit.com/help/reddiquette).
I know. :(
This would be funny if it wasn't so true
Do you have any grounds for claiming that it's terrible? It's more compact, it's easier to read, it's easier to maintain, and it gets a lot further from mixed syntax, which was what you wanted, than you yourself did. I honestly get the impression that you just said that because someone had a different opinion than you. Reminder: [The downvote button is not for disagreement](http://www.reddit.com/help/reddiquette).
Every PHP developer should be proficient at PeRL.
After a while? 12 years later, no. This kind of code is where you're combining view logic with binding. After working with some other languages, you'll understand they are equivalent and both sloppy. It was supposed to illustrate how NOT to mix HTML and PHP and it completely failed to do that.
http://framework.zend.com/manual/en/zend.acl.introduction.html
Aye, well it's only useful in templates so when writing a framework this isn't really an issue.
I've used [uFlex](http://sourceforge.net/projects/uflex/) before, it hasn't got a massive array of features, but all the important ones are there. It works reliably, and it's all in one class, so you can easily extend it if you need.
No, spaces instead of tabs!
If you're looking for something with a lot of room for you to add your own features yet having some really good standard features, I've used [phpUserClass](http://phpuserclass.com) with success in the past.
let me know if you have any questions. Already one tonido user has created a pmwiki app for Tonido: *http://www.tonido.com/forum/viewtopic.php?f=37&amp;t=1882* 
That's fair enough, I've never built anything for corporate/business use. Might try and implement something like that in my current project.
[No!](http://imgur.com/luWf7.jpg)
&gt; Whenever you embed a string within foreign code, you must escape it. Or, put otherwise, sanitize it for the foreign context. A cat's a cat by any other name :) I agree of course that you should always escape data (and that's largely part of what I meant), but I don't think it's impossible to filter incoming data. For example, if you're expecting numeric ID values, why not cast to int to force the incoming data to be a number before even touching it further down the script? If the request was valid, then you instantly have clean data with no further risk of SQL injection or XSS. If it wasn't, then you end up with a trivially detectable garbage ID value *also* with no further security risk. Of course, just because you've run some filtering on your data should definitely *not* be a reason to no longer escape your data at all times, but I do think it's good practice to enforce data cleanliness as soon as possible, where possible. If anything, it can only help you should you have forgotten to escape data somewhere.
I may be alone in this but when using a tertiary operator pushes the line beyond 80 characters, I add new lines to improve readability. $example = (isset($myArray['myArrayKey'])) ? $myArray['myArrayKey'] : $myDefaultValue; As opposed to: $example = (isset($myArray['myArrayKey']))? $myArray['myArrayKey'] : $myDefaultValue; It may seem bizarre at first but when you know the first line contains the condition, second line is when true and third line is when false it actually becomes easier to scan. This could be replaced by if/else statements. It's a style preference.
1) Don't use short tags -- I believe this is outdated information. Short tags will be in PHP 6 even though there was discussion of removing it. Could someone provide updated information about this? Also, if short tags are staying, you should use them inside of HTML files. They improve code readability and the conflict with XML is a red herring. 2) Avoid singletons -- mostly agree but there are times when singletons should be used. In practice you could replace most singleton class code by relying on a global registry (such as Zend_Registry which is a singleton itself). Using this approach you would effectively have a single instance of a given class without prohibiting additional instances from being created. Depends on the situation.
&gt;&gt;In any serious project the HTML code should be in the view, and only in the view. The rest of the files would be PHP only, and shouldn't contain HTML at all. &gt;1) This never happens. For you. Which is both a shame and irrelevant to whether or not it is how something *should* be done. &gt;2) Look again at the code you posted. Practicing what you preach? A simple solution was provided for a simple problem. A framework would improve separation of logic here, sure. &gt; In any real world scenario more elaborate than a yoga studio's homepage I think you'd be crazy to waste so much time pounding out HTML tags. Get a better editor. It would take most people using a decent editor less than 2 minutes to type the entirety of his example. &gt; Wordpress is a travesty. Anyone who takes their lead from that blighted farrago of spaghetti code and cargo cult programming is headed for a hard fall sooner or later. Totally agree. Although I think he was trying to point out that this is a practice used even within base examples. &gt; you don't want to be relying on settings that aren't guaranteed to be in place - particularly when the only justification is to satisfy an anachronistic affect. In practice, relying on extension availability is far more problematic than short tags (see: ImageMagick, GD, mcrypt). Short tags are supported by many environments and having them enabled is typically a trivial process. In the event your hands are tied and you need to exchange short tags for echo statements, the command line can do this very easily. &gt; The idea that jamming potentially thousands of files through sed sounds even vaguely sensible to you just goes to show how little you've thought this through. You probably could have processed a trillions of files littered with short tags in the time it took you to type up your post. You clearly have no idea what you're talking about.
I follow this convention. My thinking is that PHP code being used within a HTML document should follow HTML conventions rather than PHP conventions. Example translation: &lt;/foreach&gt; &lt;if&gt; &lt;str_repeat /&gt; &lt;/if&gt; The only time you are tempted to use PHP code style within an HTML document is when you're trying to do something that is more than trivial or superficial. In which case that code shouldn't be in the HTML document at all and instead moved to a controller, model, helper, or elsewhere.
If you sanitize a simple int there's no problem. The problem comes when you have to sanitize a paragraph or something else of that magnitude. Then sanitization becomes ridiculous and youre best option is to leave it untouched adn escape it when outputting.
Well they are not equivalent. I'm glad i dont have to maintain code you write =)
I feel obligated to downvote you so developers coming to this thread know not to do this. A view littered with echo 'ul', echo '&lt;div id=""&gt;' . $var . '&lt;/div&gt;'; is definitely not easier to read. You can see by your -7 that other developers dont want to see this type of code either.
Im very against using smarty, theres no need for it. You can do everything with PHP you can with smarty.
&gt; Well they are not equivalent. You just keep on thinking that. It's easy enough to say "X is true and I'm glad I don't have to deal with people who disagree". That doesn't make X true.
You should really have a good reason other than arbitrary adverbs, or at least recognize it's your own style issue.
Your "frontend person" shouldnt be integrating. YMMV depending on how many hats a person has to wear.
I've actually had a lot of success with UserCake -- sorry to hear you're having trouble. Though I haven't seen any weird bugs so far, I think a new version is coming out soon that might fix some of the issues you're facing.
If concatenating strings is slow enough to be noticed *, you're doing something quite odd :-) [1] In that you actually care about the number of microsecond that `+` is slower than `.`
Hence: &gt; Of course, it's a completely negligible performance increase.
I've never found it to be too much of an issue really. There's not too many actually useful things you can perform on a big string of HTML. Most functions shouldn't returning HTML, it should be up to your *view* to actually format/display the data.
You should take a look at [XHP](http://www.facebook.com/notes/facebook-engineering/xhp-a-new-way-to-write-php/294003943919);
I used to feel that way about Smarty, but I've been using it quite a lot recently. The ability to define modifiers and functions is quite nice. I've created helpers that let me write code like: Your account: {link_to model=$user} created {$user-&gt;created|time_since} ago. Also, I think any templating language should have auto-escaping. I've seen it done with plain PHP templates in Symfony 1, but it was quite hacky and prone to breakage. 
 $tooMuchTyping = new Zend_Framework_Conventions_Lead_To_Sore_Fingers();
Private makes sense if you intend your class to be inherited from and you also intend to change the implementation details.
Here's something fun I discovered: function ifsetor(&amp;$var, $default = null) { return $var !== null ? $var : $default; } $example = ifsetor($myArray['myArrayKey'], $myDefaultValue); The reference will initialize the array value to null if it's not already set. So the above code doesn't raise errors even in E_STRICT. It does have the side effect of defining a key, so use with caution. 
Wow, I fail at reading comprehension. (*Benchmarks around `+` vs `.` and single quotes vs double quote really get to me. It's like [bikeshedding](http://darkorange.bikeshed.com/) for benchmarks.*)
I'd like to add to this: Never, ever print inside a function. It makes it so much harder to reuse your code. E.g. if you define a function like: function fetch_rss($link) { echo ...; } Then I can't use that code without putting output buffers all over the place. It's always easier if you just return a string and let me decide what I want to do with it. It's my job to send the page to the user, not the library's.
I'd love to learn php like this!
I'd love to learn basic php. But I'd also love to learn how to integrate it with databases for more complicated things.
&gt; You probably could have processed a trillions of files littered with short tags in the time it took you to type up your post. You clearly have no idea what you're talking about. Unless you can guarantee that the string doesn't appear anywhere else, then you need a state machine to do this. It's not a trivial undertaking and sed is not up to the task.
Symfony is a PHP Framework that has a good documentation like this: http://www.symfony-project.org/jobeet/1_4/Doctrine/en/ Reading these 24 mini-tutorials you can understand the importance of using a framework. The key is: Don't reinvent the wheel.
me too, good library.
Your own, because it's exactly how you want it.
Considering how many frameworks are out there, the chance that the additional developers use the same popular framework as you do is close to zero.
Win7, NetBeans, WAMP.
You don't really have to install it technically. You just use the files. He might be using [Zend_Tool](http://framework.zend.com/manual/en/zend.tool.framework.html) to set it all up from the command line. I like to use this. Also you can install it if you're using Ubuntu it is in the repo, I think that just put it in your include path or something. You'll still have to tell your app where the framework resides. [This](http://framework.zend.com/manual/en/learning.quickstart.intro.html) is how I learned to use it initially.
Indeed, but I see people marking everything as `private`. Default to `protected` unless you really do want `private`.
PHP is object-oriented too. The whole point of a framework is encapsulating common functionality in an interface. There is always a learning curve, but I much prefer to learn functionality once in an interface instead of spelunking through a scary basement. 
My first suggestion would be to work out from a common content format. By writing your script to work with JSON (or XML) you offer a bit more flexibility at its core for future integration. Create an excel to JSON (or XML) parser and your cooking with gas. That way if you say decide you want to start storing the information in a database or export to another format you have options.
If anyone here uses XAMPP under windows then I followed this tutorial which worked perfectly. I then used Subversion plugin for Eclipse, works amazing love it. Link : http://i-tech-life.blogspot.com/2010/03/what-is-subversion-as-quoted-by.html 
Or you have OCD like me.
&gt; This is my first r/PHP post and I hope I'm doing this right. You’re doing it wrong !
While I fail to understand what this is all about, I see a couple of optimizations. You can squash a switch’s labels if the body is the same switch($reqType){ case "addTicketReq" : case "closeTicketReq" : case "emailCust" : $reqArray = array(); break; default : $reqArray = array("Ticket","Invoice","Cost"); } But I’d do it like this: $possible_req_types = array("addTicketReq", "closeTicketReq", "emailCust"); $reqArray = array(); if (!in_array($reqType, $possible_req_types)) $reqArray = array("Ticket","Invoice","Cost"); I strongly suggest to PHPExcel’s function to get that column name: PHPExcel_Cell::stringFromColumnIndex($i); And iterate to max of current sheet $max_row = $sheet-&gt;getHighestRow() $max_col = PHPExcel_Cell::columnIndexFromString($sheet-&gt;getHighestColumn()); PHP may not issue warnings about it, but you are currently accessing an index that is not defined. if( !(isset($dataSet[$cellVal]["col"])) ) { $dataSet[$cellVal]["col"] = $fakeEnum[$x]; $dataSet[$cellVal]["row"] = $i; } should be more like if( !(isset($dataSet[$cellVal])) ) { $dataSet[$cellVal] = array( "col" =&gt; $fakeEnum[$x], "row" =&gt; $i ); } or shorter: isset($dataSet[$cellVal]) || $dataSet[$cellVal] = array( "col" =&gt; $fakeEnum[$x], "row" =&gt; $i ); Also, this is only coding style, but why put // End of the inner check loop when you have indentation? 
I already created a course like this. Here's the table of contents for Section 1: PHP Fundamentals. The entire course aims to bring absolute noobs to Zend CE status and a $30/hr minimum job offer. I've already offered promos in the past, but it's promo-oct10@phppro.phpexperts.pro. * Part 1: Understanding PHP 1. Introduction (1430 words) 2. Get PHP Up and Running (519 words) 3. Get a Good IDE (700 words) 4. Variables and Constants (481 words) 5. Arrays (314 words) 6. Functions (595 words) 7. Classes (854 words) 8. Operators (523 words) 9. Flow Control (536 words) 10. Loops (582 words) * Part 2: Solid Object Oriented Programming 1. Encapsulation — Don't Ask, Tell (1244 words) 2. Design Patterns (431 words) 3. Interfaces and Abstract Classes 4. Inheritance 5. Composting 6. Inheritance vs. Composting * Part 3: Design Patterns 1. Composite Pattern 2. Singleton Pattern 3. Delegate Pattern (380 words) 4. Command Pattern 5. Factory Pattern 6. Abstract Factory Pattern 7. Proxy Pattern 8. Façade Pattern 9. Model View Control Pattern 10. Observer Pattern * Part 4: More Solid Programming 1. The Dangers of Global Variables 2. Debugging Primer 3. Profiling Primer * Part 5: Advanced Topics 1. The Public Properties Debate (1926 words) 2. Manual Type Casting (316 words) 3. Functions as Variables 4. Recursive Programming 5. Object Iteration * Exam: A Driving App
I love geany's shortcuts: ctrl+d &amp; ctrl+k but i hate how it starts lagging with large files and how the html-autocomplete is the worst ever 
Great and a much needed thread. Trouble with these is they usually become unmaintained, and given that security is involved, it's difficult to trust a script that was last updated in 2008. It'd be nice to have a matrix of these, which includes the various features and how they work/differ. Along with the last updated date, and the location of bugs/docs/examples.
As an alternative to projectname.dev in /etc/hosts you should give [dnsmasq](http://packages.ubuntu.com/maverick/dnsmasq) a try. It is as easy as adding the entry "address=/dev/127.0.0.1" and registering 127.0.0.1 as a nameserver in /etc/resolv.conf.
TIL. I guess it relieves a bit of the frustration I have with some of the previous developer's conventions.
array_shift()...
I'm with you on most of this, but why double quote the string inside your foreach? Escaping double quotes for all of the HTML attributes is more of a pain for me, and as an added bonus single quoted strings parse much faster.
OpenSUSE 11.2 with kwrite - Super lightweight text editor with syntax highlighting for HTML, CSS, PHP &amp; Javascript. KDE itself handles connections to Samba, SSH and FTP file shares. I can edit anything almost anywhere.
Well as a bonus, you'll learn the crap out of some httpd.conf :)
Read stuff. For example, you may wanna get a copy of [Code Complete](http://www.amazon.com/gp/product/1556154844?ie=UTF8&amp;tag=blogframethro-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1556154844) for a few cents, and read it. The old version is totally fine. No need to spend &gt;30$ for the newer edition. Then you might wanna check out a php framework. I'm pretty happy with [CakePHP](http://cakephp.org). Figure out how to use it, and try to figure out why they work like they do. It may have quite a learning curve, but it sure is worth it. You code-fu will improve. I promise.
I like to use objects for anything you can best imagine as a real world 'object' (product, user, etc) and use procedures for actions done to/by these objects (display product, user login)
And once you learn CakePHP then switch to another framework. The thing you need from here on out is to diversify. You've been stuck in your old habits for 7 years now and you need to open yourself up to multiple different ways of doing things. CakePHP has a decent setup, but there is also Zend, CodeIgniter, Yii and such, all have different ways of doing things and each is worth knowing.
Avoid books teaching you a language. Focus on learning abstract things. You don't learn object oriented programming in PHP, you learn objected oriented programming. You don't learn PHP patterns. You learn patterns. If I have to recommend one book, it would be Implementation Patterns by Kent Beck. It's a short book. It also is pretty basic, but is a good foundation for learning how to do thing well. It's a springboard to better programming. A lot of the suggestions are suggestions you'd read here, but the book explains it well, and usually explains why it's a good idea. The other nice thing is that these ideas have a real impact on your development. Many people suggest Code Complete, and while it's also an excellent book, it dealt with a lot of things that while important, don't have as much of an impact. It spends time discussing the placement of brackets for functions and conditionals. So yes, while it might be important, at your stage, it's not needed. http://www.amazon.com/Implementation-Patterns-Kent-Beck/dp/0321413091/ref=sr_1_1?ie=UTF8&amp;qid=1287428685&amp;sr=8-1
I'm kind of in the same boat as OP. I've been trying to wrap my head around objects. In a really abstract way, can I relate programming objects to CSS classes (thinking of CSS classes as baseline modules that can be further extended by more CSS classes)? I think I understand the point of the object, but just have failed to recognize a potential application in my projects.
I came in here to say Code Complete. It will make you a better PHP developer even though PHP is mentioned (maybe) once in passing.
If you'd rather not use a lot of other people's code, start using the MVC pattern with class/method based routing (i.e. /user/delete/1 should automatically be translated to class UserController-&gt;delete(1) ) and get to know unit testing. As a result you should be able to create a simple framework that fits your needs. Then, if you like, you can move up to other people's frameworks to find out what they're good at.
I'm a lot like OP here I'm ashamed of my code and I posted something similar asking reddit how to improve. I've been recommended Code Complete and to learn frameworks like cake and CI. Gonna be picking this book up this weekend!
Its simple, you've got a user user object with **properties** like name, registration date, etc and **methods** like login, changePassword, etc. Objects keep the code that deals with one thing together. The best part is you get to partition everything however your brain feels comfortable, which is *usually* the right way (based on a human performing a series of actions on a real-world object)
Code Complete is great, but I'd add *Writing Solid Code*, too. Even though it's specifically about C, Writing Solid Code is full of seemingly small bits of wisdom--that I've now taken for granted for years--that help me write more consistent, easy to understand, and more often correct the first time, code, even in PHP.
if you need to perform different actions on a set of data, it's probably a good idea to put it in an object. I was hesitant of using objects to, the moment I started using object was when I was using so many global variables and nested functions, stuff just stopped working and I lost track of what data I could access where. Don't let it come to that. I had to do a pretty thorough recode of the project. The great thing is that when you do this you can easily use code again in a new project, and that's what makes your business as a coder more profitable the more projects you do.
Neat.
Learn the wrong way at the same time. I'm serious.
Start all classes with an uppercase. It is super annoying to see all-lowercase class names.
I would recommend pouring over Zend Framework code to get a feel for the coding style. Everyone has their own style but good code, regardless of language, rarely strays very far from what you'll end up seeing there. I would also recommend you try to build your own MVC from scratch. Use it on a personal site and analyze other frameworks to see how they solved the problems you come up against. I'm not saying you should use it on professional projects but the experience of diving into the internals and building something from scratch will give you a greater appreciation and deeper understanding of how frameworks work and why you want to use them.
&gt; It is NOT recommend you use this code for transferring sensitive data as it can be easily decrypted. This code is only for example and educational propose. Let me get this straight. You're going to do something stupid, then tell the world about the stupid thing you did, then tell the world not to do the stupid thing without actually explaining what makes it stupid despite claiming that the stupidity is educational? So, let's review the reasons that this is stupid. Let's [quote Wikipedia](http://en.wikipedia.org/wiki/Encryption): &gt; In cryptography, encryption is the process of transforming information (referred to as plaintext) using an algorithm (called cipher) to make it unreadable to anyone except those possessing special knowledge, usually referred to as a key. Let's review what the code does. First, it generates a random number between 1 and 9. Next, it goes over each letter in the string. (Let's not get into the character encoding issue here; if you want to be pedantic, it goes over each *byte* in the string). The letter is converted into it's ASCII number, then that number has the previously given random number subtracted from it. The result is stashed away. Then, the resulting array of numbers is concatenated together, separated by a period, and then the previously generated random number's ASCII value is converted to a number, and is itself appended to the end of the string. This is the "encrypted" text. Just in case you missed that, **the key needed to "unencrypt" the text is attached to the text itself**. There are only nine possible representations of any given string. Ten calls to the function will always produce at least one duplicate. Let's take a peek at some example calls: php &gt; echo encrypt_string("A"); 60.103 php &gt; echo encrypt_string("A"); 62.101 php &gt; echo encrypt_string("A"); // &lt;-- 56.107 php &gt; echo encrypt_string("A"); 63.100 php &gt; echo encrypt_string("A"); // &lt;-- 57.106 php &gt; echo encrypt_string("A"); // &lt;-- 56.107 php &gt; echo encrypt_string("A"); 63.100 php &gt; echo encrypt_string("A"); 56.107 Take a look at the arrowed lines. 56.107 is mysteriously only one number off from 57.106. Let's more firmly establish the relationship between the numbers and the letters. Again, a few examples: php &gt; echo encrypt_string("AB"); 59.60.104 php &gt; echo encrypt_string("AB"); 61.62.102 php &gt; echo encrypt_string("AB"); 56.57.107 Gee, 56 and 107 again. And look at that, the letter "B", which comes right after "A", is 57. This isn't encryption. It's a substitution cypher with the key to unsubstitute right in the data. It's even awful for a substitution cypher because it doesn't attempt to disguise the values of the letter after it's converted to a number. But wait, it gets better. From the article: &gt; I came across a thread with a tutorial on how to write a very simple encryption and decryption algothrim [...] I read on down through the thread and a poster there had posted a modified encryption algorithm that was some what better then the original posters.Though the user did not post a decryption function for it. o I thought it would be fun to write the decryption function for this user’s encryption function. Below is the encrypt and decrypt functions. See, that's not so bad, right? Ah, but I've done some creative sentence snipping. Here's what I left out: &gt; I came across a thread with a tutorial on how to write a very simple encryption and decryption algothrim, with out using MD5 or anything like that. [...] I personally never had used or seen any type of custom encryption methods outside the use of things like MD5, Sha-1, crypt, etc. Right then. MD5, SHA and Unix's crypt are [*hashing* functions](http://en.wikipedia.org/wiki/Cryptographic_hash_function). They produce a **non-reversible transformation** of the input, and have varying levels of hash uniqueness. Just to reiterate, there is no way to get the original text back from a hash. ([Rainbow tables](http://en.wikipedia.org/wiki/Rainbow_table) and brute-forcing do not count for this discussion.) Real encryption is reversible. The key used for the encryption algorithm has to be kept private in order to properly protect the encrypted data. It's important to understand the difference between real encryption and hashing. Like MD5, SHA and Unix crypt, PHP offers (frequently) built-in ways to encrypt data. The mcrypt extension is almost always available, and comes with a [wide variety of standard and non-standard cyphers](http://us2.php.net/manual/en/mcrypt.ciphers.php), from Blowfish to oldschool DES to newschool AES (Rijndael). Writing your own encryption device is a monumentally stupid idea. Please leave it to the experts. This article would have been golden if it'd have pointed out at least some of the flaws. Tearing apart your own old, stupid code can be delightfully fun.
I've come to think that this mode of teaching OO techniques is probably the largest stumbling block to people actually learning them. Don't get me wrong - it obviously works for some people, and it's a portion of the real world usage of OO, but the right mental model isn't "build a working facsimile of a real-world entity". It's "bundle state and logic in a helpful fashion". This, of course, is a lot harder to convey than "make a thing that's kind of shaped like a product".
Dude, seriously.
If you're not already reading r/programming and r/coding, start. Follow some people on GitHub. Read some decent technical blogs and such. Most importantly, though: _Learn another language._ (Edit: Some alternative "most importantly"'s: * Work with other people more experienced than you. * Publish your code. * Read as much _code_ as you can stomach. )
I have a similar setup but I use vmware for my LAMP environment (ubuntu, apache, mysql/mongodb, php). From within my vm host, I auto mount over virtual network to my "~/Sites" folder so that all my source code is local but still accessible from my vm host. My vm host apache config then points to that folder. This works nicely because if a new version of PHP comes out and I want to try it I can create a snapshot then install it without worrying about my current projects. If I need to rollback to an older version of PHP or a special configuration of modules, I can choose the appropriate snapshot then continue work on my project as if I hadn't done any alterations of the environment at all. All the source is kept in git and I backup my vmware files. So if my laptop was stolen, my house burned down or if I just wanted to start doing dev on a new machine, all I have to do is download my vmware backups, pull the project down from git, boot up vmware and I'm ready to go. Don't ask me how I set it up. Configuring all this was actually a bit of work and I just read docs online. Works very well tho.
I'm doing some CodeIgniter tutorials and really liking it. It's a PHP framework where everything is organized in MVC and the basic stuff is already written for you. I like it because it still feels like I'm learning PHP as opposed to just learning a framework. 
Do you know of any sources of cakephp documentation other than cakephp.org?
I don't use github, which is why I didn't bother to look at the code and overlook the link. How would you describe the relationship between your implementation and [DCI](http://en.wikipedia.org/wiki/Data,_Context,_and_Interaction) ?
What?
There's something of an established pattern of behavior here.
&gt; How do I learn to do PHP the right way? Learn Java or python or some other language that has a structure first. 
He is a spammer? He is a teacher? I dunno.. 
I just tried using this variable and it doesn't even appear in the $_SERVER global for my server. Probably alot more reliable to use $_SERVER['REQUEST_URI'] or rewrite using .htaccess to the query string then parse your $_GET.
awesome. about to try this idea....
&gt;It's "bundle state and logic in a helpful fashion". This is the best explanation of I have yet come across of objects. Some objects can be very abstract, and have no real-world corollaries. 
PATH\_INFO is not reliable. Its value depends on the way the web hosting account is set up, and also on the "cgi.fix\_pathinfo" directive in your php.ini. Change one line somewhere and it all goes wrong. Yes, fickle PHP did it again! $\_SERVER['REQUEST\_URI'] is much more reliable, as WebWorker said. It even contains the querystring, which you can feed into parse\_url() and parse\_str() to break down.
I am not sure what you are up to, but your site only has placeholder data http://www.phpexperts.pro/index.html
Is that you Kent?
Here's what I've been getting into VERY recently: 1) I use a MVC-based CMS to handle organization and structure of data. Admin interfaces are a giant pain in the ass to program. I would probably use ExpressionEngine. 2) Only use the CMS-based features to handle a request of data and spit out JSON or XML that matches. 3) Use a javascript framework to do ALL front-end processing: walk that data and display it on the users screen. Abstract everything as much as possible. 95% of what people use things like Google Maps for generally don't change from site to site. 4) DO NOT PUT ANY STYLING IN YOUR PAGE. Your page should build a bunch of li's in ul's that render fine on Netscape 2.0. Styling is for CSS. I basically have a library that is configured to use standard conventions: where things like data feed is, the ID's to use of Shelves and Containers. Because all the javascript is namespaced, it does the site-specific element building around that, and then wraps around a very reusable javascript library that is written around the Google Maps API. It might be bloated and heavy, and I'm wrapping it up for distribution soon, but I promise it's really cool. 
Learn Python. And I don't mean it in a "my language is better than yours" way but Python I feel does a better job of _requiring_ a certain coding standard. If it is hard to do in Python, it is because you are doing it wrong. And you can run your code against pep8 really easily: http://github.com/jcrocholl/pep8
Right but it's a good starting point. Contrasting the code from V1 and V2 would be less drastic than the coding style implied by the OP.
Question, how come no one suggests going to school for it? Would a masters in computer science be a waste of time?
CodeIgniter is beautifully flexible but allows you to do things that you really shouldn't. CakePHP is a bloated memory hog. Yii is the one you should really strive to learn -- it's very strict and powerfully object oriented, whereas the others let you get lazy in your coding. It will be the most challenging but ultimately the skills you learn will apply the most to all other OO languages.
Forget everything you know about PHP and start learning OOP from scratch in another language like Java, Python or Ruby. Then go back to PHP if you feel the need to (though I strongly suspect you won't want to).
Yes.
This is your brain: `$foo` This is your brain after long exposure to PHP: `echo ${($foo-&gt;${${$foo-&gt;bar}.((${qux}.${grault}===$qux.${grault})?${grault}:${$qux.$grault})})}(($foo-&gt;${${$foo-&gt;bar}.((${qux}.${grault}===$qux.${grault})?${grault}:${$qux.$grault})}));` Any questions? \*ahem\* Now in all seriousness, as pointed out by others, this is possible in many other languages. You'd be just as insane to do this in PHP as in any other language. Doesn't stop the fact that PHP kills braincells. My brain knows.
Well, that's succinct. So buy a few books, code up some stuff (Codeigniter's my cup of tea), and pick up another language.
&gt; Read stuff **for PHP 5.3+ by known-good authors**.
Kohana is well designed I feel. As others said, reading and understanding good code is a good way to get better.
question- is there a programming language I could learn that would be both beneficial to learning a good programming foundation AND useful in web dev (in use, not just concept)? 
Learn Kohana. Use more functions. Make your functions shorter, calling other functions. Use classes, but don't make everything into an object unless it makes sense to do so. If you are doing layered objects, try to not go more than 3 levels deep if you can. Share some of your code in a Kohana forum and ask what people think, and don't be defensive when they give you advice -- just soak it in and make changes. Learn about the dangers of XSS and SQL Injection, dirty data, etc. If you have a difficult passage of code that might freak out a future coder, explain yourself in a comment briefly. Learn PDO. Learn jQuery and AJAX. Learn the ins and outs of WordPress. Learn PostgreSQL, SQLite, MySQL, and the various "NoSQL" databases too. Outsource your web designs and XHTML encoding and cross-browser testing. Leave that to the pros. Then, use their markup and integrate in your PHP. However, study what they did so that you can learn the tricks of the trade with this too, if that's your interest.
I partially agree. I originally wrote that I didn't like CakePHP personally because it was bloated, but I figured that I should let OP figure out his own opinion. Both Zend and CakePHP are bloated and does a lot more than most people need, but they both have unique approaches and interesting things you can learn them. I have never actually played with Yii since I made my own lightweight framework back when Zend was pretty much the only game in town, that said, I have heard positive things about it.
As others has said REQUEST_URI is where it's at. One thing that hasn't been mentioned is that using PATH_INFO actually forces you to have cgi.fix_pathinfo on which is a security problem in some cases. For instance if you use Nginx and blindly pass every request \.php$ to PHP one can use a URI like /forum/avatar/user1.jpg/index.php to actually execute /user/avatars/user1.jpg. Real exploit that I've personally seen work multiple times.