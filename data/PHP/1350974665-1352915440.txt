I'm not sure why you have find in your echo. If you want to pass it into variables the easiest way I have found is to pass it into an array. You can do that in the foreach and just add it to an array. The example of your content gives you is only showing the first one because that's what you are calling. in your $result2-&gt;find('dt',0)-&gt;innertext; you are looking for the first instance of dt and echoing that. You'd be better to use: foreach($html-&gt;find('dt') as $result2){ echo $result2-&gt;innertext; } You can also grab the dd in this fashion and pass them to an array. The manual shows it like this. $ret = $html-&gt;find('dd'); Also for looking up content with a class and id being called directly. It is easier to just do $html-&gt;find('.Summary') to find a class or $html-&gt;find('#example') for an ID. That should return anything that is contained with in that div's class or ID. That manual also links to the PHP manual on the DOM which may be worth reading. http://php.net/manual/en/book.dom.php Also of note as I missed this the first time I read through the manual. The tabs in each section dig deeper and deeper and may provide information that you are missing. Sorry if I'm confused on what you are attempting to do, but some of the examples threw me for a loop when the code you are scraping from looked different than your explanation. If you need any additional help let me know. 
In my eyes traits were one of the bigger mistakes PHP did in the last few years. In particularly, traits as implemented by PHP (i.e. without the possibility to include them at instantiation like in Scala), don't really add much value to well-written code (where you would favor composition anyway). PHP's traits rather further promote the bad practice of overusing inheritance (as static and tightly coupled composition). Furthermore traits are a big pain in the ass from the internal perspective. They are a constant source of bugs and crashes. (Yet Another Trait Crash was fixed ~3 hours ago...) I think that traits were well intentioned, but they really fail in practice. But one might still save them by including the Scala-esque possibility to include them at instantiation: `$coffee = new Coffee() with Milk, Suggar;` (which would basically dynamically create a class `CoffeeWithMilAndSugar extends Coffee { use Milk, Sugar; }` and additionally handle conflict resolution by chaining.
I can't reproduce that. PHP 5.3.10-1ubuntu3.4 with Suhosin-Patch &gt;php &gt; echo crypt('password', '$2a$08$abcdefghijklmnopqrstuv$'); $2a$08$abcdefghijklmnopqrstuub/LlVfC1A62K0uqLz37ReP6nxxZrYNe &gt;php &gt; echo crypt('password', '$2x$08$abcdefghijklmnopqrstuv$'); $2x$08$abcdefghijklmnopqrstuub/LlVfC1A62K0uqLz37ReP6nxxZrYNe &gt;php &gt; echo crypt('password', '$2y$08$abcdefghijklmnopqrstuv$'); $2y$08$abcdefghijklmnopqrstuub/LlVfC1A62K0uqLz37ReP6nxxZrYNe 
I would guess that kinda depends on the Cache-Control header of the response page. Also submitting to SO and then submitting here 15 minutes later for greater exposure is somewhat impolite. Your question isn't that interesting or important.
I asked this question [back in May](http://stackoverflow.com/questions/10493785/cache-validation-browsers-validate-cookies-in-cache-incorrectly) without any responses. So I apologize if I seem impolite by submitting to SO and here both, but this issue is still business critical to me.
It's just a VM on my laptop, not a real server. I'm doing a side project, and am still in early development, so I'm just keeping everything local for the time being. I'll see where upgrading Ubuntu gets me. Backed up the VM HDD just in case it goes tits up. I'm not great with linux admin, so this is all... new. Wish me luck, and thanks for the help. Sorry it turned out to be a waste of your time, but - as I said above - I thought 2x and 2y came at the same time, so I didn't think to check the PHP version.
So, how about you give the cache-control and/or expires header a try?
Hmm, maybe a "Vary: Cookie" header would be the right way to go here?
Ok, this is getting somewhere, browser actually made a request! I have no idea how to thank you enough, it was insane how little Google reports such a rare problem like this. If you happen to stop by Estonia or Finland at any point, I'll buy you a drink or two.
Indeed :) I left it there anyway :p
For the most part, yes. I think most of the 5.4 features have been well received. The shortened array syntax and function array derefrencing were things a lot of people were asking for and excited to see in 5.4. Traits also didn't do as horrible as nikic might make it out to be. I think namespaces went over way worse in 5.3 than traits did in 5.4 In my opinion multiple inheritance introduces way more problems than it solves. So I'm glad PHP didn't go down that route in the first place. For the most part traits are just compiler assisted copy and paste. They don't offer much in the way of paradigm, but they also don't introduce any significant problems. Sure, they're static composition, but let's face it PHP's runtime engine isn't very good at doing runtime composition to begin with. There's very little in the way of class hoisting that works well in PHP. So I'm sure if you feel PHP does a poor job with traits you're going to feel much worse if someone actually bothered to do traits upon instantiation.
No, you didn't offend, but what you're saying is ridiculous. &gt; I have done all this in java. Are you kidding me? It's not much different in Java than it is in PHP... Java code... Class.forName("com.mysql.jdbc.Driver") ; Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/dbname", "username", "password") ; Statement stmt = conn.createStatement() ; String query = "select something from table ;" ; ResultSet rs = stmt.executeQuery(query) ; PHP Code... $conn = new PDO('mysql:host=localhost;dbname=test','username', 'password'); $stmt = $conn-&gt;prepare("select something from table;"); $stmt-&gt;execute(); $result = $stmt-&gt;fetchall(); If you did this in Java I have no idea what you're complaining about PHP for. Sounds like a bunch of nonsense to me.
At work, I made the conscious decision to keep our dev server on `E_ALL | E_STRICT`, so even undefined index errors (the most common kind, for our team) will show up and will actively crash our web app. On production, I'd probably go with a less insane error reporting level, what do you set your error reporting to?
Dev: error_reporting = E_ALL | E_STRICT Live: error_reporting = E_ALL display_errors = Off The second line is way more important, that means that the errors aren't printed, and are only put in the error.log file instead. _Edit:_ http://php.net/display-errors
I agree, and go further. I have errors setup to throw exceptions, and even have a class I extend from, where the __set method just throws an exception (for undefined properties).
-1 for dev. Logging errors for live.
This. For those that don't know, `-1` is **all** possible error reporting settings, including future ones that haven't been defined yet. This is the proper level to dev with...
This is why I STILL avoid bcrypt.
Nah. This is why I avoid Ubuntu and all distribution provided php installs. It's quite easy to do right, but they have conflicting priorities and insist on doing it differently. If this is why you avoid bcrypt, I feel sorry for you... Not just because you're not using bcrypt, but because you're stuck on older versions of PHP that haven't been updated with anything significant (aside from back-ported security fixes). 
Well you could definitely use a try/catch, but it depends on how you want to handle the error. If you want it to fail gracefully by assuming a non-existing value is just an empty string you could try: private function insertbulk(){ $dbh = $this-&gt;connect(); $stmt = $dbh-&gt;prepare("INSERT INTO equipment (description, unitnum, year, make, model, serial_number) VALUES (:description, :unitnum, :year, :make, :model, :serial_number)"); for($x=0; $x&lt;(count($this-&gt;split))-1; $x++){ $stmt-&gt;bindParam(':description', isset($this-&gt;split[$x]) ? $this-&gt;split[$x] : "", PDO::PARAM_STR); $x++; $stmt-&gt;bindParam(':unitnum', isset($this-&gt;split[$x]) ? $this-&gt;split[$x] : "", PDO::PARAM_STR); $x++; $stmt-&gt;bindParam(':year', isset($this-&gt;split[$x]) ? $this-&gt;split[$x] : "", PDO::PARAM_STR); $x++; $stmt-&gt;bindParam(':make', isset($this-&gt;split[$x]) ? $this-&gt;split[$x] : "", PDO::PARAM_STR); $x++; $stmt-&gt;bindParam(':model', isset($this-&gt;split[$x]) ? $this-&gt;split[$x] : "", PDO::PARAM_STR); $x++; $stmt-&gt;bindParam(':serial_number', isset($this-&gt;split[$x]) ? $this-&gt;split[$x] : "", PDO::PARAM_STR); $stmt-&gt;execute(); } }
 I see where you are going, but this returns an error "cannot pass parameter 2 by reference" edit: what if I just use (count($this-&gt;split))%6 != 0) as a condition before it even gets into the function?
Well that would work, but not well. There could be 6 different rows that are missing one parameter each. That would then throw off your modulus function. I'm confused by your error though, what's parameter 2?
no idea, that's just what the error said, but it said it was in the first row: $stmt-&gt;bindParam(':description', isset($this-&gt;split[$x]) ? $this-&gt;split[$x] : "", PDO::PARAM_STR); $x++;
Oh, and your pdo commands could stand to be stuck in a try/catch block just for safety. ;)
So don't spam it. It's only been a few days since the last time you submitted it. If you're merely submitting links to the same thing over and over for the sole purpose of promoting it, then you're not really doing the community or yourself any favours. Get back to us when you got some kind of new development, otherwise you're just inviting yourself for getting downvoted. 
When i've coded it myself I always use -1 but the amount of poor coding you find everywhere is incredibly frustrating. Even major things like Joomla, Wordpress, Invision Power Board etc throw thousands of warnings and notices for every page load. Undefined indexes is probably the biggest offender of them all and it drives me nuts that if I want to incorporate my stuff into them I need to ignore basic error reporting.
Good call. Although it doesn't apply to everyone, I like to set a simple tail -f on my log file and rigorously test the application. Even in production it is wise to often check if not constantly monitor the logs. If you use tmux, you can set it up to highlight the terminal when the log changes, making quick work of determining when something has hit the log and warrants checking out.
Not to mention filling up your logs with a trivial error that can be prevented with isset. Catch these before you go into production! :)
CodeIgniter. http://codeigniter.com/
0.o session IDs have been removed in PHP 5.4? That's news to me (because, in reality, they haven't been removed). What would you normally be doing that doesn't work in PHP 5.4?
That will still work.
It doesn't. This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0. From: http://php.net/manual/en/function.session-register.php 
Aside from using the deprecated mysql_* API and some other issues which have been beaten to death in this reddit, the above looks... okay. There is nothing there which won't work in php 5.4, unless there are calls to removed functions in your include file. You might take a look at the [PHP 5.4 migration guide](http://php.net/manual/en/migration54.php) if you want a list of removed/deprecated features to compare with your code.
I find that people who utter such things are usually the ones who do the least amount of contributing and the greatest amount of talking :) Often I hear people throwing around such nonsense lightly, but when I actually got involved in core PHP development and saw what it actually meant to go from RFC to implementation to release to bug fixes... I realized even the most trivial of implementations really isn't as simple as some people think. Sure, it's easy to sit back on the sidelines, point, laugh, and shout. But the ones I see stepping up to the plate and giving it their all every day are incredibly talented and committed individuals that have contributed more good to PHP than you could probably ever attempt to contribute in petty criticism :) After all, PHP is still #6 in the TIOBE index and you're still talking :)
I just fixed this one, it was &lt; and &gt; getting parsed as HTML. It got weird.
Fork and fix.
&gt; Nope. Neither Javascript nor Scala implement traits ~~statically~~. Changing the discussion is of no interest to me. Traits are for the collaboration and code reuse. The affect on the compiler is irrelevant. &gt; Everything is a "class", and prototypical inheritance is different enough from standard inheritance that it really isn't worth comparing to other non-prototypical languages. The fact that you can't recognize it works across at least 2 models, is more convincing. &gt; my blog post I remember your blog post, it was poorly considered then and still is. There's nothing to fear from an optional feature. Go away troll.
Hey everyone, thanks for the comments, especially Veonik. No matter what, I appreciate the discussion. I just pushed out v1.0.1 today with some small upgrades/tweaks, namely to the MVC/Router component (and also the project install as it pertains to that component.) And time permitting, my goal would be to provide more in-depth documentation and examples. I will try at the very least to push up a "hello world" skeleton application for demonstration. I know a lot of people might criticize the decision to produce yet *another* framework in an already crowded area, but I did have my reasons. My own personal code base grew with an emphasis on graphics and I started playing around with other things, trying them different ways, etc., and I supposed that's how most code bases grow. I find it extremely useful and efficient to use and my hope would be that others would find that as well. But, allow me to respond to buzz27's points: *“I'm not sure why you are recommending that people use this framework. Is there a specific use-case you have in mind?”* Like I said above (and on the website) I wrote it as a lightweight web framework with an emphasis on graphic components. The other components just grew out of me playing around with other things and trying them out in different ways. Use it or don't use it, it's fine either way. *“Code seems ugly and disorganized. Not a lot of abstraction. It's more like 'here's a bunch of classes that do stuff'.”* Well, that may be your opinion, but it's following PSR standards and does has some abstraction. You'll let me know what the excepted level of abstraction is best, won't you? *“What, exactly, is the "bloat" that you feel has been removed in this framework that exists in others?”* At the time I started this project, the ZF1 (I know they just released ZF2) minimum download was about 25 MBs. *“Why do all the php files have closing tags? They need to get rid of these,it is bad practice and creates several security problems.”* None of the source files or important parts of the framework have closing tags. Only the files in the examples folder happen to have them. I wouldn't recommend closing tags, nor would I recommend you using those example scripts to do anything more than test some things out. But, as you called attention to it, you'll find they were removed from the example scripts in v1.0.1. :) *“I'm not just being bitchy, its a serious decision to trust a project, and the security of a server, to a new, unsupported framework with no community. Why wouldn't you use an established framework that is battle-tested and well-supported?”* Because, when I started a few years ago, there was no framework that did the things that I commonly did all in one spot. I was tired of grabbing FPDF (which is a great PDF code base) to do PDF stuff (ZendPdf was buggy at the time), writing custom code for images, grabbing this bit of code or framework for DB stuff. I am just the type that enjoys looking on the hood and trying to build something useful from the ground up. And it has been very useful to me and allowed me to significantly reduce the time I spend coding as to where I can focus on the important pieces of an application. *$form example* It's an example, chief. Test to see if the form and its elements are valid via one simple method, and then do whatever you need to do with them from there. Would you like to actually contribute or just sharpshoot trivial things like that? Sorry, not trying to be bitchy ;-)
&gt; Changing the discussion is of no interest to me. Traits are for the collaboration and code reuse. The affect on the compiler is irrelevant. Actually, it is VERY relevant. Statically coupling traits (at class definition) drastically changes the usage models. It changes how it works at a fundamental level. The fact that the name is the same and it looks similar does not mean it's the same. For example, in PHP, a class that uses a trait must use it everywhere (all instances use the same trait). But in Scala, you have have instances that use different traits (because of instantiation time binding). In JS, you can even re-bind them at a later point. So no, the effect on the compiler is completely relevant on the discussion. &gt; The fact that you can't recognize it works across at least 2 models, is more convincing. Not really. It's more that I recognize that there are different models that have different strengths and weaknesses. Prototypical inheritance allows for run-time composition of methods. This tends to lead itself far better to duck-typing and mixin based composing of functionality than traditional rigid hierarchical structures. I'm not knocking the principle. I'm knocking the implementation. And no other language that I've looked at only implement traits in a statically bound way at class definition time. &gt; I remember your blog post, it was poorly considered then and still is. There's nothing to fear from an optional feature. I don't fear the feature. I fear the abuses done with it. And so far, I have not seen a single implementation that wouldn't be classified as an abuse of the model. If it came to vote today, I would vote against it. Not because I think it's bad, but because it's not what it should be. I would completely support it if it supported instantiation time or runtime bindings. But being completely compile-time is no better than eval...
Absolutely not! You run the site. You're a reseller. Meaning that they pay you for hosting. If your host pulls the plug, that's your problem. You should have used a better host, or a dedicated server, or whatever. But the point is that it's on you. In fact, you're lucky. There should have been an SLA in place. Where the outage would have cost you money. I won't deal with any company (hosting wise) unless they give me a decent SLA.
Just because the PHP interpreter is able to continue executing the program, doesn't mean you didn't do something wrong. If there's an error, fix it. Notices included. It's like asking why you got a ticket for running a red light even though nobody was coming in the other direction at the time.
Yup, this is what I do. Keep it at -1 even when I go live, just turn display_errors off and log.
&gt; It changes how it works at a fundamental level. &gt; So no, the effect on the compiler is completely relevant on the discussion. Traits are for the collaboration and code reuse. Traits have never been (even in theory) for the compiler. I understand you continue to try to derail the discussion to promote your views in an overly emotional way. I'm sorry you can't separate the concerns or identify which one this series of replies has been about.
&gt; Object instantiation is slow in php. Objects are a luxury and should be treated as such. &gt; But it's murder to the PHP interpreter. You are trolling, surely? 
yes, because if there is one thing programmers are good at, it's finding infinite amounts of time to fix each other's mistakes.
See, the java makes sense. All these damned arrows and colons and PDO or not PDO don't make sense to me. Like why is there one colon in your first line, but like everywhere else has two? (That's a rhetorical question, but answer it if you want). I mean just look at those two code examples: Java is so clean and logical, but PHP looks nothing like it, and like no other language I've seen before. Fucking arrows? Really, PHP? You're going to use arrows to point to your methods? Who came up with this shit? (again, rhetorical) Ok, now I know I say that now, but I also know that in a month or two, I will think PHP is tits because of what makes it different than other languages. Like I'm sure there's a really good reason behind all the inconsistencies, so I am looking forward to finding my appreciation of PHP. I also noticed you dodged the subject of a snippet or something that can fast track common tasks like queries. I'd be excited to hear what such a die hard PHP fan uses.
So, -1 for both. You're just changing the output destination.
In other languages, things that PHP treats as notices are raised as errors. Do you really want to ignore them in PHP just because it lets you?
try Silex https://github.com/fabpot/silex
-1 one in dev, and when it goes live .. I usually forget to change it. But then, if there's an error my customers will yell at me, and I get to know about it easier than having to check the logs of all the sites I made in the last 10 or so years :-) For anything serious that might go wrong I have the site also fire me an email so usually I do know about it before they do, but it's very rare. I code paranoid.
However, if the problem stems from a poor codebase that he's inherited, and the customer is asking him to fix it, then absolutely he should be charging for it.
Sure, it's a lot easier to criticize than to implement. But I recognize that I'm not language-designer material, so I don't try to do it. When I see things like [core devs with a complete misunderstanding of basic exception-handling concepts](https://bugs.php.net/bug.php?id=32100), the attempt to create something to solve the exact problem named arguments solve (with seemingly no idea that named args exist), or someone who used to work at Zend mentioning that he thinks pointers are hard and still doesn't know how they work, I get worried. Very worried. Because those people obviously are less qualified than *me*, and if I am not remotely qualified, what the hell are they doing with commit bits? Sorry about the lack of references for the last two things I mentioned; I didn't save them on Pinboard, and can't seem to find them in any of my searches. &gt; After all, PHP is still #6 in the TIOBE index and you're still talking :) Popularity should not be confused with good design. PHP is popular *despite* its shortcomings, not because of them.
Thanks, not completely sure what you mean, but im sure there are a torrent of helpful sites out there that I could find with some googling..
If its producing THAT many warnings, maybe you should reconsider the library you're using.
The best example I read was that in other languages, common mistakes php devs make (like uninitialized variables) are actual errors, and stop compilation (in C, for example). It is an indication that you did something wrong, even though the interpreter keeps going. 
i'm confused by this. it just talks about zend studio/server/gateway, but it does not say how i'm supposed to write native mobile apps using php. 
I've just never seen methods called that way. TIL! Very interesting. 
FWIW, Silex actually uses the [Symfony 2 Routing component](http://symfony.com/doc/current/components/routing.html) to handle routing.
That's probably a good thing.
While this did solve the problem, apparently it does not work in Opera and Safari web browsers! This must be a bug. The reason why no one seems to stumble upon it is because most servers send 'no-cache' headers when sessions are used, so you never run into this problem. But I have a framework that is all hands-on about caching and it's an issue there, since a well-built cache can work even with user sessions.
Real men use display errors on and error reporting E_ALL on production.
With all that trickery I don't even see the point of having the parameters in an array...could have just used func_get_args()!
looks sweet. although coming from activerecord i'd love to do stuff like this: $arr = array( 'firstname' =&gt; 'Alex', 'age &gt;' =&gt; 20, 'gender !=' =&gt; 'female', ); $table-&gt;where($arr);
You are not helping. You are spreading lies, misinformation, uncertainty, and doubt. Object instantiation is not slow. If you would have taken the time to actually look at some numbers, or test it, you would see that the difference is negligible. On my PC, with 5.4.8, instantiating 5000 objects takes 0.00183 seconds, and creating 5000 arrays takes 0.000998 seconds. The difference is 0.0008 seconds. That is 3 zeroes before the 8. For 5000 objects. 5000. You would need about ~1250 requests at the same time, for a 1 second difference. You will probably never go anywhere near the 5000 though, even in today's "fancy" frameworks. Is creating objects slower than creating arrays? Yes. Does the difference matter? No. Is creating objects slow? No. Blurting out things like object creation is a luxury, or that it kills the interpreter is retarded, and is exactly what keeps this myth alive.
lol you are creating empty objects and arrays 
Yes you can, but you have to include a '?' to indicate the parameter $arr = array( 'firstname' =&gt; 'Alex', 'age &gt; ? ' =&gt; 20, 'gender != ? ' =&gt; 'female', ); $table-&gt;where($arr) 
&gt; it had already been trampled several trampled. That *is* scary!
It has to do with the level of vetting of the applicant. With a regular lock icon, the only check that occurs is that the applicant actually owns the domain; no checks are done to confirm that the company behind the application is a legit company. The EV (Extended Validation) or "green bar" goes into a through vetting process using various methods (Dunn and Bradstreet verification, etc) to verify that company is a legitimate company that has an established reputation. There are really no differences in the actual connection layer between the two. The difference is that "supposedly" a company with an EV certificate is above board and legit. &lt;sarcasm&gt; PayPal has an EV... but some of there business practices are less than legit. &lt;/sarcasm&gt;
It was a typo... I've fixed it. Apparently my editing skills were trampled trampled too. :-P
Thanks for the info! So I'm assuming there's an extra cost in the EV service, but since there is no difference in the connection it is just to have the green bar vs just the lock to let users know the company is legit?
I have to say, this type of code is the most fun to write. Like you, I usually come to my sensibilities and don't use it for anything real, but just twisting the language in such obtuse ways, that even experienced devs sometimes can't grok what's going on....is extremely fun. The following example is the result of some downtime awhile back, and though it has nothing on your PDO class it was still a fun experiment: function k() { static $k; if (!isset($k)) { class k { function out($n) { echo $n, PHP_EOL; return $this; } function noop() { return $this; } function asgn(&amp;$var, $val) { $var = $val; return $this; } } $k = new k; } return $k; } And a demo: $t = 'test 1'; k() -&gt;out($t) // &gt; "test 1" -&gt;noop($t = 'test 2') -&gt;out($t) // &gt; "test 2" -&gt;asgn($t, 'test 3') -&gt;out($t) // &gt; "test 3" ; No....I have no idea when/where/why this would ever be useful. It's inspired somewhat by the jQuery factory+fluent pattern.
I have to tell I been in your situation before. Every once in a while, I see guys like us come to Reddit in hopes of getting reviews, but harshly turned down by some mod or other users. Some times the item in context is well accepted. For me the experience was quite depressing. It is just that the so called ,'quality' of forum is maintained by such measures. While it is true that such measures help in preventing the quality to go down, it seems to be that it also helps to prevent the quality from improving. &gt;I want people to be aware of it. I put a lot of times and work. I'm sharing it with the world, because I know someone out there need something like that. Now I mean no offense, but that 'someone' probably never heard about Reddit, or only use forums for seeking technical help only. This is how I find justification for the extremely poor reception of my library. This is from one of the replies you got &gt;So don't spam it. It's only been a few days since the last time you submitted it. If you're merely submitting links to the same thing over and over for the sole purpose of promoting it, then you're not really doing the community or yourself any favours.Get back to us when you got some kind of new development, otherwise you're just inviting yourself for getting downvoted. Try searching for 'Codeception' in /r/php. I hope you get the idea. Well at the end, The point is you don't have to feel bad about this. But you got to learn something, and move forward.
awww fuck...I thought this was a song....I was about to reply with 'cool band name brah'
Exactly, the array is unnecessary. One doesn't even need func_get_args(). The code is using a __call magic method, which gets all parameters (in an array) as the second argument. public function __call($query, $values) { $this-&gt;query = $query; $this-&gt;result = $this-&gt;db-&gt;prepare($this-&gt;query); $this-&gt;result-&gt;execute($values[0]); return $this-&gt;numRows = $this-&gt;result-&gt;rowCount(); } One could just change $values[0] to $values and writing array() is no longer needed. 
Thanks for the quick response. I'm actually somewhat new to PHP and really only have a foundation in includes and echo commands. I originally intended to only use PHP for the nav and side nav's for the site, but kept finding easier ways to do things using PHP. A very small relationship budded. Unfortunately, this love was not entirely mutual, and I found myself quickly overwhelmed. I'm slowly becoming a bit more confident in other aspects as they become necessary. Simply put, I don't have much experience. So, please bear with me. The code you gave me returns this... Warning: preg_match() [function.preg-match]: Unknown modifier 't' in /homepages/31/d334821686/htdocs/xxxxxxx Site/goobers/archive.php on line 25 ...when I insert it at the top of my original PHP command. What exactly is the difference between a database and flat pages?
I deliberate it deliberate first time round.
No dice, still. Thank you anyways.
Yeah. OP just posted this in a bunch of different places. I've removed it, as I don't think it's even feasible to implement monads in PHP.
It is, but the syntax to use them is horrendous. 
Don't think it's saying you can do it natively, but with this tool it's pushing.
Wildcard certificates often cost about 10x that of a single domain cert.
Well, at least it's a prepared statement
The syntax around the 'do' statement might struggle in a language without macros. But in this talk I implement a chain statement that I hope would look totally fine in a php implementation.
Sure I'll look into it when I get home from work.
I was surprised to see this here, thought I was in /r/Haskell until I paused and noticed the subreddit. Still watching... but so far, great talk. This is good for php devs, regardless of the implementation language. 
Symfony Routing is pretty solid.
Now this is spam. 
Imo... it'd be dodgy environment variables being passed to PHP, in one case or the other.
Try taking the unique values of a sorted list in php, compositionally, array_unique(sort($a)); ? nope! sort() returns a boolean (...wat) It's a great uphill struggle.
Thank you. Yes, that's how I've felt about PHP. However, I'm quite proficient at HTML and CSS and the PHP aspects sort of leaked in as quick fixes to updating universal HTML code across multiple pages. I did a basic PHP tutorial on Lynda.com and that's where I got my foundation. Other than simple includes and tactical variable usage, I'm lost.
`if(!empty($value) &amp;&amp; $value) {` is redundant. You can just use `!empty($value)` or `$value`. Both will mean the same in this context (since value is a parameter, it cannot be unset). And `!empty($value)` and `$value` mean exactly the same thing in a boolean context...
Hey, that reminds me of a hashing code I saw floating around the net: $hash = md5(md5(sha1(sha1(md5($password))))); Cause, you know, obscurity is boss
The lead backend dev at our work insists on: if (isset($value) === true &amp;&amp; $value !== '') {} if (isset($value) === true &amp;&amp; count($value) &gt; 0) {} [...] It's a bit of a pain in the arse but he *hates* the use of `empty()` but at least it's completely unambiguous and we always know we have the correct type.
You don't always know you have the correct type: `count("1")` is `1`. Therefore, the type is not right. `isset($value)` is **never** going to be a non-boolean. Therefore, the `=== true` is redundant. I understand unambiguous code. That's fine by me. But there's a line between unambiguous and language knowledge. To me, the knowledge that `empty($value)` is identical to `!isset($value) || !$value` is implied. Use the right tool for the job. To use `empty($value)` is IMHO a lot better than `isset($value) === false || $value === ''`. The more code you have, the more there is to make a mistake on. But to each their own. And there's no right way. I just don't like draconian statements like *he hates the use of `empty()`*. Every construct (even `eval()`) has its use cases. And to have a draconian statement that someone hates a construct... really interesting...
Why not use the widely-accepted monad operation names like `return` and `bind`? There are a ton of monad tutorials out there, each with its own analogy and a new set of terms. By renaming operations (wrap, step, really?), this code becomes a part of the monad tutorial problem.
I've tried this in the past with Zend Framework. It comes with a request handler for the "Apache 404" type request. If you try to use it in a regular fashion, you'll notice that $_GET isn't populated, POSTs will break (fixable with mod_actions ["Script POST /index.php"]), and all your pages are served with a 404 status code, unless you specifically override them with PHP. [This post](http://marcuswelz.com/2010/05/04/bootstrapping-zend-framework-via-errordocument-404/) goes more into detail.
I'm in the exact same boat as you. I've written about half of an app already, the app is a bit bigger and has almost 40 tables in the database. I'm using MVC but I'm not using OOP and it's starting to get overwhelming. I've been looking at [Laravel](http://laravel.com/)
This question pops up here frequently, and usually the comments turn into arguments for why X sucks or why Y is awesome. The truth, though, is that it really depends on what you're trying to accomplish. I'm not sure what "industry" you're referring to for standards, but in general there's nothing that everybody silently agreed to use almost exclusively. The reason there are so many frameworks to choose from is that they are rarely one-size-fits-all solutions. I used to develop against Zend Framework almost exclusively. While it worked great for me for larger projects, it was a burden and got in the way for smaller ones. I picked up Silex after somebody spoke about it at the local PHP meetup, and I found that it works for the smaller projects where I couldn't get Zend to fit. I've since picked up working with Symfony, and I've worked with Kohana in the past. What I've learned is that each framework most certainly has it's place, but that the decision on which to use comes down to the requirements of the project and the preferences of the developer. I would highly recommend exploring different frameworks. Build something small with each of them, like a guestbook or simple blog. It doesn't matter what, just something that you can knock out in plain PHP in an afternoon. Keep notes of what you like and dislike in each, and think of projects which might suit each framework. Decide on a small handful of frameworks to expand upon and work with them. Don't take on too many, but don't specialize on just one. Learning a couple of the larger frameworks and one or two micro-frameworks would probably be a great benefit to you (and your career). And don't roll your own framework. These days there's no reason to do so unless you're an expert in routing and the various design patterns required to do so. There's nothing wrong with building your own framework-agnostic libraries which you can drop-in to any of the framework-driven projects you have, but leave the MVC to the framework teams.
If you're trying to learn, roll your own and use it for your own stuff. If you're building for someone else, use an existing one. Don't just pick one out you think looks cool, nice or easy to work with. Compare the features of all of them with what you are needing to do and pick the one that will better suit your needs for that particular project and still allow you to extend it when you need to add new features.
You must be new here. We all hate Drupal. Everybody hates Drupal.
I just ported a legacy php application into CodeIgniter. Turned my assorted classes and functions into classes or helpers and saved them into their appropriate directories then set a config value to autoload those files. Then I created my controllers. Controllers are just classes that you name with the action they are doing - they map to url routes. I have one called "register" - so you go to http://mysite.com/register/ and it autoloads that controller. You have methods within that class that you can call from the application http://mysite.com/register/error/ would display an error state in the registration flow.... and error is just a method in the class "register". Within each method of the controller you can load helper code, classes and views to display your application. I find CodeIgniter to be very lightweight and logical/easy to work with (that's why you want a framework!) oh and there many helper functions included within the framework for common functions like uploading files, ftp, debugging etc. Great documentation and an active community - I am sure Symfony would work as well. YMMV.
I would recommend Laravel.
And a horrible one at that.
I suppose there is only ever one way to do a certain thing. 
i will echo others here: if it is to learn do your own. However if you are developing an app for someone else then use a framework
I just met a bunch of the Drupal devs at the pub a month ago. Cool guys, but I know nothing about the code base.
I don't! Well, I kinda do. But the things I can do with it, oh my. I use it when the project is a good fit. I do not use it when the project is not a good fit. And so it goes. 
I think some of the other commenters have already said it but I'll summarize it. SSL certificates are essentially the same from any given CA. The only reason why certain CAs charge more/less is the "warranty" that they provide. I have seen certain services pay out if your site is hacked - others if they ( https://www.rapidsslonline.com/faqs.aspx#Q18 ) misuse your certificate. Personally, just keep your damn warranty and just sign my damn certificate. You can pay a ton of money to turn the user's address bar green, which to your average user they won't care. In fact, they won't care if you use a CA from germany. The average user doesn't even know what a CA is, let alone why they should care who the certificate is signed by. It really is a scam, because CAs have been known to sign certificates for people for domains that they are NOT the owner. Browser makers have been quick to revoke their CA cert from the browser - but there will always be people who never get the update. I think this has been even more controversial when Firefox released the update that revamped how self-signed certs are handled. Instead of just telling the user "hey this site has a self-signed cert, the name seems to match but I can't verify it - are you sure you want to visit this site?" instead the page is something to the tune of: &gt; STOP DON'T GO TO THIS SITE IT HAS MALWARE OMG WHY WOULD YOU WANT TO EVER GO HERE BACK OUT NOW!!!!!!! CLICK HERE TO LOOK AT PICTURES OF CATS Chrome and IE's are still user friendly, but Firefox has gotten plenty of flak for their page. StartCom actually offers free low encryption certificates - https://cert.startcom.org/ which may be useful for you. I personally use gandi.net because I have found they have the most user friendly no-bullshit interface.
+1 for symfony, it really is leading the way at the moment. There is also a lighter framework built on the symfony components called silex.
There are a few possible valid answers here. You may not need a framework. It is very often unnecessary to use a framework to build a small application. "Small" obviously means different things to different people, so, in the end, use your own judgement. If you really think you need a framework, then you have two options. 1) If you're planning to create a large application or the application you are creating needs to be secure, stable, reliable, and so-on, then I would highly recommend you use a preexisting framework. 2) If your application is small or/and you are interested in a great learning experience, then, assuming you're not doing this for your job, build your own framework. You'll most certainly end up rebuilding it from near-scratch at least once or twice, but, assuming your moderately skilled prior to building a framework, you'll find that it is a great learning experience. Good luck.
Every good developer goes through this at some point. * They start up, learn to code. * In time they learn more advanced aspects of programming like OOP and development patterns and how to design architecture. * They learn about MVC or something similar and try to build an application with that in mind or try a framework that does this. * Better ones try a few more frameworks before settling down. * By that point you either want to use a specific framework (I am fully suggesting Kohana, Codeigniter, Yii and certainly not a bloated ones like Zend and CakePHP), or try to build one yourself. * It is good if after this you find things that you don't like about what you've done or what framework you are using. This is important. It means you are learning, even if you think that something is bad or inconvenient that really isn't and you just don't know why yet. It's never a bad idea to build your own framework. Just like with every other reinventing-the-wheel approach, you learn A LOT while doing so. But you should know quite a bit before giving it a real try. When I started up [Wave Framework](http://www.waveframework.com) then throughout the process I learned really in-depth what HTTP headers are all about, in-depth about web attack vectors like cross-site-scripting and request-site-forgery and how caching works in browsers, proxies and server-side. I learned how to build an API and how to build HMVC architecture that is loose and dynamic. I became a better developer, since doing stuff like this motivates you to learn so much. Some developers jump on a framework too early and this is not a necessarily bad thing, but know that a lot of jobs expect you to use different tools or frameworks, so knowledge of other frameworks and definitely in-depth knowledge of PHP itself is good. Unless you intend to build your career short or long term on a specific framework - which limits your options. We still have developers coming in who use jQuery a lot, but fail to implement the things that jQuery does without jQuery. This is never a good thing. Sometimes a framework is 'too much' for something very small. To sum things up: Use a framework or build your own if you feel like it is the best thing for your project. But if you don't have enough experience then do what is more comfortable. Learn about software design and patterns, try to use a framework or two. **Know that though that you will end up rewriting it at some point.** This will happen regardless if you use an existing framework or not.
http://en.wikipedia.org/wiki/Comparison_of_SSL_certificates_for_web_servers i use startssl and they are pretty good. basic ssl is free and is widely accepted 
Before you start thinking about refactoring all your work and porting it into some framework, ask yourself if it's worth the effort. Are you going to be maintaining this software and adding new features? Will your current design get in the way of your future work?
At Geotrust everywhere is a "?". What does it mean, because I want to buy this one: http://www.cheapssls.com/geotrust-ssl-certificates/rapidssl.html
Nice work :) 
I assume she's not a developer ("Perfect for me and my dev boyfriend!"), so anything that doesn't look like English is automatically PHP. It's just like parents that call every game console a "Playstation". 
That was deep! Literally! :-)
I'd do it the other way around. Roll your own, learn then use a framework. By the time you use a frame work, you'll have abetter understanding of your needs and which is best for you.
I lold
Fuck it, it's the thought that counts. I'd be happy :)
Why are you in this sub?
Hipsters.
every vacuum cleaner a Hoover
I believe it's a screenshot from redditgifts.
I now checked your code, and have several proposals 1. **PSR-0 compliance: Class naming** - Class names begin with an uppercased letter - The file is named like your class =&gt; class Imap in Imap.php 2. **PSR-0 compliance II: Namespacing** Put the library in an appropiate namespace, in the &lt;vendor&gt;\&lt;package&gt; Scheme, e.g. CNizz\Imap, and put the Imap class in there: namespace CNizz\Imap; class Imap { // ... } File: CNizz/Imap/Imap.php 3. **Better source-code directory name** You're developing a library, while most files might be classes, there can be additional resources like XML-Schemas, localization files etc. =&gt; Name the main directory "src" or "lib" instead of "classes" 4. **Method names** - Be consistent, either camel-case as in `returnBodyStr` or use underscored notation like `get_host`. Camelcases is probably better, as it adheres to the PSR-1/PSR-2 standards and is generally used. - Don't tell about the return type in your method names (`returnImapHeadersArr`, `returnBodyStr`). You already use phpDoc-like-Annotations. 5. **Coding style** Sometimes you open the curly braces on the same line, sometimes on a new line; be consistent! Look at the PSR-1/PSR-2 standards, or set your own own. But keep it the same. Always. 6. **Dont hide exceptions/errors** openMailBox: try{ $this-&gt;stream = imap_open($this-&gt;mbox,$this-&gt;username,$this-&gt;password); } catch(Exception $e){ var_dump($e); } When you catch the exception, do something with it ("recover"), or just pass it down, or throw your on exception. But don't convert the error Same in private function returnHeaderInfoObj($messageNumber){ return @imap_headerinfo($this-&gt;stream,$messageNumber); } @ is bad! As soon one uses a custom error handler (as in [set_error_handler](http://php.net/set_error_handler)), the errors are not ignored anymore. There are workarounds (establishing a null-error-handler, and setting the old one again), but one thing is a must anyway: If the method can fail, handle it. Check it, throw a [runtime-exception](http://php.net/RuntimeException) or [trigger an error](http://php.net/trigger_error). But somehow work with the problem, and don't ignore it. 7. **Variable names** `$array ` is not a descriptive variable-name. Use $emailData instead. or anythings which hints the contents of the variable 8. **Put constant values to constants** PHP's imap-functions return a lot of strings, which give information. E.g. "U" and "D" as status for unread, deleted mails. Your code improves in readability if you add class-constants like class Imap { /** * status-string, hinting a deleted message */ const STATUS_MAIL_DELETED = "D"; /** * status-string, hinting an unread message */ const STATUS_MAIL_UNREAD = "U"; // ... 9. **Better support for possible users of your class** - Add [unit-tests](http://www.phpunit.de/manual/current/en/) for your class in a seperate directory, e.g. /tests. This allows you to see, if a code-change breaks existing functionaility - Add a [composer.json](http://getcomposer.org) and register you library at [packagist](http://packagist.org), so over people can find and use your library - When you have unit-tests, you want to set up a `.travis.yml` for [Travis-CI](http://travis-ci.org)-integration 10. **Other improvements (I'll keep it short, ask if you need additional details)** - Use value-objects for the Header- and EMail-Datatypes instead of associative arrays. - [Guarded ifs instead of nested clauses](http://sourcemaking.com/refactoring/replace-nested-conditional-with-guard-clauses) - Put your examples in a separate directory like /examples Hope this helps, and feel free to ask any questions if you need some assistance on those points. I might fork and do some of those things later today, when I'm home. Also: Look at [www.phptherightway.com](http://www.phptherightway.com) 
Both use it.
No need to be sorry for disagreement -- that's how we make progress ;) You make a good point. Some parts of Symfony, especially, are difficult to understand, I definitely agree. I am of the opinion, though, that once you get over the initial hump (mountain?) of the learning curve, it starts to make a lot of sense and development speeds up immensely. But, what I said applies to other frameworks, not only Symfony. CodeIgniter, FuelPHP, Kohana, etc. Even Silex, which uses Symfony components, are going to be better choices than rolling your own because of the level of peer review going into them. Once you find a flavor that tastes good, I really think the benefits of using an open-source framework will outweigh writing your own by a huge margin. ^I ^have ^no ^empirical ^evidence ^to ^back ^up ^my ^claims ^;)
Be cool
Call solid CO₂ - Dry Ice Call Adhesive Bandages - Band-aids or Plasters Call diacetylmorphine - Heroin Call Copiers - Xerox Machines [Wiki - List of Genericized Trademarks](http://en.wikipedia.org/wiki/List_of_genericized_trademarks)
The question mark just means that the person that made the table didn't have the information at the time. Also, the Geotrust cert listed in that Wikipedia table is the EV(Extra Validation) cert which costs $299 and is not the same as the one you linked to. In fact I would be wary about the site you linked to as the price they list is about 1/5th of what Geotrust/RapidSSL sells them for.
Yes, a novelty item relevant to their interests makes them hipsters.
Having an interest they clearly have no interest in makes them hipsters.
I believe you are looking for a little more than a script.
Personally I would do the opposite. Try a few different frameworks to see how they work and what parts you find are the biggest time savers. Then roll your own later on, once you have that knowledge.
If you feel like writing a framework, do it for fun, you will learn a lot about architecture and software design, but don't use it on a production environment.
Oh, I'm not arguing that point. And I'm not saying *not to* or that frameworks provide no security benefits. I'm just pointing out the semi-obvious point that the rhetoric that *frameworks make your code secure* is a complete falacy. It may help, but in the end, it's still up to you...
Thanks everyone for taking a look at my class. I'll definitely work some of your suggestions into future commits. Just so you know this class was written roughly 3 years ago and has been sitting collecting dust until now. It predates namespaces and other features. It also has a lot of my old habits in it. Thanks again for the critique!
Because I used to preface all methods that returned something with return. I don't do it anymore. That change would have to be a version 2 change. I do agree with you though. It was just an old habit from years ago.
Yay! Another list of BS items that dilutes the search results. Tip: either post something unique, or at very least post good examples. All the examples that are posted are vulnerable. At least show good versions as well...
I am looking at the results. The results are that PHP serves a much larger community than those other languages and I happen to see that as a good thing :)
&gt;The id parameter should be escaped by using appropriate functions like mysqli_real_escape_string() before putting them in the query. Stopped reading. This is wrong, use parameterised queries (prepared statements).
what would this be called?
/lib isn't a set of libraries. It's what should be called /src I would expect lib to be external libraries required by Lifestream. Of course it makes more sense for compiled languages... 
Any site speaking about php security that mentions SQL without using prepared statements should be disregarded in its entirety. Most of the stuff on this page that isn't obvious is wrong.
Might not be original author - previously posted 24 days ago.
Don't ever use MD5 for passwords, even with a salt. Always use crypt.
How does using parameterized queries provide any inherent benefit over say, regular queries with explicitly escaped input? Yes, it might be more elegant your way but I don't see anything inherently wrong about the other way.
I see no reason to use crypt over md5 unless you actually want to have some portability issues when you move your DB on a different server.
It's very easy to crack MD5 and get the password. And the [PHP Manual](http://www.php.net/manual/en/faq.passwords.php#faq.passwords.fasthash) says to not use MD5 passwords. Portability really isn't an issue when it comes to password security. **Edit**: The MD5 hash for "password" is "5f4dcc3b5aa765d61d8327deb882cf99". A quick [Google Search](https://encrypted.google.com/search?sugexp=chrome,mod=3&amp;sourceid=chrome&amp;ie=UTF-8&amp;q=5f4dcc3b5aa765d61d8327deb882cf99&amp;qscrl=1) with that hash is enough to crack it as well as many other common passwords. **DON'T EVER USE MD5 FOR PASSWORDS**. If you are, I'd love to know the URLs of some of your work for a security audit. 
So, aside from arguable elegance and usability benefits, the answer is technically no - there is no inherent difference.
In the same sense that there is no inherent difference between a C string and a C++ string yes. One is just an abstraction of the other, but there is a long history of one of them causing major security problems that the other prevents entirely. Just because it can be used safely doesn't make it comparable to the better option. The flaw in my analogy is of course that there exist reasons to use C strings over a C++ abstration. In PHP, there is no reason to choose the unsafe method over prepared statements.
1. Source control. Try git. 2. Implement database migrations. The current db schema should be considered migration 0001. Make sure to track future alterations with git. 3. Refactor and track changes to the server configs, cronjobs, daemons, upload directories and code deployments. You might want to setup some capistrano and chef deployment management here. 4. Split the database up per website. Or even adding separate db users per website with table-specific permissions will help a great deal. 5. Same goes for other resources, like file and directory permissions. If a website doesnt require access, dont give it. 6. Write regression tests as you go, right from the start. Maybe start by hiring people. It's probably not a 1-man job. 
you mean the nintendo.
Good piece of middleware. I would prefer if you used composer for your autoloader. 
Have you tried it without the "\s+" next to the title tags? With those there, it would only match a title with whitespace after the opening tag and before the closing tag, so "&lt;title&gt;blah&lt;/title&gt;" would not match. You can then use trim() to remove any whitespace that is picked up. &lt;?php $count = 0; $dirt = 'blog/2012/oct/'; if ($handle = opendir($dirt)) { while (false !== ($file = readdir($handle))) { if ($file != "." &amp;&amp; $file != "..") { $count++; $filedata = file_get_contents("$dirt/$file"); preg_match("/&lt;title&gt;(.+?)&lt;\/title&gt;/si",$filedata,$matches); $title=trim($matches[0][0]); print("&lt;a href=\"$dirt".$file."\"&gt;".$title."&lt;/a&gt;&lt;br /&gt;\n"); } } } ?&gt;
Step 1: automated backups. Step 2: basic source control. Step 3: basic testing, automated deploy. Step 4: redundant servers. Step 5: better testing. Step 6: disaster recovery plans. try them before proceeding. Step 7: start fixing the code. The general idea here is, yes, surgery is needed, but you need to really, *really* nail your safety down before you proceed, or Shit Will Catch Fire And You Will Catch Hell.
Hope you don't mind - I just forked this because it seems to be doing a lot of things I'd like to learn about.
Stahp PHP. You're drunk, go home.
I have been in your position, I feel your pain! * Befriend the administrator of systems if they have one, seriously he will be your ace in the hole. Anything you say will be fact checked by the next most technical person in the company, find that person and buy them lunch. * Full end-to-end backups of those machines (both of them), and you restore these backups and test them before you do anything else... then do it again to make sure you understand the deployment process... then write it up on the wiki (coming soon, keep reading!) * Please don't install a new instance of the plague that is SVN. :) Stick with Mercurial, it is cool... or my favorite is git, or even bzr... down with centralized painfully slow version control. * Don't just setup version control, solve multiple problems at once! I recommend something like Gitlab [http://gitlabhq.com/] (if they want to keep corporate stuff inside) or an account with http://github.com if they are open to it (you can have private secured repo's on github). These will solve a ton of problems for you in one go... gives you a wiki for documentation, gives you a bug tracker for tracking bugs, gives you multiple project based source control, gives you a central repository to make the company feel good... this covers a ton of your problems. * You problem screams SOA to me -- because of the easy caching you could do and the way you could fix sites one by one. Create a simple RESTful wrapper around the core DB .. don't get clever (simple php is fine), clean and simple json wrapper... then use nginx around that for caching (nginx does a great job of respecting cache-control, etc)... one by one replace those database calls with RESTful http calls without changing anything else. 15000 products == 100% in cache, served at full nginx speed -- just put a little cache expire logic around it and done. * After that, you have decoupled your database completely... now you can normalize it if you want to, go nuts, you now have a clean reference point to test against (your RESTful http calls) * Finally, I would merge all the sites into one project, with a simple vhost aware configuration for customization... * Then you can enjoy your next year of back-filling documentation that no one ever wrote down. Bonus points for: * Automating Testing -- You might wonder why the hell testing is in the second half under bonus points. Because focusing all your time on testing when you start is going to make you seem slow / bad at your job... and your early reputation will stick with you for awhile -- you only have so much time before you have to show something useful. * Automated Deploys -- Again, I recommend you put this off, it sounds like they have a simple deploy so if putting git checkout prod &amp;&amp; scp ... in a script makes you feel better go for it, but it is of low value to the business if all it saves is some of your time, and doesn't show that you are a good hire at all (perception not reality) * Continuous Integration -- Another nice thing to have, it is great with Gitlab to simply push your code to the dev branch and have it built and tested and an email report sent to you, it is also great to have a production branch that deploys to prod. But the truth is, in the first six months, you will babysit deploys anyway. :) Good luck.
Its kind of difficult to say because the hours involved can depend on how experienced you are and whether or not you're building a custom app from scratch or using a framework that you're comfortable with?
$15k
The loops I'm talking about is having to bind the results to the array, and for that you have to know the column name, right? I don't know the column names, so I'd have to get the column names doing the result_metadata. Ok, maybe that's only one loop, but a gigantic pain in the ass. Isn't there an easier way?
I finally plugged your code in after realizing that the code I had was trying to get all the field names. TOTALLY WORKS, and way easier than I thought. Thanks so much!
If you're adding 30-40% on -- and it's a tactic I've seen used with success elsewhere -- then you're fudging something, somewhere. You need to get used to scaling your base numbers first instead of tacking on this magic number at the end, otherwise you're not truly representing how long the individual tasks take to perform. It's a hard shift to go through the "right, i'm going to take my fudge out" process but I think it's worthwhile. That's not to say that you shouldn't ever book any contingency, but IMO it should be more of the order of 10%.
Would you like to do this in PHP?
http://www.phptherightway.com
Firstly you need to break it down much further, exactly how one of the other comments has specified. This breakdown makes it easier for you to get a large estimate - and then if the estimate needs to change it makes it easier for the client to understand why. ("Oh look we forgot xxx on the original spec", rather than just "yeah it's gonna cost more now"). If the client is happy with it, I'd be very inclined to develop and deliver this iteratively - in a more agile-style approach. There are several benefits to approaching it like this; * You can deliver early. This means that you will get paid (if you're contracting/freelancing?) earlier, it means that the client can see progress. It also means you can get feedback from the client before you're too far down the line. * Reactions to early stages allow you to react to and refine estimates for later stages. Are they likely to be a stickler for detail and micro-manage? How easily do you work with their requirements? Is there a lot of potential for scope creep? * You get more practiced at estimating. You begin to learn how close your estimates are to how long it actually takes you, and you can start to compensate for this. * Less risk. If for any reason the project needs to change or be abandoned, you can likely find out before you've committed too much time and development effort. Do you mean you need to provide an estimation for christmas time, or completion of the project? If you're looking to complete the project by then, alone, then I think that's probably unrealistic. What you don't mention, that could make a huge difference:- * Are you responsible for the frontend? Design? Scripting? Cross platform CSS (including mobile devices)? Accessibility requirements? * Are you responsible for the server? Backup? Storage? It sounds like you're dealing with a lot of files, do you have to worry about whether the infrastructure will support this? Are you expecting high demand? * Are you planning to use a framework? Are you familiar with one? What platform are you building on?
My hobby : Web Designer, PHP/MySQL programmer, CodeCharge Studio projects developer. Over 8 years of web design experience. I have created several CMS (Content Management Systems). www.visionto.nl is my personal hobby site. I'm available for web ccs projects (codecharge studio ) worldwide, contact me at any time. I always have new ideas and solutions. You can communicate with me in: English, Dutch.
From a technical perspective, just browser and OS/app support. From business and consumer standpoint, it's a trust mark.
If you distribute any if your code or work on any large projects you should really get in the habit. If nothing else, it'll future proof your code.
If you're going to put functions in another file, just define them as usual and pass a string of the function's name. function print_hello($name) { ... } $app-&gt;get('/hello/{name}', 'print_hello');
I was thinking between that and 20k.
He just have you a snippet? I challenge you to get a select query populating an array down to less than three lines in any language?
If a project is too big to fit into a single silex project, perhaps it's time to think about moving it into a bigger symfony2 project?
You need to create user stories. This is an Agile technique but you don't need full Agile here although it could help with testing. You also should hire someone to do QA. User stories are basically a statement of a feature and how it works. For example, "User wants to upload files to a box". Then for each user story write tasks. For example, "Task 1: Design user interface for uploading". Estimate the time for each task(it always takes longer than you think it will so increase the time by 33% at least). This way the customer will know when each feature(user story) will be delivered. You can deliver user stories to your QA or to your customer to review as you are designing. User stories also make it easy for you or your QA to verify that things are working because it turns into a list of things to test. Make sure your customer knows these are estimates and that if they make changes then it will cost more and they still need to pay for your time. 
I thought the OReilly PHP, MySQL and JavaScript book was a good beginner book.
So when I wrote the talk I wanted to choose names that were more specific to my examples, and therefore hopefully easier to understand. I didn't want to have to explain the traditional names. Return in particular I found to be confusing. But I do make mention of the traditional names in the video.
Juste create an array that contains all of your pages: $pages = array( array("page" =&gt; "pageA.html", "namePage" = "Var_A"), array("page" =&gt; "pageB.html", "namePage" = "Var_B"), ); Then, make a boucle: foreach ($page as $pages) { ?&gt;&lt;a src="..."&gt;Your link ...&lt;/a&gt;&lt;?php } This code can be improved, but this is a good start. For exemple, you can create a class for each page, then you store an instance of your class in the array. Then you execute $instanceOfThePage-&gt;display(), this function will be different for each class. Edit: Yeah, I'm not good at writting a piece of code, specially when I do it fastly :P
&gt; if ($page["page"] = $page) { something seems... not right here.
*edit:* Sorry I misinterpreted your code. It kinda makes sense now.
 $pages = array( 'Page One' =&gt; 'page1.html', 'Page Two' =&gt; 'page2.html', ...etc.. ); foreach ($pages as $title=&gt;$url) { echo "&lt;li class='" . (current_url() == $url)?'active':'') . "'&gt;&lt;a href=... } 
you can do this all in css too. place the page name into the class. the wrapper ul should display the current page from $_SERVER['REQUEST_URI'] &lt;ul class='page3'&gt; &lt;li class='page1'&gt;&lt;a href=''&gt;Page 1&lt;/a&gt; &lt;li class='page2'&gt;&lt;a href=''&gt;Page 2&lt;/a&gt; &lt;li class='page3'&gt;&lt;a href=''&gt;Page 3&lt;/a&gt; &lt;ul&gt; then in css you write code like this: ul.page1 li.page1, ul.page2 li.page2, ul.page3 li.page3 { /* your active style*/ } in other words, when the wrapper UL class matches the LI class name then the active style css is applied.
Definitely move toward using an array of pages that you know are allowed. Because you are using file_get_contents to load page content, you should be **extra cautious** about what files you allow contents to be loaded from. By using an array of expected page values, you can more closely control what is accessible. Always remember that when it comes to PHP security, you can never have too much. With that said, keep learning PHP, but also look into learning a few good frameworks. CodeIgniter is very easy to pick up, and can teach you a lot about writing OO code rather than functional code. Keep your code clean and organized and as much as possible, try not to repeat yourself. If you have functionality that is used on several pages throughout your site, consider how to best make that functionality something that can be re-used and customized for the variants you need it for. If you are interested in learning CodeIgniter (and later Bonfire), Please feel free to contact me. I'm happy to give you plenty of tips and suggestions to help you become a better PHP developer. Happy coding! -Alex PS - I took some time to write up how I would manage this type of implementation - Feel free to use my code: [active page](http://pastebin.com/LTH6eRiU) - My solution both checks to ensure that the page requested is allowed (via an array of allowed pages), delivers a 404 type page when the page requested doesn't exist, returns a menu of pages and ensures that the current page has an active class in the menu. I hope that this helps. Also to note: I've removed the .html from the page names. This allows for you to use php files for page content, as I assume that you may wish to use PHP within your content pages. If you wish to retain the .html portion, you could alter the code to strip it out of the $_GET['page'] bit, as it would be just for show. Good luck!
or you could shorten it too &lt;li class="&lt;?php echo ($page == 'page1.html')?'active':''; ?&gt;"&gt;...
For page switching I use the [switch\(\)](http://php.net/manual/en/control-structures.switch.php) function. For example; **HTML:** &lt;a href="page1.php?page=home"&gt;Home&lt;/a&gt; &lt;a href="page2.php?page=about"&gt;About&lt;/a&gt; **PHP:** $page = $_GET['page']; switch($page) { case 'home': echo 'blah'; break; case 'about': echo 'blah'; break; }
Blind leading the blind. 
Aside from the various tutorials and of course, the documentation (I use this the most for reference), another great resource is the IRC channel. Find us on freenode in #codeigniter - There are a lot of old pros there that enjoy helping out people who are new to the framework. I'm SirDerpsalot. I'm also the channel owner for #cibonfire, which is for the CI based Bonfire framework.
The NetTuts series of tutorials are really great for getting started with CodeIgniter, though you should be aware some of the older tutorials deal with earlier versions of the framework (v1.x). Phil Sturgeon, a CodeIgniter developer also has some useful information posted on his blog (http://philsturgeon.co.uk/blog) he is also one of the developers behind FuelPHP which a pretty nice framework as well http://fuelphp.com/
That looks like a painful templating language. What is it?
I did the nettuts above when I started and I felt pretty comfortable with it and MVC programming concepts when it was done.
It's very plain (and not very secure) PHP. We're trying to help.
Maybe. I seem to remebber "ZEND" being in its name. It could just be that my memory is broke.
Thanks for comment ! I didn't know mysql_ was depricated. I'll go read about PDO to integrate it. 
If you're new to programming dynamic websites. Start by learning the basics of php with a project. To do this, purchase or find the Lynda.com php beginner video. It will take you from knowing nothing of php, to understanding basic synatx and concepts. Before you do this, you should bare minimum known html. Books are for once you understand the basic concepts of programming. Such as after you finish the lynda.com php tutorial, I would then recommend O'reily's Learning php,mysql, and javascript(This is a single book), then snag a copy of O'reilly "programming php" to read through to get an idea of PHP's OOP syntax. After that you might snag a copy of PHP cookbook, but at this point you just need to start looking at other code to see how it's done. 
Anyone says they AREN'T still learning are either lying, dead, or have nothing useful to add to any conversation. There's always something new to learn; always a different solution to figure out; always a "better" way of bettering your ways. Have an upvote for your wonderfully simplistic (and honest) comment.
well, i offer your this: http://www.w3schools.com/php/php_intro.asp i didn't learn php with a book and i regret nothing :D edit: they tell you to download apache and stuff. just download xampp (http://www.apachefriends.org/de/xampp.html) the all-in-one webserver for developing :)
Usually good etiquette to warn people about a 33MB pdf in the title.
[Some will complain](http://w3fools.com/) about w3schools and claim it's a bad source, but I think they're being a bit ridiculous. It's a great source for starting out on PHP and MySQL (as well as HTML, CSS, and JavaScript). Don't use it as the one and only source of all that is true about PHP and MySQL, but you can use it to start learning and you'll do great. Speaking from experience.
The neckbeards will be in to downvote you for linking to W3schools any minute now, prepare yourself.
I typed it in the reddit comment box manually as a throwaway example.. also, some of us have different coding standards we have to adhere to.. I also think it's pretty readable, which is all that matters here.
You really should look at using an MVC here, having all that logic in your [index file](https://github.com/regchanorg/RegularBoard/blob/master/index.php) has left you a huge mess. I only spent a few minutes looking over this, but the code really isn't maintainable. I'm also not seeing anything here that puts this above PHPbb or Phorum.
Thanks! Actually, I also barely know how to use git, I have to look up documentation at every step. I keep trying to learn it but I get sidetracked by actual coding, which is much more fun. 
1. they are owned by Oracle, who has a negative incentive to improve MySQL. 2. they are pretty slow to ship. 2 years since the last [minor](http://en.wikipedia.org/wiki/Software_versioning) release. 3. PostgreSQL is much more standards compliant, ships more regularly, and is [taking off](http://wekeroad.com/2012/07/19/postgresql-rising) right now. 
I finally read through most of the comments on the site I linked above, and a lot of it seems nitpicky. Some of it is very correct and worth noting, but most of it just seemed picky and didn't seem to be hugely important for a beginner. I think W3Schools is a fine place for a beginner to start.
Was wondering that too. I also use underscore prefixed functions and variables but only to highlight private vs public functions
save over 9000 hours.
ok, at first i thought "wow, how did i not think of this" and then i saw &gt; 404 if you ever work with ajax, you will hate yourself for writing this as the only line. it says "nope" everytime, you try to request a site. of course, you could ignore that, but you won't be able to differenciate between "ok" and "nope". you're abusing headers.
Thanks, the upvote/downvote ratios are reassuring!
Assuming you can assign a unique identifier to each page you can use variable variables. &lt;?php $mypageA = NULL; $mypageB = NULL; ... $mypageZ = NULL; $page = "mypageA"; $$page = "active"; ?&gt; &lt;a href="#" class="&lt;?php echo $mypageA?&gt;"&gt;My Page A&lt;/a&gt; &lt;a href="#" class="&lt;?php echo $mypageB?&gt;"&gt;My Page B&lt;/a&gt; ... &lt;a href="#" class="&lt;?php echo $mypageZ?&gt;"&gt;My Page Z&lt;/a&gt; I'd probably go with using an array of allowed pages but this can be handy in some circumstances.
Some very useful ways to analyze the performance of a site. Does anyone know if the talk itself will be released as a video? I would like to pair what he is discussing with the slides.
I think to be fair he wasn't looking to surpass nor intend to surpass these long-time established alternatives. OP: Is this your first attempt at production? Regardless I applaud the effort. But please do take into account what krues8dr says and use a pattern like MVC. This will make your project so much better. Think about how easy themes and styling will be when your logic is minimal in the presentation.
I took a quick look and small suggestion, opposed to using: require_once ('/PATH/TO/assets/config.php'); require_once ('/PATH/TO/assets/strings.php'); Create a default config file .yml or something, or - at least use constants that will define paths
You are correct - I never intended to be better than anybody. This is a system developed for my own personal use that I decided to make public. Now, having said that - this is my first real attempt at making a project of this scale available (or not available, for that matter) and I'm learning as I go (which also means correcting and simplifying as I go). I have thought about the option to theme, but realistically, am far from that point in the codes current state. The part about the index being a "huge mess" - I realize that to an outsider's perspective, it is, and I have put dealing with it on the back burner as I have absolutely no problem traversing and modifying it as it is now - however, it won't always be like this. Again, to restate my earlier intentions, this was never meant to surpass anything. (If people want to use it, keep tabs on it, or contribute, great - I made it public for that reason. If not, no big deal.)
I like to have a controller over what libraries are used.
&gt; The part about the index being a "huge mess" - I realize that to an outsider's perspective, it is, and I have put dealing with it on the back burner as I have absolutely no problem traversing and modifying it as it is now [...] You will. Just wait a year.
What I'm really having a hard time with is turning things like mysqli_fetch_row($ROW)) into a function (or some sort of call back). So instead of (long line of code, open this query) I would like for it be something like start_loop(); (overly simplified, but Google is failing me - or I just don't know exactly what I'm looking for.) 
mysqli also supports prepared statements.
If it's not obvious, basically the suggestion to use MVC means you shouldn't be inserting/updating table rows while you are returning html. It also means that the different 'areas' of your index file should be pulled out and separated into actions. I can tell you are proud of your creation, and I applaud you. Hopefully, you are not too disappointed with the responses. Some of us are very passionate about using software design patterns.
Does the password have any strange characters? was thinking that if it had a dollar sign for example this could cause a problem if you were specifying the password using double quotes `$pass = "aaaa$aaa";` 
Uh... composer.json does that for you? Why the downvotes?
The error message seems to be indicating that it is not even able to connect/find the MySQL server. Do you have the correct server address? Port number? Is the MySQL server or firewall preventing access from any IP address other than localhost?
Four spaces instead of a tag and K&amp;R? Get that shit outta here.
On the contrary, I am thankful for the responses. Being the only person working on this and knowing absolutely nobody that I can talk to about coding or bug testing or - well - anything of this nature, hearing anything at all about this project is greatly appreciated (and, I'll admit, along the lines of what I was already thinking as far as what needed to be done.) Don't want to come off as desperate or anything, but the responses (positive, negative, or simply suggestive) are greatly appreciated and welcomed.
I would really like if this library used PSR-0 namespaces w/ the composer autoloader instead of it's own autoloader. I think it would be much more modular if it did.
Yeah, roll your own first. By going in ignorant (I am not using this word detogatively here) of the common methodologies, you will learn firsthand the problems that frameworks (try to) solve, and you might come up with really interesting ideas yourself. Then, after you use a few franeworks, you'll notice the things you could do better next time.
Which is even worse 'for the case of interpreted languages'. Facebook couldn't even let one sit happy on their frontend, they had to modify and compile *that* to get it fast enough. My overall point though was that 99.99% of websites are never going to need the scaling efforts that facebook or twitter do, that would take them out of using whatever their favourite web scripting language was to start with. So go use whatever the fuck you want, just be smart about it.
Silex isn't just for projects that fit into a single file.
http://lmgtfy.com/?q=php+mvc+tutorial
Some things you should look at: 1. http://www.phptherightway.com/ This page explains the general concepts of good programming in PHP very well. 2. http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1 The founder of Sensio (which is the company behind Symfony and lots of othjer major PHP projects) explains in a very detailed series the concepts of MVC, and how to get there from a beginner's point
I assume you want to create a simple Sudoku-variant on top of PHP and HTML/CSS rendering. Some advice: Keep model and rendering separated: There should be some kind of array/[SplFixedArray](http://php.net/SplFixedArray)/custom class which holds all the values, and is saved to db/session. And then there is a simple renderer which outputs the current state in HTML. 
http://net.tutsplus.com/tutorials/php/codeigniter-from-scratch-day-1/
Realize that MVC is more a theory and it's execution can be interpreted many ways. Sometimes the amount of MVC in a project can be strict, other times not so much. There's a tutorial on php frameworks on Lyna.com that goes over mvc really quick then goes over the model, the view, and controller of zend, symfony, code ignitor, and cakephp, while showing how one can do simple stuff to create a website. It does some command line stuff, so if you don't know basic unix, learn that stuff first... I was in the middle of it before moving over to a time sensitive interactive programming course for python on coursera, so I don't know as much as I should and anyone feel free to correct me... Anyways, here's some examples of MVC execution, others may disagree and I invite you to join in and correct me if I'm wrong. *1. The model. In the simplest sense possible, this is classes/objects mirroring your database(or other 'real world' things that exist inside of your system that may not need to be in the database.) You may have heard the term ORM (or object relational mapping) -&gt; this term means there's objects (oop php) mapped out to your relational database, so most of the tables in your DB get a class. This models real world things and ideas that exist in your system. *2 The controller. This does lots of the heavy lifting. You'll probably want to re read this after reading the view because these concepts are heavily intertwined.. this is where stuff can get weird. The controller acts as an intermediary between the view and the model. The controller will make calls to the model (the datbases objects) and place them inside of html. 3. The view. Think of this as a class or a series of classes called "page" or something. From here you can do like wordpress and have a function $page-&gt;getHeader. Or you can go less abstract and just write in HTML and make the controller calls you need. Sometimes this is a class, sometimes this is just text with a minimal amount of php calls in it. Imagine a file where you have $page-&gt;getHeader(), followed by $page-&gt;getContent($pageNumber,$pageState,$pageAction) and then $page-&gt;getFooter. or something. Note, this idea can be interpreted in many ways, and I might even be a little off. The getHeader stuff I saw in wordpress, In zend the view could just copy and page html for the header and footer then the content is dynamically created by a function, then that "view" file is then called on the index page by a controller. Model, database like stuff but not limited to just the DB, models information. View, what the user will see, your UI UX front end stuff. Controller, intermediates between the two. Goes and gets the Models info for the view, sometimes print the view stuff out on the page, and if the user inputs data into the view via a form, this will run all the processing/validation etc, before sending the information over to the model to actually enter into the database for storage. 
I see one big (for me) problem: you have mixed repositories with active record. I mean - if you are creating your entity with Repository#create() call then why are you save it via Entity#save() ?
At the moment Entity::save() just calls EntityRepository::save($this). I only added it because I think it's easier to use.
&gt; I have basic knowledge of HTML and CSS. If all your knowledge is HTML/CSS and nothing more, get a programming book instead of a PHP book. You need to learn how to solve problems with code, not the syntax. For instance this one: http://www.2shared.com/complete/Lf0ZDmdh/IntroductiontoAlgorithms3rdEdi.html Then once you know how to write programs, learning PHP will be just a matter of learning a new syntax. If you already know how to program, please disregard my message.
This is really great advice, thank you. I will be actually drawing out the functionality plan today to go through every single interaction with the site, this way I will be able to see every single task the application will have to fulfil. Would you quote per part of the site, or per hour, or for the whole application?
Both of these. Really great recommendations.
I've had some advice from someone else suggesting that before I quote I draw up a interaction diagram, where I will document every single feature and working function for all the interactions the user may have with the site. One thing that I've found is, although the site is split into three main parts, is that there are some core interactions that take place a key parts of the user workflow. Would you, then, build this in an agile manner, and then create these interactions after each part is built? I've not actually built anything in an agile manner. Do you have anything to guide me with this process? I understand the ideas behind it, but would be good to get some more information. Do you bill after every iteration is signed off on by the client? I will be building this using CodeIgniter, and will also be building the front end of the site. All design is done already, by the client. But it is around a year old, and is already starting to feel a bit dated, especially for the area of servie they're offering. So might also suggest it could do with a refresh. How much might you quote for something like i've described, if you flesh out the parts I haven't mentioned yourself?
&gt;Would you, then, build this in an agile manner, and then create these interactions after each part is built? If you are already aware of these interactions then build them in as you go. One of the ideas of agile development *is* not to plan or develop too much for requirements beyond the current stage, but that is due to how much these requirements may change or disappear as you go on. If you know that these requirements aren't going to change then it makes no sense to ignore them and you may as well keep them in mind as you build each stage. I've personally adopted a lot of the features of XP into my own workflow, you can read about XP here http://www.extremeprogramming.org/map/project.html and let me know if you have any questions. I use XP methods because I've found them wonderfully pragmatic when it comes to dealing with changing requirements or projects that are hard to cost up front, it also keeps the client more involved in the process, which always seems to be very appreciated. What I would say is that agile methodologies (XP in particular) don't have to be adopted wholesale, you can easily pick some of the features of them (iterative development, close contact with client etc) and see the benefits of those, while leaving out facets which you're not comfortable with or aren't appropriate.. Yes, I absolutely bill after every iteration is signed off by the client. I am self employed and I don't think I could possibly survive any other way - waiting until the end would be far too much risk for me and my clients. Obviously it's tricky to estimate without knowing the ins and outs of the project but I would maybe estimate based on 2-3 months of work (1 person, full time, experienced with CI). This doesn't mean it could be complete in 2-3 months though, because there'd probably be a lot of back and forth with the client between stages..
I'm thinking that it could be 2-3 months worth of work. Other seem to suggest that this is accurate for what I have posed.
This is really what I was after, I can break the project down into hundreds of different parts, but would still be a bit confused as to how to price the whole project!
I'm betting that this "lead dev" is a leader in a language other than PHP and simply doesn't understand how PHP works as well as he might understand C or Java or any other stricter language.
Don't get hung up too much on what is agile/not agile. Here's how I normally work larger projects: * Map out the whole system at a functional level. Map each interaction like you say, get the client to sign off on this. Depending on the client's technical level I either do this myself, modify their specification (NEVER use their wording.. just in case), or we build it together in the same room. This gives them a map of how the whole project will progress and a rough estimate of timing and budget for the whole project. * Plan what the stages are. This can be the first few stages, or all of them. Depending on the size of the project. Again, let the client sign off on this. * Plan and estimate the first stage/iteration in detail - this sometimes can just be a "spike" - a proof of concept for the trickiest parts of the project. Get the client to sign off, then develop it. * Plan the next stage based on their feedback, occasionally adjusting the overall plan where required to give an idea of overall progress.. REMEMBER to use this feedback. Not just theirs, but your own - did you over/under estimate? What went well about this stage? What went less well? (This i think is absolutely the most useful thing about any agile development method I've ever used.) This prevents scope creep, but if there are changes to the specification or functionality that needs to be added to the scope you can identify and deal with it early, before you're too far down the road. I have a contract I get signed before any development begins that lays out clear payment terms. These vary based on the client, but generally includes a 30% deposit for each stage for new clients or larger projects.
You wouldn't say that if you knew him. He can be a bit difficult sometimes but he gets the job done and he gets it done well.
Wow, that's probably more information than 99% of userland PHP devs need, but great in-depth post. I can't vouch for it's accuracy (heck I didn't even read the whole thing), but it looks very thorough; draws comparisons to other languages (including python and c), covers internal data structures (ZVAL's, opcodes, etc.), and all kinds of stuff.
There are some great descriptions here, and I recently learned MVC at my new job myself using Zend and Kohana frameworks... To describe it **extremely** simply: MVC is a design pattern that separates the "business logic" (controllers) from the "data interface" (models) from "what is drawn to the screen" (views). For PHP MVC specifically, it is generally implemented in the following way, but not necessarily 100% of implementations have all of these elements: * Every request consists of a particular controller and particular action that lives within that controller * Single point of entry for any request to the application (root's index.php file, usually), through which a "bootstrap" file is eventually included after environment setup that "routes" the request through the MVC framework to the requested controller and action * "pretty URLs" via mod_rewrite so that the first two slash-separated URI parameters after the domain become the controller and action requested, with all following parameters (delimited by slashes) being parsed as some form of "GET" parameters to pass into the controller/action. i.e. for a controller called "setup" and action called "language", the requested URL would be *http://&lt;domain&gt;/setup/language/&lt;uri param1&gt;/&lt;uri param2&gt;/.../&lt;uri paramN&gt;/* * Controllers contain action methods that are called by the bootstrap file based on the content of the URL requested by the user. This is the "routing" of the request. * When a controller needs data from a database or elsewhere, classes called "Models" are instantiated that provide all interfaces to data within the datastore of choice for the application, separating all methods to provide data to the business logic into their own distinct classes. The idea is that this set of models can be replaced with any other set of models to provide access to any data store running under the same business logic without touching the rest of the code * When it comes time to output content to the screen, a view class is instantiated that, based on the controller/action combination, includes a hybrid html/php file to draw HTML to the screen. The raw HTML is hadcoded into this file, with embedded PHP to pull information that the controller pushed to the view. Using this general structure, you can: * Modify your VIEW files to change look and feel without worrying about interfering with the way data is loaded into the program * Modify your MODEL files to provide data to the system without interfering with the business logic and display content * Modify the display content without changing how the business rules and data is provided to the display content. 
Okay, than let's call it something else. I only want something that gets me rows out of the database and wraps it up to objects. From my point of view ORMs can never load objects with relations in the most efficient way, which is why I would write custom querys instead. That is not to say I wan't to write querys and deal with arrays each time I wan't some simple objects and thats where my lib comes into play.
An ORM that doesn't map relationships seems a lot closer to [Table Data Gateway](http://martinfowler.com/eaaCatalog/tableDataGateway.html)
Great article. It doesn't mention however that there is alternative data structures in the SPL : http://www.php.net/spl
Indeed, it would. The last time I did a comparison of iterating large lists in Python with same sized arrays in PHP (just using consecutive integer arrays), the performance differences were quite in favor of Python. Perl was no better and Ruby was... well ... it's Ruby (let's just leave it at that). As you can imagine, though, the differences in performance are obviously going to be quite variable in PHP's case since these simple arrays in some other languages can come out to mere pointer arithmetic where in PHP it could get a lot more complex depending on what you're doing.
Indeed, `SplFixedArray` arrays take up 1/10 the memory compared to regular arrays, purely because the array keys must be indexes and the array size must be fixed. Very interesting.
I try to play with it sometimes at home, but I'm kinda stuck on 5.2 at work :(
Have you seen [You're being lied to](http://blog.golemon.com/2007/01/youre-being-lied-to.html) and [Debugging Variables](http://derickrethans.nl/debugging-variables.html)?
Less in dept than this article, but I also appreciated [this](https://www.youtube.com/watch?v=bxxIXPc9IR8&amp;feature=channel&amp;list=UL).
This boggles my mind - I prefer tuples/lists/dicts to php's array any day of the week. I'd be interested in hearing how you're expecting to use these types (specifically dict since you're talking about an array) and how these types are failing you.
The main issue is that dicts don't preserve order. That was weird for me. Creating a list of tuples is just so *hackish* by comparison - especially since we're talking about the web and you're dealing with keyed lists *all the time*. The *other* thing is that dicts create a reference and not a copy by default, though lists don't. Just lots of unexpected gotchas in there.
checkout the yii framework :) http://www.yiiframework.com/
&gt; The nNextFreeElement member of this struct stores a unsigned long containing the next integer value to use when we append to this array. It starts at 0 and only gets modified whenever we append a new element to the array using a positive integer value. Just a little more clarification, the nNextFreeElement apparently only gets updated when you use a new positive integer value that's *greater* than the current nNextFreeElement. I know it's not the point of this article but I was curious so tested it with a script real quick :) function DJBX33A($key) { $hash = 5381; what's the significance of 5381 here? just curious. nice article btw. 
[/r/forhire](http://www.reddit.com/r/forhire) is a good sub to post to.
I agree with you, especially w/r/t to the point about saving money for your clients. I actually received a thank-you note (and follow-up work) from a crew that took over a site I built, thanking me for using a well-doc'd framework.
Use body ID.
Very nice post! Not too long ago parts of the PHP communiy were strictly against any sort of Templating Engine (I'm talking about articles like [this](http://jacobsantos.com/2009/programming/wtf-are-people-still-writing-php-template-engines/) or this [site](http://phptemplatinglanguage.com/)). I'm really glad this changed with the popularity of certain MVC frameworks. Personally I believe that only simple code is good code. MVC (or any other type of abstraction) can help a lot in this matter, but it can also complicate the picture (when abstraction is "intransparent" and you can no longer grasp the "magic"/side effects that takes place). The same applies for namespaces, unfortunately I've already seen a lot abuse of it.
&gt; Just a little more clarification, the nNextFreeElement apparently only gets updated when you use a new positive integer value that's greater than the current nNextFreeElement. I know it's not the point of this article but I was curious so tested it with a script real quick Yes, that's pretty much what I was trying to say. It increments only if its value is lesser than the last numeric key being added to the array. So basically you could put it in code as... *edit* fixed if (nNextFreeElement &lt;= newKey) nNextFreeElement = newKey + 1; That pretty much sums it up well. Thank you for the clarification :) &gt; what's the significance of 5381 here? just curious. nice article btw. As for the significance of the number I honestly have no idea. The DJBX33A hash function is known to work well with strings, because it's got that thing we all love so much (MAGIC!)... That is to say the magic number 33 that creates good distribution (all things considered). There is probably some historical artifact in there somewhere about why he chose that particular number, but I honestly don't know it off the top of my head. I vaguely remember reading about it somewhere.
Great blog — beyond this post too. I just spent an hour learning things.
 &lt;?php $directory = dir("./reddit/"); while($file = $directory-&gt;read()) { $files[] = $file; } shuffle($files); $i=0; foreach($files as $file) { $path = "./reddit/" . $file; if(is_file($path)) { include($path); if(++$i == 4) break; } } ?&gt;
just make another array for the four files and then make a foreach of $files and use in_array and thne another foreach to include those 4 random files
PHP arrays aren't really arrays - they're hashmaps with array-like properties that we term as "arrays" for the sake of simplification. This is the crux of the matter. What you should take from the article is that PHP arrays are excessively expensive when compared to regular arrays in other languages. There are times when all you need is a basic ordered list (which is much, *much* simpler than what they're doing), and not every other thing that makes php arrays unique. This is why most languages differentiate between hashmaps and arrays. 
 $a = '0'; $b = new stdClass; $b-&gt;$a = 'foo'; $b = (array)$b; $b[] = 'bar'; print_r($b); Yields: Array ( [0] =&gt; foo [0] =&gt; bar ) Yay!
You might want to check out `glob()` for the first part. As an alternative to `shuffle()` you could also use `array_rand($array, 4)`.
Is the article's mentioning of using the for loop then the fastest method of processing an array?
So this does work to mark as high priority, but I would still like to know how to flag a sent email?
&gt; but it does take away choices from the programmer. I agree. I'm just making the counter argument. The developers of php have to focus their resources, everything they do takes time and has to be maintained.
Glad to see you've continued as a Symfony developer! Yeah, composer works much better than the previous package management they were doing. A worthwhile addition.
python has ordereddict which behaves more like PHP\s arrays, I think (as in, the order is preseved)
Whether or not you get a call depends a great deal on how you fill out the registration survey. If you were called, it's because you indicated that you're the decision maker for purchases, you work for a larger company (not solo), and you plan to be in production with MySQL soon. I find Zend to be the worst offender in this regard. It doesn't matter what you say on their survey, they will contact you. Also, registration is not optional to download from them. Protip: you don't have to register to download MySQL. There is a download link directly under the form.
Those arguments are not entirely without merit. Essentially what a lot of templating engines start to do is decide that they want to add more than token/replace functionality to their template. So say, where they start with {{CURRENTDATE}} and let the model pass currentDate as a value to the view, which does nothing more than a textual replace, they decide to make {{CURRENTDATE}} pull the value straight from source. Suddenly the View is performing some logic. So far, pretty innocuous. This can actually be somewhat helpful, as the model no longer has to pass it... But then they start getting clever. Let's make it do basic math! And have it parse regular expressions! This can't be too bad... If/else looks perfectly innocuous. Oh! Foreach, too! Maybe a small list of string transform functions. That can't be too bad, right? And so Smarty was born. Why not just use php at that point?
Heh, funny how the blog tagline is "...with a keyboard" and the header feature image is a tablet.
When you say "flag a sent email" - I'm assuming you would need to poll your IMAP "Sent" folder, read the message, change the header, then write it back to the IMAP store?
+1 for glob(), i can't even count the number of lines of directory reading code that can be replaced with the simple function call. You can also use wildcards with glob, like: glob(__DIR__.'/dir/*.php'). Saves so much repetitive code. 
&gt; you can give the wrong name to data-types in Python as well I believe you missed the point here since I've already pointed out in the article why your code doesn't do the same thing in Python that you get in PHP. array = dict() array[12] = 1 array[1] = 2 array[17] = 3 for key in array: print array[key] # 2 # 1 # 3 Unless you're using an OrderedDict in Python the order that these keys were defined in is not guaranteed. Furthermore, a variable name really has little to do with the datatype (it's like anyone was saying if we name the variable an array it will magically become an array). PHP chose to call the datatype an array for simplicity even though it isn't traditionally an array. It still has many of the characteristics of an array though since like we just demonstrated this same code in PHP preserves order regardless of the key. This is important in a language like PHP where you're primarily well suited to deal with the web. Take the following real world example. If you had an HTML form where the user can chose from multiple select inputs where the name corresponds to an ID in your database and the value corresponds to something else (i.e. you care about the order of the elements) then this works fine for you in PHP... &lt;select name="27"&gt; &lt;option&gt;The Plaza&lt;/option&gt; &lt;option&gt;The Ritz&lt;/option&gt; &lt;option&gt;The Ambassador&lt;/option&gt; &lt;/select&gt; &lt;select name="11"&gt; &lt;option&gt;Right Wing&lt;/option&gt; &lt;option&gt;Left Wing&lt;/option&gt; &lt;/select&gt; &lt;select name="32"&gt; &lt;option&gt;Smoking&lt;/option&gt; &lt;option&gt;Non-smoking&lt;/option&gt; &lt;/select&gt; Now in PHP you get... var_dump($_POST); /* array(3) { [27]=&gt; string(9) "The Plaza" [11]=&gt; string(9) "Left Wing" [32]=&gt; string(11) "Non-smoking" } */ Mapping the key to its value is one thing, but PHP arrays are also traversable. So they need to maintain order despite which keys you chose for the elements since in many cases you don't chose at all. &gt;I'm pretty sure you can, just make a hash-map and call it an array, that's what PHP does, it's written in C after all.. Using an **array type** was the context you missed here :)
Well, that's exactly the point. You don't :) That's why you have lists. But PHP doesn't have lists. It just has an array, which has both the characteristics of lists as well as dicts :)
Fastest in terms of computer cycles, sure, but again I never stated that was a good reason for you to chose one over the other (at least not on its own). Take the following example... $array = array("foo" =&gt; 1, "bar" =&gt; 2, "baz" =&gt; 1); You can not easily traverse this array with a for loop. Because for one thing the keys are no longer numeric (there's no obvious sequence to follow). You also could not do the same if the array had out of order numeric keys. Here foreach is an iteration construct that was designed to solve these problems for you easily. I pointed out that the performance differences were actually moot if all you're doing is reading from the array. The only real loss is in memory and performance when you want to modify the array from inside the loop and for that I presented a reasonable solution that still uses foreach for simplicity and readability with only a meager disadvantage in performance. When you're down to rewriting your entire code just to shave off a couple of microseconds in PHP -- at that stage -- it's getting silly. You likely need to find bigger performance losses in your application if you really want to make a dent, or just find another language than PHP.
Yes, you've discovered one of the many quirks of the PHP engine! :) *The way we hash object keys is different from the way we hash array keys so casts cause some weirdness.* $obj = new stdclass; $obj-&gt;{1} = 'foo'; $array = (array)$obj; var_dump($array); //Clearly we can see the key exists /* array(1) { ["1"]=&gt; string(3) "foo" } */ var_dump($array[1]); // Strange, huh? /* Notice: Undefined offset: 1 NULL */ Fun stuff :) 
Thank you for sharing this information. Nice to read and a lot to learn !
&gt;excessively expensive when compared to regular arrays in other languages I'm gonna disagree with "excessively". It's like saying PHP is excessively slow when compared with compiled languages. They made the choice and it has no great impact on performance - iterating 1000 elements (which should cover 99.9% of use cases) takes 0.0002 for me when a page render is &gt; 0.1. If you're really looking for performance gains in this area you are likely using the wrong tool.
What about your example wouldn't work with a python dict or OrderedDict?
Well, it would be very weird if python would hash my values in a list without me telling it to do so.
I'm afraid you're terribly confused. No one made any such claims of super powers. &gt; when this data-structure is available in any language and works exactly the same. As you just demonstrated it's not inherently a part of standard Python. Although dicts, lists, etc.. may share common characteristics of a PHP array they are not all PHP arrays. The PHP array is hybrid that takes on many of the subsets of these structures and rolls them all into one. That was the point that seems to be utterly lost on you. Cheers :) 
You're most welcome and thank you for reading.
&gt;Now you even introduced the confusing name from PHP! I have zero interest in carrying on with this conversation if it's going to devolve into those kinds of otiose ramblings. As for needing order in any compound type in PHP it's just made simple by not separating the utility of a list (ordered data) and the properties of a hashmap (random access in mapping keys to their respective values). Making things simple to get working is one of PHP's distinguishing characteristics. Most beginners that start using PHP have no background in programming and have a hard enough time trying to wrap their head around the differences between an array that if you introduced a second compound type such as dicts you'd raise the bar-to-entry substantially. PHP just makes this simple. PHP arrays work as both hashmaps as well as lists since they are in-fact "ordered hashmaps". Thus there is no need to separate the two into different types.
&gt; I'm afraid you're terribly confused. &gt; No one made any such claims of super powers. really? that article did not claim that a PHP array had powers that other languages did not have, for example C(!) and Python? do you agree with these statements? * PHP arrays are **not** arrays * comparing a linked-hash-map in one language to an actual **array** in another language makes no sense the word **array** is confusing, it leads to strange comparisons with arrays in other languages, but that's like comparing a string in C++ to a scalar in Perl, these are different data-structures... i'm not stepping on the article, but it is **confusing** to compare *different* data-structures like that; a more precise and useful comparison would be with identical data-structures in different languages, there would still be differences, it could even go in favour of PHP's implementation for all i know.. 
&gt; really? that article did not claim that a PHP array had powers that other languages did not have No, it draws a comparison between what a traditional array or list means to some languages, like C or Python, as an example, and what a PHP array is. &gt; do you agree with these statements? &gt; PHP arrays are not arrays Not only do I agree with it. I wrote it explicitly in my article. &gt; comparing a linked-hash-map in one language to an actual array in another language makes no sense It makes perfect sense when you want to explain the difference between what an array means in these other languages and what it is in PHP as a contrast... Because that's all that was said here. You seem to have gone off on a tangent, however.. cheers :)
The way i usually do this.... &lt;?php $pages = array ( 'Page One' =&gt; 'page1.html', 'Page Two' =&gt; 'page2.html', ); // where current url is current method in mvc etc foreach ($pages as $title=&gt;$url) { $css_active = ($current_url == $url) ? ' class="active"' : ''; ?&gt; &lt;li&lt;?=$css_active;?&gt;&gt;&lt;a href="&lt;?=$url;?&gt;"&gt;&lt;?=$title;?&gt;&lt;/a&gt;&lt;/li&gt; &lt;?php } ?&gt; Ternary operator &lt;3
Reddit search is borderline useless. If you've seen this question so many times, why don't you link him to the best answer instead of chastising him for trying to learn?
Whoa.... This looks.... 
Use AES. Check this link : http://fr.slideshare.net/e.zimuel/strong-cryptography-in-php
You need to capture the output of the function when you run it and save that as a variable that you insert into your mail content, not the function itself. E.g.: // Define your function in advance. function do_something($args) { // Do some stuff. return 'Some string or something'; } ... $my_mail_body = 'Dear such and such, Here's the output of a function: ' . do_something($moreargs) .' And then more text'; mail($to, $subject, $my_mail_body); 
well thats fine, I wouldn't say odd. However, even if all this traffic is going over the internet unencrypted by a VPN or something, your risk of expose is rather low still. Anyone wanting to get access to those mails would need physical access somewhere along the line, which requires a bit of effort in most cases. That being said, I'm sure there is a lot to learn by implementing encrypted mail that might have applications elsewhere. 
I answered your question withtout looking at the broader subject. I suppose there is a good "technical limitation" reason for wanting to do that but emailing is not be the best solution. 
as someone who writes php as his day job, i understand the problems with PHP but in the real world the only real limitation PHP has ever presented to me is its ridiculous memory usage on arrays compared to other languages.
+2 for the nettuts link. They really are great videocasts. The manual, as has been mentioned elsewhere, is also up their with the best. i wish they'd have some user comments thought like php.net, thats where the best stuff is always found!
 RewriteEngine On RewriteCond %{HTTPS} off RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} 
Is the email sending at all? If it is and just not showing your variable then trace your function back and make sure you're returning the value/ probably just something simple and small in the function. If it isn't then try setting up correct ports and use a library like php mailer 
will that preserve pretty urls? I tested something like that and it resulted in non-pretty urls 
ctime is not change time, it's created time.
Please post in /r/phphelp if you can't be bothered to do a simple Google search.
If you have access to the server config rather than just a .htaccess, &lt;VirtualHost *:80&gt; ServerName hostname.tld Redirect permanent / https://hostname.tld/ &lt;/VirtualHost&gt; This sends a 301 permanent redirect response to the client rather than rewriting the URL internally.
should actually be if(strpos($serve,$navLnk) !== false) { echo "&lt;li&gt;&lt;a href=\"$navLnk\"&gt;$navName&lt;/a&gt;&lt;/li&gt;"; } else { echo "&lt;li&gt;&lt;a class=\"current\" href=\"$navLnk\"&gt;$navName&lt;/a&gt;&lt;/li&gt;"; }
http://stackoverflow.com/questions/4078205/php-cant-connect-to-mysql-with-error-13-but-command-line-can If you're using apache on linux, that might be of help.
 if(strpos($serve,$navLink) !== false) { // Expression matched if result is 'exactly equal to' false, as in a boolean value of false, not an integer 0 } Sorry, someone already answered pretty much exactly the same thing. It's all right here though http://php.net/manual/en/function.strpos.php
inode change time (ctime) generally is the same as a file getting created, deleted, or otherwise modified at the file / directory level. It's not inode itself changing, not the contents of the file.
Nahh.
How do you plan on decrypting the data in the email on the other end? Whenever I think of email encryption, I think Gnupg/PGP, rather than openssl or mcrypt. There is a gnupg module for PHP, and lots of good support in email clients for gnupg decryption with extensions. It's also true, though, that email clients almost always support ssl s/MIME encrypted emails, without any extensions. I've just never of anyone ever using it. If you managed to encrypt the email using that standard, you might be able to send an email encrypted that way, and all you'd need to do is have the recipient import a private key. 
&gt; Is this php specific or a general term across different programming languages? To answer your 2nd question, I believe `ctime` and `mtime` both [originated in Unix](http://en.wikipedia.org/wiki/Stat_(system_call\)), though other OS's (Windows, etc.) have implemented a similar featureset. PHP is heavily based *nix concepts, and running in &amp; supporting a *nix environment, and so that's why we have these specific functions. So, yes, these properties transcend PHP.
This is a frequent mistake. But actually unix (posix) doesn't have a created time for files. ctime means changed time.
If you declare the function as a variable you will get a string representation of the function and not its result when you try to read the variable (like a regular variable) instead of calling it as a function. Same as if you were to try to print() an object variable (at least one that doesn't have a __toString() magic method defined). Just call the function and save its output to a variable and put that in the body. $emailtext=generateEmailText(); mail($to,$subj,$emailtext); 
He took it down for editing or something right after I posted the link - for what it's worth, it's up again - http://fixx.co.za/?p=458
number 6 is laughable and number 2 is just completely unnecessary. once you've built a few applications without using shitty/impractical tutorials you could venture to build your own mvc framework. knowing how they work would grant a lot more experience than using one pre-made.
I'm not sure what you are trying to accomplish, for what I understand: in field1 you have a unix timestamp; you want to print it nicely. What's the output of your little sample that? Maybe you want &lt;?php echo date('jS F Y h:i:s A (T)', (int) $row_test['field1'] ); ?&gt; - notice I'm using (int) to force what you retrieved from the database to be an interger. If this is not what you wanted please provide the output of var_dump( $row_test ) and an example of exactly what you want to print
THANK YOU!!! worked perfectly!
now, find out why it didn't work the way you wanted so you don't make the same type of mistakes again.
okay so get rid of this section? &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt; &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt; &lt;title&gt;Mailer&lt;/title&gt; &lt;/head&gt; and the &lt;body&gt; &lt;/body&gt; &lt;/html&gt; section at the bottom? 
took out the HTML as suggested above and worked fine, thanks for the help guys!
see this........
timestep hendling.
ahhhh...that clears things up a lot! thanks mate!
I believe casting is unnecessary here, isnt it?
&gt; I advise against relying on such behavior I remember this, I may forget a lot of things, but some good practices just stick with you
Repositories: In my repositiers i split every method in two, one is internal and returns the DQL needed to get the results, the other is public and uses the DQL from the other method to fetch the actual data. for example: public function getOneWithAllJoins($id) { return $this-&gt;getOneWithAllJoinsDql($id)-&gt;getQuery()-&gt;getOneOrNullResult(); } Then in the test i test the DQL, not the data. So in the example above the test would look something like this: $this-&gt;assertEquals( $this-&gt;repository-&gt;getOneWithAllJoinsDql(1)-&gt;getDql(), 'SELECT a, u FROM Namespace\FrontendBundle\Entity\Article a LEFT JOIN a.user u WHERE a.id = :article_id' );
No CodeIgniter, *upvote*.
See [here](http://www.reddit.com/r/PHP/comments/12eeia/fellow_doctrine2_and_symfony2_users_how_do_you/c6uhsqh)
How about [Lithium] (http://lithify.me/) [[wikipedia] ](http://en.wikipedia.org/wiki/Lithium_%28PHP_framework%29)?
Send to pocket, readability, instapaper. Seriously I would have missed so many things if it wasn't for http://getpocket.com 
You should first look at a social network framework. Customize that instead of starting from scratch. You're talking about a lot of knowledge to build something from scratch.
Thanks, but where would I get a decent "social network framework"?
Why would you create a social network when there already is a lot of them? Just use g+ or facebook with "business accounts?" Or there is probably alot of open source alternatives you could try... https://www.google.com/search?q=open+source+social+network Creating something from scratch will take you a lot of time..
As a CodeIgniter user, I'm always curious to know what some developers don't like about it. (Honestly wondering here. Not trying to troll you.)
As a Symfony2 user I'd like to ask you what you see in it. 
The problem with books... They don't get updated very often, if at all. Read blogs, http://www.phptherightway.com/, http://phpbestpractices.org/, http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1, http://www.planet-php.net/, http://phpdeveloper.org/. Follow PHP people on Twitter and Github read their links and code.
Here is another example Silex app you can learn from: https://github.com/fabpot/Sismo
Hey, let's try and provide feedback instead of just throwing out down votes. I'm curious why people dislike Lithium.
All the libraries are useless except maybe be hat. I do not write any oo PHP,and all of that shit is purely oo,the c framework I'm checking into.
Can't edit on my mobile app, but all frameworks/libraries from there are utter shit. Wish people would post some gold procedural stuff.
I did because it's more oo crap.
Obvious troll is obvious
There's always [the hard way](http://code.reddit.com/wiki/API%3Aphp). And [this one](https://github.com/jcleblanc/reddit-php-sdk) was updated more recently than the second one you linked. Might be worth a shot.
I wrote a [simple framework](https://github.com/dxprog/RedditBots) some time ago that works fairly well. It's not completely fleshed out, but it will post comments.
Troll? Are you crazy? Do you honestly think there are not people out there who still write procedural code? My entire 20k loc is procedural. I only used libraries that offer procedural interfaces. I have wrote procedural code for the past 15 years and no one is going to force me to use this new god awful paradigm. I tried it, but I can't stand it.
More "oo" crap? What does that even mean?
u r st00pid
Check his post history. He's a node.js troll.
I honestly do hate that god awful hipster shit of node.js,it is my opinion and I am entitled to it. I never say anything I don't believe. If that makes me a troll, then so be it. It won't change my opinions and beliefs.
Protip: never give your real contact details to Oracle.
There is nothing stopping you from using any templating engine in symfony2
Let me start by saying I've heard wonderful things about Symfony2, but never really seriously looked into it. I am primarily self taught, as are the other two developers at my job. CodeIgniter originally came to us because one of the others used a fork of it (Kohana) in a project, liked it, and then got disillusioned when the new version of Kohana became HMVC (which we didn't understand at the time). After that, we looked into CI. My primary reason for liking CI was, and still is, the thorough documentation. Also, it's fairly popular, so we know it will be around for a while and be constantly updated. In the event we need to bring another developer on to help with a large project, the likelihood of us finding someone familiar with such a popular framework is good. After all, who wants to spend 50% of their development time trying to reason about some obscure (or god forbid, roll-your-own) framework? Yes, we could have these nice things with something else as popular as Symfony, or Zend, etc. But for us, CI seems more straight forward. Also, I like that I can easily write CI wrappers around Zend libraries such as the ACL. TL;DR: I dunno man. I just like it. 
Or in CI. 
Because it's a framework, not a library?
If you'd like more features, do send a pull request and I'll merge it in.
New paradigm? I take it you're not aware that it's been around since at least the 1960s? Also, with your procedural code, how the hell are you testing it (and no, manually is not an acceptable answer).
hey!!! May i know.. why you seems number 2 is unnecessary?? i felt there is good said about MVC framework.. I am just new in development.. so correct me if m wrong..
Learn Database Connections ONCE and for ALL (well, almost) http://uk3.php.net/manual/en/book.pdo.php Edit: It also appeals to me that the intention of the website is more to receive money from some ads rather than acutally teaching something in a proper manor. Totally unorganised, and the content itself is rather .... Nevermind.
The hard way wouldn't work would it? The actions in the api require a modhash which is returned from a request. If you're not capturing it, all subsequent actions will fail won't they? I'll try the second link and see what happens. 
Yup, does that too.
I could be mistaken, but you might be able to use some facets of it like a library. I haven't tried it myself however.
Along with the others on the list? Symfony2, ZF2, Silex and Slim?
I cut out all my code except for login and comment and finally rememberd to preface the post "name" with "t3_" and it worked. Will keep fighting and see what happens.
Yeah, only do this if you're looking for a learning opportunity and not if you're needing a finished solution in a few weeks.
It might be more to your advantage to show us your attempts at using the official API. More likely it is something you're doing wrong.
Wow, that's cool. Is there also a version in JavaScript (Node)?
That would make it fine...
Fantastic post, are you going to be keeping it up to date?
I took your advice and posted a new question over on /r/redditdev with a pastebin to the code I'm using: http://www.reddit.com/r/redditdev/comments/12gu9g/reddit_api_troubles_delay_on_commenting_and_no/
What is the license for this?
Oh, yeah I didn't mean that's the reason why I preferred Yii, I was just saying it can make use of certain components of Symfony. The reason I preferred Yii... Symfony sort of confused me. Such as the config process. And it has all sorts of components that I would just never have a reason to use (DomCrawler??, Process, Finder, Console), or just wrappers for features PHP already offers that just don't need to be re-packaged just to make them OO (Serializer, Filesystem). Then looking at Yii, everything just made sense immediately. I saw all kinds of things that I immediately knew would simplify making websites. Looking at http://www.yiiframework.com/doc/api/... There's logging, forms, auth, filters, widgets, a great caching system, etc. And everything was just designed very similarly to how I would do it myself (and actually very similar to my own libraries I've developed over the years). Maybe it was just a better fit for my style, but Yii just made more sense to be as soon as I looked it, but Symfony just confused me.
Not that I've made, itll be a bit more involved in node I expect, depends if theres a similar imagick extension. Let me know if you get round to porting it. 
I've not spent much time thinking about that, let's go with DBAD Licence for now, might change. 
http://poordecisions.net/LICENSE
Thanks for making me smile. :)
I refuse to write/use objects and classes. My code works just fine. I started with procedural and I'll die with it. I've tried python,java,c++,c#,and ruby. I wrote a semi-small project in them each, hated the syntax. I write functions and use data structures. Mixing data structures and executable code is bat shit crazy. No object should have methods ran in it ever. But almost all do. Thus I say fuck the paradigm and use data structures and functions. It all works and I'm happy. I see associative arrays in all languages that have them the same as objects,except I can easily manipulate it. No classes,or inheritance just modular clean code. Data is always separated from things that manipulate it. It's always just a data structure and nothing more. Is that oop? Maybe but I don't see it as that as I'm not using classes or methods. It's simpler this way. Nothing needlessly complex, data is data, executable code is executable. But OOP allows for intermingling of the two, giving data the ability to have code ran against it, and thus making the thing needlessly more complex.
Check my other post to see why I dislike OOP, I'll not repeat myself here. I've told dozens of other people my view on the issue, and when I explain myself(I don't know why I consntantly have to) but I generally do if people make a fuss about it, they have all said I made good points in my view on the paradigm.
Any demo urls? Would be great to see it in action.
It's based on the API information. If you want to vote or comment, you have to preface the code in the url with t3 or t1 depending on if it's a comment or not. 
Ah ok, that makes more sense! :)
Merged.
thanks for sharing op
Maybe the account your using for the bot is too young, it sometimes requires a capcha. I solved this by getting the capcha image from the request and added it to my form, and somehow it all worked correctly. I could whip up a basic library of php wrappers. Ive done a lot of work with the reddit api but honestly i havent found a use for it.
Sorry. Not the owner of the gist. Saw a link to it somewhere thought /r/php should know about it.
A really nice idea.. i use this kind of optimization a lot. Which php version is the required minimum? Can this also be used on methods of classes?
if you inject $app everytime you use a service locator instead of dependency injection
Pro-tip: Remove that very last line, the one that reads ?&gt;. If there's any white-space after it, then the server will go ahead and send the headers. Best not to allow that possibility in any files that aren't sending output. Otherwise, memoization is a sexy thing that I wish to use more often.
Do you have a customer? Which economic sector are you targeting? It seems you would be freelancing? If yes, you should look at incorporating to shield youself legally. If you plan on making more than 30k, you will need a GST tax #
Glad to help. I just started using Laravel. It's awesome but I often catch myself overthinking how to accomplish things. 
I miss going to these, but at this point I'm not doing ZF work anymore and I'm not using Zend Studio, so the ROI wasn't really in it. There are a number of good looking presentations, I don't know anything about CouchDB and MongoDB for example, so yee-hah.
You've obviously thought this through better than I have. Thanks for the link, going to read up on it. :-)
If you are on OSX you should try codebug 
I built a social networking site fairly recently. I ended up using Social Engine, but forked and heavily modified it. 
&gt; Which php version is the required minimum? Technically 5.4, since I used the `callable` type-hint; if you remove that type-hint (which isn't expressly required) then it should be compatible for 5.3. &gt; Can this also be used on methods of classes? Yes! The first argument to the `memoize()` function is passed directly to `call_user_func_array()`. Note, however, that support for this varies slightly between versions. So you should be able to have it memoize object methods using `array($this, 'someMethod')` or `array($object, 'someMethod')` or even `array('SomeClass', 'someMethod')`. I think there might be other permutations possible too. I was going to provide an example of using it with methods, but the factorial function didn't lend well (since you can't rewrite the function body to not explicitly recurse using `$this-&gt;factorial()`), but so long as the method doesn't recurse then it should work fine. It was late and I didn't feel like writing up a new example, but I'll probably do that tonight. 
Yeah, I'm spoiled by my pre-commit SVN hook at work, which checks for leading &amp; trailing whitespace; I had the hook implemented after one-too-many `headers already sent` errors coming from nowhere. Good suggestion though, I'll do that when I get home!
Crypto really shouldn't be a matter taken lightly. The author clearly has no understanding of cryptography and how it works. This code does not encrypt anything. It basically takes a string and hands you back garbage called *encrypted data* then takes the encrypted data back and hands you more garbage. Lets check out what this lovely **non-encryption** class does... $non_crypt = new jtcrypt; $actual_data = "Hello World"; $key = "MyKey"; $not_really_encrypted_data = $non_crypt-&gt;encrypt($actual_data, $key); $garbage = $non_crypt-&gt;decrypt($not_really_encrypted_data, $key); var_dump($actual_data, $garbage); /* Result: string(11) "Hello World" string(22) "����ԙ�����Hello World" */ Wonderful! Now I have data that supposedly even after decryption still looks like it's encrypted. Impenetrable security! It's encrypted so well that even your decryption class can't decrypt the encrypted data. You realize PHP already has an [encryption extension](http://php.net/mcrypt) that works using a proven crypto library, right? Please do not pawn off this code as an encryption library when in reality you've just implemented a very very broken wrap-around. I'd say people are better off using rot13 than using your class. **I strongly urge that no one uses this code. This is not an encryption class.**
Looks like a vigenere implementation. So don't use it for anything serious, it's a weak cipher.
Listen to this guy.
It really depends on the kind of job you're looking for. If you're looking for something more technical, look on Linked-in. Exec? Networking. But of course, those are generalizations. I personally saw an ad on linked in, did a bit of research and found an email address for someone in HR (instead of the generic linked-in address) and then emailed them. They got back in a couple days. 
I take it you guy's had a designer or a front-end person with a good design sense help you build the administrative panel for this system? It looks amazing from the screenshots.
There's a status somewhere that says "currently looking" and "not looking" switching from "currently looking" to "not looking" meant they contacted me about once a week instead of seven times a day. I don't know what the specific term is, but there's somewhere where you can tell it you're either looking for a job or just looking to network or something.
Try stackoverflow.com
I networked with some start-ups in my area. One needed a whole rewrite to their site, so I offered to do it. The start-up had investments from a rather large company with a huge IT presence, so I had a phone call from this large company. After talking with me, the start-up was told that if they didn't take me, the large company would. I took on both jobs for a short amount of time, but eventually moved to the larger company. tl;dr Network with small companies. Even if they don't need you, you can develop other connections.
I am by no means anywhere near the top of my field. Put yourself out there, worst anyone can tell you is 'no'.
Craigslist. It's the only thing that actually led to interviews.
Craigslist.
Monster is fine for general IT jobs. I also met my wife there... she was an IT recruiter and we eventually started dating after she placed me in a job 500 miles away, that I eventually quit so I could move back home to date her. But yeah, for web dev jobs, monster isnt great. But IT recruiters could help. I got my first web dev job because my wife recruited a guy *out* of a web dev company and knew they would need a replacement so she told me to send them my resume.
In PHP? Well I use memcahe(without the d) extentsion as it lets me do it procedurally, same with mysqli, and I have some a library of misc functions that I genenrally always have to use on there too. I just checked, and apparently I've not pushed my php functions up there yet. I'll do it when I get my laptop back from the rma. As far as code that I've used, I generally go onto stack overflow and ask a question if I need some function to be made that I can't figure out. I've not dug for a lot of libraries for my code, as I see PHP as C with scripting, and doing thingns in it is insanely fast. Once I get my library up there I'll post a link to it. There's also the scrypt interface(they wrap it in a class) but the core extension is nice too. Also for js, I do use jquery as there's no choice since the dom is a giant clusterfuck without it. So I do use those OO-like things, but my code is all procedural(even though I know functions are the same as objects/associative arrays are also objects). It's the syntax I prefer.
Update your linked in, personal site and github. Write a base cover letter and obviously fill in your resume. In Australia I used seek.com.au exclusively. If you've been out of the job market for two years you can still show your skills with personal projects. If you've been out of a job for two years and you've done nothing the entire time I would take some time off to actually do some code so you have something to show. 
Nop.
Surprisingly Reddit!
I responded to the question "*Anybody wants a job?*" in a relevant IRC channel.
What you need largely depends on the nature of your application. Does there need to be two-way communication between the app and the server? The simplest approach is setting up a webserver with domain, and use PHP to output XML/JSON. Lets say your mobile app displays the latest weather in NYC. You would create a script on your server written in PHP that outputs the weather as a JSON string. For example at http://mydomain.com/weather.php. Your mobile app would send an HTTP request to the URL every 30 seconds, and parse the JSON response. It's really not that difficult. Having your server notify apps of changes is more difficult. Whether you need to do that depends on the nature of your app though.
If you're using PHP 5.4+, you should either implement [SessionHandlerInterface](http://www.php.net/manual/en/class.sessionhandlerinterface.php) or extend [SessionHandler](http://www.php.net/manual/en/class.sessionhandler.php). It wouldn't hurt to adhere to the interface even with older PHP versions. I don't understand why the author presents a static API in this article, it offers no benefits and makes it difficult to inject a database handler. In the example code, passing the database connection around is ignored completely. While I understand this is all meant as an example, I think this could really confuse new users. Advocating a static API and then leaving one of the biggest issues with that design as an exercise for the reader just seems irresponsible to me. 
Guzzle provides easy access to both the request &amp; response headers, unlike with curl. Try accessing these things easily with straight up using curl, it's not very straight forward, also Guzzle adheres to REST standards on the proper usage of all the method types. It also has great documentation and makes writing code very "action" oriented. The abstraction guzzle provides is totally worth the code-base growth in the lessor amount of headaches it produces.
Sessions on a DB has been a painfully slow for me, and becomes difficult to debug when traffic goes up and you can't trace where is it going slow. Always use memcache or redis.
[Indeed.com](http://www.indeed.com/) is awesome and I found my current php job using it. It grabs all the listings from multiple sources so you don't have to look all over. I just setup a few keywords to email me daily with new job listings with those titles. Works great.
I can recommend Redis as an alternative here, Redis certainly offers better persistence over memcache. 
Another horrible example by people who should not be writing "tutorials". - global state everywhere (singletons and other forms of static structures) - no prevention of SQL injections Please, just stop.
Hear hear, this is the right answer. And if you use this, you don't even have to implement it yourself: https://github.com/nicolasff/phpredis#session-handler-new Automatically you get consistent cross-server sessions, with high performance, high scalability, out of the box. And without a single line of code.
I'm surprised only one mention of Dice... I definitely wouldn't suggest posting a resume unless you like the constant recruiter phone calls... 
Generally when a mobile screen loads, be it native or javascript, the app decides if it needs data and calls a url. Ensuring your data includes a context to indicate you're still logged in...for example: { "auth": { "logged_in": true, "id": 1 }, "data": { // data here } } Setup a webserver. Serve files from urls (static files during development, later serverside generated from your language of choice). Mobile webservices aren't different from other webservices. Just your concerns and data may be specific to your mobile application.
This book was never relevant. It was published when PHP 6 was in early development, and before it was scrapped. Yes, scrapped. You want to read something like [PHP and MySQL Web Development (5th Edition)](http://www.amazon.com/PHP-MySQL-Web-Development-Edition/dp/0321833899/ref=dp_ob_title_bk) when it is released. In the meantime; I recommend ##php on Freenode IRC; ask questions, people will probably answer (and/or point you in the right direction :)
lol i know about 5.4 but dammnn
We are trying to move our one of our relatively high traffic site but are in the planning stages on our load balancing strategy. Given that this is a corporate environment and everything here "has been here for ages" meaning dirty old code. We recently moved our static content to a different server and that took about a year for all the planning and execution. The redis solution looks really promising and very easy to implement. Now to find all the dirty old $_SESSION variables and move them into a class.
thank you so much :D it says i have to be invited to #php
You don't need to replace all the $_SESSION's to use redis, it's just an option in php.ini. Changing the session handler will change the way PHP $_SESSION works internally. Using $_SESSION directly is seen as bad practices though, because of it being a meany global. But at the end of the day, most session handling classes are fancy wrappers around $_SESSION.
Ya totally, they have a "studio" but no one ever actually goes there except when they have to.
Yup. PHP 6 was expected to introduce a lot of changes to the language, most notably full unicode support. The whole project was scrapped some time ago, but some of the ideas were ported to 5.3 and eventually 5.4. The unicode stuff caused a lot of problems. Initially, the developers attempted to use UTF-16 for everything. Rasmus killed that effort (various reasons, and I would agree with him), and they had to rewrite it all again for UTF-8. I think that setback, coupled with porting some of the major features to 5.3, caused the project to lose quite a bit of support from the core team. It's also worth noting that, just like PHP 6, there was once a MySQL 6 branch which was also scrapped.
[Here's ](http://lwn.net/Articles/379909/) a 2010 article on some of the reasons PHP6 has been shelved. That article even mentions the useless books that came out.
it was **never** relevant 
where is the video?
&gt; PHP Namespaces in 2 seconds
Summary of the docs: "Check back soon"
&gt; Here you're sample schema doesn't even utilize indexes. Good luck with performance. Then what's the primary key? I don't know how PHP looks up sessions, it might check created or last_accessed to be within a certain session timeout. But the query will start with WHERE `session_id` = "foo" and the primary key will handle this lookup so worst case scenario is that it fetches the data and then has to run extra check to make sure last_accessed or created is within acceptable limits.
http://careers.stackoverflow.com The owner of the company contacted me, 3 phone interviews and 1, 3 hour in person interview and I got the job. Will be starting in the next 1-3 weeks.
I have an older Ullman book on the same subject. I think it was php4 and mysql whatever. I found that book to be very useful in learning the language.
Sessions themselves are MEANT to be volatile.
So, she basically said, "He's cute. I'll get him a job 500 miles away and see if he comes back." ?
Huh, so I guess it's just like any other job searching site, except it's only for programmers?
I kind of would have expected the different platforms to be factory classes instead of an interface to Service.
First year with OOP and design patterns, this is the kind of feedback I wanted. I'll look over it and refactor it on the next push thanks.
\#php is a redirect for ##php - it doesn't matter.
In the past #php was the channel. They were asked to move to an "about" channel to reserve #php for the official php group who likely will never claim it as they don't use IRC as a support medium. Freenode agreed to forward traffic in the mean time. While some people in ##php (both ops and non-ops) contribute to the php project, no irc channel is officially sanctioned by the php group.
yeah exactly when I was going over the docs for the interfaces the implementations seemed wrong. I'm still learning you make silly mistake like that when your self taught. Thanks again
Exactly. It does link to your github, SO answers, blog, etc, but I didn't have these things and I got hired at the first job I applied for there. These things probably help a lot, but a good opening letter, and a CV will be vastly more important.
google charts jqplot flot raphael.js etc those 3 have way more documentation, i haven't even heard of jpgraph.
In his case, it makes sense to check for curl in that specific interface, as you may just choose to use another HTTP client/interface. Definitely agree on ditching the built-in autoloader and letting Composer do it.
You stole my logo font, how dare you... http://www.developmentlab.co.nz/
I'm taking it you're from New Zealand as well? I'm an Aucklander. Hahaha, this must be purely a coincidence. My font is Harabara. 
I think its obvious you came across my site and stole my font. Edit: apparently /r/php users don't like jokes, or they don't understand sarcasm.
I think most mobile development API's have an implementation for listening to notifications from a web service. But you are right, his technical design decisions would largely depend on the business needs of his app.
this is using an example on their site for a pie graph, I'm replacing the static values with the query array. The graph will then point to the values in $data to create the pie chart. $getexpensecatssql = "SELECT itemcat, SUM(((itemcost&amp;#42;itemqty)/$totalexpenses)&amp;#42;100) as 'cat_sums' FROM expenses GROUP BY itemcat"; $getexpensecatsquery = mysql_query($getexpensecatssql) or die ('Error getting sum of categories: '.mysql_error()); while($getexpensecatsarray = mysql_fetch_array($getexpensecatsquery)){ $cat_sums = array(round($getexpensecatsarray['cat_sums'],2).","); //$data = array(40,21,17,14,23); $data = $cat_sums; }
i'll definitely look into it and make some changes tonight.
xdebug would not be practical either 1) production server, or 2) when an extension you require for your application conflicts with it (I know there used to be some problems with APC, but I'm sure there might be other more "esoteric" ones).
You should consider `json_encode`ing those strings you feed into v8.
There are **many** books with "*PHP 6*" in their title. All of them pretty much useless paper-weights now.
Not a bad idea.
Don't get too carried away. Composer is not a replacement for auto loading. It's a dependency management system, which is not the same thing as an autoloading system. You can however be PSR-0 compliant without including your own autoloader.
So there are two issues here. 1) I commented only on your statement that this did not use indices, which is not true. There's a primary key on session_id in your own example and every query in the article does a lookup on the primary key. This is literally the fastest index lookup you can do aside aside from having an int instead of a char(32), but that's a PHP session data limitation. Your comment about joins isn't valid as you don't join in on the session data, if you modify the system to do that then obviously you need to reconsider your indices, if you configure your indices for something you might do in the future then you will have extra overhead on each insert and thus be less effective. 2) Apparently garbage collection is run on every single request. It's good that you argue against this as it certainly does not seem optimal. But where exactly have I said anything at all about this? That's right, I haven't. You do have a valid argument about the query cache being rendered useless because the last_accessed is constantly updated, but this is required due to the nature of session data and the need for garbage collection. What this is really an argument for is that sessions in the database is silly, not that indices aren't being used.
obviously is a condescending word
No, you're confusing XSS with XSRF. And when you're already at it, generate a new token for every form (and not just a static one per session).
Documentation looks extensive, well formatted, nicely written. Looks like you have a small mistake making it not valid XHTML. I wouldn't mention this except you have the button saying it's valid right at the top there :)
Nuform, Nucode. Sounds like you work for Nusphere.
Really? On what planet?
There's so much I disagree with here. * flat file database. disagree * routing in ajax. disagree * "php will try to determine what the user wants" . what? I applaud you for trying to build something, but if you're serious about building a social network, you should get serious about using standards. 
PHP Ajax Pagination Tutorial
im interested in seeing this girls hooters but namespaces can go fuck themselves. completely useless.
Actually you just lead me to this. http://us2.php.net/manual/en/function.array-count-values.php This would work wouldnt it?
How big can my arrays be in php? Say I have 10 files around 2-5mb a piece. Maybe more
The size is limited by the [memory_limit](http://php.net/manual/en/ini.core.php#ini.memory-limit) setting. When parsing a file into variables, there's quite a bit of internal overhead (for structure information, etc.). So 20-50 MB of data might result in much more consumed memory. But even 150 MB isn't that much if it's a one time task. It's too much for a public website though.
Exactly, we need to know more about the .csv structure.
What about straight PHP. Why would anyone use {foreach $a as $b} {/foreach} when you can do exact same thing with PHP &lt;?php foreach ($a as $b): ?&gt; &lt;?php endforeach; ?&gt; So yeah, why use/learn additional syntax?
Yes everything with a frequency higher than 1 is a duplicate. That function can definitely work.
I think I am going to use this and save the output to array a. Then I will loop through all my files one by one for a[1] and output everytime i find it and the line. And just go through a til the end. How will opening and closing the files over and over effect the server?
I can use the same trink on you too. Why would anyone torture them self with: &lt;?php echo $var ?&gt; &lt;?php echo htmlspecialchars($var, ENT_QUOTES, 'UTF-8') ?&gt; ... instead of: {{ var }} {{ var|escape }} {{ var|e }} {# shortcut to escape a variable #} or &lt;?php if(count($users) &gt; 0): ?&gt; &lt;?php foreach($users as $user): ?&gt; * &lt;?php print $user-&gt;name ?&gt; &lt;?php endforeach; ?&gt; &lt;?php else: ?&gt; No user have been found. &lt;?php endif; ?&gt; ... instead of: {% for user in users %} * {{ user.name }} {% else %} No user have been found. {% endfor %} To answer your question; because a specialized syntax is probably a better tool for the job. Everything got its pros and cons. Straight php works well, and i have used it in most of my projects. But something like Twig makes life alot easier, in alot of cases. With templates in mind, the syntax is made to make the task of a skinner/designer easier. Twig (and a log of others) have stuff like inheritance and macros that makes it a lot easier to structure your templates. Straight PHP will quickly escalate into A LOT of bloat that makes reading the templates quite hard. One more example: http://twig.sensiolabs.org/doc/templates.html#template-inheritance, tell me how the elagence of that can be replicated in straight PHP.
It depends. If it can all fit into memory you are better off creating a huge array of all values first, then running array_unique() and do a lookup on all the duplicate values. If it won't all fit into memory you would probably be better of creating a simple mysql dbase and putting all the data into that. It's much easier to work with than a lot of flat files. Downside is you will have to write a seperate script to import everything into the dbase. If you do this you can use SQL to check for duplicates etc and that's pretty convenient, because you can also insert the source when you import the data so you will instantly now where the duplicate data occurs. If i'm not being clear enough I can explain further. Good luck.
Im taking the first value and looking for dupes of that. The other values can be different but I need to find dups of the first value.
Because in the real world: front-end developers. Mostly a cleaner syntax, better documentation, and with a properly sandboxed engine you're sure that the front-devs won't make ugly hacks or mess with your data.
I don't have much to say on this apart from: JSON FTW. XML FTL.
PHP.
This isn't example :\ Anyway, if that's such a task that can run slowly and take a lot of memory, then array_count_values would be a good solution.
Step down from your ivory tower. Front-end developers are not idiots, and they will not "make ugly hacks" or mess with your data. And if they do, well, tell your boss that hiring his 16 years old nephew was a bad idea.
Because you hate yourself and want to learn 2 syntax's. As for font-end devs getting confused? "what the fuck, i thought this was PHP" would be the first sentence out of my mouth "why the fuck" would be the second. I certainly would not like to have to look up some mysterious code within some templating framework before i could even start to look how it translates into PHP.
Use a View class is what I would say to that. **Backend** $view = new View; $view-&gt;render('template.php', [title' =&gt; 'lol']); **Frontend** &lt;?= $this-&gt;title; ?&gt; The important thing that you have a clear distinction between the templates and the business logic, then it's easy to enforce a policy of separation without adding a layer of complexity.
IMO this is pretty readable (also very fast compared to smarty or whatever): &lt;?php function h($var) { htmlspecialchars($var, ENT_QUOTES, 'UTF-8'); } ?&gt; &lt;?= h($var) ?&gt; &lt;? if (empty($users)): ?&gt; No user have been found. &lt;? else: foreach($users as $user): ?&gt; * &lt;?= h($user-&gt;name) ?&gt; &lt;? endforeach; endif; ?&gt; 
I'm a long time Twig user and a huge fan. Twig made my life (as a developer) so much easier. It's not only the syntax, but you can also easily add it to almost any project and the performance (templates get compiled to actual PHP code) is extremely good too. New versions of Twig have autoescape enabled by default, so your example should actually look like this: {{ var|raw }} {{ var }}
It's definitely one of the better ones out there. Twig templates get compiled to actual PHP code (transparently, you don't have to worry about that), the performance is very good. It's also easy to extend (if you need additional features) and integrate into any project. As a long time fan and users I can only recommend it. Not sure why you think it would get messy.. It's powerful enough to replace any PHP template (template, not code of course).
Reading the MD5 hash of a file requires you to read the entire file's contents anyway. Generating MD5's and matching them would actually be more intensive than the methods already listed, but would be far more thorough. Seems like the MD5 method would be more suited to a cron task to clean up exact dupes.
I just did something similar with handlebars.js. I wanted to avoid the duplication with the front end, so I wrote this wrapper that makes use of V8JS and allows server-side usage of handlebars. https://github.com/crxgames/PHPHandles
It's a good thing they already know the popular templating engines.
&gt; $this-&gt;fetch &gt; What $this? Am I in some method scope of some class? What the fuck am I doing here? What's going on? That's what I (and my IDE) think when I see code like that.
Sorry, but I [disagree](http://www.reddit.com/r/PHP/comments/12nsva/reddit_what_is_your_favorite_template_engine/c6wplwb)
I used to hate on anyone that suggested using a template engine and then I realized the power of the security features in Smarty and Twig. Secondly, I have come to greatly appreciate the cleanliness that they provide in the html pages... I use both Smarty and Twig in projects... Smarty because it is the template engine used in some of my legacy projects and Twig in my new projects. I think that Template Engines are a useful tool for developers who choose to use them. I think that some developers get caught in a mindset of purity at the expense of pragmatism.
Smarty also get's compiled to PHP, BTW.
you work with those vars in your code, and i use alot of AJAX calls with session caching and stuff, so some of my vars are always active in a sense, to take stuff out or the response array and push it to html is easier using a simple {VAR} replacement. i use it mostly for form fields, and buttons, titles, language text. Your working with that data in your code anyway, and the main deal for a template is to allow someone else to design the page while you can look after the data content. Its a last step from building a response to outputing to the screen, some stuff doesnt need html output. 
When I said "slipped through tests", I actually meant "made it to production". Of course that shouldn't happen, but in real world it does (not in my projects though). When a template "compiles", you're sure that they won't cause any fatal errors. That's what I call an advantage. (Obviously, you can still make errors which don't produce the expected result, but that's not the point here.) It's also not about trust. It's about necessity. You don't need the whole power of PHP to transform your data into HTML. A templating language has everything which is needed, the additional power can only be abused. It's much simpler to train someone to use Twig, than PHP basics and it also looks less cryptic in the eyes of non-programmin people. I've had way more success with it.
It's fine in the simple case, but turns pathological very quickly. I've got some templates that make my eyes bleed trying to decipher - transliterating them into Twig makes them much simpler to work with on a day-to-day basis.
There's also the argument that a sufficiently complex template (and yes, they can be sufficiently complex whilst containing very little, or no, logic) is much easier to digest in a dedicated templating language. I've seen this in our project - moving from PHP to Twig made the templates much easier, quicker and less error-prone to work with.
I'll go with Mustache: It's simple, logic-less, and multi language
I wrote an extension to Mustache called [ThickMustache](https://github.com/mardix/ThickMustache). It works with template directory, include other template files, assign variables, defines raw blocks which will not be converted upon render. 
I like Twig because it's flexible enough to do what you need in a template but it doesn't allow for enough to become overly complex. This helps to keep people from putting application logic in templates.
I like Smarty for the following reasons... Its powerful, and easy to understand. It doesn't require any silly server daemons or runtimes to do its job. Templates are precompiled to pure PHP, the first time they are hit, and after that templates are just run as normal PHP code. I never understand people just saying embed your html in PHP. Its ugly as sin, and completely misses the point of using a templating engine, which is to separate presentation from the business logic. I havent used Twig but apparently its fairly similar to Smarty
Both the AWS SDK for PHP and Guzzle are on Packagist.
There is a twigJS, but it didnt seem as straightforward as mustache
because writing html mixed with php looks disgusting.. php is bad enough on its own I'm speaking as a developer, not as a front end person.
because php sucks at it. PHP mixed with HTML looks terrible. I'm only babying myself, not some front end person.
I've used it for a large system aswell, and there were aches and pains, but it worked better than i expected.
I like Dwoo because it's Smarty with template extending. Unfortunately it's no longer being updated so I guess I'm gonna be using Twig for future projects.
I wish my boss understood this. I really, really do.
If I recall right, I think you need to use [this](http://php.net/manual/en/mysqli-stmt.store-result.php) (mysqli_stmt_store_result) after the mysqli_query but before the mysqli_num_rows
My point was that Smarty or Twig compiles the parsed template to PHP after the first run. So, it's only slow the first time. After that, it is using compiled PHP which is a lot faster. If you are using a "lightweight" self-built template parser which doesn't do that, it is going to be slower. It might only be 100 lines of code instead of a huge bloated library, but it's still going to be slower because you're parsing it on every page load. Plus, it's going to have way less features and you're going to have to resort to using a lot of regular PHP anyway. So, why not just use PHP to start with and forget about template parsing? I think it's an insult to designers to assume they are smart enough to use something like Smarty or Twig, but too stupid to use PHP itself.
You're in an instance of a View class.
/r/reportthespammers
Garnering experience? :)
Just because someone can "solve" the problem in 8 hours or less doesn't make their solution viable for the long term. We all know how poor long-term planning can ruin a good project. However I've been trying to write a good "Hello World" for at least a decade and a half now...
It's strange because it is so consistent acros organizations. I think managers, accountants, HR, etc just feel more capable of judging the value of small dollar amounts, so that's where they focus. I've worked for massive government agencies, for small mom and pop shops, and everything in between. In every case, it was usually harder to spend a hundred dollars than a hundred thousand. if you wanted to spend a hundred grand, maybe the CEO or a high level manager would want to look at it and sign off after a few meetings. If you want to spend a hundred dollars, every temp in accounting wants to have a twelve page justification, then will make you wait six weeks as the paperwork goes around and around before it is rejected by someone and has to be started over.
I fall into this trap sometimes, where i'll spend weeks designing something over and over in different ways trying to find the "perfect" solution. I want the solution that is most elegant, expandable, maintainable, and will also help me learn new techniques so I can stay excited and challenged. Then I have to remind myself it's just a fart app.
&gt;A lot of people here saying that PHP is a templating language, and that you shouldn't use a template engine, but i disagree. There's a pretty big difference between a template engine and a template language. Twig, mustache, etc are template languages. They define their own syntax their own quirky ways of doing things. They add complexity and overhead. They make things hard to trace and debug. They are what novices choose because novices don't know better. Template *engines* are fine. They basically just organize template rendering. This doesn't necessarily mean they do ridiculous things like define new languages.
&lt;?php echo $hello_world-&gt;print_keys($keys_to_print_container['keys_to_print']['hello'],$keys_to_print_container['keys_to_print']['world']); ?&gt;
It's free and open source. You don't have to pay a dime. There's a download link, and a github link.
I have PHPStorm, and twig is definitely supported.
That's a sticky trap to get stuck in. If something that takes 8 hours to write lacks robustness over time it has one saving grace...it took 8 hours to write. Sometimes code just has to be written, you can't always spend now to save later.
The whole point is that prepared statements are safer than escaping. They separate the query from the parameters, largely removing any sql injection risk that still exists with escaping queries. 
I think it's based on an old quote regarding scientific research: A few weeks in the lab will save you hours in the library.
Don't feel bad sometimes takes 3 weeks for me to learn enough about the domain I'm developing for to start 8 hours code session.
I think this is a neat approach. Definitely experimental, and probably would need some caching.
[Relevant XKCD](http://xkcd.com/664/)
Generic statement about [SQL injection](http://www.unixwiz.net/techtips/sql-injection.html) and using prepared statements in [PDO](http://us3.php.net/manual/en/book.pdo.php).
[More Relevant XKCD](http://xkcd.com/974/)
iirc FuelPHP is currently being developer for version 2. One of its developers is now gone: Phil Sturgeon. He's now become a Laravel fan. Kohana just released its 3.3 version, over half a year late. Yii is being rewritten to version 2, still in early planning stages. I still think version 1.x is crap, but who am I? CodeIgniter still caters to developers having to support older versions of PHP. It's like the granddad of frameworks - still works, sort of, but you won't see it doing anything new, flashy or sexy. CakePHP continues to be the monster it has always been. Lithium was touted as the new "sexiness" but its over-reliance of models as little more than database layers quickly turned me off. Laravel is still full of itself. It may be the best, cleanest and most well documented framework ever (it's not) but its Second Coming of Christ attitude makes me view it as nothing but the trendy, hipster-friendly framework of the day. Zend Framework 2 is very well thought out, very well supported, and very verbose. Expect this to become the standard in the large-company community in the coming years. Symfony2 is very nice, and very large. Out of the box it comes with nearly everything you would ever need in an application, which may be a big wall to climb at first. I think trying it out without the vendors at first will make it easier to understand. Silex is a joy to work with - small, curt and to the point. I've been working with it for a few months now and have enjoyed how out of the way it is most of the time. But use whatever floats your boat.
"Alright, since you gave final approval all you have to do is send in your last payment and we can take the site live." "Where's feature X?" "What's feature X?" "It's a feature we absolutely must have. I can't believe you didn't finish feature X! We can't go live!" "I'm sorry, I'm not seeing feature X in any of the project specs, quotes, proofs, or any of your emails. When did you approve the proofs for feature X?" "I never saw any proofs!" "Well, when did you send the content to the designer?" "You never asked for it!" "Well, when did you sign off on the quote?" "You never sent me a quote! This is highly unprofessional! I'll never do business with you again!" "I'm very sorry. When did you ask for feature X?" "I shouldn't have to ask for feature X. Anyone who's in my extremely specialized and uncommon field of work should know about feature X!" "So you never asked for it, never were quoted for it, never sent content for it, never approved the proofs, never mentioned it during any of those stages, never mentioned it during the six months of testing (which is usually 30 days but you decided to go on a long vacation, then lost the email, then couldn't load the page on your Commodore Vic-20, then had to run it past the board, then lost the email again, then filed a lawsuit against us, then took another long vacation), and now are only mentioning it once you signed the final approval for your website stating it was completed to your satisfaction?" "You are being very rude. If you don't launch my site immediately and refund all my payments I'm going to complain to the BBB on you!"
That was awesome, thank you very much.
I don't know about that. I've put off coding some personal projects for years and I still haven't finished them.
Except the object is not to take logic out of templates (you're not doing this with twig and it's ilk anyway, they just change how the syntax of the logic is written) - the object is to separate business and display logic.
Is it? Do you inspect each and every template these classes "compile" to ensure they're written properly? When it errors, is it immediately obvious where the actual error occurred in the template?
Correct. That's why I was relieved when I looked closer and saw AWS, not MWS.
&gt;Its powerful, and easy to understand. It doesn't require any silly server daemons or runtimes to do its job. You just described PHP templating. &gt;Templates are precompiled to pure PHP, the first time they are hit, and after that templates are just run as normal PHP code. If you're writing PHP already, there is no need for this step. &gt;I never understand people just saying embed your html in PHP. In a proper template, it's more like embedding PHP in HTML. If you write proper helpers there should be very little PHP in your templates beyond what is needed for display logic. There really is no difference between this and smarty, except this is going to do exactly what you tell it to do instead of having to guess about what smarty is doing. 
Yeah, and using Smarty does this. 
And that's when I killed him your honour
PHP written by a Ruby programmer.
Nasa? What about big bird! 
When I first visited the site it was a nice plain color, but I just had to refresh it after reading your comment. Its lime green now.
You don't need smarty to do this.
With his Commodore keyboard.
silex. pretty much symfony lite.
I've just done this, and it works pretty well. I'm just scared that any future use will show its weaknesses and we'll spend more time "extending" the original code
I suppose you will have to fiddle with the magic (= Java App Server running Apache POI?) that gives you the Excel file to change that. The author attribute is part of the actual file and not some metadata added by PHP afterwards. If you want to mess with the Excel file in PHP, I recommend the aptly named [PHPExcel](http://phpexcel.codeplex.com/).
[The other Ratchet](http://socketo.me/) in PHP-land.
Let me be the first to say meh... Zend Studio ad.
You're telling me that a framework that is being worked on by mostly one person is better than frameworks being worked on by teams of people that have years of experience doing this?
I'm not really willing to use a library since it's already working with the exception of the author part, Thanks for the tip, though :)
Yeah, this is correct. OP is basically asking for horizontal reuse of templates, exactly what the "use" tag is for.
I'm not suggesting recreating everything with it. You can read in an existing Excel file, change the value of the "Creator" field and then output it for download with the header value you're already using.
Then you can make your own enterprise-level fart app with your own coding style! You can also work out all of the issues with the coding styleguide that you built yourself instead of when you bring on more people instead of being able to say "We follow PSR-2".
Forgive me, I wasn't all that familiar with Apache POI before. Another alternative, if you have access to how Apache POI is creating the XLSX file *(assuming that's what is going on)* I would dig into their documentation with how to manage document properties. It's probably setting a default "Created By" since one is not being specified.
I've only briefly looked at Laravel, but I find the widespread use of statics disconcerting. Mocking seems like a real pain in the ass.
Well-played. You held the power to make reddit actually collaborate on an *enterprise-level fart app*, and you knowingly made the choice to destroy that dream. Perhaps the world will be better off without *Snoo Fartit 2013 Enterprise Edition* after all.
Its an experience thing in many ways. There is a big difference having a couple years of experience under your belt
Have you been reading my email?
Cmpletely justified. 
Latel I have found that TDD is great for internally developed projects, but a lot of clients expect more of a waterfall presentation. They pay x and get z but showing them y leads to "this is broken" and "this is not what i want" complaints.
No matter, :) Unfortunatly I have no access to the Apache POI which is indeed creating the xlsx files. (with the exception of a few api calls that don't help with this particular problem)
I hate Smarty with a passion solely because I have to clean up after the ex-developers at my company, and it's clear they had *no idea what they were doing.*
Then you're not following PSR-2. 
&gt;out there Your boss makes you sit outside? No wonder he can't hear you typing.
 I think fuel is at a strange spot. Its lost two of its key developers; Phil Sturgeon, and Dan Horrigan. Its still growing though. 2.0 is a huge overhaul of the whole system and i think will bring even more people to Fuelphp. Personally I love it. Currently this is the framework of choice at the company I work for. Laravel, I want to like it but find myself fighting with it + the blade template engine is hum.. it just is. They reinvented the wheel with that. its basically the same thing as smarty or Twig no real inovation ( that ive seen.) FuelPHP also has a huge issue of not really having a central location for users to find packages for their builds they either A. have to know what exactly they are looking for or B. dig through the forums. (I'm currently working on a solution to this problem.) IMO Fuelphp has better docs than Laravel. Laravel has had 3 major versions in less than a year. Laravel has a faster growing community Larvel has better package control ( easier for users to find stuff they need) Both have their pros and cons.... Kohana about the same as Fuelphp but slower Yii tries to be too much i think CI is dated no support for 5.3 or namespacing CakePHP..... How is this thing still floating is sooo heavy and bloated Just some of my thoughts :) best of luck to you 
I suggest you to [profile](https://encrypted.google.com/search?hl=en&amp;q=php%20profile#hl=en&amp;safe=off&amp;sclient=psy-ab&amp;q=memory+profile+php&amp;oq=memory+profile+php&amp;gs_l=serp.3..0j0i8i10i30j0i8i30l2.7080.10727.0.10993.18.16.0.2.2.1.334.4371.2-10j5.15.0.les%3B..0.0...1c.1.R5Bp40d4_G8&amp;pbx=1&amp;bav=on.2,or.r_gc.r_pw.r_qf.&amp;fp=b8bb13a4dc392afb&amp;bpcl=37189454&amp;biw=1440&amp;bih=701) your code before doing any changes. But depending on how your code is structured you can try to use the [unset](http://br1.php.net/manual/en/function.unset.php) construction. It can be useful when you have a huge array and process it to create another array, if you are not going to use the first array anymore you can unset it to save some memory.
I'm running on Laravel and using their profiler. I'll be using it to troubleshoot with that. The unset is a good idea. I often query a good amount of data so I might want to unset it when I'm done with it. Thanks!
Reading comprehension... get it.
It all depends on who is doing the planning... at my last "employment" type job, marketing was driving the planning... after the third iteration of the same project I quit... best decision of my life.
Then what are you selling? If the software is licensed for free distribution, why do I need to purchase a license? Or do you have an undocumented dual-license structure? What do I get when I purchase a license?
you mentioned 50 sql queries in your OP...are you using [laravel's eager loading](http://laravel.com/docs/database/eloquent#eager)?
Not as far as I know. It's probably more reliable to use the last insert ID than writing your own solution. Perhaps it depends on the storage engine... Either way this sounds suspiciously like a bad idea.
Posted this in /r/software_design but I guess it's also going to be of interest to folks here...
I hope you [file the issue with CI](https://github.com/EllisLab/CodeIgniter/issues/new) with some example tests and your workaround. That's how frameworks mature :)
Images are just links and not accessed until the browser gets the response. [Unless you meant handling bulk transfer/manipulation of images, in that case all file types are susceptible.] Memory crashes, in my experience, usually come from trying to work on arrays that have too much data in them.
Interesting ... I find the "This is better then PDO" cute. Here's a few things you're missing based on a 5 minute glance: * fetching data into objects * ability to specify (when fetching to object) if props are assigned before constructor or after * real prepared statements I'm sure there's a ton more. I think its nice you wrote such a library, but thinking your first release is better then then standard for the language, or more feature rich, is arrogant.
And here i thought &gt;50k results was common. Then again, i also thought frameworks like CI were built to make customized development of medium/large apps more practical. So what is CI for? To make a blog that isnt built from WordPress?
So am I correct in saying if you have 30 different lines with the same variable it will always chose the last variable?
And I 100% agree with their take on it. If you are trying to do something that is of that scale then you're either doing it wrong or you know the limitations of your framework and it really isn't much of an issue to work around it. Most frameworks are not designed for speed during processing even if they claim they are. They are designed for speed of development (IE actual time spend programming). They are not supposed to make things faster, if anything they slow things down - but that's the kind of trade-off you're supposed to investigate before you pick a framework.
No. It's because () are for functions, and echo is a keyword. 
That's great! Thanks.
Yes.
Sure. As a general rule, nearly every language has this sort of timeline quality where things are done one after another. You will need to think in the context of imperative actions, one after another, to cope with most code. There are exceptions. SQL doesn't work that way. Threads and processes can violate that. Clojure does some funky stuff. Etc.
What evidence has been provided to you of reliability issues with last_insert_id()? Much of the web depends on it.
And for that matter you don't need the quotes around the variable name either. echo $simpleNumber;
That is a very neat feature. I haven't really had much time to look into Laravel much but I think I might have to based on that. Also -&gt; look at your queries. I find a lot of php programmers can work great in PHP but then do silly things when it comes to querying the database. Multiple selects when a simple (or sometimes complex) join can do the same job. A big peeve of mine is &gt; Select * from table_x When you have no need for every single column. It's not "future proofing" to select every single column.. it's the exact opposite. 
&gt;When you have no need for every single **column**. FTFY
Yes, I meant image manipulation...
Well if you are really serious about it, going into a second hand book store at some campus and picking up a book on OO Patterns or whatever fancies you interest, is not that hard or expensive. 
I want to see Fuel become a really solid frameworks but I can't shake the feeling that Fuel's days are numbered. I'd suggest keeping an eye on Laravel, even though could very easily be pushed aside by people later for the next fancy new framework.
&gt; Finally, if you have an auto_increment column which is a BIG INT, you may potentially have some problems fetching the insert id in languages such as PHP. Can you clarify on this? I do exactly this but haven't experienced any difficultly that I'm aware of. Or does the weird stuff start happening once you get into the last remaining bit?
Has your host installed either APC or xcache? Either can reduce memory usage reasonably substantially ([source](http://2bits.com/apache/memory-usage-revisited-when-open-buffet-not-blame-rather-views.html))
&gt; I've been asked for the project I'm currently working on to NOT use MySQL's auto_increment feature for the primary ID of my tables because of the reliability of getting the last inserted ID. That's just straight idiotic.
 I've never had a problem either. Perhaps it's a problem on 32bit systems?
Cool, thanks for the feedback. At times I was trying to weigh what would be easier for the people whom I work with to grasp, and believe it or not this was one of those times where that prevailed. I like your suggestion better, myself.
Yeah, I meant with regular expression checking and so on. We had someone selling Viagra through one of our sites for a while just for lack of simple checks like this.
Yep. They hired me to pull random library names out of my ass. :P
This looks awesome. Maybe needs a 'save as PDF' option though. Good job!
&gt; what is CI for It's for building small to medium sizes websites and for rapid prototyping of larger ideas. Then again I feel like most frameworks do this. 
&gt; Naturally you need to be on 64-bit php. I haven't had any problems using BIG INTs on 32bit installs, but I use them mostly as id fields, where interpretation as a string is fine. The few times I need to do math on a 64bit int, I've used the BCMath functions without problem (on a 32bit platform). &gt;Type casting to a native PHP float, on the other hand, would fare much better. I'm not sure this is a such a great idea for large 64bit ints. You can only go so big before you start losing precision. PHP's page on floating point suggests 14 digits is the limit. 
I liked [PHP Master](http://www.sitepoint.com/books/phppro1/).
Yes, MySQL does use a roundtrip for this. If you have the option of using Postgres (not likely, considering you specifically asked a MySQL question, but hey, you never know), it can be done without an extra roundtrip, using `INSERT INTO ... RETURNING fieldname`.
This isn't my first release, merely the first one I shared with reddit. The project is over a year old, and has gone through multiple releases in that time. I'm honestly puzzled by your reaction. I never claimed that I'm not missing anything, but I do think PDO is missing plenty, too. Both my pdo page and the beliefs page talk a lot about doing more with fewer lines of code, and I stand by that. There's lots of other stuff that PDO is missing and my library has, which I consider essential: * Optional static class usage, with no need to pass $db objects around all the time, e.g. DB::query("SELECT * FROM ..."); * One line to query and grab results, while getting the auto-escaping benefits of prepared statements, e.g. $r = DB::query("SELECT * FROM blah WHERE name=%s", 'blah'); -- PDO would take at least 3 lines to do this * Substituting in and escaping list parameters, e.g. $r = DB::query("SELECT * FROM blah WHERE name IN %ls", array('Frank', 'Joe')); * Simple inserts, e.g. DB::insert('table', array('key' =&gt; 'value, 'key2' =&gt; 'value2')); * Nested transactions * Better error handling, like being able to call a function or throw an exception when MySQL returns an error If these are not features that you need, then say that. But dismissing my claims as "cute" without addressing the substance is arrogant.
Excatly what I meant. You should try add 50 lines, and see how it looks when you press print - not good, 1 line is splitted between the two pages. This is one of the thing that CSS still cant do for you, so I would properly just make a PDF file, which can be downloaded, and now it can be mailed, printed etc.
I wrote a true entropy generator in C a few years ago. Actually is comparable to random.org. Often wonder if people would be interested in it.
The problem with your code is that you are missing the connection identifier in mysqli_query(). See here: http://de2.php.net/manual/en/mysqli-result.num-rows.php ( Example #2 Procedural style ) To avoid this issue os the Object oriented style. This way you have all the info you need.
Sorry, bit this does not solve the problem. It is a good advice, but not helping here.
This is a solid advice but digital\_tacos does use mysqli_ and not mysql_ functions ?! 
tools you can use: - http://getfirebug.com/ - http://www.zend.com/de/products/studio/ - https://developers.google.com/speed/pagespeed/
&gt;I've been asked for the project I'm currently working on to NOT use MySQL's auto_increment feature for the primary ID of my tables because of the reliability of getting the last inserted ID. FINALLY! Somebody who gets it! Here's some more tips they don't want you to know about: * Don't use indexes - they are unreliable * Make every column a text field - that way you get flexibility down the road * Don't give tables or columns descriptive names - too much typing - just go with t1.c1, t1.c2, etc. See how nice that is? * Use a lot of triggers and stored procedures - they make your app so much easier to manage. * Don't bother with replication or backups - they are unreliable and slow. Good luck!
ZF1 isn't too bad, but it lacks a clean, insightful and revolutionary vision of how to work with the developer rather than making them fight against it. ZF2 on the other hand seems to take all of the bad stuff from the Java web 1.0 frameworks of yesteryear, mixes it in with some 'Oooooh, look at Django!', then pushes it to the max - making it a complete and utter pain in the arse without really addressing the bad qualities of ZF1. It seems like a masturbatory "oooh patterns" wankathon. And both have a learning curve steeper than can be justified. I have heard people try to justify it by saying 'but to solve complex problems you need complex tools', what a pitiful excuse. Throwing Zend Framework at a complex problem just makes it even more complex and will blunt the minds of developers using it because their time is spent fighting it rather than solving real problems.
Github it! Or make a gist. Reading that stuff is always pretty interesting.
Really? When there are gems in there like this: str_shuffle($c); //randomize characters $value ^= hash("md5", $c . microtime() . $k, true) . hash("md5", microtime() . $k . $c, true); $value ^= hash("sha256", $c . microtime() . $k, true); Why try to build a fully entropy gathering system in PHP. It's the wrong tool to use. The reason is that what you provided would only be secure for the first run in a process (the first execution by apache after restart). After that, the vast majority of your entropy would be FAR lower than it appears. Instead, just use a [RFC 4086](http://tools.ietf.org/html/rfc4086#section-5.2) mixing system, taking entropy from as many sources as possible and mixing it together to produce the randomness you require. This is the technique I've used in my [CryptLib](https://github.com/ircmaxell/PHP-CryptLib/tree/master/lib/CryptLib/Random) library. Additionally, please don't label a generator secure (implying Cryptographically Secure) unless it has been reviewed by experts. Passing statistical tests is only one test. There are many others (including pen testing for poisoning ability, etc)... 
I'll keep that in mind next time. Building my own infrastructure and framework may be a better way to go. 
That's important information. When I started my app I was dealing with 100s of row which was fine but now I'm working with thousands which will soon become hundreds of thousands (it's a growing exponentially). I just upgraded my server but I'll have to look into just using straight PDO. Laravel's ORM is pretty neat though which is why I stuck with it :)
great analogy.
Yes, I do use eager loading which is why it's not 400-600 queries (had those happen, had to compensate for that). There are a ton of places where you just can't use eager loading. One example (off the top of my head) is checking if a row with a specific ID got changed and trying to pull 10K+ results just to check if 6 different IDs got changed is pointless so you end up with having an extra query that checks those 6 IDs. 
I gotta check if Laravel allows for specific column pulls. That might help since my databases have 20+ columns and I usually just need 5-10. 
Well, the framework can work with that since I can just use its logging feature to get those memory usages printed out in the neat profiler toolbar. I do deal with heavy processing which may take up to 2 minutes of time (already optimized). So unsetting things there might have an impact. Thanks for your advice!
ok, glad to hear you're using the eager loading. however, i think i got a little lost with your example... you want to pull 6 specific rows and eager load for just those 6, is that correct?
API could email a link to the invoice or something like that... Printable from there. Think of it like this: Company creates an invoice using your API. Your API could return the link to the invoice, for the company to forward, or maybe the API could email the link to the customer whose invoice it is. I like these points, and your app looks pretty good. Now I don't have much use for it, but it still looks good :)
pass the eloquent get function an array of the columns you want: $user = User::get(array('fname', 'lname')); edit: plug for /r/laravel 
Hey ... don't vote this guy down just because he recommended W3Schools. He is trying to be helpful by suggesting material for somebody who wants to learn. Instead of being a bunch of ass-hats, maybe you could offer alternatives, and guide him in a better direction. I swear, sometimes the people on Reddit make me sick.
You spelled length wrong and the indentation made my eyes bleed. Stopped reading there unfortunately.
I dunno, is it an issue that you need 5 round trips to the database to insert 5 rows, when it could be done in 1 (with db support, like postgres, or non-auto increment keys) ?
They also keep telling me, "You don't need a schema!" And then when I say, "I'm getting really bad performance from this," they reply: "Oh, you should redesign your schema."
It is important to understand that once PHP allocates space for data, it can't deallocate it - it can only reuse it. So minimizing the initial data allocation can help significantly with overall memory usage. A good way to do this is to break large result sets down in to chunks, and then deal with them a section at a time as iteratively as possible. Additionally, perform as much sorting on the SQL server as possible, and avoid populating PHP arrays and sorting them as this is both memory and resource intensive.
badass. Thank you :)
ah, gotcha...i can see where eager loading wouldn't really help much there. in your list, couldn't 1-3 be combined into one `UPDATE ... WHERE` query? your `WHERE` clause could do the querying you're doing in 1-2? maybe something like this: UPDATE table SET a = 'current_a', b = 'current_b' WHERE (a != 'current_a' OR b != 'current_b') AND id = '1234';
For the logging step, are they just simple inserts? If so, you could just do a mass insert with multiple values bringing that log down to 1.
The purpose of comment downvoting is to remove inaccurate and useless information from the thread. It doesn't matter if his intentions are good, his suggestion is bad. The reasons why its bad are stated elsewhere in the thread. Don't take voting so personal
They have to be logged separately as separate rows so I'm not sure how I could counter that.
there's always a catch. :)
/r/drupal subscribers need to read this!
huh, alright. I might have to bypass laravel but that'd be worth it 
yep ;)
Then the best option seems to offload processing asynchronously, then chunked if necessary. I doubt you're serving 2 minutes requests so it's probably already queued, asynchronously processing. Chunking and offloading seem like good approaches. A site I'm running deals with pretty heavy images (up to 30MB uncompressed TIFFs) so using ImageMagick PHP libraries would keep too much processing to the PHP process itself, so does reading metadata (a simple exif meta data read on a 30MB image needs a lot of memory). I offload all this processing to the shell, calling exiftool and ImageMagick CLI commands. It's run in a cron job that I allow to run up to 15 minutes (with a soft exit by measuring how long it's been running to avoid hitting the hard process time limit) and it's running fine within a 128MB limit. Anyway, I'm probably adding nothing to this... Measure, fine-tune, repeat :) 
found a way around $result = mysqli_multi_query($this-&gt;_connection_write, 'INSERT whatever;SELECT LAST_INSERT_ID();'); if($result === false){ $this-&gt;error($this-&gt;_connection_write); } $ok = true; do { $result = mysqli_store_result($this-&gt;_connection_write); } while (mysqli_more_results($this-&gt;_connection_write) &amp;&amp; mysqli_next_result($this-&gt;_connection_write)); while($row = mysqli_fetch_row($result)){ return $row[0]; }
I will just leave it [here](http://www.garfieldtech.com/presentations/sfsf2012-drupal8/#1).
i promise i'm not stalking you like it probably seems by now, but no need to ditch laravel if your logging is set up as a model in laravel already. this code will automagically create the SQL that /u/xangelo pointed out: $entries = array( array( 'attribute1' =&gt; 'value1', 'attribute2' =&gt; 'value2' ), array( 'attribute1' =&gt; 'another_value1', 'attribute2' =&gt; 'another_value2' ) ); Log_Model::insert($entries);
So linking to the actual page was too much effort, looks like spam
So basically applying the template pattern? 
There's "complete optimization" and then there's "optimization that's worth it". In general you want the second one, especially if you're asking about how to do it in a professional way. Not all optimizations give you the same amount of benefit so you want to choose things that give you the biggest impact for the smallest amount of work to start with. The best way to do it is to profile the application, if you're in control of the complete stack (backend/frontend) then you'll need to split your time between optimizing the back-end code and the front-end. If it's just a simple website, chances are the biggest slowdowns are on your front end. If that's the case you can take a look at the google chrome developer tools which includes an excellent profiler and network analyzer that can show you what your site is spending the most time on (waiting for the server to respond, executing the files etc.). Perhaps a CDN might help, or minification. If you're looking at the back end,take a look at Rogojines answer, they cover the most important things that you should be looking for.
I watched this video with great anticipation of ripping it apart. Videos like this usually demonstrate all sorts of bad practices and anti-patterns (or at least fudge the explanation). Let's just say I was disappointed... I was blown away. Not only was the content spot on, but it was delivered in an incredible way. Really well delivered and explained. I highly recommend everyone watch this, even if you have no interest in Laravel 4... Really a great demonstration of OOP done right...
Laravel will be a major player in the PHP framework world with this release.
Netbeans is pretty good. PHPStorm is (imho) better but you have to pay for it. Both of them allow you to do step-through debugging if you have xdebug installed.
ELI5, why is this better than the built-in openssl_random_pseudo_bytes() ?
Opcode cache doesn't cache the html the user sees, it caches "program" in memory. Correctly configured, you can save yourself not only the overhead of PHP interpreting the dynamically-typed code on every page view, but also the file system calls of the various includes in your project.
Thanks for watching and for the kind words!
I am kinda known for bashing bad code and bad tutorials. So it's only fair that I praise good ones. Keep up the awesome job!!!
The app I was building was an aggregator for multiple traffic sources, for online advertising. This meant it was pulling in a lot of data from multiple sources, in various formats, massaging it together and running reports on it. Doing any kind of complicated report I found to be a huge pain in Doctrine. The biggest issue I had, however, was no way to do a REPLACE on an object, you had to write a custom query for it. Also no native support for dates or datetimes or enums. Nothing that on its own is a dealbreaker, but I'm not looking forward to working with it again.
Interesting, thanks for replying.
At the moment Sublime Text 2 is my go to editor for Ubuntu - PPA's should be easy to find. If I need something more serious I turn to Netbeans. Probably the hardest part of Netbeans under Ubuntu is finding a working build of Java to install!
I've tried Sublime, but it doesn't appear to support navigating to classes when namespaces are involved. It's using ctags which doesn't support that. Well, that was my show stopper with Sublime. If I'm wrong about that please point me in the right direction and I'll try it again. Until then, I'm sticking with Netbeans since it properly understands namespacing.
Thanks for asking.
Funny, the movement towards unified coding standards is happening and eventually framework talk will definitely tone down. If http://getcomposer.org/ and packagist become standard then it won't matter which framework you use (possibly) and every framework will essentially feed from the same bowl. Honestly, I don't know if this will happen because its a bit utopian but hey, I'm willing to see it unfold. I do like the idea that anyone can use their flavour of framework yet pull from the same php codebase. Won't happen soon or ever but fuelphp will probably follow the same standard picking up composer/packagist libraries.
And I guess you think that a keyword isn't a language construct. Be sure to mash downvote because you thought you caught a mistake, even though you were wrong and that's not what downvote is for.
This actually has nothing to do with the article or warmans response to the link so i'm not sure what your point is. The ability to go out and by a book doesn't excuse the shallow content in this link.
When you say "native support" what do you mean exactly? Doctrine 2 supports date and datetime fields, which return DateTime objects by default: https://doctrine-orm.readthedocs.org/en/latest/reference/basic-mapping.html Doctrine 1 also had built-in methods for returning date and datetime fields as DateTime objects. They also have a cookbook article on MySQL ENUM support, if you really wanted to use it: https://doctrine-orm.readthedocs.org/en/latest/cookbook/mysql-enums.html?highlight=enum No ORM or DBAL will do everything for you, especially with something as complex and error-prone as database abstraction. If it works for the majority of your use cases for a project, it's great. If you're doing complex or less-common SQL, or trying to optimize with database-specific tunings it can certainly feel limiting.
I got started with [these ones.](http://forums.laravel.com/viewtopic.php?id=768)
Geez, so angry. Calm down buddy. You're right, looked it up just now. I wasn't trying to call you out, it was meant for the OP's benefit. But seriously, go get laid, get a hobby, jerk off, something to release that pent up frustration you seem to be carrying.
Anyone not aware of how PHP namespaces should work would do well to watch this. They are one of those things that once you start using them in a constructive manner, you wonder how you ever lived without them.
Let me start off by saying that what you're talking about is not Dependency Injection. It's a Service Locator. They are actually fairly different, and I'd suggest [reading about that difference](http://blog.ircmaxell.com/2012/08/object-scoping-triste-against-service.html)... Now, to your points specifically. Inversion of Control only works when you inject the dependencies directly. Otherwise, it's not actually inverting anything. By injecting the dependencies directly, the dependency is reversed. It's up to the instantiator to determine how to resolve dependencies. Not the class itself. This may seem trivial, but it's actually a pretty significant difference. First, it allows for the class to operate independent of the container. Therefore, you can swap containers (or remove the container entirely) and make no difference to the logic in your class. Second, it maintains the abstraction properly. You can tell simply by looking at the interface what the dependencies of the class are. With a service locator, you need to actually read every line of the class to see what dependencies it uses. Which is not really a good thing when it comes to clean code. To your point about saving memory or not instantiating classes you don't need, that's why controllers should be as thin as possible. If your controller needs 6 dependencies, it's likely doing way too much anyway and deserves to be either split into multiple controllers, or at least refactored significantly to reduce its dependencies. Now, what you suggest also violates multiple parts of SOLID design. Injecting the container directly violates the S (Single Responsibility Principle) as the class is directly responsible for pulling its dependencies as well. It also violates LSP, as you're able to pull dependencies in a child that the parent didn't use. It also violates DIP for the reasons that I said above. It's a valid alternative, but you're giving up quite a bit while doing it. As far as testing is concerned, why should you mock a container when the controller doesn't need it at all? It's another piece that leads to more complex tests that do steps that aren't strictly needed. Additionally, there's a philosophy that you should be able to write tests by looking at the black box of the interface only. If you need to look at the implementation of a particular method in order to test it, it brings all sorts of potential bias and complication that actually makes it harder to test well. As far as the *Symfony Standard Edition ships with and advocates this approach*, that's one of the major gripes against Symfony out there. I'm not saying that injecting the Service Locator isn't useful. But it's also like using global. You can make it work, and you can get advantages by doing it. But it complicates design, testing and readability. It complicates the interface significantly. It complicates interacting with that class significantly. And just because *framework X does it* doesn't make it right (please don't try to use that justification)... Finally, this example follows best object oriented design practices. Something that many people aren't even aware of, yet alone are comfortable with. I'd rather see tutorials go the full mile like this, if for nothing else than to teach proper technique. Because shortcuts are harmful if you don't know the full route. If you know and understand what you're giving up, then fine. But the only way for many people to understand the tradeoff is to learn it from a context like this. And that's the important part. This did an excellent job teaching a technique with almost no side-effects in the context of Object Oriented Design. It's maintainable, it's readable and it's flexible. Performance is not a primary goal of OOD. In fact, to write code with performance in mind (as you're suggesting) is a case of premature optimization. The problem with premature optimization is that for every optimization that you do, you give up something (in this case, maintainability, flexibility and readability). So the reason that we say never prematurely optimize code is that you should only make those tradeoffs for faster code when you need to. And the only way you can know what code is your bottle neck is by running the (at least almost) completed application. &gt; Never make code faster than necessary, you'll always give up something important for that extra speed...
http://w3fools.com/
i got you, perhaps i've been living in china too long the first message wasn't clear for me.
The only servers that lack OpenSSL functions are shared servers. VPS and dedicated servers can have them added. And trying to do cryptographic security (encryption, etc) securely on a shared host is quite literally impossible. Timing attacks, key storage problems, seed poisoning, etc all make it easy to attack shared hosts. And nothing is going to stop that short of moving off of the shared host. There are many benefits that shared hosting brings. Security in the cryptographic sense is not one of them. And as far as developers using `mt_rand()`, that's an education problem, not a library one. My $0.02 at least...
I know I should comment more than I did but I built it internally and just decided this morning to release it open source. I plan on working on it over the next few weeks using input from the community and commenting my code more for those that want to dissect the code.
You would most benefit from SOLID principles (https://en.wikipedia.org/wiki/SOLID). Specifically, this is entirely too much for one class to be doing. Break it down into smaller classes that have nice public API's. One class would be to fetch the data from the missingkids.com API, another class would be to generate the images from that data, and a third would tie those two together driven by parameters. You have a lot of repeated code. Some methods are unix_case and some are camelCase.
https://github.com/screavic/missing-person Here it is on Github
Yeah I was kinda worried about it being too much for one class. When I first started it was small and just did one image, that's why really I kept it in one class. I was told that one image was "too small" on higher res desktops and tablets so I started building it to do multiple images. I will work on separating the data into separate classes.
Well, congrats on pushing your first code open source!!! It's a great step in the right direction! Thanks for the contribution! Now, on the specifics of your code, I think the biggest issue that I see is the duplication that's everywhere. Both files have what looks like copy and pasted code. Use that as a sign of what you can refactor away to common functionality. For example: public function debugView() { if ($this-&gt;state == '') { echo "&lt;pre&gt;"; $xml = simplexml_load_file($this-&gt;url); print_r($xml); echo "&lt;/pre&gt;"; } else { echo "&lt;pre&gt;"; $state = strtoupper($state); $xml = simplexml_load_file("http://www.missingkids.com/missingkids/servlet/XmlServlet?act=rss&amp;LanguageCountry=en_US&amp;orgPrefix=NCMC&amp;state=$state"); print_r($xml); echo "&lt;/pre&gt;"; } } That can be refactored down to: public function debugView() { if ($this-&gt;state == '') { $xml = simplexml_load_file($this-&gt;url); } else { $state = strtoupper($this-&gt;state); $xml = simplexml_load_file("http://www.missingkids.com/missingkids/servlet/XmlServlet?act=rss&amp;LanguageCountry=en_US&amp;orgPrefix=NCMC&amp;state=$state"); } echo "&lt;pre&gt;"; print_r($xml); echo "&lt;/pre&gt;"; } That could even be refactored further: public function debugView() { $xml = $this-&gt;loadXml(); echo "&lt;pre&gt;"; print_r($xml); echo "&lt;/pre&gt;"; } protected function loadXml() { if ($this-&gt;state == '') { $xml = simplexml_load_file($this-&gt;url); } else { $state = strtoupper($this-&gt;state); $xml = simplexml_load_file("http://www.missingkids.com/missingkids/servlet/XmlServlet?act=rss&amp;LanguageCountry=en_US&amp;orgPrefix=NCMC&amp;state=$state"); } return $xml; } You can go even further, but that gives you the idea... Additionally, develop with notices on. You'll notice issues like `$state` vs `$this-&gt;state` that exist in the original debug code...
It does not render graphics... But creates png's of the map. http://imgur.com/5BvHn This Client (or library) is meant to create robots, or help bots (see https://twitter.com/BotAyuda )
Sublime Text 2, unless you want/need something meatier then it's NetBeans,.
From having a quick look at the code, it's not a "front end" for minecraft. Instead it's used to connect to a minecraft server and execute commands, for instance to automatically build things and react to events. It can also be used as terminal based command line client.
So with this, I could create a bot that would wander in a spiral outwards from a point? I was looking for something that would, in a new world, cause a wide area of chunks to be created, so I don't have to wait for the server.
Open source? Develop into an invoicing app?
I have no idea since I just made up the questions and have no need for an invoice system. I would say can you make it flexible enough and smart enough to meet those conditions? I know it's a pain, but someone might ask for it. For example, give me the option to hide AND show the address. Maybe I want it, maybe I don't. 
You should modify the blog post a little. It seems that ZF2 now uses [Zend\ServiceManager](http://framework.zend.com/manual/2.0/en/modules/zend.service-manager.intro.html) instead of [Zend\Di](http://framework.zend.com/manual/2.0/en/modules/zend.di.quick-start.html) because of [performance issues](http://zend-framework-community.634137.n4.nabble.com/Service-Locator-td4657290.html).
The ircmaxwell Seal of Approval™ bids I add this to my vimeo que.
What's wrong with unserialize() ?? edit: Auto-instantiated classes? ah well, you know the saying.. its not a bug, its a feature.
Haven't used Laravel myself, but [check this](http://laravel.com/docs/logging#basic-configuration). "Error Detail" is probably what you're looking for.
If you're getting a 404 page in Laravel, it sounds like there's a problem with your routing. Typically on a genuine error, Laravel gives a nice stack trace.
I'll check it. That one included is not used yet
Well it seems to be an invoicing page to me at the moment, not an app. Features that an app would have: * Save some settings, like name, company, taxes, currency * Save customer details * Save invoice templates * Generate invoices from scratch/templates, apply to a customer, and send * Save all invoices and be able to reissue * Track invoices through drafting, issuance, payment, and closure That sort of thing.
Check out this plugin: http://dev.bukkit.org/server-mods/worldborder/
Great idea! Next step: Grab the users location so it can target their country/province!
Pyrocms 
[Bonfire](http://www.cibonfire.com). I think you're going to like it.
crap! cheers! Edited out of here also! Dammit! 
Having spent some time trying to test old procedual code recently I've come up with a few techniques to make it simpler. You'll have to replace all calls to date with wrapper function though. It can take the same arguments it just needs to undefined by detault. Once you have the function wrapped you can omit the call that includes the wrapper function and include your own in the testcase. You can then use a global to modify values per test. public function setUp() { //reset globals each test $GLOBALS['TEST'] = array( 'mytime'=&gt;NULL ); //register function if not exists if(!function_exists('mytime')){ function mytime(){ return $GLOBALS['TEST'][__FUNCTION__] ?: time(); } } } public function testDateFunctionEpochYear() { $GLOBALS['TEST']['mytime'] = 1; $this-&gt;assertEquals('1960', date('Y', mytime()); } public function testDateFunctionForSomethingElse(){ $GLOBALS['TEST']['mytime'] = 12345678; //some known value $this-&gt;assertEquals('2012', date('Y', mytime()); } Needless to say wrapping time in a class and using DI is much better as mocking would be cleaner and simpler but if needs must, nasty testing methods are probably better than no testing at all.
thanks mate! will try this out!
Thanks, I'm going to check it out!
&gt; We do not recommend this license. If you mean "GPL compatible", then yes, they approve. Otherwise if you actually read the text, they suggest using something else.
Nice post. Should be added to the docs.
I'm a big big fan of FuelCMS. It lets me build my own custom modules and its documentation is good enough. Whenever you're in doubt just post on the forums and David (the project leader) will answer usually the next day :) I've checked Pyro / Bonfire but I have to say FuelCMS just feels like home to me, for some reason. What kind of project is it? How much customization is required? I mean, if a blog is all you need why not Wordpress? etc....
how would you do this instead?
I've been using Expression Engine. It provides great extensible support and with a handful of plugins rivals any 800 pound gorilla CMS. It's also built by Ellis Labs and has a pretty decent community behind it. 
I hope ModX has improved since I last tried it. I inherited it once from a client and many cry fits ensued. 
Like abackstrom's demo.
iptables, latest version of php, properly configured php.ini, root ssh disabled, proper logging/notification. Done. I host a couple high volume sites on one of my vps's and am a developer more than I am a system admin. I've had zero issues. A unmanged vps is less than $10/month usually. Get a month and fuck around with it. If you don't like it, cancel it.
This is a great question, and it sounds like you have some good interest in this. Personally, I like to do **both**, depending on context. For my hobby stuff, I absolutely love managing my own server and forcing myself to learn and practice all the best security practices. (Remember, security isn't a thing you do to your server, but a constant process that requires your time and attention. This is not *sudo apt-get install server-security*.) Since my job description doesn't include sysadmin time, server management is time that I'm not earning my pay. (I'm also not qualified to be a full time sysadmin, so I don't want to pretend to be one.) In those situations, I **absolutely** want managed servers. Partly to cover my own ass, and partly because I want knowledgable people committed to the uptime of my application. (This is more than just security, as it applies to lots of other maintenance that goes on at the ops level.) Either way, the answer is, "if it's important, don't be cheap." This means either spend the time the server deserves yourself, or pay/hire someone else to do it so you can focus on what you're best at.
Is it just me that doesn't give a fuck about how people label my career?
No. 
That's exactly what I meant. I was going to add something about how they don't exactly recommend it, but that wouldn't be as much fun now, would it? "Approve" has a very distinct definition "recommend", and I used them as such.
I prefer managed hosting in general. I am on a budget but I also have even less time. I am not a security expert and I don't want to get stuck updating and patching constantly. I use unmanaged VPSs for testing and such but managed ones for live sites running anything that I think will need patching. 
I was facing the same question - self managed vs fully managed just over around a year ago now and really struggling to decide. With my old work, a global ngo with about 4 other branches/smaller companies under it each with website, I chose a fully managed so then I wouldn't be directly responsible if something happened, as I hadn't really handled something like this before so couldn't promise to be able to fix anything. It was centos with plesk parallels and to be honest I found it all pretty self-explanatory. I fucked up once editing a config file in the wrong directory and couldn't get the server to start the http service late one day before a long weekend and thought 'shit'! But then realised my mistake and corrected it and hey presto within 5 mins. Just be careful obviously when editing and make back-ups every time if you're going to make some major changes, you'll get used to it quickly. That was with Hostway, as work had been with them before, had London office and UK servers, they were pretty decent. I've had my own with my basic portfolio and host some freelance sites on since the same time with future hosting, that's self-managed and they offered multiple server locations. Just read up the basics for your os, check out the firewall. That's with plesk parallels again though, it all depends if you want one with a control panel and what you want the VPS for. For me as a web developer, with parallels it's quick and easy to get things going.
Good idea, after I clean up my code I will research an optional upgrade to the code to allow for that.
Interesting! Looks as if I could use worldborder and fill to create the map segment out, then turn it off and let people explore.
I started out on a managed VPS with Wiredtree four years ago and now I have a managed server with them. When I first started out I liked how they handled all the sysadmin for me, I had cPanel and I didn't have to worry about any of the command line stuff. These days I find them very frustrating. Once you begin to outgrow the basic LAMP stack that cPanel supports you will begin to find yourself constrained by the software. Also their service doesn't support anything outside of basic cPanel administration. I had a malicious attack the other day they were helpful in resolving but I mostly find them useless, unwilling, and unmotivated. A couple weeks ago I wanted some Apache work done. I spent a whole day arguing with them over email about whether it was in their SLA. In the end I ended spending an hour doing it myself the next day instead of arguing with them anymore by email. I am looking forward to getting away from them, hopefully sometime in the next twelve months. Of course learning to manage my site on Amazon EC2 is a big undertaking. My point is that if you ever plan to get serious you'll probably have to end up doing all this stuff anyway, maybe better to just start now. Even if you do go with managed like others in here said, setup a Virtualbox and start playing with it now, and when the time to move away from managed comes (and hopefully it does) you'll be prepared.
I do agree on most things you say, but you're wrong here. A huge group of people can create a big pile of code that lacks the finesse and focus of the output of a small team or single person. Which is why I love Silex/symfony: It has contributions by many, but it shows a very focused view in regards to the design.
If you have the money, then for ease of mind it's a good idea to get managed. But I've ran my own unmanaged without any issues running Ubuntu. I don't have any high-traffic sites, but the basics aren't hard. (keep software updated, be sure to have php/whatever applications that are running - have good security, no root ssh access) I just saw you came to a conclusion, it's a good idea to have one VPS that is managed and then have one self-managed - you will learn a lot in a short amount of time. Have fun!
If you think the post was about labels in any way shape or form, I suggest you re-read it. I used the terms "programmer" and "developer" as literary devices only. I don't care what you call yourself. The point was of the terms was only to act as a segway and a medium for the conversation to make sense. Feel free to use whatever label you want...
Sorry, it wasn't a direct remark about your article it was more of a general comment about the whole "web developers aren't *real* programmers" debate.
ircmaxwell uses "Controversial blog post title in a cheap attempt to get views". It's not very effective.
It hasn't been around all that long. It's grown a lot in that time, though. I'm a mod on the forums, so join up and ask away if you have any questions.
Sure thing! I've been working with it a long time now, and like spending some time helping others with it. Feel free to drop me a line, or post on the forums if you have questions.
Thanks! I already have a few other ideas for the section.
I'm already into PHP development. I just needed extra tools for optimization. Sometimes I work in big projects, but so far I only enjoyed using Notepad++ and Sublime Text 2. I'll give Zend Studio a try. Hope there is a demo or a trial version.
There is now a third option with cloud providers who can provide platform as a service. This is an abstraction on top of managed servers. It may not be the right choice for you, but its a good thing to be aware of. Basically you can think of it as a place to run your application, where the operating system, library versions, php versions, performance, storage etc are all taken care of. (It varies between vendors what it means) Here is some info from a web page on it: (Amazon Beanstalk and Microsoft Cloud/Azure also supports php now) pagodabox.com I love these guys. They have built the best looking admin interface I have ever seen, combined with great ideas in mind like Memcache, MongoDB support (both coming) and seamless Github deployment. Unfortunately I just learned that they do not support concurrent requests on a single server. The support staffer literally told me I would need an additional server for each concurrent request I will get. phpfog.com Did play a little with it. They do not support GitHub and you are tied to their Git server -you might like this or not. But you also have to pay for boxes. Shouldn't a cloud service give me the opportunity to use multiple machines, but look like one? Here I can only see one instance. So where is the benefit? Less administration? cloudcontrol.com Correct me if I am wrong, but they seem to do pretty much the same as PHPFog. scalarium.com Looks great, costs a lot. If it actually does what it promisses, the only one that really seams to make sense to me. Did not get a chance to try it out yet. I am dying for alternatives! 
This is easy to do. Format the date you want as a string. Pass it to strtotime(); Then format the date using date() with your timestamp. Day 1 stuff man.
I rather enjoyed the article. For those who are willing to actually read it and attempt to understand what he's trying to say you'll find that underneath the use of labels there is a point to it all that is quite valid. I'm not surprised it is lost on so many people here. It's a long article with a lot of preamble and many of you probably don't have the patience for it. The article TL;DR is: "Good (programmers|developers|your_term_here) need to have a skill set that includes more than just writing code".
&gt; It just works and when it breaks or get's hacked... it's not your problem Yeah, try telling that to your paying customers. "Oh, somebody stole your credit card from our server? That was our host with their lax security, not us."
&gt; instead of relying on some crumby $10 hosting package which claims 100% uptime*. FTFY
I know where you're coming from. Managed is so expensive that I do it myself, but I know my setup is far from perfect. Thankfully I have two types of backups that are tested and I don't store sensitive data. What worries me even more are the people who understand so little but they do it anyway. Stackscript and off they go. If they ever run into a real issue its going to be ugly.
I've tried a bunch of CMSs, and still, to this day, even with CodeIgniter being a bit of a hinderance, PyroCMS is by far the most enjoyable of the bunch. Building plugins and modules are so easy. More importantly, theming just makes sense. It's so much easier than WordPress. Can't wait to see what's in store for 2.3. I think I read that CodeIgniter will be scraped in favour of Laravel 4.
I'm fine with "developer" and "programmer." It's terms like "code ninja" that grind my gears. I've even seen "source code samurai" to which I almost immediately vomited. I can only hope seppuku is on their todo list somewhere.
Homophones get me too some times :)
I would have to agree with your statements. I have found in my experience that when I am playing around with something I prefer to have full control over the environment, but when it comes to a production environment I would prefer to focus my time on the quality of the product I am delivering and leave administrative task, such as management, up to qualified people. If you try playing the sysadmin and developer roles, one of the them is going to take a hit.
Take a look at [phing](http://www.phing.info/), it is a fairly easy and extendable build-framework written in PHP. For db stuff you can use [dbdeploy](http://dbdeploy.com/) [together with phing](http://davedevelopment.co.uk/2008/04/14/how-to-simple-database-migrations-with-phing-and-dbdeploy.html) (thats 2 links). You should be able to do all the tasks you want with it and more (tagging, packaging and deploying for instance)
You could store your database credentials as environment variables in your web server configuration ... SetEnv DB_PASS s3cretp@assw0rd ... and access them in PHP with the server global. define('db_pass', $_SERVER['DB_PASS']); As for deployment it depends on what you want to do. Last year I worked on a project that basically only compressed assets and move some files on deploy, and since the project was written using FuelPHP it didn't take many minutes to write a [simple task](https://gist.github.com/4050396) for it. It's not pretty in any way, but it gets the job done. For more advanced usage I guess tools like Phing could be used.
This is a no-brainer. Use the DateTime class. You can manipulate dates and times including timezones. Check the manual.
This is just wrong. So wrong.
[Assetic](https://github.com/kriswallsmith/assetic)
If you want to learn PHP, keep away from frameworks till you have learned some of it and gained acceptable level of understanding in OOP. Frameworks are **not** for people who want to learn. They are for professional developers, who are lazy enough to want reusable code fragments, but not advanced enough to write those themselves.
Having the password in a superglobal so it can be read from anywhere, sounds like a bad idea to me, and from a "strict" point of view, why should apache know the mysql password? It's none of its business.
Valid point indeed, thanks :)
Use Phing to build your application, and Capistrano to deploy it. There are a ton of database migration tools, so pick your choice. Phing can be used to replace tokens at build time. So, I set up a target that replaces tokens with values from a build settings file. Here's my Phing build.xml file: https://gist.github.com/4050815 You'll see it has several targets, and a few of those targets are chained together (this is for a Symfony2 application). In app/config/, I ignore parameters.yml and create a file called parameters.yml.template. This file is not ignored, but contains values like @@DB_SETTINGS_HOST@@ which are replaced by Phing at build time and spit out into a file in app/config/parameters.yml. I use Capistrano to deploy all of this to either the staging or production environments. Here are my Capfile, deploy.rb and production.rb files (staging.rb looks almost identical to production.rb): https://gist.github.com/4050835 You'll see Capistrano runs the Phing commands to build my application. Capistrano is great. It sets up a directory of releases, and each time you deploy a new version of your app, it creates a new release directory with the timestamp, does all of the building in there, and if the build is successful, updates the symlink of your document root to point to your new build. It's really a slick piece of software. I have some other stuff in there, like I do use a shared vendors directory because Symfony likes to take up about 140MB for all of the vendors it uses. That takes a bit to download through Composer. Capistrano has a shared directory that I put vendors in there and then just symlink them for the app. That way on deployments, it just updates the vendors if necessary rather than downloading them all over again. Takes deployments from a few minutes to a few seconds. Now I can continuously deploy (and continuously integrate, you'll notice there's a integrate target in my build.xml file). Also, good on you for realizing this early and wanting to do something about it. Way too many developers don't and just store passwords in version control and it's horrible. Anyway, hope you can start using some of what I've shown.
Phpinfo() 
W3 certificates are worhless imho. Zend is better.
Please don't do it, W3Schools (I'm assuming you're talking about them?) is a terrible organisation. If you want to add jQuery to your resumé, write a plugin or two, open-source them and you're good to go. Code means more than certifications.
I use lessphp and in one of my global include files I check if I am in a dev environment. If I am I tell it to compile my less files into a single compiled.css file. lessphp can also minify it for you as it does it. And that's it! Compiled.css gets committed and deployed and that's what I am referencing in my header. No manual compiling through external programs or command line bullshit, it's all automatic and done while you're working on other things in your dev environment. I just started using LESS yesterday and my biggest concern was about the extra work required to get it to compile. Glad I stumbled on lessphp as within 10 mins of configuring it I can forget about that issue forever. 
Hiring manager here. In the opensource world, all of these certifications are all completely worthless. It's only on the Microsoft side that anybody looks at those. We only care what you've actually done - A good github profile is infinitely more attractive than any certification you claim to have.
Why are they a terrible organisation? I haven't used them probably in over half a decade. But I occasionally use them for reference when I forget the full list of attributes an html tag may have for example. I continue to recommend them along with HTML Dog to people who want to start out, I guess if they're a terrible organisation I'll have to stop doing that..? I don't know that I have time to write up a few full plugins, create websites and documentations for them and make them professional enough to be something I can be proud of as I currently have a 9-5 as a web dev and I have a bit of freelance to do in my free time with social commitments too. Getting certified seems to be kind of simple, I'm already fairly confident in being able to pass as I got my degree and do this for a living, so it'd be a bit of revision (maybe an hour a night for a week?) and then however long it takes to pass the exam. I don't really want to do this to put on my CV for a new job, I'm more thinking about impressing my employer when my review comes up, maybe adding a few more £££ to my salary and getting closer to hacking that 'junior/graduate' off my job title. Another reason I want to get certified so much is because the DBA/Senior Dev I work with is certified out the teeth and he highly recommends it, although most of his are database related which I think may be slightly different in terms of how much weight certifications carry. 
Would you even go as far as to say Zend is worthless? I do currently have a job, but I'm not sure I can really use work I do for them on my portfolio as a) I work as a team b) I don't know if my current employers even allow that. I have no idea how I'd find the time to build my own github profile on the side.
w3 schools are nobody, they are NOT associated with the W3C foundation, but want you to think they are, they just decided to make a site with tutorials(many of them full of errors), their certificates don't mean anything to any employer. http://www.w3fools.com
i can't stress that enough, w3schools certificate is worth nothing. well you could scam others with that cert like you will get scammed if you do this, but nothing good comes out of this.
Thanks for posting this. I've always had the confidential settings in version control, but you've pushed me to use Phing and pass them at deployment. Cheers.
I've been a professional Freelance web developer for over a decade and so far I haze ZERO certifications or professional recognition. It hasn't stopped me from building a client base, working on badass projects, or most importantly enjoying what I do. If you're established and looking to improve your cred, then a Certification is likely the right thing for you. Otherwise, save your time and money by teaching yourself and spending the cash on marketing yourself a little bit further. Gooduck!
If I can be honest here: 98% of employers aren't looking at certifications. They want to see your portfolio. Try to build a portfolio, work on open-source projects if possible. 
&gt;Write it at a quick rate with few (or no) errors. This seems like it is the most effective way to climb the ladder within a company, but hard to demonstrate on your CV/in an interview. as for your questions: - I am from North Yorkshire, UK - I know PHP, Javascript(mainly jQuery) and MySQL fairly well. I only left university in July and feel that the degree only scratched the surface of what there is to be learnt. I don't really know how to quantify my knowledge without giving you an arbitrary value though. Very capable in my role as a junior developer, I could probably cope without being a junior, definitely not ready for senior roles. That's about the best I can give you. I also know, but not as well, XHTML/HTML5/CSS and Actionscript 3.0/Flex(MVC), have some experience with JSON and XML and I hesitate to add I am reasonably experience with VB.net. I have also recently started the codecademy classes on Python, which I am learning quite easily but wouldn't bother mentioning in an interview at this point. - The firm I work for in terms of staff is a small firm, there is the three directors (the technical director still spends most of his days developing), the senior developer, the front end developer and me (junior developer). I terms of client base and work load, it is probably medium size, there is a massive portfolio, continuing work from customers and picking up a few new clients a week EDIT: I have to add, they are not the ones putting emphasis on the piece of paper at all, it hasn't even been mentioned at work except by the senior developer who said he has no degree and said his certs have been brilliant, but they are all database related as his previous roles were usually as a DBA.
Putting your own open source projects on GitHub is good. But also, find something you use or are interested in and check out their issue tracker. Find something that needs fixing and isn't assigned to anyone and fix it. There are tons of web projects that need help with stuff like this, and having your name on a commit is awesome.
Thanks for the suggestions /u/yakB. I think I have to agree and work on pretty much every one of your suggestions. The unit tests were something that I've been meaning to add before I can officially say that the library is ready for public use so once organizational suggestions were in place the goal is to start the testing!
[citation needed]
I think that there are 3 great things you should research about PyroCMS before you dismiss it from your list. * It is very easy to extend. * Content in those extensions is very easy to cache and display in different ways (widget or plugin). * The documentation is easy to understand and makes semantic sense. You can actually *read and use it*. Also, there are a lot of extensions already built and available in the PyroCMS store.
I would like to add, in practice: Get a Github account and include your github account name in your resumes! people will have a look at this, as it tells them exactly how you scructure a project and how well you are aware of techniques. And it is easy for you to update. Despite that: http://w3fools.com/
When looking at a resume if i see certifications for a web developer I don't give a shit. I look at their previous projects/employers. Previous projects more than anything. More than anything I'll google them and see if I can find their involvement in opensource projects/forums.
I don't think anybody is having a hard time understanding what he is trying to say. His analogy is long and pointless for the point he is trying to make. The article just comes off as smug. We get it, you're smarter than just some automata translating specs into code.
Database certificates can be worth it. Those are probably by respected companies, responsible for the technology they are certificating. The difference is that W3Schools is no way affiliated with neither jQuery or the W3C. There are no worthy certificates for these technologies ( that I know of). Take the one hour a day to work opensource, I'd say. Look up a project you like, take a bug report, fix it and make a pull request. Et voilà, respect and knowledge ++
Yii is populair and has a good forum community, most of the problems and snippets or whatever are posted on that forum
[Zend Framework uses the PDO_OCI adapter](http://framework.zend.com/manual/1.12/en/zend.db.adapter.html)
[Capifony](http://capifony.org/)
Lead developer here. Not only do I not look for certifications when we hire, I don't even have any myself. We don't see certificates or class work as a positive asset. We want to see self motivation and a natural desire to learn and apply all that's out there. This doesn't mean applying every new technology, but rather understanding, evalauting and adopting to new ones as needed. You should be pushing yourself but not outrunning your web users either. As others have said, BUILD STUFF. Whether it be client work, plugins or personal projects. Push yourself and don't be affraid of just making stuff.
&gt;I don't think anybody is having a hard time understanding what he is trying to say. Others might, you clearly don't. He put a lot of time and effort in to this trying to bring across how important it actually is. I don't think he's wrong either. He's a lot of things, but smug is definitely not one of them.
Technically MySQL is Oracle. So maybe the question should be... are there any php frameworks that don't support Oracle?
NO. Not at all, since nobody really follows w3c standards. Atleast not completely. Put your eyes on getting say the Zend Certification, that will make you stick in front of everybody else. They don't have that many people who have paid for the certification or have gotten it. It's also pretty damn challenging to pass.
Is this really a big problem? I've never met a programmer (using his definition of the word) who still isn't a part of the development process. 
well then i would create a virtual machine and run the project on it. Change the system date and you have not to chnage the code.
Yeah, looking at the the topics that are covered there seems an like an awful lot of topics to remember in a closed book exam. In saying that, I think it's a lot of multiple choice questions so you don't necessarily need to memorise every single bit of syntax, but even so.
Eck... You're going to piss a lot of people off if this becomes a team project. If you're serious about your app, rewrite your date handler to use objects as demo'd above.
Odbc? 
Yeah, it's a shame php.net doesn't offer a certification programme.
Don't see the reason for the downboats. You are technically correct, and that is the best kind.
"jQuery certification" &amp;#3232;\_&amp;#3232;
Some people only use what they learnt with their degrees / whatever. PDO is abstraction so any database will work, I would think any framework using PDO would work.
Apparently these guys aren't Warren Buffett fans.
Your project isn't "small" enough for that if it needs a test mode. Rewrite while you still can, if you wait it out these problems will only get bigger and refactoring will take longer. :)
Microtime has been around forever, am I missing something?
"Built in"
MySql is "technically" now a free version of Oracle.
They're on completely different levels and markets. There is virtually no comparison.
Not sure if *woosh*... http://news.cnet.com/8301-1001_3-10223044-92.html
I'm well aware. You're missing the point. &gt; How would you distinguish the use of MySQL vs. Oracle Database? What key factors should customers consider? &gt; MySQL and Oracle Database complement each other. They are very different products, best suited to different use cases. Customers can choose world-class solutions from Oracle to fulfill a variety of needs. MySQL is a great choice for enterprise web-based, custom and embedded apps. Oracle Database is the leading choice for enterprise packaged applications such as ERP, CRM as well as high-end data warehousing and business intelligence applications. https://blogs.oracle.com/MySQL/entry/interview_with_tomas_ulin_at
Yes. I am really trying.
So we can ignore that friendly warning on [the pdo_oci page](http://de3.php.net/pdo-oci)?
No. The people who take it seriously aren't people you want to work for, and the people you want to work for won't take it seriously. If you feel you need certification in something, attend college/university. A degree, even in something non-related, will get you leaps and bounds further than any of these hokey web certification programs.
I've provided as much citation as you have for statements far less bold. More importantly, I can cite personal stories how having specific certifications allowed me to obtain work outside the country I would not have been able to acquire had I not had those certifications. Governments require that sort of thing if you are "taking jobs away from local workers" to help prove what sort of skills you have beyond "trust me." In fact, take a look at any level of serious work, and you'll see requirements for various levels of certification of some sort. Losing out on work simply because you don't have a certification makes the lack of one worth less than having one. In the end, the only thing you can say is [citation needed] because you know you can't back up any thing you said with any facts. Learn the difference between opinions and facts, and recognize that as a hiring manager, your opinion is fairly worthless in the grand scheme of things. In aggregate, it might be worth something, but unless something is applying just for positions you are hiring for, it's meaningless. To believe anything else is egotistical.
With all due respect, I have made one point and one only - if I'm hiring someone, I only care if they can do the job. The way I know if they can do the job is by their experience, not whether or not they can take a test. If in your world that means I have an overinflated ego, I'm happy to live with that. But seriously, the personal attacks here are totally unnecessary and completely inappropriate.
That's a great point. We are very strategic about the content we allow our clients to host. Personally, I insist that all credit card transactions are handled by a third party. I personally set up the shopping carts and payment gateway integration. The only data we store would be records of past orders and contact lists. We've been hacked before. I got a call from the Secret Service at 7:00 a.m. telling me that my server was hacked and was currently sending spam. They wanted me to shut it down, I reluctantly complied. Since then I keep two servers spun up, one in standby waiting for me to hit the switch and make server 2 live, removing server 1 from the live production. With fully managed VPS there are people who do nothing but their job 8 hours a day to help maintain and resolve issues. My business has a lot of irons in the fire and it's wise for us to outsource some of our lesser pressing issues. Maintaining a linux server can be automated, but recovering from a hack can take days (or longer) depending on what all is involved.
yeah..Thanks! :)
No one has explicitly pointed this out yet, but **there is no such thing as a w3 certification**. Furthermore, *W3schools is NOT the w3*. W3schools is just a website (and a bad one at that), it is in no way qualified to offer certifications. They are less than meaningless. Heck, I wouldn't trust their questions to even be correct. Just check out the mistakes listed on http://w3fools.com 
Travis is great for public projects, but is still lacking when it comes to in house stuff. If you only work on open source it's great, if you have any proprietary stuff you don't want public then you're going to have to wait for the private version to mature a bit.
I'd be curious to hear any opinions about these CI servers too. I'd heard the same as tedvim about Travis, although it's looking hopeful for the future.
just change the time on the system...
I've heard about people using Zend PDF and Lucene libraries, but haven't done it myself
thanks, but nope.. just runs it and prints out the results in the browser. I want it to open the command prompt and run it just like it would if I double clicked on the .bat file. basically what i just realized I need is a way to open the command prompt from php.
nope. passthru and exec also simply print the results in the browser. i want some way of opening the command prompt.
The [start](http://pcsupport.about.com/od/commandlinereference/tp/windows-7-commands-p2.09.htm) command might work. Maybe you need `runas`, too.
Didn't know Yahoo had a better limit than Google for this ... sweet
If you're familiar with the MVC design pattern, CI is a piece of cake to learn. Everything is fully documented and they have a great IRC channel with lots of friendly people. Start here: http://codeigniter.com/user_guide/tutorial/news_section.html
Your general approach to *any* project should be this: 1. Figure out all the requirements 2. Pick the tools that allow you to fulfill those requirements with the least time and effort.\* \* Keep future requirements in mind too So if you have to do a web application of a certain type, CI can save you a lot of development time due to the built in forms handling, decent Active Record class, and a bunch of other build in modules. Something like Laravel or Symfony might save you even more thanks to the ORM and Migrations that come along. In some projects, you end up having to "tweak" the framework so much that you'd have been better off making your own, so generally you'd want to know whether your project is going to "fit" into the framework well enough before developing with it.
Contact a company that does direct mail. You can buy a scubbed and verified list based on your "customer list".
last time i looked google was 25,000 a day not 2500
have a look at diaspora if you want a complete solution. its open source too.
The problem with frameworks is, that they tell you how to shape your application. it might be a good thing, if you are working on a large team and making something for enterprise, but if you're freelancing or in a startup and need some more freedom, then you should look at microframeworks. Check this article: https://igor.io/2012/11/09/scaling-silex.html
If you are **actually** familiar with MVC design pattern, then you will be completely confused by CI. It does not implement MVC. Instead it aims to implement Rails-like pattern in PHP. It just uses the names from MVC. 
A few reasons why CodeIgniter has been great for me these past 4 years... 1. Helpful Community 2. Ton of examples via StackOverflow/Google Search etc 3. Easy to integrate Packagist/Composer/Spark libraries 4. Flexible and light meaning you code how you want and create your own standards (some may think this is a con) 5. Simple to learn with great documentation 6. Version 3 coming out soon Note: I believe Lavaral is beginning to have these same qualities as a number of high profile developers have recently jumped from CI to Lavaral
that seems ultra insecure, and nearly impossible.
Input: Picture a normal HTML page, with some php code in the page,wherever it may be. Code something like: &lt;div&gt;&lt;p&gt;Here is some text&lt;?php echo 'blah blah'; myfunction("thing"); myfunction(); ?&gt;&lt;/p&gt; &lt;?php // myfunction("nodisplay"); ?&gt; &lt;/div&gt; Expected result: As a final result I would be wanting an array of each input. So in this example it would be: Array([0]=&gt;"thing" [1]=&gt;) Where the first item is "thing" (double brackets inclusive) and the second is NULL. The function in php brackets is ignored. Current Result: A large array with many items between tags equalling an empty array (unless there is something within the brackets). Thus unable to distinguish between a false result and one from an empty bracket function call. Maybe to help explain it, I was using this code: preg_match_all("/&lt;\?php.*?\b".$function."\(([^)]*?)\);?.*?\?&gt;/si", $the_file, $result_list); Which works if each function call is within its own php code and there is no bracketing. But of course that is not a guarantee. Of course non-regex solutions would be great too. I looked at token_get_all, but didn't really understand the output and it didn't seem to give me what I wanted. 
This is pretty much impossible with a regex, at least to do it consistently. But I think _why?!?_ is the question at hand -- there is no good reason anyone would ever need to do this. Regardless, the [tokenizer](http://us.php.net/manual/en/book.tokenizer.php) or [reflection](http://us.php.net/manual/en/book.reflection.php) extension is likely much more qualified to do the job.
You can't do this in regex (alone). You need to match the number of opening backets with the closing brackets to find out where the function starts and ends. 
Could think of it as an alternative to using {something} in an HTML document and parsing the document for functions. Like a template parser. You wouldn't be able to give a quick paragraph primer in those two extensions would you? They are so confusing, haha.
[Sessions](http://us3.php.net/manual/en/ref.session.php) and/or [cookies](http://php.net/manual/en/features.cookies.php) on the server side. Or you could make the script utilize ajax and keep the variables in memory.
That sounds logical. Thanks!
Oh lord. Expression Engine is awful. Good luck trying to train any clients to use it.
To elaborate a bit on what others have said, you want to redirect to the results page after processing the posted form, not post directly to the results page. So, you post the form data to a controller that processes it and, as others have said, saves it in the DB. On error, the controller renders the form view, with the POST data preserved for editing. On success, it redirects to the results page, the form data gets expired to prevent accidental re-submission, and the results are read from the DB and are completely independent of the form data.
Keep in mind that you'd also need to check if you are in a string expression. If so, the bracket isn't a code bracket, but part of the string, and shouldn't be counted. 
The good news is, Yahoo Placefinder does have a much higher limit than Google, and is pretty easy to use. The bad news is, you have 5 days to scrape the fuck out of it, before it shuts down. After that, it becomes BOSS Geo, and is yours for the princely sum for $6 per 1000 queries.
Platform 1.1 is open source and free, you only pay for a licence if you want the features that a licence provides. You can find Platform 1.1 on our github repo. https://github.com/cartalyst/platform
Or just javascript. You don't *need* an actual ajax call to implement a possible solution to this.
Damn, didn't know it was shutting down. I use google geocoder anyway :)
These days the main appeal of CodeIgniter for people developing brand new applications is that it has a low PHP compatibility, sticking at PHP 5.2 for it's next major version. This requirement is slowly becoming less and less important, as PHP 5.2 is finally being eradicated in the wild. This is why plenty of people are switching to use newer PHP 5.3 frameworks which add great new functionality and in most cases also offer a considerably more attractive interface thanks to the addition of callbacks and annonymous functions. That and of course namespace support is a godsend. Can't have a controller and a library with the same name? Not anymore! You should definitely look into Laravel 4 and Silex - very lightweight systems with Composer / PSR-2 support.
We been working on this for awhile, and will be converting to L4 in Q1 of next year, but we want Laravel 4 to be out of pre beta, stable, and have a couple months soak time before we start.
Fair enough. On a slightly unrelated note: In your screenshots I saw you're using Redactor. I've recently found out that they've changed their license, so you can't use it in open-sourced software anymore, unless you buy a license for $ 400,-. I've just recently swapped out redactor for the new CKeditor, and with a bit tweaking it looks almost as clean, and even works better with keeping your HTML valid. [Screenshot](http://i.imgur.com/9XZrW.png).
...if you're not using cookies or sessions then how is Javascript saving the data between pageloads?
This is sound advice. If you don't care much about the security of the data - like if it's a personality test to drive ad revenue - then cookies on the client's side will keep load on your server minimal, and it'll save for probably a montho or so if they want to come back to it. If you don't care about permanence but do care about security, like for a quote calculator, then use sessions. Sessions will be automatically wiped periodically, but for a five-minute run-through then they're fine for immediately accessed information. Depending on your server you can probably change the life of the session. If you want any degree of permanence then save it to a database. Unless you know you can't have a database then I'd suggest using one anyway. It'll make collating statistics a hell of a lot easier and all of your permanence and security issues are gone.
Thanks! Ill have a look at silex. 
I only wish this CMS would be based on FuelPHP Framework
Agreed. * GET form_page (user selection) returns form submission page * POST form_results (on submit) updates database and returns redirect to same page * GET form_results (called by browser automatically) returns information.
No , I pay my mortgage by making PHP code. While some of latest frameworks might not have any direct relation to RoR, most of them use the same concept. What I was getting at is that frameworks, that were developed in 2006-2008 actually **are** almost direct RoR clones ( ... and it's not only local PHP phenomena). And the Rails-like pattern is actually useful **only for prototyping** (fast creation of throw-away code). It is popular not because it makes maintainable and well structured application, but only because you can quickly scaffold the initial page. When you start adding logic, the code starts to rot.
It should pop a command window up on the screen of the user that it is run as. So if you do system() in a php script that was run as randomphp user and you're logged in as randomphp user, you should see it pop up. PHP is probably being run by your web server (Apache, IIS, etc) which is probably being run as the system user, which means you'ren't going to see it at all. Maybe runas? system("runas /user:randomphp example.bat"); (yea I just made a double contraction).
My first screencast, evah, go easy on me lol. https://vimeo.com/53340902
You should return an error but not a meaningful one, chances are a lot of those 'attacks' may just be a user doing what users do and the last thing you want is from them to assume it worked or to get frustrated
Should be named Anatomy of a vulnerability...didn't seem like there was much attack involved.
Thank you.
&gt; Is the security of a framework worth it? A framework does not just provide security features, The most important reasons for using frameworks are: * Separation of concerns, for those that implement the MVC pattern. * Embedded best practices, eg. if you write your own framework you may be tempted to write ugly hacks and insecure code, you'll skip testing... etc. Whereas a framework will impose some good practices (otherwise the code just won't work). * There's usually a community behind it, so you're very likely to find plugins or recipes for whatever you're trying to do.
I would not really call that a 'hack' of any sort. Anyways, wasn't stackoverflow coded by Jeff whachamacallit Woods? Who claimed to be super programmer/security guru? Amateur mistake.
... You dont load any other pages, just use dom manipulation. 
There has to be a better way to do whatever it is you want to do. Regexes are great for a lot of things; Parsing XML, HTML, code or especially a mix of those is definitely not one of them.
Wait, how is this related to PHP?
I was looking for a PDF to Word converter in PHP. This looks like it might be useful. Thanks!
Given that the user would never see a page reload, they wouldn't have any reason to click it.
ok. So how do I test such a method?
**Disclamer** This solution only works on **PHP &gt;= 5.3** [Doctrine DBAL](http://www.doctrine-project.org/projects/dbal.html) has native support of oracle. And it is packaged in the [Symfony2](http://symfony.com) framework along with [Doctrine ORM](http://www.doctrine-project.org/projects/orm.html). But you can also use it with other frameworks.
To expand on the subject you could parse your CSVs and insert relevant informations into a table along with the filename and line number into a table. The to find duplicates you can run a query similar to this: `SELECT col1, line_no, filename FROM sometable t1 JOIN sometable t2 ON t1.col1 = t2.col1 AND t1.filename &lt;&gt; t2.filename` Which would give you all the duplicates for col1 and their location. 
1. You design your classes with dependency injection in mind. 2. If your dependencies are non-deterministic, you might want to create mock objects and inject those instead. 3. You check your methods' results against an assertion. If the assertion is true, it passes the test. If it's false, it fails the test.
What are the things that I should not do, when designing with dependency injection in mind. Are you telling one should not call methods in the same object? If not, how can I make a method independent of other methods in the same object? Or what is the standard way of handling the situation.
&gt;Are you telling one should not call methods in the same object? Like I said in my original response: **No**. You are allowed to call other methods. 
Ok cool, thanks for the response. For new projects should I just use utf-8 for everything?
You can't. It's up to you to make sure that the object has the appropriate state for when you test it. 
That doesn't sound right to me. If he did, he sure didn't do it on [his blog](http://www.codinghorror.com/blog). 
I've ended up using ob_start. Defining a constant. Managed to create a variable in the function if constant is defined that outputs a unique string surrounding json_encode(func_get_args). Including the file (thereby outputting it into memory) and parsing the text for the unique string. Finally json_decoding the contents of the string. Phew...
Joel Spolsky and Jeff Atwood started StackOverflow together, which then evolved into becoming the StackExchange network. 
I've ended up using ob_start instead of a regex. Defining a constant and getting the function to output json_encode(func_get_args) between two unique tags, when the constant is defined. Including the page and parsing the unique tags. Finally json_decoding the tags content. Phew...
Looks very cool, but my installer on a local created database now hangs on loading the sqlite3 so, while i'm on mysql. I can't see nothing now but : &gt; Oh no! &gt; &gt; Server Error: 503 (Service Unavailable) &gt; &gt; What does this mean? &gt; &gt; Something went wrong on our servers while we were processing your &gt; request. We're really sorry about this, and will work hard to get this &gt; resolved as soon as possible. &gt; &gt; Perhaps you would like to go to our home page? Apparently now my whole platform installer is botched? I tried deleting the cookie and starting the setup procedure again, but same story. (still worth an upvote though) 
&gt;I once got chewed out for using " rather than ' in a single line of example code in IRC. http://oi44.tinypic.com/2mg89e1.jpg
delete your platform/aplication/config/database.php and it will restart the installer, make sure to drop your tables from the database you created if you already went through the installer. You can hit up our forums http://www.getplatform.com/forums for faster support.
forgot to answer your question, we throw a 503 service unavailable if there is ever a problem connecting to the database.
I've done a bunch of interviews with people, and I don't care if you give me the exact answer. I want general answers. I want to know that you are at least capable enough to go find the right answer if you don't know it. Good luck!
Maybe he couldn't recover that page from Google cache ;-)
thanks! yeah, research and willingness to search and ask for help are important 
Definitely. If you have the basics of programming down, you should be good. If you understand how namespacing works in Java, you should be good to go!
Other people have said it, but even though you're interviewing for a senior PHP position, make sure you point out that you know other languages! I've rarely hired programmers who only work in one language, because that smacks of cargo-cult.. That said: I'm going to assume that you're familiar with basic non-PHP-specific programming concepts (MVC, OOP, design patterns etc), so let's skip that part.. I'm sure you'll review that stuff on your own.. So for PHP stuff: Depending on whether or not you'll be responsible for any dev ops (sysadmin) stuff, you may want to read up on PHP-FPM running on Nginx, since that might be new to you, and is replacing Apache+mod_php as the best way to run PHP in a production environment. Also, do some reading on Composer (the package manager) and the "modern PHP" movement, as this will help you understand the changes in the overall library/package ecosystem and the direction that the community as a whole is heading (not just core PHP features), with shared packages, dependency management, etc.. These tools are increasingly important when building with PHP, at least if you want to take advantage of community code and tools.. PHP has long suffered from a re-inventing of basic concepts in every project, and this movement is aiming to resolve this in a way similar to Ruby gems etc.. And finally, talk about your problem solving skills and how you approach development in general. It's good to learn the new PHP stuff, but make sure you know *when* to use them and not just *how* to use them. As an interviewer, I would rather know when you think traits should be used or not used, not just that you understand what they are.. Same with closures, and so on.. Good luck! 
I can't ever jive with code that has "community" licenses or whatever. Too much conflict of interest. What happens when the functionality of the non open code is replicated by open code. 
It's fine line for sure, and one any company taking up the open source torch has to deal with. For us, we're planning to implement an open market, where third parties can provide both free and paid versions of their extensions. In that, at least developers begin to have a choice if they wish to only use the community version.
It sounds like a cache thing because you are doing it right. Try clearing the cache.
I just recently learned about $_REQUEST, and thought it was wonderful because I didn't have to worry about get vs post .. so what is wrong with it?
wow thanks! this is some nice advice. Indeed I just have used Apache to serve PHPm I'll give Nginx a try. Also I haven't seens this "modern PHP" stuff, what do you do? follow community leaders on twitter and read their blogs for instances? Thanks again
$_REQUEST also includes variables from cookies and takes control away from your ability to know the source of the data. If you explicitly use $_POST, $_GET or $_COOKIE you know where the data came from(that doesn't mean it's secure, just more secure). If you're expecting something to be in GET or POST the user could overwrite the data with a cookie. It also makes XSS easier. If your code only accepts data sent through $_POST then they wouldn't be able to form a link and send it in an email to an unsuspecting user who would click the link, because you can't cause a POST through a link, the variables are always sent through GET. 
This is the last one. Hes been shadow banned. http://www.reddit.com/user/ircmaxell is gone, but http://www.reddit.com/user/ircmaxell/about.json is still there. Shadow banned.
Sorry, not correct sub for this. Try asking in irc.
Mock the class you're going to test and stub out the methods you don't want to run, then interact with the mocked object as you normally would.
I worked in a job that had to geocode addresses and one solution that they used for the non-standardization of addresses (st, st., street, etc.) was to normalize the data - they would strip non-alphanumeric characters, lowercase all alpha characters, and then using a static list (obtained from the post office) they would convert the street suffixes to the long form. This normalized version was stored with the address as a unique value to prevent accidental duplication. So, for example, '123 Main Ave.' would be '123mainavenue'. it wasn't perfect - if there was garabage, like Suite or Apartment, but those could easily be managed by hand since they were fewer in number. Also, we used the Tiger geocoding database: http://geocoder.us/help/faq.shtml
Neat little trick, however I just set up the virtual host to point to ~/Sites, and then use http://localhost/mysite/public for the URL. The only "extra" work that I have to do then is to ensure that my webpage uses the &lt;base&gt; tag properly. My rewrite rules only ever use relative paths, and I've never had a problem otherwise. As for file paths in PHP, I use realpath(dirname(__FILE__) . '/..') in my index.php to my application/document root. I can't seem to do the [FILE magic constant](http://us1.php.net/manual/en/language.constants.predefined.php).
Really? Isn't this PHP?
I am very impressed! I have been using the Seagull Project for a long time and I have been looking to migrate away, this might just be the one I have been looking for.
Figured this out. Here's the answer. $text1 = "123 Fake Address Suite.x 3"; $input_string = $text1; $address = ""; $addressnum = ""; $matches = array(); if(preg_match('/(?P&lt;number&gt;\d+.?) (?P&lt;address&gt;[^d]+) (?P&lt;apt&gt;[^d]+) (?P&lt;aptt&gt;\d+.?)/', $input_string, $matches)){ $address = $matches['address']; $addressnum = $matches['number']; @$apt = $matches['apt']; @$aptt = $matches['aptt']; } else { // no number found, it is only address $address = $input_string; } echo $addressnum."&lt;br&gt;"; echo $address."&lt;br&gt;"; echo @$apt."&lt;br&gt;"; echo @$aptt."&lt;br&gt;"; 
The ideas surrounding PHP: The Right Way are a good start: http://www.phptherightway.com/
If you stub out the methods of the object you're testing, it behaves exactly as you would expect - those methods will return `null` by default unless you override.
how does that work internally? I mean, what really happens when you stub out other methods?
I kinda see what you are saying, but there is nothing in Cake to stop me from accessing raw $_POST variables, writing my own queries, using $_SESSION, not using the form helper etc... Sencha was a different story and any time my use-case deviated from the norm, it was a complete bitch to implement in Sencha. CakePHP doesn't really stop me from doing anything and if I can't figure it out the Cake way I can just use some vanilla php or sql queries to get it done. If we could stay on topic now.
We're loving Backbone. I would suggest that you not immediately turn your entire app into a single page, though. Having page reloads between functionally independent sections simplifies things.
Can you provide any more details on this? We were definitely thinking single page application and I've written them before albeit using Mootools and MochaUI.
I'd compare it to GMail vs. Google Plus--they're from the same vendor, they share sessions, and they even have similar functionality, but there's no Ajax transition between them. My friend tried to have one page that hosted all of the different sections of his application and ended up starting over. My company has just had one page per module, with each at a comparable complexity to GMail, and it's been great. I'm not an expert, though; more power to you if you can pull it off!
Stop reposting. &gt;But got immediately down voted for no apparent reason removing the question from everybody s view. No, it didn't. You only received one down-vote and it's still in the list as the fifth item: http://www.reddit.com/r/PHP/new/ &gt;When developing with unit testing in mind, how can I test my methods independently if the method being tested depends on the methods in the same object., called via the $this object. Like I said before, you're not supposed to test the methods independently from each-other. You're testing the functionality of the object, and methods can call other methods. And interaction with the object would change the object's state, since that's kind of part of what you're testing, after all. &gt;I know I can replace dependencies on other objects by mocking them. But my impression was that even if you use mocks, you cannot replace the '$this-&gt;method()' calls made by the function being tested to point to the mock object.. Is this possible? No, nor should you do it. Again, you're testing the class, making sure that it functions properly. You're not supposed to change the behaviour of the class you're testing when you're testing it (only its dependencies if they happen to be non-deterministic), else you wouldn't be testing the same code which executes in the real world.
Can you give an example? *Generally*, if you are writing your code like this and it's making it hard to test, *you might be writing bad code in the first place*. Two things: What you're speaking of is possibly [tight coupling](http://en.wikipedia.org/wiki/Coupling_(computer_programming\)), which you want to avoid. Secondly, there is far less need to test the private api of your codebase. What I'm referring to there are methods which are internal to a class and used nowhere else. Test the public interface instead, as that is what *needs* to be tested. I recommend you watch this video on [refactoring](http://www.youtube.com/watch?v=DC-pQPq0acs), as it talks about a lot of what I've just mentioned with clear examples to demonstrate why it makes sense. Although it's in Ruby, he's talking about general principles that should make sense for basically any OO language.
`start()` is a misnamed function! It's doing *way* too much. It doesn't just trying and start the car like it should, it's checking for all kinds of things and ring bells and turning on warning lights and all kinds of shit. Get `start()` to start the car, and raise an exception if for some reason it's unable to. That's all it needs to do. 
&gt; Get start() to start the car, and raise an exception if for some reason it's unable to. That's all it needs to do. This is just an example, and the show warning lights and ring alarms are just analogous to exceptions being thrown. ie when internal diagnostics returns some values that prevents the car from starting. Anyway the point is the start function needs to call getInternalDiagnostics() method to decide whether to continue or raise an exception, like as follows.. class car { function getInternlDiagnostics() { } function start() { $diagnostics = $this-&gt;getInternalDiagnostics(); switch($diagnostics) { .... case 'a': throw new exception("error 1"); ...... break case 'b': throw new exception("error 1"); ..... ..... break; case 'c': initiate ignition; } } function stop() { } }
&gt; JavaScript is an enhancement and your website should still function without it, else you would be doing your users a big disservice. Is this a big issue? I feel like the subset of users who absolutely cannot bear having JS enabled is fairly small.
I have started using laravel.com for the very reason that it has full restful routing baked in. Having written various applications in CakePHP I can tell you that it is great for quickly building applications and organizing them effectively. It does however like to very tightly shoe-horn you into a certain method of code design which can be counter-productive when the alternative is to use a framework that provides a more bear-bones environment from which to build upwards.
Wow, hiring a 'senior' PHP developer that only requires three years of experience...
i'm not interested but was curious where they are located. i didn't find it.
&gt; My worry is that we will get into development and a month or two down the line realize this was a bad decision. This is always a risk when you are taking a new technology that you have no experience with. Even if the framework is good, it might take you guys a while to figure out how to properly use it and you may produce nasty code until then. Backbone seems to be working well for a lot of people so I wouldn't suggest against using it. However, try to learn as much as you can about the downsides (e.g. memory management seems to get a lot of people trying to make single page apps) and be very open to refactoring often during the early stages of dev.
What's changed/added in 5.5?
PHP 5.5.0 Alpha 1 [Changelog](https://git.php.net/?p=php-src.git;a=blob_plain;f=NEWS;h=839c713c17c41936aa09701b5b1ea3b1ed3dffd4;hb=a54db3838f780628d898369c4cfcf41f5bded97c) 
Thanks! 
I already answered You in the previous post.
Yes ... sock puppets ... **anon8307** (2012-11-14 (0 days old))
We only allow telecommuting positions to be posted here.
Still haven't upgraded to 5.4 crew, checking in. I'm really excited about some of the things in 5.5, especially generators. The core team has been doing a fantastic job, I'm very impressed.
sure, will do
No you don't.
Damn, I still have to write code on 5.2 because other people use my software and they never upgrade.
&gt;advanced git knowledge This is silly. Knowledge of ANY source control system will do, or at least an understanding of how they work and how to properly use them. They're easy enough to pick up on the fly &gt; active participation in large OS projects Nice to have, but remember, even plugins that you write to solve your own problems fall under this task. A lot of people think that this means submitting patches directly to the project. &gt; Extensive knowledge of databases Definitely one you need, but don't just know a list of databases. Work with them, learn about optimizing your queries/tables. A lot of developers can list of databases they've heard of, or read about once or twice - technical interviewers can tell when you have no idea what you're actually talking about. &gt; extensive knowledge of html/css/js. HTML5/CSS3; Backbone.js/Knockout.js/Angular.js Know the basics of html/css/js - if you're applying for a senior development job chances are you're pretty familiar with it, but if you're not no worries. If a company has a senior developer position they probably have a front-end developer who will handle this. Know OF some js libraries and do a bit of work with them. Extensive work is not necessary, but understanding them is important. &gt; good knowledge of modern tools like Composer, Travis, Capifony, Behat Important. The big reason for these is that it shows you are keeping up with current technology. You aren't stagnating as a developer.
The framework we use is not up for debate really, outside my control. With that said I'm comfortable in CakePHP. We are a CakePHP shop and have been for 5 years.
I feel your pain bro
If it's a RIA, then fine. Otherwise, JavaScript should be unobtrusive. 
Someone should probably tell you now... don't use FTP. Especially not for backups. FTP is broken in so many ways. It's slow, it's cleartext (so your data is visible over the wire), the protocol defaults to character translation so that binary files often end up corrupted. Use SFTP.
Removed until you confirm if telecommuting is allowed.
The short answer is no. I've used oracle at my job a lot, and none of the frameworks really play nice with it. We use mysql for framework projects now and non-framework projects tend to use oracle.