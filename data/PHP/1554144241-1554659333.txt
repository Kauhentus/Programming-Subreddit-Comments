Then you need to point that out, and read your own replies to see who is directing actual attacks. What mistakes? Do you actually write any php code? You haven't any docs. You would have seen who used the project in it's original form. 
I don't think that's the case. My reading was that the `license.txt` file was on Pipdig's server and the contents of that file was a URL on Kotryna Bass's domain. It's weird all around and seems like it could do with a little ore time for the truth to clear before the pitchforks are drawn.
I don't think that's the case. My reading was that the license.txt file was on Pipdig's server and the contents of that file was a URL on Kotryna Bass's domain. Based in the code shown in the original article, it's not clear how his could have anything to do with the author string of the theme. It's weird all around and seems like it could do with a little ore time for the truth to clear before the pitchforks are drawn.
Its simple, they arent. The annotations are configuration that can be done in xml or yaml without ever touching the entities themselves. When you configure the ORM, you tell it whether the mapping is annotation, xml, or yaml and then write your mappings as such.
How would you sandbox the theme so that it had no way of accessing the core database, either directly, or via reading the credentials from the environment or config files?
The NPM ecosystem is a raging dumpster fire. Dunno about Ruby ecosystem, but for Composer and PIP, you don't hear about those kind of things (or hear about them at 1/10 the frequency you do with WP/NPM). Why? The whole community is different. I think it stems from the fact that most hipster fuck arrogant bootcamp "developers" are drawn away from PHP and into Node/WP, mainly due to the fact that you can play Lego and feel like a programmer opposed to actually understanding how everything works. On the other hand, the proper PHP SWE community (that uses Laravel, Symfony, etc.) tends to be composed of decent-to-great developers that actually use PHP because it allows rapid development rather because "it's easy" (as in, it's easy to write shit code that works). As for Python, huge parts of the community are either Scientists (Data, CV, Etc) or DevOps guys, neither of which tend to be clueless. And unsurprisingly, the ecosystems are reflections of each community.
Too strict! I suggest we also allow : &lt;text Hello World/&gt;
You know, I agree that **this** isn't a WP failure. But this very comment chain just illustrates the problem with the whole WP ecosystem - people expect it to be something that it's not, sell that expectation to clients, and then throw together a 100 band-aids to create subpar, vulnerable solutions that should never have been made inside WP.
Annotations in Model classes directly are horrible ideas, it violates SRP and the model classes are now responsible for both representing the business logic, and managing its database configuration. Its done for convenience reason, it may be suitable for smaller team in which one developer handles both business and infrastructure logic. However, in bigger teams with dedicated business and infrastructure teams, it becomes a maintenance nightmare. 
True if I would use xml or yaml then it get's clearer that it is not directly coupled. But if you write annotations in the same file it get's the semblance that it is. CakePHP writes this data not in the Entity. The configuration is in the Repository/TableModel would this not be a better approach?
Since 7.3 you can also use references. $foobar = ['foo', 'bar']; [$foo, &amp;$bar] = $foobar; $bar = 'foo'; var_dump($foo, $bar); // "foo", "foo" 
you have to work on your documentation! When I look at [https://github.com/ezSQL/ezsql/wiki/Documentation](https://github.com/ezSQL/ezsql/wiki/Documentation) there are no(!) examples using prepared statements. in the readme there is a part, telling that all missing documentation will be in the docblocks. Okay... so I saw the method \`delete\` on the readme file. But never found a part, telling me how exactly it works. Okay... so I looked into the source code: [https://github.com/ezSQL/ezsql/blob/master/lib/ezQueryInterface.php#L370](https://github.com/ezSQL/ezsql/blob/master/lib/ezQueryInterface.php#L370) okay, cool. and what are the parameters? How exactly does the $whereKeys part work? And nothing there is telling me why I should use your library and not for example doctrine DBAL or eloquent. And really... you should fix your code style. let's have a look at the query method in the ez\_pdo class: [https://github.com/ezSQL/ezsql/blob/master/lib/Database/ez\_pdo.php#L295](https://github.com/ezSQL/ezsql/blob/master/lib/Database/ez_pdo.php#L295) You're mixing tabs and spaces.Your opening brace is one space to wide indented. multiline parameters aren't on the same height (see line 339), sometimes you use no brackets for single line bodys, sometimes you use them. just use a tool that fixes your code stile, it will increase the readability a lot!
The documentation page for this bundle or component for doesn’t work. The page said it doesn’t exist. Any ideas?
Okay you basically confirm my question. But who is right now? You or @dlegatt or you both? On the other hand why does Symfony say it's best practice to use annotations?
It's like that so that Doctrine can support multiple ways to map the data and multiple data storage engines. Most other ORM implementations only have one way to map fields to table columns and only support one or two data storage engines. Some don't even bother with mapping. The field name in the model is the field name in the table. Just the fact that Doctrine comes with a mapping mechanism makes it a Data-Mapper-Pattern. I wouldn't really worry about what it's called. The point is you need to tell the PHP code itself what field in the database it is and what type it is. It also needs to have logic to convert from database to PHP value and vice versa. Personally I think Docblock, XML, and YAML are all crap. Use PHP arrays https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/php-mapping.html It's faster and more explicit.
Because Symfony's best practices (and one could argue the framework itself) are biased towards easing and speeding up the development of short-term contract websites, as opposed to big projects spawning years of development and maintenance.
Lol it’s Wordpress are you new around here? 
Usually stock data requires a daily expensive license to use. 
You need to take a look at the contributors page. The docs are bring updated from it's original form, convertered HTML page to markdown. As of right now you will need to look at the phpunit tests for examples of the where cause part. Documentation is still a work in progress. Doctrine DBAL and eloquent are PDO wrappers, adding an additional ORM layer. I got a few ideas from them to construct the query builder. If you understand there where routine, then that is how $whereKeys is used. 'where(eq(***, $var))'.
Thx for your long answer. &gt; Some don't even bother with mapping. The field name in the model is the field name in the table. Good to know. For small projects it's handy. I started today with doctrine therefore I did not know that. Thx for giving that hint. &gt; Just the fact that Doctrine comes with a mapping mechanism makes it a Data-Mapper-Pattern. Ahh okay and how you map is just a little detail then. &gt; Use PHP arrays I will have a look into that. I like the fact that my Entities are clean then and I don't have to bother with xml. Looks interesting... 
if you didn't live under a rock you would know.
Work in progress, please check https://github.com/symfony/symfony-docs/pull/11071
Keep telling yourself that, but putting all the mapping to external files makes your job as project grows harder, not making it more maintainable. You put doctrine mapping to external files, validation constraints to external place, serializer config etc etc and now you have lot of places to touch each time you rename field
I am *so* glad I found Eloquent in 2014. I haven't looked back! Eloquent is the ONLY ORM I've ever used that lets me easily get more to the metal that I never have felt *constrained* by it, and setting it up and teaching a bunch of terrible devs how to use it is pretty great, too!
This isn't the correct venue for how to do illegal things that violate one of the richest company's TOS...
\&gt; 2012-09-04 I saw this and I think, oh noes, the database is wrong again but I found that it is your nick. &amp;#x200B;
Didnt know scraping stocks is illegal. Saw there was an open source php program that partially scraps data but if its unethical. Prefer to leave it like that
\&gt; Thanks for the read... also **please never, ever call it GR8 again**. You are tempting me to say it. Anyways, why not? &amp;#x200B; &amp;#x200B;
Didnt plan on using it publicly. Just that i saw open source on scraping stocks via google finance. But good to know its not allowed
This doesn’t really matter. Even if you did scrape sites, you can heavily notify any viewers that they use the data at their own discretion and that there is no liability or warranty given to viewers of said data. Now that said, it could be against the terms of the site that your are scraping from if it was to be publicly viewable (but OP said it’s a personal project so doesn’t matter).
Data Mapper means an object is not responsible for retrieving and storing itself. Instead this is the responsibility of other classes like a repository class or entitymanager. This is in contrast to the active record pattern. How columns are mapped properties has nothing to do with it. 
Why is WordPress still relevant in 2019
What part of Symfony's best practices make you think that? The biggest problem is that developers using an ORM like Doctrine or a framework like Symfony don't understand is that the limitations of the libraries should not become limitations of your codebase. 
I do remember to read an article about the launch of a new package for Symfony, that made the CRUD frontend with ReactJS. Tried to find it but I was unlucky, but I'm sure it exists so you can use it out of the box.
You can do the exact same thing in Doctrine - you can write all of your mappings in straight up PHP if you want. I personally prefer not to use annotations, but I've encountered Doctrine libraries I've had to refit to support YAML and XML.
Who says it is illegal?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
/r/phphelp
In short, because they advocate coupling your code to the framework. There are examples with annotated controllers, annotated entities, business logic in controllers and whatnot. Of course, you don't have to code this way. And I'm not even saying it's wrong, either. Just... That these guidelines are tailored for this kind of projects.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Whatever works for you, of course. In my case I don't find myself renaming columns that much often. Nor using Doctrine, tbh.
It's still a data-mapper, it's just that the *specifications* for the mapping *happen* to be stored inside the same file. But they could be stored elsewhere just fine.
Their response makes no sense for a lot of reasons... [https://twitter.com/heyitsmikeyv/status/1111744281759354880](https://twitter.com/heyitsmikeyv/status/1111744281759354880) provides a good summary of why. &amp;#x200B; Essentially they are mixing a pile of half-truths and lies together and relying on non-developers who can't read the code to take their side. The code is poorly obfuscated and thus easy to follow to figure out what it's really doing.
Yeah, the link to `Kotryna Bass` was coming from the pipdig server, and not the site itself. 
Most likely not, as Eloquent actually makes sense.
I’m in Ontario and there’s immense amount of job postings here for PHP jobs, *however* they all require you to have additional knowledge (which is understandable) with JS, MySQL, SASS, APIs, etc. PHP is kind of a compound language, you can’t do much with it unless you know the ropes with other web languages (HTML Markup, CSS, JS, SQL, etc,).
I mean, you could write a scraper, then update it every time it breaks due to minor page layout changes... Or you could use their REST API and invest a whole lot less work. http://lmgtfy.com/?q= google+finance+rest+api
Because it’s a very poignant CMS?
A whole bunch of Wordpress sites unwittingly hosting malicious code thanks to the help of plugins? Oh my, that's just unthinkable!
There's a lot of easy ways to do it, lots of API's lots of plug ins. If you want real time data - it'll cost - if you're satisfied with 15 minutes, - Yahoo has an easy to use API
No, but if it's anything like it sounds, I wanted to stop by to give my condolences.
No worries annotations are just syntax sugar. It's still PHP code running. There's absolutely no difference from putting the corresponding code into a different file. It's just more difficult to read because you need to switch constantly between 2 files to see which field has which doctrine mapping or extra third party annotations options like validation or gedmo stuff. \&gt; However, in bigger projects with dedicated and separate business and infrastructure teams, it becomes a maintenance nightmare. I had the opposite experience, it was a nightmare to maintain the separation into 2 different files.
I was gonna rage but i realized what day it was Hahahah 
Scrapping isn't noticeable. When you send request data from your browser, basically you send request and receive data. Scrapping is programmatically way of doing that. It'll only come to notice when there'll be high use from scrapper's server that is only when if scrapper make his project public.
Never said it was noticeable, just that it’s almost always against the sites ToS if you’re trying to make a service based on said scraped data. For example, I was looking at making a local ad aggregator (a site that would scrape craigslist, local ads, kijiji, etc.) and would display them on one site without having to navigate each site independently. Well, I found out that scraping is against each of those sites ToS, so if any of the sites got word of my service, they could send me a cease and desist and shut me down easily.
Sorry that reply was to @alienhuntsman 😅 I'm new to Reddit so made that mistake. By the way yes, I believe the same. But since it's personal project, and as you too said, it'll be fine.
How about **anti-**magic-method "hacks" like &lt;https://github.com/Roave/Dont&gt;?
I know you’re looking for suggestions for an e-commerce system so please excuse my ignorance (I haven’t worked with woocomerce), but have you identified what is causing the massive performance issues with users on the WordPress site? Is it the sites assets (images, video, css, js), the expensive database calls, the server performance, etc?
Oh no worries! Thanks for letting me know 😄
Who the fuck thought slanting text on a site would be good design? Look at the menu ffs, hot damn lol I thought I was bad at design, but damn this is some good stuff right here lol!
This GitHub repo does a great job (imo) showing tones of different design patterns in PHP: https://github.com/domnikl/DesignPatternsPHP Each pattern is thoroughly described and also tells you it’s pitfalls and gotchas if there are any. It’s helped me many many times when creating applications and working through difficult OOP logic.
Agreed, Eloquent has a gorgeous API that makes sense (imo).
Go and Rust have a lot of users on Reddit because they are getting popular in certain niche areas. There is no way I would ever recommend anyone ever to learn Go and Rust and expect them to be employed in any metro area in the United States. PHP on the other hand you will be. No php will not be used for web applications and big corporations but it will continue to lead and run the majority of websites needing content management. Wordpress owns the smaller blog world and will continue because it has a huge amount of developers and Drupal is winning every single day on content management for websites. Drupal essentially owns content management for sports, colleges, and the government. Seeing how many people are online on Reddit is an absolute poor indicator on trends for the web.
&gt; Do you blindly trust third-party code in Laravel or Symfony? I trust that popular composer libraries are indeed *much* better built and more secure than some random shitwreck of a WP theme the client told me they liked. Moreover, if I'm living in Laravel or Symfony land, chances are I'm not working on a project that was bid for $5,000 with the expectation that I am going to solve every problem with an out-of-the-box-plugin to save on development costs for the anemic budget. So I will literally be installing *fewer* dependencies into what is likely going to be a more properly budgeted Laravel or Symfony app than a WP app. And since working with Laravel or Symfony isn't analogous to fucking a paper shredder, I can build a lot of the custom functionality needed quite quickly, without as much reliance on third party libraries, thanks to having proper tools at my disposal. I'm certainly not going to be installing a *theme* into a Laravel or Symfony project, and if I do, it's going to be a simple CSS theme or framework if anything, not a theme with executable files in it like a WP theme. But the larger point I'm getting at is that WP development is faster because "you can just install a theme and a plugin" is a myth, for exactly the reason that you have to spend time vetting a bunch of untrustworthy code, or writing it yourself in substandard tools. Nothing about development in WP is actually time saving. If anything, it's straight technical debt. This is something I wish managers and clients better understood. I would actually charge a client ***more*** money to build their site in WP than in a framework like Laravel, because to build a site at the same level of quality in WP as I could in Laravel or Symfony, would require more work, not less.
As a counterpoint, all the other options require you to duplicate all of your class and property names in another file which can also become a maintenance nightmare. Annotations mostly avoid this. I wrote about this at length a few years ago: https://mattallan.me/posts/why-you-should-be-using-annotations/
Yeah but the condom is not using Wordpress and I think we can all agree most people should wear condoms. 
Thanks man I appreciate it 
Write a function or class to wrap your calls to the API. Use that to check for a current token, fetch a new one if needed, then perform the actual call.
I agree with you about how shitty WordPress is. But, if you think you can't have malicious third party dependencies because you're using composer on a symfony protect, well then you're crazy. You need to vet all third party code, period.
You're missing my point. The fact that you have to vet WP dependencies defeats the purpose of using WP, since the *entire* premise of WP is "rapid development since you just have to install a bunch of plugins". Throw the rapid development argument for WP out the window since you have to spend time vetting the three dozen plugins + theme you need, and why bother with WP?
Mmm... are you so sure about that?
Yeah man. JS can be up to 10 times faster, particularly on CPU-bound tasks.
 $user-&gt;name = 'foo'; echo $user-&gt;name; // 'not fucking foo' oh yep, makes total sense to abuse class properties like that. 
Sure but you are referring to comparing them in different contexts. You can't compare PHP to a scripting language in the browser. You should compare NodeJS vs PHP and performing the same functions at a basic level - i.e. disregarding the "asynchronous" nature of NodeJS (unless you want to compare it to ReactPHP, which is probably not fair either, given that PHP wasn't designed to be that and that ReactPHP is an offshoot of PHP which is not generally used). Happy to test out some metrics tomorrow, just for the sake of my own curiousity.
There are at least two places where annotations make a lot of sense, the other is routing. 
Small typo : https://stitcher.io/blog/php-reimagined#all-parameters-must-by-typed "All parameters must by typed" =&gt; "All parameters must be typed"
Scraping itself is not illegal perse. It depends on a few factors like what content you're scraping (c), terms of use, robots.txt, exceeding authorized use,..
I don't think google finance API still exists or is maintained. Pick another one [here](https://rapidapi.com/category/Finance). 
Php included my 80% of life coding. But I predict it will wither to a much less very soon. 
An obligatory annual repost. 
👍
These numbers are problematic ... the original source of these numbers take great pains to point out that they can only include in their data servers that report the stack they are using - it's not hard to make a server lie about the stack it is using, and I've personally seen systems do that, as a sort of decoy. What they omit from their statistics (afaik) is the number of servers where they fail to determine the stack. Then these numbers are quoted like "PHP powers 80% of the web", which is palpably false, and not what the original publishers of the numbers actually claim. It would be better if we just didn't pay attention to these numbers as they're not super useful, and too often misquoted.
But oh no PHP is dead and there aren't any PHP jobs. You have to learn this next best thing that going to be overtaking PHP any day now. 
Nothing comes close to PHP!
&gt; But I predict it will wither to a much less very soon. People were saying this 10 years ago as well.
All the nice dev Yahoo APIs were shut down a few years ago. Totally agree that using an API is the way to go though, don't spend so much time trying to scrape a website, if you dig enough you'll find a reasonable enough API. I've written stock programs before, and quite a lot of stock providers do actually supply an API on their free accounts, with a sensible enough rate limit.
Decoy for what? Why would a sysadmin change the web server signature to show it uses PHP while in fact it doesn't? It's just inviting hackers...
&gt; if the Entities are directly coupled to the Database with @Table and @Column? They aren't. Configuring your data-mapper via annotations does not couple the entities to the database. *Co-locating* configuration isn't the same thing as coupling. (Even if it were, there's other configuration methods.)
Don't get overly hung up on the format of the configuration. What matters is the actual logic and structure.
If you’re using c#/nopcommerce and your blog is advertising php 4/Wordpress then they’ll probably be attempting to hit you with different vulnerabilities.
The fact that PHP 5.6 and even 5.5 still has such a usage share is very much indicative of this being very unlikely to become true. Which on itself is worrisome if you ask me. Fact is though, most of the easy to deploy packages are PHP based. And likely to be picked up by those less tech savvy yet looking into setting up their own site.
We do the same with Composer! The diffrence is people without technical knowledge. They just tap to install whatever solves their problem. Just open your mind and guess who use wordpress? Small companies, bloggers, photographers..... people that seek fastest, easiest, cheapest method for a website.
I don't really know who's right, but take in consideration that anyone could steal and change code and then resell, in response they talk about this.
This. Hackers exist whatever, once you have a successful project, a certain percentage of the traffic is malicious, you could even say malicious traffic is some function of the success your project has ... In some cases happenstance may lead to your being a target before you've even reached any level of success, you might have just picked the wrong DC, or block of IPs ... Sysadmins tire from this, obviously, and don't get many opportunities to express themselves beyond giving nodes funny A records or CNAMES, they know full well it won't deter the most persistent of hackers, it may not even trick a bunch of them, but they don't care - "if you're going to try and waste our time, we're going to try and waste yours" ...
Couldn't agree more. With coming of JIT it opens new perspectives and new areas. Steady and never stops. PHP train baby.
80% of the web is not powered by PHP. If it actually did then when I went on Indeed.com the number of jobs wanting Laravel or Symfony experience would dwarf every other non-PHP equilivlent. Yet the actual reality is there are far more Java Spring jobs than those two combined from a tech that according to your "logic" only runs a mere 4% of the web. 
Hello, I'm wondering what the performance hit would be for \`readfile(/images/avatar.jpg)\` vs. serving \`/images/avatar.jpg\` directly via Apache (or Nginx). &amp;#x200B; Is it huge or negligible?
10 years ago great libraries like angular and react and vue didn't exist. Node is taking over as well. Php is ought to fail and you should accept it.
Seems like something that should have a cache anyways. A CDN for example could leverage this problem, so it will cache the response no matter what generated it.
The JS ecosystem needs to actually become mature and stable rather than putting out new frameworks every week before it has a chance of overtaking PHP.
All of this seems to be very nice, especially the Spatie library, I need to check it out carefully. &amp;#x200B; On my side, I did this library to help me with strict types: [https://github.com/drupol/valuewrapper](https://github.com/drupol/valuewrapper) &amp;#x200B; Maybe you'll find it useful.
Performance per-thread is fine but it ties up a PHP process so depending on your setup you might have an issue with capacity. For a low-traffic site, or where these requests are rare (e.g. only use user will be downloading at a time) it may be ok. Otherwise look at offloading the download to a cache or using the X-Sendfile header to hand the control back to the webserver (it instructs the webserver to serve the file and frees up the PHP server, for compatible webservers)
Full disclosure, I work for Wordfence. We were sent a tip about this plugin, and were given the direct download link from the pipdig site to the plugin. I've looked through the code from before their rushed security update(s) and everything reported by Wordfence, and Jemjabella is there. After we asked for their comment, they hurriedly tried to clean it up and removed most of the dodgy code. Then followed it up with another update removing more. I'm not asking you to take my word for it - there are plenty of developers on Twitter and other places reporting that they checked their copies of the code and found the same stuff we reported. We haven't provided the code to anyone else, they've all found it independently. We'd also never heard of Jemjabella before she reported on it. Their git repository on Bitbucket was let public, so we were able to look through it to confirm the dodgy code too (and clone it). They've since squashed the git history, but there are some screenshots: [https://twitter.com/jemjabella/status/1112432736508231680](https://twitter.com/jemjabella/status/1112432736508231680) and some pages are cached on [archive.org](https://archive.org) too. It's harder to prove the content we saw their text files returning, i.e. the `id39dqm3c0_license_h.txt` file, but some of these are on [archive.org](https://archive.org) too. But we did see what we reported, and what do we have to gain by lying anyway? Ultimately you've got a lot of independent developers, basically anyone who has managed to read the code, come out and say that the code is doing really dodgy stuff and proving the claims valid. No one with dev skills has come out with anything opposing the claims of dodgy things, the only opposition from anyone with dev skills is from pipdig themselves. Their responses are confusing, contradictory, and incomplete.
Only do it for files that should be access controlled, or otherwise locked down. It's a very good idea to use a readfile approach for any user uploads, as they can then be stored outside of the webroot where a potential attacker will be unable to run them by browsing to them directly ("Hey, I uploaded a PHP file, and now I have control of your server!!") or transmit iffy content to other users (booby trapped images are a thing). You can also control access to some files this way to authenticated users (however that's done in your code). Anything static (theme images) should not be done this way,as other comments have mentioned - it would tie up an unneeded process.
Adding to this: having a php process spawned for serving static files is not a good idea for high traffic. Since e.g. a single nginx instance is easily capable of serving 1000 concurrent requests, but your php-fpm pool will probably run out of memory long before that, which is why the default for max\_children is much smaller (10 or 20 for debian iirc). &amp;#x200B; This comes even more into play with nginx than Apache, as in here the webserver process is completely decoupled from the php process (by the fast-cgi protocoll), being completely separate services. &amp;#x200B; What I have seen usually, if you are generating thubmnails via php, is the following: if the thumbnails exists, serve it via apache/nginx, otherwise have a route in place, that catches this and generates the thumbnail on demand. You can do this in Apache with mod\_rewrite or try\_files in nginx.
why would any legitemate server app lie about the stack they are using? What do you think how many would do that? 0.001% of existing server?
&gt; or using the X-Sendfile header to hand the control back to the webserver Ah, very interesting! My situation is that I have avatars that are uploaded to the server, then the avatars are customized on the fly based on the time of day (don't ask), and finally printed on the webpage. Since files are dynamic and always unique, I cannot staticize them. The best is definitely using PHP in terms of simplicity, but I don't want them to take forever to load. I will definitely take a look at `X-Sendfile`. Thanks!!!
Maybe you are right, but honestly in your most unbiased opinion, do you not see a future where php comprise less than 80% of the web? Of not, downvote me and move on.
Yes, but unfortunately the images are dynamically-generated almost at every pageload, and I cannot cache them (I overlay decorations on the avatar according to the time of the day). So, basically I would need PHP to generate the image, then somehow get it to the user fast.
Yes, but unfortunately images are dynamic. I just wonder how much faster Apache is compared to PHP at serving files. Also, is `readfile` the quickest approach? It is from what I know compared to `echo` (by how much, I'm not sure), but is there anything quicker? some `ob` function, maybe?
So what? Majority of the sites are rotten and abandoned
Yes, I though the same but filenames are MD5. If htaccess was able to convert a URL into MD5 it would work flawlessly.
&gt; directly coupled to the Database with @Table and @Column? this is a common misinterpretation of term "coupling". Your entity is not coupled to this annotations since they don't affect entities behavior. The main idea is that your entities should not know anything about persistence. Annotations here are just metadata, there are no much difference in terms of coupling from using xml. Yes, you will have to change file, which should not be changed, but if this is critical for you, you could always store metadata separately.
Dynamic how? 
You can. There is always a cache control
s/powered by/cobbling along on/
No, you're missing the point. *You have to vet dependencies regardless of platform*.
This question makes no sense. Both methods serve for different purposes and shouldn't be interchanged. Looks like an [xy problem](https://phpdelusions.net/fun/circumcision). Judging by the comments, all you need is the proper cache control set up for your avatar images that must be served through a web-server
Angular, react, and Vue do not replace PHP. They are client side frameworks...
It already does. Also, programming languages are just tools. Use the right tool for the job and stop being so emotional about it.
The Yahoo API is gone. You can use this api, which is free: [https://iextrading.com/developer/docs/#getting-started](https://iextrading.com/developer/docs/#getting-started) Some Brokers also offer APIs with stock data free to use for their clients. E.g. iG Markets
good to hear that i am going in a right direction.. &amp;#x200B;
To throw hackers off, they'd be trying the wrong vulnerabilities. In most cases though, people will just turn these things off altogether.
No, I don't.
I am not emotional, I say realistically it will contribute to less future web. What is emotional about? 
In fairness, interest in PHP is dropping. You can see that from things like Google Trends, or just looking at the results of things like the StackOverflow developer survey. There are a TON of people using PHP probably without realising it with solutions like WordPress, or that don't care because they're more interesting in the products built with PHP, like Drupal, etc. That's not to say those solutions are bad by any means, they've been successful because they're good products for the people that use them. As time goes on though, I think less people will actually choose products built with PHP, just as less people are choosing to build bespoke solutions in PHP. For example, I lead the development efforts at the company I work for, but before I even started in this position the company was moving away from PHP to a SSR React frontend, and a mainly Go backend with some bits of Node.js and Java thrown in. ALL of that being said, PHP is far from dead yet. There are still tons of PHP jobs. You can make good money working with PHP. It can definitely be very satisfying and rewarding working with PHP. 
I worked at a big corporate company where the main service - used by many ten millions each day - is written in node js and the crawlers detect the whole system as a Javascript platform. However the Javascript part with the Nodejs backend is just the surface. Going deeper to the backend servers there are 99% PHP code. Imagine how many companies may do the same thing. As my personal experience and the job offers most of the dating sites, booking sites, adult streaming platforms, management softwares, webshops, blogs even some bank web APIs have written in PHP. Of course a mid size company uses 5 languages at least for different purposes. So these stats are meaningless to me.
Aha, and this is commonly used?
&gt;annual I think I saw it last week. And a week before that. &amp;#x200B;
They’re more likely to not show anything than false information unless they’re specifically in security and setting up a honeypot.
According to the day and time of the day, avatars change with pictures overlaid on top of them. Don't ask, but this is how it is :-D
Next Christmas check out stack Overflow. there are ways amend an image displayed other than manipulating the source file.
Sorry if I've wasted your time your majesty. I'm trying to help a friend with the back-end, I'm not gonna redo the whole website.
It often isn't "lying" as such it is simply taking basic measures to make it anonymous. So for example changing the default name of a session cookie, not sending any headers that give info about what tech they are using, etc. Which is why the stats on this site should be taken with a very large grain of salt, now sure there are plenty of Wordpress sites that are complete default installs and can be easily identified as Wordpress. On the other hand this W3tech site thinks the last project I worked on uses Ruby when it in fact uses Elixir.
Which if you had continued reading I also mentioned node. Right? Jeeeez
Looks like you're wasting quite a lot of time just to be unhelpful. If you don't like the question downvote and move on, thanks.
You seems to be a little upset. It happens to all of us, but it shouldn't interfere with your quest for the best solution. Please cool down and listen to a reason. 
Yes, which you somehow grouped with 3 client-side frameworks, possibly because they all use Javascript. Also, Node is certainly not *taking over*. It's relatively new to market, and there are *loooooads* of existing apps that need maintenance and ongoing development which are not written in Javascript.
Couldn't you just save the modified image and then display that one the next time around, instead of modifying it every time?
I'm not upset, I'm annoyed by you hijacking the thread with your useless comments, when people did comment with useful information and a positive attitude. I get a notification every time a comment is left, and I have to come here just to read your X/Y problem bullshit or unrelated solutions.
&gt; people that seek fastest, easiest, cheapest method for a website. Boy this really turned out to be the fastest, easiest, and cheapest method huh? Now they get to rebuild everything from scratch, since they almost certainly didn't have any backups. I wonder if they learned their lesson.
Yes, I do that but I'm checking if a cached image exists, then I have to serve it. Avatars change about once/hour, I'm wondering what the most efficient way to save the already modify image is. Could be \`readfile\`, a redirect, etc. Unfortunately I cannot touch the front-end of the website, so it's got to be a back-end solution. I think \`X-Sendfile\` is fine to serve these avatars.
Your question *is* the XY problem. Your task is to disable the browser and server cache and your attempted solution is to serve a file through PHP, which does not solve your problem, but adds unnecessary overhead. 
So, the MD5 is non-deterministic, but will be created, when the file is first generated? You could make this deterministic by creating a unique cache-key, i.e something like. \`md5($userId.strftime("%Y-%m-%d-%H")\` and use that as filename, or am I missing something?
Irrelevant comment.
Why? Because you said it is? It's absolutely relevant as it's a direct criticism of what you said. If not, then your comment was irrelevant as well.
https://httpd.apache.org/security/vulnerabilities_24.html#CVE-2019-0211
S/he wasn't being snotty, but just trying to help. You, however...
Yes, my problem is rewriting /user/123/avatar.jpg to the result of \`md5($userId.strftime("%Y-%m-%d-%H")\` using htaccess only. Right now in the script I redirect \` /user/123/avatar.jpg\` to a PHP file, PHP sees if \`md5($userId.strftime("%Y-%m-%d-%H")\` exists. If it does it serves it, otherwise it creates it, saves it, then serves it. To serve it the only way I can think of is \`readfile\`, or redirect (which is slow). The whole implementation could be wrong, though. &amp;#x200B;
Starting a sentence with "Next Christmas check out stack Overflow." is not being helpful. Sorry. I don't care though.
Yeah, I found it: [https://github.com/symfony/recipes/pull/503](https://github.com/symfony/recipes/pull/503) 
I fail to see how the browser and server cache has anything to do with this, no.
Yes we've identified the issue and it isn't worth fixing. At their cores, Wordpress and Woocommerce are both terribly designed pieces of software. Additionally, most plugins are garbage to boot because they're integrated into a garbage ecosystem. Client's homepage has almost 2,000 queries running - Not an exaggeration - because of the dozens of poorly designed plugins that she needs in order to have the features that she wants. I'm not remotely interested in touching that mess of code...
&gt; Irrelevant comment 
You got pretty good answers but most important one is missed: in DM pattern, you only ever work with language types. So for example of Doctrine, you will get ``bool`` PHP type but in MySql it will be tinyint, in PostgreSQL it will be ``boolean``... but that is not something you worry about. Doctrine will map DB columns into PHP types and vice-versa. That is why you will never be able to do something like ``$product-&gt;category_id = 15;`` only ``$product-&gt;category = $category;`` That is **big** advantage compared to AR. You never have to think about DB layer, you can easily build complex logic in your entities and Doctrine will take care of persisting it. Because everything is PHP type, you have much easier job; IDE will autocomplete your code and detect type errors if you make one. Also, you get your constructor back. It is very usual that some entity will have a dependency on some other entity. Example can be that Invoice must have Order. So the code ```php class Invoice { public function __construct(Order $order) { $this-&gt;order = $order; } public function getOrder(): Order { return $this-&gt;order; } } // your controller/service $invoice = new Invoice($order); ``` In this example, you are 100% sure that ``getOrder()`` will return instance of Order, never a null. --- Above examples are not really correct because properties must never be public (even though this would work), but they are here just to explain the idea.
Pretty sure Yahoo Finance has some pretty nice APIs last I checked.
Yeah true enough, definitely not worth it with that mess! Thanks for replying.
...huh? Have you used Eloquent before?
The worst PHP magic method is [debugInfo](https://www.php.net/manual/de/language.oop5.magic.php#object.debuginfo). This method is very dangerous, because Xdebug can trigger this method at the same time you are debugging something. The reason is, that Xdebug uses `var_dump` to fetch the content of a variable, and var_dump calls `debugInfo` if defined. This could cause some very strange and unwanted side effects and causes a very bad debugging experience. I wish this method would be removed in PHP 8. 
I'm not sure to be honest. I personally just turn them off, and often have a CDN in front of things exposed on the web, e.g. Cloudflare, and they often override the server tokens with their own.
Sorry I didn't realize it sounded as "ask on SO". What I meant is that each Christmas they add "funny hats" to user avatars, by means of javascript. 
Ah, haha! Got you now :-) Yes, it's like that, but 1000 times more savage.
Since it's directly against Google Finance's ToS, it's very safe to say that it's illegal in the jurisdiction of California and all of the United States. Maybe if you find a Google server in a more lenient country, it may not be technically illegal.
Our years are really short here.
It is irrelevant because Node is doing a great job and this is why https://www.similartech.com/technologies/nodejs Node is taking over as you can see. Hence, irrelevant comment, far from the truth.
I have started the benchmarking repository: https://github.com/SamsaraLabs/FermatBenchmarking Currently there is only one benchmark. It uses the arctan Taylor expansion with the inputs 5 and 1 to benchmark the calculation power. I haven't tested this against the 8.0 branch, or 7.4, or with JIT, so I have no idea if it'll even run. I also don't know anyone on the internals team, so if there is a good way to collaborate with them or contact them, let me know.
Here is another link proving nose is taking over php. https://www.techrepublic.com/article/node-js-javascript-vs-php-which-programming-language-is-winning-over-developers/h
&gt; "This is not the URL you are looking for." Excellent source.
[Uh huh.](https://www.similartech.com/compare/nodejs-vs-php)
So in what situations would you think this would be a good idea? 
Not the guy, but he knows that. **It is his point.** He argues that, as you have to vet dependencies in both approaches, the WP promise of fast dev isn't true in the real world. It get worse when you take into account that WP site are way more reliant on non-core code\*, as most of it is plugins and theme, you'll have to do even more vetting than the alternative. \* *as in WP core or Laravel/Symfony core, which you can reasonably assume vetted by community* If you consider that proposition true, the appeal of Wordpress reduces a lot. To a point where, while I have no doubt talented programmers can do wonderful secure websites on top of Wordpress, I am glad I can avoid it entirely. In some ways, it suffers from the same problems than PHP, but worse : ease of use and low barrier to entry means lots of blatantly bad push button integrators compete with decent programmers, with few ways for non tech to differenciate. That, and way too many [Expert Beginners](https://daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner/). Wordpress is above my threshold.
I wasn't aware it's possible to use array destructuring in loops. Neat!
If it's in their ToS, there's no discussion that it's illegal.
But you're not cool unless you use Python! - Hipster
Not at all.
I recommend then that you create a micro service in Go for this complex case. It's going to be blazing fast. We had to do this in my company for a problem related to yours and the difference was simply awesome. And remember to cache even if your image is on a specific time on day generated to be served as fast as possible. Try to find less time unit and set that quantity for caching.
Are terms of service laws now? Didn't realize companies were our governments now. 
Crazy, but really if you are running third party multitenant code you should be using nginx+phpfpm (like plesk) and if you're running a webapp where arbritrary users can submit and run their own code under Apache not in a container you got much more fundamental problems to worry about. So I feel like the attack surface for this exploit is pretty low.
Years back I wrote a stock tool for someone using the TD Ameritrade API. If you want a legal option with a standardized API then I'd use that. Otherwise you will have a brittle and unsupported system.
Java is also used more frequently in enterprise solutions and much less often for smaller sites and turn key solutions, where PHP is used a ton. Those type of sites don't exaxtly require someone to hire a full time developer. The number of current job offerings isn't exactly related to how many websites currently use a particular language. 
So it's falling. I said the same thing.
That's an adoption rate, not a "sites currently using X language". They're also both on a downward trend, so how exactly does that support your theory that node is catching up to PHP?
&gt; He argues that, as you have to vet dependencies in both approaches, the WP promise of fast dev isn't true in the real world. If you have to vet dependencies in both cases, you can effectively remove that from the equation. In what other ways can WP speed up development? &gt; It get worse when you take into account that WP site are way more reliant on non-core code*, as most of it is plugins and theme. You'll have to do even more vetting than the alternative. Probably true, but it depends on the circumstances. &gt; In some ways, it suffers from the same problems than PHP, but worse : ease of use and low barrier to entry I don't understand this argument. Any language similar to PHP (Ruby, Python, Javascript, even GO) is plenty easy to use and has a low barrier to entry. You don't really get an appreciable difference in that regard until you're working with stuff like Java or C# web apps. For the record, again, I hate WordPress and avoid it at all costs. I just don't think having to vet third-party dependencies is a legitimate negative.
By the way, since the issue is almost resolved, I advise you to try to compare these servers. I'am about [compare and synchronize SQL Server database schemas](http://autosyncdb.com/en/). I remember when raising my first servers this was a big problem. I advise! 
Shameless plug. Take a look at Maphper: [https://github.com/Level-2/Maphper](https://github.com/Level-2/Maphper) &amp;#x200B; It treats a database table as an array, supports a fluent API, can handle composite primary keys and complex relationships. &amp;#x200B; &amp;#x200B;
Indirectly that is rather my point. This thread claims "80% of the web powered by PHP", but that is nonsense, because 80% of sites (let's just ignore the "reliability" of these stats for the sake of argument) is not the same thing as powering 80% of the web. Not all sites are equal, Youtube produces billions of views a week, my friend's Wordpress site does about 40k, yet "powering 80% of the web" is based on Youtube and my friend's Wordpress site being valued exactly the same in those stats, which is obviously deeply flawed. And of course it is why it does not translate into dev jobs in the way you would expect, not even close and is why Java with its "4%" outperforms PHP in terms of dev jobs with its 80%. Now PHP generates temporary work with Wordpress, Magneto, Drupal, etc but even then it still a pretty poor ratio given how much they are used and even discounting those that is about half of PHP use, so according to these "stats" that still leaves about 40% of the web powered by PHP frameworks / custom code, yet producing a pitiful amount of jobs given that even in relation to something like Python with z mere 1.1% of sites let alone Java. 
&gt;https://twitter.com/Psihius/status/1108753311354761226?s=19 Do us all a favour and delete your twitter.
But python is pretty cool? It's perfectly okay to love PHP and python at the same time.
JavaScript will **never** overtake PHP. That's the reality that people need to get comfortable with. Not that PHP, which runs the majority of the web and has for more than a decade is one day just going to up and fail.
No. It's that retarded programmer criticism of "this thing is possible, therefore you're wrong". it's a stupid argument to make. Not even 0.1% of all the web is going to do that. 
I guess this won't affect FastCGI since the script process isn't spawned by Apache then?
Yes it is still Data Mappe Pattern but in my head the entity is just like a DTO Object. The Entity does not know how to persist itself. Why then define @Table in it? If it has nothing to do with DB? The weird thing here is just that the mapping is defined in the Entity. I know that it is just configuration and you can place it somewhere else. It just feels weird to me to do the mapping in the entity which should be basically just a type of dto like object. I will see it as convenience in the future.
&gt;which in this case just happen to be stored inside the class-file for developer convenience. &gt; &gt;The mapping rules don't have to be there, and everything would work the same way if they were somewhere else in another format. Short and sweet. I will see it like this in the future.
I think I have provided enough information to support my idea. Your url shows php is more popular which is irrelevant as I said. My argument is php is being taken over as the stat I provided shows the developers are opting for node and react. I think you are in the state of denial and you feel you can keep php alive forever by being adamant. 
That's a pretty huge fuck up...
&gt;Your entity is not coupled to this annotations since they don't affect entities behavior I told exactly that today my co workers. They told me: &gt;Then delete these lines. Will your code still work? No? So it changes the behavior of the entity. &amp;#x200B; &gt;Yes, you will have to change file, which should not be changed, but if this is critical for you, you could always store metadata separately. No, everything fine. I will stick to that at first. When I have more experience with doctrine then I will try PHP Mapping.
Thank you for your long answer. Most of it I know already. I don't know why you get downvotes I appreciate every input. My question is not about the difference between AR and DM. My question was more about if doctrine is DM why it couples it's lose entities with the database with annotations like @Table. I know it's just configuration but I have the feeling that it should not belong there but I will stick to that because it's convenient.
Pver here fastCGI processes are usually started by the apache user. Not sure what you mean
none of that is true, I built and maintain an app that does exactly what's being described here, and "getting it right" wasn't anywhere near "tricky". The difficult part is coordinating deployment and schema updates, not figuring out which DB to connect to.
&gt;In short, because they advocate coupling your code to the framework. This escalated quickly :-) - This would deserve a whole own thread like "Does Symfony enforces bad best practices to couple you to the framework?" and then with some examples. I never saw it from that perspective but very interesting thinking here. On the other hand Symfony is way to professional to play it like that.
&gt;The "Symfony Demo Application" is a reference application created to show how to develop applications following the Symfony Best Practices. [https://symfony.com/doc/current/best\_practices/index.html](https://symfony.com/doc/current/best_practices/index.html) [https://github.com/symfony/demo](https://github.com/symfony/demo) [https://github.com/symfony/demo/blob/master/src/Controller/BlogController.php](https://github.com/symfony/demo/blob/master/src/Controller/BlogController.php) [https://github.com/symfony/demo/blob/master/src/Entity/User.php](https://github.com/symfony/demo/blob/master/src/Entity/User.php) Annotations everywhere :-)
lol ok
So you're not insulted yourself, you're white knighting for the people who hypothetically are. Those people being the overlap of three sets: People who read PHP roadmap articles, but don't know about what's upcoming, and thirdly can't recognize conversational humour and get in a huff about a mild implication they're not up to date on something. I think you might be a little hypersensitive. It read fine to me.
Yes. Because I am using features that were introduces for 7.1
&gt; People who read PHP roadmap articles, but don't know about what's upcoming, Have you not been on this sub? Have you not dealt with many developers. I know tons of people who will click on a link shared about upcoming features but don't read RFCs. And the first thing they read is "You should know this" about something less than a day old. Seriously, that's just cheeky as fuck. The difference between me and the people who I know will read this and doubt themselves (I know a bunch of these people) is I know it's bullshit to say "Unless you're living under a rock you'll know JIT is coming to PHP8". No, I knew there was an extremely high chance but I didn't actually know the voting had finished. And to be honest, I was actually trying to help the author realise that starting off with that insults people who didn't know it. I may not be the best with words and explaining stuff, but that doesn't change the fact I'm right. Saying you should know something to someone who doesn't alienate that person. And don't try to insult your way into having me back down. &gt; and thirdly can't recognize conversational humour and get in a huff about a mild implication they're not up to date on something. You must be living under a rock if you've not been reading all the "imposter syndrome" posts/tweets/talks/etc. If you want to know more about why insulting your audience at the start of a talk/post is bad people go read more about improving talking. I did a super simple google search and found an article for you to start off with http://eloquentwoman.blogspot.com/2015/10/4-risks-when-you-assume-your-audience.html 
&gt; How columns are mapped properties 9 hours old post of symfony, this will now couple the entity to the validation, so the annotations are not only mapping configuration anymore: [https://symfony.com/blog/new-in-symfony-4-3-automatic-validation](https://symfony.com/blog/new-in-symfony-4-3-automatic-validation?utm_source=Symfony%20Blog%20Feed&amp;utm_medium=feed)
&gt;since they don't affect entities behavior. 9 hours old post form symfony. I think now the mapping config is coupled to the validator: [https://symfony.com/blog/new-in-symfony-4-3-automatic-validation](https://symfony.com/blog/new-in-symfony-4-3-automatic-validation) 
Also, as this is my first attempt, looking forward for feedback as well, thanks :)
OK, as someone who isn't a devops guy, how do I update my server with this patch - its currently ubuntu 16.04. I would expect there is an apt related command for this?? 
Just do your normal updates. But at the same time start to look at updating to 18.04
PHP has flaws but which language has not? I need to rant now, let's go: Node/JavaScript in the backend/frontend? Hell no! I need webpack to get that crap language a little bit less crappy. Because it sucks on its own. And I hate it's async nature! &amp;#x200B; Ruby: bundle install -&gt; failed, gem install -&gt; failed and way too extraordinary syntax and special chars. Why my Ruby app does not work? Because my OS installed a gem which expanded globally the default Array. What is this here JavaScript Prototype shit in Ruby? &amp;#x200B; Python: How do I make a private variable in my class? &amp;#x200B; Go: Too low level. I want to make an application. Not writing all day code to add functions/features which in other languages are included. It's the best low level language, no doubt but for my tasks too low level. For example: [https://gist.github.com/kn9ts/3b9833758283993264b0](https://gist.github.com/kn9ts/3b9833758283993264b0) &amp;#x200B; Done! Did I forget a language?
Nice! Thanks.
No, Symfony doesn't do that. In the "Best Practices" book you can literally read the following: &amp;#x200B; *Overall, this means you should aggressively decouple your business logic from the framework while, at the same time, aggressively coupling your controllers and routing to the framework in order to get the most out of it.* &amp;#x200B; Source: [https://symfony.com/doc/current/best\_practices/controllers.html](https://symfony.com/doc/current/best_practices/controllers.html) &amp;#x200B; And that's what we always promote officially in Symfony: couple your controllers (because they are small and silly) and decouple the important thing: your own business logic. &amp;#x200B;
The downvotes are from Laravel people, they can't stand anything that is not per gospels of Taylor :) I know it is not what you asked but I have seen lots of confusion recently so I wanted to share some extra info. And then I get carried away, sorry :) So if not you, someone else might find it handy. 
&gt; Did I forget a language? Probably more than one.
Ubuntu doesn't have a patch yet, you can track their progress here: https://people.canonical.com/~ubuntu-security/cve/2019/CVE-2019-0211.html
please no
If you don't understand the example, you probably aren't as familiar with Eloquent as you thought you were.
The pattern is that each service has its own client: eg. SnsClient, SesClient, SqsClient, etc. Each client accepts pretty much the same data in the constructor (version, region, credentials) plus any client specific constructor options. Then just reference the docs at [https://docs.aws.amazon.com/aws-sdk-php/v3/api/index.html](https://docs.aws.amazon.com/aws-sdk-php/v3/api/index.html) for methods available on the client. All methods seem to return an associative array of the response body (as opposed to say an Object of some sort.) &amp;#x200B; Honestly, the docs are pretty much all I've ever needed. &amp;#x200B; There was only one time where the docs did not cover some questions I had - and that was for sending push notifications to APN via SNS. The endpoints were well documented, but it was mostly around best practices on keeping local mappings of user ID =&gt; SNS Endpoint ARN in sync with SNS in the case that the endpoint was disabled. Apple does not like it when you start pushing to a token that has been disabled.
You don't need to define @table in it. You can put it in a (yml, php) config in another namespace. 
Just switch to NGINX^^ 
No, your example doesn't actually doesn't make sense without providing any model code (nice down vote btw). If you set *any* attribute on an Eloquent model, that attribute will return the value you set (it sets an attribute in the background in the models `$attributes` property, and will return the same attribute). It seems the `$user` model you're mentioning has a [mutator](https://laravel.com/docs/5.8/eloquent-mutators#defining-a-mutator) that is preventing the attribute from being set properly - but again, you haven't provided any model code. Any experienced Laravel developer would know to browse the model code for this after experiencing your example.
[https://thehackernews.com/2019/04/apache-web-server-security.html](https://thehackernews.com/2019/04/apache-web-server-security.html)
Webdev language :-)
The statistic says "80% of the web". Not "80% of web traffic", or anything else. I'm not going to debate whether thay statistic is correct or not since I have no idea and don't really care. You're putting your own spin on things though and trying to disprove it with nothing more than your own opinion and flawed "logic". That's why your reply is at the bottom of this post. 
CURL keeps things in memory - so you should be set.
Awesome. Thanks!
Read the source code. Methods have tons of comment. Probably better than the official documentation to understand what you will be playing with.
Python is the 2nd best language for, *anything* you want to do on the web. ;) 
You can use anything for webdev if you want. As long as it's behind a web server and outputs HTML it can be anything. A lot of server run Perl, and you can make a website in C, C++, Brainfuck, Assembly, ... (I don't know why you would, but you can)
Maybe you should learn to read, I stated the title of this thread, which is "80% of the web powered by PHP"n ot the statistic the misleading title is based upon. The only spin is the title of this thread and your excuses. PHP does not power 80% of the web, unless you define the web on the basis that some tiny Wordpress site is of equal contribution as Youtube, which if is your "logic" then you are in no position to b lecturing anyone on "logic". And no Youtube, Amazon, etc make up a vastly higher proportion of internet use than some random Wordpress site, it is not opinion, that is fact. As for the position of my post, it is in the middle on the setting I am looking at (controversial), not that it matters anyway, why would I care what butthurt randoms on PHP think, the truth hurts. :) 
Some people really should learn to just quit while they're behind... Whatever though, enjoy your elite Java development. Nobody else really cares, which is why I'm unsubscribing now. :) 
&gt; Whatever though, enjoy your elite Java development. Fortunately I don't get emotionally invested in one programming language over another, there is no elite, they are all just tools, but that is precisely why I can be objective over the claim that "80% of the web is powered by PHP" and some people aren't. ;) &gt; Some people really should learn to just quit while they're behind... Wise move to take your own advice.
Can you give more details on that structure? I'm really curious on how people escalate systems and develop for such a big user base.
This is not typically how it works though. Normally a full vulnerability sweep will be run a server regardless what the is reporting its running.
WordPress is unfortunate, but has a codex you can reference. PHPStorm as an IDE and xDebug will make you feel right at home.
Just try out phpstorm, it's the best IDE so far in the PHP space :) it scans through the project and so you can jump definitions fairly easily.
People always push php storm but it’s not free. Netbeans would be my go to for free. Php storm is superior though but not enough for me to spend money on it 
So are you saying with wordpress there is no way to navigate the code?
Will it scan through a wordpress site? I wanted to build a site in laravel, but wordpress just seemed like the way to go so my wife can maintain her own site. I want to see what all the code is doing instead of just using the gui dashboard to build her site. I also don't want to have to navigate to each method, one at a time in the codex.
Right on, thanks.
I guess it will. I used it to load up a legacy project and is able to follow through function calls.
You can its just not as good as what you would be used to. All dynamic languages will have this problem to some extent, but if you code php properly you can get most of IDE based code navigation and debugging that you are used to. Wordpress just comes from a different time and was coded in such a way that the IDE doesn't always know where everything is. Its not true OOP. Especially in the themes. 
And before you start your site, if you want to be more OOP and modern with WordPress, checkout roots.io
Looks pretty cool.
So how does the compiler work when it hits a method? I don’t understand how it knows where the method definiton is that it’s suppose to jump to.
We used them at the company I work for and it makes development much easier.
Long live the king of languages hahahaha
It's defined globally which is generally considered bad practice these days, but almost everything still does it. Alternatively it could be a part of PHP's built in functions but I believe in this case it is not. There is a get\_headers() but get\_header looks like its defined in WP. There isn't a compiler per se. The zend engine only "compiles" to opcode. But its technically an interpreter. Anyway thats neither here nor there. The language engine used by your IDE will have a list of all globally defined functions and will know what file they were defined in. So you can use your IDE to follow "get\_headers()" to its source file. If you are using PHPStorm press ctrl+left click to follow to the definition. There are several other "better" ways of doing this though. Generally all functions should be in a class. All classes should be loaded by an autoloader (as per PSR-0/PSR-4). Most people use the Composer autoloader for this. I don't know if wordpress does yet. The IDE can uses the autoloader and namespacing of classes to figure out where everything is and can help you follow the code around. The basic way of doing it is to have a static class. ie \[ HttpClient::get\_header() \] This has fallen out of favour these days and replaced by dependency injection. There are many other patterns as well, but DP is the most common. I definitely recommend learning how that is done in php. A framework like laravel or symfony will help. But if you are doing WP development.... sorry to say you are stuck with whatever conventions they use.
Similarly - does that mean special handling is required for large files?
Not with wordpress itself. Get yourself a good IDE and xdebug. As mentioned, PHPStorm (or, IntelliJ with the PHP Extension, same thing) is really the only way to go for professional PHP development. I don't mean to sound gate-keeper'ish, but seriously, if you aren't using IntelliJ for PHP development, I really don't know how people do it.
You can not buffer the entire response into memory (*CURLOPT\_RETURNTRANSFER false)* and use callbacks (*CURLOPT\_READFUNCTION ...* I think) to read it piece by piece. Or, just use a high level library like guzzle and not worry about it (which is the real answer here). Short answer is you can download large files without needing to buffer the entire response quite easily.
Did you mean adding deprecation notices?
No clue why I can't write a text body to posts. What I'm asking about is an existing library that will, set the error handler, allow me to run code, and then reset the error handler to whatever it was previously, and then handle the PHP-level warnings, notices, and so-on myself? I am needing to write a "Exception-ready" version of `\XMLWriter`. We have a massive amount of code that needs to throw exceptions when these functions fail, instead of throwing a warning that isn't caught. And it got me thinking, surely there is a large library that is written better than I could write one myself? -- Again, talking about the error-handling aspects here. &amp;#x200B; Unfortunately, I can't use existing libraries, I need something that is 1:1 compatible with the `\XMLWriter` object. I've seen other, small libraries include their own compact error handling like this, but nothing that I can `extends` myself and use (or, however -- by composition, etc). &amp;#x200B; Example of what I'm thinking of (somewhat crude, I don't know if containing it in a object with state makes the most sense ... but just for an idea) class SafeXmlWriter extends \XMLWriter { public function writeElement($name, $content = null) { $this-&gt;errorHandler-&gt;setupFresh(); $value = parent::writeElement($name, $content); $this-&gt;errorHandler-&gt;reset(); if($this-&gt;errorHandler-&gt;hasWarnings()) { throw new \RuntimeException("Could not write XML: " . $this-&gt;errorHandler-&gt;getWarningString()); } if($this-&gt;errorHandler-&gt;hasNoticeContains("something that shouldn't be a notice")) { throw new \RuntimeException("Could not write XML: " . $this-&gt;errorHandler-&gt;getNoticeString()); } return $value; } }
With your skillset, you might want to consider alternatives to WordPress, particularly more oop alternatives like October cms (based on laravel). And php storm, as others have said, will help you with scouring source code
Yeah the examples are kind of bullshit too. Cloudflare uses php and JavaScript for their customer website, but none of what they are doing is actually done with php.
To me it looks like an exemplary case of SEO spam: an attempt to hijack some phrases that people might Google for. Although executed with certain cunning, but the result is absolutely useless for the reader / viewer. I visited your site (because I am an old school and prefer reading to watching) and checked 2 articles, "Handling PHP Errors and Exceptions" and "Databases and working with MySQL". The first one is just a compilation of some random definitions from the PHP manual, absolutely without any added value. The article fails to answer the actual question, how to actually *handle* errors and exceptions. The second one consists of 2 examples: connecting to Mysql and creating a tables. That's *all*. Topic covered. Well. I managed to checked one video too. Dude, please make this world better, rid it of your indistinct mumbling. #trashtag 
Thanks for your feedback. Is there anything that I may add to articles that may increase coverage (these articles are written for absolute beginner). Regarding videos, pls also point in what way, I can make them better. Also, looking for constructive criticism - which tells both - what's wrong and how to fix it. Your reply only focuses on "what's wrong".
It's free if you have an .edu e-mail address.
Don’t have to think any special. Behind the website there are separated servers with crons and daemons and REST APIs, sometimes a RabbitMQ is between them. Most of the features have their own code base with their own master database almost like a microservice architecture. And there are many slave DBs under the masters. The codes are based on the company’s own PHP framework what has no ORM, so only optimized queries can run. No fancy YAML or XML config files only PHP arrays, no magic in the core of the framework. Hundreds of developers work on the system. Basically I experienced that what Rasmus Lerdorf said, PHP is easiest language to slace because it runs on isolated processes, so if you have to scale up you just put there more servers to allow run even more processes.
What a nerve. "I have no knowledge, but I want to make money on videos. Do do my job and fix my videos to make them useful." Absolute beginners do not go to interviews, so it makes a question, whom your videos are for (apart from your future rich self)?
If it was, i guess i would try to fight and restore my credibility. I would release code as trade-off to prove otherwise. Anyway, it is lame response from them, with which they will pay.
I didn’t know that. The search features are great on phpstorm and that arrow thing where you go back to the last thing you were looking at. I figured out how to get the same functionality out of netbeans, it’s just not as nice
It's also the getNameAttribute method. But you proven the point absolutely. Self proclaimed laravel/eloquent expert and yet you are taken aback by the normal behaviour. The point is that an attribute should just be an attribute. If you want to mutate things at either end then just use setters/getters. Eloquent does not make sense in this instance because it hijacks a basic bit of php language with magic. It's just one of many, many things about laraquoent that don't make any sense, but seems you aren't gonna even admit this, so prob not much point in discussing.
I just see two types of people here. Who use autocomplete and who don't.
So if JIT involves compiling into native machine code, can we expect that in the future JIT capability would help PHP devs implement compiling whole PHP project into native (like a single .exe binary for Windows)?
And another obvious question: what do your videos add to a bazilliard existing guides? Do you *really* think that a poor complete beginner in a dire want for the explanation of the difference between single and double quotes? It would appreciate a good video guide on some task which is not covered yet. But for this lot I cannot see any purpose other than SEO spam.
Good thing I'm using nginx then :p
May guzzle 'sink' option is what are you looking for: [http://docs.guzzlephp.org/en/stable/request-options.html#sink](http://docs.guzzlephp.org/en/stable/request-options.html#sink)
Well. I managed to check out one video too. For a video tutorial, a good diction without a thick accent is essential. Sorry but I don't think you are qualified for this. Besides, I fail to see how a video that consists of a few lines of code and an elaborate effort to read them aloud can be of any value for a beginner. 
TL;DR not likely ... Currently, that's not a reasonable expectation: The Zend JIT relies upon DynASM, which is part of the LuaJIT project. DynASM is specifically focused on just-in-time, and so it lacks the ability to write ELF or PE/COFF files. Generally speaking, languages we tend to call "static", where we expect to be able to generate executable output files, use AOT - ahead-of-time compilation, which while loosely related to just-in-time (in that they both generate machine code), is a different strategy, and generates code conducive to being written to a file (it's relocatable, knows how to load and link shared objects, and so on). All that being said, of course, it's not impossible to write JIT'd code to an output file (nor is it straight forward), but it does go some way to explaining why DynASM doesn't support it ... *pro-tip: watch Anthony Ferrara's blog in the next few days ... he's working on an interesting set of tools ...*
That is an unfortunate domain name. 
You don't need any particular IDE to be able to navigate the code base. I use Neovim and I'm perfectly happy using that to navigate the code base via tags and PHPActor's navigation.
I'm confused how this blatant advertising is on the first page of r/PHP , and odoo is Python :-/
I am looking forward to more progress on this front so much :-)
R3?
As someone who doesn't understand all these compiler-level stuff.. isn't this essentially FFI? Because, if I understand correctly, webassemblies are used to execute 'binaries' with javascript/browsers. So we could write a webassembly and execute it in a browser and in PHP? Awesome!
Yes and no. &amp;#x200B; With FFI, you are calling the code in another language directly. &amp;#x200B; WASM aims to be a universal intermediate bytecode that all languages can call, so it adds a layer of indirection, requiring to transpile/compile code in one language into a WASM "binary". &amp;#x200B; But it makes the whole process a lot safer, FFI is notoriously hard to use and WASM shields you from a lot of nasty things, similar to how PHP shields you from the low level things such as memory management ;)
Give a different CMS a try, for example [bolt](https://bolt.cm/) is nice for developers and users
Mysql errors look like they are cause by this: https://dev.mysql.com/doc/refman/5.7/en/packet-too-large.html
What do all the emojis mean (except the elephant, I can guess that one). 🐘+🦀+🕸 = elephant + crab + spiderweb?
Can you stop with all the stupid emoji's? Thanks
I posted a post with all the details about this issue - [https://unix.stackexchange.com/q/510238/345212](https://unix.stackexchange.com/q/510238/345212) &amp;#x200B; Thanks in advance
Web assemby would explain spider web image. Dunno about the crab though.
The elephant in the room is that the OP has an STI?
&gt; emoji's 
You can refer this for understanding AWS PHP. [https://aws.amazon.com/sdk-for-php/](https://aws.amazon.com/sdk-for-php/) 
I see, thanks for the great answer. I've been waiting for that feature to arrive at PHP land for years. I'm still hopeful.
This is not a support subreddit, you might wanna look into /r/PHPhelp or something
🦀 PHP IS DEAD 🦀 PHP IS DEAD 🦀 PHP IS DEAD 🦀 PHP IS DEAD 🦀 PHP IS DEAD 🦀
The elephant represents PHP. The crab represents Rust. (its name is Ferris, [http://rustacean.net/](http://rustacean.net/)). The web represents the Web, and by extension WebAssembly.
No :-).
*Rustacean*, oh very good. Thanks for the explanation.
ElePHPant, (C)Rustacean, **web**assembly? *I think?*
u/Hywan beat you to it by a few seconds, but yep looks like that's it.
WebAssembly is platform agnostic: it runs in browsers, servers, inside PHP, anywhere. The virtual machine, or runtime, here is [Wasmer](https://github.com/wasmerio/wasmer). It uses different backends to generate executable code, like Cranelift, dynasm, or LLVM. A WebAssembly binary in itself isn't executable without a VM/runtime. It's possible to compile a WebAssembly binary to executable code ahead-of-time too. But it's not FFI. By design, WebAssembly exports symbols, like functions, or memories. You can call those functions from the outside. This is the “FFI API”, sort of, I'm abusing the FFI definition here. And you can read the memory, or write in the memory. See [the `memory` example](https://github.com/wasmerio/php-ext-wasm/blob/master/examples/memory.php) for more details. Because WebAssembly is platform agnostic, i.e. cross-platform, yes, it can run everywhere. Browser vendors have been the leaders in this technology, and the first implementations have landed in different browsers, but WebAssembly can run in the server by design. With the recent announcement of WASI (see [https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/](https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/) and [https://wasi.dev/](https://wasi.dev/)), which is an on-going standard for the System API, WebAssembly can talk to the system safely and in a cross-platform way, and thus can open file, socket, pipe etc. The runtime controls everything, every aspect, system calls, the memory size, and possibly the CPU usage. All the `.wasm` files in the `examples/` repository runs in PHP, in NodeJS, in your favorite browser etc. It's truly cross-platform.
Pretty hard to take the author seriously when they go with that title.
Why?
What's the issue with the title?
Well, that is feasible as long there is money to buy hardware :)
a lack of emoji's, step up your game OP
You could start by not putting the link in the subject ;) But alas I typed in the url manually anyways. Your MySQL server is using a ton of cpu with little to no processes. I’d say that issue is probably due to disk I/O. You also have multiple nginx processes using a considerable amount of CPU. The PHP ones don’t really scream anything as long as those numbers go up and down relatively quickly. You’d want to check on disk space, disk I/O, raid status and disk status as well. Another thing I found in the past with MySQL is even when you provide it enough memory and config to allow anything to fit in memory it will still write crap to disk. Burnt a few SSDs rather quickly due to that. The solution for that was to make a small RAM disk (MySQL wasn’t using more than a few hundred MBs when I monitored it in my case). I provisioned a 4GB RAM disk for MySQL on my DB systems. Another question is do each of these websites have their own IP. Just because it’s a different domain doesn’t mean it’s not an attack. If they are the same IP someone could easily determine other domains on that IP. You don’t mention the speed of the CPUs, the disks or their setup. What does the MySQL error log say, what are your max connection settings in MySQL config?
With all due compassion, but it doesn't mean you got to make several posts to this sub, one is enough
PHP allows you to define your own functions in the global scope. They can be called from everywhere else, as long as the file where it is defined has been loaded during the handling of the request. Loading can be done with `require`, `require_once`, `include`, `include_once` or by using autoloading.
Yes, lets disregard the actual message because of emojis.
That's a Symfony thing, based on the Symfony Validator, not related to Dotrine. Anyone could do the same thing with an in-house code. 
If you delete the mapping (annotations, yml or xml), the behaviour of the entities won't change. You will still be able to create a User class, give it an id, a name, update its properties. The persistence is broken (so no repositories, no entity managers), but that's the point. Coupling is for example when your entities inherit from a base class that cannot exist without a persistence.
Just go to downloadmoreram.com
I've written a small PHP framework based on middleware and DI - it makes it flexible. Thanks to its tiny code base, it can be interesting for everyone who considers using a framework but wants to have code fully under control.
 [https://www.innoraft.com/blogs/multiple-jquery-version](https://www.innoraft.com/blogs/multiple-jquery-version) 
Cancer
👎👎👎
Find your common entry point and add logging to it. 
Are you PSR7 compliant? Also, I can't find any unittests?
So basically the same as symfony, zendframework and the others? 🤔
ToS are not laws, only courts decide what is legal or not, which is why there have been cases in the US where companies have lost despite what their ToS may require. It actually depends on what is being scrapped and what it is used for, E.g - a case where guy used an exploit to gain private email addresses on a site, then scrapped content from that was obviously ruled illegal. On the other hand their have been cases of courts ruling in favour of people scraping publicly available information as how the publicly available information is collected is not for the site being scrapped to decide. But even then there have been some cases where scraping where was deemed illegal, not because the act of scraping was illegal, but because it was deemed in those cases the company doing the scrapping was doing so in a manner that put an unacceptable level of pressure on the resources of the site it was scrapping. So no it is not safe to say it is illegal at all, it is basically somewhat of a grey area with differing outcomes depending on the circumstances or even which judge is presiding. And of course beyond that, their is the issue of where the person / company doing the scraping resides, if they are China or somewhere, even getting them to court is unlikely to happen.
Maybe you could use something like this: [https://github.com/scheb/tombstone](https://github.com/scheb/tombstone)
But unit tests means more LOC ;)
PHP + Cancer = The World Wide Web
[https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/](https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/)
Why is minimal lines of code an important metric?
Xdebug is great for getting familiar with new code
Try [https://github.com/airmoi/filemaker](https://github.com/airmoi/filemaker) . This is a PHP5.5+ port of the original API from apple. &amp;#x200B; We're using it internally for some light stuff and it works. The usual warnings apply (like no uploads into container fields, etc...), but thats because of FM and not because of the lib.
Rename all files from name.pho to name.old.php anf then turn loggin on, 8nclud8ng notices. As soon as a missing file appears in the log, revert the renaming for that file.
Worst marketing campaign in Udaipur
sudo apt-get update
I'm pretty sure the name here was still a good example of how you can use a value object, the application may be only used in one region in which introducing more name complexity is pointless. If you need more complex names stored in your application, then of course you can redesign the name object to be more complex, but the use of value objects still makes sense.
You are totally right. I didn't want to add to many logic to the class as it just served as an example. That said, I must admit that I often fall into pitfalls like this, so thanks for sharing the link!
I can’t tell you how awesome this is.
Beware this update breaks the font rendering on Mac OS... See [https://youtrack.jetbrains.com/issue/JBR-1174](https://youtrack.jetbrains.com/issue/JBR-1174)
I'm not against value objects at all! It's more about having a more relaxed set of assertions. Also fromFullName can be prone to bugs as well, regardless the region you are.
Because it is cheaper to audit, might contain less errors that might be found more easily.
I would register a shutdown function that logs the output of [get_included_files()](https://www.php.net/manual/en/function.get-included-files.php).
My point is about having a more relaxed set of Assertions while ensuring that you still have a valid value object.
Thats a cool little library! It does need a better readme though - "Implements the concept of Tombstones for PHP." doesn't mean anything to me. :\
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Right, but because of the assertions, fromFullName actually isn't prone to bugs. Since spaces aren't allowed in the names. So it's all about application based requirements. I don't think we should get deep into the examples, because I think they were just examples to show how it could be done.
Prepare PHP 7 Interview Questions, Answers, Tips, news, tutorials. Find PHP 7 Questions asked in various companies, Get Career advice &amp; Interview Procedures from PHP 7 experts.
a new client website was handed to me to 'fix' because they changed hosting providers (no idea who it was before) to GoDaddy and the dynamically changing background broke....because of this snippet here. &amp;#x200B; Can you normally reference php in this fashion or am I going to be the bearer of bad news and tell them to rewrite how they pull in css sheets?
No. PSR7 is a lot of dead code. It slows down a router significantly. Webiik follows KISS. Currently I have no plans to write unit tests, maybe in further versions. Now I just check Webiik's code using the [https://github.com/webiik/cli/tree/master/src/Analyse](https://github.com/webiik/cli/tree/master/src/Analyse)
While I agree with the general point for example purposes, "one region in which introducing more name complexity is pointless" basically doesn't exist. There are very few places on Earth where nobody migrates from outside and often people from different cultures with a different naming system have to butcher their own name to get it to work with poorly thought out name schemes. Depending on the formality required, at most you need a text field that accepts a considerable number of characters, _including_ numbers and symbols, for the user's full name and a separate one for how they wish to be addressed (for example just their first name) is usually the best option. A system that works well for the overwhelming majority of humans should be simpler or as simple as most schemes, like separate first name/last name fields, that break down in a not-insignificant number of cases.
Unit tests would make that much easier than low LOC. Low LOC also doesn't mean it's easier to read and follow what's going on. Code optimized for LOC is very often much less readable in my experience.
I do not count tests to LLOC. Maybe it could be a good idea to write it under comparison table.
dude, wtf. You made a 1:16 long video about "How to define a constant" and never mentioned the \`const\` keyword.
Until your client comes to you and asks you to sort all user lists by last name and you only stored a full name and a first name, or greeting name. I guess my whole point was every application has different requirements and we should just take this for what it was, a quick example on value objects, not how to handle all the complexities with names across the world.
Totally agree. But don't be extreme. Webiik is not written only for low LOC, but also it's not written only for robots, understand unit test, code checkers etc. But yes, space for improvements always exists.
Unit tests are not "only for robots". They are for humans. Looking at the unit tests, and changes to them, can allow you to quickly discern if and when behavior has changed and ensure that behavior does not unintentionally change. Yes, it's encouraged to automate tests - but only because this makes them quicker and makes humans more likely to run them (in my opinion, good developers are truly lazy - writing tests is a practice of truly lazy people because it prevents more work in the future. Skipping writing tests is an "unlazy" practice - it might save you time now, but it'll likely cost you even more in the future).
This sub is not meant to be for questions, more for discussion about the language itself. You might get more responses on /phphelp or something like that. In any case, in order to help you one needs to know what error is happening, did you get that bit of code from a view source in the resulting page, or did you opened the original file itself and copied it? Things that can be wrong: php is not running or web server software is not passing along the request to php to parse. It may be the file extension is not configured to be handled by php.
&gt; Currently I have no plans to write unit tests As your own project, this is fine. But this is an absolutely terrible attitude to have towards a project that you expect others to use in production.
Yes that should work. Do a “view source” on the page to see what it is actually outputting. Then try to access the style sheet directly. 
his problem is clear as well as the error they get. The previous server was configured to process css files as php and the new one is obviously not. but I agree that the OP must respect this subreddit's rules and ask in the designated sub. 
Nice point, will create an additional video on that or ammend the existing one. Thanks. 
Awfully opinionated, but we get more mileage out of data bindings than DTOs
I have found doing "return \[...\]" for configs to be "slow". [https://github.com/ellisgl/GeekLab-Conf#benchmarks-if-you-know-of-a-library-like-this-one-i-would-like-to-compare-it](https://github.com/ellisgl/GeekLab-Conf#benchmarks-if-you-know-of-a-library-like-this-one-i-would-like-to-compare-it) 
I don't think there's a cure for Santy.
Sure, and I've implemented many first/last name systems for similar reasons, but the point stands that there's rarely a good reason to filter names of whitespace and punctuation (although stripping duplicate whitespace isn't a bad idea). As I said, I fully accept this is just an example, but filtering names of apostrophes and hyphens is so common that it 's worth mentioning that it's a bad idea whenever it comes up.
Is there a framework where I NEVER touch or look at their code? If I have to edit something in the vendor folder, I would rather just burn it all down and start over. Same with the boiler code....I just want a blank folder and the framework to exist in the vendor folder and then I go....
The way this client put their website together is \[Month\]\_stylesheet.css and has one for each month of the year. Ideally, it should work as the stylesheets themselves work fine setting it manually to each one. 
I never thought about php not running on the server. I always just assume that when dealing with webhosting that most of those servers handle all the scripting languages that normally come through webdev. &amp;#x200B; \--Apologies for the question, I'll find the help for php sub. Thx.
oh it's not that JSON would replace DTOs, but using JSON (or any of the standard interchange formats which you can encode/decode) makes this SimpleDTO package pretty pointless. &amp;#x200B; for example in php when you use json\_encode and json\_decode correctly, proper nested array handling is simple. have been able to teach it to very green developers within 2 weeks plenty of times &amp;#x200B; besides that, there's no true immutability in php. it just relies on you not forcing your way into accessing private variables, which you can. if you're just using the trust system then you may as well just tell people don't use those variables during transactions. &amp;#x200B; though frankly in a project large enough to worry about DTO usage, transactions should be modular to the point fresh devs don't even have to think about this stuff anyway. to have this concern shows poor system design.
&gt; It's also the getNameAttribute method Yup, I mentioned mutators and accessors in my comment above, I didn't think I had to write out all examples of why this could happen. It's simply not worth it - it's all in the Laravel documentation. &gt; Self proclaimed laravel/eloquent expert Hey you said *expert*, not me ;) All I said is that I've been using Laravel for a **very** long time. &gt; yet you are taken aback by the normal behaviour. Not sure what is meant by this. I simply posted one example of why your example would act in such a way. &gt; Eloquent does not make sense in this instance because it hijacks a basic bit of php language with magic. It's just one of many, many things about laraquoent that don't make any sense, but seems you aren't gonna even admit this, so prob not much point in discussing. You're putting such a large blanket statement that Eloquent doesn't make any sense, but it seems that hundreds of thousands of Laravel users won't agree with you. &gt; but seems you aren't gonna even admit this, so prob not much point in discussing. No, I'm not - and that's totally okay. We all have opinions and can we can respectfully disagree with each other. :)
I was really hoping for some discussion about value objects but instead got an argument about names.
For more info, look @ [http://devblog.nestoria.com/post/115930183873/tombstones-for-dead-code](http://devblog.nestoria.com/post/115930183873/tombstones-for-dead-code) (is in the Readme file).
Encode/decode what though? The data needs to come from somewhere. I guess that's what I don't understand about your response. In the context of an HTTP response, you would create a DTO from an entity (because you likely don't want to share everything in your entity with the end user) and then you use json\_encode on the DTO to serialize the response to the format. I think you're confusing the ideas of data transfer and data serialization.
Isn't having logic in the constructor considered bad?
Value objects are {great|terrible}. You should {always|never} use them. If you {don't|do} you're not a *real* programmer. More seriously though, do you have any particular questions about them? I tend to use them extensively because on top of enforcing validity, they can make code much simpler to understand at a glance.
Not particularly. Having a lot of logic in the constructor can be bad and at that point you should abstract it to separate methods, called from the constructor. But particularly for value objects you want to enforce the validity of the object on creation and as long as the logic is easy to understand at a glance, there's not much sense in fragmenting it across other methods.
I think so. I always set the constructor private and implement something like ValueObject::createFromString(), validate the parameter in this static method and if the validation succeeded, return new self()
&gt;will create an additional video on that oh no, what've I done
I think this is great. Handing off any processor intensive stuff to a faster run time could be very useful.
If the line of code is in a .php file that should be rendered just fine into html. When run the HTML output should be the output of date() with \_css . &amp;#x200B; The other comment about PHP running might be valid if its failing.
&gt;https://github.com/ellisgl/GeekLab-Conf#benchmarks-if-you-know-of-a-library-like-this-one-i-would-like-to-compare-it Why do you think it's so?
PHP is not going away. If anything its getting better. There are nice plans for PHP 8.
I'm not sure it's a "library like this one" -- as it probably does a bit more: https://github.com/dotink/jin
Do you plan to contribute to Webiik or why do you need unit tests? See answer from AllenJB83, it says everything. Also this is the reason why the sentence you have quoted continues...
I know NodeJS is probably ideal for this but I was curious if there is an efficient way to do this with PHP. The only thing I found so far is this: [https://github.com/panique/php-long-polling](https://github.com/panique/php-long-polling) and for some reason its bugged and does not work for me. It seems to work initially, but after a few hits, it gets a mismatched checksum and eventually requests timeout and server returns 500. Is there a better way to achieve long polling with PHP? The problem is simple. Don't make requests to a server to check for new data but the other way around. Just wait until there is new data from the server and push it to the user.
I think I know some of those words. 
You definitely don't want complex business logic in your constructor, but simple validation rules for the arguments you're passing to the constructor are perfectly valid. For example, in a value object constructor: GOOD: Checking to see if an email is in a valid format. BAD: Checking to see if the email is unique in your database. BAD: Checking to see if the email is in a blacklisted in your application.
I wanted it to actually be held in RAM which seems like the default behavior based on another comment.
Ops, misread your post, Whats the use case? Usually its wanted the other way to avoid memory exhaustion 
Personally, I don't know any framework suggesting edits in vendor folder. If you don't like boilerplates and you want just freedom then take a look at [https://github.com/webiik/components](https://github.com/webiik/components)
I think internally it has to eval() the code to get the value then assign it. Not 100% on that though. Would have tey it though a profiler to find out.
Essentially the package you posted has a server script that waits for an AJAX request then never closes it, instead it sends more data to the output buffer when it sees an update to the file it reads from. There may be a better way to achieve functionality like this, for example with WebSockets or server sent events (SSE). I would recommend you look there. There are packages like ReactPHP for WebSockets, and SSE is fairly easy to implement IIRC. I don't know of any PHP libraries pertaining to polling, but if you follow the lead of panique's code you should be able to figure it out.
Do you want me to explain or elaborate more :-)?
How did you configure the executable path to point to WSL php?
"Emoji's" what❓ Why do small pictures bother you so much? 🤣
Yes, it's wise and again, I totally agree. But I thought it so...when you write some code to be perfectly testable with unit tests, it doesn't have to mean it will be perfectly readable for humans. Personally, I prefer this way "Look at the code -&gt; Understand code -&gt; Perform tests to confirm I understand the code" than "Look at the code -&gt; ? -&gt; Perform tests to try to understand what code should do."
So if we use this, it can replace javascript and we can just write all PHP code on both server and client side? 
Not really sure. I haven't used them too much in the past but I have always really liked the concept of them which is why I have been trying to incorporate them more and more into my recent code. I guess something I have trouble with or think too much on is differentiating a value object from a model. Like at least from this example it seems a value object is essentially a way to convert a primitive type (string) into an object and apply some business logic to it. While it's obvious to me that a value object doesn't do database calls, what's not obvious is where value objects necessarily fit into the "landscape" of the code. Let's take users for example. Most applications have users of some kind. The data resides in the database and we can pull that data. My understanding is that's a model. Would the User model have value objects to describe pieces of it, such as the article's CustomerName? Would the the User model be made up value objects at that point, or as many as would make sense? Or are value objects more like, "Here are some primitive types that always seem to have some logic around them. Let's put them into a class to encapsulate them and improve the code"? Can a value object be made of other value objects?
&gt; SSE is fairly easy to implement IIRC You can also avoid it altogether by using https://mercure.rocks 
You can easily tell the difference between a model (or entity) and value object by seeing if it's identifiable. That means, does it have an ID. If you can reference it, it's a model, if it's generic it's a value object. &amp;#x200B; A user object would be a model (or entity), but would comprise of value objects (email, address). &amp;#x200B; An Address value object could have different sub value objects. For example a City value object could be part of an Adress value object
I'd say less that the User model would be made up of value objects, and more that a set of value objects would map to a user. Say for example that you had a limit to the amount of chars a username could be. You could put that in a value object called `Username`. So now you don't have to validate it anywhere because it's already done in the object. As for the difference between a Value and a Model, I'd say that a Value object should always describe a type of scalar (string, int etc.). Money and Time are really good examples of good fits for Value objects, and a Model might have several Money or Time objects as part of it. I normally reserve creating Value objects for specific things which require special logic when interacting with them. Things with specific formats are good fits, like IP addresses, UUIDs, URIs etc. I'd also say that a value object shouldn't be made of other value objects unless it makes sense (like URI value could be made of a scheme value, host value, query value etc.).
Reflection + AST analysis of entry points (routes, api calls, index.php)
May I ask why is PSR7 and unit tests important to you?
While I knew web sockets is probably the best fit for this, I tried to go the simple route first just for playing around and see if it worked. I guess it does not as PHP is not designed for long running process like that code tries to do. I will take a look at ReactPHP. Thank you!
This is a worker manipulating images that it downloads via a cURL request and returning them to another server via a second cURL request. PHP and the extensions are running from a RAM disk as well to minimize any hits to the hard drive.
Thank you for the explanation, I appreciate it.
Nop. It does **not** compile PHP to WebAssembly. It allows to execute WebAssembly program inside PHP.
I found this: [https://www.swoole.co.uk/](https://www.swoole.co.uk/) Has anyone used it?
Thanks for the response, I appreciate it. &gt;Say for example that you had a limit to the amount of chars a username could be. You could put that in a value object called Username. So now you don't have to validate it anywhere because it's already done in the object. Couldn't this apply to a lot of stuff, though? Basically anything coming from the database is going to have some kind of limit to its length or format, so wouldn't basically everything become a value object to validate that (using your example)? How far down the rabbit hole does one go? &gt;I normally reserve creating Value objects for specific things which require special logic when interacting with them. Things with specific formats are good fits, like IP addresses, UUIDs, URIs etc. Is that to just encapsulate the validation of the specific format?
For websockets specifically, you'll want to check out Ratchet.
Good unittests make you not break anything when you change anything. Psr-7 Makes me reuse alot of code written by the community.
I forgot to be honest. But I remember I had to set Ubuntu bash as the default VS.Code terminal. And from there it would use that when it runs scripts and it's easy. 
You can do this now and could do this a long time ago. &amp;#x200B; On the client side I understand the excitement for WASM but on the server side not really. Better performance for PHP is great but making it run a different application, extensions or making it run wasm is not very exciting for me. In that case I could have written the code in a different language already or written my own extension in c. &amp;#x200B; The only real benefit to existing solution for me is if I have code that is shared between frontend and backend. This way I could write it once in a performant way and use it on the server side and client side.
What’s this for? 
Regarding unit tests, why do you need coverage of Webiik's source code? Do you plan to contribute to Webiik and you are afraid you will change/break something? &amp;#x200B; Could you give me some actual examples of PSR-7 compliant libraries you use and you can't use with Webiik? I want to say, you should be able to use any 3rd party PHP library with Webiik. The problem can be with PSR-7 middleware libraries. Personally I don't know any popular PSR-7 middleware library. Even Laravel doesn't have PSR-7 compliant middleware.
Why did you post your question in the comments section and not in the post body?
A syntax error?
Agreed. Emojis are fucking stupid in this context.
This is testing your knowledge on how php handles data types 
Quite silly a question, $puzzle's value is obvious if it must conform with all conditions
trying to figure out a number &gt; 10000 in hex its killing me lol
obviously not
it is not in hex actually
Obviously, yes. It's confusing written with just opening braces and if statements. Why wouldn't you just write it as `is_numeric($puzzle) &amp;&amp; strlen($puzzle) &lt; 4 &amp;&amp; $puzzle &gt; 10000`
Well that's what im trying to figure out , you understood the question wrongfully bud
Ideally this is the process: - Write tests to explore and define the behavior of the API - Write code to conform to the tests You should be coding to your tests, not testing to your code
I’ve moved my Silex projects to Symfony 4. It meant re-doing the routing and scrapping my home grown DI solution for Symfony autowiring. Aside from that there wasn’t much else that had to change.
My project grown over 4 years. I am not sure how can I do this kind of migration. Exists any guidline for this migration?
just copy pasted the code , i don't know much about formatting in reddit
You are missing the last sentence from him. It might cost you in the furure. If you are going to refactor code, you must be 150% sure you are not breaking anything if you dont have unit tests.
But strlen &lt; 4 = 9999, so your result will always be false
1e10 ?
nah, you're just terrible at communicating
its length has to be &lt; 4
Good question. For some reason the r/PHP does not show any body section for me. Not sure why. Here is the screenshot, just title: [https://imgur.com/a/Kh2F4Lf](https://imgur.com/a/Kh2F4Lf) &amp;#x200B;
Would need to be `"1e5"` to pass the strlen test.
$puzzle='1e6'; 
not always
I get a maximum of 9000000000 with 3 chars. So it can be true
What about Slim? It seems popular for creating an API or other lightweight projects.
This was one of the blog posts that helped me: https://medium.com/@peter.lafferty/converting-a-silex-project-to-a-symfony-project-1dc3dc30f049
Many thanks I will read and try this
Maybe for new projects its a good option. I like also less/micro frameworks that was one of the reasons why I use silex and flask (in python world).
Lumen is a good microframework, but it's a "side project" of Laravel, I personally would not invest the time until we're sure how long they plan to support it. Slim is a very reliable microframework with very high test coverage and does not break the API often. However given that you are invested in Silex which shares a lot in common with Symfony itself you may be better off either migrating to Symfony or picking Symfony components piecemeal to replace your existing functionality.
Good one Sir ;)
Maybe lumen end up like silex , that is one of the reasons why I am in distance to lumen. After I read the migration docs I will give Symfony also a chance
That was exactly my thought. Good luck to you!
it might be failing since php 7 no longer treats hex strings as numeric. From is_numeric() page: Strings in hexadecimal (e.g. 0xf4c3b00c) notation are no longer regarded as numeric strings, i.e. is_numeric() returns FALSE now.
I have never had much luck getting VSCode to work well for PHP projects... PHPStorm is probably best, but I personally always seem to come back to [Sublime Text](https://www.sublimetext.com/) (solid built in goto symbol/definition/reference functionality) + [PHP Companion](https://packagecontrol.io/packages/PHP%20Companion) (for the "find_use" and "implement" commands) + [CodeComplice](https://packagecontrol.io/packages/CodeComplice) (for autocompletion and tooltips). Xdebug for debugging (try [xdebug client](https://packagecontrol.io/packages/Xdebug%20Client) for sublime), but I also tend to lean on the [symfony/var-dumper](https://packagist.org/packages/symfony/var-dumper) component and [psysh](https://packagist.org/packages/psy/psysh). For wordpress specifically check out the [query-monitor plugin](https://wordpress.org/plugins/query-monitor/). And if you like working with psysh, install it alongside [WP-CLI](https://wp-cli.org/) and use the [wp shell](https://developer.wordpress.org/cli/commands/shell/) command.
Well, let’s say not having unit tests is one of the reasons I’m not using your software. Guzzle is one library I cannot use with your software without writing some wrappers
Personally I like CodeIgniter the best.
Never used it before. Thanks for your mention. I look into the docs to become a overview about the framework
I love value objects too. I think however you're missing a trick by using those Assertions like this. The name variable could itself be a Name class (which validates max length), which extends a ConstrainedAlpha class (which validates non blank and alpha value) . This way you can reuse your validation rules wherever Name and ConstrainedAlpha are needed. 
Its stable (old, plenty of top projects use them), its very secure in my opinion and its light. Just 2 MB documentation included !!! When I say top projects I mean I know heavy traffic websites, like Obama, Trump site, OpenDNS, etc.
Because Webiik has only 1062 LOC and actually relies on 7 untested libraries, I'm not afraid so much. Also, I've written that maybe I will add unit tests in further versions. Unit tests are not silver bullets, even unit tests can contain errors or just miss something. All Webiik libraries require strict types and use type hinting for parameters and return values - it significantly helps to detect unexpected behavior. Webiik is open source, so if someone needs unit tests right now, the easiest way is to send a pull request. I appreciate other valuable feedback, it was enough said about unit test.
Is the update process on major releases complex or break old architecture through this updates? 
This is a good summary, but I disagree with the distinction. Calling a bytecode or calling native code doesn't really mattter -- it's all foreign.
No, its very stable, they are not changing things just because... This is why some developers don't like it as much and consider it and old framework, but I prefer it that way. I don't want to be messing around with bugs and things not working every time a new release is out.
I understand , it depends on use case
Of course, you can use Guzzle with Webiik, there is no reason why you couldn't. Add Guzzle as a service to the container and you are set. Simplest setup would look like this `'GuzzleHttp\Client' =&gt; function () { return new \GuzzleHttp\Client(); },`, then in route controller do your job. &amp;#x200B; Regarding unit test: [https://www.reddit.com/r/PHP/comments/b8x2d1/php\_framework\_with\_only\_1062\_lloc/ek1jmtr?utm\_source=share&amp;utm\_medium=web2x](https://www.reddit.com/r/PHP/comments/b8x2d1/php_framework_with_only_1062_lloc/ek1jmtr?utm_source=share&amp;utm_medium=web2x) &amp;#x200B; Thank you for you time and honest comments.
Yeah, agreed. They could've owned up to it, admitted they'd made some bad decisions in the past, apologized and promised to do better. Given how trusting a lot of their customers are (many are still valiantly defending them), they'd have survived an apology much better than they will survive this. It's really stupid because we would've worked with them, had they asked, to fix their stuff and turn this into a positive thing for them... ah well.
Looks very interesting but not seeing anything that separates your framework from the others. LOC is a silly metric that solves no real problem for modern development. This isn't 1970 where memory and clock speed were questionable. Also, please for the love of all that's holy write some tests for your code. It's absurd to think a codebase without unit tests would be a viable tool for use without the peace of mind unit tests provide. It's a noble pursuit you're undergoing but are missing the mark for modern development bigly as it stands. Without unit tests, following standards, and ensuring a solid experience for your users, everything else is meaningless. Lastly, the LOC is a meaningless distinction. It adds absolutely nothing of value worth considering and in no way makes your solution more appealing than the competition by itself. Please keep at it though! I hope you can step things up and get it ready for production use. &amp;#x200B;
Codeigniter is a terribly designed framework. Migrating your project to a Symfony microkernel would be a breeze compared to updating it to work with CodeIgniter.
You are welcome to write unit-tests for Webiik. LOC is not important to you, for others it is. What are real problems of modern development the framework should solve?
Not everything needs to be serious :-).
I would advise against alpha tbh... It will bail out at legit names: `Frédéric`, `Jean d'Oeuvre`, `O'reil`...
What about Cognitive complexity, for human-readable code? 
The reason why I can't use my real name on 90% of the websites: they try to be too smart for their own good about what your name could be. The same goes for passwords &amp; emails, it's just a PITA.
Isn't a code with less branching, less paths and a more linear flow means it is more human-readable and human-understandable as well?
Oh, I agree. Nobody suggests it, it just ends up being the only way to do what you want. that link is very interesting. did you write all of those components? Do they only work inside of webiik or do they work in any project? are they PSR based? 
See, that right there, that's a problem; the developer of a framework has so little care in their product as to punt on a crucial aspect of distribution. It's not up to the users of your product to ensure the safety and reliability of your product. That's simply absurd. Could you imagine a car manufacturer saying to their customers, "if you want crash tests you're free to perform them yourself" or a chemical manufacturer providing no proof their product does what they say it does. So, to sum up, your framework isn't tested, uses a silly and out dated metric for quality, and you don't care. Good luck with that.
Value objects are really an excellent way to shore up holes in your application. I work on a TypeScript UI that for the longest time, described its "objects" as interfaces: export interface { foo: string, bar: number } The problem with this approach is because at the end of the day, TS just compiles to JS, and it becomes very easy to create invalid or incomplete objects since you have no real behavioral safety. The objects are also easily mutable, both in terms of their values and what nonsense you could append to them at runtime. Just fragile and shitty. We recently started switching to value objects to describe our domain, rather than those basic interfaces, and it made a world of difference. The value objects can easily be made immutable with readonly constructor properties. You can validate the values, and then fully encapsulate how you want mutation to happen (if at all). We saw *immediate* improvements in stability of our code because we used value objects to put meaningful constraints around data and state, to better match the rules of the business.
&gt; So if we use this, it can replace javascript and we can just write all PHP code on both server and client side? By design, the WASM VM (runtime) doesn't see the DOM/events/etc. WASM provides callable functions to JS, JS provides arguments to WASM, and both (optionally) have a shared memory section. Javascript's likely to remain as a DOM manipulator, but hopefully this will at least curtail JS on the web backend. And who knows, some clever clogs might make a PHP library to represent the DOM in a PHP WASM VM, with a JS component that simply follows PHP's instructions and forwards events. Then you'll have your wish.
&gt; my own extension in c. There is already the [phalcon framework](https://phalconphp.com/en/) which is written in c.
phpstorm has pretty good support for wordpress. You will need to download wordpress and add it to the project context.
Another way to say this is: A value object has equality, while an entity has identity. A really good value object will have an `equals(self $other): bool` method that checks if the internal state is the same in both objects. This is particularly useful when you want to compare, say two different prices: $hasEqualPrice = $priceA-&gt;equals($priceB); // instead of: $hasEqualPrice = $priceA-&gt;toDecimal() === $priceB-&gt;toDecimal(); The former is much more concise and contains the behavior of the value object in the object, instead of pushing behavior to calling code. See also "Tell don't ask" principle.
As a counter argument, I tend to wrap all scalar values in value objects. This has the benefit of allowing common values to be reused and collect behavior. It also protects against silly things like `$userCollection-&gt;find($groupId)` because the `UserCollection::find(UserId $id)` signature will prevent it, whereas a `UserCollection::find(int $id)` would not.
I agree, a composition example would make this article way more interesting and useful.
Slim is great, I reach for it every time I need something quick.
1. Yes, I've written all these components. 2. You can use them everywhere you want, they are standalone. 3. No, for me PSR means a lot of dead code. I wanted to make Webiik as simple as possible. For which components do you miss PSR and why?
Could you imagine a car manufacturer gives you a car for free?🤣 Could you imagine I do it as my hobby and not as my job? Could you imagine an open-source community where people help each other? We both live in a different world. You only hate, and never give an example of a real solution, that's all...Good luck with that!
That's literally what I write now after years of incrementally moving to it. I also add with* method to create modified objects if it's needed.
I have no idea. I just finished building a project in a popular framework and I hate it. I am looking for alternatives and using a component based system seems to be the direction I am gravitating in. But I am not 100% sure how to make my own code modular. For instance suppose i wanted to make an admin panel to plug into any project. That package would itself need to have views and models, so I don’t understand how to decouple it from a framework. I feel like even if I go with components, I will still be tied to them to a degree, which is why I asked about psr
It lacks professionalism.
Is there a way to compile PHP code to WASM?
This is totally possible. Use this: [https://github.com/oraoto/pib](https://github.com/oraoto/pib) Then ship your wasm file to the frontend along with that binary. Presto!
1. You can get inspiration on how to create plug-able parts of your application here: https://www.webiik.com/extensions/, then look at https://github.com/webiik/framework/blob/master/src/Webiik/App/App.php and investigate methods 'use' and 'loadExtensions'. It could give you a hint on how to solve plug-ability by yourself. 2. Interoperability of components is a great idea of PSR. You will pay a performance tax for it and you will have a lot of methods in your app you will never use. But there is also a different way how to achieve interoperability of components in your app 👉 Write your own interface and implement it to whatever component you want. In your application, you will use your own interface and when you decide to change the underlying component you will. For example, take a look at https://github.com/webiik/components/tree/master/src/Webiik/View it uses the same approach.
Sonarcube?
From a first look i like the clear documentation.
Thank you for the positive comment😺
It makes sense, right? But that's the misconception the Cognitive complexity tries to fix. tl;dr; Human reading != machine readin. Have you heard about Sonar Cube? I'd say they're expert for static code analysis and they wrote [Cognitive Complexity, Because Testability != Understandability](https://blog.sonarsource.com/cognitive-complexity-because-testability-understandability) post about, where they describe why it's different.
You mean [Zephir](https://zephir-lang.com/en) which phalcon is written in. 
While this is nice and all, from personall experiance. The issue with PHP extension isnt the ZendAPI, but rather the lack of C/C++ knowedge. While many who I have spoken too who do know C/C++ do say the zendAPI is horrible its not hard to learn.
You might be interested: [https://github.com/leocavalcante/ippo](https://github.com/leocavalcante/ippo) 
Hi all, Pierre here mentioned in the article. I want to point out that reducing the cyclomatic complexity of the Slim 4 codebase was not the original goal but a side effect of implementing good coding practices and concepts. Slim 4 is looking really good right now and I’m very excited for the upcoming beta. Rob, myself and many other contributors have been working very hard this past year to get here. Stay tuned for the official beta announcement. Follow us on Twitter [@slimphp](https://twitter.com/slimphp) 
Hehehe 😂Siler has **806** and have a lot more features [https://github.com/leocavalcante/siler](https://github.com/leocavalcante/siler) Nice try, tho. Siler [master]~ phploc src phploc 5.0.0 by Sebastian Bergmann. Directories 17 Files 30 Size Lines of Code (LOC) 4263 Comment Lines of Code (CLOC) 1658 (38.89%) Non-Comment Lines of Code (NCLOC) 2605 (61.11%) Logical Lines of Code (LLOC) 806 (18.91%) Classes 148 (18.36%) Average Class Length 13 Minimum Class Length 3 Maximum Class Length 82 Average Method Length 3 Minimum Method Length 0 Maximum Method Length 33 Functions 488 (60.55%) Average Function Length 2 Not in classes or functions 170 (21.09%) Cyclomatic Complexity Average Complexity per LLOC 0.25 Average Complexity per Class 4.45 Minimum Class Complexity 1.00 Maximum Class Complexity 23.00 Average Complexity per Method 1.90 Minimum Method Complexity 1.00 Maximum Method Complexity 9.00 Dependencies Global Accesses 24 Global Constants 0 (0.00%) Global Variables 0 (0.00%) Super-Global Variables 24 (100.00%) Attribute Accesses 93 Non-Static 90 (96.77%) Static 3 (3.23%) Method Calls 120 Non-Static 91 (75.83%) Static 29 (24.17%) Structure Namespaces 23 Interfaces 0 Traits 0 Classes 11 Abstract Classes 1 (9.09%) Concrete Classes 10 (90.91%) Methods 44 Scope Non-Static Methods 42 (95.45%) Static Methods 2 (4.55%) Visibility Public Methods 41 (93.18%) Non-Public Methods 3 (6.82%) Functions 243 Named Functions 179 (73.66%) Anonymous Functions 64 (26.34%) Constants 32 Global Constants 0 (0.00%) Class Constants 32 (100.00%)
Maybe /r/twilio or /r/USPS? What does this have to do with PHP? 
I've been writing long running PHP daemons and socket processes since about 2005. PHP most definitely can handle this and more. Make a ZTS build add in some magic sauce and you will be more peformant than most out there, subjectively. 
I am coding everything in PHP, and twilio has (had?) An API for it. There were relevant questions regarding this issue on this subreddit before, so was hoping someone, anyone, could point me in the right direction as to how best to execute this in PHP nowadays
I maybe missed PHP in your post
I think google has some speech to text apis, which (if they suit your needs) can certainly be called from PHP. 
I totally agree, but find them annoying at the same time. Schroedingers emoji?
hmm... yeah, my problem is the nags I get from VS Code linters not finding or using the python or php executables. I wonder why there's no official support for this.
Not a Worst Marketing One Time Visit My Company and Than Comments 
&gt;Hey you said expert, not me ;) So you're either claiming to be a long time user that learns nothing, or a long time user that learns things. People that spend a long time learning things generally become "experts". &gt;Not sure what is meant by this. When I posted some eloquent code you said this: &gt;...huh? &gt;but it seems that hundreds of thousands of Laravel users won't agree with you By that logic wordpress is the best software ever created. Thousands of laravel developers like yourself that only know the laravel way of doing things mean absolutely nothing. &gt;We all have opinions and can we can respectfully disagree with each other I honestly can't respect that. Laravel teaches people the wrong way to do things, they learn that way and spread the information, making php a shit place to work. For example, people are now realising that AR is rubbish but rather than switch to doctrine they hold onto the thing they know (eloquent) and start re-inventing mappers in front of it. Taylor should be ashamed of himself for putting his ideas and profit over a community - why don't they support eloquent AND doctrine and just link to docs for each ???
sonar, expert in static analysis? LOL
Apparently those 3 emojis are more important than the article. Got it :-).
PIB is the Zend Engine compiled to Wasm but not PHP itself. It’s possible to compile a subset of PHP to Wasm though, which avoid the needs of the PHP VM itself.
Not yet. But maybe, one day…🤫
But it is a problem. C is my mother tongue, so naturally when I started running into walls in PHP my first thought was that I'd just write an extension, easy peasy. It took about fifteen minutes of looking over the API to convince me that I was just better off just ditching PHP and using Go or node or even python for that particular project.
Even though it's static, phpstorm got quite some functionality in terms of detecting legacy / unused code via inspections in the newest version released last week. Might give it a shot? 
Lol, ok spammy
It's really frustrating. But it's on purpose: [https://www.reddit.com/r/PHP/comments/aavqqr/dear\_rphp\_why\_are\_you\_hiding\_body\_field\_for\_text/](https://www.reddit.com/r/PHP/comments/aavqqr/dear_rphp_why_are_you_hiding_body_field_for_text/) 
Oh wow, I never knew this existed. Thanks a bunch.
We had pretty much the same problem and used this method to find unused files. What we did was: - Save the result into a DB table, along with a counter per file, because some files are included almost never. This can be done with one query using ON DUPLICATE KEY. - if you have multiple entry points (e.g. website, API, CLI), then maybe put the current one into the table as well. - If you are worried about performance, then maybe make it so it only has a chance per request to run. Hope this helps.
Siler has a lot less features, for example... how does Siler manage cookies and sessions? How is Siler ready for multilingual apps? How does Siler manage dependency injection? How about Siler and CSRF? Did you measure Siler’s LLOC incl. dependencies for Siler’s middleware? Do you just trolling?
Fuck lol
Ultimately it falls under the resources available and how well you index the tables. I use PDO but that's personal preference. Speed difference between the two is marginal.
How is the data structured? There's a huge difference between a reasonably normalized data structure and a "spreadsheet-like" data structure.
Your post sounds like you think these are different types of databases. MySQLi and PDO are both just MySQL APIs that are part of PHP. Each has some seperate features the other does not, but if they are "too slow" that is probably the fault of your queries or database design.
What exactly are you asking? PDO is an abstraction layer, while MySQLi is an improved interface to mysql. Neither have anything to do with how efficient your database can store or retrieve records. That really is going to come down to your database schema.
I just found(in past, not sure were) an idea that will PDO performance is better and just trying to figure it out if this is TRUE
That would very much depend on what features you need or can use from each. [I believe this is a good breakdown.] (https://websitebeaver.com/php-pdo-vs-mysqli) - though it's about 10 months old.
thanks for source, I will take a look
 $result = $pdo-&gt;query("SELECT * FROM users"); or $result = mysqli_query($connn, "SELECT * FROM users"); 
"However you split it up into fields" is exactly the sort of thing you're trying to advise against, though. What's the practical difference between a user seeing their name stripped of its apostrophe versus seeing part of their surname in the wrong place? Ultimately, you just have to accept that we can't force everyone into the same box, and yet useful software can't be developed without those boxes. It's a frustrating irony, but it's not one you can reasonably escape.
If you are going to use mysqli **please** use the OOP interface
There is, my VS.Code is not throwing php executable exceptions. I may or I may have not installed Win32 PHP7 though. Idk it's a dev PC and it's ridicilously hard to find stuff on it :D 
Because in general, without a specific need you shouldn't be splitting names up into first/last, however there are certainly places that it's required, especially dealing with third party integrations so it is sometimes a necessary evil. However stripping symbols and whitespace is something that can almost always be avoided, as in the worst case you can strip it at a later point, for example if a third party API won't accept it with them. It's along the same lines as Postel's Law, be permissive in what you accept and conservative in what you send.
I think your benchmarks are flawed - I'm going to go out on a limb and assume you did your benchmarking from the CLI without configuring opcache to work there. That not only means that the array-based config must be parsed every time it's included, but that you're not making use of specific opcache optimisations to handle static arrays meaning the code doesn't even need to be evaluated. Try running your benchmarks again after ensuring opcache is installed and has opcache.enable_cli=1. Even then it's very unrealistic because (I believe) each iteration of the test will start a new php process and lose the opcache. Could try configuring the opcache.file_cache settings to work around that issue - will still be slower than the shared memory opcache you'd get with a persistent server process. Confident that when properly configured, static arrays will be MUCH faster than the other drivers.
You're looking in completely the wrong place. Access speed on large databases depends on things like correct indexing (usually the prime issue), the structure of the query being used (joins, subqueries etc), how the data is stored. I've regularly coded against databases with 100M+ records in tables and there's no reason they have to be any slower than small databases if structured correctly. The difference is that performance will fall off a cliff with large databases if you don't have these things done correctly because the crutch of having everything in memory no longer applies (and disk access is 1000 times slower than memory access) The place to start is with a good SQL interface too (I like SQLYog, but YMMV) and EXPLAIN. Not PHP
Case in point, the British government's current tool for allowing EU citizens to apply for settled status after Brexit has a similar Latin alpha requirement to the OP's example. Which is unsurprisingly [causing some problems](https://twitter.com/Wabiloo/status/1113133646125457419).
Thank you very much for your detailed explanation
`(int)''` -&gt; Please convert this value into an integer, in whatever way you know how. `foo('0'): int` -&gt; Give me back this integer. PHP: That's not an integer! But wait, it does contain a well-formed integer inside! I'll give you that. `foo(''): int` -&gt; Give me back this integer. PHP: That's not an integer, and there is no well formed integer inside!
Because that would defeat the purpose of have a strict return type in the first place really. &amp;#x200B; In your example you're returning a string from a function that is supposed to return an int, it won't type cast it unless you explicitly do so as to avoid the type (and value) ambiguity of the functions output. &amp;#x200B; While yes you could make the argument the value could be type cast as part of the function, that's not really the point of "strict types", it's strict, it expects you to give it what it wants, it should be more up to the function to transform that data as it sees fit, as not all data types will be converted one to one or even at all.
Why would you want it to return always an integer when it is not returning an int. Wrong types can cast to unexpected values and therefore it triggers the error. When you put in a float you will trigger an error too or a boolean.
Laravel.
I used to work at a company where we wanted to shift from mysql to MySQLi or PDO. We did a shitload of testing on our hardware and at that time 4 years ago on PHP 5.6 MySQLi was slightly faster overall (Don't remember in which use cases it was slower). The only speed difference is in the internals of the PHP driver you choose and that is so lightning fast you won't notice a difference. In the end the difference is negligible unless you are going to run backend scripts with hundreds of thousands of queries (which we did at that time and went for MySQLi). It won't impact the query speed on the database server at all. &amp;#x200B; If your database gets slow you should read up on indexes and profile which queries specifically are slow and maybe restructure those. &amp;#x200B; My personal advice for you: Don't base your decision on speed because it really won't matter, but rather on other pros and cons. &amp;#x200B; Little sidenote: The company I mentioned had multiple tables which required bigints so waaaaay over 500M records
Oh yeah bloody e from exponential, sorry...
For what it's worth, if you do need to filter out anything but letters, rather than using the `Assert::alpha()`, which is based on `ctype`, it's much better to use `preg_match` with the regular expression `/^\p{L}*$/`. [`\p{L}`](https://www.php.net/manual/en/regexp.reference.unicode.php) will match any valid Unicode letters, so you won't be stripping letters like Å or Ö.
I've already built a database and began creating a PHP App. I'm a few days in development already with pure PHP. This is my first time building a PHP App. Before I've only used PHP sparingly for Wordpress website. Progress so far is slow but steady. However**,** the code is already becoming cluttered and I'm very concerned about security. I've read PHP frameworks can help keep the code organized and make security easier. **My question is, do I need a PHP framework, and if so, which one would be best suited for a relatively simple, local App such as this one?** I've heard of Laravel before, and I've heard it's a fantastic framework. But from what I understand it is best suited for large, complex web apps. I feel it is an overkill for my needs. I've read [CodeLinger](https://codeigniter.com/) and [Slim](https://www.slimframework.com/) are good lightweight frameworks. Do you have any experience with them? I would prefer a framework that is easy to install and integrate into a project. E.g. I use XAMPP for development and like to include stuff the old-school way via link in &lt;head&gt;, be it a local file or via CDN. I would like to avoid using command line.
I agree with you that it is preferable to explicitly return values of the correct type. This is just a simplified version of a bug I encountered, and I did not expect this behavior.
thanks for your reply if someone with even more than 500M records, not notices any difference between MySQL and PDO (only comparing performance for a large database) than for sure this will not affect me
In your function definition you define the returntype, this is optional. But when you set it, you always need to return such type, this can lead to less type juggling bugs.
Thanks for the recommendation. But, please see my comment below.
&gt; in my head A place I never want to be.
If the code is already becoming cluttered after a few days, the lack of a framework is not the issue. And it will only make things worse. In what way are you worried about security? Do you understand how to write a basic login system using sessions or cookies, and how to check at the top of every page that the user is logged in? Do you understand how to avoid SQL injections? Learning a framework takes time. Learning it properly takes even longer, and learning it by creating a production-ready project as your first site isn't really ideal. In an ideal world, a framework might be a good idea for you. But right now I think your problem lies elsewhere and a framework isn't going to solve it. 
Answer is no, you don't need a framework, but if your experience in PHP is not high level, then I'd go with a framework, the flexibility of PHP gives you the opportunity of doing something SUPER good, and also SUPER bad. I'd go with symfony 4, will be hard at the beggining, but you have flexibility and if your business grow then you are prepared for the future :D, if not, then you spent time learning about one of the best fw's in the industry.
This is a very personal opinion but I don't believe in the "overkill for my needs". If you don't need something in the framework, you just don't use it. It's not a front end thing where you are looking for performance and don't want to make the client download useless things. In your case, Symfony, for example, will allow you to generate CRUD forms in one command in the console. The overkills lies in the framework's requirements, but in the PHP world, frameworks are all pretty much equals (mostly composer). I think the best framework is the one you are the most comfortable with.
With some ctype functions you might get there
Slim is pretty good, but it's definitely a micro-framework with a strong focus on being **micro**. It's a good foundation, but doesn't have the kind of (built-in) features you'll find in Laravel. Laravel is a lot heavier, but comes with tons of features. Works very well for large and small apps. Stay away from CodeIgniter, it's an outdated mess.
Maybe we have different ideas of clutter as I'm a beginner. Maybe it's fine, I'm not sure. As for login the system, cookies, sessions and SQL injection protection, I merely know I will need to take care of those before going into production, but no, I don't how to write it, yet. I was thinking I'll learn it, or hire someone to take care of security, after I've done everything else.
Stop being fat.
Yes, you do. For a relatively simple app, and as a beginner, I would recommend Laravel too. It's robust and easier to pick up. It's only drawback is that on the long run, for the rapidly evolving application it could become hard to maintain. For the rather complex product that will be actively developed during its lifetime, I would suggest Symfony, which is relatively harder to pick up but makes you to follow best practices from the start. All other options are really out of choice. 
So Laravel is easier to learn for a beginner than Symfony? This will not be that complex of an app and it will never significantly grow beyond the original scope. It is not a commercial app that will be used by thousands of users. It is only for local use by employees in a small company.
Nerd humour. Yikes. 
You can also look at [Yii](https://www.yiiframework.com/) framework. It has a good built in [code generator](https://www.yiiframework.com/doc/guide/2.0/en/start-gii) that can help you quickly generate models and CRUD for your app.
&gt; I think the best framework is the one you are the most comfortable with. Yes, exactly, that's what I'm looking for. I didn't think to word it that way. So basically I want something as painless as possible to integrate and learn, something that follows standard PHP logic I'm already used to. Does this make sense? &amp;#x200B;
Don't hire someone to "take care of security" after you've done everything else. Chances are they'll have to rip out 95% of the code and start again because it wasn't architected in a way that makes it easy to secure. You don't take care of security "before going into production". You do it as the very first thing, before you even start writing the code. Seriously. It won't work otherwise. &amp;#x200B; If you don't know security, and you don't want to use a framework, hire someone to write you a simple yet secure system which does basic CRUD. Then use that as your starting point to add in the specific functionality and designs that you want. Or spend 60 bucks on something from Envato Market and hack it about a bit. Is this for use only by employees? Is it only available on the intranet and not accessible to the outside world? If so, you MAY be able to convince your bosses that you don't need so much security. But it's not a good precedent to set, really. &amp;#x200B; One more thing. Does your company use AD/LDAP/somesuch? If so, hook into there and allow people to use their standard company password to log into your site, rather than have them set up a new account on your system. 
I want to stress that this will not be that complex of an app and it will never significantly grow beyond the original scope. It is not a commercial app that will be used by thousands of users. **It is only for local use by employees in a small company.** Would you say Laravel is easier to learn for "PHP-not-at-high-level" person, compared to Symfony?
Imagine using larasmell unironically.
&gt;ver, the code is already becoming cluttered and I'm very concerned about security. I've read PHP frameworks can help keep the code organize It is indeed, I've used it to create a simple queuing system to start our update process of our 1100 webapps...
Yes, that's sort of its trademark. So for the conditions given I would suggest Laravel. You'd be amazed how simple and neat your code will become. 
 It is indeed, I've used it to create a simple queuing system to start our update process of our 1100 webapps...
I'd say laravel is easier, but not a huge difference.
Yes, Laravel does scale well but that doesn't mean you can't use it for something smaller. Have you considered using a CMS that uses a PHP framework? I'm a fan of OctoberCMS personally.
You have to realize that neither mysqli or pdo actually execute your queries. It's the database server who does it. And naturally, all your performance concerns should be addressed to the database server as well.
...and your question here is?
There’s plenty to choose from. IF you pick a framework... I believe the one that will get you there the fastest and most simple would be Laravel. It does a lot out of the box for you which makes form stuff a doddle. Yes things like slim, Symfony might be more super light weight. But if you need a solid simple to maintain working product, with a smaller learning curve. Laravel. You can do the free course on laracasts.com which will basically show you how to create what you want. The other posts here are 100% valid suggestions. But as you say it’s not complex, it’s not gonna face massive web traffic. Laravel is great for rapid development. Especially with CRUD tools like backpack, voyager, Laraadmin etc etc
If they where experts in linguistics, psychology, neurology and a few other areas... ;)
My first framework was CodeIgniter. The learning curve is sweet. It gives you plenty of liberty to do whatever you want, the way you want ( For better or for worse ). It's mostly a set of rules and guidelines, it won't help you much to go faster but il will set for you usefull tools to make your code structure logic, understable and maintenable. I think it could be a good pick if you never played with any framework and if it's a modest sized project.
&gt; Is this for use only by employees? Is it only available on the intranet and not accessible to the outside world? If so, you MAY be able to convince your bosses that you don't need so much security. But it's not a good precedent to set, really. Yes. It will be used on "localhost". It won't need internet. But I'm not completely sure whether someone will be able to access it somehow via internet since all the PCs *are connected* to the internet. &gt; you MAY be able to convince your bosses that you don't need so much security. My bosses don't care. They're IT layman and all they know is that I'm doing "some IT program thing". &amp;#x200B;
It's also used for hashes in PHP.
You can go as far as you want, but I tend to instead of mapping types to the database, map them to the business logic instead. So if there's no business reason why you need to restrict names to 255 chars but there is a DB reason, don't put validation on that value in your business layer. Value objects have other benefits, especially when you're using things like IP addresses or UUIDs. You can put helper methods on the value objects, such as `-&gt;isInRange($range)` or `-&gt;isInSubnet('255.255.0.0')` for IPs, or for UUIDs `-&gt;getBytes()` or `-&gt;getHex()` to get a more storable value than the normal string format. With URIs, you can do `-&gt;getHost()` or `-&gt;getScheme()` as well.
I'm not pushing a specific framework one way or another but from experience your edit about this growing can bite you pretty hard in the future. While the current scope is manageable, what happens when people become so reliant on this in a few years then need updates? What happens if you knock version one out of the park and then management wants you to add a bunch of stuff? What happens when the company expands in part because your program makes them more efficient? All of these questions (and more) can be aided by using some kind of framework. 
Simple - which ever you are comfortable with.
This is very interesting. Will definitely look into it further. Thanks! 
Yeah, fuck you, too, buddy 
any framework will do the job :) 
You can't kick the can on sanitization until you disseminate the data to a third party, because all the reasons that that third party may have for not accepting those characters could also be reasons that you don't, as well. They aren't doing names wrong - they just have potentially different business requirements to adhere to. Names can't _ever_ be done right. Prince changed his name to a symbol. Some people's names are actually sounds or gestures with no written equivalents. Others have no names at all. Clearly, we can't practically support the entire spectrum when it comes to developing software. Ergo, we _must_ put people in boxes in order to make anything useful. Your boxes might be different from my boxes, but they're boxes nonetheless. If you have no reason to strip non-alpha characters, or the drawbacks would outweigh the benefits, then obviously don't do it. But it's not accurate to say that people shouldn't do it across the board (or even in most cases, in my experience). The amount of accidental and/or abusive non-alpha inclusions grossly outnumbers the amount of legitimate ones in the data that I work with day-to-day, and I would imagine the same holds true for a lot of other businesses (especially here in the States). If frustrating a small handful of people is the cost of preventing thousands of typos, emojis, l33tsp34k, and so on, can you really say the business value is not there for sanitization? Especially if the alternative is our team spending non-trivial amounts of ongoing time manually cleansing data...
a) The number of classes has an impact on Composer's autoload. For example, the number of classes used by Laravel could be overkill. b) I'm totally pro SRP but we should know our limits!. Usually over-splitting the code in different classes is not a help but a burden, it's a pain to debug. For example: * BigClass::with lots of methods = is bad. * SomeClass -&gt; AnotherClass (with some methods) -&gt; Another class (with 4 methods) -&gt; even more classes (with 3 methods) -&gt; Parent class (with a single method) -&gt; Interface It is a hell to debug. * SomeClass -&gt; ServiceClass (with methods associated by functionality). = Usually it's slim and easy to debug c) Slow deploy (if we are doing a full deploy versus an incremental one). &amp;#x200B;
Sounds like your app is perfectly suited for Laravel. We run some tiny apps in Laravel, and I think an app your size is good for a first leap into the framework. Read the docs, because they cover all of the features you’ve mentioned.
&gt;, and as a beginner especially as a beginner, you shouldn't be anywhere near frameworks because you'll never understand how and why they are doing things the way they do it.
&gt;and SQL injection protection PDO solves that already for example
&gt; But it's not accurate to say that people shouldn't do it across the board Which is why I specifically didn't say that, only that in most cases it isn't warranted. I feel like we mostly agree, my point _isn't_ that there is only one way to handle names, it's that name handling, like many things, requires intentional design and developers should be aware of how uncommon alpha-only first/last actually is on a global scale. The most common issue I see is the one demonstrated in the example I linked from this morning. People are potentially facing legal issues staying in a country because whoever developed the application applied a naïve alpha filter to input, instead of properly handling it and checking what the allowed characters on international passports are (they're quite permissive). Stores of people facing real-world consequences because of this kind of input handling and processing are easy to find. The way we design software has real world impacts and simply defaulting to only allowing Latin alpha characters for names isn't good enough. Input relating to a persons identity should be intentionally designed with whatever the requirements of the situation are, with an understanding of how names are used and expressed around the world and what the consequences of getting it wrong in the current situation are.
I'm a hardcode vanilla PHP advocate, but if I had to choose a framework, I'd use Slim due to the convenient and intuitive syntax and its small footprint, something that I miss in Laravel and Symphony.
I highly suggest **Micro-framework**, like Slim. It is lightweight, easy to learn, perfect for your local usage. For security research packages (use composer) for sanitizing/validating, csrf tokens, web tokens, so on .... Laravel/symfony and others are good too, but they are heavyweight and if your not familiar with them then it will kill you on your learning curve.
500 Million? Damn. What’s in this database?
Frameworks are not reserved for large, complicated apps. They help just as much for small apps.
Last time I had to deal with Twillio support for the same issue as OP, they informed me that they use google's speech to text API, so I'm not sure that will make things better for OP
The faster you switch to react or angular, the better off you’ll be. 
&gt;Yes. It will be used on "localhost". It won't need internet. But I'm not completely sure whether someone will be able to access it somehow via internet since all the PCs are connected to the internet. &amp;#x200B; In which case it will only be accessible from within the office. But if someone installs something like logmein on their office PC, they will be able to access it from outside. &amp;#x200B; Have a think about whether it would actually be a good thing to have the system officially accessible from outside. Eg, if people are working from home, or at a conference, or at a client site, might they want to be able to access the system? It might be a really useful feature. 
Try xdebug with nice profiler tool KCachGrind. Here link to start: https://xdebug.org/docs/profiler 
If you want somethign very lightweight, you can always use [https://lumen.laravel.com/](https://lumen.laravel.com/) Either ways, you can't go wrong with using a framework, whatever it is, you save a lot of time.
I'll have to double check my conf, but here's the details of the run: https://github.com/ellisgl/php-benchmarks/blob/master/r
That escalated quickly. So passive aggressive. Nevertheless have a good day sir!
How is that a back end framework?
Also "slow" in this case isn't all that much slower, since we are loooking at uSeconds...
Don’t use lumen if you need session and views 
Well now that I’ve had a cup of coffee.. backend express.js + node + typescript, frontend Angular 7-8-9 wherever it is when you get to it. Last 4 apps I’ve built were built this way and I’m never going back. 
Fuck u Tree Ok lol
You have got some serious issues
But for this poster you just threw down a gauntlet of knowledge to reach his simple goals.
I wouldn't suggest Lumen for anything except barebones APIs or for experienced developers who are happy to deal with extra work integrating things. You'll end up adding so much functionality back in for serving stateful HTML requests that you may as well just use Laravel. It's also incompatible with many Laravel packages that integrate with Eloquent or provide their own views and routes.
In a nutshell: (if you want raw speed), from fast to slow: * mysqli (not prepared statement) * mysqli (prepared statement) * pdo * mysql with functions (mysqli or pdo) However, the difference of performance usually is close to nil and it depends on the query. &amp;#x200B; &amp;#x200B;
Based on what I've read so far, it sounds like a PHP based CMS is ideal for you. Drupal 8 is great. OOTB forms, content types with easy field management, and it's Views module makes it easy to display the data you've collected in a list. Also comes with OOTB REST endpoints to access that data with third party apps.
Thanks for the link! Looks like the config files aren't quite in the right place, but I managed to get it to run (the yaml one errors, but that's not important): Without opcache.enable_cli=1 (default - and looks similar to your results): benchGeekLabConfJSON I99 P0 [μ Mo]/r: 104.252 103.427 (μs) [μSD μRSD]/r: 1.915μs 1.84% benchGeekLabConfYAML ERROR benchGeekLabConfINI I99 P0 [μ Mo]/r: 117.923 116.681 (μs) [μSD μRSD]/r: 2.470μs 2.09% benchGeekLabConfArr I99 P0 [μ Mo]/r: 132.328 131.331 (μs) [μSD μRSD]/r: 2.797μs 2.11% With opcache.enable_cli=1: benchGeekLabConfJSON I99 P0 [μ Mo]/r: 105.269 104.504 (μs) [μSD μRSD]/r: 2.396μs 2.28% benchGeekLabConfYAML ERROR benchGeekLabConfINI I99 P0 [μ Mo]/r: 119.293 118.074 (μs) [μSD μRSD]/r: 2.925μs 2.45% benchGeekLabConfArr I99 P0 [μ Mo]/r: 76.127 75.466 (μs) [μSD μRSD]/r: 1.536μs 2.02% With opcache.file_cache enabled: benchGeekLabConfJSON I99 P0 [μ Mo]/r: 100.802 99.925 (μs) [μSD μRSD]/r: 1.953μs 1.94% benchGeekLabConfYAML ERROR benchGeekLabConfINI I99 P0 [μ Mo]/r: 115.242 114.020 (μs) [μSD μRSD]/r: 2.464μs 2.14% benchGeekLabConfArr I99 P0 [μ Mo]/r: 70.887 70.131 (μs) [μSD μRSD]/r: 1.823μs 2.57% And yeah, absolutely the times are too small to really matter - it's just the results you posted seemed so strange to me I had to investigate ¯\\\_(ツ)\_/¯
You can have a look at the MicroKernel trait. [https://symfony.com/doc/current/configuration/micro\_kernel\_trait.html](https://symfony.com/doc/current/configuration/micro_kernel_trait.html)
&gt; I've heard of Laravel before, and I've heard it's a fantastic framework. But from what I understand it is best suited for large, complex web apps. In fact it is the opposite, While you could create a small and big project using Laravel but if you want a big project with lots of concurrencies and usage, then the performance of Laravel falls short. So, Laravel works better for small projects with light usage like yours. &amp;#x200B;
Not every project needs a framework guys. This shouldn't even be debatable. Stop regurgitating talking points and use a little common sense. I've seen lots of disasters with projects built from scratch without a framework... But I've also seen just as many shitty clustercodephuck projects using popular and reputable frameworks like Laravel. A framework isn't an automatic spaghetti-free solution to all of your problems. As professional's I'm assuming most of you know already know what I'm talking about. We've all seen it... Huge assemblages of code that superimposes itself over the framework, when in reality the framework already had that functionality built-in but without the programmer's knowledge. For beginners a framework has the potential to break the spaghetti dispenser just as much as runnin' with whatever you can copy and paste from Stack Overflow.
Apart from this statement being mutual exclusive (which is rather normal for a PHP user), what is mysql with functions (mysqli or pdo)?
Framework offers you a sensible structure to follow and a choice of polished modules. That's enough for a reasonable person but you can preach along, I don't mind. 
Mysql's user defined functions are considerably slow than native queries. &amp;#x200B;
This isn't necessarily a "learning project" from what the OP says. It needs to be a real, solid, deliverable that the rest of the company relies on. A framework would go a long way towards that in the maintainability front.
The second word you typed just completely validated my point: "offers" - It OFFERS you a sensible structure to follow. But it doesn't do anyone a lick of good if you stray away from that structure, and could potentially exasperate itself from the resulting superimposition. Beginners are prone to do exactly that. 
That is total bullshit. Getting the database layer, router, session, and many other things right without any experience in how to make them is damn near impossible. A framework gives you a smart interface to each of these and gives you documentation and tutorials on how to do so. Reading how to use laravel from it's docs is a hell of a lot easier than trying to decide if MySQL, mysqli, or pdo is the way to go, what escaping input means, how to map a resultset to an object, etc. You'd be absolutely crazy to not use a prebuilt backend solution as a beginner making a production ready application.
As someone who maintains several Laravel applications that handle peak loads of thousands of stateful requests a second and one which deals with a constant load of tens of thousands of API requests a second from distributed sensor arrays and data consumers, this isn't really true. Unless you're operating at a scale several orders of magnitude larger than most applications deal with, the raw performance of a PHP framework is very rarely going to be your bottleneck and even at those scales the problems aren't intractable. The savings in developer efficiency and application correctness delivered by Laravel and Symfony are worth so much more to applications operating at those kind of scales than the cost of a few more application servers.
Laravel is to php as jQuery is to JavaScript. Lots of (frankly elitests) on here will talk shit about jQuery much in the same way people are talking shit about frameworks on this thread, but frameworks offer you a single, battle tested solution for much of the logic that you will frankly have to rebuild yourself if you're going to do it in straight php. I highly recommend you spend a few hours reading the laravel documentation and trying it's tutorial to properly evaluate it, then ask if you'd rather do all that it offers by hand. Frankly every beginner php legacy project I've had to deal with that didn't use a framework has been a nightmare to figure out. At least when you write in a framework you can give it to the next guy that will have to maintain it (and I promise you, if your project is successful, there will be a next guy and it's going to grow beyond it's original scope) and to be able to simply reference pages of prewritten framework documentation is going to be the difference between this being easy for the next guy and a nightmare to refactor. Please highly consider laravel. It will make it easier, not harder, I promise. This coming from a 12 year phone dev who's worked on hundreds of projects.
Come on, you aren't going to post your tutorial *weekly*, are you?
A non-beginner would know when to choose a framework though, or whether to, for that matter.
&gt; Reading how to use laravel from it's docs is a hell of a lot easier than trying to decide if MySQL, mysqli, or pdo is the way to go That's not really worth a discussion anyways - when in doubt, use PDO. &gt; what escaping input means htmlentities, filter\_input and youre good to go &gt; as a beginner making a production ready application. something like that is rather a red flag anyways and should neither happen, nor will it be a deliverable product unless supervised massively
Explicit casts assume that you mean what you say, you have asked to convert to a type, so it will. Implicit casts assume that if you pass some strange value that doesn't look like the destination type, it might be a mistake, and you would have explicitly converted it otherwise.
Linked to changelog rather than the [release announcement](https://www.php.net/releases/7_3_4.php), as there's not much in it. It does mention that this is a security release, however.
I understand. I have much more experience with front-end than back-end and I know jQuery has been a true savior numerous times. If it's anything like that analogy relationship than definitely I want to use it. I will look into Laravel docs. You've been very helpful. 
I don't know what filter input is but unless you're using prepared statements with pdo you're doing it wrong...
PHPUnit/PHPSpec and PHPStan should be the first things to adopt. After that Zend Framework or Symfony. Doctrine for DB abstraction. Prefer CQRS/ES over ORM. Stay away from Wordpress or Laravel (as far as possible).
Thank you :)
Check if odoo community edition is good enough for your purpose.
There is also \*Zend Expressive\* which is kind of nice :) You can pick your preferred stack (router, DI, template engine or in this case no template engine at all). I am currently using it with Angular and it's really nice :)
&gt;I don't know what filter input is uuh... [https://www.php.net/manual/en/function.filter-input.php](https://www.php.net/manual/en/function.filter-input.php) &amp;#x200B; &gt; using prepared statements with pdo thats kinda the whole point isnt it?
Yes, it would be a useful feature, but it is not essential. Given the circumstances (my lack of experience) it seems smart to stick with essentials if it will save on dev time and reduce security risk. Do you know if there's a way to cut it off completely from internet, so there's no way to access it form outside? At the moment, our local network (LAN and Wifi) is used by all employees for internet access, from their PCs and smartphones, but it's also used by costumers and basically anyone who visits the area and asks for wifi password.
I'm torn between Slim and Laravel. Is it really that much easier to use Slim? Would do you think about Yii?
Nothing important, rows, columns, text, numbers and IDs I guess.
Anthonys PHP Compiler might soon target LLVM, which would then allow to compile it out as WASM: [https://github.com/ircmaxell/php-compiler](https://github.com/ircmaxell/php-compiler)
Imo the PDO API is way cleaner and prepared statements under mysqli are just horrific in comparsion. I would use PDO for sure.
Wordpress is not something I'm considering for this. Why stay away from Laravel? Could you elaborate?
🦀🦀 $11 is not a valid variable name in PHP 🦀🦀 
Jesus christ the comments in here. This person isn't in college trying to expand their knowledge of PHP, they are trying to make a fucking crud, and you guys are arguing over laravel vs symphony. If all you need is a crud, use a crud generator. (https://phpgrid.com/php-crud/) There are hundreds of those, just search, find one that has an admin interface you can tolerate. If you just want the database crud functions to supplement other aspects of the application, then consider using a database framework like medoo (https://medoo.in/) or something else, that will give you a clean readable way to implement your CRUD functions in your code. Gets all the db stuff out of the way. If you are interested in laravel but don't want to spend the time getting up to speed with it, try lumen. It's a stipped down version laravel. https://lumen.laravel.com/ If you don't want to touch code at all, use wordpress and advanced custom fields. You can make pages that will let users add/edit/view records and you can make as many "pages" with those different views as you want. https://advancedcustomfields.com 
Exactly. 
Sorry to go slightly off topic, but sounds like you are trying to make an in-house erp system... Any reason not to go with an of the shelf solution? 
Also never heard before. In 2011 I use ZF 1 from Zend
Also, Not knowing security and developing a webapp that holds customer data is a big no no.
Use Laravel and go get a subscription on https://laracasts.com/. That's all that you need. You're welcome.
I used Slim a lot and now use Laravel for a large project. I wouldn't say Slim is easier. It's just less to learn because it comes with less out of the box (which is the point). If you end up requiring an ORM or Authentication etc. you'd have to integrate them into Slim yourself and than learn about those libraries as well. It's not like you have to read and understand the complete Laravel documentation before using it. It's pretty simple and the basics get you really far.
Check https://laracasts.com/ when you ready to go with Laravel
Expressive is completely different from Zend Framework in a good way, take a look at https://zendframework.github.io/zend-expressive/
hence OP is a beginner and this is automatically a learning project. nobody should ever be handing something serious to a beginner and expecting it not to crash and burn 
https://www.techempower.com/benchmarks/#section=data-r17&amp;test=fortune&amp;l=zik073-1 Phalcon, Silex, Yii2, Slim, Zend Framework Yes, do use a framework - it enforces standards and aligns you with a community. No, do not choose Laravel, the framework benefits do not outweigh the god-awful performance unless your are building massive applications (and no one in their right mind should choose to write a massive application in 2019)
You can try codeigniter if your required going to be above mentioned 
I implemented SSE years ago with PHP 5.4/5.6 and it is still working, but it was a pain to setup. Mod\_php worked well but switching to fastcgi I encountered some really annoying issues, mostly with output buffering. Eventually I made it but I guess there should be better ways, in the modern era of PHP I'd look elsewhere to do this kind of stuff.
Edit: Btw. if you go with Laravel I highly recommend using [Larastan](https://github.com/nunomaduro/larastan).
Here's where we disagree. The situation OP is in already involves a real project. One that needs to be stable and maintainable. Someone else will need to come in and help or take over the project later. This sounds like a use case built for frameworks. Think of the business needs, not this person's education. 
Whether your PCs have internet access isn't really the issue. The webserver is what matters. If your company's firewall has a rule which allows incoming port 80 access to that machine, then your site will be accessible to the world. If it doesn't, then it won't be. Simple. However. As I said, every PC on your LAN is already on the local side of the firewall and, assuming there are no additional LOCAL firewall rules on the web server, any PC on the LAN can access it. Which is probably what you want. But, this means that anyone who manages to get remote access to a PC can also access your web server remotely. And anyone who has admin rights on their PC can do this by installing something like logmein (paid) or teamviewer (free). They could possibly also do it via Windows Remote Desktop, but this requires port 3389 to be open on your corporate firewall for incoming connections, and I sincerely hope that it isn't. (Note that this paragraph is only relevant for PCs that have routeable IP addresses, rather than ones like 10.x.x.x or 192.168.x.x, in which case you're OK). &amp;#x200B;
Yeah. I think a good old view source through the browser would uncover any discrepancy between what is being output and what you think is.
It advocates a lot of bad practices like global state. No proper IoC. Hard to isolate code for Testing. And apps created on top of it usually become unmaintainable monsters. Every framework that claims to provide rad usually leads to pretty awful results .
Well you should'nt! Laravel also have a Micro-Framework called Lumen.
It advocates a lot of bad practices like global state. No proper IoC. Hard to isolate code for Testing. And apps created on top of it usually become unmaintainable monsters. Every framework that claims to provide rad usually leads to pretty awful results .
I mean this non confrontationally - why would you want to transform the inputs when you read them from GET/POST/COOKIE instead of when you put them where they are intended to be stored?
I was going to reply intelligently to each of your comments until I read these: &gt; I honestly can't respect that. &gt; Taylor should be ashamed of himself for putting his ideas and profit over a community You're just woefully ignorant, distasteful and rude. Hundreds of thousands of people make a living using Laravel (me included), and I haven't given a **single** penny to Taylor - ever. I've profited **heavily** from *his* work. You should be ashamed of *yourself* for tearing down someone for open sourcing years and years of work and expanding interest in PHP and the community **globally**. In fact - he's generated so much popularity that he's created thousands and thousands of jobs for people. I guarantee you've done nothing for the PHP community other than complain about other peoples solutions and what they prefer - as this is what you're doing right now. I simply don't want this conversation to continue. I have nothing more to add to this. Peace.
The EXIF fixes are security fixes found via fuzzing.
Hm I'm not sure whether I get your understand your question? &amp;#x200B; with mysqli, you'd need to escape/sanitize so filter\_input/filter\_input\_var &amp; htmlentities &amp; stripslashes and you'll be safe
Because the App will require some additional front-end features that are very specific to the in-house business process. Maybe that could be hacked into a third-party ERP but from my personal experience it is almost always easier to build something myself rather than having to modify someone else's code.
Is performance *really* an issue in case like this? It's a small local lan app that will be used by 5-10 people max. 
Sounds good. Thank You.
Yes, exactly. For better or worse, I will be building this App. If I don't build it, it will never be built. The current infrastructure is so bad and inefficient that this app, even if it comes out as barely OK, will be a huge help. On the plus side, I'm a quick learner and have full support from management to take the time and tools necessary to build it as good as I possibly can. And if a framework will steer or force me in the proper direction, it makes total sense to at least try it out. So, thanks everyone for your helpful input.
Those are very good points. From what I've seen here it makes total sense for me to use a framework. I do wonder though, how come PHP's own documentation, tutorials and guidelines are not as good as those of a framework?
tsk tsk So, then Laravel is fast enough but when it is not it is because PHP is slow. It is not true. In some cases you can double the concurrency without using Laravel. It is not a big deal for a small project but it is a real issue for a big project. &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
The view source shows it in html format instead of php code. And the error I get through chrome debugging is an incorrect MIME. I’m thinking there was some browser updates that are now detecting that setup as malicious (php injection)?
PHP is a really old (yet constantly evolving) software, and only aims to be an interface between a web server and a database server, exposing a bunch of API calls to the server, and a programming language for manipulating data to make those calls. It's designed to be as simple as possible for simple scripting operations. It's history is a lot like javascript - javascript was only really designed for simple scripting operations, like hiding or showing an element when you clicked a button, but as time went on the scope of the projects people wanted to write in these languages kept growing and growing to the point some organization to the code needed to be imposed and some of the commonly written components of the programs written in it (such as the database layer) got standardized into libraries. A framework is just a opinionated collection of what the framework author considered to be the best libraries to handle all the usual operations in a web app. Basically its a matter of PHP separating the language from the structure of the application, the structure is not in the scope of the language, and php itself is designed to be generic enough to solve many different problems which may be totally different from the kind of application you are building in laravel. Kind of like how your computer doesn't come with an operating system - your computer provides the interface, and technically speaking you can write or run any OS you want on it, but it brings some considerable structure and saves you a lot of effort in using your computer to just use windows and do it the windows way - the way that everyone else is also doing it. It's going to make your life easier to build on top of the backs of giants, and in this case, I feel the clear easy way forward is laravel.
I found this fix [https://bugs.php.net/bug.php?id=77660](https://bugs.php.net/bug.php?id=77660) quite amusing... just in case you have 2 billion nested for loops.
&gt;So, then Laravel is fast enough but when it is not it is because PHP is slow. Not what I said. What kind of scale are you dealing with where the choice of framework causes a real, measurable issue that pure performance is worth prioritising over other considerations? While I'm skeptical that you can reliably double concurrency under real world conditions where you can't defer to caching (and not say with a benchmark of a toy app with an unoptimised Laravel install), even if that is the case, I'm unconvinced that's a compelling reason not to choose it for large projects, because scaling PHP for those requests is relatively cheap and you're only talking about the difference between one server or two at best.
I may have that! I'm having random segfaults on my test suite, I'll try to update... 
Today i found a production server running PHP 5.3.10 i have a dream where we can one day be close to the latest release.
You could happily use pretty much any PHP framework to do this. As you have no particular preferences or goals other than learning a framework I'd recommend either Symfony or Laravel as they're the most widely used modern frameworks. If you learn one, picking up the other won't be particularly difficult as the main flow of each isn't drastically different. I'd suggest reading the documentation for both frameworks and seeing which appeals to you more. One advantage to Laravel from a learner's perspective is the excellent, [free video series by Laracasts](https://laracasts.com/series/laravel-from-scratch-2018) that takes you through building an application step by step.
Have you looked at https://github.com/rectorphp/rector? 
My vote is to not use a framework. Figure out how to do it with vanilla php unless you specifically want experience doing it with a framework. If so use Silex, it’s a micro framework 
I see the argument and its merits. Nonetheless, less cyclomatic complexity implies code easier to grok so I wouldn't say it's useless as the number of lines of code. It's a useful metric, but one of many. The idea of Cognitive complexity is appealing, but the answer provided doesn't seem to match the high expectations of the concept. A real cognitive complexity analyzer would be able to assess the difference between: class A; class StaticAnalyzer; class AbstractFactoryVisitorBuilderInterface; ...and similar issues. Of course, the current state of the art in static analysis doesn't allow that (yet). Btw, you shared the same link twice. The link to the paper is [here](https://www.sonarsource.com/docs/CognitiveComplexity.pdf).
I've seen sites running php 4.x in the 2019
*Cries in developer* 
If I was tasked with updating that to PHP 7, I'd rather quit the job.
No, just no Telling someone who's obviously not terribly experienced not to make use of the combined wisdom of more experience people is just asking for a pile of bad, bug-ridden, code I've seen it often enough, it never ends well. &amp;#x200B;
You got a point
I work at a college that still has web servers running on 5.2 and 5.3! I've constantly asks to upgrade, but keep being ignored by upper management. Ya I've given up, just waiting for it to fail now.
I'd say: In the end you're going to use a framework. And it might be just rioght for you: BUT: I'm sure you'll learn some very important things of you just make an example app and try to work through every single point at [OWASP](https://github.com/OWASP/CheatSheetSeries) And my prediction is: After having worked through this in several weeks (yes!) only THEN you will be able to decide which framework (and if and why). 
Yes, it's transpiled (or whatever) into c from zephir. I've written a minor extension myself that I needed for my application in zephir. It was surprisingly easy and the performance gain was worth that minor effort.
Nope. If they are dumb enough to live with that setup, they are dumb enough to accept your $100K quote and 1 year completion time.
Only if I outsource it and just check the git once a week to see the progress. I'd die of boredom.
Did they fix the FPM bug that makes the process kill itself and 503 every site? Because, that would be great.
Why laravel is slow: * because the huge number of classes and files. If you check the composer's autoload, it loads all the classes into a big array, it means that every call loads this array. And repeat, it is per call. You don't need to believe me, the file is here. You could optimize the autoload and you can find the array. More memory usage = less concurrency. * it is because how Laravel works. It has some neat features but they add an extra load to the system, for example injection. And again, you don't need to believe me, this perofmrnace has been clearly documented and identified. While it is possible to fine tune the system (like you say cache but also opcache, optimizing queries and database) but the performance is still not acceptable for some projects, in comparison with other code developed on PHP. And again, you don't need to trust me on this one too, it's easy to find a benchmark on the net, while most are syntetic benchmark but sheesh, Laravel is usually at the bottom of the list. 
Of course it is.
I'm guessing from your answer you don't actually have real world experience with Laravel at scale then? As I explained in my first answer, I do, at quite large scale. I am very familiar with how Laravel out of the box loads classes, but that has no bearing on what a production site looks like, or a significant impact on performance. We extensively profile our applications, because many of them are performance sensitive, particularly the application that consumes large amounts of sensor data thousands of times a second, where we can't cache anything and have to hit a data store on every request. Don't take the opinion of random benchmarks that set up a basic hello world application and compare them, they're almost entirely useless for predicting how an application will fare in real world usage. Laravel comes with a huge number of features enabled by default and even beyond a basic 10 minute optimisation, if you're actually working on a system where the performance of Laravel matters, you can take the time to optimise your hot routes further. &gt;but the performance is still not acceptable for some projects _What_ projects? What kind of scale are you working at where PHP is ideal, but an optimised Laravel is too slow? What's the actual work load and request style that you've found Laravel can't adequately handle? If you have an actual example I'm genuinely interested to hear it. &gt;for example injection Are you suggesting frameworks like Laravel, Symfony, Slim and Silex shouldn't be using dependency injection for performance reasons? 
If I have a string that is an address like "123 Smith St", how do I change it to 123+Smith+St ? &amp;#x200B; I tried str\_replace, trim, explode, preg\_match
I started auditing an agency's custom CMS last week that has branching logic sprinkled throughout to check whether the server is running 4.3 or earlier so it can use `addslashes()` instead of `mysql_real_escape_string()`. The site that was built on the CMS was released early last year at great expense (mid five figures). It's running on a couple of PHP 5.4 servers with cPanel.
/r/phphelp
does `$str = str_replace(' ','+',$str);` not work? 
str\_replace. Use double quotes, not single. Single is literal, double is interpreted. &amp;#x200B; `str_replace("\s", '+', $searchIn);`
Most of my job is spent working on modern code solving interesting problems, but maybe 20% is spent auditing and retrofitting projects that have failed or where the original developers can no longer support them. I often end up with classic early 2000s spaghetti PHP, usually horrendously insecure. I find it deeply satisfying to start refactoring those projects, slowly building a test harness around it, extracting one components at a time, writing custom rectors to automatically refractor multi thousand line files, teasing it into some form of secure, sanely maintainable system.
What bug are you referring to?
Ohhhkay Mr. Zuckerberg 
Ubuntu has now released a patch, so you should be able to apt update / apt upgrade to install it. You should restart apache afterwards.
Just out of curiosity what’s the use case there. 
kinda curious as well
Also intrigued as I’m just learning/working through PDO with MySQL
Never tried that, usually just pass the PDO object into a class constructor. 
A good way for "documenting" this might be filing a bug at bugs.php.net, I believe a good mitigation is forbidding to clone those (which is setting a single flag, maybe also for `pdostatement`), as cloning database handles (even if the default were fixed) leads to weird behavior (since we can't easily clone the stream, which would mean the clones were still linked to the same state)
Generate it with Yii2
you try on 7.3? im gonna run tests on all the 7.x’s for fun and see if i can recreate it. but, still, need to know why youre even trying this to begin with just outta curiousity.
Hey, unholystampofdeath, just a quick heads-up: **curiousity** is actually spelled **curiosity**. You can remember it by **-os- in the middle**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey /u/CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". And your fucking delete function doesn't work. You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
To the people wondering what the use case for this is: as far as I know, there isn't one. The fact that they PDO object was being cloned wasn't intended, it was a by-product of a fast development cycle. I reused a config object that acted as a parameter store to get the PDO object into all the scopes needed, but forgot that the config object attempted to make everything obey scope by cloning objects instead of just returning them.
https://www.reddit.com/r/PHP/comments/b9jaf0/psa_cloning_a_pdo_object_will_produce_a/ek58bym/
https://www.reddit.com/r/PHP/comments/b9jaf0/psa_cloning_a_pdo_object_will_produce_a/ek58bym/
Silex is dead, don’t put effort into learning it for a new project 
https://bugs.php.net/bug.php?id=77849
Dude, you're shit talking a robot. You okay?
I’ve been out of the framework loop for a while. What’s popular right now? Is it still Symfony and Laravel at the top?
It is a bot lol
https://3v4l.org/MRCHQ
Symfony with flex is my personal preference. Its surprisingly fast and light. Its the reason they stopped developing Silex, as the "full" framework was now faster and smaller than the "micro" framework. If you don't want to mess with all of the details of Symfony, but still want a micro framework, you can use the Symfony microkernel trait to make a Symfony micro framework that can scale to the full framework should you need it later: https://symfony.com/doc/current/configuration/micro_kernel_trait.html
its a a shit talking bot that follows the other bot and talks shit. i didnt misspell the word because i didnt know how to spell it, was a typo. so i like the shit talking bot.
Doing counter-intuitive thing work bad. Roger that. 
Oh. I thought he was just mocking the bot. What a world we live in.
It's not about seriousness, it's about readability. When you see ``PHP+Rust+Web`` you know what it means. This just reads ``Elephant+Cancer+Spiderweb``, unless you take a while to think "Oh, right, PHP has something to do with elephants... And web probably means, well web... And the cancer? Maybe it's a crab? Is it some new framework?"
Dude, *you're* shit talking a robot!
&gt;I simply don't want this conversation to continue. What conversation? All of your arguments apply **equally** to wordpress. Are you saying I can't critique wordpress because it has users and is open source? Don't get me wrong here, Laravel is a fantastic product **for certain use cases** and Taylor has done a fantastic job creating it. That is not my issue at all. The issue is that Laravel is sold as a one stop solution to everything, enterprise, rad, whatever, and it is a very closed community - everyone uses forge, eloquent, blade, etc. They do not support e.g. a very mature and useful ORM like doctrine out of the box. It has gotten to the point that rather than admit Doctrine might be better for a lot of cases, people are explaining how they build a mapper on top of their eloquent ORM. If you can think about that for a minute you might see the issue. Or whatever man ... just keep praising laravel cause you don't know any better, and help spread the ignorance.
IIRC, that's not a bug, but a feature. I think when you clone the object, you're not really cloning it but creating a reference to the original element. As a result, you won't be able to use the clone if you closed the original and vice versa.
I'm not saying the clone should work, but "segfault" is never a feature. You throw exceptions when the developer does something they aren't supposed to.
Example (Segmentation fault EXIT CODE: 139) in PHP 5.1.0 - 5.1.3, 5.2.0 - 5.2.17, 5.4.0 - 5.6.40, 7.0.0 - 7.3.3 : [https://3v4l.org/LKZ81](https://3v4l.org/LKZ81) &amp;#x200B;
Actually, I'm pretty sure this is a result of how PDO is implemented and the fact that the connection to the database is a resource. Cloning in PHP will happily clone objects, but it will not clone the resources, as they as references (to something that transcends PHP as a core language).
Actually, I'm pretty sure this is a result of how PDO is implemented and the fact that the connection to the database is a resource. Cloning in PHP will happily clone objects, but it will not clone the resources, as they as references (to something that transcends PHP as a core language). I wouldn't call it a feature, but a natural limitation of PHP and a boundary that a seasoned PHP developer (and probably many other scripting languages) should be aware of. I'm happy for anyone to point out if I'm saying something completely stupid. :)
&gt; I wouldn't call it a feature, but a natural limitation of PHP. No limitation should cause a segmentation fault in a scripting language. It should throw a fatal Error with an informative message. 
No, you're right I think. But attempting to clone a PDO object should throw an exception in my opinion. A segfault should never be an acceptable outcome.
If that is indeed the case then the solution would be to have a clone constructor that would reinitialize the connection as needed. However it is a poor solution. A better way would be to have a named instance manager for database connections and ask it to produce a connection instance as opposed to cloning PDO directly.
Escape the company and never look back
It should
You don't need to rewrite shit to add another &lt;DIV&gt; ontop of the avatar and put whatever effects you want with CSS classes....
**Redirects to MORIOH.COM**
Very clever shit you got there, it would work if I had access to the front-end.
Hey CMB! Just a quick heads-up. It seems all your common misspellings are stolen without permission or attribution from https://en.oxforddictionaries.com/spelling/common-misspellings which is copyrighted by Oxford University Press.
Isn't the way I deploy my php code (storing `my\_script.php` via ftp into `$ftp\_server/www/my\_pages/public/my_script.php`) and accessing it via `http://my_pages.com/my_script.php` already serverless?
I suppose, if you don't (need to) maintain the end point.
How does "for(;;) break 23;" works? That's a break after 23th iteration?
Not OP, but who is allowed to vote is a very important issue. If the people who vote aren't those who will actually have to use PHP for real world applications, then why should they get to vote?
No, it means, break 23 levels. So, if you have a nested loop like this: for ($i = 0; $i &lt; count($a); $i++) { for ($j = 0; $j &lt; count($b); $j++) { break 2; } } The break will exit the both loops. It works with other control structures as well - see https://php.net/break for more information.
No, providing an integer to break means how many levels of nesting should be aborted. Consider these 2 snippets: &amp;#x200B; `for(;;){ for (;;){ break; }}` `for(;;) { for (;;) { break 2; }}` &amp;#x200B; The first will loop forever (only the inner one stops), the second won't (outer loop is stopped).
I assume you've submitted a bug report for this, right? Right?
"Serverless" is such a terrible term. It just doesn't make sense really. Of *course* there's a server executing the code somewhere, it's just not one that's managed by you.
Right, so now you *actually* have inconsistent results as opposed to limit/offset which don't. What if you use UUIDs as PKs? What if most/all of the rows between X and X+10 have been deleted, meaning that there are only a few rows? Or, the situation that I have most often in an app I'm building, the rows have an `active` boolean column, and I need to paginate a certain number of rows that are active. So the query would look something like this: Obviously I'm not using string interpolation it's just as an example. "SELECT * FROM `users` WHERE `active`=1 LIMIT 25 OFFSET {($page_number - 1) * 25}" How might one accomplish this totally legitimate use case without limit/offset?
&gt; Btw, you shared the same link twice. The link to the paper is &gt; here &gt; . Thanks, fixed! &gt; A real cognitive complexity analyzer would be able to assess the difference between: Good idea! If you're able to put it into procedural steps, we could incorporate it to the sniff. 
I use codeless code because I didn't write it 
It doesn't debug at 'compile' time, it debugs on interpretation. With Xdebug, you set breakpoints in the code where you want the interpreter to stop at and then you visit that webpage/force the server to execute that specific php script. From there you can step line-by-line, step into/out of functions/classes, etc. The interpreter knows where the method definition is either through namespacing or direct 'use' or 'require' statements. Those are the two ways a PHP application will 'import' other functions/classes. So when debugging with Xdebug, you're still running the underlying application but Xdebug steps in at specified breakpoints and pauses the interpreter. I.e. if you are debugging a very simple, no framework website running on php and want to debug your index.php file, set a breakpoint in index.php and visit localhost:80/index.php. If you want to debug a more complex app using a router (i.e. a Symfony/Laravel project) and you want to debug the controller IndexController.php, set a breakpoint in the controller and visit the URI that is bound to that route which calls IndexController.php. I don't know WP exactly but I'm pretty sure they just defined those functions within the global scope. WP still uses a lot of globals which means you don't have to use a namespace to find those functions so you see a lot of 'require' statements. The downside obviously being the global namespace is polluted with all these random functions (and all the downsides that come with not using namespaces). Ex. If I have 2 files, one with function fnOne() and the other file with fnTwo(), I can 'require' both of those scripts into a 'main' script and then call them as if they were globals/built ins. I believe that's how WP structures itself. 
Setting a breakpoint is simply utilizing the DBGp interface. When installing/configuring Xdebug, it will come with an interface which will capture your breakpoints and allows you to walk through the code whilst also showing you the current available variables. e.g. on PHPStorm, you set a breakpoint by clicking in the margin between the editor &amp; line numbers. 
Employees, Customers, Work Orders, Billing, Printing, Inventory - sounds more like an ERP system than a selection for a framework. IMO.
this is great! worked like a charm
... Not being able to post comment bodies is a real pain in the ass when we get posts like this one.
It's kinda hilarious, really.
jquery implementation function myPostFunction(){ $.ajax({ type:"POST", url:"/path/to/phpfile.php", data: { data: data }, dataType: "json" success: function(datareturned){ callToOtherFunctionToDoShitWithData(data) } }); } 
Have you heard of our lord and savior, AJAX?
Great. Now the php world can pile on 9 times more unnecessary abstractions, libraries, and frameworks and make that the new standard practice.
My friend and I created a website a few years ago, He did most of the javascript work and I done some of the HTML/PHP coding. &amp;#x200B; Basically I'm trying to update and fully understand how the site works (his javascript sections), Unfortunately he is not available to ask. &amp;#x200B; I can see this code: &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
How can you even steal a list of common misspellings? 
probably you wanted to post in /r/phphelp but missed the button. 
I'm more hoping someone would could break this down so I can work out between the $.post and the localstorage will make more sense so I can update easily.
What about lumen? It's Laravels stripped down micro framework.
use \`explain\` mysql statement to test your query to db, looks like you missing indexes in tables.
1 million is not much so I guess you are missing an index. Keep in mind that if you use query like this &amp;#x200B; \`\`column LIKE %something\`\` &amp;#x200B; i.e. use percentage **before** value, index will not be used. &amp;#x200B;
Hello PHP community, I want to ask you where I can find good resources to learn php. Basically I just enrolled in a PHP boot camp and the courses starts in November, until then I want to learn on my own some PHP and prepare myself for the tests, and be able to take the Zend certification that the boot camp provides. Any advice/resources will be greatly appreciated. Thank you! &amp;#x200B; PS: I'm sorry if this post don't belong here. 
My query is "LIKE %search%", because it is a search query. Anyway to optimize it?
Remove the % on the start of the query. That will do a full table scan always without normal indexes. You could try setting a FULLTEXT index and using those features though : [https://dev.mysql.com/doc/refman/8.0/en/fulltext-search.html](https://dev.mysql.com/doc/refman/8.0/en/fulltext-search.html) 
Get a beginners php book
That's the problem. The solution would be to use full-text search or real search engine; I had very good results with elasticsearch. Anyway the ``LIKE %search%`` can never work, even if indexes can be used. The problem is when you have multiple words; let's say that you are searching for name of person. What happens if user reverses first and last name in search field? Example; your table holds ``Michael Jackson`` but user types ``Jackson Michael``.
Fat free framework (aka F3) would be great for this. Personally i would do such a simple project with an even smaller framework than that though.
There's no other option: [https://phptherightway.com/](https://phptherightway.com/) Read this. Learn it. Experiment with the concepts. Then move on to other resources. Seriously, it will save you a lot of time and your future coworkers a lot of trouble
Find some tutorials that first teach you the basics - variables, if statements, for loops, reading get / post variables, outputting html, functions, mysql database calls. Then read the documentation for the php framework "Laravel" and do its tutorial. These two things together should give you a solid fundamental understanding that should give you a significant head start in your bootcamp. Any questions as you learn, PM me, I'll be happy to answer.
One that has been released after 2015 and covers php7+
Git blame says otherwise 
Laravel is so far from just basic php. It a combination of many concepts that make developing process more convenient (also Zend). Such framework/structures can be applied for other languages too. Reading the php original manual/document is good enough at beginning.
Laravel is so far from just basic php. It a combination of many concepts that make developing process more convenient (also Zend). Such framework/structures can be applied for other languages too. Reading the php original manual/document is good enough at beginning.
You maybe need to start looking into a search engine, like elasticsearch. I've used sphinx in the past but that was 10+ years ago, I'm sure there are better solutions now.
Codecademy, W3schools, and PHP.net. Good luck!
Last month picked up some work on a site for a University that was running on PHP 5.3. Was a major pain. The owners were also complaining about some functionality not working correctly. When we looked at the code the functionality was 'broken' because it never existed. They'd made the site years ago &amp; only just looked at it &amp; realised features they'd paid for were never implemented, also a lot of stuff was flat out broken. Weird project.
Thank you everyone for taking the time helping me find a good path to start learning. As the help come in, I realised that I didn't say some key aspects. First I don't want to spend money on resources such as books, tutorials, etc. The boot camp will provide materials and books when I'll start, so I think I'll waste money. Another aspect that I miss, is that the boot will focus on learning PHP 5.6 and I don't know if is a good thing to learn PHP 7 as may be different one another. &amp;#x200B; Last night, I've installed latest XAMPP and runed my first &lt;?php echo "Hello World"; ?&gt; so today I want to set my thoughts in order, and find good learning resources.
Look into indexing the tables + consider caching queries
Hi netzvolk! Sounds like you might know this, but don't do Long Pulling. That technique is pretty antiquated. What you want are WebSocket solutions and you have a few options. The easiest solution for you will be offloading the technical functionality to a 3rd party. Pusher provides this service and is free to use for up to 100 simultaneous users or 200k messages a day. Before you spend time building your own solution, I'd definitely check their service out: [https://pusher.com/](https://pusher.com/) If you decide you want/need to handle the backend functionality yourself your options are roughly as follows: * You can use ReactPHP and/or its derivatives: * Ratchet is a framework built on top of ReactPHP specifically for WebSockets. Here's a link to their tutorial on building a real-time chat application: [http://socketo.me/docs/hello-world](http://socketo.me/docs/hello-world) * Here's a tutorial someone wrote on building interactive chat using ReactPHP directly: [https://sergeyzhuk.me/2017/06/22/reactphp-chat-server/](https://sergeyzhuk.me/2017/06/22/reactphp-chat-server/) * Here's the official docs for ReactPHP sockets: [https://reactphp.org/socket/](https://reactphp.org/socket/) * Here's the example files for ReactPHP socket usages: [https://github.com/reactphp/socket/tree/master/examples](https://github.com/reactphp/socket/tree/master/examples) * You can use AMP-PHP and/or its derivatives: * Here's AMP's tutorial for building a chat application: [https://amphp.org/getting-started/tcp-chat/](https://amphp.org/getting-started/tcp-chat/) * You can step outside the realm of simple PHP and use Swoole or RoadRunner: * Swoole is a web server written in C which will allow you to use WebSocket connections to clients. It creates a pool of PHP workers that it hands incoming requests to. It utilizes a plugin to integrate with PHP. [https://github.com/swoole/swoole-src](https://github.com/swoole/swoole-src) * RoadRunner is a web server written in Golang, which will also allow you to use WebSocket connections. Similar to Swoole it will create a pool of PHP processes that it hands PHP requests to. Rather than use a plugin, RoadRunner communicates between PHP and Go code using sockets. [https://github.com/spiral/roadrunner](https://github.com/spiral/roadrunner) 
PSR-7 makes integration of middleware much easier. Unit tests mean that I don't have to take your word that everything works - I can verify it works for myself in 30 seconds by running the tests.
One of the tricks that you can do, is to make sure mysql holds all data and indexes in memory. \- Make sure your table is innodb \- Make sure you machine has more RAM than the size of your DB data + indexes. \- In mysql.cnf set the innodb\_buffer\_pool\_size to be 80-90% of the ram on your machine. &amp;#x200B; &amp;#x200B;
SQL is pretty limited for full-text search. It won't scale past a certain amount. You should look into ElasticSearch. I ran into this issue myself a couple years ago; the response time from a beefy mysql server wasn't good enough for my app. ES solved that issue.
Just checked one of my large-ish sites and it has a single database with 8M+ rows over 800+ tables in MySQL (does not include whatever ridiculous amount of data (for me) I'm kicking over to a different system for logging and analytics), which is really small by many measures. It purrs along fine, so you can definitely handle more in a single database. Without knowing more about your app, your queries and your configurations, it's hard to say for sure what would give you the most benefit. In *addition* to the solid tips others have mentioned already, here are some general tips (apologies if some of these are overly obvious to you): \- See whether MySQL is recording any useful information to the slow query log. If you have a large number of custom queries, this might help isolate the ones that are the most problematic. \- Check whether any of your tables need to be optimized. \- Make sure you're taking advantage of caching. \- If you're doing full-text searches, you may want to look at adding separate index table(s) of keywords used solely for search. \- Make sure you're only querying against relevant columns/tables and only returning exactly the field(s) that you need. \- Parse out common words like "the", "and", "an", "but", "because" from your queries. \- If any of your queries only need to return one row, optimize your queries accordingly. \- Be mindful of how many different sorts you're doing at the database level. \- Look at the schema to see if there's opportunity to eliminate unnecessary redundancy or inconsistencies. \- Prune any non-essential data from your database on a regular basis -- like logging entries (depending on whether you use a CMS, too) -- and store that somewhere else. \- Check for configuration issues that would cause connection lag on your database server.
&gt; the boot will focus on learning PHP 5.6 That's a red flag to me. PHP 5.6 has been EOL for 4 months now. Even PHP 7.0 is EOL.
Use a dedicated full text search database like sphinx or manticore, its really easy to setup and blazing fast for full text [http://sphinxsearch.com/](http://sphinxsearch.com/) [https://manticoresearch.com/](https://manticoresearch.com/)
It’s serverless when a server doesn’t need to be running at the time of the request. If you create and endpoint, such as a lambda function, that can still answer requests, but doesn’t require resources if there are no requests, the endpoint is, in the literal sense, serverless. 
Yes dear.
Can you elaborate a bit?
Note that if you remove the leading %, it completely changes what the search does (and probably not what you want).
1 million rows is tiny. You need better indexes or to allocate more ram. Use explain on your queries and add indexes to bring "returned" rows into a better ratio with "evaluated rows".
It might also be a security reason.
Things like `FooBar[]` can't be written as type declarations yet, so that's something.
kinda good point. might just be easier for people to read out of habit. 
Typehints aren't all powerful so for example arrays can still be typehinted like @return string[] - it doesn't matter to the php itself but it matters to the IDE and even some libraries can make use of it. This isn't the only example, there are others like mixed typehint. But it's true that php7.1 and up makes a lot of docblocks obsolete.
No, there's no point in using them anymore. Except in cases where they still add value. I.e: DataObject[]|Collection
This is the only time I bother with them now. If the type can be expressed natively without losing information, do so and skip the docblock.
In addition to what others have said about arrays, some IDEs also support composites such as string|int
I still use it for `@throws` as well, and I like documenting the purpose of my params when they aren't completely obvious. And my IDE generates them automatically when I type `/**{ENTER}` so it's really low cost to do it generally. I just like reading code with doc blocks more than that without it.
PHP 5.6 and 7.0 are already beyond support; they are not receiving bug fixes or security patches. Simply put: they're old. PHP 7.1 should be minimum these days but even that is going to be beyond support before the end of this year. Check out this link for how long the versions are supported: https://www.php.net/supported-versions.php Either way, there are fundamental differences between 5.6 and 7.x (hence the major version bump), and I think 7.x is the minimum to learn, personally.
I have a library where a function returns `$this`. The function is in a trait that gets used in an abstract, but the trait can also be used in other implementations (that's the point of traits). The *actual* restriction within the code that is the returned class must implement DecimalInterface AND NumberInterface. There is no class I can typehint in the code itself that would cover this return correctly. So the docblock looks like this: `@returns $this|DecimalInterface|NumberInterface` That ensures that the IDE always correctly understands the code completion hints it should provide on the return values, without having the function actually return a concrete implementation. The PHP7 return type is defined as *either* DecimalInterface or NumberInterface, depending on which interface the trait fulfills.
A lot of PHP developers think that docblocks exist specifically to help the IDE to understand your code which is actually just a side effect. PHPdocs were inspired by Javadocs for Java. Java has always been a strictly typed language so docblocks would never have been invented for Java for this purpose. It’s actually intended for documenting your code. The intention is that you always add comments to your parameters and return types in docblocks that describe what they do. There is software that can read in your code and produce documentation in pdf of HTML format that describes all your classes and functions as well as what they do and how to use them. It is a system for inline documentation as the name indicates.
Also see https://localheinz.com/blog/2018/05/06/cost-and-value-of-docblocks/. 
Yes! If your docblock isn't adding any value just get rid of it _pleaase_. When you look at a method and it has a docblock you automatically parse it for information. It becomes very frustrating if the docblock doesn't add any and is just there because the author thinks it makes the code look professional. "Ugh, yeah yeah; I know the method receives a string $foo and returns an int. It's right there in the method declaration.." It's one of my biggest pet peeves.
I work on a large old PHP code base. We try to add typehints to new code that we know none of the old stuff paths to. But when we're bolting something into the old stuff (which is the majority of the time) it's much better to use a docblock and avoid the notice that will be thrown by some rando edge case. Also PHP is OK at deciding a type so it doesn't generally cause a problem in new code when it gets handed something unexpected.
/u/kai you mention Apex and how better it is than SAM: is Apex running on AWS Lambda? I am curious, Bref was previously using the serverless framework and I moved to SAM because of its tools to run lambdas locally, but I have to agree it is sometimes painful to work with. I'm curious about your experience with Apex.
r/lostredditors
Can you write the type in code? \`string\`, \`int\`, \`SomeClass\`, \`object\`... Write it in code. &amp;#x200B; &amp;#x200B;
I'm guessing that way back then the IDEs were shit so you needed documentation to look up. You don't really need documentation any more as the IDE just has it inline now, and since the IDE understands the type declarations you don't need the doc block for them either ...
I love PHP devs. 
&gt; is there any point Worse than that, they are code duplication and can be harmful. Not so much in the method, but e.g. if you doc bloc a class property there is no real constraint on it, better to just use constructor + type hints.
I think you misunderstand what documentation is. The original intention of javadocs isn't to indicate the return and argument types but to describe what the arguments are for, what the function does etc. Which the IDE can't generate for you yet.
Can you explain?
Did you read that sub's description?
Yup, I don’t get it brah
Obviously.
Hm... perhaps, but protection from what?
Facepalm. Seriously how could you not know that what you said is far left field that it's in the bleachers? Doctypes have nothing to do with IDEs or code completion. They're intended as meta data for automatically indexing and documenting your code's API, and are also often useld as annotations.
I feel like you think I’m asking a general Reddit question and not one that’s specific to r/php. 
This is a technical subreddit, *not* a help subreddit. The post body is hidden to discourage people with little technical knowledge from posting their questions here. People with a slight understanding of how the internet functions and basic reading comprehension would be able to solve the issue and enter text in their post body within a few seconds of looking at the page.
phpDocumentor is the classic example. https://www.phpdoc.org/
Weird 
And never will be able as long as language is not AOT compiled. Hack's implementation of such typehint actually does absolutely nothing. It's just for cosmetics. Not joking.
Merged the patch for that, and followed up with one for: https://3v4l.org/X95gu I dunno how this stayed under the radar for so long ...
To be fair, even new developers were asking me why I would do this, and I only encountered it through an accidental clone. 
You can't do typed arrays or sum types with type hinting.
Why don't you just use `@return static`?
Can you please elaborate?
Read my comment again. :) How would the **trait** returning static let the IDE know that it is a class that implements both interfaces?
When you have a function accepts a parameter that can be two or more types, you can't typehints, but can use docblocks to simulate it. You could have written an interface to abstract it up (so the said types can inherit it and we typehints the interface), but it's out of the scope for now.
&gt; The intention is that you always add comments to your parameters and return types in docblocks that describe what they do &gt; IDE understands the type declarations you don't need the doc block for them either ...
Because the methods provided by a trait are only used in the context of a class. A trait itself isn't a type. Adding a specific return type to a trait method's docblock is akin to using a child class as a return type for a method defined in the parent. The trait shouldn't be "aware" of how it is used.
Great writeup!
It's a bit bizarre to see that you're getting downvoted for asking a question about /r/PHP in... erhh... /r/PHP. Especially considering there doesn't appear to be a mention of it in the sidebar. For what it's worth, it appears that it's intended to prevent help queries from being posted in the sub. *How? I don't know.*
Sometimes parameters can be multiple types, like if I could accept either an int as a timestamp, or a DateTime object. Also it at least attempts to force people to document their code - if it's right there it's easier to just put down your thought process of what a variable is. I can't tell you how many int $flag's are in my codebase, and you have to jump through 20 different files to figure out what it does.
Thank you for sharing your thoughts. I thought it was a well reasoned argument for when to add or remove them. I also find it interesting and rarely discussed when the value of docblocks relies on the particular programmer. In a large team with many people, maybe one person names their classes, properties, methods and parameters really well and you don't need any explanations. Like the Phabricator code base. But we are not always so lucky and don't always have code review processes where we can enforce it. Especially in legacy code. In such cases I often find strict docblocks and strict pro-docblock policies often help more then they hurt. If only to make the programmer think about something they should thought about in the first place.
A trait that defines public methods should absolutely be aware of what interfaces it satisfies and requires? The main design principle of a trait is that it should be able to be used in any class. That doesn't require that it's unaware of the things it returns. *Every* method should be aware of what it returns, and the methods in these traits are guaranteed to return an object that implements the associated interfaces. Are you confusing the return type with the trait *belonging* to that interface?
backwards compatibility?
Are there any other stream wrapper classes this might happen for?
Its purpose is to control the flow of user input, validation, database fetching, business logic, and rendering views. While yes you can write a single page PHP to deal it all, we do it controller way just to increase its maintainability. What I do usually, (in laravel), my controllers are lean. I take user input, pass it to my services (business logic), and use (fractal) transformers to output it to users when I write API, or render respective view. My controllers knows nothing about business logic. Its purpose is to direct route requests to my main app, process it, and output. 
You da real mvp
If you visit this subreddit on old.reddit.com, then you can fill in a post body, but on new reddit, you can't. I've pinged a mod about it before but they gave a total non-answer.
TJ's Apex is awesome. I love Apex Up especially. Check out the examples. https://github.com/apex/up-examples/tree/master/oss But it doesn't support PHP.
Happen to have a public repo with this approach?
&gt;Doctypes have nothing to do with IDEs or code completion. In a language with no type declarations they have everything to do with IDEs and code completion. Regardless the original intention this is true. &gt;for uses outside of your IDE Such as coffee table books? Rest room reading material? The only time I end up on some API generated documentation it's usually by mistake.
Hehe, no. I have a private repo doing this, and all my work related projects are doing this. Basically it's a few major parts: - Models - Controllers - Transformers (Serializers, league fractal) - Routes - Services Router responsible in calling up controller. Controller receive user inputs and pass it to Services. Service gets user input and validate, analyze, process, I/O, generate back models for controller. Controller then use transformers to transform models into required fields in Json responses. The idea of using (plain PHP) services is that these classes then can be used by console, or anywhere needed this piece of logic. Controllers in this sense is just a glue gluing up every services involved.
I am referring to a trait's documented or hinted return type(s) being a specific class or interface when it returns $this. If a trait returns a known, specific type (i.e. not $this) that is a different matter because it is not affected by where the trait is used. Since a trait is not itself a type, it cannot know the type of $this since that depends on where the it is used. A trait does not satisfy an interface (you cannot specify that a trait implements an interface); the class using the trait satisfies it. For a trait to be truly self contained and reusable, it therefore should not make assumptions about where it used (i.e. the type of $this) by referencing particular classes or the interfaces they implement. In practice, it's not uncommon to see a trait paired with an interface, but even so there is no need to specify the interface in the trait itself. Using `self` as the return type hint (or using static in a doc block) is enough to let IDEs etc understand the actual type when the trait is used by a particular class, and retains the ability for the trait to be reused any class. If a specific interface is type hinted and the trait is then used in a class which does not implement that interface, you introduce the potential for bugs because the IDE will happily autocomplete methods which the class might not have (unless your trait happens to provide all of the interface methods, but since a trait cannot implement an interface you can't enforce that).
The remark is more characteristic of a “dev” than a dev.
That's a very good question, not sure why it's being downovted. Jut don't take the other comment seriously, it's a sure joke. In reality it's quite the opposite - Controller is the most insignificant part in MVC. So your take is rather correct, save it doesn't take a route - that's the job for Router. So Controller is just an interface that allows Model to interact with a certain medium - an HTTP request. But there ae other mediums and that's the whole point. I've got an article, [MVC in simpler terms or the structure of a modern web-application](https://phpdelusions.net/articles/mvc) that could help you to get it right. The reasons web apps are designed in this manner are maintainability and extensibility. There are, basically, two ways to deliver a web app: to fire and forget and to maintain and improve it over time. For the former it doesn't really matter how it's structured. But for the latter it is critically important to plan the architecture the way it will allow a painless improvement and maintenance. And for this, having the whole busintess logic independent from the method it is called is essential. Because your app could be responding via different interfaces: - from a web browser expects an HTML page in return - from a mobile app that expects JSON - from a command line utility that expects plain text response if any - whatever else So the idea is to make Model to embrace everything that your app actually does in regard of data manipulation. And only when we need to convey a request from a web-browser to Model, Controller kicks in. So it does, gets the result and then either calls View or simply returns an HTTP header. This lets us to make les coupled and - most important - less duplicated code. Imagine we need a command line utility to create a user. If the logic is in Controller, we would have to duplicate it in the cli command. But as long as the logic in the Model, we just have to call a corresponding service, either from Controller or Command. Home it makes sense for you 
the tools can do that without the docblocks or the typehints.
I take it now that your idea is right but the phrasing is quite confusing, as it reads like "Controller's purpose is to control the flow of ... database fetching, business logic and ...." which sounds right wrong. May be you could rephrase it a bit.
I separate my applications into controllers, entity models and service classes. I consider controllers to be an abstraction layer between HTTP and the rest of the application. Controllers should deal with HTTP concerns such as redirects, responses, views, sessions and cookies. Those concerns should not be present in any entity models or service classes. In practice most controllers (especially CRUD controllers) are pretty simple. GET handlers will typically load an entity model by ID, assign it to a view and return the view. POST handlers will typically validate the input, load or create an entity model, set or update the fields, save it to the DB, then return a redirect to a GET route. For anything a bit more involved, the controller might offload that logic to a service class (more on this below). For entity models, I prefer to keep them lean. I use Laravel, so my entity models will have relation functions on them. I also add convenience functions like $user-&gt;isAdmin() or $post-&gt;isDraft(). If any entity model function becomes big or needs to call private functions, I abstract that away into a service class. A service class is something that performs a task using the models. For example, in one project I have an OrderPlacer service that takes an order and implements all the logic needed to place it, such as splitting the order into shipments. While this logic could be done in either the controller or Order entity model, it would make that respective class huge and difficult to maintain. Plus separating it from the controller allows the service's logic to be called from other locations such as command line, other routes, or from unit tests. Of course you don't have to do it this way. Everybody seems to have their own preferences for where they place code. But this method works for me. 
But then you won’t have any descriptions alongside your functions, classes, parameters, return types etc. This is the point of docblocks NOT to simply mirror what is in the method signature.
Hey yea thanks :)
I positively love the beginning of your answer, but then it goes rather off the track. "Save it to the DB" is not what one expects from Controller. Really, the areas of responsibility should be respected both ways. As Model should know nothing about cookies, Controller should know nothing of the database as well. One would call it nitpicking but really, it makes all the difference. So let's agree that *Controller pass the user data to Model*, which, in turn, saves it do the db or whatever it pleases to do.
Maybe first thing first you need a backer for you framework, in term of money. Many people don't care about the project if there's no one use it. I also develop my own PHP framework, and I think the really problem is does the framework ever used on deployment especially on big companies etc etc.. Mine my self also deployed on some small to medium size companies, but still many developer that works on my Framework simple fast solution and I must able support them every time, give them insight etc. Laravel, Symphony etc able to grow because it has enterprise support backing them up. &amp;#x200B; You must give something that really shine to make developer want to use your framework, not to push them away. Anyway I appreciate other people try to make a new things in the industries :) \*please even they mock you, don't strike them back, because it will make you seems don't like any suggestion. 
What you're describing is a repository interface. I agree with you in principle, but 99% of projects have a simple relational DB backend and don't need anything as elaborate as a repository interface. They're required for large scale systems with caching layers in front of the DB, but for anything else I find they're overkill.
That's how exactly Laravel taints developers :) 
oh noooooooo, you won't have a description telling you what the max function does!? The world will end soOOOoooOOOoooOOOOn In reality, 90% of the advantage is being able to hop around very quickly using the generated html, looking over the lists of classes and types to get a feel for what's in the codebase, and a birds eye view of the various inheritance relationships. 
It’s definitely plural.
I usually let PHPStorms comments everywhere as I never really thought about that but I guess I'll try to follow the recommendations stated here as it makes comments more consistent, great read !
It's rather a lot more complicated than just streams: https://lxr.room11.org/xref/php-src%40master/ext/pdo/php_pdo_driver.h#434 That's the pdo_dbh_t type, the driver data member is where each driver stores specifics, including a stream perhaps. The rest of the structure is used by pdo to service the object. It's not just that we were not duplicating the driver specifics, but none of that other data too. In the case of pdo_stmt_t only the public members of the object (that's to say zend_object members) ... this just can't work, nor could it ever have worked. If it was just a case of duplicating a stream, we could actually do that ... It's just better if these types are not clonable ... there's obviously no way to implement a clone on the base object that will work for all drivers, if the maintainer of a driver thinks it's really important to support clone, then so be it, but we have to say at bottom it's not and can't be supported. There may be other objects that implement clone in the same half arsed way, but I don't have a list ... there's a feeling that the default position is that an object should be clonable, and I don't really understand that position.
PHP's type system is very crude yet. No array and record specialization, no generics, no unions, no intersections, no subsets. If you want a good type comprehension by your fellow devs and IDEs, I'm afraid you have to use PHPDoc for that. Some even go the other extreme and rely only on PHPDoc and use native typehints sparingly, as they hinder flexibility and performance. When you do that, basically you use PHP as if it was TypeScript.
TypeScript provides no real type constraints (if you choose to ignore the compiler errors). Yet "type" is in the name. The idea you need to enforce types *at runtime* is actually a very niche implementation of types. Of the mainstream scripts I can think of, only PHP does that. TypeScript, Python, Dart, as well as all compiled languages - they will tell you what's wrong at compile/IDE time, runtime code contains no type constraints logic based on typehints.
Are you like 12 or something? I’m not telling you what to do with it I’m telling you what it is intended for. You are correct that you can generate docs without descriptions but docblocks exist specifically so that you CAN provide descriptions. OPs question is about what the purpose of docblocks are now that PHP has native type hinting. The answer is that it has the same purpose it’s always had.
Actually you could make AR to work with php objects and type hints exactly the same as in DM. Also in AR you can have constructor and make sure that `Invoice` always have an `Order`. Difference between AR and DM are that AR persist itself to database. Mostly AR pattern require to make entities to extend from base class when DM entities can be plain PHP objects. In most AR implementations there are no easy or automatic way to use different field name than in database column. In AR you have automatically all columns as properties but in DM you have only those that you mapped. In DM you can map few columns to one object and other to another one. So in my opinion mostly its not that big difference how you use it (maybe except tests). When you want to have php entities different than db table (different properties, table split to few entities etc) you will have a hard time with AR.
&gt; The only time I end up on some API generated documentation it's usually by mistake. In the world of Java it’s used pretty much ubiquitously for documentation and the javadocs tell you pretty much all you ever need to know in a useful consistent format. It doesn’t work as well in PHP for two reasons. a) A lot of PHP devs don’t bother doing it and b) a lot of PHP libraries and frameworks like laravel use magic as part of their interface and that is often hard to describe using docblocks so you still have to go back to writing it up in semistructured markdown files.
At work we are going a simple way. &gt;*Doc blocks can be omitted if they don't provide any additional information.* There has to be a doc block for the following: * return type is `array` so you need to provide a more typesafe hint `YourClass[]` * you need to provide a function comment about "why" you implemented this (not the how, this is obvious through the code) * you need to omit typehint/returntype because of contravariant/covariant is only supported starting with php7.4
Hi! Sorry for the delay, I wanted to answer this correctly (and I'm happy to discuss it further). &gt; If anyone else than Symfony created a HTTP client, I would argue you wouldn't have answered with the same level of questioning. Agreed. &gt; it means Symfony has a reach and people expect high quality packages coming from it. Yes high quality is a criteria, but it's not the one thing. I think the key here is the impact: Symfony has a lot of weight in the community. &gt; But it's also a shame, because it tends to demotivate people trying to innovate. When everyone is asking you to justify every single action you do, you tend to stop because you're tired, especially if you do it for free. Understood, sorry about that. I'll try to be careful about the way I say things. The thing is that it's hard discussing some topics, and this is something I see often: either you say nothing (and avoid any risk to hurt or displease anyone, or even look like a fool), either you speak, but you need to find the right words and formulate it in a constructive way. I want to speak about this topic because I care. And because most developers I am discussing with are unhappy as well (but none of them is saying much). I find it disheartening to see this (given how Symfony is important and used, and how many people work on it - including for free as you said), and my goal is to share this in the hopes that things change somehow. I am not looking to dismiss anyone's work. Now let's try to discuss the actual topic: I agree that it isn't just about Guzzle vs Symfony's new component, or even PSR-18 (which is why I don't think it's worth discussing specifically about this). A few facts: - Symfony left the FIG, and before that wasn't really involved anymore for some time - Symfony reimplemented some projects that existed and were used by the community (Guzzle is another example, but another example that comes to mind is DotEnv) - Symfony Flex changes how Composer, the most standard thing in PHP, works - Flex recipes are controlled by Symfony in a repository (whereas Composer is an open thing) - the PHPUnit bridge highjacks PHPUnit's behavior (again, one of the most standard package in PHP) - some new components are discussed "in private" and announced to the community, where it used to be discussed openly before - (I'm stopping here because you get the point) Now I hope I portrayed these as facts (and I may have some of them wrong). I completely understand that many of these things happened *because of good technical reasons*. But if you look at it from what "it looks like": Symfony seems to be aiming to be a closed ecosystem. Symfony used to be **the** open framework, built upon reusable components and compatible with any PHP library out there. Now it feels like things are changing (note I am talking about a feeling, it may actually not be the case but that's what some people feel). For example some people believe that the next step for Symfony is to reimplement Monolog as a component (and possibly ditch PSR-3), and the next step would be Doctrine. Same goes for API Platform. Personally I think it's possible that this may happen. And things can change, it's fine, but here it seems like it's a whole change of identity. And I think that's why some people feel uncomfortable, and that's why as well it's so hard to voice (because it's intangible). Lately I've been reading [Start with why](https://www.amazon.fr/Start-Why-Leaders-Inspire-Everyone/dp/1591846447) and it explains it very well. Nobody complains about Laravel releasing stuff in a closed ecosystem: that's what Laravel is about. It's part of its identity. Symfony's identity has (from my perception) always been different: more open, more about the community, etc. Maybe it's time to redefine clearly the Symfony identify (and explain that it's changing)? Maybe it's just a communication issue? I don't think it's a technical issue in any case. Anyway as you can see it's not easy putting words on all of this. But to reiterate: I'm talking about how some people feel (to give concrete number it's between 5 to 10 people). And I feel like it's worth talking about it because I care about the Symfony and the PHP community. I hope that helps!
That's why you should not use traits or abstractions... Your code now looks impossible to understand. For me traits can be replaced with simple static methods and abstractions with compositions. 
Because, presumably, the class implements both interfaces. `@return static` basically means: Returns an instance of the class this method is being called on. [Here's an example](https://gist.github.com/AegirLeet/d77dbc97e5b37a1b6ea127f2827d72a8). Copy it into PhpStorm and you'll see it works flawlessly.
oh, sorry! I'm just effective, I didn't realize that giving up effectiveness for rules following was requires in this subreddit. sorry!
What rules? What are you talking about? We are having a discussion about the purpose of docblocks. You are apparently having an argument with yourself about “effectiveness” and “rules”. Maybe if you actually try to follow the argument instead of leaping to stupid sarcastic comments you wouldn’t get so confused.
As a matter, ive never used the docblock like you mention. It should exist in a config file, using comment for this, routing, ormtype whatever is symantic incorrect, like using tables in html for layout
it's "unique" to every weakly typed language, you're not enforcing types at runtime, but you will get bugs if e.g. what you think should be a boolean is actually meant to be an array because your documentation is fucked and your docbloc isn't a real type constraint 
NOOOOOOooooooOOOOOooooooOOOOOOO *has an existential criss because a random redditor made a claim*
&gt;the javadocs tell you pretty much all you ever need to know in a useful consistent format. If it's not obvious from the type and name then sure, documentation is necessary, but it comes at a cost - it has to be maintained and is easy to drift. &gt;A lot of PHP devs don’t bother doing it I will tell you a lot of PHP guys do to much of it.
I guess you haven't worked in a corporate environment
Having properly separated controller should allow you to swap IO channels for your app without touching model layer (business logic). The most basic example would be allowing your http web-app to receive cli commands or reuse its domain object structures to perform predefined actions - like simulating list of events that will recreate/synchronize state or import bulk data. If you have `POST /products` endpoint which adds a product to your online shop via form you could have another one importing products from uploaded csv file. It should be possible to share model between these two endpoints - model shouldn't know or care where these data came from. You don't have to go for this level of separation right from beginning, but you should definitely be aware when this needs to be done. It's not a trivial task if you consider that changes in output format often go in parallel (not only entire http response, but raw body itself). Ps. There are some mentions about controller validation. Think this way: if you change input data source (which requires another controller), will your validation rules change?
What is vanilla php?
[rtfm:](https://www.php.net/spl) # Standard PHP Library (SPL) The Standard PHP Library (SPL) is a collection of interfaces and classes that are meant to solve common problems. No external libraries are needed to build this extension and it is available and compiled by default in PHP 5.0.0. SPL provides a set of standard datastructure, a set of iterators to traverse over objects, a set of interfaces, a set of standard Exceptions, a number of classes to work with files and it provides a set of functions like [spl\_autoload\_register()](https://www.php.net/manual/en/function.spl-autoload-register.php)
I prefer consistency. It feels odd to see a class with some methods commented and without comments while we are saving a few bytes of space. Also, let's say the next code ```php /** * @var UserId */ private $id; ``` This comment is redundant and I agree it adds zero value, or not?. In this case, $id lacks the type, so we could add the type. But also we open the door to a future comment, so you could say this "redundant code" is a step for full documentation, i.e. a TODO documentation. So: It doesn't hurt really: ```php /** * @var UserId */ private $id; ``` Meh: ```php private $id; ``` Nice: ```php /** * @var int UserId It is the primary key of the class. */ private $id; ``` 
plain PHP with no library and framework
thanks
No I agree. I only use docblocks when I need to. Public libraries and APIs are a good example. OP was asking whether there is still any purpose to docblocks and there is, but that doesn’t mean they need to be used arbitrarily.
Use it however you like. I’m telling you the intended purpose.
PHP as a language is made up of a collection of keywords, listed here: https://www.php.net/manual/en/reserved.keywords.php The Standard PHP Library (SPL) is a collection of classes and interfaces that are provided for your convenience when performing common tasks. You don’t have to use SPL and I’m pretty sure you could write your own implementation of any SPL class in vanilla PHP. https://www.php.net/manual/en/intro.spl.php
&gt; existential crisis I’m not sure that means what you think it means
&gt; In a large team with many people, maybe one person names their classes, properties, **methods and parameters really well and you don't need any explanations**. It is not always achieable, For example the function strpos($haystack,$needle) it could return the position, zero (if it's in the first position) or false. It is not obvious so I'm glad that it is documented. 
So. Just “PHP” then. What’s SPL? Got a link?
Thank you. Yes, I have discarded long polling completely at this point. I installed and played with swoole and it works well. I'm probably going to use this or ReactPHP, just deciding between web sockets or TCP sockets at this point. It seems this is the proper way to do it with PHP (web sockets), Swoole seems to outperform even NodeJS so there is that :)
Why y'all downvoting? He's right When is the last time anyone consulted generated php api documentation, and not code completion and symbol lookup through a proper ide?
I work in education training new programmers (and I used to train new codemonkeys as a projec in chief) and it is my experience. &amp;#x200B; Let's say you want to learn to program and you see one of those online course, some of them are quite cheap, udemy is around $17 per 30 hours. What's a bargain!. Then, you paid for the course, download the videos and you start watching it. Now, let's say that the course is great, the teacher knows it's job (most don't) and the topic is worth to learn (for example it's silly to learn PHPNuke). A course is a minefield, you don't know if you get a lemon and it's easy to fool the ranking. But you are lucky and you get a good one. You start watching it and it is what could happen: * The video is hard to follow, the fonts are too small, the video uses a different tool or operating system (MacOS usually), it's uses a different version and such. * You get struct at some point, for example, you skip some step, or the video failed to explain a key part. * Or you don't get some part of the video. &amp;#x200B; But let's say you are lucky and you don't get those problems, some platforms allows some kind of interactivity (you could ask for a help), it increases the costs but the main problem it is not instantly, it takes some time, from an hour, to a day to never. Or sometimes the answer is less than usable. The main problem is you are watching a way-long-movie that it is also boring. What most people do?. It watch the video... 15 minutes then they press the button "forward...", "forward...." and that's it. Instead, a bootcamp has a drop rate of less than 20%, it's a hell of expensive but it's worth. There are other alternatives that are better (such a proper on-site courses, some with a drop rate of %5) . Internship is the holy grail, you learn and you get money for it but most businesses are tired to train new kids (because it's expensive). &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
PHP is a dynamically typed, that's not changing. But TypeScript's "non-constraint constraints" work surprisingly well 
You're kind of coming off as obnoxious. Not sure if English is not your native language, but using the word "vanilla" means that something is "unaltered". And PHP SPL can be googled in one second: https://www.php.net/manual/en/book.spl.php
an abomination
I would also consider doing this: private $userId; Being a lot more explicit with your variable names helps a lot. 
What? How does that discourage specially requests for help? Rather than just... everything?
OP ought to have googled it in one second as well tbh instead of creating a thread "google that for me please"
you do realise this is copied from the [php.net](https://php.net) spl introduction? Can't you have done it yourself?
That's not Laravel per say, that's active record pattern in general though.
You can generate actual documentation from docblocks
Thank you so much for the suggestions and the videos. I'll definitely go through it, it looks very interesting!
Fascinating :-D How long does it usually take to upgrade such projects? If you get enough time it sounds like it could be fun.
I have also thought of doing it without a framework, but doing a project in a way that I know how to do is simple enough, but I'd want to use a framework to build some experience for future projects or making a large scale application one day. Thank you!
Thank you for your suggestion, I failed to mention that I want to also learn how to use a framework for if I would start a larger scale project in the future, or work with others in the future if it would come up, but I appreciate your thoughts!
&gt; Controller receive user inputs and pass it to Services. Service gets user input and validate, analyze, process, I/O, generate back models for controller. Controller then use transformers to transform models into required fields in Json responses. This sounds very much like [Action Domain Responder](http://pmjones.io/adr) -- nicely done.
That is a good point. Everyone should consider making variables: 1. self-speaking \`$k\` to \`$publicKey\` 2. typed \`string $publicKey\` 3. explained \`@param string $publicKey the base64 encoded public key to verify the message\`
There is less server!
Where does the code of this end point work tho? And when it needs to start doing some work, where does the code to start the work go? Is like running your own servers, but turning them off when you don't need them, basically
I'd say strpos is a bad example. Sure, we're kind of stuck with it now since changing the behavior will break all sorts of things, but most languages have found more sane string finding functions. Many return only ints -- position if found, -1 if not. (Java's charAt, for example) If you find yourself creating weird method interfaces like those found in PHP's standard library, you should really take another look and see if there isn't a more sane solution.
https://bugs.php.net/bug.php?id=77430 https://bugs.php.net/bug.php?id=77114
In simplest terms... View (CEO): Dumb code with only display logic. Face of the company. Controller (administrative assistant): Does all the actual work. Gets the view what it needs, handles maintenance tasks. Makes coffee. Model (TPS Report): The data passed from controller to view. Includes cover sheet. In practice, it can get a bit fuzzier. Some things might vary a bit depending on language or framework. Many disagree whether models should be smart (e.g., handling validation and persistence) or dumb (DTO). &amp;#x200B;
I’m gonna venture to say they’ve never worked in any collaborative environment. Enjoy your freelance work, kid. 
And people wonder why this sub is a toxic shithole 
It's worth noting that most "MVC" web frameworks don't use MVC as you would in other programming languages. &amp;#x200B; Web-MVC is kind of a bastardization and the controller ends up doing a lot of work: &amp;#x200B; \- Select the View (template) \- Fetch some data from the model \- Pass the data into the view &amp;#x200B; In MVC as it was originally designed, the view fetches its own data from the model. Here's an article I wrote nearly ten years ago pointing this out: [https://r.je/views-are-not-templates](https://r.je/views-are-not-templates) &amp;#x200B; And here's a bare-bones example of using this approach: [https://github.com/TRPB/ImmutableMVC](https://github.com/TRPB/ImmutableMVC) 
This project is literally unusable because there is no valid LICENSE attached. Claiming that it includes a 3rd party utility (xdebug) merely further muddles the waters (what is the xdebug license, anyway?).
It's a toxic shithole from all the people beating down well-meaning mentors over the years. Like the banning of /u/hopeseekr.
1. make it work 2. make it right 3. make it fast yes, it is ok to skip another steps if you don't need 1. make it work 2. make it dissapear (delete) no code is less code to maintain
The SPL servers its purpose, but it has been largely unmaintained for the last 10+ years and pieces of it have had serious bit rot over the years. Some things, like `spl_autoload()`, `SplFileInfo` and `SplFileObject` are used everywhere (like, composer is built around `spl_autoload()`) and are pretty good. The exceptions are spot on and should be liberally used, particularly `InvalidArgumentException` and `LogicException` (mainly, when bad code would lead to that exception). SPL's `ArrayObject` and `SplObserver` + `SplSubject` are three fucking powerful classes every developer should know, and you can't consider yourself a senior dev unless you've at least mastered all three. Other bits to use are the `Countable`, `Seekable` and `Iterable` interfaces, as a lot of modern PHP code revolves around those. The Iterators are hit and miss when it comes to existing bugs, quirks, and general surprising nastiness. Some are essential to certain domains, like `RecursiveDirectoryIterator` and `ArrayIterator`. The main problems with SPL are that it's [**SUPER SLOW**](http://piotrpasich.com/spl-iterators-against-the-performance/) and in the case of the data types, NO ONE recommends using them! Simple DO NOT USE SPL data types in 2019. They are not trustworthy, full of bugs, memory and CPU intensive, and work very terribly (php segfaults) with large datasets. To [**quote the real experts**](https://medium.com/@rtheunissen/efficient-data-structures-for-php-7-9dda7af674cd) on this matter: &gt; “SPL data structures are horribly designed.” — Anthony Ferrara &gt; “Why can’t we just fix and improve them [SPL data structures]?” &gt; We could, but I believe their design and implementation is so poor that it would be better to replace them with something brand new. — Rudi Theunissen So what to use instead? Well, you want to use the [**`ext-ds` extension**](https://github.com/php-ds/ext-ds), talked about in depth in the above-linked article. 
Thanks for bringing up this concern. Which parts of the [Xdebug license](https://github.com/xdebug/xdebug/blob/master/LICENSE) are actually violated? IMHO all the 6 points are satisfied.
&gt; It's worth noting that most "MVC" web frameworks don't use MVC as you would in other programming languages. This is because "MVC" cannot really exist on the server side; cf. https://github.com/pmjones/adr/blob/master/MVC-MODEL-2.md
It looks like there _are_ valid licenses, but they're located in [app/LICENSE](https://github.com/cyrus-and/fracker/blob/master/app/LICENSE) and [ext/LICENSE](https://github.com/cyrus-and/fracker/blob/master/ext/LICENSE). I don't see anything in the Xdebug license stating that it must be in the "root of the project", so I don't see how there are any violations of it at all (although I am not a lawyer).
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I replied to the moderators, so hope this will be reinstated.
**Citizen!!** It's [**`git praise`**](https://github.com/ansman/git-praise) now. To better promote a blameless culture! Read the totally serious book [**Blameless Continuous Integration: A Small Step Towards Psychological Safety of Agile Teams**](https://books.google.com/books?id=rFbUDgAAQBAJ&amp;pg=PT71&amp;lpg=PT71&amp;dq=%22git%22+%22blameless+culture%22&amp;source=bl&amp;ots=kmvvgpKvyX&amp;sig=ACfU3U2o-dFdNneRLAQmNZLTRLedHf4w0g&amp;hl=en&amp;sa=X&amp;ved=2ahUKEwiqzr7a8LvhAhVFw4MKHSMEBA4Q6AEwBXoECAkQAQ#v=onepage&amp;q=%22git%22%20%22blameless%20culture%22&amp;f=false) right now! Take the pill and use [**`git self-blame`**](https://github.com/JacobEvelyn/git-self-blame) today!
I disagree. MVC can be used as it was intended on the server. &amp;#x200B; In one way it's simpler because you don't need any code to refresh the view. &amp;#x200B; On the other hand it's more complex because you need to restore the state of the model on every request. &amp;#x200B; However, this isn't a killer issue and implementing MVC where the controller update's the model and the view fetches data from the model is trivial. &amp;#x200B; As far as I can tell, MVC is a misnomer that stems from applications evolving to use ORMs and Template engines. People saw the "data layer" and "display layer" with a bit of glue and drew parallels with MVC.
Don't ask questions!!! The same fucks advocating serverless basically want to get in bed with the same people who are promoting "blameless culture", "inclusiveness" and firing people for suggesting Western women don't want to get into IT due to feminine preferences.
Boy, they really got to you, huh?
I find most programming videos useless. You can't edit in place a video, so errors will stay around. I want to cut and past code, since I dont want to type thousands of LOC. I don't want to watch/listen to the 'instructor' bumble around for 30 hours (I paid for course once, and that's what I got.). Also alot of tutorials out there are done by junior programmers that teach the easy, yet completely incorrect way to do things. SOLID principals, security issues, use of outdated methods are just some of the things you will find out there.
So I'm understanding this correctly, Value Objects give junior devs and bad architects enough rope to thoroughly hang themselves, while [DTOs done right](https://github.com/phpexpertsinc/SimpleDTO) do not.
Value Objects give junior devs and bad architects enough rope to thoroughly hang themselves, while [DTOs done right](https://github.com/phpexpertsinc/SimpleDTO) do not.
Value Objects and Models encourage you to hack on data formatting and all sorts of stuff that is not appropriate for a data type, and in clear violation of the Single Responsibility Principle (SRP). Data Transfer Objects really encourage you NOT to do that and to keep the object as simple as practical.
I disagree with your disagreement. ;-) For example: &gt; As far as I can tell, MVC is a misnomer that stems from applications evolving to use ORMs and Template engines. Definitely a misnomer, but one that started back in 1999: &gt; Any reference to MVC on the server side exists only because Sun Microsystems appropriated the components of Model View Controller for their own applications, then subverted the purpose of and collaborations between those components. (For a well-written history of this, see Interactive Application Architecture Patterns, esp. "The Model-View-Controller Pattern for Web Applications.") &gt; &gt; This appropriation and subversion was codified by Sun under the name "Model 2" and later solidified by Struts. Server-side developers now equate "Model 2" with "MVC" on the server side as a result, even though any connection between the two is misleading at best and entirely unfounded at worst. From https://github.com/pmjones/adr/blob/master/MVC-MODEL-2.md#model-2 , which includes a link to the original source material.
We're actually in agreement. People were calling something "MVC" that was not MVC in both Java and PHP. Model 2 was never intended to be MVC. The specification that introduced Model 2 ( [http://www.kirkdorffer.com/jspspecs/jsp092.html#model](http://www.kirkdorffer.com/jspspecs/jsp092.html#model) ) never even mentions MVC &amp;#x200B; &amp;#x200B;
Union types ```php /** * @return string|string[] */ ```
Excellent! Does that mean that, somehow, one could transform the slowest parts of a framework to WASM by just compiling them?
More or less all internal defined classes have the risk. Many have special handlers, sometimes there is an oversight and nobody tried cloning yet (or didn't file a bug ...)
My current project is like that. The code looked like it had bit rotted over the course of 10+ years, via 4 or 5 know-nothing teams. Nope! 2 1/2 years old by the same 4 devs, all going around saying how they have 10+ years experience and are "experts". 8,000 line god classes. I saw a FIFTY TWO `$var1 = $var2 = $var ...` chain just so they could pump them all into the globals namespace... Really, PhpStorm crashed and burned with one class, 13,552 lines, with a 1,257 line `__construct()`, and `phpstan` reports over 110,000 problems, with that one file, on level 3 :o
Hey! That's the bug that prevents me from deploy 7.3 on Google Cloud! 
Very much agree with this article. I am currently writing a custom PHPCS sniffs that detect these useless PHPDocs.
Great idea, but why are you have 3rd party project comitted in your repo (xdebug) ? Why when there is official repo https://github.com/xdebug/xdebug
These days we need a library for DTOs? Isodd anyone?
Sorry never go on this count.... Still have it installed and read something on it all the time. Awesome job
??? no idea what you're saying, comparing typescript to js is like comparing hacklang to php
Could someone explain why this is false, guessing from the downvotes? I have no clue what "AOT compiled" means, will look it up when i have time to do so. 
Because people with a quarter of a functioning brain would see the "Use subreddit style" checkbox and uncheck it, knowing the only way to hide an input field would be with custom CSS.
Flashing a message? &amp;#x200B; If you're talking about posting a message for the client, you are looking at the wrong language. &amp;#x200B; Try javascript, or just plain old HTML/CSS.
This isn't bringing anything to the discussion.
Try “connect-flash” but as stated, it’s an ExpressJS library. PHP won’t accomplish what you’re looking for 
"serverless" means that you don't manage the servers. Maybe we can get past this, this topic has been beaten to death and it's probably safe to say nobody actually believes that there are no servers involved.
No-one can, because I'm not wrong, people just feel that it "might" be wrong because they don't like the "assumption", although it's just basic computer science. So let me get into technical details why it's impossible: AOT means ahead of time compiled. Term came into use since just in time compilers became prevalent to differentiate how the program is compiled (which means that they are compiled at runtime just before code is executed. AOT allows the program to check types before it runs therefor it can ensure that types are actually correct. These languages will not allow you to compile the code if you try to push into array anything which doesn't comply with the type you specify before it even runs. Now PHP is interpreted language. The type checks happen at runtime. Meaning program doesn't know what the actual types of the values being processed are. It has to check those as the program runs. Now while it doesn't provide huge overhead for return types, scalar types and custom types (classes), for collections is whole different story. Like how the program will know that first 20 elements are correct but 21 isn't? For how long it needs to keep checking the elements? What if 2001 is the wrong one? what if 100 005 is the wrong one? Catch the drift? Add infinitum. Hack has supposed collection type. Well, it might come as a surprise, but it's just cosmetic type hint. It does absolutely nothing. And before we get into more details, Rasmus Lendroff explained this in PHP CE conference answering the very same question about Type\[\]. 
or I'm better than you and you don't even understand why.
I use Toastr for that. It's on the front-end though, so not PHP Links https://codeseven.github.io/toastr/demo.html https://codeseven.github.io/toastr/ 
Is this a bit like xhprof?
Hey that’s awesome to hear. I was actually just finishing up some new features. I plan to release a new version in the next few days. And new languages and snippets hope those will keep you interested even longer. Cheers! :D
I wonder why "real" MVC apps are like Big Foot and no one can provide anything beyond low level descriptions of them. Some many people dog Laravel and Symfony, as bastardizations, but never show a real world examples. You would think ***somebody*** in the world would have a git repository showing a simple CRUD that uses their version of MVC.
Strange thing is that my Windows PHP build didn't have opcache included. =\\
Spoken like a true master
You have to ensure that the XDebug license header is in every single source code file of it. And you have to mention the XDebug copyright in the README of the project.
Think of it this way: the controller is the project manager
May I asked you how many years ago was this?
I have just published the next tutorial of my OOP tutorial series, Namespaces in PHP. &amp;#x200B; This tutorial is for beginners where I try to let them understand most of the concepts using examples and explanations. Also, I have tried to cover everything about Namespaces in PHP. (Actually, not everything, but everything that we need to learn about namespaces when developing PHP Projects) # Did I miss something? If I have missed something or if you have any suggestion on my tutorial, please let me know. # Going to downvote? I won't stop you. But, it would really be happy if you could tell me the reason for downvoting. &amp;#x200B; Thank you very much.
I upvotes. Good job 
It might be good if you use something like highlight.js to highlight the code to make it more readable.
Thank you very much, doodooz7
I wanna say like... 2000something.
"use as" section makes no sense. And it's a very common problem. Basically there are two kinds of people, ones who do care and ones who don't. Take, for example, a translation (of a book or a movie). You can always tell a bad translation if a dialogue makes no sense for you. Because a translator did it mechanically, translating separate words but losing the meaning. They should have made a gist of the dialogue first, understand it, consult some sources if needed. And only then write it in the new language retaining the meaning. When writing a tutorial and coming to the part that you don't understand, you must stop. And do a research. Because it's a tutorial. You undertook the job to explain things to people. So you should explain. Not just replicate the manual page. I've seen a shitload of tutorials that say contradicting things the way you did here: "There is a feature that you could use this way but really you shouldn't. Next chapter". WAT? *Which way it should be used then?* So please get back to your tutorial and do a sanity check, does every part make sense for you? And do a research if not. 
Thank you for your feedback. I agree with you. "use as" section has some less-explained things. And, some doesn't make sense for a beginner. What I noticed is: * I should explain what is importing * I should say that it imports a namespace or class to the current scope * And, more explanation will suit. If you have more than these things please let me know. I'm working on this to fix the issues.
Tl;dr: use same folder structure for namespaces, faux `includes` folder. If you want to use a class that's in a different namespace (even one level up) you need to add a backslash when you use. &amp;#x200B; * if your class has this path: `includes/foo/bar/Baz.php`, then the namespace is `foo\bar` * if in the above example you want to use a class defined in `includes/bar/baz/Foo.php` you add this to your Baz.php file: `use \bar\baz\Foo`. Then in your Baz.php you just need to use `new Foo` * If for some reason you need an alias to the used class, you can use this in your Baz.php file: `use \bar\baz\Foo as FooBar`. Now, in your Baz.php file you can use `new FooBar`
I like the design, content and explanations. Thank you
As someone who knows PHP very well, your explanations look correct. However when I go to read this imagining the mindset of someone who is learning, it doesn't make much sense. You show *how* to use thing in context, but not *what* they are, *why* they should be used or *when* they should be used. It's very likely anyone who tries to learn using this information will understand almost nothing from it.
The main function of a controller in the MVC pattern is to separate the part of your code that renders the page (that would go in the view) from the part that processes and prepares data. Imagine you have a page, like this one on reddit, that does things like grab the post, comments and their votes from the database, as well as your username, the shortlink, figures out whether or not you're subscribed to the subreddit, renders a comment add box, calculates the upvote percentage... etc, etc. If you did this in a procedural style, you would output some HTML to start the page, then make those database calls, formats and calculations when you come to them on the page (or make them beforehand in functions at the top of the page). This shoves a bunch of logic that does different things together in one file, makes it harder for say, a designer to edit the design without breaking code and makes it harder to handle errors when they occur. In MVC style all that data as well as the checks to see if you're logged in, allowed to post, etc. are prepared, formatted and calculated in the Controller, then saved as a few variables. When it's all ready to go, the Controller sends that data to the view, which is generally a simple template with places to output that data. If there's an error, the Controller can simply use a different view for errors that any other Controller can use. Doing it that way has solved all the problems from the procedural style and prevented writing a bunch of extra code, like error page outputs you'd otherwise have to make on every single type of page. Now the Model is responsible for the actual Database interaction. So in the Controller, instead of writing a query to the database for say, all of the comments - you'd just have a Thread model class loaded where you can do something like `$comments = Thread::get('b9zol0')-&gt;comments; ` and that would make the Model run the proper query to get all comments for the thread with that ID - this way if you have another page you need to get thread comments on - like a mobile view or admin panel, you don't need to write the same query again, or copy and paste stuff around, you just call that class function.
I'm not comparing TypeScript to JS. I'm comparing TypeScript to PHP and JS runtime to the Zend runtime. Long story short, enforcing types at runtime is very rare. And it's honestly not as important as you may think.
Laravel calls it like that and it's sent through session https://laravel.com/docs/5.8/session#flash-data
I agree on your feedback. That aside, I'm curious, how do you use "as"? I have some libraries of functions I write as static classes, where the default name is long and descriptive to avoid confusion, but I may shorten it in use, for example: use Foo\Bar\Baz\StringUtils as str; $x = str::uppercase($y); I find this is almost exclusively only necessary for static classes and maybe sometimes constants. Never regular classes as the places of instantiation are typically few, and never for interfaces, because they typically sit on "public" parts of the code (arguments, return types) and so they shouldn't be confusing when quickly referenced from another file.
Oh, I forgot. Aliases are also useful in the rare cases when you have a name conflict (same class name, different name space).
Soo you came here to tell us you have no idea what we're talking/reading about?
Thanks! Because I need to apply some changes to the original repo, with Git submodules I would have to fork Xdebug to yet another repo and add a submodule for it. What I do instead is to use Git subtree so to have a single repository for Fracker.
why would you compare typescript to php? why not compare css to assembler as well? &gt;Long story short, enforcing types at runtime is very rare. It's what happens in any language that is not statically typed, e.g. python, php, and js. Probably 3 of the most common languages in use today. &gt;Which leads to the conclusion it's not as important as you may feel. no idea what you're talking about
You should post this is /r/phphelp. But you can easily do this with a simple session variable. Just unset it after retrieving it.
I have a question. I never found a good tutorial on namespaces and essentially learned them on my own by trial and error. I have a psr4 autoloader where I supply a namespace and path to the namespace. Was it a bad move to shorten the namespace to not match the dir structure? For example, I have a ActiveRecord class in application/classes/libraries/orm, but it is referfed to as simply /libraries/orm.
Thanks for helping !
&gt; why would you compare typescript to php? why not compare css to assembler as well? I can't believe you still don't get it... &gt; It's what happens in any language that is not statically typed, e.g. python, php, and js. Probably 3 of the most common languages in use today. JS and Python have *no* runtime enforced typehints. &gt; no idea what you're talking about Yeah I can see that. Relax, and maybe move on, some things you'll never understand.
Stop just stop.
Why tho.
Interesting! Was there anything in the PHP code you had to modify to get it working?
The code is not mine ‏ ‎@calvin_baart: https://twitter.com/calvin_baart/status/1114809748547936257?s=09
Cool, pls continue 
Thanks, PicuButa
I'll keep that on my mind
Dear Reddit community, Thank you for teaching me that I haven't written that for a beginner. I'll retry to make it beginner friendly. You are great support for me to improve!
Has Science Gone Too Far?
I think it would make more sense (if possible) to display a notice above the form, rather than hide the post body field. It feels like every day there's a new help post where the body is in a comment, so I don't think it's been very effective at keeping those kinds of posts out of this board.
Actually tho, for some people stuff like this can be cool. Maybe it's just not for you and that's totally fine. In my case I used to feel the same way, but now I'm in a company that heavily relies on Microsoft. So since I am more familiar with PHP I still build little tools for myself in the tools I know. One particular tool I built has gotten attention from my leadership, but IT won't deploy PHP for me. So since the app is based on laravel I could potentially take a similar approach used here and allow my tool to be accesable by others in my department and IT will be happier deploying an "ASP.Net" app instead of my PHP.
Stop telling people how they should have fun or spend their time.
It's stylish to hate on PHP. But it gets shit done. 
I saw a lot of people hating PHP, personnaly i really like php ! I prefer PHP than java for example (a lot because of the syntax)
Most of the hate for PHP comes from people who have used PHP 3. And you can't really compare that to PHP 7.
Run away run away.
Stop being wrong.
Documentation. You must document all public API methods and have use case examples that clearly state what the project is intended for. Next, testing. You don't need 100% coverage but if its a small library that's not hard. The tests are another great place for people to see example use cases. &amp;#x200B; That's pretty much what I look at, as well as how long ago was the last commit, if its over a year its probably dead, if its been a month and issues are piling up, then its probably on the way out. Also communicate with your people who are creating issues, don't just fade away.
You got to love those 20 year grudges
I advise to write down everything to [readme.md](https://readme.md) file to make it clear what the package is and how it can be used. And also describe how it can be installed at a really low level like "CD to your project route", composer require command, etc.. It's important to you because if your package is worthy but isn't documented well you will get a lot of time-consuming questions.
How would I test in this case that can be shown?