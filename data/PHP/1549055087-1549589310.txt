The trend/fashion seems to be to run php-fpm along with either Apache or nginx, but mod_php remains a fine, proven, way running PHP that's still in wide use. The one thing to consider with mod_php is you're stuck with Apache's "prefork" Multi Process Manager (MPM). While the performance of PHP itself is mostly a wash between PHP-FPM and mod_php, Apache can serve _static_ files much better under load with its worker MPM or event MPM. Running php-fpm with Apache would mean you can have apache setup with the newer/better MPMs. I don't think you can setup mod_php (with prefork MPM) and still serve static files from the same server with the better MPM. Please "come at me" if I'm wrong, because I'd love to know. The usual counter argument to this is by the time you're dealing with that sort of load you're using a CDN for your static assets. There's no one right clear answer -- good luck with whatever approach you take!
Not even looking at the FIG getting votes, this is an utter shit show and possible power grab by Zeev. 
Will there be a recording of the talk afterwards? Even behind a paywall?
Active record is one of those tricks that it's fancy to use but, sooner or later, it bites you back. 
One of my favorite advantages of PHP-FPM over mod\_php is that PHP-FPM allows running the php process under the user related to the request. In a multi-client environment that allows you to not have to worry about making user upload directories, cache directories, etc. writable by apache. Since they're running as the user that owns them to begin with, files created by PHP are owned by that user rather than apache.
You can always sprinkle it with webmozart/assert "allIsInstanceOf()".
Fedora ships with Apache 2.4 and `php-fpm` (not `mod_php`). I'm hearing more about `php-fpm` than `mod_php`, because it's the same config as NGIGX (which can't run `mod_php`). As for Apache vs NGINX I haven't seen a real compelling reason to switch to NGINX. The config files aren't as clean, and Apache "Just Works (TM)" and is default on most Linux distros. Either way I'd go with whatever the default on your Linux distro is. Unless you have real heavy load, or a specific use case go with whatever works out of the box on your distro.
yup - because google and more specifically stackoverflow
The regex thing.
I'm not sure why you're highlighting this change in particular -- this is part of a large series of removals of deprecated functionality in PHP 8. Here is the full list of everything that was dropped: https://github.com/php/php-src/blob/master/UPGRADING#L20
Neat tool! I myself, have never understood the reason for project generators, though. That being said, what was your reason to make this one?
Nice! This package looks like it could be quite cool if I get into monorepos again: [https://github.com/symplify/monorepobuilder](https://github.com/symplify/monorepobuilder) Bonus points that it is using my [git-subsplit.sh](https://github.com/Symplify/MonorepoBuilder/blob/master/packages/Split/bash/subsplit.sh)! Love seeing that pop up in random places. :) I'd suggest taking a look at [splitsh/lite](https://github.com/splitsh/lite) as an alternative (or outright replacement) if you ever run into issues with git-subsplit, tho. It is more efficient and way faster for larger repositories at the scale of Laravel's Illuminate components or Zend Framework 2 components. Just know it comes at the expense of adding a golang dependency.
What are you referring to?
Thanks, I'll look into it. One thing that I'm not excited about right off the bat is that .phpstorm.meta.php is a separate file. PHP type hints and phpdocs are nice because they're right in front of you when you're refactoring the code and it's harder to forget to update them.
Those who don't know that phpstorm randomly freezes on macs don't use php storm on macs. Sarcasm aside, the thing locks up a lot, and its random. Seems like it goes on an index spree sometimes even though i blocked out a lot of files so they arn't included. 
The images are broken.
I read through all the changes and i think it's awesome. They are cleaning house with PHP 8.
At least over 80k
Ah, this: https://github.com/rectorphp/rector/blob/master/docs/AllRectorsOverview.md#regexdashescaperector
I used it for few weeks and I can't complain. It helped me to remove over 80 lines of useless comments in code. If you don't like, just delete it.
&gt;&gt;&gt; The 'salt' option of password_hash() is no longer supported. If the 'salt' option is used a warning is generated, the provided salt is ignored, and a generated salt is used instead. This might cause some issues with legacy code that still manages salts independently. But I guess we have a few years to prepare. 
!Remindme in 3 days
Your script works great! :) I also tried splish/lite many year ago, when I was exploring options to automate splits, but since it uses go, it's a *no-go* :) for composer package. 
&gt; I am learning Laravel 🤔 Ah well, everyone starts somewhere ;) Interesting the hate feedback of Eloquent. Sure, the pattern it follows may not be the best. I've been using it in two mid-sizes projects (one Laravel, one where I pulled in illuminate/database) and I've to say in both cases it gives me a productive environment with not much to ask for. Sure, it takes to learn what the difference between `-&gt;relation` and `-&gt;relation()` is or figure out upfront when you are hovering over `n+1` problems and should have eager loaded the relationship you're going to need in the loop. Yet, I've seen these problems crop up everywhere, with or without framework. Eloquent together with ide-helper is quite a productive thing I've to say.
That's why it's backwards incompatible :)
If you have the cash to splash, LiteSpeed Web Server with LSAPI is the fastest PHP processing you can get at the moment (roughly a 1.5x to 2.0x speed increase from NGINX with PHP-FPM), and the webserver is pretty darn good too. But it is a paid for enterprise piece of software, if it's out of your budget stick with NGINX and PHP-FPM as that's the second best out there and it's completely free. You can also get mod\_lsapi, but this requires your server to be running CloudLinux (as mod\_lsapi is part of the CloudLinux environment).
!Remindme 3 days
I've only ever seen Apache fuck up for no reason, mysteriously cache things it should have no business caching and be a total shit to write configs for. Nginx is, once you remember to check your PHP www pool settings, very easy to get going. Works give with cert bot too. Never looked back. 
!RemindMe 60h
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
!Remindme 58 hours
Probably because the original article was from Okta: [https://developer.okta.com/blog/2019/01/15/crud-app-laravel-vue](https://developer.okta.com/blog/2019/01/15/crud-app-laravel-vue)
&gt; the exact same application on Apache2 was responding in closer to 40ms on average Was this with or without the event MPM?
Thanks but yesterday I have already done what you have suggested. Unfortunately the site was poorly written and I have no clue how the site gets the job id# from the fetch of the javascript calls. If I disabled the javascript on Chrome, it stuck on the same page which I have tried to run using cURL request.
Oh thanks, I will try the chrome-php over this weekend. I actually have also tried to solve this problem by using phantomjs but no luck with that.
It’s hard to give better help without being able to see it :/ You could additionally try using the network tools of your browser to see if it’s making any AJAX calls to pull the ID. Presumably at least it’s using the aid somewhere in the code, and you can use the AJAX request that it does using the ID to figure out where in the code you might find said ID. Good luck, at least!
Thanks, will try it tonight. I thought it would be an easy task to use cURL to just submit a form automatically and fetch the response data from the server for further processing using PHP, but unfortunately it is not that easy if the site renders the response data using JavaScript and AJAX.
Thank you.
!Remindme 57 hours
&gt; I've not seen any (compelling) reason to change. Performance isn't a compelling reason?
Uh, is there a specific reason to not go to 7.3? 
I hope you're right, but we'll see. These cancer ridden elder sites have to die. Software isn't a goddamned Appliance, everything eventually needs to be supported with an upgrade.
mod_php breaks down in highly concurrent environments with deep directory structures and open_basedir enabled. Each request has to lstat() back to / unless the entire app is cached in OPCache. Those lstats add up to quite a bit of system time.
I’ve used mod_php with Event no problems. 5 had issues with threading but 7 is reasonably good with it. FPM is the way to go though especially since you need open_basedir or some security policy for it to work in multi-tenant environments.
Where are you going to store the key?
here all possible encryption function provided by php [http://php.net/manual/en/function.mcrypt-encrypt.php](http://php.net/manual/en/function.mcrypt-encrypt.php)
Don't use mcrypt. Use openssl.
Is a PHP 7.5 or 7.6 likely to happen?
On one hand, I resent this removal, because the SPL alternative is slower. On the other hand, the new preload feature in 5.4 eliminates most autoload calls in a given request. So, turned out fine in the end.
I think the most we'll get to is 7.5, then it'll be full steam ahead to 8.0
phpinfo() or php -i shows you what folders php looks in both for inis and extensions
&gt; mod_php remains a fine, proven, way running PHP [We do not recommend using a threaded MPM in production with Apache 2.](http://php.net/manual/en/install.unix.apache2.php) &gt; that's still in wide use [Since Fedora 27, mod_php ZTS (multi-threaded) is still provided, but disabled, so FastCGI is now used by default.](https://blog.remirepo.net/post/2017/11/17/Fedora-27-changes-in-http-and-php) We do not recommend using a threaded MPM in production with Apache 2. Go figure.
Use https://github.com/paragonie/halite
September 23rd, 2021, release date for [\#PHP](https://twitter.com/hashtag/PHP?src=hash) 8. predicts it! The release of PHP 8.0 is not yet scheduled, but as it is a major leap it will take some years. From now there is no details of the features either, but the schedule is estimated to be years away. Some speculation sets the release of PHP 8.0.0 to be in September 2021:
Just a warning: Many of the Nginx fans don’t know what they are doing. They compare nginx (which doesn’t support .htaccess files) with Apache with .htaccess support enabled. Before you guys start to “benchmark” stuff, please be sure to set “AllowOverride none” in the Apache config, and when using php-fpm switch to the event mpm instead of the default.
Some of the discussions on externals.io were more about skipping 7.4 and immediately going to 8.0 (which is not going to happen since 7.4 is already branched, I think). If I'm not mistaken though the current plan is to release 7.4 with a bunch deprecations as the last 7.x version. 
Take care! 
Nope, the release schedule is already decided in that regard: There will be a PHP 7.4 roughly Dec 2019 and PHP 8.0 will be next, roughly Dec 2020 (but that one might be pushed back, depending on how large the release will be). Possibly the PHP 7.4 release will again receive extended support similar to PHP 5.6, but this hasn't been discussed yet.
It doesn't matter if you are still an employee in an organization. Because whatever the language the system has already been deployed, you need to stay with it, unless you have the ability to rewrite everything in your favourite language and be able to present that to the management. Good luck to your move.
Nginx is great for things like static files, js, css, but so are Content Delivery Networks. Apache is a great battle-tested http server as well, and offers great security/performance for things like php scripting, which nginx offers less advantage toward. Nginx is really efficient with proxying and load-balancing. But for the majority of cases, the question is over-engineering. Bottlenecks have to be continuously found and adjusted. php is moving in a java-like direction, in my opinion. Many configuration settings, like ram caching and containerization, and virtual run times, are going to have more impact on performance than your choice of http server. Minimalist approaches tend to work well a lot of the time. 
To where? 
&gt; and in this subreddit for 4 years... Joined date - 01 Jan 2018. Seems legit.
&gt;I don't **see** a future in this language. Can you google: "optometrist near me"? 😂 
Regardless of which you choose, one point is worth making: If you have a website up and running using one or the other it is very rarely a worthwhile use of your time switching from apache to nginx or visa versa. 
i'm on the same boat. developed so many large applications with apache/php/mysql and they're all rock solid still.. now i'm actively developing a rather large business app with php/apache/mysql and everything just works as expected.. i love new stuffs even nginx but i stick with what has worked marvelously over the years &amp;#x200B;
what an ego.
Quite a lot of garbage removed / deprecated. That's good. &gt; gzgetss() has been removed. Damn, how am I supposed to make fun of it now?! &amp;#x200B;
Apache gave my website lots of memory limit cap errors (coz i was on a shared hosting) when the hosting company switched to nginx wow, things were much faaaaster.. there are more reasons for nginx too.. but unless you need those reasons, i rather stick w/ what i know best and has worked for over a decade. :) specially since most my web applications run on dedicated machines (not shared hosts) that said, if i develop a huge application and expect thousands of simultaneous connections, i might just try and move it to nginx.. i think that's what it's really good for. &amp;#x200B;
Recruiters asking for 5 years of PHP 8 experience has started too. 
Some new developers think that they could pick the language (including version), platform and database but things are different, especially in a corporate business where the architect/CTO decided for us (and usually he picked a bad/outdated decision). It's different to work for a startup because you have the freedom to pick the language and platform. 
Although no doubt Tony Marston will be on the mailing list complaining about backwards compatibility breaks, I'm happy that these kinds of things get removed and the language gets tidied up. With two ways of achieving exactly the same thing it's confusing for new developers trying to learn. I still occasionally get a university student ask why some code they found online doesn't work and when I look it's using mysql\_connect(). At least if the code doesn't execute at all they know there is an issue and don't go off building projects using outdated approaches.
Or maybe he wants to pick a better job, so the question should be: which framework could help me to land a new job?. 
Caddy server, all the way: [https://caddyserver.com/download](https://caddyserver.com/download) &amp;#x200B;
[http://php.net/manual/en/function.hash-hmac.php](http://php.net/manual/en/function.hash-hmac.php) [https://mdn.github.io/dom-examples/web-crypto/sign-verify/index.html](https://mdn.github.io/dom-examples/web-crypto/sign-verify/index.html)
Then yes
no, we won't see 7.5. It's already decided that after 7.4 goes PHP 8
And we should care why?
k
Major version changes are always backwards incompatible. IIRC PHP uses [semver](https://semver.org/).
There's plenty of different cryptographic ways to do it, but the bigger question is what kind of admin? For anything that's not encrypted client-side, you should assume the admin will have access to it. 
No it does not, there are still (small) BC in minors too. But they tend to be small, easily replaceable fix, so that's why they pushed all the big BCs to the next major. 
Is this still a thing? If you are not on PHP 7 already.....um. Crawl out from under the rock.
It's really hard to give advice like this without seeing more of the codebase. Perhaps you can make a string builder/command builder class and use that to at least separate some of the logic out into smaller chunks? Think like how an ORM uses a query builder.
Good thing my [codebase](https://github.com/respawner/looking-glass/tree/master/routers) is open source. You can easily see the mess that I want to avoid if take a quick look at all the files. A builder class is a good idea, I used to do things with this back in my days of Java coding.
Try to avoid as many elses as possible. for example you could rewrite your if else like this: protected function build_ping($destination) { if ( !match_hostname($destination) &amp;&amp; !match_ipv6($destination) &amp;&amp; !match_ipv4($destination) ) { throw new Exception('The parameter is not an IP address or a hostname.'); } $ping = 'ping count 10 rapid ' . $destination; ... &amp;#x200B; also there is no reason to check for `($ping != null)` if the execution reaches any of those conditions $ping will never be null. Also if your logic seems to big you can probably break it down into smaller methods taking less responsibility. &amp;#x200B; As a side note I would also recommend you to use strict comparison and types in your signature methods. You can this page for some good practices with PHP [https://phptherightway.com/](https://phptherightway.com/) &amp;#x200B; Happy coding!
You are right. Maybe it's my code logic that is feeling a bit cumbersome, more than the string manipulations themselves. Thanks for the advices.
A builder class as mentioned by /u/UnusualBear is probably the best way forward, but if for some reason you don't want to go there, you could make it look something like this: protected function build_ping($destination) { $ping = null; if (!$this-&gt;destinationIsValid($destination)) throw new Exception('The parameter is not an IP address or a hostname.'); else { $ping = 'ping count 10 rapid '.$destination; $this-&gt;addSourceInterface($ping); $this-&gt;addVirtualRouting($ping); } } The `addSourceInterface` and `addVirtualRouting` would take the `$ping` parameter by reference i.e. `private function addSourceInterface(&amp;$ping)`, or you could make `$ping` a class variable. 
At the risk of being the guy who harps on something unrelated to the original question, it sounds like you might be developing an anti-pattern from a security standpoint. It is generally not a good idea to allow server A to send server B arbitrary shell commands and have server B execute them. Even with proper authentication methods in place, it's probably worth your time to find a more secure alternative, such as breaking the commands up into a translation table so instead of sending "rm /path/to/file" you are instead sending JSON data: {command: 2, file: "/path/to/file"} where a translation table on server B maps command #2 to "rm". This makes it much harder to inject attacks into server B and opens the door to easier validation against the commands before you execute them. Please disregard if I'm misunderstanding what it is you're actually doing.
One way to prevent code bloat like this is typed parameters return types, and exceptions. &amp;#x200B; Split your if blocks to separate methods. For example, refactor \`match\_hostname()\` and \`match\_ipv6()\` into a a \`validHostname(string destination): bool\` method. Instead of string manipulation, use a builder class, set parameters, and finally call a \`build()\` method to get the CLI string. 
Not unless you want Apache and Http 2. Apache Http 2 module require mpm\_event module which is incompatible with mod\_php. &amp;#x200B; Go for FPM + Apache, or even FPM + Nginx
would further extract the statement out to a method "isValidDestination" or so, I feel that would really improve readability.
&gt; Get line from gz-file pointer and strip HTML tags Why would you have a function dedicated to doing that?...
I'll probably go with a builder since it appears to be the best option. I like the feedback about using functions and passing parameter by reference. I'll make sure to keep that in mind.
One reason could be Ubuntu 18.04 (LTS) ships with PHP 7.2. 
[http/2 does not work with mod\_php](http://wn.bigmedia.se/fetchEmails.php?site=1). 
agree. usually, if you have some logic that is not clear to know what it does at first glance, it is a good idea to encapsulate it into a method with a name that describes exactly what it does &amp;#x200B; Also I really like simple methods like that. are just nice to read &amp;#x200B; private function isValidDestination(string $destination): bool { return match_hostname($destination) || match_ipv6($destination) ||match_ipv4($destination); } &amp;#x200B;
Almost every Apache vs Nginx comparison is really an Apache mod\_prefork vs nginx comparison. Apache ships with mpm\_event, and it's often just as fast (if not faster) than Nginx. &amp;#x200B; Apache with mod\_php (w/ mpm\_prefork) is a horrible setup, with each process taking up a lot of memory. I have a server that does 2000+ PHP-backed req/s with Apache mpm\_event + php-fpm (pm dynamic).
Some frameworks allow to manipulate immutable objects like request, or, allow it to be injected deep into the service layer where logic should not be aware about request at all. Devs coming from such frameworks inject request into a repository for example. Sure, I'm using domain as from DDD, but name it module, grouped logic or whatev, it's the same thing with a different label. Having this grouping allows to see the size of business logic and, when refactoring, can help estimate the amount of work. When everything is separate it's always hunting for things. &gt; how do you namespace a class or component that spans more than 1 domain? Based on their functionality. IMO everything, that is not wiring, should be a part of a domain. Sure, you can have a wrapper library for DB access, but then it just sits in it's separate namespace as an independent component.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Probably dumb question: why don't you execute the command without checking if it is correct? Is it for security purpose? ``` exec(command, output, ret_val); if (!ret_val) { // command executed successfully } else { // Something went wrong // The error is in output I think. } ``` Is it for security purpose you're not doing it like that? If you want to authorize only some commands, you can do something like that before the exec : (Pseudo code) ``` $part = split($command)[0]; if (in_array($part, ["ls", "ping", "man", "ln"...]) { . . . . exec(...); } else { // Unauthorized or command not found } ``` 
Aight, good to know. Thanks! 
Just a long shot .. but template engine may help. I recently used Mustache for building shell commands and then execute them together in a shot.
Would you need the else statement considering you throw an Exception in the first if?
I'd consider making a `CommandBuilder` and having it internally represent a command as an array of strings. This improves your own types and better represents how commands are handled by shells. Something like this: protected function build_ping($destination) { if ( !match_hostname($destination) &amp;&amp; !match_ipv6($destination) &amp;&amp; !match_ipv4($destination) ) { throw new Exception('The parameter is not an IP address or a hostname.'); } $cmd = new CommandBuilder('ping count 10 rapid', $destination); if ($this-&gt;has_source_interface_id()) { $cmd-&gt;add('interface', $this-&gt;get_source_interface_id()); } if ($this-&gt;has_virtual_routing_forwarding()) { $cmd-&gt;add('instance', $this-&gt;get_virtual_routing_forwarding()); } return $cmd; } The exact API for `CommandBuilder` would be up to you of course. Maybe you could have some neat stuff like `-&gt;addShortFlag('v')` which could be called multiple times and merges flags to the 2nd position in the array.
Thank you.
Yes, I see why. With PHP dropping to 79% market share on the web, you certainly want to jump on something more future-proof like Ruby with continued growth to a solid 2.3% market share or something hyped as Python with a whole generation of grads fighting over less than 1% of jobs in the industry. Especially with your solid years of experience I see how the lack of challenge just doesn't provide the necessary thrill of being completely wrong in forecasting. As I see my son progressing in scratch, I feel inspired by your example. 
This seems like it will gain traction. Short, simple and gets the job done.
You are right, the else statement isn't needed, I just typed it out quickly and didn't think about that :)
Yup -- PHP and FPM are certainly the way the wind is blowing, but mod_php with a prefork worker runs PHP fine for many many workloads. Fedora is just one vendor shipping versions of PHP. One small, pedantic, clarification to your response: A threaded Apache MPM worker and PHP's Zend Thread Safety support are two different things. You response (intentionally or unintentionally) seems to link them. [PHP's ZTS](http://www.phpinternalsbook.com/php7/extensions_design/php_lifecycle.html) support allows every PHP interpreter to be isolated into a thread. Per the internals docs &gt; With the thread-based model, every PHP interpreter is isolated into a thread, using a thread library. This model is mainly used under Microsoft Windows OS, but can be used with most Unixes as well. This requires PHP and its extensions to be built in ZTS mode. With the threaded Apache MPM worker it's the _apache processes_ that are threaded, with each process forking a thread to handle requests. The [`mod_php` SAPI](https://github.com/php/php-src/tree/master/sapi) is, on one level, just a filter for apache requests that looks for URLs that seem like they're PHP files and executes them. The core PHP internals team (and someone correct me if I'm wrong) decided that supporting Apache's then-new threaded (and later evented) MPM worker would be too much work for the payoffs involved -- especially since it would require many of PHP's C based Extensions to be rewritten/modified. TL;DR; -- ZTS PHP isn't related to a Apache's MPM models. PHP has never formally supported Apache's threaded or evented MPM. 
&gt; I’ve used mod_php with Event no problems That's interesting, thank you for sharing! I haven't looked too deeply into how the event-ed Apache MPM works. Out of curiosity, are you using many PHP extensions (the C/pecl kind)? How much traffic are these systems seeing? 
Without understanding all of the JIT implementation in detail, the basic facts are that the way code is compiled is not changed by the introduction of the JIT. Zend will still compile discrete Zend VM opcodes as it does today, the JIT then compiles those discrete instructions to machine code and replaces the Zend VM opcode handler with that machine code. Quite unbelievably, and in this regard, it's not such a big change for Zend, and is in contrast to what I think you (and others) may expect, which seems to be that the JIT compiles and replaces opcodes at the top most level for a unit of execution - function (or file).
So, your inability to predict future is the issue ? 
It's different if you START the startup - but if you come in after it's started, then you work on the language and the platform they tell you to work on
Sigh, you sound even worse than javascript wonks
Imo design is too bad to think about builder yet. I'd need to make huge refactoring before I could even see the flow to properly separate concerns. It's definiely not ready yet to extract repeated logic and make it composable - it will only introduce more mess or at least make further refactoring more difficult. The place to start would be making those command concatenations testable first (params in -&gt; string out). To do that procedure sending command needs to be injected (as an adapter of abstract port) or extracted to class that makes the call using (abstract) command of concatenated string (abstract router will probably turn into interface).
OPCache and ioncube. Extensions are hit or miss. New Relic's agent won't work for example with ZTS. Largest server handles around 800-1000 queries/second, 500-600k hits a day. Also mentioned this elsewhere. There's diminishing return on highly concurrent environments: &gt; mod_php breaks down in highly concurrent environments with deep directory structures and open_basedir enabled. Each request has to lstat() back to / unless the entire app is cached in OPCache. Those lstats add up to quite a bit of system time. To expound upon this, let's say timestamp revalidation is enabled: [pid 22284] lstat("/home/virtual/site5/fst/var/www/XXX/wp-content/plugins/jetpack", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0 [pid 22284] lstat("/home/virtual/site5/fst/var/www/XXX/wp-content/plugins", {st_mode=S_IFDIR|0755, st_size=96, ...}) = 0 [pid 22284] lstat("/home/virtual/site5/fst/var/www/XXX/wp-content", {st_mode=S_IFDIR|0755, st_size=82, ...}) = 0 [pid 22284] lstat("/home/virtual/site5/fst/var/www/XXX", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0 [pid 22284] lstat("/home/virtual/site5/fst/var/www", {st_mode=S_IFDIR|0755, st_size=287, ...}) = 0 [pid 22284] lstat("/home/virtual/site5/fst/var", {st_mode=S_IFDIR|0755, st_size=103, ...}) = 0 [pid 22284] lstat("/home/virtual/site5/fst", {st_mode=S_IFDIR|0751, st_size=113, ...}) = 0 [pid 22284] lstat("/home/virtual/site5", {st_mode=S_IFDIR|0711, st_size=43, ...}) = 0 [pid 22284] lstat("/home/virtual", {st_mode=S_IFDIR|0711, st_size=8192, ...}) = 0 [pid 22284] lstat("/home", {st_mode=S_IFDIR|0755, st_size=45, ...}) = 0 And without revalidation or with the entry cached, [pid 24837] lstat("/home/virtual/site16", &lt;unfinished ...&gt; [pid 24788] open("/home/virtual/site61/fst/var/www/html/wp-content/plugins/wpforms-lite/includes/admin/class-am-dashboard-widget-extend-feed.php", O_RDONLY &lt;unfinished ...&gt; You need open_basedir enabled unless the server is a single role for PHP or you can absolutely trust all of the sites on the server and be under total control over the content that goes on them. If you can't, open_basedir is a must. It adds up to a lot of syscalls, which is why too I'm shifting toward PHP-FPM. Each worker pool manages content under siteXX/fst/ which too is chroot'd. Best of both worlds - no open_basedir required in that setup.
Sounds like a valid point. I'm definitely not happy with the current design of this piece of code, reworking it before would not have been a bad idea. It was quite simple at the beginning and grew ugly; Would you recommend starting writing some unit tests to clear up the logic and then writing the code matching those tests?
Maybe. But when a one year old account posts about 4 years of being in r/PHP one is allowed to be a little ironic?
&gt; If we have a compiled php then generics can be resolved more easily. Do you have any equivalent experience of doing something like this, that you're basing your statement on? Or is this just a supposition? 
A class isnt a data type itself. Think of a class as a blueprint for an object. 
Oh, so not everything has a data type? Yea, a class is like a template. I thought everything has his own data type. Much appreciated! ;)
Thank you again, those are really useful/helpful data points. The `open_basedir` point was news to me: Too much time with dedicated PHP app servers I suppose. If you have another moment, something you said didn't sound right to me. &gt; New Relic's agent won't work for example with ZTS. Is this accurate? I know New Relic's agent won't work with a `mod_php` that's not prefork, (i.e. if you're running MPM in threaded or (like you) in evented mode) but I was under the impression New Relic ships working ZTS binaries with all its agent releases? Is there something about those ZTS binaries that don't work? 
&gt; Is this accurate? Oops, fake news. It won't work with a threaded MPM, which requires ZTS. It does have ZTS builds from a quick google.
After separating router specific code from I/O (as I've mentioned) you should be able to write whole suite of passing tests, and without touching them make entire refactoring inside router classes. I predict those classes will turn into factories/builders eventually with single execution call (or api) ready to be pulled out (only instantiation in unit tests need to be altered). Other similarities should also be visible at that point for further extraction into abstract factories or reusable components. The goal is not to get rid of conditions (misleading concept in OOP), but to make most of them resolved once in factory/builder. You don't want object to ask itself "who am I?" questions like `$this-&gt;has_source_interface_id()`, at least not without some trade-off reason. It looks like you use same url for various commands, thus some of request's payload parameters will probably become part of builder logic (what to instantiate) along with configuration, and some of them will be actuall command parameters. Splitting them into request path (segments) and query params could be good heuristics to determine what category are they. You could also look at switch/case statements on request params in your code - that's most likely builder logic stuff (sth like hidden http routing).
Ah, ok, I see. I never made the jump to "a non-prefork MPM requires ZTS PHP" because I've taken the "Don't use mod_php with anything other than the prefork MPM" as gospel. I don't think I'd be comfortable running ZTS PHP under a threaded Apache MPM if the PHP developers themselves don't consider it a valid use case ... but that's the fun of open source I guess. No one right way to do anything. :) Thanks again for taking the time to respond!
 Basically: The RFC process is reduced to 2 rules: - All primary **RFC votes require a 2/3 majority**, while secondary votes resolving implementation details may use a simple majority - All RFCs must have a voting **period of at least 14 days**. Love it, clear and simple!
I am sorry, as a noob this sounds super easy, useful and rational - what is the current modus operandi, how come that it is not simple now?
Thanks
Downside is when they get hacked the attacker can tamper with any web app “system file” to place backdoors wherever. Running a separate user gives you a nice audit trail. Let’s not forget same user is how the [Panama Papers hack](https://www.wordfence.com/blog/2016/04/panama-papers-wordpress-email-connection/) happened. Principle of least privilege is a good thing.
It was a valid concern with 5 (most criticisms were). 7 revamped threading along with a lot of internals. It's mentioned far less often now because PHP-FPM is such a viable alternative to mod_php. Plus you can use cgroups to enforce resource limits for each worker pool. You can't do that with a threaded MPM unless you're running cgroup v2 and even then appropriate thread resource counting would require a custom Apache module. [mod_cgroupmin](https://github.com/arekm/mod_cgroupmin) *might* do it. mod_cgroup doesn't though. Unless you're trying to fit several sites on a small VM, go with PHP-FPM.
Lol noob downvoter...
To provide a bit of context on the current flavor of PHP internals drama... It starts with the [JIT RFC](https://wiki.php.net/rfc/jit) being proposed with a voting margin of 50%, which is outright criminal for an RFC of this scope. In response Joe announced that the [voting margins RFC](https://wiki.php.net/rfc/abolish-narrow-margins), which has been proposed about two years ago, will be going to vote soon. In response to *that*, Zeev demanded that this RFC be shut down in favor of his more comprehensive [voting reform RFC](https://wiki.php.net/rfc/voting2019). This RFC was not well received (spoilers: if you exclude a large number of people from the existing voter base, they are not going to be happy). Now, this mail is an alternative to Zeev's proposal, which tries to reduce the RFC process to the bare basics, rather than trying to make the process fully lawyer proof.
This is the wrong choice in 2019.
Then what is the right choice?
Whilst this thread is beyond dumb, I do wish people would stop with the W3techs nonsense. Which is why those figures do not correlate to jobs and why for example if I compare Laravel to Django on Indeed.com I get nearly 3 times the results for Django than Laravel, let alone if I compare to Java Spring.
I think the removal of minimum discussion periods is a mistake. RFC will go straight to vote instead of being entered for discussion first. They shouldn't, but they will. Particularly for RFC authors newer to internals, I see this causing several issues (some of these are linked / similar scenarios - and they may appear jumbled but I couldn't think how to write them any cleaner right now): * An RFC which may need, possibly quite minor, adjustments will get voted down immediately. This may cause authors to immediately think there's no chance of their RFC ever passing and withdraw from contributing further. * I think it risks causing voting fatigue among voters. There will be more votes more frequently and they will get tired of it. * I think it may dissuade other contributors from suggesting alternatives. The current multiple discussions around the RFC process itself is a good example of this I think. If the original "Abolish Narrow Margins" had gone straight to vote (or gone to vote very quickly), would others have felt it appropriate to propose alternatives (that they may have been working on previously / in their own time) while the vote was open? Would the discussions of alternatives have been as open and free amongst all contributors with one RFC already in voting? * It risks speeding up discussions to the point where many contributors with limited don't aren't (or don't feel they are) able to contribute in a timely manner. I think the 2 week minimum period is a good period of time to still allow plenty of people to contribute to discussions when they may be unavailable for a week or more if they're ill, away (holiday / conference) or just busy. * Different people are going to have different ideas on what an adequate discussion period is. If someone's been working away on a feature for weeks or even months to bring to RFC, they may feel they've explained it simply enough when to others who haven't seen this before it needs a little more time. * Linked to both the above: The minimum period gives time for even fairly busy contributors to think things over and investigate. There might be issues with something (that may seem fairly simple at first glance) that they only think of later, after mulling over the RFC. If it's already in voting, this means that the author then has to either pull the vote and amend the RFC / discuss further before putting it back to a vote again. Again, I think this may cause voting fatigue for both authors and voters. * The minimum voting period provides a clear timeline for new contributors on how the RFC process should flow. New contributors in particular are going to find it hard to gauge what an "adequate discussion period" means. While these rules may feel like bureaucracy to many, I think that people are forgetting that not everyone who wants to contribute to PHP has been incarcerated on internals for 5 years already. The RFC process should be clear and simple to follow for new contributors to make what could be their first contribution as smooth and least painful as possible.
Classes are special in PHP and don't (at least currently, who knows what might change) have a data type because they're not values as such. You can, like global functions, address them as strings, though. `SomeNamespace\SomeClass::class` gives you the string `"SomeNamespace\\SomeClass"`.
If anything, I think the way you've laid out this scenario makes it clear that the "minimum discussion period" rule needs to be further extended with something like "this must immediately precede the vote announcement and a period of not more than 1 month should exist between the most recent discussion and the vote announcement" While I read internals regularly, I am an outsider. I don't believe I see all the interaction that happens between PHP core developers (I know for a fact much of it happens off-list and even off PHP official infrastructure completely). But I feel some people were trying too hard to "read between the lines" of what happened on the internals list recently and may have read intentions into what happened that were not there. I think the JIT RFC certainly should be a 2/3 vote, but beyond that, I think people are reading too much into things. I think Zeev was right to call out that fact that the Abolish Narrow Margins RFC hadn't been discussed in a long time (see above). I don't think Zeev was trying to "shut down" anything, but was simply saying that given there were now several discussions along the same lines, voting on Abolish Narrow Margins should be held off until all the discussions had been evaluated by everyone. I can see where Zeev is coming from with regards to voting eligibility. I've read the [original voting RFC](https://wiki.php.net/rfc/voting) and it confuses me. There's a category of voters for "Representatives from the PHP community" that is really wishy-washy in my opinion. If you ask me it should be clearly defined who can vote (and why / how they got those privileges, and listed publicly somewhere that's easy for people to find). Zeev's proposal obviously didn't sit well with internals, but I don't think he was wrong to bring it up.
You obviously don't read internals. Also, there's several discussions along the same lines at the moment, so they're likely to take some time to play out.
Don't I? Damn. What on earth is it I'm reading at the start of my day then... I mean it definitely looks like a PHP mailing list, and I'm fairly sure it says externals.io in the address bar.
who keeps downvoting these questions?
its just the n+1 problem that is very well documented.
wrong. read up what an ORM actually is and read that active record is an implementation of an ORM. https://en.wikipedia.org/wiki/Active_record_pattern
**Active record pattern** In software engineering, the active record pattern is an architectural pattern found in software that stores in-memory object data in relational databases. It was named by Martin Fowler in his 2003 book Patterns of Enterprise Application Architecture. The interface of an object conforming to this pattern would include functions such as Insert, Update, and Delete, plus properties that correspond more or less directly to the columns in the underlying database table. The active record pattern is an approach to accessing data in a database. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programmerhumor] [Bye -- \[CrossPost from r\/php\]](https://www.reddit.com/r/ProgrammerHumor/comments/amj9lx/bye_crosspost_from_rphp/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
14 years ago i started using php, I quit 13.5 years ago because too many pretentious assholes were using it. Glad to hear I can finally come back.
I enjoyed this as well. The PHP design patterns book with the fish on it is great too!
If you want two-ways encryption (you could encrypt and decrypt) then ``` public function encrypt($data) { if (!$this-&gt;encEnabled) return $data; // no encryption $iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length($this-&gt;encMethod)); $encrypted_string = bin2hex($iv) . openssl_encrypt($this-&gt;encSalt . $data, $this-&gt;encMethod, $this-&gt;encPassword, 0, $iv); return urlencode($encrypted_string); } public function decrypt($data) { if (!$this-&gt;encEnabled) return $data; // no encryption $iv_strlen = 2 * openssl_cipher_iv_length($this-&gt;encMethod); if (preg_match("/^(.{" . $iv_strlen . "})(.+)$/", $data, $regs)) { list(, $iv, $crypted_string) = $regs; $decrypted_string = openssl_decrypt($crypted_string, $this-&gt;encMethod, $this-&gt;encPassword, 0, hex2bin($iv)); return urldecode(substr($decrypted_string, strlen($this-&gt;encSalt))); } else { return false; } } ``` where $this-&gt;encMethod is the name of the method listed here: http://php.net/manual/en/function.openssl-get-cipher-methods.php $this-&gt;encPassword = is the password (the admin shouldn't know it). $this-&gt;encSalt = is a fixed salt.
That's the most random use of bold I've ever seen.
Mod_php leads the entire php interpreter for every load. It's a huge performance hit. Php-fpm is the better choice
Comments don't have data types, operators don't have data types, delimiters don't have data types etc. etc. to be fair. :P
@HSP95 &amp; @stilloriginal I have fun reading your comments. I still have long way to go with my own made framework ([https://framework.jinexus.com](https://framework.jinexus.com)). :)
If there is anything I have learned in my time, it is that nothing ever sits well with internals. Someones always pissed about something. 
What's wrong with https://symfony.com/components/WebLink?
Nothing, I just wanted to learn more about Server Push and wrote my own solution.
If you do it like that, it will be a nightmare to maintain... You need to find a way to split the functionality in better, easier to understand components that abstract all those ifs. Then you need to build a template/command list that you can see on one screen.
Sure, if you don't have full control of your environment and you have to go with built-ins, I can see why, but it's really not that difficult to go to 7.3 and it has some useful additions along with speed improvements over 7.2. I just found it somewhat weird to suggest going to a different version than latest stable. It wasn't "use 7.1+ because those are the currently supported versions," but rather "Use php 7.2" and no reason why.
To learn the very basic of the PHP language you can pick up almost any PHP book. Beyond that I can recommend [https://patricklouys.com/professional-php/](https://patricklouys.com/professional-php/) for basic on how to build a proper application
Ah that's cool! Gimme a PM if you'd like to talk through it some more. R.e. The readme I wouldn't bother and just add it under autoload-&gt;files inside my composer.json I.e. https://github.com/paragonie/sodium_compat/blob/57bb5ef079d3724148da3d5c99e30695ab17afda/composer.json#L50
Inserting things may be killing you (if you misuse it).
I totally agree. All very well explained and then given actual reasonable code explanations. He also has a lot of good references to other people and books to look into throughout that he references.
That's the asinine response in 2019. Event is just as capable and Apache has a larger ecosystem of extensibility until you want a terminating IMAP/SMTP/POP3 proxy in which case I'd argue haproxy is a better choice.
Apache. Broscience is hard science to defeat with such strong facts as "I read it on Medium."
I actually agree that usage is unrelated to job opportunities (let alone quality/salary). My post wasn't meant to be an analysis on a serious basis. The cited numbers only aim at the "no future" proclamation OP made.
I see /r/forhire get thrown around here every so often, so I assume that's the place to be. *&lt;shrug&gt;*
yes i tried that and pretty sure i was ripped off at this point.
I'm working mostly in PHP at the moment. Also not opposed to switching jobs. Maybe we can talk and I could gauge the full scope of what you wish to develop? 
Upwork may be a solution to your problem, developers don't get paid till they submit work. My only problem with them is they take pretty serious fees, so the developers want more cash. I'm from Poland so I'm gonna name a few job boards from here. Something similar to upwork would be useme.eu. For more serious stuff (contracts) you could post an ad on justjoin.it or nofluffjobs.com, however it takes some cash just to post an ad.
are you able to bring these people off the platform and work deals off line. i think that on fiverr stuff like that is highly monitored. im looking to do more under the table type stuff with bitcoin. thanks a lot for this information though this is great. 
not sure if this was really allowed but sure. lets chat.
Of course, because it's an opportunity to generate a ton of visibility for practically no effort. Self governing communities practically invite this kind of behavior by virtue of well... their virtues. An open forum that welcomes discussion with minimal restrictions, rewards involvement for the sake of being involved, and provides a highly visible platform is like a spawning ground for contrarian ideas. People who participate in governance have an agenda, and most agendas are self serving. What better way to attract support and attention than to manufacture an argument of contradiction fueled with the easiest to stoke human emotion; anger?
Do you know any programming at all? Go to some PHP meetups. Check out Meetup.com Tough to make an idea if you can’t code. Best way to get people interested is to have something interesting. People aren’t just going to build your app for you, and $$ isn’t going to roll in just cuz you have an app. May want to start building an email list and a blog and run some ads to get some interest. The product can come later... after you’ve built an audience around the solution you’re going to provide. It’s also cheaper to build an audience first. Coding is fucking expensive. The time and the money spent on something that isn’t even guaranteed to make you any money. Sorry if I’m being an asshat. Just my 2 cents. TLDR; meetup.com php meetups.
Still looking for help?
i already have a forum with a bunch of traffic.
Codementor Also I'm a PHP dev currently unemployed. What are you looking to create? 
Do you have money to pay them? If not, then you need to find a loan or grant first. No qualified developer will work for free.
im not looking for any free work here. does the government give out loans in bitcoin?
what is codementor? 
Good thing! When I see the term "business idea" it usually involved someone asking for a developer to do all the work making their idea a reality and then get some share of future money that almost never comes.
Framework: - Laravel or Symfony. - Vue, Angular or React CMS: - Statamic - Craft CMS 
[removed]
Love this guy's videos
Well, it doesn't regulate the most important thing in my opinion - who gets the voting privilege. 
As a PHP developer I often don't understand the reasoning behind RFCs. Their choices feel like they are disconnected from the community (hello consistent naming RFC). I also understand that a clear voting process is necessary, but this constant passive aggressive atmosphere in the internals list needs to go. PS. I've been trying to register my email for over a year now, it doesn't let me join the mailing list. Can you please switch to a less primitive way of discussing things? Mailing lists are terrible.
Time is money. Reading the documentation takes time.
(sorry for long post. TL;DR: generics are like code templates) Just reading of how generics are implemented in different languages. I think it's easier to understand this if we think that generics are like code templates to the actual "code". &amp;#x200B; We can use php as an HTML template engine. Code as: \`\`\`php &lt;ul&gt; &lt;?php foreach (\['one','two','three'\] as $item): ?&gt; &lt;li&gt;&lt;?php echo $item;?&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;/ul&gt; \`\`\` Will produce the code that is going to be executed in the client. It's intermediate code. At runtime (HTTP request) the actual HTML code will be produced and sent to the client. The same goes for generics. Code like \`\`\`php class TheKey&lt;KeyType&gt; { protected $key; public function \_\_construct(KeyType $key) { $this-&gt;key = $key; } public function getKey(): KeyType { return $this-&gt;key; } } \`\`\` is intermediate code. It's a template for the actual "code". To produce that "code" we need a runtime. Not for the final result (like the HTML code above) but for our code. So we need a runtime to build the code which then is used. The "runtime to build" in other languages is the compilation step (JIT or otherwize). The thing is \`KeyType\` has to be resolved somehow. &amp;#x200B; In the php as HTML template engine scenario we have the HTTP request that has all that data we need to produce the final result. But here we will normally use something like \`$theKey = new TheKey&lt;int&gt;(1);\`, Our code has the data for the generic. So there must be a step to analyze the code, find out the \`KeyType\`, produce the actual code, and then do whatever php normally does. &amp;#x200B; I hope I make my rationale understandable enough, As I see it from different languages you need a "runtime to build" for generics to work. As of now I have not seen a purely interpreter language that has generics. Generics appear in languages that have JIT or compilation.
I guess it should have been explicitly mentioned that the voting eligibility rules stay as they are, which is basically "everyone with a php.net" account, which is roughly equivalent to "every significant former or current contributor to php-src, php-doc or php-web".
PHP's standard library could do with some serious improvement towards this end however. For example, you can find out that opening a file failed, but not why.
It's not mailing lists that are terrible. It's just PHP's mailing list server is terrible. I have no idea why they don't fix it properly - they seem to keep band-aiding it and putting up with the frequent interruptions to communications.
PHP is already “JIT” compiled to its internal byte code, so adding compilation to machine code as a further stage doesn't make generics easier. Perhaps harder because it makes adding new features significantly trickier.
Not sure what you mean, as php has ten way to read a file, or to test if found, for different usages. Example useful capability of **fread**: php -r "while(true) echo fread(STDIN,'1');" &lt; whatever.file This is just as **tail -f**, the whole file isn't in memory, just the end of it. This is powerful! 
…? I refer to the problem that `fopen` returns only TRUE or FALSE, no error code.
That wasn't very clear! ::) It might be an expected behavior, just *unlike* file\_get\_content which will throw a fatal error. Found that php is full of *unclear* but powerful behaviors like this one. This part is tricky.
Very simple. There is nobody who has both the necessary expertise and time/motivation to do this. Combined with an unwillingness to move to a hosted solution, that brings us to the situation we have now. PS: I believe a fairly reliable way to sign up to the mailing list is to use a gmail address.
This guy is a Phd and a lecturer at a university in Sweden. It looks amateur but technically, its professional work :) Having said that, I came across this guy a few years back and up to know its the best explanation for Design Patterns I have ever found. And I own several books on the matter :) 
Thanks for sharing OP! Could someone link to the video please? On mobile it is not playing for me, and there’s no way to click through to it on YT without it playing 🙏
Hi everyone, In the [initial thread of releasing php-doc-check](https://www.reddit.com/r/PHP/comments/ah7z9l/phpdoccheck_is_an_mit_licensed_command_line_tool/) I got some awesome feedback and great suggestions. The most important suggestions have now been implemented and have released as v0.2.0. php-doc-check is a command line tool that uses complexity metrics to determine which functions need documentation. Since the last post the following things have changed: - A [Cognitive complexity metric](https://www.sonarsource.com/docs/CognitiveComplexity.pdf) has been added as suggested by /u/Tomas_Votruba This is a much better way of deciding which functions are complex enough to need a docblock. Mostly because it weighs nesting of statements as much more complex. - I've replaced the php-cli-tools argument parsers with [GetOpt.php](https://getopt-php.github.io/getopt-php/options.html This allows for defining options with multiple values, validation and in my opninion makes the syntax much easier to understand using operands. - Each release now automatically includes a Phar, and can be installed with [Phive](https://phar.io/). - Codebase is now psr-2 compatible, and includes unit-tests - Quiet and output formats now behave better. As last time, any feedback is very welcome!
PHP is already “JIT” compiled in many ways. The addition of JIT compilation to *native* code doesn't affect generics.
It's unrelated.
Nice craft... 
you can send it to [internals-subscribe@lists.php.net](mailto:internals-subscribe@lists.php.net) with subscribe in subject.
Look for freelancers, my recommendation is [upwork.com](https://upwork.com). It is general opinion that it has more qualified people that [freelancer.com](https://freelancer.com). When you post the job, ignore those that send generic proposals. Check feedback they got from previous clients and what kind of job they were doing; ignore those writing plugins for Wordpress, no good developer would even look at that type of code. &amp;#x200B; But this can still trick you. Because you are not a programmer, there is a simple way to check them: ask to see code run with [phpstan](https://github.com/phpstan/phpstan) on max-level. It is not hard to make it 100% green and this would show you they care about quality. Look for expensive ones, there is a good reason why they charge $50-100/h or more. It is cheaper in the long-run because you would not need to rewrite your app all the time. Also, good developers can be easily 10-50 times more efficient than $5-10/h person. Ask for something unique. In my case, I demonstrate hobby project where one of database tables has 100 million rows; others are in range of 1-10 million. Application works in &lt;100ms, full ORM usage, no Elastic search nor some sort of cache... Others will have something similar. &amp;#x200B; Describe your project in as much details as you can. Good developers likes the challenge and job description like "I need a site" will not attract their attention.
What a huge, tragic loss for the PHP community. Let us have a nanosecond of silence for our fallen comrade.
There are a few posts by [Nikita](http://nikic.github.io/) about the changes in ng, which may be a little out of date now. I'm afraid the documentation for Zend is contained within the source code itself - you have to read it. This is not really so uncommon for C ...
Thanks, I suspected that. I have no problems reading the source code directly, but a bit of guidance wouldn't have hurt... 
1- It's easy to find a good one, just put a good salary and they will come. And always asks for references and past projects. 2- **You should never ever pay upfront.** If the project takes 3-6 months or more, then you could pay by a goal but never in advance. 3- Avoid students, they don't have the expertise to build a project from scratch. 4- Also, there is a temptation to hire a foreigner (they are cheap) but: Remote programmers that you should avoid: * India * Pakistan * And China (however, China is changing, even the salaries are higher). Why?. The average salary in India is **around 6k USD per year** (around 1/10 of the salary in US), so the competition to hire a cheap and good programmer is fierce. The good ones are usually hired for big companies/ consultant companies in a snap. So, what's left?, the bad ones or the guys that over-sold themselves (they work in 3-4 projects at the same time). It is really rare to find a good one, **there are good Indian freelancers but it's really hard to find one** and it requires expertise to separate the wheat from the chaff. And it is a shame because Indians are nice guys. If you have the money, then it's better to pick a local work-hand. If you don't have the money, then your best chance is to find an east-European developer, some of them are good, they are not as cheap as an Indian but they are quite good and they are easy to find a good freelance. 
I'm glad this article pointed out the BC breaks. Those were a surprise.
https://youtu.be/v9ejT8FO-7I Same thing happened for me.
Lol. Is this a joke?
That worked, thanks!
You will find some useful stuff in headers, and there's [this](http://www.phpinternalsbook.com/) (also incomplete) ... that's about all we got :)
Looks good! Strangely, all my tests fail when I'm trying to run with `--process-isolation`. I get this error for each of them: PHPUnit\Framework\Exception: Fatal error: strict_types declaration must be the very first statement in the script in /phpunit.phar on line 2 Call Stack: 0.0010 594736 1. {main}() Standard input code:0
https://github.com/sebastianbergmann/phpunit/issues Believe this is the first version that deployed strict types, one such minor bug was closed already ...
Thanks for the nudge. Opened an issue now!
That PHP is “interpreted” doesn't mean it has no compilation. That most “interpreted” languages lack generics is only because most are dynamically typed.
There was a PHP internals book being written IIRC, but it wasn't completed…
\&gt; An RFC which may need, possibly quite minor, adjustments will get voted down immediately. This may cause authors to immediately think there's no chance of their RFC ever passing and withdraw from contributing further. &amp;#x200B; If the only feedback the author is given is a no vote, then definitely. But what's infinitely more likely is they will not put it up for vote, but discuss it first. If there is little feedback, then it shouldn't be voted down for "minor adjustments". The point of the process is not that there should be no discussion prior to vote, but that a mandatory discussion period does make things more complicated. Even if it's just "hey, here's a new RFC, if there's no major objections I'll open vote in a few days" would provide time for those sorts of feedback. &amp;#x200B; \&gt; I think it risks causing voting fatigue among voters. There will be more votes more frequently and they will get tired of it. &amp;#x200B; Totally a risk. But weigh that against the fatigue of "what's the process for submitting this thing?" and "how do I know when I can open voting" which is actively pushing away contributors today. Weighing more voting but with less red tape against less voting but more bureaucracy, my opinion is it's better to swing too far to the voting and lowering the barrier to entry to newcomers and existing veterans alike. Another way of looking at it, if there's a constant amount of pain that needs to be felt, is it better to put most of that burdon on the one authoring the RFC, or spread it almost evenly around all contributors. There's no clear "right" answer here, but a series of tradeoffs. &amp;#x200B; \&gt; would others have felt it appropriate to propose alternatives (that they may have been working on previously / in their own time) while the vote was open? &amp;#x200B; This has happened numerous times in the history of the project. &amp;#x200B; \&gt; It risks speeding up discussions to the point where many contributors with limited don't aren't (or don't feel they are) able to contribute in a timely manner. The flip side of this is that it means even minor changes (that aren't bug fixes) will be slowed down significantly where it takes literally a month or more to make progress. Especially when projects are being split into multiple RFCs that build on each other, it makes sustained progress nearly impossible. So what we see are disproportionately large RFCs with many voting options. This leads to more complicated changes that are more expensive both technically and politically. &amp;#x200B; \&gt; Different people are going to have different ideas on what an adequate discussion period is. &amp;#x200B; If the stigma of a no vote is removed (a big if, don't get me wrong), and it's turned into an encouraging "I'd like to discuss it a bit more to accomplish X", then I think that doesn't really matter. Because now it's not "let's just discuss for weeks with no real target" to "This particular thing needs to be understood or changed further". It both clarifies the discussion and provides value to the time extension. \&gt; New contributors in particular are going to find it hard to gauge what an "adequate discussion period" means. &amp;#x200B; So ask a veteran? Or ask on list to say "I feel discussion has stalled, should I just open a vote"? And if people have concrete reasons for no, then there you have it. If they don't (or don't respond), then the discussion wasn't going anywhere anyway so why bother? &amp;#x200B;
Thank you so much! 
Yay, I was looking for something like the resources you mentioned. That should be enough to do what I want to do (I am looking to instrument some parts of the PHP interpreter for tracing purposes and needed to find them). I'll probably ask other questions to the guys in r11 later, thanks again. :-) 
I was hoping to add optional support of v8 to one of my legacy projects, but the `: void` change will make that hard. Can anyone think of a way to add a shim so I don't need to type hint so that I can keep supporting older PHP versions? We will upgrade to 7.2 in the not-too-distant future, but we just haven't had time yet to migrate everything (we're in the middle of big rewrites).
Upgraded three projects, worked on 2 where I control the TestCase master class, failed for Laravel 5.7 due to the void declaration. Have to wait for official here. I never liked the exception annotations, so I'm glad they're deprecated (already replaced them everywhere). Noticed .phpunit.result.cache files everywhere suddenly. Can someone explain where this is really useful and why is it enabled by default? I've two main use cases: phpunit run on CI and manually running selected tests via PhpStorm integration. In what case can I benefit from the extra files? How are they invalidated?
Don't upgrade PHPUnit yet then
anyone who is upvoting you and downvoting me are the ones sitting home crying because they have no money. first off i do have money. second off even if i didnt and i had an idea to make money you turning it down without hearing the idea is only hurting yourself. i already (more or less work for) have a fully functional business making me money the last few years that i would like to turn into my own. i also have a forum with tons of customers waiting for this said business to open. so you be that guy hating all the people that fail and turn down the guy who can actually do it because you have done business with a bunch of scrubs in the past. good luck with that and becoming anything in life not taking risks.
&gt;anyone who is upvoting you and downvoting me are the ones sitting home crying because they have no money. first off i do have money. second off even if i didnt and i had an idea to make money you turning it down without hearing the idea is only hurting yourself. i already (more or less work for) have a fully functional business making me money the last few years that i would like to turn into my own. i also have a forum with tons of customers waiting for this said business to open. so you be that guy hating all the people that fail and turn down the guy who can actually do it because you have done business with a bunch of scrubs in the past. good luck with that and becoming anything in life not taking risks. Wow! Thank you for posting this. I think it's very clear that no one here would ever want to work with you and they've all dodged a bullet after seeing this tirade. For the record, we've all heard your story from hundreds of people throughout our careers. Almost all of those people fail. You're what's called a "high risk low return gamble".
great thank you for the advice. not sure who downvoted you but i gave you an upvote.
a paying customer with an idea already making money. plus a forum with a whole following waiting for that idea to come to fruition. you make a lot of sense guy.
I think it's very likely from your extremely defensive attitude when I asked if you had funds (a normal question for any venture, which you would know if you had taken even a few minutes to research how online services are developed) that your funds and customers are not as secure as you claim. If by some low chance, you do have a great business model and paying customers willing to go, you've already shown you are quick to anger and insults and overly defensive - which does not sound like a person anyone wants to work with anyways.
would you like a photo of my bitcoin wallet to shut up and cry to somebody else about all your failed projects with people with no money. come on guy if you can not take critism you shouldnt be in the business of working for youself then.
this was a very good write up. thank you for this.
I want to upgrade so we can set up PCOV for code coverage though. That will require v8.
Depends on what you want to trace. You can for example hook `zend_execute` to see when a file is executed or go as deep as registering an opcodes handler using `zend_set_user_opcode_handler` or hook function calls or whatever you're interested in. Of course you have to be careful not to destroy PHP's state and cooperation with other extensions like Xdebug is not always trivial. For seeing how to do it, across PHP versions Xdebug is a good source. Xdebug hooks more or less everything available.
The core concepts are the same now as they were then. It's a worthwhile read, but depending on your level of expertise, it's nothing too profound.
I wouldn't call myself a senior developer but I'd like to think that I'm near or at the "upper-middle" level of experience. A book like this would probably help me brush up on some core concepts, and maybe I could learn something new from it. What I have to work with is a Magento extension that my coworkers wrote a couple years ago. It synchronizes data between the store's database and the company's legacy database, for which we format the outgoing data in a plaintext, tab-delimited schema. We also ingest records from their database this way. There are multiple processes for the different sets of data. It's all transferred over SFTP. As of right now, each process is represented by a model class, and *all* of the business logic is contained within one or two functions in each class. They want me to take this code and refactor/rewrite it, and add test cases. With that being considered what do you think about the book's applicability to this project, yea or nay? (I'd still like to read it either way, but if you think nay then I'll probs wait to read until after.)
Yeah, I think the boom will help you in that case.
I think you got your link wrong ;-)
Oops. Thank you I fixed it. 
When I'm not sure about the book, I download 1st chapter for free to Amazon Kindle. After that, I buy it or remove it - without doubts. As for technique to work with a legacy in 2019, if you invest into learning AST the same time as to reading a book, you'll be much better equipped to work with legacy. Just not in theory, but with the toolkit that works for you.
What does AST stand for here?
&gt; Code like &gt; is intermediate code I think this is where you've made a bad assumption. If PHP supported intermediate code like that, or if adding a JIT allowed support for it, then you would be correct. However PHP doesn't support intermediate code like that, and the difficulties in implementing generics have all been around introducing that capability. Adding a JIT makes PHP more complicated.....so makes introducing that capability harder, not less.
Abstraxt syntax tree
Sorry, but how do you imagine AST knowledge will help in this legacy rewrite?
Are you going from PHP 5.* to PHP 7.*? If so, I'd read about migrating from said versions; and leverage new features in the language as much as possible... namely, scalar type declarations, return type declarations, etc... http://php.net/manual/en/migration70.php
I assume it's PHP code, that needs to be changed in a certain way. So AST is an obvious choice. But if it's ini, yaml, neon, database... that have to be migrated manually (or with regulars tops). At least at my limited knowledge.
Yes, but I don't think knowing about the compilation process will necessarily help in this case. There is no such thing as an instant upgrade. We'd need to know if this legacy app was written pre PHP 7, and that alone will completely change the process necessary to rewrite and leverage modern PHP code, and its new low level features... new hashtable implementation, etc.
The result cache enables, among other things, --order-by=defects. (Not sure if I have that syntax right - I'm OK mobile and can't easily look it up) 
You can't shim `: void`, so you'll either have to hold off or update your app to work under 7.2.
I've ran this on what I call a mid-sized project in Laravel: * we usually don't write phpdoc and if, in 99% of the cases only for type hints for the IDE and static analyzers * rarely we write actual documentation for functions except in very complex/business critical cases * our mantra (except for the 1%) is: the code and the tests speak for itself and I've seen too often outdated docs I got a result of \~600 lines 😜 I checked some random samples but was unsure how to really make use of this: * I see warnings and errors =&gt; it would help to just filter for errors as a start (maybe doable with flags `--complexity-warning-treshold`/`--complexity-error-treshold` somehow? * in my case the scores are the most interesting because I wouldn't care about low complexity but would start at the ones which have a score of 50 or more (random number). Point being: sorting by score descending or something would be a great help Random feedback: * I look at `--help` but would like to understand, what values are default? Ol, for `Output format [text, json]` it's obvious, but `Metric to use for determining complexity [cogntive, cyclomatic]`? Btw, there's a type with `cogntive`, no? * Or for `--complexity-warning-treshold`/`--complexity-error-treshold`, would be interesting to see what the defaults are. Btw, it's spelled `threshold` * I checked the json output, but I was surprised it didn't really take advantage of a structured file format. All reported findings are still a text line like `Anonynous function has no documentation and a complexity of 5`. I would have expected dedicated fields for: severity (warning, error), score, method name * Oh, and it's spelled `Anonymous` not Anonynous. * If one is really serious about this, it has to become part of a CI pipeline. But for that to be useful, it requires a way to ignore files/methods (maybe even score) from being reported (tuning the thresholds is fine, but only gets you so far). I like how PHPStan handled this via the configuration and the best part being, if a certain exclude directive is not triggered, it's *also* reported as an error because if obviously means the code changed. I can't really say I would use something like this, but these were my first impressions. PS: I really would suggest running a spell checker on your code, there seem to be really many typos and misspellings.
&gt; ...the compilation process Oh, I don't mean AST in c, I mean [php-parser AST](https://github.com/nikic/PHP-Parser) based tools. &gt; There is no such thing as an instant upgrade. There are 2 (at least) - I work on Rector (open-source) and there is Laravel-Shift (closed-source). So all you need is PHP 5.3+ code. That php-parser can handle, thus any tool based on it can. Docker + prefixed PHAR helps you with the low PHP version.
If you really need it you could fork PHPUnit and backport the PCOV changes
Ah thanks, I read that somewhere… Is that _so_ common that it warrants writing these (to me: annoying) files by default? The documentation at https://phpunit.readthedocs.io/en/7.4/search.html?q=defect is interestingly shallow on this topic (maybe it's supposed to be common knowledge what this specifically is). Or: maybe I don't really benefit from it, because when I consider my IDE (PhpStorm), after running the suite it's configured to only show me failed tests which I can re-run with a click anyway.
I've read it. No real substance if you have even a medium understanding of best practices in PHP.
There are quite a few parts. For example, although I know quite a bit about implementing code in extensions, I have zero knowledge of the parser. This bits might be a start for you. About internals - http://www.phpinternalsbook.com/ About extensions - https://devzone.zend.com/303/extension-writing-part-i-introduction-to-php-and-zend/ A comprehensive extension example - https://github.com/ThomasWeinert/php-extension-sample Was there anything you wanted to learn in particular?
Git ignore them and they stop being annoying. :-) Or disable them in phpunit.xml. I'm fairly new to phpunit (the framework we use has its own old test library, and just a couple weeks ago we started converting our tests to phpunit) so I don't actually have an opinion yet whether caching should be default. In truth, the fact that phpstorm even has a "run failed tests" option means that it is caching the results somewhere - you probably don't notice because you've gitignored .idea. Doesn't it make more sense for phpunit itself to do that, rather than needing the IDE wrapper to do so?
Bleh. I guess so. 
Thanks for the pointers, but I cannot use Zend-specific functions for this project. I'm not interested exclusively in Zend, I want to use it as a target for my tests because it's open-source and relevant.
I think what bothers me is that phpunit thinks it's fine to a) enable this by default and b) spray it all over the place. I've observed that it can create them within your test suite directories depending on which/all tests your run. Definitely doesn't feel right that is sprays it all over the place without even asking. I guess PhpStorm has it's own thing in .idea but I wouldn't know, as it's on ignore by default. But that's only a single place. It just feels surprising/strange how the defaults are TBH.
Thanks! I am interested in the general architecture - I need to trace execution from parsing to the code paths that the PHP code causes the interpreter to execute. I don't need extensive knowledge about Zend (I will probably just add a trampoline to every function with DynamoRIO), but I wanted to have at least an overiew.
&gt; Their choices feel like they are disconnected from the community A passive aggressive comment, followed by: &gt; but this constant passive aggressive atmosphere in the internals list needs to go. A comment decrying passive aggressive comments. Awesome. 
Thanks for the feedback, awesome that you took the time to check it out and share your thoughts. &gt;* see warnings and errors =&gt; it would help to just filter for errors as a start (maybe doable with flags `--complexity-warning-treshold`/`--complexity-error-treshold` somehow? You can set the warning threshold to the same value as the error threshold and it will only show errors in the output. I will see if I can make this more intuitive. &gt;* sorting by score descending or something would be a great help I'm going to think about how I can make the sorting better while still grouping by file, or maybe show each warning/error individually. Any thoughts? &gt;* I look at `--help` but would like to understand, what values are default? I'll add defaults to the help text in the next release, should clear this up. &gt;* Btw, there's a type with `cogntive`, no? Typo, will correct this. &gt;* Or for `--complexity-warning-treshold`/`--complexity-error-treshold`, would be interesting to see what the defaults are. These disappeared with the change to getopt. The php-cli-tools library showed this in the help text. I'll add this info back in the next release &gt;* Btw, it's spelled `threshold` Fixing. &gt;* I would have expected dedicated fields for: severity (warning, error), score, method name I think adding this information would be really valuable and will add it to the todo list. Good tip. &gt;* * it's spelled `Anonymous` not Anonynous. Fixing. &gt;* it requires a way to ignore files/methods Agreed. File based ignores are required. Not quite sure about method based ignores, why would you not want to write DocBlocks when you are going to write an ignore statement? &gt;I can't really say I would use something like this, but these were my first impressions. Thanks again for the feedback. I really appreciate it! English is not my first language but some of the mistakes I made are just sloppy. Will definitely fix them.
If it's creating them all over the place, then I'd agree that it's problematic. How are you running the tests to cause that behavior?
Grab 2 sentences from a different context and make a new one, then you get this indeed. I described a feeling I had. I don't see how this is passive aggressive. If the decisions aren't disconnected from the community, show me. I've been having this feeling for quite some time due to declining of several RFCs and the mails I've seen coming by. To me it feels like the core team is taking a step too far to protect backwards compatibility, to a point where it limits progression. 
I would take a look at Martin Fowler's Refactoring book. https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/
I had to do this for a large legacy php app once. It all depends on the current state of the code base but here is what I did. Introduce a front controller with routing and add autoloading. Then work through the app piecemeal one section at a time. Separate everything that isn't already separated into views, models, and controllers. Remove hard coded inline dependencies and have then loaded via the autoloader. Once a section is completed add the necessary routes and test it. Move on. This keeps the app functional the entire time and you can compare the behavior to the code you are replacing.
The internals people are just people. They naturally disagree with each other on various topics. You are ascribing this disagreement as a 'bad behaviour' with those people deliberately being 'passive aggressive'. You are doing this in a way where you are making passive aggressive comments because you disagree with their disagreement. If you can't see the irony in this situation, then that's your problem, and you're going to continue to be frustrated by not understanding why people behave like they do.
Use Rector to upgrade the code for you.
[removed]
It's not the updating the tests that is the issue, it's all the rest of the legacy code that needs touching. Lots of code isn't namespaced and uses a custom class loader. It's not that simple.
I still reference the book often.
And writing your own auth, routing, templating engine, database accessor, etc. etc. etc. is quicker? Come on, this is a ridiculous response.
Try devilbox. Local files are mounted to the container. Easy to spin up and manage your domains. http://devilbox.org
(I am the author of [MLAPHP](https://leanpub.com/mlaphp).) Yes, it's still relevant, in the sense that applications of the kind described by the book still exist and are in need of modernization. As to whether or not it applies to your particular situation, I can't say, but Leanpub does offer a 45-day no-questions-asked money-back guarantee, so you won't be out anything but the time it takes to look through the book. (As for the money: at $35, it's -- what, an hour or less of billable time? Not too bad!) Regardless, best of luck with your project, and let me know if you have other questions!
&gt; I need to trace execution from parsing to the code paths that the PHP code causes the interpreter to execute. If this is for performance measuring, there is a good chance that there is an extension for that...which might save some time. &gt; I will probably just add a trampoline to every function First - https://www.youtube.com/watch?v=a_VTvQLAfaE Second - 'trampolining' was used as part of the implementation for Closure:fromCallable() https://github.com/php/php-src/commit/63ca65d so it's possible that might be quite relevant for what you want to do. Also https://chat.stackoverflow.com/rooms/11/php can be a good place for asking questions...
If it's PHP 5.3+, there is a big chance it actually is simple. Rector supports pseudo_namespace migrations already. But if you have 0-namespaces, there is probably already some directory structure. From that, you can generate class names map and migrate to FQN classes. I've migrated a few legacy projects and unless it's fuctional-only Wordpress on PHP 5.2 and older-type of code, there is always some pattern to start from.
Again, not that simple. We have a global `import` function with tricky custom logic, which is used inline to a bunch of code. And there's some weird things like the import calls pulling it more than just that class, but also sibling/helper classes. The code base is pretty large, so automated namespace fixing is prone to a ton of errors. We wrote a custom "namespace rectifier" script which tries to do most of the work, but it still has to make all kinds of assumptions and doesn't always succeed. We also have directory names that use reserved keywords like `include` and `interface`... so we need to alias those directories for namespacing. We're at the point where 7.0 works fine and are using that in prod, but there's still a lot of deprecation warnings that we get hit by. There's also large segments of the code that isn't covered by tests, which are procedural (no classes) which makes it really tricky to make sure we're safe to move up PHP versions. Part of the plan is to rewrite some of those sections, the procedural parts being an admin interface; we'll build it with a React frontend as an API. But there's so much going on in there, it's quite a large undertaking for a small team.
Thanks. Is it possible to have different versions of PHP for each project?
http://devwithlando.io
Vagrant + scotchbox. A dependency is having virtual box installed. 
It seems like your understanding of the situation at a great level. From your description, I understand what is the code like and I can imagine how to change it, which is very rare when someone talks about legacy code :). "Model", "Controllers" and static/services locators are usually the best parts (= the largest parts with some rules) to let AST work on. &gt; The code base is pretty large. AST works with 10 file and 1000 files the same way, it just takes a bit more time to process. That's what's so awesome about that. Google uses similar AST-based tool, just for C, called [ClangMR](https://www.youtube.com/watch?v=ZpvvmvITOrk). The talk pretty much explains the scale is not an issue, just benefit. &gt; We're at the point where 7.0 works fine The best version to refactor to, great! &gt; the procedural parts... Actually, here AST can help as well if you find some patterns in it.
I know we could be making sweeping changes with rector really easily, but the thing is, we need guarantees when it comes to namespacing and such. It's just too risky to make the changes all at once. We've been making small changes, testing those, releasing them, rinse/repeat. Also most static analysis tools just get confused because it can't figure out the types. There's a lot of classes that we're `use`ing that don't have the `namespace` declared because it would break every other file that imports them the old way. Also PHP likes to throw notices if you do `use Exception;` in a non-namespaced file so we need to use `\Exception $e` everywhere to be safe. Same with any other built-in root namespace class. Right now, a full code coverage report takes about 25 minutes using the xdebug tooling, which is why I want to switch to PCOV which should have much much lower overhead. phpdbg segfaults for me on 7.2 (coworker got it to work on 7.3 though)
Well, if you want to trace PHP scipts you have to look into PHP/Zend internals, tracing the C/system-level hings only gives very limited context information ... but well, I can only speculate about your needs and goals
https://phpdocker.io/generator 
I don't think any of us have a desire to work with someone with the mental maturity level of a prepubescent boy for any amount internet libertarian bux.
&gt; Symfony for enterprise, Laravel for quick projects. Or Laravel for enterprise, Symfony for quick projects. They are both good at pretty much any scale. I'm using Laravel in enterprise now.
Laravel and Symfony. Don't pick one. Learn both. They are similar enough that its not a big deal. Maybe start with laravel cos its a quick start and the tutorials are better. But don't just stay with laravel and never branch out because you are comfortable. Learning symfony will make you a better laravel developer and vice versa.
&gt; Have local SSL set up (for https://site1.local) I'll probably get downvoted for this but I would skip this step for local development. Deploy it to a development server where you can put an actual server name on it with an SSL cert, if you want to test the app with an SSL cert. At the very least, point an actual FQDN do the app like, "dev.spring1010.com", even if you have to do it with your hosts file. That way you get better results with how the app works with a FQDN and SSL cert.
Dev With Lando or DDEV
I see. Agreed, the testing is very important. We're using Rector to migrate to not-so-old yet still complex code-base, from Nette to Symfony, and the situation is similar. Though it might seem as a huge step to do "global" changes like "use namespace everywhere" or "switch framework" on code without 100% coverage, in my experience you gotta just try. In the end it's a matter of proper setup. First one always fails. Iterations with feedback make it flawless. So if you don't have classes with duplicated names, I'd still say it's easy to migrate :)
Could you give short intro what is good for and why you made it? I don't get it from the README
With Docker, I am not recommend ssh into container to do something. I dont know why you need it. But you can explain here and people can help you with it. Docker and Kubernete made some different from tranditional way to deploy and management services. Maybe you would like to read about micro services's concept. And Kubernete concept. Or about how to deploy application on Kubernete in GCP... 
your loss
&gt; Avoid the built-in-masochism of directly using `docker` or `docker-compose` Wait, what? I get that the `docker` command might be a bit of a big one for noobs, but docker compose is literally just `docker-compose up` for most scenarios.
I never said it was quicker.. You should read the entire thread.
They're probably just looking for something like [Docker's exec command](https://docs.docker.com/engine/reference/commandline/exec/). Just something that allows them to execute commands in a running container.
I'm not a huge fan of generated code, but given most of my immutable value objects follow the same pattern, it might almost be enough for me to give it a try. Thanks for sharing!
&gt; How are you running the tests to cause that behavior? Mostly individual tests or classes using `--filter` Syntax, via IDE. In such case these cache files not only appear at the projects root but at the directory where ever I ran the test.
My advice is to learn the tools by themselves. There are plenty of tutorials on using Docker out there and docker-compose makes things simple. Once you are comfortable, then you can look at frameworks or wrappers. Using helpers without understanding the underlying tools is asking for trouble.
I think they mean writing the docker-compose.yml file. Just like "vagrant up" is not hard to type, but using homestead is a lot easier than writing your own Vagrantfile with provisioning.
&gt; I'm going to think about how I can make the sorting better while still grouping by file, or maybe show each warning/error individually. Any thoughts? In my case, sorting for score, the grouping would become irrelevant. &gt; Agreed. File based ignores are required. Not quite sure about method based ignores, why would you not want to write DocBlocks when you are going to write an ignore statement? After scanning my project, I've a method in a class like `initializeValiations`. It contains probably 100LOC. There is simply no point in either breaking it down or documenting it. Cognitive complexity or not, the code is self documenting. But this mustn't necessarily match other methods in the same class. Thus the idea to also ignore on method level. PHPStan has this implicitly available but not always spot-on. You can ignore errors "by message" which _most of the time_ contains the method. But not always 🤷‍♀️ But this idea may be overblown but TL;DR, yes, I would see the use case for method-based ignoring. &gt; Thanks again for the feedback. I really appreciate it! I really do value people making efforts on their project and open them for feedback/criticism and in your case, something I might be interested looking into. Win win :-)
Isn’t using Twig a little bit of an overkill? What if I’m using some other template engine? I’d have two complete template engines in my `vendor` folder. Besides the usage of Twig I can understand the idea behind this. But I feel this should maybe not belong in your dependency list, but maybe in a stand-alone fashion or an IDE plugin. Remember that dependencies will become part of your codebase and this tool feels very much as a personal preference instead of an (essential) part of your application. Maybe using it as a separate tool is a better use case.
Nice - I’m a big fan of value objects. I use a PHP port of AutoValue: https://github.com/space48/auto-value-php
I opened a bug for this: https://bugs.php.net/bug.php?id=77562 The no-type-variance RFC was intended to avoid this exact problem.
yeah i reread that conversation. didn't look to good where i was coming from.
Thank you for realizing that. I hope you understand my initial comments were not trying to come of as aggressive, just very cautious. Freelancers, especially newer ones, get burned a lot. When I first started out I ended up doing about 12k worth of work for someone that sounded just like your post does and never saw a dime. Most of us have similar stories. Asking if you have funding when you discuss an "idea" is pretty common.
it was a lot of things adding up and i also didnt realize how harsh i was comign off till somebody just mentioned it to me and i reread it. i keep having the exact opposite problem is why i got so defensive i guess. i have money and am paying and have proof i can market the idea but i keep running into developers who can not get the job done and come back to me everyday asking for more and more money its quite frustrating. i do not know where to look to find a good developer to get my jobs done.
Huh. Was it a regression? Did it work at any point in 7.2? I'd try it on 3v4l but I'm on my phone.
Yeah, because you could learn something on the way...
That's a fair point, it looks like we've all had our problems getting burned. To be honest, you may be better off looking for an established firm of at least a few people rather than a single developer. With that, you at least have the guarantee that they know what they're doing enough to stay in business and pay their employees.
I think, main use case of immutable objects is multi threaded applications. You should getin concrete state of every object at every moment.
my main problem is this business is not something i can be openly discussing in real life which makes the developers to work with even more narrow and harder to find.
&gt; I think the contravariance change was meant only for arguments and not return types Yeah, you're right. :-/
There's no need to fork PHPUnit itself as the changes are only in the code coverage package. I'm also stuck with an old version of PHPUnit and backporting the changes took around 20 min. If you're using other testing frameworks that utilize PHPUnit code coverage under the hood, there may be a couple of additional changes required but still very few.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Immutability is about knowing for sure that the object your dealing with is not going to change beneath your feet. In the cases where immutability makes sense, it’s sure to lead to less bugs. A common example that I see is forgetting that the standard DateTime::add affects the original object, e.g. php &gt; $dt1 = new \DateTime('now'); php &gt; $dt2 = $dt1-&gt;add(new \DateInterval('P1D')); php &gt; var_dump($dt1-&gt;format('c'), $dt2-&gt;format('c')); php shell code:1: string(25) "2019-02-05T09:09:15+00:00" php shell code:1: string(25) "2019-02-05T09:09:15+00:00"
I've found it useful on a legacy code base I maintain.
As I see this is a command-line tool, therefore you can install it outside of your projects and use it from there. Otherwise the README suggests to add it as a development dependency only, therefore you won't have it in your production vendor folder. Note: it is usually a huge security risk if you put your dev dependencies to production, therefore don't do that, ever.
Yes. Also, Michael Feather's book is good (I think they both reference eachother as they're both in the agile/tdd clique) https://www.amazon.co.uk/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052 (tldr; write unit tests where you can)
I wonder is there a recommended value-object lib which could be non-immutable? I have a value object which has a BIG string and the string is very frequently modified. I feel it is kind of performance waste if the whole object is recreated every time when I modify one of its property. Or this is a over concern?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This is a blog post I wrote last year https://tharris.io/post/docker-and-laravel-development-environment/ Ymmv as it assumes a bit of docker knowledge
I didn't mention what I already have: * .env files support * .ignore * BashSupport * PHP Annotations * Symfony Plugin * YouTrack Integration Plugin
You should be careful about blindly creating getters/setters for every member of a class. It is anti-pattern in OOP
I'm quite interested in why you're planning to rewrite or refactor this. It's only 2 years old. It works. The people who wrote it are presumably still around. It's talking to a "legacy" database, which presumably means that it's due for replacement soon. No offence meant. I'm just genuinely interested. Maybe it's a pilot project which will then be used to refactor other stuff too?
the 2nd edition just came out too, with examples in Javascript!
Care to give more info about that anti-pattern ? I'd like to read on it.
I recently hooked up a new environment with multiple sites behind an nginx-proxy in docker, seems to be working fairly well [jwilder/nginx-proxy](https://github.com/jwilder/nginx-proxy). You can then have separate containers for each web app either with nginx forwarding to different php-fpm containers or built with different php-apache versions
Here's a good entry point: https://beberlei.de/2012/08/22/building_an_object_model__no_setters_allowed.html
I have it and it is a lovely edition with colours and a ribbon bookmark thing. It's so nice that I nearly forgot it was 30 quid
Somehow I don't like the idea of having this in the templates - it's not a part of the looks.
Sounds like phpunit is putting the files at the working directory, and PHPStorm is running phpunit from multiple working directories, rather than being consistent about it. I'm not sure which part of that I consider to be a bug.
Just recently setup laradock, instructions were straight forward, and allows me to develop pretty easy multiple projects
Sure thing - there is a link below but the basic premise is that we should only allow modification outside of the class if it is required. It would be better to internalise the logic if possible. So if you are blindly setting a getter/setter for members you may as well just make the member public for all of the good you are doing.
Is it just me, or does this sound like a very bad idea? 
why? Sounds entirely fine to me.
Same here. I would just not apply :void to the parent class then. 
Yeah, I also fail to think of a super valid use-case for this. It sounds pretty messy and I would assume you can only get to this state if you have an issue in your underlying class / application structure.
It makes perfect sense. It's perfectly type safe, and really no different to allowing a return type to be narrowed from `?int` to `int`, which is currently allowed (and rightly so). But I've had very little success in this sub explaining why covariant return types are fine, so I expect no more success here /shrug
I've written quite a detailed response but I'd preface it with this. Unless you have a dev ops team that can just set all this up and working for you **I'd recommend going on a course**. You are going to find this a very different way of working and everybody is using it very differently so the material online can be confusing. &gt;Run multiple websites simultaneously No problem this is what docker is designed to do &gt;Have each project accessible to it's local hostname (such as [http://site1.local](http://site1.local/), [http://site2.local](http://site2.local/), etc.) instead of port (such as [http://localhost:8000](http://localhost:8000/), etc). By default your browser will try to connect to port 80 for the hostname you provide and you cannot run more than one process or container that is listening to the same port. You would need each container to be running on a different port. The only way you are going to be able to achieve what you describe is if you run a reverse proxy like nginx on your local machine configured to route requests for each domain to the corresponding port exposed by the docker container and then add each of those development domains to your hosts file pointed at the [127.0.0.1](https://127.0.0.1). This is probably far more work than it's worth. At our place we add development domains to our hosts file but we still have to enter the port number in the address. We do this for one reason and that is so that we can get more useful auto completion in the address bar of the browser. &gt;Have local SSL set up (for [https://site1.local](https://site1.local/)) Why would you want to do this? The development site is local and would not be for access outside your own machine. Your development environment should not use or store any real sensitive data. If someone somehow managed to listen into requests to your development site they should only be able to see dummy data or nonsensitive data. Not to mention the fact that you would have to have certificate's signed for all of those development domains which again is going to be far more work than it's worth. You should set up your SSL key on your production environment and it should stay there. Don't ever store SSL keys in code repositories. &gt;Have different versions of PHP and MySQL for each project &gt; &gt;Node/NPM No problem this is what docker is designed to do &gt;SSH into each container/website You can get a terminal for a container but you don't normally SSH into a container. This is because a Docker container is **NOT a virtual machine** it is a virtual environment. In simplistic terms, all the processes that run inside a docker container are actually running on the host machine, they are just being "tricked" into thinking they are running in their own isolated environment with their own file system and their own ports. So you don't need to use SSH because you don't need to SSH into your own machine. Instead you can run a terminal process within a container to effectively achieve the same thing. \`docker exec -it YOUR\_CONTAINER\_ID sh\` or if you have bash \`docker exec -it YOUR\_CONTAINER\_ID bash\` &gt;I mostly work with Laravel framework, so I need Webpack you can run it all through a node docker container \`docker run --rm -t -v $PWD:/usr/src/app -w /usr/src/app node:latest sh -c "./node\_modules/.bin/webpack dev"\` &gt;On production I use Apache, so I need the same thing locally as well There is an apache docker image you can use locally and in production. &gt;I'm running Windows 10. I know I'm not going to convince you to overhaul your setup but be aware that docker only runs natively on Linux. To run it on Windows or OS X you have to run a linux virtual machine and this tends to open up a lot of other complexities which effect speed in particular. &amp;#x200B;
This would require *contra*variant return types, which is unsound. The RFC makes an argument for why one might want to allow it *anyway*, but the baseline here is that this change is going to violate type safety and LSP.
Did you considered moving to generic types describing types/kinds of parameters CLI apps take in? ssh would roughly follow unix convention. You could move away for low-level code that knows everything to a few low level formaters one for each distinct kind of parameter that does string concatenations. While each command would be described by descriptor that provides all the info. Bonus points if user have control over those options directly you could use those descriptors to generate UI for user. Otherwise some kind of translation will have to be implemented so exact descriptors for specific use cases are provided to lower level formatters. Basically that's CLI argument parsing in reverse ;)
I'm not sure it makes sense to talk about co or contravariance when subclassing a void method. Asking if a particular type is wider than the absence of a type is more Buddhist philosophy than compsci. I can't see how it can be said to violate LSP? Well, assuming nobody peppers their code with `assert($obj-&gt;voidFunc() === null)` of course. But that's no more sensible than peppering your code with `assert(get_class($obj-&gt;someFunc()) == 'ExactBaseClass')` Unless you have an example in mind that I'm missing?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Don't put wheels on it unless you want it to roll
Additionally: support for the PCOV coverage driver!
Thanks ! I have to admit, coming from Java I saw getters and setters as defaults for any object that is a "data bag". It's very interesting to learn about it as an anti-pattern, I'll be sure to think more deeply about it in the future.
I can see why :) A good way I have seen it put it “don’t ask for information, ask the object that has the information to do the work for you” 
Ps no object is really a “data bag” in OOP - at least it shouldn’t be if you are thinking in a OOP mindset
This is not refactoring, it is remodeling. Refactoring in the OPs question means taking a piece of code that is relatively spaghetti, and thoughtfully rewriting part by part to make it more modular and maintainable. If you use an automated tool for a PHP5 spaghetti project, you will receive a PHP7 spaghetti project, which will need refactoring anyway. It helps with some basic stuff, but making it maintainable and extendable will still be a major work item.
For this reason: &gt; As of right now, each process is represented by a model class, and all of the business logic is contained within one or two functions in each class. They want me to take this code and refactor/rewrite it, and add test cases. Maybe I should have expanded on that point. These are functions that span ~200 lines each, and typically go ten to twenty levels of conditionals/indentation deep. The developers who wrote it were still relatively junior level when they started the project. They asked me to refactor it so it's easier to understand and maintain. As it stands right now, it's not 100% functional, and updates tend to break other things in the process that weren't accounted for (a classic case in the argument for unit testing). 
Yes, that's one thing I'm looking forward to with this one. We just made the switch to PHP 7 around December 2018.
Laradock works perfectly well, but I find the number of service options and config overwhelming. I can't tell you how many times I've hit `docker-compose up -d` in my laradock directory just to watch it try to build the kitchen sink (I usually use a bash alias to just start what I need, but still). It does make a good starting point if you strip out what you don't need though. &amp;#x200B;
That's good to know, thanks for your response.
You can do refactoring, remodeling... whatever you need, if it's PHP 5.3 code. You can turn spagetti into object-oriented dependency injection clean code. Don't get limit by the naming "instant upgrades" or "instant refactoring". You can do all PHP changes human could think of. That's what AST is for.
Ah thanks, that's way out my work scope. 
Wouldn't this RFC solve this issue? https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters
&gt; I'm not sure it makes sense to talk about co or contravariance when subclassing a void method. Asking if a particular type is wider than the absence of a type is more Buddhist philosophy than compsci. I agree. I was just saying that covariance is not the argument to make here. &gt; Unless you have an example in mind that I'm missing? The example I'd have in mind is a generic parameterization over a `void` type (which is rather speculative of course, as most languages don't allow parameterizing over void).
So in PHP 8 we'll have an interface that will enforce no behavior at all.
Can you provide minimal example of LSP violation by this RFC?
I just dropped nginx/php-fpm and went with roadrunner+symfony4+php72 (yep for production)
Null is not void ;) Null is perfectly fine value. Type consisting solely of null still have a single value. Thus a function can return that value. No value is different matter entirely. No value is what you "get from" infinite loop, or other such value-less situations.
Well I will.give you that, the amount of options you have available can be overwhelming. For now I'm just running docker-compose up -d nginx mysql portainer I don't need portainer but just limiting to nginx and mysql will bring up my containers. You can pin specific php versions for the different containers you build, I don't have a need for that yet, so I have not gone down that path. 
PHP 4 called....
Author of the Devilbox here. It does cover all of your requirements: * [Run multiple websites simultaneously](https://devilbox.readthedocs.io/en/latest/features.html#unlimited-projects) * [Have each project accessible to it's local hostname](https://devilbox.readthedocs.io/en/latest/features.html#virtual-host-domains) * [Have local SSL set up](https://devilbox.readthedocs.io/en/latest/intermediate/setup-valid-https.html) * [Node/NPM](https://devilbox.readthedocs.io/en/latest/examples/setup-reverse-proxy-nodejs.html) * [SSH into each container/website](https://devilbox.readthedocs.io/en/latest/intermediate/work-inside-the-php-container.html) * [so I need Webpack](https://devilbox.readthedocs.io/en/latest/readings/available-tools.html) * [On production I use Apache](https://devilbox.readthedocs.io/en/latest/getting-started/change-container-versions.html#id7) The only thing that is currently still being developed is: "Have different versions of PHP and MySQL for each project". This does not work yet out of the box, but can already be configured via `docker-compose.override.yml`. You can find the ticket for that feature including some of the manual examples here: https://github.com/cytopia/devilbox/issues/146
&gt; Null is not void I agree! And yet... &gt;&gt;&gt; (function():void{})() === null; =&gt; true
!Remindme 5 hours
Thanks. That makes sense. 
Actually, to improve your php skill, use a framework, and learn how it works. Otherwise you won't learn anything useful from using just pure PHP. It's a language and a tool, that you can shape it to whatever you like. You need a learn coding patterns to make you a better programmer. Good luck!
Honest opinion? Don't do it. Being an entry-level web developer with a template doesn't not make you able to write an ecommerce site from scratch. At least, not a safe and secure one. If you're doing this as a learning project, then that's great. But if you're doing it with the intention of launching it on the general public, please don't. Not yet.
And you wouldn't just use an array in this scenario because....? &amp;#x200B; These are anaemic domain models which itself is a bad idea. The fundamental problem is that objects aren't really required here. You have some \*data\* without corresponding behaviour. Whatever uses these classes has to read the values from the object, breaking encapsulation in the process. &amp;#x200B; Generated code is duplicated code. If you need to generate classes like this there is probably a better solution. 
:void also works on PHP7.1 so this changes does not require PHP7.2+
Use wordpress with woocommorece plugin. Sorry for not saying what you want, but writing a ecommerce site from scratch is dangerous as security wise. 
As a 10+ year PHP developer, just the title of this post gave me PTSD.
I am doing it just for Practice so any help will be highly appreciated.Have no intention to make it live for public.
Rule #4 &gt;[/r/PHP](https://www.reddit.com/r/PHP) is not a support subreddit. Please visit [/r/phphelp](https://www.reddit.com/r/phphelp) for help
Yes. You can specify different versions of PHP, MySQL, Postgres, and other others per project.
Is void coerced into null? Will declare_strict prevent this?
Like everyone else said, do not roll your own e-commerce platform. There is way too much complexity to work on there. I would recommend using Laravel, since even using that, you will learn a ton. You are still writing tons of code, and you will learn to consider things you may not have thought about. If not, I would recommend you start by designing your database. Design the tables for your products, orders, categories and most important, relationships. You'll then need to work on the php code to perform all the Crud operations. This will include all the static and dynamic routing. Honestly, something like this might take you several months if you're more of a beginner. Good luck learning. Once again, I'd recommend Laravel, and learning to implement its payment integration features. 
dont get your downvotes, this is proper advice i mean this whole post just seems so confused &gt;i dont want to use frameworks &gt;i have a template ready 
Why not use and contribute to an open-source PHP eCommerce framework ?
Think on it as a typed data structure or a value object. It's not suited for Models and in fact I don't even use OOP at all ¯\\\_(ツ)\_/¯ I rather trying to FP as much as possible, even on PHP.
No, from this [RFC's internals discussion](https://externals.io/message/104091): &gt;the RFC does not cover the variance of the void type &amp;#x200B;
This may be downvoted but if you are on Windows I wouldn't bother with local development using Docker. I've found there to be too much overhead. I would stick with something like Homestead.
I strongly recommend you experiment with [Docksal](https://docksal.io/). We use it for all of our development at this point, and it has very strong continuous integration support. What I really appreciate with Docksal (aside from huge productivity gains) is how it has actually taught me about Docker by looking at how it's built under the hood. Also, it's out-of-the-box defaults support everything you listed, and it does have Windows support. Docsal also has a gitter community!
So confused as to how a Git client has any relation to a language other than offering syntax highlighting. 
I'm really into functional programming, even on PHP and one of the main pillars is immutability. This gives you the ability to share objects between, Swoole's Goroutines for example, without any hassle about memory sharing.
gmaster is a pretty complete Git client. It not only allows you to visualize the branches in repos and workspaces; it also includes a semantic merge tool. Semantic means that it will reduce the number of conflicts by understanding the language in which merges are being performed. Syntactic diff tools are unable to detect as many changes to the same files as a semantic diff can. 
[https://github.com/krakjoe/pcov-clobber](https://github.com/krakjoe/pcov-clobber) &amp;#x200B; Please upgrade though ... this is not nice ;)
Didn't know about this project, thanks for sharing!
Hello, I'm organizing the Tech In Porto, a tech conference happening at 13-14 of June 2019 in Porto, Portugal. Currently, we still have available spots for speakers in the development track. We are a non-profit event, We will donate all the money raised to charities &amp;#x200B; If you are interested, please submit the CFP in [https://techinporto.com/](https://techinporto.com/). Thanks!
my current philosophy is to only use arrays for passing data around within a class, and objects to pass between classes. Two main reasons that always apply: you don't need to verify a key exists before accessing it, and objects allow auto-completion and auto-refactoring of property/method names in IDE. Neither one of those is a big problem within a single class, where you can (theoretically) easily find all the array keys being used. When many different classes are consumers, it's much harder to ensure consistency when you're dealing with free-form strings. Sure, you could use constants for your array keys to help with that aspect, but are you any better off than using a class at that point? You still can't ever assume the key is defined.
The mailing list form is now fixed :)
Okay this is kinda really cool
No need to speculate: I need to trace syscalls, but I need some context, so strace doesn't fit my needs. I need something similar to this: &amp;#x200B; $ [`myscript.py`](https://myscript.py) `php -a "popen('/bin/ls');"` `phpinterpreterfunction1(a, b, ...)` `phpinterpreterfunction2(a, b, ...)` `...` `CALL: popen('/bin/ls'); // call to popen() I want to trace.` `return` `return` `return` `anotherphpinterpreterfunction(a, b, ...);` &amp;#x200B; My idea was to: use ptrace() or a dynamic instrumentation framework to intercept every function and its arguments/return values, output the name of the function and some other information and then continue the execution.
Noice.
Why would you need to clone an immutable object?
Ahah, thanks for the Simpsons reference too. As I explained in another comment, I need something similar to this: $ [`myscript.py`](https://myscript.py) `php -a "popen('/bin/ls');"` `phpinterpreterfunction1(a, b, ...);` `return` `phpinterpreterfunction2(a, b, ...);` `...` `CALL: popen('/bin/ls'); // call to popen() I want to trace inside phpinterpreterfunction2().` `return; // phpinterpreterfunction2` `anotherphpinterpreterfunction(a, b, ...);` `...` The point is tracing syscalls with some more context than strace. I'll take a look at Closure:fromCallable(). :)
Found some good reading, about javascript and jit: [https://robert.ocallahan.org/2010/11/implementing-high-performance-emulator\_01.html](https://robert.ocallahan.org/2010/11/implementing-high-performance-emulator_01.html) [https://hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/](https://hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/) [Javascript (JS) is a lightweight interpreted or JIT-compiled programming language with first-class functions. While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as (...)](https://developer.mozilla.org/en-US/docs/Web/JavaScript)
That's hilarious. Thanks, I'll try this out!
`void*` and `interface{}` - now coming to PHP. Actually... please, no.
*Hey just noticed..* it's your **4th Cakeday** silentk446! ^(hug)
Yeah. I see the argument for it, but it’s kind of dicey in terms of adherence to LSP. Seems like it may get in the way of improving co/contravariance in the future though. But since PHP doesn’t natively offer any indicator of results that must be used, I don’t think it really matters in practice. 
I can’t figure out what comments he has answered 😅
Okay cool :) was just noting for potential users 
Void isn't a *type*. There's nothing to coerce. In PHP, all functions and methods implicitly return null unless something is explicitly returned.
The way I see it, this is meant to be `require`d as a dev dependency so it shouldn't be present in production code
7pm GMT is in 10 minutes
Dev dependencies are also part of your codebase. That the code will not be available in production has little to do with that. 
I really need glasses haha, thanks!
Dev dependencies are also part of your codebase. That the code will not be available in production has little to do with that.
Sure, nice disclaimer 
So you say that adding a library that is probably 100 times as large as the functional package as a dependency is no problem? That it is dev dependency still makes it part of your codebase. I’m wondering where in my reply you read that I’m deploying this package to my production environment... 
I think it’s because they will pay to fly you out and get you a hotel so they don’t want to just be out that money. I think the danger is then they can just give you an offer for minimum wage and if you don’t take it they hit you for $10,000.
Lame troll is lame, he's applying for uni, he barely has 14 years of life experience, let alone in a work environment... 
The problem is not only if the code is legacy, but if it is also spaghetti code. I usually try to refactor the persistence layer in a different class. 
It is small, causes little airflow impedance, and is non-conductive. What you do next is you relax and thank yor lucky stars it isn't worse. Then also, you legitimately worry about it falling in to one of the fans... Keep an ear out. If you hear unusual fan noise, get it looked at by a professional. In the mean time, use as normal.
/r/lostredditors ?
It only could be more appropriate if I had a grandson to help me with all this new fangled technology. In all honesty, I'm not sure quite how it happened. /r/lostreddtors indeed.
Windows-only is a huge non-starter for me. I only work on Linux. The semantic diffing sounds pretty neat though. I use GitKraken.
Toit 
I just realised I missed the driver for 7.X, committed drivers for phpu 6/7 just now ... you'll want to use 1.0.1
I've used custom vagrant boxes and custom docker compose setups. Devilbox is looking like it might be my new way to run projects locally. Does it have xDebug installed? Can I use MariaDB instead of MySQL? Can I install MailHog?
Shame it is Windows only. We primarily use Linux and macOS at the office.
&gt;For this reason adding a type to void in subclasses is not an invalid operation, and denying it is a pointless restriction. Changing from void to something else is probably a bad idea, but PHP should not enforce void in subclasses just on that basis. At least the author of the RFC seems to acknowledge that actually *changing* from void to a more concrete type in a subclass really is a bad idea; but we shouldn't strictly stop authors from being able to do it, especially when the return value in the calling code isn't used anyway. To be fair I think this is a bad idea too, I think the intent of the author of the RFC is to make PHP more forgiving of bad programming patterns, and I thought we were trying to steer PHP in the other direction.
Please forgive me for asking but can someone explain the value to me of `"TRULY IMMUTABLE"` objects to me. It just sounds like saying, "objects that can't change or do anything". If you have a model or data object that is not meant to have data change you just declare its members and values in a constructor and jobs done?
$immutable-&gt;withSkepticism(new Benefits());
To me it seems like, in this sense, immutable is used to mean an object that cannot be changed by anything it interacts with, rather than just being something that isn't changed if an app is working properly. I don't know that I fully understand the subtlety but it seems like the author has tried to create classes that simply cannot be affected, even by functions specifically designed to change them. The included classes suggest topics that support this - credit card, uuid, email: all data points that should be created and deleted but should not be edited - by the app or anything else, ever.
Would love to try it out but I'm not going to install Chrome just to play with it. Any possibility of getting this as a Firefox extension too?
I’d tell them to PHPhuck off
 call_user_func ([MY_CLASS, "myStaticMethod"]); But I feel dirty just for mentioning it.
Forgive me, Father, for I have sinned. &lt;?php class Foo { public static function bar($greeting, $name) { echo "$greeting, $name!\n"; } } class Foocade { public static $className; public static function __callStatic($method, $args) { return call_user_func_array([static::$className, $method], $args); } } Foocade::$className = Foo::class; Foocade::bar("Hello", "Mike"); 
What feature are you trying to leverage doing it this way? This will be really confusing for the first 1 minute for anyone not introduced to your project compared to the better first line of your post. Foo::aStaticMethod();
Lol! Look what I published just a day before: [https://github.com/leocavalcante/ippo](https://github.com/leocavalcante/ippo)
Windows only? In 2019? ...
Because Foo (MY_CLASS) isn't always the same class. I'm using Laravel and have multiple controllers for multiple types of posts. Let's use reddit's example of Text posts and Link posts. I have a TextController and a LinkController, these inherit common methods from a PostController. I also have TextPost and LinkPost models that inherit from Post. So when I want to get some text posts I make a request to /posts/text/get. The TextController@getPosts() handles this. TextController defines("POST_TYPE", TextPost::class), but doesn't have a getPosts() method, because its super (PostController) does. So PostController.getPosts() handles the request and knows which post type to get because POST_TYPE is defined. My models do the actual database transactions, so I can just call POST_TYPE::getPosts() and my model (TextPost) handles the db retrieval. This is a very simplified version of what I'm doing, but I think it explains it Perhaps this isn't the correct way (is there a single correct way?). I'm always open to suggestions.
Wow... I wish my interview questions would look like that. 😂😅
\`competent.php?webpage=/etc/passwd\`
Sweet I'll try it out tonight.
I dont know much but is it because it will make a loop?
Hey, why haven't you initialized Composer yet?
Avoid unnecessary closing php tag too!
Just don't use defines. That's not what it's for. I think it would be better to write a trait that you would use on your Text/Link Controllers instead of using inheritance. https://en.wikipedia.org/wiki/Composition_over_inheritance
A much better way is a dependency injection container that has factories that can be changed at runtime. The factory pattern lets you swap out one class for another, if necessary. In a traditional factory pattern, you have a class that returns an instance of the class that you want. The dependency injection pattern says that, if class foo requires an object of class bar at some point, then you need to pass the bar object to any new foo object. It's best to do this in one spot, so that if you need to pass a bazz object instead of a bar object, you can do that globally, instead of in dozens of places. So, the dependency injection pattern is often combined with the factory pattern to create DI containers; objects that have the code to initialize every class that has dependencies. As a rule, your library code should never use the new() keyword, or call the DI container's create method. Your application code should use the new() keyword for objects that will never have dependencies, such as model objects. It should use the DI container's create method very, very sparingly, such as in the application's main entry point, and in routing classes (but definitely not controllers... A controller should know all of its dependencies well in advance). And if you don't understand dependency injection, then congratulations, [you're one of today's lucky 10,000!](https://xkcd.com/1053/) Terms I suggest googling: "Test driven development", "inversion of control", "dependency injections"... and enjoy the articles over at [https://r.je/](https://r.je/)... (I don't personally use his DICE anymore, as I much prefer to explicitly type out my DI factories, but I do use TransPHPorm...)
&gt; traditional factory pattern As developer number 1 million to attempt their own ORM i 99% agree with doing it this way only because of how return type covariance works in PHP i could never get factories to play nice. Because the factory would be returning some primitive of all the types and not the exact type a lot of PHP based intellisense systems stop working. Not the fault of the factory strategy but return type covariance. 
unsanitary
Yeah, I have phpdoc blocks scattered around much of my code, to force PHPStorm to recognize the specific interface that I'm expecting. One of my former managers used the \_\_get() magic method and a very large phpdoc block on the DI container, to get around that. The way I do it in my code is /** @var \RootNS\Interfaces\Foo $foo */ $foo = $diContainer-&gt;create(Foo::class); &amp;#x200B;
This might have wasted one hour for you, that's it. I have been employed by people writing such things!
I dunno, depends how you asked the question. Some people just hone in entirely on what they think they are being asked. If you just said "what's wrong with this PHP?" then well technically there isn't anything wrong with the PHP itself. Not to say that people shouldn't notice glaring security issues, but when you're possibly nervous and are expecting a certain type of question might be easy to get locked into a particular way of thinking. 
I see i guess that does resolve it. How crazy do you thinking it would be to digest your database to make concrete builders for each type? For example i mean make a php script to generate all of these: $foo = FooBuilder::Create($param1, $param2);
The majority of your response went over my head, I understand you also tell me to look it up and learn it, but what do you think of using traits, like MaxGhost recommended? I can wrap my head around traits, but feel I'm a ways away from DI and factories.
I personally prefer to write them out myself, but I know of at least one major project that has a completely auto-generated DI container: Magento. Magento may be a slow, complex, complicated kludge of half backwards-compatible hacks and pandering to the lowest common denominator of ecommerce plugins, but at least they're not trying to do pure dynamic dependency injection on their thousands of classes like Laravel does.
Thank you very much for your insight.
Why don't you just pass the `POST_TYPE` into the `getPosts()` method as a parameter?
I could, but I would have to pass in POST_TYPE to every single one of my methods. Defining it seemed less repetitive. 
This way you are making an implicit dependency. It makes your method less explicit, more difficult to read and harder to reason about. I understand your train of thought, but it's definitely not the way to go. But that's something you learn with time :)
Oh dear. First thing I thought was that they won't see the loading until the page is returned. Then I finally saw it. :)
Php noob, would someone explain for me?
Is the lack of a type a type of type? A lack of flying is a type of flying?
There are a few reasons. &amp;#x200B; The biggest one that jumps out at me is security. By calling the page without sanitation, you are opening yourself up for a world of hurt. Second is error catching. &amp;#x200B; Third is the fact that you will have your page look like this: &gt;loading page...webpage contentpageloaded! &amp;#x200B; Then you can start nitpicking... * Double quotes when you don't expect variables in a string. * Closing PHP tag * Breaking KISS I would write it like this: &lt;?php function load_page($page, $pages = array ('home', 'login', 'about')) { if(!array_search($page, $pages)) { return FALSE; } $incl = include($page . '.php'); if(!$incl) { return FALSE; } return TRUE; } if(!load_page($_GET['webpage'])) { die('Cannot load page.'); } echo '&lt;br /&gt;&lt;br /&gt;Page loaded successfully... although, you already see that because this is beneath your requested content.'; &amp;#x200B;
This allows for arbitrary files to be included via a URL parameter. This can result in things like passwords and other sensitive information being displayed on the screen to an unauthenticated source. It's basically just giving an attacker access to your entire file system.
I mean. I could list a few things 'wrong' with that function. I've been a php developer for years and don't think I've ever actually used `include` before, so I don't like this as a technical question. I mean. It's not even that technical. &lt;?php echo "loading page..."; &lt;-- I cant think of a good case for using echo in a production environment. $webpage = $_GET["webpage"]; &lt;-- Ok, not sure what the intention is here include $webpage; &lt;-- this is going to issue a warning, but what if 'webpage' is an existing filename? echo "page loaded!"; &lt;-- same as above. ?&gt; &lt;-- never, ever do this
Full marks, sir, full marks.
Thanks for explaining
Thank you for this detailed explanation! 
Setting the value of a variable to another variable wastes memory. And security thing too.
Smort
I really want to use Psalm, but no matter what, I couldn't make it work in my environment. Maybe it's just me, or you could improve the documentation. * How can I add/ignore multiple directories? * Shouldn't \`&lt;directory&gt;\\\*\*\` work when ignoring directories (currently it's just ignoring only one directory not \_all\_) * I know VSCode plugin isn't maintained by you, but it has really poor support and it doesn't work under Windows &amp;#x200B; You're doing an awesome job with it, I'd just like to use this more! Thank you!
This is like.... anti-inheritance. The purpose of inheritance is to allow child classes to provide specialized behavior that the parent needs, or to override generalized behavior in the parent. Your TextController, *should* have its own `getPosts()` method that calls `TextPost::getPosts()` directly, since this particular controller is a specialized version of the parent. Any truly common work that is not unique to the type of post, can live in the parent or just be shared via a service that gets injected into each type of post controller's constructor.
Yes! because there is more Windows users than any other.
Here's what I got 1. From a UX perspective the "loading" and "loaded" message are unnecessary 2. $_GET['webpage'] might issue a warning so you need to use `isset` 3. $webpage might not exist so you need to use `file_exists` 4. $webpage is a poor variable name 5. unnecessary closing tag 100% sure that's the correct answer
My question would be how one came up with such question. Because if it's somehow relevant to the company I'm applying to, I don't want to have anything to do with it.
If you define your class as `final` there is no need to add extra `final` to each of its methods as they are all final by default (and its meaningless because you can't extend your class and override them). &amp;#x200B; You also needn't prefix global constants with backslashes as it won't gain you any performance (like with functions).
If this were StackOverflow, I would suggest that this should be the accepted answer. 
Kinda wandering what the reply was to, though.
Not sure why you are being downvoted. Very sensible answer here.
Somebody lost a dental rubber band inside their MacBook and was losing their cool. "Omg, omg, omg! What do I do!" Also,... *your That is a new way for me to 'f' that up. I am allowed to grammar Nazi myself, right?
Perhaps, but software devs who work exclusively on windows? The idea of doing PHP work in windows for me is an unthinkable hellscape.
WordPress using it's REST API. 
It is not obfuscated. So anyone could see at a glance they've been hacked.
This would be my first suggestion too. As soon as it mentioned content like blogs and an API. 
You can use `(MY_CLASS)::myStaticMethod()`. Also, I think what you are really looking for is the class_alias function.
He's good.
I've developed my api base on tutorials so, here's the structure : this is part of api. which all are pretty simple in separated way. what else need to improve my api. i'm using this for mobile app. `DB_CONNECT.php` &amp;#x200B; `&lt;code&gt; &lt;?php` &amp;#x200B; `class DB_Connect{` `private $conn;` &amp;#x200B; `public function connect()` `{` `require_once 'config.php';` `$this-&gt;conn = new mysqli(DB_HOST,DB_USER,DB_PASSWORD,DB_DATABASE);` `return $this-&gt;conn;` `}` `}` &amp;#x200B; `?&gt; &lt;/code&gt;` &amp;#x200B; DB\_FUNCTION.php &amp;#x200B; `&lt;code&gt;` `&lt;?php` &amp;#x200B; `class DB_Functions` `{` `private $conn;` &amp;#x200B; `function __construct()` `{` `require_once 'db_connect.php';` `$db = new DB_Connect();` `$this-&gt;conn = $db-&gt;connect();` `}` &amp;#x200B; `function __destruct()` `{` `// TODO: Implement __destruct() method.` `}` &amp;#x200B; `/*` `* Check User Exists` `* Return true/false` `*/` &amp;#x200B; `function checkExistsUser($phone)` `{` `$stmt = $this-&gt;conn-&gt;prepare("SELECT * FROM user WHERE Phone=?");` `$stmt-&gt;bind_param("s",$phone);` `$stmt-&gt;execute();` `$stmt-&gt;store_result();` &amp;#x200B; `if($stmt-&gt;num_rows &gt; 0) {` `$stmt-&gt;close();` `return true;` `} else{` `$stmt-&gt;close();` `return false;` `}` `}` `&lt;/code&gt;` &amp;#x200B; checkuser.php &amp;#x200B; `&lt;code&gt;` `&lt;?php` `require_once 'db_functions.php';` `$db = new DB_Functions();` &amp;#x200B; `/*` `* Endpoing : http://&lt;domain&gt;/drinkshop/checkuser.php` `* Method : POST` `* Params : phone` `* Result : JSON` `*/` &amp;#x200B; `$response = array();` `if(isset($_POST['phone']))` `{` `$phone = $_POST['phone'];` &amp;#x200B; &amp;#x200B; `if($db-&gt;checkExistsUser($phone))` `{` `$response["exists"] = TRUE;` `echo json_encode($response);` `}` `else` `{` `$response["exists"] = FALSE;` `echo json_encode($response);` `}` `}` `else{` `$response["error_msg"]= "Required parameter (phone) is missing!";` `echo json_encode($response);` `}` `?&gt;` `&lt;/code&gt;`
PHP Desktop v72.0 is ready for testing. Lots of new features were added. If everything works well I will make an official stable release in a week or so.
it's all about your skills... u can solve all your problems with using Laravel. Laravel. if not then u can just using boilers which i don't trust them much. but if your informations are limited to things like blogging u can also use wordpress, almost most of cms got api setup. if they had not u can just do it since they're all using database. 
https://phptherightway.com/ Read everything.
First of all you must understand that this is a very outdated approach, and modern PHP doesn't look like this at all. If you choose to redo your code the modern way, look at the framework, Lumen for example. Create routes for your api calls, write controllers to handle them and define models to access the storage. This will make your code WAY more structured, clean and maintainable. If you choose to keep the approach the same, at least reconsider the classes structure, as such an all-embracing DB_functions class doesn't look anything usable and very soon will become a mess. Make distinct classes based on their purpose. For example, a class to handle users. Given there will bre several classes, they shouldn't be connecting to database in the constructor but accept the already existing connection in the constructor parameter. Also there are improvements for your database connection class: - first, check [how to connect using mysqli properly](https://phpdelusions.net/mysqli/mysqli_connect) (there are some critical parameters that must be set), - also, consider adding a [generic function to run a mysqli query](https://phpdelusions.net/mysqli/simple) The latter would make your methods *drastically shorter*. For example, function checkExistsUser($phone) { $row = $this-&gt;db-&gt;query("SELECT 1 as found FROM user WHERE Phone=?", [$phone])-&gt;fetch_assoc(); return !empty($row['found']); }
oh. thanks. how about laravel? i'm right now working on laravel, and trying to move on to laravel. things good for now with laravel. the reason i was asking about above code was that i still got some problem with laravel which but at last even if i use need to make it safer and better.
Lmao. Thanks mate. i'm on it.
btw, you are formatting a code on Reddit by simply parring it with 4 spaces from the left and am empty line on the top and bottom
Laravel is all right, just keep with it, and by and by it all become clear.
didn't knew that. that's why i moved to git, thanks for info :D 
You're forgetting the most glaring part :D
so basically you're saying that you need a framework that can do basic API stuff? I would say that this question was asked millions of times and you should google this before posting something like this. Have you googled? I doubt.
``` $cls = MyClass::class; [$cls, "myStaticMethod"](); ``` ?
git + tig + gitlab We have never hit any wall in a past few years. Team of about 20 people. 
Windows isn't so bad these days. XAMPP has you covered in most cases. I recently moved to Linux in the past few months and it's been a dream. Though Windows isn't completely terrible. Linux makes my life easier in so many ways. 
It's bad and you should feel bad.
Performance-wise - No. In reality, there will be no difference at all. All performance tests that done without the actual necessity, just out of the blue, are useless. They are done with such measurement errors in such artificial conditions and with such half-assed accuracy that make them a disservice. So I would compare features. The difference is subtle: mysql has async queries, can tell you what rows has been found and what was actually updated; and also has mtsqli_ping that comes handy sometimes. PDO has its named placeholders and abstraction. In the end I would choose pdo, just because you'll never know
Boilers?
This should be irrelevant piece of trivia. Include based project structure while very powerful is very obscure. Competent PHP developer developing with best practices in mind will not ever encounter that issue. On the other hand if your codebase does use such constructs you want competent ***LEGACY*** php developer. There is a difference. &amp;#x200B;
$\_GET content is provided by user making request. E.g. a hacker wanting to break into the system. include is php language construct that inserts file content verbatim into specified place, any file, any file including sensitive data like passwords, etc. At the very least, this code should whitelist $\_GET content to a set of known file names, or known folders (wich is harder to do as you have to account for "/some/valid/folder/../../../some/invalid/folder/some-sensitive-file" is still a valid include path)
What you're really looking for there is a struct, for which unfortunately PHP does not native support. However, a class with public properties will do almost exactly the same thing without any of the messy boilerplate code. 
Programmers like the one who wrote the sample and all the downvoted comments here are why people don't take PHP seriously as a programming language.
&gt; Even if the database is mysql for now, I don't want to tie myself to that database and keep it flexible for future changes. Y tho? What change do you see happening that would make you want to switch? Performance? If you write queries targeting mysql you'll be able to eek out better performance anyway. If you switch to another DB you'll have to write queries targeting that DB to realise meaningful performance gains Features? Maybe you need GIS so switch to Postgres + PostGIS. Guess what, you're back to writing non-portable queries to make use of it. IMO, you only need to design a system to cope with different DB backends if your software is going to be installed by multiple different clients who will have their own favoured DB as a requirement, or if you're writing some sort of library/framework that users will want to run in different environments (pretty much the same thing).
&gt; Windows isn't so bad these days. &gt; I recently moved to Linux in the past few months and it's been a dream. &gt; Though Windows isn't completely terrible. &gt; Linux makes my life easier in so many ways. 
Be careful with array\_search, it returns the index of the needle if it exists, which might very well be zero! if(false === array_search($page, $pages)) {
Ok so you can quote. I said Windows isn't bad but I prefer Ubuntu. What's the problem?
I was merely trying to point out the contradiction in your comment. If windows is not bad but then contradicted with two statements that the alternative(that being linux) is a 'dream' and 'makes my life easier in so many ways' then it is indeed bad. 
&gt; as you have to account for "/some/valid/folder/../../../some/invalid/folder/some-sensitive-file" is still a valid include path) so.. realpath() it and then check if the string starts with the root folder of wherever you want to allow them to include stuff.
There is no contradiction. I'm saying a &gt; b. But using b is fine, just not 'as good' 
Yeah, we have all our .htaccess files in the vhosts and have AllowOverride None on most of our sites to get around the directory traversing issue. As for latency, our applications respond in about 8ms in apache, and... 8ms in Nginx. However we don't serve many static files, it's all PHP scripts and APIs, so the main latency is always going to be in the application.
Yeah, you can normally get away with just using FallbackResource and DirectoryIndex to serve things through a PHP application. And if not, put your .htaccess rules in a &lt;Directory&gt; directive, then set AllowOverride None and you'll save a lot of trouble in the future with performance.
Anyone who makes an argument that they want to be able to easily switch to a different RDBMS down the road is just regurgitating talking points they've read in articles. I've been programming professionally now for almost 10 years and have never worked on a project that switched to a different RDBMS solution, and none of my friends or colleagues have either.
sure, I was responding to your question about using arrays more than making any comment about the OP. sorry I didn't make that more clear.
What kind of a sick bastard would use `"*"` as a version? It annoys the shit out of me that pipenv (yeah, I know it's python and this is a php sub) does this on its own.
It would be great!
Good suggestion
Absolutely do not use mssql. It cost tons of money for licenses and offers fewer features, poor performance, greater maintenance requirements, and less security. I am actively working on migrating my companies application to MySQL and we will be saving over 40K per year in server resources and liscence costs (MySQLs better performance cut our server count in half. I created a PDO abstraction layer that allows hot switching between mssql and MySQL PDO drivers. A base version of it can be found here that primarily uses SQLite for simplicity. https://github.com/danielson317/dphminify And if you use MySQL you can eventually go serverless with AWS RDS which is the dream. 
I posted this in the ticket: &gt; Hey, Psalm creator here! &gt; &gt; Psalm supports the Language Server Protocol. I have [got it working in PhpStorm with an existing Language Server plugin](https://getpsalm.org/docs/language_server/#phpstorm), but it can be a little finicky for large projects (you have to adjust timeouts appropriately). I'm not sure what else PhpStorm could do, tbh.
&gt; How can I ignore multiple directories at once? Would you mind asking this on https://github.com/vimeo/psalm/issues? &gt; VSCode plugin has really poor support and it doesn't work under Windows Though it does work under Windows in the idealised VM environment I initially used, obviously it's a bit of a failure in the real world. I'll have time this weekend to do a bit of development on an actual Windows machine.
I have. Professional for 15 years. I’ve moved DBs from SQLite to MySQL, mssql to mysq, access to MySQL, MySQL to SQLite. Nice thing about supporting both at the same time is the migration can be done gradually on the same codebase with minimal downtime. 
mssql has good performance and security.. I agree with the license costs, but please do not throw around random 'facts' about performance and security that are simply not true.
It's not as simple as you suggest to have immutable classes. That's the point of this library. Also see his other article: http://paul-m-jones.com/archives/6400. If you have an object that you'd like to be immutable, but it has an array or object as a field that should be *readable* from the outside, you're basically screwed. Also, you can (apparently- I didn't realize this) call the constructor of an already instantiated object to set the fields to something different. So some naught function can still mutate an object you thought was immutable.
I don’t have time to dig up the evidence but numbers don’t lie. More users means more testing means better security. And I’ll admit the feature gap is mostly due to me being on an older version of MSSQL due to the license cost of upgrading. But it’s very sad that mssql didn’t even have a proper pager function until 2012. 
I don’t have time to dig up the evidence but numbers don’t lie. More users means more testing means better security. And I’ll admit the feature gap is mostly due to me being on an older version of MSSQL due to the license cost of upgrading. But it’s very sad that mssql didn’t even have a proper pager function until 2012.
If you're comparing an old SQL Server with a new mysql, then you can as well compare a rotten goldfish with a living whale. :-) SQL Servers' security is better than mysql for the simple fact that other processes can access the bin files while running in mysql, no such thing in SQL Server. As for performance: mysql isn't necessarily faster.. except if your database settings or schemes are wrongly configured. Here are some links to read: [https://medium.com/@mindfiresolutions.usa/a-comparison-between-mysql-vs-ms-sql-server-58b537e474be](https://medium.com/@mindfiresolutions.usa/a-comparison-between-mysql-vs-ms-sql-server-58b537e474be) [https://stackoverflow.com/questions/47728392/sql-server-vs-mysql](https://stackoverflow.com/questions/47728392/sql-server-vs-mysql)
I am a big fan of [https://github.com/mevdschee/php-crud-api](https://github.com/mevdschee/php-crud-api) Single file PHP script that adds a REST API to a SQL database. It allows you to build a full RestFull API very quickly
&gt; Double quotes when you don't expect variables in a string. This one really isn't really that valid. There's basically no performance difference, it's just a style/subjective thing ultimately. As for your example, I would tend to try and avoid echoing HTML whenever possible, so I'd close the PHP tag and just write out the text as-is instead. Also another style thing, PSR2, and most of the community, prefer `true` over `TRUE`, and `[]` over `array()`.
Interesting idea! Also for phpstan (sorry, not trying to hijack): https://youtrack.jetbrains.com/issue/WI-35063 =&gt; been there since years and has 100 votes…
You are a rare case indeed. A dev team would need to have rainbows coming out of their asses to ever recommend migrating to a different RDBMS on the same codebase, regardless of whether it's done gradually or not. I can understand it if, and only if, you're rewriting the codebase. I can only assume you wouldn't voluntarily put yourself in that predicament and it was a decision made by management...? 
I think the creator's intent here is a little different - he mainly wants support for Psalm's type system (e.g. \`@template\`) so things like PhpStorm completion work properly.
Clearly the problem is that this doesn’t use a community-developed framework.
[https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger\_effect](https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect)
While I fully appreciate the benefits of immutable objects, I'm not keen on this trend to replace "setSomething" with "withSomething" under the pretence that we no longer have setters and getters. 
&gt; ead in articles. I've been programming professionally now for almost 10 years and have never worked on a Hell, we use PDO, and would like to move to postgresql but it doesnt matter if we use PDO if we are using MySQL specific syntax... 
&gt; It just sounds like saying, "objects that can't change or do anything". Sort of. Take a look here for a description of immutability: https://www.yegor256.com/2014/06/09/objects-should-be-immutable.html The problem is, people take an overly simplified and strict view of immutability to mean "no property on the object can ever change" and that's not really the case. What matters is whether that change is visible outside the object. 
But it's not a setter... It creates a new object without changing the original one. It's like a mutant clone.
But you wouldn't express \`str.trim()\` as \`str.withoutTrailingSpaces()\` or \`str.replace()\` as \`str.withReplacedCharacters()\`, etc or an immutable version of \`array.push()\` with \`array.withAdditionalElement()\`, etc. &amp;#x200B; &amp;#x200B; &amp;#x200B;
It seems that there is a lot of MAC lovers who hate the Windows. That'd explain the negative points.
Sqlite seems to have gotten to the point where one could just about run sqlite in local development and mysql on the server and you wouldn't have any issues when using something like Doctrine. 
If you want to be able to switch databases at a future point, either sacrifice performance, readability, debuggability, and troubleshootability (yep, that's different from just debugging) by using a library that can dynamically create RDBMS-specific SQL dynamically... OR Keep all of your SQL in one directory. As much as I absolutely despise Doctrine and other DBALs, for a tiny, insignificant application, they work well enough. If I'm keeping track of my grocery list and nothing else, I might consider a DBAL just for the fun of it. Never for serious work, though. (And yes, I'm an old cantankerous fuddy duddy who likes to spoil fun. I yell at kids to keep off my lawn, too. ;-) )
&gt; &gt; &gt; ​ &gt; &gt; ​ &gt; &gt; ​ Maybe not. But I do think it's a tiny bit confusing to have `str.replace()` when then original string is not modified (Kotlin does this). I wouldn't mind a `str.withReplacedCharacters()`. In any case, when you tell me "setter" I think of something very specific- a method that changes the state of the object. If these methods do not change the state of the object, I see no reason to say they are setters. 
Is this a joke? Missing type hints, missing return types, bad use of classes, using phps end tags for no reason, requires inside classes, no autoformat, not validating users input, duplicate code, useless documentation, no proper sql..
&gt; tortious interference and is a crime Stick to not being a lawyer. 
&gt; tort (noun); a wrongful act or an infringement of a right (other than under contract) leading to civil legal liability. . &gt; legal liability; responsible or _answerable in law_; legally obligated. k.
&gt; **civil** legal liability. HTH, dipshit. 
Ok look, Im all for constructive criticism, but you are nothing more than a dick. You dont know this person's level, what they have and have not learned or anything else. Rethink your comment, edit it, and write it in a more clear and levelheaded approach. &amp;#x200B; We should be helping others out, not shitting all over them. Lest I go through your repositories and shit all over your stuff. 
It seems to be a opensource project called [https://phpapprentice.com/](https://phpapprentice.com/). It covers basics.
A nice idea but, I only selected php and got a snippets of a different language the second time I refreshed. ```php def decapitalize(string, upper_rest=False): return str[:1].lower() + (str[1:].upper() if upper_rest else str[1:]) ``` ```php def average(*args): return sum(args, 0.0) / len(args) ```
Let's take this a look at this "reference object" aka DTO example: https://3v4l.org/JhM4r Without immutability the values can change everywhere and the external logic does't known it. This behavior can lead to undesirable side effects.
I have had excellent results using doctrine/dbal. In some cases the performance was better than some of the things I was doing with PDO.
For me it started like this, entire IT department (consisting of mostly non web developers and 1 web developer who hasn't ever used a browser other than ie) says they are a microsoft shop. So I go spin up a php stack on IIS using MSSQL, with maybe a few Oracle DB connections as well. Fast forward 18 months and I am kicking ass, boss tells me use whatever the eff I want. Hello MySQL and Linux, do a quick conversion of the DB and I am off and running. At this point I am not using a DBAL, it didn't take too long to convert the DB's from MSSQL to MySQL most of the big data was in the 3rd party Oracle system anyhow. No real pain. Then I get the opportunity to grow the team, hire a few Jr. devs, they can't agree on shit and everyone wants to handle the PDO wrapper a different way. Rather than argue about effing code I just said fuck it we are using Doctrine's DBAL problem fucking solved no more arguments.
Thanks for answering and looking into the matter! :) Please let me know if I can help with anything (testing, whatever), I'm more than happy to do it! I'll open an issue on the repo regarding multiple dirs.
Thanks - there’s a ticket in the plugin repo about Windows support. Subscribe to that so you’ll get updates.
If this were StackOverflow, the interviewer would refuse to see him because he was a duplicate of the first interviewee.
Nice. TIL I'm not old, I'm just a legacy PHP developer!
It seems to be one of the things which internals which, if not outright opposed to, are unconvinced of, mostly due to the complexity. It was recently mentioned here: [https://externals.io/message/104073](https://externals.io/message/104073) Personally I'm a big fan of function overloading in C++ and would love to see it in PHP. Personally I use the following a lot: ```php public function get(string $index, $default = null) { ... } ``` Where the default type is used to infer the return type. But obviously without explicit casts, this can't convey type information in PHP as it currently stands.
PHPStorm comes with support built in for a lot of JS stuff. I don't know if JetBrains withholds any functionality for WebStorm, but I haven't found myself wanting for any functionality from PHPStorm..
Already did it yesterday ;)
I had trouble installing a plugin for Vue into the version of PHPStorm I have. I installed Atom. So, for now, it has joined the stable. PHPStorm (main IDE), Atom, Sublime, Kate, &amp; vi. I am so tired. But, now that I am laying down in my bed I can't sleep. Too tired to think straight or be productive though.
I started using PHPStorm exclusively a while ago. Depending on your setup, the pain of switching IDEs simply does not compare. I have had very good experience with React, Polymer, VueJS and Angular and never missed any functionality. Although I have to say, that over the time I have had to "teach" the inspection quite a few things. But every time spent on the IDE was well invested and ultimately enabled me to gain efficiency. The only thing Jetbrain really has to do is finally get the backtick issue so many report under control. It starts to become embarrassing.
Direct Link: [https://medium.com/@kylekatarnls/handle-dates-the-right-way-in-php-c215650fc4fa](https://medium.com/@kylekatarnls/handle-dates-the-right-way-in-php-c215650fc4fa)
I think Java like method overload's not gonna happen anytime soon. PHP's new strict type system is cool but it's sub-type system is a joke. But there is an accepted RFC what resolves this question. The sub-type system currently is invariant. That means for example if a parent class foo method returns MyClassInterface type then the child class' foo method what implements the parent can not return the MyClassInterface's implementation the MyClass, only the exact same interface has accepted in this case. That makes a lot of overhead in safe strict type based development (but it's still better than the non-strict old school version in my opinion). There are a proposal to make this invariant sub-type system to more covariant and it's already accepted: [https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters](https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters) It's still in development stage: [https://github.com/php/php-src/pull/3732](https://github.com/php/php-src/pull/3732) This should be done till PHP 7.4 release, it means we can use it around 2019 Christmas. I've been using PHP with strict type since the release of PHP 7.0, I feel this feature is a must have. &amp;#x200B;
For JS it is exactly the same IDE, not two different: “All the features in WebStorm are included into PhpStorm” - “PhpStorm = WebStorm + PHP + DB/SQL” https://www.jetbrains.com/phpstorm/
Hey, hope you enjoyed the extension and maybe even decided to leave it installed for a while. Would love to hear what you thought of it! :D
Not at the moment, however it is something I plan to do in the near future. Thank you anyway. Knowing it is something you would like to try is a valuable feedback too! :D
Ooops. Looks like you got some python. Must be a bug I missed. have you managed to make it work for php only? Unfortunately I'm not able to reproduce the bug, so I don't really have an idea what could have caused it.
The only thing I did was unchecking everything but php, did not restart browser after I installed.
Did you save the settings? There is a rather large orange save button :D
I'm not a big fan of Java style overloading. - Two methods with the same name but different parameters are still two different methods once compiled. - Finding references to a specific function becomes impossible since you won't know the value of an input parameter from source alone. - You can already create an overloading pattern using func_get_args.
A dental rubber band! This mini thread just keeps on givin’!
&gt; You can already create an overloading pattern using func_get_args. That's incorrect, you cannot can't create traditional overloading or function signatures with func_get_args it only fills part of the picture. We would also need to define the return type of the function and the types of the incoming params using the type system. You could partially check the types yourself with func_get_args, but not declare the specific return type in each instance. Because of this, it beaks down the workflow of using an IDE, because intellisense also breaks down.
Yes I did, I'm aware of those types of buttons :P
PHPStorm has a perpetual fallback licence btw. Only the subscription runs out.
I've started putting together a document to store information about ideas/RFCs for PHP core that keep being raised, about what would need to be done to actually progress them: https://github.com/Danack/RfcCodex The entry for method [overloading is here](https://github.com/Danack/RfcCodex/blob/master/method_overloading.md). The short version is there would be a large amount of thought and work needed to progress it. The first large chunk of work would be to define exactly what happens with regard to type-juggling, so that if you had: class Foo { function sum(int $a, int $b): int { echo "int version was called\n"; return $a + $b; } function sum(float $a, float $b): float { echo "float version was called\n"; return $a + $b; } } Which function would $foo-&gt;sum(17.4, 42) call? The second quite big piece of work is making an argument for why adding this complexity to the core PHP engine would be a good thing. I strongly suspect it would never get approved. The details for PHP type-juggling make it more difficult to implement and use than it is in other languages, and even if there was a perfect implementation, it's doubtful it could 2/3 support. 
&gt;Which function would $foo-&gt;sum(17.4, 42) call? It wouldn't. It would throw a runtime exception. The price of using overloaded functions is the requirement for whatever is calling them to be explicit in which types types are sent.
No.
Sometimes, if I'm working on a completely isolated, stand-alone frontend app. But that's usually not the case.
At the moment PHPDoc is being used to supplement the language itself. Currently you specify that a return can be multiple types like this: * @return PDOStatement | null | false Unfortunately you would have the same problem with overloading because it wouldn't know the return type from the name alone so instead it would show both. But actually from my cursory quick look at Java references I noticed that overloading is for: - The number of parameters in two methods. - The data types of the parameters of methods. - The Order of the parameters of methods. Java, in fact, does *not* allow you to have different return types for overloaded methods. To be perfectly blunt: I think overloading actually makes code harder to understand and diagnose. If the type of the value of a variable is not clear from reading the source then you literally don't even know which of the overloaded methods is going to run. It makes way more sense for a language like Java where every variable is typed in the source. 
Gotta love Humble Bundle! Already own a collection of 130~ books about programming, cyber security etc. and added this one in couple of days ago.
I agree with your statement and the same return type is a good point. 99% of the time i also think overloads may cause confusion if not used correctly. All i want to use it for though is a small feature within an ORM. ProjectMember::Get(int $projectMemberID) ProjectMember::Get(int $memberID, int $projectID)
Is there a particular reason you're trying to use a parent `PostsController` and abstract away some of this data fetching? If you already have separate models and separate controllers, why not keep things simple and do this: class TextPostController { public function showAll() { $posts = TextPost::get(); // ... } } class LinkPostController { public function showAll() { $posts = LinkPost::get(); // ... } }
Gladly pay that price. 
Friendly reminder: The PHP book is for 5.4 and 5.5
That's just not a good pattern. If you change a field name the work you need to edit it in multiple places. Every major ORM has a set of methods for getting data where the return is always one instance of get_called_class() and another set of methods where the return is an array of instances of get_called_class. In my framework this could would work for you: - ProjectMember::getByID($projectMemberID) - ProjectMember::getByWhere(['memberID'=&gt;$memberID, 'projectID' =&gt; $projectID]) Source here: https://github.com/Divergence/framework/blob/master/src/Models/ActiveRecord.php#L894-L906
&gt; If you change a field name you need to edit it in multiple places. My class files are generated so i edit the database model and execute and its updated. &gt; ProjectMember::getByWhere(['memberID'=&gt;$memberID, 'projectID' =&gt; $projectID]) If you change a field name you need to edit it in multiple places, just as you said. I was with you so far but this is just bonkers, each to their own.
Hhaah just making sure if I needed to make it bigger and more orange :P
*Insert womp womp noise clip* Seriously though for that price you can still learn a ton! Just learn the main info and then google the depricated/added stuff.
Because while your example of one method among 2 controllers is simple enough, I have 25 methods, and I have 6 post types, which comes out to 150 methods. If I need to change one thing in some (or all) I now have to do 6 times the work. But If I have a single parent controller then changes are much simpler.
All features of WebStorm are integrated into others JetBrains IDE, either bundled with or optional plugins. No need to buy both IDE.
&gt; Sqlite seems to have gotten to the point where one could just about run sqlite in local development and mysql on the serve Or you could use Docker and develop against MySQL.
&gt; Finding references to a specific function becomes impossible since you won't know the value of an input parameter from source alone. You don't need to know the value, you just need to know the type
Actually, the PHP cookbook costs \~$1
How many have you gone through?
Direct, non affiliate link: https://www.humblebundle.com/books/programming-cookbooks
bah.. just digital books. I cant stand reading books on a screen.
If he’s anything like me , prob none, they’re just there as eye candy to make m’lady’s panties wet. 
About 60% of my work is backend stuff (mostly PHP, MySQL, and PostgreSQL) and the rest is front end. The best thing I ever did for productivity was get rid of those IDE monstrosities. 3 years ago I started using Atom for everything. 3 months ago I switched everything over to VS Code. You can keep those IDE behemoths.
Slim
I would suggest Codeigniter because it suits your needs, but at the end... It's Codeigniter soooo skip it until version 5 comes alive (5 comes after 4). The other thing that I can suggest is using Codeigniter and figuring out how they did routing, copying it and using it with pure php. 
Visual code all the way 
&gt; 5 comes after 4 r/theydidthemath
Use laravel, full framework. If your project get bigger it'll help you a lot. 
Yes. Because the version 4 is not out yet (at least not beta) and everyone know it will suck. So yeah, had to make sure no one comments that version 4 should come before 5.
&gt; all I need is routing and redirection ... &gt; For database, ... auth, session management, views, etc. So, which is it?
I'm just going to leave this here: [https://github.com/PatrickLouys/no-framework-tutorial](https://github.com/PatrickLouys/no-framework-tutorial)
Kohana (now Koseven) is a nice light framework that will achieve what you want.
You missed the rest of that last sentence: &gt; ... I'm thinking of using pure php.
&gt; The other thing that I can suggest is using Codeigniter and figuring out how they did routing, copying it and using it with pure php. or use an appropriate framework for this like Slim
I mean, if you have that mentality, there is Lumen for that exact purpose.
Lumen is for api, doesn't have the views by default and laravel is a complete version. As I said, that depends where him exactly want to go. I don't understand the why for down votes. 
I'd go with Lumen purely for the mass amount of community support in the Laravel world. You could also check out Slim or Nova, both of which I've used with much success. 
If 4 is not out but "everyone knows it will suck", why is waiting for 5 is a good idea? 
Silex
Partially true. Haven't gone through with any of them but the reason I've bought them is to just collect for the time I might need them.
Maybe this is a troll post. 
I built a very simple pure php project that has routing, autoloading, and basic view rendering at my internship last summer as an example project. The router doesn't conform to PSR-7 (HTTP message interfaces) so I wouldn't recommend using it, but it may give you some ideas: https://github.com/nathan815/EmployeesApp But as others have said, Slim would probably work best for your use case. It gives you routing as you want and lets you implement everything else. Also, you should be able to leave out index.php and just do `localhost/foocontroller/barmethod` as long as index.php is recognized as an index page by the server (this is the default).
Just use Slim. Another option is to install only a router from Symfony or any other modular framework. 
After a discussing the interviewer may have doubted the skills of the interviewee, this would confirm.
Because it took how many years for 4 to get a chance to see the light of the day? By following that principle means 5 will never come out or when it does we will all be dead. That is the only time to consider using 5 - never.
Oh what the, a link to a link? 
There is no other answer.
So CI isn't really a good recommendation then...
Slim 
[https://github.com/noodlehaus/dispatch](https://github.com/noodlehaus/dispatch) this one is my favorite, it's super small and beautiful
Build your own.
Good lord, is that still around? I hope it has a new team behind it - they wontfixed reports of security issues with not just complete examples but a guide to fix them. From Rasmus. 
\`composer require symfony/routing\`
Almost a month back I shared the blog post about it on this [forum](https://www.reddit.com/r/PHP/comments/a9c7jt/getting_started_with_docker_and_php/). Now I have dared to make the video of it. This is my first ever attempt and I am not a native so do forgive me if it sounds weird to you. Thanks :)
Use PDO. Mysqli is outdated and not as secure. Hell, even Eloquent is based on PDO. 
No it is not. But it has good and easy routing system that can easily be copied and understood. 
What about nikic/FastRoute?
https://github.com/sunrise-php/http-router
My immediate response would be "that looks like a security problem"
You can use htaccess to change index.php/aaa/bbb to redirect to index.php?arg1=aaa&amp;arg2=bbb, then use native PHP switch/if statements to process the arguments and call the appropriate classes or functions if user has permission. You just add the .htaccess file in the same folder as your index.php assuming you are using apache server. &amp;#x200B; If you want to use a tiny framework it used to be slim or silex was the recommendation. &amp;#x200B;
Use PDO, always. I tend to also have a custom class abstraction for all db ops so I can implement logging, filters, etc. So my app calls the DB class method, which uses PDO to execute the operation. We switched one project from MySQL to DB2 using PDO and it was fairly trivial. 
So offense but how about the "I don't want to use Laravel" in one of the first sentences of the post?
Well, you don't technically need a framework if it is just for that. You could using the routing library Lumen uses: https://github.com/nikic/FastRoute If not, I would recommend Lumen. It's a micro-framework version of Laravel, but it is much simpler, fast and quicker to learn and, if you ever want to have some additional Laravel goodies (ie. Eloquent ORM), you can opt in to it later or port the codebase over to a Laravel project.
Zend Expressive 
**Open source is the future**: You'd be hard pressed to find a startup today worth it's venture capital funding not based, at least in part (if not largely) on open source. Open source isn't a fad, or a bunch of hippies out in California passing around tie-dye laptops like they would illicit substances. Open source is how modern organizations, and increasingly more traditional organizations build software. It's becoming exceedingly challenging to make the argument that five-or-ten years from now the technology landscape is going to be less collaborative and more closed. Heck, even Microsoft, traditionally one of the most stark opponents to open source, has [open sourced their primary development framework](https://microsoft.github.io/) (along with Apple and Swift). Today, all of the largest names in technology, from [IBM](https://ibm.github.io/), to [SAP](https://sap.github.io/), to [Adobe](https://adobe.github.io/) actively participate in the open source community. It's slightly inaccurate to say that "open source is the future." Open source has already won.
I'd go with symfony components. You can do everything you want by just picking which components you need. That is the beauty of symfony.
I use visual studio code for FE and atom for BE
Use symfony routes library. 
Symfony skeleton
A less common answer would be Flight. It's very barebones and stays true to the idea of a microframework without subscribing to PSRs and the like. YMMV and it's almost more like a library than a framework, bit for small projects it's a useful one to know about.
Codeigniter small and easy 
This kind of feels like an anti-JIT hackjob article. The consideration about developers needing to debug the JIT themselves is irrelevant for userland developers. How often do userland developers need to debug the existing opcache implementation? The point about 50,000 lines of code is also widely irrelevant (and misguided) because the vast majority of that is the inclusion of the DynASM library, a library the PHP developers don’t maintain. In fact almost all of the code is DynASM or its dependencies. This article feels like it was written by someone who has a shallow understanding of the basic facts, but failed to actually vet any of their opinions before posting their article. You can do better.
Try fatfree
Oh I did not see that part :), I am sticking with PHPStorm. Thanks
What’s with the downvotes? 
To add: imho frameworks are great for teams (and it should be up to the team to pick the framework, after hopefully evaluating a bunch and maybe even piloting more than one at the start) but if this is an effort for yourself only, starting out without a framework is just as useful as starting with one
Don’t see anyone mentioning silex Micro framework based on syncing components. https://silex.symfony.com/
You don't want to code your own authentication component, neither your own session management nor templating engine. &amp;#x200B; You could use: * Doctrine DBAL * Symfony Router * Symfony Security (this one may be overkill for your needs) * Twig You could consider using Symfony Flex, which is a micro framework by default, *à la* Silex, it'll be much cleaner to architecture your code with it and there's almost no learning curve.
Literally one google for "php routing library" &gt; https://stackoverflow.com/questions/15392024/is-there-an-standalone-php-routing-library Aside from that, there's so many micro-frameworks out there that are simply worth learning. Doesn't even matter which one as they are all super similar by the nature of it all. Be it Slim, Laravel, Symfony or Zend - at it's core they are all the same thing and arguably quite easy to understand. It's worth dedicating the time to learn either of them
yes .. if google will provide and API for gmail messages.
Slim.
Hi! Video persuaded me to start with docker :) I always used Virtualbox! Also I am not native and I have less problems to understand a non native than a native English speaker.
That imap code of 2009 won't work today because Google has done a host of changes to Gmail since then. Most notably, they've introduced OAuth2 authentication, which means: 1. You need to register an app on google cloud platform. 2. The user (you), needs to give permission to the app. 3. Then the app can access the mails on your behalf using a token. [Look here](https://medium.com/@pablo127/google-api-authentication-with-oauth-2-on-the-example-of-gmail-a103c897fd98) for a brief tutorial.
This guys voice is so biring. Could not spent more than 5 seconds on this. 
Per this. One of the great things about Symfony is that you don’t have to use their entire stack if all you need is routing or templating (twig) etc.
In my opinion you should have a separate function/method for each unique query that wraps whatever database layer you are using, Within that method you can reference field names by constants. These two things will minimize changes in your code when the field name changes.
I would have to agree. Too many times I got sucked in to thinking, "All I need is a database management system. I won't need to expand. I got this." Then 100 hours into the project, I find out I needed the kitchen sink.
[µ (pronounced "mu")](https://github.com/jeremeamia/mu) ;-)
The consideration for userland developers is not that they should write low level code, but rather that such a large feature might have an influence on the way PHP is developed. Take a look at the concerns raised by Nikita: https://externals.io/message/103903#103927 It's not meant as an anti-JIT article, but as a way to inform people that there's more to it than just adding a shiny new thing that makes PHP instantly faster.
You could build the MVC framework that Curits Parham codes in his videos. [https://www.youtube.com/playlist?list=PLFPkAJFH7I0keB1qpWk5qVVUYdNLTEUs3](https://www.youtube.com/playlist?list=PLFPkAJFH7I0keB1qpWk5qVVUYdNLTEUs3)
Thank you, OP. It's a very actual question for me too.
Symfony 4 comes very light, so you could use it with only routing, without Doctrine for the database. Otherwise, Silex is a micro framework that manages routing. It's the base of Symfony. I think when building a project it's important to make it scalable. For now it may be a very little project, but it might become a larger project. Either you choose to build all by yourself or to use a kink of framework, don't forget to think about the future of the project.
Overloading is rarely needed, maybe when writing a Math library that has many different types of adds &amp; subtracts, however that is not what you typically develop. By using overloading you reduce the readability of the code, method names should be as specific as possible &amp; do what the method name says, with the exception of the main and controller methods. Usually when having two different behaviors with the same name that is probably two different classes. 
I second this. If all the OP needs is routing and redirection, NikiC's FastRoute is the simplest, fastest thing for his use case with the least dependencies (actually, outside of PHP5.4, there are no dependencies). It's also a full-fledged router so you get wildcard matching, separation between POSTs and GETs and PUTs and so on and so forth. If you eventually need *some* databse, you can just use PDO, it's good enough on small scale. But if you expand further, you'll have to use a framework to keep your sanity. 
Thank you for your info! I'm learning and I just would love to understand to which file this code is wring to (pretending that it works)? Or what to change here to make it write data to a text file? `test` `1 2 3 '
imap protocol still works for GMail. The easiest way to test that out is through ```openssl s_client -connect imap.gmail.com:993``` for telnet based connection. If this works then the IMAP protocol should work. Recently I wrote an IMAP reader without using the PHP IMAP extension, just plain old socket programming in PHP. The IMAP protocol is not half as bad as I thought it would be. There are a lot of packages that work with IMAP in packagist. Check them out OP. When you connect to those with PHP though, make sure to disable peer verification. I know, i know it's a bad advice. Either that or hit your head into the wall as to why your system refuses to recognize google (problem usually is that you are lacking a system update). 
I did too and it went away after I Changed account access for less secure apps.
It's just basic writing string to file. after ```$message = imap_fetchbody($inbox,$email_number,2);``` you insert ```file_put_contents($filepath, $message);``` and you're good to go. You'll have to define a $filepath variable and I suggest you to use unique files for each email. Stacking all emails in a single file makes it even messier.
You left the comment on the video too and I responded the following. \&gt; I know :(. This is just the start. I hope I will be better. The topic itself needed some explanation. Sorry!
Thanks for your kind words :)
What fresh books can you recommend for development on PHP?
[Pic](https://i.pinimg.com/originals/fe/ba/0a/feba0aa824616038480ce84baecd6136.jpg)
Function overloading is "just" a syntactic sugar over typeof and instanceof, and a few other tricks. You can do it today, already. Just skip type hints, and dispatch manually. (You can even dispatch based on conditions unavailable in type hints - like conditions that object must implement 2 or more interfaces) &amp;#x200B; Buuuuut.... I would rather see ADTs and proper pattern matching based on that.
This is spammy advertising. This article is originally from 2018. You republished it today and didn't bother to change the content that mentions: &gt;So when Symfony4 was released a few months ago.. Symfony 4 was released in November 2017. But you did take the time to add a nice snippet advertising your new side paas. 
Overloaded functions are understood as dispatch based on arguments. If you dispatch based on return type then you need return type polymorphism, and PHP have no such thing. It doesn't even have co/contra variance for type hinted class methods. Also, callables have no specialized types only Callable, and that would play badly with overloaded functions.
Sorry, but no. I wrote this yesterday and yes, I apparently got the Symfony 4 release date mixed up with the release date for 4.2. :( The "PAAS" is also completely open-source &amp; can be self-hosted for free, by the way. I only mention it because it's (still) running on Go and because, well, it's my blog so I should be allowed to mention whatever I want? Regardless, feel free to move on if you didn't enjoy the post. Sorry.
"One reason not mentioned so far is that over the last year or so, I’ve been approached by several companies interested to take over one of our products. They were a little surprised to hear our stack involved Golang and some flat out told us they’d prefer PHP" &amp;#x200B; That explains it all. ;) Now, go earn yourself some $$.
Slim or FatFreeFramework. Or look into the php league packages. Maybe they have something decent. 
Actually I don't see the problem at all. It is quite obvious to me that &gt;Which function would $foo-&gt;sum(17.4, 42) call? This must call the second method as the first argument is of type `float`, and the second argument is of type `int`, which can be safely casted to float. You cant safely cast 17.4 to an integer.
Hah, thanks, I’l try! 
great idea... php is world wide programming language used by developers.
A legit question but a lousy blogspam link. Reported. 
his symfony and doctrine arguments were basically also valid 2 years ago... PHP 7 was also already released when he switched... sounds like he didnt think through his decision to begin...
all those components have reached version 4 with less than 100 commits. doesn't sound very battle tested imho... also dont see much benefit over existing tried and true components.
support for `@template` would be very nice!
Given that Silex has basically been retired, it is probably not the best choice for new projects. 
Thank you for pointing this out. I've edited my comment.
This is a forum for people interested in PHP, I imagine there are rather more people here who are developers than who need developers. You basically just spam your website all over Reddit with tangentially related blog posts. This isn't really in the spirit of Reddit, you're supposed to take part in the conversation, not just shout what you want all over the website. The majority of the posts on your account have 0 votes. Take the hint. Either become a valuable contributor who actually try to teach or discuss topics in earnest without simply plugging your services, or stop.
Go isnt designed for web apps.
It's funny but the real routing is not done by PHP but by the web server, namely: .htacces, web.config, and nginx configuration. 
Python is more scalable?. Ha. 
I work with "genius", one of my genius did the next code: ```php $ini=parsePeriodToSearch($a[0],0); $ini=parsePeriodToSearch($a[1],0); ``` It is really hard to audit thousands of lines of code, so a good IDE helps a lot.
It's been replaced. The idea being that you cn use Symfony Flex to install a minimal setup. 
if it is not to learn something, you can simply do that with gmail itself, of course theres also an API for that (which works much better than imap as imap has limited bandwith on gmail) see here: https://support.google.com/accounts/answer/3024190?hl=en 
Honestly, anyone using the star constraint in production is just asking for trouble. 
You shouldn't only pick an ORM because it's easy to work but also because how it deals with errors, for example, if the database is down, if the PK exists, if the field's size is biggest than the allowed size. or if the query is incorrect. 
Would of have had this for free if: https://github.com/oracle/graal/issues/361 
api-platform + react-admin
I'm interested that he mentioned porting old laravel applications to Symfony 4. I've literally never built an app with Symfony. The problem is that I always want hobbies to be rapid and paid projects to be familiar, so it's Laravel everytime. One day, one day.
iirc, laravel uses large sections of symfony, so it probably wouldn't be too unfamiliar. that said, it is always good to give different frameworks/languages/etc.. a spin, just so you know what the differences are and what you may be missing
that is not unique to php
Yeah Laravel definitely does. Although you rarely use them, themselves they're usually extended by a Laravel class of some kind. The comment type hinting (not even sure what that's called) and forms where the biggest differences when I last read over the docs.
Hi everyone. We came up with a thought of how to update and simplify payment procedure for our users with JWT. To be short, JWT is a simple open structe with header and payload data signed with sha256 in our case. Also, we use access (10 minutes valid) and refresh(60 days valid) tokens in our project. The flow that we would like to apply is as follows: 1.User sets any of his/her devices as Master device. 2.On the backend device JWT token is issued with payload consisting from salted user\_id and probably device fingerprint. 3. The device token is stored on the user's side 4.During payout, after all validations, access and device tokens are send together with request data. 5.If all of them are valid, the payout can go further. &amp;#x200B; All data is transfered between API for mobile apps and server with https. &amp;#x200B; Please, tell what possible security breach do you see and what share with your thoughts on the whole idea. Thank you all!)
Hi everyone. We came up with a thought of how to update and simplify payment procedure for our users with JWT. To be short, JWT is a simple open structe with header and payload data signed with sha256 in our case. Also, we use access (10 minutes valid) and refresh(60 days valid) tokens in our project. The flow that we would like to apply is as follows: 1.User sets any of his/her devices as Master device. 2.On the backend device JWT token is issued with payload consisting from salted user\_id and probably device fingerprint. 3. The device token is stored on the user's side 4.During payout, after all validations, access and device tokens are send together with request data. 5.If all of them are valid, the payout can go further. &amp;#x200B; All data is transfered between API for mobile apps and server with https. &amp;#x200B; Please, tell what possible security breach do you see and what share with your thoughts on the whole idea. Thank you all!)
Hi everyone. We came up with a thought of how to update and simplify payment procedure for our users with JWT. To be short, JWT is a simple open structe with header and payload data signed with sha256 in our case. Also, we use access (10 minutes valid) and refresh(60 days valid) tokens in our project. The flow that we would like to apply is as follows: 1.User sets any of his/her devices as Master device. 2.On the backend device JWT token is issued with payload consisting from salted user\_id and probably device fingerprint. 3. The device token is stored on the user's side 4.During payout, after all validations, access and device tokens are send together with request data. 5.If all of them are valid, the payout can go further. &amp;#x200B; All data is transfered between API for mobile apps and server with https. &amp;#x200B; Please, tell what possible security breach do you see and what share with your thoughts on the whole idea. Thank you all!)
Same. Overloading feels like something they were crazy about in the early 2000s when I was in school, because everyone was just starting to get excited for oop. I think now we're getting back to basics and starting to like simple, deterministic, side-effect-free functions, and DI, the very idea of a bunch of instanceofs sounds unnecessarily complex. I'd almost always prefer to simply transform my input into the type the function wants than to have all sorts of different behaviour depending on my input types. If you get really heavy into all the transforming, a factory class is much better for that than overloaded functions. You'll notice also that the PSRs tend to push clean, simple interfaces on their args instead of allowing a mixed, which like you've pointed out is basically all an overload really is. 
Mysql101.... I think you need to read Go 101.
&gt; laravel uses large sections of symfony, so it probably wouldn't be too unfamiliar Laravel mostly hides the Symfony parts, adapting things to their view of how software should be architected. So I don't think things will look very familiar (if they did, what would the added value of Laravel be?). 100% agreed with the rest of your post: learning new things is *always* a good thing, even if you end up deciding the old thing you've been using all along is better than the new things. Most likely, you'll have learned something from the new language that actually makes you better at programming in any language.
You're right, I certainly didn't! In my defense: I stated it was a bad business decision to move away from PHP when I wrote that first post in 2017. But being a small business owner where I'm also the only developer, I wanted to have some fun. And I did, learned a ton too. :-) Perhaps it helps knowing that my day to day stack involves a lot of WordPress... Either way, after a few years on Go I can now better appreciate PHP for what it is. It's like visiting a totally different country and learning what's good or bad about your home country.
Yeah but IDE's aren't the only way to find that type of thing. A service like StyleCI would likely catch that and give an appropriate warning.
&gt; being a small business owner where I'm also the only developer, I wanted to have some fun that sounds like a *contradictio in terminis* :) &gt; a lot of wordpress sounds like we found the root cause.
tl;dr: symfony == awesome &amp;&amp; _"Our shops however are more monolithic with a lot of server-side rendering."_
Does this mean I no longer need a File Watcher with php-cs-fixer? It uses our configuration in `.php_cs`?
Surprised nobody mentioned geany, a lightweight editor but it has code completion and type hinting which is more than sufficient for me personally.
Sure, but understanding a language update can take nearly as long as writing it. I think PHP's problems these days are more cultural than they are technological. Too many people making assumptions based on old information, or looking at the tiny reference doc a new, minimal language like Go can enjoy and comparing it to the entirety of the PHP.net doc. Figuring that out takes time and work, unfortunately, and until the community understands its strengths we keep seeing the worst of PHP compared to the best of newer languages, instead of comparing to how you actually can and should write PHP in 2019. 
Going from php5 to php7 harder than learning a new language? That is simply ridiculous.
Since 7.0, PHP has been awesome sauce and getting better every day.
ZING
flightphp
I don't think he means it's harder to learn than switching to a new language. I think he's saying that the norms within the community will take a long time to change. Old habits die hard and a lot of them are really nasty habits. For example, it took the community a long time to get used to using namespaces. Even still a lot of big projects still aren't using them and instead opting for class naming conventions as their standard. You don't run into problems like that with newer languages that had namespaces from the start. I think the OC means that culture shift will take a lot longer in PHP than switching to a new language where everyone does things the "better" way already. When you swap over to a language that's had the syntax for namespaces from the start all the documentation includes it and all the code you look at uses it because it's the better way to do things. PHP's history is extensive and it muddies the water, lots of cruft hangs around.
This *sounds* possible, maintaining the login is the only challenge here. I suppose you refresh your knowledge of sessions and session handling first to see if there is some compatibility layer between your project and php - "worst case" would be that you have to drag your credentials and what not around all the time.
you also have the problem the other way around. We had a client come to us because their one man band developer built their backend in Golang and then went off for a trip round the world to find himself shortly after completion. It was relatively well written but we said we could only take over the project if they were happy to cough up for us to rebuild their entire backend in PHP. I get the impression they were told exactly the same thing by every agency they spoke to.
Yeah - I wish it had feature comparison and maybe some benchmarks.
would it be easier to use http basic authentication on an nginx reverse proxy: [https://christianfei.com/posts/setup-nginx-as-a-reverse-proxy-with-basic-auth-for-an-upstream/](https://christianfei.com/posts/setup-nginx-as-a-reverse-proxy-with-basic-auth-for-an-upstream/) I'm also wondering why you can't build an authentication system into the original app? I'm sure there is a good reason but if the old app is not maintainable, maybe you are better off thinking about replacing it rather than trying to string it out further. The solution you are suggesting is technically possible if you authenticate a session with PHP and then stream requests and responses between you PHP application and your backend after checking the session token on each request but this is entering the realms of "dark magic" IMO and would be complicated enough for the most experienced PHP developer because you will not only need to learn about authentication but also how to build a reverse proxy in PHP. It's not a road I'd happily go down.
Use the API platform: [https://api-platform.com/](https://api-platform.com/). You basically set up your entities as ORM objects and it generates a full standards compliant hypermedia REST API with all CRUD operations by magic. It also comes with an out the box javascript front end that reads in your API schema and provides an admin interface, again by magic. The other option would be Google Firebase.
We run roadrunner with php72 and symfony4. They fit very good.
Thanks for your reply. Nginx could be a good shout actually. Haven’t had much exposure to nginx before but this could be the time to learn! The original app is old (10 - 15 years old) and is due for a replacement in the next year or two, this is just to get us over a small hurdle until times. 
Thanks for your reply. Reading up on sessions is tonights activities 😂 
If you're wanting a more secure alternative to JWT consider https://github.com/paragonie/paseto .
Holy shit that site a mess. I thought it was broken when it loaded... but nope, that seems to actually be the intended design.
Hey all! This is from the purpose of the package, but basically I created this package because I found myself in need of a way to work with large XML data in a memory efficient way. The built in XMLReader PHP provides is fast and efficient, but can be a pain to work with at times. I wanted a dependency-free way to stream XML data and work with it using my provided classmap. Other stream implementations I found either provided too much or not the features I needed, so I opted to create this dependency free package. I hope it can help others as well!
I still do not understand why anyone who is a full-time PHP developer still uses Windows. And if you are using Windows, why these "all-in-one" solutions are still being used over Docker, Vagrant, or other VM solutions. Even on Mac, homebrew is a mess and takes forever to install packages. Linux FTW.
I'm excited for JIT because we do have some heavy simulation code which runs millions of iterations doing some math. It runs offline in a job queue. I think it's one of the best type of candidates for JIT optimization.
Hello all, i would like to start this out by saying im very new to PHP. Im trying to connect/pull data from an MS SQL database we have on a server and present it on a webpage. i have already successfully done this as a POC from a mysql database from my local computer with wamp. I have added the MSSQL dlls into my php.ini and into the ext folder in the wamp folders. when the page loads im getting a Error of " **Error: Call to undefined function sqlsrv\_connect()** " I read somewhere that i may need to install php/ the MSSQL php drivers onto the sql server but cant seem to find that again to verify &amp;#x200B; &amp;#x200B;
Thank you. I will look at this.
Ah! See the problem is, is that it doesn't work. 
what doesnt work ?
Can it be deployed to shared hosting?
Well we moved to golang and are not moving back. We are slowly adapting the backend to the new language.
Welcome to the world...
i had the exact same issue, i worked strictly from 8 to 5 (with one hour lunch) There were other programmers who came around 9 and start playing with coworkers and start working around 2pm go home at about 7pm similar amount of work with me or even less. it was small start up and it was so easy for CEO to track time. CEO said i am not working hard enough compare to other programmer to my manager. my manager told me that he knows that i am working more efficiently but CEO doesn't understand it. I did what all my manager had to do, so even CEO complains about me, my manager cannot complain about me. i could not stay there long, but it was my strategy and somehow worked for me. one day i stayed late, and my manager asked to go home
Yap, I am working in a start up company
I worked in a big company where I didn't have this kind of issue. This is not my first job.
Some bosses are just bad at their job. A focused, driven programmer will beat a tired overworked one any day of the week. 
Nice write up. Keep in mind that for apache the recommended setup for Apache also has been to [incorporate .htaccess in your vhost when possible.](http://httpd.apache.org/docs/2.2/howto/htaccess.html#when) &gt;In general, you should only use .htaccess files when you don't have access to the main server configuration file. ... You can put user authentication configurations in the main server configuration, and this is, in fact, the preferred way to do things. I also have some other small improvements: &gt;There are three server directives but only one actually serves the website. (You could explain that a server block is essentially a vhost, and you've created two of them to forward everything to the third https without-www vhost). &gt;We actually have to tell NGINX how to properly how to serve PHP files. This is not due to nginx, but due to php-fpm. The apache+php-fpm section looks very similar.
I went from flat PHP, to Laravel, then to Symfony (I also do Javascript with jQuery, then Vue, and some React). Symfony has been my main framework the last years, but I'm starting to be more language agnostic. I've played around with Go, but am now looking deeper into Python and someday soon also Java. Yes, business-wise it would be good to have a long-term and stable programming language as a base. But for developers, I think it's also important to play around with other languages, frameworks and tools. It makes you - and in the end, also the business - more versatile. Machine Learning? Let me get out my Python and Flask wrench. Quick functional prototype? Let me check out the PHP 7 with Laravel hammer. Quick API prototype with many concurrent connections? I think the Node.js with Express will do fine here. Doesn't mean you have to always use the fanciest tool, but rather you are better informed about which one to choose. Sidenotes: * I think the Symfony founder (Fabien Potencier) mentioned in a hashnode AMA that he's been playing around with Golang recently. * And did you know that Twig (the templating language used in many Symfony projects) has connections to Django's templating language Jinja? Interesting read on PHP templating languages here: [http://fabien.potencier.org/templating-engines-in-php.html](http://fabien.potencier.org/templating-engines-in-php.html)
[http://php.net/manual/en/sqlsrv.installation.php](http://php.net/manual/en/sqlsrv.installation.php)
&gt;@template The change of this going to be accepted is small (hopefully) as @template is being used by Symfony for Twig templates. But also this is a functionality that should be coming with PHP 7.4 if everything goes as planned.
Well… my company has Symfony in production since 2.3 (2014). And in our experience Doctrine and Symfony Forms are the worst part of the Symfony default stack. We constantly run into problems with them. There are lots of gotchas. I may go into detail if you want me to. It may be worth for you to read this: [https://blog.martinhujer.cz/symfony-forms-with-request-objects/](https://blog.martinhujer.cz/symfony-forms-with-request-objects/)
Probably, depends what they offer. So long as you can configure the public folder and provide shell access. I personally wouldn’t use shared hosting working at this level. Digital ocean VPSs are $5 a month so there is no real need to. Shared hosting is only really suitable for cheap Wordpress sites.
the thing is php deserves all the blame it got. there where some really stupid things like register globals. then there is standard library that's still inconsistent array map, array filter, and so on. while it's getting better, oh I remember how dealing with dates was shitty, it still has those problems that is not that pleasent to use. but you can quickly spin something up and prototype, and use a lot of free library's so it's attractive. it was my first language and I hold it dear but I hope they finally fix the standard library. 
Depending on corporate culture. I am managing developers and honestly when it comes time to do salary adjustment I am tempted to first reward the guys that are here before me and leave after. I know it is not a reasonable point to make my decision on, and I am mindful of it, yet, it is a factor along with quality of work, burn down rate and initiative in determining salary adjustments, work assignments, and so on.
Yes, I can see your point. I made a codeigniter site from scratch in 2 weeks. Where I build login with search and some basic functionality. We have +200k customers. Sounds like coming office in time could do more ?
LOL
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
 the following website (complaintboard \[dot\] in) has a complaint website with a great simple and cool code. Any time a user create a complaint, its generate a new website. I would like to have the same code as a guestbook, but I don't know where to find it... :( I have contacted the site, they never answer. Study the code but found nothing.. :( 
Hello, I'm new to all this ... Can you help??
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Another one very straightforward IMHO: fatfree Routing Engine | Fat-Free Framework for PHP [https://fatfreeframework.com/3.6/routing-engine](https://fatfreeframework.com/3.6/routing-engine)
Fony bullshit.
No, I agree with you, it won't help. Firstly, codeigniter? Come on now. Secondly - manager plays the game. He is not setting the rules, he just plays the game the best way he seems he can under the circumstances. Part of my game is to grow my teams. I get money from business people. Business people understand not code but office habits. They like it when people are on time. Manager is an outlet between coders who are mostly arrogant, self centered, poorly socialized jerks and business people who are mostly arrogant, self centered, greatly socialized jerks who knows nothing of technology. My boss had no idea that there are more then one programming language. Now he is sure that there are no more then 3. Because two times he bought companies without consulting IT and then all of a sudden we went from Java shop to Java + PHP to Java + PHP + C#. These are the people you work for. They are everywhere, I mean I've done this for 20 years, in multiple places. It's all the same. One thing for sure - when business people are happy, my budget grows so I can get more poorly socialized jerks and when business people are not happy, I have to make hard decisions. When I make hard decisions, it will be easier to rid of someone who is perpetually late and leaves earlier, because everyone knows who those people are, including business people. One thing you coders don't get and it took me forever to comprehend is that it is irrelevant how great or smart or brilliant or whatever you are if you hurting team in the eyes of business people. Team is &gt; then you. I can replace you in a matter of hours. I mean tell HR I need a coder, I will have a stack of 400 resumes in a matter of hours, but you won't replace business people. Sorry. I am not saying that this is right, I am saying that this is what reality is. You want to make coinage you got to play the game. You want to be proud and brilliant, you won't make coinage. Trust me, people at the top are business people, not IT people. They will ALWAYS
Who is letting you continue to rewrite this application? Are you the full decision-maker. There is no way in hell I could get the go ahead, nor would I want to, rewrite the same application that many times...
I'm really glad I stuck it out with PHP...
I’ve not used Symfony before, but will be tasked with it in an upcoming project. I’m curious to know what you didn’t like about Doctrine? 
Post your code
If i get passed over a raise because i don't come in earlier than everyone else, i will get my raise by going to the next company that offers me more money. *shrugs*
What?! Symfony forms is the best component I have ever seen. No other framework, including other languages, can come even close to them. This is one thing I didn't find anywhere: [https://symfony.com/doc/current/form/data\_transformers.html](https://symfony.com/doc/current/form/data_transformers.html) and it is just a small part of what Symfony forms can do. And noone stops you at using DTO classes in better way than described in article. About Doctrine; I really can't imagine a single problem. Care to elaborate?
The error says the function isn’t defined, it’d be more useful to post their php.ini or the output of phpinfo()
When says function isn's defined is because he must declare that function. And also, if you click on the link that he gave to us you would know what we talk about. Post your code and then we can help you.
Did you install from this site? https://docs.microsoft.com/en-us/sql/connect/php/microsoft-php-driver-for-sql-server
“Small business owner where I’m also the only developer” might mean he outsources or hires folk to help with the non-development aspects of the business. I did that in my time as a freelancer and it was a great decision: you can distance yourself from the least interesting aspects of dealing with clients and seeking out projects, and those sorts of positions are cheaper and easier to fill than that of a good developer.
That function is provided by the sqlsrv extension, it’s not user defined. If it’s not found, the ini is incorrect and the extension is not loading, in which case seeing the ini or php info would be what we would want to see 
Make sure the plugins are loaded , and don’t forget to restart your phpfpm/Apache after installing the plugins. die(phpinfo()); or php -m And check if sqlsrv is loaded.
&gt; About Doctrine; I really can't imagine a single problem. Care to elaborate? Every time I need something specific I have to resort to back SQL.. which is a lot. Doctrine is good for not wanting to write simple CRUD things which is repetitive.. Then DQL bites us as it's the lowest common denominator.
This is the right resource. We use the Microsoft PDO drivers in production for about 100k users. Note: when we switched from mysql to mssql our unit tests ran about twice as slowly unfortunately so only use mssql if you have to. We were using the beta driver though so it might have gotten a bit faster since then 
&gt;What you do next is you relax and thank yor lucky stars it isn't worse. That's an honest critique of Symfony. Upvote.
Yes, I think you are right. We programmer's are dumb ass who didn't learn how to get customers or build businesses. And what is wrong with codeigniter?
Generally you will be below avarage with 40 hour work week. Your CTO is correct. However it's not the hours themselves here what matter, but a plethora of other incentives and motivations in software developer which manifests as longer hours at work which count.
If you're trying to advertise you could atleast get your suggestions accurate. Use binding, not escaping for SQL injection. &amp;#x200B; For #4 that's not an issue and most of the codebase should be out of the public directory. &amp;#x200B; \#5 doesn't give any actual suggestions &amp;#x200B; \#6 is the same &amp;#x200B; \#7 you don't know the difference between hashing and encryption
From the way the title is phrased one could already tell the article is utter bullshit. So it is. From the very first section. I suppose you are a genuine carmawhore and just have no idea what is this article about but just in case: [mysqli_real_escape_string's purpose **is not** "to secure PHP websites from hackers"](https://phpdelusions.net/top#escaping) and **should never be used for this purpose**. In a nutshell, it's a boring blogspam for the India-based PHP outsourcing company, which code's quality is as terrible as this article. The only reason it is written is to promote the company's services, not to share the knowledge. So it shouldn't be posted here. Reported as spam. 
Yes, I get to make all the decisions. Even if they're not in the best interest of the business at times (as long as profit margins allow, of course).
I'd love to hear some more about the gotcha you've been encountering, as we have yet to run into any serious ones. Doctrine and the Forms component are my 2 favorite Symfony parts. We already set-up our forms so that they don't map 1:1 to an entity's fields. Rather, we have several types each consisting of one or more fields or other types. We can then easily compose our final forms from these various types, not really caring about what entity they map to. The updating an invalid entity in an event listener is interesting and sounds like a gotcha to watch out for, but is also easily mitigated right? By either validating (again) on \`preFlush\` or passing the validity state to the event listener somehow. We found it easy enough to bypass Doctrine where needed so far, resorting to raw SQL for things like reporting.
Codeigniter is not something you should brag about building on. It has a pretty poor reputation (warranted or not) - I haven't touched it in around 5 years.
I agree with most of this. I am a lead software dev at a relatively small start up (around 50 employees) but I get into the office before everyone most morning and on the flipside I do leave early. I have a good relationship with everyone else in the business and I think this helps when it comes to leaving early etc. Today I arrived into the office at 7am and will leave at 3 in order to get a flight. I also extend the same flexibility to devs in my team should they need it and I will protect and defend them from other areas of the business if it were necessary (it never is) 
Best thing I ever did was just use ubunutu. Way too many hacks to try and get a working dev env on windows
As I mentioned before, I am not a showing off person. I am not brag about codeigniter. Just trying to give you a picture what I am working with. 
first interviewer check your basic knowledge. so i recommend you to learn all basic concepts first. their are many website who provide basic test paper. make sure you perform well in all online tests.
More info: I currently include a document at the start and end of every page which contains the head tag, universal css/php and the header. If I want to include another css file I have to split the file in the head tag and include both the start and end and then echo a link tag between them. This is the same with extra JS files at the end of the file. This gets messy really quick and having 4 files for the start of a file and 4 at the end (start, end, full and essential (for forms which shouldn't include the header/head tag but still the essential SQL functions) is far from ideal. The site has grown from a few pages to maybe fifty and I have already rewritten everything once to make it cleaner, but that didn't turn out well. I'm planning to rewrite it again but I don't know what structure to use to make it the least messy.
They already gave me a tiny project which consisted into making a news page where the user can login and publish or edit articles.
Well, a really shitty answer is that your header files could include other files on their own. Just define a variable with the additional include filename before the header include and have a code in the header that includes that variable if not empty. But really, your system is wrong fundamentally. Including a document at the start and end of every page is the worst idea for handling the site output. You should really separate your business logic (the data handling) from the presentation logic (displaying HTML). I don't know whether you already encountered this yet, but sometimes your file should return an HTTP header instead of HTML. Or JSON data instead of HTML page. Or the header must be altered based on the data displayed below (a &lt;title&gt; tag that contains the shown article's title for example) and so on. So your scripts should be really divided in two parts - at the top of every script only data manipulations must be done that output not a single character to the browser. And only when all data is collected, output should be started. although you could use your current approach with separate header and footer, I strongly recommend to use Twig for the HTML output. https://twig.symfony.com/ 
It’s hard to say I would care about syntax, OOP, language feature knowledge. What is an Interface? How does continue work in php? What is the PSR? What makes code good? Architecture would be something I would probe but not expect. If they expect you to know a lot about architecture, that’s a red flag for architecture that is made by juniors. That’s bad for you because it is an undue burden, also the software architecture will be bad, the company is tries to save money this way and your learning opportunities will be limited.
Can already use .NET's Jit compiler to compile PHP with https://www.peachpie.io/
I got the fizzbuzz test on my first interview, pretty straight forward but might be worth having a lot at. Good luck
 Phalcon is pretty obscure in my opinion. Doubt it's popular in the job market. Maybe ask yourself if that's where you'd want to start? I guess you could get some framework xp, but career-wise, I think you will be limiting your options.
Glad we could assist you with your PHP post.
There are some simple best practices you can do to make life a little easier: * Each file should be dedicated to function declarations, config or output do not to intermix. * Symmetry! Do not open an html tag in one file and close it in another. Use a templating system to avoid this. * Use [ob_start](http://php.net/manual/en/function.ob-start.php) this more or less stops anything from being sent to the browser until your script is finished running (ie you can change the headers at any time). * If you used a framework you would likely get all of the above and not have to worry so much about it. So if you still want to write your own and follow the above guidelines while keeping things to a minimum level of simplicity I would organize it like so: - a global functions file, functions.php - some sort of init, config or bootstrap file that is the first thing that gets invoked whenever ANY php script on your site is run. something along the lines of: &lt;?php //init.php /** * Start timer for our script execution */ $_ENV['SCRIPT_START'] = microtime(true); mb_internal_encoding('UTF-8'); mb_http_output('UTF-8'); /** * Quickly take the site offline by setting this to true */ $_ENV['OFFLINE'] = false; if ($_ENV['OFFLINE']) { echo "This Website is Currently Unavailable"; exit; } /** * Database Settings */ $_ENV['database'] = array( 'dbname' =&gt; 'test_db', 'user' =&gt; 'test_db', 'password' =&gt; 'test_db_password', 'host' =&gt; 'localhost', 'driver' =&gt; 'pdo_mysql', 'charset' =&gt; 'utf8', 'driverOptions' =&gt; array( 1002=&gt;'SET NAMES utf8', ), ); $_ENV['TEMPLATE_DIR'] = 'path_to_some_directory_where_your_templates_are'; require_once './global_functions.php'; if (session_status() == PHP_SESSION_NONE) { ob_start(); session_start(); } 
Looks like you'll have to run the command manually though
Also, just checked your database function. To be awfully honest, they are terrible. A [cargo cult prepared statement](https://phpdelusions.net/pdo/cargo_cult_prepared_statement) alone. And connecting to a database for the every query. That's a most comprehensive collection of wrong practices I ever seen. And including a file every time a query executed as well. Are you aware that all your SQL queries are prone to SQL injection? And having different users is a very little remedy. Actually, not a remedy at all. Instead of creating a dozen database users you should really use prepared statements. I suppose that you are entirely-self taught, and devised all this code yourself. For one, it is good for you but honestly, your code looks horrible to any experienced PHP programmer. Please make https://phptherightway.com/ your home page for the couple months and consider rewriting your site based on the information from there. 
I tired to move to codeigniter conversion but someone really doesn't like php talk. Sorry, I badly need this conversation with my kind ( programmer) of people. 
Your boss is not a good boss if that's how he/she values employees. A good boss cares about employees and knows working 10+ hours a day is not healthy. It will only make them burned out and have to recruit new ones.
Thank you!
To safe yourself a massive headache, you should implement a PSR-4 autoloader: [https://www.php-fig.org/psr/psr-4/](https://www.php-fig.org/psr/psr-4/)
Great points, https://phpdelusions.net/pdo has an excellent tutorial on creating your own PDO wrapper class I learned a lot from it then almost immediately went with Doctrine's DBAL, most of my pages connect to the database (like 95%) so I opted to just spin up the connections in my global init and just re-use those for everything.
I started using Doctrine1 about 9 years ago, switched to Doctrine2 and in all this time, I have **never** wrote a single SQL line. For reference, I have hobby projects where one of the tables has 100 million rows, others are in range of 1-10 millions; I had to build my own paginator for that because COUNT() is slow in such tables. It works perfectly fine, full Doctrine usage (always hydrate to objects), no SQL needed... Sorry but I am sure you are not using it correctly. I literally cannot imagine a **single** scenario where SQL would be the answer but I am ready to change my opinion. Do you have real-life example? &amp;#x200B;
Thanks for the honest feedback. Yes, I am self-taught and was already kind of aware that my code is terrible. On another note, I use htmlspecialchars in SQL queries, isn't that enough to protect from injections?
I don't really think that's a bad thing. Spending money isn't always good, but he knows empirically that PHP is most likely his best solution, now. It's worth the money to know that for certain business ventures.
how can you be below average working normal hours?
why not just pay them an hourly rate then
Not a slightest. So you can tell, it's *HTML*special chars, it just has nothing to do with *SQL*. There are many ways to circumvent htmlspecialchars. For example, it doesn't escape a backslash so it can be used for injection. Let alone escaping is not the way to protect from injection. Only a *real* (one that is using placeholders) prepared statement is
I suggest you to have an */inc/* folder where you'll put these files * *init.inc.php* * *functions.inc.php* * *header.inc.php* **init.inc.php** Your database access. Use a variable to keep the PDO object. (like this `$pdo = new PDO(Your database info, array of exceptions)`) Your constant, declared with [define()](http://php.net/manual/en/function.define.php). I suggest you to put the company information (address, phone, email, name of the website, name of the company, the URL, etc...) A call to *functions.inc.php* with [require\_once()](http://php.net/manual/en/function.require-once.php). **functions.inc.php** It speaks for itself! Here you'll put every one of your functions. **header.inc.php** Your HTML. &lt;head&gt;, &lt;header&gt;, &lt;nav&gt;, information. Then your PHP files will look like this: `&lt;?php` `require_once('inc/init.inc.php');` `// Code` `require_once('inc/header.inc.php');` `// Display` `require_once('inc/footer.inc.php');`
I'm not trying to defend my awful code, but how should I go about protecting the database passwords when I'm commiting with Git if I shouldn't store them in a separate file (you mentioned not including the file for queries)?
Use a front controller pattern (just one PHP file where all requests go through)
It's a bit different. I didn't say you shouldn't store it in a separate file. Storing passwords in a file which is excluded from git is all right. What is wrong is connecting to a database every time a query have to be executed. And so reading a file every time as well. A connection should be made out once, and then used for all queries on the page
40 hours is not "below average" for a software developer, by any stretch of the imagination.
So an example of the "right" way is this? * Connection to database and including passwords * Prepared statement with variables passed in * Process everything * Store output of script in variables * Include template from file How do I then go about adding content to the template (e.g. extra php/css/js files, html and output from the script above)?
Do you already have a page that allows anyone to play and download a video?
Do you have any analytics to show? How well Symfony 4 is doing compared to Go.
Well, like I said, in a particular PHP file I would define an array with extra css files to be loaded. And then in a template file I would loop over this array and ad these files to the output, like &lt;link rel="stylesheet" type="text/css" href="/css/main.css" media="all"&gt; &lt;?php foreach ($css as $file): ?&gt; &lt;link rel="stylesheet" type="text/css" href="&lt;?=$file?&gt;" media="all"&gt; &lt;?php endforeach ?&gt; And so on for all other file types. This is what Twig does. 
A) This belongs in /r/PHPhelp B) You'd do better giving some detail around what you're looking for, what you've tried. These communities aren't here to write code to simply drop in for you.
Hi! I have this jQuery API request example but wondering how I can convert this to PHP and also output the JSON file it returns? Many thanks. &amp;#x200B; \`\`\`function getContactList(){ var companyName = "Arithon"; var apiKey = "02c6f54d5dc61e5baedd52fb836bc852"; var url = "[http://eu.arithon.com/ArithonAPI.php](http://eu.arithon.com/ArithonAPI.php)"; var data = { authorise: { company: companyName, key: apiKey }, request: { command: “ListVacancies” } } $.post( url, data, function(response){ handleResponse(response); }, “json” ); }\`\`\` &amp;#x200B; The bit I am struggling with really is assembling the data bit. &amp;#x200B;
where is query?
Sorry, added as comment. For some reason the editor wouldn't let me add post content!
Further, OP, you can combine your first two server blocks into one. You don't need a completely separate server block for :80 and :443, you can combine them into one.
Use [Guzzle](http://docs.guzzlephp.org/en/stable/)
Here is a contrived, but minimal example of how the substitution of another type (`int` in this case) for `void` can change the correctness of the program (the definition of an LSP violation): class Foo { public function doSomething(): void {} } class Bar extends Foo { public function doSomething(): void {} } class Baz extends Foo { public function doSomething(): int { return 1; } } exit((new Bar)-&gt;doSomething()); // exits without an error code exit((new Baz)-&gt;doSomething()); // exits WITH an error code
A very literal translation of your code would be the following function handleResponse($response) { // Run your code here... } function getContactList() { $companyName = 'X'; $apiKey = 'X'; $url = 'X'; $data =[ 'authorise' =&gt; [ 'company' =&gt; $companyName, 'key' =&gt; $apiKey ], 'request' =&gt; [ 'command' =&gt; 'ListVacancies' ] ]; $body = json_encode($data); $ch = curl_init($url); curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST'); curl_setopt($ch, CURLOPT_POSTFIELDS, $body); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HTTPHEADER, [ 'Content-Type: application/json', 'Content-Length: ' . strlen($body) ]); $response = curl_exec($ch); curl_close($ch); handleResponse(json_decode($response, true)); } Though it would be slightly better to return the data directly from the method, rather than call `handleResponse` function getContactList() { $companyName = 'X'; $apiKey = 'X'; $url = 'X'; $data =[ 'authorise' =&gt; [ 'company' =&gt; $companyName, 'key' =&gt; $apiKey ], 'request' =&gt; [ 'command' =&gt; 'ListVacancies' ] ]; $body = json_encode($data); $ch = curl_init($url); curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST'); curl_setopt($ch, CURLOPT_POSTFIELDS, $body); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HTTPHEADER, [ 'Content-Type: application/json', 'Content-Length: ' . strlen($body) ]); $response = curl_exec($ch); curl_close($ch); return json_decode($response, true); } To avoid writing loads of Curl requests for each function you make, I would recommend using the following libraries with [Composer](https://getcomposer.org/) * https://packagist.org/packages/php-http/curl-client * https://packagist.org/packages/guzzlehttp/psr7 Usage example &lt;?php namespace Example; use GuzzleHttp\Psr7\Request; use Http\Discovery\HttpClientDiscovery; require __DIR__ . '/vendor/autoload.php'; function getContactList() { $companyName = 'X'; $apiKey = 'X'; $url = 'X'; $data =[ 'authorise' =&gt; [ 'company' =&gt; $companyName, 'key' =&gt; $apiKey ], 'request' =&gt; [ 'command' =&gt; 'ListVacancies' ] ]; $request = new Request('POST', $url, ['Content-Type' =&gt; 'application/json'], json_encode($data)); $response = HttpClientDiscovery::find()-&gt;sendRequest($request); return json_decode($response-&gt;getBody()-&gt;getContents(), true); } 
All of my examples above are missing basic checks for error responses, or problems parsing JSON, so it will quietly fail if the server doesn't send what you expect back.
Why the `.inc`?
Imo when you know how to work or have some experience with symfony/flex, I don't believe "rapid development" is a Symfony/Laravel problem. Symfony/flex is perfectly fine for that.
Sure? Because I think they are separated on purpose for the 301 redirects. \- Port 80 -&gt; redirect both www and non-www to https:// \- Port 443 on www. -&gt; redirect www to non www https:// variant \- Port 443 on non-www -&gt; serve website 
Ah it's still early here and I'm not awake yet. You're probably right.
It's a convention meaning that this file is meant to be included. It changes nothing if you don't put ".inc" to the file, it's just a visual indication.
I know that, but honestly that's something I'm used to from legacy applications (like really legacy, around PHP4). I don't think I've ever seen that in any site/application that was developed since the release of PHP 5.6.
Why bother with 2 port 443 vhosts when you can use \`ServerAlias\` and use a redirect for www -&gt; apex?
Because there are 2 things that are achieved here: 1. redirect www. traffic to non-www traffic 2. redirect http:// traffic to https:// traffic If you would create a server block containing both ports, and both domains as aliases, that means all 4 variants (both protocols and both server aliases) are matched, and it is impossible to redirect without creating an infinite loop of redirects. No ? Instead you will end up with: * 1 block for 1 port (80) and both server aliases, to redirect them both to the non-www https variant. * Furthermore we have a separate block for port 443 and it only contains the www. server alias to redirect it to the non-www URL. * Finally we have one block containing the port 443 and the only remaining non-www server alias. And this will be the block that contains the actual config (no redirect). At least I tackle this problem in the same way as OP, if there is an easier way please explain 
They want to test your ability to solve problems, and then assess how efficient you were in solving them I would say that you should probably try to add a reasonable amount of comments, remember explaining what your code is doing, not how. One specific tip I can give you that I see all the time is don't reimplement things that are already implemented in the language itself or in the framework you're using. Recently, I reviewed code from some dude reimplementing an user authentication system in Laravel... Or I see people reimplementing built-in functions, especially when it comes to arrays for some reason, like \`array\_pop\`, \`\_shift\`, etc, or even sorting stuff. For the sake of being the 'just be yourself' guy of coding, I'll just say 'Just do your best'. Changing the way yo do things for a code challenge is a mistake, unless requested to go out of your way to do something in some specific way.
Thats fair. I will probably take out a lot of the framework stuff to be honest. This app doesn't need auth or any of the other stuff the template came with really. Might be good to spend my final evening on making the main algorithm more efficient then.
I believed in HHVM. I *loved* the idea that another company other than ZendCorp (and then RogueWave (who??) and now, Perforce [DB company :(]) would be sheparding a PHP language alternative! I **loved** how Facebook took it upon themselves to create what was the first, is still the only, PHP language specification and promised full backward compatibility with PHP. I **loved** all of the additions of HackLang (OK, I hated the name as it was totally ungoogable and had tons of PR problems with clients ["You want to **hack** my site?!"]) especially Collections and their stuct/enum hybrid called Shapes. Oh, and their parameter typing, return types and strict typing, which the php-internals guys blatantly copied, years after. So in 2014-2015, I and my team ported *all* of my agency's 20+ apps and 5 sites to HackLang and we finished, on cue, right before Jan 1 2016. I remember, with relish, the day I executed `/etc/init.d/php7-fpm stop` on the Gentoo prod server. Then, in March 2017, I sniffed via my enhanced perception that HackLang was going to either stop being developed or break backward compatibility with PHP, so I immediately had us port every active client back to PHP7. and then when they announced a PHP backward break, I very reluctantly re-ported every other codebase to PHP7 except the cryptocurrency HFT bot and the stock market neural nets, since they wouldn't even be able to function in PHP 7.2. Going back was, unfortunately (I thought), much much easier than going to HackLang (which at the time didn't even support PostgreSQL), mainly due to extensions and full compatibility with the PHP 7.1/7.2 spec. In less than 2 weeks we were back. But I really really wish some corporate sponsor would take the PHP syntax, if not the actual trademarked language, and sponsor it worldwide, really really pitch it to businesses and universities (and governments!) large and small, and hire PHP evangelists to spread the good news. Hell, I'd LOVE to be a PHP evangelist! If we don't do this, then I'm increasingly fearful I won't be able to retire doing PHP in 30 years. And it'd be so simple. Maybe transition from selling products with relatively no merit (ZendServer) to a crowd-funded model. Maybe charge $5 for every current major version of PHP? 
What type of company? I imagine a mature company with at least a couple people on its dev team would like to see you coding to a known styleguide (PSR-1 or 2) - commenting liberally and structuring your code in a way that's readable by others. The surface level purpose of the exercise is to see if you're competent, but beyond that, it's to see *how* you think. If you can explain why you make the decisions you do - even when it comes to deploy / docs, etc., even better
The seeming contradiction is being a small business owner and being able to have fun at the same time. As another small business owner myself, I totally grok the sentiment! Hustle or die!
Small but there is at least one 5-6 team I think. I used to do PSR2 at my last company, I still do. Current company lack of formatting drives me crazy. Some real WTF stuff. I need to comment more I think. A wiki on the git page would be good too. Thanks for the input!
When I review challenges I set I am looking for someone to simply solve the problem if a fast efficient way. I also expect them to adhere to a styleguide and be aware of basic software design patterns. I dont care if you comment your code. Well structured and designed code should not need comments, it should be self documenting. I also expect you to use all of the baked in features your framework provides (should you use one)
&gt; The comment type hinting (not even sure what that's called) They're called Annotations.
Usually day to day I don't think my code needs comment 90% of the time as it's always just using documented framework features or common patterns or something. Might comment this as the main calculation is quite mathy. I have failed before on using queries instead of active record/ORM type stuff before. Trying not to do that this time. Thanks! 
If you want to impress them (at least I would be), use these 2 utils: [https://github.com/FriendsOfPHP/PHP-CS-Fixer](https://github.com/FriendsOfPHP/PHP-CS-Fixer) and [https://github.com/phpstan/phpstan](https://github.com/phpstan/phpstan) Second one is far more important. Make it "level=max"; it is not hard trust me, and will force you to write clean code.
We haven't gone through this process for a while but previously, if you didn't write any tests your application wouldn't go any further. We would also like to see some awareness of industry practices. PSR-2 might not seem that important in itself, but if you don't know about PSR-2, you probably don't know about other conventions in the industry. Don't worry about seeming pedantic, much better than seeming sloppy. Finally I'd want to see some good understanding of program design: SOLID principles, design patterns, good abstractions. I want to see code I wouldn't be afraid of having to maintain.
less comments, more readable code
&lt;?php $serverName = "sqlsrv\\sqlinstance"; $uid = "usersname"; $pwd = "password"; $databaseName = "Contacts"; $connectionInfo = array( "UID" =&gt;$uid, "PWD" =&gt;$pwd, "Database"=&gt;$directory); &amp;#x200B; $conn = sqlsrv\_connect( $serverName, $connectionInfo); // Check connection if ($conn-&gt;connect\_error) { die("Connection failed: " . $conn-&gt;connect\_error); } $sql = "SELECT \* FROM directory"; $result = $conn-&gt;query($sql); if ($result-&gt;num\_rows &gt; 0) { // output data of each row while($row = $result-&gt;fetch\_assoc()) { echo "&lt;tr&gt;&lt;td&gt;" . $row\["title"\] . "&lt;/td&gt;&lt;td&gt;" . $row\["number"\]. "&lt;/td&gt;&lt;/tr&gt;"; } echo "&lt;/table&gt;"; } else { echo "0 results"; } $conn-&gt;close(); ?&gt;
i have both pdo and none pdo drivers installed, but on the machine where the apache is hosted not on the sql server
according to WAMP under the php extensions they are loaded, at least they have the green check next to them, which to me tells me they are loaded. i have them in the php.ini with out the ";" by them 
how would i restart phpfrm/apache from windows with using WAMP? ive googled it a good bit and cant seem to fine anything
&gt;I need to comment more I think Just remember that comments are not there to explain **what** you are doing, they are there to explain **why** you are doing it. I normally view excessive commenting as an indication of inexperience because it's something that is drilled into you by your teachers so they can understand what you were trying to do even if it doesn't work. In industry that habit is normally gradually lost because you are expected to write readable code where the variables and class and function names clearly explain what the code is doing and clearly define responsibilities. If you comment heavily, you never get into the good habit of writing code that is readable on it's own.
here is my extensions area of my php.ini : &amp;#x200B; ;;;;;;;;;;;;;;;;;;;;;; ; Dynamic Extensions ; ;;;;;;;;;;;;;;;;;;;;;; &amp;#x200B; ; If you wish to have an extension loaded automatically, use the following ; syntax: ; ; extension=modulename ; ; For example: ; ; extension=mysqli ; ; When the extension library to load is not located in the default extension ; directory, You may specify an absolute path to the library file: ; ; extension=/path/to/extension/mysqli.so ; ; Note : The syntax used in previous PHP versions ('extension=&lt;ext&gt;.so' and ; 'extension='php\_&lt;ext&gt;.dll') is supported for legacy reasons and may be ; deprecated in a future PHP major version. So, when it is possible, please ; move to the new ('extension=&lt;ext&gt;) syntax. ; ; Notes for Windows environments : ; ; - Many DLL files are located in the extensions/ (PHP 4) or ext/ (PHP 5+) ; extension folders as well as the separate PECL DLL download (PHP 5+). ; Be sure to appropriately set the extension\_dir directive. ; extension=bz2 extension=curl ;extension=dba extension=com\_dotnet ;extension=enchant extension=fileinfo ;extension=ftp extension=gd2 extension=gettext extension=gmp extension=intl extension=imap ;extension=interbase extension=ldap extension=mbstring extension=exif ; Must be after mbstring as it depends on it extension=mysqli ;extension=odbc extension=openssl ;extension=pdo\_firebird extension=pdo\_mysql ;extension=pdo\_oci ;extension=oci8\_12c ; Use with Oracle Database 12c Instant Client ;extension=pdo\_odbc ;extension=pdo\_pgsql extension=pdo\_sqlite ;extension=pgsql ;extension=phpdbg\_webhelper ;extension=shmop extension=php\_pdo\_sqlsrv\_7\_ts\_x64.dll extension=php\_pdo\_sqlsrv\_7\_ts\_x86.dll extension=php\_sqlsrv\_7\_ts\_x86.dll extension=php\_sqlsrv\_7\_ts\_x64.dll &amp;#x200B;
I remember that phase a few years ago. Interesting seeing my buddy who's getting into coding commenting stuff basically just reiterating what language functions do. I get what you're saying.
I wish my tests were better to be honest but at least I have some. Part of the reason I am looking is to improve at stuff like testing as no one knows about it at my current company, so I'm learning on my own.
You should be able to stop it and start Apache again from Wamps control panel. 
when you are just starting out coding it makes sense to comment more because there is a much higher chance that you are not actually doing what you were intending to do, so to look back at it a year later it's useful to see what you *thought* you were doing.
that would be good enough for me. Make sure you get it across to the employer.
i have restarted apache, still same thing, **Fatal error: Uncaught Error: Call to undefined function sqlsrv\_connect() in C:\\wamp64\\www\\executive\_offices.php** 
Do a general read-up on good interview technique and preparation! think about any projects or work you've done previously (doesn't have to be programming - but it would help!) and think analytically about what you learnt &amp; how you would do it differently.
Make a php file with die(phpinfo()) in it and go to that page. Check if the plugin is loaded.
when i do a find of that page for "sqlsrv" i dont see anything for it
So plugin isn’t loaded, open a cmd and run php -m to list the loaded plugins.
it says unknown command, i assume i need to do it from one of my php folders? &amp;#x200B;
«...question» «*small amount* of logic» «solve *the problem*» «**using a framework**» &amp;#x200B;
Always my first question: "What's your biggest fuck-up and how did you resolve it?" 
did it from my php7.2.14 folder -- i do not see anything related to MS SQL
It's part of the question. They use this framework and want you to deliver an app with it to show that you could fit into the team.
Are you using 64bit PHP, or 32 bit? you're trying to load both extensions here, i'm not sure if that will work. Does your `phpinfo()` output mention anything about sqlsrv?
no it does not, and i dont really know which to use, im trying a 64 bit for my desktop (thephp/apache server) and the sql server , so i would assume i should use 64bit.
if you aren't sure what they want, ask clarifying questions. gathering clear requirements is as important as any of aspect of the job. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
in the same way that you did the `php -m` command, do a `php -v` and share the output. That should show if you need 32 or 64 bit
C:\\wamp64\\bin\\php\\php7.2.14&gt;php -v PHP 7.2.14 (cli) (built: Jan 9 2019 22:23:26) ( ZTS MSVC15 (Visual C++ 2017) x64 ) Copyright (c) 1997-2018 The PHP Group Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies &amp;#x200B; &amp;#x200B; looks like i need 64, 
Seems like you didn’t instal the plugins in the correct folders . You’ve got more googling to do. But make sure that you download the correct version 64/86. Check the github repo, you’ll find the plugins there names with the php version and 64/86. Good luck 
Yup. Try disabling the other extensions, restart your WAMP server, and then see what phpinfo says
i currently have them in the C:\\wamp64\\bin\\php\\php7.2.14\\ext folder, should they be somewhere else? i put them here because thats where i found the rest of the extensions. 
Seems correct , and your php.ini file is loaded? You can check the config file being used using php -i or phpinfo.
always explain your thought process, even if it seems obvious. others will appreciate later. and FORMAT your stuff.
When i review code what i look for (in a senior) is unit tests. Even though we don't ask for them explicitly, we expect seniors to know this is required for all code. Other than that, i look at techniques used (solid, PSR compliant code, etc), the way the solution is made. If it has the "wow" factor or i'm impressed enough they get a 2nd interview (which usually results in hiring the person). To be honest, i do not comment in my code at all. When you adhere to "clean code", SOLID and PSR you don't need to. Code should be self describing without the need for comments to explain what you're doing and why. Try to go all out on the solution, but don't over engineer it. Make it look like something YOU would be proud of and would show to someone else saying "this is good clean code". 
Looks like im still not seeing anything related to MS SQL, at least not something at screams it
When I give these types of assignments I usually rate it based on the following: 1. Functions correctly per the spec 2. Has decent unit tests 3. Follows some kind of coding standard. We use PSR1/PSR2 so I tell them that when they get the "assignment" 4. Adheres to at least some of the "rules" from "Clean Code" (https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29) For us 1 and 2 are requirements, 3 is important but not required (enforced using PHPCS), and 4 is something I just plan on teaching a junior developer but is a nice bonus if they already know it. 
damn. I don't have a lot of experience with WAMP, i just use PHP and the built in dev server. Not sure what else to check at this point.
my end goal is to not use WAMP but host the site on an internal IIS server, should i install php on there for when i host the site?
&gt;n I've done this for 20 years, in multiple places. It's all the same. One thing for sure - when business people are happy, my budget grows so I can get more poorly socialized jerks and when business people are not happy, I have to make hard decisions. When I make hard decisions, it will be easier to rid of someone who is perpetually late and leaves earlier, because everyone knows who those people are, including business people. One thing you coders don't get and it took me forever to comprehend is that it is irrelevant how great or smart or brilliant or whatever you are if you hurting team in the eyes of business people. Team is &gt; then you. I can replace you in a matter of hours. I mean tell HR I need a coder, I will have a stack of 400 resumes in a matter of hours, but you won't replace business people. Sorry. I am not saying that this is right, I am saying that this is what reality is. So if i understand you, to make business happy, you need your employee to come on time, so they will have the impression that your team are professional and efficient. What can i say to that, i would just run away from you...
i believe so, i have a page with &lt;?php die(phpinfo()) ?&gt; &amp;#x200B; and it loads but no mention of the SQL SRV extension 
These kind of people are bad at their job, don't even bother to convince them, just run away to a new place, which will value your work rather than your speeches and attitude. I am not a fan of a strict hours, a dev should be flexible depending on the amount of work.
Is your php.ini loaded? On the first box with details it should tell you which php.ini is loaded. That file should have the extensions 
Thanks, I will do this.
 C:\\wamp64\\bin\\apache\\apache2.4.37\\bin\\php.ini &amp;#x200B; looks like it loading the one from apache, not the php install ive been adding my extensions too. 
wait i did see this &amp;#x200B; **Configuration File (php.ini) Path**C:\\Windows **Loaded Configuration File**C:\\wamp64\\bin\\apache\\apache2.4.37\\bin\\php.ini 
You're probably right @keesbeemsterkaas about using vhosts with Apache whenever possible. In practice however, the use of .htaccess files is very (very) common. I guees that is due to the fact that many websites are hosted on a shared hosting environment where users mostly don't have access to the vhost config. Thanks for your remarks, I will try to incorporate them into the article.
 SELECT * FROM ( -- dense_rank counts rows per group SELECT %s, dense_rank() OVER (PARTITION BY id_obfuscated3 ORDER BY r.scored_start DESC) AS row_pos FROM obfuscated3 AS c LEFT JOIN obfuscated1 AS a ON a.id_obfuscated1 = c.ref_obfuscated1 LEFT JOIN obfuscated2 AS t ON t.ref_obfuscated3 = c.id_obfuscated3 LEFT JOIN contest AS cc ON cc.id_contest = c.ref_contest LEFT JOIN result AS r ON r.ref_obfuscated2 = t.id_obfuscated2 LEFT JOIN contestant AS con ON con.id_contestant = r.ref_contestant -- the subselect fetches maximum day per obfuscated3 -- we now join the results returned from subselect with the values from outter query INNER JOIN (SELECT ref_obfuscated3, CASE WHEN maxd &gt; 0 THEN maxd ELSE mind --practice days END AS max_day FROM (SELECT ref_obfuscated3, MAX(obfuscated2_number) AS maxd, MIN(obfuscated2_number) AS mind FROM -- join with obfuscated2 point to filter out obfuscated2s without points obfuscated2 JOIN obfuscated2_point ON id_obfuscated2 = ref_obfuscated2 WHERE obfuscated2_number &lt;&gt; 0 AND result_status &lt;&gt; 'cancelled' GROUP BY ref_obfuscated3) AS minmax ) AS it ON t.ref_obfuscated3 = it.ref_obfuscated3 AND t.obfuscated2_number = it.max_day WHERE cc.id_contest = :contest AND r.scored_start IS NOT NULL AND (SELECT SUM(points) FROM result WHERE ref_obfuscated2 = t.id_obfuscated2) = 0 -- contestant can have a negative rank if they were not competing on a particular day ORDER BY c.id_obfuscated3 ASC, r.scored_start DESC ) AS inner_q WHERE row_pos &lt; 4 --return 1st three starts &amp;#x200B;
Great explanation, this is exactly why I used this approach. Also, by having separate server blocks it could make processing by NGINX more efficient: * The redirect-only-blocks are only used if you have the "wrong" domain or protocol. Processing should then be instant since there is only a single command: redirect to the correct domain with the correct protocol. * The main block now only contains "good" requests and is kept as small as possible. This means NGINX has less locations to max and processing should be more efficient.
This. It's better to ask the right question than to guess the right answer to a question you didn't ask. You don't seem more intelligent by not asking questions in the field of Software Engineering. In my interviews, I have entire exercises where the primary purpose is to see if the candidate can ask good questions.
There is a guy who has de same problem and he fix it. Copy the link for yoy. https://stackoverflow.com/questions/22015179/fatal-error-call-to-undefined-function-sqlsrv-connect 
Dude... this is **not** what ORM is for. You are doing logic in SQL, that is not how things are done correctly. And what is this MAX, MIN, SUM, CASE etc... It will be very slow with just 100.000 rows, probably even less than that. Aggregated columns are what you should have used, even without ORM. But in Doctrine, it is very easy to do: [https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/cookbook/aggregate-fields.html#using-your-domain-model](https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/cookbook/aggregate-fields.html#using-your-domain-model) Sorry to say but honestly, everything is wrong here. Symfony+Doctrine are modern tools where logic stays in code, not in DB. This is written by expert in SQL but stuck in long-gone era. You can't blame the tool you don't know how to use. The advantage of using Doctrine over some Active-Record solution is that you think of DB just as place to preserve data between requests. Your entities would be the same if you used API instead, that is the power of Data Mapper pattern.
I would like that PHP has money support; bounty system, Patreon or something else. Development is very slow, Hack is far more advanced but without framework support, it is a no-go for me. With Nikita Popov employed in JetBrains, I would honestly pay double the licence if he could work full time on PHP. Imagine having generics in php7.4, or at least typed arrays; that would be something :) 
and/or vimeo/psalm 
Pretty sure the Google crawler is advanced enough to let pages load all the JS before indexing it. What exactly does this improve?
Because there is a lot of professional software developers who do not work like office clerks, factory workers or customer support via shifts. But even competative race put aside, when people like their job they tend to do a bit more. Like staying to finish the task at hand not looking at clock. Obviously if you are not getting paid for extra hours when you should be looking for another job. That's not only the case with software developers. Any higher professional domain requires more than minimum of 40 hours a weak to keep up at least on avarage. Lawyers, doctors, entreprenuers, you name it.
But it is. First of all exclude freelancers. It's difficult to calls them professional even when stretching qualification descriptors. Start ups, game development, entreprenuers, people who enjoy their work and fact that it's easy to get paid extra. Not to mention that any competative domain requires more than minimal 40 hours just to keep up on avarage.
So your suggestion is to fetch all the records to php and then process them, by traversing the deep object tree. If that's what you think, then I feel sorry for your customers. This is exactly what SQL is for.
/r/programming is more generalized.
&gt; Start ups, game development, entrepreneurs Now include the majority of programmers working across much broader industries. Hours at keyboard != productivity. Anyone still measuring that way isn't measuring productivity at all.
Now if only it could do a simple copy and paste and automatically re-link / import classes in the process. 
And that's why I explicitly stated that it's not hours themselves which hint at higher value, but other traits which do often manifest as longer hours as side effect. &gt; Hours at keyboard/in office != productivity. I'm not talking about code monkeys (that's the actual slang it appears). There are multitude of other ways to create value than writing code. For example if you're a senior developer, and a junior asks you a question, but you refuse to sit down and explain because "my work here is done" you're not adding much. &gt; Hours at keyboard/in office != productivity. Sure. However, there are very productive people who also give more hours. So it isn't very relevant.
one particular problem I am having is SSR rending for the &lt;meta&gt; tags.
That's true. But what about other search engines? (Bing, Yahoo, AOL, DuckDuckGo, Yandex) Also you can show your page to the user before javascript is loaded.
The post is about hours in the office. 40 hours in the office is a pretty typical amount of time. Yes, we all work outside that. Half of the time I solve problems or come up with a new team strategy, etc while I'm doing something completely unrelated. That's why most of us aren't hourly. But like hell 40 hours in the office is any form of measurement of productivity. It's not like it's the 80s and we don't have alternative means of communicating with our teams. Out to lunch and a junior is stuck on something and a quick slack reply can solve it? Done that... Watching a movie on the couch at home and a critical bug report comes in? No biggy, fixed that without leaving my couch. Yes we all likely "work" more than 40 hours, but we most certainly don't all put 40 hours in at the office and it's not even that common from my experience, at least here in Seattle.
Why would you render &lt;meta&gt; tags in your body?
because you want SEO inside your vue-app
Guys, thank you very much for the support. I passed the interview!!!
But &lt;meta&gt; tags are for your &lt;head&gt;. You can't do that with Vue.
As a person who has given such tasks for candidates and was involved in the interviews I agree a lot on this! Some assesments are specifically designed to be unclear or fuzzy, forcing candidates to ask questions. It helps a lot to understand their thinking and a lot more. People who don't ask questions usually were dropped off the process, even if their code was brilliant.
Are they also looking for communication skills &amp; how well can you learn? I wouldn't call framework knowledge a measure for team fit. If you have brain in your head, it's easy to learn any framework from experts in the team.
Well, so we might find ourselves agreeing on most points. What I was referring to is that it becomes difficult to believe in ones dedication when one in question is always first to stand up from the table when clock turns 5. And in my experience people actually do stay longer in the office. Now, most of the time, obviously, the office won't be bland set cubicles too, which helps.
We probably are mostly agreeing. Around here the office gets less attention than it used to, though. People are expected to be available, but that typically doesn't mean in an office. I barely ever meet in person with some people I work with regularly, but campus is big and wasting 20+ minutes walking is in the rain is not enjoyable or productive so it makes sense. This seems to be a growing norm in the Seattle area. Friends and old colleagues seem to have similar experiences with other employers in the area. Some have even started to fully embrace completely remote employees. I was mostly hung up on the idea of measuring time in the office as a means to benchmark productivity, which is what the OP was saying their CEO does.
When you’re right you’re right
I know but the question says use this framework. I’m not going to purposefully do something different.
Not saying you should, just be aware that this assessment also shows the face of the team/company. It's a two way assessment
 I see what you're saying now. There were other elements to the question including making a variation of [this](https://en.wikipedia.org/wiki/Change-making_problem). So I am still hopeful.
Please don't do things like this. If you need to run the same code on all of your pages you probably need too bootstrap, and if that is the case you probably should be using some framework. You should look ad phpmd and phpcs, make sure your code passes the tests there and understand why it doesn't.
Sure, you are free to do so. I work corporate, not startup and it is the same story everywhere. If you don’t mind me asking, why is coming to work on time would be a deal breaker? I am just curious.
Are you applying for some scientific company? :) Here's another tip - ask them where are they using this "change problem" on their day to day work. I've found out that most of the times it's just a waste of time and companies never write complex algorithms like this. It's fun, but unrelated most of the times.
Just wanted to say thank you for this work! Very excited to get my hands on it and start to use it :)
DOM Crawler? ([https://symfony.com/doc/current/components/dom\_crawler.html](https://symfony.com/doc/current/components/dom_crawler.html))
There are sectors within the industry where working over 40 hours is certainly more prevalent than others (game development being the worst offender that I know of), but as far as the industry itself as a whole goes, the average is actually slightly below 40 hours internationally, and right around 40 here in the US. The startup scene is more unstructured, and tends to be saturated with brand new developers who do nothing but work. Not because they have to in most cases, but because they're new and full of passion, and haven't yet learned life lessons about work/life balance and burnout. It's not uncommon to see these people working 60+ hours a week. Similar things can be said about the big tech companies like Google, Facebook, Microsoft, etc. where developers are usually in the 45-50 hour range trying to climb the ladder and pad their resumes. As a percentage of the entire software development industry, these companies and startups in general are a relatively small fraction, so their habits don't have much of a profound effect on the industry as a whole. It's actually a pretty common mistake that younger devs make - thinking that that's how development is everywhere. I can assure you that it is not.
Jesus Christ, is this all you’ve got out of my post? See poorly socialized illustrated. You are not dumbasses but you see only your side of story thinking of the rest of the structure as unnecessary and redundant. You are a specialist in your own field, I hope, but believe me you are an amateur in other fields. I am not going to say that I am attributing this to you personally, but a lot of developers consider themselves to be in the center of the universe and you are not. I have this guy on one of my teams who is pretty close to brilliant. But arrogant, self centered and rude beyond belief. Guess who had not seen a raise in two years despite delivering really great code? Look I started writing code 22 years ago. I was doing C++ and thought that I am a genius and smarter than anyone in the room. I was wrong and my conduct deprived me of tons of opportunities. Here is an example : I had an interview at a company out of Redmond, you know the one, right? It’s a grueling process where you had to write ton of code on whiteboard and so on. One of the guys interviewing me disagreed with something I’ve done. I became defensive and rude but I was right. Guess what was the result of such interview? I was right and wrong at the same time but I could not understand it at that time. Look, why do you work? I do it to provide for my family. I keep my teams employed and my products running. I am telling you what really is going on in your managers head without sugar coating it. If all you got out of it is an insult that wasn’t there, I am sorry but you just illustrated my point. Codeigniter is fine, really. I wrote in it about 4 years ago or so. I would recommend Symfony at this point to be honest.
Yup, and this is the consequence of the GoLang overhype train, developers may mistakenly buy into that hype without carefully thinking about whether they truly need it. Just because its a shiny little new toy that makes you look fashionable, come on this is business. Nice to hear that the OP gives PHP another chance and realizes, its not that bad after all. 
If you want to go hourly you should contract. It’s a great way of earning a lot of money really quickly, if you are good. I would not however recommend it if you have a family and is a sole provider as you will be out of work occasionally plus you would have to deal with medical / dental / retirement separately.
Minimum number of lines to reach solution. I know nobody else has mentioned this yet, but even if all you are doing is using better syntax to eliminate some characters here and there it will reveal a mastery of the language that other prospects might have missed. I once saved a company multiple years on a project that was undeniably massive with no easy solution readily available just by being too lazy to properly complete the task the way they wanted. Rather lengthy story, but the original idea required creating a library of GPS coordinates and designating which ones were near coastlines versus which were in open waters to prevent units from broadcasting their GPS (this was when Somali pirates were all in the news). My solution instead took a couple hundred lines of code (if that) to monitor subtle or drastic changes in coordinates to tell if a ship was docking or changing ports or sailing into open waters. Took a few days instead of a couple of years to complete. This company was fully ready to have this project span dozens of months and hire on additional team members. So, aside from syntax, umorthodox problem solving skills might be a disadvantage at "by the books" organizations, and even in those situations you should consider if the task might be a trick: are there out of the box solutions or an inherent flaw in the obvious ways to solve the problem? Some of the obvious solutions to problems might create security risks or rely on recently deprecated code.
Sure why not? You aren’t happy you should move on. I would even write you a nice reference letter and give you some endorsements on linked in. I don’t work anywhere for more than 4 years anyway. It gets boring, so I am all for mobility.
Sure ask question but what i want to see is. 1) A readme file, its a must. 2) doc blocks for your functions e.g return types params, basic description. 3) use DRY and or solid principles. 4) if you want to stand out, write some functional / unit tests and maybe output coverage somewhere.
I don't do a lot of scraping and DOM parsing these days, but when I do its usually just DomDocument's `loadHtml` method to load whatever file's been downloaded, and then converting the XML string that DomDocument produces into a SimpleXML object, and then using simple XML's `xpath` to grab the valued I want. Not sexy and there's almost certainly better tools out there -- but it gets the job done and I know I can rely on DomDocument and SimpleXML being there. 
I am talking about the culture of the company which can be applied in a Corporate or more likely in startup. &amp;#x200B; Since it is an intellectual job, it requires that your mind to be ready to think correctly, some times during the year i will be efficient very early in the morning, some other days i will not so i will start more late and finish late. So what the point to come to the office and just sit instead of having a good sleep and be more efficient during the hole day?
Sorry forgot something else. I also care about burn down rates, uptime and number of support issues your code produced. On the flip side I will fight for you to have best equipment and tools. I will deal with fallout when you screw up too, if you are worth it. It’s not as bad as you are imagining it, really. Think Hannibal- brilliant guy way ahead of everyone else. Stuff that he pulled off is still being studied. But he failed at the end. You don’t have to fight every battle, you have to win the war. You have to compromise and adapt or you will fail too. All Scippio had to do is wait and he won. All I am saying is a little flexibility can go a long way. 
It's foolish to assume that continued development even of important dependencies just goes like that. Money might still be a good incentive to keep the development going. Your thought is far from stupid in my opinion. On one hand I would like to see all the packages in composer.lock considered for monetary compensation (or more like: monetary incentive for continued development). On the other hand this may be too much effort for a very limited effect, I don't now. It all comes down to the amount that is to be paid out.
In my opinion JavaScript goes in a complete wrong direction. I fully appreciate that you try to make Vue/JavaScript in the frontend less pain. But what's so wrong with a good old request response website?
Consider also how vital each dependency is. Some of them I'm sure you could easily replace and move on from with minimal disruption. Others may contribute tremendous value to your application and organization.
You absolutely can. You have access to the entire DOM.
UPDATE : got he module to load, turns out i downloaded the SQL drivers version 4.0 and was trying to use them on php 7.2, which was not supported. then i went to download those file 4.0 was the highest i could get and is what php directed me to on there site. i lowered my php verison to 7.0.33 and they modules loaded. Thanks you all very much for your help. I did learn a good bit with trouble shooting php!
Lawyers and doctors get paid more...
I would be looking at the presence of tests (not tons, just a couple of them + some comments on other test scenarios - I wouldn't abuse a candidate's time); if any shortcuts had to be taken for time, it would also be OK as long as it comes with an explanation of what a more proper solution would be like (it's good when it happens as I can tell whether the candidate can choose their battles as pressure to deliver is always there). How tidy the code is. If there's a README explaining how the problem was approached.
Use a headless browser via [Panther](https://github.com/symfony/panther) or alike. The only way to parse like a browser is by using a real browser. :)
Nothing is wrong with it. Use that if it fits your needs better.
Thank you so much! That was super informative I learned a lot. Really appreciate your help thanks again. Got it all set-up and working. 😄
something is better than nothing :P
A lot: You are running the complete process whenever you navigate. This makes complex websites slow and clunky. On the other hand, you are right: what SEO relevance does a Vue template have without content? If SEO and UX is important, you will want to find a way to completely render the content of a given route server side, but then let JS take over. In other words: your site.com/blog-entry-1 should exist as a request response while navigating from site.com to site.com/blog-entry-1 should be a frontend route of an SPA. How to make that work with one single Code-Base is rather tricky, but I used to work with an AngularJS/PHP framework combination that would do just that.
that's the idea with A = (B,C), B = (C), therefore C gets two shares, B gets one; one assumes that if upstream packages also depend on package C, then package C is more vital than package B.
A lot of good thoughts here, what I'd like to add (and what I've seen a lot of candidates miss) is it's a two way dance. It's not only the company assessing you, but you're assessing the company too. Ask them questions about the assignment and how real does it represent what they do day to day and what are they expecting to find in the result (technical knowledge, design pattern knowledge, general basic knowledge, testing, all of them?). For us, the assignment was more of a topic for discussion, we asked a lot of questions in the afterwards interview about why certain choices were made. We looked at in order of priority: * does it run? * we saw many assignments that assumed we are running Apache and they added .htaccess (we only ran the code from \`php -S\` * if it didn't run, most of the times we didn't even go deeper into the code * does it run on error\_reporting(E\_ALL)? * had code sent which had notices all over the place * we did allow few errors for medior level devs, some more for juniors, zero tolerance for seniors * readability of code * how well can I find myself around, how well can I understand the flows * tests * what is being tested (not everything has to be tested, but 90% \*functional\* coverage would be cool) * how is it tested (simple input/output method tests, minimal or zero mocks for a tiny application) * security * for web projects - mainly form &amp; query string filtering &amp; validation * it was fine to mention what would be done in the comments (// I would filter integers here), implementation details were not important * adherence to community standards &amp; practices (PSR-\*, using composer, no weird directory structures) * adherence to framework standards if one is used (symfony for example have slightly different approaches to problems than Slim) * latest PHP &amp; strict types * documentation * most of the times we did not specify if the code will be ran from CLI, nginx or any other place so candidates should tell us how to run the code * overly documented code is a no (no need for docblock if strict function signature already says the same) * use of available components &amp; libraries * no need to write your own routing or http client if not asked for * use of design patterns * SOLID mainly, proper DI I think we, developers, sometimes overlook the assignment as an important view into the company culture &amp; how they deal with things. Take this example - it's a "web bakery" dealing with simple marketing projects and "about company" pages and most of the times it's throwaway code. The assignment asks for deep &amp; strict SOLID knowledge and difficult algorithmic calculations (write a sorting algorithm, calculate probabilities of smth) - I can bet that most of the developers in that company hasn't written a single algorithm for a client (there are ofc exceptions). Here's another - a company is working with a single project (magento retailer let's say) - the assignment for it is to write a new application using symfony framework, no mention of magento). How many new applications do you think they create? Most of the time it's improving on an existing codebase, bugfixing, new features, and probably, a lot of old legacy magento code if it's an old company. Hope this helps and good luck!
Nothing, i love the good old way. The problem is that making interactive front-ends is much easier with front-end frameworks. But they come with their own problems.
&gt; (Yahoo, AOL, DuckDuckGo, Yandex To be honest, who cares? Not saying it's good that Google owns 75% of the market, but for most businesses only Google is important. Anyway, cool that you can do this! 
There's really no need to have a SPA for a blog. A SPA is good for web *applications*, but it's not a one size fits all.
Well, I wouldn't agree in terms of plugins. I mean, obviously there are not as many as there are in Magento, but in the end - how many do you actually need? Remember that Sylius from the beginning is meant to be a framework, not a platform. In the middle market, you always need dev support anyway. It's based on Symfony, which has a huge community and a lot of bundles you can easily adapt to Sylius. I am a part of a company that's working only on top of it. We've been working with Magento 2 before. After we switched, we measured that an average B2C project's time to market is 3 times less with Sylius. We open sourced some parts of our work, so if you're looking for plugins, feel free to check our Github here: https://github.com/BitBagCommerce And regarding Sylius itself, it's way much better to work with it than it is with Magento. I think that it's going to have growing popularity among developers at least. We'll see if the business is going to be pushed by them to use it in the future
I use vcs commit dialog in phpstorm, it has a checkbox for this. So practically phpstorm runs it before my every commit, without having to set up got hooks
Up to one year ago this was not true.. now it is?
You can omit the head and body tags anyways so technically... 
&gt;You are running the complete process whenever you navigate. This makes complex websites slow and clunky. This should had been fixed in the HTTP Layer or in the browser itself not in the userland (JavaScript). They could have load the request in the background and replace only the things which changed. Like Vue and React do in JavaScript. All frameworks and technologies in the frontend try to re-invent the wheel. They create solutions for one problem but they create flaws on other parts. I give you now a simple use-case what I always have in every annoying JavaScript-Vue-App: * You have a Vue-SPA * You login as an user * Now you make some coffee, tea, leave the home... * Then you come back and your session on the backend side is over How your Vue-App get's notified about that? Constant Ajax-Call to check if the user is still logged in? Long pulling? WebSockets? This is just an example for a problem what was already been solved ten years ago. But now for that little feature you need a complex solution like WebSockets just that it is like before like in a request/response application. &amp;#x200B; \--------------- &amp;#x200B; Don't get me wrong your package is cool and useful. But that it needs to exist is a problem. Do you understand what I mean?
I am not saying that I approve of advocate for it. It is however what it is. Honestly I have some lawyers and doctors in my social circle and those guys work much more than IT people. I work around 60 hours per week having teams in both costs of US and in South Africa. It’s not good for you but in my age it’s too late to switch. You aren’t wrong, but reality, at least in my experience doesn’t agree with you.
Interesting. As an alternative, have you seen this: https://github.com/spatie/server-side-rendering? It is a package for generic server side rendering of JavaScript in PHP.
i preferred codeigniter since it was a cousin of laravel and laravel felt like the "bigger than i needed" framework. then i used it and i like it. then i felt the same about symfony. then i used it and i like it too! turns out they're both pretty great i use eloquent either way so once you're past boostrapping, it's pretty similar. i do love laravel's auth creation. one cli command and all that auth login stuff is done
i use sourcetree and want to like the phpstorm git client but man, when i open the "VCS" toolbar, there's no commit, fetch, pull buttons! i need to go up to the menu or memorize the ALT+key commands to do everything? is there like a toolbar somewhere i'm missing? 
I treat this like a math test, If you don't know how to solve said problem try your hardest and show (document) your work, as much as possible. (waits for the down votes)
I checked out your code. Do I see it right that you parse the HTML with the vue-syntax (commands) and then you render it by yourself in PHP? So basically you wrote a JavaScript engine in PHP? I don't know if I am right but maybe consider using: [https://github.com/phpv8/v8js](https://github.com/phpv8/v8js) you can't make a JavaScript engine on your own. But your code in conjunction with [https://github.com/phpv8/v8js](https://github.com/phpv8/v8js) could lead to a good result. \--------- PS: If you target PHP 7.1+ (what you should do) then consider using type hints and typed return values. 
I know I am not answering your question but please fix two things in this code. First use a parameterized query. Second please for the sake of your users hash the password with at least sha256 or better BCrypt. 
....am I blind, or does this not support PHP? In which case, it has zero relevance to this subreddit?
You are redirecting to success when the username isn’t found. Also, make your logic simpler, username will always be equal in the first if statement because your sql only returns those users. You could also just write your SQL query to nay return data where the username AND password are matched. Lastly, you know you should never store clear text passwords right? Read about password hashing. http://php.net/manual/en/function.password-hash.php
Bigger question is why have you allowed multiple instances of a username to be used? It should be a unique column in the database, not something that can be re-used by another user. Other than that you're doing mysqli_fetch_assoc before the while loop, meaning if there's only one result the while loop will never trigger, because you've taken the first row out of the result set with the first fetch, meaning the second fetch will be null. 
Wordpres? Any particular entertainment site that you like?
Pusu/pull buttons are in upper right corner by default and you can customize it
Have they moved to a run time loading of content and the information you're wishing to scrape is no longer in the base document? (eg Ajax)
More frequently included doesn't necessarily imply that it provides the most value. The npm package [`is-number`](https://www.npmjs.com/package/is-number) package has 187 dependents and over 15 million weekly downloads. At one point it was a dependency of some of the most important npm packages including webpack, @babel/core, jest-cli, browser-sync, and ts-loader. It is also just two or three lines of code with no non-obvious properties. Every instance of it could be replaced throughout a massive code base in seconds—and in fact most packages did replace it once a stink was raised. A project might include babel only once, but a project's dependencies might have included `is-number` a hundred times. However `is-number` provided almost no value, while babel makes the whole project possible.
&gt; To be honest, who cares? People that don't want the search web to be Google only.
value as measure of distance from project dependencies ?
I use Drupal but I want a site like events.sample.com that would host the script if there is one these days. Mainly it should show a list of events with information like location, timings, ticket costs, etc. Search by location etc. too. Could be any technology say, js, php or jquery etc.
The actual solution would be to treat PHP as an API delivering data, authenticating users etc. doing typical backend stuff but actually delivering your SPA from a very thin Node.js application where you can do the server-side rendering intended by Vue developers and communicate with your PHP backend as if your Node.js application was running in a browser.
Many good suggestions, but I'd like to add something I've done for take home exercises, and it's worked well for me: take notes. * Note observations on the software and versions being used. e.g. Composer, Symfony 4.x, PHPUnit 7.x, etc. * Note any code standards you see in place if they aren't already given to you. * Note bugs in your code and how you fixed them. * If you can't finish or produce the exact results, explain why, such as needing additional feedback. All of those things are normal development lifecycle activities, and it shows you're organized, thorough, and process aware.
It sounds like you might want to sign up to https://tidelift.com/
By passing scripts to node.js, from php. 
K.I.S.S. A. T.I.T. Keep it simple, silly ... And Think It Through.
What you're asking for is a full blown web app. You'd be better off looking into some kind of google calendar integration or something.
&gt;* Then you come back and your session on the backend side is over &gt; &gt;How your Vue-App get's notified about that? Constant Ajax-Call to check if the user is still logged in? Long pulling? WebSockets? As long as the user doesn't make new API requests, the app keeps working just the same with the data already available. As soon as it hits the API and receives an authentication error as response, it displays the authentication form and resends the previous request when the session gets sorted out. All without refreshing the page. This is pretty much how a traditional web site would work. I don't see how SPA introduces a new problem. It doesn't need to keep track of session expiration any more than traditional web sites do. Now this is considering a cookie based session approach, which traditionally extends the expiration time on each request. Some folks don't even rely on this anymore, but let's not dig into that.
&gt;So your suggestion is to fetch all the records to php and then process them &amp;#x200B; Where did I say something like that? And keep in mind that my 100 million rows works instantly while you will have problems with few thousands. This DB design is crap, I just noticed you are doing dynamic join: `INNER JOIN (SELECT ..removed for readability..) AS it` `ON t.ref_obfuscated3 = it.ref_obfuscated3 AND t.obfuscated2_number = it.max_day` &amp;#x200B; This is terrible! Sorry, not terrible but stupid. You basically calculate in SQL to which table join should be done, right? There is not enough face-palms in the world for something like that. I am out of this discussion.
Within Drupal u mean?
Within whatever you’re using. A “script” is not going to do what you ask
I was looking at something like this script: http://eventpursuit.ardawan.com/
\`$row\['user\_password'\] == $password\` contains three bugs and \`$row\['user\_name'\] == $username\` is redundant, given that you selected by username in the SQL above. The bugs are: 1. You're storing the password in plaintext. Use \[password\_hash\]([https://secure.php.net/manual/en/function.password-hash.php](https://secure.php.net/manual/en/function.password-hash.php)) and \[password\_verify\]([https://secure.php.net/manual/en/function.password-verify.php](https://secure.php.net/manual/en/function.password-hash.php)) to properly hash the password on storage and verify it upon login. 2. You're not using constant-time comparison, so it's possible for an attacker to tease out the correct password for a username by comparing response-time to various guesses. This would be mitigated by using \`password\_verify\` to check the password. 3. You're using loose equality, so it \_may\_ be possible to abuse PHP's type juggling to get a truthy comparison even without guessing the password. This would be mitigated by using \`password\_verify\` to check the password. &amp;#x200B;
The number of people*
sha256 is not safe for passwords, even if salted. Any reasonable password would be low enough entropy to guess without being run through some sort of stretching process. Bcrypt and Argon2 are currently the only meaningful options.
Apparently there’s a beta php agent, it’s in smaller print part way down the ad.
I made something like this years ago in drupal. Displayed event posters and such that i was scraping from a few sources. Not sure what ever happened to it.
base package of $1,500 a month? lolnope :P
Good point. But sha256 is still better than no hashing, or not? 
Strictly speaking, yes. It forces an attacker to actually expend some effort to reverse it and would keep out the kiddies. It may also convey a greater sense of security than is warranted, since it could still be cracked fairly quickly.
What is the time complexity of problems you like to ask for interviews?