The cron job sounds much more plausible than trying to work around time/memory limits. Have the first script put the data somewhere on the filesystem or the database, and have the second script check for the data's existence.
Sorry. Essentially I want to be able to build websites and web apps with PHP/MySQL. I want to be well rounded enough to build any type, or at least know exactly where to start.
Awesome, I'll check it out. Thank you!
Not exactly the same. In the chain approach, if garbage collection for the parent doesn't happen until after the child exits then you have a problem. In my suggestion (hopefully) the garbage collection for each child would happen when it exits.
When I see a function I'm not sure of, or if I'm searching for something, that is the first place I go. It really is very informative.
If you are able to (and want to) set up/manage your own VPS then I would go with Linode. If you just want managed shared hosting then use something like hostgator.
It will take you more than a weekend just to understand and set up your web stack.
Depends on what you're looking for. Since you only said PHP and MySQL I definitely recommend AppFog; Backed by Tier 3 and CenturyLink. Can't get much better than that. It also has the flexibility to be able to use more than simply PHP and MySQL such as Java, gRails, Node, Node Express, Flask, Rails, Django ,and Sinatra. They give you 2GB of RAM for free and you can have up to 8 service instances within that 2GB of ram. For example, if you have 1 front end PHP application and 2 MySQL databases (100MB max each) you could dedicate 256MB of memory for each MySQL instance and 64MB for the PHP application and still have 1.4GB left to use for free. So that's 200MB of MySQL storage that you can have (100MB x2) so you can either use two separate databases for a combined 200MB of storage, or if you use less than 100MB you can have another database as a fail-over. Not bad for free if you ask me.
Best way to find out is to try. I believe it will work, what grand parent suggests, as each script will run its course and exit, as opposed to your original chaining approach where each script is waiting recursively for last one to finish. In worst case scenario, you can use shell script or batch file to have it run, and that's guaranteed to work.
This book is exactly what I needed to detox myself from a couple month long javascript binge which really left an awful taste in my mouth. I just recently started looking into bash and this peaked my interest, maybe I could use my favorite language to do some of these things. EDIT. Almost forgot! Seriously consider publishing this as a hardback looking exactly the way it does in the picture. I really want that book to decorate my bookshelf.
Looks interesting, just bought a copy. Thank you. 
I think this book teaches you how to do all the things in php that you shouldn't do it php. To its credit the concepts themselves seem fairly well presented, and the ideas are portable to other languages. So when you figure out that php is a terrible language for doing something like daemons, at least you'll have a functional understanding of how daemons work when you start using a more suitable language.
Could a LAMP stack be replaced by the PHP built-in server + file based DB like SQLite?
Not sure about hardback, but definitely paperback. I'm going to wait a few months for the content to "settle down" with feedback from early readers. My e-book readers get free updates whenever I add or refine something in the book, obviously that's a little less cost effective with printed copies!
I've sent you a private message that may help. I understand that not everyone can afford the price, but I had to try and choose a price point that makes it worth the time to write the book. Otherwise my wife might leave me.. :) Time will tell if I've priced it rightly or wrongly.
I'm not sure I'd use the word jerk, I'm sure you really meant to say "clever fellow". Have you got a PHP book on Leanpub then? or one in the works? If so I'd be happy to swap you a copy so you can keep your pocket money for candy.
I lied. 'sudo' changes the uid to 0, aka root. So there's that. Bah.
I've also been told PHP is a terrible language for websites. Still, for me it works for all of the above. Infact it works so well, I even wrote a book about it :) 
I'm a Python developer who had to clean up PHP spaghetti websites. Due to time constraints, I wrote this up to restore a bit of sanity. A minimal ORM-like abstraction to serialize database objects. That's insecure and dangerous code that gets the job done.
Thanks very much! I hope you get something out of it, I've tried to write it for those that already have some level of experience in PHP on the web, so if you find you need anything clarifying don't hesitate to let me know. Good luck with your learning. 
It could do (and I cover the built-in server in the book). The downside of the built-in server is that it is somewhat unproven. While it seems stable enough the PHP devs have stated that it's only designed for testing purposes, so it come with no real production guarantees. That said, it is probably up to most basic tasks. It also won't serve multiple requests concurrently, so if your app relies on that then it may not be suitable, although most "office" apps don't.
That's interesting. I had started to look at tidesdk for inclusion in a future update to the book (I only discovered it recently via hacker news, too late for inclusion in this release). It looked promising. Do you have anything to back up the "leaving it to rot" statement, or is that just an assumption based on the commercial product development?
I mentioned Javascript which is a scripting language, and I've tried Perl and Python (although I've not commercially programmed in them). I've not found any profound or overwhelming advantages to any of them compared to PHP. I know it's not to everyones tastes, but it is to mine.
I'm not sure what you mean by garbage collection, but if you're talking about PHP's memory limit, then each PHP script runs independently of any other script. When you use shell_exec() to run a PHP script, that script has it's own memory "space". It doesn't share the memory or limit of the parent script. Assuming the memory limit is 8MB, each running PHP script get it's own 8MB. Have you tried increasing the memory limit? In your case a simple bash script using [kudose's code](http://www.reddit.com/r/PHP/comments/1r8kje/what_are_my_options_for_having_one_script_kick/cdkq2nq) is probably what you want. If you don't have direct access to the command line, then [LeftLane4PassingOnly's idea](http://www.reddit.com/r/PHP/comments/1r8kje/what_are_my_options_for_having_one_script_kick/cdknz0e) would work the best.
Many thanks. If you have any feedback or thoughts when you've had a chance to read it, please don't hesitate to let me know (author@phpbeyondtheweb.com)
It does look good, doesn't it! I was quite impressed with the way the cover turned out, and that book image. Graphic design isn't my strong point, it tooks dozens of trial versions to get that. I'm not sure it will be economical to do a hardback version, but a paperback one will be in the works in the next few months.
I do realize the relevance of javascript, hence the prolonged binge immersing myself into it. I do however dislike the syntax enough to find myself frustrated quite commonly when working with it. I just started to look into Backbone.js hoping it will help with the structure a bit. I think the whole point of the book in question is the fact that you CAN do more with PHP than just writing server side code.
Great content btw. If i may give you advice on the layout, if you're a programmer, don't do the design, ask a designer.
As you can see by the wide variety of passionate answers here, you didn't escape the fanboys. I've been researching this for months. As a PHP scripter since the mid 90s, and having used Python, Rails, C, C++, classic ASP, Perl, Java, Objective-C and more, I have some cold, hard facts regarding the market out there. Here's what you need to know. You ready? Anything but PHP. So you're on the right track. PHP is taking a nosedive, has been for years and it's only accelerating. I monitor job boards and have a script that aggregates jobs from most areas from Craigslist. Let me give you some numbers. These are from today. These are search terms and the numbers that come up. PHP (excluding Wordpress, Joomla, Drupal): 1,031 Codeigniter: 4 Cake: 2 Wordpress: 610 Joomla: 166 Drupal: 176 Scala (lots of duplicates today, estimate: about 100 Perl: 75 Rails: 243 Ruby (not excluding rails): 254 Node.js: 18 Python: 229 Django: 29 Android: 662 I know what you're thinking. PHP is really high. And it is, but you have to consider a few things. First, PHP is hugely outsourced, and it only takes bidding on Elance or Guru to figure that out. Secondly, people who want PHP done are a lot of times cheap, they want shared hosting and PHP is the way to go there. Also, there's a ton of horrible PHP legacy code out there. Of all the languages I listed above that I've worked with, I've experienced the worst in PHP. So you have to decide if that's what you want to do. Wordpress is also high. Everything I just wrote about PHP applies here, but add plugin development and a really bad code base, and the fact that you'll also be competing with designers now. More things you'll notice. Rails and Ruby have almost identical numbers. Because most Ruby development is in Rails. By the way, gems are not new, Perl had a very similar package manager and it sucked. And good luck knowing where to start with Rails because the developers change their mind and direction about what Rails includes and doesn't faster than books can hit shelves. Python and Django have dissimilar numbers. Django is the more talked about framework for Python, but you can see a lot of people advertise for Python programmers independent of framework. I'll let the PHP frameworks speak for themselves. On Dice, for years running, the most often posted jobs are Java. This is their own analysis. Also, Java is what you need for Android. Here's what I've come up with. Rails. I don't like it, but you'll get jobs. My friend makes 6 figures and has been busy for years. Java. It's in demand and will be for years to come. Any mobile development. I only included android, but that's out of laziness because I'd have to change my script because ios comes up in many English words. Also why I depend on dice's numbers, because java and javascript, lazy search engine. My personal opinion is if you want to learn something for fun, Python is great, versatile, and almost forces you to write clean code. It has great documentation and a lot of desktop programs are written in it. If you want to stay busy with high paying work, Java, Rails, mobile development. EDIT: I think I'm getting downvotes. I separated fact from my opinion, so I hope you take from this what you need, if it's been helpful.
I did not catch that subtly with static variables. That is very good to know. Thanks for pointing that out.
Very good to know. So I guess, as stanguy said, calling SecurityContext::LAST_USERNAME, SecurityContextInterface::LAST_USERNAME or just using the string "_security.last_username" would all do the same thing. Obviously, the constant is better practice as it creates self commenting code and also maintains a single point for changing the string if it needs to be changed in the future. Thanks a lot of looking that up for me. I really appreciate it.
Thank you. I've been thinking about creating a blog of my experiences, because these questions come up a lot, and I tend to do more research than looking for actual work.
Be sure to take a look at Aura.Sql and Aura.Marshal as well: - https://github.com/auraphp/Aura.Sql - https://github.com/auraphp/Aura.Marshal
"Actually that" is not True: * 1) No semi-colon ; * 2) No brackets {} * 3) Use colon : for statement * 4) Indentation for statement That's half the course right there. Lol And to set web development with apache you can use mod_wsgi And if you are using some frameworks, like [Bottle](http://bottlepy.org/) or [Flask](http://flask.pocoo.org/), you already have a built-in server. In bottle, that's how you run a server on port 8080 run(host="0.0.0.0", port="8080") 
You memory limit isn't start to finish based. It's processed based. Lets say you set the memory limit to 256mb. When you have one php process running, it has 256mb of memory available to it. If you start a second php process, it will have another 256mb of ram. When you use shell_exec() you're starting another process. However, using shell_exec() and exec() and even passthrough() makes php wait. And you might blow through your process time limit if you have one set on the original process. You could append "&amp;&gt; /dev/null &amp;" to your shell_exec() command to make it non-blocking (your process won't wait for the command to finish) You could fork. But you wouldn't gain much. Forking really isn't too much different than calling a php script with shell_exec() since you're basically just opening a new process. Personally I think your best bet is to use threads (yes they are different than forks) look at pthreads. I have used it but I have looked at it wondering what I might use it on! Also, I don't know what you're doing that requires so much memory, but maybe you can lean out your code, you know removing unnecessary php extensions (these use memory and CPU cycles even if you don't use them) temporary variables can be removed, and foreach's replaced with array_map() and the like, it use iterators. Good luck!
&gt;It works just fine for long running processes if you have a grasp on how the GC works You can minimize the problems, but they don't go away. Part of the issue is with how php handles memory, but the other part of it is how extensions handle memory. Some things may work just fine, others may have extreme issues. The point is that it's a crap shoot because php was designed from the ground up with the philosophy that you don't care too much about memory management because script runtime is going to be pretty short. PHP really doesn't have the right tools for proper memory management, because it doesn't need them to perform the tasks it was designed for. &gt;months after I left I don't know many companies that continue to give software status updates to ex-employees months after they've left.
I also am a cheapskate and would like to purchase your book for less money. Please post a coupon code. Seriously though. I would buy for less. For now, it's bookmarked. Good luck!
I'm a bit late but if you try to delete / as a normal user it will go on to delete everything it can. You can try it [here](http://koding.com/Activity), [here](http://bellard.org/jslinux/), or [here](http://s-macke.github.io/jor1k/)
You could use ImageMagick to do it very quickly: convert yourimage.png -fill black +opaque "rgb(255,0,0)" -fill white -opaque "rgb(255,0,0)" -print "Red pixels = %[fx:w*h*mean]\n" null: Output: Red pixels = 152 Obviously you would replace the rgb values with whatever color you are looking for.
Why can't you just increase your memory limit?
Came here to post this. Worked with "arrays" in other languages like C#, Ruby, and Objective-C, and I want to kill myself every time I do.
In 5.5, the new simplified password API. PHP needed this for a long, long time. You can upgrade 5.3 with it if you have the right version: https://github.com/ircmaxell/password_compat I HIGHLY recommend using that if yo don't already have a good password system in place on your site. 
Go for Amazon EC2 , really, it's the best thing to deploy PHP.
Thank you very much for being open to noob questions. I'm coming from Photoshop land a few years ago, to within the past few years getting very comfortable just using Linux and other development related tools. Now I'm learning PHP (because my ecommerce platform, Magento, uses it ). Do you know anything about Phalcon framework? As I understand it, its the fastest PHP framework because of its PHP plugin written in C and it being very light. 
It should be noticed that EC2 instances are NOT meant to be webservers unless you set them up for auto-scaling / failover. The golden rule to remember when using AWS is that instances will be destroyed. If you're only setting up a single server with no auto-scaling, don't use EC2.
I mentioned this above, but you should only do this if you plan on using some sort of elastic platform. If you're setting up a single micro/small instance with no failover or auto-scaling, don't use EC2. 
Is it odd that I dislike the all or nothing approach for git? Am I missing something?
I specifically came here to reddit to search for this thread, if not, one like it. Redesign is nice. My work flow is not hampered in the least. Good luck with the changes other people want.
I have more than one companies entire application infrastructure deployed on appfog and have never, ever had an issue. Each application has over 99% up-time. So unless you can state a __specific__ reason why it would be a bad idea, you should probably not start a smear campaign with no evidence. Additionally yes, the platform is limiting sometimes, however, there are documented ways around 99% of all issues with the platform. So that's a non-issue.
This sounds like a really bad idea waiting to happen. You should ask "how can I best solve this problem" not "here's my weird solution to a problem, how do I implement it?" - you'll get better answers.
Learn PHP: ini_set('memory_limit', -1); set_time_limit(0); Unlimited time and memory.
Why? Care to explain? There are tons of better libraries out there, I know, but the company I'm working for is very peculiar, in that: 1) everything should be written in-house from scratch, apart from JS libraries 2) junior PHP developers with _no_ experience should be able to pick up and understand the code. That's just foolish, I am aware of that. But that was the only way to keep sane when cleaning up and fixing tons of sites with hand-written and duplicated SQL statements. I'm a consultant, I get paid to get things done, and had little time and no interest to take everybody together and tell them this is not how web sites gets built. Then again, I don't know PHP, I have little experience with it even if I'm fairly fluent with other languages.
This is the correct answer. The problem isnt php time or memory limits, it is what you are trying to do. [a] you know how to adjust or disable time/memory limits to meet your needs, or [b] you are running a bloated script which hogs resources and you just want to make a bigger pig pen.
Have a look at [Parsedown](http://parsedown.org). It is fast, consistent and easy to use.
100ms is pretty significant IMO; we keep response times &lt;50ms *total*, so *adding* 100ms throws up a huge red flag for me. If this is a beta product, or a side project, or generally a small-scale thing, then sure, 100ms doesn't matter too much -- but for a lot of people 100ms is a major hit. 100ms is about the threshold for human perception, but we're not only thinking about humans here. If you have a high traffic website you've also got to think about server resources; keeping threads open for an additional 100ms can add up really quickly! Not an issue for everyone, of course, but OP's concern is (or could be) valid and shouldn't be so readily dismissed. There are some of us on here that don't care about 100ms and some who do, let's not forget to think about others' perspectives!
Maybe not a question for you, but do you know if the plan is for PHP to "self-serve" in the future or is the vision of the built-in server purely for testing purposes? I like that there's positive chatter about the language. I notice a lot of developers who work in other languages like to hate on PHP, but I think they do that without comparing apples to apples, so to speak. At the end of the day, if you don't like gay marriage, don't get gay-married, and if you don't like loose type inferencing, write your code to be more strict. Right? 
&gt;everything should be written in-house from scratch, apart from JS libraries This is an atrocious policy that demonstrates severe incompetence on the part of management. &gt;junior PHP developers with no experience should be able to pick up and understand the code. Undocumented and poorly-designed code is *not* easier for junior developers to pick up. Using an existing, well-designed framework is the only real choice in this respect. &gt;I'm a consultant, I get paid to get things done, and had little time and no interest to take everybody together and tell them this is not how web sites gets built. I'm a consultant as well. I get paid to get things done; done well. Code like this is giving your clients an already-compromised and broken result.
Have you considered a queue system, like [djjob](https://github.com/seatgeek/djjob/) or [php-resque](https://github.com/chrisboulton/php-resque). Haven't used those personally (and there are probably other choices for php) but I use a queue system for many ruby apps when you have some job that is either time consuming or high overhead and doesn't need to happen synchronously. 
You should really write the scripts to be aware of whether they have everything they need to run, if they need to be run in a certain order. This ensures that a runaway script doesn't corrupt your data. Then look into something like the Jenkins build system to set up your scheduled or chained tasks. Yes, it's designed to build projects, but you can use it to do all sorts of other useful things. We use it at work for our basic task scheduling, but it also has the notion of jobs that are triggered by successful completion of other jobs, so you can intelligently chain them. A solution using RabbitMQ might be interesting, but writing message queue consumers in PHP is generally a bad idea because PHP doesn't like to be left running for a long time. You'll have a bad time. Instead, chew on the queue with the Python Celery system and have Celery kick off your PHP scripts, or something like that. As you said in your original post, periodic execution is probably not the best answer if you have steps that must run in order.
And, if you ever get into Magento: http://magentotherightway.com/
Yes. You can use [`fgetcsv()`](http://php.net/manual/en/function.fgetcsv.php) to turn a CSV file into an array. Then just pick a random line and display it.
Maybe email the mailing list and ask. PHP's developers are more likely to see the question if it's on the mailing list. Also if your host doesn't support it, move host. Every host should support PEAR packages. See if you can use Composer to install it (or a similar package) though. 
 Check your private messages :)
I don't know a lot about it, although I've see it do quite well in benchmarks. Its always hard to judge whether benchmarks are representative of real life performance. Although a decent framework can help you structure your code in ways that promote good performance, the overhead of the framework code itself is often minimal for any decent sized program. 
Of course it can! Make a text file with a new line for each word or URL or whatever. In php use this code: &lt;? $words=file('words.txt'); echo($words[rand(0,count($words)-1)]); ?&gt; This loads the file words.php into an array $words, one line per element. Then it echoes a random element in the array $words between 0 and the number of elements in the array. 
As far as I'm aware there are no plans for the server to become anything other than a testing server. Web servers like Apache and Nginx are already well understood in PHP stacks and have most use cases covered, so it's hard to see what benefit there would be for a large amount of work. There are a couple of PHP core contributors that frequent /r/php, so they may be able to comment (although I think this thread has been demoted as spam so they'll probably never see it!). I completely agree with the rest of your comments. 
The only thing I'd add here, if you are using a periodic CRON to kick this off is to put a way to ensure that you don't end up with over lapping runs, and a mechanism too test for and clear frozen processes. 
What things are they? The only thing I can really think of is executing code directly in the browser.
Swiftmailer is a modern alternative. It is available via composer. 
I also use swiftmailer. It's great
Depending on what you're doing, it sounds like you're missing a piece of the puzzle if you really want to do CI properly. Are you writing unit tests? Browser/acceptance testing is one thing, but as your application scales, if you're not properly unit testing, it's gonna get ugly quickly. You can still use Jenkins and DeployHQ in parallel it seems. Why would you need to abandon DeployHQ? Just create a real CI server that's separate and push to both when appropriate.
I suppose that including either of the available open-source libraries into PHP core would kill the alternatives. The fact that there isn't Mail library integrated in PHP standard package, allowed numerous open-source initiatives to take over the task.
I don't do any Unit tests at the moment. But I plan to, codeception allows for unit tests too so I will slot them in there. 
But this functionality *can't* be easily written PHP. The manual specifically recommends using the PEAR package because it's not something you should try to do yourself. Just like you shouldn't try to create your own encryption algorithms for passwords; now we have the incredibly convenient password_hash() function. I don't think I need to spell out the problem with dependencies.
You're saying it's easier to write this in C than it is in PHP? If so, you haven't spent enough time writing C. If you actually have issues with dependencies in 2013... Ever looked at composer? If PHP would 'need' an extension for this, for the sole reason that people are bad at using other people's PHP code (but for some reason don't have an issue with c code), the PHP ecosystem would have a much larger problem. I'm in the camp that things a C implementation of password_hash is idiotic and unneeded. A PHP implementation that does the *exact* same thing, written by the same author also exists, and has no drawbacks to the C version. The difference is that we now have a slightly more cluttered PHP engine. So a few suggestions: * Take a look at composer for dependency management * Get over the idea that using PHP code someone else wrote is a bad idea. If you feel strongly this way, this may be a bit of a difficult one; but for the sake of personal development it can sometimes be a good idea to go against your own opinions and see how it would be like on the other side of the argument. * Take a look at swiftmailer. According to most this is currently the best choice out there. 
So, serious question: I use the mail function to send html emails. I just add in the necessary headers and I've never had any problem. I drop content from the site in to a template and pass it to mail() as the message. So what does PHP mailer do that's so beneficial; because if it's better than what I'm doing I'd be willing to look in to using it.
Don't think he's saying it's easier to write it in C than PHP, just that it's not easy to write in PHP. I love composer, LOVE. What's that? I can update all my PHP dependencies in a one line command? Fuck yeah! Unfortunately there is a vulnerability: https://github.com/composer/composer/issues/1074 So now in dev I use composer and live it feels like I'm back to square one, at least I can check for updates. I'm intrigued by your thoughts about PHP. Sure, adding it would clutter up the codebase and would require more maintenance... but part of the point of PHP is to have helper functions and classes. There's already mail, why not Mail? 
Take a look at how CI and Laravel build their rules. It's similar to what you're doing. Though I find it more clear. Rules are broken down by input field rather than "type". Which is nice taken that some login forms use "username/email".
My company uses Rackspace. mail() would take hours to send emails.
Functions are included in the standard library if there are a lot of people who need it and implementing it in PHP would be significantly slower or it requires C library bindings (e.g. libmysql). That are the basic two cases why we'd want to include a function in core. Of course there are other reasons, but that's the general idea. Mail attachments are not performance critical and don't require third-party library bindings. Adding it to core would only add a big chunk of non-trivial code that requires maintenance.
It's not that attachments / MIME can't be handled via pure PHP code (PEAR packages are pure PHP code for one thing), it's that implementing this in a way that actually works can be complex and difficult to get right. It's difficult to include "one true way" for handling email because there are a lot of variables / different methods involved. You have the system mail function, sendmail or SMTP (php's mail() function can handle any of these), but then you've also got more advanced methods (which are often much more suitable for mass-mailing) such as dumping to spool directories or using third party services (eg. MailChimp, Mandrill, etc). Password hashing is a much simpler case, and is much simpler to provide a "one true way" for, hence password_hash(). As other's have said, you shouldn't be afraid to use third party libraries. Good third party libraries can make things a lot easier, and the more third party libraries there are, the more choice you have over implementation details.
Unfortunately I don't always have a choice in what host a particular client is using.
This doesn't seem right. Specifically, you're having a problem and instead of solving the basics of it you're putting a band-aid on it and calling it a day. There's an idiomatic way to address post data in PHP, and it's not by addressing php://input. It seems to me like you've just called a form the wrong thing, or your post values aren't what you'd think. I'd fix that before you make "a neat little array".
Check my edit. It's 1am where I live and I'm exhausted, I intend to fix it properly in the morning. This just popped up after 5 hours of working non-stop on this project.
One of the under-utilized and under-"marketed" parts of PHP is the SPL. In my opinion, becoming comfortable with the classes and interfaces in the SPL is a key part of learning to express OO ideas, design patterns, and data structures in PHP (without re-inventing the wheel).
 &lt;?php $words = file('words.txt'); echo $words[array_rand($words)]; ?&gt;
The rest of the fields are posted properly, just the date-ones acting up. I'm about ready to fall asleep on my desk so I'm just gonna leave it for the night.
http://stackoverflow.com/questions/20165483/eloquent-and-database-generalization
If you're comfortable with a little fancy formatting in your flat files, one great way to do this is using JSON. (There are also online editors that can help you write JSON) One of the neat things about JSON is that it's actually structured data, so you can easily make a script that reads data into a format that you can easily operate on. $content = ' [ {"word":"Hello","meaning":"A common greeting"}, {"word":"Cat","meaning":"A small mammal often kept as a house pet"}, {"word":"Coffee","meaning":"Fuel for programmers"}, {"word":"Cherry MX Blue","meaning":"Today\'s Typewriter"} ] '; $contentStructured = json_decode($content); $randomItemKey = array_rand($contentStructured, 1); $randomItem = $contentStructured[$randomItemKey]; echo("The word of the day is {$randomItem-&gt;word}, which means {$randomItem-&gt;meaning}."); You can replace the hard-coded content with a simple $content = file_get_contents('myContent.json');
I guarantee that when you come back to it tomorrow you'll see that you've done something really stupid. :)
pretty shallow on the details friend, maybe this is what you are looking for: http://laravel.com/docs/eloquent#polymorphic-relations
Yep, a misplaced quotation mark or something like that. I didn't even bother bugtesting earlier, I just called it quits and started playing around.
This is why PHP programmers get bad rep. ffs, debug properly.
http://php.net/file &gt; Note: &gt; &gt; Each line in the resulting array will include the line ending, unless FILE_IGNORE_NEW_LINES is used, so you still need to use rtrim() if you do not want the line ending present. 
Took me way too much time, but I managed to do what I needed. rec($directories, $path); function rec(&amp;$array, $path){ $current = array_shift( $path ); if(!isset($array[ $current ])) { $array[ $current ] = array(); } if(empty($path)) return $array; else return rec($array[ $current ], $path); }
This has been out for YEARS. I wanted to look up specifically how many (at least 5) but Wikipedia said this: "Not much is known about RedBean's history, due to lack of information on the website. The main author of RedBean is Gabor de Mooij, an ICT specialist from the Netherlands." Trollolol.
I must admit, RedBean's "automatic" nature terrifies me. &gt; RedBean dynamically adds columns if you add new properties: &gt; $book-&gt;price = 100; This seems great until you accidentally write $book-&gt;pric = 100 and you have an extra column. Same with its dynamic conversion of content types. RedBean is not an unpopular ORM with people who aren't using a framework, but in every possible way I prefer Eloquent, and prefer Laravel.
How many people do you think would still use the same ORM in production after getting approval on the prototype? That's where the danger is.
the .gitignore file has been on github for 2 years...
This looks great...but is this currently buggy for anyone else? I can barely get past installation with all the errors popping up, and their git repo looks like it hasn't been updated in a couple years...
I didn't dive too deep into it...but it doesn't seem to much support for date fields, whether a out-of-the-box datepicker or validation. Didn't seem like there was any support for non-text fields, like checkboxes. Am I wrong on this?
You can freeze it if you want to solve that issue. In fact you are supposed to freeze it after development, and then go in and edit the fields for specific lengths and what not so everything isn't varchar 255. It helps a ton during development, but does cause a few headaches when there is a typo. I have used it in a few projects, but have since moved on.
All or nothing as in "use it for everything"? It's like a save point in a game. If you use scm you get (practically for free): * multiple restore points * summary of changes about to be made * distributed backups * peace of mind that you can't really do any damage to your code base Why would you not want any of those things? It's not like it's hard to type `git ci -am 'stuff'` every now n then.
Thanks for replying! What I meant by all or nothing was.. I have a Project, let's call it Project A. Project A has dozens of files. Let's say I edit an interface file. It's one file. Now I can't commit that file individually, I have to commit the entire project. So I make a branch, make changes, then merge the branches. All I did was change one file. Why not just let me change that one file? For all the flack that SVN gets, I prefer it to git. Makes me feel like I'm a bad developer because I don't get it. (I refrained from making the pun.)
yeah,well with experience comes wisdom,we've all been here,haven't we?cheers.
Your example says, Rule A applies to input fields 1, 2, and 3. Most validation libraries so input field 1 has rules A, B, C.
Feature is optional, you would never use this feature live due to the lack of performance running it.. http://redbeanphp.com/freeze
That sounds a lot messier than declaring the tables beforehand.
Using f3 you can use SQL syntax against a json file Google fat free framework jig
You need to use reset() to reset the current array element to the first one.
Thanks. I was not aware of that. So is it only required when using the list function? Because this code runs fine and displays the array twice &lt;?php $name1=array('1'=&gt;'one','2'=&gt;'two','3'=&gt;'three','4'=&gt;'four'); foreach ($name1 as $item=&gt;$description) { echo "$item:$description &lt;br&gt;"; } echo "&lt;br&gt; 2nd run&lt;br&gt;"; foreach ($name1 as $item=&gt;$description) { echo "$item:$description &lt;br&gt;"; } ?&gt; 
The foreach loop leaves the internal array pointer pointing at the end of the list, and each() does not reset it (unlike foreach). Therefore each() is returning false in the first scenario. The second scenario works fine because the internal array pointer is at the start of the array when entering the while loop.
The reason you need to reset() is that there is an internal pointer for arrays that is moved as you iterate through it. Foreach resets it when it starts, while does not because it doesn't know anything about arrays, it only cares about conditions. `each` (the function acting on the array) simply advances it forward without resetting it. tl;dr use foreach when looping over arrays
That sounds like it's your "Project A" specific workflow, that is, it's red tape, not Git limitations. There's no reason you can't commit changes in a single file, regardless of what other changes have been made or what branch you are on (in fact Git is extremely flexible here, you can even commit only some changes in the file!). Personally, I think doing all changes in a branch is actually a nice way to work, but this is just opinion, there is no limitation that makes you work that way. Don't feel bad, it's widely known that Git isn't easy to get. But when the penny drops ... :)
thanks a lot. that clears everything out
thanks
Haha, yep, as predicted. This system (the one I'm building the thing for my friend in) isn't updated to use mysqli/PDO, so it runs a if(!get_magic_quotes_gpc()) { $_POST = array_map('mysql_real_escape_string', $_POST); } else { $_POST = array_map('stripslashes', $_POST); $_POST = array_map('mysql_real_escape_string', $_POST); } to clean all inputs. This collided with the $_POST for the dates being an array, nullifying it while leaving the single-value inputs intact. That code is just always around when I'm writing the DB-side of scripts, so I never pay much attention to it, including when it's fucking my day up. I still had a good bit of fun with my "band-aid" though :) Edit: I just realized I had forgotten to turn on error reporting for this. HAH. Oh man, that is hilarious.
Funny, I hear it goes RoR-&gt;Java-&gt;Scala-&gt;Java, turned out pretty hard to find new devs willing to learn Scala.
This is off topic... I would also setup vagrant and use a proper Linux virtual machine than to set up the development environment in Windows. Also check out Phabricator for pre/post commit code reviews
Phabricator sounds great, just read the high level overview. Currently I use an Ubuntu VM In virtual box in Windows so I'll see if I can install Phabricator there. Thank you. 
* ugh * Using mysql_real_escape_string on all the $_POST array? How clumsy! Who would ever do that?! Whistles nonchalantly and tries to leave without being noticed. 
Just change the last line, the echo(), to have whatever HTML you want.
Hmm. Every time I've tried to teach myself Git I end up just going back to SVN. I want to get Git but just can't seem to I guess. I guess I'll have to look into it again if I can commit just one file to the repo. Do you know of any good resources to pick it up?
I didn't build the system :) Just following the existing structure.
I'm a big fan of redbean. A friend of mine prefers idiorm, which looks interesting, but I think I'll still prefer redbean for many projects. I really wish there was an easier way to integrate with zf2 - I'd have used it for a recent project, but the namespace support isn't there . You can get put it all under one namespace, but the lack of documentation and pain to get the autoloading stuff set up ended up putting me off. I used it with ZF1 a lot though, and it was great. EDIT: bit/big
Thanks, got it. I've read through the CI and Laravel documentation. Then I took a sample of the the existing forms and checked which way test is more verbose: when rules are assigned to input or vice-versa. My test has proven that overall test script length is always shorter when input is assigned to rules.
I've been thinking about this lib for a while. Looks great but I don't see a practical way to migrate Dev changes to Production? So, it's bookmarked but has not been used yet. For example, theoretically, let's say in Dev I work in "Freeze=FALSE" mode and hammer out an version 0.1 application. Works. Approved. Because of deadline forced to dump the DB and push everything to production. But, in production "Freeze=TRUE" so it's not terrible. Later, I put in another dev cycle same as before "Freeze=FALSE". Minor changes happen automatically to the DB due to my sloppy code changes but I was too lazy to actually keep track of them. Anyway, I end up with a working version 0.2 Here's where I am stuck. How do I push the DB changes? Manually inspecting the database and trying to figure out my own alter queries? Using a third party database diff tool? Really, I don't see a best practice here. I would like to see more documentation on this aspect of using the tool. Feedback welcome.
I've used RedBean in the past (several years ago most recently) as a way to "drop in" an ORM to an existing code base. I had no complaints other than it seemed to barf on primary keys not named "id' - I had to setup a special handler for those. Nowadays I use Propel for non Symfony apps and Doctrine when using Symfony.
Disclaimer: Micro-optimization is pointless However, if you write libraries or frameworks making extensive use of reflection techniques (like ORM, frameworks, service containers, …), this comparison offers an overview of the different techniques and how they compare in terms performances.
I tend to bring Eloquent with me, when I am using different frameworks. I just love it.
The database is a normal mysql database. I would just export it and run the sql on the live server. Perhaps i miss understand the question?
Personally, I just keep Freeze=True in both dev and production. I prefer the hands-on nature of working with the schema directly myself.
Some ORMs (such as eloquent) include a migration feature. This makes the creation of tables, populating them, and any schema changes a code change, which can be version controlled and deployed like any other. I wondered if Redbeans had anything similar. Specifically, if it's that easy to prototype changes, how hard is it to put those changes live. 
While not at all what you asked, I strongly advise against that second syntax. It's not idiomatic PHP, and has a number of disadvantages compared to foreach. One of which you have discovered. 
That'd be nice if I had the ability to modify those settings.
If there is one advice I can give you is that you need to be flexible about the code you work with, especially in a team of developers. I have changed companies a few times and almost always every company has it's own little conventions. Sometimes they stem from best practices, sometimes from need for convenience. You need to adjust from time to time. As for your OCD, almost every IDE has some sort of code formatter. Take the time to configure it to your liking. It wont format the code 100% to your expectation but it will get you 90% there.
Not OCD, OCPD. http://www.psychforums.com/obsessive-compulsive-personality/topic36628.html
In my opinion, this is something you have to get over if you want to work with a group. It's like regional dialects; I can still converse with someone from New York even though certain words sound way different because of the accent. Likewise, I can read all the code you posted, even though I too prefer it to be a certain way. If you just absolutely have to have it all the same, there's tools to enforce styles (Style Cop for C# comes to mind). This requires getting all of the group on the same page though, and if they agree to a format you can't stand, you're right back where you started. It's ok to have opinions on styles, but you shouldn't let it stop you from working with other peoples code.
Thanks for the swift response and the great advice. What IDE do you have in mind? I'm on a Mac and have tried NetBeans and Aptana, but neither really appealed to me.
I've never even heard of OCPD, will read up on that later. I just always assumed and was told by friends/colleagues that it was OCD.
Usually (hopefully), a team agrees on a coding style, and everyone follows it. It is also recommended setting up codesniffer in your editor, so that you are reminded whenever you break the coding style. Jenkins (or other CI systems) can check and report on errors in newly checked in code, using codesniffer. I guess you can always try to convince others to follow your preffered style. On the other hand, i must admit that i'm a bit OCD about these things myself, and i currently work at a company with a coding standard that i hated when i started - but it has grown on me a bit, and i've gotten more and more used to it. The most important thing, in my opinion, is to actually have a defined and agreed-upon coding style - and that people follow it. Exactly what that style is, is not that important. Reading code is always easier and more pleasant when people all write the code in a similar way. I've learned to overlook most of it, and focus on the task at hand - and i guess you can learn that too.. :-) 
I'm the same way. If I open a file with brackets the wrong way, it may as well be in binary. I have to fix all the brackets before I can do any work. Personally I say, don't change yourself. Maybe find an editor macro that can quickly convert back and forth. But being anal about this kind of detail is what makes you a good developer. I'd happily code on the same project as you any day. 
What do you do if your framework doesn't use the formatting you prefer?
Well you obviously don't have actual OCD, and shouldn't trivialize actual illnesses. But I'm interested, what is your logic to your preferred coding style? Don't you find that extra line with the sole brace aids readability?
To me, they're both perfectly readable. But I feel that having the extra line is a waste of space. It's also cosmetically unappealing to me, not sure why – just is :P
Up until recently, I've been using CI which wasn't a real problem for me. I just left the system directory alone and corrected what I felt needed to be corrected in the app folder. In the past few weeks I've been looking at Laravel though. Every time I run `php artisan migrate:make`, I have to go to the file and fix the formatting. It's annoying, but I've been told Laravel is a great framework so I've been persistent with it.
You should really go to see a doctor if the diagnose was made by friends and colleagues. Not only you might not have what they say you have, and you only believe you do and that's why you act that way, but you might actually have it and you might be able to keep it at bay with medication.
I've heard a lot of good things about PhpStorm. I just installed the trial, about to give it a go.
At work we use PHP Code Sniffer to enforce most of the major formatting. I have had to give up some of my personal preferences in formatting, but ultimately you will just have to get over yourself and deal with what the team as a whole prefers. There are bigger problems to solve than making sure there is a space after every "if," though in our case we have a hook on gitlab that rejects your push if you haven't formatted your code to meet our standards, which do occasionally change, but at least it's a starting place.
Well each to their own. I find the new line separates the functions code into a clear block, which aids readability and scannability.
Thanks, you are right and I know. I am fairly new to php and am having troubles iterating over it. For example, I have a few rules I want to iterate over. Does this look/make sense to you based on the class? *note I am importing a .csv file that I am running a foreach loop on to get the first line as keys and to set up a multidimentional array, this array becomes: $combined. class UserFilter extends FilterIterator { private $userFilter; public function __construct(Iterator $iterator , $filter ) { parent::__construct($iterator); $this-&gt;userFilter = $filter; } public function accept() { $user = $this-&gt;getInnerIterator()-&gt;current(); if( (strcasecmp($user['privacy'],$this-&gt;userFilter) == 0) &amp;&amp; strcasecmp($user['likes'],$this-&gt;userFilter) == 0) &amp;&amp; strcasecmp($user['plays'],$this-&gt;userFilter) == 0)&amp;&amp; strcasecmp($user['adds'],$this-&gt;userFilter) == 0)) { return false; } return true; } } $object = new ArrayObject($combined); var_dump($object); // Note it is case insensitive check in our example due the usage of strcasecmp function $iterator = new UserFilter($object-&gt;getIterator(),'anybody'); foreach ($iterator as $result) { echo $result['privacy'] . '&lt;br/&gt;'; } 
If you are "having a hard time with other people's code" then you are going to have a hard time for the rest of your career. Code from other people is what you are going to be dealing with for the vast majority of the time. I too am attentive to coding style, but at some point you will be better off giving up on "your" style and adopting a "shared" style. I wrote about this at some length almost a decade ago at http://paul-m-jones.com/archives/34 . &gt; The point of a coding style standard is not to say one style is objectively better than another in the sense of the specific details (75 character and one-true-brace convention, for example). Instead, the point is to set up known expectations on how code is going to look. &gt; &gt; For example, look any PHP project written by more than one person. If you examine Script A and see one coding style, then examine Script B and see another, the effect is very jarring; they don’t look like they belong to the same project. Similarly, when Developer Joe (who uses one coding style) attempts to patch or add to a separate project from Developer Bill (who uses another coding style) the mix-and-match result in the same project (or even the same file!) is doubly jarring. &gt; &gt; As PHP developers, we need to define and adhere to a coding style not because one is better than another but because we need a standard by which to collaborate. In that sense, coding style is very important; not for itself, but for the social effects generated by adherence to defined standards. In that essay, I mention that I gave up "my" style and adopted the PEAR standard. The current successor to the PEAR standard, for good or ill, is the combination of PSR-1 and PSR-2. - https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md - https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md (Full disclosure: I shepherded both of those documents through the PSR acceptance process.) Hope that helps. 
ive used phpstorm for two years and it's great. I've used eclipse, netbeans, visual studio, etc throughout my career (for diff languages of course) and find phpstorm is just the best.
I don't get what you're trying to do here. strcasecmp is for comparing two strings to each-other. What you're doing here is checking if the fields privacy, likes, plays and adds are equal to each-other and to userFilter, and if it does, you return false. I have no idea what you're trying to accomplish with this, but this smells like an [X/Y problem](http://meta.stackoverflow.com/questions/66377/what-is-the-xy-problem).
This may shed some light. This is what I am doing with the .csv file that I am opening up. In the 'if' statement, I am getting the desired results, however there is overhead with doing it this way on such a large file. I am unsure how to implment this with the filteriterator class. if (($csv = fopen("test.csv", "r")) !== FALSE) { // read the column headers in an array. $head = fgetcsv($csv, ","); // read the actual data. while (($data = fgetcsv($csv, ",")) !== FALSE) { // create a new array with the elements in $head as keys // and elements in array $data as values. $combined = array_combine($head,$data); // print. if($combined['privacy'] == 'anybody' &amp;&amp; $combined['total_likes'] &gt; 10 &amp;&amp; $combined['total_plays'] &gt; 200 &amp;&amp; strlen($combined['title'])&lt; 30){ //var_dump($combined); } } // done using the file..close it, fclose($csv); } 
Lines are free. Be careful not to conserve on the wrong resources. ;-)
Your iterator code is not equivalent to this one. What you're doing in the iterator code is checking if all fields are equal, and if they're also equal to the value of userFilter. If you want to filter out any values which do not match the criteria specified in this code, just do the same thing in the filteriterator, i.e.: public function accept() { $current = $this-&gt;getInnerIterator()-&gt;current(); return ($current['privacy'] == 'anybody' &amp;&amp; $current['total_likes'] &gt; 10 &amp;&amp; $current['total_plays'] &gt; 200 &amp;&amp; strlen($current['title'])&lt; 30); } 
Makes sense. Still unclear on how to extract and use this 'UseFilter' function/class that I instantiated. (following the example in the manual). &lt;?php class UserFilter extends FilterIterator { private $userFilter; public function __construct(Iterator $iterator , $filter ) { parent::__construct($iterator); $this-&gt;userFilter = $filter; } public function accept() { $current = $this-&gt;getInnerIterator()-&gt;current(); return ($current['privacy'] == 'anybody' &amp;&amp; $current['total_likes'] &gt; 10 &amp;&amp; $current['total_plays'] &gt; 200 &amp;&amp; strlen($current['title'])&lt; 30); } } if (($csv = fopen("test.csv", "r")) !== FALSE) { // read the column headers in an array. $head = fgetcsv($csv, ","); // read the actual data. while (($data = fgetcsv($csv, ",")) !== FALSE) { // create a new array with the elements in $head as keys // and elements in array $data as values. $combined = array_combine($head,$data); // print. if($combined['privacy'] == 'anybody' &amp;&amp; $combined['total_likes'] &gt; 10 &amp;&amp; $combined['total_plays'] &gt; 200 &amp;&amp; strlen($combined['title'])&lt; 30){ //var_dump($combined); } } // done using the file..close it, fclose($csv); } $object = new ArrayObject($combined); $iterator = new UserFilter($object-&gt;getIterator(),'anybody'); foreach ($iterator as !$result) { echo $result['privacy'] . '&lt;br/&gt;'; }
Hey there. I created the Laravel framework and struggle with the same things. Open up any random class in the Laravel core and notice the comments. Every comment has three lines, and each comment line is 3 characters shorter than the previous line.
Recognize there are more important parts of programming than the subjective formatting -- data structures, algorithms, unit tests, design patterns. Make commited code to pass a style check otherwise don't bother if no one cares to conform to a standard.
Ha, yeah, funny enough Taylor (the creator) set up conventions for committing code to the Laravel project, and one of the rules is the first code example you supplied.
he doesn't have OCPD either. at least not because he's picky about bracket arrangements in code.
There are two possibilities. One is that you have OCD. The other is that you don't. This pisses me off. It's like saying you have ebola when you've just got a stomach ache. OCD is a crippling and debilitating mental condition. People who say "Oh, I like my socks lined up neatly because I'm so OCD, lol" are trivialising what is a horrible condition to live with. It's a life of routine and constant anxiety, ritual, psychosis, discomfort and deep psychological hurt. OCD is not a personality trait, it's a disease. &gt; I just always assumed and was told by friends/colleagues that it was OCD. Unless you were told by a doctor, and are in intensive therapy and probably medicated **you do not have OCD**. What you are is fussy. You like things to be a certain way. Some people are fussier than others. Some are very fussy. In conclusion: get over it. You don't get to decide. You need to understand the purpose of code formatting. It's not to make things "right". It's to make them consistent. If your company or team uses a syntax, you **must** use that. If you're rewriting code other people have written to make it conform to your standards, you need to stop it, because you're wasting everyone's time. If you genuinely do have OCD, get help. Seriously. Go to a doctor, go to a psychologist, and work on it. Mental health problems are no different to any other health problems, see someone, get it diagnosed and get it dealt with. There are things you can do with IDEs now that will allow you to format code as you need it without wrecking it for the rest of your team. Some of these options have been suggested by other people. You may need to speak to your team leader about some sort of exemptions, or someone else working on your code to reformat after you're done. But the first step is to get diagnosed so that it's a health issue your team can work with you to resolve, instead of you just being fussy. tl;dr Dollars to donuts you don't have OCD, you're just a pain in the ass.
Everyone has their own code formatting preferences. I was taught to format code such as in your first example, and spent the first 3-4 years of my career re-formatting everything I came across to what I considered to be "correct." Eventually I realized that the only thing that matters (with regards to formatting) is consistency throughout a project. Format it however you like, just be consistent so everything is readable. It's actually surprisingly easy to get used to a new formatting style if you don't spend all day stressing out about it.
Cool. Don't expect to get hired on my team.
@itrulia , sorry for the dealy in responding. I will say, it is for the ignorance of knowing a person in person. Once you know a person you know what he mean, what he do etc. Not to compare, have you heard about http://zedshaw.com/ , what do you feel? One of the person shared his feeling that he was really a nice guy. What I was trying to explain is just from a post we are prejudice about the person. Thank you for your comments.
@itrulia sorry for the spam you would have noticed. I didn't noticed @pmjones post nor reddit mentioned it is already submitted. It happened accidently. We will try to make sure we don't spam you any more on aura with more than 1 post. It was by mistake. Thank you for the feedback to make things better.
How would you compare the core files vs a new version to see what has changed? 
It's a very personal decision as there really is no right answer. Regardless of what people tell you (conventions and whatnot). From the format of someones code you can discern quite a few things from it. class MyClass { function foo() { return 'bar'; } } Traditional background, probably learned formally (books, tutorials, or from another language such as C) or had a tutor or mentor that subscribed to the same style. class MyClass { function foo() { return 'bar'; } } Informal background, learned by doing instead of by using tutorials, or books; or had a tutor that subscribed to the same style. Could be used to developing for very large applications as this style is easiest to read with many lines. If you look at it from a logical perspective, those of us who love order (neatness) will always subscribe to the second example. If you have an application that uses 800 classes and functions in the end you're saving 800+ lines of single `{` brackets.
Exactly. Such style preferences, are just that, preferences. Like when you like your meat medium rare or well done. The fact that you "rationalize" it in your own way, is no different than from the people that rationalize the alternative.
Uh. The userFilter in the manual is just an example. It serves no purpose in your case. Omit it.
You can write and debug something that fits those specs in an hour? Including associated CSS, security and the like? You code faster than me, friend.
I agree. A hour, two tops with perhaps some reused AJAX code.
If you don't want to code it yourself, why not just use something like Disqus?
That you think typical paranoia and insecurity is "OCD" shows just how little you actually know about the condition. It's a life-ruining crippling anxiety disorder.
Or it just tells you what conventions the project has chosen to follow. 
Especially since we moved beyond 80x25 green screen monitors. 
I've used WP during my freelancing years quite a bit. Unlike most of the people on /r/php I like it pretty much. Yes, it's not the most clean coding styles, yes, it has its own strange ideas of how things are handled, but honestly - so do most other big projects. The nice thing about WP is, that nearly everything is there. I've "created" quite a few sites for my customers without having to code anything in deep, because WP already did everything they needed. Most of the times all you have to do is fix up the design a bit, and even that can often be done fast by finding a design thats ALMOST like the one you want and just switching a few things around. I believe the main problem that people have with WP is, that they think they have to dive into the core to make changes. But they don't. WP has tons of plugins which add functionality and even if those do not suffice, you have tons and tons of hooks you can hang your programs on, no need to do anything to the core. The advantage for your customers is, that WPs backend is super easy to use. Even the most clueless person can be sat in front of WP and told "You enter your title here, you enter your text here, you press that button and then it's online". Try teaching them how to use Typo3 and keep the headache pills ready.
Treehouse is very good.
If your project is OSS Jetbrains will give your project a free license.
my site has an option for yahoo login, but disqus removed support for yahoo last year. so on my site a user who has logged in on his yahoo account and wants to leave a comment "as himself" would have to post the comment as a guest and type his normal username in.. which is a minor inconvenience i want to avoid.
i haven't started it yet and i'm not using a framework. and maybe i'm a really bad coder but i don't know how you could do a good comments system in an hour. security features to protect against XSS/SQLi etc, anti-spam features, a captcha? and an admin panel?
had been using Aptana on OS X for the past two years, I was pretty annoyed by it still not having PHP 5.4 support, but 2-3 months ago it screwed up the javascript color-coding / error detection and it underlined my whole file (and I couldn't see the difference between dots and comma's anymore). That pushed my to finally go look for alternatives. Tried out out a couple of programs and ended up sticking with Sublime Text 3, and don't think I'll switch soon. It uses json files for preferences which can be a little off-putting at first, but once you get past that (and really, you only touch those maybe once a month after the initial config) it's so amazingly fast nothing compares to it. to make a smooth transition from Aptana: - use the 'twilight' color scheme - use cmd+p instead of cmd+shift+r to open a file - I remapped cmd+d to delete a line in sublime text, so it matches Aptana. I use it quite often and didn't like the three-key shortcut. Add this to your user key bindings file: [ { "keys": ["super+d"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"} }, ] - Install 'package control' (https://sublime.wbond.net/) - add the needed folders and save your workspace as a project - click 'edit project' and add the project specific preferences. Mine looks something like this: { "folders": [ { "follow_symlinks": true, "path": "/Users/siraic/Sites/project", "folder_exclude_patterns": [".sass-cache","cache","docs","logs"], "file_exclude_patterns": [".DS_Store","*.css"], } ], "settings": { "tab_size": 2 }, } For the project I work on I used the package control to install 'Sass' &amp; 'Smarty' To install autocompletion &amp; color coding support for Sass &amp; Smarty. (That's also why I exclude .css files in the project settings. The only thing I didn't find was a good in-app git gui, so I installed Sourcetree separately and use it to manage my commits now. Sublime Text handles branch switches while you had a file open smoothly.
Hello, What % of your users log in using yahoo? Do you think it is useful? Do you also have a facebook login button? Thanks 
1) the website isn't up yet so zero but Yahoo is a popular site 2) i use yahoo along with the 3 that disqus supports: facebook, google and twitter
Thanks What is your view on third-party sites login buttons (yahoo, fb, etc.)? Some people say they are distracting, take lots of place and are barely used. 
I agree with you: creating accounts is a pain in the ass. However, logging in with FB/twitter/etc. prevents anonymity, and buttons complicate the log-in page. I wonder if there is a way to design a 1-click sign in system that works. Nowadays when you sign up on a website, you need to fill a captcha, choose a password with digits/specialcharacters/lower-upper-case, and click on a confirmation email. Which ones of these steps could be scrapped?
Thank you for saying this. I'm a developer and actually have diagnosed OCD. I don't even are about coding styles I will literally retype the same line of code over and over. I also have just deleted lines and retuned them in. I have it under control now but when I first started I would waste a huge amount of time just doing these coding rituals
&gt;However, logging in with FB/twitter/etc. prevents anonymity Do you mean how some sites will take your full name from Facebook and store it and use it as your display name? I hate that. Mine doesn't. &gt;buttons complicate the log-in page. Agreed. &gt;choose a password with digits/specialcharacters/lower-upper-case http://xkcd.com/936/ If pass *phrases* are more secure than passwords, then this requirement will definitely be scrapped in future. I don't pretend to understand cryptography but I *think* that password length is very important. So choosing a long but easy to remember phrases made up of only a-z is apparently more secure than a password made up of a hard to remember sequence with digits/specialcharacters/lower-upper-case. [Although](http://arstechnica.com/business/2012/03/passphrases-only-marginally-more-secure-than-passwords-because-of-poor-choices/).
You're 100% correct. I shouldn't have jumped to conclusions, I just assumed. It wasn't my intention to insult anybody. However, the reason I posted this was because I wanted help adjusting to new coding styles - not a diagnosis. Thank you for the reply though, and again, sorry if I insulted you in any way. It was not my intent.
Thanks for the reply, I never expected a response from Taylor Otwell! Interesting, I've been using Laravel for the past few weeks or so, never noticed this.
This is another huge issue for me. Another is when people use commas for concatenation.
ah, i see. i use codeigniter (although its falling out of favor, laravel might be a better choice). db operations are safe and simple. i'd probably use recaptcha, and jquery makes ajax simple but if you don't have the user system ready then nevermind
Jesus Christ, that poem is powerful. 
Um.. Different people. 
I'm going to take a stab in the dark and guess that you're young (perhaps under 25). I guess that because these sorts of coding style issues are trivial compared to making sure the code works. Until you've done this for a long time (meaning, you have many years of professional experience) you won't likely be able to see value in anything else except style/formatting issues. This has been my experience working with younger developers (those just out of college, or perhaps only a year or two in 'professional' jobs). "Working code" is not an excuse for bad coding, but I'd MUCH rather see (and deliver) *testable* code (and ideally, even tested!) vs code that is formatted nicely but is built so poorly that I need to rip it out and start over again. Why would I do that? Code that isn't tested means I have to write *some* tests for it. Code that isn't written to be testable in the first place means I have a mess of refactoring to do, but it's hard to refactor with confidence without tests in place to begin with. And don't get me started about libraries. You'll never be able to effectively work with other peoples' libraries (reading code, debugging, etc) if you're *that* hung up on style/formatting issues. You may need some counseling or medication to get past this; if you're this stressed over code style to the point that it's impacting your work and team, there's probably something else it's affecting in other parts of your life. 
I feel that the user experience is not at the center of the sign up process in today's websites: - you force users to choose complex passwords but it's none of your business: as a user, I would gladly trade a simple password for less security (especially if the website is not important, like a blog, reddit, or anything without money involved) - you force users to identify themselves as humans to prevent bots, but it should be your problem and not theirs. As a user, I don't care if bots are spamming your website, I just don't want to wait &amp; click on a confirmation email, and I definitely don't want to have to THINK to solve a captcha... Deal with your problems and I'll deal with mines. There must be a way to (i) either remove these bad features, or (ii) present these features in a way that is much less detrimental to the user experience 
I believe studies hint that it may be a problem with short-term memory and how it communicates with the rest of your brain. I always wonder if I've locked the back door when I head off down the street on my bike in the morning. I solve that by a simple routine - I make sure I do not close the back door unless I am locking it. It's a simple thing - leave it open while I get my bike out the shed, close it and lock it immediately. When I leave and see the door closed, I know it is locked and can relax. There may be something similar you can do when you leave in the morning. Create some kind of mental signpost that you set up as a rule for yourself. Make passing that signal connect with closing the garage door. Once the door is closed and you pass that signal, your focus is now on that proxy and you can stop worrying about the door.
Commas are [faster in some cases](http://www.phpbench.com/). But I don't use them too.
You might change your mind if it turned out that the two of you have different coding styles. Pretty sure 90% of your commits would just be your editors auto-fighting around code styling.
Please post the output of phpinfo as well so that we can make comparisons on setup. Also, was XDebug enabled during these tests?
I used to be the exact same way. Then I became intern at a company with a different code style and I don't give a fuck anymore.
Yup. I consider myself a "full stack" developer. I just find it immature to get hung up on how code is formatted. I'd rather it be formatted to fit the rest of the codebase of that project. I completely agree with your last paragraph.
Why would someone want spaces over tabs? If you're using a monospaced font, a tab should be 4 spaces. 
They're not quite the same. Memcached is for shared storage among app servers. APC only stores key/value pairs locally.
http://i.imgur.com/3RF2RPI.jpg Wish i had gold for you, all those "OCD this, OCD that" is driving me crazy 
then ides came along and gave us formatting options, and all was well again
Like all style issues its a matter of preference, but I truly believe spaces are more logical. A project which uses spaces is always going to maintain proper indentation. A project with tabs almost always has some spaces so if two people have their tabs set to display as a different number of spaces alignment and indentation can be wrong. It is incorrect that a tab is always 4 spaces. That's most common but most IDE's let you choose how many spaces to render a tab as. I've seen people do it as two or as 4. Spaces always give consistent indentation while tabs don't. [Plus my IDE renders tabs in an ugly way which bothers me.](http://i.imgur.com/GuzF7EP.png) 
Sounds to me like a good use for [Events](http://laravel.com/docs/events). You could have a service provider that autoloads the listenings (Event::listen).
Thanks /u/omerida! The site is still being actively worked on, and I'm manually approving resources and projects, so if you submit something and it doesn't show up right away I'll get to it as soon as I can. 
Every programmer has their own style and method of coding. If you take on someone else's project, you should respect their style as they would respect yours. There is no wrong way to ~~eat a reeses~~ code.
&gt; tl;dr: Go ahead and use Service Locator, but make sure each Locator contains only one type of object. This condition of restraint will keep a single locator from becoming a menace.
you know you if you uncheck "Show Whitespace" int he preferences PHPStorm won't show them. also, you use a huge font!
You can always use PDO using placeholders, which gets it looking like Redbean: function create_category($post) { $conn = new PDO($config['dsn'],$config['dbuser'],$config['dbpass']); $sql = 'INSERT INTO product(name,quantity,cost,price,upc,taxable) VALUES (:name,:quantity,:cost,:price,:upc,:taxable)'; $sth = $conn-&gt;prepare($sql); $sth-&gt;execute(array( 'name' =&gt; $p['name'], 'quantity' =&gt; $p['quantity'], 'cost' =&gt; $p['cost'], 'price' =&gt; $p['price'], 'upc' =&gt; $p['upc'], 'taxable' =&gt; $p['taxable'] )); return; } Also, PDO can bind parameters based on datatype. PDO will attempt to determine what the datatype of a field is, but this way you can explicitly define it function create_category($post) { $conn = new PDO($config['dsn'],$config['dbuser'],$config['dbpass']); $sql = 'INSERT INTO product(name,quantity,cost,price,upc,taxable) VALUES (:name,:quantity,:cost,:price,:upc,:taxable)'; $sth = $conn-&gt;prepare($sql); $sth-&gt;bindParam('name', $p['name'], PDO::PARAM_STR), $sth-&gt;bindParam('quantity', $p['quantity'], PDO::PARAM_INT), $sth-&gt;bindParam('cost', $p['cost'], PDO::PARAM_INT), $sth-&gt;bindParam('price', $p['price'], PDO::PARAM_INT), $sth-&gt;bindParam('upc', $p['upc'], PDO::PARAM_STR), $sth-&gt;bindParam('taxable', $p['taxable'], PDO::PARAM_INT) return; } 
Eloquent would be a better alternative, or doctrine but I think thats to complicated for one of the first ORM's to use
 $sth-&gt;execute(array( 'name' =&gt; $p['name'], 'quantity' =&gt; $p['quantity'], 'cost' =&gt; $p['cost'], 'price' =&gt; $p['price'], 'upc' =&gt; $p['upc'], 'taxable' =&gt; $p['taxable'] )); you know that $sth-&gt;execute($p)); would be the same?
I'm on par with the top comments in this thread. I really like my own (classic) style of coding and you would hate me :) &lt;? $foo = false; if($foo == true) { return('message'); } ?&gt; Aside from what's right or wrong, that's my code and most of the time people can read it and comprehend it. If I write in other people's code, most of the time I mimic their style of code, this was written by them and should reflect the same style, this includes var/object etc names. This will keep consistency within the class/program and I think that's more important to readability than anything else. Most ide's have an option to format code, in eclipse it's &lt;crtl&gt;+&lt;shift&gt;+&lt;f&gt;, if I ever had to work with my own code formatted, i wouldn't like it, but I would understand. btw: i'm really glad you pick up on small issues like spacing etc, not everyone does that. 
it is, however, it's better to define what you want to include for future readability and easier debugging
how should it make a difference? $p is in the scope, xdebugger displays it the same way, and more readable isn't your approach since you duplicate it.
but.... we still *usually* have far more limited vertical space compared to horizontal. 1024x768. 800x600 1280x1024, 1600x1200, 80x25 The horizontal number is always greater than the vertical number. Conserving vertical space isn't some crazy notion from the 70s that doesn't have any relevance today. 
I don't think "Service Locator" and "Registry" are mutually exclusive terms. Fowler notes in his http://martinfowler.com/articles/injection.html article, "In this case I'll use the ServiceLocator as a singleton Registry." As far as it being a factory, that's probably not the case either; the locator objects themselves might be factories that return the proper object, and the locator then retains that object for later use. After a while, some patterns seem to bleed into each other. ;-)
this was an example of how to use aliases in PDO. For this above code, yeah you can just of: $sth-&gt;execute($p)); However, what if name is in a different object, and quantity is computed else where. I gave an example that shows how to provide different values for different aliases 
It's still bad written code, and my statement was just a question, I'm sorry for you that you take everything offensive. &gt; what if name is in a different object, and quantity is computed else where its not in this case, and what if im a billionair? Sorry but that is BULLSHIT
I'm not strict on it, at first I follow all guidelines i'm prescribed. But if I have the option i'd really like to type the 'traditional' way and long names (no unnecessary abbreviations in class/method names). And I sometimes get the argument it costs lines, so fucking what? What is the price of a new line character?
Use Disqus and add SSO (single sign-on) for your users that are using a Yahoo login. http://help.disqus.com/customer/portal/articles/236206-integrating-single-sign-on
This is a bit OT, but... I've been on a few teams over the years where code style was focused on. In one case, the company was in the process of imploding because deadlines were not being hit, and customers were demanding more work because of the missed deadlines (and often getting it for free because of our delays). In the midst of this one situation in particular, the 'team' started arguing about code style. Specifically me in one case - I was not adhering to some style the 'team' had adopted a few weeks earlier. Nevermind that 10s of thousands of lines of code didn't actually follow the aforementioned style - all new code was supposed to fit the new style. I wasn't doing it - not intentionally digging my heels in - it's just that I'd already been developing for.. 9 years at that point, and some old habits die hard. Hours - several man-days in fact - were often spent reviewing "everyone's" code for style guideline changes, and then 'patches' were pushed up to 'correct' things. Often the patches broke something because they weren't just reformatting, rewriting as well. I was going crazy with this - the team, as it was - was ... 5-8 people, depending on how you counted them, and we were drowning in technical debt (no tests, no documentation, poor version control, multiple live patches on servers, etc). And yet... the easy thing to do was to blame the lack of progress on my failure to adhere to the coding style. "It makes it hard to read!" was a common objection. No... using classes sanely made it hard to read. Breaking up one method in to 4 so that each could be tested properly made it hard to read (to them). The fact that their *own* code wasn't really *understandable* by other members of the team seemed to fall on deaf ears. At first I wasn't confrontational, then later on I was. They'd generally not done a good job before I got there, and weren't doing any demonstrably better or worse after I arrived - "tabs vs spaces" BS was an easier scapegoat apparently than acknowledging a lack of formalized software development procedures, and acknowledging that some people on the team had more experience delivering software than others. Yes, I'm ranting and biased a bit. Had a couple other scenarios like this (much less impactful, but still bothersome). Whenever formatting and style issues come up, I harken back to this experience - the company eventually ended up laying off half the workforce (including me), and downsized further and eventually closed up (IIRC). Why? Couldn't meet their obligations with customers they'd sold software and services to. Why not? I maintain 0% of their struggles meeting their deadlines came from tabs/spaces/curlybrace issues, but that's what they chose to focus on close to the end. It's probably comfortable and easy to point fingers about something you have an opinion about, but whether I'd used tabs or spaces would not have saved that project or indeed the company. EDIT: The idea of 'let the team choose a standard' presumes that there's some decent dynamics on the team, as well as recognized experience. Outside of that, you'll have 'standards by fiat', which, handled poorly, will create more resentment and loss of productivity than simply sweating out someone using spaces and someone using tabs. I urge anyone bitching about tab/spaces/curlybrace positioning to really examine the code/project/team. Are there bigger fish to fry? Do you have good docs? Do you have automated builds? Do you have test data? Is your code testable? Is it performant? Can new people get up to speed quickly and start contributing useful code? Do you have readable method, class and variable names? If you've said "yes" to all that... start worrying about where your braces are. If the biggest challenge you face re: readability is where braces are on your screen... that's fantastic. But I'm not sure I believe you. ;)
For the benefit of any [f3](https://github.com/bcosca/fatfree) users Model might look like this (/Models/Product.php): namespace Models; class Product extends \DB\SQL\Mapper{ function __construct($db){ parent::__construct($db,'products'); } function create(){ $this-&gt;copyFrom('POST'); $this-&gt;save(); } } Controller might look like this (/Controllers/Controller.php): namespace Controllers; class Controller{ function product($f3){ $db=\DB\SQL('mysql:host=localhost;port=3306;dbname=mysqldb','username','password'); $product = new \Models\Product($db); $product-&gt;create(); } } Route index file might look like this (index.php): $f3 = require 'lib/base.php'; $f3-&gt;route('POST /product/create','Controllers\Controller-&gt;product'); $f3-&gt;run(); 
&gt; I know you guys aren't psychiatrists, but do you have any ideas on how to combat this? I really enjoy what I do and I want to continue. To answer this question specifically. I would try to start trying to build a filter in your head. Parse out all the BS code formatting issues and go directly to the logic. Try to think: Function foo, no params, returns string 'bar'. Try to file what the function does in your head and start visualizing some type of "overall model" that can help. If it's OOP I try to think of simple UML. If it's functions I simply map it to "when I need 'bar', call 'foo'. As mentioned before, seems like you went overboard on calling it OCD. Pointing out bad formatting is easy. Especially in code reviews. Get to the next step though, try to build a parser in your head. *Edit: English--; -- Fixed.
Begging? It's merely a short block of text letting people know they 'CAN', not "should" or "need to".
Here are a few more: **API Authentication** * https://github.com/php-loep/oauth2-server **Payments** * https://github.com/omnipay/omnipay **Deployment** * https://github.com/php-loep/shunt **Documentation** * https://github.com/zircote/swagger-php **Testing** * http://behat.org/ * https://github.com/fzaninotto/Faker **Geocoding** * https://github.com/geocoder-php/Geocoder * https://github.com/php-loep/Geotools **Images** * http://imagine.readthedocs.org/en/latest/ * https://github.com/php-loep/color-extractor 
I just launched it today, and there's no pressure to donate. I'm not looking to make any money off of the site, and sometimes people like to donate to things they use. Hosting and stuff isn't free, but I'm subsidizing the costs through different ways, this is just one. The site isn't going to blink out of existence if people don't donate. Every little bit helps. **Edit** Also, [Database Migrations](http://www.php-toolbox.com/category/database-migrations) has two entries already!
I appreciate all your help thus far /u/Nicoon, but, still unclear of how to use this iterator. I am aware that the 'userfilter' is just an example, it is one that I am trying to replicate with the code in this thread. Still unclear to me how to use this. &lt;?php class UserFilter extends FilterIterator { private $userFilter; public function __construct(Iterator $iterator , $filter ) { parent::__construct($iterator); $this-&gt;userFilter = $filter; } public function accept() { $current = $this-&gt;getInnerIterator()-&gt;current(); return ($current['privacy'] == 'anybody' &amp;&amp; $current['total_likes'] &gt; 10 &amp;&amp; $current['total_plays'] &gt; 200 &amp;&amp; strlen($current['title'])&lt; 30); } } if (($csv = fopen("php_test.csv", "r")) !== FALSE) { // read the column headers in an array. $head = fgetcsv($csv, ","); // read the actual data. while (($data = fgetcsv($csv, ",")) !== FALSE) { // create a new array with the elements in $head as keys // and elements in array $data as values. $combined = array_combine($head,$data); // print. if($combined['privacy'] == 'anybody' &amp;&amp; $combined['total_likes'] &gt; 10 &amp;&amp; $combined['total_plays'] &gt; 200 &amp;&amp; strlen($combined['title'])&lt; 30){ var_dump($combined); } } // done using the file..close it, fclose($csv); } Doing the above, I am still var_dump($combined) from the if statement in the loop when opening the .csv file. I do not see how to use the 'filteriterator' on the $combined array.
&gt; Eloquent Link for lazy? [Eloquent](http://four.laravel.com/docs/eloquent)
I found it too difficult to browse quickly as I'm required to click into each section to view contents, or even project titles. Maybe if I was looking for something specific I'd be inclined to do that, but I frequently like to browse these lists as you never know what you might discover.
Your userFilter property serves no purpose here. &gt; I do not see how to use the 'filteriterator' on the $combined array. You're better off replacing your code with a SplFileObject, e.g.: $file = new SplFileObject($csv_file); $file-&gt;setFlags(SplFileObject::READ_CSV); $iterator = new UserFilter($file); foreach ($iterator as $row) { //do your stuff }
All the website links are throwing exceptions for me, though I have to say VERY nicely formatted exceptions! ;) EDIT: On second look, a **lot** of pages "website" links are throwing exceptions. [example](http://www.php-toolbox.com/category/image-processing)
I think you're trying to solve a client side problem (changing display based on user input) using a server-side language. You probably want to look into Javascript. However, on the off chance that you're actually approaching this in the right way, I shall answer your question. &gt; is this at all possible? Yes. That's what if() statements are for.
Found out what it is. Github doesn't force projects to have 'http' as part of the domain name like I thought it did. Fix is forthcoming! **Edit** And a band-aid has been applied with a bug report for a permanent fix. Thanks!
as /u/philsturgeon mentioned, it's not curated at all really. There are a lot of forks in Packagist because people add their own forks, which gets confusing. I do plan on pulling in Packagist stats, now that I've found an easy way to get them. 
you are correct. I guess I need to look into sigmawidgets or hire a js developer to create something that will allow coumn b1 to only be shown on a condition of a1. Thanks for the right direction.
This article is not at all about server-side languages so I am not sure why it is posted here. Sure we're talking about frameworks, but even if we are speaking in general terms this is a weird article and I will explain why. The conversation started about Twitter Bootstrap. I agree with that to a point, that for some projects having all that extra CSS around is bad for performance and could be weeded out. You can of course trim down these CSS files, which is essentially "recoding it", but whatever, removing the cruft at a later date is certainly a good idea. But then this article takes a bit of a funny turn. Likening this same process to Angular, Ember, Backbone etc suggests that people could do the same job but more efficiently themselves. If the author is suggesting that the average user of any of these systems is able to recreate the functionality of those systems with less code and higher performance then I would strongly disagree. The crazy powerful shit these frameworks do is certainly beyond many. And I'm not just making excuses for stupid people, I am genuinely wondering what the benefit is. Sure with JavaScript we have a file-size concern (Ember/Angular arent exactly tiny) but I would suggest that the average developer trying to make an complex application to the same functional level as something build with AngularJS would end up writing so much damn JS that the benefits would be lost. The author also makes comments about how AngularJS feels like over-kill for one-page sites. Well of-bloody-course it is. Trying to loop back to the "this article might have some relevance to PHP" suggestion that posting this here made; the way JS and PHP codebases are loaded is entirely different. JS frameworks generally come down the tubes all in one go so if you have a small site using a small section of a large framework you are wasting some time on HTTP calls for content you don't need. PHP frameworks these days generally use autoloading so if you framework does more than you need then it won't be used. *I suggest that if you have a small site and dont need a framework then using plan-old PHP with a few composer packages is certainly an option, but that is not the same as "build it in a framework then recode it after".* Both the author and would probably agree that using more code than you need to achieve a job is silly, and using a framework every time just because its your comfort blanky is moronic, but that is as much theory as we can take away here.
Hey, maybe you find something useful in here: https://github.com/Paratron/KISS-tools
i would recommend js there are js table plugins like http://datatables.net/ not sure if you want to handle this in php. seems like an ajax request to show/hide columns is much overhead. if the data is not very big, i would handle it client-side. 
Granted this article is about JS, but it is a slippery slope in thinking. You could extend this logic further and say that PHP is just a "framework for rapid prototyping" over C. Then C is just "a language for rapid prototyping" over Assembly... Languages, frameworks, and libraries are built for a reason -- to be used to remove the redundancy needed by almost every application from driver level to user-level script. In regards to JS... all the JS that Rails ships with for Turbolinks and other snazzy features ends up being MORE JS (file-size) than including jQuery + Ember. I have a link somewhere for a conversation between Yehuda Katz and DHH about it. I will update this post when I find it. EDIT: Here is the link. Not definitive, but you look at a lot of websites and you see something similar... about 10 jQuery plugins plus jQuery itself are about as bad or worse than including a full JS framework. Since jQuery isn't counted in this article as "uselss frameworks" then the reasoning stands. https://twitter.com/wycats/status/374698723537735682 Unless you're suggestion everyone rolls their own string buffer implementation...
&gt; I agree with that to a point, that for some projects having all that extra CSS around is bad for performance and could be weeded out. Which is quite easily done with Less or SASS (Theres a SASS) or even doing a custom build. There's no where that says you have to use all of bootstrap and the overrides are minimal so we're talking a few KB extra over doing everything yourself in the end.
adopt a coding standard and stick with it. Something like PSR-0, PSR-1, and PSR-2 will cure you of your "preferences"
I appreciate it! FYI I am a huge fan of your tutorials and work! 
This speaks to me about my own experiences on so many levels.
It's pretty hard to agree with that. This sort of explicit creation of objects has a number of downsides. The argument that it's "easier to debug" is... I don't know how to say it but "outright wrong". It's exactly the same to debug. It's identical. Whether you're putting a breakpoint on $p or print_r on $p, it's identical to looking at $p['price']. There are downsides, too. Significant ones. For a start, there are a whole bunch of lines that don't need to be there. Lines aren't a big deal, but writing unneccesary code just because it's "easier to debug"... Why would you do that? Just take it out entirely. Code you can remove is the best code! It's also code that introduces potential errors. This is bug-prone code and I know this because the last place I worked did a lot of this shit. $object-&gt;amount = $_POST['amount']; $object-&gt;piece_id = $_POST['peice_id']; But it had errors because no one noticed the typo. This sort of thing is very very easy to do. And by the way, the argument that not everything comes from post therefore they should all be explicit is still wrong. $inputs = Input::all(); $inputs-&gt;tax = $taxCalc::calcTax($input-&gt;state, $input-&gt;amount); $order-&gt;save($inputs); That's a vast improvement on having 40 lines of do-nothing code. As a final point, explicitly declaring these lines is a maintenance overhead. $obj-&gt;name = $p['name']; $obj-&gt;type = $p['type']; $obj-&gt;owner = $p['owner']; $obj-&gt;breed = $p['breed']; $pet-&gt;save($obj); When later you want to add a "purebred" flag, you have to add it to the object here, as well as the form. It may seem like a trivial change, but that's in this simple example. I've seen similar form handling that had more than 100 lines of needless explicit creation, replicated over multiple methods and through Javascript as well. A complex example might have multiple changes needing to be added to multiple methods, etc. It's also an unnecessary one. $info = Input::all(); $pet-&gt;save($info) With the above code any changes made to the form propagate automatically through to the ORM (the same applies to PDO). There are fewer lines to scan through, so readability is greatly enhanced. Code you don't write is code you never have to debug. TL;DR No, it's better for future unreadability and easier bugging. Edit: If you can't make a counter argument, don't downvote. If you disagree, disagree. Downvoting a long and detailed rebuttal of your point is just laziness. If you have no counter, you may just be wrong.
Then do that. You could still have lines with whatever needs to be calculated. $data = $_POST; $data['customer_name'] = $user-&gt;name; $sth-&gt;execute($data); For all the downvotes, itrulia is completely right here. Needlessly explicit re-generation of objects and arrays is a bad idea. It's unnecessary and error prone.
So basically I want to set: opcache.revalidate_freq=0 Is this correct?
This doesn't "make it look like redbean" at all. What you've done is take the explicit declaration of the object, imo an error in OP's code, and used that. You haven't actually got any of the benefits of an ORM. Specifically, you've still got $sql = 'INSERT INTO product(name,quantity,cost,price,upc,taxable) VALUES (:name,:quantity,:cost,:price,:upc,:taxable)'; It's the maintenance of this that something like redbean allows you to avoid. Added a column? Don't need to add it into the list of columns/placeholders. Changed the name of the table? No big deal. Your PDO suggestion ignores all the benefits of an ORM, provides no advantages, and makes me wonder if you actually know what an ORM is for.
You want to make sure it's on. Also check the frequency which opcache checks your files for changes.
Thanks. I guess I would like the frequency to be every pageload. But that only checks the timestamp right, not the entire file? (Like APC?)
Somebody didn't understand your joke, so here's the source: [real programmers](http://xkcd.com/378/)
This is some seriously disastrous advice. Just... horribad. Frameworks allow rapid development, that is true. But it's not like their advantages are limited to just that. Frameworks allow you to vastly reduce your maintained codebase by offloading huge amounts of functionality to an external entity. This external entity does not need to be tested or maintained, so the codebase under active management can be much smaller. This doesn't change when the project goes live. Neither, frankly, does anything else. Yes, Ember or Angular might not be tiny, but they're also not the critical hit that the article seems to be suggesting. They're downloaded and cached and then that's the end of the damn thing. Most particularly, though, the article fails to understand that "in production" does not usually mean "no longer in development". Features are routinely added to existing projects, whole sections of functionality provided. The framework is intended to provide support for those, too. Where this article stops, takes a measured breath, and then shits its own pants is where it advocates using pre-made components as a framework. I've seen where this goes. I've seen what this means. What it means is dragging old components through a decade because they "work". When in fact they work poorly. What it means is copy-and-paste architecture that suffers from increasing code rot. What it means is a system based on one asshole's code instead of a system based on code from dozens of the world's top developers, battle tested by other skilled developers, and then dumb questions from shit developers (like me!) posted all over Stack Overflow, with video tutorials on Youtube. Applied to Javascript or PHP frameworks, this article is pure poison. 0/10, would not purchase again.
Tell me about it. The last major project I worked on was like this. A really bad developer just copying and pasting the same shit he'd done for a decade.
This is dumb. What makes us developers is solving unique business problems and applying our knowledge, not avoiding time tested components. If you hand stitched a net every time you were going fishing, everyone would think you were a fuckwit. The same applies.
I don't disagree. :)
A lot of newbie developers look to their framework as a golden hammer that should solve all problems. Database migration is not typically the role of your ORM. In larger organizations, very few DBA groups would allow this. --- Solution 1) if your ORM does not include a migration system, you can easily [put one together with phing](http://davedevelopment.co.uk/2008/04/14/how-to-simple-database-migrations-with-phing-and-dbdeploy.html). --- Solution 2) You can put together a migration system by manually creating SQL deltas yourself. e.g. . db-up-v1.1.sql ALTER TABLE footable ADD barcolumn VARCHAR(255) NOT NULL AFTER id; db-down-v.1.0.sql ALTER TABLE footable DROP barcolumn;
The study guide has some questions at the end of each topic: http://static.zend.com/topics/PHP-5-3-Study-Guide-v1.pdf
Have you seen this collection - https://gist.github.com/ziadoz/1677679 (A curated list of amazingly awesome PHP libraries, resources and shiny things)?
I would extend that to say the arguments are equally wrong for all languages.
You're 100% right. It's bullshit.
No, but that is awesome. Thank you!
Wow I remember I paid for this once, many years ago in php4 days!
If stored properly, nobody can retrieve user passwords from the database.
I passed the test a few months ago. In all honesty studying is hard for 2 reasons: 1) they make you memorize silly things like parameters and there order 2) they try to trick you a ton I felt like they used every cheap tactic I hated teachers using back in school that doesn't actually test your knowledge. Putting on my conspiracy hat I didn't expect much different as they have no incentive to make it easy on you as they are selling the test (and did you notice how much there training costs)? That said, do your best to memorize stuff and don't focus too hard on any one area. I studied really hard on XML stuff because I don't use it much and got maybe 1 XML related question out of 80. Good luck.
Hipsters
Java, JavaScript, PHP they all have being terribly successful and they all being badmouth by elitist developers. Can you guys see the trend here?
Make sure you familiarize yourself with the stuff you don't use on a day-to-day basis. I know that when I took it, I got questions on levenshtein, socket operations, and other piece of PHP that I had never really used. Also.. with any code samples, think like PHP. Look for missing parenthesis, braces, misspelled keywords, etc. They definitely try to trick you. Also, when you're dealing with some of the questions that deal with loops, don't be afraid to write things down for each iteration of the loop to verify it as you follow along. I know I had gotten lazy and would just throw some code down with some print statements to double check my work, but you don't have the luxury of just making a change to your answer and hitting refresh to see if it's right.
I was writing out some lengthy structures so wrote a few helpers myself. I did not know about the *import* function though! That is very useful. I have two classes so far for this project, campers and products. Going to grow to sales and other things, but I started writing a structure that would work well with this code. Since each class does some form of CRUD (except the sale class only create/read), I am extending a class that has the helpers and RedBean methods. Took the codebase of the two classes to about 15 lines and the main class I am extending with CRUD to about 30. BRB, going to look into Laravel's implementation.
Came here for this.
Thanks! Everybody keeps saying I need to memorize a lot of small thing. I hate that too. Just hope that I'll pass.
Definitely useful, thanks!
I also catch myself working on a trail error method :)
Thanks!
I studied the php manual a lot before the exam, and it helped me on many questions! Also google for the exam name, for me it was "php 200-530" and search for PDFs. If you pay attention and have seen third party code you will know when they try to trick you.
Have you found any benefit to actually having the certification? I've never experienced anyone asking for it, or asking me to take it in 13 years of doing this.
Love import. If you import you can still modify the bean properties after before you save it. Import makes your code so much smaller and easier to manage.
Yes, it's much better to maintain a github page than to create a full website for this
Creating and deleting objects in Red Bean is trivial and some have argued not much better than other methods. Total power is like creating parent child relationships. eg $business1-&gt;ownUser[] = $user; and child objects can quickly find parent objects and their parent objects. These things make RedBean fantastic. But since working with some .Net developers, it is amazing how much time they spend trying to get the Database schema to match what their code needed to do. I have done maybe 10 or 15 projects in Red Bean and I pretty much never touch the DB schema and it is fantastic as I can code my concepts and run them and the data really is stored by the code. You gotta love this. And yes you can prevent Red Bean from building tables on the fly by using R::freeze();
The big question is why do you even bother to take it? Not all companies use Zend and can't see why a Zend certification would bring you any adventages over other applications for a job unless all candidates lack real experience or education.
Thank you, but I don't want to know if someone posts on my page, I want to know if a page I follow posts something. 
Thank you, I'll try it when I get home. Would the whole thing be easier with twitter and JSON ? 
Well, you don't have to be an admin, you can follow any fb page you want. Like exgirl or fan page, check out vid on the website.
Na then you'd probably want to end up messing around with OAUTH if you wanted to do it properly -you could do the same trick of spoofing UA and capturing the session cookie though, ( it's just not the 'official'/supported way to do such things) 
I work as a consultant and my boss wants us to get these certificates because the customers seem to put value on them.
The company I work for wants us to get these certificates.
Oh right. Free gym, here I come. Thank you :) 
 function config($key) { global $config; $keys = explode(".", $key); $tmp = $config; foreach($keys as $key) { $tmp = $tmp[$key]; } return $tmp; } You'll need to add some is_array checking in there..
[Zend PHP Certification](http://www.zend.com/en/services/certification/) has nothing to do with the Zend Framework or other Zend products. It's just a certification for your knowledge about PHP in general.
http://net.tutsplus.com/ has great tutorials , and not only for PHP
of course it will. But you are not supposed to get config keys from user input. If you mistype an array key, eval'd or not you are supposed to get an error so you can fix it. And yeah, I know there'd be bugs. I just tried to suggest a direction to a potential solution.
As an example that is implemented in a framework, Laravel makes use of the [array_get()](https://github.com/laravel/framework/blob/master/src/Illuminate/Support/helpers.php#L248-276) function for when it comes to retrieving an array based on a segmented key.
Lets break out the magic... function config($key, $cfg = false) { $cfg = $cfg ? $cfg : $GLOBALS['config']; $t = $key ? strtok($key, '.') : strtok('.'); return $t &amp;&amp; is_array($cfg[$t]) ? config(false, $cfg[$t]) : $cfg[$t]; } 
I can't decide if stomping $tmp every time a key is found is elegant or inelegant. Either way, you've solved a recursive problem with out formal recursion, for which I salute you.
made this a couple weeks ago: class Config { protected $dataNormalized = array(); /** * Load configuration values into thos container * @param array $data either nested or sot.separated keys * @return self */ public function loadValues($data) { $this-&gt;dataNormalized = array_merge($this-&gt;dataNormalized, $this-&gt;normalizeNode($data)); return $this; } /** * get value of a key. if no matching key is found, a namespace may be returned * @param string $key the configuration key * @param boolean $denormalize in case of a namespace being returned, denormalize it * @return mixed */ public function get($key, $denormalize = false) { if ($this-&gt;has($key)) { return $this-&gt;dataNormalized[$key]; } return $this-&gt;getNamespace($key, $denormalize); } /** * get all values starting with $namespace * @param string $namespace the prefix to look for * @param boolean $denormalize return results as nested arrays if appropiate * @return array the values */ public function getNamespace($namespace, $denormalize = false) { $result = array(); $search ='/^'.str_replace('.', '\.', $namespace).'\.(?&lt;key&gt;.*)/'; $preg_hit = array(); foreach ($this-&gt;dataNormalized as $key =&gt; $value) { if (preg_match($search, $key, $preg_hit)) { $result[$preg_hit['key']] = $value; } } if ($denormalize) { $result = $this-&gt;denormalize($result); } return $result; } /** * is the key set * @param string $key the key to check * @return boolean if it is set */ public function has($key) { return array_key_exists($key, $this-&gt;dataNormalized); } /** * converts a nested array into a flattened one * * array('foo' =&gt; array('bar' =&gt; 'baz')) * results in * array('foo.bar' =&gt; 'baz') * * @param array $node the nested array * @param string $parent prefix, used for recursion * @return array normalized array */ protected function normalizeNode($node, $parent = '') { if (!is_array($node)) { return array($parent =&gt; $node); } $result = array(); foreach(array_keys($node) as $key) { if (is_int($key)) { return array($parent =&gt; $node); } $result += $this-&gt;normalizeNode($node[$key], ($parent? $parent.'.' : '' ). $key); } return $result; } /** * converts a flattened array into a nested one * * array('foo.bar' =&gt; 'baz') * results in * array('foo' =&gt; array('bar' =&gt; 'baz')) * * @param array $node the flattened array * @param array $result other items in this level * @return array denormalized array */ private function denormalize($items, &amp;$result = array()) { foreach ($items as $key =&gt; $item) { $tokens = explode('.', $key, 2); if (!array_key_exists($tokens[0], $result)) { $result[$tokens[0]] = array(); } if(strstr($tokens[1], '.')) { $this-&gt;denormalize(array($tokens[1] =&gt; $item), $result[$tokens[0]]); } else { $result[$tokens[0]][$tokens[1]] = $item; } } return $result; } } Here is a test that should work as example class ConfigTest extends PHPUnit_Framework_TestCase { public function setUp(){} public function testLoadValues() { $cfg = new config\Config(); $data = array( "foo" =&gt; "bar", "baz" =&gt; array( "check" =&gt; 123, "moar" =&gt; array( "nesting" =&gt; array( "ftw" =&gt; '!' ) ) ) ); $cfg-&gt;loadValues($data); $cfg-&gt;loadValues(array('additional.values'=&gt;2)); $this-&gt;assertEquals('bar', $cfg-&gt;get('foo')); $this-&gt;assertEquals(123, $cfg-&gt;get('baz.check')); $this-&gt;assertEquals('!', $cfg-&gt;get('baz.moar.nesting.ftw')); $this-&gt;assertEquals(2, $cfg-&gt;get('additional.values')); } public function testGetNamsespacedValues() { $config = array( 'foo.a' =&gt; 'bar', 'foo.b' =&gt; 'lala', 'nested.foo.b' =&gt; '1', 'nested.foo.c' =&gt; '2', ); $configClass = new config\Config(); $configClass-&gt;loadValues($config); $result = $configClass-&gt;get('foo'); $this-&gt;assertEquals(array('a' =&gt; 'bar', 'b' =&gt; 'lala'), $result); $result = $configClass-&gt;get('nested.foo'); $this-&gt;assertEquals(array('b' =&gt; '1', 'c' =&gt; '2'), $result); $result = $configClass-&gt;get('nested'); $this-&gt;assertEquals(array('foo.b' =&gt; '1', 'foo.c' =&gt; '2'), $result); } } 
Here is a class from my PHPixie framework that does what you need plus some additional stuff, like * Using dot notation to modify the config * Reading/writing to a file https://github.com/dracony/PHPixie-Core/blob/master/classes/PHPixie/Config.php
learn to use the correct PSR standards, even it makes you OCD as for class methods you have to adjust, i prefer your 2nd exmple to, but for class methods in the relevant PSR standard, its your first example. live with it :)
I think the only inelegant thing is the naming being $tmp. Perhaps $child is more appropriate.
I understand that as an intellectual exercise, this can be fun. But as a practical matter, *why*? $config['key1']['key2'] works perfectly well here.
https://cloud.google.com/pricing/
What all is the subject matter? Is it all syntax + php.net/functions? What about SPL? Is it expected to know all the extensions as well like DOM, SimpleXML, APC, xdebug?
As a person who is using the Laravel validator this looks very hard to use and the syntax is illogical. 
The major debate is whether rules should be assigned to input, or input assigned to rules? I have prefer the latter, though a lot of the feedback is that it doesn't make sense. I'd appreciate everyone else input. Is that the bit that's confusing you?
I have proposed an alternative syntax, https://github.com/gajus/vlad/issues/1. Your insights would be appreciated.
This is totally true. I probably got a bit carried away. OCD runs a broad spectrum of conditions from minor difficulties to pretty much impossible to have a life. I shouldn't have implied that the worst end was the universal experience.
See, now, **this** is a good response. :) That said, I would argue: that a technique has a potential security flaw if badly implemented doesn't speak against the technique. It speaks against poor implementation. Laravel and Rails (which is most famous for mass assignment vulnerabilities) both protect against these vulnerabilities now by failing to mass assign unless access protections are in place. &gt; it's almost impossible to know which data is going to be set through which form Can you clarify what you mean by this? I'm not sure I see the problem.
Which is what we're aiming for if we want to consider ourselves professionals. :)
Aren't you supposed to be able to easily swap out your classes in dependency injection though? I don't practice of myself yet but it looks like you're just creating a very specific object repository instead of true dependency injection. 
For outside dependencies, we go the traditional route and define our objects before-hand.
No, you haven't fixed the problem at all. The problem isn't that detail. The problem is that the entire structure is completely incomprehensible. edit: Oh, I see what you're doing now. It's kind of backwards from what I would expect. You have a list of rules and the fields that match them. I would expect a list of fields, and the rules they need to follow. 
And I think its better because its just a list, I don't really need to see how many forks or watchers the library (or whatever) on a some other web site that links to it. A small description is enough and if you're interested you can open the github/whatever page and see the details.
`For` instructions show how to use `for` to loop over an array. `While` instructions ask the learnee to do the same thing in a `while` loop. This is not something we should be teaching. Object property is set despite not existing... Object constructor instructions use PHP 4 syntax... **WARNING WARNING ABORT ABORT THIS HAS NOW BECOME CLEARLY A COMPLETE SHITSTAIN! DO NOT WASTE YOUR TIME!** edit: has been updated now and is slightly less shit.
I like the time saved primarily. I love the [creator's responses on StackOverflow](http://stackoverflow.com/questions/7765070/redbean-orm-performance/8220074#8220074) about some of the "Never use an ORM" people. It is great for development teams as well, instead of passing schema's back and forth. Of course you will need to pass any data if your team is testing validation, security issues, etc. But the overall gain of productivity from RedBean is enough to use it. 
&gt; You have a list of rules and the fields that match them. I would expect a list of fields, and the rules they need to follow. The examples is: [list of inputs] = [list of rules]. Isn't that what you recommend?
Simply because PHP constructs don't allow many to many constructs. True that [input1, input2] =&gt; [rule1, rule2, rule3], could be written as [[input1, input2], [rule1, rule2, rule3]]. The latter syntax, though is less intuitive, though it would benefit from not using parsing. Have you seen the alternative syntax I have proposed in response to some of the comments? https://github.com/gajus/vlad/issues/1
I just recently got it. My work offered to pay for it so I decided to do it for the heck of it. I haven't been looking for new jobs or anything so I haven't really benefited a ton. However, in studying I did learn some new concepts and libraries I didn't know about, so that has been a side benefit.
You can see what is required from the study guide, and yes it includes extensions like DOM, SimpleXML, etc. In addition, you also need to know server configuration and general security related questions.
On reflection, the main reason I'd find the original annoying is because of how editors auto indent things. Looks interesting though.
Why should we not be teaching someone to iterate over an array with for and while loops? You should be able to do that and use foreach. I agree that they should declare their properties before setting them. Otherwise though... seems like a pretty ok intro for beginners. You really think it's *that* bad?
&gt; Why should we not be teaching someone to iterate over an array with for and while loops? Because it's wrong. It's not idiomatic PHP. There's a specific control in PHP just to do this. It's the way to do it in PHP. Anything else is a cludge. &gt; You really think it's that bad? Yes. I think it's complete and utter shit. **It's using PHP 4 syntax and its information is wrong.**
Planned items are allowing users to vote on how good projects are (and resources, for that matter). PHP Toolbox also allows people to submit things like How-To articles, videos, and things like that to help people use the packages. Some software is great to use, but can be lacking in documentation, or have a glut of old/outdated tutorials out on the web. 
That's not an issue. No editor on Earth will indent your string, because this would change the string value. If you like it, please star it. There is definitely an update coming.
did /u/hopeseekr make this?
I don't quite get the "28 instance hours". Does that mean 1 instance for 24 hours and another instance for 4 hours a day?
Yeah, well - I wouldn't call it monolithic, but... yeah its just a "box" where I throw in different PHP classes. Most of them are just one file and it would be overkill to create a single repo for each of them :)
Basically, GAE scales itself based on how long your site takes to respond. When it feels your site needs additional scaling to cope with a surge in traffic, it will open another instance and balance requests to it. Instances are billed in blocks of 15 minutes, so theortically 28 hours is enough for you to handle steady traffic throughout the day plus 16 traffic spikes.
[Updated with link category links](https://gist.github.com/Xanza/7663627), and a few frameworks.
However, that's only if your traffic spikes don't get so big that yet another instance or two needs to be brought to life, which then further increases the rate of consumption. This is where optimization comes into play, along with more expensive GAE plans which allow for fine tuning and maxing out the number of active instances.
Basically, we need them to install Phalcon.
Spot on! *cough* [*cough*](https://code.google.com/p/googleappengine/issues/detail?id=9336) *cough*
If I didn't know PHP already, this sure wouldn't teach me. This is the PHP-tutorial equivalent of this: http://imgur.com/8jCKIeN
Why are we recycling articles from 2009? 1. If it's not composerable it's not useful. 2. ADOdb? Seriously?
http://www.phptherightway.com/
Is someone spamming shitty articles and blogs? There seems to be an unusually high level of outdated or irrelevant derp tonight. 
The most important and useful thing to learn when you're starting off with programming doesn't have anything to do with languages or computer theory - it has to do with learning how to think. There are three axioms to becoming a programmer: First and foremost, a programmer needs to understand deductive reasoning, as it's absolutely fundamental to programming. [Under no point is programming magical](http://blog.stackoverflow.com/wp-content/uploads/then-a-miracle-occurs-cartoon.png). Every conclusion in a computer system must be preceded by the appropriate premises to reach it. Programming is essentially a flowchart with very precise instructions. Secondly, a programmer must be able to do problem solving, that is, being able to understand the problems at hand, analyse them and find appropriate solutions. A programmer must train his/her mind to be perceptive to the problems and their solutions and subconsciously build up a process to attack problems as they arise. First, you could try and understand other people's solutions to problems. Then you could try and solve problems and keep an existing solution as a reference if you happen to get stuck. Once you feel comfortable with the exercise, you should take off the training wheels and attempt to solve the problem all by yourself. Sorting algorithms is a good start. And finally, a programmer must be able to know how to find information for him/herself once his/her own faculties fail him/her. This means knowing where to look for information (e.g. the documentation, google, stackoverflow etc.), knowing where to ask questions (e.g. if you have troubles with a specific product, you should ask questions pertaining to it in its help section or forum before proceeding to venues which have to do with more general topics), and [knowing how to ask them](http://meta.stackoverflow.com/questions/66377/what-is-the-xy-problem). Once you have that, you have the tools to accomplish anything.
At least it's a good coding style (IMO) and not something like [reverse indentation](http://stackoverflow.com/questions/218123/what-was-the-strangest-coding-standard-rule-that-you-were-forced-to-follow#219855) 
awesome resource, thanks
Thanks.
Learn how to make make simple APIs and than how to make asynchronous calls to the APIs from the front end using jQuery (stick to JSON unless you have a really good reason to use XML). Learn to separate actions from page loads. This is such a big deal and one of the first things that most clearly separates good PHP devs from middling ones. 
Kind of like AJAX (separating working modules from the page itself)? Whats an API can you show me an example? I understand XML is like a file that stores data, right? I've never used this things before so :) 
One developer does not a community make.
In case someone wonders why this blog post is ridiculous: 1. Testing for `/John.*/` is the same as testing for `/John/`. Judging from the context, the author meant `/^John/`. It really is a beginner's mistake. 2. A PHP `switch` evaluates once its parameters, then does loose equalities (`==`). So the comparison in the first case is: `($string == (bool) preg_match('/John/', $string))`. Now try `greetings("")` or `greeting("0")`, it will return "Welcome John" because both sides of the comparison are false. *Errare humanum est.* But I wouldn't dare posting *advices* on anything I haven't studied or used heavily.
~~I've just learn't it [this ](http://www.codecademy.com/tracks/php)way.~~ I've just started learning it this way.
A lot of times, companies use it for marketing. I work in a consulting company and all of our PHP devs are ZCEs. All of our .NET guys have MS certs. I have ZCE for PHP, MySQL DBA, MS SQL Server DBA and MS Professional Developer certs. Do any of them impress anyone who knows anything about them? No. But for a potential client, seeing that long list of certifications after your name makes them feel like they are getting an expert. Also we have had companies contact us based on listings within the ZCE yellow pages because they were looking for an expert, and while having the cert doesn't guarantee you're getting one, it's a place to start looking, at least.
Well, I guess the problem that I've encountered isn't all that common. There's been a few situations where I or someone on my team added a new attribute to a model that was being mass assigned somewhere. In one case, someone added a category attribute. One rarely used form related to visibility settings had an extraneous name="category" selectbox that was only used to filter on the client. Suddenly, any change of visibility settings nuked your entry's category. In another case, attributes weren't properly guarded and user API `token`s were overwritten by your CSRF `token` each time you edited your profile (a hilarious bug that escaped because one random string seemed as good as any other). By just looking at the model, you don't really know what kind of data gets sent to its save method. If you look at the controller without looking at the model, you wouldn't know what kind of data might need special treatment; you might not even know what data that the controller is working with. If you manually set fields or also use an `Input::only`, things get a lot more clear. By looking at your controller, you can immediately get an idea of what fields can be edited in the view. I guess my point is that automatic propagation isn't always a good thing. It all depends on the type of app, the audience that gets to use the save button (app vs some kind of trusted-admin-only CMS site) and the overall size of the codebase.
That's a great question. I, too, would love to know the answer if anybody knows.
Gaah. Several years ago I inherited a product where the previous developer had created a new PDO object on every query. He also failed to escape or parameterize any of his inputs. It was baffling.
I'm not sure if we're looking at different things (maybe they changed the info on the site) but they're definitely using the __construct method for classes which is the PHP 5 syntax. Or did you mean something else? Also, you guys need to calm down. Why don't you go have fun with [this](http://www.w3schools.com/php/) for some php lessons to be up in arms over. 
It's been fixed. They've changed the constructor style and added access modifiers to it. 
I think they hear your concerns :)
Yes [AJAX](http://api.jquery.com/jQuery.ajax/) exactly - I didn't use that term originally because people sometimes get caught up on the XML part (XML is optional). PHP is great at connecting to (and reading and writing) a wide variety of other things, but JSON is just really handy because the structure mirrors arrays in PHP (for the most part). This makes is really easy to transport data from PHP to the front end (or another API) without having to go through the trouble of converting it to something like XML, which takes effort. I don't have a public facing example off the top of my head, but my suggestion would be to start with a micro PHP framework. [Flight](http://flightphp.com/) is one that I like, for example. Create a route, a view, a controller, a method on the controller, and a form in the view. Don't send the data in the form using the normal action attribute and submit button. Instead, create a [jQuery listener](http://api.jquery.com/on/) on some other element on the page and inside the *function()* call make the AJAX request to your controller method route. Do NOT forget to clean the request data (which is too big a topic to cover here) at the beginning of the controller method. My preferred way to return data from the controller is like so: $return = array(); /* 1 if whatever you were trying to do worked, 0 otherwise */ $return['success'] = 1; /* Any return data or operations results (like database insert IDs) go here */ $return['results'] = array(); /* You should be returning errors to yourself so that you can tell what's going on in the back end. I can't really stress this enough. Return a TON of data from the back end until you have a good feeling for what's going on. Then you can stop returning so much (but more info doesn't hurt unless you're dealing with a high-traffic site). */ $return['errors'] = array(); /* If your framework supports encoding JSON results as return data, then use that method. If not, use the following */ return json_encode($return); Now back in the front end in your jQuery ajax config, you get the results of the request using the *success(data, textStatus, jqXHR)* method. Pull out success, results, and errors (which you set as the fields in the return array) from the *data* var and you have yourself the basis of an API. 
Just a guess: Because logging in gives them access to your contacts?
Something something emacs vim something something...
Wow, amazing 
I'd take it slow man. That forum you keep linking to needs a lot of work. Spamming low quality articles isn't going to help you out much. 
+1 for this. Not clicking each category is awesome too. 
Backup by the wisdom of the crowds, you can help others make the decisions easier.
No. Just real people, real voting.
wow
I've only used it once, and that was specially for the automatic nature of it. I was importing XML data with shitloads of unknown fields from an external source that I didn't want to have to spec out. So it was the right tool for the job on that project, awesome in fact. However for anything else, especially stuff where stability or normalization are important, I wouldn't use it, because it's not the right tool for that job.
I wouldn't spend so much emphasis on frameworks...
So are these two URLs the same thing: &gt; https://github.com/ziadoz/awesome-php &gt; https://gist.github.com/Xanza/7663627 ? I don't get which is the master list - what should I be book-marking?
PHPStorm http://blog.jetbrains.com/phpstorm/ or if you need to be cutting edge try the EAP http://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Early+Access+Program if you haven't used it, give it a try
http://www.phptherightway.com/
It's been a while since I've used it, but wouldn't it be simpler (and probably more efficient) to use [getimagesize ()](http://www.php.net/manual/en/function.getimagesize.php) or [exif_imagetype ()](http://php.net/manual/en/function.exif-imagetype.php)?
&gt; I've just started learning it this way.
Thank you so much for this! :)
Xanza's list is a fork of the OP's link. Frankly, I'd bookmark whichever you find more useful.
Passed it on 20th of November. When i got preparation training for exam, 1 guy said opinion, that this is "exam on php issues actually" and i totally agree with him. You shouldn't even try to memorize all php.ini directives and etc. Just Read their prep manual, go through all test questions, that you have and you will pass it. I wrote down couple questions that i got on exam and on prep. trainings from zendcon and will probably post them here a bit later. 
/ziadoz/awesome-php is the original list. However, I forked it (/Xanza/7663627), added the links to the sections to make it easier to browse, and added three or four new frameworks to the list. So technically my list is more updated, but if you're just looking to bookmark the list, go with the original /ziadoz/awesome-php
I think the biggest advantage to hierarchical (and this isn't well represented in the chart from your link) is that if you have multiple users named Jo. You can have EU-Sales-Jo, USA-Sales-Jo, and USA-Service-Jo. They all perform different tasks and you can easily call each one and know their exact task by the hierarchy. It can get VERY [extreme](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition) to the point (I feel) that you begin to lose the benefits over other areas like readability.
deep hierarchy is a mistake people should know better
Just because you can do something, doesn't mean you should.
If you notice the difference of a page load with opcache turned off locally then I am seriously impressed with you, or serious unimpressed with your dev box. Not sure which. :)
Start with the head first series: [Head First PHP and MySQL](http://shop.oreilly.com/product/9780596006303.do) After that, get into some easy-up frameworks: [Code Igniter](http://ellislab.com/codeigniter), [Yii](http://www.yiiframework.com/). Move into some simple platforms: [WordPress](http://wordpress.org/), [Drupal](https://drupal.org/). Move into more complex frameworks and platforms. [Zend Framework](http://framework.zend.com/), [Magento](http://magento.com/). I hope this helps. Best of luck. PHP is a great language. 
Just so that everyone is aware. 4.1 is not official released (as far as I know) so doing this is still using dev code. If you go to https://github.com/laravel/laravel you'll notice that the master branch is still 4.0.* and not 4.1, which is the reason I believe that 4.1 is still in "dev"
Wow, this is awesome thank you!
This was the comment I was aboout to make!
I F'n love composer. And now that frameworks are being built on it, makes it wayyyy better... I love developing in PHP all over again... Been doing this for 13 years and I feel like my first year all over again.
not sure if this is what you are asking but you can wrap $favoriteNumber with intval($favoriteNumber) to guarantee an integer (0 if a string) and strval($favoriteColor) to guarantee a string. Then you should always have the data type expected.
The best thing to do is check what you're binding beforehand, but if you want to catch errors you haven't thought about you might want to look into [exceptions](http://us3.php.net/exceptions). The code is throwing an exception because it doesn't know how to handle what its been given, you can either let it turn fatal (like it currently is) which will stop processing, or catch the exception and work with it. For example: try { // your statement here with the : binding } catch (Exception $e) { echo 'Oops! ' . $e-&gt;getMessage(); }
There is [/r/laravel](http://www.reddit.com/r/laravel). **POST THERE!!**
perfect. any chance that could be broken? for example if somehow it becomes null, intval would do what (i forgot default 0?) and string could be ""? I just thought about that too writing an isnull function or defaultvalue function on each parameter eh?
You don't need parenthesis, his code and yours both create the object.
They both work pretty much the same way, but with PDO you can use any backend easily (such as changing from MySQL to MSSQL) but if you write with sqli you're bound to a MySQL database.
it really isn't. a lot of pear libraries suffer from namespacing issues and bloat, also as the article mentions there's numerous ones which have lost all support, or depend on other libraries which have themselves lost support, leaving you with an unsupported product. There's also the fact that pear is designed to be installed per server, not per application, which only further complicates development(where do i find this function?) and can potentially lead to issues with other applications if there's two apps on the same server requiring two different versions of the same pear library. Finally there's no autoloader for pear. Composer solves all that. It's package management for each application, files are stored in the same place as everything else, and it comes with a built in autoloader. Simply knowing the namespace of a class is enough to find it and trace it's functions. comparing composer to pear is like comparing cake to a 5 year old pile of cow shit.
Bla4Free, Could you please post some sample code? My gut feeling is you are talking about errors and not exceptions--two different balls of wax. If you are talking about fatal errors, the easiest way to fix it is to hire a contractor ;) 
Completely off-topic, but [deleted] just deleted his account just because he posted some bad syntax or something silly like that, right? His whole account? for $thing = new something() ???
.. well good. PEAR was always shitty. Composer is nice and well built. It should be considered as essential to development as git/svn are.
Unfortunately, we're not using MVC. It's more of a MV. I plan on changing that next year.
What code should I post? Right now, I only have a few exceptions for things I would consider exceptional. * Failed queries * Required variables in a model * Invalid method/property in __get() and __set() I don't know if I'm doing it right or not, but I felt like those were the best places to throw exceptions since many things in the application could depend on these values.
I think the user only deleted the comment
Ok.. I'm going to make two responses. One for OP, one for the community. **OP** What you're trying to do is causing a problem because the include is in the class, so there are scoping issues. Basically... you're doing it wrong. You should never use an include in a class function. That's not what classes and objects are for. You should always do any including you need to do in the global scope - outside the objects. A class function should either do a calculation or return data. Setting up the structure of your page is **not** part of the job of any object, it's the job of your page. I highly recommend looking into [autoloading](http://php.net/manual/en/function.spl-autoload-register.php). You can set it up so that it knows how to automatically load the classes that are needed, but only as they're needed. This greatly simplifies the need to include stuff. &lt;?php include 'autoload.php'; $thing = new Something; if($whatevercondition){ $thing-&gt;setVariable('Hello'); } This is vastly easier to use than a complex web of interacting includes. There may be things about the structure of your site that mean this advice needs to be slightly different, but the short answer is... yeah, you're doing it wrong. This may seem like an academic thing, but best-practises and correct use of OOP are there to prevent errors like this. **OTHER RESPONDERS** I was actually angry when I saw the responses, but I've decided to be polite instead. What we have here is something termed an *X/Y Problem*. This is where someone asks "How do I Y?" when really they should be asking "How do I solve my X problem?" "I'm having a great deal of trouble spreading butter on my bread with a shoe. A loafer seemed the logical choice, but I think I need something with a flatter sole." The useful response isn't to provide better techniques for buttering with a shoe, or to suggest toasting to make the bread harder. The useful response is to suggest a butter knife. As people with experience in the language we should be using that experience to encourage and support new programmers. Not by answering questions as literally as possible, but by seeing to the core of their problems and finding them a path that helps them learn the right approach and the reasons for them. The people who responded to this question before me and the people who upvoted those responses greatly disappoint me.
This is not a very good way to do this. For a whole host of reasons. First of all, mysql_query and its brethren are deprecated. You really shouldn't be using it anymore. Use mysqli at least, or ideally PDO. It's no harder and better and more secure. I can give you examples if you like. Secondly, you want to limit changing to and from PHP and simplify your code drawing the HTML as much as possible. Oh, the basic issue is that you've done the rows wrong. You're generating a table, but you a) haven't got the start row tag, and b) have the elements all in one row. Basically, this isn't a PHP issue. It's a basic HTML issue. You probably actually want to do something like follows: while($row = mysql_fetch_array($rs)) { ?&gt; &lt;tr&gt; &lt;td&gt; &lt;img src='&lt;?php echo $row['s_bildurl']?&gt;'width='80' height='150'&gt; &lt;/td&gt; &lt;td&gt; &lt;h3&gt;&lt;?php echo $row['s_name']?&gt;&lt;/h3&gt; &lt;p&gt;&lt;?php echo $row['s_beschreibung']?&gt;&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;?php } I can't say this is great code. Separation of concerns is non-existent, and the use of tables is potentially a problem. But at least it's an improvement.
Great post. Although I disagree with this statement: &gt;Your framework can connect the components, but it shouldn't fully depend on the components. It's okay for the framework to depend on your application components, in fact it's a must. It's your application components that shouldn't rely on the framework.
&gt; There's also the fact that pear is designed to be installed per server, not per application, Apples to oranges seems like the proper analogy.
This Pear with its registry containing absolute paths always gave me a hard time in the past. Needn't look moving to a different machine, it was already almost impossible on the same machine.
I'm glad people are starting to wake up and see that frameworks are not the silver bullet! If you're interested in this kind of programming check out a good resource here http://ikke.info/clean_code.html And also we have a discussion on the subject on IRC (freenode server) in #cleancode and #silex-php chat rooms.
An exception should be thrown when well, an exceptional event occurs, an event that you did not expect. Like a database connection error... Also, there are exceptions which you could recover from, like the user gave an invalid data on an API endpoint. What we do with 99% of exceptions is to log it, send an instant e-mail to administrators of the log and tell the user that an error occurred and try doing the action again (e.g. submit the form again, etc.)
And how would you persist your doctrine entities if you can't put any doctrine annotations in the model? Would putting all the doctrine annotations in .yml files instead help?
One of the problems I see with a lot of posts and articles like this is a lot of jargon being thrown around and not enough code. "business logic", "problem domain", and other empty phrases. There's a lot of talk about separating things -- over and over -- and moving things around in more convenient locations. That's great, but when does it stop? How much of your project do you really need to be able to swap out at a moment's notice? How many separate files with very little code will be enough for someone to consider it "the right way"? How many objects do you need talking to each other before someone considers it "sane"? A lot of people talk about MVC being a great way to build things, but there are many, many articles on the subject talking about how much it's "misunderstood". The same could be said of any other design pattern. If these design patterns are often misunderstood despite the extensive coverage and attention given to them, are they really such a great idea? Is it not true that there are multiple, quality ways to build a project? One central tenet to patterns is the idea of reusability. If you're not building a library, module, etc, then does *all* of your code need to be reusable? There are places where exclusive, coupled, implementation-focused code is unavoidable. What I see in the OP's article and others like it is an idea of where to put this code, and there's no real consensus on where it goes except the fuzzy concept of "somewhere clean". I'm very interested in clean code and good ideas, but the best teachers are examples. In this case, a full-scale application built with these ideas, littered with comments (or extensive articles) to explain design decisions, would be an incredible learning/teaching tool and perhaps get *real* discussion going by working with concrete code instead of abstract concepts. Dogma does not serve the programming community well, and won't serve to teach up-and-coming programmers the reasons behind certain patterns or practices. In the interest of the concreteness I mentioned, some specific questions/criticisms: &gt; Keep your controllers small and concise. Give them no logic, instead, reserve that for a domain layer of your application. Controllers should simply interpret the request, collect any provided data, and pass off the processing to some service, repository, and/or factory. Actions within the controller should contain very few lines; if they don't, you're doing it wrong. Okay, what's a domain layer? In a single, simple sentence, *what does it do*? What is a controller, and what does *it* do if it has no logic in it? Is code without logic valuable? &gt; [the Customer example code] How would this object get its name (how would you use setName)? Would it be created by other objects, or with "glue code"? What makes this design clean? ~~Further, how is the `CustomerRepositoryInterface` interface being used in the `CustomerRepository` class? The `getById` method is implemented, but don't classes have to `use` or `extend` an interface?~~ **EDIT: This was fixed.** Using interfaces instead of specific classes/objects is a good idea, for reasons covered in the article. But they don't seem to be used in the examples, nor does it explain things that should belong in an interface versus a regular class, or what the "domain logic" that orchestrates this mess looks like. Long story short, design can't be guided by vague tips and marketing-speak. It's a holistic thing that should be guided from the bottom up, with supporting logic and reasoning, so that the developer isn't just following advice, but demonstrable, practical design that's as close to a craft as one can get with code. If some method is "the right way" to do something, **prove it**.
Ya, I love composer... as much as I love bower and npm and bundle etc. My only problem with composer (and these other dep management tools) is that we often just search for what we want, find something close to what we want, and then trust it. It feels a bit dirty. Why wouldn't I trust x's random package of y? Or a random selection of Z, which has been packaged multiple time by random githuh users, who I know nothing about? The trust system is a bit weak.
I never really used PEAR; I had written a bash script for each of my apps which updated its requirements via svn, since laravel4 got me into composer I haven't looked back.
When you build your project you select libraries you trust. This flows down the chain, it's not perfect, but if you select a library you trust, then it's implied you trust their decisions on which libraries they trust. You shouldn't just trust anything you find on packagist (or github). But if the code has lots of eyes on it and recent/frequent commits then it's probably a safe bet. You still need to exercise some judgement though. Also, your criticism isn't really composer specific. If you trust a pear package you give the same leniency.
composer has a global option
You're right in that there's a lot of talk about this stuff, but not many examples. I think part of the problem is, for this kind of architecture to be an effective one to use, you have to solving a complex problem, so it's hard to show full examples. Wikipedia states one of the prerequisites for DDD is "The domain is not trivial". You could always try http://dddsample.sourceforge.net/, but I didn't find it that helpful. On the flip side, I recently saw someone describe that after coming through it all, they were glad there wasn't that much in the way of examples or code, in that he had to learn the hard way and was better for it: &gt; This forced me to struggle with and understand the core concepts themselves instead of adopting a cookie-cutter look alike from a bunch of sample code. - https://groups.google.com/forum/#!topic/clean-code-discussion/jqfEZscBWBc 
burn PEAR with fire
You could extend this to methods like TDD or Agiles. I hate how a good part of the examples of tests are about trivial things or some librarie / framework. Guess what? A majority of web coders are not creating frameworks but have to work on websites, and often with old legacy code. Now, I'd like to see an example of how to roll unit tests and iterative development in those cases.
I'm not sure you need to solve a complex problem (or have a non-trivial task) to show the value in an approach. Also consider that many problems seem simple when first examined, but become more complex as different features are considered. Take i18n for example, or an event/plugin system. The application itself may be simple, but tacking on plugin or i18n support isn't a trivial undertaking and may require refactoring if things aren't designed with that in mind from the beginning. A DDD example project could start out simple and, through use of the core concepts and ideas that were followed and explained at the beginning of the article or series, gain more features and be extended with the minimal effort that the approach promises. Showing this iterative process and proving the virtues of the approach, I think, is the right way to convince people to adopt an approach. This is especially true for developers that are trying to wrap their heads around making their applications customizable and extensible through plugins/extensions, i18n/l10n, etc. It's a perfect test case for extension that would normally require a lot of reworking. I'd be personally interested in it, actually. There's certainly value in discovering what works for you, but imo it's hard to take a stance seriously that encourages this discovery but simultaneously champions a Right Way. If discovery is more important, then there can't be a Right Way. If there's a Right Way, then self-discovery is more stylistic than structural. The core concepts should be better explained if it's believed to be more helpful than example code. As we all know, code examples only serve to point, not to replace. But when their interactions can be observed and proven, the core concepts may be better explained and -- perhaps more importantly to modern practices -- *testable*. Learning "the hard way" I think creates lots of code casualties and can make building confidence more difficult for some developers, as they find themselves throwing away a lot of work because they didn't learn the right things, or followed a dead-end path that could've been avoided had they been taught well.
Agreed. TDD and Agile are known for being tight, easily adoptable, and highly iterative, but I've seen very little literature on migrating a project from one practice to TDD or Agile without flat-out rewriting. That's not always a practical venue, and I'm sure someone smart out there has it figured out. Unit testing in particular is something I can't seem to find good advice on. I'd love to try it out and maybe adopt it, but until/unless I can be convinced that it's not writing 50-100% more code, I'll stick to the regular "good enough" testing I do. A red flag for me with unit testing is that it typically requires an additional library or plugin or program just to test your code. Not what I'd call productive or helpful.
This is what I recently did on an OS project, for this very reason. My models are now just dumb data containers with a little bit of business logic. The mapping files (XML in my case) lie in the realm of the framework code, whereas my models are in my application realm.
Had a friendly 'discussion' with a PEAR maintainer some years ago (2002? 2003?) about PEAR's reliance on system-wide installation. It bothered me then, much like almost any linux package just defaults to needing to be installed in /usr/bin/ (and so on), and still bothers me now, but I just use composer vs any PEAR infrastructure now. Side - almost any linux apps installed via yum/apt/etc all end up needing sudo to be installed. Why is this? There's a commingling of system-wide dependencies (glibc versions and such) with what should be user-level packages. Rarely does any packaging system try to install stuff in $HOME/bin - it's nearly always /usr/bin/ or /usr/local/bin or what have you. PEAR copied this philosophy, and one of the defenses I got for this is 'it reduces duplication - you wouldn't want 30 copies of libraries floating around, then have to upgrade them all later'. Well... yes, I would. This is what composer gets right. I can decide which specific versions of X I want. The prevailing wisdom seems to be "dev-master" ,which I think might be a mistake to be inculcating in the evolving standard practices, but that's still in your control for the most part (assuming the packager versions things). Every single PHP developer is not running on machines where they have root privileges to install things systemwide, and even when they do, versioning conflicts can be problematic. Composer addresses this issue very well, and it was something overlooked (or ignored) by the PEAR philosophy from day 1. FWIR, you could work around these issues in PEAR, but it wasn't the default behavior (hence having to 'work around' things). Perhaps another way of looking at this is composer addresses the lower-common-denominator - a developer with a project and specific needs, vs a developer with a project, package needs and root privileges.
You may want to take a look at [Plates](http://platesphp.com), it sounds like what you're after. Plates is a library I just put out that's part of [The League of Extraordinary Packages](http://thephpleague.com/).
Watch the videos of Uncle Bob over at http://cleancoders.com/#videos especially episode 7, 14 and 18. Read up on SOLID principles, it helps you to structure your code better, and improve the overall design of it. And if you want solutions to specific problems check out this google group: https://groups.google.com/forum/#!forum/clean-code-discussion
I can't watch the videos without paying for them.
That post was a bit meta.
About TDD. Did you find yourself that you needed to change something in your code base (maybe add a new feature or change an existing one) and you found that something totally unrelated (at first) broke? TDD solves this problem. &gt; A red flag for me with unit testing is that it typically requires an additional library or plugin or program just to test your code. Not what I'd call productive or helpful. You can run tests without using a testing framework (e.g. PHPUnit, PHPSpec, Behat, etc.). Test is just PHP code. It sure helps to use one though. And if you find yourself you can't easily test parts of your code, it's usually because it's too tightly coupled to some other code. The benefits of TDD is far more than the cons of it. Yes, it produces more code, but it pays off in the long run.
I haven't actually used Plates (I use Laravel) but it looks like Jonathan here has done a solid job of it. This league interests me too. I'll keep an eye out for progress on it. Keep up the good work!
You can use Zend\View as a standalone component like that: $renderer = new PhpRenderer; $resolver = new Resolver\AggregateResolver(); $stack = new Resolver\TemplatePathStack(array( 'script_paths' =&gt; array( __DIR__ . '/view' ) )); $resolver-&gt;attach($stack); $renderer-&gt;setResolver($resolver); $model1 = new ViewModel; $model1-&gt;setTemplate('template1'); $model1-&gt;setVariable('key', 'value'); echo $renderer-&gt;render($model1);
I'm an idiot for at least two reasons: 1) I wrote this really fast late at night and 2) I tried to keep it short, while still being informative. Because of this, I skipped a lot of definitions and assumed the reader knew what some things were, like a domain layer. Maybe I should have wrote about that first and linked off to it. I fixed the CustomerRepository not implementing CustomerRepositoryInterface, thanks for catching that. I would love to put together an example application following some of these principals. Unfortunately, with the holidays, I'm out of town and probably won't be able to start it until Sunday, and then who knows how long it will take. But I'll work on that and consider it a case study further expanding this post. And I'll make sure I try to explain all the bits and pieces as well as possible. I think this would be valuable. 
So basically, to put it in a really simple way, you are overlooking something. What you are expecting is that the method you are calling involves an include, so you are expecting page 2 to sort of continue off from where you called `$thing-&gt;incpage()` where you can access `$thing`. But what you overlooked is that it matters where `include` is called, and what's actually happening is your page 2 PHP is sort of continuing off of the `setvariable` method (it's as if you've added the contents of page 2 after the `include 'page 2';` statement, but before the closing brace (`}`). Note that whatever you are doing - unless your `something` class is a View class (it's an MVC term) and you're including a php-html template - is bad practice and you probably should do it some other way. But your code is only example code so I don't know what you are trying to do and cannot make a recommendation.
This is actually an HTML question of yours. Your table is 3 x 1, which would mean all cells would be next to each other. Have a look at this: http://jsfiddle.net/c6agj/3/
intval returns 0 on empty and strval returns "" (empty string) per the manual {not sure why the downvote on my original post but it is what it is}
...then don't use those third party packages?
Hmm.... that's a pretty long page. I'll give Yii more of a look when it hits Yii 2, but until it's using composer it's just not a modern PHP framework. That said, release of Yii 2 is incredibly vague. Considering there are such good frameworks available and working now, I think Yii is lost in a limbo.
So would you consider a failed query to be an exception? Our application is a financial analysis tool. If a query for one calculation were to fail, every other calculation that depended on that calculation would fail as well. This is why I considered a failed query an exception. I validate/sanitize all user input so I don't throw exceptions for that--those are just errors per se.
&gt; The prevailing wisdom seems to be "dev-master" I think that's going out of style. It was popular when composer was in its early stages, but I think more package maintainers are putting in more of an effort to do proper versioning of their code. At least, that's what I've noticed in the packages I use, anyway. &gt; 'it reduces duplication - you wouldn't want 30 copies of libraries floating around, then have to upgrade them all later'. Well... yes, I would. I agree. Especially if you have multiple projects using the same libraries (like a framework). You wouldn't want to have to upgrade that library for all of your projects at once because then you'd have to test all of them at once.
Then there's not a whole lot of value in pointing it out, is there?
I don't expect the query to fail, but there have been instances where one or two has failed for some reason which I'm now starting to find out. That is why I would consider these exceptions--I don't expect them to fail. However, I'm still unsure what is meant by "flow control." Can you explain that? I was reading [this](http://blog.seanja.com/2010/04/exceptions-are-not-for-flow-control/) and I would say this is how I'm currently implementing exceptions. Like I said, I currently have just a few exceptions for things like a failed connection to the database, failed query, invalid parameters when loading/using a model, etc.
He has a point people. A resource is great to point to but nobody is going to sign up just for a couple videos someone on the Internets said so. The best way is to point to accessible information. 
Thanks for the reply, things are a little clearer now, but I'm still not 100% confident. Could you provide a code example?
Modeling Nicoon's example, first with dependency injection, then by hard coding the mailer instance: // Construct this injecting Pop3Mailer (by a container for example) class A { protected $mailer; public function __construct(MailerInterface $mailer) { $this-&gt;mailer = $mailer; } } // vs. class A { protected $mailer; public function __construct() { $this-&gt;mailer = new Pop3Mailer(); } }
 interface EmailConnection { public function getEmails(); } class Pop3Connection implements EmailConnection { .... public function getEmails() { //retrieve emails via pop3 protocol } } class ImapConnection implements EmailConnection { .... public function getEmails() { //retrieve emails via imap protocol } } class MailClient { protected $connection; .... public function setEmailConnection(EmailConnection $connection) { $this-&gt;connection = $connection; } public function getEmailConnection() { return $this-&gt;connection; } public function someFunctionDoingSomethingWithTheEmails () { ... $emails = $this-&gt;getEmailConnection()-&gt;getEmails(); ... } .... } POP3: $client = new MailClient(...); $client-&gt;setEmailConnection(new Pop3Connection(...)); IMAP: $client = new MailClient(...); $client-&gt;setEmailConnection(new ImapConnection(...)); 
Yeah, I wasn't as critical here as I would be with a professional. I draw a distinct line between someone who claims to be an expert, and someone having trouble with their homework.
IoC is quite much how it reads - inversion of control. You can do this inversion using dependency injection for example, as it is commonly done. As Nicoon mentioned, service locator is ofter considered an anti-pattern, but anyway if is as well a form of IoC
If DI is a solution to IoC, then it is worth mentionning another solution to get a better grasp of the concept.
Thanks a lot. You were right, that was exactly what I was looking for
Could you elaborate a bit more please? I have difficulty understanding how the framework can depend on the applications components, since it (framework) don't know about them (application).
Also, please use curly braces even for single statements. Edit: to people that are against this, what about xdebugging those lines. IIRC xdebug skips them. 
ELI5: A very easy to digest discussion of dependency inversion (Inversion of Control) can be found in the [Clean Coders Episode 13](http://cleancoders.com/codecast/clean-code-episode-13/show) and the book that the series is based on, [Clean Code: A Handbook of Agile Software Craftsmanship](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882). Inversion of Control is the concept of binding objects together at runtime, rather than statically at compile time. So rather than having objects reference each other in code, such as implementations like the [CakePHP View Object](https://github.com/cakephp/cakephp/blob/master/lib/Cake/View/View.php#L315-343), you can pass the object references into other classes for them to use like in the [Laravel View Object](https://github.com/laravel/framework/blob/master/src/Illuminate/View/Environment.php#L88-103). This passing around of objects lets you write code in terms of abstractions and not having to implement the details directly into classes, you can easily swap implementations without having to change any code (and just change the objects that are passed around). This is what makes Laravel view object noticeably cleaner than the CakePHP view object is that the code is written with the concepts of abstraction. All of the "mess" is moved into different classes to create [Separation of Concerns](http://en.wikipedia.org/wiki/Separation_of_concerns). A common implementation that is often viewed as an anti-pattern is a [Service Locator](http://en.wikipedia.org/wiki/Service_locator_pattern). This implementation does have the advantages of inversion of control by keeping the object references from being coupled to the objects themselves, but it couples the implementation of the dependency container directly to the objects, rather than the individual components that are required. The classes become aware of the container, and becomes not only harder to read for developers that have no experience with the system, but also creates a mess for when you want your objects to be reusable. The faults are outlined on the wiki page. As an example, [PHPixie View Objects](https://github.com/dracony/PHPixie-Core/blob/master/classes/PHPixie/View.php#L47-67) are implemented this way. The Pixie object being passed around is a container, where the view objects asks the Pixie object where a file is. This is flexible in theory, but becomes limited when you want to pass around multiple view objects and say have a different way of resolving a file for each view object. PHP passes objects around via reference, so if one implementation changes, they all must. With the context of Laravel, the IoC implementation is nothing more than a Dependency Injection Container, like [Pimple](http://pimple.sensiolabs.org).
I strongly recommend to NOT use static access to the container. Your database doesn't need to be singleton especially if you are getting it through container. There is also tons of good IoC containers available you don't need to invent wheel again. Look for Pimple for example and how Silex is using it. https://github.com/fabpot/Silex/blob/master/src/Silex/Application.php There is also many containers with more advanced features. Symfony's for example can read it's configuration from a YAML file. My personal favorite is Illuminate\Container although I'm not big fan of Laravel.
I think it has value, visit the site, check out the descriptions, check out the preview videos and if you like what you see buy the full video... It maybe doesn't have value for you, but that doesn't mean it doesn't have value for others...
flow control = how the request gets from the user to your server into your application and how to direct it inside your app. "Don't use exceptions for flow control" means that don't deliberately throw an exception just to direct the flow to another part of your app. For example many devs. throw exceptions when validating user data. Like if an invalid email is given throw an InvalidEmailException or something like that. In this case this is not an exception, because you can expect the user to enter an invalid email. That's a validation error. In your case the query failing is most likely an exception, how you handle that exception and whether you can recover from that exception is entirely based on your application. For example if the query fails throw an exception and in the catch block try to run the query again to see if it is running. If it is you can continue the flow of execution, try maybe 3 times to run the query, if it fails every time it would mean that it's a fatal exception and you cannot recover from it. You log it for the admins and show an appropriate message to the user. This is just one way of handling this kind of exception. This entirely depends on the application, the severity of the exception and of course on the feature specs.
Yes... if it's your first day.
Signed up just to say this: I really despise when people advise others to "not reinvent the wheel". To be a good developer, we need to understand how code works – just like the library you linked to above. The best way to do this is practice. This provides a good read in my opinion: http://oscargodson.com/posts/dont-reinvent-the-wheel.html I realise my comment is off-topic, I just had to get this off my chest.
I hope so (re dev-master). I've hit a number of issues collaborating with other people - many docs for libraries just show the composer stuff for 'dev-master' and people copy/paste that. :/
This is great - a very sane templating library, making use of the fact that PHP is the template language.
&gt;When writing a web app, make sure not to leave a newline between any closing ?&gt; tag and the html &lt;!doctype&gt; tag. In correct HTML, the &lt;!doctype&gt; tag must be the first thing in a file—any spaces or newlines before it will invalidate the tag! Last I checked, php does not output the first newline following a closing ?&gt; tag, making this technically unnecessary. It's good to be cognizant of other unneeded whitespace, though.
Why do you consider it to be an anti-pattern?
"Collection of best practices I read about on Stackoverflow, here is brief description of one and 4 lines of code, have fun!' 
Really you should all the time. If you don't use curly braces all the time, then you (or another developer who isn't paying attention) adding another line that needs to be in the if statement, and it not working correctly. It also makes it easier to read at a quick glance, since you can see easily that something is a code block and not just a badly indented line. 
Bad indenting ruins the quick visual hint of curly brace code blocks anyway - if things are indented all over the shop, braces don't help at all. Be religious with the indents, that's all one needs.
Quite nice formatting you have here, very enjoyable to read :) Some suggestions I can think of: - PHP tags: if the file ends with PHP, don't even close the PHP tag, it's useless and can prevent those whitespaces mistakes ; - put a word about PSR-0 and PSR-4 in the autoloading section? - caching OPCode: APC is for "old" PHP versions. PHP 5.5 now comes bundled with OPCache. Nice job!
But the problem is PHP doesn't define code blocks by indentation. If I properly indent my code, this is still the wrong logic: if($this = true) $a++; $object-&gt;setA($a); $object-&gt;save(); if($object-&gt;getA() == 3) $user-&gt;updateObject($object); $user-&gt;sendEmail(); Both of those are indented properly, but the lack of curly braces means that the logic is completely flawed. You get into these situations because developers forget that the curly braces aren't there, but the code still compiles correctly. Overall it's better to put in the {}'s than leave them out since there are more changes of bad code because they are never put in compared to if they are just there in the first place.
They clearly aren't indented properly if we're still talking about having curly braces around single-line if statements now, are they? If these were single-line ifs then lines 3, 4 and 8 need to drop back a tab. And if they're *not* single-line ifs then you're preaching to the choir because *of course* you need curlies around multiple line blocks. wat?
Well no, they aren't technically indented properly because they don't match up to the compiled code. But (which this is my point) a dev might not notice that right away when refactoring or looking at the code. The idea is that code changes over time. So we at some point refactored the increment and set into the if statement, which caused a logic error in that we're now always setting A (which might be intensive) and we're always saving the object (which might be nothing more than a simple SQL statement, but saving might be intensive as well). For the second one, maybe we need to send an e-mail after updating the user. So the dev just threw the sendEmail() call in there after the updateObject call. Now though, the code will send an e-mail even if the `getA()` method doesn't return 3. It's a subtle error, and will run without any sort of runtime error. Now we're left with the code above. Did the developer mean for each of these code blocks to be inclusive, or is it because they indented wrong? It's not clear at all, so you either need to track down the developer or figure it out yourself. If the curly braces were there you wouldn't have this problem. Ultimately it's because the developer was not paying attention, but when we write code we should take steps to make it obvious as to what we're doing. I lump single-line if statements in with things like obtuse variable names (`$a`, `$UO`, `$gokwtvai`), abbreviated method/function names (`updPA()`, `sndNot()`), and things like that. I think it makes maintenance harder because the syntax lends itself to developers making mistakes more often or by wasting developer's time to figure out what is actually going on.
In the nettuts link you provided, this was in one of the comments: try { $user = $auth-&gt;login($credentials); } catch (InvalidUsernameException $e) { // Redirect to login page with error message // Could even use $e-&gt;getMessage() } catch (InvalidPasswordException $e) { // If this is the 5th attempt, redirect to reset password page // Otherwise, redirect to login page with error message } catch (AccountLockedException $e) { // Redirect to special error screen explaining why they aren't allowed } catch (Exception $e) { // Fallback for everything else // Log that we had an unexpected exception // Redirect to error page or something } Would this be an example of using exceptions for flow control? To me, if the user is unable to log in because of an incorrect password or locked account, it would just be an error and not an exception. This is what you're talking about, right? Thanks!
Funny, I just wrote about this the other day: &gt; tl;dr: Go ahead and use Service Locator, but make sure each Locator contains only one type of object. This condition of restraint will keep a single locator from becoming a menace. http://paul-m-jones.com/archives/4792 
No. The emphasis on curly braces comes from the fact that, by using a single line statement, you can accidentally move things in and out of the if statement without realizing it. The alternative syntax you prefer also protects against that. if ($martians) fireLasers(); could accidentally become: if ($martians) deployShields(); fireLasers(); The problem, in that case, is that you're constantly lasers.
maybe the author never intended it to be read on mobile? Maybe you should [contact him](https://alexcabal.com/contact/)
Even on my laptop the left navigation pane does not show all its contents at the bottom.
&gt;PHP 5.3.10-1ubuntu3.6 :( Why are you using an ancient version of PHP?
If people release the library with "dev-master" as the suggested requirement and dont have any other releases then definitely do not use that library.
for better or worse, that's tended to be more than a handful i've come across and/or had recommended earlier this year (mid summerish).
Understanding IOC is easy if you understand the point of using it. It is used to make a classes dependencies 'pluggable' instead of making the connections to them built in. Imagine an electronic circuit which uses many other electronic circuits. You can manage this dependency in two ways. 1. You can solder all these circuits into our circuit. 2. You can make input sockets in our circuit where the other circuits can be plugged in. By using the second method, you can easily replace any of the dependent circuit with another one (may be one with a better internal implementation), like you can put a faster sd card into a slot in a camera, to get faster shooting rate. This is also good for testing. In the case of our circuit example, you can easily isolate our circuit by replacing the dependencies by unplugging them and plugging in mock circuits that is wired to generate guaranteed responses for the inputs expected in the context of the test. So what every erroneous functionality can be traced back to our original circuit, because our mock circuits are guaranteed to maintain the expected input/ output relationship. Factories: It is hard to find an hardware analogy for this but I ll try. Imagine that our circuits uses an arbitrary instances of another circuit. Means, we wont be able know how many of these will be needed before hand, so we wont be able to provide sockets for accepting them because we wouldn't know how many sockets we might have to provide. This cannot be easily manged in hardware. But in case of software, we can make a factory object, that can create instances of the dependent object and returns it to the original object. Instead of plugging in th object itself, we can plug in the factory object. Our object can use the factory to create actual instances of the dependent object. If we ever have to use a different object, we can just replace the factory object with another factory object that return our new object. So when using IOC, keep in mind what its original purpose is. Make sure what you are doing can provide the above benefits. After you do this a couple of time, you may understand it more clearly.
It's the version provided with the latest LTS release of many a Linux distros, specifically Ubuntu 12.04.
When I try to login with Google, it tries to authorize with full access to my contacts. If that is an error, it's a fairly nasty one. If it isn't in error, it's a nasty move.
I hate always being lasers :(
My man :)
Its a way of organizing things; I follow the PSR-0 (as per https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md) standard of namespaces where each namespace must have a top level namespace (vendor name) and the following structure \&lt;Vendor Name&gt;\(&lt;Namespace&gt;\)*&lt;Class Name&gt; Extreme deep hierarchy can be a mistake in that it tends to over-complicate things, especially when used within simple applications.
Stackoverflow's a good source of info. What's so bad about compiling several common hints in to one location to make finding them more easy?
Why would PHP Best Practices guide be based on some random version of some random distribution of some random OS?
Make it a book -&gt; leanpub.com I would buy it.
Well... the article was titled "php best practices" not "php common denominator practices" 
Make sure app/cache and app/log are both writable 
You could use the Symfony filesystem component http://symfony.com/doc/current/components/filesystem.html Pretty powerful! 
Some things I (personally) don't agree with. PHP version: Should be 5.4 minimum. 5.3 (don't remember what minor version exactly) has an issue with bcrypt. Storing password: [password_compat](https://github.com/ircmaxell/password_compat) password hashing has been implemented in newer versions and this is the polyfill for older version. it also has a password rehash feature which is nice. Autoloading: use a PHP-FIG autoloader... right now it's PSR-0 but PSR-4 is being proposed and probably going to be accepted soon.. Opcode: use Opcache, included and enabled by default with 5.5. Opcache is better and faster than APC. Serving PHP: Apache is fine but maybe add option and config for nginx. Mailer: [Swiftmailer](http://swiftmailer.org/). (the example is wrong. There's a section about autoloading but, for this one, it does a require_once..). PHPmailer made sense in the PEAR days but.. just glancing at their github, they're still named class.phpmailer.php... *shudder* Dates: Timezones are a bitch. I prefer [Carbon](https://github.com/briannesbitt/Carbon). edit: added reasons. I guess just adding links like that without explanation didnt make sense. 
I love IIRC Kohana's convention - ability to omit the braces for single, terminating statements, but keep them on same line: if ($condition) break; if (!$parameter) throw new Exception('yada yada'); perfectly readable, no problems with adding more conditions and not seeing brace omittion as it's a single line.
I'm not sure if this is what you mean, but [Adminer](http://www.adminer.org/) is a very lightweight version of phpMyAdmin. And it's only 1 file!
The composer file is only a few lines shorter than symfony's. I don't see how somebody can make his/her "own lightweight framework" only by striping components that he/she doesn't use from "another heavyweight framework".
[These](https://github.com/ziadoz/awesome-php#files) are all great libraries for filesystem management. Take a look...
I didn't understood what he wants like you did. I think that "File Manager" refers to the whole thing, including the interface and UX, not just a PHP helper class.
I downvoted exactly because of this. The web is full of old and very unsafe code for very old systems. Be ahead of time when writing these things and - may - mention the old stuff.
&gt; While the shorter ones might be more convenient to type, the only one that's guaranteed to work on all PHP servers is &lt;?php ?&gt;. Not true: as of 5.4, `&lt;?= ?&gt;` is also guaranteed to be available.
I did not made this website, I'm just sharing what I found. Although I agree with you many developers I know, including me, are stuck on default PHP of ubuntu 12.04 as it is a LTS release. Hell, sometimes they even forget to do a upgrade and I have to code for PHP version lower than 5.3.3 This is probably the reason he chose this version.
You could try to port the one from WordPress. It's pretty neat. 
I did wonder that, actually. I saw a good UI recently on HackerNews, I'll try and find it
UI point taken. Could you elaborate on the leaking encapsulation, global state and misunderstanding MVC points? Please bare in mind that this is my first on-going PHP project that only I maintain, *polite* criticism more than welcome.
Fair point, maybe it's not so lightweight, I recently added a bunch of stuff, I'll not refer to it as that in future.
Haha, no. WordPress is too tightly bound together to be able to pull out *anything* of any use.
Well I've seen people have used WordPress as a framework, rather than a full CMS. 
That was my assumption too. I was going to suggest looking at "relay". It was a pretty neat file manager released quite a few years ago, that we have used on many client sites. It had a tiny perl script to handle the receipt of the files with a progress bar. I fixed a number of security bugs in my version, integrated it with many CMSs, and clients loved it. I haven't see it around for years (except our current installed versions) but noticed it has been uploaded to Google Code: http://code.google.com/p/relay/ I fixed it so it used inodes rather than timestamps to uniquely identify files, and fixed a few injection security bugs. I can put the code on github if it is any use.
Am I missing how to actually use it? Are there docs I'm not seeing?
Symfony 2's Sonata Admin bundle works well, but is not the easiest thing in the world to set up if you're not already aquatinted with Symfony 2. http://sonata-project.org/bundles/admin/master/doc/index.html
I'd would suggest eZ Publish http://share.ez.no
I sort of can understand not wanting to update from 5.3 to 5.4 or 5.5 for compatibility reasons but not updating to the latest version of a major release is just dangerous from security point of view. It would make some sense if it was an old forgotten website, but if you say that you need to code new stuff for those specific versions... well it's just odd. 
You can pull off anything with Wordpress. The problem is that you have to do it in a shitty way, and dive deep into the depths of code that maintains compatibility with PHP 4.
Call them out, post an issue or send a PR. This is an issue that needs to be fixed - even if it is decreasing the days. The community has a new tool, but they need to learn best practices. Other languages are almost a decade ahead in knowing how to release packages for other folks to consume so PHP devs need help getting there.
when I see it again I will.
here's something more like AjaxCRUD, another php datagrid (that i wrote). it only works with MySQL. http://lazymofo.wdschools.com/ 
A nice introduction to the topic and a good addition to the site. For myself the best way to learn dependency injection was to start writing unit tests. You quickly see how tightly coupled code makes testing next to impossible and how using dependency injection comes to the rescue.
This is a really good intro to the topic, but the "containers" section is lacking. I find that DI is pretty easy to grasp, but solving for the dependencies is the harder problem (where DIC and SL get so mixed up). That problem should have more than a paragraph of explanation (and I sure can't 100% explain it...)
I was talking about pulling something *out* of WordPress, not pulling *off* a feat. WordPress is PHP 5.2 if you want compatibility with all installs, otherwise you can go as high as you like. I use PHP 5.4 and composer with WordPress plugins, and that works fine. 
If you're looking to learn PHP and even framework development, a better learning method might be to identify and develop a module for an existing framework. Once you find all the issues and good things that came out of the choices made in developing a well regarded framework or two, you can start to identify the areas that a new framework might work well in. Or at least be able to choose the best suited for a project.
Because it's half ass, you can serve more purpose to actually linking to those articles that would have a more detailed discussion and insight.
Apologies, what I should have said is that your framework specific code will rely on your domain code (custom business logic), but not the other way around :)
Yes Im new to digital ocean and it worked on my new account.
FYI this doesn't work with current users I contacted support and got this: &gt; Thanks for writing in to claim this promo code! &gt;For existing users we've decided to extend the offer in such a way; &gt;a) we charge your credit card $25, if the charge is successful, we match that with a $25 credit, for a total of $50. &gt;b) you make a deposit of $25 on your PayPal payments page &gt;If you chose option (a) please respond to this ticket with: &gt;"I authorize you to charge my card on file $25 for the black friday promo!" &gt;If the charge is successful we will credit you the additional $25 and respond to you to confirm. &gt;If you chose option (b) simply make your PayPal deposit and then let us know in this ticket, we will review and credit you the $25 and send you a confirmation. Still a pretty good deal
- Referral link... check - Posting a duplicate link... check - Posting something that's already been posted AT LEAST THREE times today to either /r/php or /r/webdev ... check - 0 day shill account... check That's a downvote Achievement Unlocked: NewSpammer - make your service more spammy than NewRelic
Throw in a link to that post for further reading? PR it?
This is how I've ended up doing it, anything that requires a 2nd line would get braces.
Please don't make your container static. Also, don't obligate yourself to use Closure's to set a value in a container.
Ah, I misread that. Yeah I can't imagine there being a worthwhile way of using that media manager outside of Wordpress. Also I mean that the code behind Wordpress is very old-school, where it has support for features and plugins back to PHP 4. There is just a lot of legacy code in there that is very frustrating to work with.
One of the best days of my life was when I stopped using tinymce and switched to redactor. Tinymce was good in the good old xhtml days, but now it's a bloated pile of crap.
Post the code so we can help.
I don't know what you were expecting: &lt;?php include('vars.php');?&gt; &lt;?php include ('headers/PageLinkHeader.php'); ?&gt; &lt;?php include ('headers/ccmadminheader.php');?&gt; &lt;?php include ('headers/PageBody.php');?&gt; The vars.php are files that exist in different folders to communicate to the following files what folder it is in.
You're giving a relative filename to include(). When you do this, PHP tries several places to find the file. It could be including a version of the file elsewhere (especially if you have vars.php in different places as you said). include() tries looking in the include_path first, which is part of your PHP config. Failing that, it tries looking relative to the calling script's directory. Failing that, it tries looking relative to the current working directory (usually the directory of the starting PHP file, but this can be changed in a script using chdir()). It's also possible that include() isn't finding vars.php. If this happens, a warning is emitted and the script continues. This could be creating confusion if your environment isn't configured to report warnings. You may want to use require() instead of include(). If you're still having problems, post the contents of vars.php.
echo out the result of get_included_files() somewhere. This should show you what order things are actually included in.
What's the global option to ban relative ..\.. paths.
truth. sql server with maintenance.sql and a decent install can scale-up with the dba being anyone, in no time. SSMS owns everything else as far as interface. and noobs can use lightswitch to create UI apps in minutes. point at well designed database, move fields around, publish (to iis). Oracle has a better RAD tool than lightswitch, but the UI -management studio of sql server just lays everything to waste. Then SSRS and SSAS and SSIS round out the entire game.
It's already in there
Nah, it's not very frustrating to work with. It is *infuriating* to work with ;-) It is so incredibly slow moving. I feel like the PHP ecosystem is leaping ahead at an ever-increasing rate of speed. WordPress crawls along, maintaining its backward compatibility. While it has a massive user base that it supports, this approach will work very well for it. When another platform that offers a similar marketplace catches up with it (in terms of expandability, numbers of users, simplicity of use including installation) then it will be in trouble. I can see WP going on for some time yet, but there reaching a crunch point where its users will be jumping ship en-mass almost overnight. But I digress. Sorry OP.
What's the advantage of this approach over just passing in the database adapter class as the dependency? The disadvantage seems to be if you want to unit test the database class you might need to mock both the adapter and the service locator, rather than just the adapter.
The only issue I have with this is that while it explains the implementation and the methodology well, I don't think it does a particularly good job of explaining the **motive**. While it briefly mentions testing fairly late in the discussion, but early on it talks about coupled dependencies, etc, potentially leaving many newer programmers or even veterans going "So?"
PR it.
Meh, I've got my own writing to do. Why would I do yours? :P
As a general rule, I let PHP do complex math, but let MySQL do anything up to that. MySQL can do a lot of things PHP can, but PHP can be much more efficient for the more complicated stuff.
&gt; Oh and another question if you don't mind - if I store a field as datetime, would it be faster if I store the day,month,year,week_of_year, and quarter as 5 separate integer columns (if I went the mysql route) for my groupby clause, or is casting the datetime just as fast? I'm not an expert on this by any means, so someone else might feel free to correct me. But my initial thought is that datetime would be faster... That is, to store the data in 5 separate columns, you're performing 5 separate operations for each row you pull from the database -- plus a 6th operation to combine them, and then a 7th operation to format it for display. Datetime, on the other hand, would be a single operation to pull, and a 2nd operation to format. But again, that's just my assumption. I could be wrong.
I'd use php to deal with the logic of the question being asked.. to generate the fancy mysql query. I personally pefer having mysql do as much work as possible.. but that usually involves using php to get clever on how it constructs the query. Then when I get my result back I generally do very little with the results. I tend to think of it as simply asking mysql the right question and I'll get the answer I wanted. If you are not good with sql queries asking the right question may be very difficult, and most people would just fall back on using php to do the processing. I guess the answer here has to do with how much time you want to take yourself. There is no right way for this question as it is still quite simple. If you had thousands of rows I would instantly suggest better queries over php... but with 300 you bottle neck will likely be network overhead on transferring the results.. which will be very small.
Because you'll get more props on Twitter. We both know you need the followers. 
DI? Pffft. I call it Object Requirement Assignment Layer. ORAL for short. Nothing like a little ORAL to satisfy your injection requirements.
You mean Head First? Apparently they have an HTML&amp;CSS book and another PHP&amp;MySQL book, might be interesting, though that's two books already.
The book you want does not exist. You will need an amalgamation of resources.
YUP! Head Start. Sorry about that. You go through the books very fast, it's a lot of repetitive information/exercises. 
Why do you need to know this? Have you asked your new employer / future professor / whatever for suggestions? 
For me it made more sense to first learn proper relational database design and some basic SQL. Then you can start interacting with the database using PHP. I'd recommend going ahead and learning how to connect and query the database using PDO and not deprecated mysql connect. At this point you can probably start building a basic site/project. I wouldn't worry too much about making it look nice to start with, you can come back and do that relatively easier later. You can use something like twitter bootstrap or one of the many CSS/style frameworks. 
An oldie, but a goodie: w3schools.com It goes step by step through HTML, CSS, Javascript, PHP, MySQL, etc. A good way to learn the basics in just a few days. Another one is tizag.com, same philosophy.
I was on-board with your post until your last sentence. If you want to learn (by learn I mean actually absorb and internalize what you're learning), the best way is by *doing*. That usually means making your own inferior solutions. However, when it comes to your actual implementation you should for sure use tried and tested 3rd party libraries where you're able and you should read the documentation and try to understand it the best you can so that it is not a black box.
I can tell you exactly where to start, hello world. Getting your first working PHP setup is a bit of a pain. So your goal should be to have a website (probably your desktop) setup where you can goto something like: http://127.0.0.1/test.php where test.php contains: &lt;?PHP echo "Hello there" ?&gt; and you will get Hello there on your browser. After that you are sailing as PHP is basically HTML with code mixed in. Your next challenge should be to install a data store of some sort MySQL being a good place to start and get your program to put data into the database and get data out. Sequel Pro is a free database tool that will allow you to directly edit your database so you can set up tables and fiddle quite easily. Once you have your browser activating your PHP, data going into your DB, data coming out of your DB and you know how to bold things then everything else after that is pretty straightforward. For a super advanced class you could set up enough HTML that you can get some javascript doing something. Your background in C like languages will mostly serve you well in PHP and Javascript. HTML and CSS are going to be weird but not very hard until you are pushing up against the limits of what they can do. 
W3fools ... Look it up. Please use MDN instead. You'll thank yourself later.
You mentioned rails, so I have to recommend laravel for a php framework. Front-end is a different beast, and something you might struggle with the most, coming from a programming perspective. There isn't a mature solution to match rails "asset pipeline" yet so front-end is best approached separately. Have a look at yeoman (grunt, bower) for front-end structure. Learning those opinionated frameworks/approaches gives a good insight into best practices while minimising the necessary trial and error.
Laravel Framework is nice. https://leanpub.com/codebright (There is a free online version but it seems to be having some technical difficulties http://daylerees.com/where-is-the-code-bright-site) http://www.phptherightway.com/ This is good for getting a development env setup with minimum hassle: https://puphpet.com/ Here for HTML and CSS basics: http://www.codecademy.com/tracks/web
The first web development book I read was [Learning PHP, MySQL, and JavaScript](http://shop.oreilly.com/product/9780596157142.do). Can't remember too much about it but it did teach me the basics.
I highly recommend those books!
You mean Head First?
Try http://www.codecademy.com. It is pretty decent for a starting place. I have used it to get the basics taught to interns and it didn't leave a lot of bad practices to clean up.
I would start by reading up on the http protocol. Understand the request methods (get, post, put, delete) and the response codes and what they mean. This is key to all you will do. Learn how to get a MySQL database up ans get a PDO connection to it. Read records and spit them out from php. Need not be fancy. Use bindings rather than concatenation for passing data. Google bobby tables to see why. HTML/CSS/JavaScript are a whole discipline on their own. JQuery is worth learning. Try not to mix HTML and php too much. Separation of user interface and logic makes for cleaner systems.
1 Point for awesome typo :) 
code academy is pretty amazing, will have you building in websites in a few days and if you can already code anything object orientated you'll find it extremely easy, much the same for PHP, its like a much easier JAVA 
What a shit article. I'm so sick of all the crappy articles that get created just to increase search engine traffic to some business's site. This article, like so many others that claim to compare technologies, comes to no conclusion and raises no decent points about anything. "both are best and better option" - wtf does that mean?! 
Look two languages and random framework names!!
Yikes, please don't recommend w3 schools for *anything*. They are pretty bad, and often chronically out of date. See http://www.w3fools.com/ 
That doesn't matter. It's an introduction for beginners, it's not intended to be professional level development and practices. Their tutorials are great to grasp the basic functionality of each language and how they interact with each other.
If you're familiar with xml, you can be done learning basic html by about 4:00, provided you start around noon.
Sure, but if you pick up bad habits when you're a beginner, they tend to stick for a long time. 
OP, you sound confused about what you need to learn. Also, you're assuming you need PHP to build a website. You don't. At all. You need only HTML and preferably some CSS. Optionally, Javascript. Certainly not PHP. Unless you're building a complex web app, which you didn't say you were doing. You just said a website and the assumption for that word is a static series of pages.
For beginners, w3schools is great. I stand by that because that is how I learned. I had no idea what w3c was when I started learning, and most beginners won't know either. I don't see anywhere on their site where they claim to be affiliated with w3c, or even hint at it, other than in name. So do all sites that start with "w3" need to put a disclaimer stating they are not related to the consortium? 
Any guesses on the next platform? Maybe that would make a good thread.
I agree with the first part, but the last line I would dispute. You're going to need the aggregate functions, etc, already. Having PHP post-process the data is in my experience one of the best ways to make horrible PHP code. It's sometimes necessary, but should be avoided.
My experience and opinion is the same as most people here, I would think. Use MySQL to get as much as possible, its aggregate functions are great for returning a nice happy result with all the math done for you. I've worked on some massive reporting systems that used a lot of post-processing to get results, and using mysql to get the records invariably was faster and made more manageable code. That said, speed shouldn't necessarily be a big factor. *Hundreds* of results should be more-or-less instant, and even thousands shouldn't be an issue. &gt; if I store a field as datetime, would it be faster if I store the day,month,year,week_of_year, and quarter as 5 separate integer columns (if I went the mysql route) for my groupby clause, or is casting the datetime just as fast? Store the time as the time. Datetime casting is very fast, and is the proper solution to the problem. If you don't know much about it, an important term is "normalization". There are a bunch of "rules" to normalisation of a database, but essentially it comes down to ways to make the data consistent and reliable. One of the ways thats done is by not making anything redundant. Storing the five separate columns breaks normalisation because it will cause redundancies. Ie, if a date is in the third week it must be in the first month, and also in the first quarter, etc. Also you risk errors - what if you screw up one of those numbers? Better to just store the date and calculate from it later. You can happily *group by* cast dates. I've even grouped by substrings of dates in the past. GROUP BY LEFT(o.order_time, 7) That sort of thing. It's rough, but it works. There are better ways, I know, but it's what I used at the time. There are good functions for MONTH(), QUARTER(), WEEKYEAR(), etc. They'll do exactly what they look like and will really help.
NO NO NO NO NO This cannot be said enough, NO! That tutorial you linked includes: http://www.w3schools.com/php/php_mysql_insert.asp Not only does it not use parameterized/prepared statements, This is exactly how to implement SQL injection vulnerabilities. This entire "tutorial" should be disregarded as misinformation and an example of how NOT to use PHP.
It DOES matter because software written based on that tutorial will collapse when it meets [little bobby tables](http://bobby-tables.com/).
I stopped judging myself by twitter followers when my housemate (a famous internet games reviewer dude) broke 80,000. I can't compete with that shit.
Yeah, that's right. Head Start. :)
Frameworks are going to be your friend. Laravel is highly recommended. If you learned Laravel you can probably skip a fair bit of the base-level PHP. Others will probably disagree, and say you need *proper grounding in the language*, etc, but personally I think there will come a point where just knowing the framework is enough, and you can always go back and fill in the gaps. But mostly what I'm referring to is actually HTML frameworks. Things like Twitter Bootstrap will allow you to get a good result with minimal knowledge, and build a "working thing" in a small time. There is something called the Way Generators that allows you to auto-generate Laravel stuff, building all of the laravel components (models, tests, controllers, routes, etc) automagically, as well as building all of the HTML as twitter bootstrap. This can then be customised, but it sure gets you a long way into having useful things built, and you can see some best-practise for how to use Laravel in the generated code.
&gt; Best practices cannot even be understood when you don't even know the functionality in the first place, let alone what is bad and why it is bad. He doesn't have to understand it. You teach the best practices and then learn why later. Doing it right is no more complicated than doing it wrong, but doing it wrong leads to long term bad habits. You are the kind of person who has given PHP a bad name. Because I like analogies, this is like learning to fly in a simulator by practicing crashing your plane into stuff, arguing you don't need to bother landing because it's only a simulator. 
Yeah, it never really gets readable at all. Formatting just makes it better, never good. An ORM fixes the issue, but for reporting probably isn't ideal. It's basically just do as well as you can. 
A link to buy a book, thanks...
&lt;strong&gt; is where it's at. 
I should have stuck to reviewing games!
&gt; More like learning to fly in a storm, snow or heavy winds, because those are not ideal conditions and you learn to avoid them because you know what can happen. This is a pretty good analogy to what you did. You've just sent a brand new pilot into a thunderstorm without any instruction on the risks, justifying it by pointing out that he's not carrying passengers yet. Where the analogy falls apart is that he's unlikely to die from implementing an SQL injection. What that means is that it's possible(and the body of php code in the world suggests it's very likely) he won't figure out that it's wrong until it backfires and he has to try and fix everything he's ever written. 
Mixed as in you mix your PHP commands in with HTML not PHP is the syntax of PHP mixed with something. Technically the PHP "generates" more HTML but seeing that both are in the same file they are Mixed. That is both the beauty and the curse of PHP you don't have to separate your view from your logic. It makes it easy for the quick and dirty. A common route for people become PHP programmers is that they are HTML people who start adding little bits of PHP so that their HTML is more interactive. The problem is that these people have no programming background so their code is usually at best, odd. So no there is no lie; there is a complete mis-interpretation of what I said on your part. 
Its worse for beginners because they cant distinguish the good stuff from the nonsense.
Just by the nature of the name and their presumptive top google ranking, they are looked at as an authority on the subject. They share part of their name with the actual authoritative body for that same subject. W3C specifically has asked them to do it, and they haven't. Its simply a bit irresponsible and selfish. The 'W3' issue is not the main problem however. Its that they don't keep their content up to date. They promote practices that are known to be bad or even dangerously insecure. Why use them, when there are so many other resources that do it all better. You learned on w3schools, i learned a lot from it too - but that was a long time ago and much has changed.
Yeah, his name's Yahtzee Croshaw. He does alright out of it. 
Apart that each of that what you mentioned is a job of itself: Frontend: HTML, CSS, JavaScript Backend: PHP, MySQL Sysadmin: LAMP Meaning until you master each one of those it will take years of practice and experience. Luckily there are frameworks for front ends and back ends, but they won't teach you security, efficiency and performance. What helped me a lot is: practice makes perfect! Create small tools or maybe even websites which you can use as a playground - privately - aside from work. Even something simple as a guest book will help you how to deal with different parts of webdevelopment. 
What features are you looking for in a 'multilingual' search engine? 
Do you mean a documentation generator? What do you mean by multilingual? 
It's not 'anti-W3'; it's 'anti-W3Schools'. The W3 and W3Schools are not related. W3Schools has a notorious reputation for offering poor quality information. 
Apply directly to the forehead?
Thanks, yes I need to index (by crawling or other ways) a website with different languages: english, french, russian, arabic, ... and a search field in these different languages. 
A very dirty way is to put all your content in MySQL and rely on its full search capabilities. If you want anything better, you'll have to pick a search engine: Sphinx, Lucene/Solr, Xapian, ... And we've not talked about crawling here yet.
Perfect! Thanks
There's plenty of tutorials that are up to date and cover language basics. 
[http://php.net/serialize](http://php.net/serialize)
unserialize($data);
This is the result of calling [serialize](http://www.php.net/serialize) on an object. serialize can represent arbitrarily complex objects as a string (within reason). Running [unserialize](http://www.php.net/unserialize) on your data string there gives us: array(3) { [0]=&gt; string(28) "DR8002F_1.jpg|DR8002F_1T.jpg" [1]=&gt; string(28) "DR8002F_2.jpg|DR8002F_2T.jpg" [2]=&gt; string(28) "DR8002F_3.jpg|DR8002F_3T.jpg" } 
That string is just result of PHP function [`serialize`](http://php.net/manual/en/function.serialize.php) and can be recovered with [`unserialize`](http://www.php.net/manual/en/function.unserialize.php) function.
It's serialized data using serialize(). Taking something like: s:10:abcdefghij; The 's' is the data type (string in this case), the 10 is the length, and then there's the content. If you did serialize('abcdefghij'), it would give you the above example. unserialize()ing it would give 'abcdefghij' again.
Can you give a little TL;DR of what it does and what kind of typical CMS functionality it supports?
Hah
To be clear, I downloaded the OSX application for the old Slingbox HD Pro. Then I clicked "check for updates" and this is the page it brought me to. Pretty ridiculous.
Did you message them (and at least give them time to respond) before posting this for everyone and anyone to see?
in chat hold line, actually. I'm pretty sure this was always easily and readily available to the public.
Just got off the phone with them. They are apparently trying to remove the application version of this from the site. It's depreciated. They now use setup.slingbox.com. I let him know they should delete that completely though.
Well those suggested packages are just there because the original package developer thinks they might be useful to you. http://getcomposer.org/doc/04-schema.md#suggest &gt;Suggested packages that can enhance or work well with this package. These are just informational and are displayed after the package is installed, to give your users a hint that they could add more packages, even though they are not strictly required.
That's some ugly code :/
That is some terrible code o: Not to mention the multiple database connections to the same database.
Looks dated, if anything. I'm sure it got the job done just fine at one point and has only been modified sparingly since.
Yeah, i'm not going to lie, i'm sure i have some mysql_ code lurking on a project somewhere. I'm ashamed. Hopefully those DB credentials at least had been changed 
Someone in the IRC suggested Laravel and I've been looking at it, it seems really nice though I'm running into a lot of problems regarding Composer and database migrations in laravel... will see if I can get this sorted out. p.s: Also thank you for puphpet, I'll give it a try.
That make sense thanks, so is there a way to add that in to the command so all suggested packages are installed as well? (Should probably google.)
Regardless, in future please exercise responsible disclosure. Always look for a security contact, if you can't find a security contact then go through normal consumer avenues and always give them a reasonable time frame for resolution. Personally I think that *at least* 14 days is fair and *always* give fair notice if you plan to expose the problem to the public (for use in the case that they refuse to fix it, which exposes their users to problems). This looks fairly innocuous (legacy code no longer doing anything meaningful that can't be in exploited) but just for the future it's always best to be responsible with your disclosure. Not only does it give you legal protection (there are cases where people got in big trouble for doing things like this against litigious companies) it gives the developers some chance to rectify the issue. Leaking something like this (if it was in use and was exploitable) can bring huge problems for a company and put developers in hot water, which isn't fair, we all fuck up sometimes! Although I know how it can be when you discover something so crazy, the need to share it with people as a "whoa, I can't believe this!" type deal :)
Ok so, thanks to /u/TIL_nothing, I understand where the suggestions are coming from. But is there a way to install all of them when I run the command to create my project? What if there are hundreds? Also, Laravel requires php-pdo and php-mcrypt and wouldn't work until I installed them. So why aren't those included in the required packages?
[Mirror](http://pastebin.com/vg1EAifY) in case anyone is curious at some point in the future after Slingbox gets their act together.
How do you know if they are not escaping all GET variables before?
It's better to know for a fact that the GET variables are escaped within the script itself.
Deprecated.
I hear ya. I did email, call, and chat. This was easily accessible code and probably has been viewed by thousands already given that it's a direct link from their legacy applications (that I'm sure tons of people still use). The phone technician confirmed it was replaced by setup.slingbox.com.
Because PDO and mcrypt are PHP extensions, not PHP libraries. Extensions have to be installed via pecl or your operating system's package manager. I'm not aware of any way to install suggested packages, nor do I think doing so would be wise. Suggestions are just that: suggestions from the package maintainer of other packages which may enhance the library or application in some way. Sometimes a package may offer several suggestions when only one is needed. For example, an "MVC library" might suggest Zend\View, Twig, and Plates for templating, but only actually be able to use one at a time. These are suggestions rather than requirements because the package consumer (you) are then free to choose what you want rather than bloating your application with a bunch of libraries you don't need or intend to use. Your best bet is to use the libraries you need, and only install suggested packages when you run into a need for them.
I technically don't know that. They could be auto prepending a file that filters everything in the $_GET variable array, or the $_SERVER array. To do that is not very common practice at all. Given how sloppy and messy that is, however, I'm going to bet the answer to that is no, they aren't escaped.
Drupal is trying hard with its SF conversion to do this. Predicting the future is hard though.
Good god this is just embarrassing on a number of levels.
Thanks! Great answer.
also who doesn't use some sort of include to connect to the database? If you change your DB password, they have to go to every single php file and change it? 
I love how similar the two words are in meaning. 
This makes me feel really good about my code's quality.
Prefiltering is a pain in the ass. I suspect that this is an injection nightmare. I wonder if this is typical? I wonder if the db behind this has root permissions galore. I wonder if the db is even behind the firewall. Oh dear I just don't want to look anymore. The useful and horrible truth is that most times where I have had a peek behind the curtain at some wildly successful site the code was usually rancid. What I have learned from this is that the whole great is the enemy of good is exactly true. 
Relevant xkcd: http://xkcd.com/292/ In all seriousness you should avoid gotos. They are never really needed and just make the code a nightmare to read. In your example you could compact all that logic into one if statement. Imagine if your example was larger with loads of gotos, I'd be jumping all around the source to try and figure out what it is doing.
`goto` is considered bad practice ([obligatory XKCD comic](http://xkcd.com/292/)) because as the program size increases it quickly becomes very difficult to make sure that your program is working the way it should be. Every program has a program flow -- a 'path' the program takes from start to finish. Once you start adding in too many `goto`s, the flow of your program jumps around and travels in unexpected ways, a term known as [spaghetti code](http://en.wikipedia.org/wiki/Spaghetti_code). When a program is large, it becomes difficult to assess the plethora of combinations of how the program can run, and maybe even a velociraptor will come out of nowhere and attack you. Control statements like `if` were created to *aid* in the readability of a program. `goto` is something you should strive to use as rarely as you can.
Mirror: https://ghostbin.com/paste/om6nw
My father said something like that the first time I drove a car....
And this, kids, is why you always put credentials outside of the webroot.
Oh. I thought this was a question. But it's not. It's a stupid spam.
Not to mention outputting HTML using echo statements intermingled in the PHP code. Eek. It must have been a nightmare if their graphic designer wanted to revamp the look of the site. 
"if" was not created to aid anything. "if" was always there. Computers wouldn't function if they couldn't branch on various conditions. "if" is just some form of cmp and then a jmp / jz / jnz / jg / jge / jl / jle, etc. goto is just a hard jmp.
The latter block is more correct. Only use goto for coding a state machine (you can google "goto FSM" or "goto finite state machine" for examples). Even then there are different methods that many programmers say are better (and some dont). You can google "why goto is bad" for more information. It is not specific to PHP - you can read about it in any language as the issues are the same. 
its harder to follow, theres no break hirarchy, you cant trust any function
Ah, but why isn't it safe, you ask? Because [users can modify serialized data to silently instantiate objects](https://www.owasp.org/index.php/PHP_Object_Injection). [Here's another writeup](http://www.alertlogic.com/writing-exploits-for-exotic-bug-classes/). If you have an existing codebase that passes around client-side serialized data and you can't properly redesign it to deal with the insanity, [sign the data using something like a HMAC](http://php.net/hash_hmac) and verify the signature before unserialization. This will at least ensure that the user hasn't tampered with the data... well, as long as they don't know the key. Even then, merely exposing the data to the user can give them major clues about the underlying architecture, and that in itself can be a security risk.
I don't understand, if there is one goto which is easily understandable due to it's name, and I use it only when needed, how is it still seen as bad. 
The only thing worse that that code is this post's title.
So... Does this mean Slingbox is or will be hiring soon? 
What are variable variables?
There is basically just one case where you can legitimately use variable variables in your code and that's variable extraction for templating. But of course you don't do that manually, but use http://php.net/extract for that. On the other hand, dynamically addressing property or method names I would consider relatively common and unproblematic.
This: $a = "foo"; $$a = "bar"; echo $foo; outputs bar
Been doing PHP for a awhile and I see this happen all the time. How do you suggest doing it?
I've used elFinder in a few projects and it works really well as a visual interface. It's great if you're ok with the jQuery/jQuery UI dependency. [website](http://elfinder.org) [github](https://github.com/Studio-42/elFinder)
And thinking that I had to write functions to do this a few years ago, because I had no clue what this format is. I'm ashamed :/
Thank you! I work as a sys admin and I hear people talk about 'depreciated' functions all the time and it drives me nuts!
I don't think of variable variables as a particularly good idea. To me they're a code smell. I wouldn't necessarily say that code was bad because they were used, but it would certainly be a good indicator to me that this bit of code deserves closer attention for possible problems. &gt; Most of the time, they were just hiding a design problem. Yeah, that pretty much covers it.
Thanks, I didn't know about extract. That clears up a lot of questions about how would I get a template engine to work.
because you don't know if something else calls it and what happens, you cant define params in gotos, you break the hirarchy, and thats bad.
/r/LolPhp
I watched episode 13 last night. The Uncle Bob videos are great, especially if you are not a fan of reading technical books.
You're right, I was referring to the syntax itself, sorry.
Only once, on my very first site, when I didn't yet know about extract(). I haven't used or have seen them used since.
How about variable variable variables?
&gt; The use of mysql_* functions does suggest it is old Unfortunately you can still find people recommending tutorials that teach insecure use of mysql. The first result when you google "php mysql tutorial" is guilty of this, while most of the rest of that results page are at least still using mysql_ if not also teaching insecure code. 
Templates? Either in PHP or anything else (Smarty, Twig etc.).
It goes beyond just the database, take a look at both available files - index.php and redirect.php: that's some ugly copy&amp;pasting!
I couldn't see anything specific about this, but does it still chuck a tantrum at PSR-2 multi-line functions?
&gt; it's cleaner with the goto Maybe, possibly, in this particular situation. But when you start littering your code with them you'll soon find out why everyone is warning you against their use. There is a much better and less convoluted solution. Move the logic into a function and [return early](http://programmers.stackexchange.com/questions/18454/should-i-return-from-a-function-early-or-use-an-if-statement). For instance: function upload($file) { if ( ! isset($file['uploaded_image'])) { return; // nothing will be executed after this point } if ($file['uploaded_image']['size'] &gt;= 0) { return; // nothing will be executed after this point } } upload($_FILES); &lt;html&gt; [...] Though I should note this is still wrong. Your view (template) should be dumb, it should only be concerned with receiving data and making it pretty. Ideally the code to process this should look (very roughly) like this: $errors = []; if (isset($_FILES['uploaded_image'])) { $upload = new Upload($_FILES['uploaded_image']); if ( ! $upload-&gt;validate()) { $errors = $file-&gt;upload(); } else { $upload-&gt;process(); } } $view = new View('/path/to/template.php', compact('errors')); echo $view-&gt;render(); That's just some pseudo-code off the top for my head, you can clean that up further and it's missing some things like exception handling and setting proper response headers but that's how a PHP file should look, it shouldn't be one long script that does everything.
Whenever I see code like this it makes me feel so much better about my own. I'm always paranoid that I'm not writing code that's good/secure enough and that it would be embarrassing to have it seen. Then I see this and realize "damn, that's soooo much worse than my own stuff" XD
For almost all use cases a hash map (associative array) will do just fine.
I have become a huge fan of xataface You can make a customised admin interface very quickly. It can have tables relations, jquery date widgets etc, searching, file uploading etc..
It is better to know that DATA is escaped a the appropriate point no matter WHERE it comes from.
It's been 17 hours now, and it's still up. My guess is that it's not important, or they don't care. Either way, we can stop worrying about any subsequent damage.
you raise a valid question.
The main issue with goto is that you have no stack for those jumps, which means you can no longer tell how you arrived at a certain place. That is a major issue while debugging. I highly recommend you read Dijkstra's "A Case against the GO TO Statement": http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html
Nope: http://philsturgeon.co.uk/blog/2013/10/psr2-v-codesniffer-psr2 The 1.4.7 fixes are in 1.5.0 too.
Better than no comments like some projects I have seen.
I was in the same situation as the OP and used this book. I found it very useful. There's a project at the end where the author pulls everything together to build a social networking site.
&gt; - a Factory creates and returns an object, but does not retain the created object for future use; &gt; &gt; - a Registry retains an object instance by name for repeated use, but does not create that object; &gt; &gt; - a Service Locator contains a named object (a “service”) and creates it if it has a definition for that service; the creation logic might itself be a Factory, and the retention logic might itself be a Registry. 
Then how would you suggest I format it? P.S. I also read all the possible outcomes of a adventure book. 
How to discussion forum
Yep. At the very least, you can use PHP to make pages that are primarily all HTML with just some echo statements to insert variable values and things. That separates the visual HTML stuff from the logic of the PHP app so you can easily switch out the HTML design, let a designer modify it, etc. But using a template system (Smarty, Twig, or Blade) really simplifies things. I've been using Blade lately since I like that it gives you a few simple commands to make things easier, but then just lets you use PHP you already know for everything else. But Smarty and Twig are both excellent also. Aside from making it far easier to design and maintain the HTML, Templates let you do things like cache pages or parts of pages so your website is faster (especially for any static content), more easily allow for foreign language translations, and have different templates for things like a mobile version of the site. 
The reason I don't put it all into one if statement is because there are more than just 2 variables I need to check. And if I put it all into one if I won't know which one is the problem. I typically use a bunch of nested if statements which becomes really annoying to manage after the code stretches out. So I decided to delete all the else{error here} and do if(error){output error and goto HTML} 
I use variable variables for setting menu active states. $url = explode('/', $_SERVER['PHP_SELF']); $nav = $url[1]; $page = $url[2]; $$nav = 'active'; $$page = 'active'; Which then corosponds with this &lt;ul id="mainNav"&gt; &lt;li&gt;&lt;a href="/dashboard/" class="&lt;?php echo $dashboard ?&gt;" &gt;DASHBOARD&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="/administrators/" class="&lt;?php echo $administrators ?&gt;" &gt;ADMINISTRATORS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="/teachers/" class="&lt;?php echo $teachers ?&gt;" &gt;TEACHERS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="/classes/" class="&lt;?php echo $classes ?&gt;" &gt;CLASSES&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="/orders/" class="&lt;?php echo $orders ?&gt;" &gt;ORDERS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="/gifts/" class="&lt;?php echo $gifts ?&gt;" &gt;GIFT CERTIFICATES&lt;/a&gt;&lt;/li&gt; &lt;li class="logout"&gt;&lt;a href="/?logout=true"&gt;LOGOUT&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul class="sideNav"&gt; &lt;li&gt;&lt;a href="/classes/add/" class="&lt;?php echo $add ?&gt;" &gt;Add Class&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; Now I don't have to do a bunch of if statements to highlight the current nav item.
It doesn't, I believe each parameter is treated as PDO::PARAM_STR
You sir, are trying to start a framework war. To answer honestly, most frameworks have well versed form builders. I'll put Zend Framework into the hat. Complex but flexible/capable. Would require a somewhat steep learning curve if you haven't built off of a framework before. Email is a different story, if it's internal only then maybe a good enough solution would be to create a quick script to run after the buffer is written. ( and from reading your description, it somewhat implies that various internal departments would get an email depending on brand) If this is external or high load. It's somewhat difficult to answer that. If you're rolling your own, good luck. Otherwise I would review APIs that will send mail.
Anyone find the doc on this? Also believe this is correct. Try doing a placeholder for the limit in MySql and I believe it fails unless you send it a PDO::PARAM_INT.
I haven't personally built any commercial plugins for Magento, but I do see a number of them with their own standalone websites. It makes sense. With a standalone website you can work on your SEO and funnel customers to your Magento Connect page from there. That way you are not just relying on the Magento Connect embedded SEO to magically work for your plugin. It also gives you a place to send people when clicking on your ad banners that can better explain your product to your customers, etc.
I really like the flexibility of forms in Zend Framework 2 (ZF2). In a project I'm working on, I put all the forms into config files (I chose this way because I like the formatting style, they could also be individual classes) and call them via a factory. This allows me to use a single controller to populate and filter/validate all of the different form elements. Forms in ZF2 allow you to configure filters and validators for each element in the form individually. ZF2 may not be the ideal framework for you needs. ZF2 can be "heavy" and can have many features that you may never use. But, ZF2 is also modular. So, you can bring in just the [Form](https://packagist.org/packages/zendframework/zend-form), [Filter](https://packagist.org/packages/zendframework/zend-filter), and [Validator](https://packagist.org/packages/zendframework/zend-validator) modules into your project with [Composer](http://getcomposer.org/). [Here is the documentation on Zend Forms.](http://framework.zend.com/manual/2.2/en/modules/zend.form.intro.html)
It calls bindParams to bind each argument which has it's default data type as PDO::PARAM_STR, so I'm fairly sure that'll be the case. But I can't find any docs explicitly saying that
Could be worse, RHEL/CentOS are on 5.3.3. They backport security patches, but the version doesn't increment.
In my experience, devs rarely have a say in what php version is available in production. If we had our way, yes, everyone'd be running latest/greatest of the point release in question, but, frequently, there isn't even an option to get a newer version in production. Environments with onerous compliance concerns (PCI, HIPAA, Sox, etc) are not allowed to go outside of the patches that the distribution maintainer makes available. So, that means that if you're serving using RHEL, you're stuck on 5.3.3 (with backported security patches.) 5.4 and 5.5 aren't even an option.
Only once, long ago. I added a comment that said "Danger, Will Robinson!" It was a small and isolated bit of code, so I didn't feel bad.
Bugfixes? I don't see anything that interesting, or maybe I'm missing something
Most commonly used by people who are beginning to understand the concept of an array but aren't yet aware that's what they're actually trying to do.
&gt;You sir, are trying to start a framework war. I'm really not. I looked at CakePHP recently and was somewhat overwhelmed. I have a sample version of what I want running internally to get some user testing it. Uses javascript to change the HTML content of the form div for 3 forms. These forms are pretty long (20+ fields each), so this is really not an efficient way to do it, so I'm looking for ways to streamline it as well as break it up a lot more so I can quickly modify individual forms as needed. As for the e-mail, it is meant to send a copy to the internal department as well as a copy to the external user. I've done a training registration form that just posts the inputs to variables, creates a $message from those variables and sends it using the mail($email, $subject, $message) function.
I'm not sure exactly what you mean, but if you're using templates or separating the display pages from the logic, usually it's the opposite question. More commonly you'd be writing mostly HTML, and you may be tempted to use a little too much PHP logic in your HTML template. Take some time and look at examples of code using a template system like Twig, Smarty, or Blade, and spend some time understanding how to design a project when you're separating the "view" (HTML) from the logic of the app. Or if you really want to learn a more advanced way of doing things, take a look at a framework like Laravel (it's a whole different way of thinking, but it's amazing once you get it). I started with plain PHP and echo'ing HTML, and it's fine to start out that way (and I still sometimes do it if I need to hack together something that doesn't need to work perfectly), but there sure are easier/better ways to do it.
No support for Composer...
I work with a company called Collins Harper and they advertise primarily on their own website in addition to the plugin section of Magento. They have a profile on Magento which lists all of their plugins and each plugin screen has a link to their website. I would also suggest using SEO and adwords to bring customers onto your website which has information regarding your plugin and also link them directly to the plugin on Magentos site. Are you processing all of the 'gift sales' yourself? You setup a merchant account and process the payments on behalf of your clients? I am curious regarding 'who' is processing the payment. Most processors will see this as a risky model and would likely require a large up front deposit to approve the business. 
You missed the part where I stated that all objects are taken from same namespace. The value of `$name` would be concatenated wit proper namespace. And .. emm .. **how exactly is the object USED** there? The `new` keywork is exactly where it need to me: in a separate class which is responsible for creating unique instances.
Ooh that's an interesting way of doing that. Much cleaner than even ternary operators.
Every PHP Framework I have ever seen is frontent agnostic. What is "on-the-fly model creation" and why are you calling models "simple CRUD classes"? Themes are not a very strong selling point for a PHP framework, when it is essentially a CMS feature. How often does an application you build from scratch need to have drop-in theme support, when layouts already allow that? Which PSR's do you support? Why is this not listed on Composer? Is a json file really the best solution for routing when 90% of other frameworks allow PHP files for callbacks and logic to be included? Why the forced limitation? Why conf? Trying to save bites over config? 
Hey man, you asked my opinion, you got it. ;-) If some code you have not presented here does things differently, then my comment does not apply to the code I have not seen. I would argue that doing anything with the object *other than creating it* is "using" it. If you prefer, maybe better phrasing would be "keep object creation separated from everything else".
Hi Philsturgeon, Thanks for the feedback, I'll take them in order. * Fair enough on frontend agnostic. It is a framework but has some similarities with CMSes, so I wanted to clarify this. * On-the-fly model creation means that you don't need to declare model classes explicitly to get useful default behavior. You can simply type $user = new User(); inside a controller, and if there is a "users" table everything works. Of course you can override these with your own implementation as well. * Themes are very helpful if you prove hosted solutions, where you want to have a few clients use the same codebase without needing to deploy separate versions of your code in different places. The idea of themes has been pretty tightly linked to CMS systems, but Sodapop tries to add them to an MVC framework. * I'll need to research PSRs a little more to figure this out. * It's not in composer. That is a good suggestion and I will look into it. * It is possible to add routes programmatically as well, if you need to. There are is a method on the Application object in the docs for this. * A byte saved is a byte earned. :) 
I will definitely add this, thank you.
Thanks for the advice. We have a standalone (www.give.it) and also some other plugins for hosted platforms. But now we want to get traction for Magento
We also have a site, so that is already set up. Om your question, yes we handle payments, but we dont't store the money. It is instantly transfered from the buyer to the retailer. 
IMHO you should not run composer update in production, you should commit your composer.lock and run composer install (and that's what it says in the composer doc http://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file). Other than that, i would feel a little uncomfortable if the webserver had access to my repository or any outgoing connection at all (composer).
PHP's associative arrays are wonderful.
Might want to look at try blocks then. &lt;?php $errorMessage = ''; try { if(!$file_uploaded) { throw new Exception('No file uploaded.'); } if(!$file_size) { throw new Exception('No file size.'); } } catch(Exception $e) { $errorMessage = $e-&gt;getMessage(); } // Do HTML. Granted, I'm not a fan of the whole $errorMessage = ''; tidbit on that, and would instead look to return and render an Error View with said error message. But that's more when you get more into the MVC world.
Themes support is very useful when a client wants a special Christmas theme. You can define a fallback theme and then just modify the files that need modification.
IMO "// start" and "// end" being the only comment in the page is just as useless as not commenting at all. If you're going to take the time to comment, it might as well be useful to the next guy looking at it. I hate when coders use time writing bad comments.
Sure ok I never considered that use-case. I would definitely tell the client to get fucked if they wanted anything more than a CSS file change for Christmas, but that might be why it's not my job to do that anymore :)
You people are all retarded. Good luck getting spoonfed your whole careers.
Check out those standards - http://www.php-fig.org/
HMM... I always wondered why people would want to throw custom exceptions! This is actually really helpful, but in all honesty I feel like using goto is basically the equivalent to this. But I will use this.
That came up in another comment, I will definitely take a look. Thanks!
The workflow would work well for a CI server. Production code should get tagged and a conscious deployment done. Having said that if it's just for your little pet projects it's probably OK.
There are two options here. The entire universe is wrong and you are right, or you are wrong and the entire universe is right. Do a little legwork and heed the advice in this thread. Just don't do it. It's a horrible habit and people will infer a great deal about your programming abilities if they see it.
Thanks. Quick question Is it possible to pass a parameter with Exceptions. Lets say I'm doing a check for something optional. I don't want to log it or anything I just want to skip to the HTML. Is there a way to tell it this is not important. Or should I just make that an exception. Like throw new notImportant. Thanks. 
You might also consider the fact that you don't have to use a framework to make something with php. If the project is very simple, a framework might just bloat the final product, and cost more in the end. 
[It works perfectly for me.](http://grnlight.net/X/btcamount/helper.php?BitcoinAmount=0) 
This question is almost impossible to answer since it all depends on the quality of the developer you end up with. If they're a decent developer then you can trust their choices. If they suck then it doesn't matter if they use an awesome framework or not -- you'll end up with a shit product. The main issue is that you wan't a framework that is well known enough that you can find other developers who know it for future growth. I'd be skeptical if they go with code-igniter since it is dying (but a ton of people know it). I'd be much more skeptical if they use a framework they built themselves. Even more skeptical if they don't use a framework or know what they are. Good luck.
Ha, I post a discussion about application architecture that mentioned a lot of SQL concepts and it gets removed from this subreddit in 10 minutes. This post is a link to ridiculous utility with a banner ad, has nothing at all to do with PHP, and is here for hours. Lovely subreddit...
If `goto` was not useful, it would not exist. It does have its uses and may make code easier to read for some people, but if you're looking to label parts of code, its usually best to use comments. For most people, it also makes it more difficult to keep track of a process in your head when execution jumps all over the screen.
You still **never** run composer update. That would put your CI server out of date with your dev code base. You commit the composer.lock file and run composer install on your deployed code.
Okay I have a question, let's say I want to throw an exception that does nothing other than just finish executing PHP. So lets say if(!isset($_POST["submit"])) { throw new DoNothingException(); } Would this be ideal? I feel really compelled to use goto's but if it's this negatively seen I guess I won't! Thanks for the help!
Yours was removed on account of it being about SQL, with no real relevance to PHP. This post has been removed as well, if it makes you feel any better, for the same reason.
 I tried your method by implementing the code below in my index.html file. &lt;script&gt; $.ajax({ url: $("#contact_form").attr("bin/contactme.php"), type: $("#contact_form").attr("post"), data: $("#contact_form").serialize(), success: function(data) { //do something with the data returned from the PHP page. alert("Your message has been sent"); } }) ; &lt;/script&gt; Unfortunately now an alert appears as soon as I access my website and the website still refreshes. Did I misunderstand something?
Sorry, you have to surround this in an "onsubmit" or an "onclick" for your button, otherwise it will execute straight away. Does your form have an ID of "contact_form"? Are there any errors showing up in your console?
Really depends, if a simple if statement takes care of it then just doing assignment of an error message from there will probably take care of it. If it's more complex then you'll probably want to do more than a simple one file program and maybe go with at least a simple routing framework like Silex. The try/catch can be helpful when there's a lot of possible similar errors thrown that can be caught once, produce the same error HTML, just with different messages.
Possibly -- but you generally only push master to that remote repo anyway. At least, that's how I have my one-step deploy arranged. Branches, etc, all go over to bitbucket/github.
In addition to composer, version your crontab/supervisor/nginx configs and have the script restart the needed services: https://gist.github.com/chuyskywalker/7764614 Is roughly how I do this so that if I push config changes, those get auto-dealt with too. You could pretty easily add a "is there a composer.json file? run composer!" step to this, but with a regular file presence check instead of the "what changed" check. Or since you're just doing a "git checkout" maybe only a dep update if the composer.* files changed? Yeah, that'd work...
Here is a little snippet of my code if(!isset($_POST["submit"])) { throw new Exception(""); } if (isset($_FILES['image']) &amp;&amp; $_FILES['image']['size'] == 0) { throw new Exception("File is to large (5MB Max)"); } if (!isset($_FILES['image']) || $_FILES['image']['size'] &lt;= 0) { throw new Exception(); }
you dont need those
Why not pick a less terrible framework to work with instead?
I've put the script into an onsubmit function and my sure my form had an ID of "contact_form". Unfortunately now the button sends a "Message Sent" alert immediately upon clicking, but the message never sends. Code below. **Index.html** &lt;form method="post" action="" id="contact_form"&gt; &lt;input name="name" type="text" placeholder="First and last name" required&gt; &lt;input name="email" type="email" id="email" placeholder="Email address" required&gt; &lt;textarea name="message" placeholder="Your Message" required&gt; &lt;/textarea&gt; &lt;input id="Submit" class="submit_btn" name="submit" type="submit" value="Submit" onclick="myFunction()"&gt; &lt;/form&gt; &lt;script&gt; function myFunction() { $.ajax({ url: $("#contact_form").attr("bin/contactme.php"), type: $("#contact_form").attr("post"), data: $("#contact_form").serialize(), success: function(data) { //do something with the data returned from the PHP page. alert("Your message has been sent"); } }) ; } &lt;/script&gt; **contactme.php** &lt;?php $name = $_POST['name']; $email = $_POST['email']; $message = $_POST['message']; $from = 'From: mywebsite.com'; $to = 'myemail@gmail.com'; $subject = 'Hello'; $body = "From: $name\n E-Mail: $email\n Message:\n $message"; if ($_POST['submit']) { if (mail ($to, $subject, $body, $from)) { echo '&lt;p&gt;Sent&lt;/p&gt;'; } else { echo '&lt;p&gt;Something went wrong, go back and stry again!&lt;/p&gt;'; } } I'm so lost. I feel like I *should* have gotten it by now, but nothing works. 
Gotta agree with you. I always begin every PHP file (that connects to a database, of course) with "include 'MySQL.php';".
Thanks. I'm in the early stages of writing a book myself, so I've been investigating available tools and seeing what other people prefer.
You're probably right. Thanks for the tip!
Creating your own framework is one thing (and a good one to learn), adding it to the pile is another one.
If it's doing the alert then your the PHP code is working. You just need to do something with it's output. Instead of alert("Your message has been sent"); try alert(data); like in the earlier example. Good luck :). I think hydrarulz had the right idea about starting with a simple ajax example to get a feel for it.
thanks for the link and heads up about that. I'll get the article updated.
Another MVC framework for a medium that is not suitable for MVC. There is no moment in time when the M, V and C exist at the same time as what should happen in a MVC. Once the view is "displayed" (ie: rendered) the Controller becomes history, so does the Model. Usually MVC frameworks have their Controller handle a Request and return a Response. That should at least give us a hint that we're not working with MVC. Anyway, that's a personal beef I have with the MVC frameworks. Regarding your framework, I don't see the point of having configuration in JSON files. Regular PHP arrays would be more suitable.
I'm sorry how do you change the php script's output to only a string? I tried your script but it still is still going to the php page on clicking submit. I keep parsing through each line and reading tutorials but I can never get it right. This is so frustrating! My in-progress website is [here] (http://katiesnolan.com/temp/index.html) . If you could take a look at it and let me know how I'm screwing up so massively I'd be grateful. For some reason I just can't get this simple ajax/php contact form off the ground no matter how many late hours I put into it. I'd love to know what I'm doing wrong. 
From the demo page it seems that speed is the benefit of this one. http://parsedown.org/demo
Also it seems to solve some corner cases: http://parsedown.org/consistency
Ciconia also has GFM support https://github.com/kzykhys/Ciconia
In contactme.php... if ($_POST['submit']){...} will always return false, because submit buttons can't be serialize. found here http://stackoverflow.com/questions/17872949/sending-form-value-using-ajax-jquery-php "Submit buttons aren't included when you call .serialize() on a form, they're only sent when the submit button is performing normal browser submission (in case there are multiple submit buttons, this allows the server to know which was used)."
you don't seem to have a contact form on that, so I can't check what you're actually doing. The text code above should work, though it may need to be wrapped in something to stop it running too early.
&gt; You still never run composer update aha, I do. Watcha gonna do? &gt; That would put your CI server out of date with your dev code base. You commit the composer.lock file and run composer install on your deployed code. you don't have to, its the better way when you worry about downtime. But you **don't have to**
still not a framework feature, it's a cms feature
ty, saved to pocket. I will decide which will fit the job better
Good call. This class should only be concerned with parsing markdown. Nothing more. It should be up to our application's dependency container to manage instances.
which would be the dependency aware anti pattern btw: happy cake day!
Looking at the source you can just ignore it and use it without it. 
Errors in the classes instead of exceptions. No testing. No form builder, validation. But an inflector seemed more important? :) I like the idea of a framework having themes, having built theming in a couple of projects the framework could have helped, although cascading templates where the end goal almost always. Nice experiment, but I'd still go with a more feature complete/polished framework.
Excuse me if I'm a bit ignorant on the subject but DAE wish php IDEs were more like Visual Studio for ASP/C# where you can easily go to function definitions and you're alerted when you use a variable that has not been declared..etc? Does something like this exist for PHP?
Yes but you're doing it wrong. You run `$ composer install --no-dev` on production so it matches your development environments. Otherwise, unless you've specified tags for all of your dependencies, and they have specified tags, all the way down, then you're going to be out of sync.
How does it work? Does it walk through the code with a state machine, or do incremental replaces globally using regular expressions? Just interested, as it affects how easily it can be expanded, and what kind of things we can expect to go wrong when the markdown is incorrect.
Stop spamming your shitty site here, asshole.
Can you try re-submitting with a better title? This current one is kind of ... crap.
Yes and this is so off topic it's not even in the same timezone. Use a proper IDE (integrated development environment) and stop using things like Notepad++, Sublime Text, or whatever is the flavor of the day.
I wrote something for you: https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/
What less terrible PHP framework would you rather I choose?
I'm most comfortable with it as my php framework[1] of choice (close seconds would be Lithium and Slim). I'm not aware of any flaws in the framework itself, and the only valid concern people have is site speed. Which, if I'm being completely honest, is usually *not* an issue that people complaining about it will have[2]. You can use models in 2.x (and 1.3) using the CakeEntity plugin[3]. While that isn't in the core, it's available to you as an option, just as using Propel instead of Doctrine is an option in Symfony. All that said, I'd be happy to hear of an alternative php framework and why I should use it over CakePHP :) - [1] I also work on flask, tornado, laravel, and rails pretty much every week. I still prefer PHP (as shitty of a language as it is) and CakePHP (despite language limitations) - [2] I work on an older symfony codebase, and while it's not the fastest thing, speed of development has been more important for us. - [3] https://github.com/josegonzalez/cakephp-entity
The guy said it was very simple, basically just reading some data from an API and displaying it. You don't need a framework for that. Not everything needs a framework behind it.
I should have mentioned there would be free food.
Grats to the winners (us).
For an already experienced systems/desktop programmer mysql and php should be the 2 easiest things to pick up, html is just a markup language so that is easy as well. Javascript as a language shouldn't be that hard to pick up but it does add events to the picture. CSS can be difficult (especially if it is a totally new concept) and it is also the area that has the most cross browser compatibility issues, but you can still write a fairly complex web application while sticking with some fairly simple css. &gt; All the while understanding just what is an http request. &gt; The developer panel included in most modern browsers really help give you an idea of how the whole process can act as one. Start slowly and create basic pages learning a few new things. This is where you start to hit the nail on the head. In my experience programmers who are attempting to migrate from systems/desktop development to web development seem to often stumble on the division of labor (and communication) between client and server, state/rest issues and security. Once you start using tools like firebug or the chrome dev tools these areas become a more exposed.
Netbeans is a good free one.
I expected some WTF moments, but I was pleasantly surprised. Your documentation actually shows how to use it (you'd be stunned how many don't). Your code is readable, concise, and reasonable. You appear to be following rational syntaxes (PSR-2?) and making a serious effort to contribute meaningful and useful code. There are only two criticisms I have. One is that you have no namespace on your class. You need to add one. The other is that you spelled a word wrong: debugEnviroment(). It should be debugEnvironment, and that sort of error is liable to trip someone up. In general, though, good job.
Gold! Bookmarked.
Symfony, Zend, Silex or something homegrown ... depends on project details and (existence and/or skills of) team. IMHO, people should just let both CakePHP and CodeIgniter die in peace. Unless 3.x (for either of those relics) turns out to be made of *distilled awesome*. 
In your case, I would definitely test `price()`, since it's part of the public interface and it "does stuff". To test the "getter" part of the method it should be sufficient to just use one assertion: public function testPrice() { // product_id, price, quantity, vat $cart_item = new CartItem(50, 500.0, 5, 25); $this-&gt;assertSame($cart_item-&gt;price(), 500.0); } You'll also need to write a test for the "setter" part of your method. A lot of people don't test trivial accessors, but I think you test every part of your class' public interface--even public "properties" set using __get() magic. Why? 1. Writing a test for simple setters and getters shouldn't take much time. If it's setting/getting a non-object type it can be written in seconds. If you have to mock something, it might take a minute. 2. Getters/setters can start out simple, but logic often creeps in. That's why we have getters/setters and not public properties in the first place. 3. The interface is a contract. Unit tests put pressure on you to enforce your end of the contract. 4. It discourages me from writing getters/setters unless they're absolutely necessary.
hehe, I'm having a WTF moment right now, because I didn't expect such a positive response. Thanks, I've applied the changes. I've never used namespaces before, so that is why I didn't even think about it. 
Each time something is posted about PSR-4 people flip out here wondering why they are only being told NOW. In an attempt to avoid that (although I'm sure some will do it regardless) here are the previous topics on the story of PSR-4: * [The new Autoloading Standard (PSR-4) passes Entrance Vote and moves into Draft status](http://www.reddit.com/r/PHP/comments/1kvr1f/the_new_autoloading_standard_psr4_passes_entrance/) * ["PSR-4 got to draft status a week ago and the other day it went into Review status."](http://www.reddit.com/r/PHP/comments/1la8rp/psr5_phpdoc_and_psr6_caching_interface_enter/) * [PSR-4 voting has been pulled. 'Voting is closed, and all votes here are void.' - Phil Sturgeon](http://www.reddit.com/r/PHP/comments/1nks5e/ps4_voting_has_been_pulled_voting_is_closed_and/) * [PSR-4 is back in for an Acceptance Vote. Drastically simplified document based on PSR-0.](http://www.reddit.com/r/PHP/comments/1qzif0/psr4_is_back_in_for_an_acceptance_vote/) So anyone acting surprised in here has clearly just been asleep. This shit has been all over reddit for months - I personally made sure of it.
Extracting methods to their own class, renaming classes and methods throughout the protect, etc. Basically, good IDE refactoring tools can automate most of the manual labour of refactoring by hand.
Thank you for the feedback! Just to clarify a few things: * It does exit in some cases when there are configuration errors, but for anything recoverable there are (or should be) exceptions. These errors should never come up in a running environment, only during initial setup, so I thought it better to fail quickly and clearly. * The lack of a form builder and validation framework are intentional, as I've never used one that was worth a damn. :) One of the goals of Sodapop is to not introduce arbitrary ways of doing things, and those (similar to scaffolding) always struck me as something which was cool for demos but that you would have to fight against or work around when it came to real production use. * I should definitely have unit tests for the code. That said, others can add the testing framework of their choice. One of the design goals of this framework is to be as "usefully minimalist." It only tries to introduce features at a framework level that are obviously universal and to let developers keep their own ways of doing things which are not. Once you learn the basics, it just wants to fade into the background. 
I'm happy to see it get adopted. I think this will be a serious improvement.
Bit off topic but representing money as a float is a bad idea.
oh that's pretty cool! I've really got to do some research on helpful tricks like these!
Yes echo time() . " "; while ($i &lt; 100000000) { $i++; } echo time(); &gt; 1386098594 1386098598
Looks like mostly regex/str_replace: https://github.com/erusev/parsedown/blob/master/Parsedown.php
/r/php lurker here. Thanks for keeping my lazy ass updated.
Support for loading PSR-4 file structures will be in Composer within a week or two apparently, according to Jordi. "in laravel" is a bit different. If you mean "when will Laravel support loading my PSR-4 code and packages" then the answer is "whenever Composer adds it." If you mean "when will Laravel switch all their code to use the PSR-4 structure" then the answer is "definitely not in 4.0 and probably not in 4.1. Maybe 4.2, but ask Taylor." But I wouldnt understand the interest in that being done as it makes literally no difference to the _users_ of a package.
I know, and I won't. There will be a currencyFormat method somewhere, but I still need to be able to get the price as 'raw data' from the CartItem. 
Very nice, and thanks! I am half way through and it has already answered most of my questions!
Can you write up a small code sample of what I did above with extract? I haven't used it before.
It's not like PSR-0 is _broken_ all of a sudden. No need to rush and throw out all currently working code, just because PSR-4 has passed. Other than that: Yay! Congrats an thanks to everybody who put in a lot of effort to get this through. Thank you, Phil!
Agreed - I kinda skimmed over that.
IMO it's best not to run composer at all on production but have your CI server build a full tagged version. That way you reduce your failure points in production to being able to connect to your repository and you aren't relying on other processes to be run.
You might not have enough time resolution with time(). Consider [mictrotime(true)](http://php.net/manual/en/function.microtime.php)
Yeah I'll be waiting one month from the day Composer releases their PSR-4 support to start moving the next major or minor versions of packages over to PSR-4. It's a 20 minute job but I don't want to screw people over.
Thanks PHP-FIG!
What the fuck are you here for, if not the discussion? Your uname suits you well, I guess.
..It's really jarring that the SPL Iterators link goes to the PHP manual page for them whereas clicking the shuffle() link goes to another post on your site about winning an iPod Shuffle.
You can also follow phil on twitter, all he talks about is PSR-4. Goddamn wanker.
we have been feeding him on steady diet of snark and sarcasm @ SO php chat 
Awesome, I've been following 2.4 updates for a while now, and it appears to bring many welcome changes. Can't wait to upgrade my applications!
+5 Sturgeon Points for the brit insult.
This is a great step forward, I was really looking forwards to this passing!
How come you chose to only check for the existence of the upload folder after you attempt to move it? I would typically validate the directory and throw an exception if it doesn't exist.
I actually like the model of convention over configuration. I definitely use Slim or similar (in other languages) when I want *complete* control, but I usually end up cobbling together something that looks like a larger framework anyhow, so the advantages aren't as great. I do have some issues with CakePHP, but they are mostly things like "there is no queueing system people advocate for", in which case I just build my own.
Do you have a blog post somewhere that you can point me to which has reasons for your intense dislike of CakePHP? I'm more than happy to evangelize other frameworks, but at least the ones you mentioned require me to understand more configuration/directory structure/libraries than I'd like. Silex is a bit different, though it falls into a different niche than Symfony/Zend/Cake/Laravel etc. in my opinion.
Yeah, that is a good point. But I thought a missing folder to move your uploaded files into, isn't that common. Specially, it is the first thing you check when you run the script on your server. I can't put this script online without giving it a proper folder to upload into. So, checking if folder exists, or is valid BEFORE every file upload made by other users is a waste of resource, and should only be regarded as a last resort. It is like checking if mysql exists, before logging in a user. (If I understood you correctly) 
Brilliant, I had just been looking through various PHP markdown solutions and hadn't yet found anything that fit with the way I wanted to do things. This looks perfect for the job!
Just a FYI it does not like your SSL certificate: thomashunter.name uses an invalid security certificate. The certificate is not trusted because no issuer chain was provided. (Error code: sec_error_unknown_issuer)
Try this: **Index.php** &lt;form method="post" action="" name="contact_form"&gt; &lt;input name="name" type="text" placeholder="First and last name" id="name"&gt; &lt;input name="email" type="email" id="email" placeholder="Email address" id="email"&gt; &lt;textarea name="message" placeholder="Your Message" id="message"&gt;&lt;/textarea&gt; &lt;input id="Submit" class="submit_btn" name="submit" type="submit" value="Submit"&gt; &lt;/form&gt; &lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; $("#Submit").click(function() { var name = $("#name").val(); var email = $("#email").val(); var message = $("#message").val(); var varData = 'name=' + name + '&amp;email=' + email + '&amp;message=' + message; $.ajax({ type: "POST", url: "Contactme.php", data: varData, success: function() { } }) ; return false; }); &lt;/script&gt; You shouldn't have to change any code inside Contactme.php since the variables that will be posted are $_POST['name'] $_POST['email'] and $_POST['message'] 
&gt;Watcha gonna do? Not hire you.
Most people probably use the default fastcgi_params file that already contains that setting. A simple google search came up with the following: http://wiki.nginx.org/PHPFcgiExample 
Thanks for pointing that out. I inadvertently left of the leading http:// when linking to php.net. I guess our 404 handler is too smart for its own good.
I'm sorry you think so. The point of the post was to show how the MultipleIterator can be used to loop through a bunch of iterators in parallel.
Use a mailer service. Postageapp comes to mind. Not only is it *easy* to get started, they brilliantly handle things like SPF and DKIM so mail doesn't get spammed en route to the recipient mailbox. Their sender IPs are more trusted than your server's (simply due to volume), and lots of these types of companies offer automatic plaintexting
I was live-editing my nginx.conf, and bad things happened.
Switching to a modern mail library will not fix #1, but it can help fix #2. There are three big problems with `mail()`: 1. It's a black hole. If it says that the mail got sent, you have no way of knowing if it's told the truth or not. And if the mail doesn't send? Well, you're screwed, 'cause all it does is return `false` and short of going diving through the error log or doing some fancy-pants error handler hijacking, you won't know why... or, worse, you won't even be *told* why. 2. Header and recipient management is a complete and total pain. 3. You have to build all of the MIME yourself, by hand. A modern mail library will fix all three of those problems. ZF's mail, Swiftmailer, PHPMailer, hell, even ~~good~~ horrible old PEAR Mail will do the job better. 1. Every one of them can either invoke `sendmail` directly or can talk to an SMTP server, both of which can provide immediate feedback if the mail was not accepted for local delivery. 2. Every one of them has a more sane way to deal with header assembly and recipients. 3. Every one of them makes adding MIME chunks child's play compared to doing it yourself. Fixing your second problem is as easy as MIME management. Send the mail as `multipart/alternative` with the first chunk being your `text/plain` and the second being your `text/html`. Some (like Swiftmailer) are even smart enough to let you just attach both and it figures out what you really wanted. Fixing your first problem, consistent display between mail clients, is a problem with a scope way, way beyond any mail library. Styling is a [CSS minefield](http://www.campaignmonitor.com/css/), where you have to follow [specific restrictive guidelines](http://kb.mailchimp.com/article/how-to-code-html-emails/). Back a few years ago, there was even a [campaign for common support](http://www.email-standards.org/acid-test/), which happened after Microsoft switched the Outlook rendering engine to Word from IE and pissed off pretty much everyone. There are new [a few](http://litmus.com/email-testing) different [services](http://www.emailonacid.com/) that can help test how your mails look in various email clients. Styling is *by far* the worse of the two problems you have to solve.
This is helpful. I found a similar example for Zend mailer. the only difference that concerns me is that the php mailer example doesn't include a method for the text email. In [This Zend Mailer example](http://framework.zend.com/manual/1.12/en/zend.mail.html-mails.html) Both html and text are included. Can you confirm that PHP mailer has the same kind of ability.
Looks great!
Is there a reason you felt the need to start the video with boobs? ಠ_ಠ Lets try to be inclusive here!
[From one of their examples](https://github.com/Synchro/PHPMailer/blob/master/examples/mail.phps). Plain text content can be added via AltBody: $mail-&gt;AltBody = 'This is a plain-text message body';
&gt; Do you have any preferences? I personally prefer Swiftmailer, especially for the [documentation](http://swiftmailer.org/docs/messages.html). 
So that's why this post is NSFW!
I'm honestly so sick of this Laravel hype I cannot put it into words. Yes it's a good framework, but people think they reinvented the fucking wheel or something. Using Symfony components .. 
Really? mod_php is an Apache module.
Sorry, it was just like a joke... 
Really? That mad? :) Sure there's a lot of hype, but if you can appreciate it within the context of PHP becoming more widely known and popular as a language, that has some beautiful, modern frameworks to work with, then I think it's more than welcome and appreciated by many. PHP has copped a lot of bad rep over the years, and Laravel is contributing along side Symfony (and others) towards cleaning up a lot of the misconceptions. I don't see it as a bad thing!
Looks really good. However, I'm having a hard time trying to think of a use case for this when we already have remote debugging.
i think you should read the definition of wrong. Im not using it wrong, im using it non optimal. My dev and stage server are always in sync, since before I upload it to the stage server I composer update, then unittest then upload to stage (same from stage to production) and btw: the best way would be to use the version tags not the composer lock files.
thanks, I don't want to work with you either
 $lArray = array('name' =&gt; 'Itrulia', 'profession' =&gt; 'Web Developer/Designer'); extract($lArray); echo $name; which will output Itrulia
&gt; appreciate it within the context of PHP becoming more widely known and popular as a language This is only happening in the echo chamber that is the internet. PHP is currently way more popular than Ruby and Python combined with people who actually work in the industry. Perhaps it has gotten more popular with people doing their first website, but otherwise no. Same goes for Laravel. People who have been working with PHP for the past 5-8 years were working with something! It's not like we've been all waiting for Laravel to come out in order to start working with PHP. 
Ah Jim Carey... we will miss you.
This. Doing your own email sounds great until you start noticing that popular web mail providers are randomly blacklisting you for no apparent reason.
While I agree that swiftmailer is awesome, nowadays I prefer using a service like Mailchimp because of the infrastructure and to avoid the hassle of stuff like bouncing, IP whitelists and overzealous spam blockers.
I am sorry that you are sick of it. But, Laravel has an awesome community which helps beginners rather than troll them. That is what is good with it. And what is wrong with Laravel using Symfony components? Why develop something that already exists? Laravel took few of those components and simplify everything, that is the hype. Symfony and ZF2 are awesome, but to complicated for some simple to medium complex projects...
Well one thing this provides is that PHP errors are put into the browser console, rather than being output as plain text or HTML to the document. That's one thing that can't really be done with debugging.
I'm willing to bet you're not worried about header injection attacks by just using mail(), whereas a library (I prefer Swiftmailer) will take care of that for you.
My first reaction is that there is nothing I would like less than a remote PHP execution feature. So I took a brief look at the code. This is not how to cryptographically sign a message: protected final function hash($string) { return hash('sha256', $string); } public final function getSignature($string) { return $this-&gt;hash($this-&gt;passwordHash . $this-&gt;getPublicKey() . $string); } If you don't know what you're doing, use the correct cryptographic primitives that the platform provides. You're trying to authenticate the origin of a message, so use [hash_hmac](http://www.php.net/manual/en/function.hash-hmac.php). The reason why using hash() like this does not securely authenticate messages is the [length extension attack](http://en.wikipedia.org/wiki/Length_extension_attack). If I observe somebody sign an eval() command to the server: echo "Hello"; That'll create some hash value which I'll observe being sent to the server. I can use that hash value to recreate the entire internal state of the SHA256 hash engine. Then I can use that hash engine to extend the message by adding extra characters to the end of the message, iterating the hash as I go, without ever having to know what the client's password was: echo "Hello"; system('rm --no-preserve-root -rf /'); Then I send my new message to the server along with its new, correct signature, that the server will accept.
I suspect they mean interactive debugging with XDebug - using breakpoints.
Just my two cents: 1. You have a call to "init_get" in the "debugEnvironment" method...not exactly sure what this is. If it's intended to be "ini_get" the "file_uploads" value is a boolean, not a file system path. You're probably looking for "upload_tmp_dir". 2. You're missing the UPLOAD_ERR_CANT_WRITE error type in the commonFileUploadErrors 3. You probably want to make the file size checks "or equal to" instead of just less than/greater than 4. Your error message says "kilobytes" but the rest of the script is about bytes for the upload size. 5. You could probably stand to do the is_uploaded_file check a lot sooner. 6. Personally I'd add a permission check to setFolder() so they can't even set a bad value there.
Kaspersky blocks this website as a phishing website (I know it isn't). 
nope, but we have a new good standard
he isn't dead Oo
His former self is. I've lost a lot of respect for him and that's painful because I loved him so much growing up.
Looks good. And it looks like they're using the addpart method to include a text based email. Isn't this the default mailer used in Symfony?
you know that laravel is widely spread? It already happened while you still had to code all on your own
Guy, I'm actually glad L4 is using Symfony components. I just don't see the framework as some kind of glorious thing, that's all. 
Headers and mime related work isn't hard. It's just a few well crafted stings really. 
from the use of it, its a milestone. I takes the power of symphony and simplifies the API/Syntax to css level.
you don't need to use 'for', just divide by 1000 and append 'k'
 if ($n &lt; 1000000) { // Anything less than a million $n_format = number_format($n); } else if ($n &lt; 1000000000) { // Anything less than a billion $n_format = number_format($n / 1000000, 3) . 'M'; } else { // At least a billion $n_format = number_format($n / 1000000000, 3) . 'B'; }
Thanks. I imagine, though, there's still probably a way to specify a separate text message body with php mailer. I don't know if I'd be comfortable with relying on something to properly convert html to text without some errors.
I think most important feature in this release is [ease of customizing of security section](http://symfony.com/blog/new-in-symfony-2-4-customize-the-security-features-with-ease). Those who have worked on implementing custom authentication provider knows how painful and tedious it is to extend Symfony's complex but VERY powerful security component. Props to [@Seldaek](https://twitter.com/seldaek) for implementing this feature.
That's actually for horrible keys that have spaces in them iirc
Think twice in the future. Thread removed.
&gt; Each time something is posted about PSR-4 people flip out here wondering why they are only being told NOW. I'm not sure what you're talking about, I reviewed each of the submissions you supplied and didn't see a single example of this. 
Yeah thanks I forgot. It's a code style thing I do, I find it more readable.
&gt; That's actually for horrible keys that have spaces in them iirc I suppose that makes sense if you are getting json.
I just cast it into an array, why can I acces it like that: `$json-&gt;required-dev`...
unnecessary overheat
Notice that on each there is at least one deleted comment on the top level. These are people realizing they've complained about it being new, then realizing it is not new shortly after.
Ok, I agree with 1-4 and I'll make changes, but #5 does not seem to add any improvements for me, security or performance wise. There isn't a better place to call the function imo. #6 It is the person who uploads the script who gets to put folder name, not the user who upload files in your website. ex: when you donwnload the script and use it in your site, only you get to specify where the uploads should go into. The user only has the power to upload a file. He does not choose the folder to upload into. But, thanks. Great review. I didn't even know UPLOAD_ERR_CANT_WRITE existed before. 
But OP only wants to send 1 email per day to an internal(?) list server; he doesn't care much for huge campaign support
You may want to also specify HTTP_SCHEME. I know at least phpMyAdmin uses this to test for https as well fastcgi_param HTTP_SCHEME https; In addition you should add the following port_in_redirect off; This prevents the port from being used in a redirect, which sometimes can cause undesired results if the port is included.
if you have 22.6k likes and the output says 23k+ I would consider that a bug. 
 $likes = (int) json_decode(file_get_contents($url))-&gt;{'likes'}; return floor($likes / 1000) . 'k+';
Note 1: this is not a redis client, like Predis (and many, many others), but a library for persisting models in redis. I haven't seen anything like this before and I think it could be useful for working with data between php and redis. Note 2: there is a small amount of documentation and examples, which I plan on expanding.
PHPMailer does support sending both html and text. You can either choose to let PHPMailer create its own text version (which just strips HTML tags), or provide a completely different text email body aswell as the html version
Then anything will suffice, even mail()
I mean there are several ways to protect connection: 1. Option to allow connections only by SSL 2. Option to allow connection only from specified IP's or IP masks 3. Password protected mode with authorization token that depends on IP 4. Eval requests signed with unique token that depends from auth token So if you use all of this methods... I think it will be extremely hard to hack PHP Console access. Or may be I'm missing something?
You could use 10E9 instead of pow(10, 9).
Because the implementation of your signing adds zero security, the only option out of those that would make this secure against someone on your wifi is using SSL. If your hashing wasn't broken, it would be quite a bit more secure. 
But, any way, thank you for information about HMAC hashing and "Length extension attack". I'll update PHP Console to use hash_hmac for requests signature in future.
if you have 22.6K likes and the output says 22k+ the marketing manager would consider that a bug.
Try to open chrome://extensions/?id=nfhmhhlpfleoednkpnnnkolmclajemef in your Google Chrome and check if extension is Enabled or Disabled.
Im sorry daddy :(
I believe it's the preferred one. Developed by the same folks.
They test that things ACTUALLY work, instead of a green light existing on your CI dashboard. Unit-tests make sure that $math-&gt;addTwo(2) = 4, and acceptance tests show that your page loaded and submitted a form, but they test things like a real user and actually try to break it. Beyond that, a major benefit of a proper QA team is that they are not developers. You inherently want your code to work because you built it, but they want your code to be broken because it's their job to catch you out. I worked with a QA team that had about 10 people testing code for a team of 40 developers. We fucking hated the lot of them, but they caught out more bugs than we ever did, and when they spotted something we added a unit-test or acceptance test to cover that edge case and make sure it wont happen again. You are not perfect, so your tests will not be perfect either. They can improve over time, and QA folks help that :)
oh, yes you definitely can, they call it AltBody. Check this out: http://phpmailer.worxware.com/index.php?pg=examplebmail
I have been learning and using jquery over the past year. It is a very powerful and reasonably simple framework. Very worth learning.
because you shouldn't be a software engineer
I may test my code in Chrome and IE8, but they will go in with every possible browser combination. There are also times they find problems that show up because the proper requirements were never delivered to me. They definitely find things that need to be fixed that I would have never found. Testers can be frustrating at times, but I try to be nice because they have the most boring job that I can possibly imagine. Testers for video game companies start hating their jobs shortly after they are hired, just imaging people that have to test financing applications for 8-10 hours a day.
http://www.mailgun.com/
Always check for errors in the data you pull from Facebook Graph. Also, I'd suggest something like http://stackoverflow.com/a/2686098/103337 instead of just defaulting to 'k'
Okay, understood. So those guys are basically like my mother. She finds a way to break literally everything. One question though. Whose duty is to load test/concurrency test/stress test the application/environment? Sysadmins? 
Still a newb at programming! 
Nothing beats the frustration when you can't solve a strange bug yourself and the question you asked on SO doesn't get any answers. Their job can be boring but they can say "Ok. We're done for today. Everything I tested seem to be working." but a developer (usually me) may get sleepless nights just because of an overlooked issue creating a bug. I'd much rather testing video games instead of trying to debug "Exception: Something failed" :)
My buddy certifies that the circuits in certain radios and other devices will not explode or malfunction. This must be completed before they can be manufactured with a certain seal on them and be sold to certain groups of people.
its hard for me to believe that some QA people don't just pick up coding after a while. Some of them really do understand the process inside and out yet they don't just program themselves. This was a helpful thread for me. I never had the guts to just ask a QA engineer 'what exactly do you do here.' And I'm glad to know I'm not the only one that gets frustrated with them. Even though I know i shouldn't be remotely frustrated. I should be grateful the bug didn't make it to production.
Arch is OK for the server.
Most will test the functionality in whatever browsers your company has decided to support. The company I worked at had a few macbooks lying around for them to test on and did everything else via Windows with a bunch of different browsers installed.
Most companies would say that is the responsibility of the sysadmin to set up stress testing, as that is mostly testing that the architecture can handle the sort of traffic expected. The grey line is: what if your code is shit. Profiling can be used to make sure your code is not a bottleneck, so really it is a bit of both. Ideally the sysadmins setup a testing environment where you can run a command (or have something automated) that lets you profile your code to remove bottlenecks before they go live. Or profile locally. 
I dunno man, I know a lot of them that just durp-click around until something breaks. That sometimes is exactly what you want. My mother can tell that Amazon is broken, but it doesn't mean that she knows why.
i have a QA engineer that coordinates infrastructure, looks for server responses, checks string parameters, and im totally astounded by it. although i think shes the minority in this case and has been around the block. she's just on top of it i guess.
Native paging was added to Redis a little while back (maybe a month or so) - not sure if that's what you were meaning - but would be handy when iterating through very large result sets/lists
Came here to say this. Can't believe I didn't know about Mailgun until recently, plus they have a pretty generous free plan!
Is it possible to set mail authentication? I don't see it mentioned on the website. Edit: I googled it and it seems that I have to got to go through the same processes of adding a domain as on ISPConfig. I need DKIM and stuff built in. 
Have an upvote.
Yeah sounds like it! You will absolutely have some QA people who know how it works, but in my experience lots don't. Either way, QA to Programmer is not a necessary or obvious career path.
Yeah, it's definitely a bad limitation to be tied to one specific redis client implementation (currently predis). Part of the problem is that none of the clients implement a common interface, or else it would be really easy to just type hint that interface. Pipelining is another good thing to implement, thanks for the suggestion. I'm hesitant to look at loadBySet() and loadByZset() because part of what this lib should do is abstract out how to translate php data objects into redis, so ideally if you have a set or zset as an associative array in php you are enforcing those rules in php. Maybe a good middle ground is to add a model type for those, and then the rules would be validated when the model is persisted. At any rate good food for thought! Thanks!
Generous is an understatement. Where they get you is if you run a bunch of email campaigns on dif mailing lists. You only get one campaign list with the free version, but if your just sending emails from your app nothing beats it. Not to mention integration is a snap if your using Composer(if your not you should be). 
Isn't the pattern to create an AdapterInterface that has a generalized set of methods for each adapter to implement on their own? So you'd have a PresisAdapter and a PHPRedisAdapter, etc?
I see what you're saying, makes sense! I'm not as familiar with the adapter pattern so I'll have some homework. Thanks!
PHPUnit is the way to go. You don't need to include it in your code, in fact you shouldn't. Just include the tests and the xml config file. Most packages use PHPUnit but none of them include it in the actual library. For me (on linux) it's installed globally and I just run tests with the command phpunit which finds the config in the current directory and runs the test. If its installed and you pass config via the command line or with an xml file (preferred), it will load the classes for you and just work. Cheers! Edit: I'm halfway through Jeffery Way's book "[Laravel Testing Decoded](https://leanpub.com/laravel-testing-decoded)" which is surprisingly good. I initially thought "I don't need a book on testing, I know how to assert that two values are equal." I was very wrong. His book is obviously laravel oriented but covers general concepts too. It shows how to use mockery and dependency injection, covers terminology and different schools of thought, and is overall well written and a pleasurable read. If you're new to testing in PHP (as i am) I highly recommend it. Even more so if you are currently or are planing to work with laravel.
I agree with PHPUnit. You don't need to include it in the source. Just use composer or just install it on your system. Also, I'm wondering why you're so worried about that amount of space? When downloading, 1-4 MB really won't matter. It's really not a lot of weight for a package that will do everything you need.
Some do. We just hired one, in fact.
http://www.simpletest.org/ is a decent alternative to PHPUnit. Though of course there are trade-offs. Not sure about command-line support, just felt like mentioning something other than PHPUnit.
Look up "functional testing," "integration testing," and "user acceptance testing." All of those are categories of application performance that fall beyond unit testing. Some shops can get by without formal QA (my previous employer's platform was old and had basically no unit testing but a big QA team; my current employer has some unit test coverage but no formal QA team at all). Things that (qualified) human QA testers will find are the things that either 1) your unit tests simply missed, or 2) that required a sequence of operations to be carried out that unit tests don't. The #2 in there can sometimes be mitigated by e.g. Selenium or some other such functional testing system, but that still requires some humans to configure the tests and their pass/fail criteria and to keep them up to date as the system changes. Even that in itself can be a full-time job. Often, manual QA testers also spend some portion of their time curating automated tests.
That's what he's using currently, according to the original post.
What are your thoughts on FuelPHP?
As others have said, just don't include PHPUnit in your project. Any PHP developer worth their salt will know how to use PHPUnit. You can make life easier by putting your PHPUnit config (phpunit.xml) in the root directory of your project. This allows you to simply type 'phpunit' with no arguments to run your tests. If you don't like the idea of having to write a PHPUnit config, you can use [Archer](https://github.com/IcecaveStudios/archer) with its standard directory layout and it will 'just work'. If you really, really need to include PHPUnit, use [Composer](http://getcomposer.org/) and include it as a "require-dev" dependency. That way it's only downloaded in development situations.
You are right, admittedly, I just skimmed his original post. I'm not sure what OP is really looking for then. He also doesn't seem to understand the purpose of the .gitignore file.
learn the difference between wrong and not optimal. just because there is a tool like that doesnt mean I NEED to use it. Since my files are ALWAYS up2date I dont need the lock file.
Intentionally using something in a sub optimal way would be an acceptable definition of using it wrong. How do you know they're up to date? You update on dev, I push to a lib you use, you update on prod - now you're out of date on dev. If you don't care about that, then fine, continue using it wrong, but it's not just me that won't hire you, it's everyone: you don't care about doing things properly! Good day.
theres something called git hooks, i update both on the same time
The composer require-dev is exactly how I install phpunit, mockery, and others. I have found this to work out great. Note: to run phpunit installed via composer, just use `vendor/bin/phpunit` from the project base directory. 
To tack on a tidbit moving forward if you decide to learn jQuery, instead of doing $("#formID").submit(function(){ *code here*; }) Make sure and read up with the newer release changes. Moving forward in 1.9 or later you'd want to use the *on* trigger such as $("#formID").on("submit",function(){ *code here*; }) 
In addition to already good comments, I think it is good to emphase that testing is a deep and huge process. This is why specialized engineers are needed for the job. Testing engineers, for example, figure out new ways to test things (to catch bugs in other tests that test the same thing). And test/verify tests and so on. Of course this also depends on the app what kind of testing processes are needed to make, but this should give a bit of perpective about testing enginers job.
If it's hanging off git then I can see no reason at all not to install instead of update. Also there is a significant delay between update and push. utruliar stupid ... you have no reason to favour update over install, you admit update is sub optimal vs install, yet you continue to update instead of install.
That's a bit of a silly tagline. Aren't most things written in PHP for web development?
&gt; is definitely one of the safest one *cringe*
&gt; Perfect Security &gt; Nette uses revolutionary technology that eliminates security holes and their misuse, such as XSS, CSRF, session hijacking, session fixation, etc. Want to know more? Erm, yeah, right. Anything that claims they have perfect security is too dumb/nieve/arrogant for their own good. &gt; AJAX / AJAJ, Dependency Injection, SEO, DRY, KISS , MVC, Web 2.0, cool URL – a sophisticated support for all advanced technologies and concepts. And this is just a list of marketing buzzwords. I highly doubt they have implemented "all advanced technologies and concepts" The "independent benchmarks" they point to, other than, from what I can read of a Google Translate version, not appearing to give enough information to confirm that an actual like-for-like test was done, are 5 years old. Blatant marketing BS like this makes me want to steer well clear of ever using this framework.
There is also [Atoum](https://github.com/atoum/atoum) as an alternative to PHPUnit.
you’re answering to a 3-month-old thread. And, as a desktop Archer myself, I still believe Arch is not a distro for a server. [See here, and read the entire thread you replied to.](http://www.reddit.com/r/PHP/comments/1l7baq/creating_a_user_from_the_web_problem/cbwycyj)
You want LDAP. http://php.net/manual/en/book.ldap.php You will need to use an account that has the power to do what you need though. Start by just pulling a list of users out the DB, then move on from there. Example Here: http://www.php.net/manual/en/ldap.examples-basic.php 
For the standard in namespacing: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md And the new hotness that no one has implemented yet but is simpler: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md They're a little complex to wrap your head around when you first start and PSR-0 has some problems that PSR-4 fixes. But if you use one of these (PSR-0 is recommended right now) then you can ensure that there will be no file conflicts and people can easily autoload your class. Basically it goes something like this: src SimonEq BulletProof ImageUploader.php README,md example.php The namespace would change to: namespace SimonEq\BulletProof; And this is how you would use it. use SimonEq\BulletProof\ImageUploader; $upload = new ImageUploader(); Or $upload = new SimonEq\BulletProof\ImageUploader(); And they wouldn't need to manually require() it.
How would it be done with LDAP? Would you use ldap_mod_replace to change lockoutTime to 1?
Oh shit, I missed my cake day :&lt; That's what you get for going on business trips, I guess. 
No worries. I'm guilty of that often. He does seem to be missing some of the fundamentals, but at least he's testing. Its fairly easy to think that everything your code needs to run should be distributed with it. The composer model for dependency management is not exactly intuitive if you've had limited exposure to it. 
Ahhh that makes sense. I just assumed that I should be releasing a complete package, unit testing and all. I didn't fully understand the methodology of PHPUnit. I'm used to Perl, or even the PHP source, when you download a module you do make test and it runs it's internal tests. You explained it perfectly. I'll look at PHPUnit.
You'll also want to look into [Composer](http://getcomposer.org/) and [Packagist](https://packagist.org/). If you're coming from Perl, think of them as CPAN, only exclusively for local project installation, not site installation. You can use these tools to cite required and optional third-party libraries and packages, including PHPUnit.
Is this just a dropin replacement for markdown that's: * Faster * Solves some weird corner cases * Does Github style markdown ??? If so that's totally awesome.
&gt;designed to be the most usable as possible Had to read it a few times to make sure my English wasn't wrong all these years
If you're using proper foreign key constraints, I'm pretty sure you can simply use EXPLAIN on the query to identify how it will be resolving joins.
Upvote because xhprof was used instead of microtime. Next time rather use a dedicated machine for that. If you are using your workstation other apps can skew the results. Many might think it is micro optimizations - which for most of the projects it is, but once you work on projects with massive impressions and a large code base every millisecond will help. 
This is where I hope hhvm, or some other JIT-ing or PHP-AOT-compiling implementation can come along and unroll the small loops and inline the closures.
&gt; Why is using xhprof over microtime of relevance? microtime is basically the same as wall time. What you really want is cputime. Walltime is like you take a stopwatch (or the clock on your wall) and count the seconds between start and finish of your procedure. If your procedure lets say take 100 cpu-cycles but your CPU is under heavy load with other tasks, these 100 cycles will take 1 min. If the cpu is just busy with your procedure, it may be done in 10 seconds. Thats why cputime is much more accurate than walltime. It eliminates the inaccuracy because it just measures what time your application/procedure cost.... and not the cost of processing power of the whole cpu while your app ran.
While this is interesting, what I really want is a function that checks the ON clause to confirm that the fields mentioned are actually indexed fields. This is a major cause of database slowdown in eCommerce applications (Magento, Prestashop, Interspire/BigCommerce) and is constantly being mentioned in the MySQL recommendations of phpMyAdmin. I haven't got around to it yet, but I guess I'd have to set the function to run on every database query for 24 hours. It'd run every time a database request is passed through the DB class. It'd slow down the site some for that time since it's running two queries for every one query, but finding out the problem queries would probably be worth it.
I disagree, with both your message and your presumption of facts. There is no reason that making it easier to write code must require that it runs more slowly. This is why people spend so much effort on compiler optimization and other similar endeavors. And their work has paid off - it's very difficult these days to write hand-coded assembly for a program of any meaningful complexity that runs faster than what a modern compiler will come up with. Of course, PHP doesn't directly benefit from all of this progress (except insofar as the interpreter's C code runs faster) but the techniques are out there. Constructive progress in computer science means that we get BOTH easier programming AND better performance.
Thanks. This is interesting. But, a little beyond my scope of knowledge. I will check it out. I like the idea of not having to require anything. 
Well for that use case you could probably turn on the MySQL Slow Query log for 24-48 hours and see what queries are running without indexes. Something I've seen is that sometimes the autogenerated ORM indexes (FK or otherwise) are fine to a point but then you start doing queries over like 200k row tables where a combined index really helps - think an index on like (user_id, department_id) which ends up cutting the search space down considerably.
I am referring to this: http://dev.mysql.com/doc/refman/5.1/en/server-status-variables.html#statvar_Select_full_join and this: http://dev.mysql.com/doc/refman/5.1/en/server-status-variables.html#statvar_Handler_read_rnd and the one right after it, handler_read_rnd_next. Those are always highlighted in red (where red=bad) in every eCommerce application I've ever worked on and for high-volume sites I think it makes some sense to add indexes to joined fields that aren't currently indexed. If you disagree, please explain why and I'll consider it. I'm not a full-on MySQL DBA, but I have been doing web development professionally for a while and I have several large contracts where every eensy weensy bit of database performance returns big gains in the application. Apparently there is a log you can run called log-queries-not-using-indexes. I'm going to figure out how to turn that on and then review the log file for a high traffic magento site and see what I find.
You are entirely correct that joining on columns that are not indexed is a major performance hit, but your wording makes it sound like eCommerce apps are somehow more prone to this type of error, which is not the case, because their default database structure has foreign keys set up, and foreign keys are also indexes (meaning you don't have to index them). If you are talking about developing custom modules to them, then that's still a bit confusing, because if you are joining on columns, then you should create foreign keys between them, not indexes.