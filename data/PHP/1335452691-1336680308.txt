I can't even get PHP 5.4 to work. Every request results in Chrome giving me the old: Error 6 (net::ERR_FILE_NOT_FOUND): The file or directory could not be found. Which is annoying because the file is there, the server is serving HTML and my other 2 PHP installations will happily show the file.
PHP-GTK is *not* dead. It's just slow, because there are really only two people working on the project - usually one, and she's busy with her work and personal life. I've been involved tangentially with the project for years. I've been trying to update the PHP-GTK documentation, but have hit many roadblocks which pause that project for months at a time. If you are interested in the project, check out #php-gtk on Freenode. It works with PHP 5.3, and probably 5.4 as well. It's even rather enhanced by 5.3's anonymous functions (for events).
So given the choice between "a PHP release is broken" and "I've made a configuration error", you think it's more likely that all of the PHP devs and QA released a build into production so fundamentally broken it doesn't even *run* PHP, and the rest of us are all collectively hallucinating a working build? ... *Seriously?*
You can still run out of disk space storing them in a DB. The other option is to offload the storage of sessions to the end user. One trick is to store the session in a cookie, encrypted with AES-256 with an HMAC. This only works if you're not storing lots of data in the session (then again, if you're storing more than 4k of data in a session, odds are you're doing something wrong and need to rethink how you persist state).
cough -'bloated'- cough...
No, and I didn't say that so take your bad attitude and fuck off. If you were capable of reading you'd notice that I said that "*I*", as in me, the person typing this right now, not the PHP team, "can't get PHP 5.4 to work".
I whipped this up. Shorter, less parameters, more output options, no conditionals or looping constructs, and faster by 30-50% (according to microtime()). function byteConvert($bytes, $float = 2) { $pow = floor((strlen($bytes) - 1) / 3); $bin = round($bytes / pow(1024, $pow), $float); $dec = round($bytes / pow(1000, $pow), $float); $b2 = array('B','KiB','MiB','GiB','TiB','PiB','EiB','ZiB','YiB'); $b10 = array('B','Kb','Mb','Gb','Tb','Pb','Eb','Zb','Yb'); $b2str = array('bytes','kilobytes','megabytes','gigabytes','terrabytes','petabytes','exabytes','zetabytes','yetabytes'); $b10str = array('bytes','kibibytes','mebibytes','gibibytes','tebibytes','pebibytes','exbibytes','zebibytes','yobibytes'); $out['base-2'] = $bin . $b2[$pow]; $out['base-10'] = $dec . $b10[$pow]; $out['base-2 string'] = $bin . $b2str[$pow]; $out['base-10 string'] = $dec . $b10str[$pow]; return $out; } edit:formatting 
The issue has been resolved and this is exactly what happened. He said there were about 20 GB of log files that had taken up all remaining space on that drive.
Glad someone could learn from my pain :-)
I agree. Using DOMDocument would be the way to go. Native &gt; 3rd party unless they have proof saying otherwise.
I'm not opposed to updating Apache, I can just run it alongside the existing install. At one point this machine was running IIS7, Apache2.2 (twice) and nginx with PHP4, 5.2, 5.3.8 and 5.3.6 respectively. Our Apache config is very simple. I wish nginx and PHP would play nicely on Windows though. Actually I wish our clients would use linux friendly VPNs. I'm sure it's a bad php.ini though, I just can't figure out how.
I see what you did there.
That's the link I summarized in the OP :p
Are you using the default php.ini? It might be worth seeing whether there are any troubleshooting resources on the PHP website for this issue, I haven't the time to check right now.
I think I'm using the default development one, yeah. Obviously I can't check right now since I'm not in work.
Features or it didn't happen.
The more I think about it the more I think this is the right solution.
We can only hope it's dead. Trying to develop a smooth UI without threading just isn't worth the hassle.
Don't worry. This is part of a tool for developers. I just wanna prevent Elevation of Privilege. Looks like escapeshellarg is what I need. For the record here's a screenshot of the use case: http://dl.dropbox.com/u/4163/emergence-search2.png
As a PHP developer that's currently learning Ruby on Rails I'd say don't convert your website to Ruby on Rails. I absolutely love Rails and I have learned so much from it as a web developer. But where it truly shines is rapid development. It gets things done fast which is ideal for start ups. To convert a site from PHP to RoR to me feels like it would be going backwards. You'd be making more work for yourself and that's not what Rails is about. You would also be dependant on your new developer more so than a language you're comfortable with. That said, from what I've read Ruby 1.9.3 and Rails 3.2 have made huge increases to speed / efficiency of the framework. So IMO try out RoR for new projects not converting your current one.
 &gt;Besides double quotes, what else needs to be escaped to make this secure? For starters.. http://php.net/manual/en/function.escapeshellarg.php http://php.net/manual/en/function.escapeshellcmd.php
Ok. I completely misunderstood what you were trying to accomplish. I read it as you were trying to grep *the query string* for something.
Seemed to work fine for me with nginx 1.0 ^_ ^. Great that support was added so fast though. How is Apache 2.4 working out for you? Are you running with mod_php (I guess because of the 2.4 specific compatibility issues)?
PHP and Ruby are very different animals. With very different histories and surrounding communities. I have switched from PHP to Ruby a few times, because of the nature of what I was working on. One community supported it better than the other. Restful APIs. I have also taken smaller projects and switched to Ruby just for the refreshing experience and alternative perspective that it provides. Also - I did not take a PHP project and Convert it 80% through. I took a PHP project 15% completed and said ... "this would be better in Ruby". ---- You're not just switching to Ruby in your case either. You're switching to a framework. Rails. That's important to understand, it means that you don't do things YOUR way anymore. You do things the RAILS way. Like with CakePHP or Codeignitor in PHP, you operate within your environment, you do not fight against the current. ---- Ruby AND PHP have crap developers. Don't be fooled into stereotyping them by language. The company that attracts talented developers isn't one that says "We do RUBY! We're AWESOME!", It's the company that says, "We have a goal, I don't care what you write in to reach that goal, as long as we can reach it." - Also talented developers are attracted to attractive salaries OR cool ideas. So if your idea/product isn't super interesting to a developer, you better pay them well. ---- Picture this: Let's say you hire a Ruby developer. He writes 50% of what you need. He leaves. Now you have to take over what he did. You HAVE to learn Ruby on Rails. In my opinion you should not hire out of perceived necessity. Hire based on the task at hand. You don't hire someone whose only qualification is that they speak Russian if none of your clients, projects, documents use that language. You would only do that if you were in a bind and NEEDED a Russian translator on site at all times. Do you need PHP? Do you need Ruby? What's that? It doesn't matter? Well...then stick to what you know at the moment so you can pick it up if you had to, stay with PHP. If you knew Ruby I'd say go with Ruby. But as far as business decisions go, I can tell you that I've worked at several companies who were .NET houses and decided to go PHP, I was brought on, I left because the pay didn't increase after a year (against promisses on paper), and they ended up contracting out to me at my freelance rates (great for me, horrible for them). Don't back yourself into a corner. Find talent, hire the talent, feed your stallions and reach your goal.
&gt;I'm a website owner and I develop in Yii so in short, I think I'm working with more or less the "best" PHP has to offer (e.g. PDO, OOP...etc). Yii is far from the "best" PHP has to offer. Off the top of my head, Symfony2 and Zend Framework 2 are heads and shoulders above Yii. &gt; A lot of really great websites are built in rails (e.g. Twitter, GitHub, Hulu). [I do not think much of Twitter is still on Rails.](http://engineering.twitter.com/2011/04/twitter-search-is-now-3x-faster_1656.html) &gt; Rails developers are "more" expensive but if you hire one are you not guaranteed a certain level of quality where as with PHP there's a lot of crummy devs out there? I've met some truly amateur Rails developers, and some extremely talented PHP developers. This argument reminds me of when I played WoW: The horde were convinced the Alliance were awful players, and vice versa. Simply being a Rails developer does not make you a better developer. As far as salary, you have a much larger pool of lower-level PHP developers than you do Rails developers, so supply is much higher, thus compensation may be lower. I, however, make a good salary and there's many PHP developers than make $110k+. But sure, go ahead and pay more for this perceived quality, it's your money. &gt; If I want to create a company that attracts talented developers, why not work in ruby so my company stands out? Sure, it'll stand out in that sea of Rails companies that can undoubtedly pay much more than yours can. It sounds to me like you're in love with the *idea* of Rails, simply because it's unknown to you and it's exciting. Good luck with your business, though.
File size, it really depends on what the file is. 
&gt;Character sets and string lengths can all be done using regex. ಠ_ಠ Ok, now you're just being contrary. 
You would need to setup a many-to-one relationship with a Category entity in Doctrine. [Many To One Mapping](http://docs.doctrine-project.org/projects/doctrine-orm/en/2.0.x/reference/association-mapping.html#many-to-one-unidirectional) I would assume it will generate it for you. This is how you want to associate it anyway!
I've actually done that using annotations -- I've got the mapping working and I regenerated the entities and it created a foreign key in mysql... that part seems to work! What I don't see is how to get my CRUD form to include a select dropdown of the categories...
Don't rely on validation for security. Validate input that must be in a special form: email addresses, ZIP codes, items with maximum length, etc, and then sanitize everything. 
Take a look at these links: * [How to embed a collection of forms](http://symfony.com/doc/current/cookbook/form/form_collections.html) * [How to customize form rendering](http://symfony.com/doc/current/cookbook/form/form_customization.html) * [Using Data Transformers](http://symfony.com/doc/current/cookbook/form/data_transformers.html)
Nope, I updated to 5.4.1 today and it just works with the default config...
You should feel lucky; most freelancers can't find work at all. 
A "well known brand" would probably hire a security specialist who would most likely not be on Reddit asking this question.
This sounds like a javascript or /r/phphelp issue. Anyway, the easiest solution for you would probably be to &lt;form id="form1"&gt; &lt;input type="text" onkeyup="if(this.value.length == this.maxLength) document.getElementById('form1').submit();" maxlength="30" /&gt; &lt;/form&gt;
Scumbag /r/PHP members: Guy asked to be contacted via PM with examples of work... ... They post asking the guy to contact them. Pretty sure the first task of any job is following directions.
Try use this: &lt;textarea name="whatever"&gt; &lt;?php echo file_get_contents('add/profile.php'); ?&gt; &lt;/textarea&gt; file_get_contents() reads an entire file and sets it as a string. Then all you need to do is echo out the string. If you have to do this on something earlier than PHP 4.3, you can use fopen()/fread() to do the same thing but with more code.
Yeah, I use Symfony almost exclusively. I just haven't tried Yii so I was hoping for a comparison. Maybe this weekend I'll check it out
I think I might love you both. Works like an absolute dream! 
*really*? I know of only a couple freelancers who aren't working, and it's mostly by choice (choice of tech/project/etc). There's perhaps one or two more who have no work not by choice I can think of, but it's also because they actively *do not* market themselves. They never attend any local/regional events, they don't have a functioning website (or it's missing contact information). 
&gt; so take your bad attitude and fuck off Oh, the irony.
I tried it about a month ago with Apache 2.4, PHP 5.4 and mod_php with some dev lamp stack. Didn't work very well. Had bad issues pages not loading due to the request being reset. Was really frequent so I had to go back to 5.3. Will give 5.4.1 another go though.
What I am currently doing is rejecting the entire form if the input doesn't match what I am looking for. Is that enough to protect from code injection? Can input from a form get around the validation step? ex. if input matches regex continue else return error Since this is a simple form, not a login system, I won't be outputting information, do I need to worry about a XSS type of attack?
You're hired!
If you are overloaded, consider increasing the rate you charge. You're probably worth it. Can I ask how much you charge?
update (in a new post instead of an edit, to ensure you get an orangered and see this): I had run into the exact __toString() thing you showed me and was apparently too hard-headed and/or stupid to think "oh, I should add that to the entity"... somehow I thought just returning the name wasn't going to do anything because that was just **one** name, not all the names... DUH... of course it's just one name... it gets called multiple times... I got the form submitting, but my Symfony-generated CRUD was still angry that CategoryID was null, so I hope what I'm doing here in my createProduct class is right, something to the effect of the following, before confirming the form is valid, and persisting the entity: $entity-&gt;setavCategoryID($entity-&gt;getProductCategory()-&gt;getId()); This works... but I'm wondering if I should really have to do it? Maybe I'm doing something wrong somewhere -- Doctrine handles a lot of stuff automagically so I'm sort of wondering why this isn't getting populated that way when i've set up the relationships... am I doing it wrong? This has been a definite case of total brain lock because I was getting frustrated... you broke down the wall, and for that I thank you very much! I'd offer you a free copy of [Reddit Enhancement Suite](http://redditenhancementsuite.com), but that's already free... so please enjoy some Reddit Gold on me.
My primary reason for preferring phpQuery is being able to target DOM elements using CSS selectors instead of xpath. But maybe DOMDocument can do that?
those who cannot do, teach. those who cannot teach, troll.
* http://php.net/manual/en/class.domdocument.php * http://www.php.net/manual/en/class.domelement.php * DOMElement getElementById ( string $elementId ) * DOMNodeList getElementsByTagName ( string $name ) * http://www.php.net/manual/en/class.domxpath.php * http://www.php.net/manual/en/domxpath.query.php As reycledheart said above. You can use the query method of XPath to query like you would with css selectors - although not identical to CSS selectors - it is very very close.
For the record: I am a PHP dev; I love PHP. This is not my *actual* opinion of PHP. It's just that PHP is an easy target for humour because so many people hate it :D 
&amp;#3232;\_&amp;#3232; ~~If you honestly believe this, or don't have anything good to say about PHP, then don't post it here. To be clear, there are valid criticisms of PHP that should be discussed here, and I personally don't like mindless pro-PHP fanboyism even though it's not really discouraged. However, this is the one subreddit, I feel, that shouldn't tolerate someone saying "herp derp PHP sucks" circlejerk without evidence as to *why* it sucks. Put it in [/r/programming](/r/programming) where stuff like this *is* tolerated. Downvote.~~ ~~However, if you're making fun of those anti-PHP circlejerkers, then it was good, and I'll change mine to an upvote.~~ **Edit:** My sarcasmometer doesn't work before 10:30 am, apparently. **Edit 2:** Also, I didn't see your follow-up post as I was writing this post at the same time. Had I been five minutes later, I'd've not written this post and you'd have just gotten another upvote.
Changed, sir. Enjoy your upvote!
It just wasn't clear enough for me. OP clued me in, so I changed it like I said I would. Also, not crying, just sick of PHP ignorance in general on both sides.
PHP.
&gt; This is not my actual opinion of PHP. Ah, but that doesn't stop both points from being objectively correct.
$db-&gt;set() allows you to add insert/update parameters. Calling $db-&gt;insert() or $db-&gt;update() runs the query.
I'd just shunt them over to the new page, put up a small header that will load them back onto the old page and place a cookie in their browser to show the preference. When users come to the page, check the cookie to see which version to show them. I use the same thing for the mobile version of my website basically. If it is a mobile device, show the mobile version, unless they choose the regular version. In which case remember to show them the regular version.
never used cookies before, what exactly would i be looking at directing it? i'm mostly self learned with php and html so there are huge holes in everything i know. basically i know what i need to do, just not a clear idea how to do it.
I'm pretty sure it's: &gt;Those who cannot do, teach. &gt;Those who cannot teach, teach PE.
I prefer 4.
Oddly enough VB is also widely used in companies that need to quickly roll things out. You can usually tell when using them. 
Yeah, me too; so maybe I'm not the best one for giving advice! But here's what I do for mobile: extract($_GET); if ($_GET['mobile'] == "standard") { setcookie ("mobile", "standard"); } elseif ($_COOKIE['mobile'] == 'mobile') { setcookie ("mobile", "mobile"); header( 'Location: http://example.com/mobile' ) ;} if(!isset($_COOKIE['mobile'])){ if ($detect-&gt;isMobile()) { if (($detect-&gt;isBlackberry()) | ($detect-&gt;isIpad())) {} else { setcookie ("mobile", "mobile"); header( 'Location: http://example.com/mobile' ) ; } } } So basically, I extract from GET to see whether the user is coming in from the mobile website - i.e. they came in on mobile, but prefer the regular. If so, set the cookie. The cookie variable name is "mobile" and the value is "standard". Then I check to see if there is already a cookie set as mobile. If so, I reset the cookie - not sure if this is necessary now that I'm looking at it! - and shunt them over to the mobile version. If there isn't a cookie named "mobile" set, it will detect whether they are on a mobile browser using some irrelevant code, and if so send them to the mobile site. I think you could easily modify this by putting a link at the top of your new page to see whether they want to go to the old page with a variable in the link. Check the variable on the old page, and if it is there, set the cookie. On the new page, check for the cookie, if it is there, send them to the old page automatically. Read up on cookies in the php manual for more information! Also, anyone that is reading this that thinks I'm doing it in a fucking ridiculous or wrong way, please let me know! 
Thanks
goddamn i hate php, that does mostly what i want, i have coded in c and feel like im fish out out of water with php, all the code seems retarded. even simple things dont seem consistent, fucking mess of a language. thank you for the help, kind of drunk now, i need to go trough it tomorrow.
Yeah, but which language? You can write ASP in VBScript, JScript and Perl. I used JScript back when I wrote ASP code. It wasn't bad, the main issue was a poor standard library (had to purchase basic things like an HTTP lib!).
It's what PHP devs refer to as "taboo".
I came to post some snarky remark about the picture, but this pretty much shut me up. Nothing can be said in defense of any criticism, or in defense of any language that can't be shot down with this list.
Ouch
Thanks for the reply. I'm totally with you when it comes to the importance of JS and actually understanding how it works. I actually quite like the language despite its flaws. Regarding PHP and OO, I've got a bit of a headstart there as I've formally studied OO. The challenging part for me is understanding how the whole infrastructure fits together and the sheer number of tools and technologies. I prefer python as a language but PHP seems to be more likely to land me a job.
Well, it sounds like you will be fine, then. If you get OOP then you are most of the way there, in my opinion. Just build some sample projects (that cover the bases of web dev... authentication, CRUD, forms, validation, routing) in each framework and you will likely get enough of a grasp of them to work with them and see which ones are better suited to which tasks.
Those who can't give good guidance become principals.
Why don't you use the pcre functions built into PHP instead of making a risky call to the shell?
Which did you go with? I'm building with Yii now.
Code Igniter. It's easy and well documented though I have to say I do not like some things about it (like session handling and setting your own 404 page is not intuitive). Fine for a fairly straight forward site, though. I tend to prefer Zend Framework but I was not the main guy on that project so my final input on choice was limited.
This came in 5.3, 3 years ago.
Those who cannot do, teach. Those who cannot teach, become analysts
What do you think about CakePHP?
- Bjarne Stroustrup 
If you have such a low opinion of PHP, why do you still come here?
I didn't downvote but only saying 'awesome' is just inane and adds nothing. Also that's what the upvote arrow is for.
Thanks for Reddit Gold! The category id should get set automatically. Without seeing your code my best guess is the category entity can't get the id. This could be because it does not have a getId() function or more likely the relationship is named incorrectly. Here's a [link](https://gist.github.com/2514404) to the entities and controller code I created using the interactive generators. Have you seen [this video](http://symfony.com/blog/symfony2-getting-easier-interactive-generators)? When I first started using Symfony2 I encountered a bunch of issues, including the __toString() function, that took a long time to work out. Don't get discouraged. Now that I'm experienced with the framework I write (mostly) bug free code fast and enjoy it. 
Why not use the inner platform effect to build a better one?
 - Abraham Lincoln
If you don't use a framework then you should use a form library. In the past I've had some good experiences with PEAR::Quickform, though I had to loose much control on the HTML I output. Large projects like [Moodle](http://moodle.org) use it. I recently used its successor, [QuickForm2](http://pear.php.net/package/HTML_QuickForm2), and I recommend it. It's its still beta, though it has 0 known bug. With this, you'll have to write your form in PHP. You'll gain automatic validation and error messages in both JS (client) and PHP (server), as well as many useful features, like the ability to freeze some fields or to easily load data into a form. 
Try some hemorrhoid cream for that butt hurt.
PHP got me out of a dead-end job and into the professional world (where I'm feeling successful), even though I don't have a degree. My first language was JS, and then I learned ASP Classic as my first "server" language. Since then, I've been using PHP to fill that role and I feel like the luckiest guy alive...and hopefully I never have to touch VB again! So, call that a ditto for me :)
It's awesome, I got that it was merely good-spirited fun even before reading this, but kudos for making it clear. I often defend PHP but I got a good laugh out of this (and I'm still trying to deduce the symbolism of the mosquito on the cover). p.s. you've seen [the O'Reilly maker](http://www.oreillymaker.com/) right?
You should at least read the [official doc on file uploads](http://fr.php.net/manual/en/features.file-upload.php). For instance, this will tell you that checking the mime type does not increase your security at all. You should of course filter the file extension with a white list.
The mosquito? Don't read into that too much. It's nothing about being a blood-sucking, disease-spreading nuisance. Honest.
You would like [PHP Sadness](http://www.phpsadness.com) [](/rdsad "PHP makes me sad")
PHP GTK? What a horrible idea.
thanks again for the reply - I'll check out the video for sure! I think I realized what I was doing wrong... I'm relying too much on being able to tread ahead, then backtrack and figure out where I've gone wrong... I'm home now so can't look at the code, but I think I created an ID field, then was creating a *second* field that was associating back because I was frustrated and copypasta-ing my way through.. derp moment on my part... 
You just have to search http://blog.nitropdf.com/2011/04/forms-submit-button/
True. Though 5.4 adds the ability to use $this in closures by using [bindTo](http://php.net/manual/en/closure.bindto.php). This is arguably more javascript-like.
How do you make money using PHP and JavaScript? Do you acquire clients of your own and do work for them?
It was years ago that I did anything with phpBB, but doesn't it compare the last visited timestamp against the creation date of the posts to determine which posts are new and which aren't?
Honestly, look at /r/forhire
Thanks, didn't know of that subreddit.
any idea what i would add to simply ask first time? i guess i need to just set it one and where you are detecting it on the code. crap, i need to do some reading when i get to work, why am i doing this on my free time, crap. cant brain today! i see you answered this already, thanks.
I meant for my question to come across the other way around sorry. I'm occasionally looking for newer coders to hire.
What about python?
Both. I work for others on larger (i.e. higher paying) projects and take on smaller clients as I find them.
Ok, here we go. There's 3 issues to resolve as I see it. **Changing passwords** This is how Crashplan operates if you use one of their more secure options: * For each user, generate a random **UserKey**. This random string will be used to encrypt/decrypt the data. This **UserKey** should never change. * Encrypt the **UserKey** using the user's password. Store the encrypted **UserKey** with the user's account row in a separate field to their password. * When a user changes their password, the user must also enter their old password. The PHP script uses the old password to decrypt **UserKey**, then re-encrypts UserKey using the new password and saves it. * Obviously you can't reset a forgotten password using this method, the old password must be entered. If the **UserKey** somehow leaks due to a software bug (the user never needs to see it), then you can decrypt **DataSet** (requires password) and encrypt it with the new **UserKey**. * Both Crashplan and SpiderOak operate this way. They clearly state that you can't reset a forgotten password, you have to upload your data from scratch using new passwords and keys. This can be resolved however in section 3 if multiple users can access the same **DataSet**. **Add new data to DataSet without password (not updating existing data)** * Instead of one **UserKey** used for both encryption and decryption, use public+private key encryption. The public key is stored with the user row unencrypted. The private key is encrypted as in the above section. * If you're not familiar with public/private key encryption basically it's this: Public keys can be seen by anyone. Anyone can create encrypted data with the public key, but not decrypt it, the private key is needed to decrypt the data no matter who initially created it using the public key. This is how people can send each other encrypted emails without a shared private key. * Each user needs their own set of public+private keys. **Shared group data + resetting passwords** * **GroupData** is a **DataSet** shared between a **Group** of users. * Each **Group** has a set of group keys: **GroupPublicKey** for writing/encrypting **GroupData**, and **GroupPrivateKey** for reading/decrypting it. * **GroupPublicKey** is unencrypted and accessible to all users in the group, so you only need one copy of it. Public keys can also optionally allow people outside the **Group** to add new data to **GroupData**, but they can't read it back or edit it unless they're added to **Group** (given access to **GroupPrivateKey**). * Each user in the **Group** has their own copy of **GroupPrivateKey** stored as **MyEncryptedGroupPrivateKey**, which is encrypted using their individual **UserPublicKey**. * The chain of decryption for a group user to read **GroupData** is: **Password** -&gt; **UserPrivateKey** -&gt; **GroupPrivateKey** -&gt; **UnencryptedGroupData**. * When a new user is added to **Group**, an existing user in the group can authorise **NewUser** to access **GroupPrivateKey**. **ExistingUser** clicks a button, and **GroupPrivateKey** gets decrypted into memory from **ExistingUser's** personal **MyEncryptedGroupPrivateKey** and then saved to **NewUser's** personal **MyEncryptedGroupPrivateKey** (encrypted using **NewUser's** **PublicUserKey**). * Lets say **ForgetfulUser** forgets his password. You might as well delete his **UserKey** and all his **MyEncryptedGroupPrivateKeys**, as they're useless now. Generate new **UserKeys** for him as in section one. To regain access to each group he used to have access to, he'll need to be re-authorised as in the point above by an **ExistingUser** of each group. * Optional: For an extra layer of forgetability, you can create a dummy user account for each **Group**. The users can share the password to this account. This should only be needed if everyone in the group forgets their own passwords though, so should be used if they really want it. It would allow them to re-authorise their personal account if they forget their personal password but remember the group one. At no point do the users ever need to see any of the public or private keys. They just need their own login password. The PHP code deals with all the key stuff. I've been thinking about this before, and only came up with the section 3 now. Curious for any feedback from **anybody** on this. Have I missed anything? Have I got it wrong?
&gt; GoDaddy ಠ_ಠ
You've gotta know what a crumpet is to understand cricket.
I'm sorry, I didn't catch that. I can't read.
I honestly don't know anything about SSL certificates, really, so I can only offer advice on other things: * Don't ask for (or record) information you don't need * Hash for authentication. Encrypt for secrecy. * If you are talking about things like credit cards, never store them (except for one https POST request, maybe). Use a third party like PayPal to handle that stuff for you. The legal implications of CC storage are heavy. * I don't see why you would need to use MySQL itself to do any encryption, but you could. * Use bcrypt.
To actually answer a bit constructively: You'll need an SSL certificate per domain, unless you get a multi domain certificate. That can be a bit expensive though, so just get started with a free SSL certificate from startssl.com or something like that, and let them all log in on the same domain. edit: Also, multiple SSL certificates means you'll need multiple IPs unless you use SNI. SNI exclude IE&lt;7 though. Encrypting the MySQL database seems excessive. Are you doing multi-tenancy on a single database, or do you provide a separate database (and even install?) for each client?
ha ha thanks! If I use a subdomain for each seperate client can I get away with a single certificate? i.e. client1.mydomain.com, client2.mydomain.com I'll create a separate DB and install for each client.
luckily I don't need to store any credit card or bank account information! bcrypt looks interesting thanks!
Hah, no worries. Thanks for posting actually, I hadn't come up with a solution to this for my own stuff until now. Made me re-think it all.
Oh okay i'll have a look at wild-card certificates, I hadn't heard of those before! Again I hadn't heard of suPHP, that definitely looks interesting. Thanks again for the advice
There are a couple methods to try: 1. Do nothing. Unless you are storing CC#'s, SSN's, or medical records (ie: legally sensitive stuff), you're almost over-engineering your application. The fact that you are hosted on GoDaddy means you're already starting off behind if you're worried about security. 2. Store a private key in the database for every user, encrypted with the user's username/password pair. Use two tables, one for the username/password pair and private key (`users`), and the other for the actual sensitive data (`user_sensitive`). On successful login, decrypt the private key and store it in session. Use a low session expiry (10 minutes?), so if an attacker does get access they'll only be able to get ahold of unencrypted private keys for currently active users (notwithstanding an attacker altering application code to siphon user/pass pairs silently). 3. Dont encrypt data. Use a similar two-table approach as above, but don't use MySQL because it's a piece of shit. Use PostgreSQL or DB2 (or, *gasp*, Oracle) with ODBC Row Level Security, having the sensitive data table protected by RLS. EDIT: -5 points? lol. Now I remember why I don't post replies in r/php, everyone claims they know everything but no one says anything to counter the suggestions given.
Linode or AWS EC2 (or similar). If you're willing to go so far as to encrypt a database, get the fuck off a shared host. A VPS is a ton better. Colo is probably overkill, though you might shop around. My ISP donates hosting space to various community organizations. Find a Systems Administrator that is willing to work freelance and let him or her do the configurations and maintenance to secure the box if you aren't capable or unwilling to do so yourself. Even if you do applications programming pro-bono, you should still charge a minimal monthly maintenance fee to cover non-labor expenses that you incur, like systems administration and hosting costs. 
Love it. It's easy^1, really full-featured, and very nice to work with. Symfony2 is definitely my framework of choice, even over Yii and Code Igniter. I've been using Symfony for about five years now on all sorts of large-scale and smaller projects. **1** Provided you've previously used a web programming framework of some variety - total noobs might have a hard time getting out the gate at first.
After a *quick* glance through the code, it doesn't appear to respect robots.txt. What's up with that?
odesk.com
use this. !! ^^
Is there anything in particular about Yii that, after using it, makes you want to look elsewhere?
Yup, I sure enough screwed up in my attention to detail on that one. Not sure that makes me a scumbag, but hey, you're entitled to that.
Gotta love open source! 
It wasn't only you, the first five post in this thread when i opened it were all people asking OP to contact them. I just found it amusing. 
I like Yii, actually I really like Yii just it seems not a lot of North American developers are developing in it. I want something well engineered, built on PHP 5.3, and with a vibrant community. Maybe Symfony2 has Yii beat in these areas.
You have "limited experience" with Symfony2, yet you already stumbled on several cases were the documentation was a bit misleading, or at least far from complete. That doen't make your recommandation very vibrant.
This is how I've handled mine in-house. The biggest pain was creating a simple-enough internal scheduling handler. For our purposes everything that can be run "every n (minutes/hours/days)" is here, with jobs requiring odd schedules done via manual cron entries. I should honestly improve it, come to think of it... There are no methods in place for catching hung jobs or preventing overlap. Plus I'm sure I can come up with a cron-like scheduler now... Yay, a project!
hows that going? The link you gave says that "The current release of this project is not suitable for production use" 
I wouldn't say it's misleading. It's just very powerful and there's always more than one way to do something of which the documentation shows you one way. As you gain more technical experience with the framework you realize there are easier way to do things that require less work but aren't perhaps the easiest to understand. I have the same issues with Drupal really, too many options isn't really a bad thing. It can just be confusing.
&gt; I find it strange that Symfony2 is probably one of the most used PHP frameworks, but its community seems completely mute. [A Week of Symfony](http://symfony.com/blog/category/a-week-of-symfony) aggregates a lot of the community discussion that takes place. Quite a bit of that is in extensive discussions on the bugtracker (3886 closed issues, 261 open), and in pull requests (76 outstanding). Symfony2 is the number one most forked PHP project of any kind on Github. At the bottom of each week's summary there's a bunch of blog links. I don't know how much cultivation of those links they do, as opposed to just aggregation. They also cover official Sensio blog posts in the main body text. And all of this doesn't mention the mailing lists/groups. The general one gathers about 1000 posts a month. Symfony-devs, the "internals" list for people improving the framework, is getting about 100 posts but seems to flare up to five times that when a lot of changes are going on.
Strtotime
Perhaps I'm just a bit inexperienced with working in an MVC framework, but I found it quite difficult to get started with. The documentation seems a bit lacking, so it's hard to find a place to get started. I've been plugging away at a project in SilverStripe, and I'm preferring it greatly.
I started using Symfony2 about a year ago. Previously, I had developed in Python using the Pylons, Pyramid, and Django web frameworks. When I was checking out different PHP frameworks I was drawn to Symfony2's architecture and design choices. **Pro:** * The templating engine (Twig) is very similar to the Django templates or Mako templates. Simple enough for a designer to read and edit, but still powerful. * Symfony2 heavily uses namespaces and encourages a clear and consistent structure to the projects and source code. * It also gives a standard for installing/updating dependencies which works better than PEAR (but not quite as good as virtualenv+pip). As a subpoint, the plug-in architecture (called bundles) is probably one of the best parts of Symfony2. KnP Labs and others have crafted some really well designed and easy to use drop in feature bundles (i.e. OAuth2 Server). * The documentation is good, it is just very dense. You may have to though it a few times just to learn all the features. * Doctrine is a good ORM. And it's improving all the time. * The modular structure allows you to swap out parts, for example some people use Propel instead of Doctrine. You could use a different template engine (or even plain PHP) if you wanted to. **Con:** * Unit testing is there, but there isn't any official documentation for ~~functional~~ mocked unit tests. * Forms are a powerful feature but they are a little too rigid. And they don't support AJAX form submission out of the box, you'll have to write your own json responses and accessing the individual parts of a form in a template is non-intuitive. * Routes and Templates should have smart scoping, so that I could use relative "names" instead of using the fully qualified name every time. ~~* Templates can't be in nested folders. It keeps the template directories relatively flat, but I'd like more organization in some cases.~~ Anecdote: I picked it up quickly, I would say after a month I was rather confident in using even some of the more advanced features of Symfony such as creating service containers. But I recently joined a team of old Windows developers (ASP and ASP.net background). It has taken them 3 months to get up to speed with the framework, some still aren't completely self-sufficient. But I guess that could be part of learning a new language, a new framework, and modern web development practices all at the same time.
Bc I'm an old dog that forgets the new tricks ;)
I am in the UK as it happens, and I will serve to the UK as well, so that's at least one simple aspect to deal with. Thanks for the links, even more for me to read! 
[here](http://webscripts.softpedia.com/script/Miscellaneous/PHP-Photo-Battle-41419.html) is a free one I found on softpedia, looks like only the admin can upload photos though...
Well, I get the feeling Symfony2 shows now the symptoms of way to many frameworks out there (and even programming Languages). Now it is not like 50% are using X now 10% are using Y 10% Z 10% F... if it is good? I dont know. But this leads to the often mentioned small "community". To Symfony2: I use it since a few weeks. The more I know, the more I like it :)
It's all about bundles and decoupled architecture, awesome forms component etc
Say you're a novice php developer who has worked with no frameworks. What is the best way to learn Symfony2? Keeping it relevant to this discussion, the amount of time it would take a complete novice to get up to speed with Symfony would lend credit to documentation, available sources for learning, etc.
You can do it simply with if/else blocks, this is an example of how you could implement it : [link](https://codetique.com/K2TuVyOF). However, I don't see where you're using the $email variable in that code, nor do I see where $message comes from.
How well does it work, anyone thoroughly test it? I've used Sphider before but it's getting that outdated feel to it. Also can this one be ran from a CRON?
I think you've missed their coverage of Unit testing http://symfony.com/doc/current/book/testing.html .
Things that should be fixed in this benchmark : * Inserting random generated data. The time it takes to generate random data may vary, why not insert something static ? * Using mysql_real_escape_string with MySQLi. Normally [this is what should have been used](http://us2.php.net/manual/en/mysqli.real-escape-string.php), mysql_real_escape_string requires a mysql_connect resource - although optional, one has to be set in order for it to function. * The SQL query. Shouldn't it be : INSERT INTO test_table (Code) VALUES (?) Instead of : INSERT INTO test_table SET Code=? ?
No matter which settings I try, I get this "Parse error: syntax error, unexpected T_STRING in /home/branndon/iil1.com/crawl/execute.php on line 2"
You pretty much got the help about the validation thing. Just fix your Location-headers to be complete, and all is well - as such they are not valid and might work or not. That is, make them complete URLs with the protocol, host and full path. 
Don't know who makes MyBB Forums, but their next major version (no telling when it is going to come out), will be built on top of Yii.
That's not what I want though. Perhaps "functional" isn't the right word. I've seen bundles use mocked objects so that they can test a function or a method. I don't want to have to use the testclient to login for every action I want to test it will be too slow. For webpage flow testing I have selenium.
To put it in a polite way, Symfony2 is the framework that is finally making me sick of PHP. Anyone who's tried to do anything serious about caching (like caching query results instead of pages, and invalidating precise cache keys when entities change) with SF2+Doctrine has surely pulled half their hair off.
It's a shared server. Not local, 5.2.x No problem, thanks for the script.
1 : Well, I suppose even if there was a difference, it would be too minimal to make a difference. 2 : I know mysql_escape_string does, but I'm not sure if mysql_real_escape_string works without the connection. Are you sure error reporting isn't turned off in your server ? Still, even if it's working, I don't think it's necessary since you're storing an MD5 hash. I understand you added it anyway for testing purposes, but maybe you should try it with strings that actually need to be escaped ? 3 : I stand corrected, then.
mysql_real_escape_string() is faster. Prepared statements don't give you any additional security beyond what mysql_real_escape_string() does.
I wouldn't do something like this in PHP even if it did use a C parser. It's the wrong language.
This is something that all PHP / MySQL devs should know about since the "conventional wisdom" is that prepared statements are faster, which is generally not true. Hopefully you'll get a lot more upvotes and some attention. I actually just completed a very similar test using my actual website's database for a more real-world test case, and my results were about the same as yours. Here's what I found (for Mysqli functions using Mysqlnd and MyISAM): - Using a single prepared query is 3x slower than just using query()/real_escape_string(). - If you're submitting the same query with different data each time, a prepared query is still about 2x slower after 100 queries. The break-even point is around 10,000 queries. Any less than that, and you're better off using query()/real_escape_string(). I also ran the same tests using PDO instead of Mysqli. The results were very similar (a single PDO prepared queries are about 2.5x slower than direct queries). **The bottom-line is avoid using prepared queries in most cases if you're concerned about performance, except when submitting a very large number of identical queries at once.** Personally, I also find that prepared queries are more complicated to use and trickier to debug than SQL that has all of the values inline as part of the query. Too many developers are using prepared queries because they heard a rumor that it's somehow faster, but for most cases that isn't true. I hope this gets some more attention and PHP devs start to realize that they shouldn't be bothering with prepared queries when direct queries and faster and easier.
Just a reminder, if you're concerned about performance, don't use prepared statements if you are only submitting a query one time. Direct mysqli (or PDO) query() calls are about twice as fast, and much simpler too. Just make sure you use mysqli real_escape_string() (or PDO:quote()) on any data from variables.
Can you expand on that ? I'm currently doing my first Symfony2 app (to try it, coming from ZF) but left caching for later. I was under the impression that Doctrine caching was somehow separate from Symfony and dealt directly by Doctrine. Reading the docs, caching, was one the thing (with lack of internationalization &amp; others things) that left me a bit puzzled (only http &amp; esi cache, wtf ?). 
Very good suggestion regarding escaping. I will try to change the test case to add some unescaped characters. Thanks. But I do not think this will influence the test anyway, as both types of queries will have to escape the strings... deserves testing anyway...
CodeIgniter got rid of the PHP4 specific stuff in version 2. FuelPHP was written by some of the same developers as CodeIgniter. I'd recommend either.
RoR devs can name their price here in London. In the states it might be a different story. Haven't lived there in a while so I don't know the hiring climate.
I don't know why people are downvoting you man. IMO, there is no need to use a framework if you are building a small Ma and Pa store website.
zend framework 2's coming soon, maybe you should try out the beta so you're ready for it when it comes out?
I'll recommend two frameworks: CodeIgniter, the main reason is the documentation which is really thorough. The other framework is Laravel. it's a PHP 5.3 framework, is backed by a company (so there is a lot of active development on the framework, CodeIgniter is similar backed) and the documentation is good (google Dayle Rees for a really good tut).
What if you shared that library of code with others (say a few friends)? In exchange they would improve it when needed. Your collective efforts would allow you to get your work done even faster. Of course, when working with others you probably need to set some standards to make sure you all do things the same way to avoid repetition and maintain compatibility with other code ... you see what I'm getting at? Most popular frameworks are written by groups of smart people, you as an individual cannot compete with that (even if you are really, really good). Why write everything yourself when there is a better solution out there, for free. Edit: spelling
I would personally recommend the Zend Framework, but I do believe it's considered a bit more difficult to get into initially than some others. I started with Cakephp and then moved on to Zend. Others have recommended CodeIgniter to you, and perhaps it would be a good place to start as I do hear the documentation is very good. I would recommend going down the framework route, even if only for the experience of learning some strong techniques and design patterns that are used internally within them. I've become a better general php developer just by reading through the source of the Zend Framework.
*coughs* http://framework.zend.com/manual/en/zend.openid.html
You're right, I just didn't want to put too much time into explaining because I think it's probably a troll.
It's just that I've inherited code like this before and it makes me want to bang my head against a brick wall. 15 functions - it's impossible that this is a well organised general purpose library. I'm guessing here that you have these massive function calls like function doSomething($var, $var2, $var3 = null, $var4, $var5, $var6) And then probably have all kinds of switch statements or if/else statements in there that determine what route the code takes or what functionality comes out of the function call? I'll take another guess and guess you're using the global keyword for stuff like database connections etc? Am I right or wrong?
I see a half-dozen CI posts already, but I'm more of [Symfony](http://symfony.com/) kind of guy, personally. It's got every thing you'd ever want out of a framework (and probably more, too) - I rarely have to write *any* piece from scratch anymore. Symfony 2 also has support for [Composer](http://nelm.io/blog/2011/12/composer-part-1-what-why/) (and CI does not), finally dragging PHP into the modern age. Edit: I should mention the learning curve on Symfony 2 is a little steep. The [installation procedure with Composer](http://knplabs.com/blog/symfony2-with-composer) is not exactly the most well-documented thing in the world, and if a package fails it doesn't really give you any explanation even with verbose turned on.
Zend is a great framework and I use it all the time, but I would absolutely not touch it with a barge pole if you've not used frameworks before. It is perhaps the biggest learning curve of all the frameworks I've used. Sounds like you've already spotted all the pitfalls yourself though.
I'm not sure how this is relevant? Are you saying developers shouldn't use frameworks because Zuckerberg didn't? Or are you saying the code he wrote (which has more than likely been rewritten several times by now) on his own was better than code written by MySpace dev's?
Not sure if this is the answer you were looking for, but [PHP4 support was removed from CodeIgniter with their CI2.0.0 release in January 2011](http://codeigniter.com/user_guide/changelog.html).
Seconding Symfony. There's a bundle for just about everything, and once you understand the ORM (Doctrine, so it can be used on another project outside Symfony), it's a breeze.
A good framework will allow you to take the core of it only and build components on top or replace built in components with your own. I personally like CakePHP. They've done a good job in the 2.0 refactor and update to just polish the framework all around and make it more consistent.
I would recommend checking out [Yii Framework](http://www.yiiframework.com/). It's a PHP5-only MVC framework which has been around for a while, has a strong community, and is being actively developed with daily commits and frequent releases. I found this framework very easy to learn (much easier than CakePHP IMO). It has strong documentation and even a couple of Books which are very well written. If you are considering Symfony, CakePHP, or CodeIgniter I would highly recommend checking out Yii. Also, most all of these frameworks will give you what you are looking for. I found that most people learn and are more comfortable with various frameworks due to either which one they learned first, how a framework is organized, documentation, etc.. So it comes down to experimentation. I recommend downloading a few of your most promising-looking frameworks and run through their 15-minute blog tutorials. You'll get a good idea for the feel of each framework, and a better understanding of how it may fit your needs. Hope this helps! Edit: Link Formatting &gt;.&lt;
Cool, well if you're serious, this is a very good book: http://www.amazon.co.uk/PHP-5-Objects-Patterns-Practice/dp/1590593804 It can be a little dense at times, so I'd read it carefully and definitely try out some of the examples as you go along with it. For me, the whole OOP thing didn't really 'click' until I understood the real usefulness behind interfaces and abstract classes (basically, polymorphism). It's something that I just didn't get, and I'm talking about having been using classes and objects for over a year without understanding why an abstract class would ever be a good thing. Polymorphism is one of those things that I'd read about before but just couldn't quite "get". It's one of those things that I just didn't click with until I came across a problem in a real world situation that could benefit from it. I had a go with it and suddenly a whole new world opened up. So here's the problem: I was asked to output csv based reports from our system at work. It was clear from the initial meeting that there would probably be other reports coming in the future, and some of these might be in different formats such as json or even excel. Here's where some of the key differences between OOP and the traditional (almost always messy and unorganised) PHP mentality really come to shine. Instead of explaining the underlying theory behind it, let me show you the end result first: I ended up with a system that could create new reports really easily. As soon as a new report was created, it was INSTANTLY available in csv, json or excel format, and I had an absolute guarantee that adding a new report would not break anything in my existing system. Here's some typical use cases: 1) Create a daily summary report in csv format: $report = Library_Factory_FinancialReports::create(Library_Factory_FinancialReports::DAILY_SUMMARY_REPORT); $writer = new Financial_Report_Writer_Csv(); $writer-&gt;write($report); 2) Create the same report in json format: $report = Library_Factory_FinancialReports::create(Library_Factory_FinancialReports::DAILY_SUMMARY_REPORT); $writer = new Financial_Report_Writer_Json(); $writer-&gt;write($report); 3) Create a monthly financial report in excel format: $report = Library_Factory_FinancialReports::create(Library_Factory_FinancialReports::MONTHLY_FINANCIAL_REPORT); $writer = new Financial_Report_Writer_Excel(); $writer-&gt;write($report); Do you see how easy that is? This is achieved through polymorphism and abstract classes. Whenever you want to create a new report, you simply create an object called a 'ReportReader'. This object ALWAYS returns it's final data in a set format, so the writer objects can understand them. They will always be compatible. For this reason, I can write a writer object just once, and so long as it works, it will work with all reader objects, and vice versa. I want to create a new format for my reports? Just create a new writer, and once it's finished, ALL reports will become available in that format. Want to create a new report? Just create a new ReportReader object (this object is what is set to the $report variable above - it's returned by the Library_Factory_FinancialReports::create() factory method), and this report will instantly be available in ALL formats that are available in the system - and even better, it will never touch any existing code (except to add a couple of lines to a switch statement in the Library_Factory_FinancialReports::create() method to return the correct ReportReader object). I can test each class independently and I can add and remove things with ease. This is due to polymorphism. I can explain it a bit further if you want... It basically comes down to thinking about problems in a more abstract way, and then working out a common interface that can be guaranteed between all objects...
It is indeed a Doctrine thing. The first issue that annoyed me: there is the useResultCache() method that you can use when building a query, but nothing ready to invalidate the related cache keys, or to specify in a repository which cache keys you want to invalidate when an entity is updated. I ended up doing this work with a Listener that listens on postPersist and postUpdate events, and then filters on the type of entity. It's not much of a satisfying solution, but it does get the work done. Second issue I encountered is fixed in Doctrine 2.2 and related to managing entities out of cached results. It was a mess before. Then the more recent issue is the impredictible result of making a JOIN with an entity that has One-to-One relationships. Imagine an app where you have Car, Order, Factory. An Order can have many Cars, but has only one Factory. When you would search for Car entities and JOIN Order, for some situations that I haven't been able to identify precisely (though they are related to eager fetching) Doctrine would then do N queries to find and manage the Factory entities linked to the N Order entities; even if you don't need or want to use this information. This forces you to either limit your fetching to Car entities (SELECT c FROM Car JOIN Order) or limit the eager fetching to the field that you need from the JOINed table (SELECT c, o.customer_id FROM Car JOIN Order) which gives you a specific array instead of a result set. I18n is present in SF2 though. I dislike the choice of Xliff when Gettext would do fine, but it's forward-thinking.
Thirded for Symfony. Not the most lightweight framework, but comprehensive and easy to develop with. For OP's criteria: * Documentation/Tutorials: Excellent 9/10 * Resume Experience: Fair 7/10 (It's not as in demand as some others, but is a specialty for that same reason) * New hotness: 8/10: Symfony 2 was recently released Some important points that were overlooked IMO: * Proven: 8/10 Symfony is the backbone of some very large web sites. * Mature: 9/10 5+ years (more?) in development. Flaws: * Symfony assumes you're building web sites and is geared for that. You probably are (since you're learning PHP), but heads-up just in case.
1/ I'm not really proficient with D2 but your issue may have to do with lazy loading ? The thing is with Doctrine, writing DQL queries ends up usually more efficient than fetching entities / models. 2/ My grip with i18n is that there is translations, but nothing for number and date localization ? There is a bundle for that I guess that I need to try. Now my experience with third party bundles is that I often waste more time trying to make them work (knp lab than writing them myself (KnpMenuBundle comes to mind).
for starting dev, definitely codeigniter. being a starting dev, if you jump to symfony you're gonna be rather frustrated and discouraged... there's just so much to learn, and so many little gotchas.
I'm afraid I have to agree. It's really hard to get up and running from scratch if you haven't done it a half-dozen times or used a large scale framework before.
Yeah you're probably right but that's not why people are downvoting.
If you don't have a lot of experience, I might suggest CakePHP. While it's not the most elegant or powerful framework out there, it is one of the easier ones to get started with and I think a new developer would be less likely to be overwhelmed by it. It's a good introduction to modern MVC web development without getting confused by things like namespaces and anonymous functions, etc. Then you can move up to something else if desired. Personally I like Symfony2 but have yet to do a major project with it. I also like Fuel for lighter weight projects.
 &lt;select name= \"weightType[]\"&gt; or &lt;select name= \"weightType" . $i . "\"&gt; and repeat for each of the other ingredient inputs. Right now you're overwriting each value with the next. Adding the brackets will make it send as an array of values (the same way you would do a group of checkboxes). Appending the number makes them each unique, and then you can just loop through `$_SESSION['Ingredient_amount']` again on the processing side. 
Yes, the one-to-one issue is related to lazy loading. I found no way to make it really lazy. And I am using DQL for all repository methods. For dates, I'm not sure yet, but we'll face the issue in due time here…
You should start [here](http://symfony.com/doc/current/book/installation.html). It might be daunting to someone with no MVC experience, but it's a good introduction to the framework.
I would argue that CodeIgniter is easier to get into, and lighter weight.
His question is about learning. Why, when you're starting out, pick something that is going to pigeon hole you? Are there better frameworks for getting things done in PHP, yes, but their paradigms don't translate over well to other languages or frameworks. CI is, IMHO, the most central PHP framework. Which makes it best for learning. If you want to get into a debate over which framework is the best over all, well that's a completely different argument in and of itself, as you'll need more info to know which framework to recommend. Hell, I use my own that I wrote 4 years ago when I do projects in PHP these days.
[man 8 cron](http://www.manpagez.com/man/8/cron/) [man 5 cron](http://www.manpagez.com/man/5/crontab/)
You have to record all the items the user has read in the database. Cookies will only be valid for that computer and that browser, if either of those change the user will not have a record of which items they have read. Depending on how you've written your forum and how people are going to interact with it you may need to consider caching/storing totals for different threads to reduce the db load. Keep in mind how you write this though as the time spent calculating the total to store may impact user experience.
Yeah, that's my opinion though, so, whatever. I like Zend, and *once you get used to it* it's pretty easy.. but I think it's a steeper learning curve.
Yup, you'd set it up as a cron job, assuming you're using a Linux server. You'll want it as a server based one. In most current distros you can just toss a bash script in /etc/cron.daily that runs 'php myscript.php' If you're using a Windows based server use the Scheduler. I haven't used it in forever, so I've got nothing more specific for it.
&gt;Hell, I use my own that I wrote 4 years ago when I do projects in PHP these days. ಠ_ಠ
it's been updated to 5.3 standards. I am slowly working on some of the worst parts and getting ready to open source it.
I think the process of learning it would include all of the steps required to no longer be a novice, so the amount of time it would take maybe 3-4 years?
Heya I'm a big fan of CI also, just curious what you prefer to use for a user auth / no-frills backend? I've used TankAuth a bit, but it's.... well, lacking.
Having done a big ZF1 project last year, I thought it was terrible. If you find a problem with the framework, and need to start diving into ZF itself you often have to jump through ton of files to find out what's responsible for a certain behaviour. The layer of indirection is just crazy. Especially Zend_Application, every module that gets loaded for every request, automatically triggered plugins, I can go on.. It's funny, because when ZF started back in the day one of the things they promoted themselves was being lightweight and simple. But before it turned 1.0 they removed this, they must have realized it was no longer true. Especially in the pre-1.0 days, ZF was a bit of a free-for-all anyway, where they attracted as many developers as possible to add packages. This resulted in some very hard to use code, with just bad API's. Prime example I had to deal with (and ended up not using): Zend_Rest_Server. From what I understand a lot of that has been fixed with ZF2, but for me it still has one big flaw.. ZF seems to be created on Java principals. A lot of that logic *may* make sense in a heavy Java application, but in the PHP world where the entire application has to start up, handle the request and get completely destroyed again, it's critical to optimize for the 'most likely path' the code has to take. Rather than modules, plugins and everything being responsible for registering themselves and hook into functionality when they need to, it should be the main application (or front controller, if you will..) that loads the correct systems when needed. My last issue is that they suffer from a huge NIH syndrome. They insist on reinventing everything themselves.
if you have path dependancies, make sure you setup a shell script that goes into the directory your scripts reference: cd /path/to/files php somedir/somefile.php
I haven't used Zend Framework in years, and the project itself had plenty of problems, but I really didn't like ZF. It was too complicated IMO. I do think it would be good on larger projects, but I really feel a framework like CakePHP is excellent for smaller sites. It provides a great structure, and is robust without getting too complicated. Of course, I've had people work on my former CakePHP projects and absolutely hate it because of its complexity. I guess coming from only custom code, any framework looks complicated.
Yes. I'm a pretty smart guy though.
We seem to have more than enough frameworks already - what does yours offer that the others don't? That is - with all due respect - why bother? This just sounds too much like [NIH](http://en.wikipedia.org/wiki/Not_invented_here).
The difference in insertion time is way too minimal to be the bottleneck in a big web app with lots of queries. The reason I use prepared statements is because they're easier and less prone to human errors.
You should make a post when you do release it, because this: &gt;you put objects directly into the templates (views) ... smells decidedly like layer-bleed. And that would worry me. ;)
Not the OP but I've heard good things about [Ion Auth](https://github.com/benedmunds/CodeIgniter-Ion-Auth) as well as [Bonfire](http://cibonfire.com/) (although the latter is much more of a big deal than just the user management).
congrats!
Quit being a dick
haha, yeah, I understand ya. It's not, it makes more sense when you see it in action. Basically, it's a hmvc, and every part of the heirarchy is a 'node', or what I said as a vanilla object. Each node / object can have a model / view / control attached to it, and the views show where additional nodes should be attached via the template.
Thanks! :)
Sudo apt-get install apache2 mysql-server phpmyadmin php5;
This is either going to be very hard or very easy depending on how you've build the application so far. If it's possible to easily checkout a copy and have it running locally with a sample DB you should be able to make short work of the task. If there is no way of running the app anywhere but on the live server you're in for a world of pain. What I tend to do is build and test locally on a new git branch (using a private github repo). Once I think I need to see how everything works with live data I deploy (git checkout) the branch to a staging server - because I'm using EC2 I just have to boot up an identical AMI to my production application severs but using a cheaper instance (micro generally). The staging server connects to the same DB as the live applications but doesn't write anything to it (if you're app needs to do a lot of writing you may need to think about this aspect of it) so I can usually see if there are any problems such as long running queries and such. Once I'm happy with how the staging instance works I'll terminate it and merge the feature branch into the master branch, then run an update across all the live application servers. But this isn't really the best way to do it. It's just the way I'm doing it because I'm the only developer at present and it's not going to put me out of business if I take the whole thing down for a few minutes by accident. What would work better for multiple developers would be to use a proper build process rather than just git. I've looked a Phing for this purpose and it looks good. It's not CI software - it just takes care of build but will allow you to run unit tests and other processes before anything hits a live server.
For Enterprise: Symfony2 (it has the enterprise sticker, and firms like that) for "fun" and personal learning I suggest Yii. For easy peasy going and if you dont want to learn OOP: CI
What? Not really... it just not for "beginners" which want a "rails" like experience...
This question would be more appropriate in the [Sublime Text Forums](http://www.sublimetext.com/forum/). People often post their [plugins](http://www.sublimetext.com/forum/viewforum.php?f=5) there too.
Mind = blown! :)
Ah yep, my bad. I went down the wrong rabbit hole in their github repo. Quite possibly the same with Laravel, I'll have another look.
Use Github, make every developer work on their machines. Share just the right amount of data if you are handling sensitive information. eg, the bare minimum sql dump that they will need in order to run your website. That way you can review the changes made by them, test them in your development machine, and then when you are sure it won't break anything important, push to the live server.
[Laravel](http://laravel.com)
[Don't use path info.](http://blog.martinfjordvald.com/2011/06/why-path-info-is-the-worst-php-feature-since-register-globals/) Users don't know how to handle it, they'll get hacked and then they'll blame you. The link above is Nginx context but should apply to any reverse proxy.
Good idea. Any suggestions as to a good book?
No, that's not correct. In fact, the limit is 72 characters IIRC when using bcrypt (aka Blowfish). You are probably talking about DES, which is also usable by crypt(), but it's not the case. Just to prove it, change `$a` to `"aa"` and `$b` to `"aa\x00aa"`. Same hashes again, and the keys are &lt;8 chars.
No, because they can't be serialized.
There's really nothing wrong with this approach, though it depends on how the code is organized. I haven't seen your code so I can't judge it, and it's a step in the right direction. At least you're not copy-pasting crap everywhere! Dropping a bunch of PHP functions into a single file and including them in your scripts is a bad idea, because you can end up with conflicts and it becomes a nightmare for other developers to figure out where the code is coming from. Wrap them in a class named something like Utilities in a file named Utilities.class.php, then call it from your script as an object. Example: //Utilities.class.php class Utilities{} ... //somefile.php require_once('Utilities.class.php'); Utilities::doSomething(...); or require_once('Utilities.class.php'); $utilities = new Utilities(); $utilities-&gt;doSomething(...); A lot of frameworks eliminate the need to do even that, and autoload your utilities according to convention.
Except that null-terminated strings aren't used in every language, and they *are* low-level. crypt should be binary-safe, meaning you can pass whatever data you want into it, regardless of nulls or things that aren't even valid characters. Edit: If you (by which, I mean redditos) disagree, that's fine, but there's no need to downvote me. ivosaurus does have a point in that crypt() takes a null-terminated character array, but that should be noted in the documentation at least.
While its not in the model, and probably meant to be used the other way around. Look at the bake schema commands. I use it to generate my db to php code when going from dev to staging/live. I suppose you could manually code a schema and run it againt your dev db.
Run phpinfo() before you start dicking around with compiling. Compiling PHP is a nightmare (believe me, I've tried), and there's a decent chance that your package either came compiled with all the System V and POSIX extensions, or your distro provides a package that adds them on.
This guy gets it. When your app is a few thousand lines - use whatever framework you want, it's not going to make a difference. Choose the prettiest one or whatever flavour you like.When your dealing with something a lot more substantial suddenly a lot of assumptions that are made by certain frameworks will bite you... hard. Having things broken into components. Not relying on global state. Having a suite of unit tests. Being able to break up your huge app into smaller, more managable chunks but still allowing code to be shared. I see Laravel mentioned here. Looks nice, easy to get things done etc... but the sheer amount of global state present in a Laravel application will really make it difficult when writing apps of substance with it, and even worse: testing them.
Since OP mentioned the null byte which `\x00` refers to, I assume he wants the escape sequence to be interpreted, not treated as plaintext.
&gt; - doing this ties me into MySQL How so? I don't see how you couldn't do this with Postgres, or SQL Server equally as well. Also, cake has migrations, which are code-based ways to make basic versioned schema modifications to the database, which sounds exactly like what you're describing. http://book.cakephp.org/2.0/en/console-and-shells/schema-management-and-migrations.html
Basically, one of the reasons that Netbeans is 'slower' is *because* it can do introspection and intelligent code-hinting. Use a general text editor, and you'll get rid of the intelligence.
If I'm developing a plugin that gets deployed on an app using an MS-SQL database, the developer using the code would need to manually create another schema, or at the very least, tweak mine slightly. Developers consuming a plugin shouldn't have to concern themselves with implementation details. No doubt, I can write specific schemas for each database as needed, but if there's already a tool to do it for us, why reinvent the wheel? Schema migrations look like they'll work work if that's the proper place to do it. I guess I'm just wondering why the $_schema attribute on the model exists at all, if its not being used to generate anything. Thanks for the tip!
i really like www.killersitesuniversity.com Their PHP courses are great...and its an interactive course so you constantly get feedback!
I agree that it should be mentioned in the PHP documentation. In the English documentation, it is buried in a comment: &gt; This function is not binary safe. Any binary string containing a NULL byte (chr(0)) will not produce a valid hash.
Thanks guys, exactly what I was looking for.
Marking as read those from the past will mark any users may not have read, which I understand isn't what you want. You need to store in the database the last unread post id of every thread, for each user, if you are to offer this functionality.
Kohana. Lightweight, fast, good OOP. Love it
Things to consider: - Never modify user input without the user's knowledge. Either accept it, or reject it. - Protect yourself. Learn about [null byte injections](http://hakipedia.com/index.php/Poison_Null_Byte). - Use the [filter library](http://php.net/filter). Don't reinvent the wheel. You'll get it wrong. - Learn about [cross-site scripting](http://wikipedia.org/wiki/Cross-site_scripting) (XSS). - Never use [htmlentities()](http://php.net/htmlentities) on input you intend to store. Only on data you intend to output. - Read the [OWASP](https://www.owasp.org/index.php/Main_Page) site. Even if you're an expert, there's probably something there you didn't consider. - Use [PDO](http://php.net/pdo) or [Mysqli](http://php.net/mysqli) - [it's not hard to learn](http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers). - Take advantage of [prepared statements](http://wikipedia.org/wiki/Prepared_statements). Binding parameters will escape and quote for you. Only manually escape when absolutely necessary. - Learn what [SQL injection] (http://wiki.hashphp.org/Validation#What_Is_an_SQL_Injection_Attack.3F) is and how it works.
\x00 gets 'converted' to a value of null (00), if u put it in single quotes '\x00' is just four ascii characters
Problem being, this is just a wrapper function, not a native PHP one (although in 5.3 it's been natively implemented)
Legend, cheers
Seems to me it means that Nginx is broken, not PHP. Which is why I did not list that nginx was not a compatible web server.
What's so nightmare-ish about 50 runs at compiling only to have your hopes and dreams of "it will work this time" be crushed? lol. I definitely second that compiling PHP is something you want to avoid. It's definitely not for the faint of heart.
This is really easy to do yourself....
The filter library link is wrong. [Correct Link](http://www.php.net/manual/en/book.filter.php)
ZF2's architecture is like ZF1... sf2 on the other hand have completely re-thought everything from the ground up... and its much easier to use (I use both)
Oh god I need this on a tshirt
Yup, if you don't want to learn every bit of SQL injection and vulnerabilities, you better use a framework that has it all done for you.
And then you get to query strings, because you can't do rewrites for whatever reason. I'd rather see the PATH_INFO. I guess, I can use REQUEST_URI, and strip out index.php when routing. I don't see how that has any material advantage over PATH_INFO.
It won't get your users hacked because they're stupid. That's a pretty big thing.
[There you go](https://bugs.php.net/bug.php?id=61888) :)
I'm sure it is easy once you figure it out, but I haven't and I don't see anywhere in the documentation where they provide examples.
Ah fair enough. I'm a big fan of FuelPHP but not tried Laravel yet. Having tried Symfony, Code Igniter, Kohana and CakePHP, FuelPHP and CI are definitely my faves. But I guess that's the whole point, it's personal preference and they all have their strengths and weaknesses. 
No it's not really something you can fix in your code. I've probably been too unclear about this.. it's not necessarily that your framework is insecure it's rather that your framework forces users to have path info enabled in their PHP install and if they then use it in combination with something like Nginx then they have a situation where they need to handle the case where users might upload an image and then just add /index.php to the end of the string. Again, your framework is not insecure but the problem is that PHP does not care about sending stuff to your framework. If it's passed a SCRIPT_FILENAME variable of /uploads/image.jpg/index.php then it'll happiy load /uploads/image.jpg as PHP. Thus why you need to take care of such a situation in your web server or simply disable cgi.fix_pathinfo in you PHP install. The reason I say users will blame you is not because it's your fault but rather because it's never their own fault. I have seen this first hand where they'll automatically blame whatever software they're using despite the fact they should have done basic research before trying to manage a server install.
&gt; Use the filter library. Don't reinvent the wheel. You'll get it wrong. IMHO the filter library is so incomplete and poorly-conceived that you need to do your own anyway (or use that provided by your framework).
&gt;I'd like to learn Unit Testing and know this community's opinions on it. Unit testing is a great addition to have in your arsenal of skills. You should learn how to use and understand PHPUnit as soon as possible.
Bookmark
For database entry, prepared statements. Always. Either through the framework I'm currently using, or PDO. Depending on the nature of the data I may use additional methods to verify or clean it up (eg: intval(), FILTER_VALIDATE_EMAIL, etc...) For displaying to the end user, it depends on the use case. At the very least it'll usually involve htmlentities(), though again if using a framework there are often included features to escape user data (eg: Zend_View: echo $this-&gt;escape($this-&gt;foo);)
Don't PHP-CLI scripts have the time limit automatically set to 0 ?
By optimized, I mean the code doesn't have any public/private/protected declarations, the use of var for class variables, initializing objects by reference, etc. I suppose a better term is older syntax. The codebase is pretty large. I believe you're very right about working toward an upgraded version. The reason why I suggested a rewrite though is because there is a lot of code that is dependent on edited core files that are included in the application libraries. :s I've spent hours debugging issues that were caused by the edited files and not realizing it until stumbling upon it.
Is it good practice to keep your live site as a git repository? That way any updates can just be pushed to it?
But you wouldn't do this if you had your own dev shop would you? If you had a team of five developers in one place what would you do?
W3SCHOOLS. Teaching people to write crappy code since 1909. Seriously, their [intro php/database tutorial](http://w3schools.com/php/php_mysql_insert.asp) teaches you to write code using mysql_* functions that is vulnerable to SQL injections $sql="INSERT INTO Persons (FirstName, LastName, Age) VALUES ('$_POST[firstname]','$_POST[lastname]','$_POST[age]')"; if (!mysql_query($sql,$con)) { die('Error: ' . mysql_error()); } FFFFFFFFFFUUUUUUUUUUUUUUUUUU W3SCHOOLS /rant
http://w3fools.com/
Are you by any chance using gmail? I see you are using the php mail() function. We have had some problems with this for a couple of days now as well. Seems like others have the same problem cause I keep receiving mails with incorrect headers looking the same. Looks like mail() somehow adds a newline between some headers, breaking them. Before gmail ignored this newline. But since a couple of days ago it seems it doesn't do this any more.
Just out of curiosity. Why are you choosing to email your dumps instead of storing them on a hard drive?
I didn't get that impression at all.
PHP is one of *the* worst languages to try to obfuscate. Just host the app yourself.
Just ignore the tag. As someone who only started Unit Testing in the past year, it is a skill that might require some extra time but it repays it self from the very first time you run your tests against your code.
&gt; Indeed. Try running the file from the command line yourself. One small correction though. Running a cron script from command line may not yield the desired result. cron(8) creates a distinct execution environment that is often very different from the environment of a command line shell. In particular, environment variables and initial working directory may be different. This may cause the target script to succeed when it should fail, or fail in a way that's different from the failure that happens in cron environment.
Any of the more popular frameworks will be able to handle multiple frontends from a single backend very easily. Just have multiple index.php files (or whatever it is called) and set the location of the system files in each.
It seems that way to me. If you give someone some PHP files that don't require a magic binary to decode, then anyone who has been doing PHP for more than a few weeks will be able to extract the source code. About the worst you can do is add extra spaghetti and obfuscate variable names. This is the same situation as with stopping people from saving images. Any measure will only be effective against people with very little knowledge.
If your plan is to host multiple ecommerce sites from a single control panel, I would strongly suggest using Magento. They have support for multiple sites out of the box, along with a host of other useful stuff.
If the server craps out, I want to have a local backup.
Thanks. Fixed it.
You make good points, I'll be sure to note those and bring them up when we have our next project meeting. Thanks!
Double checking. I generate the default test file with NetBeans which essentially creates a test for method for each method in the original class file. I then tweak/implement that before running the tests.
Try writing your unit test first, then write the code to make the unit test pass. In my opinion it is easier to write the unit test based on the requirements, then write the code to make the tests succeed. This way you have a clear moment when the code is done since the unit tests will work. I think writing the test first, so that when you run it they all fail, will help you trust your code and tests more, although it may be a bit difficult to get used to. Also, watching the tests slowly go from failure to success is rewarding in its own way :)
Create a script that runs your code through the PHP [tokenizer](http://php.net/manual/en/function.token-get-all.php) and removes all whitespace and replaces all function and variable names with random strings. That will keep people from inspecting and changing your code easily. You can put as much effort into this as you feel appropriate. Obviously, people will still be able to copy your code around. If that's not what you want then you can create convoluted algorithm that looks to the host header and compares it with what it should be. With some obfuscation and the previously mentioned encoding it'll make it a little more difficult to copy around. Obviously, none of this is foolproof but even the slightest complication will do a lot to keep honest people honest. 
Also, did you turn on error reporting? Can you reproduce the error outside of its normal intended execution? If you can reproduce the problem, then you can start to fix it. **Side note:** Please be *very* careful when executing a script located in a website folder as root. If an attacker gained write access to that file (via some other exploit on the site) he/she could easily root your server. 
That's a very good point. Hopefully he can reproduce the error somehow, either by directly running it or via logging the cron job. 
Phar files come to mind for distribution, but you're never going to stop people from taking code once it leaves your servers.
Haha...actually there's a test folder under /sys/Query/ which has the real tests for the database library. The lack of tests here is because of an old DB library. I bounce around between my various projects, and I've neglected the tests on this project :/
Bind Parameters. That'll handle a great deal of it right out of the gate.
It is my experience that the people who are most adamant about "encrypting" their php scripts are often the people who don't have anything worth encrypting in the first place.
&gt; but don't use MySQL because it's a piece of shit. Use PostgreSQL or DB2 (or, gasp, Oracle) with ODBC Row Level Security, I think I pretty much covered it. MySQL's Row Level Security implementation is designed horribly, aka It's a piece of shit. You have to install it as a 'plugin' to MySQL, and the last time I tried it (~10 months ago) it fucked up everything that didn't use RLS. SELECTs were coming back NULL randomly, and I was able to access data I explicitly configured myself not to be able to. It's a hack solution. Use a RDMS that cares about things it's users should care about and not one that's been late to the game with it's pants on backwards 9 times out of 10. Also, in case you cared to notice, my suggestion for getting off of MySQL had nothing to do with encryption, I was talking about RLS, which is not encryption, hashing, or any form of stenography. It's ACL at the row level, not table or database level. Thanks for playing with your shitty response.
Funny I had no problem picking it up. Just takes a little reading
Having to use multiple asserts in your tests might be a sign that your methods are doing too much, and that some of the work should be delegated to other methods or objects.
Since php is a shared-nothing environment, and nothing persists between requests, I'd wager that the php engine ends up creating a new variable when it loads it from APC. It sounds like what you need is to use shared memory http://php.net/manual/en/book.shmop.php
Actually, this is exactly how we do it. It is much more easier to track changes and things breaking down. It could also lower your costs, github pricing isn't that bad It may take a while to get used to the workflow, but it is really worth it.
Yes is a great idea, look at how the linux kernel is developed. Imagine sharing the same excel worksheet with several accountants trying to modify it at the same time. With git/svn/mercurial whatever. Everyone changes what they have to, in their own machine. And actually just changes get sent.
It does, I went ahead and verified that. I'm not sure how SHMOP would be any different than APC.
Ok, thank you for replying. I see your logic. Do you somehow include the database in the git repo or how does each dev get their hands on the db? I have a db with tables with million plus rows, I assume I don't give them the full database. You would include a SQL dump somewhere I suppose? Edit: And what if there are pear packages and stuff. What about cron jobs? I see your logic bu I am having trouble seeing how to practically implement it. BTW: the site itself is already a github repo but there is no db in the repo. There's lot of cron jobs but they aren't in the repo. Either way, thank you for your input thus far. You have me at least headed in the right direction it sounds. If you know of any articles that describe your dev shops workflows I'd love to see them.
I'm not sure if I follow you but why don't you just store the results in one variable and copy it for the second thing you need to with the data? 
I ended up doing that on something I was working on that looped through different rows of the table. Went from total queries = initial query + # of rows to 2 queries total and just loop through the data pulling what I need
&gt; how can I be sure that I've tested properly? The answer is you can never be sure. Make sure you test boundary conditions, have 100% (or near) code coverage, and then pray. There's no magic solution here and it's been mathematically proven that there never will be. 
Ah. In that case, this in the category of pointless micro-optimization and shouldn't ever think about it again. :) 
I find that I end up writing multiple asserts to just to verify that the result from the first assert wasn't a fluke.
I think this might stem from the fact that most php "programmers" are really just people who have spent a couple hours tweaking a form processing script someone wrote. I know a number of people who say that they can program in PHP, but when pressed about it you find out that this one time they modified a script someone wrote so that it had three form fields instead of two that were emailed to them.
Well, there goes Google messing with a system that worked fine before...
Don't use the mysql extension at all. It's only there for legacy support, and it even says in the manual that it shouldn't be used with new projects. Use mysqli or PDO instead. 
&gt;Obviously not. You're worried that people you think are honest turn out to be dishonest. Unless you are selling your software to people that are in the same business area as you there is probably little you have to worry about. Your honest customers wouldn't think about reselling your software at all. not reselling but people share with friends and this we find usually leads to others just sharing it on places like the vault and other BH forums. &gt;Dishonest people will find a way around your code, trust me. They will reverse compile it, deobfuscate it, pirate, hack it to remove checks, everything, because they are being dishonest. It's up to you as a software designer to make sure there is enough value in your software to make it not worthwhile to pirate. Oh I'm fully aware -I've been down that road and have first hand experience that's how I there are tools that decrypt ioncube and Zend. &gt;You say the software can't be self hosted (I'm assuming you mean you can't run it from your own servers for your clients)... why? I can't really discuss it here in detail however, if something were to happen to our sever and it affected their site -- it would be disastrous for both parties. I've done about 20 client server apps and that is the way to go when possible. There's very few times that you can't code it that way - but in this case ... it's taking a big financial chance. &gt;You can do things like HipHop to compile to C++, but then you aren't running PHP anymore and make it harder for customers to run your software. hmm interesting .. I'm looking into this - thank you.
yep, do not re-invet the wheel, unless you need really specific stuff.
short version what my CMS does: get request validate the request parse the request and decide which client, language and resource to lookup set the client identifier which will be used to access the right client DB tables, folders and rights load the requested page, module etc. use the loaded data to combine it with the client specific templates and module actions send the output to the browser
I think this community has discussed this topic often enough to say that you're beating a dead horse. If you can't self-host, forget it. The best you can hope for is obfuscated code locked away in a binary that can probably be decompiled. Just run it through Hiphop, take solace in the fact that your heavily obfuscated binary C program runs better than the interpreted PHP version ever will, then cry your way all the way to the bank after your client pays you a crapload of money for the software. Sure, someone can reverse engineer it with god-knows what these clever people have under their belts, but if they're that clever they can also develop a competing product in the amount of time that would probably take. Get a lawyer to make a well-written license that the client agrees to before accepting delivery of the product. If that doesn't keep them honest, well, that's what the lawyer is for. Good luck
I would rewrite in cake 2.x the reason being that you do *NOT* want to give yourself more work than needed and your application is already setup for cake (both the PHP code and the MySQL database associations) so the migration to 2.x will not be as big a headache as redeveloping using another framework.
I have noticed that Sublime Text 2 does do a certain degree of "hints"
really? Have you seen ZF2 documentation... that is crap. Symfony2 docs are solid but could be a lot better
Yup, that's what I've found too. It's amazing to me how hard it is to convince PHP programmers to write tests.
Confirming this. We're not trying to be harsh or anything: mysql_* functions are truly deprecated and both alternatives are much better. It's not too hard to go from mysql to mysqli, but I'd also recommend looking at PDO for the benefits it offers.
I've had good results using Sphinx. If it's just something for your website, you can always contemplate just using Google search.
Thanks for this, I found a good tutorial for getting up and running with it. Apparently it (xhprof) was developed by Facebook. http://techportal.ibuildings.com/2009/12/01/profiling-with-xhprof/
I have used check-auth@verifier.port25.com and I am getting passes on SPF check, DomainKeys and Sender-ID check. I get a neutral on DKIM check. I have no issues with delivery to gmail or yahoo. Also, I checked the IP and I am not blacklisted.
It's sort of a big project which has about 2000 records++.
auto_append_file won't work if anywhere in your app the "exit" function is called. We use this (legitimately) in our MVC routing component. register_shutdown_function does however work, even when exit is called - so you could do an auto_prepend_file that does just that.
I see that the PHP port is only available for the Zend framework? Sadly I don't run it D:
even thought you said you aren't blacklisted, I do have a @mac.com account if you ever find something and want to test to see if it works.
Not sure what you're looking at, http://www.sphinxsearch.com/ uses it's own PHP (4+) API. No Zend.
mysql fulltext indexing sphinx lucene
You're right, I should have made `URLify::$maps` and `URLify::$remove_list` public. Changed that just now. Now you can extend it quite easily: &lt;?php require 'URLify.php'; URLify::$maps[] = array ( '¿' =&gt; '?', '®' =&gt; '(r)', '¼' =&gt; '1/4', '¼' =&gt; '1/2', '¾' =&gt; '3/4', '¶' =&gt; '&gt;' ); echo URLify::downcode ('¿ ® ¼ ¼ ¾ ¶'); // "? (r) 1/2 1/2 3/4 &gt;" ?&gt; As far as translating JavaScript into PHP, I didn't do a 1-1 translation (which I agree never works well), instead I optimized things for how PHP works. There are probably still a couple optimizations I can make, but it's pretty low memory and fast already. It's also a huge improvement over existing methods I was able to find in PHP, especially ones using `iconv()` as a base.
I've had great success with [ElasticSearch](http://www.elasticsearch.org/) as well as some of the [IndexTank](https://github.com/linkedin/indextank-engine)-based services ([HoundSleuth](http://www.houndsleuth.com/) has a free plan and there's also [Searchify](http://www.searchify.com/) and a few others). I made an app that works with both of these backends recently if you'd like to see some fairly simple [example code](https://github.com/jbroadway/search).
indeed. xhprof was developed specifically to monitor production environments.
I didn't change the method names, although transliterate() or even translit() may be better. I may add a wrapper add_map() method which would also reinitialize the memoized map and char list, but any more than that I think would be overkill. An interface wrapping a hash is overkill, and I'm keeping the class itself static. If you want to override it and not hard-code the class as a dependency: &lt;?php class My_URLify extends URLify { // custom changes here } $urlify = 'My_URLify'; echo $urlify::filter ('Español'); ?&gt; 
You can, but you shouldnt. Make a new section for it.
&gt;Added an add() method "add()" is rather ambiguous. Add? Add *what*?
The current plan is to upgrade from 1.2 latest (currently done), refactor the controller's code so it's manageable and not stupidly done, update it to 1.3, refactor it more with the models and views, then hopefully update it to 2.x without much of an issue by doing regex replacements in the script.
Only having used the one chosen for me by a teacher, I don't think I am qualified to make a recommendation. Just look through the ones on Amazon, or a local book store and pick one that you think you might like. 
In addition to xhprof there are some other pecl extensions: http://pecl.php.net/package/memtrack and http://pecl.php.net/package/apd I can't vouch for either as I just came across them last night and haven't had a chance to test them out.
Didn't see it in my searching. I'll have to take a look and compare!
apache solr. super fast, anything you're thinking of doing it most likely already does it.
mysqli looks extremely "object oriented". I am a procedural guy, cut my teeth on Basic, then C. I am currently involved in attempting to learn Java, and I definitely do not like OO. Therefore, I need to look for a way to integreate mysqli into my existing projects without using OO.
&gt;mysqli looks extremely "object oriented". I am a procedural guy Have a second look. Mysqli comes in both OO and procedural form, as do most of PHP's APIs. &gt;I definitely do not like OO. Therefore, I need to look for a way to integreate mysqli into my existing projects without using OO. That's just silly.
Can you link to the bugs page? That paste doesn't work. It'd have to be some odd setup where the CLI SAPI is being called from a webserver
interesting, probably needs register_argc_argv enabled and also some scenario where you use php-cgi. Does anyone actually use php-cgi?
This is a rather limited scope bug. I don't know of many servers that would use this sort of configuration (mod_cgid). Many control panels and distros use mod_suphp (cpanel) or mod_php (plesk, default method for debian and centos). It is still a serious issue, but with a limited impact due to it being a very unusual way of running PHP from Apache given the default methods for doing so.
All viable hosted search options * http://websolr.com/ * http://www.searchify.com/ * http://www.houndsleuth.com/ * http://bimaple.com/ * http://aws.amazon.com/cloudsearch/ You only have 2000 items though, so seriously you don't need a "search engine". You would be just fine with a text file and grep.
Agreeing with [@mullanphy](http://www.reddit.com/user/mullanaphy) - Sphinx has it's own PHP api you can use or you can install their [PECL extension](http://pecl.php.net/package/sphinx). ZF might have sphinx built in, but that doesn't mean its the only way to use Sphinx.
That explains this tweet: http://twitter.com/#!/rasmus/status/197770284332367872
craigslist.com, gdgt.com, as well as livingsocial.com all use SphinxSearch. I don't think 2000 rows will really be a problem
I don't understand how this is a *PHP* bug. If you were running Perl or Python in this CGI configuration wouldn't they be identically affected? In what CGI setup does the query string get passed as parameters to the executable? That sounds dangerous regardless of the language/platform involved. Unfortunately the bug report isn't very informative.
Okay I renamed it add_chars(). I also added remove_words() to append to the $remove_list. I thought about calling it something like append_remove_list() but that seemed overly verbose. I think it's now in pretty good shape.
Update, I've been running xhprof all day and it is indeed awesome. It's a lot easier to decipher than webgrind / kcachegrind, and lighter weight than running xdebug profiler all the time.
User generated content, though. It's somewhat like craigslist, I believe
Does the argument have to be at the beginning of the query string? For instance could you have something like this?: &gt;?%20-s or: &gt;?somearg=1&amp;-s
I tried "?&amp;-s" and it didn't do anything, displayed the site as it should. (Edit: just realized that I could try your exact examples since they're not intercepted by my RewriteRule, and I can confirm they don't do anything.) ~~By the way, OP mentioned "?-r" and that didn't do anything either. (Though I didn't try adding stuff behind, but I figure if it had been as simple as triggering the command-line option, even just the -r would have done *something*.)~~
Looks like I misspoke in the previous comment, and both `-r` and `-r "echo 3+4;"` produce an Internal Server Error (maybe I made a typo the first time I checked). I tried `-r "touch('/(mywebdirectory)/test');"` and it didn't actually create the file, so it looks like the error thankfully happens *before* it tries to run anything.
Are you sure you're using FastCGI? From what I can read this bug only applies to normal CGI, which is very rare compared to PHP-FPM or php-cgi over FastCGI.
That's so you can have more than one kind of hash in the same password column. For example if you want to upgrade the hash to something better, you generate new ones when someone logs in (since you have the cleartext only at that moment), but you can still authenticate old ones. Or you change the work factor from 13 to something higher (since you got a new faster machine), but you can still authenticate old passwords.
&gt;Did you even look at the PHP doc page with sample output results? &gt;WHY WOULDN'T YOU LOOK AT THE PHP DOC PAGE WITH SAMPLE OUTPUT RESULTS? Did you? Your example doesn't even use bcrypt. &gt;"**salt** &gt; An optional salt string to base the hashing on. If not provided, the behaviour is defined by the algorithm implementation and can lead to unexpected results." And &gt;"If no salt is provided, PHP will auto-generate either a standard two character (DES) salt, or a twelve character (MD5), depending on the availability of MD5 crypt(). "
&gt; Did you? Your example doesn't even use bcrypt. It's not my example, it's from the PHP docs, and *the same code works for all algorithms*, as the comment notes. The purpose of the example is **to show how to verify passwords**, *not* discuss best-practise salt generation. Neither is salt generation the topic that OP is interested in, so I don't know why you're mentioning it.
Cricket is a global sport and not just confined to the british isles. It's understanding is not tied to knowledge of a brittish pastry. And crumpet is also colloquially used as a slang for an attractive lady, hence Bretondiary's slightly sexist response. 
I'm also interested in weather you'r using the FCGI module or using normal CGI. Like ensiferous said, this bug should only apply to an old CGI setup. Using an FCGI setup is very common, so I'm surprised it took this long for a bug like this to surface if it does indeed affect FGCI configurations. While on the other hand using a CGI configuration is quite uncommon, which would make sense that no one would have noticed this.
Here's a better link http://ompldr.org/vZGxxaQ
Yet another reason to not use CGI.
yep, this is as always. Either extend the existing stuff or make it on your own. Building it by yourself has the advantage that your know what is happening.
Are you sure you're not using asort() on the second server? Or even better - on both servers? The files are read in the order they were created so if using asort() the results might differ on both servers. Use normal sort() and all should be fine.
php.net and tizag i found helpful. i started off with a single page project in mind and have since moved on to an entire website. once you have an idea you can search about what to do and what you can do, once its done you can find ways of improving it.
The order of *something* is different on the two servers. So somewhere in your code you are relying on something else to provide data in a specific order, without actually being specific about it. My first guess is that the file names are not being fetched in the same order.
Bug found by eindbazen and documented here in detail: http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/ FastCGI is _not_ affected.
Ah, so *that's* what happens when you don't comment your code.
It always strikes me as odd that there's a great free open source community around Symfony2, but people want to make money off the back of it. I can understand for real training... but for screencasts its a bit much.
There's only one user and one site on my server so, yes, it can… wait, no, of course it can't, /home is owned by root. It was late at night. *Tested again and fixed the comment.*
PHP's testing methodology - always just good enough^TM ! ;)
Boring day at work so far, here's a basic naive solution. &lt;?php // Need something to find values in specific indices function find_in_array($input, $key, $value) { $out = Array(); foreach ($input as $val) { if ($val[$key] !== $value) continue; $out[] = $val; } return $out; } // Use your own creativity with the formatting. This should recurse as // deep as you/your memory allow function format_comments($comments, $parent = 0, $reclevel = 0) { $out = ''; // If this is the first call, it will populate with base comments. Any recursion // will be ones with parents. $base = find_in_array($comments, 'parent', $parent); if (count($base) === 0) return; foreach ($base as $comment) { $out .= (($reclevel)?str_repeat('-',$reclevel):'').$comment['comment'].'&lt;br /&gt;'; $out .= format_comments($comments, $comment['id'], $reclevel+1); } return $out; } // Our comment array $comments = Array( Array('id'=&gt;1,'comment'=&gt;'This is a main comment','parent'=&gt;0), Array('id'=&gt;2,'comment'=&gt;'This is another main comment','parent'=&gt;0), Array('id'=&gt;3,'comment'=&gt;'This is a subcomment for the first comment','parent'=&gt;1), Array('id'=&gt;4,'comment'=&gt;'This is a sub-subcomment for the first subcomment','parent'=&gt;3), ); echo format_comments($comments); ?&gt;
Is there an easier way to type out this much code in reddit without hitting space 4+ times before each line? EDIT: Disregard, I'm a moron. I'm assuming you're typing it out in an auto-indenting editor, copy/pasting then hitting the fancy 'code' button right above the post box, the one I've been missing until just now.
well, PHP is a per instance language, which means that all variables exist only on a per call basis. So, your variables created won't exist in memory after that page gets served. You would need to use something like memcache, but that adds an extra layer of complexity. I know Java and using a static variable for a class can do this. It's not a 'horrible' thing mixing languages, particularly if you're using the same db, and the different languages perform different tasks / services.
You linked to a screencast that is coming soon? And premium paid content? Awesome.
ok. im stuck again lol. ive been trying to get it to post the data collected. is there some way to do something like this? for ($i = 1; $i &lt;=$_SESSION['Ingredient_amount']; $i++ ) { echo $_POST['\"ingredient" . $i . "\"']; }
I feel awkward now, but you see, it said in the report that they didn't have any solution. The report seemed blasé about the issue and referred to previous documentation for explanation, so I assumed the issue had been known for years and that adding the report was just a formality and to encourage someone to eventually come up with a new, less flawed SAPI or whatever, you see. Also, if you follow the PHP bug reports, the devs are very time-stricken (apparently) and dismissive of many reports. Bugs are often just ignored or rejected as "bogus" without clear explanation, or with a wrong explanation. After the hundredth time someone discovered floating-point arithmetic isn't exact or that 0=="some silly string" and complained about it, I don't blame them for being bored, but it seemed like this was being treated the same and nothing more was going to happen to the report for years. Then I posted this because I wanted to understand it better. I'm truly sorry if any trouble results from this thread. It was not out of malice.
You should not use memcache for data persistence. It is not designed for that. If you want something in the same vein you should consider [Redis](http://redis.io/) instead. The problem with memcache is that it is a cache. This is great if you're trying to speed up access to data which you are persisting elsewhere, but could have unintended side effects if you try to treat it like a persistent data store.
I understand memcache wouldn't be ideal, but my point really was, for what he wants to do, PHP isn't really ideal. Branch that functionality off into another language that more easily supports something like that, but keep the rest of the middle ware / templates in PHP.
so node.js' builtin web server is better than both apache and nginx in situations like this? wow! gotta try that!
I hesitate to even mention this, but something like [GO](http://golang.org/) might be a good fit for this. There are several modules that would make this easy to implement. JSON, HTTP, even websockets if you wanted to use some HTML5 capabilities. I have been using Go on and off for a few months. It is a very easy language to learn, the constructs are mostly the same, and the available modules covers the spectrum of potential needs.
I don't believe so. This vulnerability seems to exist because `php-cgi` is executed directly by Apache. Under "traditional" CGI (used for Perl/Python/whatever), the web server executes a _script_, and the shebang line specifies the interpreter. In that model, the script's command-line arguments are never seen by the interpreter and certainly not parsed by it.
Here is a legacy feature of CGI that hardly anybody knows about, using a setup of PHP that is already rare, targeting an issue already claimed to be solved! The perfect storm. 
I agree with this - I don't know much about node.js but after having a play with it it seems as though it would be the right way to go. Easy to pop up new instances too I suppose. 
A few games already do this style of gameplay, such as [Pardus](http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CDQQFjAA&amp;url=http%3A%2F%2Fwww.pardus.at%2F&amp;ei=RtiiT5XnNsfz6QHCv_3bCA&amp;usg=AFQjCNH-8rJnCO5AsiDq29saUa-JU3zacA). I'm not sure what the backend is like, but you're probably better with the suggestions in the other comments. I've attempted gameplay like this using PHP/databases and it works fine. It's just not how web games should be done anymore though.
The recursive solution isn't the best way. Consider looking into a modified pre-order tree. This post has a great description of it and has PHP examples http://www.sitepoint.com/hierarchical-data-database-2/ I implemented it this way on my site and it greatly simplified my code and reduced my memory load. Also just as a shameless plug/for future reference I created a site just for getting feedback on code. I put your code on my site in hope that you might get a little more meaningful comments. https://codetique.com/YRSnSLwh Definitely checkout the modified preorder tree though.
"christkv" did something like this. I saw him earlier this year on a confercne speaking about mongoman (https://github.com/christkv/mongoman), and this is pretty much what you are talkin about (but of course he used MongoDB).
It does, there aren't any libs for it though
MPTT has a *major* record update cost. Sometimes it's actually better on very large trees (or trees with many changes) to use a parent_id instead. However, starting off with MPTT is a good idea and you can worry about scale later. I think there are also some alternatives to MPTT floating around for unique needs...
Something like this? $products = $xpath-&gt;query("//div[@class='watch']"); foreach ($products as $product) { $list[] = array( $xpath-&gt;evaluate("(//div[@class='product-name'])[0]", $product)-&gt;nodeValue, $xpath-&gt;evaluate("(//div[@class='product-stock'])[0]", $product)-&gt;nodeValue, $xpath-&gt;evaluate("(//div[@class='product-price'])[0]", $product)-&gt;nodeValue ); } $fp = fopen('inventory-list.csv', 'w'); foreach ($list as $fields) { fputcsv($fp, $fields); } fclose($fp);
You are correct about the writes, but as you said it's most likely not as frequent as reads. If you look at the code on that post he renders it without any recursion by using a stack to maintain the position. I do the same thing so you can definitely render the html without any recursion at all. 
Hijacking top comment to announce that this has been fixed by 5.3.12 and 5.4.2, released today: http://www.php.net/archive/2012.php#id2012-05-03-1
Yes, you are. Blogger has no way (if i recall correctly) to run your own PHP code; this would be a potential security hole for them. Using dropbox would be a really lousy idea, while you can get the script, you would have to eval() it; eval()ing a remote hosted code is probably the worst thing you can do.
Indent your code properly!
Honestly I'd go with his solution it's a little more elegant then mine. [EDIT] And requires fewer loops making it more efficient. 
But for his purposes, redis is a better choice. Mongo is geared towards "document" storage. Redis would be a very fast lookup table, which is more what he needs.
No you don't have to build all of that from scratch. Node.js, if you use some middlleware like socket.io, has built-in channels, and broadcasting to/from all clients, and it's all event-driven, so API functionality comes for "free"
Node.js is perfect for this since it supports the long polling concept which is key for what you want to do. I built a chat server w/ PHP + Apache on the backend a few years ago planning to do just that, but realized half-way through that Apache doesn't deal well with tons of constantly connected clients, even if they're mostly just sitting there waiting. So we had to switch to timed polling, which worked well enough for our purposes and user load, but I can't see it scaling anywhere near where node.js's event-driven model could. And w/o long polling, it'll be tough to make it real-time. That being said, there's nothing stopping you from having node.js field all the requests, maybe checking some sort of messaging table or something and then passing the request off to PHP when it's time for your app to actually run something.
First, take the gigantic picture of your face off there and put some content on in its place. I poked around and had trouble finding example code. If users can't find it with 2 clicks you're done. They'll leave. 
All good. The simple post of a link to a comment thread said to me "hey fool, there is already a post about this, y u link again?". Your intentions weren't as clear. But It's all good and squared away. Hugs?
Seems that above fix is buggy, [more here](http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/). Edit: As now **weaponized exploits are in the wild** and no really working patch, at least use this (and forward to your hosting company): RewriteEngine on RewriteCond %{QUERY_STRING} ^[^=]*$ RewriteCond %{QUERY_STRING} %2d|\- [NC] RewriteRule .? - [F,L] Source: Comments at [Eindbazen post](http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/#comment-1211) and blog at [php-security.net](http://www.php-security.net/archives/11-Mitigation-for-CVE-2012-1823-CVE-2012-2311.html)
nodejs and websockets
http://en.wikipedia.org/wiki/Comet_(programming)
google doesnt compile php.. ll jokes aside i was hoping to hear some feedback
Any reading recommendations on making this transition ... books/sites/etc.?
Welcome to PHP type juggling. You can either A) Not key your array using that field or B) Add a character (e.g. "B") as a prefix to the key so it's always a string.
I am a little familiar with some code because of College but that was so long ago. At my old job we had developers for this kind of stuff. Also I have had to create different scripts and such but would only find code for what I needed. 
I like the Head First PHP book.
Whoa, that's way more work than is required, and wouldn't even work the way you describe. If you don't store the whole string, you lose part of the configuration used to generate the hash. You would have to hard-code the cost factor in your code, and you would not be able to easily update it in the future. If you ever need to change the prefix for new hashes (say from 2a to 2y), you would be out of luck because you've hard-coded that as well. &gt; Only a few more lines of code and you were going to have to implement a check on crypt type anyway. What? You don't have to implement any kind of check. You pass the hash as-is to crypt to verify your password. // A match means the password is valid for this hash if ($hash == crypt($password, $hash)) { // Yay! } else { // Boo! } This is just really bad advice, and shows a lack of understanding as to how these types of algorithms work. Bcrypt and others like it (pbkdf2, for example) do not work the same way as MD5 and SHA1/SHA2. While message digests are designed to be fast and avoid collisions, algorithms designed specifically for passwords are designed to be slow (and also avoid collisions). I can see trying to hide your password algorithm if you're using a message digest. Tools like ighashgpu are designed to crunch through millions of hashes per second on a commodity GPU. The availability of cheap and powerful GPU clusters on Amazon EC2 means your exposed hashes don't stand much of a chance. On the flipside, bcrypt and similar algorithms are CPU-bound. Even very powerful hardware takes a long time to chew through a small number of hashes. Check this out: Hardware: Sun Fire X4170 M2 - 12-core Intel Xeon, 144GB RAM bcrypt-12.php: &lt;?php for ($i = 0; $i &lt; 1000; ++$i) { crypt('password', '$2a$12$saltSALTsaltSALTsaltSA'); } Shell: $ time php -f bcrypt-12.php real 4m20.988s user 4m18.612s sys 0m0.303s So 4 minutes 20 seconds to crunch 1,000 bcrypt hashes. A brute-force attack against a decently chosen password hashed with bcrypt and a cost factor of 12 is unlikely to be successful in your lifetime with current hardware. In a couple years, crank that cost factor up to 14: $ time php -f bcrypt-14.php real 17m23.005s user 17m13.883s sys 0m1.352s I think exposing your hashing method is okay in the instance of bcrypt and pbkdf2. If you can find one credible source from an expert in the field saying otherwise, I'll be happy to concede the point. Until then, please don't give advice like this. It just complicates things and makes it very hard to rehash passwords in the future when needed.
It really depends upon what you need to do. If your employer is trying to make you take on the responsibility of web developer, I would suggest either refusing, or finding a new job. You are very unlikely to be able to learn what you need to maintain a website, from just your experience maintaining that website.
You might try running it through two different regex expressions. The first would handle: http://www.youtube.com/ Where there would always be a v value. If that one doesn't find a result then run it through the other that would handle: http://www.youtu.be/ Where the last segment is the id value. I'm not the best with regular expressions myself but usually I just stick the stuff in here: http://www.solmetra.com/scripts/regex/ and keep working on it till I get the result I want. You will save yourself some headaches by splitting it into two different regex runs though. [EDIT] For the one that always has a v values just ignore all characters up till v= then collect everything until an &amp; or the end of the string. Make sure you use .+? or .*? as that will make the quantifiers lazy. [EDIT 2] What the hell. Here is the regex I would use for the first run. /.+?v=([\w\d]{11}).*?/ [EDIT 3] Slow night. Here is the complete expression I would use. Again you might want to break up the two different checks but I have them combined. #(.+?youtube.com.+?v=([\w\d]{11}).*?)|(.+?youtu.be/([\w\d]{11}).*?)#
Don't hesitate! Go is perfect for this! Ease of concurrency as well as network communication along with being fast and easy to pick up (if you've ever played with a C-like language). I think Go has chops. The only reason I would use Node over Go in this situation is if I wanted a full JS stack. Even then I think Go's speed would edge me more towards that camp.
I really think Go is perfect for this scenario. Node.js is a close second however.
Longer take, but should work for you. It also makes sure that the tokens are unique no matter what the URL looks like. [EDIT] Expression tweak &lt;?php ob_start() ?&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor &lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=hwqrsFv3gUg"&gt;incididunt ut labore&lt;/a&gt; et dolore magna aliqua. Ut enim ad minim veniam, &lt;a href="http://youtube.com/watch?v=TyLV4lxMc1g"&gt;http://www.youtube.com/watch?v=TyLV4lxMc1g&lt;/a&gt; nostrud exercitation ullamco laboris nisi ut aliquip ex ea &lt;a href="http://www.youtu.be/ahUf8QtYVPI"&gt;commodo consequat&lt;/a&gt;. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur ccaecat cupidatat non proident, &lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=hwqrsFv3gUg"&gt;sunt in culpa&lt;/a&gt; qui officia deserunt &lt;a href="http://www.youtu.be/ahUf8QtYVPI"&gt;mollit&lt;/a&gt; anim id est laborum. &lt;?php $buffer = trim(ob_get_clean()); $doc = new DomDocument(1.0); @$doc-&gt;loadHTML($buffer); $xpath = new DOMXPath($doc); $links = $xpath-&gt;query("//a[@href]"); $found = array(); $reToken = "@(?:/|v=)([\w\d]{11})\b@"; foreach ($links as $link) { $href = $link-&gt;getAttribute("href"); if(preg_match($reToken, $href) &amp;&amp; preg_match("/youtu(?:\.be|be\.com)\b/i", $href, $matches)) { $found[] = $href; } } // unique tokens $seen = array(); $found = array_filter($found, function($v) use (&amp;$seen, $reToken) { if($token = preg_match($reToken, $v, $match)) { return isset($seen[$match[1]]) ? 0 : $seen[$match[1]] = 1; } }); print_r($found); // ( // [0] =&gt; http://www.youtube.com/watch?feature=player_embedded&amp;v=hwqrsFv3gUg // [1] =&gt; http://youtube.com/watch?v=TyLV4lxMc1g // [2] =&gt; http://www.youtu.be/ahUf8QtYVPI // )
What are your queries? You might be able to optimize your queries as such that the difference would be negligible.
Why not just use the strval call: http://www.php.net/manual/en/function.strval.php that's what it's purpose is.
You could always not use regex and just break up the url into its parts (protocol, domain, path, query, hash) and then depending on the domain take the right course of action.
Looks like I'll look into node, as it seems to be the overwhelming response. Socket.io sounds great! I like the flash based backwards compatibility. Thanks for the recommendation...
So far Node.js seems to be the overwhelming "best choice" response so far. Why would Node.js be much worse than PHP?
You’re correct in thinking that this scenario would kill your database. There’s a lot of good suggestions in this thread but if you still want to go with PHP, you should try to do a quicker layer in front of your database like using Memcache and saving the state every 30 sec or so. Otherwise, if you are not too big, you can go with the MEMORY engine of MySQL. And yes, WebSockets
I had the regex that way because some of the book's had letters instead of numbers (i.e. DEED-BOOK-AAA.TIF). That is why I needed the keys to be strings. Some books had leading zeros (DEED-BOOK-0123.TIF) and some did not (DEED-BOOK-321.TIF), and there was no way to know ahead of time which ones did and did not, so stripping the leading zeros (or adding extra) was not an option. I'm sure there are more elegant workarounds than what I came up with, but it was just something I never would have anticipated happening, and I was curious to know why.
Yeah, I ended up going with something like option B. I come from the world of C++, and usually I love PHP's loose typing. This one threw me for a loop, though.
Check out [oEmbed](http://www.oembed.com/). It is *designed* for exactly what you want to do, and Youtube supports it explicitly.
 preg_match_all("/(?:http://)?(?:www.)?(?:youtube.com|youtu.be)/(?:watch\?)?([^\s]+?)/i", $str, $m); if(!empty($m['0'])) { if(preg_match("#(\?|&amp;)#si", $m['1'])) { parse_str($m['1'], $vars); if(!empty($vars['v'])) { $youtube_video_key = $vars['v']; } } else { $youtube_video_key = $m['1']; // maybe test against preg_match("#^([A-Za-z0-9\-\_]+?)#si", $m['1'])... } } 
Have you tried with [mbstring](http://php.net/mbstring)?
Honestly I don't see anything wrong with your solution. It gets applied to every result so it is consistent and can be relied on and it solves your problem. Not elegant but then neither is PHP so maybe just "it works" is good enough.
I did this for a [Wordpress plugin](https://github.com/lavoiesl/wp-youtube-widget/blob/master/widget.php), it covers up pretty much everything: function parseVideoID($video_url) { static $valid_id = '/^[a-z0-9\-_]+$/i'; if (preg_match($valid_id, $video_url)) { // Only id return $video_url; } else { $parsed = parse_url($video_url); if ($parsed) { // http://www.youtube.com/* // https://be.youtube.com/* // https://youtube.co.uk/* if (preg_match('/^((www|[a-z]{2}).)?youtube\.(com|[a-z]{2}|[a-z]{2}\.[a-z]{2})$/i', $parsed['host'])) { // /watch?v=00000000&amp;feature=XXXX // /watch?v=00000000 if (preg_match('/^\/watch/i', $parsed['path'])) { parse_str($parsed['query'], $query); if (!empty($query['v']) &amp;&amp; preg_match($valid_id, $query['v'])) { return $query['v']; } } // /embed/00000000 // /v/00000000 if (preg_match('/^\/(v|embed)\/([a-z0-9\-_]+)\/?$/i', $parsed['path'], $matches)) { return $matches[2]; } } // http://youtu.be/00000000 if ($parsed['host'] == 'youtu.be') { $videoid = trim($parsed['path'], '/'); if (preg_match($valid_id, $videoid)) { return $videoid; } } } } return false; }
missed this one: http://www.youtube-nocookie.com/embed/lXKDu6cdXLI?rel=0
mongodb geospartial collection and node.js - do frontend single short requests with low bandwidth with PHP. for everything that needs performance and maybe multiple simultaneous requests (DB, cache, etc.) use something like node.js or similar evented languages to keep the initial costs vs. performance down.
and thanks to type Juggling, TRUE ≈≈ FALSE &lt;?php $a = 0; $b = 'x'; var_dump(FALSE == $a); // bool(true) var_dump($a == $b); // bool(true) var_dump($b == TRUE); // bool(true) ?&gt; http://www.phpwtf.org/its-quite-logical
You would probably still need a simpler regex to find and replace the url the entire url (something that finds the whole url without worrying about pulling the parts out), then use the PHP functions [parse_url](http://www.php.net/manual/en/function.parse-url.php) and [parse_str](http://php.net/manual/en/function.parse-str.php).
So all three of these are valid inputs, and all three are totally different and valid records/files? AAA 0123 123 If so, then your solution is actually as optimal as you can get (based on other comments) and I'd just chalk it up to PHP being PHP. 
 I'd also recommend checking out [embed.ly](http://embed.ly). They have a [free plan](http://embed.ly/pricing) and support a lot more than just Youtube.
Not an excuse, but an explanation for this is that ZF2 isn't finished, and although there have been "beta" releases large parts of the framework are still in total flux - more comparible as an alpha release imho. If you do build anything in zf2 then you should be comfortable dealing with the source as your primary source of documentation.
What does Reddit use? I'd avoid that one.
You may want to check that page again
What is your nginx config?
[Here it is](https://developers.facebook.com/blog/post/2010/02/02/hiphop-for-php--move-fast/) straight from the source. If you are feeling adventuresome, [hiphop is available on github](https://github.com/facebook/hiphop-php).
That's because /careers/department?-s get's mod_rewrite'n into plain $variable instead of being passed as a parameter to PHP execution.
No, it's not. It's because Facebook doesn't have the vulnerability at all, but they put the link in to recruit security experts.
&gt;Also, what is a "framework"? When building a house, you usually put up a frame to build around. The same thing applies to programming. A framework is a foundation which provides structure and a lot of finished functionality so you do not have to code everything from scratch. 
Yes, learn PHP. LAMP is largely useless without it.
I was hoping this might be the case. I already tried installing Drupal (speaking of PHP) onto a Dreamhost site a couple months ago and quickly realized that I had gotten ahead of myself. Right now, my goal is just learning some of the basic things you can do with a home web server. It seems like a good way to learn lots of other things along the way (as long as I don't get ahead of myself).
Doesn't it run a mix of compiled php-&gt;C++ and regular old fashioned php? 
gets*
nginx.conf #user nobody; worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server { listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { root html; index index.html index.htm; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } location ~ \.php$ { root html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; include fastcgi_params; } } } 
Switched it back yesterday and it sent normally to my google email address. Very strange.
God dammit I feel terrible about this. I've been reading all the reports on security blogs blaming the person who "accidentally posted it to Reddit". .__________________________________.
Valid points!
Drupal is more of a content management system with a framework for building for Drupal, and it's a rather strange one to be your first. Durpal has a lot of "Drupal only" ideas and I find that it's administration panel is a little awkward for people who are new to content management systems as a whole. I would suggest working with basic PHP first just for a rough understanding of how it works before moving to another Framework. Moving to a framework when you don't quite understand PHP will add a whole new set of problems to any possible issues that may arise.
Sorry, I answered before coffee and totally missed the necessity of CGI to the -s situation. 
Fair enough, I'll admit I didn't really look into it in great detail, it was just an immediate factor I noticed when I looked at the output. Great post, nice job - this is awesome knowledge for me to avoid doing needless complex security things. Thankyou. :)
Have you tried, parse_url and parse_str? php &gt; $parts = parse_url('http://www.youtube.com/watch?feature=player_embedded&amp;v=hwqrsFv3gUg'); php &gt; $query = null; parse_str($parts['query'], $query); php &gt; var_dump($parts, $query); array(4) { 'scheme' =&gt; string(4) "http" 'host' =&gt; string(15) "www.youtube.com" 'path' =&gt; string(6) "/watch" 'query' =&gt; string(37) "feature=player_embedded&amp;v=hwqrsFv3gUg" } array(2) { 'feature' =&gt; string(15) "player_embedded" 'v' =&gt; string(11) "hwqrsFv3gUg" } php &gt; $parts = parse_url('http://www.youtu.be/TyLV4lxMc1g'); php &gt; var_dump($parts); array(3) { 'scheme' =&gt; string(4) "http" 'host' =&gt; string(12) "www.youtu.be" 'path' =&gt; string(12) "/TyLV4lxMc1g" }
Right now, it is just a confirmation email after they have been approved to use my website. Thanks for the info....I'll keep digging around in the headers to make sure I've got things right.
I name my files what I want the pages to be titled, and use this code: $fname = basename($_SERVER['PHP_SELF']) ; $pagetitle = str_replace(".php", "", $fname); $pagetitle = str_replace("_", " ", $pagetitle); $pagetitle = ucwords($pagetitle); Then I echo out $pagetitle wherever I need it. The first line gets the name of the file we're looking at: staff_index.php. The second line cuts off .php. The third line replaces underscores with spaces. And the last line capitalizes the first character of each word.
How many hours were you sitting there refreshing the page until it hit that number?
I tried the semi-polite way, but that's apparently not enough. Long hours in /r/gearsofwar and /r/wallapers don't make you a sysadmin. Being a sysadmin is not just about setting up a network, it's about intimately understanding all the software being run on the system. It's about being able to look at the source of the software you run, and understand why something is broken. It's about being able to understand exploits in that software, and what is causing them. It's about being able to come up with ways to shut down those holes without waiting for windows update to do it for you. People who set up windows servers and then call themselves sysadmins are a running joke.
No problem, we're all still learning. I hope I didn't come off as too much of a prick. It wasn't my intention, but when I just went back to read my comment I realized I'm a bit of an ass. 
Reddit Enhancement Suite, it's totally awesome http://www.reddit.com/r/enhancement
They use magnets to alter dipoles on hard drives and have mechanical flip flops in their hardware.
If it's a crypt method worth using you can give away a lot of information and it still will be difficult to crack. Just one thing I picked up while trying to hash passwords with my own algorithm, which if you think is a good idea, it's not.
Your proof of knowledge on the subject is amazing. [it's wrong](https://developers.facebook.com/blog/post/2010/02/02/hiphop-for-php--move-fast/) but whatever at least you looked cool doing it.
Something like this was all I was asking for...thank you
Ah! Thank you very much for the clarification. It had been awhile since I initially ran into this problem, and I remember now that it was the result of a certain character that was used in the hashed value (I think it was a british pound symbol).
Well be more specific with your responses. We don't mind being wrong here on reddit but we do like people to explain themselves instead of just give flat responses.
As Xeoncross points out, SES is really easy to integrate (use any PHP SMTP mailer...). The API is pretty easy too with the SDK. In my experience, Amazon doesn't bother actually charging you if your bill is only a few cents. So at $1.00/10,000 you could probably send out 100-200 messages a month without actually having to pay anything.
To be honest they sound like a company that will lump responsibility on you instead of hiring someone qualified. Then they'll probably blame you when something goes wrong. Just from my experience anyway.
I like that it returns a 500 response code, so the text is really build as an error page, not a new page.
I'm not saying that this post is not legit. But this post is not legit. There is no such "vulnerability" on facebook's site. What you see has likely instead been faked. // captain obvious
Your method of printing the test data first then using the $buffer is very cool - I like that it is a good way to show test and regex in one clean statement for a easily demo-able code piece. 
This won't do all the work, but [Data Tables](http://datatables.net) is a truly amazing javascript library which can be interfaced with any backend capable of producing JSON. Combined with its many plugins, you can create a very advanced data display, entry, and editing system. Here is a [quick example](http://datatables.net/blog/Inline_editing) of a system created for quick CRUD operations. It's 72 lines of formatted code long, and implements a nice data table, pagination, sorting, creating, editing, deleting, and search.
&gt; asp-style "Short-style", you mean. Asp tags "&lt;% %&gt;" can be enabled with the `asp_tags` directive. Short tags "&lt;? ?&gt;" can be enabled with the `short_open_tag` directive. For 5.4+, [see `deeebug`'s comment above](/r/PHP/comments/t6w8e/dynamic_page_titles_on_a_php_site/c4k6sjt). For more info, see [Core directives](http://www.php.net/manual/en/ini.core.php). // php grammar nazi 
Not when trying to have PHP build [xml output](http://en.wikipedia.org/wiki/XML), or any other output format that has a declaration like "&lt;?".
Testing on a fcgi setup, I am unable to replicate the bug.
Oh that knowing about this was all it took to get a job there...
The hip hop executable is generated by converting the php to c++ and then compiled. The executable has a built-in web server, so cgi is but a distant memory. I am assured by a Facebook engineer that many of the php *ahem* quirks still exist in this system, but using a cgi container is not one of them. As for the downvoting, I think we know that this bug is not applicable, but the link is a creative use of the knowledge of that bug, and thus talking about it is. 
Lamp without Php is just lam. Which sounds yummy. But boring. 
Shouldn't you keep htmlspecialchars and other validation outside of your view and keep it in the controller? Or at least where the database data is dumped into an array? 
...and watch your memory use rocket. Point is this stuff should be handled by the server.
except if you know Python or Perl :D
That's a good idea. At least is sounds more elegant than my solution. =)
Nope, it's very much correct. I said "runs", not "coded in". 
Happy to help!
Not usually, because you might output your data from the database to different views - not just HTML. for instance if you're sending it in a text/plain email, or saving it to a CSV file for the user to download, you don't want HTML entities polluting your output. That said, htmlspecialchars is so long to type and hard to read :( I think either defining an "e" function that calls it like e($text) or using a template language like Twig that has auto-escape makes it a lot easier to manage escaping correctly...
I've never heard of a CPU that runs C++ source text directly. Which one's that?
Are you aware of `var_export` at all?
Here is a regex-less alternative (at least for the most common cases): $test = array('http://www.youtube.com/watch?feature=player_embedded&amp;v=EpzO9D3o8b4', 'http://www.youtube.com/watch?feature=player_embedded&amp;v=tN3F8pP5kx2&amp;foo=123', '//www.youtube.com/watch?v=MU421T9Wpae&amp;feature=player_embedded', 'http://youtube.com/watch?v=ty89UzV4J3O', 'http://youtube.co.uk/watch?v=bmUv46n2J80', 'http://www.youtu.be/13n5Gkte72X', 'http://www.youtube.com/watch?feature=player_embedded&amp;v=C8Hoy729Z0L', 'https://youtube.com/watch?v=i6t1aOIlR4o'); function getVideoId($url) { $parsedUrl = parse_url($url); if ($parsedUrl === false) return false; if (!empty($parsedUrl['query'])) { $query = array(); parse_str($parsedUrl['query'], $query); if (!empty($query['v'])) return $query['v']; } if (in_array(strtolower($parsedUrl['host']), array('youtu.be', 'www.youtu.be'))) return trim($parsedUrl['path'], '/'); return false; } foreach ($test as $url) { echo getVideoId($url) . PHP_EOL; }
Yes, nginx and php are on the server.
I don't know the best way to integrate into CI for authentication and database connection, but this datagrid is pretty simple to get up and running. Just pass it a PDO connection and 4 lines of code to do CRUD on a table.
You require PHP 5.4, but you don't use namespaces, instead you use prefixes (MM_*)? &amp;#3232;\_&amp;#3232;
Fire up wireshark and write PHP to do what it does on the post request. From the looks of it, you'll need the cookie it give you. 
It's the one in which you paint a complete strawman in order to make an argument 
Regarding point 2, I'm pretty sure this is already bound by default to CTRL+/ I'm on nightly build 2196, win7. Edit: Thanks for the word_separators tip btw
You know that code isn't formatted properly? Try posting raw to Snipplr/Pastbin or similar. Edit: fixed the formatting: http://pastebin.com/Hx0dRc37 Edit 2: 1. At a quick glance you're not using mysql_connect properly: mysql_connect('localhost', 'mysql_user', 'mysql_password'); 2. You're using the same $query variable for two different queries, the later will overwrite the results of the former 3. Also, I'm not overly familiar with how you're calling the cart.php include files in the switch statement. Can anyone else explain how that works? I havn't seen a function called like "case\func()" before, It's pretty difficult to make the code work with only half the picture, e.g. without the other files. Also in my opinion this is pretty complex task if you're extremely new to PHP, it's entry level but not Day 1 stuff.
Remember that you'll need to use a table engine (such as InnoDB) that supports transactions. You can use -&gt;beginTransaction() and -&gt;commit / -&gt;rollback in PDO to handle these in PDO.
Be aware when using transactions that if one query fails, it will skip by it and continue doing queries. You have to do a rollback yourself. Also another nice thing about transactions is the db does no index updates until the commit, which makes doing lots of writes much faster.
Pretty well reasoned article - you don't really need to read all of it. Just realize that php 5.3 isn't fully supported in CI. CI maintains BC which prevents the 5.3/5.4 upgrade from happening. 
OP specifically notes he is doing this for class.
Good job I was thinking of switching then, but the question is, what to? The author recommends [Laravel](http://laravel.com/), which I'll look into, but I need something fairly light. Has anyone got any thoughts on [FuelPHP](http://fuelphp.com/)?
It should look something like this using your example $this-&gt;DBH-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); try { // Begin a Transaction Record $this-&gt;DBH-&gt;beginTransaction(); // Create the trade transaction record $STH = $this-&gt;DBH-&gt;prepare("INSERT INTO " . $this-&gt;dbTable['trades'] . " (userFrom, userTo, amt, timestamp) VALUES (?, ?, ?, ?)"); $STH-&gt;execute(array($userFrom, $userTo, $amount, time())); // Increase the gold to user receiving $STH = $this-&gt;DBH-&gt;prepare("UPDATE " . $this-&gt;dbTable['users'] . " SET gold = gold + ? WHERE user = ? LIMIT 1"); $STH-&gt;execute(array($amount, $userTo)); // Decrease the gold from user sending $STH = $this-&gt;DBH-&gt;prepare("UPDATE " . $this-&gt;dbTable['users'] . " SET !!!!!!!!!!!!INTENTIONALLY BROKEN!!!!!!!!!!!!! gold = gold - ? WHERE user = ? LIMIT 1"); $STH-&gt;execute(array($amount, $userFrom)); $this-&gt;DBH-&gt;commit(); } catch(Exception $e) { $this-&gt;DBH-&gt;rollBack(); print_r($e); }
FuelPHP is pretty nice. It doesn't feel huge and bloated like some frameworks. It's sort of a much better Kohana.
I've been learning it for a couple of days now, but I already noticed some stuff : * Right now it's still not well documented. I found some tutorials but many of them are outdated, though they can still be used as a reference. However, the forums and the IRC channel are there if you need ask something. The embarked documentation, although missing some parts, is a good resource. * FuelPHP offers a lovely ORM that will allow you to make database transactions a lot easier to write. Example from the doc : $post = Model_Post::find(3); $post-&gt;author = 'someone'; $post-&gt;content = 'something'; $post-&gt;save(); /* Updating an entry */ * It also comes with Oil, a command line utility that will make a lot of repetitive tasks easier to perform. For example you can easily generate the source of a controller by doing : php oil generate controller article add edit delete view And that will create an article.php file with the skeletons of the four methods (add, edit, delete and view) inside the controllers directory, along with the respective views. It can also be used to quickly create models, tables in the database, scaffolding, etc. * Unlike CI where helpers are mere functions, Fuel's helpers are now static methods inside separate classes. * There is a Fieldset class that will generate good looking forms from the model. All you have to do is to make an array of rules and this class takes care of everything. The validation is ran in the client side too. * About the templating : I'm not sure if I remember correctly, but in CI you had to write a template method that would load the header, the footer and then the data you give it : public function template($view) { $this-&gt;load-&gt;view('header'); $this-&gt;load-&gt;view($view, $data); $this-&gt;load-&gt;view('footer'); } * In Fuel there's already a template in which you can, uhm, plug the title and the view. Eg : public function action_view($id) { $post = Model_Post::find($id); $this-&gt;template-&gt;title = 'Reading '.$post-&gt;title; $this-&gt;template-&gt;content = View::forge('View', array('post' =&gt; $post)); /* As you can see, the body of the template is the rendered view */ } You can then access the data in the "view" view by echoing out $post-&gt;title, $post-&gt;body, etc. * There's more than one way to do stuff. Not sure if this is a good thing though, I often find myself doing something and wondering if I'm not doing it wrong, especially when I'm not following the DRY principle. It gets worse when I can't find explicit documentation about what I'm trying to accomplish. I've only ever used CI lightly in the past, this makes Fuel my second framework ever. All of these features are probably already present in other frameworks like Symfony or Zend or so, but that's the philosophy of Fuel : Taking the good parts from all the other frameworks, PHP or not. Overall I think it's a lightweight cool framework (says the guy who never used one before), correct me if I'm wrong with anything. Edit : Layout, grammar.
The simplest method IMO is to wrap whatever db class you are using, or inherit from and override whatever functions run queries. Inside your function you run the query, and check for failure and throw an exception. Then in the code using this, but you use a try/catch and rollback in the catch. 
I didn't look at much of the code. But this looks like some serious legacy code. `var $...` is PHP4 OOP
So... because it hasn't changed much recently, it's dead? Bit of an overstatement...
I tried that lib out but had to modify it to get it working. Here's a quick gist of my version of that file: https://gist.github.com/2626049 Hopefully there's something in there that might help you out. Rachet looks nice but I ended up just using a socket lib (https://github.com/igorw/SocketServer) and wrapping the websocket requirements around that and writing my own app framework. If I'd seen Rachet I might have gone with that instead. The docs look really nice!
Nice article, Code Igniter sucks and we know it. 
Having PHP code dealing with sockets scares me everytime... Ratchet uses the [BSD sockets](http://php.net/manual/en/book.sockets.php) so is the code pasted here. The [stream ones](http://php.net/manual/en/function.stream-socket-client.php) seems better. If you can get anything decent with that, go ahead... but please consider alternatives built on more suitable tools: Node.js (Socket.io), Python (websocket (gevent), …), Ruby (em-websocket (eventmachine), …), Java, …
I can't quite see this code being used in an live eCommerce application. It's just a simple class example for getting stuff from the database.
&gt;"You're using the wrong tools" is often a very valid criticism. Sure, but in this instance, it's not helpful at all.
Things people venting about specific software never want to hear: "Works fine for me!" "Can't believe you still use x!" "Have you tried y?"
Seems ok otherwise, but the "what version did you start with" is maybe a bit difficult and probably doesn't give you any extra information. For many php is their first language, and they probably won't care what version they're using. I used php first time in 2007, but even if I went to see some history now, I still probably wouldn't necessarily know what version was used in that setup.
Most folks don't. However, PHP evolved between major versions, and sometimes you run into people that write PHP 5 as if it was PHP 3. On the other hand, someone who can speak about the changes between 3, 4 and 5 is clearly someone with a lot of experience behind them - and is welcome to prove that by completing the test.
Do they have to do this on paper, or do you allow them to use a computer to actually code? I find that coding on paper is both annoying and unrealistic.
The code is written on paper by hand, but a PC with access to the internet (and PHP manual) is available. The point of the test is not to produce working code but to demonstrate that the candidate CAN write it without too much experimentation. Thinking THEN coding.
I do a similar thing. I spend about 50% of my time working on the web store, and about 50% on other systems. I will say that I enjoy working on the web store quite a bit. The big environment allows you to build up your own set of libraries to make the job easier and more fun as time passes. Are you going to be working 100% of your time only on that one store? If so, make sure you know what type of software it is, and make sure it's something worth working with.
Hmmm.... that's what I do. Make sure you get paid what you are worth. Good backend developers do not grow on trees (but they do sometimes smoke trees when not at work, lol). I make upwards of 60,000 euros/year with 30 days paid vacation. Good backenders are in demand and a consultant costs like twice that. Don't go cheap... these businesses are desperate for good peeps.
I coded one myself in about a day and it's been working without a hitch for 5 years. Recaptcha to me is too frustrating. 
Thatisthetest.jpg?
This is a bad idea. First off, it MAY or may NOT be safe for automated bots ravaging the Internet. Secondly, it is definitely very vulnerable for someone who specifically tries to mess with your form.
It's interesting to see if the interviewee goes out reinventing the wheel or not.
I started with version 3, I heard about 2, liked it looked at it and used it at 3. But when this was? No clue... or which minor version... hmmm
&gt; What improvements would you make? None, because it's a fucking guestbook.
As someone who often doubts their coding ability I've always wondered how I'd do if given a test like this, was relieved to see this is a problem I could actually solve with the resources provided. Thanks for the (small) confidence boost!
Thanks! Had a brief play with Fuel this weekend, and oil looks like an absolute godsend. The ORM also seems much more powerful than CI's implementation, but, echoing your point again, the (lack of) documentation worries me a bit. The whole thing feels quite a lot like Rails, but without having to learn Ruby first. Will look into it a bit more, although I'm also interested in Laravel which seems worth investigating.
If you want host/use your own CAPTCHA I recommend [Securimage](https://github.com/dapphp/securimage). If you're ok with 3rd party, as other have suggested, reCAPTCHA is good.
&gt; Honestly, as an experienced programmer, if you gave me a test like this, I'd walk because you're obviously looking for entry- or junior-level person to fill this position. Actually, no. At least, not in this country. Most candidates I interview have glowing CVs and recommendations, but wouldn't be able to code their way out of a milk carton. This is really a fifteen minute job, and you'd spend half of it making sure that you've read the task right and that it *is* really that stupid. And if you do this in fifteen minutes or less, or if you give off an indication that this insults you, I *WILL* take note and it'd work in your favour. The point is to prove that you can do what you claim you can do with actual code. A gentleman that took the test today had a B. Sc in Computer Science; claimed two years of production experience on top of that; and mentored students for two years as well. His salary expectation was way above entry level. Guess what? He spent an hour and and half alone in the room and the second test sheet was returned blank. He apologized without looking me in the eye and ran off.
So do you want the candidate to be cynical and not offer these options?
Uh, no. I mean, in test 2, the version I ask to *code* is the simplest and dumbest. The bar is deliberately set low. In test 3, I don't ask to code, but I ask what the candidate would want to improve - theoretically - if it was up to him.
Ah yes, I see now. I hope I would have paid a bit more attention if faced with this in an interview.
I wrote a test for candidates once using this exact same question for the exact same reasons you did. It was surprisingly telling. What was sad about my test, was they were able to write the result into an IDE which had error correction and function auto complete, I also never gave instructions that using the internet was out of the question. Sadly, still none of them were able to actually do it correctly.
This interview is mostly for a general PHP programmer and does not really figure out if the user is a "Web Developer" I think there is a distinct difference. This would only be a small portion of an interview that I would give. I realize it's extremely difficult to come up with a good set of interview questions because the field is so vast, but you really should focus on the whole picture and not just the language, unless you just want them to write php code.
&gt; ... if you give off an indication that this insults you, I WILL take note and it'd work in your favor Indicates more of an attitude problem, than expertise, in my opinion.
Do not overlook the value of international experience. I worked abroad and it always makes my resume more attractive.
If I'm doing 'a lot of data analysis', I'm prolly not going to be using PHP as it's not the best for that performance wise. PHP is a great middle ware language, but if you need to crunch numbers, it's not going to be the best.
hello, non-php programmer here, does someone want to post their solution to test 2? i'm just curious if i did it right at all :)
I think this is a good test. A lot of nay-sayers in this thread seem to think this sort of stuff is beneath them but miss the point that if that is indeed the case - great! Fill in the test in 10 minutes and accept the job, or don't bother applying in the first place. Clearly this is intended to weed out people that have embellished their CVs or are just liars. Really hard tests aren't a very good idea IMO because they don't actually say much more about a person than a relatively easy one. A good programmer can still show off a bit in an easy test while a bad programmer will be obvious from the test - e.g. a more experienced programmer might write a Closure to collapse the array instead of registering a new function (ignoring the array_sum function) as this would show they're aware of 5.3+ functionality and concerned about global scope. 
My thoughts. "'array_sum'... no wait, that's too easy, where is the trick?"
[Example #4](http://php.net/usort) shows a more flexible way to achieve the same result.
Exactly. This is not a 4 hours long assignment where you are practically doing unpaid contracting (like some other tests people have done). This is just a quick 15 minute exercise.
I could easily flip the question around to you: if your idea of an experienced programmer is one that can add integers and handle POST data, how will you be able to scope out or evaluate something more complex, such as an ACL system or CMS? But that's not the point. The point isn't that I won't do simple things -- in fact, simple things are most of what I do. To put it in slightly different terms: I can also read and I can write, which are simple things, but if Barack Obama were to ask me to write his official biography, what kind of test would he give me? "Hi, Jemaclus. I need a biography written about me. To determine your competency, I need you to recite the alphabet backwards." It's something that might take a few minutes to work out, but **it requires no real knowledge of writing**. Instead, he would ask for previously published material, references, etc. Something that proves that I can write on a level above high school English. If I'm interested in writing the next New York Times bestseller novel, then writing out the ABC's is a bit of a waste of time. I need to do more complex things: world-building, character development, points of view. Any English writer can write the ABC's. It's a poor yardstick for determining competency in writing. It's a straw man anyway. Do you imagine that Stephen King only writes novels? That he never updates his Facebook status or texts his kids? Of course not. He does simple writing as well. Similarly, any web programmer worth their salt can and will do simple things such as handling POST data and writing a function to add integers. But what happens six months down the road and you need to integrate Facebook with your app? From this interview, you have no idea if they can do that. As a result, I maintain that it's a poor test for determining degree of expertise. It's the web programming equivalent of writing the ABC's. Anyone can do it, but it doesn't tell you much more than that. Now, you see, we're at a bit of an awkward moment. I've established that I'm an experienced programmer, and if I were presented with your test, I would walk (which, incidentally, would solve the same problem as you ending interviews with me -- doesn't waste our time). However, you haven't (in this thread) really established what level of programmer you're looking for. You seem to think that I'm telling you your test sucks. That's not the case at all. I'm telling you what **I** would do if I were presented with this test. It's not that I can't or refuse to do it, but rather that it's an indication that your position is not one that I am interested in, and I'm even less interested in spending an hour talking to you about a position that I wouldn't want to work in. And again, as I've mentioned earlier, if this test is for entry-level programmers, then by all means, proceed. If you want intermediate- or expert-level programmers, I'd rethink the test. Good luck.
I don't like the code question II - You don't explain what the $object is for the function calls: function addItem($object) { … } function getItems($object) { … } How would I know what object was supposed to be passed to each method? The code is also really ugly... I'm guessing the $object in the addItem() method would be a single $t_item, which would require you to parse the html for the %s placeholders and insert the data from the form each time? That would mean you end up with finished presentational html from the getItems() method, which is very inflexible. But... How am I supposed to know what gets passed to getItems() - I'm guessing here you actually wrote the method definition incorrectly in your example, as in your textual description you say this: function getItems() - an array of stored objects, returned exactly as you added them But then in your code you have this: function getItems($object) { … } Doesn't make sense if I have to pass something to getItems. Actually, it could make sense, but not if I don't know what $object is. I actually never use the Heredoc syntax in my code, so I'm not really familiar with it. I'm guessing you just end up with a string that would contain %s inside it, in which case the addItems($object) method would end up parsing the html and replacing these %s instances, presumably just by making an assumption that the method receives the from field and the comment field in the same order each time? Anyway, if I took this test I'd end up telling you I didn't like this method of displaying and adding data at all, because you end up with the html being completely inflexible. I'd just add and retrieve the data as pure data objects and would then come out of php when displaying the html, only breaking into php to loop through the resultset. It feels like the code is incomplete to me, or am I missing something?
My approach to this would be to highlight the problems in the code and try to make it better, not just continue with the bad code.
Perhaps I should have clarified -- guestbooks are old, outdated, and lame. I can understand wanting to see how someone approaches the problem, however that doesn't address the actual problem that there's currently no real world use for "a guestbook". Moreover, people (users) don't use them so why not spend your time working on something that will actually be useful. If I see a site with a link that says "Sign my guestbook" I laugh and my opinion of the site goes down, especially if it's also got animated gifs. I'd almost expect to see those under construction guys all over as well. Finally, if someone asks me to build a guestbook in the context of an interview I start to question if these guys are stuck in the past and not able to adapt to the new web environment. It sows the seeds of doubt and I start to wonder whether it's a place that I'd care to work at.
Change the word "guestbook" to "comments section". Voila, it's relevant again.
sort of, it's the same type of data. But, there are out of the box solutions that do that much better than anyone could hope to build cheaply. Even ones that do all the functionality listed above. I know I'm being cynical, but I still wouldn't spend any time on a guestbook or a comments section. In an interview, I'd give a cursory effort, but I've done them so many times that it's not relevant or interesting anymore.
$sum = 0; foreach($array as $int){ $sum += $int; } It's slightly longer than array_sum() but only marginally. You could also add an '(int)' to force integer type in case some sort of mixed values were used. Alternatively, you could test it using is_numeric() as well.
I honestly don't remember. I first started writing PHP scripts ~2003ish. I wasn't doing anything complex enough to need to know the version. My code was bad, it was ugly. But it did what it needed to do. I do remember 4 and 5 (well the differences, not when they came out). I also remember dealing with 5.2 vs 5.3 issues. It probably wasn't until the past 2 years that it has really mattered for anything I've done. I don't know if that is because I learned to solve problems within the scope my PHP version was capable or I wasn't solving complex enough problems or I was simply doing it wrong.
If I were applying for a position on a cruise ship to be a juggler, and they didn't ask me to juggle - I would think something is terribly wrong. If they asked me to juggle 3 balls I would, but then I would ask for them to throw me stuff like chainsaws and baby kittens. If the salary is right, the platform / environment seem solid, and I have chemistry with the interviewer - I wouldn't turn my nose up at a crazy easy programming test. 
 I could give you 5 other variants, it's not rocket science, just a simple test. 
Just to be clear, I'm not the OP, sorry for the confusion. I've just used a similar test in the past and occasionally ran into people with the same reaction that you had. These tests aren't intended to determine your ability, they are intended to easily filter out shitty candidates from ever reaching the interview process. I assume tests like this take a talented engineer a very short amount of time to complete. The interview is where I personally dig into more advanced topics. I'm not going to ask someone to write an ACL as part of a pre-entry test but I'd definitely dive into that during an in-person or telephone interview.
You sound more than competent and I'm sure you are a part of good work in the field. I applaud that and wish you the very best. I mean this genuinely. Unfortunately, this test is just a filter. As someone who's been across the table from the interviewee many times, if the candidate balks at something that they could complete very quickly and find many problems with and felt compelled to leave the interview, *you're not the kind of person that I would hire, either.* The point is that the test is a simple task and you're being asked to complete it by a potential employer. The test is a favor to a seasoned developer for many reasons. It is not only going to set you apart from any other applicant, it is presenting you the opportunity to display how below you this work is and offers opportunities to discuss things that will establish your level of knowledge. Talk about why some of the problems are bad real-world examples and point out more efficient ways to accomplish things. In this specific case I would get in to talking about why I prefer not to use heredoc and talk about the ambiguity of the object that is being used. If this test filters out people that haven't completed the simplest PHP tutorial from a Google results page, fine. It has done it's job. If this test filters out people who are prone to walk out of a situation when they feel insulted, excellent. It has exceeded my expectations. This discussion has been valuable and I appreciate your contribution to it. It has reaffirmed the merits of using a very simple test, in my mind.
This is an interesting article/comment on using this kind of process in interviews: http://raganwald.posterous.com/bob-and-carol-and-ted-and-alice I've used technical tests as well, but I'd caution anyone against using only this. 
My point was about reinventing the wheel. This seems so small and possibly a bit obscure (I can't remember the last time I had an array of ints I needed to sum) that it wouldn't really fit in my definition of reinventing the wheel. It would take me longer to lookup array_sum() than write that trivial piece of code. Is that reinventing the wheel or saving time at that point?
... What? No, seriously, what? &gt; MAY or MAY not be safe for automated bots ravaging the Internet I'm working on the assumption you meant 'safe from'. You're falling into the same trap everyone does when they discuss anti-spam measures... "IT MIGHT NOT BE 100% EFFECTIVE!" So what? Neither is a captcha. I do a similar thing (hidden with CSS, named "email" so it looks like something that should be filled in) and it works great for me. Sure, a smarter bot might come along and I'll get a couple of spam messages in my inbox... But it stops a large chunk of the junk coming through without inconveniencing the users *at all*. And if more bots start catching on, then I'll modify it. 1. A solution does not have to be 100% effective. 2. You're not stuck with whatever you implement forever. If your solution becomes less effective due to smarter bots, you can always change/upgrade. I used to help out on a forum that had *huge* issues with spam bots registering and posting spam. The problem they ran into was that at least half (if not more) of their users were not native English speakers - so any fancy or complicated tests were out of the question. They were looking at implementing a captcha. Instead, I merely added one field to the registration form: "Enter this word below: orange". I didn't even change the word. It was static with each registration. According to all the spam experts around here, that should have done *nothing* to help the issue. Instead the spam stopped. Completely. I've seen similar results everywhere I've done this. The spam bots *could* work around it, but it's a hell of a lot easier just to go for the low hanging fruit and leave you alone for now. If more people start implementing this, they'll start working around it. &gt; Secondly, it is definitely very vulnerable for someone who specifically tries to mess with your form. Mess with how? Someone who wants to specifically attack my form? Sure is. But guess what - it doesn't make the idea bad. It just means that there *are* limitations, and it's a tool only to be applied where appropriate. (The same disclaimer applies to a captcha.) Protecting a registration form that provides some sort of tangible resource (eg: a service like Dropbox, where it costs you tangible resources - storage - every time someone registers)? Probably not an effective solution. You definitely want to prevent targeted automated registrations as they'll both provide benefit to the attacker and cost you. A contact form where the only 'bad thing' is that someone can send you a bunch of junk e-mail, and they really receive no tangible benefit from it? Not really a big deal. If they're specifically targeting you, a captcha isn't going to stop them anyway. They'll just get your e-mail address from elsewhere on the site (or by just sending you a simple question and grabbing it in the reply) and spamming you anyway.
NameNick's point is valid here. Most PHP coders will be using arrays for something other than pure numeric analysis. In the rare occurence that I actually needed to perform this calculation, I would just google "PHP array sum" to see if the function exists. Why not have them calculate the average value rather than the sum, and format it to a certain number of decimal places, etc, which would require the use of a few complimentary functions rather than a single rarely-used function? 
Sure. For entry-level positions, I would agree. I get the need for tests and filters, but I'm suggesting that for an advanced or seasoned developer, this is a bit insulting. If you were to look at my resume, cover letter, etc, you would see links to code samples, github repos, etc. That's the filter you need. I CAN answer your question in 15 minutes, but that's 15 minutes of both our time wasted. I've given you my credentials, and I'd much rather talk about your real-world problems and what I can bring to the table rather than you asking me to recite the ABCs just to prove I speak English. And I wouldn't just walk out. I'm a professional -- not an asshole. Of course here I'm being blunt and honest, because I believe blunt honesty is the best course of action when people ask for advice. If I showed up to a real interview and these filters were posed after having given you code samples (which, I can guarantee you, will contain POST data, basic function creation and algorithms), then I might inquire as to the details of the position, and if it turns out I'm definitely overqualified, then I would say I don't think I'm a good fit for the position, thank you for your time, and leave. And I might even say that anyway, since you couldn't be bothered to look at my code samples which illustrate many of the same concepts as your tests (and more) and ask me questions about those instead. I've already done the work (it's in my code sample), and lack of preparation on your part doesn't exactly endear me to your company or management style. By the way, this thread is me talking about why some of the problems are bad real-world examples and pointing out more efficient ways to accomplish things. ;) In this specific case, I would say thanks, but no thanks, and move on.
As a user, I fucking *hate* reCAPTCHA. It was originally okay, but they seem to have since run out of the 'easy' words and are now into total nonsense. I went and refreshed and grabbed a half dozen (only skipping one or two that were *actually readable*) [for your perusal](http://i.imgur.com/Jyi2G.png). * Random differently formatted image. * Various pieces of punctuation which are not always clear. * Some images that *don't even have a word on them*. reCAPTCHA is easy to work with for the developer. For the users, it *really* sucks. Any time I come across one and have to fill it out, I usually end up refreshing it a dozen times before I find one that I can actually *remotely* make out.
The test for them would be a formality, but formalities like that are required still. 
Sorta a copy straight from the php documentation. Posting a link to my blog post that copies the documentation from php.net. Also could have used http://us3.php.net/array_multisort though it supports more complex sorting.
I didn't downvote you but I presume your being downvoted because your missing the point. The test isn't about what is relevant or interesting, but rather it is an uber-simple use-case to establish how a coder approaches the problem. Almost any simple use-case is already played out a thousand times over. In other words, it's all been done and frankly it has to be because what else are you going to test them on? "Write a completely revolutionary program!" That's like asking someone to build a spaceship with used car parts. On a side note, one of the problems I see with the development community is we have a whole class of "elite" programmers who are obsessed with constantly doing new things in lieu of old because old is not in vogue. In that world - no one would ever fixes bug or improve old technology because it's not "interesting" anymore.
It's an idiot-not idiot test. People who fail it are the bottom of the barrel (and liars, too).
Rasmus and Andi are extreme examples, but there's some cutoff point where you wouldn't consider 'interviewing' people with these sorts of tests or 'gotcha' questions - you'd just know of their work and, if the opportunity came along for you to bring them on to your team (hire or contract), you'd skip the interview stuff - you already *know* they know their stuff. I'm wondering what the cutoff point for the OP is. Would you offer this test to someone who's already written a book on PHP? Or someone who is already Zend certified? 
Laravel man. http://laravel.com
&gt; I wouldn't turn my nose up at a crazy easy programming test. I would. I would want to work with people who are better than I am. With a test that simple, I would worry that their barrier to entry is too low and that I am going to be unchallenged and learn nothing from my teammates.
&gt; assume that your customer is a greedy idiot who doesn’t deserve a luxury solution Sounds about right :) Can I work for you? :p
If someone knows array_sum, they are likely to know the language well. If someone doesn't know array_sum but can do it with loops, they're likely to solve problems well. If someone can't write their own array_sum `$sum = 0; foreach($arr as $k =&gt; $v) { $sum += $v; }` they'll probably struggle with more abstract tasks (pagination, search, etc).
Yikes, what level of candidates are you testing at? Is this just a screener or the total sum of the interview (IE are there bigger design questions / whiteboarding afterwards?) 
HI, I am the guy who is being replaced! I quit some 3 months ago, moved to a new place. I also wrote a different test, which had a bit more of software design and JS stuff to it. Good PHP programmers are really hard to find over here (surprisingly so). Here is a better question then array sum: Write an a function which takes a key=&gt;value array and returns an array with only with only unique values (removing duplicates, regardless of which key you chose to keep). There are 3 good solutions I see: 1. If you know the API you can use array_uniqe. in that case I would just ask them not to use this function and write something themselves. 2. another cool option would be to use array_flip(array_flip($array)) which is a cool solution which show the guy has brains. 3. coding it himself - which would be optimally something like constructing as array with the values as keys and the keys as values and then flipping it again (implementing array_flip and doing it twice). The pit falls which shows a bad programmer would be: * not being able to solve it * for each value in the array looking in the array if it exists again. this is an overkill and really bad from a performance point of view. 
This is how I'd go about it : &lt;?php foreach(getItems() as $item) { $item = array_map('htmlspecialchars', $item) printf($t_item, $item['from'], $item['comment']); } echo $t_form; isset($_POST['from'], $_POST['comment']) &amp;&amp; addItem(array($_POST['from'], $_POST['comment'])); I don't really know what type of argument does addItem accept so I gave it an array.
Maybe, but if someone answers kiss-ass you can tell. * Because I just love love love it! Its so cool. * This one time, I forgot an if statement and broke pagination. THE SHAME. * Totally profession, maximum qualities. Whereas when someone answers honestly, it can give a lot of insight. * I like the feeling of building something from nothing. I do have days when the 90%+90% hits home, but over all its great to stand back and see a finished product I built (With a little help from Design). * I accepted a spec without enough detail, and ended up breaking external links until I could fix it. I'm a lot more careful about what the spec covers, and asking questions for clarification now. I'd like to be involved in the spec writing process if thats what you guys do. * I have a fair bit of code-pride, but I've put out my fair share of brainfarts too, so.. average? And I'd say only _slightly_ above average for professionalism. I've worked with some pretty wilful devs in the past though ;)
Or whether you realise that creating the "items" as entire html blocks is horrible, pointless, and will restrict the capacity to chop and change things at a later date? The entire templating system here is awful and should simply be scrapped. If I were given this project I'd scrap it all and just start again if that was an option. There is literally no benefit at all to creating these "items" as entire html code blocks, and escaping and parsing the %s elements after that point would just be awful. What if the html needs to change at some point? What if you want to present the same data in a different way at another point (say if you wanted to output the data as json or something like that)? This style of coding on any kind of scale will spell disaster for your project. It should be scrapped and replaced with much simpler code that would be far easier to maintain. As I posted earlier in this thread, your explanation of the code is insufficient to finish this challenge anyway. I've written elsewhere in this thread about that if you'd care to answer.
In my eyes the test is simple because the Candidates suck, and good candidates are few and in between and would likely go to other jobs which either: * Don't evolve PHP as the main tool. * In a More software orientated company * Pay better * Have better benefits I got 3 of my 4 wishes, and will get forth one eventually. Honestly the technical challenges we are (well now you are) facing require skills beyond what this test can indicate. but unfortunately hiring someone who can handle those out of the box is virtually impossible. My advice - hire young and inexperienced with great potential. it's better then experienced and mediocre. Experienced and good is unrealistic to expect. 
&gt; assume that your customer is a greedy idiot who doesn’t deserve a luxury solution. I might be naive in this area, but don't you want someone who will try to deliver the best product despite their personal views of the customer? If I were a customer and knew your company had this mentality, I would avoid your business.
I agree with this - i never use %s and printf style outputting and this would really confuse me in an interview/test situation. I'd probably ask if I could recode those HTML blocks.
Well, it was not our only security measure. The "honeypot captcha" as some call it worked pretty well for us. Clients complained about bots spamming their contact forms, add negative captcha, no more complaints. Worst case scenario is someone spams their email again and we have to think up something new, usually reCaptcha.
Right, so the test successfully determined that you're know PHP, the programming language, but you haven't memorized the PHP standard library API.
I use PHP since 1998. I know when not to use PHP and OP has to learn when to use PHP and when there are better solutions. you're the troll.
Presumably not, because you might be lying about being the author of that script.
And not all the builtin php functions available are faster...
&gt; Rasmus and Andi are extreme examples, but there's some cutoff point where you wouldn't consider 'interviewing' people with these sorts of tests or 'gotcha' questions So wouldn't that imply that you already know the answer to your question "Would you give this test to someone who already has an established reputation?"?
Yeah i'd have said "I know what these are - they have to do with printf - but i never use them and have no clue exactly how they work..."
&gt; don't you want someone who will try to deliver the best product despite their personal views of the customer? Google "worse is better".
The several comments somewhat changed my perspective. I need a bit of time to think.
Thank you. I think I misrepresented what the test means, and I am also overrelying on it. Let me think a bit :)
No probs :-)
Questions like these tend not to be very useful for finding out specific bits of information (e.g. the exact number of lines of code a person has written) but rather just give an application an opportunity to talk about webdev/PHP/profesionlism/etc in a slightly open-ended way. If you ask someone about a mistake they've made and they can only come up with a ridiculously trivial result (forgot a semi-colon and killed a site for a few minutes) then that speaks quite well to their level of experience, in both PHP and ways of deploying PHP applications. Similarly if the person hasn't ever read a book about programming or PHP they probably don't really know that much about either and don't take their own personal development that seriously.
So the first coder thinks it's clever to use code that another programmer has difficulty understanding. How many times have I seen this :-) Phillip.
The problem is this test rewards raw memorization which is not something I think is indicative off a good developer. So if I were the OP I would at least change this question to say "without using array_sum". However I think a far better skill is being able to look up information you don't already know and learn it fast. That is something I don't think I ever see on these tests.
It's not clear to me that the test DOES reward raw memorization.
Sure.. But the point is to realize that relying only on tests like this is a bad idea. From the sound of it, the OP realizes that, but in case others were thinking about just handing a test like this out to a candidate and immediately discounting anyone who doesn't complete it "correctly", there is more to consider. Note that the reverse is true as well. I've interviewed extremely talented developers who just weren't a good fit, personality or experience wise, with the team I was trying to assemble. That said, how you hire people is up to you, and if you find a way that works for your company, great! I just wanted to add the article to the discussion since it is relevant in some ways (and Reginald is a very well respected developer and writer). 
https://github.com/Xeoncross/micromvc
I was talking about that one question specifically, which does reward raw memorization.
Not really. You'll make the final decision - so even if they give you an opinion which isn't worth the oxygen consumed to speak it, it doesn't matter. All that matters is that they are capable of writing good code in the chosen language.
http://pastebin.ca/2145401 Don't call a customer an idiot in documentation. This includes coding tests. It's a bad practice and unprofessional to boot. Limits on size, filtering, etc should be addressed with a hand-wave. "Don't worry about it". The addItem and getItems should have implementations or there's a little too much to have to implement yourself to make it a useful test. Mostly it's a race against time for most applicants who know what they are doing.
Your code is wrong self::$instance should be an instance of your class, not the connection. If that was the case you could easily wrap the mysqli methods in your own and gain access to their response before passing it back to the caller. e.g. class Db { private $_conn; private static $_instance; private function __construct(MySQLi $conn){ $this-&gt;_conn = $conn; } private function __clone(){} public static function getInstance(){ if(!self::$_instance){ self::$_instance = new Db(new MySQLi($host, $user, $password, $database)); } return self::$_instance; } public function getConn(){ return $this-&gt;_conn; } public static function query($sql){ $result = self::getInstance()-&gt;getConn()-&gt;query($sql); //do something... return $result; } } But I'd avoid using singletons anyway if possible.
I am also talking about that question, and I'm saying it doesn't reward raw memorization; at least it does not reward it any more than it rewards "being able to write a function that sums up the integers in an array". Both answers would positively influence the result, while "was not able to answer the question" would negatively influence the result.
what's wrong w/em?
What do you use for a honeypot? Hidden inputs? Hiding inputs off the screen?
Are you asking people to code something on paper? Without giving them an editor, compiler, and access to Google? If so, then you are testing for a set of skills which they won't need on the job. 
You know, there are ways to prove authorship.
Nah, only about 250 downloads per month. 
You're telling me 250 people a month are buying (with real money) a guestbook script? That's crazy. Who are these people?!
&gt; assume that your customer is a greedy idiot who doesn’t deserve a luxury solution Unless I was really desperate for work, this would make me decline the position. It's unprofessional and makes me think that the company doesn't care about its customers, which is rarely a good thing (if ever). Its also hints at a negative work environment, which I try to avoid.
&gt;In my case I just would send you the guestbook script I've written **and am selling** via my website. You did
That doesn't really matter that much, because that's not the point of the test. The point of the test is to identify people who have *absolutely no coding experience whatsoever*. If you've ever tried to hire a developer, you'll understand. The technique used is not really what's being tested. So the test doesn't need to be complex or require a specific variety of functions or techniques.
&gt; The problem is this test rewards raw memorization No it doesn't, you're missing the point of the test entirely. The point of the test is to identify people who have *never written a line of code in their lives*. If they are unable to hand in anything that looks like code, it's a fail. If it looks like it would work, it's a pass. Whether or not you know a particular function is irrelevant to determining this.
Except that it doesn't, if you understand the point of the test.
&gt; I don't think knowing that the function array_sum exists is of any real benefit. Are you trolling or what? How clear do we have to make it that the test has nothing to do with whether you know this function or not. 
The problem is that you can't measure skill in time. I've been playing guitar for eight years, but I still suck at it. Likewise there are people who mess around with programming in their free time and can barely write a for loop.
This. I've been using PHP since 1999 and still have to look up the order of all those (needle, haystack) args. It's different with every function. That being said, you need to be able to keep in your mind all the pieces of your code. If you can't keep up with that, you're not going to get very far.
You underestimate to what extent people *lie* in order to get a job. You also seem to think such tests are set in stone. I have a similar test/set of questions that are used as a guideline, but it's simply that, a guideline. Depending on how the first few questions go, the conversation can quickly go in more detailed direction. 
I don't mean to sound harsh in this response, more along the lines of being blunt, but if I was given that as an answer I'd immediately throw away that applicant's information. There are numerous problems with syntax and logic in your answer.
I would change that exercise to having them improve that code. I also looked at it and went "eek"
Check out [this](http://www.reddit.com/r/PHP/comments/a2l4o/i_want_to_be_a_better_programmer_what_are_your/) thread. It's from about 2 years ago, but it was in the FAQ, so it must still be good, amiright? ;-) Other than that, all I can say is look up the stuff you want to do in the official docs, and just google any questions you might have that weren't explained in the official text or the comments.
Great book is PHP Objects Patterns and Practice http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X/ref=sr_1_3?ie=UTF8&amp;qid=1336447347&amp;sr=8-3
wow... i really like this. care to explain a little more? sorry, I am a bit new to internet programming? Did you just build a regular form and have CSS hide it? and how did the bots know to fill out that one instead of the other?
All I see is a login page. Sorry bro. 
apologies, thought it was open to the public. It should work now.
Hm. I could BS my way through this test, and I'm not exactly what you'd call a good programmer (no degree, for starters). Maybe you could add a really difficult Part IV.
Actually, I'd be interested in seeing your sample interview questions (I want to test myself and see how many sighs I have, lol).
&gt; If I didn't write it... I don't use it. That's just silly. I 100% guarantee that you use *BOAT LOADS* of stuff you didn't write. Unless you're telling me you solder your own computers together, scratch bits/bytes onto hard drives with the steadiest hand ever bestowed unto man, and whistle your code to over phonelines to client web browsers. Even forgoing the [absurdity of that last statement](http://www.youtube.com/watch?v=7s664NsLeFM) you're sure to use tons of built-by-others code like jquery, apache/nginx, php itself, or the IDE you use. Yet somehow you reject frameworks out of hand? With such a serious case of [NIH](http://en.wikipedia.org/wiki/Not_invented_here) it's good you've found a freelance niche that works for you, cause no serious development team would hire someone that thinks this way.
I haven't had great experience with either CI or ExpressionEngine. ExpressionEngine was such a disappointment for me that I grew to question what EllisLabs is really up to. (just like OP describes) Anyways, this is just my experience and opinion. ZendFramework and Symfony are my favorite.
First study the object oriented principles. This is what large commercial projects are built on. Second study design patterns and find out what is a singleton, composite, model view controller, etc.. because large project will utilized a series of these patterns. Third learn a robust framework like Zend 'cause that's corporate America's favorite at least from what I've read and seen (if you plan to work for a big company). And look at their source code and try to understand how it is put together. Fourth learn a CMS like Drupal/Magento/Wordpress and learn how they're put together. 
I highly recommend this book; in fact, the copy that I've had for a couple of years is on my desk right now.
Notice that you add an item after outputting the previous items and form. Perhaps the input and additem should have gone at the top?
I get along very well with coworkers and clients alike. I have a great deal of respect for my boss. I wrote a scathing review of his test because his test is garbage. It is poorly written and obscure. It has nothing to do with programming and everything to do with the OP trying to be witty. Most of the other comments in here either mirror mine ( albeit with nicer wording) or offer nothing of value. I'm not going to apologize for being harsh because this test deserves it.
If you want to learn more about OOP, the best book to read is this: [Design Patterns: elements of reusable object oriented software](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1336458148&amp;sr=1-1). It explains a number if techniques for object oriented design, an although it's examples are in smalltalk, it's easily understood in php. 
There's lots of things wrong with them. Not least of which is the fact that they are hard to test. Basically, singletons are just another way of introducing global scope to your application, which is not good if you can avoid it. Have a look into Dependency Injection / a Dependency Injection Container. It offers an alternative to singleton usage. The [Symfony docs](http://symfony.com/doc/current/book/service_container.html) might help you.
Large file uploads over the web can be problematic. Your best bet is probably to look into something like [Plupload](http://www.plupload.com/), which is a Flash-based solution. However, that only takes care of the client side, and is not without flaws. You may or may not run into any number of essentially unsolvable issues to do with the way browsers and servers interact, Apache and PHP settings, client side limitations etc. Depending on whether users of the form need to authenticate first, involving a framework may be a good idea.
If what you say is true there is a problem: The second test does that too, which would make the first test redundant. Like so * Q1: Can you do task A? * Q2: Can you do task B (which includes task A)? Q1 is a waste of time if it's purpose is just to see if the person can do task A, because Q2 already does that. 
I don't understand the answer. I asked what the point of the first test was. The reason I asked is that you said it yields interesting results but that you wouldn't judge someone for doing it one way rather than another. But, I asked, surely the purpose can't be *just* to get interesting results; at some point you would have to actually judge those results. Your answer is that it yields interesting results, and then you moved on to discuss the second test. So your answer must be that the first test *is* just there to yield interesting results. But you started your comment with "no no" so it can't be true that the question is there just to yield interesting results (without judgement) So I'm confused. The answer seems to confirm what I posited in the question is the case, but the answer says "no", what I posited in the question isn't the case. 
&gt; The point of the test is to filter out people who have absolutely no coding experience whatsoever. The second test also does that. If they had no coding experience whatsoever then when they answer the second test it won't even look like PHP. That would make the first test redundant. 
Let me take a shot * * * **What version of PHP did you begin with?** &gt; PHP 4 **Your opinion of PHP as a platform? Strong and weak sides?** &gt; Great for simple web pages, struggles as descent tool for web applications. **When PHP should and shouldn’t be used?** &gt; PHP is only practical as an overly advanced template language and struggles with anything that doesn't involve Apache. **Leaning towards server or client side?** &gt; Big emphasis on client side because this app is going to be a pain to scale on the server. **Most interesting/complicated project worked upon? How large was it?** &gt; Statistical number analysis, grew to big for PHPs own good. **Most notable mistake made?** &gt; Choosing PHP as my first language. **How many lines of code do you think you’d written?** &gt; 1,000,000+ **Python?** &gt; The place I ran to and never looked back. **[***End Questions***]** On a side note PHP was partly responsible for the creation of [Ruby on Rails and Django](http://www.youtube.com/watch?v=cb9KDt9aXc8).
You're right ! By doing so, the newest inserted item will be displayed right after the insertion. I should've added a header redirection to avoid multiple insertions by repeatedly pressing F5, but this is just something I scribbled out really quickly without giving it much thought.
That wont really teach you much about OOP, just the underlying mechanics. Also, the PHP comments section could be a double edged sword.
My impression was that CodeIgniter developers moved onto FuelPHP. FuelPHP is mainly a rip of Kohana, copying its dated static architecture and adding scaffolding with a couple new libs. I don't know why people get fooled into using either of them. I guess it doesn't matter, I've moved onto haskell... no more of this bs.
Sorry, my mistake. People can download and use the script for free, but it contains a ad. In order to get rid of the ad, people have to purchase a license. Kinda like shareware, I guess. There are about 300 downloads of the script per month but only a small percentage purchases a license. 
Not really. Since task B is harder than task A, upper management may believe the candidate is acceptable (especially if they're cheap) and ask you to hire the candidate anyway and train them. If, however, they can't even do task A, they can't be saved.
I'd be interested to see some of the stuff you've been given, you know, the greatest hits. You could black out all personal stuff of course but I'd be interested to see what some people put. Would this be possible? For us redditors? Your most loyal internet strangers?
How?
FWIW, I'd test Andi Gutman the same way I'd test all my other candidates, 'cause I've never heard of Andi Gutman. And if, in some parallel universe, I had a 50% partnership effort working with Rasmus on inventing PHP, and I was applying for the OP's job (implying I wanted the job that OP was offering), and the OP gave me the test, I'd gladly do the test, because I'm pretty sure I'd ace it. If it were someone whom I knew was already a good PHP programmer, like a personal friend of mine, I'd probably let them skip the test.
I think the best idea with a test like this, is to ask the candidate about why they did it this way and more importantly, what they think could be improved if they were doing it for real (checking it's an array, casting to ints etc).
&gt; If someone knows array_sum, they are likely to know the language well. Or they just happened to have used it yesterday. I also have been using PHP for over ten years, and never had need for this function, so never looked it up, and so am not familiar with it. That does not mean I'm not a shit-hot developer.
That's the second step, not the first. The first is simply about saving time. It works.
I could not know how to do this in a loop but have the function memorized from looking it up in the past. I think the other question take care of this though.
That's interesting. You think "oh this function will do that but the tester must want more" so you reinvent the wheel? I don't think that would be wrong in the case of this test though.
I'm confused as to what this question means: "Leaning towards server or client side?" How is a PHP dev on the client side? Maybe I don't think of it correctly but I think of client side as html/css/js. 
Here it is on Apress where it costs most, but you could buy the eBook instead if you like. http://www.apress.com/9781430229254
FWIW, IDEs can help with that. As much as I've seen people from other camps (C#, Java mainly) complain about PHP's mess of functions and param orders, *none* of them would ever consider doing serious work without an IDE and autocomplete/intellisense. No doubt there's generally more consistency in most other platforms, but I maintain that's just not as big of a stumbling block or timesink as people think it is. (not saying you said it was, mind you, but many do).
I use hidden text field and then check after submit if there's content in it. Seems to work pretty good, and there's no need to mess with a captcha. 
As the saying goes, you can have ten years of experience, or one year of experience ten times over.
Pick a framework - here I'll do it for you - CodeIgniter. Learn how to build sites with that - their way. It'll teach you not only about oop, but (at least one way) to structure software. I've personally never been able to pick up a book, and learn something - find a project, and use that (and Google) to develop your skills.
Thanks for the reply! I had a feeling I could potentially run into some problems with this. I've got this project because some of my users have a hard time with FTP apparently. I really don't know how much more simple I can make it. These are video files as well so we are talking several gigabytes per file. 
I could not agree more with all of this. Download a copy of Symfony 2 or CI and you'll be working in objects in no time flat - the ORM layers really make this click. Fowler is fantastic - [this book](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420) really upped my game like whoa.
This, except the last bit. Do not get design tips from Wordpress *whatever you do*. That thing is a trainwreck - they're still using globals for f*cks sake!
Think beyond PHP is the only real answer. The book that propelled me was [Martin Flower's Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420). Examples are in C# and Java. Also, learn another language like Python or Ruby or even OO JavaScript. When you look at what is coming down the pipeline for PHP; traits, mixins, etc.; these are things commonly found in other languages. While PHP's OO is based on Java. 
Agreed on you there. Just a few days ago I met someone who offers their services at € 30,- per hour. He's from The Netherlands. Can't figure out how he's surviving lol.
good idea!
why not [fat-free](http://bcosca.github.com/fatfree/)?
You make your form like normal, then make an input that you hide with CSS. The bots just fill out every field, even the hidden ones, while humans can't really fill out the hidden field. So, if the field is filled out, a bot (or a very determined human) filled out the form. Your PHP validation should check that field to make sure it is blank, if not, do not mail. 
Here's my experience with these listed: Drupal - high pay for the top-level developers, horrible learning code. Many Drupal devs I've spoken with don't consider themselves "PHP Developers", but rather "Drupal Developers". Wordpress - low pay for a majority of developers, high pay for top-level. Extremely easy learning curve. Zend Framework - I've yet to see a salary position that offers less than $60k for a developer that knows ZF (or any of the more popular frameworks). Then again, I see very few freelance ads for ZF devs. Magento - High pay for top level developers, horrible learning curve, market may be saturated with low-pay overseas developers which requires you to stand out among the crowd to get into that top level. If you go into something solely for compensation, you won't last very long. Boredom and getting burned out are the enemy here.
Or Drupal, Magento, or Joomla. Magento is built off of a way-to-old version of Zend Framework, and Drupal, Wordpress, and Joomla have such old codebases they are examples only of how you shouldn't code a modern app.
When new devs start working with us, Xdebug is the first thing I ensure they understand and use. Having access to the full state of the current execution in a single location, without littering the source code with `var_dump`, `echo` or `print_r` is something that I think all developers should appreciate.
I just bought it and plan on reading it this afternoon. :) Thank-you.
The Singleton is an **antipattern** that one should pretty much never use. **Singleton: Worst anti-pattern ever?** http://caines.ca/blog/programming/singletons-anti-pattern-or-worst-anti-pattern-ever/ **I'm Adam, and I'm a recovering Singleton addict.** http://adamschepis.com/blog/2011/05/02/im-adam-and-im-a-recovering-singleton-addict/
Just recently i have been using Slim http://www.slimframework.com/ and as i need and ORM i have been using Idiorm https://github.com/j4mie/idiorm
The unframework FlourishLib www.flourishlib.com. Or my framework that depends (and includes) Flourish lib: Thrive: http://www.phpu.cc/releases/thrive-latest.zip. It is more higher-level than Flourish; it includes stuff like a preferences engine, Autodiscovering + caching Autoloader, and the Thrive CLI Parser (where all you have to do is say $cli-&gt;getParams() and it'll neatly package --flags=and_values into a neat associative array). Both support PHP 5.2+ and are permissively licensed for maximal freedom.
This is an excellent question! If there isn't a library that can do this I would be interested in writing one with you.
You got me curious, how would you approach this kinda of problem?
Honestly I think the real problem is a lot of these guys aren't experienced enough to "know what they don't know". Salary and environment are the biggest factors for me when it comes to where I work. I am passionate about my craft - but as an engineer the responsibility of challenging / progressing my skills falls upon myself (not my employer). Of course its always great when it works out that way - but it's not the end-all-be-all of where I work. I can always make a code base better, and if the working environment is right I can help guide management into making better technical decisions. That's what separates the boys from the men in this field.. I can't tell you how many times I've worked on teams where the guys just bitch about how much the code/platform sucks. You are an engineer and have access to the repos...fucking change it instead of bitching about it. I hear a lot of guys saying "oh I want to work with people who are better than me" and I totally agree - that's a great place to be at times. At other times I have found myself to grow the most when I am a lead on a team...I take responsibility to make everything better as a whole. Even if you are more experienced than your peers - there is great value in the teaching and the peer review process. Bottom line is I think a lot of guys lack humility. A programming test just weeds out the fucking idiots - its about 10% of the entire interview process. What I look for in potential hires is humility and a passion for the craft. If you have those two things in this field you will go far. If you are an egotistical dickwad you will be shown the door. Been at this for over a decade - I'm great at what I do, but I will never be the "best". The more I learn the more I realize I don't know and that's what keeps me coming back. I love this shit.
Use an application that can handle both formats natively so you don't have to do double conversion. I have used a statically compiled sox binary and embedded that into the repo. That way I know it will work without requiring any external libraries and will have what we need, and is a known working version. I think I have the compile options that I used to build it if you are interested.
I thought you wanted a pure PHP solution. That's where my curiosity kicked in.
Not true. explode() is a string function, and is needle, haystack. Also all the preg_* functions. And so forth. Seriously, if there were an easy mnemonic, I'd probably have it memorized by *now*. ;)
There was a specific reason I was not using var_export, though that reason eludes me now. 
You'd have to statically link them after compilation, then upload and chmod them to be executable. You'd need SSH access on your server, and access to a Linux machine or VM to compile them.
Just out of curiosity, why do you need to convert MP3's to OGG?
What IDE do you use?
Thats kinda what I was saying to hukner below; if you're a shit-hot developer you'll be able to type out a long-hand of array_sum without thinking about it; with indentation, semicolons, initialisation and in an easy-to-understand manner. If you're a shit-hot developer who also remembers array_sum at the time, you'll probably do both, because "aha! theres a function for that!" is obviously not the point of the test. For example, my code-test for my current job was this: Get a twitter feed from http://www.twitter.com/username/tweets.json*, extract the tweet body, and output it to a file named "tweets.txt" in a human readable format. \* I forget the exact url and response format You can do that really quickly: ob_start(); foreach (json_decode(file_get_contents($URL), true) as $tweet) { echo $tweet["tweet_body"] . "\n"; echo "----\n"; } file_put_contents("tweets.txt", ob_get_clean()); (not tested the above, but you get the gist) or you can do it crazy complex. I deliberately did it three ways. 'five minutes' (similar to above), 'classes' (using a library of array helpers I had just written) and 'one-liner' (as above, but trying to get everything inside one function call.. can't remember exactly what I did for that right now, but they all worked). When a test looks insultingly simple, they're asking you to show off.
looking through your comment history I feel honored you stropped and commented in my thread.
Just be careful about the "everything is an object" mentality in php. Sometimes this can lead to pretty severe performance degradation. For example, in our office one of the developers wrote a small file manager. In the file manager, he made every single file its own object. However, we wound up encountering directories which could have 5000+ files, and he was creating an object for each individual file, and then storing them in an array for sorting purposes. This lead to the server using ridiculous amounts of memory and the script having an incredibly slow execution time.
Can you be more specific about your needs? What does your current implementation use? Is it some mix of PHP, Javascript and HTML? [Here](http://stackoverflow.com/questions/3203100/convert-php-site-to-exe-desktop-app) is a Stackoverflow question that is pretty much the same as yours. The best suggestion is to not try to create an exe, but deploy a web-server stack to run locally on the machine. It could be configured to connect to your central server. You could alternately write a small wrapper application around a browser widget in C# or whatever language you choose for the desktop application and then have that as a window into your existing web application. That way you are in control of what browser it uses (no need to worry about supporting lots of different browsers).
Not that easy for the developer either. Try doing something simple like centering that ugly POS on the page! Really uncustomisable, lots of bugs, pretty much zero support and it would seem abandoned. I suppose r/inglip wouldn't exist without it though. 
It's about a large and bloated as Wordpress and Drupal. With APC caching it still uses about 5MB + process memory. However, I'm pretty sure it's built to be much more modular to develop addons than Wordpress. I've had other developers recommend it instead of wordpress when you need more control over custom applications.
PhpStorm.
Yes, even plain editors like Geany support descriptions of the arguments. Google is only for more complex examples and support.
Great! Now if I could only figure out how to properly use it, it would make my life a lot better. (And that's an insult to me, not to Xdebug). 
Thanks!
That's insane. And I thought parsing 4 gigs of airport information was a chore.
What happens if one of your insert statements fails?
Yep! ffmpeg is truly one of the best programs ever created, it's really a swiss knife of no comparison. It does an amazing array of things. Just add some settings for quality if need be... -ab is bitrate in kilobytes $Command = 'ffmpeg -i "'.$Filename.'" -acodec libvorbis -f ogg -ab 128k somefile.ogg'; passthru($Command); you can also transcode directly to the browser: $Command = 'ffmpeg -i "'.$Filename.'" -acodec libvorbis -f ogg -ab 128k - 2&gt;/dev/null'; header("Content-Type: audio/ogg"); header("Content-Range: bytes 0-1/*"); header('Content-Disposition: attachment; filename="somefile.ogg"'); passthru($Command);
Fair enough.
It will change your life.
Won't that greatly decrease the sound quality converting from on lossy to another? I'm not saying don't do it, but wouldn't it make more sense to convert from a lossless format like flac to a lossy format(ogg)?
How would you do that with PDO?
That's what I have heard, and while I am not an idiot, I for some reason have a hard time getting it to work. I used to (try and) use it for PDT, but I may have it another shot now that I've started using Zend Studio. Off chance, does anyone happen to know of any good tutorials, specifically related to using it in ZS and CodeIgniter? (And yes, I know how to use the Google)
PHP has no problem scaling traffic/user wise. Keep your architecture simple and shared nothing. As long as your DB can take it you can throw as many application servers you need at the problem. The complications come when it comes to scaling the size of your application. When your codebase is to large or complex to fit into your own head - you need to rely on your language and tooling a lot more. Unfortunately, this is where PHP can let you down. You'll want a test suite to help you identify far-reaching effects of a change. You may want to leverage static typing to cut down on errors. You'll want a sane way to organise your code to keep things modular. You'll want a flexible language to implement common design patterns. You'll want mature and stable libraries for common functionality that you shouldn't be implementing yourself. This is where PHP can let you down in the "enterprise". If your application is going to be of such complexity that the above might apply to you then usually the approach is to split the application into many applications of less responsibility.
Yes, use a framework. Try Symfony for a full-featured, full-stack framework or something like Silex for small and agile.
Yes, New Relic is awesome. They track a lot of good stuff... It can sometimes tell you things about your site and infrastructure that are not immediately apparant.
My company just got setup with a demo account and hooked it into one of our production servers and let me say.. WOW! It collects and connects so much data together and ties it all together from request-&gt;php-&gt;db-&gt;client-&gt;render. It provides some amazing perspective into how things are performing. Highly Recommended.
Wouldn't you just bundle queries up into a transaction?
Memcache
Totally agreed. The object-using-more-memory mentality may be valid in languages like C++ and Java, but it's much different in scripting languages like PHP. In fact, PHP stores objects and arrays internally almost exactly the same, they're essentially both hash tables. Which is why you can always dynamically add more elements to your array whenever you want, or create new object properties. And even though objects have methods that act upon them, it's not like those methods are created uniquely in memory for each object. I highly recommend this article that explains PHP's internal hash table implementation (explained in simple terms) http://nikic.github.com/2012/03/28/Understanding-PHPs-internal-array-implementation.html
Even going back to the mysql 5.0 docs, it clearly states this is expected behavior: http://dev.mysql.com/doc/refman/5.0/en/insert-speed.html 5.5 isn't much different http://dev.mysql.com/doc/refman/5.5/en/insert-speed.html Most notably: &gt; &gt;If you are inserting many rows from the same client at the same time, use INSERT statements with multiple VALUES lists to insert several rows at a time. This is considerably faster (many times faster in some cases) than using separate single-row INSERT statements. If you are adding data to a nonempty table, you can tune the bulk_insert_buffer_size variable to make data insertion even faster. See Section 5.1.3, “Server System Variables”. 
I think this is very real world-ish for maintenance scripts and the likes. If you're working with a massive data set for example you may be prunning old records from a high traffic table such as messages or activity logs to a archive table that is hit less often. You might have millions of rows in inbox_table and move older less used items to archive_table keep index_tables indexes nice and fast. Doing massive moves via pure SQL will lock tables and rows, if you chop this task up into small bits it will be much nicer on your server. Maybe pull 500 at a time, build their insert query and delete queries in the same loop and issue both queries. Deleting 500 rows at a time, potentially with a .5 or 1 second sleep between iterations will give your DB some breathing room and keep resources available for more important tasks that might otherwise queue if you're altering 600k rows between 2 tables. I don't think this is a lesson in avoiding query building loops so much as it is a lesson in batching queries to avoid the overhead of the connection/latency.
Spreading misinformation that flies in the face of the docs (see my comment at http://www.reddit.com/r/PHP/comments/tdrm0/why_a_query_shouldnt_be_put_inside_a_loop/c4lu8iy) with out more than hand wavy accusations is irresponsible. Namely I'm addressing your charge the example is a 100% hack and somehow with any reflection of reality. Using transactions when possible and applicable is certainly recommended. Here's another way to compare the speed of multirow versus single row inserts. Take a sufficiently large table (100K rows or 10 megs in size should do for this test) and take two mysqldumps. One with all default settings and then one with --skip-extended-insert. The first will build multi row inserts, the second with one row per insert. Reload them into a test db straight from the commandline with mysql -u root -p -e "source /path/to/dump.sql" testdb This further removes any iffyiness around the language or script being used if you're just asking which is faster: single or or multi row inserts.
It's honestly not *that* hard (necessarily). There's no "scalability bible" that you can pray over to get there, either, because every application is it's own special snowflake. Now that I've made that disclaimer, 95% of the time, or more, you can solve your scalability problems with three things: * Caching - make sure your application is built with caching in mind. Create a caching API that can use various back-ends (files or APC for developers, memcache for production, usually). Cache invalidation is probably the hardest problem you'll ever face, so think carefully about it. * Database replication - for at least 95% of use-cases, you can set up replication to distribute read load. You handle increasing write-load by scalilng the master database vertically (throw iron at it). * Load balancing - design your app around a share-nothing architecture. Use a relational database, or memcache (or maybe some nosql thing) to store session data. Ideally, your load-balancer can route any http request to any web server. Maintain separate web servers plus a CDN for any and all static assets. Those are the three big design issues you need to worry about, usually. If you're actually going to be the next facebook or adwords any day now, then you need to hire tons of expensive people with relevant experience. If you're just building a relatively simple app that's going to support a couple of million users, it's not (quite) rocket surgery. **EDIT**: In all honesty, designing and performing load tests to prove your infrastructure can handle the load is arguably more difficult than designing and building that infrastructure.
Absolutely. Traffic is relatively easy to scale for. Logical complexity, and change/migrations, are where there be dragons. The better engineered (think encapsulation, separations of concerns) your system is, the easier it will be to scale. The notion of looking at the app not as a monolithic entity, but as a system of related applications, is incredibly valuable. 
INSERT DELAYED should help no? not that you should loop. But if you had too. 
I'm not sure what you mean by that. There's nothing wrong with not being cut out to be a programmer. Some people are awesome designers. Other people are very good at organising other people. To be a programmer you need to be able to see how what you are writing works in an abstract sense. If you cannot see instantly, in your mind's eye, that doing the same time-consuming thing 50 times in a loop is a bad design choice when it can be done in a single time-consuming thing done all in one batch, then programming is not your calling but there is certainly going to be something else you are good at.
It's worth mentioning that prepared statements are actually slower in most typical cases (despite the mythology surrounding them). It's pretty easy to run a test. Here's one [comparison](http://erlycoder.com/69/php-mysql-prepared-sql-statement-vs-sql-statement). There isn't much overhead in asking the database to parse an SQL query, but there is significant overhead in separately submitting a prepared SQL query separately from the data (it adds an additional "roundtrip" submit and response that has to be made to the database server). If you're submitting 10s of thousands of identical queries, prepared queries can be just slightly faster, but only in some cases. But for more typical situations where you are making less than 10000 or so queries at a time, it's faster to use PDO::query() or exec() with quote() (and it's much easier than prepared queries as well). I've seen people who will use a prepared statement to make a single query to the database. The added overhead makes it 2-3x slower than just using PDO::query() (using PDO::quote() on variable values).
no problem ;-)
Dynamically changing the title without a page refresh is pretty cool? Being pretty cool seems like an advantage to me. FB puts that insidious (1) on the title bar to remind you to come back to the page when you get a notif. Seems to work pretty good for them.
Hi from the back row ;)
I don't think that's a fair description. Some of our users that have Javascript disabled include: * Blind users * Amputees * Corporate users (Javascript is often viewed as a security risk) * Users on ancient computer hardware Part of the [NZ WCAG standard](http://webstandards.govt.nz/guides/technical/) I must adhere to requires me to make everything accessible without using Javascript. I can definitely still use it, but it has to degrade to an alternative means if it's not available
Your going to have a hard time convincing the databases. Make sure to have a Slave that all READ-ONLY transactions go through first. Make sure your code does NOT rely on local filesystems (sessions can be a bastard for that) and you should be able to throw more application servers as the traffic grows. Memcache will be your friend for caching DB queries, and can be used cross-application server. APC is great too, offers opcache and key-value store, but only works on a per-server basis. Leverage these tools and it should scale.
He's probaby just learning CI.
I completely agree with NameNick here. PHP has way too many functions and some of those functions aren't even necessary. array_sum() is one of those. 
I once had a to build a script that read in data, and inserted it into a DB. It was for use on my own machine, with pre-prepared data, in a closed environment. So it only had to work; security and validation were less important. I naively just iterated over each line in the file, and then inserted. As the file was about 4gb in size, I thought this would be good at keeping the memory usage down. This kind of mentality easily happens in naive implementations, as querying in a loop is much simpler then using batches of inserts. Performance sucked, so I switched to use batches, and it became near instant.
The first bottleneck you'll have with the DB layer. Use caching a lot like Memcache and APC. Keep read/write operations in the code separate so later on you can set up a Master - Slave architecture for your DB. For ex. if you don't keep track of DB connection for reads and writes then later on when you want to separate write operations to another database you'll have to modify your code. Look at haproxy for the DB load balancer.
Or for sure, but performance isn't critical for this particular script so I just did it the easy way (250,000 individual inserts). I should have had the script retrieve the data and write it to a giant SQL file (Like the kind phpMyAdmin generates), and then import that. 
Well it depends on a lot of different things. On one of the oracle databases I have to query, a unique key lookup takes around 2-3 seconds. Querying a view I have access to with a similar # of records takes several minutes, but that view is pulling from many tables.
:| Did I say I wasn't using prepared statements? Because I am. My database layer automatically builds and uses a prepared statement when dealing with insert statements, so I didn't even have to do anything special (And I built the db layer myself).
I'm not and I will never be using their services. While some folks can happily accept that data related to their servers &amp; services goes to a 3rd party server, I can't do that. Simply put, some companies prefer to keep their stats private and all systems closed to people from the outside of the company. Their pricing is another reason why I will never use their service. 
I've never used prepared statements as a performance reason; I've always used them as a method to prevent sql injection attacks.
Memcache for sessions! Best thing I've learned in the last ten years. Automatically scales as you go.
I use [Zend Server Community Edition](http://files.zend.com/help/Zend-Server/zend-server.htm#deb_installation.htm) which, in turn, uses Ubuntu's package management to install Apache2, PHP5 and maybe MySQL, I can't remember.
Personally, I prefer an LLMP stack - substituting Lighttpd for apache. I run Gentoo with the latest versions of PHP and MySQL. Now I don't run anything mission-critical, but I have found my setup to be stable. 
That whole series is freaking amazing. Thanks!
Yes, that's exactly what I meant.
Exactly. The more complex your application becomes, the more headaches you'll run into as a result of using a procedural approach. So write classes for everything. Encapsulate all the data-handling logic in the classes. Get into the OOP mindset. Also, you need to assess the risk of failure. If this is a business application that people are depending on to handle money or something equally important, you're going to want to do everything you can to reduce the risk of computational errors. That means document your requirements, establish test procedures for every requirement, and test the crap out of it before releasing updates.
Indeed, I think you will find that mysql is what is slowing you down, not php. You can try the same experiment with any programming language or db driver and I think your results will be similar. Essentially what you are doing is telling mysql to run 343679 small transactions, or 1 big transaction. The cost of a transaction is usually pretty small, but when you are doing 343679 of them they add up.
A million users isn't much if only ten of them are using the app at any given time. The concurrency and load on the site is more important. That said, caching and memcache and APC can be very useful. I'd also like to add having a deployment system, unit testing, and profiling in place can be enormously helpful. With a million users, even edge cases will get hit more often, and so bug hunting and maintenance becomes very important. To this end, I like the [Jenkins PHP project](http://jenkins-php.org/) as a starting point for continuous integration. With good CI, you can setup regression testing and work to dial in the code with static analysis and other tools. [New Relic](http://newrelic.com/) also has some great tools for performance profiling, they are worth looking into. StatsD can give you a lot of insight as well. Having a comprehensive logging system from early in the project will allow you to see complexity grow, and if a particular release tanks your performance, you'll know where to go look. Check out [this article](http://codeascraft.etsy.com/2011/02/15/measure-anything-measure-everything/) from the [Etsy Dev blog](http://codeascraft.etsy.com/).
I don't use Apache, instead nginx with php-fpm. But, if you want the latest versions, use the dotdeb repositories. We use Puppet for keeping servers up to date
Save yourself a ton of trouble and use a package management system. Ubuntu has a great package management system, but like you said it is usually a bit behind current, which is fine for production system. You want stable for production, not latest and greatest. If you NEED the features in the latest and greatest version, I recommend either rolling your own .deb package to install, or find one already prepared for you. There might even be a ubuntu repo you can add that has these already. Alternatively, if you really like installing from source, try out gentoo. It's package management system can help you get the latest versions and keep everything up to speed. 1) I think you will be fine just installing Apache, MySQL and PHP. 2) Use a package manager to install everything. Not doing this is going to make upgrading a headache 3) Upgrading in production is a huge pain. Once you start coding and realize the new version of php depreciates a function you use you will understand. Personally I would only use XAMPP in windows since most distros do a good job of keeping the individual components updated already. 4) by using a package manager. These get tested by the distro, and so long as you are not doing anything weird everything should update fine. 
This is about a different topic, but offer some insights on what type of stuff you can/should cache: http://37signals.com/svn/posts/3113-how-key-based-cache-expiration-works
Code in the database, that's what killed it for me. Aside from being non-debuggable, it's also a pain in the ass to version that code. We wound up making hard copies of those snippets/modules, and then versioned them accordingly. Not cool at all. Will never touch MODx again. With that said though - it did *work*, there were indeed a few elements about it that I could appreciate, and the templating/module language was reasonably simple to pick up and run with. Not too shabby in those regards, to be fair... but storing executable code in the database is just fucking stupid.
I betcha it is failing because you're using $this outside of a class. The use of endif and endforeach leads me to believe you found some old PHP4 code that you're using. I'm also going to assume that you have a few other classes involved, any chance you can provide us with the code to those? Having all the code will help us help you.
I think phpMyAdmin usually batches insert in groups of 1000 or 10000. 
We have separate servers for MySQL, and use [Percona Server](http://www.percona.com/downloads/Percona-Server-5.5/LATEST/) on them. It has XtraDB which is a drop-in replacement for InnoDB but with additional patches and a lot more instrumentation. Otherwise, you could also download the [binaries from the MySQL.com](http://www.mysql.com/downloads/mysql/#downloads), you don't have to compile from source, there's deb and rpm too. Don't forget to optimize the my.cnf!
We run our Apache server off the repositories too, but use Percona server for MySQL.
add four spaces before each line to display as code like this 
better yet, use the IP of the server to filter the incoming requests.
Zend Studio does not support Xdebug, you'll have to use their Zend Debugger.
http://lcars.ws/lcarsdist/
I think using packages for LAMP is a bad idea - compiling from source is much safer. One bug I've run into specific to this is if you're running 11.10 Ubuntu Server, install PHP from package, then the past 5 versions of Xdebug segfault when the current page throws an exception.
I'm 90% sure this is an [XY problem](http://www.perlmonks.org/?node_id=542341). I'm guessing that you're looking for a better way to handle requests to your application, but haven't discovered the techniques people before you have learned to deal with this. You probably want to make use to autoloading features described in places like [this](http://au.php.net/manual/en/language.oop5.autoload.php) and [this](http://phpmaster.com/autoloading-and-the-psr-0-standard/) to enable easier importing of PHP files. You probably want to make use of portal-and-routing systems, now common in most web frameworks, to enable dynamicly structured handling of web requests. Definition of terms: * *Portal*: a single file used to handle all requests * *Routing*: dynamic matching of request parameters to code functions To see an example of how to create a portal, see [CakePHP's .htaccess file](https://github.com/cakephp/cakephp/blob/master/app/webroot/.htaccess). It will route all requests that aren't to an existent file (like a css, js, or image file) to a single php page. You can perform routing using the special variable, `$_SERVER['REQUEST_URI']`. There are many different ways of doing this. For an example of a premade solution, see [Symfony's routing component](http://symfony.com/doc/current/components/routing.html).
10/10 would read answer again, thanks!
Thank you for the help, I have solved this. Sorry about the formatting/sloppy post, I am very new to php and am trying to figure this out for a project for my job. Thanks reddit!
Running non mission critical software.
No worries. Doing all of this stuff automatically is one of the reasons that web frameworks are so favoured these days. For example, making a request like `http://example.com/users/add?name=mike` could get the framework to include a php file called `Users.php`, call the `add()` function within it, perhaps with the array `'name' =&gt; 'mike'` passed as a parameter. 
Prepared statements are not the only way to prevent SQL injection attacks and using `PDO::quote` effectively is secure. Using PDO with MySQL in many configurations doesn't actually use prepared statements for it's parametrized queries -- it's actually just emulating them using PDO::quote. 
So the OP needs to be clearer, are they including files from remote websites via include() or simply including files on the filesystem via include()? If they're standard includes, then simply set a variable $camefrom = "php"; before the include, then check for the presence of this in your included file - it won't be there if you called the file directly from the browser. If you're trying to include remote files, such as files from a different website (You're probably not trying to do this though), you'll need to use CURL and add headers to your request, which you can sniff in your include file. 
Details -&gt; http://www.reddit.com/r/PHP/comments/teqg0/i_want_to_use_htaccess_to_do_some_fancy_stuff/c4lzyna
Composer support is only one line of code, so it should not be a core focus of a framework choice. - FuelPHP - Laravel (www.keithloy.me/2012/04/composer-with-laravel/) - Symfony - CodeIgniter (http://philsturgeon.co.uk/blog/2012/05/composer-with-codeigniter) All work fine with Composer.
Did you install xdebug from pecl or apt? If it was from apt you might need to submit a bug report to Canonical as those packages should all work. If you installed PHP from apt and then installed xdebug from pecl you're on your own (though I've never really had a problem, but I switched to Debian a long time ago).
What was the solution?
Yes, but I find it to be more reliable than most of the servers I have to deal with - including those that do run mission-critical software.
This little tidbit is what most PHP+MySQL+PDO'ers do not understand. By default, PDO only emulates prepared statements. So, unless you specifically pass this as the 4th parameter to PDO() array(PDO::ATTR_EMULATE_PREPARES=&gt;false) you aren't even using prepared statements. Thanks for bringing this up. It needs to be more widely understood :)
&gt;Namely I'm addressing your charge the example is a 100% hack and somehow with any reflection of reality. I'm pretty sure he/she was referencing `sizeof($insertion) % 100` and not saying it's a "100% hack."
As others have said, don't sit on the bleeding edge for a server. However the biggest gain is around updates. On my box I get updates on a pretty much weekly basis, and if I had to do that manually, it would very quickly end up becoming out of date. If you look at many of the stories around the web, about servers that get hacked, it's normally always ones that are badly administered. Keeping your software up to date helps to close known security holes. Seperately, is there any particular reason your using fast CGI with Apache? I've always been led to believe mod_php is slightly faster. If your sticking with fast CGI, then you might be better off using nginx instead. It'll serve static resources much quicker then Apache.
&gt;which I'm not sure I understand for Apache Only reason I see is when you use home-made Apache modules and are facing bugs in the core API. This happens on a regular basis in my company, and the people in charge of that project are usually happy to see that the latest version fixes deep core bugs. This is always better than having to debug or rewrite tons of critical stuff in their modules. But except for that specific case, Apache is a very mature project : sticking to 2.2 is **good enough©**, performances and features-wise. For Linux + Apache + Mysql + PHP, my rule of thumb is to stick to stable. Unstable and testing versions are usually not worth the trouble. And if you need better performance in your app, look at your code before you think the problem comes from the stack it relies on.
&gt;That's borrowing a phrase from the MVC convention. [Not really](http://en.wikipedia.org/wiki/Front_Controller_pattern). &gt;You could also refer to it as a router. I disagree. The router's responsibility is only to route requests to its appropriate procedure. If you're gonna define the "portal" as a router, then you've already undermined your own definitions. 
Just to clarify, are we checking for a **straight** (5 cards in sequential rank in at least two suits), or a **straight flush** (5 cards in sequential order in one suit) ?
So, you took your homework assignment and made it a contest?
If so I would hire that programmer on the spot.
I tried to Google. It's something related to poker. :/
I like the idea, tossing around some ideas now!
How do you write modular code in PHP? Classes with static methods?
Yeah, we can certainly agree to disagree on that one, but the test most certainly shouldn't mandate a particular String handling strategy.
Absolutely, it's really nothing more than personal coding preference, not a bit more than that. Definitely doesn't demonstrate knowledge or problem-solving skills.
Much as I would love to do this (I even have the simple solution in my head) I'm about to leave for work.
a straight flush should return true as well, good point, ill add that to the rules
PST
yes
if you want proof i can msg you my solution, but then youd be out of the contest!
Hi mate, I've posted my questions in this thread... Simply do a search for my name inside the thread to find them :-)
Hi mate, I've posted my questions in this thread... Simply do a search for my name inside the thread to find them :-)
Can we go around the horn? (i.e. Q,K,A,2,3)
Also, some distros don't have mp3 support due to patent restriction. I use flac and ogg myself.
What about returning 0 or 1 instead of true/false?
haha, i was just busting your balls (or ovaries), it's cool. I'm indifferent either way.
They would be only unless he decides to use === operator. Edit: Fixed.
Yeah I want to get some stuff reasonably up to date so I can try out a few of the PHP 5.4 features and do a bit of testing to make sure it's stable. Yeah I have checked out the [DotDeb instructions](http://www.dotdeb.org/instructions/) and it looks pretty good. I'm just reinstalling Ubuntu to clear everything out and start afresh to try that method. One thing I wondered was, how does it know which package to prioritise over other ones for download? E.g. how does it know to prioritise the dotdeb packages over the out of date ubuntu ones? Do I need to add the lines at the top of the sources file maybe? Other thing I wondered was, when running the apt-get install from the command line can you tell it what specific versions you want to download e.g. PHP 5.3.12 rather than 5.4.3? Maybe I wanted to install the more stable version on production or something. Or does it just get the latest? My goal is to get Apache worker and PHP fast-cgi or php-FPM running so I'm thinking of running: sudo aptitude install apache2 php5-cgi libapache2-mod-php5 mysql-server php5-mcrypt php5-curl Not sure if that will work though? &gt; Dumb question, but did you configure your PHP install with the Apache SAPI module? Hmm, not entirely sure I compiled with the following command: ./configure --enable-so --with-mpm=worker --enable-rewrite --enable-deflate --with-included-apr --with-included-apr-util 
Be careful with DotDeb and Ubuntu - it might cause some problems. You might be better off searching for a PPA on Launchpad. I found this one, no idea if it's any good: https://launchpad.net/~ondrej/+archive/php5 As for prioritization, apt tends to try and get the most current package since 90% of the time you want the current package, not the old one. You can try to do some things with pinning though. https://help.ubuntu.com/community/PinningHowto You can't specify which version you want as repos will update automatically. For example, if Ubuntu ships with PHP-5.3.6-ubuntu-14 and they release a new package named PHP-5.3.6-ubuntu-18 (lets say they backported some fixes), they generally remove the old package. If you want an older package you need to find it and pin it. If you want to set up Apache with FastCGI or FPM (FPM being the current way) then you won't need to install mod-php5 as that's for the Apache module. FastCGI/FPM runs PHP as it's own process and not as part of Apache. Apache will proxy requests back to FPM. You'll need to look into running Apache with mod_fastcgi or mod_fcgi. (As a side note, if you don't need anything specific to Apache, you might be better of running nginx + PHP-FPM. Much more support for that combination). &gt; Hmm, not entirely sure I compiled with the following command: That's the configure line for apache. With PHP's configure you should have specified a SAPI module with something like `--enable-apache` or `--enable-fpm` (for whichever way you want to run it). To install the FPM version via apt, it should be something like 'php5-fpm'.
Even if it's turned on, their screen readers usually won't pick up content that has been altered with Javascript. The amputees use the keyboard to navigate with arrows and accesskeys, so a lot of onmouse* functions won't fire. 
You can use e.g. synaptic to search for php and look what all these packages contain (or use `aptitude show`). php5-cgi surely is not needed for mod_php. Every package also pulls in its dependencies, so you don't have to worry about that. And how can anybody else know which php extensions you need (apart from php5-mysql)?
Why are you going for least number of characters? Wouldn't fastest performance be more valuable for something like this. It's unfortunate that php doesn't have stddev, as it would work well for this problem.
91 is still too long :|
Hmm, fair point. I have emulate prepares off now, so I must sound quite foolish. However, I would still recommend using prepared statements with or without emulate prepares, because if you do decide to make that change, its effects will be much more instant and require less code changes to your application. If the issues with MySQL 5 are resolved, potentially in 5.6, I would hope, then you could leverage prepared statements 'properly'. 
There is a lot of cargo cult mentality around prepared statements. If you use quoting correctly your application is just as secure. And whether or not emulated prepares are on in PDO, your application is just as secure. Certainly using parametrized queries is a good way of avoiding simple mistakes but those can implemented any number of ways. 
is a J Q K A 2 a straight? or do the aces have to be on either end?
PHPStorm's great and actively developed. http://www.jetbrains.com/phpstorm/
missed that, thanks.
Sorry dude, I can't state how much I hate you. In an affectionate, I really wanted to win and you're **killing** my chances, friendly kind of way.
I can't wait to look at all the other entries! So curious to see what everyone else came up with :)
i dont have the time to do that =\
I'm using Aptana, but I'm also doing HTML/CSS/Javascript and a few projects are linked into GitHub.
I agree that asking about how they are improving themselves is important, but I honestly don't do that by reading too many books. I do that by doing research online, and looking at code others have written. Beside the fact that books simply are not the only (and I would say not even a primary) source for people improving their knowledge, someone *last* is probably completely unrelated to development. I know for one, that the books I tend to read are political, philosophical, or scientific. Aside from maybe a few web standards books, a jQuery book I inherited, and an ancient Java book, I don't really have many development-related books. You don't want to put someone in a situation where they have to catch themselves before accidentally telling you about the political, or ideologically themed book they just read. And again, rather than sounding like you feel empowered by the patriot act and asking what books people just read and what bloggers they follow, just ask the question in a way that actually gets at what your trying to understand. "What's something that you recently learned, or are actively learning about?" Followed up with "... and what resources are you using to learn about that?" OR "What resources do you use when your stuck on something, or when your trying to learn about something new?" I'm just saying you shouldn't be trying to scare developers away, or trying to make them look stupid for not knowing some specific thing off the top of their heads. I feel like asking for their reading material is really not that dissimilar from asking for their facebook username, with the excuse that you want to see if they've posted anything about their development work.
Not a php guy here but does this hand generator code even work? You seem to have 8 aces? (random 1...14) and a weird method to build the hand that I doesn't do suits (chance of flush seems wrong) properly either. Generate 5 different random numbers from 0 to 51. Divide by 13 droppping remainder to get the suit. The card is the remainder.
Steep? I wouldn't say steep. I enjoy using it a lot more than I enjoy Zend, and it makes a lot more sense to me than CI or any other framework I've tried (other than self-crafted ones, of course). Yii does its very best to remove all of the "hard work." You don't have to worry about Database stuff if you don't want to. So, you do have to learn what you do need to know which is their little Criteria thing. But their website is super helpful, tonnes of users post ways to do things. Their extensions system is pretty amazing, and their documentation is superb. These things make up for any learning curve I experienced. The more you use it, the more you learn, the more sense it makes to you. I still have a little bit of difficulty with Routes and I choose to do my own SQL a lot instead of Yii's for certain tasks, but all in all I favor it over any other.
I certainly wouldn't put them in a database. If you have some kind of network-attached storage available, that's a great thing, I've heard (but know little about it) You could fake it by having a server to serve static assets, and have web servers push uploaded data to the local disk over there, in any number of ways (one simple way would be to just accept the upload to a temp file on the web server and immediately scp it over some internal network to the static-file web server). You could go one better and have a little web app that provides a simple RESTful API that the web servers can use to push user-uploaded content to some kind of central repository. And obviously, you'd want that static-content server to sit behind some kind of CDN. 
It may work, but is it doing error checking?
God no! Start by using automated testing to test your code. You'll find that the properties of code that is easy to test are much the same as code that is decoupled and modular. e.g. Code only does one thing, is deterministic, does not keep state it doesn't need, has very few dependencies and those it needs are injected, have a structured interface etc... It's hard - it's usually something you learn with experience but I'll take a look around to see if there's some easy resources to get started and I'll get back to you.
Recommend you change to POST not GET. If you put stuff like "ID=xxx" in the URL, a kid might be tempted to fiddle. Parameterize your inputs. Input validation isn't just throwing out escape characters. If someone writes '12 or 1=1' into a numeric field, that's still a valid expression and contains no apostrophe heroics. Basically if it's numeric, allow only [0-9] etc. I edited to fix spelling of "parameterized" Funny story about GET, sometimes when you have 'get' links, the search engine bot sees all these links and crawls them, and Google has wiped your database :-)
What sort of error checking? I think we can safely assume that input is valid -- No duplicate cards, 5 cards, all within the expect input range. You can't really require error checking in obfuscation contests unless it's explicitly part of the contest.
&gt; **Parse error: syntax error, unexpected T_ENCAPSED_AND_WHITESPACE** FTFY
I know regex syntax varies but I believe preg_match('/\d[0-8]/', $id) Matches a single digit from 0 to 8 and then stops, so it allows e.g. 8U? I think he wanted &lt;= 8 numeric digits but I could be wrong there too, I dunno how php substr works. I would have thought \d+ or \d* or something and match all, not match. But PhP is embarassingly inconsistently random in the syntax of its tools, so ...
Character count doesn't include the characters in "function check_straight($hand) {}", does it?
You are correct I meant \d{1,8}. \d+ would match one or more digits. \d* would match zero or more digits. If there is a limit to length on the number of digits in a regex i like to call it out specifically. Especially when validating data. What I wrote would match a single digit then a number from 0-8. substr(start, count) is the method signature.
the hand will be valid
"I've been writing PHP since before the web even existed!" wat.
The 14 results in aces having a higher probability of being included. And yes the while( count( array_count_values( $suits ) ) &lt; 2 ); will never generate a flush either. Your solution is far simpler and will evenly generate all possible hands (assuming you ensure dupes aren't included).
So you're saying if he did something like this "select sometable.* from sometable where id ='".mysql_real_escape_string($_GET['id'])."'"; Over this "select sometable.* from sometable where id =" .mysql_real_escape_string($_GET['id']) He wouldn't have had a problem.
BBEdit
The script seems to be for retrieving a page given the ID - You definitely want to use GET for that. If it was /change.php?id=123&amp;action=delete then, yes, POST is a lot more appropriate.
He's from the future.
The function method isn't counted. Just the interior code.
Two things. 1. On my first try I got 173. I have been using php for a long, long time but I don't consider myself *good* at it. People on here are doing amazing. This is fun to do. 2. I wonder if the combined effort will beat the first place effort once the deadline passes and we can combine tricks.
To be fair, he doesn't say 24 years of PHP experience. He might have 24 years coding experience, starting with perl or something. Or maybe he forgot exactly how long he's been doing it for, so just made up a number. Yeah, I'm really grasping at straws here.
Oooooooooh, Ok. That makes sense. Thanks for the clarification. 
im not counting that part in the character count
There will be no way to combine efforts...youll see when you see the winning solution
Yup. Just figured it out too, got 61. Too bad deprecation notices are triggered with E_ALL otherwise could do 53 :P
Yup, I was actually thinking about the same for bringing it down to 53. I'm happy with 61, though :)
51, there's another trick you can do...
There is nothing wrong with solely relying on server side validation, its just nicer for the user if less page loads.
Actually, I don't see anything in the rules that disallows it. It says `I have error reporting set to E_ALL. No notices/warnings etc... can be thrown.`. It doesn't say anything about suppression... :-D
i know a guy who is a newb to php (&lt; 2 years), but he is such an awesome dev that his experience is really equivalent to 10 years. that always reminded me of [this](http://www.folklore.org/StoryView.py?story=Mythical_Man_Year.txt) steve jobs story. 
 $id = (int) $_GET['id'];
56 characters! Waiting for the update
Are you using error suppression? Does your code execute without errors/notices when errror_reporting(E_ALL) is enabled?
He needs to learn how to speed his site up. FFS performance matters.
Another VIM user here. After you learn it - everything else seems clunky. I even have a plugin for Chrome that lets me navigate using vim-esque commands..it gets **that** deep in your head!
you cant use @ 
I could not replicate a sql injection using '12 or 1=1' passed as a get variable using the following: CREATE TABLE `testing` ( `id` int(11) DEFAULT NULL, `value` int(11) DEFAULT NULL ) INSERT INTO `testing` VALUES (1,10),(2,20),(3,30),(4,40); &lt;?php $hostname = 'localhost'; $username = 'dbuser'; $dbname = 'dbname'; $password = 'dbpass'; try { $dbh = new PDO("mysql:host=$hostname;dbname=$dbname", $username, $password); } catch(PDOException $e) { die('&lt;h1&gt;Database connection error.&lt;/h1&gt;'); } $sth = $dbh-&gt;prepare('SELECT * FROM testing WHERE id=:id'); $sth-&gt;bindParam(':id', $id, PDO::PARAM_INT); $sth-&gt;execute(); $result = $sth-&gt;fetchAll(); printf('&lt;pre&gt;%s&lt;/pre&gt;', print_r($result,1)); $dbh = Null;
I came up with 2 different methods. The first I got down to 89. Then I came from a completely different angle and got one down to 73. Neither one can I imagine getting down to 61. There is probably another completely different way to do it that I can't seem to think of. I can't wait until the contest is over and I can have that *Aha* moment.
Your "generate_hand" function offends me greatly. Here you go. function generate_hand() { $suits = array('d', 'h', 'c', 's'); $ordinals = array('a', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'j', 'q', 'k'); $deck = array(); foreach($suits as $suit) { foreach($ordinals as $ordinal) { $deck[] = "$ordinal$suit"; } } shuffle($deck); return array_slice($deck, -5); }
 20 years of English language experience + 7 years of PHP experience +10 years of HTML experience + 8 years CSS experience +10 years JavaScript experience ------------------------------------------------ 55 years of experience! That's how it works, right?
haha, that almost makes too much sense. build a deck, and take 5 cards after shuffling. yeah my generate_hand() function definitely blows ass.
I am always amused at resumes where people misspell the name of the language they claim to know or don't follow the capitalization standard. It does make for an entertaining interview when you can say something like, "So, tell me what you know about Cobolt."
I only said I think my question is better then the array_sum question.As I said I wrote an earlier version of the test (while still working there) that included both this question AND software design questions. Also if you took the route of writing the code yourself then that the preferable thing in my mind, just make sure to avoid the pitfalls of checking for duplicates on each iteration. 
What do you like best about Pearl?
 23 years of breathing experience 12 years of wanking experience 8 years of drinking experience HIRE ME.
I feel old now - 17 years? Jesus...
 function check_straight( $hand ) { if(!is_gay($hand)) return true; return false; }
I can't use IDEs because of my hardware limitations, so I use Sublime Text 2 and Geany. The latter is great because : * When you click "Compile" it calls php -l on the current file to check for syntax errors. Sometimes I'm working with a remote file in a server with no error reporting which makes it display an empty page, so I download it (with Filezilla), it opens up in Geany and I click "Compile" to fix those annoying syntax errors. * For quick tests. For example, if you want to test a piece of code before using it in your project you can open a new tab, put it there, save it in a temporary file then click "Execute" to see if it's working as expected. * Smart indent, autocompletion and hinting even for user defined functions and variable names, autocompletion for HTML tags. * You can change the snippets.conf file to include your own shortcuts. Ex : foreach=foreach(%cursor% as %cursor%)%brace_open%\n%brace_close%, then everytime you write foreach and click TAB it will write the foreach loop skeleton for you. This one is my favourite features. * Basic project management, tabs, file explorer on the left, accepts plugins, etc. And it does this for many languages without taking much RAM. Sublime Text is just a pleasure to use, smooth interface, beautiful syntax highlighting and graphical interface, and very responsive.
I'm using Eclipse-PDT. I don't encounter too many performance problems with it on my current machine, although I still get random annoying Java errors. It's personal preference as I know the features are available in other editors, but I like being able to click a function and go to the source, hover over a function for docblocks, see an overview of my file on the right and have a console built right in to test my code.
You should also try nginx instead of Apache.
Eclipse for PHP Developers + Color Themes (ruby blue) + Smarty PDT
I'd like to see the top 3-5. Just to see the differences if that is okay
weird, I got the same character count! wonder if we had the same solution. Lunchbreaks over now though, going to try again this evening!
do you control the site that you want the user to log into?
lol it's like 20 lines
negative, its a vendor site that I used to submit warranty claims. Would like to remove some of the time logging in each time. Save login info is not an option. Thanks
That's interesting, I vaguely heard about transations before (on this very subreddit) but never actually used them. I made a test with the following code : $sql = 'INSERT INTO users (`username`, `password`, `expiration_date`) VALUES("uname", "pswd", 123987123)'; $start = microtime(TRUE); $db-&gt;beginTransaction(); for($i = 0; $i &lt; $iterations; $i++) { $db-&gt;exec($sql); } $db-&gt;commit(); $end = microtime(TRUE); $total_inserted = $db-&gt;query('SELECT COUNT(id) FROM users')-&gt;fetchColumn(); $db-&gt;exec('TRUNCATE TABLE users;'); printf("The transaction inserted %d rows in %d seconds.%s", $total_inserted, ($end - $start), PHP_EOL); And it took 222 seconds to insert 343672 rows, a great gain in performance compared to inserting each row at a time.
Thank you! I can't comprehend why you were downvoted for this; understanding the purpose of escaping strings is hugely important when dealing with security issues like this.
It sounds like you want a [Model-View-Controller](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) type framework. This is the standard separation most web-app frameworks use. A Model is an object representing data, often a database table. A Controller houses the logic, loading models from the database, operating on them, saving them, and eventually passing variables to the view. The View takes the variables passed from the controller and handles rendering of the actual markup. Check out CakePHP, Symfony, Yii, CodeIgnitor, etc...
I'll agree
Yii with APC is supposedly pretty dern fast for small requests [PHP Framework Performance Comparison](http://www.yiiframework.com/performance/)
Coda on Mac...don't have a favorite on Windows or Linux.
Hmm I didn't think about that. Worth a try I suppose. 
Eclipse + PDT, and Notepad++ for quick things.
What addons do you use?
This bothers me to no end - why not: function check_straight( $hand ) { return !is_gay($hand); }
I've heard it called turning the corner.
So, could you tell me more about your experience in Codeignitor ?
In this industry? Good luck.
Hmm ... can't do better then 108 at the moment. Must be missing something oO --- I'd be interested to see everyone's solutions after the contest is over -- curious as to the different approaches taken.
Not in the function definition, but if you use it multiple times in your function then doing `$h=$hand;` at the start should save you characters in the end.
I got mine down to 152 with a slightly cheating, non-deterministic method. Racking my brains for some smarter solutions. The '10' cards being 3 characters is kind of annoying.
Here's what I was using for testing. It will also generate a straight if desired, but all clubs since I wasn't concerned with suit. I figured a small 52 element static array was less hassle than building it dynamically. Anyway, hope it's useful to someone. *Edit: removed usage example. Just remember to seed the rng if you need to.* function generate_hand($straight = false){ $deck = array( 'ac','2c','3c','4c','5c','6c','7c','8c','9c','10c','jc','qc','kc', 'ad','2d','3d','4d','5d','6d','7d','8d','9d','10d','jd','qd','kd', 'ah','2h','3h','4h','5h','6h','7h','8h','9h','10h','jh','qh','kh', 'as','2s','3s','4s','5s','6s','7s','8s','9s','10s','js','qs','ks'); if($straight) $deck = array_slice($deck, rand(0,8), 5); shuffle($deck); return array_slice($deck, 0, 5); } 
I've read about what you posted before in my search for this particular script. I'll probably end up using what you posted if I cant find what I was originally looking for. I appreciate it so much. What I was looking for was php, I'm pretty sure, it's been so long since I've messed with any web design, and I'm having to learn so much over again. 
I appreciate it.
Shit, I could have shaved a character off my solution. Oh well.
Same here.
1) Using [this code](http://www.reddit.com/r/PHP/comments/tdrm0/why_a_query_shouldnt_be_put_inside_a_loop/c4mdo61), it took 222 seconds. 2) The following code lasted 39 seconds : $to_insert = array(); $sql = 'INSERT INTO `users` (`username`, `password`, `expiration_date`) VALUES '; $start = microtime(TRUE); $db-&gt;beginTransaction(); for($i = 0; $i &lt; $iterations; $i++) { $to_insert[] = '("uname", "pswd", 123987123)'; if(sizeof($to_insert) % 100 == 0) { $db-&gt;exec($sql.implode(', ', $to_insert)); $db-&gt;commit(); $db-&gt;beginTransaction(); $to_insert = array(); } } if(!empty($to_insert)) { $db-&gt;exec($sql.implode(', ', $to_insert)); $db-&gt;commit(); } $end = microtime(TRUE); $total_inserted = $db-&gt;query('SELECT COUNT(id) FROM users')-&gt;fetchColumn(); $db-&gt;exec('TRUNCATE TABLE users;'); printf("Insertion by chunks of 100 elements : insertion of %d rows in %d seconds.%s", $total_inserted, ($end - $start), PHP_EOL); Let me know if I'm doing something wrong, I never really used transactions before. 3) I haven't tried that one yet. 4) [Using this code right here](http://www.reddit.com/r/PHP/comments/tdrm0/why_a_query_shouldnt_be_put_inside_a_loop/c4ly6um), it took 974 seconds.
I also use PSPad as my lightweight quick editor.
This is why you [validate your user input](http://wiki.hashphp.org/Validation). Don't just rely on mysql_real_escape_string() to do the right thing.
No. Never do this. Here's why: $val = "0123abc123"; var_dump((int)$val); // outputs int(123) You're creating a situation where the input *does not match* the output. Either accept or reject values, do not transform them. This is lazy, and leads to potentially unexpected results.
Thanks for sharing that link. That really was awesome.
It's not new. In fact, Sebastian Bergmann writes about it at depth in his book, "Real-World Solutions for Developing High-Quality PHP Frameworks and Applications", and details the reasons for why the TYPO3 team created this framework.
Interesting. I'm still not convinced it's a liability.
Yeah I've been meaning to read that book, just ordered it off Amazon along with Martin Fowler's Patterns of Enterprise Application Architecture. Both should already be on my book shelf.
Haha, I know. I find it hilarious.
It is a liability, because on the off chance it is an honest user mistake the result won't make sense. It's particularly bad if the operation is somehow destructive. This isn't just about this particular instance, it's about forming good habits. Modifying your user input when the user has no idea you're doing it is not a good habit to get in to.
OK, I see your point and I agree.
I may have skipped that part. The idea of not using PDO and bindParam never crossed my mind.
Which, might I add, is a good book to read.
Thanks
If you want to get all the files at once: &lt;?php $array = glob($pattern); see http://us.php.net/manual/en/function.glob.php
If anyone is curious, here are my various solutions as I continued to refine: http://pastie.org/private/hvjefufvdpcuciyyomn86q
It implodes the array and then makes sure 5 characters match the character set 'a234567890jqka'. I'm not sure why the a is there twice, maybe someone could explain?
Yes, but the preg_match is matching the range of characters to the character set - not checking that they're in sequential order. 
the regex is not checking order, just existence, or am I misinterpreting? 
 return !!@ereg("[".join($hand)."]"{5}/","a234567891jqka');
[Here are some of mine](http://pastie.org/3891143). I did all of my testing on [Compilr](http://compilr.com), which was very handy since I'm not set up for PHP development. I am actually pretty proud of the bitwise solution I was able to figure out.
Right, and it will always return true because any of those 14 characters are in that character set. The {5} matches exactly 5 characters within that character set, but the function doesn't strip out the suit, so if you just have a string like 'ac2h3h4d5c', the suits should be messing it up. 
Here it is broken down a bit: * Example hand: *$h = {ac,2d,3h,4s,5c}* * Sequential string: *$ss = 'a234567891jqka'* * Step 1, implode the hand: *$h = join($h) //now "ac2d3h4s5c"* * Step 2, wrap it in a regex char set: *$cc = "[$h]"* * Step 2b, $cc now matches any letter/number in $h. * Step 3, look for five consecutive $cc in $ss: *"/$cc{5}/"* * Match =&gt; **a2345**67891jqka 
does the regex order? So if you imploded to a string of "2cah3d5h4h" it would order automatically then check the matches?
If the id match isn't failing then one of two things is going on: + trouble with sql + sql is saying "oh hey, this is an int and then this space. CLEARLY we don't need anything after the space" which is AWESOME but shouldn't be relied upon.
ah, well, i've only worked with MySQL. But your statement is more true. intval() would've been better in this case.
The order does not matter. The regular expression checks if there are exactly five in a row of *any* of the characters in the list.
no. intval() is the same as (int) and you shouldn't use either. This is not validation, it's a data transformation.
Why does the {5} require that they're 5 in a row? If I had [24579], I would expect that regular expression to return true for exactly 5 matches in "a1234567890jqka". Thanks for taking the time to help me wrap my brain around this. 
Thank you for doing this. It was fun :)
Here's mine - I was way off, but I found this to be a great exercise: http://pastebin.com/62nbY8m4 **EDIT** Formatted for easier reading: http://pastebin.com/SCZvnr2B
I realized that after i submitted it. But couldn't be assed to correct myself :S
The `[24579]` will match exactly one character. It would be true for out test string. Whereas, `[24579]{5}` requires for exactly five of the listed characters to be matched. Some examples of matching strings: * 22222 * 24577 * 99574 * 55792
The order in the *regular expression pattern* doesn't matter. The order in the *test string* does matter. If our pattern was `[5432a]{5}`, it would still match the string `a2345`. We put the test string in order to account for all possible straights: * **a2345**67891jqka * a**23456**7891jqka * a2**34567**891jqka * ... * a2345678**91jqk**a * a23456789**1jqka**
Well there's no way to tell if the integer is meaningful until you run it against the database. Granted it's a simple regex. But it could be changed to validate against it being something meaningful. Like for instance, If all my order ID's started with a one and then had six more digits. I could write my regex to be more specific '1\d{6}'. Granted I still don't know if that number is meaningful until I check the database or some array of meaningful data. But it helps make sure your input matches what is expected before you run that check.
hiii, what was your initial solution?
That really depends which framework you are using. CodeIgniter, for example, still has its roots in old legacy code. It doesn't use any of the newer features of PHP &gt;= 5.3. It also mixes in a lot of procedural code, which is a bit ugly in my opinion - especially when they have some procedural functions that do the same thing as some class methods. But yeah if you're using something more modern like FuelPHP, you'll pretty much have to learn at least *some* OOP principles.
Ok so regex checks all possible orders of the given character set. Good to know. Thanks!
Okay, so the static character set is `a234567891jqka`. The regular expression matcher is going to go one character at a time and see if it matches. So it gets to the `a` and determines that it is not a `2`, `4`, `5`, `7`, or `9`. So it moves to the next character. It then checks the `2` and sees that it is one of the characters we are looking for. So it thinks, *alright, I have one character, let's check the next one to see if it matches*. It sees that the next character is a `3` and doesn't match. Too bad, lets reset the matching character count to `0` and pick up with the next character. Aha, a `4` matches. So we are back to a character count of `1`. The next character is a `5` and gets our character count to `2`. Uh oh, the next character is a `6` and we have to reset our character count to `0`. We keep doing this until the end of the string and never get the character count to `5` like the pattern wants us to, so we return no matches.