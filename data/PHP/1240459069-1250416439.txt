Almost. The tricky thing is that the first line might not return 0 or 1 - it might return 2 or 3 or 4 or 5, etc. If that is the case, the final result depends on whether the result of the first line is even or odd! Let me break it down for you. First off, let's expand out that syntax so the operations are clearer: $moduleCount = $this-&gt;countModules('right'); $temp = $moduleCount &amp; (JRequest::getCmd('layout') != 'form'); $showRightColumn = $temp &amp; (JRequest::getCmd('task') != 'edit'); Now let's walk through it: $this-&gt;countModules('right'); Let's assume `$this-&gt;countModules('right');` returned `3`. $moduleCount = $this-&gt;countModules('right'); So now `$moduleCount` is `3`. JRequest::getCmd('layout') Ok, lets assume this is `'non-form'` so the comparison returns false. JRequest::getCmd('layout') != 'form'; So `'non-form' != 'form'` is `true`. $temp = $moduleCount &amp; JRequest::getCmd('layout') != 'form'; Finally we get to the first `&amp;=` step. We know the right part is `true`, so this is basically: $temp = $moduleCount &amp; (int)true; Or even simpler: $temp = $moduleCount &amp; 1; Now this is the really tricky part. If $moduleCount is odd, the result here is `true`. If it's even, the result is `false`. Here are some examples: 0x0111 (7) &amp; 0x0001 (1) -------- 0x0001 (1) 0x0110 (6) &amp; 0x0001 (1) -------- 0x0000 (0) To perform the bitwise and operation, you move straight down the columns. If both digits in the column are 1, that digit is 1 in the output. If either are 0, that digit is 0. An even number has 0 as its rightmost digit when expressed in binary, so the output of and-ing it with 1 is always 0. After this point it's simple. `$temp` is either 1 or 0 at this point. $showRightColumn = $temp &amp; (JRequest::getCmd('task') != 'edit'); So now the &amp; operation works just like &amp;&amp;, because your inputs are limited to 1 and 0. So `$showRightColumn` is true only when $temp and `JRequest::getCmd('task') != 'edit')` are true. In summary, the output of this block of code depends on whether `$this-&gt;countModules` is even or odd. If either `JRequest::getCmd('layout') != 'form'` or `JRequest::getCmd('task') != 'edit'` are false, then the block is always false, regardless of the parity of the module count. However, the parity-sensitive nature of this code is probably not intended. In fact, if you yourself are not the author of this code, please do me a favor and shake your fist angrily at whoever produced this confusing pile of crap. 
A different list! http://www.webdigi.co.uk/blog/2009/what-is-new-in-php-53-for-php-amateurs/
Haskell did it.
haha, don't worry, I'm not the writer of this code. It's actually code from the Joomla content management system that I was checking out. As you can see by my edit above, the code was completely pointless anyway. Thanks a lot for the help. It makes a lot more sense now (still can't really think of a way that I would ever use this, but it's good to know what it does).
This is true in most C-style languages. For an operation of form *lvalue = operator(lvalue, rvalue)* or *lvalue = lvalue operator rvalue* the shortcut syntax is *lvalue operator= rvalue* For instance, a += 1 is identical to a = a + 1 in most imperative languages.
That's actually pretty cool. I use Scienta Debug Bar for Zend, but I'm definitely going to play with that one. Thanks for posting.
Last time I looked eAccelerator seemed to be the faster PHP bytecode cache/optimizer by 8% or so. But hey, that might have changed, or there is some incompatibility with PHP harnessed in nginx + fastcgi.
I've recently switched my server from lighttpd to nginx and I love it :) I really have to learn how to compile php with php-fpm and after I reinstall the server with Jaunty I'm gonna give your tutorial a try. I use xcache but I don't think this will be a problem.
Anyone know of any real differences between nginx and lighttpd? 
It basically comes down to which config system you like best.
Which simply means that you don't understand what the class does, or how it does what it does. Reflection enabled you to reverse-engineer loaded classes. Think about that. Then think about it again. Then realize why reflection can't be used to achieve reloadable classes.
Gotta give you credit for the idea; I wouldn't want my production code to rely on something like this though. Things like that should be supported at the language level, or you shouldn't do it. I mean, good luck trying to debug anything that goes wrong? That aside, php already exposes the internally used parser, so you don't need to muck about with regular expressions. Have a look at: [`token_get_all`](http://www.php.net/token_get_all)
I think the difference is pretty abysmal, and probably varies from situation to situation. That said, I think I've seen some recent numbers putting APC on top. What's more important though, is that APC is well tested and supported (It's going to get included by default from PHP 6).
I hate when programmers write code in this manner. Using an if..else statement for this is a waste. $showRightcolumn = $a &amp;&amp; $b &amp;&amp; $c; is so much cleaner, shorter and too the point.
I went to look at this to slag it off; most of these templating engines seem either ludicrously overcomplicated or offer nothing better than str_replace and a bit of thought. This actually looks like it's exactly the right level of usefulness!
Anybody know what type of batteries they're transporting that it needs 156 hours to charge? I would guess Li-ion batteries, but still that's a very long charge time.
Wrong article replied to, perhaps?
Weird, yeah I meant to hit the shuttle date moving forward one. Hmm. Wonder how that happened.
Listing alternate syntax as a selling point kinda bugs me. Isn't that supposed to be deprecated or at least discouraged?
There used to be a message in the manual saying it was deprecated. That message was wrong: http://bugs.php.net/bug.php?id=12900&amp;edit=1 If it ever becomes deprecated though, you can still use normal syntax in Templum. Alternate syntax is just a little better on the eyes, IMHO.
Why not just use gettext?
[This](http://www.zend.com//code/codex.php?ozid=112&amp;single=1) looks like a good start.
Yeah, I saw that when I was looking around. Just thought I'd see if anyone knew of a really good one. I might just write my own.
I use alternate syntax exclusively for dealing with the intermingling of PHP and HTML mainly for the benefit of designers so they don't have to know what the braces are doing.
Isn't magento Zend Framework based?
Yes, at least it does the right thing and _escapes per default_. I'm not found of the home-brew syntax for `&lt;?php`.. `?&gt;` (Square brackets) or the use of `@` for control statements though.
It has its fair share of problems. Some of them: mozilla/webkit-specific css, use of globals, a lot of notices due to uninitialized variables, abandoned files, mysql wrapper strangely integrated... i fixed most of these on my local copy and am very happy with it. (plus i changed the design to be smaller and changed some other things) the plus is: it's very simple and easy to understand.
Hey, I'm learning PHP now, and I managed to answer all your questions except these: &gt;7.What is the effect of prefixing a function with an @ symbol (e.g. unlink() and @unlink())? &gt;3.What does it mean to normalize a database? Why is it important? &gt;6.What is database abstraction, and have you used any specific libraries for this? Would someone please answer these questions for me (or direct me to a good resource)? As I mentioned, I'm a PHP student right now.
I send that, not only is Magento basically the best open source cart system, it's already zend based.
What exactly is the point of bitwise?
The @ symbol makes PHP ignore any warnings/errors... so if you called @unlink() with an invalid file, it wouldn't print a php error out. This allows you to check the return value and handle errors yourself. Database normalization is big subject... google it. Basic theory is don't repeat data anywhere. A follow-up question (which I won't answer) is when should you break normalization. A database abstraction layer makes it so you could switch to a different database if needed... so your app can use mysql/mssql/postgres/etc without changing the code. There are several out there, PHP5 has a class to do it for you if you compile it in. A lot of people write a crude version themselves, or at least they used to before the php guys made an offical class for it. 
still going to use php as it's own template language. haven't found a reason not to yet.
i tried out magento when it first went 1.0, but it was sooo slow. has it gotten faster yet?
It is still very slow, but if you turn on caching it's much faster. The slowness is the only thing we complain about at work, but again, using caching it runs like a beat. Here's a site we worked on that runs on magento: http://beachbums.com/ Despite the fact that the site is fairly graphic heavy, it loads about as fast as any other ecommerce site out there.
The biggest reason for writing Templum was that I got sick of having to write: &lt;?php echo(htmlentities($var)); ?&gt; a million times. {{$var}} is a lot easier. That and other developers forgot the htmlentities() or used short open tags intermixed with proper opening tags, mixed echo() and print(), etc.
Magento is a full stack application, the OP is wanting something to integrate into an existing app. plus to say it's Zend based is a bit of a misnomer. Magento is really an combination of Varien's internal framework, the "Mage" framework (the MVC architecture is all prefixed with Mage_), and ZF components. If you look at [slide 42](http://www.slideshare.net/varien/magentoe-commerce-and-the-next-generation-of-php-presentation) many ZF components are used, but the key critical Zend_Controller isn't used (they rolled their own MVC). Long story short, Magento is an MVC application that makes heavy use of ZF components. Nothing wrong with that, but it's not *based* on the Zend Framework. (Though if you look at the code it's horrible)
Frankly you might be best rolling your own. It's really not difficult, just storing product ID's, counts, and configuration in a session or cookie. The hard part (not so hard really) is the cart display page and checkout pages (but really it's a SELECT * WHERE id IN (CART ITEMS IDS COMMA SEPARATED) with styles).
I built a really generic one before with no checkout or security certificate, but have read up a little on it since them. EDIT: I didn't use it on a site, just playing around with building one.
Problem doesn't exist in [Agavi](http://www.agavi.org)
Learnt a ton, thanks!
Not only that, but how do you get the date function to render '3nd'?
Could you answer this one? 9.What is the “try” command used for, and how is it limited in PHP? I'm just getting into OOP PHP and error handling and I'm not too aware about its problems.
Lets say you run unlink("/etc/passwd")... php will throw an error that you can't delete that file right? Try/catch won't catch that... all the legacy functions print errors regardless of any try/catch... which is hilarious because it makes things almost worthless. ----- [xxx@yyy~]$ cat test.php &lt;?php try{ unlink("secret/secret.txt"); }catch(Exception $e){ print "whoops!"; } ?&gt; [xxx@yyy~]$ php test.php PHP Warning: unlink(): SAFE MODE Restriction in effect. The script whose uid/gid is 501/501 is not allowed to access /home/xxx/secret owned by uid/gid 0/0 in /home/xxx/test.php on line 4 Warning: unlink(): SAFE MODE Restriction in effect. The script whose uid/gid is 501/501 is not allowed to access /home/xxx/secret owned by uid/gid 0/0 in /home/xxx/test.php on line 4 ---- Notice it didn't print "whoops"... no exception was thrown at all. 
You aren't going to need security, it's not like hackers are going to steal all the customers data.
I lolled. Should have noticed that.
I would argue that sending credit card numbers across a non https connection would be a bad idea. I wouldn't buy anything online if it wasn't through a https.
Your entire comment is just beyond stupid: it's negligent and borderline criminal. And it's against all the credit card's requirements for using an online merchant. You are REQUIRED, if you accept credit cards, to have a verifiable SSL certificate (from Thawte or Verisign) and you are REQUIRED to ensure that all communications with the server that contain the credit card number only be done over SSL (there should be no way to communicate a credit card without SSL). edit: unless you're being sarcastic, in which case this comment is a lesson to all who read it.
I am the great sarcasm master trying to teach everyone who reads that comment a lesson. 
I wrote a function e() that echos escaped variables. it just seems redundant to me. but thats me, i dont mind the shorthand php syntax
thats a nice site, and no, its not that slow. next ecommerce site i have to create ill try it out again. thanks.
Awesome work on those links, dude.
Hi, I'm trying to localize or internationalize a web app running PHP. I'm using setlocal and number_format, money_format. The development server was a Windows server, but now we've migrated it to a server running Debian. As it is mostly scandinavian and european sites thats we're currently supporting I've tested it with english (UK) and danish, swedish. In development (Windows): Danish: Thousands seperator . and decimal , Swedish: Thousands seperator . and decimal , English: Thousands seperator , and decimal . The above is fine. As I want it. But on the Debian server swedish looks like this: Swedish: Thousand seperator (space) and decimal , As far as I know having visited sweden a few times and also looking at Ikea's swedish site they use . as thousands seperator. According to this http://en.wikipedia.org/wiki/Decimal_separator both is vald: [...] Denmark, Italy, Romania, Sweden and much of Europe: 1 234 567,89 or 1.234.567,89 [...] So my questions: 1) Do I continue using spaces as thousand seperator? Both are apperently valid but I know the users will prefer . instead. 2) How can I trust Debian, Windows etc. if they use different standards. If next week I move it unto a BSD platform will it change again? 3) What did you guys use to localize your web apps? Thanks!
Ensure that [setlocale](http://php.net/setlocale) works and that your system has such locale installed. If it doesn't, you'll get defaults. You may need to run `locale.gen` script on debian.
setlocale does work. Both on the Windows and Debian server. Locales are installed via the package manager agt-get install locales-all. When I echo out what locale has been set to it gives me da_ DK, sv_ SE or en_ UK. Should be OK. Also localeconv gives me correct information except of course on sv_ SE on Debian.
Both &lt;space&gt; and ',' are acceptable here in the UK. Schools teach you to use &lt;space&gt; nowadays, as it is the modern way. Older folks still use the comma.
Spaces is supposed to be the international scientific notation, that supersedes all the various combinations of commas and dots. Outside the scientific community though, few - if any - people use it.
Same here - but after learning on how to use CI I dropped their AR and started writing my own SQL queries - even for simple stuff.
I have never heard of that one before, but after a google search, the entire first page of results is nothing but problems.
I'm running 5.2.4 on Ubuntu 8.04.2 and have 2,500 PHP files in my project, with some at least 1000 lines long. It's a massive project, and yet never once have I encountered this bug. In production, I have RHEL5.3 with PHP 5.2.3 and no heap corruption crashes there either. What if the problem is processor-related to a particular processor?
The main difference is that Lighttpd has serious memory leaks, where Nginx has none.
I think I just shat bricks. Never thought I'd see the day where Microsoft helps with anything PHP related.
I second the shitting of bricks! Will this lead to the adoption of php in to more corporate environments?
They didn't. Look at the list: integration of PHP with Microsoft products, unfucking Windows so that PHP works, integration of PHP with Microsoft products, migrating PHP to Windows, connecting PHP to Microsoft products, training kit to use PHP on Windows, accessing Microsoft services with PHP. Nothing here improves PHP for everyone, it's the usual embrace &amp; extend.
NO one ever said it would improve PHP. They are helping people make it work with their product.
Classic playbook stuff here. Embrace, extend, extinguish. And once they get the camel's nose under the tent, you can't get it out. And then you'll need like 50 dozen M$ servers, each clustered and with a specific purpose only, for each part of their enterprise implementation of whatever they recommend for you.
"Service Unavailable" Typical Microsoft
oh shit don't go fucking around with php, microsoft, you'll just break it (see: MS+html, MS+jpg, etc) 
But why? Nobody would use Windows unless they absolutely cannot avoid it. Keep this in mind people if your company can't afford a slicehost or something, leave... quickly.
&gt;Nobody would use Windows unless they absolutely cannot avoid it. Tell that to over 90% of the computer market.
Why is the link flagged as untrustworthy?
And what's it good for? Any use cases?
You mean dependency injection? It's good for two things; Separating creation logic (wiring) from runtime logic and reducing coupling through inversion of control. The last point is probably the most important. For example, say you had a class that uses a database-connection. It might look like this: class PersonGateway { function getPerson($id) { return Db::select("select * from people where id = $id")-&gt;first(); } } This makes a very strong dependency between `PersonGateway` and `Db`. If you wanted to replace that dependency, you couldn't do it without changing the code. Say you wanted to write a test for the `PersonGateway` and you wanted to use a mock database in lieu of the real database. The *Inversion of Control* pattern fixes this by providing any dependencies (the database in this case) from the outside, rather than letting the client class pull it in. In all simplicity: class PersonGateway { function __construct($db) { $this-&gt;db = $db; } function getPerson($id) { return $this-&gt;db-&gt;select("select * from people where id = $id")-&gt;first(); } } This works fine on its own, but it can get a bit unwieldy, having to pass a lot of dependencies around. Each time you change the constructor of a class, it causes ripples in your application code. A container fixes that by hiding the construction away. In general, code that uses IoC has a very low degree of coupling, which makes it easier to test, as well as easier to reuse and integrate with other code.
Hi, could you by any chance put your copy on some repository like github?
You may call it a framework if you want, but frameworks such as CodeIgniter etc. make working with php less painful.
Would be handy for printing out specific functions, moving a function to another source file, etc.
include and use reflection to get line number of the definiton. Or just use tokenizer and try to rip it from the file.
try grep
A good start is http://php.net/manual/en/language.oop5.reflection.php#language.oop5.reflection.reflectionfunction
The following regex, from Friedl’s Mastering Regular Expressions, can help. It extracts everything between a pair of curly brackets (including nested curly brackets). /** * Regular expression for matching nested curly brackets. * * @see Jeffrey Friedl, "Mastering Regular Expressions", 3rd ed., p. 476, * Recursive reference to a set of capturing parentheses. */ const NESTED_CURLY_BRACKETS_PATTERN = '((?:[^{}]++|\{(?1)\})*)'; 
What's that got to do with PHP/5.3? Every framework can do that for you.
It uses many of the new features in 5.3 to make things simpler for the developer. Namely late static binding to do dynamic finders like Book::find_by_name. You couldn't do the same thing in a static context prior to 5.3. Yes, you could still do something similar but those methods were never as clear and simple as what you can do with late static binding. The biggest advantage of this implementation is its ease of use like not having to define your fields either in code or an xml mapping file. Basically a few lines of code will get you going. Compare that to something like propel.
No, that interface is infeasible without `__staticCall()` and late static binding added in 5.3. 
even better would be - never see php again!
You're in the wrong subreddit.
Doctrine ORM exists and does this job very well already. Of course it's always great to have alternatives, but in my opinion this doesn't impress someone who is using doctrine.
Anyone seen speed comparisons between Quercus and native php?
Sorry, the "never write sql again!" part was just a marketing ploy =). We don't actually believe that you will ever have to write sql again. I know that I have definitely written some very complex/funky SQL in my time, but as you say yourself: 90% of the situations can be done with the "magic."
Am I the only one who actually LIKES writing SQL?
I use linux at work and at home and so I'm very fond of the command line. I'm also very fond of 1 dedicated terminal logged into a mysql database. I enjoy SQL and find myself writing quite a bit of it; however, using the ActiveRecord pattern as defined by Martin Fowler is quite powerful. I'm also very fond of being able to have a record from the database wrapped in an object with complex behavior at my finger tips.
My sentiments exactly. Except for the really trivial cases, SQL is usually much more succinct than some obscure ORM query-layer. 
So .. does you library have a project page with download somewhere? So far, this is just an interface.
Totally. But how do you modify the SQL in different parts of MVC? How do you, for example, add limits (for pagination) and WHERE statements after you have built the SQL? An ORM allows you to pass the SQL around as a modifiable object. I'd like to see an ORM that can read SQL and make the object from it, then you'd have the best of both worlds: $sql = &lt;&lt;&lt;EOT SELECT name FROM people EOT; $o = new orm($sql); .... $o-&gt;where('name LIKE ?', $some_value) $o-&gt;limit(10); Horrible inefficiency, but easier to read than this: http://framework.zend.com/manual/en/zend.db.select.html#zend.db.select.building :)
I wouldn't conflate query-abstraction (which is what you're showing) with ORM. Query abstraction is useful when the exact query is determined at runtime (Such as adding limit and additional where clauses - even adding additional joins and whatnot). Essentially it's just a toolkit that helps you construct the SQL, but you're still using the semantics of SQL, even if the syntax is different. An ORM, on the other hand, abstracts the rdms away. That, I am very sceptical towards.
We are working diligently to wrap the project up. I think we are going to have code available on launchpad either tonight or tomorrow here: https://launchpad.net/php-activerecord. We will also have http://www.phpactiverecord.org up shortly with guides, documentation, etc.
Small changes in query fields and values can produce the same results with incredible performance implications.
Thanks! I'll try that out.
You can find our latest post here: http://www.derivante.com/2009/05/19/php-activerecord-available-for-beta-testing/ The code is now up on launchpad here: http://code.launchpad.net/php-activerecord
Was there for the presentation. Loved it.
Yep, even 8 years ago our company's billing was managed by a cronned PHP script. Probably not the best idea, but its the only language our finance guy/programmer knew.
Good article, but it's a bit of a fight on words. I see the difference between language, dsl and api as a continuum, rather than fundamental. So in one respect, php *is* a dsl. It all depends on whether it makes sense for you to perceive "the web problem" as a domain or as something bigger than that.
Agreed, definitely a continuum in this case, and many others.
I am a big fan of [phpfreaks.com](http://www.phpfreaks.com) Also using [php.net](http://www.php.net) is advisable.
[book.cakephp.org](http://book.cakephp.org/)
Twitter.
subscribe to [http://www.planet-php.net/](http://www.planet-php.net/) it aggregates top php feed from php developers
Read source code written by other people. Take note of things you do not understand and things you consider ugly.
phpfreaks.com is an awesome community. I would not advise learning or using a framework until you are really comfortable with PHP. I was writing PHP without a framework for about 5 years before giving in and using CodeIgniter, which is an amazing framework. Their forums are also filled with some very knowledgeable coders. Edit: I just also wanted to restate how awesome php.net is. One of the best online docs IMO
I would not encourage someone to learn a language and a framework at the same time. Learn and really understand the language first.
not sure who would downvote you because this action you describe, should one want to ascend to php guru level, is essential. ah, now i know who would downvote you -- the ignorant.
php.net is the best in my opinion, most items have somewhat intelligent comments below the official documentation.
He didn't specify that he was a beginner, he just said which is the best. Also i learned php by going through first the code igniter blog tutorial and then the cakephp blog tutorial. now i dev mostly in cakephp
I learnt PHP while learning Symfony. I already knew other languages at that point.
I've used and can recommend phpbuilder.net.
I think knowing a framework is very important, so you may as well learn it before you start making sites. Anything more than a couple of hacked together pages needs one anyway.
take a look around PEAR and Zend Framework. Both give you a sense of how PHP should be written. I don't know what the PHP equivalent of Pythonic is - PHPonic? But these give you a sense of it.
The [PHP Application Design](http://www.sitepoint.com/forums/forumdisplay.php?f=147) forum at Sitepoint has long managed to keep a pretty high standard. In the blogging world, [planet-php](http://www.planet-php.net/) is your one-stop information-hub.
I see what you're trying to accomplish, but I really don't think that concept fits very well into PHP. If anything, I think you should try to use lambdas (hopefully 5.3 is out in a jiffy). You'll probably find that the syntax ends up becoming rather bulky however.
Definitely agree with you on php.net's documentation. I tried to find a site like this for Java (with similar code examples and notes) and there is nothing that really measures up in this respect. This is why I still consider PHP to be my first language. I'm fundamentally lazy, I guess :)
It was many moons ago, but I found PHP Freaks very useful when I learnt the language.
Pretty cute.
My advice would be to join a community (phpfreaks looks best), although this reddit is a community after all. Try to make firends with a few users who don't mind you pinging them for help - when I was learning PHP I kept having small questions, pinging them off a friend helped a lot. People always say to start a project and learn through that - I'd expand on that and find someone else's application and read through the source of that. A good place to start could be [phpBB](http://code.phpbb.com/repositories/show/5). There's also a lot of code in the [php.net repo](http://cvs.php.net/). While the IRC rooms on Freenode can be useful I'd stay away from #php/##php. Last time I went in the there it was full of people constantly asking their question, over and over again. I think there was one poor soul attempting to answer questions. It might be different now, but the signal-to-noise ratio was pretty insane. Many other people have suggested not learning a framework. I'd agree with this to an extent, but for an introduction to OOP many frameworks do this well. I'd reccommend the [Zend Framework](http://framework.zend.com) over [CakePHP](http://cakephp.org) since it's written in PHP5, although Cake does have some nicer implementation. Make sure to look at ZF's Zend_Service_* libraries too - using a web service/api is a fun experiment.
I definitely agree with you about frameworks. I also wrote straight PHP for about 5 years before deciding to start using a framework. In my case I choose CakePHP, also an amazing framework.
This isn't really a framework, is it? It's just a dispatcher that uses some variable function naming. I'd really like to see a 'micro framework' that just provides a simple, stupid ORM to mysql, but they all seem to try too hard to cram too many features in and end up becoming unusable.
This isn't really a framework, is it? It's just a dispatcher that uses some variable function naming. I'd really like to see a 'micro framework' that just provides a simple, stupid ORM to mysql, but they all seem to try too hard to cram too many features in and end up becoming unusable.
I would actually disagree. I would set a newbie coder up on a more "automatic" framework like CakePHP/Symfony (not to say Cake/Symfony is a newb framework, just saying it does a lot of setup for you). Both of those will force good habits and practices out of a new programmer, and as they feel more comfortable they can branch out to the more "hands-on" frameworks like Zend, write stuff from scratch, or stick with their first framework and continue their expertise in it.
I don't know if I should upvote you for supporting cakephp, or downvote you for suggesting the OP learns php and cakephp together.
[phpdeveloper.org](http://phpdeveloper.org) for the best blog posts in the community. [http://stackoverflow.com/](http://stackoverflow.com/) has some good Q/A on PHP. Most of the advice is sound (though I've seen some that is just plain not, no worse than what you'd get in some of these tutorials I've seen). Others in the comments are good as well: [php.net](http://php.net/) you should know backwards and forwards by now, including the search shortcut i.e. http://php.net/**SEARCH_FUNCTION_HERE**. IRC is decent too, ##php on freenode if you're brave, #phpc if you want social interaction (they don't take kindly to questions until they know you, it is designated as a social channel). Also, #zftalk if you use the Zend Framework is good (I can't speak for any other framework IRC channels).
&gt; I don't know what the PHP equivalent of Pythonic is - PHPonic? "Not Retarded"
Love those freaks. I havnent been there in a while though
I have learned more about PHP from the php.net comments on any of the pages. There are tons of good (and bad) code in there, really helpful.
I love microframeworks, where you can sit down and use it for something immediately. I use CakePHP like crazy too... but for small web tools, microframeworks actually deliver on the time-savings in a really obvious way.
This look promising for small to medium-sized project. I will give it a try for sure at some point.
would like to see some more examples of complex JOINs
lame. elaborate workaround just to keep html output insecure. 
lol. ok man.
Hm. I just do action="" and that's always worked for me. Are there any situations or browsers where this fails?
[forums.devnetwork.net](http://forums.devnetwork.net). It also has a page rank of 1.2 (second item on page 1) of Google when you query on "php forum", so you know it's going to be visited a lot. It has 43,000 members. PHP Freaks, which has a page rank of 1.3, only has 3,199 members. However, if I'm in a hurry and I really need an answer, there's always IRC as well as stackoverflow.com.
I think developers have caught on to this like a fad. Like many developer fads, there's some good and there's some stuff that's just "fad". In my case, all I need to get going are: - a PDO wrapper class. Just make a class that extends PDO, and throw in some common class methods that you would often need - a getRecord class which returns an instantiation of something like an ActiveRecord class complete with .insert, .update, .delete, and .save (which decides automatically whether to call .insert or .update). What more would I need? And why would I need more hassle than that?
The HTML specs say action needs to contain a valid HTTP URI, and the URI specs say a blank URI is a valid reference to the same page. My gut is telling me some or all HTML validators are going to report an empty action as invalid, though.
The w3 validator seems to accept it. (XHTML strict.)
Yeah, but what do they know about HTML? *ducks*
You could always filter out any XSS attempt like you should be. Remember, never trust anything the user can modify.
I don't even use the action attribute at all. Not sure if it's valid but it's always worked.
quick note: I wouldn't use die(). id load a 404 page instead. 
I don't get it. Where is the vulnerability? If you set the action attribute from $_SERVER['PHP_SELF'] and properly escape the user input in the form itself this should not have any impact. Or am I mistaken?
Just because you can do lots of things with PHP, doesn't make it not a DSL
I don't like the URL format of... http://mysite.com/index.php/controller/method/whatever/whatever ...when it could be... http://mysite.com/controller/method/whatever/whatever ...which is prettier. Also, in reality your terms are little less than mainstream because it would be called: http://mysite.com/domain-object/task/whatever/whatever/ You might want to Google on Apache2 .htaccess if you're wanting pretty URLs. There are a variety of routines to achieve this easily. And steer clear of course from using ErrorDocument as the technique for sending all unknown requests to index.php because what that does is cause Google to register your site as one great big 404. My article mentioned a technique which does not do the 404 to you when Google hits it. I also recommend at least reading the [No-Framework Framework](http://toys.lerdorf.com/archives/38-The-no-framework-PHP-MVC-framework.html) discussion from Rasmus Lerdof, one of the leading guys who made PHP, as well as downloading and analyzing several minimalist MVC frameworks and learning some of their interesting techniques.
Okay fine.
can I use drupal instead of zend?
The real issue that comes up is coders that learn the language with the framework and they rely on the framework's wrapper functions for native language functions so it removes them even further from the code. I see what you are seeing but I still see this as a legit issue.
You are free to use whatever framework you wish...
Hi there I would like to imform you that from h2o version 0.4 autoescape all variable by default. I created h2o for user editable templates and simplicity. I have hear great user story using it with systems like cakephp, zend framework and other cms. There are couple micro web framework uses h2o for their view layer too. Thanks
What's unique about this is that it is not the Observer pattern and does not use eval(). It does not require that you change your class. And it doesn't require that you be on PHP 5.3.x or higher -- all PHP5's will do. The two significant tricks are the empty Pluggable class and the fact that we don't touch the $Dog object directly, but indirectly through the Pluggable class.
On what kind of pattern this is, someone mentioned it was a Decorator pattern. Someone pointed out to me there's a problem, though. He says that you can't have more than one event handler. So, let's say I wanted to have two plugins that override the Bark event, and the second plugin does it in sequence after the first one. You would error out. Anyone got an idea on a fix? I guess I could introduce an Observer pattern in the event functions, and then have the plugins be notified through that. I dunno, though...still thinking...
I'd call this a decorator, if you really want a name for it. There are a couple of issues with it, such as runtime overhead and the fact that you lose static typing (Which is some times used in PHP). It's a neat trick, but I guess the question is what it's for? If you need to extend a class, I'd say that the dogmatic PHP-way to do it, is in static time; Eg. write an adapter for it. A side note btw. Since PHP 5, you don't need to explicitly pass objects by reference anymore.
&gt;What's it for? Right, so like an "extends &lt;classname&gt;" kind of thing was your suggestion. The problem in general is that I'm trying to figure out the shortest, fastest way to implement a plugin system sort of like WordPress. You copy files to a plugins folder, the app recognizes them, the end user activates them, and they start firing, allowing as much override of the application as, say, WordPress.
True enough, though I find it a little easier to beat a noob into using a "new" or "different" function than it is to beat a noob into using styling guidelines...
id like to see the php templates that were a 'mess'. My php templates look just fine.
Another way of doing plugins is by hooking the MVC framework. 1. It starts with a Plugin Registry. A plugin is detected in the admin system of a site out of the plugins folder. If the plugin isn't already loaded in the Plugin Registry, it is registered. This basically means putting it in like either a shared memory variable, a SQLite table, or your backend database. 2. Before a controller API dispatches a route out of the front controller, it sees if the action (the domain-object/task out of the URL) applies to a given plugin from the Plugin Registry. If so, it loads the plugin code via an include and runs overrideControllerOutput() class method of the plugin. Inside the overrideControllerOutput(), one can do anything with any established variable thus far, including `$_GET` and `$_POST`. 3. The same thing would then occur before the view is rendered. It would check the Plugin Registry for the given action (again, that's the domain-object/task out of the URL) and then call the appropriate overrideViewOutput($sXHTML) class method of the plugin. Alternatively, if you are assigning variables into the template view, you could override those in the same way. Or you could do both -- override the variables and override the XHTML.
How are the two problems related? I would think that a "plugin system" is mostly a matter of convention about file-names/locations, class names and a couple of interfaces (soft or hard). Why would you need runtime augmentation of classes for that?
Ah .. I see what you mean now. I would probably prefer a more explicit solution, where you simply have a global registry of callbacks that you can dispatch to. I can see the elegance of your approach, but I think there is a bit too much magic in it. Someone using the interface might get confused, and it might be a bit weird to debug. I mean - it'll probably work, but it's - in lack of better work - "dishonest" code. Moving the hooks into a separate registry also gives you the first step towards remove the global nature of the system. I'm not sure how much of a problem this might be, but if nothing else, it makes the code easier to test.
Use google, it's your friend.
lol, you are very helpful. Thank you
the basic idea is that somewhere (like a database) you store a username with a [hashed](http://en.wikipedia.org/wiki/Cryptographic_hash_function) password (hashed with a function like SHA1). Then you have a form: `&lt;form action="login.php" method="post"&gt;` `&lt;input type="text" name="username" /&gt;` `&lt;input type="password" name="password" /&gt;` `&lt;/form&gt;` on the PHP side, you get the POSTed variables and compare them with what is stored: `&lt;?php` `if ($stored_username != $_POST['username'] || $stored_password != sha1($_POST['password']){` ` exit('username/password incorrect');` `}` `// stuff that requires authentication` `?&gt;`
No, he's right. Google is seriously your friend in this situation. Here are the first three pages that Google retrieves using 'php login': (http://www.phpeasystep.com/phptu/6.html), (http://www.devshed.com/c/a/PHP/Creating-a-Secure-PHP-Login-Script/), (http://php.about.com/od/finishedphp1/ss/php_login_code.htm). Reading through any of those articles will at least get you started on the right track. Don't expect people to just hand you a solution, hunt it down yourself.
heres the basic idea query database 'select count(*) from users where username=adfads and password=asdfadf'; if query returned a result valid login set session varialbe else invalid login dont store user passwords in the database, store a salted hash 
except, this method sends the user's password over the wire in plaintext. generally not a good idea. the password should be salted + hashed before being sent in the POST request.
hash and salt with Javascript? and then send to server? what if the user doesnt have javascript?
The only way I can think of doing it would be with javascript and I just dont think that would work well, 2 reasons: 1. What if they dont have javascript enabled; 2. By using javascript the user can tell a lot about your encryption methods already.
Use SSL connection.
if you hash it before sending, it's no different than the plaintext password
Yes but you asked about the efficiency, perhaps a question like: What would be the output of these two statements? $var = 'foobar'; echo '$var'; echo "$var"; Would be more appropriate.
That's because most of the PHP library functions don't throw exceptions, they use the error system which prints errors dependant on your error_reporting setting. They do however return a result, which you can catch to throw an exception yourself (admittedly not great). I've seen something that can catch PHP errors and turn them into exceptions (something to do with [ErrorException](http://php.net/errorexception)) but I do agree it's not great.
Here's a [demo link](http://particletree.com/examples/pqp/). This looks very interesting, especially the speed/memory parts.
WHAT DO I GOOGLE FOR?! NOTHING ON GOOGLE ABOUT THIS PROBLEM. PLEASE PUT CODES HERE.
That would be a good question, except I'd fire anyone if I saw them do this: echo "$var";
I'm sorry, you're right. No one has every attempted to create a login system before in PHP. You're the first one, congratulations on your brilliant new idea. GTFO Troll.
I can't believe people are still finding this thread ;) Yes, I realize why it is the way it is. I maintain that it is stupid.
i really don't know why i'm being downmodded for suggesting this... you hash the plaintext password with some time-based salt / codeword combination, so that you can defend against potential man-in-the-middle attacks (http://en.wikipedia.org/wiki/Man-in-the-middle_attack). Using https is all well and good if you own a registered certificate, otherwise all it buys you is encoded packets which are really not all that difficult to brute-force given enough of them and the right hardware. If the user doesn't have JS flipped on, then obviously this isn't a viable solution. It just makes your form a lot less secure. 
Obfuscation isn't really a huge concern with the hash + salting technique, because the hash contains temporal data. It operates on the same principles as public key / private key cryptography, everyone has access to your public key - but it only represents part of the system.
Oh, come on... The very asking of this question is so tantamount to 'please send the codes' it's ludicrous - I wholeheartedly agree that his first stop should be google, not asking reddit.
thank you
On the framework I disagree with his point about the documentation. Compared to the PHP docs, which have a good reputation, they're different - in that they don't outline each function individually - but they aren't **bad**. phpdoc, the engine that powers the PHP manual could be used to provide more in-depth content.
haha, I didn't even look at the username, I thought you were the poster. (I iz stupid)
me too 
why PHP? this is valid for everything.
1. Use python instead ;) Seriously, it's a pretty darn good article. 
I like.
Preach it, brother!
&gt; Thank you for offering to pariticipate in our survey, however your profile does not match the profile needed for for this study. JUST because I'm not in North America, screw it. edit: Error: Project already completed for this ID. Array ( [s] =&gt; f [tpid] =&gt; 200488300 ) xD (that was the back button on the browser) edit2: the questions are too specific, they reject you if you are a sales person or if you don't develop for the choices they provide or if you work on web based technologies, what's going on here? edit3: also reject windows ---- ok, they want a linux-based desktop application developer and reject you if you don't provide an email -reported-
Hm... I develop in ExpressionEngine. No option for that, so I don't qualify.
There's no content behind this link just a page trying to get you to sign up for a conference where this session will be held. Cannot believe the upvotes are anything but spam
ANY survey will have quotas for certain attributes in order to achieve a balance (such as "no more than X% using Windows"). That's so the analysts can cross-tabulate the results and determine that, say, people who write PHP apps on Linux are more likely to deploy on Apache or use such-and-so methodologies than are those who use Windows. Also, EVERY survey is looking for people who match a particular set of criteria. For a non-techie example, that might be people between the ages of 18-24 who watch more than 10 movies per month. It all depends on what the goal of the survey is -- and you won't necessarily be told what that is. The subject line says you get the Amazon gift certificate if you do the phone interview. How's that going to happen unless you provide some way to get in touch?
I can't finish the survey unless I provide an email so the "gift" is not optional, sorry but sounds fishy.
There's always a way to do better. `init_get()` returns a string, not a boolean. And `{}` blocks would be a better style. The first comment mentions pmwiki which uses `$$name = null; unset($$name);` due to a PHP bug. 
I think that's more of a tutorial than a cheatsheet. A good one, though. Here's a cheatsheet: http://www.goodphptutorials.com/out/PHP_Regex_Cheat_Sheet_PDF
sweet, thanks. A longer and more detailed tutorial can be found here. http://weblogtoolscollection.com/regex/regex.php
&gt; The PCRE functions are more powerful than the POSIX ones, and faster too, so we will concentrate on them. And the POSIX ones won't be in PHP6. 
Well, in this case its taking advantage of PHP's weak typing. Since "register_globals" setting returns either 1 or 0, as long as you're not type checking it will act as if a boolean was passed to the conditional. It would be better to check it thusly: if ( ini_get("register_globals") != 0 ) { // unset vars }
Is there a server with this script installed, so I can rape it, or is the author just being mean by encouraging unsuspecting souls to install this on their own server? 
The [demo link](http://ppaste.stuffit.at/) is listed on the first page, but not very clearly.
I contacted the author directly last night and he's started patching things a bit already, so no rape for me :'( 
How could you be interviewed by phone unless there's a way for the interviewer to get in touch?
You really oughtta fix the typo in the title unless you've got a time machine and want to take us all back a few years.
I'm \*not\* interested in being interviewed by phone, your submission's title says "Amazon gift cert **if** you do phone interview" if I can't do your survey anonymously then no thanks. it could be legit, I really can't tell because I'm not gonna play guinea pig here but all this "requirements" plus personal contact information make it a lot more suspicious (so, if you're trying to spam me do it better the next time).
Doh!
http://www.php.net/~helly Directories &gt; examples Other than those, the plain old phpdocs at http://php.net/spl will give you the API, but you'll have to search around for some code examples. However, the API is pretty well documented; you should be able to start using most SPL classes right off the bat.
How stable is Templum? Has it been used in any real world projects? I tried using another template engine, [h2o-template](http://h2o-template.org) for a recent project and it blew up on me (quite a few bugs) (you *are* the author of Templum right? I figured it would be faster/easier to ask you on reddit rather than emailing you ;) hope that's ok... 
Well, that depends on what you mean by stable. There are no mayor bugs (except for [this one](https://svn.electricmonk.nl/trac/templum/ticket/7)) or security problems in it, as far as I know. The API also should be stable until at least v1.0. There are at least three projects it has been used in that I was myself directly involved with. One is a collaborative dictionary-like web application for a Dutch educational facility, another is at my job (that partly sponsors development) for an in-house systems monitoring and reporting application, which we are rewriting from a non-MVC model to a MVC model using Templum. The Templum website itself also uses it. I'm not sure how much exposure it has gotten in other real-world applications. This is the reason it is still considered Alpha. I've gotten positive feedback from developers though. Some have integrated it with their current frameworks. Templum is also still under active development and is being used in projects which are themselves very active, so bugs should surface and get fixed quickly. If you encounter any bugs, be sure to report them and I will fix them ASAP. *edit*: Almost forgot: Templum also has a fairly well covered unit and regression testing set up, which should ensure no bugs ever resurface, and that the API remains backwards compatible.
Well documented but hard to find at times. A big caveat, be careful about what SPL portions you use as I know some of them that are already documented are slated for PHP 5.3 and are not present in 5.2.x. For some reason I want to tell you that the SPL data structures (Heaps, Linked Lists, Etc.) are 5.3 but I have nothing to test with so I could be wrong, can someone verify for sure? Edit: Thinking about it some more I think a few of them exist but like FixedArray maybe... guh, I can't remember...
That's really great to know. We were doing a CMS site for a client and decided, at first, to roll our own system. But now we've decided it's too much of an effort so we ditched the plan. We're now using [Frog CMS](http://www.madebyfrog.com/) with custom plugins. We *might* integrate Templum, but not now - we're going the simple way first - straight, plain PHP templating. But I'll definitely keep Templum in mind...
I don't use a lot of them on a regular basis. One I do use is ArrayObject, but by extending it to create simple data stores. E.g. class Registry extends ArrayObject {} Allows me to build a simple variable registry, and easily make it a singleton by adding a couple of methods.
Somebody forgot to test the layout with Firefox.
Really? Works fine for me. Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.10) Gecko/2009042316 Firefox/3.0.10
Upper right-hand corner where it says: Try php|architect for free – * Write for Us – * Advertise – * About / Contact FF only shows "Try php | architect". The next words are cut off.
A ha! You are correct sir, I didn't even notice that. Also, changing the margin-bottom on that subMenu ul to 0 fixes the problem. However, I couldn't be arsed to see if that works the same in IE :)
TiddlyWiki (used by the above site) makes me throw up a little bit each time I use it. For those with similar gag reflex, the source is at: http://github.com/buurtnerd/redbean/tree/master
The PHP manual has version information attached, if you're looking for when a class was introduced then the easiest place to look (usually) is the page documenting its constructor. For example: * [SplHeap](http://php.net/splheap.construct) (5.3.0) * [SplDoublyLinkedList](http://php.net/spldoublylinkedlist.construct) (5.3.0) * [SplFixedArray](http://php.net/splfixedarray.construct) (5.3.0) 
create one yourself,
[Symphony](http://symphony-cms.com/) is nice.
Could we get a better sense of the requirements? * Will the client be entering &amp; maintaining content themselves * Will the content have a taxonomy? How complex is it? * Do you require multiple content types, each with different fields? * How much control do you need over any "widgets" on a page? Can every widget appear on every page, or should certain ones only appear on certain pages? * Will there be any e-commerce? Basically, your best options are Drupal and WordPress. Both are mature CMSs with very active developer communities. WordPress is good if you need a lightweight CMS that's easy for a client to pick up &amp; use. Drupal is really powerful, but you might have to sit down with your client a few times to walk them through entering content. If you want to integrate e-commerce, Drupal with Ubercart seems the way to go.
I was just getting there... you beat me to it. I've looked at all the major CMS's, but I'm not sure what is going to fit my needs the best. I already know that I"m going to need to write a custom module of some sort as I will be collecting and processing data, so creating forms and the like should be easy. Also, my client needs to be able to edit and refine static text around the site which is reused in several locations and can be displayed beside custom modules. As for your questions, the complexity is pretty low, there is a signup process that does includes fee based e-commerce piece and then a dynamically generated user area beyond that. Taxonomy isn't necessarily needed. Let me know if there are any other questions. -N Edit: So the basic needs are: * Extensibility for a custom application, both in a "sign up" process and in the user area * Client manageable reusable static text * Fee based e-commerce piece (I'm happy to custom code this into the application piece) At a past employer I've used a modified version of WebGUI to accomplish similar results, but I can't help but think that there's a better solution out there.
like i said, it is easier to create a custom application / website than go and modify / implement a CMS. I have a client who wants a website+application which includes registration etc. Joomla seems good, but to explain to the client various sides is difficult. Writing one yourself is far easier to implement and debug.
It sounds like Drupal is the way to go, then. I'd specifically suggest looking into the following: * [webform](http://drupal.org/project/webform) for collecting data * Ubercart for collecting access fees ([assign a role upon purchase](http://www.ubercart.org/docs/user/3366/selling_site_access_role_promotions))
&gt; Writing one yourself is far easier to implement and debug. No. No it isn't.
Why do you say that?
Hookers and blow? Do something like [Miro](https://www.getmiro.com/adopt/) , by letting users adopt a line of code? Person who contributes the most gets a shiny new: Macbook? ThinkGeek gift certs? Pony? Narwhal? Start a rumor (or awesomely designed website) stating that your "project" is dying of cancer and his only wish is to be finished before XX/XX/XXXX date. Schedule a real-world "meetup"... everyone who comes and helps brainstorm ideas gets an umbrella drink! Give your project its own Twitter page. Update it with witty one liners: "50 new lines today! - a new function. Look out binary-ladies!" Maybe these are all crap ideas,.. but the point I'm trying to make is to be creative and think outside the box. I spend a little time browsing sites like SourceForge or StackOverflow and my god most posts/project-pages are boring as shit. Do something to make your project unique.
Make something that really applies to the release early release often model. Its the best feeling when you see something you've helped to build go live, or see other people using it. Another alternative is to ask people to submit patches for bugs they report. Most of the time they probably won't, but if they do they may stay involved.
money
Get them all in one place and show them your system. [Project Timer](http://sourceforge.net/project/screenshots.php?group_id=189725) - A project and task timing system - needs some developers. Send me a message if you are interested. If you have good ideas then they could be incorporated, but project timing is what it does and what it will do best.
Put the code on github where it's easy to fork. Have clearly-marked places to go for help. A mailing list and an IRC channel are both pretty necessary. (You can get by without the IRC channel, but in that case consider providing your direct email/IM to any developer who shows the slightest interest.) Have code that's readable, sane, and not too voluminous. Make sure incomplete or known-suboptimal parts are clearly marked. Have a project page that's engaging. Post new content explaining how to use X feature periodically. Consider your license. Some hard-core free software folks will only contribute to GPL'd projects. Personally, I won't allow myself to become invested in GPL'd projects. I'm a good open source citizen--reporting bugs, contributing patches--but I often want to be able to combine X with proprietary code.
Accept patches. Have honest and open discussions about issues with your project's code. Basically, be open to making changes and looking at things in a different way. It's not enough to put up a bug tracker that lets people upload patches. Commit to reviewing those patches and respond to them in a timely fashion. Similarly, respond to bug reports quickly, even if only to say "Won't fix" or "Sounds like a legit problem. Please submit a patch if able." Can't tell you how many times I've submitted a bug to a project (say, FreeBSD) and had it languish there for *years* before someone would respond asking "Is this still an issue?"
candy
Write something that people want to use. If a developer has no interest in the project then no amount of candy will induce him to help. Follow gerundronaut and midnightmonster (except the github bit, it doesn't matter where or how you host the code just make sure it's updated regularly). Phillip.
Whats new now? Macros?
I am on the verge of using a framework with php now, I have decided to go with Zend - can someone say why would I use codeigniter instead? I wan't, as a must: - nice authorization with multiple levels of access - pretty URLs - easy PDF output - some form of i18n
Codeigniter works with PHP 4.3. I would go with ZF, but I highly recommend downloading both and working through a few simple examples or similar tutorials with each one. Figure out which matches your coding style/flow/preferences best. [Kohana](http://www.kohanaphp.com/) is a PHP 5 implementation of CodeIgniter, and of course is able to take advantage of the features of PHP5 that CI is not. CodeIgniter is a great framework and a pioneering member of the PHP MVC frameworks available today
I'm currently doing a large site with CI and have enjoyed using it so far. Good functionality (although the standard auth package has room for improvement, I've found redux_auth does what I need) and CI is also really clean to extend. I'll probably move to the Kohana for on my next project, found out about it too late for this project.
thanks for reply. Yes, I have downloaded and test drove both ZF and CI, and I don't seem to mind working with either, they both seem equally easy to work with. ZF, in that case, seems to have the edge because it is backed by Zend itself. I'll check this Kohana too, to see what is that all about.
So what does kohana bring to the table that CI lacks? And, in your mind, why did you choose CI instead of ZF?
You know, when people had no science, they would deem things to be "evil", or "possessed", etc. Don't you find the use of the term "evil" in regards to programming practices kind of disturbing? It's superstitious engineering. Jesus Christ, people. Open up a book every once in awhile.
If there's anything the PHP community is known for, it's self-discipline and good coding practice.
it's not needed, so there are better ways to move around code. The drawback is that when someone uses it, even just once, it starts to make spaghetti code.
The FSM will be proud of the spaghetti like PHP pasta that will come forth with goto.
I like spaghetti and I like GOTO! I'm willing to take responsibility for the code I write, and I don't need computer nannies slapping my knuckles. Is "throw" and "catch", or equivalents really superior?
I still don't like it but I've made my peace with because nobody can force me to use it.
&gt;and GOTO is yet another example of what makes PHP the “language of people who want to get things done.” People say this?
GOTO: Another dubious language feature that's going to feel right at home in PHP. Think of it as completing the flavor of a really strange recipe. *edit: What's awesome is that I can't tell if I'm upsetting people who like GOTOs, or people who like PHP. ;) 
I get things done with PHP all the time!
Yes.
What versions of PHP does PHPUnit support? I've checked the Installation page and Google, but no joy other than a suggestion that PHPUnit 1.3.2 is the version to use with PHP 4. The Features page implies that the latest version might be PHP 5 only.
Take a look at [Phpunit's Requirements page](http://www.phpunit.de/wiki/Requirements) &gt;PHP 5.1.4 (or greater) is required. &gt;PHP 5.2 is recommended. And it looks like version 4 will require PHP version 5.3
Thank you. Totally missed the quite clear "Requirements" link on the home page, instead looking at the Install document.
Debating whether it's "needed" is pointless. Do/while/for loops aren't strictly needed either--you can still accomplish the same task with recursion, if you spend enough translating your logic into something that would work with recursion. But boy do they sure make some things a lot simpler. And I think I read that Linus Torvalds actually used a goto (or an equivalent of it) in the Linux kernel, because it was the most efficient thing to do in one part. That probably wasn't strictly "needed" either.
http://yfrog.com/04siskoanimateddg
And everyone that uses php is part of one magical community that is responsible for the actions of all others. 
or you could do it the non-retarded way: function check_bit($value, $n){ return !!($value &amp; (1 &lt;&lt; $n)); }
hey, i made that gif! =)
It would be better to use (bool) than !! Notice also that he is numbering bits reversely, starting from 1 :) thus it will be something like $value &amp; (256 &gt;&gt; $n)
Sorry codytaylor.org, that's an awfully complicated way to do it. Try to use the shift operators along the lines of what rq60 said. 
Altered due to the comments here and on the blog. Haven't really used the shift operators too much so I didn't even think about doing it that way. Good to know.
Eh? Don't use global variables in your app. No need to unset them because they can't do any harm as long as you don't use them. This code is useless.
PHP makes it very easy to get things done. It most likely wont be done well, but you'll have something that works. 
don't blame PHP, it's always the user's fault.
High five.
Show me a language that won't let me do a simple task in a really stupid way.
now with more kitchen sinks!
Is there a reason you're numbering the bits backwards though? I don't understand what benefit that would have.
http://php.net/manual/en/function.get-headers.php Also, there are other, better, ways to do the same thing (cURL for example).
I cannot wait to see that HDMI support to roll out.
Reddit does not care for PHP. We get it.
Sometimes you have to be cruel to be kind. It's a joke, with a serious point behind it.
Agree, it's a joke (in good faith I think). Hell one of the PHP contributors replied (afaict).
The joke is getting pretty old, though. Not that I disagree with the point, I have to work in PHP daily for my job and its shortcomings are pretty frustrating. I (and many like me) think Java sucks a big one, but you don't see daily posts like "LOL 5 Pages of Java == 3 lines of Ruby."
I don't go into your subreddit bashing the language that makes you money. Has PHP hurt you in some way?
Won a copy of Zend Studio in a competition once, but never really liked it. Still using phpDesigner.
I've stuck with notepad++ for awhile now. I've tried a few other ones and always found my way back to notepad++.
Use a mix of eclipse PDT and Aptana studio
emacs
Aptana Studio.
netbeans is pretty nice imo.
At work where I'm forced to use a Mac, I pick TextMate, but Smultron is a close second. On a Windows box, I dig Programmers Notepad And on Linux, I'll use gedit or even pico/nano 
vim edit: found some links for greater goodness [Ask proggit: I love using Vim but working on big projects is a pain. How do you manage files?](http://www.reddit.com/r/programming/comments/8ow6g/) [How to use VIM like a PRO.](http://www.reddit.com/r/programming/comments/8n3hr/) [How to get your favorite IDE features in Vim](http://www.reddit.com/r/programming/comments/8lawz/)
I use PHPdesigner2008. 
vim really is the best method for any type of programming
vim
I just switched over to Eclipse EPP PHP package from Notepad++. If Notepad++ had a project system I would switch back - I love all the built in macros.
Seconded. I use notepad++ in Windows and scite in linux.
Hands down, that feature is the biggest thing since PHP-GTK.
same here. eclipse 3.3 PDT. looking to try out NetBeans as well.
I'm a recent convert to Netbeans. Before that was Eclipse/pdt. Before that (for a long time) it was dreamweaver.
I used to use this, since switched to vim. Never used any specific features, it was just there to code in and provided syntax highlighting.
Vim and Textmate.
I use Vim (I can use IDEs but find them a bit constrictive), but barely use any of the features. I know about 5 commands, and have no idea how to use buffers as such. I also use gVim, rather than from the terminal. Really I'm just happy with a text-editor with highlighting and some minimal auto-complete for braces.
forced to use a mac? Oh woe is you! It must be horrible to have to work on a machine where you can easily run your own local development apache server and you're able to use all the those terribly, annoyingly useful unix programming and text editing tools. Frankly, I feel great amounts of pity for anyone doing any amount of programming on a machine that doesn't have a unix shell. I don't care if it's mac, linux, or an SSH shell into solaris... how anyone can work on unix is beyond me. I simply prefer macs because I also get photoshop and quicksilver. 
[Textmate](http://www.macromates.com/) (OS X only alas)
Eclipse w/ PHP, Zend debugger, and Aptana plugins
NetBeans is by far the best php ide out there.
My main machine is windows, I use Aptana and Sublime Text Editor. Vim on my servers through ssh.
I have Zend at work, because they paid for it, and I like it a lot. At home, I use Komodo Edit. I had to get the FTP sidebar plugin, now i like it.
I find myself using vim more often everyday. Other than that I used to use PHPdesigner which is great but now that I have moved to linux I use NetBeans which is not bad. vim for the win.
gedit on Ubuntu Linux: `$ sudo apt-cache search gedit | grep -iv "leaf\|sisu\|sea\|dev\|map\|gig"` `gedit-plugins - set of plugins for gedit` `gedit - official text editor of the GNOME desktop environment` `gedit-common - official text editor of the GNOME desktop environment (support files)` `$ sudo apt-get install gedit gedit-plugins gedit-common` And then fired it up and configured the File Browser Pane and Indent Lines plugins. It's all I need.
I use PhpED.
Started with aptana, switched to Komodo Edit 'coz aptana was to sluggish, now use Netbeans because overall, it seems to have the best set of features.
EditPlus.
I've always used TextPad with the PHP document class installed. Tried others but keep going back to TextPad. 
I started using Netbeans because it has built-in FTP. The FTP extension is not quite the same as DW, but it's still adequate for live development (shhh, you didn't read that).
ditto 
I started like that, I have way too much to learn already as to be spending weeks on the manuals however with time I've been learning small bits and improving my usage. the key is to not let small annoyances to pass by, if there's something that could be done better find out! you'll learn something new everyday without pushing yourself to it.
Started off using eclipse but switched to netbeans because it had everything I needed (in the PHP package) without having to hunt down and install additional modules - integration with subversion, php debugger, javascript debugger, syntax checking. The new version will have integrated phpunit also.
Interestingly, my answer is the same for every language I use: Eclipse + whatever plugin I can google for it. 
I used Zend Studio until version 4 when something just *horrible* happened to the usability and bloat factor. I used Eclipse + PDT or Eclipse + Aptana for 3 years, and just recently switched to Netbeans since its so simple.
Eclipse with PDT (PHP Development Tools)
I couldn't survive without the Unix shell; it's just too useful when trying to do something, especially cross-platform. And I'm only complaining about Macs because I'm still unfamiliar with the environment, and it can be frustrating at times.
emacs
I love vim for when I need to edit remote files. I'm not really fond of it when I'm editing files locally. But Vim is absolutely amazing otherwise.
I just started to use it mainly for the Adobe air features, then ended up using it for the rest of my development work. Maybe it's just me, but it gets confused when mixing html and php. Sometimes letters will be the incorrect color.
[Buffer Explorer](http://vim.sourceforge.net/scripts/script.php?script_id=42) [NERDTree](http://www.vim.org/scripts/script.php?script_id=1658) [HTML Auto Close Tag](http://www.vim.org/scripts/script.php?script_id=2591) [Desert Colour Theme](http://www.vim.org/scripts/script.php?script_id=105) Are all essential for me.
Ah! Just remember... underneath it all, the environment is still just unix. You can manage everything in the system from the shell. And if you really want to start taking advantage of what the GUI can do for you... google "merlin mann quicksilver" and watch his screencasts. Changed the way I use computers.
what's the difference?
IDE? What is there to integrate with? A browser?
I have used Emacs for the last ca. 3 years. Before that, I used Textpad, but development of it has stalled. Since I had used Textpad for a long time, I had grown accustomed to its way of moving the cursor around etc., and so I wrote an extension for Emacs to emulate this, which I'm still using. [I have a bunch of other customisations in addition to that](http://github.com/troelskn/troelskn-emacs/tree/master). That's the really cool thing about Emacs; You can easily extend it in all directions, and there are tons of extensions available to pick from (The same can be said about vim). Emacs has modes that integrate remote editing, version control and various flavours of auto-completion.
I like having something like Aptana. It's nice to take a break from terminal.
I've been using vim as my notepad replacement, but I find I keep going back to my IDE of choice (PhpED) when working on large web development projects. The main features that keep bringing me back are the workspace/project file tree, the ability to find and replace in all files in a selected project (even if the files are not yet opened), and the save local file and upload to FTP command (ctrl+shift+s in PhpED). I'm sure there are equivalent plugins out there, I just haven't mustered up enough motivation to search for them yet.
F3 with Eclipse == win. (it takes you to the definition of whatever you have selected. So simple, and such a time saver.)
Can NetBeans edit files on a remote server via SFTP yet?
He asked for real world PHP Developers.
Can i have it?? 
gedit
Stone tablet and a chisel, syntax highlighting is for wimps.
kdevelop
Dreamweaver, no design mode allowed. I manage about 200 websites at work, and the Dreamweaver site management, though not perfect, is the best solution for me that I've found. Using things like Notepad++, TextPad, Vim, or any other straight up text editors is really tedious and time consuming when you are in a real-world development situation with actual deadlines, and clients that are relying on you to deliver. Honestly, VI/emacs/pico/etc for web development is just tedious - the learning curve is also absurd. I understand the benefits and applications of these programs, if you can get over the curve, but listen, I am running an OS with a GUI. I have a mouse. I'm gonna utilize both. I've got my flame retardant vest on, hit me vim fanatics. Dreamweaver also can show you the argument order of standard php functions, when you type the function name and the opening parenthesis, the function argument order shows up as a tooltip. Do any other IDEs do this? (Honest question, actually curious.) Dreamweaver also has excellent keyboard shortcut support. I tried and liked Coda from Panic! software but the lack of keyboard shortcuts turned me back to Dreamweaver. Pros: Syntax Highlighting, Lots of helpful tooltips for PHP/SQL/JS/Etc, customizable keyboard shortcuts, easy place to store code snippets and notes, integrated FTP is the best I've seen in any IDE, looks good on a resume for some reason (even though I use it as a text editor with ftp) Cons: Same bugs persisting since version 8, Adobe's restrictive pricing, you will be made fun of by vim fanboys, no linux version, design mode has given it a bad name
Komodo Edit
I can't believe that I'm one of the few that uses Notepad++.
vim
I though Aptana was a load testing plugin for eclipse. You can write code with it?
Ever tried Coda?
EmEditor - it's a very basic text editor with decent syntax highlighting.
I'm a Komodo guy, but all this talk about NetBeans is making me try it out. I'll report back with my thoughts. Edit: Spent 10 minutes with it. Downloaded a Textmate theme and I'm very impressed so far.
Dreamweaver 8, from back when it was still in Macromedia's hands. Dreamweaver releases since then have been shit, Adobe added a few features nobody uses and made everything 9000x slower and increased the footprint tenfold. Because that's what Adobe do.
another vote for Notepad++
hmm not sure if there's plugin replacements but you can certainly replace most of that with simple shell scripting :) also check NERDtree never used it myself but I've heard it being recommended several times.
hmmm yes, a long time ago when I used kate I had a similar problem, have you tried [sshfs](http://fuse.sourceforge.net/sshfs.html)? it kinda solved that at the time (but don't forget to turn on autosave, sshfs is a bit troublesome with unstable connections)
Notepad++
Gedit + some plugins: * Embedded Terminal (usually for subversion) * File Browser Pane * Find In Files (this one can be pretty buggy) * Session Saver 
Numbered backwards because I found it easier to think of it like a string or array.
hmm, in-file search and replace in VIM: %s/old/new/g for multiple files, find em with grep, pipe it to a simple sed search/replace regular expression, and write it back out vim rocks my face off
Excellent, I thought I was the only one!!! Been using EditPlus for years and love it. Opens in under a second, syntax highlighting for PHP, CSS, JS, HTML, easy file navigation - I've never needed anything else. (Doesn't work great for MVC however, but I do very little MVC dev in PHP) EDIT: and the .acp file for EditPlus can be found online that enables auto-completion and function references.
Cygwin works nicely for me in the lab, where I need a number of Windows-only applications. You have to spend some time getting all the packages you need installed, but once that's settled, you get a lot of the functionality back.
Same here. Vim when at the console.
Eclipse 3.3 PDT and Gedit.
Seems a little too simple to be on reddit. It's just a simple call to file_get_contents(). Also cURL is much faster.
phpDesigner 2008. I simply cannot find anything comparable to its project management system (specifically: 'virtual' folders and filtering files and directories (exclude *.jpg, etc)). Dreamweaver has it's 'sites' system, but it's not the same.
Give phpDesigner 2008 a shot, I guarantee you won't look back.
I've never heard of it. Does it come with your recommendation? 
Yeah totally. It's basically Textmate with Transmit built in. It does svn, sftp, shell, etc. I'm a python dev and will not use anything else now. The plugin abilities are awesome. You can even use most of your current Textmate plugins.
In abstract: Even if a thing is making me money, it does not mean that it's not annoying at times. In practice: Shoveling dirt makes me money, yet it's annoying at times.
Smultron is terrible. It does not detect when other programs change open files. So if you combine it with any source control software, code will go missing. A colleague used Smultron on a project and terrible things happened. He would update, overwrite the updated files and happily commit them to the repository. It took a few days to figure out what was going on.
Zend Studio for Eclipse. Best IDE out there.
And the debugger - how the hell anyone debugs anything remotely complex in vim is beyond me. Take Zend Framework DB how could you find bugs in it without a debugger stepping though it? I always think people who use vim are not coding anything complicated. How can they?
me too
Yes, I live in emacs. :)
netbeans
I previously worked on a code base of ~12kloc almost solely written in vim. You can step through PHP in vim if you need to ([vim debugger](http://tech.blog.box.net/2007/06/20/how-to-debug-php-with-vim-and-xdebug-on-linux/)), but honestly it was rare when unit tests, logging, or just echoing didn't get the job done. Do you think Linux, gcc, vim itself, or other gigantic open source projects are written in an IDE?
Seconded. My trial is up soon, and unfortunately I don't have $400 to shell out for a license this month. I used to be one of those "all you need is Sumultron/Notepad/etc." kinda programmers. I was never happy with any of the IDEs I tried. I'm really liking Zend Studio, although I have to wonder how much of that is due to it being built on Eclipse, which I pretty much lived in when I was a Java developer.
Coda
Which apps, if you don't mind my asking? As a web developer, I need to check all of the IE browsers, but I find it much better to work on a mac with my unix shell and wonderful gui and quicksilver and user parallels to open three instances of windows (one each for ie6, 7, and 8) which remain "paused" until needed. Between parallels and crossover/wine, I just don't see the need for using a windows machine anymore.
Another vote for TextMate. The wide array of bundles available plus the ability to write my own bundles is just incredible. I've saved so much of my own time by being able to extend the program myself (I'm pretty sure that BBEdit can be as easily extended, as can Emacs, but I've got my time and mindshare invested in TextMate). Add in xdebug &amp; MacGDBp for debugging and I'm golden. SVN is all done via the command line since we're on SVN 1.6 which no application out there works well with yet. I'll actually downvote Coda. While it looks nice its SVN integration blows. They use different terminology and break OS X's keychain storage of SVN passwords. So if you even let coda check server status via SVN you lose the stored password on the command line and have to re-enter it. I do keep it, however, for the rare occasion that I need to do collaborative editing or need to do complex editing directly on the server (quick changes are done in VIM).
Vim. Because everything your editor can do, Vim can do, and it's base incarnation is available on nearly every *nix system in the world.
I am pretty sure all of those projects use a debugger of some sort. Whether it is in an IDE or not is not my issue. I had no idea you could use vim and a PHP debugger.
Joe Because I'm Worth It
&gt;and have no idea how to use buffers as such. :e to edit a file. :ls to see what buffers are open. Easy to remember since it's like unix commans `ls`. :b# to switch to a buffer in the :ls list where # is a number. Try it now and add the commands in your .vimrc as a note like: " Edit: :e " List open buffers: :ls " Switch to open buffer :b Generic tip: keep a text file with useful tips and commands that you only use once in a while so you can remember it more easily. This applies to vim commands as well as specific sed regexes you might use later.
Hence the "close second." It's pretty, but the command line capabilities were weak and it didn't handle shared projects as well as TextMate.
If you pay a lil' for it. Even like 20% of original price would be good.
I used to like Zend Studio before they merged with Eclipse. Now, I can't stand it. Same goes for pretty much every Java powered PHP IDE. I just find them too heavy and too slow. My choice is Komodo IDE by ActiveState. It's in XUL (basically running Firefox), has addons just like Firefox and is overall pretty nice. There are some things that aren't to my liking, but as far as IDEs go, it's the best I found. Oh, and I'm running Linux if you hadn't guessed.
I've never actually used a debugger for php, I've been trying to write unit tests more. I tend to write php in a somewhat functional manner and avoid using global values as much as possible and just pass the value to the function. If a function fails it will return false.
Wordpress
Several in-lab developed graphics and computational packages (sorry, academic lab, and projects that aren't released to the public yet). We have several machines with the applications installed, and we didn't purchase an Apple Tower...we've got some big honkin' Dells or something. I don't doubt that they'd work in Parallels, but it isn't worth our time to install a windows VM if all the work basically has to happen within the VM anyway, not just occasional use.
Which part?
http://us.php.net/manual/en/function.curl-setopt.php
i see what you mean but generally if you want to get that detailed with socket requests using fopen is a bad idea... fopen was designed to be a general function to open a path as a handle... if they were to provide the ability to pass things like this to the function it would no longer be generic and could actually cause security problems which i wont dive into... it is just a hacky way to do it if you MUST use fopen to do an http request... in my opinion fopen should only be used for file i/o and php.net/sockets should be used for anything networking related (and you should probably use curl if you want to do http requests)
This is fantastic news. PHP-FPM is by far the best way to serve PHP fast. Unfortunately it's been used by a few because it's not been exactly easy to install. This may be the first step to PHP-FPM becoming more popular.
exactly. everyone was saying that it has to be part of PHP for at least 2 years now. I hope it really will happen this time
Komodo
I love EditPlus so much, I actually purchased it.
perhaps you haven't read Linus Torvalds infamous rant about debuggers: http://linuxmafia.com/faq/Kernel/linus-im-a-bastard-speech.html So no, not all of those projects use a debugger; unless you consider the developer a debugger ;)
Likewise, back in 2001...
Can we kill it with fire yet? *edit: Hmm. Alright, so I should probably check the subreddits I'm in before calling for the annihilation of a particular programming language. Still, your downmods only make my resolve harder. Or something like that. 
I'm on 5.2.8.
 Chihuahua Object ( [_bark:protected] =&gt; Yip yip ) on 5.2.6 
I would hope that it wouldn't set a private member of the inherited class, I don't see the problem... It's seems people like to complain about php's automatic behavior, personally I find it great as it means less coding for me, and it''s really not that difficult to understand.
I'm pretty sure he pasted the fixed version of the class. If it takes you an hour to figure out something like that, there is something wrong. At the first sign of irregularity, I immediately print_r the object.
This is a ridiculous post. That code that you post works exactly as expected, but then you go on to say that because you made some mistake in your code, (which you don't really explain), you got some "unexpected behaviour". The behaviour that you describe is not unexpected behaviour. It might be in Perl, but in PHP it's exactly what you'd expect. You should read http://au2.php.net/manual/en/language.oop5.overloading.php to get a better understanding of it all.
been there, seen that. Always interesting moving PHP4 code to PHP5, looking at all those class variables that start with a $_ and foolishly assume they are private and find out they were designed to be protected.
*I would hope that it wouldn't set a private member of the inherited class,* Right, it shouldn't. However, PHP should also give an error saying that I'm trying to do so.
*in PHP it's exactly what you'd expect.* Adding to the list of reasons why I don't like PHP. What I expect is that if I try to modify a private member, PHP will tell me that I've done something wrong.
You can't blame php for not behaving how you would like it too. Personally I like the ability to set variables without them being declared first.
*You can't blame php for not behaving how you would like it to.* Yes, I can, and I often do. I want my programming tools to help me identifying problems that I have caused, not sweep them under the rug as PHP has done in this case.
No, the underscores had nothing to do with the problem. That's just a convention. The problem is that PHP didn't tell me that I was trying to modify a protected member.
It's not a problem, its a language feature. It's not pphs fault you declared the value as private instead of protected. The same thing would of happened if you declared a function as private instead of protected. Would you want php to bitch that your class has a function with the same name as a private function in its parent class? I sure as hell wouldn't.
*It's not pphs fault you declared the value as private instead of protected.* Of course it's not PHP's fault. However, I'm disappointed that PHP didn't see fit to tell me about the problem. It's long seemed that PHP's design decisions are aimed at getting code out at soon as possible, rather than focusing on long-term programmer costs.
Protected variables in PHP can be modified by classes that extend them; Private variables cannot be modified by classes that extend them. PHP thinks about private variables in an odd way. The following output from print_r might give a better idea as to what's going on. Note that I changed protected back to private in your code. Chihuahua Object ( [_bark:Dog:private] =&gt; Generic woof [_bark] =&gt; Yip yip )
PHP doesn't see fit to tell you because there is no problem to tell you about... I set values like your example all the time knowing that php behaves the way it does. The thing with php is it gives you a lot of freedom. If you don't know how to properly manage that freedom, you end up with problems. If you do, its a great language to program in.
Yes, I understand what it does, and I think it's the Wrong Thing To Do.
PHP is the new ASP. Python is the new black
The reply is outstanding though - http://perlbuzz.com/2009/06/phps-overly-compliant-subclassing.html#comment-11250
In the comments: &gt; As far as PHP is concerned, an attribute that is private has 0 visibility to inheriting classes, that is, it doesn't exist at all. And yet, print_r() exposes absolutely everything - private, protected, whatever, as does serialize().
I assumed he meant how *monk_e_boy* interpreted the underscores in order to port the code, rather than how PHP sees it.
But PHP doesn't know that you are trying to modify a private member. It's not psychic. Maybe your IDE could suggest that maybe you are trying to modify a private member, but PHP should not. One of the reasons we use private is so that we can be sure that subclasses are not affected by changes. Now how can I go and create a new private variable in my library class if I can't be sure whether or not any of my consumers are using that variable themselves. Surely you aren't suggesting that if I update to a new version of some library class, that my subclass should start throwing errors because the parent class introduced a new private variable? It seems to me that what you don't like is that you can create undeclared member variables just by using them. Well whether that is a bug or a feature depends on who you talk to, but it is perfectly clear if you read the documentation that this is what PHP does ... which is why I provided a link to the documentation in the first place. For a perl guy to be complaining about something like this is surprising. It wouldn't be hard to find something similar to complain about in perl. "Oh I forgot to pass an argument to print and instead of giving me an error it just printed the default variable." Maybe you're actually a java guy at heart ;)
your typo here (protected instead of private) doesn't help :D
*It seems to me that what you don't like is that you can create undeclared member variables just by using them.* Yes, that's what I posted in the original article. Yes, I understand that it's documented, but that violates (for me) the law of least surprise. *It wouldn't be hard to find something similar to complain about in perl.* Except that Perl doesn't pretend to hide things for me. :-) When I saw the protected/private when reading the class docs, I figured "OK, if PHP provides this feature, I'll use it." *Maybe you're actually a java guy at heart ;)* No, but if PHP is going to use Java-like private and protected, I assumed that it would have Java-like semantics.
 class Dog { protected $_bark; *snip* $ php foo.php Generic woof Generic woof Chihuahua Object ( [_bark:private] =&gt; Generic woof [_bark] =&gt; Yip yip ) Not the same **foo.php** you got there. What this article demonstrates, is the difference in visibility between *private* and *protected*.
True. If you want http-level control, you really should be using curl.
I can understand that you might not like what PHP does, and that it violates the law of least surprise. Well really, it's only surprising if you don't expect it. Every language is different and behaves differently, so if you are used to one language then where another language behaves differently, it will of course surprise. I don't see how PHP is pretending to hide something... and I don't see how this issue is anything to do with protected/private. The issue is solely about creating undeclared member variables. Some people like it, some people don't. Regardless, it's a feature of the language. And just because PHP shares a couple of keywords with Java, doesn't mean that PHP should take everything from Java, else it would just be Java. What do you think about assignment in conditions? It can be perfectly valid code, e.g. while ($row = $db-&gt;fetchRow()) ), but can also be a common bug where someone has used = instead of ==, e.g. if ($foo = $bar) rather than if ($foo == $bar)). Do you think PHP should throw an error when someone uses assignment in condition, because it could possibly be a bug? I don't think you do ... but then if someone posted up a blog post saying they had made this error and PHP didn't tell them ... well I'd put that post in a similar category to yours. Or, going back to my perl example. If for some reason I had a spurious semicolon in my code and I had print; 3+5; (for example), and it output the default variable, would I not have cause to complain? Even more so than the PHP example that you have, is it not CLEAR that this is a bug, a coding error? And yet perl will say nothing. To a PHP programmer, this would violate the law of least surprise.
i use cake http://stackoverflow.com/questions/548923/cakephp-vs-codeigniter
Considering fopen() uses cURL to grab the remote page, yeah you should defiantly be using it directly if you want more control over how its requested.
This isn't C not everything has to be done the long way. cURL is much easier then sockets, isn't that the point of using PHP (to be lazy)? What happens when you want to grab an SSL page and you're using sockets? Could become a lot of unnecessary work. I would imagine more PHP installs have cURL then sockets anyway.
notepad for windows nano for linux 
ASM uses goto why can't PHP?
irc://irc.freenode.net/php
I don't get template engines... why not just use php as your php template engine. function include_template($name, array $data = null) { include("path/to/templates/" . $name . ".php"); } The php file already supports if statements and the like, and you fill in variables based on the key value pair of the data array if any...
I like to keep my HTML out of my PHP. http://alexeyrybak.com/blitz/lebowski-bench-big.gif Blitz also claims to be faster than the include method :)
How the... It has to be including files somewhere. How many files were being included during the test? I find it hard to believe that a **reasonable** number of include templates is slower than a template engine.
If you don't believe it, do a test of your own: http://php.net/microtime
&gt; I like to keep my HTML out of my PHP. Yeah because {{ IF list }} &lt;table&gt; {{ BEGIN list }} &lt;tr&gt;&lt;td&gt;{{ $some }}&lt;/td&gt;&lt;/tr&gt; {{ END }} &lt;/table&gt; {{ END }} Is really any different from &lt;?php if ($data["list"]) { ?&gt; &lt;table&gt; &lt;?php foreach($data["list"] as $value) { ?&gt; &lt;tr&gt;&lt;td&gt;&lt;?php echo $value ?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;?php } ?&gt; &lt;/table&gt; &lt;?php } ?&gt;
If it's the actual including of files that slow it down, you could put all templates inside functions in one file, or group similar templates accross a few files and then just use call\_user\_func using the name and pass that data array. function include_template($name, array $data = null) { include_once("templates.php"); return call_user_func("prefix_template_" . $name, $data); }
Oh but it is, one is faster ;)
If you say so...
I can do you one better: &lt;?php ?&gt; &lt;? if ($data['list']): ?&gt; &lt;table&gt; &lt;? foreach($data['list'] as $value): ?&gt; &lt;tr&gt;&lt;td&gt;&lt;?= $value ?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;? endforeach; ?&gt; &lt;/table&gt; &lt;? endif; ?&gt; It's called PHP Alternative Syntax. Also, I've yet to work with a webhost that didn't support short tags like &lt;? instead of &lt;?php.
A friend turned me on to [CCAPS](http://en.wikibooks.org/wiki/CCAPS). It's super fast and super flexible.
I know of the short way, but php.net recommends not to use it. http://ca3.php.net/manual/en/language.basic-syntax.phpmode.php *Note: Using short tags should be avoided when developing applications or libraries that are meant for redistribution, or deployment on PHP servers which are not under your control, because short tags may not be supported on the target server. For portable, redistributable code, be sure not to use short tags.*
I read about that in your link to CCAPS and don't mind the syntax but I hate the idea of doing includes for templates for some reason.
I don't fault you for your point, but screw that. That's bogus and someone needs to edit that comment. I mean, what moron at php.net thinks we should have longer template files and have more typing? It's illogical. And I've yet to find a web host that didn't have this. And even if they did have this, it's an easy thing to override with an .htaccess file and a `php_value short_open_tags 1` line inside.
True, and if for some reason it did become a problem, it would be trivial to run a find and replace on it.
I'd be interested to hear your reasons. I mean, to me, it seems very efficient. Plus, it gets compiled into bytecode and runs much faster that way.
umm, did you miss the part where i said "and you should probably use curl if you want to do http requests"?
And again on every upgrade? No way. It should just run as distributed.
Nah, it's just for silly sites, like facebook and digg. And there's some obscure highschool project, Wikipedia or something.
Textmate
I'm so happy that other people are anti-template engine too!
I like to keep more than the most rudimentary of logic outside of HTML templates. Your example would be in, but just about anything beyond it would be right out. Using PHP as a template language allows for too much mixing of logic and presentation for my tastes. The really basic template functionality we currently use (replace ${foo} with $template_variables['foo'], ${bar.sub} with $template_variables['bar']['sub']) is also easily implemented in perl or C++ or any other languages if necessary. Of course, that was home grown, nothing as fancy as Smarty.
This has been a surprisingly popular post on my blog, so I figured I'd go ahead and share it. :) Part II focuses on tuning it which I'll submit a bit later.
Wrong subreddit. Post to `/r/wtf` or `/r/funny`.
Great read man. You should do a article on memcashed and how to use it with php.
These would all result in seriously negligible speed increases.
okay and u r point
I believe the reason for it was because `&lt;?xml` tags interrupted with the parser if `short_open_tags` is on. I also prefer the `&lt;?=` echo alias but it does make sense for this. If I were developing an app I would be hosting I'd use this anyway.
True, I only think the single/double quote issue (which I appreciate has been done to death) is only visible with large strings. The first and last two points are just good coding style anyway.
Jesus Christ! One thing is when some script kiddie makes claims about "performance", but why on earth are Google endorsing this FUD? &gt; In the following example, imagine if a malicious user had inserted 512KB worth of characters into a textarea field. This would result in 1MB of memory being used! Wrong. PHP has copy on write. &gt; On regular strings which contain no variables, that can result in poor performance. It's better to use concatenation than double-quoted strings. The difference is absolutely insignificant. Don't clutter your code for no valid reason. &gt; Use echo to print See above. &gt; Don't use concatenation with echo. See above. &gt; Use switch/case instead of if/else. Or better yet. Stop an refactor your code, because clearly you could solve this with some sort of polymorphism. (Perhaps just with a hashmap)
how does memcached differ from xcache?
Its seems like someone comes up with a silly list like this every so often. I'm surprised at seeing it from Google though surely they have some experience scaling sites.
I wrote a little test suite to verify these claims: http://pastebin.com/d5cce6193 Here are the results on my machine: PHP 5.2.8 (cli) (built: Feb 5 2009 21:21:13) Copyright (c) 1997-2008 The PHP Group Zend Engine v2.2.0, Copyright (c) 1998-2008 Zend Technologies Don't copy variables for no reason (BAD) Before: 602624 bytes, After: 603080 bytes, Delta: 456 bytes Don't copy variables for no reason (GOOD) Before: 603488 bytes, After: 603488 bytes, Delta: 0 bytes Use single-quotes for strings (BAD) Start: 1245930529.6828, End: 1245930529.7091, Delta: 26.21 ms Use single-quotes for strings (GOOD) Start: 1245930529.7093, End: 1245930529.7352, Delta: 25.98 ms Don't use concatenation with echo (BAD) Start: 1245930529.7353, End: 1245930529.8010, Delta: 65.74 ms Don't use concatenation with echo (GOOD) Start: 1245930529.8010, End: 1245930529.9381, Delta: 137.00 ms (^^ in this case the 'good' example is **twice slower**) Use switch/case instead of if/else (BAD) Start: 1245930529.9381, End: 1245930529.9664, Delta: 28.30 ms Use switch/case instead of if/else (GOOD) Start: 1245930529.9665, End: 1245930529.9945, Delta: 28.10 ms Done!
negligible speed increases with a few users, but millions? come on. -edit- -2? someone is seriously ignorant. what is a negligible speed increase for a few dozen users really makes a huge difference when scaling up.
Exactly. Spending a little time in a profiler will very quickly show you simple ways to increase your performance on a couple of orders of magnitude more than worrying about only ever using single quotes. Some things that spring to mind include duplicate filesystem access, lots of calls to time(), lots of individual database calls instead of one or two larger ones, retrieving unnecessary data from the database, using unqualified paths for include()/require(), using include_once()/require_once(), using an opcode cache. Rasmus's DrupalCon 2008 talk has some solid information about improving the performance of PHP scripts. http://talks.php.net/show/drupal08
http://www.phpbench.com/
[PHP team's response](http://groups.google.com/group/make-the-web-faster/browse_thread/thread/ddfbe82dd80408cc#)
Well thanks for actually having something insightful to say.
[Geany](http://geany.org). The Ctags PHP parser is crap, though (but that's not Geany's fault).
I've done research, but haven't tried it yet, but apparently Zend Framework's support is great. Kohana also has another great one. Cake probably has one, but I haven't looked into it.
XCache basically takes a snapshot of *only* the PHP code itself once it's compiled. Any references to that php file after that are given the pre-compiled version. memcached is a bit different though. If your application is built to take advantage of it (the key here), then you can store mysql results in "cloud" of memory that can be distributed across many servers. So, XCache itself is per server opcode caching. memcached would be more like mysql result caching that can be pushed over many machines. 
Can you elaborate? Looking at Kohana's forums, a search for "SOAP" returns 2 results, and neither show how to map soap objects into the framework. I'll check out Zend as the manual has some coverage of using it as a SOAP client. I guess my issue is that every tutorial assumes you are going to be building a database backed application, which isn't the case in a lot of enterprise applications.
I had to retrieve info from a hospital's website through a vpn and all that fun stuff, but I pretty much copied the sample code from this site and it worked. http://www.zfforums.com/zend-framework-components-13/web-web-services-22/returning-array-objects-2881.html
There may not be one dominating framework for PHP like there is for Ruby, but there are dozens of competing frameworks. Here's a [pretty good list](http://www.phpframeworks.com/). I've been using [CakePHP](http://cakephp.org/) for a while, and it's pretty easy to jump into. One of the early criticisms was that is was basically a RoR clone, so you may find it more familiar. I've heard good things about [Zend](http://www.zend.com/en/community/framework) and [Yii](http://www.yiiframework.com/), but it just really depends on what you're looking for.
[CakePHP](http://cakephp.org/) [Symfony](http://www.symfony-project.org/) [CodeIgniter](http://codeigniter.com/) ...all great frameworks.
One of the arguments I have about using frameworks is that it increases the processing time of pages. If you're a competent developer then it may be better to build your own framework from scratch. I saw a video here (can't find it) of Rasmus Lerdorf performing some speed tests on various frameworks and he showed that using standard PHP without a framework is significantly faster than the best frameworks today. Here's an article from Rasmus himself about building a [no-framework PHP MVC framework](http://toys.lerdorf.com/archives/38-The-no-framework-PHP-MVC-framework.html) (I skimmed this really quickly but haven't fully read it yet). Link to justify my point: http://www.sitepoint.com/blogs/2008/08/29/rasmus-lerdorf-php-frameworks-think-again/
ah... very interesting. thanks for the xcache link. going to try it out.
YW. Glad to help out. :) fwiw check out the second article on the blog about tuning it. Too many people just install xcache and "call it good". You truly have to spend a little bit of time getting it setup right, but when you do, it's awesome.
frameworks will help you get started for sure, hacking around in open source projects would help as well. cakePHP and laconica have been two interesting projects I've played with in the the last year and learnt a lot from both. Laconica especially.
There are enough libraries that it's pretty easy to take a templating system (savant or smarty), an ORM layer (although personally I like to write my own, better libs should be available with php 5.3), and write a custom controller class and bootstrap routine to wire it all together. This is my preferred approach, since I can keep unneeded clutter to a minimum and it gives a lot of flexibility. I am running a large-ish project on symfony, and like it the best out of the frameworks that I've tried (Zend is probably worth a look also). I've done projects with CodeIgniter and CakePHP and would not use them again, mostly due to issues I had with the Model layer (although CI wouldn't be too bad for small/medium sized projects). Don't ignore the [PEAR](http://pear.php.net/) libraries either. There is definitely existing libs there for validation, forms, templating, etc.
definitely will do (read second article as well). have you heard about [caos linux](http://www.caoslinux.org/about.html)? &gt;Because CAOS focuses on High-Performance Computing, we have the benefit of tuning our system at a massive scale. Small incremental performance regressions may not seem like much or even be noticeable on a single machine, but when run at a large scale with tightly coupled parallel processing jobs, those slight regressions collimate into a very noticeable performance drop. Since our target development is for HPC and performance for systems of large scale, we exercise extreme care in the prevention and elimination of such performance regressions.
++ for CakePHP. I tried CodeIgniter but i went back to Cake for all the automagic stuff. Less code &amp; more fun.
php is probably using the wrong sendmail binary to send email depending on the system you may either have to symlink the sendmail php is using to the right one for postfix or configure your mailer preferences in /etc, or point php to the right binary in php.ini each mail system's sendmail binary drops it into the queue for that mail system. the wrong binary would mean it's adding it to the default Sendmail queue.. and Sendmail isn't running. good luck
apt-get install php5 postfix &lt;?php mail("you@example.com","test","test"); ?&gt; If you're on a consumer ISP, you'll have to relay the email through their servers using authentication like [this](http://blog.taragana.com/index.php/archive/how-to-setup-postfix-to-relay-outbound-mail-using-sasl/). Fuckin noob. 
The good thing about PHP is that there are a couple dozen or more competing frameworks, each learning from each other and getting better every day with each release. The bad thing about PHP is that there a couple dozen or more competing frameworks, each learning from each other and getting better every day with each release. Get my drift? Ruby guys love the lack of choice I guess. I like more choice because that means neater ideas can come to the forefront. For instance, in CodeIgniter, I love the way they do URLs. By default, unless you override, the URLs are: http://domain.com/domain-object/task/optional-arg1/optional-arg2/... ...where domain-object is like an OOP Domain Object (Users, Employers, Widgets, etc.), task is a task for the Domain Object (NewEmployer, UpdateWidget, DeleteUser), and the args afterwards are a long list of whatever you want to pass to the task. And so then this translates to, for example, a physical path of controllers/Users/DeleteUser.php and then args are passed to DeleteUser.php. So, all you have to do is create that folder path, and the URL automatically works. Eventually I think all this will shake out with committees and standards, and I think then things will start to solidify such that many of the MVC frameworks will have similar things about them. Now, as for PHP -- if you really want to get serious with it, you absolutely must use a framework in my opinion. I like staying on the lean side and using my own custom MVC framework, borrowing bits from the various frameworks.
Look at the front page of [kohanaphp.com](http://kohanaphp.com/), and it gives you the answer. Mostly it's about being a little leaner, a little faster, and using PHP5 instead of PHP4. ZF is just too slow, requires too many hoops to get something going, and has the oddest object model for me.
I like MVC, but I tell you, there's one thing I have trouble with, and that's the "models" part. I mean, when I'm on a deadline, my mind doesn't have time to think of the "models" part. I tend to focus on the views, then the URL routes, then the controllers, and I usually make "fat" page controllers, breaking an MVC rule there, because I can't figure out yet what would make sense to refactor into the models for code optimization. But even when I do have the time in a phase 2 or 3 to come back and refactor -- to move repetitive code into the models -- I then have another problem. And that problem is that when working through debug or coding a new page -- I'm having to not just look in the views and controllers folder, but also look in the models folder as well. And so yeah, your code is beautiful and all when you have lean page controllers and fattish models, but it's often a tough road to get to when you're faced with deadlines. So, I've all but given up on the models part. Instead, I wait on the models part until a phase 2 or 3, and make the case that before we go adding too many more features, we really need to add in like one to two weeks of refactoring time to fatten those models, even if it's painful, because it makes sense in the long run for the course of the website.
I have now. =P Interesting, I've got a new toy to tinker with now, thank you very much. =)
Using CakePHP and this guys SOAP datasource ( http://github.com/Pagebakers/soapsource/tree/master ) you should be able to do just that.
Whenever I have to do php, I'll always go CakePHP. Since learning curve is better for people from Rails. 
&gt;using standard PHP without a framework is significantly faster than the best frameworks today Using plain HTML is faster than using PHP. Frameworks were created to cut the **development time**. Writing thousands of forms and code to handle those forms may be interesting to others, but it's a huge bore to most. Personally, my biggest concern with frameworks, is that you'll improve as a programmer, but a lot of what you learn may be specific to that framework.
Trust me, I hate forms as much as the next guy ([which is why I'm writing a free form designer](http://www.opencodeproject.com/formdesign/) using JQuery of all things). Frameworks are nice for quick development, but if you want a fast website then using no framework might be better. It all depends on the situation though. Personally, I've never used a framework since it would require me to learn another programming layer on top of the original, but I do have some experience with Smarty and others.
vw... setting up some VMs to try it out... let's see, how about an xcaching cluster? hehe
Before jumping into a framework, check out this book: [Learning PHP &amp; MySQL](http://www.amazon.com/Learning-PHP-MySQL-Michele-Davis/dp/0596101104/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1246016504&amp;sr=8-1) Once you understand the basics, I would highly recommend using [CodeIgniter](http://codeigniter.com/)
 &lt;?php ... start here ... ?&gt;
I concur. We use CodeIgniter for our internal framework at work, and it rocks.
CodeIgniter is definitely the way to go. The only real downside is that it's written to work with PHP 4 so it doesn't use all of that fun PHP 5 stuff internally. The documentation is by far the best of any PHP framework.
As a Rails developer you might feel the most comfortable with either the [Akelos Framework](http://www.akelos.org/), [CakePHP](http://cakephp.org/), or potentially [Symfony](http://www.symfony-project.org/). Akelos is a straight-up port of Rails, CakePHP started out as a Rails port but quickly became a "Rails-Inspired, More 'PHP' Way Of Thinking," and Symfony has great command line utilities though significantly less Rails like than the others mentioned. If you really want to dive into PHP then check out Zend or Code Igniter. Other than that hit up #phpc on Freenode for community fun (thooough not really your technical questions) and read [PHPDeveloper](http://phpdeveloper.org).
Yes I completely agree.. Frameworks are the way to go these days. I also like your approach to picking your preferred features out of frameworks. You are totally right about the lack of choice with Ruby.. There are other competing frameworks but one large one and it seems there is a huge feud between each.
It seems that CakePHP is will cater to my rails familiarness but CodeIgniter has the complete documentation. I will check out both and the book, thank you for your time!
Well I'll be -- it's finally come to Ruby. Didn't know that. Well, the different framework choices for Ruby, just like with PHP, will help the language grow because everyone will be using different frameworks and eventually in a decade or so groups of framework guys will get together to develop standards, and from that we will see only the frameworks supporting those standards will survive. I'm also now starting to see PHP jobs sing a different tune. Whereas before about 50% of them wanted you to know a framework, and the only thing around was Zend. They are now taking offers on Symfony and Cake, or saying they'll take anyone who understands MVC and has used an MVC-based framework. Haven't seen a lot of CodeIgniter or Kohana yet unless I swing from jobs and into freelance projects. If I look solely at projects, I see a big split between Zend and CI on what is being asked for, and not so much Symfony and Cake. I think if there were a standards committee that formed out of the PHP frameworks, the specifications would be: - pretty URLs, ala CI style because I think it's the most logical, so yes, support that, but can support others - must support MVC - must support PHP5 OOP or better (to account for the future) - must support a wrapper for PDO or better (to account for the future) - must support an ActiveRecord implementation - must support at least PHP Alternative Syntax style views, if not support other views as well - must support abstraction libraries for cookie management, encryption, sessions, authentication, timezones, calendars, dates, pagination, email, errors, uploads, downloads, cache, validation/filtering, captcha, config read/write, and plugins.
All the tedious writing when using PDO objects were frustrating me, so I went looking for a simple ORM frameworks, I spent alot of time going through different frameworks, and in the end I settled on doctrine. It seems to give the most bang for the buck (lowest learning curve). The others were just too big and complex. 
I've been using this for a year now.
is there any advantages to use stdclass objects rather than arrays for hash-tag-like data structures?
I use them because 1) I think the syntax is cleaner and 2) I can use json_encode() to write it and then use it as an object in the javascript on the page.
Komodo Edit
cakePHP indeed. 
I did not know that you could do this! Suddenly all of my PHP code looks a lot less crap. :D
json_encode will encode associative arrays exactly the same way, so it makes no difference
Good for _you_! Why haven't you told us then?
Warning Google account required in order to see the post. See the post [here](http://pastie.org/525984) if you do not have an account.
With regards to the new article posted at &lt;http://code.google.com/ speed/articles/optimizing-php.html&gt;, all of the advice in it is completely incorrect. We at the PHP team would like to offer some thoughts aimed at debunking these claims, which the author has clearly not verified. **1) "Don't copy variables for no reason".** The Zend Engine at the core of PHP 4 and 5 uses a technique known as "copy-on-write" memory management. This means that no matter how many times you assign the value of a variable to another variable, the data is not copied until you change it. The example the author gives results in absolutely no significant use of extra memory, as shown in the following example: &lt;?php $data = str_repeat("*", 512 * 1024); // synthesize 512K of data $memory_used_before = memory_get_usage(); $more_data = $data; $memory_used_after = memory_get_usage(); print "Before: {$memory_used_before}\nAfter: {$memory_used_after}\n"; ?&gt; PHP 5.3 with thread-safety and debugging compiled in: &gt; Before: 853968 &gt; After: 854236 PHP 5.2 without thread-safety or debugging: &gt; Before: 581912 &gt; After: 581976 A difference of 268 bytes in debugging mode, or 64 bytes in normal mode (which most people use). Hardly the MB of memory the article talks about. It should also be noted that a PHP script should NEVER echo or store the raw contents of any user-supplied variable without filtering it appropriately. **2) "Use single-quotes for strings."** Benchmarks run against PHP 5.2 and 5.3 show that parsing double-quoted strings with interpolation is no slower (and often faster) than single- quoted strings using concatenation. When simple strings with no variables in them are used, the performance is clearly better with double-quoted strings due to implementation details in the engine. See the benchmark posted at &lt;http://pastie.org/523023&gt;. **3) "Use echo to print."** Depending on the way PHP is set up on your host, echo can be slower than print in some cases. Given the example shown, they have equal performance. **4) "Don't use concatenation with echo."** This is exactly the opposite of correct advice. The engine handles multiple arguments to echo() in such a way that concatenation (or double-quoted string interpolation) is actually much faster. See the benchmark posted at &lt;http://pastie.org/523020&gt;. **5) "Use switch/case instead of if/else."** Finally, this piece of advice is total nonsense. The decision about when to use switch/case or if/else is purely a matter of coding style; their speeds are generally more or less equal except in certain special cases. Most of these points may have been true in ancient versions (PHP 3, or very early versions of PHP 4), but they are definitely untrue in modern PHP. The PHP team urges the author of the article to check his facts more carefully, and to investigate where his claims of extra speed are truly coming from (as certain coding patterns, combined with specific PHP settings, can sometimes make some of the above points partially true). We also urge the author to consider the troubling security implications of his examples, at least one of which suggests an extremely dangerous coding style. In the words of Alexander Songe, if you're really concerned about the speed of your PHP scripts, look into APC (Alternative PHP Cache, &lt;http://www.php.net/manual/en/book.apc.php&gt;) , "which benchmarks show increases speed 3-5 times over no opcode optimization". Please feel free to e-mail me at &lt;gwy...@php.net&gt; (since Google Groups seems to only want to allow me to use my Gmail address to be in the group) with questions. You can also join the php-general mailing list at &lt;http://www.php.net/mailing-lists.php&gt;, or speak to us on the EFNet IRC channel #php. 
pwned
In the google's team defense, some of those do apply to ancient versions of PHP, and that's the point the authors try to make in response to that post. But: - their very first advice is to upgrade to PHP 5, so it's easy to assume the rest of their advices is meant for PHP 5 users, in which case most of it is bogus. - some of their advice is horribly wrong, even on ancient PHP versions. Oh well. The advice of "don't do sql queries in a loop when you can do the same thing in a single query" is certainly true. Controlling output buffering can significantly improve the perceived performance of a page, and using caching can certainly reduce both the server load and overall performance, so it's not entirely junk. I fondly remember the horror I felt when I first realized that a default phpnuke install was doing 18 SQL queries on every load of their homepage. Then again, phpnuke has a richly deserved reputation for having a very high ratio of popularity/code quality. 
I'm glad someone said it. I was thinking throughout the video that they were wrong about some things (particularly memory management), but I was naively thinking, "Come on man, they're Google and you're just some schmo".
Glad to hear this. I initially thought all that advice was total BS after 4-5 working everyday w/ php and benchmarking all these things. Goes to show Google!=God
No. It's just a matter of personal preference.
I'm learning about PHP, and man references are fucked up. [From here](http://us.php.net/manual/en/language.references.php#87532): A little gotcha (be careful with references!): &lt;?php $arr = array('a'=&gt;'first', 'b'=&gt;'second', 'c'=&gt;'third'); foreach ($arr as &amp;$a); // do nothing. maybe? foreach ($arr as $a); // do nothing. maybe? print_r($arr); ?&gt; Output: Array ( [a] =&gt; first [b] =&gt; second [c] =&gt; second ) I mean, I understand _why_ this is true, but this is a clear example of where PHP's trying to "simplify" things by conflating references and values just does nothing but bite you in the ass. The logic behind when it copies and when it doesn't are also not well known at all. Also for a function to return a reference, it needs to be declared to be by reference _and_ the thing calling it must use =&amp;, which is also a little fucked.
How much do you pay for the box if you don't mind me asking?
&gt; Then again, phpnuke has a richly deserved reputation for having a very high ratio of popularity/code quality. I could almost say the same about Wordpress, although they've improved a bit over time. Evidence that your application's idea can be more important than the code sometimes :)
Probably the best framework is Zend Framework, even though it is so loosely coupled that it could be used as a library. Using it as a framework is the way to go though. CodeIgnitor feels like a baby version of zfw that does things grossly compared to zfw because of it's PHP 4 heritage. Zend is well documented, has a flourishing development community, is a project of php's parent company, and while it has a slightly steeper entry point than some others, using the documentation and once you get it down, you'll appreciate using it if you like using/writing OO code.
$80 CAD every 3 months, its 100mbit with 2TB a month limit. http://www.leaseweb.com/ http://www.hetzner.de/
*warning lies above* It is not basically TextMate with transmit built in—at all. It is a subpar editor with a crippled version of transmit built in.
TextMate
Dang, i wish i knew about this. Would have saved me some time
sounds like pavement vs sidewalk.
From the looks of it the Memcached is a newer extension, still in Beta. Memcache works with PHP 4.3 and up, while Memcached only works with php 5.2 and up. Memcached also seem to have a lot more in the way of built in functionality. So, my guess is that the Memcached is going to replace Memcache at some point, but that its not ready yet.
It's all right there in the manual. Btw, that's those funny looking walls of text. Uh, and click the links as well. They lead to pages with even more walls of text. http://www.php.net/manual/en/intro.memcache.php http://www.php.net/manual/en/intro.memcached.php And the next time you have a question instead of an insightful link. Why don't you go ask at a more appropriate place? http://stackoverflow.com/
yeah...I think so too....just wanted a nother opinion.
Those links don't answer the question at all, but way to be a jackass.
There are many such services http://24x.com/
Without being rude to the author, there's nothing particularly special about this - and there's quite a few elementary errors which will cause warnings to occur. Such as $param[msg] = "This is sample message."; Now I know some people don't care about warnings, but I don't like them, so you need to encapsulate all your keys in quotations like so: $param['msg'] = "This is sample message."; Otherwise it looks for the msg constant first.
I also recommend Komodo Edit. Quick features list: * autocomplete and calltips * multi-language file support * syntax coloring and syntax checking * Vi emulation * Emacs key bindings * HTML preview * Code snippets * Code folding * Multi-document editing * Project management with live &amp; virtual folders * Custom plugins (create your own) I also love the configurable syntax highlighting. Look online for a couple of great themes. http://www.activestate.com/komodo_edit/
http://sourceforge.net/search/?type_of_search=soft&amp;words=SMS+php
 &gt; Whilst “Curl” might sound new... lol.
any free sms gateways..?
This article makes me cringe. It reeks of a PHP developer who has a very superficial knowledge of programming. His knowledge seems to be picked up from various hotscripts scripts and it shows in the code quality. Functions such as `stream_context_create`, `stream_get_contents`, `http_build_query` exist. USE THEM. The lack of error handling, inclusion of old debugging code, and things that are just **wrong** (wtf is rn? do you mean \r\n? big difference) make it impossible to take this code or this website seriously.
I would, in all sincerity, like to see you create a tutorial that covers the same material but done properly. 
Hey guys, This is part 2 to the "installing xcache" article i submitted last week and focuses more on tuning than the installation aspect. If anyone has any thoughts, please let me know. :)
Thank you. Really enjoying this series. I'd love to see an article on how best to use XCache and the Zend Framework. ZF is a really cool beast that could do with some speed help, it'd be interesting to see how you'd approach this type of huge MVC library.
Support for namespaces, Late static binding, Lambda Functions and Closures, garbage collection for cyclic references SPL (Standard PHP Library) introduces highly-efficient data-structures (no need to reimplement these in "userland" anymore)
&gt;Horribly ugly support for namespaces FTFY
see [whats new in PHP 5.3](http://www.webdigi.co.uk/blog/2009/what-is-new-in-php-53-for-php-amateurs/) Namespaces, phar, Closures &amp; Lambdas, Functors, Traits,Magic functions. See link above for examples. 
"More consistent float rounding"... [shudder].. stuff like that scares me, man...
It's not so bad. From the ChangeLog: * Changed floating point behaviour to consistently use double precision on all platforms and with all compilers. (Christian Seiler)
Why is that?
Backslash is a universal "escape" character in programming. It's even an escape char in PHP. Suddenly using it for namespaces is not only ugly, it's downright retarded. I've been coding in PHP for about 9 years now and this is the single biggest turn off I've ever seen and has made me think very deeply about abandoning PHP since it shows how little the PHP devs care about the community.
You are propably right... Using :: would propably be much better (although from what i understand there would be parsing problems because of the way static members are accessed). But I believe it is just a matter of getting used to it. It seems to me that most people object to using \ for reason of aesthetics. Other than that i dont find any problems with namespace implementation. 
What if you want to access the namespace via string, like, dynamic calling of a library.. you then have to use \\\ ...
eclipse + PDT
I can't decide whether the addition of first-order functions makes up for the addition of GOTO. 
only if you use double quotes
Exactly. namespace Their\Separator\Choice\Is\Retarded; 
I've been using PHP for about the same amount of time and I'm just glad to get support for namespaces, I don't care what they look like.
I'd rather not grovel to the PHP gods.. especially when there's reasonable alternatives to PHP out there..
... it's hideous, admit it.
Amen! they should have kept ::: instead of \ Why didn't they? oh wait it was gonna confuse programmers because there is already a :: expression. \ is so retarted. 
It doesn't. No, in stead of canceling out, they multiply to equal the retiredness of the PMs. I imagine that this went down with almost every coding paradigm: "This fucker on blog x is complaining that you can't code something in PHP like you can in language y, I'll show him!" *smacks head*
No, the addition of XKCD on the Goto page makes up for it. http://us.php.net/goto
if only you could jump from one closure to another.. oh well, there's always 5.4. 
Aesthetics isn't irrelevant. Especially when there is a consensus (more or less) about it.
we already have exceptions which are just GOTO wrapped in acceptable syntax.
the ?: shortcut is cool: $woot = $_POST['w00t']?:true; 
I've been looking for something this basic for quite some time. Thanks
Not quite as minimal as I'd like.
yes and /raptorattack
Refreshingly simple. I would suggest that you didn't use the word "view" to describe the handlers. A "view" implies that you are following an mvc-separation, where "views" don't have side effects. In this setup, you don't make that distinction. Note that I'm not implying that this is good nor bad (In fact, for a simple setup, I would prefer not to have controller and view separated), but rather that you should use appropriate names to prevent confusion. I would suggest one of: handler, action or component.
Stop. Using. Smarty!
Leaseweb are a great company, basically they don't give a shit what you do until they get hit with a court order.
It should go without saying, but when you put code on your blog, make sure your code works. After fixing bullshit like missing semicolons and unescaped characters, I get this: `PHP Warning: gzinflate(): data error`. *Edit*: I overlooked the ".." inside the example data, now it's obvious that it's not the full string. My other points still stand though.
To be honest, I found none of these things to be awesome.
I've used fpdf before - it's great. Something to use with fpdf that's very useful (at least for me) is the [Avery label](http://www.fpdf.de/downloads/addons/29/) class. I do a bunch of customer leads management for a client, and fpdf with the avery label PHP class let me set up a way to automatically e-mail a PDF with the leads' names and addresses to my client. All he does is put label paper in the printer and print. Very nice - no mail merge messiness or spreadsheets or anything.
Very cool! I never knew that actually. I'm working on writing something pretty similar right now and was wondering how I was going to pull this off. Thanks!
What are the alternatives? Please enlighten us.
How is it compared to codeigniter? Anyone who has tried it cares to comment?
The alternative is... PHP! Seriously. PHP is made to be embedded in HTML. Why is it that people insist on adding another layer in between. And don't say "designers are not smart enough" because that's just condescending.
The only missing semicolon that I can see is in the '$coded_string = ..' line which isn't even a complete line as you can see with the '...' in the middle of it. I Just ran the function and it worked for my string. If you need some help post your string here and I'll hook you up or email the author.
I decode obfuscated strings by piping them to /usr/bin/perl.
If you can't live with the links/ads, then don't use the software. But I guess you don't pay for software very often anyway.
Sorry, I overlooked the ".." in the encoded string. Other than that, my argument stands. `PHP Warning: preg_match(): Compilation failed: missing ) at offset 14` I get this because the ( in preg_match isn't escaped. &gt;/eval(gzinflate/ should be &gt;`/eval\(gzinflate/` After that, I get `PHP Warning: preg_replace(): Compilation failed: nothing to repeat at offset 3` because of unescaped question marks. &gt;`/&lt;?|?&gt;/` should be &gt;`/&lt;\?|\?&gt;/` Note that this only works for short tags as it will turn "&lt;?php" into "php". Then there's the code eval'd inside the loop. $coded\_string should either be \$coded\_string or single quotes should be used. At this point it works. 
I've used fpdf before. I used it to generated pre-populated forms containing barcodes printed on custom printer paper. To be honest, it was a real pain in the ass to use (in my case) but provided fine-grain control allowing me to place elements precisely where needed at a pixel level on a printed page. Excellent product. If you just need to create a dynamic PDF document, why not use dompdf; you just provide HTML/CSS as an input and your done in no time.
Why are you bothering to try and compile it? I just threw it in a php page and it worked. Those warnings didn't give me any issues.
I'd choose neither; but I reckon codeigniter would win hands down. The code-base behind tkself is very easy to follow.
Smarty isn't.
wtf
References are indeed a mess. Since php5, you generally do not want to use them for anything.
learn2program
Why the fuck are people still writing articles about PHP 4? Let the abomination die already. PHP 4 is the Windows XP of web languages.
The INTL PECL extension and it's Normalizer are probably the best way to deal with it instead of reinventing the wheel.
A must: [The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)](http://www.joelonsoftware.com/articles/Unicode.html) by Joel Spolsky.
Ah... beat me too it :(
iconv can be your friend. However i've found the transcodings work better by making a system call to iconv instead of using php's built in function. make sure you set your database charset properly before reading/writing. set names utf8; if you're at the mysql cli prompt to get utf8 to be displayed properly. select hex(column); to see they actual byte level encoding if you're not quite sure things are right. make sure you understand Unicode!= utf-8/16/32 it can also be useful to understand the differences between iso-8859-1 and windows-1252, two other very common charsets
I was curious too and [tried it out](http://www.tkself.org/performance/): it is faster than CodeIgniter.
&gt; Did you ever get an email from your friends in Bulgaria with the subject line "???? ?????? ??? ????"? Story of my freakin' life.
Netbeans + Notepad++ for smaller edits. Sometimes I use Komodo Edit.
Thanks for solid start.
http://www.phpwact.org/php/i18n/charsets http://www.phpwact.org/php/i18n/utf-8
I see that wact and Spolsky's article are already posted. In addition, this has some good information: http://kore-nordmann.de/blog/php_charset_encoding_FAQ.html This is a pretty good checklist as well: http://developer.loftdigital.com/blog/php-utf-8-cheatsheet Very shortly put, charsets/encodings are a simple concept on the micro level, but it gets complicated on the macro level (Eg. when different applications/layers interact with each other). Whenever you run into trouble, it's important that you don't just tweak and experiment your way out of it. You need to understand exactly what's going on between each layer, and understand where the mismatch is. Otherwise you end up with those solutions that kind-of works, except in a few edge cases.
Brilliant. Look forward to having a go on this.
Stolen from http://www.ciol.com/Developer/Languages/Tutorial/Writing-Net-applications-in-PHP/28109115295/0/
Man, are there still THAT many people running at 800x600 to have to put their content in such a small column, the code parts aren't even readable without zooming it in, yeah I know it's easy to zoom :P, but daaayymn!
I quite agree. The reason I posted this was because I'm using ZF lately for a new project. The last time I used ZF was in version 1.6/7 or something, before they rolled out this Zend_Application/Bootstrap stuff. These are very confusing. I'd just got my head around the main stuff last time, and I'm still perplexed now. I'd never recommend ZF to a newish PHP programmer. The main reason I'm using it is because I attempted to build something similar (Controller classes, Routing etc.) by hand. It works, but is very flaky since I've never done it before. I gave up when I needed to implement custom routes. I'm considering trying Cake or Kohana, my main pull for ZF was that it was built to use PHP5, unlike Cake, and was more up to date.
I agree. ZF is very confusing, the same questions crop up in the mail list over and over. I hate the way nearly every method takes a single array as a parameter. It makes trying to figure out the 'parameters' hard or impossible.
So did I several years ago.
Zend Studio, Eclipse + PDT, sometimes Coda
Komodo and Aquamacs (emacs)
Webuilder2008 on Windows, but I prefer gEdit. Someday I'll get gEdit running under cygwin. JEdit for Smarty template syntax highlighting. Dreamweaver is supposed to be good at all of this, but I'm not interested in paying Adobe for it. I don't like Eclipse and its spin-offs like Aptana, Zend Studio because it doesn't have, what I believe to be one of the most basic and expected features of any text editor, text wrap at the end of a line, plus I don't like being forced to work within "projects". I've tried tons of them and I can give some pros and cons on every one. Komodo's method parameter completion disappears if you move away from the method and try to come back to it. Same with Notepad++ (the last time I used them). and it doesn't support sftp.
That whining is quite predictable and boring by now. Go and read why `::+` was not an option. If you don't like it, go whining about some other language. 
If you find CodeIgnitor nice, apart from its PHP 4 issues, then you should check out Kohana - its a fork which is PHP 5 only :-) http://www.kohanaphp.com/
i\hate\you
What the fuck... I'm going to spend the time it would take to get used to this on learning Python.
Edit: [here](http://blog.wombert.de/post/45966997/phplondon-agavi-video) is the video of the presentation given by the framework developers at PHPLondon. The framework absolutely kicks ass. I simply can't take any other ones seriously after this. [Example site](http://www.mtv.de)
In one sentence, what does Agavi have that Symfony doesn't?
Architecture.
| The route for the application index page &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;ae:configurations xmlns:ae="http://agavi.org/agavi/config/global/envelope/1.0" xmlns="http://agavi.org/agavi/config/parts/routing/1.0"&gt; &lt;ae:configuration&gt; &lt;routes&gt; &lt;route pattern="" module="Welcome" action="Index" /&gt; ... &lt;/routes&gt; &lt;/ae:configuration&gt; &lt;/ae:configurations&gt; I stopped reading right there. That's ungodly fucking ugly. Other frameworks can and do allow complex routing using simple PHP constructs like arrays to define their routing mechanisms. Using XML gives you nothing.
What does it have over Kohana?
No, it gives you standard XML toolkit including schema validation, XPath, XPointer includes, XSLT and so on - all of this implemented and actually working. And, XML is compiled into PHP which is then used to initialize framework objects, so there's zero performance impact in production. Configuration files for one version can be used in another without adjustment because the framework knows how to translate them into the current format.
No integrated database engine or dependencies on one, no "helper" nonsense (rails-style warts that don't fit in MVC adequately), correct implementation of MVC, ability to use any number of templating engines (or other ways to generate output) in any combination, strict abstraction and reusability... Views are not templates and redirects are not broken. Can be used in any context - people write stuff like IRC bots and WAP services with it. I'll have to go look at Kohana docs to find more stuff I don't like.
I've got to say that I agree with op - its ugly and pointless. Its yet another thing to learn and another stage to go through.
And I will have to disagree because the op has no idea about the actual consequences of this system and the tremendous flexibility it gives you. Find me a framework that has a routing mechanism as advanced as Agavi's and I paypal you $10.
[CakePHP](http://book.cakephp.org/view/46/Routes-Configuration) edit: more specific link to documentation
I don't know Agavi or its routing system yet, so I couldn't comment...am I missing what this has to do with XML?
Um, no. How do you do any of the following things with CakePHP routing: * Set invocation-wide locale according to a HTTP request header? * Map runtime *instances* to URL partials? * Configure the routing map so that: /reports/foo causes HTML output for report foo; /csv/reports/foo causes CSV output for said report; /grid/reports/foo causes HTML output with table grid widget and pagination; and while at that, how do you also produce output in JSON format if there's an HTTP header submitted by a Javascript framework ajax client implementation? * Match route partials from custom data sources (e.g. $_ENV), time of the day or an arbitrary one time token? * Cut into the routing process (both parsing/matching and generation) to customize it, for example so that all topic-related actions can receive the topic *instance* as their argument as opposed to its *identifier* (and so that the route doesn't match if the mapped object is not in the storage?) * Adjust the routing map during run time? That's just some stuff off the top of my head. Sorry, no $10 for you :&gt; 
XML is Agavi configuration glue. All of it gets compiled into native PHP code and then used for initialization of framework objects. Routing is just one particular instance where XML is used; you also have DSL for configuring e.g. output types (concept entirely absent from all other frameworks), renderer engines, layouts etc. 
| Set invocation-wide locale according to a HTTP request header? Never done that myself so I can't answer to that. Why does your _router_ need to set your locale? | Map runtime instances to URL partials wtf does this even mean? | Configure the routing map so that blah blah blah How much shit does the router do? Or rather, how bloated is it? Re: cvs, json, xml, etc. see [media views](http://book.cakephp.org/view/489/Media-Views) The rest, maybe it's just me but I'm seeing words but I have no idea what you're meaning by "so that all topic-related actions can receive the topic instance as their argument as opposed to its identifier"? I understand all of the words, but it makes no sense to me. But anyways, xml is still ugly as fuck. edit: DAMNED FORMATTING!
"ability to use any number of templating engines" This has always been a PITA for me, making maintenance a headache, and code online of dubious usefulness. Either your organization standardizes on one engine and code from other sources might not be usable or you let your designers et al use what they want and maintaining it becomes painful.
Yo dawg, i heard you likes templates. So I put a template system on your templating language so you can pull your hair while restricting what you can do for no reason that hasn't been rebutted 100 times over since people stopped using templates on top of PHP. Also, I hate smarty.
&gt; Never done that myself so I can't answer to that. Why does your router need to set your locale? Because Agavi comes with an internationalization mechanism and all facilities can take advantage of it. For example, if you use gettext as internationalization backend, all you have to do to add a new language is a new .po file. Everything in Agavi will automatically get translated for the output, for example validation error messages. &gt;&gt; Map runtime instances to URL partials &gt; wtf does this even mean? You have /blog/my-post-title The post called "My post title" is represented by a runtime object (typically an ORM object instantiated from the database, but it can be, for example, a base64 key obtained from a remote API). You tell the routing engine that for everything under /blog/ should be handled by a callback supplied by you. This allows you to do the very things that are impossible in other frameworks: look up the target object (blog post) during routing; reject the route so that it doesn't match if the requested object is not in the database; but if it is in the database, then remove the my-post-title from request arguments and replace it with an actual instance. The result is that instead of writing code to retrieve the blog post in *every* action that deals with blog posts and redirect to 404 if it isn't there you do it once in routing and all subsequent actions can simply assume that they receive a blog post object; otherwise they would *never* be called in first place. &gt; How much shit does the router do? It does everything it needs to do to be able to sustain large mission critical applications. Cake routing is a toy compared to this. &gt; Re: cvs, json, xml, etc. see media views Media views can't solve the problem Agavi combination of output types and routing. Example: I write a report that lists widget sales. This report varies in level of detail depending on current user privileges. On top of that, the result of the report may be viewed by the user as plain HTML, a CSV file, a PDF file, or an Excel file. I also would like to expose the report as an API so that a foreign application can ask for a report in a machine-readable format. I write the report implementation *once*. Then I simply add output types *without any modifications to the action/model code*. Media views can't solve this problem; they are just a hack. &gt; The rest, maybe it's just me but I'm seeing words but I have no idea what you're meaning by "so that all topic-related actions can receive the topic instance as their argument as opposed to its identifier"? As I said above, Agavi routing allows you to replace request arguments with actual runtime objects *and vice versa*. It allows you conditional matching of URLs and processing whenever a rule matches (or doesn't), or whenever a route is being generated. &gt; But anyways, xml is still ugly as fuck. Ugly or not, Agavi beats the competition hands down. I'm completely anal about consistency and reusability, and this is the only framework I can take seriously. 
That is simply not true in heavy duty development, *especially* when you do incremental refactoring across applications. In some cases use of Dwoo is justified; in other cases I use a magic renderer which produces HTML from database objects without any templates; and in yet other cases plain PHP because template engines do not allow for the freedom necessary to produce the desired content (try, for example, to imitate an Excel-style deep pivot table report in Smarty syntax; I guarantee you no Xanax will help.) Agavi is all about not making assumptions, which is why it allows you to write applications that use any number of database libraries, APIs and backends in any number of interface languages that can expose themselves via any API interface - all without *ever* breaking application code consistency. I've done a range of things with it, from data proxies to billing backends to real time web games to gambling websites. It's unbelievable how flexible it is.
[Dwoo](http://www.dwoo.org) is a clean, nice reimplementation of Smarty for PHP5 (written by Seldaek of Agavi bunch). I use it extensively.
| Agavi comes with an internationalization mechanism So does CakePHP if that's all you're referring too. | You have /blog/my-post-title Err, if that's all you're talking about then sure, Cake does all that without having to create a big glob of xml. This is a killer feature? | hen I simply add output types without any modifications to the action/model code. Err, no shit. That only requires changes to your VIEW in CakePHP as well like any other MVC framework worth its salt. I drop "Router::parseExtensions();" and then any request for a /url/foo.json serves up my json view, or .xml serves up my xml view... | replace request arguments with actual runtime objects and vice versa So I setup two routes if I really want a page to serve up the exact same content for 2 urls and then have google penalize me for having duplicate content on my site... yay? Anyways, I'm glad you enjoy Agavi, it just doesn't seem to, well, do anything special that I can't already do with the framework I'm familiar with. That being said the framework does seem very capable, good job.
Notwithstanding that "architecture" is a rather fuzzy term, I would say that Symfony has a lot of it. Could you qualify that statement a bit?
Now one could argue that the number of features isn't necessarily an indicator of quality, but who can resist a challenge. [You can wire my $10 to your local branch of Amnesty International.](http://www.konstrukt.dk/)
&gt; So does CakePHP if that's all you're referring too. No. The localization engine exposes an interface which routing can touch. Routing can match *any* request parameter - not just :thing parts of the URL or regexps. It can match more than request URLs - and it is fundamentally designed in a way that requires no hacking on your part. Accordingly, routing can also adjust nearly any environment setting, so that when your action is invoked, everything around it is ready and setup correctly. Your code doesn't care because you write it abstractly. So by writing a little XML configuration, you can spare yourself writing a ton of boilerplate code - *and* the code you do write would be independent of the current routing implementation - so that if you run PHP on an embedded webserver which has an LCD screen and 6 rubber buttons connected to it instead of the HTML browser - you *could* without changing your code. This is a pervasive pattern in Agavi - the assumptions about what you want to do or how are minimized (and it has options for bondage-and-discipline which is simply unavoidable on large projects). CakePHP can't do that - it requires *writing code* (at least as far as I can tell from glancing at the manual). Instead, in Cake you have a bizzare predefined thing called "admin" urls. Why is it there? Who told cake my application is going to have some sort of "admin" in it? And therein is the difference; Cake makes an assumption that you are making a website. If for instance you wanted to write a web spider, you would poke your eyes out before you could figure out how to do this comfortably in Cake. And it is absolutely true that when you *are* making a website Cake is pretty nice; but I write web applications that do some serious stuff and website conventions just don't apply to my work; and the more I work this way with Agavi the more I learn that websites, too, should be done this way. Otherwise is, so to say, madness. &gt; That only requires changes to your VIEW in CakePHP as well like any other MVC framework worth its salt. I drop "Router::parseExtensions();" and then any request for a /url/foo.json serves up my json view, or .xml serves up my xml view... And if you want to match something that isn't an extension, or not even a part of URL? Because I only see ::parse() and ::parseExtensions() in the API docs. Moreover, how do you use routing at all in environments where there is no URL? Command line for example? Cake views seem to be another oddity to me, since they seem to be part templates and part controllers. For example, template extension names are actually kept in the view. Why? If my view is rendering a bitmap, why should it have template extension settings? Or theme names? Why do views "attach" to models? Why do they store "current URL" and how, again, is that going to work in an environment where URL doesn't exist as a concept? I am not asking you to tell me, I am simply stating that there are assumptions in Cake that make it well fit for one specific case of PHP applications, and whatever it saves you when making websites it makes ten times as hard when your work transcends a website. &gt; So I setup two routes if I really want a page to serve up the exact same content for 2 urls and then have google penalize me for having duplicate content on my site... yay? Actually, no. It can help you do the exact opposite. You can have 2 URLs if you want. Or you can have 1 URL that serves different content types according to a HTTP request header (or different content, if you want to try to lie to Google and cloak). Or you can have 1 URL that serves different content to different countries. Or you can have 5 urls that serve the same content in different languages. Or you can have an URL that looks like /foo/bar if the sun is out or /bar/foo if it's raining. One of the cute things I do is URL tracking so that whenever an effective URL changes (e.g. when you rename a product), the old URL is retained by routing and a 30x redirect is issued *automatically on the framework level*. If SEO is what concerns you, I assure you, Agavi routing is *the shit* :D 
Well, to be fair: Agavi and Symfony both belong to the same family as they both descend from Mojavi. However, their difference is severe and they are intended for two completely different things. Symfony is targeted at people who make commercial web sites and applications. It comes with tools and assumptions (and restrictions) that are relevant primarily for medium sized web applications. For example, Symfony has link helpers or asset helpers. In Agavi there is no such thing. Agavi is designed for PHP applications in general, and so it is agnostic to the input and output methods of your application; everything to do with handling requests and creating responses is generalized so that the framework doesn't prevent you from implementing special cases and complying with the strangest requirements of whatever business you are in. Symfony and Agavi are similar in many aspects (for instance, the way factories work), but Agavi often has more verbose and fine grained mechanisms. The separation of concerns is way stricter because the framework is designed to work in any environment. The rendering system allows much more freedom than Symfony, and it can also be used outside of web contexts as well. In general, Agavi is designed with expectation that you would need to write more code than an abstract version of your application would need and it helps you to keep the two separate. All in all, for me personally it doesn't feel as restrictive.
This is actually nice. Looks to me like a well thought out framework written by people with clue. However, it's designed to live within HTTP and is useless outside of it, and its routing part doesn't actually exist, because, I quote its documentation, "All components are tightly coupled to a url." What am I going to do with URLs when my application communicates with the outside world by pretending to be a fetchmail MDA? On top of that, I don't even like Amnesty. They play too much politics where they shouldn't take sides. So no. :P
All of the requirements you mentioned were related to http. At least the ones I understood - Your distinction between *instance* and *identifier* appears to me as an implementation detail that is only really relevant in the context of Agavi. Yes, Konstrukt is tightly coupled to http. I guess that highlights an aspect of Agavi then; That it isn't a web application framework, but a more general platform? It appears to me that using an abstraction that treats http as an implementation detail is bound to cause more problems than it solves. How would you have your application return proper http status-codes for example? (I didn't ask you to *like* Amnesty btw.)
That was true back in 2001 but long since the ereg functions have been changed to use the same PCRE library - here you'll find the discussion starting http://marc.info/?t=103609370000004&amp;r=1&amp;w=2 Today the only difference in the ereg functions have a less powerful pattern syntax
Sorry, I got that far Mike - but why XML not native PHP in the first place. IIRC configurable output types are present in Kohana 3, and I believe Rails
How is matching environment variables, for example, related to HTTP? And the distinction between instance and identifier is absolutely crucial: class MyBlogPostRecordInstance { public $identifier; public $text; } Your ShowMyBlogPost action then would do something like: $post = $blog_post_model-&gt;getPostById($identifier); This is something Agavi *routing* can do, so that you don't have to do it in your action code. &gt; That it isn't a web application framework, but a more general platform? No, it is a fully implemented web framework on top of a generic application framework. When you write a *web* application with Agavi and then have to execute it in other contexts (command line; mobile browser HTML; email handling etc etc etc) you don't need to tweak your code, because it forces you to write it abstractly enough. &gt; It appears to me that using an abstraction that treats http as an implementation detail is bound to cause more problems than it solves. Absolutely not. There's a set of well defined interfaces that you talk to. For instance, by default HTTP GET is mapped to executeRead() action method. Your actions, then, are designed around abstract concepts of "read", "write", "list", "delete"; hooking up your application to a new API and interface is a matter of connecting these to the actual request methods - which might *not* be HTTP. &gt; How would you have your application return proper http status-codes for example? [Here](http://pastebin.com/f4e0f08da) is a small example I wrote. Note how the same action (request handling) code is completely decoupled from its view (response handling) and so can survive in any custom environment without modification. 
Thanks for the explanation - that made sense. I'm still sceptical about putting the main abstraction above http level, but I can see the point of it.
&gt; I'm still sceptical about putting the main abstraction above http level, but I can see the point of it. IMO you shouldn't be. The framework forces you to write decoupled, abstract code. This leaves any venue for further extension open. You *know* if tomorrow you have to implement exotic feature foo the framework would help you, not cause further obstruction.
Well that and that they've been deprecated and will be completely removed in 6 if I remember correctly. PHP changes too quickly* to be posting information from 8 years ago and even remotely considering it relevant.
You could do: &lt;?=basename(__FILE__)?&gt;
It allows evaluation and manipulation of specific bits within an integer. A real world example is error levels, each level 'up' changes a bit in the error reporting state variable.
Zend isn't PHP's parent company, it's just a company with good PHP products.&lt;/nitpick&gt;
Well, I'm going to play devil's advocate here, and say "neither". Honestly - if you're self taught, and you're doing a variety of work, the best thing you can do is roll your own - build a nice little MVC framework which integrates tightly with your preferred DB/cache, has a set of core libraries, models and controllers, and client specific extendable behaviour. This way you'll 1) Learn far more than you will by picking up someone elses code 2) Have complete control over the platform ("if only I could add feature 'x' to the core!") 3) Be able to brag about it.
honestly it doesn't take long to get a basic app up and running with many of these frameworks, theres usually a blog tutorial or something to get you started. you might be interested in reading about full stack vs glue frameworks as well to understand some more subtle differences.
Why MVC? These three letters seem to get attached to "framework" as though they're a part of the same word. I'm not even sure that most people have any idea what they mean when they say MVC. Reality check: MVC refers to a 30 year old design pattern that is not necessarily suitable for web platforms. It's certainly not the best answer for *everything* HTTP based, and it certainly doesn't mean "good". Nor is it the only choice -- see Zope et al's traversals, Tk style widget hierarchies and various criticisms, extensions and alternatives linked from http://www.c2.com/cgi/wiki?ModelViewController , for example. In the absence of any idea how your application should be structured, and of any creativity, MVC might be a reasonable choice. But in most of the web frameworks I've seen, blind adherence to "something called MVC" means you have to contort your code and repeat yourself in places with no obvious connection. Riddle me this: what part of a login form is M, V or C? What do you gain by decomposing it in such a way? How does this help me reuse the login form as a self-contained component in various parts of the site/application? Cargo-cult programming is not quite the right term, but it's close.
&gt; Why MVC? In a real life production environment, it provides good seperation for DBA's, developers and designers. Fits nicely with Agile workflow. &gt; Riddle me this: what part of a login form is M, V or C? It's a reusable view attached to something like a 'user' or app-wide controller. Not really that hard to get your head around.
Oh, god yeah - you don't stick to any paradigm religiously, if you do you just end up up code-shit-creek with code in places where it shouldn't necessarily live, just in order to adhere to the paradigm. A login form - alright, you have a template, which is called by the controller, which then accepts the data from the submission of your form, and chucks it back to the model (it knows to do this because you pass a parameter from the form which sets the view state to "do login" or soforth), which then calls your DBL, gets data, and logs the user in (using a session library, which lives outside of the MVC structure, because it doesn't make sense to have a session model - a user model, to structure the user data, yes, but not for the session). Edit: Just to clarify - I run a web dev firm with 7 developers - we have an eCommerce platform which is "loosely MVC", but is built to be maintainable across numerous clients, fast as all hell, and tailored to eCommerce. Every time a new developer starts there's a month of "why is this in the controller and not the model" and "why is this in a library and not a model?" - soon enough, it becomes clear to them that things live where they live because it doesn't make sense to shoehorn things into a specific paradigm, and if maintenance is made easier by having something effectively stand-alone, or muddying the distinction between controller and model, that's what you do.
Agreed - it's all about the workflow - we can have designers go and play with templates, we write middleware, and everything is quick and simple - compared to the old (ahem, osCommerce) platform we used, it's beautiful, and about 8x as fast to build a site on.
fair point but I there are many good reasons to use an MVC framework. i remember hacking around in OsCommerce 4 years ago, what a nightmare. The separation between the view, controller and model makes it a lot easier for me to understand what is going on, easily make changes etc. Also, using cakePHP or zend framework you get exposed to how other people code which is interesting. If you pass that project on then the lead in time for the next programmer is reduced if they are familiar with the conventions of the framework. Whats the problem with separating a login form between view, controller and model? The html for the form would be a view, the action of the form would be in the controller and the models the form uses would be models. 
&gt; Riddle me this: what part of a login form is M, V or C? M - The user database, method to hash passwords, method to authenticate users (database vs. LDAP vs. web service). Method to handle sessions. Done right, you can swap out one authentication plugin for another instantly with a one line config change if you're developing for multiple clients with different needs. V - The HTML look and feel for the form. Done well, you can hand this to a web designer, and not only won't they screw up your logic, but they _can't_ screw up your logic. C - "Skinny" thing that handles form input, calling the model for authentication, deciding where to redirect or what do do on success/failure.
I actually like Zend more than either of those, although it takes a while to learn before it stops feeling like it's far over-engineered. - They keep up with the latest technology. No PHP 4 crap. They will quickly incorporate the PHP 5.3 stuff that you will want (e.g. MySQL native interface for performance.) - They refactor their code a lot and there is good attention to code quality. When you look at it, most of the code in the framework is pretty nice. - Speed is pretty good. It's not as fast as CodeIgniter, but then CodeIgniter is a much looser set of libraries. - There's always a way to just short circuit Zend and do what you want it to do. If you want a template engine, it's easy to work it in instead of Zend's default view file structure. If you want to use some PEAR library, or your own, in place of anything Zend has, you can.
No comments here seem to address the question you're asking directly, which is whether CI or Cake is a better choice. From my experience (we just picked out of the two at my company), CakePHP tends to be much more automagical than Code Igniter. One of my biggest concerns was that I have years of PHP programming experience, and switching to a framework that did too much for me would squander those abilities. Code Igniter is a small, lightweight system that really doesn't get in the way of your programming style. It affords a good structure and simplifies common tasks: database access is abstracted away into $this-&gt;db-&gt;get(table); As well as the documentation for Code Igniter is amazingly good. Check out the [user guide](http://codeigniter.com/user_guide/) on their site.
FFS, people juts want to get a job done. Don't keep telling them to go back to first principles and rewrite frameworks that already exist and have had many thousands of hours of work put into writing and debugging.
You're going against the grain, I'm afraid. Look, MVC gives us: - an object model to interface with the database in order to not get our hands in complex SQL - presentation layer stuff separated from app logic and data logic - program flow handled in a concise, methodical way via routes and controllers - pretty URLs (in most cases with most known PHP MVC frameworks) - RAILS-like or J2EE-like tools that let us handle things we commonly do on the web, rather than having to code these things ourselves.
&gt; Every programmer should have his own small framework. If you were one of my co-workers and said that I would throw a stapler at you for saying that. Keep your own damn toy frameworks at home. I don't need to learn yet another "cool but quirky" framework that "some guy at work" thought he could do better writing in his time off over a couple of weeks. That being said, if you're going to be the only one playing in your sandbox, have fun reimplementing your own flavor of a framework instead of actually, you know, developing a web app.
do you do real world work? are you out of your fucking mind? do you have relationships with other people?
I have worked on both frameworks and I think they are pretty good efforts. They both have there own school of thoughts and there own style. As war as creating your own MVC framework is concerned I will say its highly subjective on the parameters your client requires. The important thing here is that we should not be comparing these two frameworks at all. Its like comparing struts with spring or mootools with jquery. People usually go about comparison ASAP they hear word MVC. Its same as if you heared the term OOP and started comparing ruby and small talk or java with c++ or something like that. So I would say both of them have there own place. Except that in my experience I have seen more usage of codeigniter in industry projects rather than cakephp.
Like someone else mentioned: both frameworks are php4. Thus not state of the art. I love symfony. It implements many "cool" and modern technics (you can even "merge" classes, it's called mixin, which is normally not possible with php5), is fairly easy to learn and quite easy to extend. just have a look here: http://www.symfony-project.org/book/1_2/17-Extending-Symfony
so true. frameworks are there for more than one reason. and one of them is to provide a "standard" way of doing things, so new team members can join easily. that's not possible if everybody writes his own homebrew "framework".
I just did this tutorial but didn't find it that bad. all the frameworks are going to be confusing at first. cake is nice and straightforward mostly though, but a lot of automagic going on.
My shop considered Cake and CI - we went with CI because of its' low level nature and flexibility. Cake is great for rapid dev IF it produces something that does not need tweaking. CI just tries to make the drudgery less so. That said, Kohana is a fork of CI that is more active and supports PHP 5, albeit newer. Looks to be a good extension which keeps the core KISS principles yet extends. We are evaluating it and will most likely replace CI with it, as it makes session variables work right, which takes hacking in CI, along with being more than just an underlying framework.
&gt; Cake is great for rapid dev IF it produces something that does not need tweaking. Could you expand on that a bit please? We've successfully used Cake from custom shopping carts, custom cms, online learning and complete online games.
The new Cake 1.3 branch is 5.2+ only and the ultra-bleeding edge is 5.3 only. Having PHP4 compatibility over the last few years has been a god send having dealt with decrepit webhosts whom clients will not leave. 
CodeIgniter is very easy to get started with and is a much lighter framework than Cake. It also allows you to integrate with Zend framework components really easily. Those should be enough reasons to use it. My other suggestion would be Kohana, which is a fork of Code Igniter for PHP 5-only.
MVC doesn't give you this, a framework does. MVC is a software design paradigm.
Okay, okay. We have a fundamentalist here. Sure, you're right. But many PHP MVC platforms are not just that -- they provide a RAILS-like or J2EE-like set of common tools.
CodeIgniter vs CakePhp = Zend Framework (or something to that effect)
CI is very minimalistic and in my opinion will require more work per feature if you will want a more complicated website. Also don't listen to people who say "they are both PHP4 therefore not state of the art" this is ridiculous because PHP4 support can actually be an advantage on older hosting. At least it was for me so many times when a client was using mass hosting servers with PHP4 only. But Cake's core is implemented for both PHP4 and 5. CakePHP is much more complete framework, as someone mentioned with more automagic, with it's biggest disadvantage being relatively bad documentation. It's a constantly developing project and things change all the time: a tutorial that worked 6 month ago with a previous version might not provide all the info about the current version, because the current version might provide a much more elegant and easier way to do the same thing. Even parts of official online book quickly become outdated. Personally, I highly recommend Cake: start with few tutorials, learn how to bake ([it's a piece of cake to bake a pretty cake](http://www.youtube.com/watch?v=-azqXygCzO8)), and don't forget to visit blogs and bakery, then you will slowly start diving into the magical world of Cake.
Yes, and we're extremely profitable. Edit: And you're a total penis who likes to go Ad Hominem on his first response to a debate. I bet you have some *really* meaningful relationships with other people. By which I mean your right hand. By which I mean your mom. By which I mean fuck you.
What, frameworks which confine you to doing it their way or the highway, and limit your flexibility and understanding of the underlying code? Sure. You go juts get your job done. No point in actually understanding something.
Thank you for your advice
Thank you
What, protocols like HTTP confine you to doing it their way or the highway, and limit your flexibility and understanding of the underlying TCP code. Sure. You go just get your job done. No point in actually understanding something. ;)
rofl, take it easy, homeboy. sounds like you need to take a break from your roll your own framework and get some fresh air.
As I remember we liked the form handling in CI better. Cake looked solid and workable, but I do strict standards + strong css design. Cake was initially faster and more robust, but some of our custom styling was a PITA. Cake is monolithic, and if you can live inside the assumed constraints, it's great. If not, you spend your time fighting it. CI is so low level you don't fight it, it only does background stuff. Since it has less learning curve with less functionality, and it addresses the items that waste the most time (form validation, db access, etc.), it was faster to pick up. Cake is still a nice, just not what we were looking for.
My vote is for CodeIgniter. I was working on a project that was taking a bit too long so I moved it over to CI in a day and it sped up my development by 10x.
I'm replying to this rather than the parent because I am made uncomfortable by random references to agile. I also appreciated your first reply, which for some unfathomable reason has been downvoted. SoC for different interests is a very good point, and I'm glad to have my nose rubbed in it. But I'm still a bit uncomfortable with a few points I hope someone can clarify. I'm raising them both here hoping this post will bifurcate. First, designers: I haven't worked with many, but those I have never inspired the confidence to give them templates of any complexity to work with: I certainly wouldn't provide one for every controller, and would be loath to let them meddle with anything embodying logic or more than a handful of tags for programmatic content to be substituted. In recent years, this age of validated WAI-compliant HTML and CSS makes me think more and more strongly that "designers" shouldn't touch the markup, but be simply fed well-structured HTML and given free rein on CSS, with the opportunity to request the embedding of class and id attributes until a common understanding is reached. Next, DBAs: I've worked with several, and they all sucked. I also believe that for 99% of the crap people are producing with web frameworks, a DBA doesn't even belong in the picture. If you have trouble working out how to manage a few 10^5 business objects, you shouldn't be writing an application in the first place. Once it's in the 10^7s of critical objects, a specialist to manage data integrity, reporting and performance issues has been a good idea for some time .. but seriously, a model independent of the application for a blog? Who are we kidding?
What part did you not understand about my objection to the implicit linking between the disparate terms "MVC" and "framework"?
Actually I used both on live projects and IMO - learn both and use both. Cake has more magic inside (if you know what I mean) and it's very good at producing good results in very short time - especially if you use bake console. CI is much lighter and more loose - there's no built in Auth component for example - and finding (or writing your own) is another task. It's good to know both - the more you know, better for you
No no, fair enough. Just wondering if there were some as of yet unfaced hurdles we might need to look out for. I guess we've had the opposite experience, with us Cake just seemed to click. It's been a while, I might have to go back and revisit CI again. Thanks.
Seriously, do you get out much? Why the tough words?
Up until last year, I had always used my own frameworks. Maintaining and documenting my frameworks was a bitch. Adding features was simple - but refactoring old code was a pain-in-the-ass. To mitigate these drawbacks, I started using Zend last year. It is powerful, and useful, but I quickly found that I had not escaped from my prior dilemma - my new apps were getting hard to maintain as they did not flow naturally from a Zend infrastructure. Zend provides a big bag of goodies; it is a useful framework - but it doesn't provide a general application infrastructure (for instance, it doesn't automatically do URL routing - something that I love and also something that I don't want to maintain). I started looking around for alternatives so I started playing with Cake. I found it to be too constricting - you have to spend a lot of time learning how they do things (their naming scheme, conceptual model, etc...) - and then you are pretty limited to that model and coding style. I'm sure you could become proficient in extending Cake; I built my first blog in 10 minutes - but when I started building a larger application I quickly found that my style was too different. I found my efficiency was hampered by constantly hacking around at problems so they fit my usage model rather than theirs. Then I discovered CodeIgniter. Within 5 minutes I was up and running. I built my first app in less than 10 minutes. The naming scheme is simple and relatively easy to learn. I have been using CI for a year now, and I love it. CI is fast. Here are a couple of benchmark comparison: http://www.sellersrank.com/php/cakephp-codeigniter-benchmark/ http://avnetlabs.com/php/php-framework-comparison-benchmarks CI also has great documentation. The user guide is amazingly easy to use. This was one of the 'selling' points for me. CI provides a lot of built in functionality and it is easy to extend. I like the CI style. It promotes rapid development without being too confined to a single paradigm. It has a good feature set that is easy to learn and provides nearly all the tools needed to build fully featured websites quickly. I haven't tried Kohana - but I have heard that because it was forked from CI it is equally easy to use (it is also more strictly OO).
Have you contemplated just using a hosted service like [wufoo](http://wufoo.com/)? It's paid (first 3 forms are free it seems though) but they seem to have [existing uses](http://wufoo.com/gallery/templates/registrations/workshop-registration/) that are up your alley.
Thank you for your excellent advice.
There are several hosted solutions, most of which offer free services for basic usage. * [FormSpring](http://www.formspring.com/) * [JotForm](http://jotform.com/faq) * [Wufoo](http://wufoo.com/signup/) * [FormLogix](http://www.formlogix.com/)
Joomla + RSForm Pro. enjoy!
Browse /r/PHP, find someone doing something stupid, and explain to them why it's stupid. Then post the correct way to do it.
Browse /r/PHP, find someone doing something stupid, and explain to them why it's stupid. Then post the correct way to do it.
If i had a complex web application to do that does not involves a lot of CRUD interfaces, i would use CI. But these days i rather do some websites with content management so i use Cake. Mostly because of the scaffold code generation. I know that CI has a scaffolding feature, but it does not generate the code. So you can't modify it. edit: if you can use PHP5 for your jobs, i suggest you to give Recess a try.
How about a tutorial about pretty urls?
The problem is, an expert on a particular subject who knows enough about it to write a good tutorial that is worth reading wouldn't be trying to pull ideas from reddit. They would just write the tutorial because of their expertise on the subject. Why don't you just copy an article from Smashing Magazine or Webappers, post it to your blog, then submit it to reddit as your original work. That seems to be a format that works well here. Seriously though... If you work with PHP a lot, write about some of the challenges that you came across in current (or most recent) project, and not just the solution, but the steps you took to track down the culprit code and the problem solving tools you found most useful. I think those kind of developer to developer posts, written in the OSS spirit of openness and idea exchange tend to be most helpful.
Thanks for the feedback. I appreciate where you're coming from, but don't really appreciate the idea that because I'm stuck for ideas of what to write about, what I do end up writing wouldn't be worth reading. My reason for asking for suggestions is that it's pointless me writing about any old thing if it's not interesting to anyone else. I happen to know a lot about a particular School MIS API that I've been working with recently, but it's so uncommon that a blog post about it would be useful to very few people. 
Thank you all, these are all great recommendations. One is bound to work.
Because it's the internet, and your comment seemed to entirely miss the point of my (GGGP) post. Being mine, that post was clearly the most important in the thread so anything detracting from it must be downvoted and ridiculed mercilessly.
 $p-&gt;buildFromIterator(new RecursiveIteratorIterator (new RecursiveDirectoryIterator('/path/to/files')),'/path/to/files'); You appear to have some java in your php...
I haven't used it (and so can't testify to how good it is), but you may want to check out PHP on TRAX: http://www.phpontrax.com/ Apparently, it's based on RoR.
switch to linux and it will perform much faster!! Wordpress is built to primarily run on the LAMP stack.
I'm not sure how changing your operating system will suddenly cause an application to start caching itself...
This article was written over a year ago - is any of this still applicable?
Translation of article: &gt; Use WP-Cache if you are going to use WordPress.
The caching mechanisms are designed for *NIX systems.
Not that I can tell. The latest releases of wordpress are pretty good on keeping resources down. Maybe the person who did the templates did a crappy job optimizing. There could also be a plugins doing way too much.
Even WP-Cache isn't all that great. It caches PER USER, even pages that do not require user credentials. So the cache becomes extremely huge and isn't all that effective. Is it better than nothing? Absolutely. Could it be redone? Definitely. Will it be? Probably not. I do not use Wordpress because of it's resource usage. Five months ago was the last time I used it, and the base install required my PHP memory limit to be increased to 128mb, minimum. That was also a pain in the ass. EDIT: To give an idea of the environment we were on; six non-Windows web servers, two non-Windows database servers, all load-balanced for their appropriate applications.
[As mentioned above](http://www.reddit.com/r/PHP/comments/943o7/coding_horror_behold_wordpress_destroyer_of_cpus/c0bd6l3), the caching mechanism sucks, regardless of the operating system.
There are no caching mechanisms in core. The plugins are designed for NIX systems but there are some for IIS. But yeh, for a site called codinghorror, he really shouldn't be using IIS.
I've actually had great luck with stock WP installs. I think a major problem a lot of people run into is some plugins are so badly written (like checking the database for upgrades on each load) that they end up blaming WP. I think WP needs a better way for plugins to make sure their database structures are up to date. There was this one calendar plugin I was modifying and it was checking the database for each version. After about 20 versions later, it was running ~ 20 more queries than it should be. And the way wordpress handles plugins, it ends up affecting the entire site.
Agreed. One of the ways we troubleshot the problem was doing a base install, zero plug-ins whatsoever (added WP-Cache, as another troubleshooting path), and it was still nothing but a huge problem. We even went in and hacked the code up to hopefully fix things, but due to the frequent updates to Wordpress, and the client wanting to be updated constantly, we didn't want to put hours upon hours of time into development, just to have to go in and make sure we put all the changed code in place for updates. However, we were very close to writing a Wordpress compatible blog software, from the ground up, just using a few different methodologies and techniques.
Per user does not sound that great. Anyway, perhaps the fact that nobody can agree on what a good cache system would look like for Wordpress, is the very reason there is not a cache built into the core.
Per-user sounds great... as long as the hordes of people that are visiting and aren't logged in are treated as a single anonymous user. Anything else would be batshit insane.
Can WordPress be sped up with Varnish? I recently read about [Project Mercury](http://www.chapterthree.com/blog/josh_koenig/project_mercury_preconfigured_drupalvarnish_ec2_ami) which uses Varnish -- if you can make Drupal run like greased lightning, surely you can with WordPress too. (I love Drupal! It's really, really well engineered. But it is big and a bit slow on my VPS with a quarter-gig of RAM.) **Edit:** I decided to Google that for myself and found [VarnishAndWordpress](http://varnish.projects.linpro.no/wiki/VarnishAndWordpress) on the Varnish trac.
This is no difference from using a 'normal' salt. Salts only defeat rainbow tables. If you have a good salt, it's just as secure as this function. A good salt can be defined as something reasonably random. md5(micrometime()) will do.
Someone concerned enough to salt their hashes should also consider moving up from md5 or sha1 to at least sha256 or one of the more exotic one way hashes provided by hash().
&gt; Original password defines length of salt as well as its location in hash. Not quite. The final result has variable length, and can be trivially used to determine the salt's length, and that's equal to password's length. That's a very big vulnerability right there. Also, since we can easily determine the password's length, only the first character of its hashed form is used to determine the salt's position: just 16 possibilities. EDIT: How about something like this to fix these problems? function salty($PASS) { for ( $o = strlen($PASS); $o &gt; strlen(sha1('')); $o = ceil($o/2) ); $salt = substr( md5(uniqid(rand(),true)), 0, 10 ); $salted_hash = sha1($PASS.$salt); $part1 = substr($salted_hash,0,$o); $part2 = substr($salted_hash,$o); return $part1 . $salt . $part2; } function is_valid_hash($PASS, $HASH) { for ( $o = strlen($PASS); $o &gt; strlen(sha1('')); $o = ceil($o/2) ); $x = 10; $part1 = substr($HASH, 0, $o); $part2 = substr($HASH, $o+$x); $salt = substr($HASH, $o, $x); $orig_hash = $part1 . $part2; return (sha1($PASS.$salt) == $orig_hash); } I'm curious about the actual increase in security by using methods like these. Most likely none, since the attacker can just as easily employ a brute-force or dictionary attack.
They aren't. Actual response headers are cached as well, which is ridiculous.
Another good reason to use sha256 over sha1 is that it's computationally more expensive. The whole brute-force approach relies on the ability of the attacker to compute many hashes quickly. If you instead use something painfully slow to compute your hashes, it still won't impact a production system with relatively few logins, but it will make brute-forcing a much more expensive proposition. 
haha.
Best thing is the alias creation shortcuts for adding in projects hosted outside the C:\wamp\www folder.
I've just started using CI for 3 projects and I'm loving it. The biggest problem I've had lately with my web development has been people asking "can we display information from page X on page Y"? In theory it wasn't hard to do, but in practice, the tangled mess of procedural PHP mixed in with HTML/CSS made this kind of thing tricky. Stuff like outputting headers, writing session variables, redirecting, including header template files, all that kind of thing, makes coding messy and harder to extend. An MVC framework taught me to separate my styles properly (I knew I should be doing this, but not the methodology) and now if I need to reuse something I can just use the same queries and functions, and just make a new view to work with the same data. Plus the clean URLs are awesome. To everyone saying CakePHP has more 'magic' features - could you elaborate? I'm aware it has some basic CRUD generation, is this what you mean?
I really like your way of calculating the offset but the length of the salt is now fixed. I never thought of the fact that you could easily retrieve length of the salt as sha1 is obviously a fixed length, but what if you padded end of resulting hash? Like for example we could pad each resulting hash to 120 chars. So if we had a 12 char password (so a 12 char salt) we would simply ignore the last 68 chars. It means passwords would be limited to 80 chars but I think this is a fairly high upper limit :)
full stupidity!
It's not so much about the strength of the salt as to the method it is stored. In order to generate the password hash to check a login at a later date the system needs to know the salt and password which means storing the salt somewhere. Normally the salt is stored in the table along with the hash. But this means if the hacker/cracker has access to the table they have the hash &amp; salt. Someone who is determined can then generate a new rainbow table including the hash. Granted that if the salt is different for each user then creating a rainbow table for each is not going to happen. But you could target a single account such as an admin's. This method means that you cannot even target a single account as without knowing the original password you can't know the salt :)
Thanks to palparepa's points I have [improved the functions](https://gist.github.com/154619/dfcf313301a88f1feef64470b3248e275413c20e). They now use a different method for calculating the offset which means that it can start in 36 / 40 possible positions rather than 16. Each Hash is also padded to the same length so the length of the salt/password cannot be derived from the hash.
Wouldn't it be possible to make a rainbow table based on the hashes with the salt in them? Basically, call salty("a") then store the result of said function as the hash, mapped to the plaintext "a". Repeat until generation is done. And unlike with per-user random salts, you'd only have to make one rainbow table as there's no randomness involved.
But the salt changes each time, the shuffle orders the array in a *random* order so $chars[0] is random... $salt = ''; for($i=0; $i &lt; $x; $i++) { shuffle($chars); $salt .= $chars[0]; } 
Oh, right, oversaw that.
I'm still unsure about any security gain. A simple salt technique, even if the hash is known, renders rainbow tables useless (unless the same salt is reused), forcing the attacker to use a brute-force method. 
Cake also has a very active IRC channel at Freenode with plenty of helpful people. There is always at least one of the core developers on the channel.
Unfortunately your functions do nothing but "hide" the salt in the hash, they don't actually provide any extra security. Checking the hash has to be deterministic, otherwise it would not be possible to check it. It does not matter if you hide the salt or not, with any reasonably secure salt, the hash will not be available by a rainbow table and thus the password needs to be brute forced. If you want to provide more secure hashes, you need to make the calculation of the hash slower. A simple approach is to loop through sha1 1000 (or 10,000) times with the result of the last iteration and the salt going into the next. A more complex, but generally considered more secure solution, is to use bcrypt. See http://php.net/crypt. As of PHP 5.3, bundled algorithms are included to allow use of bcrypt even if the OS does not provide it. 
Your idea of security is flawed. Repeat the old saying that security through obscurity is not real security. Ok, now that we've said that, lets look at the real way to hash a password with a salt... 1) Don't sore the salt. Storing the salt all but defeats the purpose of using a unique salt in the first place. Yes rainbow tables won't work, but most users don't use a password that is super long, so if you can determine the salt, you can run several computers in parallel into finding a collision or more likely finding the original password. 2) The salt should probably be a hash of the password. Say we wanted to store a password using sha256. sha256("mypassword", md5("mypassword")) Now, not only do you have a hash of their password, but you need to know a the hash of their password to even begin generating a rainbow table. Obviously you can use something other than md5, but it is good enough and the least processor intensive to generate. Any other technique where you store, or hide the salt is silly.
I don't really believe it is security by obscurity though. Ok strict definition it is, but in this case I don't believe it to be a bad thing :) I do like the simplicity of your solution but the problem for me is the salt is not random. Yes, it changes for each password which is good, and it does mean rainbow tables are near useless, however brute forcing that method is pretty much the same as brute forcing an un-salted hash. Am starting to think the best way is to use a random salt, perhaps even your method above, coupled with [stretching](http://en.wikipedia.org/wiki/Key_strengthening). The random salt rules out rainbow tables and the stretching prevents brute forcing. 
You're right in that it is basically the same in trying to brute force this as if you know the salt, but keep in mind that in my method they won't have any clue as to the starting salt (which doesn't have to *just* be the password) where as yours they can try and figure it out. What some people do (although I don't because I don't find it necessary) is add their user id and/or a unique pass phrase (that is stored not in the db, but a config file) to the salt hash. This way they'd have to compromise your filesystem and database to be able to do damage with the hashes, and at that point, you are already fubar'd. In any case, I can tell you 100%, that storing the salt is never a good idea, however much obfuscated. Edit: But I don't want to take credit away from what you made, even though I don't think it is a great idea, I'll still say good job :)
Your advice to not store the salt is very dangerous. If you aren't storing a salt, but instead using a deterministic modification of the password, your schema is now susceptible to a custom rainbow table. For instance, trying running your algorithm for "password" twice. You always get the same result. This is very bad. The code would be: $hash = hash('sha256', md5("password") . "password"); This will always output: be4296045a168d1c2a484b625bf67477dcf748c86de3f2a94a14ba9eefb53669 Because of this, I can generate a rainbow table with this custom algorithm using RainbowCrack and obtain a large number of the passwords in your user database. If you used a unique salt per password, generating a custom rainbow table would not be possible. Instead I would know the salt for each user, but I would have to brute force each one. As I mentioned in reply to another comment on this page, the best thing you can do to make the hashes more secure is to use a cryptographically slow algorithm. You specifically **don't** want something that is least processor intensive, because then brute-forcing is faster. A simple approach to making the hash algorithm take longer is to use a non-trivial number of rounds of something like sha1 or sha256. Bcrypt, on the other hand, is stronger due to the slow set up time for the blowfish cipher, and has other features to make it future-proof.
What if the attacker has access to your source code? (to assume otherwise is just security by obscurity) The salt is right there.
Let see what salt is for. If we store all the hashed passwords unsalted, or with the same salt, an attacker can create a rainbow table for them. This is equivalent to a brute-force method, except that the results can be reused to crack further passwords easily. Equivalent to cracking all of them at once. So, we add salt. A different one for each password. If the salt is deterministic, we just added an extra step to the encrypting algorithm (calculate the salt), and a rainbow table is just as feasible as before. Thus, we need an undeterministic salt. A random one, different for each password. The problem is that we need to be able to retrieve it. And to retrieve it, we need to store it somehow. We can just store the password in plainsight. The attacker can still construct a rainbow table, but only for that particular salt. But since he performs the equivalent of a brute-force attack, and must restart from scratch to crack any other password, a rainbow table is useless. What this method is doing, is hiding the salt within the hashed password in a deterministic way (given a password, the hash is always in the same place). This is needed to be able to get the salt back. What can an attacker do to defeat this? Easy: nothing. Just brute-force as normal, with an extra-step to the encrypting algorithm to retrieve the salt. This is exactly the same as if the salt were stored in plain sight, with no gain in security. Am I missing anything?
If the attacker has access to your source code, your database is already compromised because you'll have database username/password. Thinking you can keep security after that point is lunacy.
localhost-only access for the win!
your point? use your imagination if you can't connect to a database, but have file system access and the username/pass to the database. how hard do you think it would be to write a script to run command and export the information. yes there is no sure fire way to secure something, but storing the hash in the database in any form is bad idea. at least if you are using a pass phrase from a config file you need both file system and database to be compromised to be able to use database information.
+1 for simply explaining that PHP is a template system already, rather than being another one of those 'Let's reinvent the &lt;?php echo $blah; ?&gt; and &lt;?php include("header.php"); ?&gt; code blocks because my syntax is much better, and nobody minds if it adds useless runtime overhead to every request.' 
In that case, don't store any password information in the database. Use a flat file. Also, you are assuming that they have write access.
FFS! Another "template system" that fails to use `htmlspecialchars()`, allowing invalid markup and XSS everywhere.
I use XAMPP because it includes SSL.
It's not about syntax being better, it's about outgrowing naïve methods such as this that work fine for beginners up to a couple dozen pages, but break down once any non-trivial complexity is introduced. The methods outlined on this page are clearly intended for those with little to no exposure to programming languages, and are fraught with worst-practices such as detail exposure, mixture of logic and markup, and brittle assumptions with lack of error checking. All fine for this very simple example, but ultimately destined to consume much more programmer time than "useless runtime overhead," and ripe with temptation for quick-and-dirty hacks that are sure introduce include obvious and far-reaching security problems.
Same, plus I found it more reliable. I had issues with WAMP services (apache, mysql etc) not starting properly after I rebooted.
Use APS.Net. It rocks you all! Okay?
Unless your running on a Windows box in production, I've found it better to use virtual box (or equiv) &amp; install the same distro as your server. For me it provides the exact same modules as on my server (imagemagick, memcache, xcache, etc)...
http://blog.magicaltux.net/2009/07/29/yahoo-going-closer-to-microsoft-rasmus-reaction/
[Permalink](http://twitter.com/rasmus/status/2908526145). The deal itself sounds sensible to me - Bing has provided much better results than Yahoo when I've used them before - but I don't see where Rasmus ties into it. I assumed he was working at Y! as a consultant, or similar.
Ah, excellent. And I see they've provided the configuration settings and sample projects for all of the other frameworks they're comparing against so anyone can reproduce their results. What? Oh... they didn't. Well that's... useless.
I think he knows more than we all do - i wouldn't like to work for microsoft either
Let me get this straight. You named your framework *Doofp*? Really? How stupid can you get?
Ha I suspected PHP was the new ASP! Why on earth would anyone run a web server on Windows? Windows server is not only expensive, its filled with cryptic bullshit terms and makes every simple task a complicated farce. IIS is about as ridiculous as you can get and the fact that its taken this long for PHP to be able to run properly just says it all. Use Ubuntu, it just works, and installing or upgrading _anything_ is as easy as clicking on the package manager or running aptitude. I'm always amused when I log on to a Windows server and see a desktop strewn with old installers - how on earth do you manage a server like that? How on earth would you manage more than one server like that?
The article is Biased crap, from it PHP runs 17% faster on Windows than on Linux, just read it and do the math. Well I welcome you to benchmark it. Article should have read: How Microsoft Visual Studio TM magic makes PHP run like sharks with rockets on steroids.
The headline should be "How Microsoft had to Make Windows and IIS Suck Less for PHP, Since They Couldn't Make It Go Away, and No One Else Could Fix Windows"
Yes modern frameworks can provide a consistent, standard structure for web development, but you seem to be a "young developer" without the experience of a time before frameworks when any programmer without their own kit of scripts was considered bad or a beginner. I've written and rewritten my own handful of "personal frameworks" over the years, and yes I now also employ current frameworks in my projects. There are places and times for both, but not so much your snide comments and stapler throwing. 
You don't need a gui for a package manager! What a waste of resources. Run enterprise linux for that. CentOS, Red Hat etc.
Never much liked IIS. Just installed amp/lmp on the machine and went from there.
Yes I said click to relate to the Windows people who would otherwise complain that linux servers had no easy to use GUI. Ubuntu of course runs great without X, although if Windows Server can have a GUI im sure a Ubuntu server can handle it. Again, I really can't understand how people install/upgrade windows servers
If you forget about this setting, it can be a bitch. If you're in a performance-sensitive environment, it's a setting of rootsent salvation.
I, for one, think welcome our new overlords. Seriously though; I think it's fine that Microsoft wants to contribute work to make PHP run on Windows. I'm probably not going to use it directly, but it's strengthening PHP as a platform, because it's now an actual option. Sure they are doing for their own gain, but aren't everybody who write open source software - at some level - doing it for their own sake? Of course I would never recommend anybody to run PHP on IIS, but if the business already have a setup, then it *might* make sense to do. Especially for smaller shops, that can't afford the expertise.
There's a [command line interface](http://en.wikipedia.org/wiki/Advanced_Packaging_Tool) as well. Ubuntu is just a modified Debian distro.
Ok, this was dumb. From all the people that were against the use of backslash as namespace separator, I'm willing to guess that not even one was against the idea of namespaces. Of course namespaces are a godsend, they solve lots of problems, even with a bad separator! What people were griping about was the choice of the separator. The main problem with backslash is trying to send the name of a class in a namespace as a string. For example, if the namespace is 'foo' and the class is 'time', "foo\time" will be interpreted as "foo"&lt;*tab*&gt;"ime" unless you write it as "foo\\time".
'foo\time' !== "foo\time" Single quotes are your friend. (This from a hater of the backslash as the namespace separator. Seriously, was ::: too hard?)
Well, do you have any website? Want to track how many users are visiting your site? How many times your website has been visited? I’m sure there are thousands of widgets for this. Some widgets are so powerful. But what about making a “Hit Counter” yourself? Wanna make one? Let’s have a try...
&gt; Yes modern frameworks can provide a consistent, standard structure for web development ... Yes, exactly. Other people have already done the vast majority of the work for us and we don't need to keep reinventing the wheel when 99% of the time your general case needs are already provided for by an existing framework. My response was mostly triggered by this: &gt; But after you've made some applications in these frameworks - just ditch the frameworks and make your own. Which triggered my frustration laden response, the guy was asking about being more productive at building web apps. At this point you've already put the time and energy into becoming familiar with one or two frameworks. Choose one and become proficient in it. Unless your development strategy is so far out in left field that you can't sync to any framework out there, there is no need to build your own. I am trying desperately right now to transition our company away from a home brewed bastardized "framework" that was cobbled together a piece at a time to an existing open source framework. It sorta serve it's purpose at the time but comes nowhere near to serving it's purpose now. Could we write our own framework that is as good as CakePHP, CI, etc? Maybe, we employ some smart people but quite frankly, none of us are industry leaders. I would much rather use something someone much smarter than me has written and is tested by thousands of other developer than waste time building our own for zero gain. For a business, *where my coworkers are*, it is not at all cost effective. Thus, if one of my coworkers asked if we should disregard the thousands of man hours people have already put into creating an effective framework in favour of building our own piece of shit framework *again*, I would throw a stapler at them. And maybe a shoe for good measure. Now, I'm not saying you shouldn't play around with your own framwork in an attempt to understand what's going on. Please, by all means, write your own basic language and compiler, create a toy operating system and understand the basics of memory management, process management, io management, filesystem, etc. Please, for the sake of the people who come along after your and have to work with your code, please try to understand, it'll make you a better programmer in almost every way. And yes, please try to understand the difference between plain PHP and a full stack framework like CakePHP. And yes please try to understand that if your website is only going to be getting 1000 visitors a day, it doesn't matter if your framework can output 1000 rec/sec vs 250 rec/sec if it takes you twice as long to build it in the former than the latter. But it's also the ultimate in arrogance for 99% of programmers out there to think that your dinky little php framework that you've cobbled together without xss prevention, no sql injection protection, no data sanitization, no built in validation, no unit testing, limited peer review, limited documentation ( if any ) and limited exposure for other people to comment on and critique is better than any of the top PHP frameworks out there. Same goes for your toy language &amp; OS. But yea, I guess you could call me a "young developer", I've only been programming for the last 13 years or so. What would I know.
Just so you know -- recaptcha's been hacked now. I've seen a blog that had it and was receiving a tremendous amount of spam.
You know, I was thinking the other day of the power reCaptcha has to mass register any site they want as they have millions a second typing out images for them.
Blogspam: [Source](http://webdeveloperplus.com/php/integrate-customized-recaptcha-in-your-php-application/)
Just so you know -- they were never hacked. http://musicmachinery.com/2009/04/27/moot-wins-time-inc-loses/
Hey I have already given a footer that reference is from webdeveloper plus
Yeah, but it's not a link.
iterables are cool, I needed to show some dates in my GUI. So it shows the previous 6 months, this month and 11 months ahead (and has '...' to show a calendar) It was real simple to make a little iterable class to return these dates, so I can do: $d = new DateSpan(); foreach($d as $month){}
Benchmarking a hello world program is pointless
When they're developing the program off of their own base (&lt;6) they charged $150 and you actually got to keep the program forever. Now they're building what is basically a plugin for eclipse, charging $399, and you have to renew each year to actually use it. What a joke.
I'm still running 5.5. I tried to upgrade once. Getting eclipse installed and configured with Zend was a hair-pulling nightmare. I gave up and have not tried to upgrade since. I have work to do, damn it. 
I was a big fan of the 5.5 series up until recently, but I switched to a Komodo/XDebug combo. It's got pretty much the same features and pretty much the same problems, but feels better not to be bothered by Zend pushng their "platform" bullshit.
You should give netbeans a go. I have a Zend Studio licence but never use ZS, just Netbeans. The only thing ZS has over Netbeans for me is a much slicker JIRA plugin, but I can live without that.
I have been loving Netbeans lately. The Mac OS X UI is a little goofy, but it looks great under Gnome (I have been spending more and more time in Ubuntu) and it is nice to have a great, cross platform IDE that has most, if not all, of the features I really need. I use Mercurial DVCS so I love that support is built into Netbeans. I find myself remembering to commit a lot more frequently.
Are they trying to make themselves look like idiots with the double-vs-single quote thing? Same for the other stupid crap people suggest (e.g. echo vs print, dot vs comma in echo, isset vs array\_key\_exists, require vs require\_once, etc...). I might agree with many of these nanosecond optimizations, but in a list as short of that one there are much more effective techniques they could have suggested. In particular, some of the often suggested techniques are just plain wrong. Specifically, I've seen people introduce bugs by using require instead of require\_once, or by using isset over array\_key\_exists. There is a reason require\_once and array\_key\_exists exist...use them. Edit: reddit syntax SUCKS.
You are. Don't waste your precious time with NANOSECOND optimizations.
Couldn't agree more. I've been using Netbeans for about a year now (with my PHP stuff) and I am extremely impressed. Death to ZS.
so one might be lead to believe
I wish it was hacked then some good OCR might come out of it, but the Spam would rise also. Kind of a Catch 22.
Hmmm.. $city = $record-&gt;city; $location = $record-&gt;city; $postal_code = $record-&gt;city;
I get €399.00. Since when is €1 = $1?
A direct copy/paste- "$ 399.00" Believe it or not some places actually change the price of things based on region. Shocking I know.
I am not saying you're wrong but Zen is taking the piss thinking that I would pay euro to dollar parity
My bad- I hereby upmod you and downmod myself :'-(
It's my bad, I wasn't clear.
Thanks guys. I'll have to look into this.
Although I would personally prefer a pure php solution such as Pake, [Phing](http://phing.info/trac/) is much better maintained and has a bigger community/more features.
Well, it doesn't sound like a problem, as you still can execute phing-tasks from pake
Downvoted; this has nothing (specifically) to do with strtok. It has to do with how PHP handles "truthiness".
IMHO any toString() method should simply output a "string version" of the object. You should not be attempting to handle XML output, you should not be attempting to handle exceptions or anything else. If you want XML output, add an XML method.
Well, PHP manual states: The __toString method allows a class to decide how it will react when it is converted to a string. So, no limit on what should be in output. Class could be a simple data container, and __toString() allows you to have a string _representation_ of that container in an elegant way. Honestly I see no good uses for "string version" you are talking about, if you are using it for debug purposes (as toString is often used in say Java), then you could rely on var_dump()/xdebug with more informative output. If you are using it to have data in some format (plain-text, xml whatever) and code inside of it is not trivial, then exception could be thrown - and as such inability to process exeptions is an issue. Lastly, I don't see why I shouldn't be attempting to handle complex logic in __toString(), what good purpose this method was created for then? By the same token, you can have your "string version" of object by introducing stringVersion() method.
I'm the only one that gets annoyed by the release cycle? 6.0 -&gt; 6.1 -&gt; 7.0? Why the big jump? What new features are so awesome that required a new major release? 
&gt; Use APS.Net. Are you sure, you didn't mean http://www.aps.org?
Zend Frameworks Zend_Form render() method also have a proxy, and is accessible via __toString(); overall this pattern is not that uncommon - you have some method, that uses complex logic, and then you want to provide your clients with additional more elegant interface to call that complex method - so you proxy it in __toString();
Same thing with __sleep. I learned this the hard way.
How about looking into the CakePHP or symfony source code to see how those frameworks securely handle authentication. You could also look at the source code for Wordpress. These are all modern systems which have had their login scripts thoroughly vetted by many developers. You almost certainly are going to want to [hash and salt](http://pbeblog.wordpress.com/2008/02/12/secure-hashes-in-php-using-salt/) the users' passwords.
Extra salty hashes are what make authentication systems secure. 
You could consider using OpenID. There's no reason to have people create another username and password. There are several [existing PHP libraries](http://openid.net/developers/libraries/#php).
Openid is still too confusing for most people. Hell, I'm a web developer and it took me a while to understand it.
zend authentication
Came here to say the same thing but for CodeIgniter out of personal preference. The idea here is just like you said, look at some quality code from some of the 'big guys', get an idea of how they are doing things, and implement a solution that works for you.
I recommend looking at the documentation for OWASP's ESAPI (Enterprise Security API) at http://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API , and its PHP implementation at http://code.google.com/p/owasp-esapi-php/source/checkout 
&gt; if($_POST['user']='dumbass' AND $_POST['pass']=='fuckfuckfuck'){ Seriously?
I don't think CodeIgniter has built-in auth library, there are many user contributions though.
Just because it's old, doesn't mean it's wrong. Perhaps the problem was essentially solved 4 years ago. 
Wow. That's some horrible code. Downvote.
Could you elaborate what's so inherently bad about it?
* No input validation. * No separation of logic. Input is taken, handled, and output spat out all in one place. * Stores auth data in the same place that handles auth logic. * Uses POST superglobal, which among other things could be rather problematic if you want to do a "remember this login" type of thing. * HTML instead of XHTML. * Syntactic error in first 'comparison'. It's actually an assignment. And that's just a start. This is a very quick-hack procedural PHP4 approach. Basically, everything a sane programmer should avoid.
&gt; No input validation. then, what's this: if($_POST['user']=='dumbass' AND $_POST['pass']=='fuckfuckfuck') // corrected error &gt; No separation of logic. Input is taken, &gt; handled, and output spat out all in one place. So you need full mvc or the like separation of concerns in a reddit comment? &gt; Stores auth data in the same place that handles auth logic Well there is only login logic, but yes, you can easily replace 'dumpass' and 'fuckfuckfuck' with some kind of database, but then again, in a reddit comment? &gt; Uses POST superglobal, which among other things could be rather &gt; problematic if you want to do a "remember this login" type of thing I'm not following... how $_POST is related to "remember this login"?`And obviously "remember me" functionality was not implemented in that simple reddit comment. &gt; HTML instead of XHTML This is totally unrelated. It's your preference that you like for example XHTML 1.0 strict more than for example HTML5. &gt; Syntactic error in first 'comparison'. It's actually an assignment Ouch, I missed it, that's bad... but easily found and fixed. &gt; This is a very quick-hack procedural PHP4 approach. Basically, &gt; everything a sane programmer should avoid. Most of the code in the world is procedural. Should we try to avoid most of the code in the world, if someone comes with a new paradigm... and well, how can you tell which paradigm is better than the other in general talk.
&gt; then, what's this: if($POST['user']=='dumbass' AND $POST['pass']=='fuckfuckfuck') // corrected error That's not input validation (which I think the parent means should be input sanitizing). Who knows what you're getting? also...AND? &gt; So you need full mvc or the like separation of concerns in a reddit comment? ...plus more of the rest of your comments. The OP asked for "a good, secure" script. Doesn't have to be MVC, but the example does not apply here. The example is neither good nor secure. I'm sure the OP knows how to check if a username and password match, but wants a pointer on best practices for logging in.
Have an example: if (($email == "") || ($password == "")) { return false; } $storage = new Zend_Auth_Storage_Session(); $data = $storage-&gt;read(); if($data) //are we already logged in? { return true; } $adapter = new Model_Myauthadapter(); $auth = Zend_Auth::getInstance(); $authAdapter = new Zend_Auth_Adapter_DbTable($this-&gt;db, 'users'); $authAdapter-&gt;setIdentityColumn('email') -&gt;setCredentialColumn('password') -&gt;setIdentity($email) -&gt;setCredential(md5($password)); $result = $auth-&gt;authenticate($authAdapter); if ($result-&gt;isValid()) { return true; } return false; Edited for missing code in my paste.
&gt; Who knows what you're getting? (...input sanitizing) The example is clearly input validation. And there is no use for sanitation in the example above. You cannot get past the '==' checks without correct values (even without sanitation). How exactly example is not secure? Ok, the username and the password is rather weak, I admit, but can you elaborate more on security concerns? It's not even prone to session hijacking as it doesn't have logic implemented to check the $_SESSION variable. Both of you say that it's not secure, but you cannot tell why it is not secure. Yes, I admit that I would not write that kind of code and that the example doesn't really answer the questing... well the example can be read as "think for yourself - it's not that hard!".
Yes, you can use either "&amp;&amp;" or "AND" in PHP. Same with "||" or "OR"
Yes, that works for the ONE example and it's secure for that ONE example but, my point still stands. OP likely wants best practice examples for a login and not a knock off. Add a database backend to that example and unless you wanna type mysql_escape a whole lot, it ain't secure. I was thinking in terms of scalability, that example isn't secure.
...and yes, I realize the futility of building an example that's secure, scalable in a reddit comment...but I just don't give a shit. :) That was a terrible example.
Yeah, my bad. It's so ugly, though, that I try and forget it. PHP can be so very ugly sometimes :(
I wish I didn't understand it.
My definition of "good" for a login script would also include, "remember my username", "keep me logged in", "reset my password using confirmation of reset". Yours is no more useful or featureful than Basic Auth tossed in an .htaccess file.
If its so easy to do it right, why didn't you do it right?
It's like making a lego house. I told him to use legos, and you're asking why I didn't make the whole house. Becuase it's easy, and I have better things to do. I mean, he clearly would want to use session\_regenerate\_id() and such to track the session, or add a remember me option, or maybe he doesn't use session and wants to track the data in sqlite on a ramdisk, or in memchached even. I don't know what he's looking for, and that's why I didn't waste my time. Again, if you can't even write the login functionality, what exactly is he expecting to be able to accomplish on the rest of the site? Is he incapable of not learning off examples that are "more than 4 years old" or even coming up with basic login structure himself? 
Incidentally, I had a very very bad day today. But I was able to use php.net and google when I was learning, so you'll have to forgive me if I lack sympathy for such a question. 
He didn't just ask how to write login functionality, he asked for recommendations for a **good**, **secure** script, both for educational and practical reasons. It's like he asked how to build a suspension bridge across a large bay that would be able to withstand severe weather, and you were all like "Duh, just get some cables, and shit, and hang it across a few towers, like this", and built a bad model out of legos and strings. Actually, the worst thing about your example wasn't the example itself, but the misplaced arrogance which you included with it. 
Us lazy people just stick to PHP 5.2. :)
and, why is this in PHP?
As a last ditch attempt to make this somehow relevant to the subreddit, here's [how to create a self-signed SSL certificate in PHP](http://us3.php.net/manual/en/function.openssl-pkey-new.php#42800). Note that it's entirely non-obvious from the manual pages what bit size will be used for your RSA key. Set it explicitely if that matters.
Link or GTFO.
Yeah, it sure did. That SitePoint article examined the fuck out of the complaints.
Real SSL certs are cheap. If you intend for anyone other than yourself to use your site, just buy one.
It' called chaining operators. Basically they are evaluated from right to left. Edit: Why does it say "2 comments" under the headline, but when I get to the comments page it tells me there isn't anything there? 
I guess I've just never used the .= operator that many times, didn't expect four in the result when it happened! No idea, maybe reddit evaluated the code and /0...
EDIT: I see you updated to .=, nevermind
Yeah, d'oh!
why would this be a syntax error? it makes perfect sense. it is equivalent to: $r = ''; // $r == ''; $r .= 'a'; // $r == 'a'; $r .= $r; // $r == 'aa'; $r .= $r; // $r == 'aaaa'; echo $r; what is the problem here again? it did what you asked of it.
I just assumed (incorrectly obviously) that if you tried to concatenate the same string over and over, it would cause an error. The same trick in Ruby and Javascript returns only 'a'. Python throws a syntax error. Of the languages I have at my fingertips, only Perl and PHP return 'aaaa'. I understand the logic process, but I wondered what would be correct?
if ruby and javascript throw syntax errors, then their operators arent returning the correct type. im certain that they are evaluating in the correct order, since any concatenative operator would evaluate its RHS first.
First it adds 'a', then you concatenate $r with itself and you get 'aa', then again you concatenate it with itself ('aa' with 'aa') and you get 'aaaa'. Edit: Never mind, authorblues already explained it.
Just for clarity here are my tests: PHP: $r = ''; $r .= $r .= $r .= 'a'; print $r; // 'aaaa' Ruby: r = '' r += r += r += 'a' puts r # 'a' Python: r = '' r += r += r += 'a' # File "", line 1 # r += r += r += 'a' # ^ # SyntaxError: invalid syntax Javascript: var r = ''; r += r += r += 'a'; alert(r); // 'a' Perl: my $r = ''; $r .= $r .= $r .= 'a'; print $r; // 'aaaa' So I guess only Perl and PHP do it correctly... Do you think this is a bug in the other language's parsers, or just the language differences making themselves apparent? Edit: Newlines before the indents
Lots of languages use right to left evaluation. I got told off for writing (in Pascal) something like: if (pop()="/") result := pop() / pop(); in my postfix evaluator. If your postfix expression is "8, 4, /", right to left evaluation, the division symbol will be popped off first. Then the "4" will be popped into the denominator. Finally the 8 will be popped into the numerator... 8 / 4 = 2. It gives the right answer, even though it looks like it should give the wrong answer. Or maybe I am talking bollocks. My tutor told me not to rely on implementation details of the language like this. 
Interesting. Slight change: $r = 'a'; $r .= $r .= $r .= 'b'; echo $r; // abababab In javascript: var r = 'a'; r += r += r += 'b'; alert(r); // aaab PHP's behavior is the same as in C. There are three statements in the second line, evaluated right to left, and it makes sense, as already explained elsewhere. In javascript, it seems to be evaluating left to right, but then I would expect something like r += 'b' += 'c' += 'd'; To be ok, but causes an exception instead (invalid assignment on left-hand side.) (Tried on firefox only, can someone else try it elsewhere?)
I think python is doing it right because... it's python
lol, uh oh...
The PHP one, seems to be the same, but the javascript one is strange, I'm getting the same problem on WebKit here: ReferenceError: Left side of assignment is not a reference. But the first result of 'aaab' seems to go against the right side being processed first, I wonder if Java is the same...
Yeah, it's weird. Javascript does indeed evaluate right-to-left, since this pseudocode: $a='a'; $b='b'; $c='c'; $d='d'; $a .= $b .= $c .= $d .= 'e'; Does the same thing in both php and javascript. My guess: in javascript, final, actual assigment is deferred until the statement ends. So this: var r = 'a'; r += r += r += 'b'; Does this: var r = 'a'; // r == 'a' r += 'b'; // r will be 'ab', but not right now. Still returns 'ab', though r += r; // r (still 'a') concatenated with the returned value 'ab' yields 'aab'. r still unchanged. r += r; // r (still 'a') concatenated with the returned value 'aab' yields 'aaab'. r still unchanged. // now r is finally assigned 'aaab'. *EDIT*: Maybe the folks in the [javascript subreddit](http://www.reddit.com/r/javascript/comments/9ao3t/javascripts_chain_assignment/) can shed light on this.
I would say Ruby and Javascript have a very confusing behaviour there. There's no single perfect answer to how it should work, that depends on how the language's grammar is defined. That said, I would say that Ruby's and Javascript's grammar is neither useful nor intuitive in this situation.
Maybe this was more of a /r/programming question than /r/PHP, no forward thinking on my part...
Also, I think the first comment was my text content because it wasn't posted as a link. Maybe not, I like assumptions. Edit: Correcting my poor use of tense.
Well, your question was specific to php. I kind of diverged it to other languages. Also, in C it may be invalid due to [sequence points](http://en.wikipedia.org/wiki/Sequence_point). A common related trick (and discussion of its problems) to swap two numbers can be found [here](http://prokutfaq.byethost15.com/SwapTwoNumbersWithoutTemporary).
I wonder if there are many applications/scripts out there that rely on this feature...
It is the same as: $a = $b = $c = 5;
Javascript (there might be a better way, but I just threw this together): r += concat(r += (r += 'a'),r += 'a'); alert(r);
How do you learn anything using other peoples code? Most of the time it doesn't even fit your needs anyway. http://php.net/manual/en/book.session.php 
With appropriate commentary from someone with a brain.
here's one that I find makes developing easier: /* $commentedCode = yep(); //*/ now I can just add and remove `//` to the first line to toggle commenting of that section, because instead of ending with `*/` I ended with `//*/` which works whether the `/*` is commented out or not. basically it saves me having to go down to the `*/` and removing that each time.
Another one that *everyone* should *always* use is this: Bad: for($i=0 ; $i&lt;count($arr) ; $i++) Good: for($i=0, $c=count($arr) ; $i&lt;$c ; $i++) The 'bad' way will calculate the size of the array on *every* iteration - it's massively inefficient. More on efficiency tips @ http://www.phpbench.com
In addition to echo &lt;&lt;&lt;LABEL, you can do: sprintf( &lt;&lt;&lt;END SELECT ... FROM table1 JOIN table2 ON(table1.blah = table2.blah2) WHERE foo = '%s' AND bar = %d END , $stringarg, $numarg ); which makes for easier copy-paste query testing than when you have queries made up of concatenated strings.
&gt;Good: for($i=0, $c=count($arr) ; $i&lt;$c ; $i++) Better: foreach($items as $key=&gt;$value) {} 
Should really use bind variables instead. $sql = " SELECT * FROM DUAL WHERE FOO = :foo"; $binds = array(); $binds['foo'] = $arg; 
sprintf is very slow and should not be used in any language that has concatenate abilities. $sql = 'SELECT ... FROM table1 JOIN table2 ON(table1.blah = table2.blah2) WHERE foo = \'' . $stringarg . '\' AND bar = ' . $numarg; or $sql = "SELECT ... FROM table1 JOIN table2 ON(table1.blah = table2.blah2) WHERE foo = '" . $stringarg . "' AND bar = " . $numarg;
foreach actually has more overhead, for is faster. $x = count($arr); for ( $ i = 0; $i &lt; $x; $i++ ) echo $arr[$i];
I never thought of that, good call.
yeah, foreach is better than doing the count in the loop, but worse than mine or your suggestions (which incidently are exactly the same ;0) ) edit: yoru!=your edit2: &gt; exactly the same although, I prefer mine because you hardly need to change the syntax :D
I can't take credit for the idea, I read it somewhere.
then what? how do you pass $binds to the SQL server? please elaborate, it looks interesting. edit: [mysqli_prepare](http://uk3.php.net/manual/en/mysqli.prepare.php), I think.
http://code.google.com/speed/articles/optimizing-php.html I think the commas over the concatenate method was debunked, use concatenation. eg. echo 'string ' . $var not echo 'string ', $var
The ability for programmers to easily test code usually outweighs the need for sub-ms speed improvements. But YMMV.
Relatedly, I had a boss who *swore* that `echo "some text"` was slower than `echo 'some text'`. I still use single quotes to this day as a result. I don't mind though because I dislike `"embedded $variables"` as they don't stand out in syntax highlighted code. `'embedded '.$variables` looks nicer to my eye.
Use whatever method you want, just know whats faster in case one day you server is in fact in need of sub-ms speed improvements, then you can go over your million lines of code and write it how you should have in the first place.
 echo "some text" is indeed slower than echo 'some text' I've ran my own tests. :P I guess I am old school I still use notepad (no syntax highlight)
haha, you know when I first started developing we used notepad. god it was difficult. Seriously do yourself a favour and get hold of [textpad](http://www.textpad.com). edit: re the quotes. I was prepared to believe him until I saw [phpBench](http://www.phpbench.com) - scroll to the bottom and check out the results. Perhaps on your version/OS it's different though.
No it's not. As discussed [here](http://groups.google.com/group/make-the-web-faster/browse_thread/thread/ddfbe82dd80408cc?pli=1) in a google group reply from the PHP team in response to Google's bullshit filled speed tips page. &gt; Benchmarks run against PHP 5.2 and 5.3 show that parsing double-quoted strings with interpolation is no slower (and often faster) than single- quoted strings using concatenation. When simple strings with no variables in them are used, the performance is clearly better with double-quoted strings due to implementation details in the engine. See the benchmark posted at [http://pastie.org/523023](http://pastie.org/523023).
The fastest PHP implementation would be: $sql = "SELECT * FROM table1 JOIN table2 ON(table1.blah = table2.blah2) WHERE foo = '$stringarg' AND bar = $numarg;"; PHP is faster with variables inside strings than doing '" .$var ."'. Personally I'd have added ` before and after all table/field names too.
for security I'd change it to: $sql = "SELECT * FROM table1 JOIN table2 ON(table1.blah = table2.blah2) WHERE foo = '$stringarg' AND bar = ".(int)$numarg; unless you're already sure $numarg is sanitised.
stdClass! $var = new stdClass; $var-&gt;text = "text"; $var-&gt;textTwo = "text2"; $var-&gt;int = 0; $var-&gt;time = time(); $var-&gt;wHaTeVeRyOuLiKe = "see?"; You can add whatever you want after the $var-&gt;, and reference them in the same way, so you could do echo($var-&gt;time); Sure as hell beats pre-defining variables with confusing/needlessly long names to avoid collisions, just rename the stdClass object for code you need separated.
Yeah I don't tend to reference anything in a SQL query unless it's been sanitized, and escaped. Inputs should be escaped and checked before you even build a query using them. Although you should also be ending your queries, and not just the variables that contain them with a ; (;";)
Wow, that is a sweet little hack there! 
I don't mean to be a dickhead, and I'm aware that I've commented a bajillion times on this thread, but: &gt; [The query string should not end with a semicolon](http://uk3.php.net/manual/en/function.mysql-query.php)
I do camel case for Classes and methods/functions, with classes having capital case. Underscores for variables. 
Yeah I've seen that but PHP and the MySQL extension don't care if you add that semicolon at the end, no warning is raised, or error returned, and it actually makes things easier when reading code to clearly mark what is the end of the query, and what is the end of the variable. Especially when there is type-casting or variables spliced in everywhere, or when other developers on the project are prone to copy &amp; pasting queries into a SQL app and trying to run them in batch without the terminating ;, or leaving the PHP variable terminator in as a query terminator which is in the wrong place. $query = "select * from `db`.`table` where `field`='value';"; is just as easy to read, and safer for non-PHP uses than: $query = "select * from `db`.`table` where `field`='value'"; It's one of those things PHP lets you get away with because there are perfectly valid reasons for the semicolon to be there, and no downside to it being there either. **Edit: Downmod? Seriously?**
All valid reasons, so fair enough. Copying into an SQL session and having to add a bunch of semicolons is indeed annoying.
Depends on the type of database you're connecting to (or the database driver you are using). for example, if you're connecting to Oracle using OCI8, you'd do: $sql = " SELECT USERS.ID, USERS.FIRST_NAME, USERS.LAST_NAME FROM USERS WHERE ID = :id"; $binds = array( 'id' =&gt; 1 ); $results = $db-&gt;query($sql, $binds); If I recall correctly, in my SQL you'd so something like: $sql =" SELECT STUFF FROM STUFF WHERE ID = ? AND FIRST_NAME = ?"; $binds = array(1, 'John'); $results = $db-&gt;query($sql, $binds); This'll help you against SQL injections. It'll also make your queries faster if the DB caches the SQL.
I want to hear people's idea on formatting switch() blocks in code. I used to do this: switch($foo) { case 'bar': statement(); statement(); break; case 'baz': statement(); statement(); break; default: statement(); } but after seeing this form in some particularly attractive code I switched: switch($foo) { case 'bar': statement(); statement(); break; case 'baz': statement(); statement(); break; default: statement(); } And, of course I've seen many other forms. Another attractive one is: switch($foo) { case 'bar': statement(); statement(); break; case 'baz': statement(); statement(); break; default: statement(); } What do you use? What do you think is most legible? And on a related note, does anyone know of any particularly good style guides for PHP?
I use #2. Incidently, you can also do this: switch($foo) { case 'bar': case 'baz': statement(); statement(); break; } if the code for 'bar' and 'baz' is the same. When `$foo=='bar'`, it'll just "drop through" to the `case 'baz':` section because there's no break.
Need a simple loop with *n* iterations? You can always use: $n = calc_iters(); while($n--) { code(); } or for added readability (to some), you can use the goes-to operator: $n = calc_iters(); while($n--&gt;0) { code(); } Note: There isn't actually a goes-to operator in PHP.
The key being "using concatenation". His tests didn't concatenate anything which is why he got the results he did.
I thought ereg was going but preg is staying in 6.
&gt; *When simple strings with no variables in them are used, the performance is clearly better with double-quoted strings due to implementation details in the engine.* Right there in the original quote and source.
Output buffering is pretty handy too. function modifyOutput($buffer) { $buffer = str_replace("Y halo thar!","Hi",$buffer); return $buffer; } ob_start("modifyOutput"); echo("Y halo thar!"); ob_end_flush(); Outputs: Hi
In user land code, the de facto standard is that of PEAR/Zend Framework. I try to follow that, although with some slight house rules that I've picked up over the years. I use `CamelCase` for classes, `lowerCaseCamel` for methods, `underscore_lowercase` for properties and for global functions. If a name contains an abbreviation, I capitalise only the first letter. So it's `XmlBuilder` - not `XMLBuilder`. Namespace prefixes (Eg. pre php 5.3 style namespacing) are `underscore_lowercase`. (This is a derivation from the PEAR standard) File names are always lowercase. (Also a derivation from PEAR standard) I use a mix of two conventions here; Either a single file contains a single class. In that case, the file is named by the class. The class `foo_Bar` is in `/foo/bar.php`. The other convention is to put multiple classes into a single file. I would do this if the classes are closely related. Such a file would be named by the package that classes belongs to. So the file `foo.inc.php` might contain class `foo_Bar` and `foo_Cuux` and so forth. This type of file can also contain global functions.
`foreach` is much more readable, and provides less coupling. I very rarely use for loops.
I had always thought you could use brackets to delimit each case. I have been doing that for a while and it never threw a fuss.
If you write class methods that don't need to return anything, return $this. Here is a block of code using a framework I am working on: $this-&gt;view -&gt;assign('foo', 'Hello') -&gt;assign('bar', 'World!') -&gt;addCSS('home.css') -&gt;display('home'); This is quite handy and doesn't require a lot of extra typing but it only works in PHP5.
For the record, I just did did a benchmark (ran 10 times each): $_start = getrusage(); for( $x = 0; $x &lt; 3000000; $x++ ) { $value = rand( 0, 10000000 ); #$sql = "SELECT * FROM table WHERE blah = " . $value . " AND joe = " . ($value + 1) . " AND fred = " . ($value + 3); $sql = sprintf( "SELECT * FROM table WHERE blah = %d AND joe = %d AND fred = %d", $value, $value + 1, $value + 3 ); } $_end = getrusage(); $result = $_end["ru_utime.tv_sec"]*1e6+$_end["ru_utime.tv_usec"] - $_start["ru_utime.tv_sec"]*1e6+$_start["ru_utime.tv_usec"]; $result += $_end["ru_stime.tv_sec"]*1e6+$_end["ru_stime.tv_usec"] - $_start["ru_stime.tv_sec"]*1e6+$_start["ru_stime.tv_usec"]; $result /= 1000000; print "$result\n"; The getrusage() stuff blatantly stolen from PHP's [getrusage](http://www.php.net/getrusage) comments. The concatenation version averaged 5.01552s, and the sprintf version averaged 4.61009s. But like I said, YMMV, and additionally, always benchmark before optimization.
I've been using /* $boobs = 'good'; /**/ The same idea, but you remove and add /* in the beginning.
I wrote a bit of code to test this out : http://www.pastebin.org/9307 basically it summed up the contents of a 1,000,000 element array into a variable, looking only at the run time around the loop. Here are the results. == FOREACH == Elapsed user time: 91704 µseconds Elapsed system time: 265 µseconds == GOOD FOR == Elapsed user time: 103310 µseconds Elapsed system time: 333 µseconds == BAD FOR == Elapsed user time: 335705 µseconds Elapsed system time: 872 µseconds
interesting
same as you, although only $variableName not $variable_name
Output buffering is the key to every successful PHP template engine I've encountered. My code usually takes the form: extract($template_vars); ob_start(); include('where/ever/my/template/is.php'); echo ob_get_clean();
The rest of use use arrays.
That article has been widely derided in the PHP community for horrors and inaccuracies. See: http://php100.wordpress.com/2009/06/26/php-performance-google/ And for some real performance tips: http://php100.wordpress.com/2009/07/13/php-performance/ Summary for teh lazy: * Use a bytecode cache. APC is easy. * Consider doing profiling. xdebug. * Where needed, use caching. Lots of options. * Look outside of PHP first. Is your data stored correctly? Does every query hit the right index? * "Don't try to outsmart the engine." Single quote and double quote trickery has minimal impact. * Do real-life benchmarking. Switching your entire codebase to single/double quotes won't help one iota if it takes 2 seconds to build the entire page because your queries are slow. * C-based extensions are almost always faster than alternatives. For example, stop using PEAR's JSON module, start using the builtins. * Errors are costly. This is doubly true if you have a custom error handler. It gets called on every single error, and the performance hit can add up. (On one of our most complex pages, the time spent in the error handler to do *nothing* for E_NOTICEs complaining about unintialized array keys was 50% of the three second page generation time. The other 50% was in the database.) * Consider using the included default production php.ini, as it's been optimized for modern systems. (The 5.3 php.ini actually has a sane memory limit now!) * Pick a good big number for the "realpath" cache, which stores the full path names of things include/require'd (Edit 'cause I fail at markdown.)
The PHP naming conventions mentioned are very similar to those from Java. Our shop adopted them with a few changes from what you posted: * One class per file. Period, no exceptions. * If the class contains capitals, so does the filename. Nifty_Crap becomes Nifty/Crap.php * Thou Shalt Not Use .inc In Thy Filenames. Everything's a friggin' include. If it's a common function, put it in the app's existing common function directory (shared_code/includes) 
Good point on the coupling. A for loop like @dextro_ describes requires $arr to be... an array or an object with ArrayAccess. It's possible to have an iterable object that does not allow ArrayAccess.
&gt; "Don't try to outsmart the engine." Single quote and double quote trickery has minimal impact. I wish I could upvote you and the other voices of reason in this thread into oblivion. I have NEVER seen a PHP application that can be improved by @dextro_ (yes, I'm calling someone out specifically, the gauntlet has been tossed) and other's micro-optimization tips that can't be better improved by algorithmic and architecture changes. The sub-ms improvements listed will never be the bottle neck in your application. It is always program architecture, caching, or hardware issues. If it is none of these, then it is the choice of language: drop PHP and go straight to the bare metal. All the sub-ms improvements do is make your code more unstable (in that it is resistant to change), unreadable, and unmaintainable. And frankly, programmer time is **vastly** more expensive than cpu-cycle time ever will be.
It's commonly referred to as a "fluent interface"
 defined('SOME_CONSTANT') || define('SOME_CONSTANT', 42); The above is a quick way to define a constant if not already defined (usually useful when providing default constants that you expect may be overridden, e.g. if you wrote an app you were distributing and the end use might wish to override a constant for configuration purposes). function memoized_foo( $id ) { static $cache; if( !isset($cache[$id]) ) { // look up something by id $cache[$id] = $result; } return $cache[$id]; } The static keyword is really cool to use within a function. You can easily memoize (cache the return value) of a function. Functions that hit the database that you will call multiple times are great examples of where to use this (e.g. a function that retrieves a list of cities based state).
It's da bomb! Anyway, most people who use output buffering haven't found out [the buffer is actually nested](http://php.net/manual/en/function.ob-get-level.php).
Don't Yo Dog PHP. PHP is a templating language and ob\_start() and ob\_get\_clean() is more powerful than most PHP templating engines out there. You basically do: function render_template( $file, $vars ) { extract($vars); ob_start(); include $file; return ob_get_clean(); } render_template( 'template.php', array( 'var_name' =&gt; 'Replacement Value' ) ); Or you can use something like: render_template( __FILE__.'.tpl', get_object_vars( $this ) ); inside objects, eg. in __toString().
\*standing ovation\* I will just regurgitate this in the same general direction: Always seek to minimize code and maximize data. Remember: data is your asset while code is your liability. There should be no better feeling than the one you get from deleting redundant code and stripping unneeded variables. One must remember that the absolutely fastest executing function which is 100% guaranteed to never error or throw an exception and which needs no comments or other forms of documentation - will always be the one you've just deleted. In my tests, no-code has always been infinitely faster than every variation of double quoted strings, single quoted strings, embedded strings, heredoc syntax, nowdoc syntax, parsed variables, embedded variables, concatenated variables, printf(), print(), echo, etc. 
I believe that you can use both like you can with if statements and any other conditional block. if (condition) { // do something } if (condition): // do something endif;
I'm working on a project and the other programmer uses the while($n--) method. I've never seen it before and it sure beats what I usually use.
I've always wondered, how does ob_get_clean() (and the other methods) handle large amounts of text? Say you had several thousand characters you needed to output in a template file, would it be inefficient?
Bonus: The x86 instruction set has a single command that decrements a register and jumps, making loops of this style far faster than other loop constructs in some scenarios. Not sure how the PHP interpreter optimizes it, though.
#2 because it makes the most sense to me. I often get complaints from fellow programmers because I come from a design background and I format my code "all faggy like". But one by one they are converted when they realize that text-book C formatting isn't always the most legible.
The most productivity-boosting thing I ever did in PHP was switching to Python. - Interactive shell which can instantly give you a list of methods and properties of any class or instance _and_ the documentation for it - Debugger that uses the interactive shell (as in you can type and execute code in the debugging session to try out fixes faster) - Doesn't constantly harass you about leaving in extra commas in arrays/lists or missing curly braces or read like a tangled mess - Built in byte-code caching like APC - easy_install beats pear/pecl, I thought PHP really had a ton of useful libraries until I tried Python. - Django is crazy-simple and crazy-powerful and has so many re-usable components you can pretty much plug a site together. Y'all just got bitten by the _snake_! PSSSSS
interesting, I didn't know that. If your inner code *modifies* the variable you're looping over then foreach is less efficient. Example: $total = 0; unset($test); $test = array_fill(0,$size, 10000); $t = microtime(true); foreach($test as $key=&gt;$value) { $test[$key] = $test[$key]*2; } echo "self modifying foreach1 x as k=&gt;v: \t".(microtime(true) - $t).'&lt;br /&gt;'; $total = 0; unset($test); $test = array_fill(0,$size, 10000); $t = microtime(true); foreach($test as $key=&gt;$value) { $test[$key] = $value*2; } echo "self modifying foreach2 x as k=&gt;v: \t".(microtime(true) - $t).'&lt;br /&gt;'; $total = 0; unset($test); $test = array_fill(0,$size, 10000); $t = microtime(true); $count = count($test); for($i = 0; $i &lt; $count; $i++) { $test[$i] = $test[$i]*2; } echo "self modifying for, with precalc: \t".(microtime(true) - $t).'&lt;br /&gt;'; $total = 0; unset($test); $test = array_fill(0,$size, 10000); $t = microtime(true); for($i = 0; $i &lt; count($test); $i++) { $test[$i] = $test[$i]*2; } echo "self modifying for, no precalc: \t".(microtime(true) - $t).'&lt;br /&gt;'; results: self modifying foreach1 x as k=&gt;v: 0.74128484725952 self modifying foreach2 x as k=&gt;v: 0.68048596382141 self modifying for, with precalc: 0.49364995956421 self modifying for, no precalc: 1.1769111156464 I'm using microtime as I'm on windows atm.
well, you can of course have `$var['meaningfulName']` and `$var['codingHerb']` too you know.
&gt; I guess I am old school I still use notepad (no syntax highlight) Why don't you try vim instead? It's more old-school than Notepad and in fact carries even more bragging rights ("oh my god you use vi? hardcore!") and yet it has syntax highlighting, auto-complete, tabs, time-line undo, class/method jumping/navigation, spell check, regex search-replace, multi-file search with Ack and more. Also it runs on every platform out there including windows and iPhone.
this is all excellent advice, and I agree. The number one bottleneck in my experience has been badly written SQL queries/badly designed databases (but of course, that's SQL not PHP). Adding proper indexing can save *seconds*, whereas precalculating a for loop will only save ~10ms - and that's only if you're looping &gt;100000 times. But, _dextro and I weren't saying "these are the best things you can possibly do for your PHP application". It's not an either-or situation. These minor improvements are the sort of "little tips and tricks" that I thought the OP was asking for. If someone had asked "What are the most inefficient parts of a typical PHP application" then I likely would have answered differently. (SQL and disk-accesses being 2 important ones to me). Besides, it's fun to see if/how you can shave time off your code. I totally agree that there are more important things you should look at first when considering performance, but those things don't, imho, fall under the category of tips and tricks.
My guess would be that the output buffer is one of the most optimized parts of PHP as everything will pass through it once output buffering is enabled. AFAIK, the Zend Framework use these functions for templating too, and those guys usually know what they are doing PHP wise. Anyone up for some benchmarketing?
function\_name Object\_Name $variable\_name $array["key\_name"] I opted for using underscores due to the case insensitive nature of php Edit: Added escape char to underscores :)
&gt; Thou Shalt Not Use .inc In Thy Filenames totally agree. We had a server once (back in PHP3 days) that, it turned out, wasn't set up to process .inc as PHP (I wasn't responsible for the server setup) so anyone could go to ourdomain.com/db.inc and read the SQL server credentials.