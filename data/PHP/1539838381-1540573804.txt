Just wondering, if you have stand alone scripts run in the browser that use large sets of arrays - say in the order of 500k rows, with the potential of it being used dozens of times during peak times, should you clear the arrays once the output is displayed on the page ? &amp;#x200B; Would that be necessary for resource reasons ? Or does php clean that up once the page is finished loading?
Pre-Eclipse Zend Studio was actually pretty nice, especially the remote debugger and profiler. But their eventual move to Eclipse bugged us out as well, literally... it was barely usable at all anymore and as far as I remember more or less just Eclipse and a Zend-branded PDT plugin anyway. 
Once they’re output you could unset them but there’s not really a point when (generally) the php process ends
Looks great, can't wait to try it
it's a trap!
It's taken a similar trajectory to Symfony, with the framework being separated out into components. Some of them are pretty good, to be fair - for the last year I've been maintaining a Zend 1 legacy app and I'm actually looking forward to being able to start migrating some of the functionality to those components.
Relevant patches apply new versions as well. In best case they go downstream. What is really relevant is the support lifetime and avoidance of fatal bugs. Simply lag (few weeks) behind major releases with the option to instantly upgrade in case a fatal bug is patched and upgrade all current minor patched asap. Also tell your boss that php is a miracle with usually very small upgrade overhead. The real point is probably that monitoring releases and staying at the most secure version is an active task for devs and ops. Grats you have extra work now ;-)
You **don't ** PHP scripts in the browser for starter. You run them on the server. 
&gt; php was intended (originally) to be used solely And, [Pemberton’s French Wine Coca](https://www.coke.co.za/en/home) was originally invented as an alternative to morphine addiction. Reasons people use the thing can change. Benefits of using the thing can change. This doesn't seem like an unrealistic or unfathomable situation. &gt; definitely an abomination Does ascii rendering really cause you disgust or loathing? &gt; the fact taht any one of these things needed to be spelled out for you says a lot about you as a programmer this sentence says enough about you for me to know I wouldn't enjoy working with you.
I added Phinx to a legacy app this year. If your framework natively supports migrations, you should probably use them, but if not Phinx is a good alternative.
That's possible. At the very least, they were told that they will no longer be working on that, so either do something else (which they probably didn't like) or they were fired... &amp;#x200B; I don't know which is worse...
\&gt; Another thing is that you might have a very hard time finding developers that are willing to work with such an old version. It just screams "run away" from far away. Unless they are paid a ton of money, no sane person should jump into such an old project imo. &amp;#x200B; This for me is the biggy. I would not go back to &lt; 7 unless I absolutely had no choice. Going from 5.6 to 7 is straight forward and should have very few complications - its a no brainer. The only instances of people having issues is when there apps were written much earlier than 5.6 and they have been ignoring the billion+ deprecation notices for years.
yeh they are db records - to be honest i'm reprocessing them into simple arrays so that its easier to manipulate/process/filter and display - just saves a bunch of variable and logic juggling. Is it really the case even with servers today that 500k arrays is a big deal ? No its not displaying 500k rows on web page - its the processing/filtering on them that just occurred to me whether that would be a resource issue.
Let's hope there is a company interested in a bright PHP future. Keep up the good work guys!
I don't think so, those are the same links you can find here https://bugs.php.net/
PHP will start from scratch each request, but if they are using a lot of memory it might reach the memory limit before it enters in garbage collection or the end of the script. Other relevant question is if you could cache the result somehow, it will propably give you better performance than micromanaging variables.
Orms for prototyping. Raw SQL to optimize
Orms only if the application absolutely requires portability. Otherwise it's an abstraction layer too far in terms of potential lossage as to what modern SQL is capable of. 
ORM code is readable too, plus idk it sorta allows for some clear mind. Sure you have your methods of raw SQL code, that's a dialect of MySQL that may or may not work in Postgre (latter more often). However with ORM you can chain your methods and since you use an ORM your code will likely be portable, albeit it would severely limit you because you won't be able to use your database specific dialect and optimizations. Plus nothing stops you from slamming raw SQL in your ORM if that's your cup of tea I guess. To me ORM is basically how a database handling service should be, easy to program, and if you really need to get to the nitty gritty of it - you can. I mean, sure, sometimes even the best of DB designs force you to write queries that force key usage for this statistic that nobody is going to use a month from now but you need it now, so yeah, raw SQL has its charms certainly. Most of the time you don't need it though. My 2 cents.
CRUD? ORM. Performance? SQL + object cache. Helps to keep your ORM separate from your models so you can conditionally read/write - e.g. select ID's using SQL, load data from object cache, `save()` operations pass through ORM.
Also a note: I don't write everything by hand, inserts can be done with just a key value array, updates can be done by key value array with plain where and or string. Just mainly the selects is what I'm talking about.
ORMS for 99% of CRUD actions. SQL for reports and the 1% of CRUD actions that don't suit an ORM.
First what I say below is based on benchmarks I've made but not publicized. So take this with a grain of salt. Short answer: SPX overhead is higher than XHProf one (I don't remember but maybe by a factor of 2 to 10 per function). Medium answer: this is a fairly complex topic which should at least be covered by a blog post, but in few points: - XHProf is not maintained anymore and has several flaws, among them: - use of rdtsc which were acceptable back in 2009 but far less now (kernel support outweighs it) - 5ms sequential spin per core (i.e. 120ms hang per request/script on 24-CPU host) - organic code base &amp; still unfixed segfaults (sounds scary) - no PHP 7+ support - PHP 7+ XHProf based profilers exist, the most popular one seems to be [tideways/xhprof](https://github.com/tideways/php-xhprof-extension) - SPX overhead is significantly higher (2x to 10x) than tideways/xhprof one - but SPX accuracy is close (if not better) to tideways/xhprof one: this is due to the fact that SPX is able to subtract most of its overhead from measured values - the wall time overhead difference between SPX and tideways/xhprof is negligible or not noticeable in most cases - you will notice the overhead difference in particular use cases which are CPU intensive with tight (very fast) functions traced - in these particular use cases, sampling is IMHO the best solution (if not the sole one) - tideways/xhprof does not support sampling profiling - SPX does support sampling profiling (as well as original XHProf) Again take this with a grain of salt, my opinion is not neutral. To be completely fair I should publicized proof/benchmarks. 
Been working on windows since June, can't wait to switch back to Ubuntu. &gt; Never shun a proven technology that runs a huge chunk of banking's backbone. If YOU had issues with it then that's on YOU. Except that the windows issues are not on me or anybody else. They are windows issues, proven issues, that are most likely never going to be fixed within a timeframe that benefits me. &gt; have you actually used one in production, you know, for something that's Windows native? Windows is a standard desktop OS. A lot of companies don't want to "waste time" on anything else, nor a lot of money on apple products. Linux based OS' can cause more maintenance than desired. &gt; hurr durr no bash trashcan OS Having a proper terminal/console available is a valid criteria for developers. &gt; Welp, there's bash for windows fyi. WSL has poor file IO. Git bash and others are merely emulators that suffer from other quirks. 
You seem like triggered Microsoft fanboy tbh. I‘m actually using Windows besides Linux and Mac Os and all I can say that for developer experience I find Linux and MacOs way superior. What really annoyed me about Windows as a regular user was that the update notification is a full screen banner which even pops up while being in a fullscreen application, leading to minimizing it and destroying my multiplayer gaming experience several times. Also the fact that it was not possible for me to do disable that popup without deleting system files shows me that they only target non professional users. Additionally it is not possible to disable the restoration of previously opened programs upon restarting. There are many problems with Windows especially coming, ironically, with installing updates, leading to programs not working f.e., which is fatal in a professional environment. If you would like to find more about Windows problems just ask Google.
&gt; They are windows issues, proven issues, that are most likely never going to be fixed within a timeframe that benefits me. What issues are you implying? &gt; Having a proper terminal/console available is a valid criteria for developers. &gt; WSL has poor file IO. lolwut?!? Have you tried WSL in the past year? Because I'm using that on a daily basis and IO is the least of my concerns. I've even set up VS.Code to launch PHP/xDebug through that same bash. I cannot see a difference between WSL ubuntu and native desktop ubuntu (as I have that one too on a dual-boot) 
Half your post is dated bullshit, like most of this echo chamber tends to become. In Windows 10 btw, there's this thing called "Focus Assist" and it shuns all sorts of notifications until you are done with w/e you are doing. If you dig in my posts history you'll see that I play a lot of Overwatch and I'm kinda good at it (top 1% EU) and not even once have i been forcefully minimized or shut down during gameplay. I don't even know what system files you are talking about. &gt; Additionally it is not possible to disable the restoration of previously opened programs upon restarting. You seriously need to update.
[Query objects](http://atlasphp.io/cassini/query/select.html) that mimic plain SQL, with an [ORM](http://atlasphp.io/cassini/orm/reading.html#1-1-3) built on top of that that [handles the relationships](http://atlasphp.io/cassini/orm/relationships.html) and wires the objects together for me. Best of all worlds, including the ability to descend through the layers to "naked" SQL via PDO when needed.
Yeah. But zend framework is fairly popular. That was my go-to framework. This is sad.
I like [DBAL](https://www.doctrine-project.org/projects/dbal.html). I can write plain SQL queries with HEREDOC (plus it's well integrated with PhpStorm: you can execute queries defined in your PHP code). Also, I avoid writing having too many joins: I prefer to create a SQL view as a facade, which forces to name which data I'm retrieving, and opens room for further optimizations. When having to deal with a variable query structure, I never ever concatenate SQL parts by hand: I use the QueryBuilder. &amp;#x200B;
Usually a good query builder and a migration framework is enough. People claim Doctrine ORM is not Active Record, but the proxies generated by that library beg the difference. Furthermore Databases now have good support for JSON aggregation, so it much much more easy to return multidimensional data in a single query than before, where if you had a n...n relationship, you had to at least make 2 queries, - a first one to the targetted table - get all the related ids, query for related records using the related. - reassemble the relationship manually. And yes, it was a complete pain in the asshole. The situation is much much different now. for instance if I have 3 tables users(id,username) projects(id,label) users_projects(users_id,projects_id) I can do something like that in pseudo sql. SELECT users.id,users.name, json_array_agg(json_object('id',projects.id,'label',projects.label)) as projects FROM users LEFT JOIN users_projects on users.id = users_id JOIN projects on projects.id = projects.id and get all my results in an directly exploitable result in one query. The irony of times, JSON, some half-assed serialization format, actually fulfilled the promises all object oriented databases failed to fulfill in the 90's. Most of you are too young to understand that.
I'm sick of ORMs. Every freakin' time I go to work with a project that uses an ORM, I end up frustrated. The #1 issue with ORMs is that they always make the model responsible for its own persistence, which means that if you use those models throughout your codebase, you now have global mutable state strewn about your code. The only fool-proof cure is to have two sets of structs: DB objects and Business objects- most of the time, they're almost identical except that business models can't save and load themselves. Then you wrap all the DB object operations in a DB class that implements a DB interface. The #2 issue is that ORMs are *very* leaky abstractions. There has never been a project I've worked on where I didn't have to know that we were using MySQL or SQLite underneath the ORM. "This ORM supports XYZ feature, except for MySQL". The #3 issue is performance, but we all knew that already. ORMs always do way too many independent DB calls to build up model relationships. This is assuming the ORM even works correctly. I just got done with a Node app that used Sequelize (by far the most popular ORM for JS) and the damn thing barely even works. Some documented options in the constructor are not honored, it's bad at truncating tables in a sensible order, etc.
&gt; Half your post is dated bullshit, like most of this echo chamber tends to become. How come it is dated bullshit when it just happend to me recently? It doesn't matter how often you're trying to argument with "dated bullshit" or "echo chamber", it won't change a fact. &gt; In Windows 10 btw, there's this thing called "Focus Assist" and it shuns all sorts of notifications until you are done with w/e you are doing. If you dig in my posts history you'll see that I play a lot of Overwatch and I'm kinda good at it (top 1% EU) and not even once have i been forcefully minimized or shut down during gameplay. I don't even know what system files you are talking about. I'm talking about MusNotification, which is a full screen popup that notifies one about new available updates. &gt; And your post sheds exactly 0 info about how or why Linux and MacOS are way superior for developers. Because of Bash? That's incorporated in Windows now. Asking such a question makes me wonder if you've ever tried Linux or MacOS as full time developer. No wonder you would like Windows more if you don't know anything besides it. \- Most packages are firstly developed for Linux, hence it's first citizen resulting in earlier, broader and more stable access. \- Linux is the most used operating system for servers as it's lightweight, secure, easy to use and to scale, especially since it's free. \- Linux is open source so no telemetry bullshit and other hidden backdoors. Also Apple has no interest to sell your data unlike Microsoft. \- The API and registry of Windows is inferior to Linux and MacOS simplicity of handling stuff with files. \- Linux has a better seperation of concern, that's why such things like containerization are possible and way more lightweight. \- Security and security levels with chmod are better integrated and superior. \- Stability of the system and programs, which applies to Linux and MacOS. How many times have I updated Windows to just find out that some programs are not working anylonger? Too often. \- User experience and OS design, like Windows 10 is a clusterfuck having 2 control panels, seems like a beta to me. \- Bash may be kind of part of Windows with the WSL but it's not directly part of the system, hence leading to an unpleasent experience. I've executed PHP, which was installed on Windows, from within the Ubuntu Bash and it worked until it didn't when trying to let it parse files that were on the Linux filesystem. Inferior to a builtin Bash.
&gt; What issues are you implying? - Lack of logging usability - Windows updates, especially when you put your PC to sleep and it wakes up by itself to patch and shut off your VMs - Poor VM performance - Backslashes in paths - Console emulators are sub-par to native linux - Missing middle-mouse-button clipboard, can't get it to work unless you install odd programs on windows - Lack of multi-display support, system tray won't come along, apps opening apps do not respect the location they were shut down at - Lack of SSH without WSL - Despite buying (!) the OS, I get candy crush and other useless cruft installed - If something breaks, you can't exactly debug it easily. Ask Microsoft and they'll tell you reinstall windows. Just a small list from the top of my mind. &gt; Have you tried WSL in the past year? Yes, you should try it with any decent sized project and git and tell me how long git status takes. I can tell you that this is ~2 minutes the first time and ~1 minute afterwards. On Git bash this is instant. &gt; I cannot see a difference between WSL ubuntu and native desktop ubuntu I can. &gt; but that doesn't mean Windows is in any way sort or shape - bad. Windows isn't bad, it's just not developer friendly unless you're 100% microsoft. &gt; Visual Studio is still the BEST IDE for serious software development. Everybody's gonna tell you that, but then again you can take your own advice and google it. I disagree on this. It's pretty good, but it's a chaos. The menu, the settings, the terrible patching. I use it for a C# project, but thinking of dropping it for something else. I'll take intellij over VS any day.
What is up with the name? What does that have to do with time range? Did someone think they’d use it to track their girlfriends menstrual cycle?
&gt; Why would they use functions instead of static methods? =\\ The reasoning behind ditching the named constructors was that they where not needed at all for the class to work. Moving the functionality out of the class means that If you like the new functions, use them, otherwise, stick to the class and you'll be fine. Also from a business logic point of view one may wish to have functions or methods that translate well in their own domain. for instance `Period::createFromWeek` could means many things depending on your domain logic. &amp;#x200B; &gt; Since PHP doesn't have autoloading for functions it means that file will always get loaded even when the functionality doesn't get used. PHP does not have function autoloading yet but the bundled autoloader as well as composer can autoload/require them nicely. Unless micro-optimisation is important for you I fail to see the issue with requiring this file which contains only namespaced functionnality. &amp;#x200B; &gt; In addition they're treating it like a value object, marking it as final, but in reality this value object is calling out to a bunch of functions, and now none of it can be mocked so all unit tests will always do these calculations no matter what. An interval is a value object so why would you want to mock it ? What would be the usage ? FWIW there was a lengthy discussion about [why the class is now final](https://github.com/thephpleague/period/issues/54) hope this answer your question &amp;#x200B; &amp;#x200B; &amp;#x200B;
[https://en.wikipedia.org/wiki/List\_of\_time\_periods](https://en.wikipedia.org/wiki/List_of_time_periods)
&gt; The #2 issue is that ORMs are very leaky abstractions. There has never been a project I've worked on where I didn't have to know that we were using MySQL or SQLite underneath the ORM. "This ORM supports XYZ feature, except for MySQL". &gt; &gt; This is the logical consequence of an ORM. ORM developers just can't keep up with every SQL feature in every DB so they essentially target only the features that can work in every DB they support, otherwise the ORM is essentially broken. Fortunately, PHP isn't Java so it is easier to map rows to types without using any libraries, you can't do that easily with stock JDBC AFAIK.
ORM for almost everything pure SQL for reports and or anything that requires something beefier or isn't supported well by ORM
The best of both worlds, a data mapper like http://www.pomm-project.org/
You should be able to use a db cursor and transform each row without having to accumulate everything into a single array, depending on the processing performed. &gt; Is it really the case even with servers today that 500k arrays is a big deal ? it depends on how big are each rows. imagine you have 1mb of text content in a field. 500 mb of data in memory, if it is durring the request... You should offload that to worker perhaps.
Did it work out?
features? speed? and PHP 7 benefited from PHP 5.6 security patches, obviously. The only reason I would not migrate is - extensions not available in 7 - untested messes in production.
I had quite a good experience with having pre-made SVGs in Twig templates, injecting variable parts into it, letting twig render it as an svg, and then delegate to Inkscape to export a PNG through an exec() call. Worked beautifully.
Sorry submitted it without finishing the statement. Once the php process ends all resources are cleared anyway 
Apparently, all the names that contain the "Zend" word (Zend Framework, Zend Engine, Zend Expressive, etc.) belong to Rogue Wave (see [https://twitter.com/zeevs/status/1052598509763883008](https://twitter.com/zeevs/status/1052598509763883008)). So maybe the community is forced to rename them. It's too early to tell.
Yeah. I didn't check to see if the application server could see the file server I was using. After the sharing was created the files were able to be included. Thanks for the help 
That's good to hear! It's the small details that bites us the hardest. 
&gt; I'm talking about MusNotification, which is a full screen popup that notifies one about new available updates. Yes, it won't prompt you with focus assist until you quit your apps. Try it. &gt; Asking such a question makes me wonder if you've ever tried Linux or MacOS as full time developer. No wonder you would like Windows more if you don't know anything besides it. I'm not only a programmer I setup and own a lot of linux boxes and unlike you i'm not saying either of the OSes belongs to the garbage bin. I like Linux, I also like Windows, neither of them belongs to where the OP i replied to suggested. Windows, just like Linux is a solid enterprise solution with its own pros and cons. &gt; User experience and OS design, like Windows 10 is a clusterfuck having 2 control panels, seems like a beta to me. Wouldn't that make your favorite flavor of windows an alpha then? Because shit, there are control panels on top of control panels in Linux, especially if you sign up to use stuff like KDE.
Have a database view do the preprocessing, don't do it in PHP.
* Logging is an application issue, not an OS issue. You write the logging service yourself. Also, there are tools, graphical ones at that too that read the system logs. Windows has some built in * Windows Enterprise doesn't do that. * wut? I mean shit, if you are into VMs that much nothing beats VMWare hypervisor. And no, containers are not VMs. * That's a non-issue if you are not a retard. Define a startup const for separation and use that. With that said, Windows reads slashes just fine nowadays * WSL is not an emulator nor a VM. * Not sure what middle-mouse-button clipboard is so I'm going to skip this one * Lack of multi-display support ... on Windows ..?!? You sure you are not talking about linux there buddy? Because most gamers and streamers play on multiple screens. It's so easy, non-technical people do it. You just plug your shit and it works. * Thankfully there's WSL so, non-issue * Windows Enterprise has none of that * Define something breaks because in 2018 if something breaks it's 99% an issue that you caused or your hardware is failing. It happens on Linux too. * Let me run it - idk ... took about a 2-3 seconds on a github hosted project with a bit over 500 commits. You are definitely a software hipster aren't you? Ask any C/C++ developer and they'll all recommend VS. Unreal Engine 4 recommends VS. Every sane person would.
Is suggest checking the php.ini on the current machine. It will contain a list of every enabled extension. From this you'll then have the list you need, just get the 7.2 version of it.
&gt; lolwut?!? Have you tried WSL in the past year? Because I'm using that on a daily basis and IO is the least of my concerns That's fine for you. I love WSL and use it daily, but the fact is that it chokes up with I/O intense tasks. The devs are very aware of this and are working to mitigate the issue.
&gt; PHP does not have function autoloading yet but the bundled autoloader as well as composer can autoload/require them nicely. It does this by always loading them. In one of my project's composer file it has 30 direct dependencies and around another 30 indirect dependencies. If every project did what you're doing then that means every request has to load 60+ files no matter what else it might do, even just to output a static cached page. Request handling and dependency injection often puts a sizable weight on top of that. You could have put them in a separate class as static methods to avoid the problem altogether. &gt; for instance Period::createFromWeek could means many things depending on your domain logic. A library should provide common functionality that is agnostic across time and space (and domain). Some of it may not be applicable to all domains or projects, but that would be the equivalent of saying `moment.js` shouldn't have `fromNow` because some people might not need to display "4 years ago". Again, putting those in a separate helper class would keep everything homogeneous yet still namespace prefixed and easily available. &gt; FWIW there was a lengthy discussion about why the class is now final hope this answer your question I read through most of that and saw that people were throwing around alphabet soup to give a blanket justification for why. I also saw one person who said "The answer is to fork it and scratch your own itch." That is such an arrogant and thoughtless response (putting the burden of change, maintenance, and library design onto the end user) that there's really no room for a debate, the project has declared "My way or the highway". I personally am very glad that PHP did not make `DateTime(Zone|Immutable)` final. I've extended those in my projects to provide additional functionality: added JsonSerializable (which in your version I can't customize without creating a completely separate wrapper that completely duplicates all the functions or manually massaging the object graph prior to doing json_encode), a __toString method, and a custom createFrom static method that wraps `createFromMutable`, Immutable, string, or other value and still maintains the Immutable aspects. On a side note, the ISO8601_FORMAT doesn't provide the option to include the named time zone, and that's a critical thing to include when dealing with future dates where offsets can change.
&gt; Yes, it won't prompt you with focus assist until you quit your apps. Try it. Thanks for the tip but I've already disabled MusNotification by replacing it with a dummy program that does nothing and exits. Who ever thought it would be fine to design and implement such a fullscreen popup should be fired regardless. &amp;#x200B; Just a problem that occurred at the very moment, I'm unable to use Docker the same time as Virtualbox/VMWare on Windows. As Docker depends on having HyperV enabled while VMWare needs it disabled, which you can even only toggle with a reboot. 
&gt; yeh they are db records - to be honest i'm reprocessing them into simple arrays so that its easier to manipulate/process/filter and display - just saves a bunch of variable and logic juggling. Even for your own groth and skillset, learn to do the most data manipulation/processing/filtering, etc. you can in the database, especially sql ones. They are THE tool created specially for that, doing hundreds of optimisations on the fly to go faster you woudn't think of unless doing a several years intensive course just on that, and using their own kind of data structure. Most language structure can't compete, and php lack of specialised ones (only got the array which is a hashmap/dictionnary hybrid) specially can't be as efficient. Knowing your way around sql is an incredibly important skill if you come in contact with it.
There are 2 main types of ORMs in this regard. Active record is highly coupled and responsible for saving itself (usually inheriting from some DB model). Data Mappers (like Doctrine) use ordinary objects and a manager of some kind.
Just want to respond to a few of your issues. &gt; Windows updates, especially when you put your PC to sleep and it wakes up by itself to patch and shut off your VMs So this has been a non issue for me for ages. I've configured my 'active hours' and told it to notify me when an update is coming. It will give me a notification for several days before it forces an update and allow me to pick a time period that the update is applied. It's annoying that it needs to be done but you can alleviate this pain point. &gt; Backslashes in paths Not sure I'd call that an issue with Windows itself, more of an issue with habbits. It's annoying when you're used to *nix style paths, though for sure. &gt; Console emulators are sub-par to native linux Absolutely. Thankfully they're doing a ton of work in this area. Their most recent Windows Command-Line blog post talks about their new Pseudo Console that will make this area much improved. [Read about that here](https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/). &gt; Lack of multi-display support, system tray won't come along, apps opening apps do not respect the location they were shut down at Really? I've got 4 monitors right now and **most** apps respect their last opened position. I think that's an app-by-app thing though. I've got my system tray on all monitors, though the task area and custom toolbars don't appear on each one. I'd like for that to be supported for sure. &gt; Lack of SSH without WSL Windows 10 has an OpenSSH client by default since the Fall Creators Update. You can read about it [here](https://blogs.msdn.microsoft.com/commandline/2018/01/22/openssh-in-windows-10/). That blog is from when it was a beta feature but still relevant. &gt; Despite buying (!) the OS, I get candy crush and other useless cruft installed Yea, that's some shit I agree. I was able to remove that crud once and haven't seen it since. [O&amp;O ShutUp10](https://www.oo-software.com/en/shutup10) is really helpful here. &gt; Yes, you should try it with any decent sized project and git and tell me how long git status takes. I can tell you that this is ~2 minutes the first time and ~1 minute afterwards. On Git bash this is instant. Yup. Disk I/O is the main bottleneck right now. IIRC it's down to the fact that WSL stores Linux file attributes in NTFS extended attributes which apparently adds enough per-file overhead to cause this slow down. &gt; I use it for a C# project, but thinking of dropping it for something else. I'll take intellij over VS any day. On the VS note: I really don't enjoy using it for much :\ It's clunky and not as customizable as I'd like, among many other pain points. Have you tried JetBrain's Rider C# IDE? When I work in C# I fire up Rider over VS every time and only peek into VS if I need to do some form designing.
Okay, done responding to you
&gt; wut? I mean shit, if you are into VMs that much nothing beats VMWare hypervisor. And no, containers are not VMs. I'm not really into VMs but don't people just use a barebone esXi instead of having Windows on top of their VMs? \- Insulting others as "software hipster" just because they are giving you list of problems of your so beloved OS. You seem like a Microsoft employee tbh. You should really take a deep breath and calm down. \- Claiming VS is the best IDE out there while ranting about IntellJ is just plainly dumb. Also I've directly compared VS and CLion and the latter gave me a superior experience in terms of autocompletion and ease of use. \- DPI scaling sucks on Windows, it is beyond broken, they can't get their shit together, as it's one big clusterfuck of applications doing things in non standard fashion. Random tiny texts, even in official Microsoft applications. \- I've also occasionally noticed that the IO from within the WSL seems sometimes sluggish.
that's what you are supposed to do when you lose an argument, yes.
&gt; So this has been a non issue for me for ages. I've configured my 'active hours' and told it to notify me when an update is coming This is what troubles me... Why is this required? If I put my laptop on "sleep" and not "shut down and install updates", I expect my laptop to go to sleep and not "sleep and start up after 30 minutes to install updates anyway". &gt; Absolutely. Thankfully they're doing a ton of work in this area. Their most recent Windows Command-Line blog post talks about their new Pseudo Console that will make this area much improved. Read about that here. Too little, too late for me. Windows remains a GUI with console, rather than a console with a GUI. Unless they drastically change how windows work, I doubt it will ever be what I love about linux. &gt; Really? I've got 4 monitors right now and most apps respect their last opened position. Example: discordupdater.exe starts up discord.exe. It always starts on my primary screen, never on the secondary screen where I drag it every day. &gt; Windows 10 has an OpenSSH client by default since the Fall Creators Update. You can read about it here. That blog is from when it was a beta feature but still relevant. It's a start, but far from usable without a proper console imo. &gt; Yea, that's some shit I agree. I was able to remove that crud once and haven't seen it since. O&amp;O ShutUp10 is really helpful here. Indeed, first thing I install these days :( &gt; Yup. Disk I/O is the main bottleneck right now. IIRC it's down to the fact that WSL stores Linux file attributes in NTFS extended attributes which apparently adds enough per-file overhead to cause this slow down. I believe it's exactly the same way virtualbox/vagrant work. &gt; Have you tried JetBrain's Rider C# IDE? When I work in C# I fire up Rider over VS every time and only peek into VS if I need to do some form designing. Not yet, but I have an ultimate license from work, so I might try this. I heavily rely on the GUI editor in VS though :( I like working with C#, which is a tool for a game I play, which sadly only works on windows
Imagine you have a pretty large project and a decision is made to change the RDBMS .. Very common scenario btw..with an ORM it is 1 line in a config with SQL you are up to a few months of changes and even more bug fixes..and we are not even talking about a nice abstraction, several levels of caches, lazy loading and also forward engineering from an entity model just skips all the headache with normalization as the entities tend to be naturally normalized 🙂..ofc lets not forget that with the data mapper you can just point your entity to a service instead of a database table when the decision for a more SOA approach is made
it was most people's go-to framework, it's just not the best option anymore.
&gt;No idea why you got downvoted Because talk is cheap and not everyone is in a position to just quit their current job.
Link to my code with tester: [http://sandbox.onlinephpfunctions.com/code/7bf00a6af2ea6761fa6d0e7afde9b473a88ce3d1](http://sandbox.onlinephpfunctions.com/code/7bf00a6af2ea6761fa6d0e7afde9b473a88ce3d1)
&gt; Example: discordupdater.exe starts up discord.exe. It always starts on my primary screen, never on the secondary screen where I drag it every day. Strange. I don't use the Discord client that often but I do use VSCode which has an updater that starts the VSCode process and the window returns to the same monitor it was on previously. Since they're both Electron apps I'm not sure what Discord is doing differently. &gt; It's a start, but far from usable without a proper console imo. I can understand that. I currently use a combination of ConEmu and mintty(well, wsltty) and it scratches most of my itches in this area. It'll be nice when a the pseudo console API is available and some console emus make use of it. &gt; I believe it's exactly the same way virtualbox/vagrant work. I just grabbed some references regarding the I/O performance for another comment so I'll just copy paste here: &gt; Here are two recent comments by Rich Turner: &gt; [General comment about performance](https://github.com/Microsoft/WSL/issues/873#issuecomment-424807175) &gt; &gt; [More in-depth explanation](https://github.com/Microsoft/WSL/issues/873#issuecomment-424914762). In this one he mentions "apt, npm, pip, gem, MYSQL" as examples. &gt; &gt; Edit: &gt; &gt; Here's a comment by Sven Groot(Senior Software Developer at Microsoft) that adds some more info: [link](https://github.com/Microsoft/WSL/issues/873#issuecomment-425272829) - &gt; Not yet, but I have an ultimate license from work, so I might try this. I heavily rely on the GUI editor in VS though :( I just did a little bit of digging and it looks like a [WinForms designer](https://youtrack.jetbrains.com/issue/RIDER-1034) and [XAML WPF designer](https://youtrack.jetbrains.com/issue/RIDER-609) are in progress. So maybe one day we can ignore that VS exists for C#... one day...
I think we might have to move to symfony, really uncertain what the future holds for ZF. shame
Don't see how this is anymore helpful than using `php -m` 
I believe you can see the extensions with php --ini
yeah that's really no different from using `php -m` - I'm trying to figure out how do I determine which of those extensions are bundled with the apt-get commands when installing extensions from the command line such as `apt-get install php7.2-xml` which installs a bundle of different xml extensions. Not all commands will install a bundle of extensions though and some do and I'm trying to get all the commands that associate with the extensions on the server. Not sure how to word this any differently.
the `continue`s are pointless since nothing else would happen anyway without them. other than that the only suggestion i have is to use [3v4l](https://3v4l.org/) instead of whatever that sandbox thing is. 3v4l runs your code in all versions of php, allows you title your test, and looks a hell of a lot nicer.
What you wrote works great! Good job! One of the next big things you'll start to learn is how to think a little more abstractly. A big concept you could improve on is DRY (don't repeat yourself). Keep in mind, the "improvements" in this case are not really going to make a difference in performance or anything, but it helps think differently and approach solutions from more angles. - Small note first - being strict with comparison will help you be more thoughtful of the code you're writing. I'd say in almost every case strict comparison is a better choice than loose. So `===` instead of `==` - You've got four conditions that can be met. In each one, you're appending ` . ' '` - Instead of using `continue` to exit out of the loop, you could just let it reach the end of the conditions and then echo the space, meaning you only write `echo ' ';` once. - Look at your first two conditions; they both have `$number % $v1 == 0`, and in both of those cases, `Fizz` gets printed out. Similar with the second and third cases, `$number % $v2 == 0` is in both, and `Buzz` is printed in both of those. Is there a way you could write this in two conditions instead of 3? Again, these aren't really "improvements" as much as they are ways to think about the problem in different ways to come up with many solutions, so you can pick the best one. 
IIRC you want to see which packages are associated with the extensions in a PHP installation for an older machine? Does [this](https://packages.debian.org/source/sid/php7.2) help at all? I don't know of any command-line/programmatic way to determine that, besides comparing the output of `php --ini` or something with a list like this.
Very much yes. The ORM handles ~95% of the cases. Those that it doesn't fall through to the query builder. In the rare cases that even that falls short, raw SQL remains an option. The abstractions leak a little bit, but it's no matter as you can just drop down a layer when they're not working out.
I think this might be a two step process. 1. Use php -m to get a list of installed module files 2. Figure out which .deb file owns each module file. See [https://superuser.com/questions/179353/how-do-i-find-out-which-package-owns-a-file/964671](https://superuser.com/questions/179353/how-do-i-find-out-which-package-owns-a-file/964671)
Thanks a ton for writing all this up! I’m well in the middle of some “this is all too slow” (although less than half is even PHP) so it certainly sounds like it’s worth trying out. 
You could improve the factoring in your conditions. So instead of having `if (($number % $v1 == 0) &amp;&amp; ($number % $v2 == 0)) {` you could create intermediate variables like `$numberMultipleOf3 = $number % 3 == 0;` and `$numberMultipleOf5 = $number % 5 == 0;`. In the end your condition can reuse those variable, and are more human readable: `if( $numberMultipleOf3 &amp;&amp; $numberMultipleOf5 )`. You also might want to speed up the interpretation of your code by manually forcing to not do casts over your numbers using triple equal: `$numberMultipleOf3 = $number % 3 === 0;`. Another factoring would consist on creating a variable to hold the message. If you pay attention, you keep appending a `. ' ';` space to your strings. Why not do like this: `$message = 'Fizz';` or `$message = $number;`, and right before the loop finishes, `echo $message . ' ';`. If tomorrow you want to print HTML instead of plain text in the console, you will update only one line instead of severals. Also, always good to put your functions calls outside loop, to help PHP understand it should not reevaluate the `range(1, 100, 1)` constantly (I guess it guess it should not anyway, but the guess might consume resources). Anyway, good practice would make another variables, `$numbers = range(1, 100, 1);` and keep your loop readable `foreach( $numbers as $number )`. &amp;#x200B; Hope it helps, good luck with your PHP learning, welcome aboard!
Hi, This is very interesting. I'm doing something similar. I have a "master base" SVG template, then I inject other SVG objects and/or variables to create a temporary SVG that I then send to Inkscape via command line for rendering. Inkscape then performs tasks via command line verbs, and also performs tasks with my own custom extensions on some of the objects. Then I save out this completed SVG file render. I'm doing this in a batch process on thousands of files. After this is completed, I then run another Inkscape command to create PNGs of all the SVGs. I need both file formats for my project. Let me ask you... How does twig make the process better for you? I have never used twig. Can you give me an example of your process? 
These are the two projects I tend to use the most in my database-touching code: * https://github.com/paragonie/easydb * https://github.com/shadowhand/latitude The first (EasyDB) is meant to make SQL injection a thing of the past by making it easier to use prepared statements *securely* (i.e. not emulated prepares). The second is a query builder that is easy to integrate with EasyDB.
LOL WUT
It's not about what you use but how to redirect users properly when they try to lean PHP.
Looks and works great. Thnx for your job! Is there any practical reason why GUI dose not work when web server started in php -S mode ?
How about having the concept of Storage/Origin classes where you internally use PDO and construct queries?
Not knowing your specific usage, I'd point you at "generators", you can process your db records as a stream which has many of the same characteristics as an array, without the extra storage requirements. function processRecords($resultSet) { while ($row = $resultSet-&gt;fetchRow()) { yield doStuffToOneRow($row); } } foreach(processRecord($resultSet) as $processedRow) {...}
I like [cakephp/database](https://github.com/cakephp/database) because it's the moste flexible and fastest (IMHO). The Laravel Illuminate Database query builder (illuminate/database) brings a super natrual, fluent and smooth query builder to you. The disadvantage is that you get a lot of global laravel functions and classes as dependencies on board. Caution: Laravel Illuminate does not return arrays, but collections with `stdClass` instances. You should get along with that, too. does't bring that much Laravel dependecies like illuminate/database. There are some mememory and performance issued in illuminate/database too. 
Symfony is still a go to for alot of companies. But you should take a look at Laravel and Phalcon as well.
Hey, DrWhatNoName, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Laravel or Symfony. Anyway, most frameworks would do the job, but I would go for Laravel, is the one who most people know, so, easy for most devs to get on board
Yeah, the idea that a bunch of different dbs can be abstracted over is flawed. Most simple stuff is ok but as soon as you get even slightly exotic (like MySql's virtual columns) it stops being a useful abstraction really. Or at least that pretense of being able to just up and switch the underlying db at the drop of a hat.
`$users = User::where('votes', '&gt;', 1)-&gt;get();` How do you mock something like this in unit tests? 
I found not having to rewrite the wheels of laravel a lot more appealing than symfony 
Just try not to loose too much time "choosing the right framework". I have lost enough time in my life doing that kind of stuff to write most of the ideas I have thought of... :(
That’s why I quickly realized I should use laravel over symfony :) make:auth is so much faster than writing it all from almost scratch 
I've always enjoyed slimphp. It provides a microframework which you can easily extend.
That scenario would already be unit tested in the package itself so you don’t need to test it. 
Assuming you are doing this in a Laravel project, you would use the factory() method to fill your database with whatever data you require to validate your test before running it. https://laravel.com/docs/5.7/database-testing
I'm not a fan of populating a database for a unit test. The unit test should only test the unit, no external/other components. That's what an integration test should do. But it seems like Laravel thinks doesn't think that way (?)
You're right. I was being hyperbolic in saying that the **always** do that. But many of them do (https://en.wikipedia.org/wiki/Active_record_pattern). The only ORM I've ever had the pleasure of working with that *didn't* do it was Objectify, which is a Java ORM over Google Datastore. 
Agreed but you don't necessarily need to hit the database for tests, just to test the scenario you described. factory() also has a "make" function that creates a model without hitting the database that is much, much faster to run. I avoid hitting the database in my test suites not because I disagree with it, but because it takes forever to run the full suite in anything but the smallest applications
Laravel (and a lot of people influent in it) prefers outside-in/london school tdd, so mostly integration tests and some unit tests. The idea is that unit test, if they don't hit db/mock too much don't prove anything is working. They only prove the code unit tested is coded the way the dev thought it should be. They also think integration testing is better value for your bucks, and unit test is only usefull to scope on the problem when debug is complicated. I'm simplifying a bit, but basically that's the high level thought.
To let the magic happen your must append this query string "?SPX_KEY=dev&amp;SPX_UI_URI=/" to an URL served by a PHP script. For example, given a local server launched via `php -S localhost:8888`, with an `index.php` file in the docroot, the web UI is accessible via this URL: `localhost:8888/tmp.php?SPX_KEY=dev&amp;SPX_UI_URI=/`. 
ORMs are not query builders. And no, you don't always need an ORM.
I've used Aura SQL Query many times in the past. It's great.
Hey BooCMB, Your attempts to talk to a bot are wasted. Also, if people would stop misspelling common words and phrases, CommonMisspellingBot wouldn't need to exist. Have a nice day!
Hey lord2800, your attempt to talk to a bot is futile.
For an intuitive SQL builder that is not an ORM I like [Zend\Db\Sql](https://framework.zend.com/manual/2.2/en/modules/zend.db.sql.html) If you are comfortable with SQL but dont want to mess with chopping up sql strings it makes it very easy to do stuff like build a base selection and add filters: use Zend\Db\Sql\Select; class ClientSelect { /** * Select clients for an account */ public function selectClients($accountId) { $select = new Select(); $select -&gt;from('client') -&gt;columns([ 'id' =&gt; 'client_id', 'client', 'user_id' =&gt; 'created_by_user_id', 'created_timestamp', ]) -&gt;join( 'address', // table 'client.client_id = address.client_id', // on [ 'address', 'city', 'state' ], // columns 'inner' // type ) -&gt;where(['client.account_id' =&gt; $accountId]); return $select; } /** * Select a single client record by its id * Using the base client selection and adding where clause * prevents selecting a client outside of the account */ public function selectClientById($id, $accountId) { $select = $this-&gt;selectClients($accountId) -&gt;limit(1) -&gt;where(['client.client_id = ?' =&gt; $id]); return $select; } /** * Select a filtered list of clients */ public function selectList($accountId, array $filters = []) { $select = $this-&gt;selectClients($accountId); if (isset($filters['user_id']) &amp;&amp; null !== $filters['user_id']) { $select-&gt;where(['created_by_user_id = ?' =&gt; $filters['user_id']]); } return $select; } } It uses a similar style for insert, update, delete. Also works well with Zend\Paginator to select ranges
Symfony 2 (as well as all the other popular frameworks such as Laravel which use the Symfony's Request/Response objects) will never move to PSR7. This is due to the rather unfortunate choice to make the PSR7's objects immutable. Being immutable is not necessarily a bad idea but it dictates your request handling flow. Slim and some of the other frameworks are fine but, so far at least, the idea of request based middleware has just not proven itself to be useful enough to warrant a change. Many serious developers already try to decouple the interesting parts of their applications from the framework anyways. So being able to share request based middleware just does not help much. 
You're right, done here https://github.com/NoiseByNorthwest/php-spx/commit/7f86cf7f00ec80207fed7f1816830a75ef28a35d
What type of performance issues are in the Illuminate package?
We can really use a PSR spec for this
Thank you, I'll give Laravel a try. 
We use an extremely simple ORM at our company, which does little more than define the mapping of columns to object properties, the usually joined-table (where the query can get to hundreds of lines long), and provides some methods for your usual WHERE, LIMIT, OFFSET, etc. I came into a very old datamodel, which was a tonne of custom tables sitting next to some years-worth of WordPress, so the sheer number of joins I needed to do to represent a simple model was staggering. The API was loosely based on rails for familiarity. I found the config needed to get Eloquent working with our wacky data model was more complex than simply building a simple ORM around it, though I wouldn't mind implementing some of those same interfaces with mine.
Nobody said ORM.
Can anyone explain the differences between this and Carbon?
I wasn't trying to refute your point at first place. 
you can't
You should try out this hot new thing called SQL.
FluentPDO is lightweight and nice is you don’t need super complex things. I really like Laravel’s Illuminate/database ORM/builder. 
What's wrong with Carbon?
I thought so too. I get that improvements are slow in coming, but I think we'd be better off if we just specs for our missing features where we could..
I prefer illuminate by laravel
I am partial to CakePHP, but I do recommend it as well. I haven't found an instance yet where I have had to go outside the ORM, which is amazing. My only argument against the CakePHP ORM is the new QueryExpression stuff they added in, I think the documentation is the bigger issue. Luckily I haven't needed to do any super complex expressions yet. From a performance perspective it seems to work great wise of the the actual queries the ORM generates. If you use the full framework you can see all the queries it builds and the execution time. Sounds like you won't be, but I am happy with the SQL the ORM creates.
&gt;The disadvantage is that you get a lot of global laravel functions and classes as dependencies on board You can only install illuminate/database database and bootstrap it yourself; no global laravel functions tainting your environment. Doing this in fact a project of mine, no issues.
If you like Eloquent, but don't like having to redefine your database relationships in code, check out https://redbeanphp.com/index.php
illuminate/database depends on illuminate/support which brings a bunch of global Laravel functions as well as other packages like Carbon.
Yes, but you're expecting complete support of unique features for an abstraction over multiple database implementations. You're barking up the wrong tree if you want to be able to use dialect specific features in an ORM. 
Because of each row return as a Collection object, memory usage will increase according to the number of records (but you'll get plenty of handy Collection methods to manipulate the results). Of course you can always change fetch type to FETCH_ASSOC, write raw queries or access low-level PDO object. My recommendation is *doctrine/dbal*.
People still write their query builders? That’s like reinventing a bicycle. Just use a framework for all that stuff. Laravel, Yii or something. 
Personally not a fan of Eloquent because: - I irk at the idea of having a lot of config in my entities: my entities should be ideally independent of the DB. I say ideally because you are always likely to have some leaks due to your entity requiring to be serializable in some way or because the ORM leaks: Illuminate leaks, but Doctrine as well (less though) - I really miss to have a schema/migration generator/checker a la Doctrine - In the end I'm using repositories so there is no real advantage to use Eloquent there and I need to abstract the DB layer because we are not just using Doctrine
So i just found an RFC i really really want: https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters I have been working on a highly abstracted ORM to self educate but found any form of correct generic inheritance of an entity without covariant returns.
ORMs can be great for fast development but when you start to have issues it will be a pain to actually solve. With plain SQL you have 100% control over performance. If you use SQL just make sure to alias all fields in your response, this just adds flexibility 
We're using a lot of arrays, so I see your point using them. Not only it's easier in many cases, but way faster than anything else. The main drawback is memory usage - PHP uses a LOT of memory, much more than the actual data. But you can get some neat stuff with arrays, especially when combined with memcached and/or filesystem based caches. Anyway, here's my answer from practice. \- I did some tests (albeit rather quick, still needing digging) and it appears that only arrays on objects (as properties) generate a significant memory usage reduction when being cleared, although not all the memory is freed. And works only while the execution isn't on the object itself (such as a within function belonging to that object). In all other cases, clearing the array doesn't change memory usage (it is cleared though at the end by the garbage collector) . So yes there's a point but you need to store the array on an object that you call in your code. But it seems it is handled differently within the object than outside it, and doesn't work for procedural code. OR, at least that's what I have observed (again this are not fully tested and still need to do more; do your own and investigate memory usage at different stages). \- 500k rows is insane. Your logic is most likely flawed or incomplete. Yes we sometimes use 10 arrays in a given script, but typical sizes are 1k rows or less. You cannot parse 500k rows efficiently, even a foreach there will be utterly inefficient and CPU-consuming. I would suggest that you pre-sort, pre-filter data with SQL commands first, then use smaller subsets that can be efficiently handled as arrays. If SQL skills are a problem somehow, that's where you need to improve next, not on the array. Side note there is a LOT of improvement you can do on the database performance as well, through wise data type choices, well done and well tested indexing and more. \- If you still insist in using large datasets as array, here's a way to minimize them and make everything way faster = serialize most of the elements as a string. The more you can serialize, the smaller the array (way smaller) PHP arrays grow fast, depending on how many items each individual array has. So if you're for example storing a table as an 2-dimensional array, the more columns you have, the more memory it occupies, obviously. Well you can reduce memory usage a LOT by trading some CPU for it. You can store for example just 2-3 values (the one you process more; or the first one used) while ALL OTHERS are stored in packed string format, such as a JSON for example. In this way, you do all the processing fast, then once you have identified the elements you need to work with, you unpack only those elements with json\_decode and then process the remainder of the array elements as well (those that were packed as json). In most scripts you will NOT actually use all elements of all the 500K rows; but only a fraction of that. So identify what you need and process only a smaller subset. Once again in a simpler example, storing a string of 10 variables in JSON format (or serialized) occupies much less memory than having an array with 10 elements. \- You can also persist stuff to disk (file) and/or to memcached or similar caching engine, these use way smaller memory than PHP arrays to store the same stuff.
Author of Latitude here. It is strictly a query builder and can be used with any supported database. Works really well with EasyDb or PDO.
Here are the things I would bring up in a typical code review: * When iterating incrementally, use `for`. In general, `range()` is almost always the wrong solution to any problem. Creating an array N elements long just to iterate from 1 to 1+N is needlessly wasteful. * `$v1` &amp; `$v2` should be constants not variables, as they contain magic values that never change. You should also use more descriptive names for variables and constants alike (e.g. maybe `FIZZ` and `BUZZ` in this case). * Runtime concatenation of string constants (i.e. `"Fizz".' '`) is rather pointless and ugly. I believe the engine will optimize this away, but still. Either combine them (`'Fizz '`) or turn one or both into identifiers. * Your `continue` statements don't serve any purpose, as execution drops to the end of the loop in all cases and there is no other code to skip. * Get into the good habit of always using `===`, and only `==` when absolutely necessary (which is virtually, if not literally never). * Keep your expression evaluations DRY and readable when you find yourself in the situation of needing to repeat them: $isFizz = $number % FIZZ === 0; $isBuzz = $number % BUZZ === 0; if ($isFizz &amp;&amp; $isBuzz) { // ... } elseif ($isFizz) { // ... } elseif ($isBuzz) { * And last and most definitely least, PSR-2 (or, better yet, 12) compliance would be nice, though if this code is written in a different standard that your team has settled on, that's perfectly fine, too.
If you're looking at building new servers for new development then it's easier to use the version that will be supported to the farther point in time. All that really matters is security updates and 7.2 is supported until 20 Nov 2020, which isn't a small amount of time. If you're trying to convince your CTO to migrate existing code to the new 7.2 then that might be a steeper hill to climb. Now we're talking about putting money and resources into migrating existing code to a new version of PHP and this will require testing and development time that might not have been in their timeline. It's the same story everywhere. I'm working right now on a team that is struggling to ensure that security is a priority even though we're a financial institution. I mean, it is a priority and we're getting better every week but it's a struggle to justify the time spent to upgrade servers and software when it requires so many man hours to ensure we're not slowing the business down. It's possible that we'd see updates in the future even to php versions that are no longer supported if there is a major bug. These updates can come from Linux distributions or they can come from the PHP authors themselves but this shouldn't be relied upon. &amp;#x200B;
I’m on mobile so this isn’t going to be beautifully formatted but, imo the best way to do this is to start with a variable like `$msg` and concatenate with `.=`. &amp;nbsp; Also, ignore this if it’s excessive but I love optimization, you could create arrays where you store the factor you want to check by and it’s correlating key word. So `$fizz = [3, “Fizz”]` and `$buzz = [5, “Buzz”]`. &amp;nbsp; For example: &amp;nbsp; I would then make a for loop to iterate over a set number with a variable `$i`, because convention. (Also define `$msg = “”` at the start of the for loop) &amp;nbsp; An if statement in your main loop may be: `if($i % $fizz === 0) $msg .= $fizz[1];` &amp;nbsp; Then if you want to optimize even more you can (I haven’t tested this but I would expect it to work): ‘$msg .= ($i % $fizz === 0) ?: $fizz[1];` &amp;nbsp; I hope this isn’t too confusing and makes some sense. 
Like Laravel. Become familiar with that and then look at Adonisjs when you need a Laravel like JS framework.
No. The query determines how the results will come: // select 'id', 'name' from 'users' limit 5 offset 10 // Laravel DB::table('users')-&gt;select('id','name')-&gt;offset(10)-&gt;limit(5)-&gt;get(); // Doctrine DBAL $queryBuilder-&gt;select('id', 'name')-&gt;from('users')-&gt;setFirstResult(10)-&gt;setMaxResults(5); // Atlas.Query $select-&gt;columns('id','name')-&gt;from('users')-&gt;offset(10)-&gt;limit(5); 
Carbon is nicely namespaced, well documented, extends native PHP Date objects directly and is almost ubiquitous and therefore not cool enough this week?
Pardon me, but for what you have described Laravel and Symfony is nonsense. If you ask for framework advice here this is all you'll get. For a 2-3-4 page site a micro framework makes much more sense. Slim, Flight, etc. Symfony is a monster and Laravel is a monster on top of a monster. Just because someone hands you something, that alone is not the best reason to put it in your mouth. Think for yourself.
You could play with it a lot - [Get Kata - Kevlin Henney](https://www.youtube.com/watch?v=_M4o0ExLQCs) (FizzBuzz starts at \~14:20)
&gt; That is such an arrogant and thoughtless response (putting the burden of change, maintenance, and library design onto the end user) that there's really no room for a debate, the project has declared "My way or the highway". This library is provided for free. Written by volunteers. Of course it's their way of the highway. It's _their_ free time volunteered to build and maintain the thing. There is no room for debate for people who are not maintaining the library. If you want a voice, become a contributor.
First of all, what I'm about to say is just a hint of what I would like to see as a learning guide, and it is based only on my experience which is not 100% correct. Knowing all the possibilities a language offers, even the "wrong" ones, is what made you a good PHP programmer now. As a team leader, I often help my team by teaching them stuff they didn't learn yet because of "good ways" tutorials. That recipe that didn't show them different ways of problem solving. Kind of a dream that I have, I know, haha, but someday maybe we will have that and then more innovative and skilled professionals between us.
Please don't use limit/offset in any examples for anything, or in real life for that matter. People see this shit and think it's a good idea for pagination when it's fucking horrible and provides inconsistent results. 
For super simple small projects I like Idiorm / Paris. Not qualified to suggest anything for big projects.
Really this. It takes less time to code with the ORM then it does raw sql and you avoid syntax errors much easier.
Just like the rest of the world abandoned the Zend Framework. A few years ago I used to see plenty of job posts with ZF2 as a requirement. Now it's either Symphony, Laravel or JS stuff.
Search for stream context … (Sorry, Almost asleep … )
I guess I have to kind of agree with you..but it depends as for small to midsize you will not need anything else apart from what the ORM offers as it already takes advantage of the features of the database. When you get to big or enterprise level applications the story will be maybe different..view and stored procedures are not friends with ORMs but the design approach is different..you never want to be bound to a technology thats why should have a SOA approach once you are big..as one of the 4 main characteristics of service orientation is being vendor agnostic ..so you would still go with an ORM with an exception for specialized services Tbh in 12 years I am a developer I run into a very few cases where the ORM couldnt do the work better but I run into several cases where it prevented less skilled people to mess up 😅
I'm also "looking for new opportunities", if you catch my drift.
Care to elaborate? Its not optimal performance wise in some situations (when?) and the inconsistancies come from a changing resultset, otherwise you are fine
Carbon doesn't do periods (aka events): https://github.com/briannesbitt/Carbon/issues/1016
Love the comment diagrams.
You should not mock what you dont own. Instead, wrap this code in your repository class and mock on that level. 
Try symfony flex. It's really helpful for projects of any size. You just load the components you need and nothing else.
I don't know frontend code so I can't comment if your ajax is even doing anything or replacing the form action. But are you do this on a secure webpage? There are browsers or extensions that will null out password fields on insecure pages. Make sure that's not happening.
How about you ask Stackoverflow instead of reddit.
Welcome to modern PHP development! :P
&gt; depends on illuminate/support which brings a bunch of global Laravel functions Gotcha, thanks for that! I wasn't really aware of it :-( &gt; as well as other packages like Carbon. Well, that's kinda expected as it's used in illuminate/database as part of the AR model part, no surprise here.
&gt;They also think integration testing is better value for your bucks That's a terrible statement. This is exactly how you kill a product. Read about the Google Analytics Story where they relied mostly on integration testing until the whole system became unmanageable and unfixable. Can't believe Laravel people are massively doing the same mistake. The right ratio is 90% unit test/10% functional test, not the other way around.
You are making it sound like the I/O slows down to crawl, which hardly is the case. Even if there's an impact (though I can't feel a speedup on the ubuntu dual boot) it's barely noticeable on day to day usage. I run yarn/npm on a daily basis and I it doesn't dether me from my work. I also run PHP from the CLI (-S) for local development with xDebug set up for remote debugging so that VS.Code can hook into it. I cannot detect any lags whatsoever. Maybe it's time you get your hands on an SSD?
The community might not be as big but development is ongoing and I really like using CakePHP. I use it at a professional level for various projects (from small to big). &amp;#x200B; Another reason I prefer CakePHP is when I encounter a bug (and report it) they fix it in a timely manner (either by myself or by others). 
Mostly JS stuff :D There was this gathering "Career Days" in my city. So I went there to checkout what the business is looking for (as I'm a project lead and I don't care about that stuff anymore and I hire what I need). It baffled me that most if not all companies looked for frontend devs and there were very few postings for backend guys. Weird. There were bunch of companies that did all their client projects in Anuglar. Ughhh
&gt;e2e : Use a headless browser, simulate a real user. Click a link/post a form, inspect the response, check for side effects (db/log/etc.) Yes, although if you are talking of a CLI app, then it's gonna be about input/output. For integration test I would phrase it differently: it's more about testing a unit or set of units which talks to others or talk with an infrastructure element. For example a DB repository (single unit) which talks to the DB or a service which has several dependencies (multiple units) without mocking. Then you have different level of scopes, e2e being in the end just integration tests at the higher scope which emulates the level of interaction your user can have with the app: request/response if your app is an API, front-end interaction with a browser if it's a web app or CLI input/output if it's a CLI app. Otherwise I think we agree on most things there :)
I'd recommend zend's query builder, followed by cakePHP &amp;#x200B; Drupal's is the most I've had experience with and it's very good but I don't know what the story is for using it outside of Drupal
&gt;This was posted, in this sub, a day ago. Yeah, I wonder how he was able to post it again? It normal doesn't allow a link twice
I like Zend-DB 2 personally, I built custom entity repositories that leverage the query builder. TableGateway can abstract another layer if you’re too lazy to do that. 
Yes, the Laravel Collection object is quite slow and heavy. &gt; Of course you can always change fetch type to FETCH_ASSOC This not possbile anymore and this feature is not planned to be comming back.
Hey CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". You're useless. Have a nice day!
...so whats another way to do pagination?
&gt; delete 
Could you link to it? I can't find it.
You could have a look at how extensions for IDE's do this. 
I never was happy with the SQL _any_ ORM creates. An ORM is just a very bad abstraction for a relational database. ORM's are "OK" for simple CRUD stuff, but it's not the right tool for fast and efficent database queries. Now I use the `cakephp/database` in a fairly large enterprise web application for very complex SQL queries and reports. So far I'm very happy with it and hope that it will stay that way :-)
[https://youtu.be/oyLBGkS5ICk?t=1462](https://youtu.be/oyLBGkS5ICk?t=1462) [https://youtu.be/oyLBGkS5ICk?t=2175](https://youtu.be/oyLBGkS5ICk?t=2175) [https://youtu.be/oyLBGkS5ICk?t=2433](https://youtu.be/oyLBGkS5ICk?t=2433)
hah hah, thanks though you are late. :P
A small difference in the links: https://zsuraski.blogspot.com... http://zsuraski.blogspot.com...
Sorry, we're not allowed to use h̶e̶u̶r̶i̶s̶t̶i̶c̶s̶ AI here. We use Cyber now.
Languages with algebraic data types and pattern matching lend themselves well to Domain modelling if you're trying to exhaustively find edge cases: \- ReasonML \- F# Clojure is what I'd probably use for production, with specs on the data [https://www.youtube.com/watch?v=-6BsiVyC1kM](https://www.youtube.com/watch?v=-6BsiVyC1kM) I don't trust types beyond the most basic scalars to enforce safety as comprehensively as specs &amp;#x200B;
This is better only under certain conditions, though. Namely that you don't need to order the results by specific columns, don't care about having exactly X results per page, and can be reasonably sure that the PK values are dense (as opposed to sparse) in the table.
Since I'm not a `Carbon` user I can not tell you which is better than the other, it would require usage and feature comparisons that I won't do because I'll be bias. What I can tell you is what `Period` is built for which is dealing with date time range: you can easily compare time range / time events to : * determine which is happening, before, at the same time, or after the other; * detect gap and or intersection between them; TL;DR: `Period` can help you create and manage Event/Timeline/Calendar you name it. Of note, `Period` plays nicely with any object which implements the `DateTimeInterface` which is what `Carbon` and `CarbonImmutable` do. So at first glance I'd say that this library complement `Carbon` and is not in direct competition with it unless proven otherwise.
You read a story and now everything else is terrible. Got it. Nevermind that your average CRUD-driven web app might be a tiiiiiiny bit different scenario than Google Analytics.
We provide some alternative formats of the documentation, which have been used by IDEs and the likes in the past. They are published to [http://doc.php.net/downloads/](http://doc.php.net/downloads/). The SQLite and/or JSON files might be useful for your needs.
This looks very promising, thank you!
Everyone else has pointed out lots of improvements which I will not re-iterate. 1 that I have not seen anyone else mention is that imo the final else statement is redundant. ``` elseif ($number % $v2 == 0) { echo "Buzz".' '; } echo $number.' '; ``` To else or not to else is a bit of a debate so google it. Im in the camp of not else as it reduces code, improves readability and clears up any confusion as to its intended use.
As I tried to run the chat app from localhost connected to MySQL database which had been coded with PHP via WebSocket it was successful. &amp;#x200B; Also when I tried to run from the PuTTY terminal logged into SSH credentials, it was displaying as Server Started with the port# 8080 &amp;#x200B; ubuntu@ec3-193-123-96:/home/admin/web/ec3-193-123-96.eu-central-1.compute.amazonaws.com/public\_html/application/libraries/server$ php websocket\_server.php PHP Fatal error: Uncaught React\\Socket\\ConnectionException: Could not bind to tcp://0.0.0.0:8080: Address already in use in /home/admin/web/ec3-193-123-96.eu-central-1.compute.amazonaws.com/public\_html/application/libraries/vendor/react/socket/src/Server.php:29 Stack trace: \#0 /home/admin/web/ec3-193-123-96.eu-central-1.compute.amazonaws.com/public\_html/application/libraries/vendor/cboden/ratchet/src/Ratchet/Server/IoServer.php(70): React\\Socket\\Server-&gt;listen(8080, '[0.0.0.0](https://0.0.0.0)') \#1 /home/admin/web/ec3-193-123-96.eu-central-1.compute.amazonaws.com/public\_html/application/libraries/server/websocket\_server.php(121): Ratchet\\Server\\IoServer::factory(Object(Ratchet\\Http\\HttpServer), 8080) \#2 {main} thrown in /home/admin/web/ec3-193-123-96.eu-central-1.compute.amazonaws.com/public\_html/application/libraries/vendor/react/socket/src/Server.php on line 29 ubuntu@ec3-193-123-96:/home/admin/web/ec3-193-123-96.eu-central-1.compute.amazonaws.com/public\_html/application/libraries/server$ &amp;#x200B; So I tried to change the port#8080 to port# 8282, it was successful &amp;#x200B; ubuntu@ec3-193-123-96:/home/admin/web/ec3-193-123-96.eu-central-1.compute.amazonaws.com/public\_html/application/libraries/server$ php websocket\_server.php &amp;#x200B; Keeping the shell script running, open a couple of web browser windows, and open a Javascript console or a page with the following Javascript: &amp;#x200B; &amp;#x200B; var conn = new WebSocket('ws://0.0.0.0:8282'); conn.onopen = function(e) { console.log("Connection established!"); }; conn.onmessage = function(e) { console.log([e.data](https://e.data)); }; &amp;#x200B; &amp;#x200B; From the browser console results: &amp;#x200B; \&gt; WebSocket connection to 'ws://5.160.195.94:8282/' failed: Error in \&gt; connection establishment: net::ERR\_CONNECTION\_TIMED\_OUT &amp;#x200B; &amp;#x200B; \*\*I even tried to assign Public IP and Private IP, but no good it resulted in the same old result?\*\* &amp;#x200B; &amp;#x200B; How am I suppose to resolve/overcome while connecting it from the WebSocket especially from the hosted server with the domain name such as [http://ec3-193-123-96.eu-central-1.compute.amazonaws.com/](http://ec3-193-123-96.eu-central-1.compute.amazonaws.com/) &amp;#x200B; var conn = new WebSocket('ws://localhost:8383'); &amp;#x200B; \*\*How do we need to set up Virtual Server to run your own services in an AWS EC2 instance?\*\* &amp;#x200B; \*\*Update:\*\* &amp;#x200B; \*\*From the Security Group\*\* &amp;#x200B; \- Under Inbound tab \[!\[enter image description here\]\[1\]\]\[1\] &amp;#x200B; \- Under Outbound tab \[!\[enter image description here\]\[2\]\]\[2\] &amp;#x200B; &amp;#x200B; \[1\]: [https://i.stack.imgur.com/YrjwU.jpg](https://i.stack.imgur.com/YrjwU.jpg) \[2\]: [https://i.stack.imgur.com/JXKNM.jpg](https://i.stack.imgur.com/JXKNM.jpg)
spot on
Plain. I can not afford to write mediocre sql.
straight from the sidebar &gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help
I suggest this free tool: https://www.yworks.com/products/yed (for a lot of diagrams)
OK, that's really interesting. I'm going to be building a staff calendar and rostering module for our CRM soon, so this could be handy. Cheers!
Could you explain more? I cannot understand eveything from the title
Whilst there are certainly PHP certifications out there. I would only ever consider the "Zend" ones. Most of the PHP certs out there are pretty worthless from a "recognised qualification" point of view. The best thing that you can do to help your Resume or CV be competitive is to have a good portfolio of project(s) that you can demonstrate to potential employers. Contribute to open source code projects and list the companies you have previously worked for in such a role. I got my job as a professional PHP developer after demonstrating a single project to my employer. Another sidenote - Most types of developer (especially PHP in my area of England) are in short supply anyway. So as long as you aren't "unacceptable", the chances are that you're already competitive.
On the very same link you've posted, there's a link to CarbonPeriod **class**
I don't disagree with what you said. The problem I have is that there are many things that are "dialect specific features", like "alter table", apparently: https://stackoverflow.com/questions/3642786/doctrine-2-migrations-how-to-alter-a-table-with-a-sqlite-db And even just the concept of upserting is a pain in the ass: https://github.com/doctrine/dbal/pull/2939 Here's a fun one from Sequelize, which is a Node.js ORM: https://sequelize.readthedocs.io/en/latest/api/model/#findorcreateoptions-promiseinstance-created These aren't some super-duper special features. This is basic CRUD stuff that, IMO, makes ORMs a failed proposition from the get-go.
Are you on macOS? Because [Dash](https://kapeli.com/dash) is a great app for that!
I didn't realise PHP developers were in short supply in England. Time to look at changing jobs! 
Huh, this is actually pretty useful.
I knew someone would have a kinda smae definition but with some subtle but important differences \^\^. I'd say yours is the more historic and true definition, you are perfectly right on that. Not as much as for you as for anyone reading, I'll expand a bit about my version of integration. &gt; Yes, although if you are talking of a CLI app, then it's gonna be about input/output. Never had to test cli stuff, no project with a real cli component so far. Thinking about it, and the cli e2e example, the test I write the most are what I call integration test, but the closest I can to e2e without the inerhent brittleness of relying on HTML. Like e2e I send a real request through my whole app. I just don't bother to go the extra mile and depend on design. I define what are the allowed request, test that they work, test the validations (form or more subtle dependencies between request values), and then I have to cases : * The response is JSON or any "raw data" format, I parse it and check it's equal to whatever I expected. This won't change for design issues, especially if you use JSON api or the likes that will just use different request filters if they need one more field. * The response is HTML or any "presentational" format, I'll check that the right data is passed to the view, but won't try to find my article title in the `h1#page-title`. This way I won't be too much dependant on front end design choice and refactor. It's also the part with the less bugs sneaking over the time without you noticing. When doing design change, you usually f5 a lot aniway, unlike when doing the more tdd/php part of your app.
Works perfectly for my usual app. &gt; The right ratio is 90% unit test/10% functional test, not the other way around. The fact that you have a kitchen recipie about that and profess it's the One True Way tells me discussing TDD with you will be time consuming, and probably useless. &gt; Read about the Google Analytics Story where they relied mostly on integration testing until the whole system became unmanageable and unfixable. Induction doesn't prove anything. Anyone could make a reasonable argument that it might not have been the only problem... Btw, noone agrees on what integration tests means. I specified what I call e2e, integration and unit in [another comment](https://www.reddit.com/r/PHP/comments/9pauzp/recommend_sql_query_builder_library/e812cbc). At one point integration and e2e had a lot of common space. If analytics did mostly what I call e2e, yes, welcome to a world of pain. But I can't be arsed to search `google analytics integration test` in google, the 300+ first pages will be wordpress kids asking how to put the ga codes in their site.
Not to discourage you, but this question has nothing to do with PHP, it's a networking / AWS question. You might try /r/techsupport/ or /r/aws or /r/web_infrastructure
Really? How do you exist in this world?
You keep pretending like this is some obscure performance issue that only a hand full of people experience. Which is absolutely not the case. Posting your anecdotes means nothing when so many others have identified disk I/O as an issue and the god damn WSL development team has made it a priority to improve. It's been identified, verified, and prioritized by the people who are developing the system we're talking about. I'm happy for you that it's not affecting your daily work but it is in fact a real issue for others. &gt; Maybe it's time you get your hands on an SSD? I have several. &gt; Everyone claims they live for maximum 5 years I haven't seen that claim in ages. Early SSDs had a much more limited lifespan pending how often you were reading/writing. It's basically a non issue now. For the record: Not once have I said that the performance is a big deal for me. Thusfar all it's mean is that I can't have my ZSH prompt show the current git repository status as it causes noticeable delay between prompts(pending on if I'm in the Windows or WSL file system).
When I'm thinking about recruiting someone, I'm less interested in "Do you know the language by heart" than "How do you work in team ? How do you adapt ? Do you have creative reasoning ?"... And a lot of certifications are questionable at best, completely harmfull at worst (I remember a PHP 5.6 cert that expected you to code PHP 4 style). A good portfolio/product story when closed source and will to learn/adapt is a way better approach
&gt; So trying to figure out which exceptions throw when, or if I'll get an Exception or a PHP error has been a matter of trial and error. Can you wrap the whole worker process with try/catch and catch \Throwable (base interface for both \Error and \Exception)? Rabbitmq has a built in feature for handling failures called a "Dead Letter Exchange" (DLX) which can be applied to a queue or to all queues. When a message times out or is explicitly rejected, rabbitmq will automatically move it to another queue. You can then have a worker on that queue which picks up the failed messages and decides what to do. This worker can re-queue the message to the working queue to have it re-processed, reject it if it can't be processed at all, send notifications, etc A basic pattern i've used is to have an "attempts" parameter in the message body that is incremented by the main worker. If a message is rejected or fails the DLX worker checks the number of attempts against a limit i've configured, and either sends the message back to be processed again or rejects it. This way you can give your worker more chances to finish the message, but wont clog up your queue with messages that are impossible to process.
Please fill in sarcasm level ____
Nice! Is this production-ready, or already used in production?
Nice. Is this already used in production? A bit more documentation would be appreciated though.
Hello, I'm learning functional programming in php. I've wrote some code to test, do you have any advice, notes about [this small gist](https://gist.github.com/SebSept/78d508bace4c1d611e71ed6e0f09506a) ? &amp;#x200B; (this is my first message on reddit, hope it's at the right place). 
&gt; Can you wrap the whole worker process with try/catch and catch \Throwable (base interface for both \Error and \Exception)? Oh boy, you just answered my prayers. I was not considering the fact that there was a type I could catch that would cover both of those scenarios. The frustrating part has been that certain failures in phpamqplib result in specific types of Exceptions that I can listen for and handle (by recreating the connection or the channel), but others are errors which basically make my program die. I had already implemented retry parameter but was handling retries within the same code rather than redirecting it via DLX. I like that solution. Thanks for the tips! 
As /u/pdizz said, catch \Throwable. However, my suggestion is to always ack. If there is a reason to.. republish. 
No problem. Leveraging DLX can make your worker code a lot less complex, and since it is handled by rabbitmq it can handle errors that happen outside of the worker's control. Definitely worth a look
&gt; It makes way too much use of functions. 1. Functions could be lazy 2. Functions could point to some instance of class or service 3. Functions is freedom for developers how hey want to bind implementation so schema
there is also [Zeal](https://zealdocs.org/) as an alternative to Dash, it uses the same docsets al Dash and runs in Windows and GNU/Linux
Typo in last function, mate.
&gt;olvlvl.com/2018-1... I briefly understood... Could you give sort of path to learn more about that?
What’s avg wage for uk pho devs? What’s it like in London ? 
There wouldn't be any collisions on individual method names, maybe the top level helper class name as a one-time thing to resolve. Most IDEs only use values based on the context. If you're trying `make` it wouldn't autocomplete for `Schema::make` or vice versa. Functions often have no context to them. If the context isn't in the name then it's gone. e.g. `\json_decode` vs `use \json\decode` =&gt; `decode($value)`. If you found something called `decode` on line 50, would you know what it was decoding? Some programmers take things to extremes on "don't repeat yourself" and put too much value or context into the namespace when it should primarily be used for organizational purposes. In that example a class might have done: use IrrelevantPackageName\SerializtionGrouping\Json; Json::decode In which case it has the benefits of context, class autoloading, and a short method name. use GraphQL\Server\ServerConfig; use GraphQL\Server\StandardServer; new StandardServer( // This is redundant, because StandardServer will do ::create for us if // passed an array but still gives us the ability to create our own instance // of ServerConfig if we needed to ServerConfig::create($value) ); If this were done using functions then they might have made it look like: use GraphQL\Server\standard; use GraphQL\Server\Config\create; standard(create($value)); The reference might make sense _while you're writing it_ but if you come back two weeks later and look at just the one line, good luck.
I did the entire thing on my phone. Only took like 6 edits too :)
Not sure what else I could add. You could install the software in the article and examine the generated proxies. But it might be best to start with the [official Symfony approach](https://symfony.com/doc/current/service_container/lazy_services.html). They explain things much better than I can.
&gt; I use the same strategy Guzzle use and I never heard someone complaining about loading hundreds version of Guzzle file in their project. If you want me to complain about Guzzle as well, sure. It annoys me a lot that Guzzle made a function called `json_decode` and `json_encode` because now every time I go to autocomplete them my IDE wants to use their version first (creating a dependency landmine if they ever remove it now) so now I have to be extra vigilant just because _any_ package includes it (whether I use Guzzle directly or not). Of the 60 packages I currently depend on, less than 12 of them use autoloading function files. &gt; If you are using composer my functions.php will be require exactly once so for me that's not a big issue unless proven otherwise. It will require once for every request. If the server is getting hit by thousands of users an hour your decision has just put additional load on 99% of requests that may only make use of that file in 1% of the requests. One file isn't much, and in the grand scheme of things that's probably less than 1% of request time, but if every package embraces that design then that 1% inflates by 60 times. It's a slippery slope that could be avoided altogether.
Just because someone is doing something for free or as a labor of love doesn't mean they should have carte blanche or be free from feedback or debate. That's a really good way to ensure a project never grows and that developers never improve and defeats any value behind open source contributions. If someone offered to operate on you for free, even though they aren't a doctor or were doing unsanctioned experiments, would you still say they're allowed to do it however they want or that observers weren't allowed to say they're doing it wrong? That's an extreme but the same principal applies. They posted their library to a public forum, the forum is now allowed to respond. Do you think only confirming feedback should be allowed?
It is incredibly difficult to get authentication and authorization right. Even when using an off-the-shelf framework. Spend a few days browsing [OWASP.org](https://OWASP.org), at the very minimum to get familiar with the current best practices and needs of authentication and authorization. Take a trip down to NIST's password guidelines: [https://pages.nist.gov/800-63-3/sp800-63b.html](https://pages.nist.gov/800-63-3/sp800-63b.html) And remember that security is always a risk/reward tradeoff. The best solution security-wise is often not the best solution, because it puts undue burdens on the users, who will find ways around the system, reducing its security in ways that you can't control, such as taping passwords to the bottoms of keyboards.
[@zeevs's latest tweet](https://i.imgur.com/GAsBVex.jpg) [@zeevs on Twitter](https://twitter.com/zeevs) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Depends on how well your team is acquainted with all of the threat vectors. Do they know what session fixation is? Do they have a firm grasp of information entropy? How do you store passwords and _why_ do you do it that way? There are a lot of moving parts to authentication that could go wrong. If you do roll your own authentication system, there needs to be a serious period of study beforehand to do it right. Both of the theory via industry literature and in practice via dissecting existing implementations.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Thanks, I will look that! :)
If by "third party framework" they mean a third party service that is managed by someone else, then no. If by "developing it in house" they mean writing it all from scratch, then no. The between would be that you can use libraries and components that are configurable to your needs and hosting it "in-house". Specific libraries and components really depends on what your needs are. Each framework like Laravel or Symfony have different authentication libraries that work best for them. I wouldn't limit yourself to PHP only components either. 
It’s using the query builder so you could probably consider it a query. Because it is. How do you test that a database query returns the right results? You query a database. Why would anyone write tests for, as you put it, external code in the first place? `where` is not a domain method. It’s a method provided by the framework (which is already tested). Obviously, it can be wrapped in a repository and mocked out. But it can’t be tested without a database. (For that matter it can be tested without wrapping it in a repository as well, but that’s a different topic altogether) 
Still not sure how but I managed to inadvertently install php 7.3.0 RC3 on my development machine. Started getting warnings about "continue" being equivalent to "break" in Doctrine's UnitOfWork class. There is an issue on it and a "fix" for Doctrine will be released. It's a warning and not an error so not real bad I guess. Can't help but wonder if this is similar to the count "fix". I might add that my Symfony development web server did not work under 7.3 but by that time I realized what happened and simply went back to 7.2. 
Carefully. http://docs.mockery.io/en/latest/reference/public_static_properties.html Jokes aside, there’s the obvious solution of packing those types of queries into a repository. You can also inject the user model (or an interface that the model implements) instead: public function __construct(User $userQuery) { $userQuery-&gt;where(...) } I agree that static accessors are bad and that the framework shouldn’t encourage people to use them. But let’s not pretend that hitting yourself in the thumb with a hammer is the hammers fault. If you want to write testable code then you can. If not, you do you. 
Thanks, it wasn't there earlier.
&gt;such as taping passwords to the bottoms of keyboards. Which is perfectly fine if you are less worried about your physical environment's security than you are about the digital security of Experian, et al.
I did a search and it didn't turn up, but in seeing your comment I am sorry to be redundant and will happily withdraw the post.
Well yes, physical security being decent and all... That is, your pen testers will hang out in the smoking area for a couple weeks, getting to know the people who go in and out most often, then just ride the coattails inside. Or even just walk past the receptionist. Plus, if your users are writing passwords down, it's because they can't memorize them... Most password policies are L33tSpe@k spelling compatible, which is somewhat easy to remember. Writing passwords down is frequently a symptom of frequently rotated passwords... So instead of just "L33tSpe@k" you get passwords like "L33tSpe@k4"... Pen testers go through the trash, too. If they see a password in the trash with "L33tSpe@k4", they know someone just changed their password to "L33tSpe@k5". (Pen testers are, of course, your best case scenario.) And for the peanut gallery, the solution: Do NOT force password resets until there is evidence of a data breach. Do NOT force complex passwords. DO force users to choose passwords that have not been previously compromised. (I use the Pwned Passwords service from [HaveIBeenPwned.com](https://HaveIBeenPwned.com)) DO encourage users to use a password manager. DO make it easy for users to add either an RSA token based (Google Authenticator) second factor, or a U2F based second factor. DO give them a secure way to change their second factor, such as one-time-use tokens. DO assume that your database will be copied by malicious actors each time the accountants open links and unexpected word documents from their email, so keep authentication data in heavily stretched, 1 way hashed form (i.e., PHP's `password_hash()` and `password_verify()` functions). Or, well, rather... just head over to OWASP and spend a considerable amount of time lurking on the Security Stack Exchange site.
It's hard to say if the Core team will consider this a BC breaking change as they did with count. I'm sure once 7.3 is actually fully released we'll see this at: http://php.net/manual/en/migration73.incompatible.php But we'll have to wait to find out. I would argue that strictly speaking it will be consider BC breaking and on the list. Especially since the RFC actually dictates that it be a Deprecation Warning, rather than a general Warning like with `count()`.
What would you have me say that would be considered constructive?
The limit offset thing is horrible when tables get large and you're going through the whole thing. Each "offset" is scanning through everything it had already done previously, growing larger and larger amount of stuff to churn through, only to return the last "limit" of that run. Are you familiar with the linux head and tail commands? It's analogous to saying head -n 1000000 file.txt | tail -n 10 To get the last 10 lines after the first million of file.txt
It doesn't really matter if you roll your own or use some off the shelf solution. Personally I always build my own but I have years of experience with it. The main attack vector is almost always the session cookie because it becomes "the password". If someone steals the session key they don't really need the person's password or anything else.
Yes, I know how limit/offset works. I'm telling you that PK-based pagination only works in very limited scenarios, and isn't a common replacement for limit/offset pagination because most of the types of pagination done in modern apps relies on conditions that make it impossible to use it (such as needing the results ordered by another column, as mentioned previously - think "sort by price", "show the closest things to me", etc.).
1. It's irrelevant how long you've been coding, you can suck all your life 2. You are looking for "street creds" because you just had to type something and that something was "threading" 3. You haven't even bothered to research whether PHP can do it or not - that's a testament to your incompetence. 4. Still, after all this, have you even hinted at what would threads solve in your particular use case? No. You haven't. Why? Well because you don't really have a problem that threads solve. TL;DR: you're full of shit. 
This is by far some of the most useful and constructive feedback I’ve seen someone provide on this subreddit. He wasn’t rude and brought up some very good points. Don’t be offended when someone criticizes professional works. It’s not an insult, it’s a public service. This isn’t an advertising board. If you want a pat on the back, “good job”, for every piece of software that comes through there’s always /r/laravel 
Here's a sneak peek of /r/laravel using the [top posts](https://np.reddit.com/r/laravel/top/?sort=top&amp;t=year) of the year! \#1: [20 Laravel Eloquent Tips and Tricks](https://laravel-news.com/eloquent-tips-tricks) | [34 comments](https://np.reddit.com/r/laravel/comments/8c2tpf/20_laravel_eloquent_tips_and_tricks/) \#2: [Laravel 5.6 has been released!](https://twitter.com/laravelphp/status/961268622609002498) | [14 comments](https://np.reddit.com/r/laravel/comments/7vx60d/laravel_56_has_been_released/) \#3: [Laracon 2018 - Taylor Otwell - Keynote](https://www.youtube.com/watch?v=pLcM3mpZSV0) | [27 comments](https://np.reddit.com/r/laravel/comments/91yowd/laracon_2018_taylor_otwell_keynote/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Lack of knowledge, being a moron, wanting to use threads, thinking you're the shit and one of the cool kids (much like this guy who wrote "threading" to play with the popular children). There are many reasons, and in reality - one doesn't need threads in php userland. This guy can't even google a single use case where threads would solve anything when php executes in web environment.
&gt; This isn’t an advertising board. If you want a pat on the back, “good job”, for every piece of software that comes through there’s always /r/laravel Gratuitous shots fired... Not sure it's that true either.
Make a whitelist of allowed chars.
I have been doing some reading, and it states about not using in production, but I'm also hearing some Chinese companies are using Swoole in production... So what's the status on this?
Swoole isnt ready for production, it has some compataility issue with extentions and some PHP IO stuff can completely lock the process. But follow swoole developement, It looks promising. &amp;#x200B;
What’s your motivation for switching?
More of a speed boost really.
&gt; Just because someone is doing something for free or as a labor of love doesn't mean they should have carte blanche Er, yes it does. They either do it the way that they want.. or they quit. It's called volunteering, not slavery. &gt; free from feedback or debate. if they want feedback or debate, sure. If they don't, then they can be free from that. And even if they want feedback and debate they are ALSO entirely free to ignore every single piece of feedback they get. &gt; That's a really good way to ensure a project never grows and that developers never improve and defeats any value behind open source contributions. It is a really good way to keep whiney entitled people who don't contribute away. &gt; If someone offered to operate on you for free, even though they aren't a doctor or were doing unsanctioned experiments, would you still say they're allowed to do it however they want or that observers weren't allowed to say they're doing it wrong? Wait what? I'd never let a person who isn't a doctor operate on me. This isn't the same. &gt; That's an extreme but the same principal applies. No, it's a terrible ad hoc strawman. &gt; They posted their library to a public forum, the forum is now allowed to respond. Do you think only confirming feedback should be allowed? They disagree with your feedback. Forum responded and they exercised their right to disagree with that response. Your options are fork, or shut the hell up. 
We are using RoadRunner at production for multiple projects - https://github.com/spiral/roadrunner It’s much easier and safer to adapt existing applications since each worker is isolated and single-thread process.
Why not open source it?
&gt; since each worker is isolated as single-thread In the documentation it seems a single PHP process handles multiple requests (at least in the examples). Is that correct? Are you doing something specific so that 1 PHP process handles only 1 request? What I want to achieve is to keep isolation between requests (like classic PHP-FPM), so I wonder if there is performance gains to make with roadrunner.
&gt; In the documentation it seems a single PHP process handles multiple requests (at least in the examples). Is that correct? Are you doing something specific so that 1 PHP process handles only 1 request? Each PHP process (worker) will handle one request at one moment of time. But RR will push multiple requests to the worker sequentially. This saves a ton of time on bootload and warming up but still keep single-thread execution model (with full isolation). You can set `maxJobs: 1` and it will work as a classic php-fpm setup. Let me know if there is a better way to describe this execution model, sounds like documentation might be a bit unclear.
Laughing at installing composer just to git clone slim. &amp;#x200B; [https://pics.me.me/what-are-you-an-idiot-sandwich-28150146.png](https://pics.me.me/what-are-you-an-idiot-sandwich-28150146.png)
From a personal perspective, I think this is a great addition, and as soon as this hits release status I'm going to be loading everything I have into it, and I really like the future ideas of binary compiling to improve startup. Having to set it in the INI is an worthwhile price to pay, I'd personally rather be able to set it in code and have it picked up on the next request, or even have PHP traverse up the directory structure for a .preload.php when it first starts, but there's no doubt in my mind this feature will see a *lot* of usage.
Sadly there are no Go jobs here, not a lot of web Python jobs aswell There is still a high demand for Symfony and most likely Laravel in a few months/years so right now it's hard to work fulltime on these langages that are concidered "better" than PHP
Ah right my bad, I mixed “single-thread” with “no shared state” in my head. So it’s like react and similar projects. That sounds fine, but it requires making sur that there is no memory leak (doctrine, monolog, etc) between requests in the same process. Thanks!
Would be a great addition I think. Without solve a common complaint and problem with frameworks having to bootstrap the same code on every request - and without having to turn to things like PHP process managers.
For example, say I have a mostly PHP/HTML website built in Laravel but I need some misc JS for validation and toggling panels, etc, is it good enough practice to just create some small vanilla JS modules or similar for those kinds of requirements? Or are there any moderns tools that you might consider? &amp;#x200B; I'm also using some React for larger isolated components within the application but not sure about the smaller miscellaneous stuff that already exists. In the olden days I'd use something like jQuery but it's 2018 and I'm wondering if there's more modern solutions that I'm unaware of. &amp;#x200B; Thanks!
Definitely a flexible tool for everydays use.. no automation though, or a wax to create diagrams from source code.
Thank you 
Thank you! 
Your should take a look at [Laravel Elixir](https://laravel.com/docs/5.3/elixir). It will allow you to write your javascript modules in to a single bundle that you can include on your template view.
For what purpose? Do you want to rewrite your app to react at final? My apps mostly for internal business usage, than I don’t care about their size and just use jquery or vanilla injections in old apps. But I have one old app what I want to rewrite to react and every new component (small or entire new page) I’m making as react microapp.
Cookies are externally accessible and as such hackable. Doing something in memory is much harder to isolate because they don’t know what they are looking for
How do you kill the session if the client chooses not to delete the cookie?
You can store a session in a cookie, the reason people often mention JWTs is because when creating a REST based service you want it to be stateless which sessions cannot offer. &amp;#x200B; If you are either not worried about making your service stateless or not using REST I often store my session in a cookie, but I wouldn't rely solely on the cookie for auth. If you use HTTP only cookies they will be secure. Not being able to kill your way of authing is a big problem, if a user changes their password you need to kill all sessions associated with that account, using sessions over pure cookies solves this problem.
You typically don't just have the user id, you have the user id and a secret token. 1234_suyicvueclnpxct You store the "suyicvueclnpxct" in the database along with the user data. When you change the password or need to invalidate the user, you generate a new secret token and store that in the database. When you lookup the user, you check if their secret matches, and if it doesn't, you invalidate the session. This works for cookies and $_SESSIONs.
&gt; Cookies are externally accessible and as such hackable. Sure, if you're doing absolutely everything you can to make cookies insecure.
The cookie is used to identify the session on the server, if there is no session the cookie is useless.
 &gt; You can store a session in a cookie, the reason people often mention JWTs is because when creating a REST based service you want it to be stateless which sessions cannot offer. You can do stateless REST with session. Auth is a special case anyway. What the stateless means is same request =&gt; same answer. The Authorisation bearer token is the same as a session cookie header in all relevant matter, **AS LONG AS** you don't use session to store data not releveant to auth of the request that change the response. Missuse of session is anti restfull, true. Sessions in themselves, not really. It's one of those slight subtle points missed by history...
Cookies also become an issue when developing APIs that require CORS compatibility, doing secure cookies over CORS is a pain
&gt; The cookie is encrypted Noooooo. Cookie encryption alone is not safe. You can still manipulate encrypted text to produce undesirable results. If you're sending functional (rather than purely identification-only) data to the user, you need to sign it with a cryptographic proof of origin with a secret key - typically done using a HMAC. 
lolwut!?!?!? People should start with a book published 4 years ago? Learn PHP 5 (which leaves security support at the end of this year) before PHP 7? Yeah, no. According to the [errata](https://www.oreilly.com/catalog/errata.csp?isbn=9781449319267), this (edition of this) book still uses the old mysql_* extension for MySQL connectivity - already considered bad practice in 2012, this means everything you learn in this book is useless for PHP 7 since that extension is no longer available. The book also uses Zend Server to provide the basic Apache-MySQL-PHP setup, but this no longer offers a free version.
lol what? 
nice, and it's build with Go.
\#hashtags? \#really? \#isthisspam? \#isthisthereallife?
No, it is not spam. I am just new to Reddit. Next time I won't do hashtag if it has no use here. I am used to Facebook and Twitter :)
No, this is absolutely spam. You are only promoting your own site with cheap blog articles full of referral links.
Thank you. Can you recommend some books that would be up to date and would be understandable for a beginner to read like this book was ? Also there is a lot of software written that needs support. If you do not know anything about it it will be hard. Although you are right, if you start with a new project it does not worth it :)
I suppose my pathetic attempt at sharing old knowledge has convinced me I'd be better off being a nube in /r/golang than a contributor here...thank you for that, oh abusive one!
The encryption is (or had **** well better be) authenticated. ;)
A JavaScript file and a `script` tag work just fine. Transferring those to a larger project that uses a bundler/transpiler will be simple as well. As for jQuery, I would just write vanilla JS as the browser APIs are really good these days.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
That is a bit harsh. I see a lot of people posting Github links here. So now if someone self hosts his open source code on his domain its advertising but if its on Github its ok? I checked the page and he released the source code, he is not selling it unless I'm missing something. Based on that you could argue everyone that posts a Github link is advertising his software.
obsession over true statelessness is misguided purism, it doesn't make the system any better, safer, more reliable, or easy to reason about/develop on. JWTs further trick noobs into exposing private data (they aren't encrypted, just encoded).
He's charging $3, if you click on the download link you end up on a store page or something.
Couldn't agree more, I have many a rest app that uses sessions that are stored in cookies. I can't say I'm a fan of the stateless/JWT method of auth. Thought it was best to mention why people recommend JWTs however
Encryption and authentication are separate things.
Agreed, but you need that when you are the size of google/reddit/big app 1% of devs work on. Centralized redis session store can do such a long way
Yep, redis is great, you're right though you shouldn't be copying what &lt; 1% of companies need. \*cough\* NoSQL \*cough\* ;)
\*cough\* microservices all the things when you are a team of 2
amen to that
With regard to Events Calendar Pro's Filter Bar plugin, I'm attempting to create a custom filter; namely, I want to achieve the ability to filter by month of year. According to [this guide/documentation](https://theeventscalendar.com/knowledgebase/creating-custom-filters-for-filter-bar/), it unsurprisingly suggests you start with an existing filter, and modify it from there. I'm only beginning to become acquainted with php, however, and I'm certainly finding myself struggling with this task. If nothing else, would anyone be able to get me started, or point me in the right direction? Of all of the existing filters, I figured it made the most sense logically to start with the existing 'Day of Week' filter. Above, I've pasted the code from the Day\_Of\_Week.php file below. Hopefully it can serve as a starting point; the only other existing filter that might be useful is the 'Time of Day' filter. If it's any additional help, [here](https://dev.cfany.org/events/) is a link to the upcoming calendar's list view on the dev site I'm working on. To be clear—yes, I am in fact able to change the "View" from list &gt; month, but that doesn't get me where I'm hoping to be. I'd actually prefer, ultimately, to ditch the month view functionality entirely, once I have a Filter Bar filter-by-month functionality in place.
php can already look for a .user.ini is that not good enough?
The idea of single pre-run seems the way to go. I wish it would turn into something like this someday: `app.php` \- preloaded initial state Server::compile(...$runtimeClasses); Server::start($app); `exec.php` \- thread-safe request context Server::process($request);
Its about time that PHP fixes this obvious issue. Just with Async and preloading, Swoole simply kicks a lot of languages their behinds. Just look at the massive differences: https://www.techempower.com/benchmarks/#section=test&amp;runid=a0d6e357-e8e3-4a5b-9ef0-6175ed824b20 swoole 301,646 php-raw7 103,959 So fixing this obvious performance destroyer, is a extreme welcome addition to PHP. &gt; Would be limited to one application per server (Containers could get around this). Define server ... If its based upon the global PHP instance, than this is a issue. Because shared hosts are going to hate / never use this. Different instances of Wordpress, Drupal, or whatever running. I assume that the issue is, that yes, you can preload all those wordpress etc instances but if one gets altered, you need to restart the apache server, to reload a new version just for one client. Less of a issue indeed with containers or if your willing to take the hit reloading all.
A little more detail on this split token approach: https://paragonie.com/blog/2017/02/split-tokens-token-based-authentication-protocols-without-side-channels
what you search is server push... you can implemnt it as yoi said, but pulling creates always some problems (Traffic/Load/...) There are some good libs outthere for this kind of rewuirement...
Simple answer: You do not need a framework because PHP is already a framework. Your learning with a framework is the framework. If you really run into a issue like you need for instance a router, you look up the code in other projects and write down what you need. The more raw PHP you stay, the more future proof your code is and the less you run into the issue of losing touch with the language. A framework is another system you need to learn above PHP. My opinion is not popular here about this but all you need most of the time is a few simple helper functions. Right here i have a website that processes 20 Million / year and it uses no framework. Used to run codeIgnitor on the old version ). We ran into half a dozen bugs with CI, upgrading was no fun and it simple hurt performance for no real gain Now we use a simple routing php file, Pimple for DI and a custom mail handler because we needed some very specific code and a few files that hold "wrapper" functions. All the rest is raw PHP and raw SQL. Every developer can step into the project, we do not need to hire people with specific Zend, Symfony, Laravel or other knowledge. We developers love to point other developers to the latest or biggest languages, frameworks etc but PHP has most of the things already that you need. It simply pains me how people keep promoting full frameworks when most people do not need full blown frameworks. At best i say, stick to a lite framework like slimphp or simply use one or two files from those projects. You clearly do not need anything special. I say it again: KISS, learn this principle and stick to it. And trust me when i say it can save your company massive amounts of money.
I am well aware of this. Modern libraries that handle encryption will encrypt and then authenticate the ciphertext. This is done precisely because bad things can happen if that isn't done and because most users of such libraries wouldn't realize the need. Hence why I said that it likely is already authenticated and that if it isn't, it had bleeping well better be.
Password_hash
Great tips! Some comments, &gt; Depending how the DB storage works it’s possible you could be exposed to a timing attack How would that work? I'm really not familiar with timing attacks. Important note: We don't have a high-profile site yet, BUT it seems we are headed that way early next year. So we definitely need to up our game. When you can, I would appreciate a link to that article, thank you. &gt; The IP thing is usually a huge pain for users, especially on mobile. Thought so, this is why it isn't in yet. &gt; You might want to record changes as part of an audit trail, but that’s overkill for many applications. We might need this, actually. We're recording a lot of things already for security purposes, but authentication definitely needs auditing.
&gt; - hashed and salted passwords (using sha-512) Please don't use SHA. Use Bcrypt or Argon. You want what amounts to a "slow hash". &gt; - persistent login cookie (30-days expiration time). Cool. You can always shorten the expiration time to limit how long a compromised cookie would last. &gt; - on successful login, a random 128-byte token is generated and stored in a tokens table. Further cookie-based authentication is made by matching the cookie against the tokens table Also cool. Make sure the equality comparison is done using a constant time method, like `hash_equals()`. &gt; - session_regenerate_id() is called after each successful login Good! &gt; - Password recovery: We generate a random token and sent by email. Upon receiving, the user is prompted to enter new password. The same method is used for changing the password on request. Also good. Well, not really. I have read that these kinds of schemes are akin to backdooring your own application. I think that characterization may be a touch extreme, but you are putting control of an account dependent on a secret value that's sent over an insecure channel. Unfortunately, I don't have any better options to suggest than this. Just make sure you contain the damage by making the tokens time-limited and single-use. Also, apply the same constant-time comparison logic as with the cookie above. &gt; - require re-login when client IP address changes (can be disabled from user account) Consider also requiring this when a password changes. Make sure that it kills off any other sessions that may be running so you can lock out anyone else who may be currently logged in with the old password. - rate limiting and ban for brute-force attack blocking (similar to fail2ban if you want) If you're using a proper slow hash, you have something of a built-in rate limiter. An online attack like this would necessarily be slower than the sort of offline attack that a slow hash is designed to be resistant against. The offline crack time should still be far longer than would be reasonably useful to an attacker, provided that the passwords contain enough entropy. So, require a minimum password length and blacklist what you can of the dumb passwords.
Great in-depth comment, and sound advice. Indeed there's work to be done. Need some time now to dive deep into all this. Especially about timing attacks, which I was unaware of before posting. Interestingly, the most complex part of our custom system always was the user authentication module. Now it will get to another level, but there's no other way, actually. 
One thing what I can recommend, what the other haven said is a slow sending of the "Password recovery Token", about 15 Minutes later. So when someone have shortly access to the mail account of the user normally no harm will happen, when the token is send, because the Token is too late too use... And for the Salt I always use a System Salt and the Username as Salt for the Password, so the hash is, even if two users us the same PW, not the same. At all the concept looks, in my opinion solid.
Don't worry about that, any knowledge is welcome. thanks a lot for your contribution!
TBH I'm worried about the future of PHP. Let's hope for things get better!
I agree with the other answers. I'll just add a consideration about password change : You don't seem to be able to force user disconnect across devices when the password changes. This means that if a hacker gain acces to someone account, even after password change, he will still be auth, and user won't be able to kick him off. One of the way to deal with that is to add a hash of the password (or of the already hashed password) to the user cookie, and check both the password hash and the token.
Ensure you clear all active tokens for a given user on successful password reset to ensure all sessions are logged out immediately and require the new password to be entered.
https://togetherjs.com/
The author's remark with this graph: "Unfortunately, Swoole has two little drawbacks that make these raw benchmarks irrelevant." Read the article: https://tsh.io/blog/swoole-is-it-node-in-php-or-am-i-wrong/
yes ur right i read it. haha
Last I checked even the current opcache implementation is unsafe (or at least risky) to use on shared hosts. So shared hosts hopefully aren't using it.
Laravel is modern and elegant.
Modern encryption cipher modes (eg GCM) are authenticated.
A timing attack makes use of the difference in response time between let's say an existing and non-existing user. Let's say you return some kind of "wrong credentials" error, but for a non-existent user it's returned within 100ms, while for an existing user it returns in 200ms, you expose sensitive information about the existence of usernames to the attacker. Once a brute force attacker knows a valid user name, he's already halfway through. Same kind of information often leaks out via the password recovery process. Check to make sure it never tells the user (either in plain text or through timing difference) if the account actually exists. Also look into hashing algorithms that let you set the workload. Sha-512 is super fast, which makes it super easy to brute force if anyone happened to get hold of the hashes. This makes it unsuitable for storing passwords. There are algorithms with a deliberately higher workload that are better suited for password hashes. Password_hash() uses a good one by default, plus it automatically uses a salt and is immune to timing attacks. Of course you can try to do all this yourself, and that's a great exercise. But for production projects, I'd recommend not wasting your time and increasing the risk of making mistakes by doing that.
You should always use a completely random salt. It has the best entropy you could wish for and there is really no reason at all to cripple it by reducing it to the username. I like the idea about slowing down the recovery process though. I hate that email has become a defacto password manager. 2fa helps a lot but things like these also improve security. Also: make sure to notify the account holder of any changes of his password or email address on his (old) email address. So he will be aware and able to take action when someone stole his session to change his credentials.
To be honest, this was the answer I thought I was gonna get. This or some micro framework to do the routing and basic DI, maybe some small ORM. Thanks for the suggestion!
For traditional server rendered apps take a look at Stimulus JS from Basecamp: https://stimulus’s.org/ &gt; A modest JavaScript framework for the HTML you already have.
If you end up locking accounts after 'X' attempts at a password, don't forget to handle the case of the account not existing. That is another way a hacker could identify valid account logins.
Pretty sure you can do it with PHPReact 
[Slim 4](https://github.com/slimphp/Slim/wiki/Slim-4-Roadmap#key-features-for-slim-4) will support PSR-15. At the moment I don't use PSR-15 in production. In practice I never had the "problems" PSR-15 tried to solve. The extra "overhead". For me, the additional effort and the higher complexity are not in a good relation. It's possible to implement Middleware with Symfony http-foundation, but it's not offically supported. Symfony offers a [PSR-7 bridge](https://symfony.com/doc/current/components/psr7.html), but hasn't really established yet. I think Symfony will never implement PSR-7 directly because the entire Symfony ecosystem depends directly on the Symfony http-foundation. The idea of stackphp later evolved into PSR-7. Better use PSR-7 right away. 
I'm not sure if I get everything correctly, so a couple of links if anyone is interested: [Stateless protocol](https://en.m.wikipedia.org/wiki/Stateless_protocol) is a protocol, where neither side keeps any information - in this case, cookies. Same request =&gt; same result is called [idempotence](https://en.m.wikipedia.org/wiki/Idempotence) and that has nothing to do with this discussion.
**Stateless protocol** In computing, a stateless protocol is a communications protocol in which no information is retained by either sender or receiver, meaning that they are agnostic of the state of one another. The sender transmits a packet to the receiver and does not expect an acknowledgment of receipt. A UDP connectionless session is a stateless connection because the system doesn't maintain information about the session during its life. A stateless protocol does not require the server to retain session information or status about each communicating partner for the duration of multiple requests. *** **Idempotence** Idempotence (UK: , US: ) is the property of certain operations in mathematics and computer science whereby they can be applied multiple times without changing the result beyond the initial application. The concept of idempotence arises in a number of places in abstract algebra (in particular, in the theory of projectors and closure operators) and functional programming (in which it is connected to the property of referential transparency). The term was introduced by Benjamin Peirce in the context of elements of algebras that remain invariant when raised to a positive integer power, and literally means "(the quality of having) the same power", from idem + potence (same + power). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Non-Mobile link: https://en.wikipedia.org/wiki/Stateless_protocol *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^221567
What do people have against PHP sessions is beyond me. PHP sessions store user-related data in server-side file (or db or anything else you want) and keeps each user-to-data mapping with random Session ID. That session ID is the only thing communicated over the HTTP protocol, usually as a cookie. There is not a single use-case for storing more information inside the cookies, as they have to travel with every request, increasing bandwitdh and overhead. You can generate your own IDs and set them as sessId, you can regenerate them on every request, or anything else you want, BUT the only way to make them more secure is adding TLS (via LetsEncrypt for free). After that you are as secure as it gets - user-data never leave server side, Auth token (sessId) is always encrypted and signed.
On timing attacks: would it be possible to mitigate this by making authentication/password reset requests take a constant time of (for example) 800ms?
I need copy to clipboard and get data from there.. - thats my question. cli mode &amp;#x200B;
One problem is, some browser signatures are really common, such as the latest version of Chrome. So by using that particular user-agent when attempting an attack, an attacker would already maximize their chances. But is it a valid measure that can deter some attacks? Yes, as a side measure, definitely. We're having it on the list now. Further thoughts: Maybe some form of browser fingerprinting would be way better. Like adding screen size to the mix etc.
Got it (timing attack). Actually it's quite simple to understand, and I find the concept quite interesting, something to dig in deeper. Thank you for the details, there's a list of several things to be done embedded in your comment, so we're adding this to our plan. Indeed, you can't take such risks with production environments, the consequences would be too high.
We are half way there but you are right - we need to make sure every other device gets disconnected. How about limiting access to 1 device at a time? Would this work or be a pain for the users? It's something we considered but haven't reached an answer yet. We thought of having a security setting like ("1 or 2 devices can log at same time in the account"), default is 1, so the user can configure it if they use multiple devices to access the account, such as their desktop and their phone.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Makes a lot of sense, thanks for the tip, appreciated.
Swoole is production ready. Many have run Swoole in production for years...
Quick question. How about adding a random time to the response, through a function like sleep() or similar? In this way they can't tell anything from the time difference. As a side note, our code runs very fast (heavily optimized, including db side). The natural timing difference would never exceed 5ms or even less, even if we'd have 1 million users. I think this, combined with the above delay, might make it effective. Your thoughts?
Quick question. How about adding a random time to the response, through a function like sleep() or similar? In this way they can't tell anything from the time difference. As a side note, our code runs very fast (heavily optimized, including db side). The natural timing difference would never exceed 5ms or even less, even if we'd have 1 million users. I think this, combined with the above delay, might make it effective. Your thoughts?
&gt;Why 30 days? A lot can happen in 30 days. User convenience. It's a trade-off, obviously. Funny thing is, we have accounts ourselves with some providers of important services, that have 6 months or 1 year cookie expiration... &gt; Oh, and check all your server logs to ensure that the contents of html form fields (and thus users' plaintext passwords) aren't inadvertently being recorded if something program crashes. I'm not sure how the html form fields would end up in server logs... Application side, it won't. We don't write anything custom to the server logs while in production. The security logging we use is database-driven. Could you please give an example as to what would be the program/situation/type of crash that would create such a messy situation? And how did the server logs get exposed in the first place? Still trying to understand this.
Exactly the same here. It's a good concept, but not all design patterns are the same. 
Thanks, it's on our list now. Appreciated.
I've asked the same question in other comments, awaiting responses, so keep tuned. So far, I think it's doable. Note, the processing is fast, heavily optimized in our code/db (like a couple ms to locate a token among a million accounts) so... having an 800ms or even 500ms window would be enough. Can compensate with a usleep() or similar to account for the difference. Still, awaiting other comments.
How about using a fixed response time, say 500ms, by measuring execution and adding a custom delay? Note, our code is optimized/pretty fast. Locating a token takes a couple ms or so (actually connecting to database is far more expensive thing). Expecting &lt;5ms in the highest workload possible. I guess this aspect can help in the process. &amp;#x200B;
I don't? What seems to be the problem?
Swoole is definitely not behaving well on FreeBSD/MacOS. I can tell you this fact by the crazy amount of obscure error codes I have been googling lately.
good bot
And RoadRunner works well in a Windows environment too.
Well I have made a lot b2b applications and in offices is it not uncommon, that someone forget to lock his screen. Then the is a visitor so he misuse the PW-Forgot Mechanism. It's seldom, but it's possible. The other thing is, if the User must wait for the Token, the possible look better for their PW ;).
Just to make it clear, JWTs can be stored in cookies. So auth in cookies isnt wrong perse.. JWTs are designed for auth, its also a standard, which means the standard dictates the way they are signed, they way expiration is handled, etc. So any service/application that uses the token has a way with them, whichever the language, not just the PHP application. Sesssions in cookies arent a good choice when you have to deal with a load balanced infra (sticky cookies) or auth thats used over more than just 1 service (CORS). Something that seems simple as apposed to JWT can quickly change when dealing with scalabity. So adding this all up, auth in sessions **can** be made stateless, but isnt really by nature. In case of storage, cookies are actually pretty good since they cant be targetted by XSS as apposed to local storage.
Potential misuse here by libraries could cause a lot of pain for devs.
Or [amp](https://github.com/amphp/websocket-server) or [ratchet](http://socketo.me/) or any of the [other libraries ](https://packagist.org/?query=websocket) out there
Hey I work with Wordpress which I like, I guess. However, I had troubles to set up a multi language store with that. What I heard is that Magento or even other CMS are better for that! What do you think what should I use? A huge downside is that you need very good skills with PHP to use Magento and it's more complex. &amp;#x200B; friendly regard &amp;#x200B; P.S If somebody can invite me to PHP or Wordpress Discord/Slack that would be great.
What devs? The ones who want to 'misuse' a library can just fork it. Where there's a will, there's a way.
&gt; I don't know.. seems pointless. Is there a real world application that would require this? It is required to implement proper encapsulation, as well as private properties. Almost all languages among the most popular ones have this kind of feature (private type / struct / class...). &gt; I have come across situations where I needed to go deep into a dependency and realise I needed to override functionality.. which required me to override parent classes and extend functionality. Something like this would restrict me from modifying logic that worked for my use case in any random situation I needed to. As long as you override behaviors within public/protected API boundaries there is no issue. But since there is currently no package visible class feature the only way to cleanly define the API boundaries is to use PHPDoc tags like @internal or @api. And many libraries do not use them simply because this is not the kind of best practice heavily enforced by library users. A language support can change that IMO, because it will be a core language feature and every PHP users could be at some point curious about it. another nice thing is that it will be enforced by the language itself. 
Being free to override "internal" behaviour is still something I would consider as a feature. 
Libraries hiding things no thanks
How would we use this without using `namespace` as a block declaration? Would it be possible to do this? ``` private namespace Acme\Framework\Extension; class Foo {} ```
&gt; How about limiting access to 1 device at a time? Would this work or be a pain for the users? It's something we considered but haven't reached an answer yet. HUUUUUGE pain for the user. And that's the wrong kind of answer for a easy problem to solve : sign the token with a hash of the current password. 
&gt; Stateless protocol is a protocol, where neither side keeps any information - in this case, cookies. In rest, statelessness is apply to the server, not the client. Your server, whatever the state the rest (no pun intended) of the world is, should not change the response based on some state he has, but only on what the request contains. Cookies are sent with every request. Authorisation header is sent with every request. Both are allowed. In the real world, having a small bit of state just for auth is a usually harmless deviation of the purest setup. As long as you are not the size of reddit/google/etc, there is no need for complete stateless auth, and it causes other issues, like no token invalidation. --- &gt; Same request =&gt; same result is called idempotence and that has nothing to do with this discussion. It has everything to do with rest... And with this specific discussion, it has to do with how rest deals with authentication. Some people don't like sessions because they think it breaks indepotence. My answer to that is, no more that Authorisation token. Like I said, all state must be in the request. But slight differences in the request can produce different responses. Token vs cookie, both are sent as headers, check. If both are invalid, both will return 401/403, check. If boh are valid, both will return the same resource response. There is no more breakage of indepotence on one side than on the other. And when using cookies, you don't have to ask yourself how/where to store that goddamn token securely... Which usually is put in localstorage in bad implementations, and cookies in good ones ^^ --- It's not a religion but a solution to a problem (that in it's purest form, nobody has, even google deviates and has statefull auth), take what helps you, leave the rest (once you understand what the tradeoff are) that doesn't answer your current problem. 
Yep but it wasn't intended as a replacement for the token signing part, which is a must (and auto-logoff all other devices when password has changed). It was for a different purpose altogether. Signing off the attacker automatically by the owner login, before the password reset has been completed, based on allowed device count. Something in that line. But I agree it might be a non-functional idea indeed for several reasons including the obvious pain.
&gt; What do people have against PHP sessions is beyond me. Blanket statement when learning rest are usually harmfull to php sessions, even when they shouldn't. Then people avoid them alltogether instead of learning about where and when it's ok, and then forget rest applied to apis only... The rapid growth of js front end dev and spa doesn't help either. Bad use of session in apis (read server uses stored session data to modify the response, except auth) is usually a good way to create nasty edge cases. Rest indepotence is in part linked to the push to immutability, just at a higher abstraction level (server vs code).
It depends how complicated the store is. WordPress is blogging software and Magento is for eCommerce. I know WordPress can be used for lots of things but remember it's primarily a basic CMS. &amp;#x200B; The way I see it is you have three options. * If it is a simple store, WordPress will see you through, you'll have to do a lot of hacking around, installing plug-ins to make it into a store, but you will be able to do it. * Magento will out of the box be a store, will have all the capabilities you need but really customising it like writing modules and so on, you'll need to be a competent PHP developer, that said, there are lots of plug-ins already out there. * Use a SaaS solution like Shopify. I know it's not PHP but that's always an option you could look at. If I were you, I'd go for Magento, I don't know what your level of ability is, but there's no better way to make yourself a better developer than pushing yourself!
&gt; It was for a different purpose altogether. Signing off the attacker automatically by the owner login, before the password reset has been completed, based on allowed device count. Which means that if I have some users password, I can sign up every second to prevent him from doing anything \^\^. Bot users have a big advantage in that situation. User password change must need another system compromised (2fa, auth third party, email, other admin account agrees, ...). User password change must force relogin for anyone. User must be able to invalidate all token/sessions for his account. Even if a bad user might invalidate all tokens, as long as he doesn't have control on another piece, he can't lock someone out of their account. All other systems I've seens didn't improve security but only decreased usability.
Correct, this is why I said it doesn't work. We're looking into 2fa BTW.
That would mitigate an online attack, sure. The whole idea behind this is to slow down the attacker's enumeration of the password space, after all. If you use a proper password hash, it'll mitigate both online and offline attacks. That is what they're designed for, after all. I can't say this enough. *Use Bcrypt (or Argon)!* PHP makes this easy with the `password_` functions. If you use them well, they should even automatically harden the passwords against increasing hardware capabilities over time. You can also seamlessly upgrade your existing SHA passwords to bcrypt: - Alter your authentication code to use `password_verify`. If that verification fails, fall back to verifying via SHA. This way, users can log in with new, secure hashes or with the legacy hashes. When a user successfully authenticates: - If verified via `password_verify`, check `password_needs_rehash` and use the user-provided plaintext to create and save a new hash if that returns true. This will auto-upgrade the work factor and algorithm on passwords as PHP sets new defaults. (Like eventually Argon.) - If verified via SHA, go ahead and use the user-provided plaintext to create and save a new hash with `password_hash`. This will upgrade your legacy passwords one at a time. - Alter everything that hashes the password when a new one gets set to use `password_hash`. - Wait for all of your passwords to turn over to bcrypt. This can be hastened by having passwords eventually expire and need to be changed. - Drop the fallback authentication code that handles SHA.
&gt; Quick question. How about adding a random time to the response, through a function like sleep() or similar? In this way they can't tell anything from the time difference. &gt; The natural timing difference would never exceed 5ms. I think this, combined with the above delay, might make it effective. Your thoughts? What nobody told you this far is that timing attacks are a statistical attack, because network/ram/db noise is usually big enough to create a lot of false positive/negative. Timming attacks run the same credentials hundred/thousand of times and do an average. Adding more randomness won't help, they'll just do a bit more rounds to average the randomness out if they really need. The only good defence is constant time comparison.
Don't do fingerprinting that way. IP/User agent/etc go in the audit trail. If you really want you can do statistics/algorithm on those to detect suspicious patterns and act on it, but it's not a first line of defence thing. And it will piss of users like me with good privacy extensions... --- There is a pattern in you approach about it on this thread : you think of a problem, you try to hack a solution. Best way of doing programming, thumbs up to you. Worst way of doing security, when you are not a security researcher tho. Don't try to invent your own contraption. Look at what specialist did. Or be ready to spend the next year reading before doing anything. It's like the timming attack thing, you had a problem, thought about your own solution (adding a random delay), but you didn't knew the problem enough to stand a chance of comming with a good one. In security, it's what you don't know that you don't know that makes you fall.
Hey CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". You're useless. Have a nice day!
Note: This is a draft RFC that hasn't been touched in 3 months (according to the wiki revision history). I can find no direct discussion of it on the internals mailing list (namespace visibility has been discussed in the past, but not this specific implementation). As such this RFC is essentially unpublished. It should be considered incomplete and subject to change (or never being brought up again).
https://sylius.com/
I don't either.
Let’s be real though, how many “how to set up a LAMP stack” articles do we need? Just because OP got defensive doesn’t mean he actually gives a shit about the content. It’s pretty obvious he’s just driving clicks to his blog
Seems like the right solution for a problem we don't have...
did you purchase it? And ajax? old? what do you mean? old means low quality? please brush up your knowledge
Thanks
Huh nice. Turns out my albert installation also came with a zeal plugin.
Well I agree to most of this, it's positive criticism. However I don't assume I know, or can figure out by myself or by our small team securely (as in coder(s) vs. security experts). That's why I'm asking instead of straight doing. I'm fully aware of the risks of half-baked security measures. Coders ain't security experts. But you're making an assumption - trying to hack a solution here. That's not what I am looking for. Anyway the post has been fascinating and full of helpful insight and friendly comments. It's just needed emergency improvements for an existing system, that will be largely discarded in the favor of a new system, when we enter a new development stage (and budget), like one year ahead or two. The system currently has far less usage than the future one. By the launch of the next version, yes - proper security audit will be in place but also larger budgets, larger team and more, including compliance stuff. But that isn't in yet, likely unneeded yet, out of scope for now, and out of budget. So in the end you are right, advice is solid, just wanted to say we're not making that confusion you're talking about.
But thats not a reason to be offensive or toxic. We could ask him politely to review the content. Also everyone here was a newbie.
But thats not a reason to be offensive or toxic. We could ask him politely to review the content. Also everyone here was a newbie.
&gt; However I don't assume I know, or can figure out by myself or by our small team securely (as in coder(s) vs. security experts). That's why I'm asking instead of straight doing. I'm fully aware of the risks of half-baked security measures. Coders ain't security experts. But you're making an assumption - trying to hack a solution here. That's not what I am looking for. I was voluntarily brutish, because if it wasn't already the case, it's a position that needs to be completely squashed early, before sunk cost fallacy and other human traits make it impossible. It seems it was uneeded. I'm glad about that (even if that makes me kind of a jerk...). Best of luck.
I agree, but thats not a reason to be offensive. We should question OP about his content and maybe helping him on writing new, updated one with all good practices and modern tools. We were newbies once. Edit: 
You're not a jerk and I haven't taken it like that. Sometimes things are rough and better said like that. If so, I would have better got awaken by it even though in a blunt manner. Fortunately, I know there are things I don't know and what the implications are. No overconfidence here. The downside of amateurism in this line is too expensive, especially on a larger projects and where investments are involved. We're on a gradual slope to get there. So yeah, truth is brutal sometimes.
&gt; Randomized sleep is not an appropriate or effective way to defeat timing attacks - it doesn’t solve the real problem and basically averages out over enough attempts. Meanwhile I already found about this, through comments and external reading. Thanks for confirming again though. &gt; It might not even be an issue with your current schema through, just something I wanted to throw out as a possibility. And even then, it’s towards the bottom of things I’d be actually worried about. Assuming a limited amount of time, I’d focus more on stuff like making sure permissions checks are present and correct everywhere, and that your database requires SSL connections with IP restrictions and has non-default passwords and stuff like that. Right. Well rest assured all these common practices (db; filesystem; server management etc) are already done and more, we have no worries there. The overall measures we've taken to minimize attack surface are probably more than the average project out there in a similar scope. It's the authentication part that still needs most improvement, although we're not taking anything else lightly.
If you have multi vendor database setup then you are forced to use ORM. If it’s just one dB vendor then it’s easier to use native SQL.
&gt; doing secure cookies over CORS is a pain That's the whole point of preflight. It might suck having to take the extra steps early on to set up, but it's not that bad unless you have a public API and need to allow all hosts for some reason.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; Information hiding is literally one of the foundational principles of OOP. Not principle, tool. It's about not having to know the full complexity and intricacy of everything, and reducing interdependencies. Hiding is a tool, not the goal. This RFC adds a new way of hiding things, but in a way that doesn't really helps the real underlying problem.
&gt; Not principle, tool. &gt; Hiding is a tool, not the goal. Principle doesn't mean "goal".
You can use vendors namespace then
https://i.imgur.com/kn488mY.jpg
It sure is!
The closest thing now is anonymous class, we need a private class in php http://php.net/manual/en/language.oop5.anonymous.php
Ok. If we play this little game, it's not information hiding but encapsulation. Doesn't change my point. Encapsulation is not about hiding but reducing coupling. The rest is (un)welcomed side effects.
Something like this: [https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/filters.html](https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/filters.html) ?
&gt; We just need to set up a reverse proxy using NGINX or any load balancer and it’s done. But by doing that, we lose extreme performance boost that Swoole offers. Actually that statement is so wrong. When you set Swoole behind Nginx, you are running Swoole+PHP at the speed of Nginx. Try running your same code, with Nginx + Raw PHP and then see how much slower your results are. SSL support can probably come in the future given how fast the Swoole devs work. Up to 6 months ago, HTTP2 support was a big no no. Frankly, i wish all this stuff was build into PHP. Their is some work going on with async and preload but its still a far away.
Unless your code is perfect and will always remain so you should have an error_handler that logs e_error etc along with e_user_* , it's usual to always include a stack trace with the log, and sometimes the http request variables. Some people use elk or other web interfaces to their logging system, usually these are authenticated or firewalled off. As a protection against your own devs seeing passwords in the logs and as an extra layer of defence for the logging system then passwords should be scrubbed before being logged
I as a developer should be able to override anything included in my code. Public, Private, Protected, etc is all BS. I have come across many libraries, some extremely popular that will not fix issues in a timely manner or flat out refuse to do so. These are libraries that are updated on a regular basis, so forking and consistently updating is a pain that should not exist. This RFC just makes the problem worse. None of this should be enforced at the compiler level. Or, if it is, it there should be an easy way to allow it within the code. I do believe this should be enforced at the IDE level. If you aren't using a modern IDE... well either you aren't a professional developer or you need to grow up. A modern IDE is any text editor that has code completion, code linting, code highlighting and in this case, some sort of hint validation. &amp;#x200B; Back to how I believe this and other visibility things should be implemented. I'll use a simple class as an example... `class crappyForcedAssumptions {` `private function writeSomething(){` `//I do something that assumes your use case and you can never change that` `}` `}` &amp;#x200B; I should be able to do something like... &amp;#x200B; `class stillCrappyButFixedAssumptions extends crappyForcedAssumptions {` `private` **override** `function writeSomething(){` `//I know I am overriding a class I am suggested not to, but I explicitly said it was OK` `}` `}` &amp;#x200B;
Yes. I use "private" classes more often than I'd like to admit too.
Autowire/autoconfigure doesn't make your code any less flexible or reusable. Where do you come up with that?
No, you do: ``` namespace Acme\Framework\Extension; private class Foo {} ``` The accessibility declaration is on the classes, not the namespace.
http://php.net/manual/en/function.socket-connect.php There is an official implementation for both receiving and sending data over sockets. You need to enable the extension similar to how you would php-zip or php-xml, using apt-get, yum, amazon-linux-utils, etc.
How is the PHP work situation in the USA and Europe (or any part of the world for that matter)? I'm from Argentina and there aren't that many jobs for PHP seniors. My job is removing PHP from our Tech Radar. I will eventually switch to Node or Java.
Hello. I am coming from typically using python. I’m accustomed to using the requests module to make Gets and Posts (which is really easy to use). I see in php my main option is cURL, but it seems overly complicated for what I am doing. I just need to be able to make Gets, Posts, and set the headers. Is there anything else available? 
&gt; How is the PHP work situation in the USA and Europe Big enough for everyone, PHP isn't going anywhere, as long as you can separate yourself from the Wordpress crowd.
Hace 2 semanas empecé un laburo nuevo de San Francisco. Si tenés nivel, hay mucho laburo
I'm in the US (North Dakota) and the stream of PHP work is seemingly endless. The only barrier is the number of hours in the day. It's been like that for most of the 15 years I've been doing PHP, and it doesn't seem to be slowing down any time soon. If you work hard enough, pulling in $150-$200k a year isn't difficult.
One very easy-to-use option is the [http-foundation Symfony component](https://github.com/symfony/http-foundation). *Using the Symfony framework is not required to use http-foundation.*
Ditto all of this except the state. Just have to work for it. 
Seconded. Guzzle is great for this. 
PHP cURL is as low level as linux curl If you does not have experiences with linux curl, use Guzzle for all kinds of HTTP requests or file\_get\_contents for simple HTTP Get requests. If you have experiences with linux curl, then php cURL is a lib to go. Just take 15min to set up and you can handle all kinds of HTTP requets, much easier to debug than Guzzle (Guzzle have a lots of data manipulation and config overriding that sometimes cause an unexpected output).
&gt;The cookie is sent only over TLS, so it can't be stolen by a MITM. (Unless your cert is compromised somehow.) Really? do you use antivirus application? (Something other that the default one that comes with M$ windows?) Then the antivirus is doing MITM and it even installed it's own certificate into your trusted store and it's creating a fake certificate for each website you are visiting.
Since any response would be appreciated, my suggestion would be not to tangle ABAC with ORM, since not only they have separate concerns, but they "exist" in different levels of abstraction. Probably. And since we've touched the subject of ABAC, what implementation do you use? Thanks!
Do they need any remote work? 
I think both examples suffer from poor naming, and that with better naming your argument would be less convincing... ```php use function GraphQL\Server\createStandardServer; use function GraphQL\Server\Config\createConfig; createStandardServer(createConfig($value)); ```
I explained the specifics of it right here: https://www.reddit.com/r/PHP/comments/9mnof3/diving_into_symfonys_dependencyinjection_part_1/e7uqfyy/ Let me put it in short: when you have autowiring, you feel encouraged to put as many components as possible in the container. You don't build hierarchies of components, you just throw it in the container, flat, and you get it out autoconfigured. The problem is in the container, you can only autowire singletons, identified by their type and optionally by an annotation qualifier. The moment you have two of ANYTHING, suddenly you need half your components manually configured. But, see, if you had to build your project hierarchically, and you had `X` components throughout, the hierarchy reduces the surface of configuration to `log X` without any autowiring. While if you had them all flat in the container, and you need to manually configure half of them to use a different instance of some type than the rest, you need to configure `X / 2` components manually. So what happens is if you stick to singletons and autowiring - you're good! The moment you need two instances of something - you're fucked. While with proper architecture and no autowiring, you can use any amount of instances of the same type (be it databases, templates, models, whatever) and you do very little work (`log X`) to achieve it. Yeah, that's a very drastic architectural flaw and limitation in flexibility in autowiring. You're literally missing most opportunities for code reuse and proper architecture by having to stick to singletons (pseudo-singletons, by their nature of being statically identified by type and qualifier, which is global for your project).
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; And also, this approach will not be compatible with servers that host multiple applications, or multiple versions of applications - that would have different implementations for certain classes with the same name - if such classes are preloaded from the codebase of one app, it will conflict with loading the different class implementation from the other app(s). &amp;#x200B;
If you have a service which is critical to be checked in tests, I use Mockery [1] to "disable" the service by simply registering it in the global `setUp` with the container: ``` /** * Replaces the classes with mocks which don't allow any call. * * This useful for e.g. sensitive services which may perform * remote calls to prevent them from accidentally really * making outbound calls. */ protected function disableClasses(): void { $this-&gt;disableClass(YourService::class); } /** * Registers a Mockery instance for the class without expectations * * @param string $className */ protected function disableClass(string $className): void { $this-&gt;instance($className, Mockery::mock($className)); } ``` I use this for stuff like: - HTTP clients to avoid accidently sending request. In big projects, it's easy to overlook things with integration testing - Very crucial services which must not perform anything when testing but need expectations which are highly context dependant This is one of the thinks I like really like Mockery about: it's default "no expectations" is very useful to _detect_ calling a service which maybe shouldn't be. Or to remind the developer not to forget about setting a proper expectation. [1] https://github.com/mockery/mockery
&gt; and PHPass is not quite good either. To be fair, phpass did support (and preferred) bcrypt hashes from the very first [phpass release](https://www.openwall.com/lists/announce/2005/05/31/1): &gt; The preferred (most secure) hashing method supported by phpass is the OpenBSD-style bcrypt (known in PHP as CRYPT_BLOWFISH), with a fallback to BSDI-style extended DES-based hashes (known in PHP as CRYPT_EXT_DES), and a last resort fallback to an MD5-based variable iteration count password hashing method implemented in phpass itself. WordPress just went with the fallback mode and they still do.
The tables get bigger usually refers to column count rather than row count. More columns to read, parse and map into specialized types. Also I guess if you do a large select and your joins are set to eager. It's not too much of a problem with good caching and tuning queries to select only the columns you need, something that can be done in most ORMs query builders.
In the UK trying to find a dev, preferably semi-local. It's not easy, they keep getting snapped up.
Magento is big and complicated, it also has too much legacy and doing anything on it costs shitloads of money (Magento devs rake in 100+ eur/hour rates easy due to that).
&gt;hashed and salted passwords (using sha-512) I still don't understand this in 2018 unless the code was written pre 2013 and not touched since. Why would you even consider this let alone leave it in your codebase?
\&gt; Is there a clear benefit to developing login systems in-house? No. It's just a little bit cheaper on the long term. 1000 active users is 13$/month + integration cost of the solution. vs Build everything yourself relying on a good framework + user security solution (Symfony + FOSUser + HWIOAuth for instance). You need to factor the cost of maintenance and engineering work + learning curve. &amp;#x200B; \&gt; others said developing it in house would let us handle security better and have more flexibility It's also 100% unsecure no matter how well you build it. Because let's be honest with our dev skills, we cannot ensure we will build a system that won't fail especially if you need to maintain it yourself, keep upgrading it. Unless you have an inhouse 10+ years experience in fullstack security. &amp;#x200B; If you want true security, you need to rely on people who are specialized in protecting user data. [www.auth0.com](https://www.auth0.com) or AWS incognito are some good industry standards.
Hi, co-author if the library here. We're aware of the slight overuse of namespaced functions, we will most likely strive towards reducing their usage. When we started out we only exposed some functions that were part of the public API, but over the time it grew to more and more files. It is indeed a shame that functions can't be autoloaded. Which hardcoded static methods are you referring to?
How would one structure a php application the right way? I've recently been getting into native php mvc but I've been hearing a lot of:"it's almost impossible to enforce mvc in php". Also. I've watched a lot of tutorials and see that people tend to choose very different approaches while writing mvc. I'm at the point where I don't even know what's right and wrong anymore.. 
Yes this is used in production in one customer project so far. Going forward we will use this library in all new PHP-based GraphQL projects. The documentation definitely leaves something to be desired, although the plan is to update it slowly but surely.
Actually, the myth is about row count. You should also never make lots of columns anyway, 15-20 is the most I have (*user* table because of first name, last name, salt, is\_enabled, last\_login, created\_at etc...). If there are more, that means DB is wrong. &gt;Also I guess if you do a large select Not sure what this means, there is no possible way php can handle 100 million objects. And I doubt any other language can do that as well. It is just regular paginated results handled by my own paginator+PagerFanta bundle. &amp;#x200B; &gt;It's not too much of a problem with good caching and tuning queries to select only the columns you need My code doesn't do any result caching, it is 100% dynamic. Restricting to few columns makes no sense as I would completelly loose php objects; I really don't want to work with array when I can have an object.
What would you say the difference is between senior and non senior php developer job? I do freelance web dev, really know my stuff and clients always very happy, but I think I want to get a normal 9-5 job. This would be my first proper job (not freelance ). Has anyone done this? I’m not worried about my php knowledge, but the things such as never having actually worked in a real team before. Any tips?
It happened to me once, a long time ago. If you only use base types and no or few specific database vendor features, it might actually be easy to do, depends on your schema complexity. As soon as you have stored procedures, triggers and so on, you're fucked, you need to port everything, and you might even won't be able to have the same features in the new database.
&gt; As you know it's a common example in many tutorials I don't. What tutorials are you talking about? &gt; Anyone here actually switched DBs at some point? Quite often a different database is used for unit testing. Also, at some point we started using Sphinx Search not as a substitute but as a supplement to Mysql database. Also, beside end-user applications there are libraries and frameworks, that would benefit from supporting different database backends - so you don't actually "switch" but just being able to "plug" different DBs from the beginning. &gt; abstraction is your friend Yes. And for much more reasons than just switching the database vendor. &gt; maybe my projects aren't that big enough. Exactly. 
Some tips: \- [https://steemit.com/php/@crell/php-use-associative-arrays-basically-never](https://steemit.com/php/@crell/php-use-associative-arrays-basically-never) \- Call a php script/function in batches. \- Use generators where applicable (for instance when reading a csv line instead of putting al line-data in memory). If you'd execute a php script that does a migration, (long running process) then in the loop you need to unset variables to avoid referencing to a variable value from a previous iteration. You'll also need to clear compounding arrays on time (end of each batch). In the case above I prefer to start a background proces after each defined batch. 
Tutorials? It's everywhere. I've read some from 10+ years ago and still read it on newer ones today. Unit testing is not a real switch though, I'm talking about years in production then switch at some point. Your use case doesn't look like a switch and as you've said it's a supplement. I have no problems with abstraction, I use it. I'm only asking for cases of complete DB switch that benefited from an abstraction layer after years in production and what could've possibly caused the switch.
You would typically return a Closure from a funtion when trying to split a function to fit the parameters of a different function (often array\_map, array\_filter, array\_reduce, array\_walk) &amp;#x200B; A function that accepts a function as an input or returns a function is called a higher order function &amp;#x200B; Here is an example of how it would typically work: &amp;#x200B; \`\`\` $favourites = \['tesla', 'lexus', 'porsche'\]; $cars = \['porsche', 'ford', 'golf'\]; &amp;#x200B; &amp;#x200B; function is\_favourite\_car(array $favourites) : \\Closure { return function (string $car) use ($favourites) : bool { return in\_array($car, $favourites); }; } &amp;#x200B; $favourite\_cars = ( array\_filter($cars, is\_favourite\_car($favourites))); \`\`\` Here is the loop version: &amp;#x200B; \`\`\` $favourites = \['tesla', 'lexus', 'porsche'\]; $cars = \['porsche', 'ford', 'golf'\]; &amp;#x200B; $favourite\_cars = \[\]; foreach ($cars as $car) { foreach ($favourites as $favourite) { $car\_match = ($favourite == $car) and $favourite\_cars\[\] = $car; } } \`\`\` &amp;#x200B; That pattern is called partial application, often confused for currying, it allows you to fit your function with any function that accepts a function as an argument &amp;#x200B; &amp;#x200B; &amp;#x200B;
Hello, I’m one of the authors of the project in question. I won’t go into comparing the two projects, however what I can say is that we’re heavily focusing on the future of GraphQL. What this means is adding developer-friendly support for using advanced features of GraphQL such as custom scalars, custom validators, resolver middleware and schema directives. What comes to integrations with frameworks I must say that aren’t that many. However, usually a GraphQL engine is basically the graphql-function, so integrating the library with you favorite framework shouldn’t take long at all. @arnaud_lb Does this answer your questions?
I've never directly switched a vendor for a whole project, but I've frequently taken code I've written in one project and made a separate library out of it. It's good to be able to write something against eg MySQL, then have a new library I can install into my postgres or sqlite projects. 
Checkout https://phptherightway.com/ it's by far the best guide for all things PHP without depending on a framework.
One of the main reasons we started this project was actually the lack of innovation in the GraphQL space in PHP. Existing implementations are either hard to contribute to and maintain or they do not fulfill the specification. We aim to provide just enough "skin on the bones" to make the core useful on its own. Even the people who wrote the reference implementation at Facebook have said that it's just that, a reference implementation.
https://i.imgur.com/DK1ckG8.png
Not a whole project but there are Laravel packages I wrote that I have used with MySQL and PostgreSQL, and the tests normally use an in-memory SQLite database.
It does happen, but in practice a lot more rarely than tutorial suggest. Only time I've ever done it recently was where I had a legacy system using MSSQL as the database (written in Delphi) and we needed to eventually move the new, web, version to MySQL eventually - but have both web and legacy versions running on MSSQL in the interim. The new system is written in Laravel and Eloquent did a reasonably good job, largely because there was little in the way of custom TSQL. A few years ago I moved a spatial orientated system MySQL/Mongo system to PostGres (specifically PostGIS) to take advantage of the PostGres GIS and JSON extensions. In that case no significant abstraction (beyond a PHP class which actually did the database access) so it was a significant rewrite *because the reason for moving was to take advantage of PostGIS features* - so abstraction wouldn't have significantly helped there anyway, So I think that sums up why abstraction for the purposes of moving vendors is less use in practice - one one hand if the databases you're transitioning between are functionally similar such that abstraction does 'work' then there tends to be little reason to move vendors in the first place, and on the other had if you're moving to take advantage of new features then you don't want to hide behind the lowest common denominator of abstraction anyway. 
Lots of tutorials for beginners tout vendor neutrality as the main feature of PDO.
**Functional testing** Functional testing is a quality assurance (QA) process and a type of black-box testing that bases its test cases on the specifications of the software component under test. Functions are tested by feeding them input and examining the output, and internal program structure is rarely considered (unlike white-box testing). Functional testing usually describes what the system does. Functional testing does not imply that you are testing a function (method) of your module or class. *** **Unit testing** In computer programming, unit testing is a software testing method by which individual units of source code, sets of one or more computer program modules together with associated control data, usage procedures, and operating procedures, are tested to determine whether they are fit for use. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
I'm literally currently doing this now. &amp;#x200B; I have a product built originally in mySQL. The product is successful, and some enterprise clients need "local" versions. But their internal ICT systems only support MSSQL. &amp;#x200B; Quick flick of the Laravel database driver, and no other line of code changes, and we are now compliant with their requirements.
Speaking from my own experience, a senior dev will have to have a number of years experience in a professional role and when in that role, would be expected to lead by example and make project critical decisions with regards to the code. If you have not been in such a role before, I would expect it to be hard for you to go straight to a senior dev role. Instead, get a normal dev role, prove your worth and knowledge, and seek promotion.
Where abouts?
Yes. I actually switched from MySQL to PostgreSQL.
No but we use 3 different SQL implementations from one website...
And my answer was judged by this line only. I wonder whether it's just usual haters or people here indeed cannot read more than one paragraph. I *hope* it's the former. 
I don't know whether other countries have the same situation as I experienced, my first job was sysadmin, but tasks I handled mostly related to hardware-based networking configuration. So most sysadmin jobs required CCNA etc.. I don't like hardware configuration. that's the main reason why I switch to programming even though I am not a well-paid programmer...
First of all; /r/phphelp Second of all; That's not PHP.
When @crisu83 says OPCache he surely means any kind of fast persisted cache, e.g. APCu or Redis.
Yes, this was just an example.
PDO or MySQLi? Which do you use and why? Used PDO like 98% of the time. Would love to hear a perspective from anyone who tried both/something different. Pros and cons. 
MSSQL is very robust SQL implementation. Which is to say MySQL is very limited SQL implementation.
**Argon2** Argon2 is a key derivation function that was selected as the winner of the Password Hashing Competition in July 2015. It was designed by Alex Biryukov, Daniel Dinu, and Dmitry Khovratovich from the University of Luxembourg. Argon2 is released under a Creative Commons CC0 license (i.e. public domain), and provides three related versions: Argon2d maximizes resistance to GPU cracking attacks. *** **Bcrypt** bcrypt is a password hashing function designed by Niels Provos and David Mazières, based on the Blowfish cipher, and presented at USENIX in 1999. Besides incorporating a salt to protect against rainbow table attacks, bcrypt is an adaptive function: over time, the iteration count can be increased to make it slower, so it remains resistant to brute-force search attacks even with increasing computation power. The bcrypt function is the default password hash algorithm for OpenBSD and other systems including some Linux distributions such as SUSE Linux.There are implementations of bcrypt for C, C++, C#, Go, Java, JavaScript, Perl, PHP, Python, Ruby and other languages. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Switching DB backends is pretty rare. I suppose it _could_ happen if you made a bad choice at the beginning ... like seriously starting out with SQLite for anything but a quick proof of concept. The _real_ benefit of database abstraction is the ability to use open-source components in you app that may need data-layer access, and not need to worry about back-end compatibility. That's the far more common use-case. Actually switching back-ends on a complex project will be a _very_ complex task. Inevitably, any project of significant size will have customized SQL written to overcome performance bottlenecks that can't be easily tackled through your abstraction layer, as well as views, constraints, functions, etc... in your DB that do things like police data integrity, simplify common operations, etc ... will need to be ported as well. You'll almost certainly never switch back-ends in a mature project, unless there's a highly compelling reason to do so.
It's a pain. I'm using it and it's hard to setup and mentain. Magento has built-in translations that work much better. It's very easy to translate the Magento store whereas using WPML slows your Website speed considerably.
Smells like NodeJS
It's a CPU bound application. JIT optimization is presumably more effective than other typical (I/O bounded) PHP applications. So I've tried 3 versions of VMs. ZendVM(PHP7.3-dev), its experimental JIT version, and HHVM. Currently HHVM is the fastest, the JIT version of ZendVM is the second. If you get 10 fps with the vanilla ZendVM, probably you can get about 15fps (or if better, 20fps) with HHVM.
Yeah but I want SQL answer bro
And this is a PHP subreddit. 
It doesn’t belong here. 
You know or not?
I think I see what it is. Ask in the correct subreddit and then someone can confirm my suspicion.
Ok thanks
Not database vendor, but databases can get optimized and table relations can change, so abstracting that as much as possible and applying DRY to centralize the basic queries has certainly been my friend.
Am I missing something or does every ORM not come with a query builder?
You’re not wrong. Well, I’d argue with “very” limited. But, none of those differences matter to all but the most seasoned database architects, and certainly don’t matter if you’re using an ORM.
Yeah wpml is trash imo lol. 
To me, simply reading the documentation on PHP.net together with some online tutorials was enough to get to know PHP. Check it out, it’s free: http://php.net/manual/en/index.php
Just read the back cover and "about the author" section. Doesn't look like they've used a proofreader, the writing style would annoy the hell out of me.
Any project that is complex enough to reach these kinds of scalability bottlenecks you tend to decide during the design phase. In 20 years in enterprise/government IT I've seen such a switch happen once and it's just to get out of EOL legacy products.
I didn't really pick Apache. If I was more or a knowledgeable Nginx expert I would probably pick that. I'm installing Slim Skeleton. It that done better with composer? If so, I'll update...
Percona is basically MySQL &lt;o&gt; 
I already wrote a few words about this above. We have a very active core development team and we’re using very modern tooling to ensure the integrity of the project (such as unit tests and static type checking). Our team also has a long history working with various open source projects and we are more than motivated to bring the best of GraphQL to the PHP community now and in the future.
You usually use ORM's for the ease of development and then go back and hit problem areas later. They're just fine most of the time, especially in CRUD heavy stuff.
In my 12 year career we have done it on 2 different projects. One was from MySQL to Postgres since we needed to add on spatial features which postgis is (was) much better than mysql. 2nd we are actually doing right now, which is switching from MariaDB to Greenplum. I am very concerned about this migration though since we have zero in house expertise on greenplum...
Changed from MySQL to MariaDB. But they're almost same thing if don't use advanced features.
&gt; Switching DB backends is pretty rare. I suppose it could happen if you made a bad choice at the beginning ... like seriously starting out with SQLite for anything but a quick proof of concept. Adding to this: it's more likely to happen if you're in a huge org and designing apps for "long" (10+ year) lifespans. I've noticed the "hey we're an Oracle shop so use it" has become "this licensing model sucks" and there's a gradual effort to get everything we can off.
I didn't. Your comment was not that bad, except where you pretend you haven't seen these claims (but maybe you never read tutorials, what do I know? 🤷🏾‍♂️). 
I develop and manage an API for a company. I inherited it as a C#/WCF project backed by a SQL Server database. I am working on a conversion to PHP and PostgreSQL. Step 1 is migrate the code base to PHP. As I do this I'm creating interfaces and then writing concrete implementations for SQL Server first. That way I can replace the code base while retaining the existing database. Step 2 will be to implement those interfaces for PostgreSQL, test test test, migrate the data, test again, and then switch the database connection in the configuration. &amp;#x200B; First time in 20 years of coding I've ever actually had to do this.
I know you didn't. And I know my comment is not that bad. So it makes me wonder. Just an academic interest though.
No because code suitable for one database platform is not compatible with another, no matter what Doctrine / anyone else tells you.
don't test on in-memory databases. test on the platform you're using in production. each db platform have their own... 'things'.
If you need a book on PHP in general, there is no need for the book on the exactly 7.3. Any book covering 7.1 or 7.2 would be OK. If you need to know what are new features in 7.3 specifically, you don't need any book, release notes is a good and reliable source. Any book that claims to have the information on 7.4 or 8 is a hoax.
My wife is very German. Both of her mothers and fathers last names are the most German last names I've ever heard. She doesn't know any German and cannot do the accent. Which I guess is okay because German isn't the most sexy accent imho.
Generally this is nice, but I also love having an in-memory database when I'm working remote and want to do local unit tests (e.g. on an airplane with terrible WiFi).
Thanks, but I do already know the ground concepts of PHP up to 5.4, so just wanted to learn on new things and what have changed since then with some good and clear examples. So your mentions are ok for me in such case.
locally hosted databases are a thing
no, it's super practical! if you test on in-memory databases, you're not testing.
Hah, I think I am just an old-fashion dev ;]
fire up a docker container. it's really great for testing localhost.
You're clearly not one to hire.
It happens, but rarely. Eg, a large company that has systems written in-house that use Oracle, MSSQL and MySQL might want to standardize on one system in order to avoid having to employing 3 different support staff. Or a company might migrate from Oracle to something else in order to save money. Or they might "upgrade" to Oracle because someone in senior management has bought into the idea that it must be so much better than everything else because it's so expensive. But generally speaking, developers don't switch database vendors. Which is why you don't often see marketing material aimed at making people switch. It's more about getting them from the start, and knowing that they'll stay with you.
Excuse me?
Sorry, guess I missed it. Fair point, thanks!
Unit tests should not rely on any external resources such as the network, because that makes them slow and brittle. &amp;#x200B; For other types of tests an in-memory database makes sense, I'd just make sure the real DB interactions are tested at some point.
Not a fan of Magento after working with it for a decade. But I'd recommend it over WP 100%. At the moment I'd recommend Magento 1.9x over 2 M2, though. M2 is still very buggy, slow and not as easy to work with as M1. I think it's overarchitected (but getting better). There is a community-fork of M1 that will be supported beyond 2018: https://github.com/OpenMage/magento-lts
There are no books around focusing on the new features. If you need to know them, then - http://php.net/manual/en/migration70.php - http://php.net/manual/en/migration71.php - http://php.net/manual/en/migration72.php is all you need
If a user installs malware like that onto their computer, of course all bets are off.
I've been a developer for about 35 years. Not once have I changed just the database back end. &amp;#x200B; \*If\* your ORM (or native queries) thunks everything down to plain SQL92 you \*might\* just get away with it. But then you're not taking advantage of any of your back-ends benefits.
The ORM is tested on all supported databases. If only using features of the ORM it's not necessary to test things that were already tested upstream. If your venture outside the realm of your ORM and/or querybuilder you should test with all supported reallife databases (for the reasons you stated).
Thanks, however I was expecting some more real case examples. Also, these do not outline all changes/updates, compare them with changelogs for instance.
I wouldn't buy it, no. I have posted this a few times before, but I would like to recommend "Modernizing legacy PHP applications". This book looks like a copy-paste of the changelog, with examples for each. For PHP 7.3, I wrote a blog post (https://ayesh.me/Upgrade-PHP-7.3) that explains the changes. You will see that although each version makes PHP better, the core concepts (code styling, proper abstraction, OOP practices, etc) remain the same. If you want to learn changes, read the RFCs and learn how to compile PHP from source, so you can try new PRs out. You can also participate in the mailing list and make your voice heard, if not contribute!
You have very strong opinions but in three comments you've offered no deeper explanation behind them. That's how anyone can easily tell you're an idiot. 
You obviously don't have to try everything. I'm trying out typed properties nowadays, that might come with PHP 7.4, and I'm so excited for it. PHP 7.3 also drops a few things I don't care, and I certainly didn't spend a second trying them out. 
I don't want to try them out, but check how they work and what they do, inspecting sometimes nasty documented PRs is pain in the ass.
Exactly. In a generic package like that, there is no one production database by definition, so you have to code against a generic interface and avoid database-specific functionality. If I use Eloquent for that, I can only verify that I'm using Eloquent correctly. Laravel has its own tests to make sure Eloquent works as expected.
For the rare cases I need to test certain database bits I use SQLite.
yeah we use Oracle at work but for personal stuff I use mysql so I sometimes have to make a conversion if I write something at work I wanna use at home or vice versa.
To be honest no. I never had to change databases and at the end of the day i dont really care because i test MySQL/PGSql compatibility during the development phase. However, i have changed from database to rest service. In that case you should use repositories 
I had to do it 2 times in ~15 years. Once because the old system used MSSQL, designed by a student with no idea what they were doing, moved to MySQL. Once because some smart ass in the company thought Oracle SQL was better, so we moved some stuff there, and then back when they found out the license costs. The only times you would realistically have to do this, would be: "retarded client with $, where the $ part makes it right", and when you need a special feature of some other system, ex: redis/memcached, transactions SQL, spacial queries, etc. But those reasons are usually for optimisation, and they change every year, making that part of the code hard to change no matter how well your abstraction is. So for normal stuff, you would never have to worry about it if you abstract everything in one lib (there will always be a way to GET/SET/UPDATE/DELETE that works the same). But when you get to the optimisation part, you will have to re-write that abstraction 90% of the time.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; State of affairs The pie chart labelling her is terrible. &gt; What version am I running? Why does this section not include phpinfo()? It should also mention that `php -v` can return a different version than that used for web requests. &gt; The issues... No mention of backwards compatibility issues (removal of a number of extensions, for example)? No link to the manual upgrading guide? &gt; Why upgrade? &gt; PHP 7.x ships with the Zend engine, giving drastic improvements in speed and CPU usage. PHP 4 and 5 also used Zend Engine. The site in general seems to be aimed at people who might just be running WordPress, and specifically uses WordPress in benchmarks and elsewhere, but fails to mention what version of WordPress people should be running to be compatible. Overall, this site is pretty bad, and not very useful, IMO.
To be fair, sometimes you have no control over server administration, so the laziness of server providers is to blame (yes, you could switch server, but it's not always possible). The part about amateur PHP developers is true, but it's an unavoidable consequence of the easiness of the language. Visual Basic 6 had the same problem, it was a very good language, but made it "too easy" to create applications, so even amateurs became, in some cases, professionals. Not that's necessarily a bad thing.
is\_favorite\_car has a meaning, what I did has not really and is not needed. It makes sense. Thanks for the feedback.
https://rpms.remirepo.net/wizard/ You don't need to manually build or compile anything. Just use Remi's repository.
I’ve got two legacy apps we’ve decided not to update running on the internets. This shit keeps me up at night. I’ve CYA’d, but saying “I told you so” is small comfort when everything is on fire...
Is this sub ever going to add minimum karma requirements for posting?
Thanks for letting us know!
i am. an idiot whose code is well-tested and feels 100% confident in it.
How would you improve it to be useful and relevant to next readers?
&gt; Visual Basic 6 had the same problem Yeah, kinda... &gt; it was a very good language ... and hard nope.
While that's true, people often forget that it's not all depending on the developer. That website I wrote back in 2010 and runs on an old version of PHP? I will hapilly revise it and upgrade for a newer version, provided the customer wants to pay for it. The problem is most customers don't give a fuck unless something's terribly wrong with it or they need new features.
Clients also don't respond well when you try to tell them what it will cost to 'fix' their 10 year old website that isn't broken. Upgrading server software is almost never a programmer's decision, and is not an indication of lazy or bad programmers or a lack of system admin skills. In most work environments a developer taking it upon themselves to upgrade php would result in a former developer looking for a new job.
File a ticket in Jira to use Remi's repositories on all your production servers as an effort to streamline and/or standardize your operations to improve team synergy?
Heh I'd be happy to get even 5.6. I'm still on 5.3 due to RHEL 6... At least I can look forward to getting PHP 5.4 in 2021.
Maybe you could get PHP 7.0 installed from the [Redhat Software Collections (RHSCL)](https://access.redhat.com/documentation/en-US/Red_Hat_Developer_Toolset/1/html-single/Software_Collections_Guide/#sect-What_Are_Software_Collections)? 
To be honest, the WordPress usebase is probably the only group of PHP-users who might not have heard about the end of life and haven't upgraded yet. Regular PHP developers probably don't need this news so why should this website target them?
Haha, yes, the "very good" was maybe exaggerated, but still was a solid one. Only used very very badly by 99% of VB6 developers.
I have, when working on projects that were designed as client hosted SaaS packages. Some places would have MySQL, MsSQL, PostreSQL or other. Having an abstraction layer helped keep the issues with working between the databases to a minimum with only a few having to have specific migrations written for them. &amp;#x200B; I think for open source projects using a widely available database abstraction such as Laravels Eloquent or Doctrine can only be a good thing because not everyone wanting to use that project may have the database service installed that it requires. Opening up the project to more people can only be positive for its adoption.
I moved from MySQL 5.0 to MariaDB 10.2 on a legacy project this year. To be fair migrating to MySQL 5.7 would be pretty much the same, and that threw up enough issues.
My personal opinion: I think Makefiles are great for running tests in different environments and such. For example: using docker to test multiple PHP versions of your application. Since I am intrigued by the discussion 'to make or not to make' I wrote a bit here [PHP Projects and 'make'](https://blog.jessekramer.io/tutorial/2018/10/22/php-projects-and-make.html)
I love them, and shared a post a while ago: https://www.reddit.com/r/PHP/comments/7sltmh/makefile_for_lazy_developers/?st=JNKNC1IJ&amp;sh=72cd7139. 
I really think that more projects should implement them.
Definitely. Upgrading from PHP 5.6 to PHP 7.x doubled the speed of my website.
i'm upvoting this to help laravel developers become worserer developers
Past time. Long past time.
You should probably stop this now. You are wrong, you are missing the point. Re-testing Eloquent at this point is not only a waste of time, it is counter productive. It’s also massively off topic. 
Is the language good if it is not conducive to being used/written well by most developers? If you think of a programming language as a product consumed by developers, the answer is quite clear.
Not all apps can simply have PHP upgraded, and very few clients want to pay to migrate.
True. Not everything is simple nor free. But PHP extended 5.6 active support for 4 months and security for and extra year. I would assume they did that so that people would have time to upgrade.
Exactly, for most it boils down to who pays the bill. Frustrating but reality.
He literally gave examples of what was missing and should have been added to the article...
Our managed host doesn't support anything that isn't installed by default... RHEL supports PHP7+, and I've installed it without issues myself but they won't do it...
They certainly have their uses, though I've found that `scripts` in `composer.json` usually handles 95% of what I previously would throw into a Makefile. The only practical change is that I run `composer test` instead of `make test`.
You're hardly "fucked". If you find yourself in that scenario, its not hard to think of a way around it without having to configure your own services. And even if you DO configure your own services, you definitely aren't fucked. &amp;#x200B; Been using the symfony autowiring and autoconfiguring for a awhile now, and i have yet to be "fucked" by using it. Your comments may make sense on paper, but in practice, they are rediculous. &amp;#x200B;
This is very true, and applicable for most projects. However, I think that spinning up and managing docker containers for testing is part of the other 5%. And that’s a very fun usecase imho
&gt; You're hardly "fucked". If you find yourself in that scenario, its not hard to think of a way around it without having to configure your own services. So, instead of doing things right, you will "find a way around it". Around what? Also, not a single "way around" was mentioned in your post. You downvoted me and replied emotionally without substance. I feel confident to walk away from this conversation. &gt; Your comments may make sense on paper, but in practice, they are rediculous. I don't write on "paper". The projects my team writes are millions of lines of code and I have some clue what works, and what falls apart when your project gets serious. Also, it's spelled "ridiculous".
You could upgrade to RHEL 6.9 and get 5.6 or 7.2 with Remi's?
Next vulnerability out and you‘ll get hacked (in a nutshell)
Thanks for the info. 
PHP 7? Already?
Speaking of, FreeBSD just bumped their default PHP version to 7.2 today. From `/usr/ports/UPDATING`: 20181022: AFFECTS: users of lang/php71 AUTHOR: joneum@FreeBSD.org The default version of PHP has been switched from 7.1 to 7.2. If you use binary packages you should make a list of php packages before running 'pkg upgrade': # pkg info php7\* &gt; ~/installed-php-ports-list After the upgrade, check with such list if all your php extensions are still installed, and reinstall them if needed. If you use mod_php71 you need to deinstall it and install mod_php72.
Is https://github.com/ziadoz/awesome-php dead? Sounds like there submissions pending for over a year or so.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; Smells like NodeJS "Node" in Hebrew means "fart". And yes, I agree about the smell.
That was just more time for people to procrastinate...
Is this the right subreddit for this?
lol good bot!
Manboys.
You are an idiot and making laravel, which I use, have an even worse name then it already does. STOP TRYING, NO I E BUYING YOUR BS
For generic stuff yes. However I'd still pick MSSQL for the superiority of TSQL if you needed to write significant amounts of procedural code, and PostgGres for both that and some of the specific extensions - the spatial features in PostGIS wipe the floor with anything else. Also for larger data volumes - tables with a million rows or more - I'd still pick either PostGres or MSSQL over MySQL.
It's a terrible idea. - It's not (or at the very best badly) portable. - It introduces another layer of complexity for users to learn - You already have a "perfectly fine" language (i.e. the language the project is in) to use for your scripts - If for whatever reason the language lacks in a way that is blocking you from writing what you want to write just use a native shell script instead which much more people are familiar with If you are aware and actually understand all of the above points and you are not like most cases I have seen where people try to be "clever" by using make files and have an actual valid reason / use case: be my guest. The thing is in my personal experience at least 90% of the cases I have seen it is complete overkill by people either not understanding why it is a bad idea, the use case didn't warrant it and/or people trying to be clever in a way they should not try to.
so massively off-topic you felt impressed enough to talk about it
My time to shine :-) We switched to PostgreSQL (from MySQL) over a year ago. See the previous post at https://www.reddit.com/r/PostgreSQL/comments/67fg7f/how_swatio_migrated_from_mysql_to_postgresql_in_2/ As to your question regarding abstraction, i can say: - CakePHP2: inedible bad abstraction, lots of code changes, even needed to tune the pgsql adapter due to performance issues in the software - Laravel: literally only 1 change as far as I remember (it's a project with multiple code bases for different parts). Happy to answer any more questions you have! 
Have you ever posted a link that was not to your own website?
Are you being serious?
IMHO, some companies hate freelancers, so don't talk about it. You could (and must) talks about past projects, you must never talk ill about bad customers.
It seems that this post should belong to another subreddit. But anyway, there’s one interesting point to bring up, as PHP and Javascript often get hated for the same reason, weak typing. It’s a well justified criticism though, weak typing has its merit that it makes simple ever easier. If you ain’t much of a programmer, just a designer starting out with static webpage, and gradually add dynamic contents like form processing to your webpage, then you will love PHP and Javascript’s weak typing. Weak typing is easy for designers to get started with adding dynamic contents to static pages, hence why PHP and Javascript are the most beginner friendly languages on the web, but for true programmers it causes far more trouble than the very little benefit(easy to learn) it brings on the table. On a bright note, its nice that PHP finally has strict typing available, ever since version 7. In my opionion this should be the default option for PHP 8, and every library with PHP 7+ requirement should begin doing this already. 
Most of your assumptions are irrelevant in the hunt for the reason why JS may be disliked. JS as a platform is deeply broken because it fragments into browser and node. In extend it is extremely invasive with that model. It is very hard to pick a small feature from it without buying the whole cake. Which brings pretty much all the problems you can have on the table. 
About JavaScript. Years ago, many many years ago, existed a small company called Macromedia. This company came up with a brilliant idea: a new version of Javascript (or ECMAScript). So, this company proposed a set of changes to Javascript to the "Group of the Big ones" (Microsoft, Apple, Netscape, Sun, Adobe and some others). They laughed, and they said JavaScript is good as it is and nobody would need anything advanced. Then Macromedia created its own language (with BlackJack and Hookers) and they called ActionScript (it was used inside Flash). Macromedia was right, and Flash was ahead in time, and it ruled the market for a whole decade. Now, Flash is dead. However, ActionScript is still a decade ahead of the current Javascript. So, what's the problem with JavaScript?. It's a bad language and nobody want to change it. That's it. It's popular however it's ill-conceived. What is broken -scope -this -equality 
Ah do they? Why do they hate freelancers? I have a bunch of SaaS type sites - do you think it is ok to include personal sites? (I'm good at programming, crap at marketing, so they're not making much income) I don't want to lie and tell them it was for a client.
Does anyone have some experience working with GO and PHP in tandem?. Apparently GO is cool for concurrent services.
Yes, we do load all application logic with rr. We mostly use it for REST API backends, queue and serveless workers. We have 2 applications with server-side rendering (admin panels) on it. Pros: \- it's obviously faster since you keep you application pre-warmed up \- you can use golang libraries in cohesion with php code (i.e. websockets, JWT auth, SD, GRPC) \- you don't need nginx and fpm \- you can use async php inside it &amp;#x200B; Cons: \- you have to think about memory management (if you already use ReactPHP this should not be a problem) \- legacy apps won't work \- poorly written libs won't work
Am currently operating a database with multiple tables that contain millions of rows and keep growing. They are decently fast. Maybe I should look into Postgre again i haven't in years, since that old project ... just works, lul
have you looked at mysql 8? it's mostly caught up, window functions and proper json column support. Definitely a borderline modern database :)
The thing about switching databases is *most* of the time, you do it because you want/need a feature that isn't available in the previous database, and by extension isn't available in any common abstraction between the old and new databases. For example, we moved (gradually) from storing most of our data in Cassandra to storing it in Kafka. Making an ORM that can take full advantage of the reasons we chose Kafka while also taking full advantage of the reasons we originally chose Cassandra would be very difficult. In other words, ORMs must contain the least common denominator of features, and if you are only using that common denominator, there are not usually compelling reasons to switch. 
You are free to pick another framework. Or submit a PR decoupling (if you can find a place) code that you have an issue with into something you are looking for.
It's probably just old prejudice to be fair - MySQL certainly has moved on. 
For new features RHEL is rough, but they backport security fixes so that’s the most important. For my company I managed to convince the systems admins to install PHP 7.0 on RHEL7 from the Software Collections repo. Since that’s RH supported it was OK’d - maybe you might be able to get your shop to do the same.
This was my main concern. PDO worked but required a lot of recoding. Microsoft released an updated sqlsrv package that runs on Linux and allowed for a relatively simple mssql -&gt; sqlsrv function swap. So I use both for legacy code and try to use PDO where I can.
Yes, I would like that. It would improve speed as parameter types would be checked only during compilation. I suggested a bridge between current dynamic resolving and future static compilation: [https://externals.io/message/102831](https://externals.io/message/102831) Unfortunately the thread quickly went aside because people either didn't read it or suggested things not relevant to idea. In short: for developers that are sure in their code, add php.ini option **not** to check parameter type. Of course, default behavior is same as now; people would need to explicitly turn it off (like opcache). &amp;#x200B; But I don't see any static compilation before we get generics.
You could have added headers to the CSV explaining what the columns are...
What do you expect? 
nope
&gt; Or submit a PR decoupling (if you can find a place) code that you have an issue with into something you are looking for. Sadly they'd never allow that to happen, as much as I'd love to decouple it allowing the developer to add/remove what they want/don't need.
My bad, added row headers
How would the **exec** function work?
I see you’ve made several threads on how “Laravel won’t scale.” You should come to Laracon and talk to some of the people scaling Laravel to crazy levels. In fact, I’ll pay for your ticket to either US or EU Laracon. Get in touch if interested.
Hi - creator here! Thanks for the criticism. The site is still a WIP but it got posted... enough excuses. \&gt; The pie chart labelling here is terrible. Yep, I threw the numbers into an online pie chart creator. Will update and improve. \&gt; Why does this section not include phpinfo()? Added. \&gt; It should also mention that php -v can return a different version than that used for web requests. Done. \&gt; No mention of backwards compatibility issues (removal of a number of extensions, for example)? No link to the manual upgrading guide? Added. \&gt; PHP 4 and 5 also used Zend Engine. I'll update the wording on this. \&gt; fails to mention what version of WordPress people should be running to be compatible. The site does actually mention the version, and link to the WordPress download page. I'll update the wording on this. I'll also add more general PHP statistics and benchmarks.
Just so you know, I'm not shitting on Laravel in the slightest, I actually use if for local websites that connect to my external websites (mostly Lumen) and I run lumen in production, which scales more due to less components. 
What about PHP 7.0 in Ubuntu 16.04? Will they be patching and backporting security fixes? Is there an official policy somewhere?
The superiority complex is strong with you.
If you were trying to make a joke, you should add a '/s' to the end
Do they have other OS choices? Can you switch to Debian or something with a faster release cycle? RHEL/CentOS is a pain to upgrade anyway. I'm trying to get away from it myself.
&gt; instead of adding useless features Look at my code. See I used most new features of the last two years... --- You seem obsessed by speed, but it's often not that big of a deal, and varnish/good caching/queuing strategies will do way more than any framework shaving. And benchmark don't compare well with real world. Even more, with the way PHP seems to go, [even the initial boot up overhead might disapear](https://www.reddit.com/r/PHP/comments/9ps887/rfc_opcache_preloading_dmitry_stogov/) in a not so distant future, meaning what you call "bloat" might have no impact in the end. --- I also wonder your age/experience. You sound very young.
Your logic is warped.... [https://github.com/Lelectrolux/blog/blob/master/app/Http/Controllers/PostCommentsController.php#L29](https://github.com/Lelectrolux/blog/blob/master/app/Http/Controllers/PostCommentsController.php#L29)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Lelectrolux/blog/.../**PostCommentsController.php#L29** (master → 581e14e)](https://github.com/Lelectrolux/blog/blob/581e14ed25032a278ca2bfb0ce711d6c93cafeb9/app/Http/Controllers/PostCommentsController.php#L29) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e8a3jvk.)
Actually - Lumen doesnt \*necessarily\* scale more once you factor in connecting to a database. I wrote this earlier in the year which might interest you: [https://medium.com/@laurencei/lumen-vs-laravel-performance-in-2018-1a9346428c01](https://medium.com/@laurencei/lumen-vs-laravel-performance-in-2018-1a9346428c01) &amp;#x200B; Laravel itself is blazingly fast, and with some of the recent refactors, including using "api" routes (with different middleware) you can scale it to crazy levels of performance. &amp;#x200B; But also - your original statement: "..why dont we decouple it so people can use what they need" - is \*exactly\* what Taylor has done. You are able to pull in any single Illuminate component and glue them together however you want. 
The first thing you do is look at my github handle and try to find some bad code to try embarass me ? Constructive. This whole repo is my way of working with a friend on how to do stuff in Laravel. It's not suppose to be production code. See it as a kinda tutorial between me and him. All my real world stuff is in private repo, so even if you wanted, you couldn't attack me on code I actually use. Bad luck. And my warped logic is the simplest way to make laravel redirect to a specific html fragment to use the browser default scroll to id behaviour. But please, continue ad hominem instead of answering like a grown up...
Hey, Lelectrolux, just a quick heads-up: **embarass** is actually spelled **embarrass**. You can remember it by **two rs, two s’s**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". You're useless. Have a nice day!
I already sent him your article in an ealier thread, he didn't seem to care...
try with siege or jmeter, not ab
I supplied the code so people can replicate.
https://github.com/illuminate
You didn't supply anything about the setup you run those scripts in, your Benchmark protocol. No benchmark is worth anything without that much. Should I also infer something about you from that ? And you side-stepped the meat of my reply again, instead of adressing it.
Php 
Can still be done in compose scripts though and I did so at a past job 
Is triangle better music instrument than piano?
Your arguments are valid, but you are missing two in favor of a Makefile: • Centralization; by having a single point of entrance for scripts new users can more easily find the scripts and repeatable code - calling a command within a virtualization environment for example - doesn’t need te be in every separate script. • Consistency; we don’t only use php, but much more languages. By using Makefile I always know where to look for scripts _and_ I don’t need to learn a different way of running scripts per language.
Author here and HUGE +1 for /u/AllenJB83. This RFC is really nothing more than a formalization of existing work that happened a few years ago with a few adjustments to specification from me. I have a minimal proof of concept that solves technical issues the first proof of concept implementation ran into. **What's "holding this back"?** 1. It's been long-enough now that my current working branch requires a re-base. It's a lot of work. With the property syntax PR awaiting merge any day (week? :P) now, I don't want to do the work twice because I'm in some of the same areas of the engine. So, I'm lazy. 2. I'm spending a LOT more of my professional time these days on building community in the workplace and helping folks outside of my "natural domain" get to where they need to be. For example, the last year or more of my life has be doing a LOT more systems administration engagement; helping crusty-old sysadms build social coding practices to better collaborate. 3. By the time I get home around 6:30-7:00pm, feed a big-ass Great Dane, cook and feed my family, I get about an hour with my child before she's in bed and then I'm organizing the next 2-3 hours of "fun work" before going to sleep, myself. **If you don't have time, why write an RFC?** To be incredibly short: it needs feedback and it's not ready to waste time on the list. Just as I intended with the Class Friendship RFC (the one that failed brilliantly!) feedback from the community will be referenced and taken account of. Even in some of the trolliest comments :heart:, there are ounces of reason and truth. One thing that is really important for me to be able to articulate is: Who is "Namespace Visibility" for? &amp;#x200B; Anywho, try not to look at every RFC as "ZOMGZ THIS FEATURE IS TOTALLY COMING AND IT IS \[BEST THING / OH IT SUCKS SO BAD\]. It's a request for feedback. Putting it in the wiki is a convenient "interchange format" for discussion. Case in point, this is I think the second or third time someone on the interwebs just randomly posted about it here. I love seeing that kind of interest; to take the time to post. I also like seeing folks rip ideas apart. Iron sharpening iron is very important to me.
Eh, I think you missed the point. We don't use Make for 'compiling', it's to keep things organised. For example, during CI I want to run phpunit, phpcs, phpstan, along with the equivalent for the Vue.JS front end. Each of these has their own set of commands and flags to run, which can get fairly complicated if you're not using the defaults of these packages. I've also got another set of commands to rebuild the database, and configure the various packages, create docker images, and so on. Make lets me bundle these up to aliases and ensures everyone and CI is using the same commands to run things. Example (cut down for illustration purposes): # Single test command for building and running verification commands on pipelines. ci-test: install-composer-packages install-vue-packages verify rebuilddb: dropdb createdb loaddb verify: phpunit phpcs phpstan vue-test vue-lint phpunit: cd webapp &amp;&amp; vendor/bin/simple-phpunit -c $(CURDIR)/verification/phpunit.xml phpcs: cd verification &amp;&amp; ../webapp/vendor/bin/phpcs If a command breaks during running, then Make by default stops the command there. It's also a really lightweight utility, not subject to version changes, and also means I can write scripts without doing a lot of failure testing. 
Yup, have been deploying new AWS Elastic Beanstalk environments this week to move from 7.0 to 7.2. Strangely the AWS Beanstalk deployment still looks to allow old 5.x versions as well as no info (that I could see) to warn anyone off deploying more 7.0 environments. You'd think at least in the web console they could throw up a "Hey are you sure? This version you asked for is real old now."
Yes, I share articles on my Twitter if I found some valuable information on some other website. 
Because you said you were walking away from the conversation, so I didn't want to bother.
&gt; Do you feel there is "bloat" in JS or the frameworks There's bloat in packages, let alone frameworks. There's a package ``is-odd`` for example, which itself depends on ``is-number``. It has over a million weekly downloads too, which says a lot about Javascript developers, who apparently prefer ``if (isOdd(x))`` to ``if(x%2!=0)``. Or don't know ``%`` operator exists.
tl;dr: don't try, use a framework
&gt; but for a basic CRUD app it’s all standard SQL so the DBAL isn’t adding anything that plain PDO doesn’t, and more complex apps are using custom queries that potentially need rewriting. I'd say you don't really need more complex queries to get into compatibility issues as such basic operations like "LIMIT" suported by MySQL and Postgres won't work in SQL Server or Oracle. Basic SQL probably won't cause that much issues, but usually there's always something that can backfire.
I've gone from Percona to MySQL, and Maria to MySQL (probably doesn't really count), both times because of bugs in Percona/Maria. &amp;#x200B; Also I use SQLite for testing, and MySQL for prod. &amp;#x200B; &amp;#x200B; &amp;#x200B;
Large ones, normally.
Yeo. Saw a site running 5.1 a few weeks ago. God only knows how compromised that server is.
The only point I agree on is the portability. &gt;It introduces another layer of complexity for users to learn The user rarely has to touch the makefile itself and it highly depends on how friendly you are making the experience. For most of my projects, clone the repo and type `make` and you will have everything you need, no need to wonder what to install or anything. It's especially useful if you are relying on some third-party projects that are not dependencies. Check https://github.com/humbug/box as an example. &gt;You already have a "perfectly fine" language (i.e. the language the project is in) to use for your scripts &gt;just use a native shell script instead which much more people are familiar wit I've been there, never again. Makefile sure is not the most portable way to do it but it's the most pragmatic to get things done. Shell scripts are just a nightmare and you would need a lot of work to replicate some needed features of Makefiles
This one is a personal bug-bear. I *constantly* mix PHP with HTML, I mean, I would argue that the most powerful template engine in PHP, is PHP itself. Personally, I think separate views, in particular the passing an array of variables, just throws away essential type information that can be used to provide auto-completion and static analysis. Perhaps there are new frameworks and tools which get around this somehow. I'm quite happy treating HTML rendering as part of a sub-request inside my single-page action controller. 
I think he meant Eval.
Teams and companies have a culture that you have to submit to. You are not a rockstar but a teammate that has to integrate. Freelancers often try to be salesman on how good they are. Try to emphasise on things that you are really good at and keep back if not. Realise that maintenance and legacy are likely a big part of the job and work different then in freelance jobs. Agree that you have to learn it from scratch. 
In some cases you're not allowed to use third party vendors (mainly in governmental projects). In those cases I would recommend [Red Hat Software Collections (RHSCL)](https://developers.redhat.com/products/softwarecollections/overview/) as it is maintained by Red Hat it self. (In personal project I use Remi)
I also think the same. For example, there are probably many Request, Response classes in different namespaces. Namespaces is the key not classes.
Which driver do you use with PDO?
I'm not OP, but could you share with me some articles, videos or documentation? I'm interested in the "crazy level" of scale.
So you went full circle MySQL -&gt; "better MySQL" -&gt; MySQL.
7.2 for life
Are you sure you didn't had to change anything? MSSQL have a lot of differences from MySQL as far as I know. Limit and top, as an example.
composer is a tool for dependency management, repurposing it as task runner isn't a great idea. Also: composer doesn't allow for granular dependend tasks.
As a DBA, you shouldn't use one. Just learn SQL, it is not difficult and will give you better results. But, take a look at meedoo.
Makefiles are a useful way of having your builds done, however personally I prefer using phing for PHP things, as it runs everywhere where you have PHP, opposed to GNU make, which isn't always installed, and i like the xml based syntax of phing files over the one of Makefiles.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Compilation step could afford two benefits: 1. Type guided compiler optimizations (e.g. merging consecutive loops if operations are pure, fusion of operations so that intermediary data structures are not needed, skipping type checks if types are sufficient guarantee that code will handle all error paths) 2. Standalone php apps in for of executable files. We already have static type checkers, but that info is only used to give green/red info to a developer, and it do not guide compilation step of PHP interpreter. Correctness is huge benefit but optimization potential is simply wasted.
`&gt;&lt;(((°&gt;`
Good job bud! It's realy a good that you are so reactive with community info too! The site is clear and simple and the gathering of info is realy a plus \^\^ i have now all the tools i need to push forward the upgrade of php within my society, will gladly share it with my dev friends.
Hey, irro\_the\_dwarf, just a quick heads-up: **realy** is actually spelled **really**. You can remember it by **two ls**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". You're useless. Have a nice day!
&gt;really shitty because they're all essentially "remember the fucking spelling of the fucking word". &gt; &gt;You're useless. delete
delete
Languages and DBs nowadays are powerful enough that you don't need triggers or stored procedures to succeed. In fact, they add a layer of (hidden) complexity that needs to be synced across environments to maintain parity. It has little to do with "integration" of an application. Using a database to integrate between applications is quite risky in terms of data locality, application encapsulation and service autonomy. There are better integration strategies.
I've been using the CakePHP Database package for a while and I love it. The only quirk is when having to make a subquery, let's say: CREATE TEMPORARY TABLE tbl1 AS ( SELECT id FROM table2 WHERE x = 1 AND y = 'test' ) Because of the way the value binder works, you can't just stringify the subquery and include it. It's required to do it like this: $createTable = $this-&gt;_db-&gt;prepare("CREATE TEMPORARY TABLE tbl1 AS (" . (string)$query . ")"); // Attach the value binder (:c0 =&gt; 0, :c1 =&gt; vehicle ID, etc.) to the new prepared // statement. $query-&gt;getValueBinder()-&gt;attachTo($createTable); $createTable-&gt;execute(); Which seems rather ... weird.
I've used this one extensively some years ago and I honestly don't like it. It doesn't flow as well as many of the others and subselects are cumbersome.
I like that answer a lot. Team culture can have enormous value. Best, as a company, if you have written down what the values are. That way it's experience to explain it to applicants and gauge their match/interest. What some call Legacy to others is business critical, so it needs to be handled with care. Hopefully a company knows how to progressively iterate.
You do not have to manually escape values when not using an ORM, you are mistaken. It will improve readability at a huge performance and functionless cost, not worth it. If you know SQL, you know what you are missing.
 echo "FizzBuzz".' '; Could be written simply as: echo "FizzBuzz "; Since the string isn't coming from somewhere else.
I know SQL - and I also know that unless you use _some kind_ of parameter binding (which you can do via PDO, naturally), the you'll have to do all the hard work yourself. Using bare PDO isn't a problem, of course, and I'd never recommend a query builder to someone building a platform that millions of users are using simultaneously, but most people aren't doing that and thus a query builder can - imo - make the code more readable, not only when reviewing pull requests or similar.
I've never switched a database before, but I've always written code like it will change someday, which is considered a good practice.
Of course you need to use some kind of binding. So you know that nothing done with a query builder can be really used by a lot of users. That is my point. Query builders are bad because most people uses it to run away from learning SQL, specially new programmers. Someday, they are gonna need it.
A junior is bothered when he doesn't understand why his code doesn't work. A senior is bothered when he doesn't understand why his code works. 
I use mainly CakePHP's query builder and it honestly reads a lot like SQL: $query = $this-&gt;_db-&gt;newQuery(); $query-&gt;select([ "id" =&gt; "jds.id", "parent_id" =&gt; "jds.parent_id", "sort_ordinal" =&gt; "jds.sort_ordinal", "vehicle_id" =&gt; "e.vehicle_id", "schema_id" =&gt; "e.schema_id", "group_id" =&gt; "jds.group_id", "sub_group_id" =&gt; "jds.sub_group_id", "location" =&gt; "e.location", "type" =&gt; "jds.data_type_real", "text" =&gt; "jds.display_text", "jato_value" =&gt; "e.data_value", "value" =&gt; $query-&gt;func()-&gt;coalesce(["st.full_text, e.data_value" =&gt; "literal"]), "display_value" =&gt; $query-&gt;func()-&gt;coalesce(["st.full_text, e.data_value" =&gt; "literal"]), "postfix" =&gt; "jds.postfix", "unit" =&gt; "jds.unit", ]) -&gt;from(["e" =&gt; $this-&gt;_dbName . ".equipment"]) -&gt;innerJoin( ["jds" =&gt; "jato_data_structure"], ["jds.schema_id = e.schema_id", "e.location = jds.location", "jds.active &gt; 0"] ) -&gt;leftJoin( ["st" =&gt; $this-&gt;_dbName . ".schema_text"], ["e.schema_id = st.schema_id", "st.data_value = e.data_value", "st.data_value != ''", "st.language_id" =&gt; $this-&gt;_jatoLanguageId] ) -&gt;where([ "e.option_id" =&gt; 0, "e.vehicle_id" =&gt; $vehicle-&gt;vehicle_id ]) -&gt;order([ "jds.sort_ordinal", "jds.id"] ); I'm not a fan of ORM's "findOrFail()", "findByX()" and what have we - it abstracts it away too much.
If it looks messier(is that a word?) than SQL, so why not write it in ... SQL? That was beyond my point hahaha (I'm not laughing at you)
I think it's a word; we can agree it's a word :p Personally, I don't like long HEREDOCS in my code and I'd hate for this query to be a single line. It surely takes up more space than plain SQL due to paranthesis and what have we, but I kind of like it better.
I have used dblib with PDO for accessing SQL Server, on Amazon Linux (not Amazon Linux 2) on PHP 7.1.x with no real problems. PDO is usually faster than the SQLSRV driver I've found, but SQLSRV has a much easier find/replace logic to it from MSSQL and a working num_rows() command for my needs.
It's amazing to see the advancement of the PHP language in the past 24 years. I'm amazed by the contributions of our awesome community and great PHP developers out there. Thank you all.
Thanks for the info. Since my post, I've tested installing the sqlsrv driver from the Microsoft docs on CentOS 7. It worked great with PDO, but for some reason the sqlsrv\_\* functions weren't available; I probably did something wrong with my ini files. On 5.6, I have a mix of mssql\_\* functions and PDO in my codebase, so it's gonna be a pain to update but at least I know it should work.
The Symfony [docs](https://symfony.com/doc/current/service_container.html) contain quite a few examples on using a service container to simplify dependency injection. And of the course the framework itself is pretty much built around the notion of dependency injection.
&gt; and talk to some of the people scaling Laravel to crazy levels I wouldn't say I've scaled it to 'crazy levels' but certainly high volume for a major UK e-commerce platform. It handles over 800req/s at busy periods and handles £1m's of orders every day. It certainly can be done. It's worth noting its cheaper to scale the hardware horizontally than it is to pay for developers time to make optimizations for small gains. I'm not saying code optimizations should be ignored but Laravel is more than capable out of the box for 99% of people without having to load balance across multiple HTTP servers or jumping into the Laravel core code to make changes.
Your benchmark is unbalanced. The native script reads the database on each request, the Laravel controller supports caching. Both should be functionally similar.
Neat! I really dig this and at one point was looking for something like this. Eventually though I realized I was in over my head and did some back tracking to rework the problem I had. If I had found this it could have been a bit more likely that my original solution would have worked. Looking forward to seeing more developments in this area. I just know it's still not ready for my consumption, yet. I think the next thing to take Laravel to another level will be something like this being built-in as a first-class feature.
this guys seems like a serial reddit spammer
Swoole doesn't work on Windows (without virtualization or wsfl), so it's a big show-stopper.
english is just another language for many people. some people like to know more languages less good than 1 language really good. this shit bot was created to judge us for this. The creator should come try my mother tongue, see how that goes.
\`array\_filter($array)\` will remove NULL values Both are reasons why arrays must be a first argument, as in PHP NULL value can be skipped as long as we skipp from the right side of arguments.
Just right now, working on proxy like endpoint where I hope to transform symfony request into PSR7 request pass it almost as is to Guzzle client, and then transform PSR7 response into symfony response. Goal: not copying all the parameters/cookies/files manually.
Optionally, you could use **switch** instead of a "pyramid" of ifs ```php &lt;?php //Write a short program that prints each number from 1 to 100. //For each multiple of 3, print "Fizz" instead of the number. //For each multiple of 5, print "Buzz" instead of the number. //For numbers which are multiples of both 3 and 5, print "FizzBuzz" instead of the number. $v1 = 3; $v2 = 5; foreach (range(1, 100, 1) as $number) { switch(1==1) { case ($number % $v1 == 0) &amp;&amp; ($number % $v2 == 0): echo "FizzBuzz".' '; break; case ($number % $v2 == 0): echo "Buzz".' '; break; default: echo $number.' '; } } ``` 
Ah, I'd never really thought of it like that. I've been working with a company for over a decade doing all of their web stuff (99% remotely, but I've been to their offices a few times to get stuff sorted there). I'm listed on their 'staff' page (but I've always been self employed, I give them invoices), so maybe I'll try and focus on that. But their work was quite basic web stuff (a lot of wordpress stuff), but other client work and especially personal projects have been involved much more interesting projects and things to talk about. So I guess I'll use a mix of both, but emphasise the work in that company.
I kind of hope we had some performant version of Phars available. Phars themselves are an OK solution to creating packaged applications, though for web applications they are a bit unyieldy from my experience.
Yeah, I kind of figured that. I'm considering taking a more junior position for a year to get the experience actually working in an office, then change jobs once I feel a bit more confident with that aspect. (The technical side, the coding, etc I don't have any worries about. It is just the office related things I'm more worried about)
To be an absolutely safe solution to run Laravel with Swoole. Laravel + Swoole Coroutine + Safety + Tinker Online. [https://github.com/scil/LaravelFly](https://github.com/scil/LaravelFly)
Namespaces are missing. Nobody will thank you if you shadow some standard PHP function, or some legacy code in their application.
It could be a problem with open\_basedir configuration, file chmod, and a few other things that could infer PHP not to see the file. This probably not a bug with file\_exists() but something wrong in your environment.
tell me about it.
I'm looking forward to libraries that have a min req of 7.2+.
FWIW, Remi is one of the release managers for PHP in addition to running that RPM repo.
I tried using ORM for everything. It was dumb. Right now, I use a Dao/Repo class for the crud (objects), and for everything else (tables, list), I use SQL that returns an associative array. &gt; Also for some cases I learned the Views are the best way to solve do some problems... Do you care to elaborate about it? 
quickly! "GET /.ENV"
PHP is already compiled to something PHP interpreter understands. PHP could bundle its runtime, interpreter and extensions and files into a single executable, but nobody is working on this as people who want to do that use other languages.
Luckily, this is a really rare case (Creating a temporary table based on dynamic data of another table) ;-)
Yes, it's completely possible to cause memory leaks if your script uses $GLOBALS. This is a similar problem that php-fpm and various other process managers have. The problem that mod_php/php-fpm faces is that they execute different scripts and trying to do it in the same PHP process causes issues. For example, someone navigating to: - a.php creates $foo and $bar - b.php creates $formData and $frm - c.php creates $kernel and $db When one of the scripts loads and create variables in global scope those variables are then in memory forever as PHP cannot GC global variables (it doesn't know if they will be needed again in the script) so if you execute different PHP scripts in the same process you have memory problems. Most tools that have long running PHP processes kill/restart the process periodically to address the issue (see Apache's MPM worker/pre-forkers). However, with Aphplication, none of the application data is stored in global scope so the GC can work as intended and you're effectively loading `a.php` continuously and creating/overwriting the same global variables. You'll need to be careful that anything stored inside the server instance is managed correctly because if `$this-&gt;kernel` is stored in memory and it grows, it's going to increase memory usage. Running apache bench 10,000 times on a laravel install, the memory usage is the same after the 10,000th run as the first. No doubt there are still some ways to kill memory. I think PHP has also made some improvements in this regard, back when I created this and tested in in PHP 5.6 I had to manually call gc_collect_cycles() to prevent memory issues. Using PHP 7.2 this is unnecessary, I'm not sure which version fixed the issue. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
File_exists definitely works. You just don't have the right permissions for that folder. If you're on linux, make sure that your php user has read and execute permissions on the path you're testing.
1. https://i.imgur.com/DK1ckG8.png You should ask there, removing all 1 - 7 pints as being absolutely irrelevant to the problem and providing the really important information - what encoding your $p['organizationName'] in and what encoding is used for the corresponding field in the database. 2. the problem has nothing to do with PDO or bound parameters. it's entirely an encoding issue 3. Given that all default collations a case insensitive, I have no idea why would you force the lower case for the comparison. Especially given that strtolower() is not multibyte-safe and could in theory damage the character. 
Thank you so much for your recommendation. This is making my life much easier!
LaravelFly is an earlier &amp; excellent attempt, I also learn it and absorb its advantages to make LaravelS safe and convenient.
The company I work for has been running Swoole stably for two years 😁
JIT is being worked on since the release of PHP7, so basically past 3 years or so.
I use it to have RabbitMQ queue consumers: [https://github.com/corvus-ch/rabbitmq-cli-consumer](https://github.com/corvus-ch/rabbitmq-cli-consumer)
This is a clear example of how many modern JS developer falsely believe that a shittonne of individual contibutions to github and * packages on npm = more job offers. I literally can't see any other reason for writing most of this crap.
Use case is fair, but I did mean at least an application that had all of your standard CRUD, even if it did have some data heavy operations. I guess the point I'm after is this: ORMs provide a wonderful abstraction and get out of your way. There are some obvious shortfalls of ORMs, such as being memory hogs for large datasets. For developer experience / getting code out the door, it's hard to argue against ORMs in cases where there aren't those obvious shortfalls. 
it's public/ dir
I think Ubuntu 16.04 is a long term support type deal. They probably only offer stuff like that. I fully understand it. From the hosting side it's not fun to deal with frequent OS upgrades. Back in the day with RedHat/Fedora I was pretty much upgrading servers round the clock. Once the last gets upgraded (after several months of upgrading), another release has come out and it's time to go again. That's why we switched to RHEL/CentOS. It's our preferred OS but if the customer requests something else I'm game. But the PHP thing has been a real problem as of late, and the OS upgrade situation has become totally ridiculous. You can't even do CD upgrades anymore, well it was a hidden but unsupported option the last I saw. I don't dare reinstall over the top, so I have to build a virtual machine, install the new OS, configure, copy over the files, re-IP to temporarily host on the VM, install the old server, copy back, etc. It's a ton of work. Not much you can do I guess, switch web hosts, or if you really really like them colo a server there and manage the hardware and OS yourself.
&gt;is\_file($\_GET\['file'\] . '.jpg') Hey, I don't think this is vulnerable with phar:// because, In the latest PHP we can't use null byte injection.
Probably what I do - the vast majority of the time I'm not writing simple crud - very far from it tbh
Thanks a lot for this response - it gives me direction and some point to research. 1) I don't know how to determine the encoding of the variable the API value is stored in, nor what encoding is used the the db but will research that. 2) That was my gut, but I did not know. Thanks for solidifying that concept for me. 3) If I understand you correctly, the comparison between the PHP variable and the db field would be case insensitive by default even if I took no action to make sure that I was comparing lower case strings. Possibly acting on the string with the strtolower function is the cause of the encoding error. This will be the first thing I try to fix the issue. And finally, apologies for posting this in the wrong sub. Should I delete this post?
I still have to support PHP 5.2. &amp;#x200B; Fuck WordPress.
Please take this to a proper subreddit, this is about php.
Do you know what charset is the database using? Check the select of that lower function to check what is returning manually. Maybe it can give you some hints... 
The result of: &gt;SELECT LOWER(LTRIM(RTRIM(GroupName))) FROM EMS.dbo.tblgroup WHERE GroupName LIKE '%For%'; is "forté foundation" The result of: &gt; SELECT SERVERPROPERTY('Collation'); is "SQL_Latin1_General_CP1_CI_AS" And for the PHP side, the result of &gt; trim(strtolower($p['organizationName'])) is "fort� foundation" in Chrome. I've tested with trim and strtolower and strtolower appears to be the culprit which damages the encoding of that special character. /u/colshrapnel suggests that the comparison would be case insensitive in either case by default, so it may be that I don't need to act on the strings in this way and potentially this is a non issue if so. I will update here if that turns out to be the case. 
Have you tried with mb_strtolower? You have absolutely your problem on there, not on db👍👍
I haven't but just googled that and it is a good thing to know about, thanks. This noob is incrementally improved today. I appreciate it. 
Is this a Word/RTF file that you're generating? Are you specifying the page length? Or is this a screen shot of a browser, and you're generating the image of the sheet of paper as well as the text? Let's see the code.
Yes you are. Dependency injection means: injecting dependencies. Your thing does not inject dependencies. It inject the thing that makes the dependencies. This is bad because it hides the actual dependencies and works entirely based on magic. When looking at the actual class (`ChildController`) signatures it nowhere tells you it has a dependency on `C`. Also your `ChildController` is extending `BaseController` which is a weird extension of the class. They do two totally different things. It's like a Car extending a Carpet. The two are not related in any way.
Make your class a service of your IoC container, problem solved. No need to inject the container itself anymore.
&gt; BaseController shares some functionality and dependencies necessary for each controller, e.g. a Response object. My line of thinking here is that this makes the code DRYer. Is there a better way to do this? Response shouldn't be a dependency of your controller, Response should be either returned by you controller or visited by your controller, AKA an argument of a controller's method.
[Ant](https://ant.apache.org/) works great on every platform.
&gt; stored procedures, triggers Yeah and versioning stored procedures and triggers is so easy (not) ;-)
Can someone help me to understand why would I want to use it in my PHP application? I know what the distributed system is and how queues are used, I've seen some CQRS, ledger-like applications where you've had just one huge big table of events and you could reproduce any state in the past. Yet I don't understand this library, as well as AMP in the PHP scope. Any links, keywords and criticism of my ignorance appreciated. Thanks !
Good evening. What exactly you are interested? &amp;#x200B; p.s. AmPHP is used to increase efficiency (You can explore the issue of coroutine (event loop, poll, select etc))
[removed]
It's generally considered okay for controllers to implement service locators, as long as you follow other best practices with regards to controllers: - No business logic in the controller. - No anemic domain model. - Don't manage session state in the controller. And finally: - Don't pass the service locator into any other object.
&gt;Given the "Amp is usually single-threaded" statement. How I can increase efficiency if I can't go beyond one thread. Or perhaps I am wrong? PHP itself single-threaded (without extensions). In principle, multithreading is not needed. AmPHP it's not about multithreading, but about cooperative multitasking 
A message broker (for example, RabbitMQ) is used along with cooperativity. The bottom line is that it would not take the time waiting for I\\O operations, and switch at this time to perform real tasks.
&gt; where should session state be manipulated? Ideally in a Session or User class. &gt; I'm curious as to where business logic should go I generally prefer to keep business logic in the ORM layer, or in distinct classes that implement e.g. template methods or other patterns. On smaller projects, you can be safe with putting it into the controller, but it will make refactoring more difficult in the long term. &gt; what you mean by "anemic domain model" https://en.wikipedia.org/wiki/Anemic_domain_model
Thanks for clarifying. Also, I thought you meant more explicitly that no code that manipulates session data should belong to a controller - which for some reason in my head also included a separate class e.g. `Session`. Hence the confusion.
Oh that'd be silly. 
I would prefer more verbose function/class names and more flat structure of modules.
&gt;How I can increase efficiency if I can't go beyond one thread Async frameworks let you use non-blocking code. Let's say you have the following function: function get_data($website) { $data = crawl($website); // you do a GET request to $website return get_something($data); // You look something inside the response and return that } the \`crawl\` method could take 1 seconds to execute, in the single-threaded/sync world you have to wait that second and then you pass to the next line. Of course, if you're using Apache, you're gonna have concurrency using multiple processes. In the async world, one process is going to handle multiple requests, but it is single threaded, so, it can only run one request each time, so, when we get in the \`crawl\` line, instead of let that thread waiting, we leave that request waiting for the network response, we jump to another request and we start to execute code again. Why this is awesome?: Processes take a lot of resources, you can use a one process with a multi-threaded language to handle multiples requests, but, parallel programming is hard, then you have the event-loop, were you can have concurrent code in one thread. So, the code is easier to understand compared to multi-thread code and it consume less resources than using multiples processes. If you want to understand how it works I recommend this: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop) I know it says: "Javascript", but the idea is to understand how the event-loop works. Amp, reactPHP and Javascript use the same event library
Tip: you might like to use [is_file](http://php.net/manual/en/function.is-file.php) instead as [file_exists](http://php.net/manual/en/function.file-exists.php) will return true if your file is a directory. 
Sounds like a great tool! I may be using this sometime in the very near future
Generally speaking you would likely want to move dependency injection in your controllers into some separate resolver. Although this may depend on your router and how it executes controllers, but the basic principle is if you have some route that resolves to a target, that target controller would then be created and executed by something else which would know how to do so using the container. Here is an example resolver written around Chariot router, the `broker` in this instance is the container and is an instance of Auryn dependency injector: https://github.com/hiraeth-php/chariot/blob/master/src/Resolver.php You can see the resolver is injected into the middleware and is then used to resolve the matched target: https://github.com/hiraeth-php/chariot/blob/master/src/Middleware/RelayMiddleware.php
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [hiraeth-php/chariot/.../**Resolver.php** (master → e3f67e9)](https://github.com/hiraeth-php/chariot/blob/e3f67e906bab596e20f04d528d78c6060b60bfe9/src/Resolver.php) * [hiraeth-php/chariot/.../**RelayMiddleware.php** (master → e3f67e9)](https://github.com/hiraeth-php/chariot/blob/e3f67e906bab596e20f04d528d78c6060b60bfe9/src/Middleware/RelayMiddleware.php) ---- 
Right or wrong, they may get worried about your ability to work with others. Depending on the size of the team that will be key. Get ready to respond to that question. You of course don't work by yourself, you work on project requirements with the client. Had you ever had to work with other freelancers on the project such as a designer or front-end engineer, that counts.
Ditto, within reason, for simple conditions on whether to display something you have to. Unless PHP is completely 100% acting as an API only.
off topic : I remember a guy who advertised on this sub some "map reduce" framework in PHP a few years ago, I wonder if he ended up doing anything, sounded like vaporware back then. The guy was so proud of his work he couldn't even demo it, pretexting it "wasn't finished", all he had was a bunch of classes in a github repo with zero doc, and he was calling his work "revolutionary". I can't find the link he posted here anymore, if anybody here remembers...
It turns out that a Container is just a Container; it is the *use* of the Container that determines whether you are doing Service Location or Dependency Injection. Cf. &lt;http://paul-m-jones.com/archives/5853&gt;: &gt; The terms Dependency Injection and Service Locator appear to be interchangeable in the sense that a container is a container is a container. The difference in naming comes from how the container is used, not how the container is implemented: &gt; &gt; - When the container is used outside a non-Factory object, you are using the container for Dependency Injection. &gt; &gt; When the container is used inside a non-Factory object, you are using the container as a Service Locator. &gt; &gt; (Side note: Using the container inside a Factory object does not seem to be a case of either Dependency Injection or Service Locator specifically; it’s just a generic container usage at that point. This stems from the idea that object creation should be separated from every other type of object operation; that is, a class should either create an object, or it should operate on objects, not both. Factory, Builder, etc. classes are therefore special cases.) 
Usually, following the tutorials should help you learn on the way. 
Great little project is a blog. Can be simple to advanced. Start off with just blog posts being displayed, then admin dashboard to create, edit and delete blog posts, searching through tags. Then you can get as advanced as user accounts, permissions, comments. Whole host of things you can do with it!
Using a framework (i'd recommend Laravel), 0. Register at either GitHub.com or GitLab.com, or both! 1. Build a User Registry (store names, addresses, phone numbers, emails, etc.). Once you've managed to do this, you will have learned the basics of web dev. 2. Find at least one senior architect willing to review the entire project and create issues for what needs to be improved. 3. Make the improvements. 4. Add a product to sell. Add the products, ordering and cart system (Ideally, use an ecommerce platform). 5. Add a payment gateway. Now you have learned all the basics of ecommerce. Make sure you pick up what Composition vs Inheritance is, Inversion of Control design, Dependency Injection and automated tests in the process. 
getid3 seems to work only with the metadata, while FFmpegPHP also can read and write the content (extract thumbnails, split or conacatenate videos etc).
Amazing. Thank you, I learned a lot from this! 
&gt; Given the "Amp is usually single-threaded" statement. How I can increase efficiency if I can't go beyond one thread. Or perhaps I am wrong? Two reasons. Firstly, the Amp stuff isn't limited to a single thread. The core library may not bundle abstractions for worker pools or PCNTL forking or Gearman; but most of the higher-level libraries do. The Aerys uses a process worker pool, as do the database libraries. Process manages individual parallel processes. Parallel abstracts over PCNTL and Gearman. So, whatever your setup; you should be able to execute code in parallel using one of the Amp libraries (on top of core). Secondly, Amp core is an abstraction over the idea that asynchronous processing is a more efficient use of system resources than synchronous processing. It's the reason web sockets aren't a big deal in traditional synchronous PHP environments. Multiple long-lived requests quickly use up the allocated memory while mostly idle. That idle time can be better spent in an asynchronous environment; doing small but important tasks like responding to new HTTP requests or sending web socket frames. Amp helps you to increase efficiency because it lets you do more in a single process (asynchronously), and has tools to let you use more processes and threads (concurrently).
I had the same scenario and what I did is actually pass the message to my controller via exec command In the background and acknowledge the task right away. If there was a error I would handle it in my code and re-queue the message in a delay queue and try again. Recently I read that the latest version of the library now supports reconnect but I haven’t tried yet
I tried that too, but with messed up path, half path in brackets, half out brackets it didnt worked :) 
YES i know the article was wriiten two months ago itself and RC4 might be released tommorow if everything goes right.
It's off personal choice. All the frameworks recommendation are based on the personal usage.
It's pretty easy actually. In some organizations, each developer works on their on project and little interaction is needed. In other organizations you work on the same project, but break it up into smaller components. The latter requires more planning, which isn't a bad thing.
Can not recommend Laracasts by Jeffrey Way enough! Specifically for you would be his ‘Php Practitioner’ and ‘Object Orientated Bootcamp’. Learn the OOP style of php programming and the MVC pattern, don’t fall into the procedural style of php like I did (that’s putting your HTML and php in the one file... Complete nightmare) it’s a lot harder to transition when you’ve got the proc way of things stuck in your brain. Also if you want a super basic overview of the things php offers, variables, arrays, functions etc take a look at a guy called Alex from php academy on YouTube (I believe it’s also on The New Boston channel) but be aware that it’s php 5.4 or something so a lot of things have changed. between then and what we now consider modern php development. Best of luck friend!
**This my preview code page :** @extends('gate.layouts.master') @section('style') &lt;style&gt; body{ /\* font-size: 16pt !important; \*/ } &lt;/style&gt; &lt;link rel="stylesheet" href="{{ asset('gate/css/preview.css') }}"&gt; @endsection @section('content') &lt;div&gt; &lt;div class="container"&gt; &lt;!-- Cover page --&gt; &lt;div class="page cover-page"&gt; &lt;p class="cover-page-title"&gt;{{ $document-&gt;name }}&lt;/p&gt; &lt;p class="cover-page-researcher"&gt; اعدا الباحث: &lt;br /&gt; {{ Auth::user()-&gt;name }} &lt;/p&gt; &lt;/div&gt; @php $page\_number = 1;; @endphp @foreach($document-&gt;indexes as $index) @if($index-&gt;level == 0) &lt;div class="page"&gt; &lt;p class="cover-page-title"&gt;{{ $index-&gt;name }}&lt;/p&gt; @if(count($index-&gt;related\_indexes) &gt; 0) &lt;div class="page-related-indexes"&gt; &lt;strong&gt;محتويات الفصل&lt;/strong&gt; &lt;br&gt; &lt;br&gt; @foreach($index-&gt;related\_indexes as $related\_index) {{ $related\_index-&gt;name }} &lt;br&gt; @endforeach &lt;/div&gt; @endif &lt;p class="page-number"&gt;{{ $page\_number++ }}&lt;/p&gt; &lt;/div&gt; @endif @if($index-&gt;content) &lt;div class="page"&gt; &lt;p class="page-title"&gt; {{ $index-&gt;name }} &lt;/p&gt; @if($index-&gt;content) {!! $index-&gt;content-&gt;content !!} @endif &lt;p class="page-number"&gt;{{ $page\_number++ }}&lt;/p&gt; &lt;/div&gt; @endif @endforeach &lt;/div&gt; &lt;/div&gt; @endsection **and this css file for preview.css page :** hr { margin-bottom: 8px; } @page { size: 21cm 29.7cm; margin: 30mm 45mm 30mm 45mm; } div.chapter, div.appendix { page-break-after: always; } div.titlepage { page: blank; } .page { width: 210mm; height: 297mm; background-color: white; margin: 0 auto; margin-bottom: 35px; padding: 60px 80px; /\* font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif \*/ font-family: TraArabic; box-shadow: 0 0 0.5cm rgba(0, 0, 0, 0.5); position: relative; } .page-number { position: absolute; bottom: 0px; right: 105mm; /\* font-size: 50px; \*/ margin-bottom: 30px; text-align: center !important; } .cover-page { padding: 60px 80px; } .cover-page-title { padding-top: 100px; padding-bottom: 80px; text-align: center; font-size: 50px; } .cover-page-researcher { padding-top: 100px; text-align: center; font-size: 30px; } .page-title { font-size: 20px; text-align: center; margin-bottom: 20px; font-weight: bold; } .page-related-indexes { text-align: center; }
We programmed starfish.com to use MySQL (the company standard DB), despite me wanting to use PostgreSQL. Then corporate wanted us to deploy to Heroku, which requires PostgreSQL, which I *jumped* on! I then made sure to utilize quite a number of Postgres-specific features like inherited tables, materialized views and RULES. Heroku sucked so bad they were like "Nope, go to Google Cloud SQL", which was MySQL based. But I was like, "Um guys, that's going to be a problem..." So they got upset @ me for putting in so much Postgres-specific stuff. Ended up throwing up a PostgreSQL VM instance on Google Compute Engine and everything was way way better than heroku. But less than a month later, Google Cloud SQL started supporting PostgreSQL, so we started using that. Now, 8 months later, Cloud SQL is so slow and unstable we're back to using the Google Compute Engine VM and I'm in the process of upgrading to PostgreSQL 10.
Definitely have to change the LIMIT and OFFSET syntax...
Why the hell would people run a test DB inside its own VM in 2018?? `docker pull mysql/mysql` is a thing...
That's called an Eloquent Migration. I use them all the time for my triggers and sprocs.
Team leads who block every PR that has raw SQL in them. That's why.
You'd be negatively shocked.
Good luck with those tests. You know that MySQL isn't exactly standards-compliant, right?
Wow, how did that happen!?
These packages work entirely through Eloquent, and at no point do they drop down to the level of writing raw queries. Eloquent has its own tests, and if I were to test against every database supported by Eloquent, I would be duplicating those tests. &amp;#x200B; If I did need to drop down to writing raw queries, then I'd need to test against those databases, but unless that's the case it's not worth it. If I can't rely on Eloquent working as expected in my project then I might as well pack up and go home, so duplicating that functionality is utterly pointless.
As /u/ParagonJenko said, try to make blog. When you make what he said, add extra features like categories of posts, rating, comment system... Don't fall for Laravel trap. It is FW that breaks all design patterns and has very low number of features, thus making it attractive for beginners. It will help you in making blogs, that's for sure, but anything more complicated and you will be in a world of pain. Stick with Symfony, I have seen people coming from Java world switch to php only because of it. It might look scary at beginning (it is not) but after few days you will find yourself doing crazy things in just few lines. And all code will have autocomplete because Symfony doesn't use magic accessors. As an example; blog site with posts, categories, tags, users and comments can be built in 1 hour. To make sure you are on the right track, always use tools like *phpstan (on max level)* and *cs-fixer*. Start using them from beginning, both are amazing tools in learning php and writing good code.
Exciting, there is so much cool stuff you can do with ffmpeg.
The senior developers I've had look over my code and help me with stuff have all advised me that they don't use JS frameworks (when I asked if it's worth me learning VueJS), they said it's not worth having to rewrite and secure all your entrypoints, and losing SEO for some fancy animations. They also advise me not to waste time with tests/factories/seeders (which I personally don't feel is right, I refresh my databases so often in development that I couldn't live without seeders) What would be your response to that advice I've been given?
It makes no sense; you always have to secure routes, JS can nothing to do with it. &amp;#x200B; What I do is to return 401/403 response status that JS can catch and I show either a warning or login page. There is no need for security duplication, never. And you are not loosing SEO, google indexing supports JS for long time. And their argument of no seeders pretty much explains how much of "seniors" they really are :)
do you know what docker is?
\&gt; Eloquent has its own tests, and if I were to test against every database supported by Eloquent, I would be duplicating those tests. &amp;#x200B; So, by this logic: \- Laravel has unit tests - so no need to write tests for your laravel code! \- PHP tests every function, so no need to write PHP tests at all And that's why you drank too much koolaid. Stop being a bad lazy developer and write tests. You clearly don't understand the point of testing, or how to do it, so I suggest a little less time trying to insult people saying things you don't understand and learning and learn how to test. Then write them. &amp;#x200B; Also, your assumption is wrong. Something something ASSumption. &amp;#x200B; Take the hit and become a better developer. The Laravel world has some bad developers (mostly singular) 'teaching' things you shouldn't be doing.
&gt; I have seen people coming from Java world switch to php only because of it Nobody (sane) switches languages *just* for a framework.
&gt;So, by this logic: &gt; &gt;Laravel has unit tests - so no need to write tests for your laravel code!PHP tests every function, so no need to write PHP tests at all That's a pathetic strawman. You either didn't understand it or you're trolling. \&gt; You clearly don't understand the point of testing, or how to do it Bollocks. I'm not going to pretend I'm some great authority on testing, but I've been doing so for several years now, I've been the biggest TDD advocate at several places where I've worked. You've demonstrated fuck-all knowledge about testing. \&gt; Also, your assumption is wrong. Something something ASSumption. If you have found a specific bug, open a bug ticket. Otherwise put up and shut up.
I would add that semantic versioning may have a little sense for your application (as opposed to libraries with APIs) at least without redefining the meaning of the application API.
What are some PHP libraries that abstract state mutation into functions? The only one I know of is [Phunctional](https://github.com/Lambdish/phunctional), and while it provides quite a bit, I still find myself writing custom functions. Are there similar libraries (thinking about how to handle regular expressions, trees, etc.)?
I was about to ask that. By the way, if I understood correctly, for each commit a new version is attributed. Who does that? The commit's author ?
&gt; Happy to answer any more questions you have! Ooh, I had one about: &gt; Cannot online add a new column &gt; A real problem for big tables as this forced us to have downtimes every other month. And having the lack of knowledge/resources for tools like pt-online-schema-change, this left us in despair. See, pt-online-schema-change isn't difficult to use, and it works really well as long as you don't have triggers on the table you're changing. Did you get a chance to try use it, or did it look scary and you ran away? :) Also: &gt; Importing that dump took multiple more hours than creating it (8-9) I ponder if you tweaked the configuration to allow quick imports? There's a few things you can do when restoring a database dump that make it *much* faster to import. I mean doing a 20GB SQL file import taking about 30 mins. Thing is, people are often not doing it so they don't know about the options :) I mean, granted, I'm trying to ask past-you questions, but while it's great you managed to find great success on Postgresql, some of your mysql hangups are easy to solve, and might help people more these days :)
Smells like spam 
&gt;a separate class e.g. Session That's not so bad.. Frameworks tend to encapsulate session too with a `Session` class (see [https://github.com/symfony/http-foundation/blob/master/Session/Session.php](https://github.com/symfony/http-foundation/blob/master/Session/Session.php))
Docker is not a VM. &amp;#x200B; Unless you work on Mac :D Then it NEEDS a (micro) VM, but still, Docker IS NOT A VM!
&gt;I'm making an assumption that Eloquent will behave the same with different backends, which is a very, very different thing. And that's a feeble assumption. A lot can go wrong with that. In my experience, I got saved more than once by non-unit tests that run on the same exact vendor that I use in prod; things like transactions, foreign keys, cascade deletes are handles in tiny different ways by different DBMS, so if you test everything with a different vendor, you're opening the door to some annoying and hidden bugs...
That does seem cool. I guess I do have a concern that it looks like ffmpeg would need to be installed on my web server. Not sure what that entails... as it's not something I can throw in my public_html directory and just push live from my local.
Versions shouldn't change per commit, but per release. It would be up to the project's owner/manager to decide what changes make it into a release and then increment the correct version portion.
We're talking pretty trivial queries here. A few basic selects, updates and inserts, and nothing more, for which it simply isn't worth the bother of testing against multiple databases.
Service location is when your class has direct access to the container and explicitly tells the container to "locate" and give you the dependency. This is what you have now. Dependency injection is when your class (and its base class) is completely oblivious to the existence of a container. It's constructor simply says "I need an instance of `C`" and relies on something external to obtain and "inject" that dependency - it doesn't try to locate or grab that itself.
That is one metric but you have other metrics to consider, in this case performance, future compatibility with libraries, strong type system, plus other quality of life improvements. Even by that metric upgrading from 7.2 to 7.3 will be a lot easier, then from 5.6 to 7.3.
Yeah it does have a reconnect method, but I've found it unreliable. What I've ended up doing is basically running my connection script in a while loop that creates the connection object and channel, listens for and processes work, and whenever an Exception occurs that can't be handled sanely, within the handler code, the loop repeats and the entire AMQPlib apparatus gets created from scratch. This actually seems to be working well for me at this point.
&gt; It's exactly the same as with the real life directions. Given the absolute address, a postal one, like "7119 W Sunset Blvd West Hollywood, CA 90046" you can find the location from anywhere. However, given the relative directions, like "keep three blocks this way and then and turn to the right" would work from the current location only, otherwise sending you astray. From my article [Relative and absolute paths, in the file system and on the web server](https://phpdelusions.net/articles/paths)
Actually, they do: [https://www.youtube.com/watch?v=UeAVPEaF0Ng&amp;t=6s](https://www.youtube.com/watch?v=UeAVPEaF0Ng&amp;t=6s). And I have seen more from other conferences but I am lazy to search for them. Last year I wanted to switch to language that has generics, enums, asyncs etc... . But Symfony4 is the only reason I stayed, it is just too powerful when compared to Spring, NestJs and others. And when PHP gets generics, a whole new world will open. I would be able to get tagged services just by typing &amp;#x200B; `public function __construct(array&lt;SomeInterface&gt;)` &amp;#x200B; without any extra code. And that is just the tip of the iceberg.
Hey. You do not need null-bytes to exploit this, you can do this: &gt; phar://actual_file.phar/foo
I can't be bothered to argue with you. Piss off and wallow in your sewer of stupidity.
I tried skipping through the video where that statement is made, but obviously I couldn't find it inside the 45 minutes long video. It may be in there, who knows. &gt; But Symfony4 is the only reason I stayed There are several ways to do async in php right now. And even last year.
Nice!
That's how we do it, we tag a patch when pushing to production. Then tag minor and major for big features/release milestones.
[Here are some ideas](https://github.com/karan/Projects)
Nice article, I can relate to much of it. Thanks for the tip on the ignore case option in git, had a few encounters with incorrectly capitalized files in the past. &amp;#x200B; Git flow, to me, feels overkill in most cases - if you're not working with releases, it just adds a lot of extra work. The hotfix branches only make sense if you're doing a bug fix round where you fix multiple bugs over the course of several hours/days. For me, it really depends on the project whether or not I'd use git flow. &amp;#x200B; Same with semantic versioning, it hardly necessary on project level. Unless it's a library, OOS or web app, I've yet to see the usefulness of versioning a php project, other than for marketing purposes. &amp;#x200B; Git flow and semver go hand in hand, in a lot of the cases they require a lot of additional work for something that could be done much quicker. &amp;#x200B; Of course, if this keeps your developers in check and supports the way you deliver code (release cycles?), then it's all worth it ... but if this gives your support guys headaches and sore fingers from constantly making branches and releases (continuous deployment?), then you should re-evaluate your strategy. &amp;#x200B; Just my two cents.
When I think of WAMP I think of the windows installer. But this looks cool. Keep of the great and amazing work :D
yeah, or you could use iptables like a normal person.. `iptables -A INPUT -s 192.168.0.1 -j ACCEPT` 
Yes, it is a lot to watch because the topic is about autowiring. But in first few minutes he says he started working with Spring , tried PHP and stayed with Symfony because the architecture is similar. &amp;#x200B; Even if he didn't mention it directly in the video (long time since I watched it), hardly any Java programmer would switch to PHP. It is not that PHP is bad but because of crappy software written in it, word got out. &amp;#x200B; &gt;There are several ways to do async in php right now You are right; reactphp and others. But none of these solutions are as simple as Typescript, Hack... probably more. &amp;#x200B; But I can live without it. What I most want for PHP are generics, pretty much they are the primary reason I wanted to make the switch. I used them when I was working with Angular, crazy powerful thing. &amp;#x200B;
`Ev....il()`
Even evil() has its place.
sorry, but thanks for the help
Sure, if the firewall is on the box directly. Most cloud services offer external firewalls as well, which is what the article is dealing with. &amp;#x200B; Of course, this has nothing to do with PHP.
You can be a senior and still be bad at your job, it rarely means anything more than "worked for x years in function y". The senior developers that looked at your code will become irrelevant in a few years and only work on legacy code if that is how they look at js and testing. They will just get stuck in their ways. Legacy code is not fun to work in, unless you are able to refactor and modernize the parts that need it - which I doubt these "seniors" will do, they'll just get swallowed up by their own spaghetti code. &amp;#x200B; Keep learning, regardless what people say. Even if you won't even use a certain language or framework, it will still provide a different look at things and help you grow as a programmer. Knowledge is power.
but from this it would be foo.png, not foo.php, then how can we execute PHP code.
I've found that using a defined project root or \_\_DIR\_\_ works best. I've taken over a project that changed include path in some files to something stupid like "../../.." to get relative paths working. At some point this gets too overwhelming and you'll spend a stupid amount of time figuring out why includes are not finding files. \_\_DIR\_\_ was a lifesaver.
No, but we're aware of the caveats and take them into consideration. In the 4 years I've been building tests for this application we've never run into a bug caused by behavior differences between MySQL and SQLite. We did have to build in a few cases where SQLite and MySQL used incompatible syntax but that wasn't hard.
It does make the code DRYer, but it pollutes the class hierarchy unnecessarily. In your example, you wouldn't even need a base controller if you implement proper DI. And when happens when you need to resolve dependencies on some other class? Do you copy the code? That's not DRY. Do you make a SelfResolving Uber class to use on everything? Why would having a parent class for half the type hierarchy be useful? With proper DI, none of those things are issues.
The hotfix branch is not usually meant for general bug fixes, only critical issues and security patches
&gt; Don't fall for Laravel trap. It is FW that breaks all design patterns and has very low number of features, thus making it attractive for beginners. It will help you in making blogs, that's for sure, but anything more complicated and you will be in a world of pain. Okay that's a legitimately insane statement. You clearly haven't used Laravel recently. 
From what you told me, I wouldn't classify them as "senior developers" at all. SMH :o
They don't sound like senior developers. They sound like junior devs who think they are senior because they have the same X years of experience. I once had a senior dev who had over ten years of experience on me, but he'd stopped learning a long time ago and couldn't build a modern PHP application for toffee. TDD and JavaScript frameworks aren't some airy-fairy academic practise. They arose out of the need to solve real-world problems. I work on a legacy project I inherited and the front end is just jQuery, and it's torture trying to maintain it. Using something like React or Vue is far, far easier. Same goes for tests - a legacy app without tests is excruciatingly painful to maintain.
It's how I"ve trained dozens and dozens of people across 4 continents (NA, SA, EU and AS) over the years.
Exactly. As in Slim where the route resolver first checks the container and instantiates an object per the callback found there.
PHP is polarized in Laravel versus non-laravel. :-P In sum, most projects are resumed as follow: * Create a form to insert something into the database. * Create a table that lists what you inserted into the database. * Do the same as the table, but return a JSON and call it a webservice/api/rest/cloud/pony. And that's it. Practically all projects are forms/lists, rinse and repeat x 100 times. For example, I am working in a portal for a store. It consists of "many forms that insert values" and many lists. And nothing else much (excluding security and validations but they are advanced features). 
I agree. A) JavaScript IS INSECURE. You must use tokens for everything. And your token is also unsafe. For example, I am working with Google Maps, and I must expose my key!. It's insane!. Part of my code is behind PHP so it's safe from prying eyes but a portion of the key is revealed, and I can't do a thing to change it. What's a mess. B) It's trivial to change the logic of Javascript, of course, you can't put your logic in the view layer but then, what's the point of VUE, Angular and React?. C) Javascript screw your SEO. And no, Google supports only the basic features of javascript. SEO is clear about it, and it's clearly documented. A site that uses Javascript is safe not because of Javascript but because of the server-side code (PHP for example). So, can you do a fancy site without much Javascript?. Yep, it's called CSS and JQuery. Proof, how to crack a javascript site (that's the entries points are not safe)?. CURL. Even a script kiddie could hack it. 
They are sometimes useful in the HTML/CSS part of making web apps in PHP. A website could be at: https://site1/ Therefore `body { background: url(https://site1/images/bg.png); }` is fine. But if the code moves to https://site2/ then the image break. It would have been better with: `body { background: url(/images/bg.png); }` More info in this random example I found while searching: https://css-tricks.com/quick-reminder-about-file-paths/
You are confusing a full qualified URL with an absolute path. One still can have the latter without the former. Your code **must** be `body { background: url(/images/bg.png); }`, notice the leading slash. Otherwise half of the pages won't find the background image. In HTML/CSS the path must be always absolute, there is no case when a relative path could be useful and a relative path is a disaster for HTML/CSS.
How it can be different? `include ("../../../config.php")` is essentially `include (__DIR__."/../../../config.php");`, `__DIR__` itself doesn't make your paths any easier. Used once to define the site root is another matter, here it is indeed useful.
This is anything but help. Relative paths will make your life a nightmare. Paths always must be absolute, but built up from the certain entry point. 
Well... damn. I quickly tried to recreate that case but just couldn't get it to fail. Has it been improved sometime in the last 6 years? I distinctly remember being frustrated with this. It can be that my memory is going bad :) &amp;#x200B;
Reindexing 》array_values
Like it was said in the other answer, this stuff is not quite related to PHP, but rather to filesystems in general, and the last time it changed was about 40 years ago :) However, I was wrong. Adding `__DIR__` makes the difference actually. It creates the path from the file where it called as opposed to the path relative to the entry point. Say, a user is requesting `/about/contacts/index.php` which includes `/modules/auth/user.php`. And in this user.php `../` would point at `/about` while `__DIR__."/../"` woupl point at `/modules`.
They both suck to be honest. 
Depends how fast you want to run into trouble.
I think it's good news but the final release would be more appropriate to be posted in /r/php while RCs are more fit to be posted in /r/cakephp
[removed]
Agreed, /r/PHP is too slow moving of a subreddit for more frequent updates like framework RCs.
[This might be a good resource to start with.](https://devzone.zend.com/303/extension-writing-part-i-introduction-to-php-and-zend/)
I personally prefer Wordpress these days. I was really only into Drupal when it was in version 7, but unfortunately version 8 came out and it was simply a development nightmare due to it's slow performance so I just gave up on it and completely switched to Wordpress. Both systems have flaws, but atleast Wordpress has automated update process (for core atleast). You do have to do more programming for Wordpress though and most plugins have a price tag to them now (premium versions), while Drupal modules are 99% completely free. I only use these CMS to develop websites for small customers as a freelancer. Anything like a custom application should be done on frameworks, not CMS.
Why an extension? Use the `auto_prepend_file` php.ini directive and prepend a simple file with the function: ``` &lt;?php function \dd(&amp;...$data){ var_dump($data); die(); } ```
Cuffs or straitjacket, which one do you want? 
Also use phpcs.xml to include/exclude directories, rule sets, config vars. And if you don't mind that PHPStorm now and then asks you to keep or load file changes, create a file watcher for PHP files that runs `vendor/bin/phpcbf path/file.php -n`. Some style issues will be fixed automatically. 
I would also recommend to apply that only to the scope of opened files
Phpcs should be a pre-commit hook too, just to prevent faulty formatted code from ever being immortalised.
Wordpress with some effort can be quite decent. Drupal 8 however... I'd rather build a Symfony app instead.
&gt; Both are data structures Sets are not data structures, they are abstract data-types; structure-less by definition.
*wonders why the library wasn't called ffmPHPeg*
Good song, wrong subreddit...
For me an absolute no go because I can't easily check the source code and understand/contribute to it so it's gonna be very hard to dig into. Also there is little libraries with a Phalcon bridge unlike Symfony &amp; Laravel.
Or is it?
I need someone help me..please😊
I've worked with it previously and while it is fast it isn't entirely developer friendly and you don't have the community and knowledge base like other frameworks. As for docs, there really aren't any other than the official ones and their forum posts. &amp;#x200B; It works on a lot of the same basic concepts as other frameworks so as long as you have a decent understanding of how most other framework operate you should be fine.
Senior positions are less about writing code and more about designing/managing/upkeeping code and team functions. Documentation and processes, also people skills are something you should be ready to demonstrate. Knowing how to formulate solutions to problems without writing code is a good skill to have (e.g. what frameworks/patterns/methodologies work where and when). Knowing how to shift your knowledge to your team members is vital as well. A big chunk of what senior team members do is teach and coach others so they can get closer to seniority as well. Just knowing the language standard library through and through does not make you eligible for a senior position, more likely you'd be stuffed into a team as a simple code monkey.
Wordpress - biggest community, lots of plugin and themes &amp;#x200B; You can integrate Laravel with WP using Corcel - [https://github.com/corcel/corcel](https://github.com/corcel/corcel) if you want a more professional approach.
Maybe not good for your particular solution but you can containerize that problem away fairly trivially.
Sorry, slow reply - north east. There are some massive projects being undertaken by some big agencies, and they are hoovering up all the candidates.
You could use a Jwt token instead of a random token, then you dont need to do any query to authorize.
That puts authentication back into the session, which is not what I thought OP was suggesting.
Zephir looks a lot like PHP so you can refer to that, but it's not like a vendor you can quickly browse through. I've always wanted to try Phalcon but I've never gotten around to it, it's not just a composer install so it requires some setting up - which is often a step too much for me when I just want to try it out, haven't really made an effort yet.
From a programmer perspective Drupal is best. From a trying to solve real world problem perspective WordPress always wins. It’s a much more “finished” product, easier to implement, and much easier to use on a daily basis for editors/admins. Any scenario where Drupal is the better solution between the two, frameworks like Laravel and Symfony are an even better solution. 
oh so it's not `dd` as in `dd if=/dev/zero of=/dev/sda`
Hey Guys! I've develop a Laravel Administration Panel! Hope that you can help me to improve it!
&gt;Okay that's a legitimately insane statement. You clearly haven't used Laravel recently. That is wrong; I didn't use Laravel at all, just like I didn't use CakePHP, CodeIgniter etc... I read the docs and decided it is not even worth trying. I stand by my statement. In Laravel you can access anything from anywhere which is insane. Let's start with ORM: it is tightly coupled with forms and routes, it is Active-Record (in 2018?!), and most important; it doesn't use Identity-Map pattern. Migrations has less features that Doctrine1 (from \~2006-2010) had and the needed code is terrible. Doctrine1 had base classes which hold definitions and that base class was auto-generated; child class is empty by default. Laravel forms are just plain field. On the other side, Symfony forms has bigger documentation than entire Laravel; they are insanely powerful. Just take a look at Data Transformers, form extensions etc... And with so low number of features, Laravel is still very slow. Even documentation takes more than 800ms while 100% dynamic page in S4 is less than 200ms. I could go on but before you judge someone, take a look at their argument first.
Logical fallacy, doesn't mean anything as this doesn't help anyone to learn the language, but to learn a framework.
Cringe
Hey man, I’m in the middle of building a custom admin panel. Can you message me this link so I don’t forget to look it up later. See if there is anything I can contribute. Cheers !
- Has `.idea/` committed - No tests to be found - Demo link not working - Code styling not enabled in Markdown - Has the PhpStorm default header in - The code does not have strict types - Dynamic properties declared on the model with snake case properties A lot of things that don't make me want to even look at it any deeper :/
It's a wrapper for Symfony's [VarDumper component](https://symfony.com/doc/current/components/var_dumper.html), so you can just do `composer global require symfony/var-dumper` and then add `auto_prepend_file = ${HOME}/.composer/vendor/autoload.php` to your php.ini.
Demo site's down.
I’ll fix it in a couple of hour 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
To add the the above. dd uses Symfony's var dumper as of Laravel 5 which itself contains a Twig template to render to HTML and also does colors in the terminal. Not sure why you'd ever want it as an extension built in C++. If your project is including the Symfony var dumper you can make your own dd function just like the comment above but using dump() instead of var_dump() to achieve literally the same exact functionality as Laravel &gt;=5.
Strictly speaking, tuts+ is not a blogging platform. So all we can do is downvote this silly article.
Just bookmark it yourself?
I would suggest against preloading he function in this way. The main reason is that this makes it harder to discover and easily causes setup issues (forget to set this up and you get an unknow function error, then you forgot about the prepend file and manually include and on the other machine suddenly have a doubled include etc.) if you want to have it always available make it better part of a common library you always use. Also the function itself seems more like a debugging tool, than anything you want in production, so maybe invest in a better test setup which could give good output and avoids rerunning into the same problem after fixing it once. On a production setup you should rather log diagnostically output and give users a "nice" error message.
&gt; The code does not have strict types Is that a must nowadays?
Actually, yes! [https://www.php-fig.org/psr/psr-1/#42-properties](https://www.php-fig.org/psr/psr-1/#42-properties)
Hope OP fix those things soon :), also, I would add that commit messages are in Italian, nothing wrong there, but, if you aim for a global market, better use a global language
Ah, that's a good point. I wish you luck!
are you checking the source code of php then?
I love it, and am trying to find an excuse to use it. My problem is I tend to be on PHP because I've inherited a codebase along with some managed hosting. Extensions are often impossible to install, but I can get quite a bit of speed using php7 and the many C based libs PHP ships with, e.g. [immutable.php](https://github.com/jkoudys/immutable.php) for managing my collections, because it's mostly a bunch of fast methods wrapped around a SplFixedArray. These projects also tend to be bottlenecked on either the db, or because the same endpoints are called repeatedly and could easily be cached. A C compiled framework won't make my SQL any more efficient. A lot of the heavier stuff is already running on a compiled binary by design. eg phalcon's templates are fine, but I've been rendering almost my entire app in JSON for years now, and that's all handled by json.c. JSON renders to my clients, PDO to my db (c lib) and curl to external resources (also c). The only important parts left that live in PHP are the ORM and the router. My router these days is pretty simple as I'm graphql everywhere (phalcon's rest only), so really all phalcon's got for me is the ORM. My total execution time in the ORM is almost always 99% waiting on the db, so again doesn't help. So in conclusion, I really like it, think it's cool, well implemented, and a good architecture, and want an excuse to use it, but I simply can't justify it. I do like that it's the one framework that actually needs to be a framework (instead of a suite of individual, standards-based modules), because the .so needs to be built for all of it. I'd take it over laravel in a heartbeat, but for now I'll simply composer install psr based libs that do what my project needs and no more. 
You are checking laravels' or Symfony's right? I check the code of the frameworks I use regularly.
These core components are open source and are tested by thousands of professionals. You basically say that you don't trust them? You should invent your personal framework in this case :)
Interesting to see a Phalcon tutorial coming from a shared hosting company. This is real SEO :) &amp;#x200B; Hostinger is owns [000-webhost.com](https://000-webhost.com) , the biggest free hosting service. This is a paying customers magnet.
No, he says he's part of the thousands of professionals you rely on.
Just create a file watcher instead. It will run PHP CS fixer after each save so you don't spend time fixing these.
If you don't mind then fine for you. Personally I irk at the sight of those especially when mixed with regular camel case properties. The only time I'm fine with snake case is with test methods because they are more lengthy hence more readable that way and also never called anywhere in the code base so it has no impact. As for the std lib API, let's not bring that up as consistency has never been PHP forte :)
respect the man, he's in the middle of building something.
For me yes, it's a sensible default to have. There is some cases eventually where you don't want them in which case you can remove it, but it's rare enough to not omit strict type as the default.
I'm curious to know what more flexibility Phalcon has. The last time I checked there was nothing really appealing in its API.
A container: [https://sourcemaking.com/design\_patterns/object\_pool](https://sourcemaking.com/design_patterns/object_pool)
The right answer to a problem is never Drupal.
Yea, that sentence seems a bit funky, I've edited it. What is wrong with "set with indexes" though? And yes it's a tuple but I'm comparing it to a Set here.
Check out the wiki below: "there are four basic data structures: 1. unpackaged, unindexed: [bunch](https://en.wikipedia.org/w/index.php?title=Bunch_(computer_science)&amp;action=edit&amp;redlink=1) 2. packaged, unindexed: set 3. unpackaged, indexed: [string](https://en.wikipedia.org/wiki/String_(computer_science)) ([sequence](https://en.wikipedia.org/wiki/Sequence)) 4. packaged, indexed: [list](https://en.wikipedia.org/wiki/List_(abstract_data_type)) ([array](https://en.wikipedia.org/wiki/Array_data_type))" [https://en.wikipedia.org/wiki/Set\_(abstract\_data\_type)](https://en.wikipedia.org/wiki/Set_(abstract_data_type))
Agreed. I didn't want to include details on features, usage of phpcs here. Just a simple how to setup phpcs article. Having said that, it would be a good article with all the usage guides and stuff. I'll probably write one for that.
Symfony and Laravel are both heavily wrapped and abstracted. This is done to prevent somewhat writing bad code. On phalcon you don't have those. You can have a simple app in one file only if you want to. I don't know when you've checked the docs but they're usually very good covered.
Fixed
Since PHP got a significant speed increase in PHP 7 , there's been little reason to consider using something like Phalcon . When Phalcon came out 7 years ago, people were intrigued, but, things are different now.
DEMO SITE IS ON!
It depends on what you want to do . Drupal has more serious tools and modules.
snake_case_is_best_case. you_just_need_to_switch_to_dvorak_to_see_the_light!
Looks like he's got the environment set to development too: https://demo.ikpanel.eu/notifications
Plenty sure their are massive amounts of bad C programmers, despite the higher barrier of entry. They are in every language, its just more easy to hide this this fact in some languages as the blame can be shifted on the OS or some other parts. A lot of PHP reputation is people who are not IT'ers or professionals running their own drupal, wordpress etc. They follow the install instructions, get it working and then never update it in years. They get hacked and behold, who gets the blame. The software ... written in PHP because its popular ... and ... Years was part of a team, that hosted web space for schools and the amount of support calls we got for hacked websites. And we are the host providing web space, that was it! People with drupal and other websites that had not been updated in years when they got transferred to our space. And then people blamed us, for their own incompetence. We are only the webspace provider!!! All hacks that we found and solved, came because of people not upgrading their software, even when we send out reminders to people to update their god old software. No wonder PHP gets a bad rep like this. It does not matter if its PHP, or Perl or C or whatever. If something is popular and people do not do basic maintenance, the blame always gets shifted. One thing i learned a long time, people have a hard time admitting it was their mistake. And rather blame everybody and everything. A stupid example: My wife her work sells X goods. 4 Pallets of goods. The client gets informed they can pick up the goods. They client gets asked, who is your shipping company. No responds. The transportation company **Y** arrives at the warehouse with the right documents. They pick up the load. The client get pictures of the pickup with clearly written the **Y** transportation company name on the truck, licence plates etc. A few days later the client all angry, why are my products in XXX country. Why is our products picked up by **Y** transportation company, we only use **X** company. But **Y** transportation company showed up with the right documents, that can only be provided by the client. It seems that **X** company, sub contracted to **Y** company. But my wife gets all the blame for the issues, when its the client their fault for not providing information who the pickup transportation company is. Nor did the client check after the pickup. Nor do they even contact their own transportation company. Simply yelling at the seller to solve a issue with the transportation company, what the client is responsible for. So yea, this just shows the hole blame game is done everywhere.
I read this but I'm still not sure what a code sniffer is
This little lib provides a simple way to update JSON data by mapping functions over it, as you would do with lists and \`array\_map()\`. &amp;#x200B; We use a variation of this in our platform where we store a lot of the data as JSON (ie. the schema is defined in code) as opposed to relationally. When we have to migrate said data, eg. when a client wants to update some reference value, we can iterate over the corresponding JSON structures in the DB and use the above lib to update values.
Guys, i just wanna create something useful that everyone can use. Unfortunately I'm alone and i cannot reach everything. If you have some tips please write your comment here. 
The thing is that you can reindex the array to keys from a column. No need to use array_combine() and array_column() together with array_values().
That part of the wikipedia article is *very* dubious. The difference between a string and an array is mostly semantic (strings are often considered arrays/lists of characters and implemented as such) and the definition of "packaged" as it is given in the article applies to strings just as well as to arrays. The "packaged, unindexed" data structure is also more likely a multiset than a traditional set, since there is no reason to disallow duplicate entries in such a data structure. The claim that there are exactly these four "basic data structures" is dubious as well. The so-called "bunch" doesn't have its own article and from the description in the article (note a) it is not actually a data structure at all. 
Depends on what your use case is. If you don't need a blog, then Drupal.
But *why* are you comparing arrays to sets? The comparison just doesn't make much sense. And saying "an array is basically a set with indexes" is still wrong. As another commenter already said, arrays are data structures while sets are abstract data types. There are actual implementations of sets in some programming languages but even if you were to compare those to arrays, the claim that arrays are just "sets with indexes" wouldn't make any more sense.
I can't figure out how someone can be posting in a programming community and not think to just make a bookmark. Even if you just write the link on paper, I can't imagine the thought process that leads to asking for a link to be PMed over the million other ways it could be saved for later reference.
I don't really know one specific lib that does it all. At work I ended up implementing the majority of Haskell's prelude (from hugs 98) to have a sane set of primitive functions that I can work with. For trees specifically check out Treegami, my little tree mapping/folding lib: [https://github.com/pwm/treegami](https://github.com/pwm/treegami) I've also just put up a lib called JGami today, which builds on top of Treegami and provides an easy way to map functions over JSON: [https://github.com/pwm/jgami](https://github.com/pwm/jgami)
&gt; there's been little reason to consider using something like Phalcon Unless you just want to be the fastest you can, without writing C. Phalcon still runs faster than interpreted 7.
I like the way it's headed, do you accept PRs?
I didn't know this framework was still alive. Last time I heard about it was in 2007.
I really like psr7 and http://docs.php-http.org/en/latest/ when dealing with requests with apis and other stuff in backends. It allows me to write library agnostic code for such stuff. Most rewuest hanling libs like guzzle and others have adapters which allows me to use only PSR interfaces
I did check the doc not the source code I admit. Do you have any concrete example? Because right now I don't see what you mean at all.
&gt;The source code is very well written and very easy to follow. Maybe for you, I don't really find it very straightforward nor am I willing to really do any digging to find out how it's working. The thing I like with regular frameworks and libraries is that it's plain PHP which I can dig in, debug and patch whenever I feel like. Note that I'm not saying phalcon code is poorly written though, it's just that I don't have any interest in learning another language for it. &gt;You can use any composer libraries just the same as you can with Symfony &amp; Laravel. Sure but a lot of libraries provide a framework bridge to ease the usage. So while it doesn't prevent you to use the library per se, you will have very little libraries which provide this framework bridge for Phalcon making it a bit more annoying to use.
Yep sure 
Damn. I'm based in Scotland. Would have offered to help out
you can also setup xdebug
How fast is it?
It depends. If you want something basic but with some fancy stuff, very easy to deploy and the deadline is today, go with Wordpress. If you have some time to develop a website, go with October CMS.
No idea to be honest. Speed was never a concern of mine. The primary focus was on correctness and thus data integrity. Also my philosophy is make it correct 1st and fast 2nd. I'm still in the 1st stage :) &amp;#x200B; Just did some quick measurements mapping id over 4 different json strings: &amp;#x200B; `// {} x 10,000 -&gt; ~0.8 sec (12,500/sec)` `// {"a":"b"} x 10,000 -&gt; ~1.3 sec (7,692/sec)` `// [1,2,3,4,5] x 10,000 -&gt; ~3.8 sec (2,632/sec)` `// [1,[2,[3,[4,[5]]]]] x 10,000 -&gt; ~6.1 sec (1,639/sec)`
Cake who? You mean pre-Laravel 😅
People Who Care &lt; 2 Let it die already
Last time I used it and I am an avid php dev
oh god please don’t
*Evil laugh* Nah just kidding I actually like Cake 3, 2.x not so much though..
That was the time when I chose Zend Framework v0.2 over it. Good times - the beginnings of proper web development.
oh god please don’t either
For `computer implementation[s] of the mathematical concept of a finite set`, yes *those* are compound data-structures. But a *mathematical* set is structure-less, and possibly infinite.
Yeah, but for some use cases, the latest editions of PHP 7 is almost as fast as a compiled language. The benchmarks would have to see big improvements to make it worth switching to Falcon.
I'll second the drupal recommendation, and I would say it would be Laravel for me.
oh thanks. so it detects code smell. makes perfect sense.
I am of this opinion as well. However, if I understand correctly, the point is to skip the serialization process entirely (I did not look at the source yet - on mobile). Serialization can be quite a costly step in data transportation (at least in my experiences).
Cake actually good as laravel. But people keep complain on magic stuff.. Thumbs up for cakephp team
The examples use `json_decode` on a json string before passing it to the map function.
So it does! Now I really don't understand the use case for this package. 🤔
::cough:: zephir!!
Thanks for the heads up. I've added the introduction to the beginning of the article.
Because I want to. It is my article, can't I compare it with anything I want? ;). Well, we'll agree to disagree on the other part. Cheers.
Cool algorithm!
&amp;#x200B;
I believe the calls you need to make to Google are very simple. A url call with two parameters. Pluck the result from the JSON result. 
&gt; Sets: &gt; &gt; ... &gt; It does not have index for the items it contains &gt; A specific item cannot be taken and has to be traversed one by one until it is found or not found A set (or at least implementation of a set in a programming language) can be indexed (ex: a set remembering insertion order [like this](https://pypi.org/project/orderedset/)), but more importantly: it doesn't necessarily need to be traversed naively, it can be backed by something other than an array. Using a hashmap with no mapped data is something a few implementations out there do for Sets because it'll give O(1) performance in a lot of cases. PHP has one such implementation too: the [Ds\Set](http://php.net/manual/en/class.ds-set.php).
Well, if you index the items in a set, aren't they basically an array/list now? Yes implementations might differ, but it is not a Set in pure sense, when it includes indexes. Yes PHP has a Set implementation, but we're comparing it to PHP Array here.
&gt; Has .idea/ committed As PhpStorm user I would be grateful for this in any OpenSource project I might be contributing to.
Here's a package I wrote to do this without having to use a third party API: https://packagist.org/packages/zero-config/geo-distance
Except the bottleneck is almost never the language. You can squeeze an awful lot better performance out of most frameworks by refactoring queries, adding caching, and making good use of HTTP headers. Adding Varnish to your stack would, in most cases, make a big difference too.
If I take the time to configure some settings globally it's not for them to be overridden left and right. If those settings are regarding CS, `.editorconfig` are a better way to achieve this.
Do you acknowledge tasks right away with this method?
That would be a great way to destroy a server
&gt; commit messages are in Italian Code comments have the same problem.
You are right, there is no need to duplicate param/return types. You can turn it off in settings-&gt;inspections-&gt;php and look for error that PHPStorm is giving you (can't remember it now). &amp;#x200B; Once you turn it off, those lines will be gone and your coworkers will need to do the same. From that moment you only need to use @param and @return for declarations that PHP doesn't support like typed arrays. &amp;#x200B; Example: */\*\** ***@return*** *Award\[\] \*/* **public function** getAwards(): **array** { **return** $this-&gt;awards-&gt;toArray(); } Check the screenshot for 3 params: [https://imgur.com/a/cIt8Apu](https://imgur.com/a/cIt8Apu) &amp;#x200B; Btw, in your example, @ParamConvertor line is not required at all.
I am. Not particularly often but sometimes I want to see how something is working under the hood.
Thanks, that helped. &gt; Btw, in your example, @ParamConvertor line is not required at all. I'm not sure I understand what do you mean by this?
If you're using Symfony full stack and \`Post\` is a Doctrine entity, it will be recognized without adding that annotation.
It will be replaced soon guys
That's not correct, the controller's responsability is to dispatch the request to the proper component and return the response. It does not have to know how the request got there because that's the router's responsability. If you add routing annotations they will know more than they should/need, it's like putting a map in a place of how to get to that same place.
Laravel is the new WordPress.
I've been developing with Phalcon for almost a year (6 months for my personal projects and 6 months in my company projects) and, even thought it has its flaws, I really like it. Phalcon is flexible as you can use your own folder/file structure for your application. They give you a basic skeleton but it is not mandatory to use it. This can be a problem, as you have to get a clear idea of what are you developing for make a structure that is robust, so you don't have to change it every new development phase. Also, some of its libraries (Volt, for example) are a similar copy of Symfony (Twig) so many of the tricks that you use in one framework you can use it the other one. One of the bad things about Phalcon is that you have to install it in your environment, it isn't a composer library, so it is hard to use wherever you want. IDE stubs and everything make your life easier, but there are times that documentation/tutorials/stackoverflow are short about your questions (Phalcon is not broadly used, so there are less resources available than from Symfony/Laravel) and you have to check the source code to fully understand its flow. Good thing it is not directly written in C but in Zephir (pseudo-PHP). And the golden question: is Phalcon faster than Symfony? I don't really know. We haven't done real benchmarks yet using Symfony or Laravel, but I can assure you that, with the newest versions of PHP, it really doesn't matter. The work on OPCache has gotten to a point that on production environments I haven't seen real differences on performance (using two different and applications). TL;DR: Phalcon is good, but has its flaws, as every framework. Maybe you like it, maybe you don't. Try it and learn it, you won't lose anything on the road. :)
&gt; I've been hearing a lot of:"it's almost impossible to enforce mvc in php" That's correct; this is why: &lt;https://github.com/pmjones/adr/blob/master/MVC-MODEL-2.md&gt; One alternative you should look into instead is Action-Domain-Responder: &lt;https://github.com/pmjones/adr/blob/master/ADR.md&gt;
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [pmjones/adr/.../**MVC-MODEL-2.md** (master → e40b030)](https://github.com/pmjones/adr/blob/e40b03076175fd8d217d518a1a845515aab6b014/MVC-MODEL-2.md) * [pmjones/adr/.../**ADR.md** (master → e40b030)](https://github.com/pmjones/adr/blob/e40b03076175fd8d217d518a1a845515aab6b014/ADR.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e8hexa0.)
Is Facebook using PHP over HHVM again?
No, the OP has literally no idea what they're talking about.
This is complete nonsense that the author made up out of thin air while misunderstanding that HHVM is not "ending support" -[ it's ending support for running PHP code](https://hhvm.com/blog/2018/09/12/end-of-php-support-future-of-hack.html) because Facebook is entirely using Hacklang now and does not need PHP at all.
Annotations for routing are recommended on [Symfony best practices](https://symfony.com/doc/current/best_practices/controllers.html).
[removed]
Which product do you want to use? Google Maps Distances API, Matrix API, Autocomplete API, ...?
Anyone else find this course worrying? An apparent Laravel course that doesn't cover big tech that integrates with it such as Doctrine or Vue.JS, two things that I would say are highly more worthwhile teaching than just the laravel framework. The course material looks like the usual Laravel Getting started guide....
Something else to consider is the param description you are no longer providing if you skip docblock params.
I dont trust that thumbnail.
I'm still curious if the independent contributor changes to PHP are going to be enough, or that PHP is going to die slowly. Let's hope for the first!
Looks like we're getting a fork, boys.
Symfony best practices are good if you are making a small project or you are just learning to code in php/symfony, not for mid or large projects.
Like you for all the points instead Dropbox. I have an FTP and I do it old school with Filezilla. Currently asking myself if there is some drawbacks on using a distant database for local development (asuming the distant db has a very high availability).
Use a lint job in your pipeline. Pre-commit hooks can be disabled/change by the users.
I'm not. I could but then I would waste valueable time not spending on programming. So I choose to trust people and software and believe if a lot of users use it, it will come out if the trust was misplaced.
I'm sometimes do, but not that much. I could but then I would waste valueable time not spending on programming. So I choose to trust people and software and believe if a lot of users use it, it will come out if the trust was misplaced.
https://www.youtube.com/watch?v=QPZ0pIK_wsc
dev - everythings local testing - AWS Cloudformation using EC2, RDS, EBS, EIP, and git prod - Same resources above but except no Cloudformation and using FTP
IMO it's very useful to understand how tools that we're using work, whether that includes frameworks, libraries or languages themselves. It's not always necessary to spend extra time reading the code - sometimes even a regular debugging session using Xdebug can provide a ton of insight into the underlying code.
Yep, I use pipelines for linting and unit testing, but if you (as a user) use a pre-commit hook, you can catch these errors before they're actually sent to the server. The CI server should check your work, but you'd rather have that catch other edge cases and not one that's easy to solve and should never've been published to begin with.
I pity your industry, whatever it is. 
I would have thought it's obvious, it's IT, specifically for me software development. Care to elaborate on the pity? It's not so much restricted to us, I simply focused on it as it's what I know.
PHP's primary contributions are independent contributors. The fact that Dmitry and Zeev are leaving Zend (the company) has no major bearing on the PHP project itself. The only major thing I can think of that will have to change is if RogueWave pulls the trademark hammer out and PHP is forced to rename the engine from Zend Engine to something else. They can't coerce the project to really do anything more than that. 
I wouldn't want to work with anyone who thinks Zend Framework is a good piece of software.
I've been in IT for decades, and watched so many colleagues struggle with addictions, mental health, suicides ... I think the more we can talk about issues like this, the better it is for all of us.
Hmm, what's with the downvote for my comment? Legitimately curious
Did you launched your EC2 instance using a pre-installed pre-configured Ubuntu + EBS integrated, or did you picked up an instance in the Amazon market? And do you use a CI to push your code from a branch to your EBS or no CI at all?
Now that we're able to be more explicit about what a function expects and returns, I've shifted from always having doc blocks to only having them if they contribute information not already present in the function signature, either through PHP's type system not being able to fully describe the range of possible values, through the need to add additional information in a parameter or return description, or for some other reason. Otherwise, they're redundant.
So PHP hinges on the work of two individuals (one of which isn't affected by RogueWave)? I don't think so. While they have helped push forward some major advances in the engine, PHP isn't a two person project. Open source software in general has a general flux of people that have time, contribute, and then don't have time and can't contribute. There's a vast body of internals developers that still contribute, and have contributed for a long time. The language will be fine whether or not Dmitry or Nikic have time to work on the engine.
&gt; one thing I've always noticed is how obsessed our industry is with alcohol, we have after work drinks, we have Christmas parties, where the main theme is to drink, and pretty much everything that is social in the work place usually revolves around the consumption of alcohol This probably describes most workplaces. I don't think this is in any way particular to our industry, this is a pretty widespread thing that happens everywhere. 
I wonder what the going rate annual rate is for a top-tier PHP internals developer nowadays. 
Yeah I get that, as I mention in the article, this happens across the board, just focused on our industry as it's what I know. In terms of drugs, not that they are a problem per say, but there is definitely a big prevalence of consumption, primarily Cannabis
hmmm I would really like to know the rationale of the person who downvoted this comment, just to understand what part of it merits the D-vote
Really? I know a fair few that have smoked it but back in their teen years. Can't imagine a senior type that grumbles smoking weed, might make things more interesting at talks if everyone was smashed to be honest.
[https://stackoverflow.com/questions/13108157/php-array-to-csv](https://stackoverflow.com/questions/13108157/php-array-to-csv)
Yeah man, I know loads of guys earning over 100k very senior, very good at what they do, but their drug of choice just happens to be weed. Albeit, I might have a bit of a bias view as a consumer of the herb myself, but I know a fair few. One of my mates is a high level engineer at Cisco, but works remotely from the UK, but he mentions that a lot of the guys he works with from the US are regularly partaking, and that's just Cannabis, let a lone the ones I know who take psychedelics every now and then. The thing is, just like most people don't show up to work drunk, those of us who consume other substances don't come to work tripping balls or high, it's about moderation. And yes, it would be epic to see a talk where everyone was smashed, would be absolutely hilarious. 
Basically because it upsets you, your autism is leaking.
There is something oddly suspect about it.
In my IT industry I don't see such problems. So I pity yours. 
Ok, personally I think it will exist in your industry if you look, it's not like people advertise depression, addiction or consumption...
&gt; Lots of the major contributors may be leaving/having other things in life and not have time for PHP. Except they've said otherwise.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
[http://i64.tinypic.com/6r128g.png](http://i64.tinypic.com/6r128g.png) my code.
Can you point me in the direction of the php work for junior developers &amp;#x200B;
When I've mentioned my drinking experiences about living in the UK I've got pretty heavily downvoted: [https://www.reddit.com/r/IWantOut/comments/8veu8h/my\_opinion\_about\_living\_in\_the\_uk\_for\_the\_past\_3/e1nc0hl](https://www.reddit.com/r/IWantOut/comments/8veu8h/my_opinion_about_living_in_the_uk_for_the_past_3/e1nc0hl) Perhaps it's just the PHP culture drinks :)
Does any of you use git manually to pull from a branch? If yes, did you searched to automatize this task or is it satisfying as it is? (for example, pulling branch test in your test server storage)
I was focusing more on the regular drinking rather than heavy drinkers really, it was more about how it's so prevalent, but it's still a mind altering substance. I have no colleagues which show up drunk either, but when it's time to drink some go hard others not so much, but the fact is in a company of over 100, at nearly every event there is booze, and there are regular social gathering where people get drunk. It happens everywhere, and there is nothing wrong with it per say, I just highlighting that it's exceedingly common, and usage of other drugs is also common, but their usage, even though it may be medicinal, or whatever is usually ostracised. Sorry feel like I rambled a bit there, hope that makes sense
Could very well be, I think the issue is bias that people have they consume and think we're attacking the consumption when we say we prefer to abstain, and in my case, I simply prefer smoking. It's a controversial subject... 
Drinking was in the culture for thousands years. So I don't think it's something specific to it industry in the 21 century. And I think that booze-centered parties are, again, more the corporate culture than industry's trademark feature. There are corporations that organize parties where alcohol is not the center but just a spice.
Yeah but so was Cannabis and Psychedelics they’ve been used for just as long. In terms of the parties the fact is they are still around, I’m not saying it’s a central feature but it most certainly is quite common. I’ve worked for companies of all sizes and this is always the theme. From small startups to footsie 100s
the solution was I had to place "\\r\\n" at the end of the line. I was using ' \\n '
So... break my fonts and install a JDK that’s not patched specifically to run my IDE but is otherwise the exact same JDK? That’s a pass for me, bro.
You could say it's... Z-end of Zend?
nikic has? I've seen him talk about wanting to work on/with rust.