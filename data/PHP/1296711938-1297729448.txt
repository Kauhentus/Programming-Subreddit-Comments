`?:` is shorthand that was introduced in PHP 5.3. Chances are your laptop has 5.3.x installed where as your virtual machine has 5.2.x. Can I hazard a guess and say maybe you have a MacBook and you're using the system default install of PHP (which is 5.3)? But yeah when you're checking `defined()`, use mnjmn's techinque. It's more ... 'standard'.
I get what you're trying to do and I like the general idea behind it (it's not a new one). Setting up DB tables is simple, but typing out all the SQL is a bit tedious when you have a lot of large tables, so a shorthand method isn't a bad idea. That said, I find your syntax too short (totally personal preference here) and would find myself looking back at the file in 3mo and going "huh?" I really like Rails DB migrations. I find them to be a good balance between the two. http://api.rubyonrails.org/classes/ActiveRecord/Migration.html create_table :users do |t| t.integer :id t.string :username t.string :password t.string :email t.datetime :created_at t.integer :status end I believe Doctrine has migrations, though I'm not sure of the syntax.
It's already instantiated when your script starts up. It does not add or remove any overhead, regardless of if you use it or not.
Wait, is that double-quotes or two single-quotes there?
`defined('constant') ?: exit();` alone is a perfectly valid command, and testing a current version of Netbeans shows that it works just fine. So you should likely upgrade or make sure you manually set Netbeans to recognize code as PHP5.3, not PHP5.1,2 (set in project properties). The fact that it crashes in virtual is likely due to that PHP version not yet supporting this operator.
How do you get this csv? Can you instead connect directly to the mail server using [imap](http://php.net/manual/en/book.imap.php)? There is the PECL extension [Mailparse](http://www.php.net/manual/en/mailparse.installation.php), but I haven't personally tested it to recommend it. And, there's the [`filter_var()`](http://us.php.net/manual/en/function.filter-var.php) function to validate email addresses... `($email === filter_var($email, FILTER_VALIDATE_EMAIL))`
FYI, you should be doing `define('INC', TRUE);` instead of `define(INC, TRUE);` Also, I prefer using `true` and `false` instead.
Two single quotes.
A ternary operator doesn't make sense here. You do not wish to assign the return value of exit() (there is none, btw) to $control. Use something more logical such as: if(!defined('INC')) { exit(); } The following will also work, but I personally don't like it as it's not a standard coding style (sort of abuses the short-circuit nature of the OR operator): defined('INC') or die(); 
It's half a quadruple-quote.
Is anything more painful than creating tables in phpmyadmin? It's enough to give you a sore mouse finger for days.
Presumably because it's also used by the application for other thins. Perhaps it's part of an extended definition used for building forms, or at the very least used by the application to validate that the database schema has been correctly established.
How do you test memcache if you don't put it on your dev site? It seems pretty useless to only place it on your production side.
Why would you do this? MAMP doesn't serve a purpose now that php ships with OSX. Then you just need to "sudo pecl install memcache" and you're good.
Please don't use inline conditional statements like this. They make the code ten times more difficult to maintain for anyone trying to understand your code.
Agreed, but you can tuck all the creation code away inside a class that extends Zend_Form
People downvote if they don't use that particular method. Not if the reply was correct/incorrect. So there is always a swing between popularity of method and correctness of method. So you need to read all the answers and make up your own mind. Stackoverflow is better for getting the one true answer, Reddit is more about people shooting the breeze.
1. Those numbers aren't necessarily accurate. (or did you see it at -1?) 2. Form frameworks are a blessing and a curse. E.g. It's great that it handles file uploads automatically, but now I have to learn a bunch of crap just to set the file name and make sure it doesn't turn .ods into .bin files. @OP Active Record is the simplest way to alleviate some of the pain, just throw the POST at the model and let it do the validation, I mean, you have to do that somewhere. You can use db introspection or similar to auto generate errors to display. Other than that, do as suggested and learn a framework.
I saw it at no upvotes, one downvote. Even if you don't want to use a framework, you can download a couple and see how they handle forms.
Apparently it is. That's a pointless extension.
&gt; I'd avoid it due to backwards compatibility. I'd avoid it due to that it's agonizingly stupid. There's "if" for single conditionals. There's no reason to use select-between when there's only one option. Whoever added that to the language is retarded.
This is pretty much why, when I'm feeling particularly lazy, I'll use Django to create the database tables for PHP projects.
You can get the parameters by setting PDO::ATTR_STATEMENT_CLASS to a subclass of PDOStatement you've created to do data logging. Then in you PDOStatement subclass, override execute, bindParam, and bindValue methods to log the parameters being passed.
...I think I'll stick to [filter_var](http://php.net/filter_var)`($email, FILTER_VALIDATE_EMAIL)`.
I believe the main reason it why it was added was for cases like this: &lt;?php echo "Hello there " . ($username ? $username : "guest") . "!"; echo "Hello there " . ($username ?: "guest") . "!"; The shortened Ternary statement will return the value of `$username` or the string `guest` in this case.
Can we see the code (both html and PHP files, or relative parts)?
sample code?
You should just be outputting the link code directly as HTML. There's no special code. &lt;html&gt;&lt;head&gt;&lt;link xxx /&gt;&lt;/head&gt;&lt;body&gt;&lt;? php ... etc I'd have to see some source code to know where your problem might be.
Sorry guys. Here is the code: &lt;html&gt; &lt;head&gt; &lt;title&gt;PHP Test&lt;/title&gt; &lt;link rel="stylesheet" href="style.css" type="text/css" media="screen, projection"&gt;&lt;/link&gt; &lt;/head&gt; &lt;body&gt; &lt;?php echo '&lt;h3&gt;Hello World&lt;/h3&gt;'; ?&gt; &lt;p&gt;Hello World&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;
Sounds like you have a syntax error. Make sure the code is not within &lt;?PHP ?&gt; tags unless you're echo'ing the code as a string &amp; escaping characters.
&lt;link rel="stylesheet" type="text/css" href="/your/stylesheet/here.css" /&gt; NOT &lt;link rel="stylesheet" type="text/css" href="/your/stylesheet/here.css"&gt;&lt;/link&gt; Same reason you don't go &lt;br&gt;&lt;/br&gt;
require_once is exactly what's needed
It works for me. Is style.css in the same directory as the php file? Link to folder/code that works: http://db.tt/oC5wru1
Removed the &lt;/link&gt;. Shift-reloaded the page. No change. Sorry.
WORKS! I replaced my files with yours and your code does work. Now I have to investigate and find whet is the difference.
I didn't change anything... :( Hopefully you spot something though. Good luck.
Are you sure you're not missing something? postBody: id='+ $F('id'), should be postBody: 'id='+ $F('id'),
Remember that PHP in this case is parsed server side as the page is generated; the value in your javascript is simply set to the value of _SESSION['id'] when the page is first generated. Later calls to math.php will update the session value stored at the server, but this will not magically change the already generated and delivered page in your browser. How you should solve this depends on what you're actually trying to do - if you want to communicate more structured data back to the caller through the ajax request, you might have a look at using JSON to encode the response (json_encode in PHP).
That's pretty ugly, IMO.
Have you checked the permissions on the CSS file are correct?
SOLVED! Thank you Danltn, that was the problem.
Look in Firebug at the network tab and see what is happening when your browser requests 'style.css'. I'd imagine it's either a permissions issue, or you're requesting the wrong path to the file.
A permission issue it was. Thank you for your time.
Firebug is your friend. Easy to spot this way. You would have seen the line for the CSS file in red.
Your question is a little murky, but I'll throw a couple things out there. You can try to use session_commit(), which forces an internal update of the session values. Though, this is more commonly used before doing a redirect and I'm not sure it will help you in the situation you are in. Or, just use the ajax to update wherever you want it to update at. That's probably the easiest way. Session variables don't fully take hold until script completion is finished. So when you are using redirects or pulling different scripts into the current one, the values may not update as you expect.
Yeah, fail copy paste. It's like you said in the original code :) Tks anyways!
The last couple reading I did was around that issue (server-side vs client-side), I think I got why it doesn't work. The server just parses the first time, its not 'dynamic' so it just acquires the first value that is stored server side. But one question, the SESSION variables are server side, but are based on session_id right? All the users will access a 'diferent' variable right? My goal is just a simple exchange of a variable/value. index.php request math.php to do some math; math.php changes the value of a variable and returns it to index.php; index.php proceeds to use that value in parts of it HTML. I'll take a look at JSON (with all my noobish included, see if uncle Google helps me again on that).
I'm going to search for Ajax and Session variable update, see if I get something good! Also I'm gonna try the commit see what I get! I wanna get home now to test :D Thanks for the tips! PS: For the downvote on the post, I know r/PHPhelp would be the best place to ask, but I did a couple days ago and no answer untill now, and now I atleast have some tips to work on. Sorry about it. 
Agreed on ugly but it can be convenient, especially if instead of $username you have a function call or some computation; that way you shouldn't need to save the result in a variable so that it isn't executed twice. (I'm assuming here; only found out about this right now, and don't plan on using it for a while, as I'm not in a hurry to adopt a new PHP version's syntax changes.)
One other thing that you might run across, is `text/plain != text/css`. And browser will ignore "CSS" that has a header of `text/plain`.
There is no one on phphelp, so I wouldn't worry about it. A lot of posts get quick downvotes from New Queue Nazis or bots. Also, reddit fudges the totals a bit so that spammers have a harder time seeing the effects of their efforts.
Although this is [not a new idea](http://code.google.com/p/memcached/wiki/FAQ#Namespaces), I still felt it was worth sharing with you guys.
doesn't matter if it doesnt get included, just making sure that it's not accessed directly
regarding: $v-&gt;rules = array( 'name' =&gt; 'required|min_length(4)|max_length(32)', 'email =&gt; 'required|valid_email' ); i think you might see some speed improvements if you dont have to manipulate the strings that contain your rules. i did things in a similar manner a while back, and now i use this format: array( 'required' =&gt; array( 1, 'this is a required field' ), 'max_length' =&gt; array( 32, 'enter 32 or fewer characters' ), # example rule_key =&gt; array( rule_value, error_message ) )
Have you ever thought of useing Zend_Db It has many wrappers (including PDO) and has a nifty __toString() method that spits out the entire query. 
If you're using 5.3 and MySQL, and are using the mysqlnd driver instead of the system-provided one, and can install PECL extensions, [there's a query logging plugin](http://blog.ulf-wendel.de/?p=293) available that should do the trick for you. I just was reminded of this moments ago, I wish I'd remembered about it earlier.
 var id = '&lt;?php echo $_SESSION['id']; ?&gt;'; alert (id); } This is ALWAYS going to be the same value if you haven't refreshed the page. Your JS should get the new value from from the AJAX request..
Thanks!
I guess you and tjdick are point me in the same direction, some sort of Ajax way to handle the session variables? Updating them? Or does the Ajax.Request have some field to return a value? Or maybe change the innerHTML to something that keeps a value returned from the math.php?
You could make a php file specifically to return the current session variables, the AJAX request would just pull data from that, wouldn't be too bad at all. Yeah, you could also keep it on the page somewhere and update it with innerHTML whenever you wanted, problem is, who's to say it hasn't been updated since the HTML was set? May as well get access the PHP file whenever you want the current data.
 $item[20] = 'Use a Model-View-Controller environment';
Storing things in variables doesn't "execute them twice." Good lord.
Pretty sure garoorag means that by using the ternary shortcut, you don't need to save the return value of a function call *in order to* prevent executing a particular function or method twice. It's written a bit ambiguously. In other words, if you don't 'save the result in a variable': echo "Hello there " . ($this-&gt;get_username() ? $this-&gt;get_username() : "guest") . "!"; And if you do: echo "Hello there " . ($username = $this-&gt;get_username()) ? $username : "guest") . "!"; And if you use the ternary shortcut: echo "Hello there " . ($this-&gt;get_username() ?: "guest") . "!"; Though to be honest, unless `get_username()` executes a database query call or something, it's a silly optimization. It's like changing double quotes to single quotes or echo() vs print() "because it's faster". I don't really dislike this feature, nor do I think that it's ugly, but I don't see myself using it all that much. PHP really needs a proper coalesce function or language construct. 
Before you decide that the people talking to you are morons, how about trying to re-read what they wrote so that you're not the one looking stupid *and* rude? My point was that, without ?:, you have to store the result in a variable; with ?:, you don't. (Or so I assume, unless it expands in memory like a #define in C, but I didn't see any reason to think so when I read the docs.)
Wow. This reply really didn't need to be in the PHP subreddit. Perhaps you could employ a little bit of tact and delete the comment.
&gt; My point was that, without ?:, you have to store the result in a variable; with ?:, you don't. Oh. Excuse me for not considering that as a possibility given that it's absolutely incorrect, and that the 6th and 8th grandparent of this posting give examples of why it's incorrect. &gt; Or so I assume, unless it expands in memory like a #define in C Right, becuase you should be talking about looking like a moron in public, with your stream of incorrect, guesswork driven opinions. &gt; but I didn't see any reason to think Indeed.
&gt; Pretty sure garoorag means that by using the ternary shortcut, you don't need to save the return value of a function call in order to prevent executing a particular function or method twice. Kay. He's wrong on that count too, for what it's worth; check six and eight parents up, respectively. &gt; Though to be honest, unless get_username() executes a database query call or something, it's a silly optimization. Yes, that's what I said, which got him to start arguing and being wrong in the first place. &gt; It's like changing double quotes to single quotes or echo() vs print() "because it's faster". Especially because those are both incorrect. &gt; PHP really needs a proper coalesce function function coalesce($Terms, $lastIsDefault=true) { for ($Terms as $t) { if ($t) { $t(); return; } } if ($lastIsDefault) { $Terms[length($Terms)-1](); } }
You won't be able to mix PHP and Javascript in such a way, so in that case you'd probably be better off making the request from the PHP side of things. The PHP is parsed and output from the server - reading the state of the variable in the session at that exact moment. If another page changes it, the first page will still be done and delivered to the browser. This usually indicates a problem with how you're thinking about the task, and I'm guessing you're confusing the parts that each of the different technologies play in the setup. You can do a few tricks with closing and reopening sessions together with sleep() and quite a few hacks, but you do NOT want to go there. It would be a story for late night story telling. :-) 
Just putting a "if (isValid())" check in the code is useless - it's too easily bypassed. A check combined with encoding/compiling is at best a stall if anyone really wants it, and once it's broken, it's broken. You're done. Your only real option is basically to centralize the logic. Have all the interesting/useful code that updates stats and stuff on your central server. From there, you can either: 1. Have the data available through an API, and give the end-users code that just requests (and hopefully caches!) the data from your central server and displays it. 2. Just host the backend and frontend all on your server. Charge hosting / support it with ads if it gets too expensive. The nice thing about either of these options is, as people use it, you build up a HUGE database of information that you can data mine for some purpose, or just because it would be incredibly interesting. The app we're working on at work right now goes the #2 route. The entire app is just housed on our server. This is actually amazing, as we can make a TON of money data-mining the kind of stuff we're collecting (nothing illegal/immoral/irresponsible, don't worry). We provide a central login page, and, if they opt to, they can just point a domain at our server and set the hostname in the app - after that it prefills part of the login and themes the login page for them when accessed through that URL.
I think something similar can be achieve using Memcached::OPT_PREFIX_KEY This can be used to create a "domain" for your item keys. The value specified here will be prefixed to each of the keys. It cannot be longer than 128 characters and will reduce the maximum available key size. The prefix is applied only to the item keys, not to the server keys. http://www.php.net/manual/en/memcached.constants.php
Nice find, I didn't know about `Memcached::OPT_PREFIX_KEY`. However, it seems to me like this would still require a mechanism to generate the prefix and a mechanism to invalidate a prefix. Instead of doing `Memcache-&gt;set('namespace_key', 'value')` you would end up doing: Memcache-&gt;setOption('opt_prefix_key', 'namespace_') Memcache-&gt;set('key', 'value') Memcache-&gt;setOption('opt_prefix_key', '')
You forgot to post a link. ;)
&gt; Updating a language means waiting for the keys to expire or deleting them. No, you just update the keys with new values. If you're writing some script to flush a set of keys every time you change something, you might as well write some script to update them all with new values every time you change something. There's no reason to delete the whole thing and risk a cache-miss stampede there. Namespacing may have other uses, but this particular case doesn't require wildcard deletion. 
Found it: http://kib2.free.fr/pastebin/index.php Having a look over the sources now. I'm not a big fan of the PHP4 style, but it seems to work well - which is always the most important thing :-) After a very brief look: Is it really "new"? The copyright says 2009 Personally I would remove the reliance on the includes being in the include_path, like in HL::HL() 
Thanks for pointing that out. I actually should have given a more complex example. I was trying to stay simple. We often use namespacing when we have aggregates on a given data set that are unique per user (1 key per user), but that become invalid when the data set is modified. In that case invalidating all the users is much easier by incrementing the namespace than by going through every key.
Thanks footle, I forgot the link and for the copyright: I just pasted from an old project. As for the PHP 4 style, I must read some articles about PHP 5 writting style. Have you got any reference ? 
Yeah why anyone would try to do web dev without firebug (or a similar inspector none of which are as good as firebug) is beyond me. Another method would be to type in the full url of the css file in the browser and see if it loads.
That sounds like a better use case. I wonder how much difference it would make if you added some [Redis](http://redis.io/) instances to your cluster and took advantage of Redis native data structures instead of manually managing Memcached namespaces. All those namespace lookups ain't cheap, you know. Redis is wicked fast if used as an in-memory cache, and it has hashes (perfect for language strings, etc.) and sets (useful for keeping track of your keys). You could also put all of your per-user keys in its own "database" and call `FLUSHDB` to delete them all when needed. 
Nothing springs to mind, but I would say: start with thinking about member visibility. When you use "var", all of your members are public, so you have no control over what happens to them; you can't do validation on any possible values etc. IMO, your default member visibility should be "protected". It allows for flexible extension, but keeps the "nasties" out. Think long and hard about what you're trying to achieve before making something public (explicitly or otherwise) or private. The same goes for methods. Think "does this method need to be called from outside the object?". If the answer is no: it should probably be a protected method. As well as stopping people from accidentally misusing your code, it helps someone reading your code to see which methods they might use. It also comes in handy when re-factoring: you can change the signature of a protected method, safe in the knowledge that you only have to look for calls to it in that class and any sub-classes. I'll have a look around for a general style guide and post back here if I find anything decent... I've been meaning to write something, but I don't often have the motivation to take on such a project. 
I will def. look into it. Thanks for your feedback. :)
Ok footle, thanks for all those hints, i was aware of "public", "protected", etc methods, but as it started as a personal project, I just left them as they are. I'll try my best to follow them next time I update the sources. Also, the link you gave is just a pastebin, not the index page. 
Helpful note. "minify" your HTML output. That is, when you have multiple tokens of the same class just make all of the blocks part of the same span with that class Example: &lt;span class="DoubleString"&gt;class foo { &lt;/span&gt;&lt;span class="DoubleString"&gt; var $foo; &lt;/span&gt;&lt;span class="DoubleString"&gt; var $bar; &lt;/span&gt;&lt;span class="DoubleString"&gt; function foo() { Could just be &lt;span class="DoubleString"&gt;class foo { var $foo; var $bar; function foo() { &lt;/span&gt;
Soo, I got it to work *yay* :) In the end I went a bit in the way kousi pointed me to. I used math.php to print the values I got in that file and then in index I parsed the return value from math and used those values as global variables in Javascript so I could use whenever I want to :) A little turn around but it works :) Huge thanks to all! Helped me in one more step into better PHP knowledge :) On to the next challenge, and may uncle Google be nicer to me ;) Free Karma!!1 :)
Good idea shawncplus, I need to time to figure out how exactly, but it should be rather easy to do so (I just need not close the last style, and next time the inline routine is called, compare the old-style argument with the new one).
http://php.net/manual/language.oop5.php And [this](http://php.net/manual/en/migration53.php) for all the things added to 5.3 specifically (there is a lot).
Are you sure it's actually SOAP? [Here's an example SOAP Request](http://en.wikipedia.org/wiki/SOAP#Sample_SOAP_message). I've never seen a SOAP request that uses attributes for passing actual data. It looks like it's just XML. The easiest way to parse and format XML is using [SimpleXML](http://www.php.net/manual/en/simplexml.examples-basic.php) An example using SimpleXML: $xmlstr='&lt;Pos&gt;&lt;/Pos&gt;'; $xml = new SimpleXMLElement($xmlstr); $source = $xml-&gt;addChild('Source'); $source-&gt;addAttribute('AgentDutyCode', "username@mydomain.com"); $requestor = $source-&gt;addChild('RequestorID'); $requestor-&gt;addAttribute('Type', 1); $requestor-&gt;addAttribute('MessagePassword', 'pass'); echo $xml-&gt;asXML()."\n"; 
I _always_ do getFunctions() before I start coding. It will show you how the methods should be called, and with what kind of variables. ` $wsdl = 'http://mysite.com/service.wsdl'; $options = array('trace' =&gt; 1); $client = new SoapClient($wsdl, $options); var_dump($client-&gt;__getFunctions()); ` If the methods take simple parameters like strings and numbers, then it should be pretty easy to work with. Otherwise, I recommend building the expected objects with associative arrays eg ` $simpleObject = array( 'person' =&gt; array( 'name' =&gt; 'John', 'age' =&gt; 23 ) ); ` The php soap api does its thing to map your structure to the service. It takes experience to get used to it. If you're just starting out with soap, an easy way to think about it is request and response are input and output.
More than half of the size of the download (over 300kb) is in the font files. Remove them, they don't belong in there.
Beware, ~~[SOAP is an interoperability nightmare](http://harmful.cat-v.org/software/xml/soap/simple)~~ [better link](http://wanderingbarque.com/nonintersecting/2006/11/15/the-s-stands-for-simple/). If you have *any* other API options available to you, you may be better off using them instead.
It depends on the encoding. I think I've seen rpc-encoded use attributes like that, but I could be imagining things.
Second time I've seen this article not linked to the actual source. [Here it is](http://wanderingbarque.com/nonintersecting/2006/11/15/the-s-stands-for-simple/).
Ah, thank you. The one I linked is near the top of a Google search.
No worries, it happens.
I think there's a fundamental difference between namespacing and "group expiration". OPT_PREFIX_KEY is useful for namespacing, but I'd say that the technique that you outline in your blog post is more akin to "group expiration", i.e. expiring many cache records at once when something changes everything inside of them. I've worked really extensively with ideas surrounding memcached namespacing (or "grouping"), clustered grouping, semaphores, delayed expiration, multi-dimensional grouping, and dynamic group expiration. This sounds like an awesome opportunity to share some ideas with everyone here. (In case you're interested, I've open-sourced a memcached wrapper which includes all of these features [here](http://pastie.org/private/imcvyq5iizf883tskntg).) **Delayed Expiration** Delayed expiration involves wrapping all stored cache entries with an array (or an object of some kind) that describes the expiration time of the object. In production usage, I find it *much* more beneficial to do this than use memcached's hard-expiration, which removes a cache if it expires. If something does not change, never expire it. It will not be freed immediately anyway, it will only be removed or cleared when convenient for storage of another cache entry. Dynamic expiration allows for a "buffer" during expiration. When a cache entry has "soft expired", application logic can determine whether it is appropriate to update the cache (requiring a database call or some other form of expensive processing). During this buffer, a semaphore can be constructed to prevent multiple expensive database calls for the same information. Because data is not actually purged from the cache, you can still give your user the old cache for performance reasons (if it is appropriate; remember this is all up to application logic to implement, and is very useful in some cases but not a good idea in others). **Semaphores** Memcached is useful for semaphore construction -- preventing multiple requests to populate the same cache entry or entries. Simply add a key, if the add request is successful make the database call. This is useful if you're updating many records at once typically, and if old data is not extremely critical. Other add requests will fail and fall back on the old data, if application logic determines if this is appropriate. **Multi-dimensional Grouping** Groups are simply cache records which store an identifier of their parent and of themselves. You can have as many group records attached to a particular cache entry as you would like. When retrieving the cache record, it looks down the group chain to make sure that no group has expired. To flush a group, change on of these identifiers. Every group underneath this will be expired, and every cache entry underneath it will be expired as well. Although very rarely is *multi*-dimensional grouping useful, it is practical in some circumstances. In essence, this idea can be used to construct a hierarchy of cached information, much like a filesystem. :P **Clustered Grouping** Group records are independent (as you know) from the actual cache records. Many times, it is much more optimal to store several cache groups (clusters of groups) in the same cache record. This minimizes the threat of random expiration and increases performance. **Dynamic Expiration** If you need to cache a ton of entries based on an identifier, but expire based on a different identifier, it may be useful to allow for dynamic injection of information from within the cache to identify the groups above. This is an interesting technique that I use to efficiently allow me to ban users from my website. I can remove all of their submissions and expire the group for their user, while the frontend only requires knowledge of the submissions themselves -- not the user. This is populated after. (This is a difficult one to explain which I've done better here.) **There's more!** Lots of very interesting and useful techniques exist to optimize cache lookups and backend interaction/performance. If you have any other ideas I'd love to hear them. All of the ideas I posted about today I use heavily in production; my servers would topple under the load without it, I'm certain. :P
I believe PHP5.3+ allows you to extend the soap class, but previous versions would crash. So in newer PHP versions, you might be able to extend from it and define methods using the same function/method signatures as the soap connection requires as showing in the server's wsdl file. This would make plugging directly into the server much easier.
Feel free to actually link to the comments you're referring to, instead of giving a treasure map of footstep counts, so that we can have an idea of what the hell you're misunderstanding.
Congratulations! Hope everything works out well for you.
The real solution is to write a bash script that will punch the people that use spaces.
Congrats! Hope to be there soon myself. Build cool shit. 
 echo preg_replace('/ /','\t',$subject); lolololol
I know: it is because of the HTML documentation inside, but I don't think 300kb is a problem.
All the best, I remember my first PHP dev job, man that was a while ago... Don't be afraid to ask questions. :)
does the user/pwd stuff go in the soap header or the body? if header, see the __setHeader() function if body, you can extend the soapclient and override __doRequest() which lets you manipulate the xml if need be. off top me head: class gmansillaSoap extends soapClient { public function __doRequest(some args here) { use the xml dom class to manipulate the xml call the parent::__doRequest } }
&gt;The real solution is to write a bash script that will punch the people that *don't* use spaces. FTFY
Congrats! I started working for TwitPic 9 months ago while still finishing up college and I haven't looked back since. I'm sure you're going to love the job, enjoy!
Congrats, you're taking your first steps into the eternal hell that is web development work! (I kid, I love my career) Don't be afraid to ask questions, seriously no one expects you to walk in knowing everything so don't play pretend. Become active with your local PHP users group if there is one, if not any technology users group (particularly an Agile group if there's one) will do. Expand your networking, find people smarter than you then learn from them. Head on over to `##phpc` on freenode for some socializing (do *not* come in asking for technical help, it's a social channel only). Beware of technical debt ("Oh I'll just cut a corner here, I'm out of time and I'll come back and fix it later" -- you won't, it'll sit there and rot). Beware of arrogance. **BEWARE OF NOT-INVENTED-HERE SYNDROME!** Your boss may or may not enforce it, that's a sad reality, but don't ever fall into the "I didn't write it so I can't trust it" trap. Open source software is there to help you if you let it. If you aren't already using a large OSS framework on internal projects, use one in your spare time then insist on a new project using it. I personally like Zend Framework, others do not (bare minimum, browse the source and pickup ideas). This won't be your last PHP job, you aren't being a dick by leaving this position in a year or 3 so keep networking and keep your options open. Remember, at a certain level of expertise jobs are almost only found through networking (most senior level positions are posted because HR requires them to, they're all but filled by the time you read it). And networking is just a hip way of saying knowing a bunch of people in the industry you want.
Congrats! Welcome to hell.
http://mybb.com is open source and just absolutely wonderful in its entirety, but you can also do what you want to do. I've seem it done but have not done it personally, if you go to freenode on irc and go to channel #mybb they can help you. At least 4 or 5 them integrate the login. Hope this helps, and I highly recommend mybb.
Excellent advice. Listen to what this man (because all php devs are men of course) says.
Congratulations! When they make you do money things, [DO NOT USE FLOATS.](http://php.net/manual/en/function.bcadd.php)
It's funny, I've gotten all but 1 job from recruiters. Usually the senior-level positions I've filled have been open for months and months and i'm the first highly-qualified PHP engineer they come across.
man 1 tr
It was in Canada until a few days ago.
Bookmark it. http://clientsfromhell.net/
Remember to take time and write nice code for the poor bastard that will inherit it!
Yea, I usually model the webservice, using an mvc framework. I figured I'd start with the basics for the OP. 
At first I read &gt; (I kid, I love my career) as &gt; (I kid, I love my cancer)
This gave me huge headaches in Perl as well circa 1994. I was young and didn't care about dropping $0.01 here or there. The state tax people were not so forgiving.
thank you. I am reading in the docs: &gt;How the xyz Webservice Works The xyz Webservice provides access to the foo Engine by using the HTTP protocol to send and receive XML messages. Once you have developed and configured the connection to the xyz Webservice, XML messages can be transmitted via HTTP Post to the xyz Webservice to perform searches, bookings and cancellations as well as receive the results back via standard XML messaging. &gt;Connecting using another technology If you are using a technology unable to create the SOAP object and serialize and deserialize automatically , you will have to do it manually in order to retrieve the information from the Webservice. For example, if you want to retrieve the category list, you will have to do: POST /webservice/JP_CategoryList.asmx HTTP/1.1 Host: **host** Content-Type: application/soap+xml; charset=utf-8 Content-Length: **length** &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"&gt; &lt;soap12:Body&gt; **xml** &lt;/soap12:Body&gt; &lt;/soap12:Envelope&gt; Where **host** is the domain of the webservice (like xml.myprovider.com/webservice), **length** is the length of the message and **xml** is the xml request (like the request examples of this documentation). An [here](http://pastebin.com/DNSvT11e) is an xml example. So I guess I can only use SOAP 
thank you, I have to use SOAP, but I am reading that those attributes must be set on the XML I am sending, so my question would be: How to send my custom xml to a Soap server? You can read what the docs says [here](http://www.reddit.com/r/PHP/comments/feuzg/how_to_connect_to_a_soap_server_with_user_and/c1fggp4) 
it goes on the body of the XML request message
Congratulations, I am, indeed, envious. I am currently "attempting" to do Java web development, and I just don't find it as enjoyable as PHP development. Good luck!
If you're fine with making it a post-process task this is what I did in my highlighter: if ($this-&gt;reduce) { $regex = '#&lt;b class="([A-Z_]+?)"&gt;([^&lt;]+?)\&lt;/b&gt;(\s*)&lt;b class="\1"&gt;([^&lt;]+?)&lt;/b&gt;#'; while(preg_match($regex, $output)) { $output = preg_replace($regex, '&lt;b class="\1"&gt;\2\3\4&lt;/b&gt;', $output); } } (replace b with span appropriately
A classic rookie mistake is to multiply by 100 and use ints. Even that isn't enough for items priced &lt;$1
Bring delicious baked good to work for your co-workers for the first couple of weeks. If you do it right, no matter what the question, they'll still love you.
Yes, let me write a bunch more stuff for you to be angry at and downvote, because you don't want to read a very short comment tree.
Bankers Rounding (AKA Gauassian Rounding) ftw. Learn it, understand it and then promptly forget it exists ;).
Stop checking your post on reddit and get back to work! - Your Boss Joking aside, congrats and good luck. Here are some [tips for new programmers](http://docforge.com/wiki/Tips_for_new_programmers).
Just cheat and use curl. It takes a bit more fannying around with strings but it's saner than any soap client i have ever seen in php
Combine this with the "technical debt" advice above. Do not say "I'll come back and comment this later" because you wont. You finish a project, and usually get moved on to another one right away. Comment, comment, comment!
**WHY?? WHY WOULD YOU DO THIS??? DIE DIE DIE DIE DIIIIIIIIIIEEEEEEEE**
Yeah, God forbid we allow people to define how much visual indentation they want to have. FORCE those assholes to have your 12 space indentation!
use vim: :retab! 4
needed to do entire directories
&gt; Don't be afraid to ask questions, seriously no one expects you to walk in knowing everything so don't play pretend. Yes but also, PLEASE take notes or something, its the guys that come to me weekly with the same questions that anger me. 
[Here's a tip.](http://www.codinghorror.com/blog/2008/06/coding-for-violent-psychopaths.html)
I use 2 spaces for each indent. And my editor is smart enough to treat them like tabs as I scroll through them. That means no matter who opens the file, on any os, at any time, It looks the same. Always. You'll find that coding standards for most companies where multiple people will be working on the same files is go use spaces so that if there are errors there aren't any discrepancies on lines or characters.
&gt; Why do frameworks create their own auth package when they could use PEAR::Auth instead? Like many older PEAR packages, it's built around PHP4-era coding and design standards. Every modern framework uses PHP5-era coding and design standards. Except Cake, but they're fixing that. Then there's licensing concerns. PEAR's Auth package uses the plain vanilla PHP license. While the PHP license is OSI-approved, it carries some additional burdens that other licenses don't, which makes bundling it with code under a more liberal license somewhat troublesome. &gt; If you don't use it, how come? This answer also applies to frameworks: because the "best" way to install PEAR packages is at the *system* level using the PEAR installer client, and not everyone has root. Not installing it at the system level means bundling it with the rest of your code, and that may be a show-stopper for certain software. Also, when I had the chance to use it for a project a few years ago, it had stopped being updated. Nobody wants to use unmaintained code. It looks like it's been picked up again since then.
Day 1: Wow, these guys' code is amazing, I don't even understand it. I've really got to pick my game up. Day 10: Huh, so that's... huh. I wonder why they had to do that? I should probably find out more about the way the business works. Day 60: What the.. why the hell have they wrapped one function in another? Why isn't this commented? *Who the hell wrote this*? 
Amen to this. And remember: stick to your standards, and bear in mind that most other people are faking it too. Especially the old ones.
This is the kind of thing an MVC framework is good for. Check out CakePHP or Code Igniter. I'm sure others can give you a more detailed description of these two things, since my company has an in-house framework that we use.
A PHP framework like zend or yii might help ya here
blablabla... framework. honestly!
Rather than reply to each one of you that already said "FrameworK" of some flavor or another, I'm going to give each of you and upvote and just say "I came here to say this". Frameworks used to be more trouble than they're worth, but in recent years they've gotten very flexible ... and almost indispensible. They abstract away all the "busy work" you find yourself doing again and again and provide a unified interface for you to go about implementing business and display logic. Depending upon the kind of site you're building ... you may even want to look into one of the more full-featured packages like Drupal, Wordpress, etc... as your launching-off platform and customize to your needs. Leading PHP Frameworks in no particular order: * Kohana - very lightweight framework, all php5 * CodeIgnitor - used to be stuck in PHP4-land ... has this changed? Also very lightweight. * CakePHP - Feels a lot like a port of Rails for PHP. This is a full-featured MVC framework. * Symfony - Another full-featured framework. Really requires that you're deploying to a server that you have command-line access to though. * Zend Framework - Built and maintained by the company behind PHP. Never used it, but the main criticism I hear about it is that it's overly complicated. 
Tell me more about the Blablabla framework, it sounds awesome!
I understand that, but when you've already built a full website without a framework you can't really go back and redesign everything from scratch.
Sad thing is that this is 100% true more often than not...
Finish this one out and use a MVC framework or plan out the site a little better next time. It's not what you want to hear but sometimes you really do just need to put some lipstick on the pig and move on.
Especially considering that poor bastard may be future-you.
Way too many buzzwords, champ. None of this has anything to do with OOP, let alone MVC. As long as you continue to solve problems by leveraging catchphrases, instead of choosing a tool because it's the right tool for the job, you're going to continue to feel like a novice. Use mod_rewrite to change the specific ajax call into a URI argument, then switch on that. There's no reason for this to be in separate files; when you add a bunch of infrastructure to make splitting it across several files easier, you're solving the wrong problem.
What a waste of bandwidth. No, he shouldn't switch to drupal to get around sharing code between a handful of handler stubs.
Not to mention that those frameworks wouldn't do you any good, and putting them in even from scratch would be more work than the one-line mod_rewrite solution. Pro tip: when someone says framework, stop listening to them. It's virtually always the wrong thing to do, being suggested by a rank amateur who's just as confused as you are, but less honest with themselves about it.
Sure you can. Maybe not on budget or within the same timeline as the original project, but you *can* and, I would argue, *should* do it. Sometimes the best way to learn is to re-build the exact same functionality, but this time with a solid vision of what the end objectives are and what some of the tricky technical obstacles are going to be. That said, I agree that you aren't getting the kind of responses you asked for...
What os/editor. Most GUI editors now support "soft tabs" where hitting tab will drop in X spaces based on a setting. Coding standards at my office happen to be the same as what I was using before I started working there based on ease of readability which is 2 spaces. As we update code in old libraries we'er also supposed to remove all the tabs we find. TextMate had an option to just convert all tabs to spaces in the selected text. Works great. 
Problem is there's no point in having it look the same at all time. The good thing about tabs is that it doesn't have to. Who cares if you visually have 2 or 4 spaces as identation? A tab is 1 per indentation and then you can have it be displayed however you want. With spaces you are forcing your preference onto other users, and that's just not cool. I can quite safely say that I have never, ever encountered any errors what so ever from using tabs as identation even on massive projects with multiple developers. Hell, people were even using different editors!
&gt; when someone says framework, stop listening to them. It's virtually always the wrong thing to do So.... you believe Rails is a fad? or.... I mean, did a framework rape your sister or something? 
have you tried using [php code genie](http://sourceforge.net/projects/phpcodegenie/) or other [php CRUD generators](http://www.google.com/search?q=php+CRUD+generator)? They're not as flexible but get the job done (like the one you've stated) pretty quickly with just a few clicks.
I think I disagree about it being "silly optimization," though. If I saw someone write something even as trivial as… print (chop($username) ? chop($username) : 'Anonymous'); …for a commenting system, I'd think there's something wrong with their coding. Wouldn't you?
I didn't say he *should* go to Drupal, only that it was an option depending upon his project's needs. I talked a lot more about using more generic frameworks. If all you want is "...a handful of handler stubs ..." then Kohana or CodeIgnitor the type of framework that's called for. If you're building a slightly more complex app, especially if there will be multiple programmers involved in the build or maintenance of the site, a more full-featured framework like Zend, Cake or Symfony may be called for. If you are building a site with a ton of CMS capabilities needed, that needs to be "built and forgotten" and left up to the site owner to do most maintenance on, a platform like Drupal or Wordpress would be a good choice.
&gt; So.... you believe Rails is a fad? Yes.
&gt; I didn't say he should go to Drupal, only that it was an option depending upon his project's needs. So is COBOL. That also shouldn't have been suggested. None of those are called for. I'd explain but you'd just downvote me again.
The explanation isnt why we're downvoting. It's the douchiness.
That's nice. Enjoy using unnecessary frameworks and insulting strangers on the web for having a different opinion than you.
This is not OOP perse (but it can be), maybe it helps anyway. I have one file per site that responds to ajax calls, the response format is an object with (bool) success, (array) data, (string) message, (string) debug, and the JS callback handles the rest. Most of those are optional depending, message is mostly used when something went wrong, the others should be obvious. The one thing that all calls have in common is a unique 'act' parameter that specifies what needs done. The code is [here](http://mech.cx/tools/functions.php?id=190), it may give you some ideas to improve yours
Being called out for actually being a perpetual douchebag is not an insult, it's an accurate observation in this case. 
&gt; because all php devs are men of course Clearly, I just won't tell Lorna Jane, Elizabeth Smith, Sara Golemon, etc, etc. this. :P
Yeah, probably should have added "And make sure you LISTEN and LEARN from the answers" in there. You would hope it would be obvious, eh?
I'm not a plastic bag full of vaginal cleaner, and that your attention span doesn't catch on to that I regularly get hundred-plus point posts isn't interesting. Find another stranger to criticize. Maybe figure out what the word "accurate" means before you do.
the problem isn't different just different editors. It's different editors, on different platforms, connecting remotely to source, and saving the files. (also windows line breaks vs *nix line breaks. gotta cut that shit right the fuck out). Also, languages will give you line number, and column number source errors (javascript). So if you're going to implement a coding standard for one language, to make sure everyone can find exactly where the problem is. Then you should implement the same standard for all languages in the same company.
&gt; Rebuilding the entire website in an MVC framework is not an ideal solution Your technical debt is going to have to be paid at some time. That's not a choice, it's just a fact.
I couldn't agree more about the line breaks and line endings, but that's a completely separate issue from indentation. Error line and column numbers are precise regardless of whether you use tabs or spaces for indentation. I'm not arguing for allowing both, I'm saying that forcing tabs is better than forcing spaces.
I dont use *unnecessary* frameworks. I do enjoy using Rails, and our in-house MVC PHP framework though. 
It's called the double arrow, it's used to iterate arrays using keys. in your example $response_id would be the key of your associative array and response would be the value $associative = array( 'key' =&gt; 'value' ) $associative['key'];//'value'
&gt;CodeIgnitor - used to be stuck in PHP4-land ... has this changed? Also very lightweight. CI devs are working on CI 2.0 that will deprecate php4 support Edit: CakePHP announced [2.0](http://bakery.cakephp.org/articles/markstory/2010/12/26/happy_holiday_yule_cake_-_cakephp_2_0-dev_released) (-php4) not that long ago
That makes sense now. Thanks for the help!
In a `foreach` construct, this will have the following effect: $array = array( "name" =&gt; "Bob", "age" =&gt; 42, "food" =&gt; "fries" ); foreach($array as $key =&gt; $value) { echo "The key {$key} has value {$value}."; } If you don't include the `$key =&gt;` part, you'll only have access to the value and not to the current iteration's value: $array = array( "name" =&gt; "Bob", "age" =&gt; 42, "food" =&gt; "fries" ); foreach($array as $value) { echo "I don't know what key belongs to the value {$value}. ☹"; }
Some people also call it a hashrocket, iirc.
This helps a lot.
&gt; Maybe figure out what the word "accurate" means before you do. Annnnnnd... scene!
CI2 is [out now...](http://codeigniter.com/news/codeigniter_2.0.0_released/)
woot! Just as I stop following what are they up to, they go on and launch CI2
The array above is an "associative array" and is similar to a "hash" or "map" in other languages (in general, any structure where non-integer or non-sequential keys are _mapped_ to values). PHP combines maps and variable-length arrays into one construct, but underneath they're quite different. As has been mentioned, the =&gt; operator is sometimes called a hashrocket, particularly by Rubyists, as it is used for pointing keys to values in hashes, and looks kind of like a rocket :P The more you knooooowww...
Forcing them on other devs (not really users). Isn't particularly 'not cool' as it's a matter of standard set by the 2 devs that own my company in particular. I've always used spaces as a personal preference, and like I said earlier my company's policy is the same. I'm thinking the policy here was dictated from users using different cli editors over time, and the way tab characters are saved to our source control for diffs, and web viewing. 
Hilarious.
Saying a framework is almost always the wrong answer is sort of an insane assertion. Frameworks exist all around us: whether its Tapestry, Spring, CodeIgniter, Symfony, Google Web Toolkit, or any other framework, they are pervasive, and used in tons and tons of successful programming projects. I see no correlation between framework usage and project success, and if one is going to assert frameworks lead to failure, I'd like to see some shred of credible evidence to support that claim.
&gt; Saying a framework is almost always the wrong answer is sort of an insane assertion. Frameworks exist all around us So does COBOL code. You use COBOL more than a dozen times a day. Assembly's even more common. &gt; I see no correlation between framework usage and project success RAND sees a strong converse correlation. Perhaps this is because you have never measured. &gt; if one is going to assert frameworks lead to failure I didn't assert that. Why do framework fanboys always make up claims to challenge? 
Using a framework for something that's a single line of code is where technical debt comes from.
Read the freaking rediquette... You do NOT downvote people for their opinion.
You do not need to use a framework to have any of the following: maintainable code, secure code, fast code, good-looking code, code up to proper developer standards, etc. I would recommend to anyone with some experience with PHP to write their own kinda pseudo-framework. Even if it's just quite an in-depth unwritten style guide for how you structure classes etc., it's better than downloading 2mb of abstracted crap and running it on your server or not organising at all.
Why was this downvoted? It's a fairly good method.
&gt; You do NOT downvote people for their opinion. I'm aware of this. I have not done that. I frequently lambast people for this myself. Go yell at people who are doing that to me right now, please. Upvoted for the message, even though it's been said to entirely the wrong person.
I don't really see where the problem is in the submission. It sounds like the current set up is working for you. Is it confusing to maintain? Add more functions and abstract it out a little more.
Do you have a web accessible location that I could take a look at? It would be easier to figure out exactly what you are trying if I could see it in the wild.
Don't bother responding to Stone, he's just an insulting, trolling asshole. He's turned to messaging insults to me because I pointed out his iniquities above. **edit: and now he's apparently gone and downvoted every post I've made in the past few weeks, hah :) Quick tip Stone, I don't care about karma.** This community would be far, far better off without him present. Hell, *any* community would be improved by his absence.
Congratulations. Have fun!
Yii is the fastest framework out, or so I've read.
Oh, and remember to BLINK. Yeah, it sounds funny. Who forgets to blink? Programmers, that's who. Not blinking and resting your eyes frequently at work does bad, bad things to your eyes. 20-20-20.
The problem is just that I am replicating a lot of code. And one thing I've learned is that if you're replicating code there's probably a better way to write what you want.
I think this is more something I am looking for than going OOP. Thanks.
It was *you* who started with "What a waste of bandwidth." You might as well have said "lol, your dumb" and be done with it.
Of course you can. No, seriously. I have seen projects that have not used *any* framework throw away six months of work, just to rebuild the whole thing in two weeks. It's about reusing patterns, and your original post is already telling us that the reuse of patterns is starting to go very wrong.
That term is now de facto standard anywhere I am.
And after you have read this comment, go look to the Internet for the *reality* of the situation concerning the frameworks that successful projects use.
I don't believe people downvote StoneCyper for his opinion. I usually find what he has to say interesting and thought provoking. Not to mention he's usually right more often then he is wrong. People downvote him because he comes across as a condescending asshole. 
Feel free to show me a project you think is important which uses something that isn't made to task. I'll wait.
If I had stopped there, I might agree.
&gt; Don't bother responding to Stone, he's just an insulting, trolling asshole. This is very literally the definition of trolling. &gt; edit: and now he's apparently gone and downvoted every post I've made in the past few weeks Liar.
That? Why that is the PHPenis.
I don't think repeating code (violating Dont Repeat Yourself) is necessarily a completely bad thing. If you have a maintainable, flexible set up, with some code being repeated between files, it may not be worth the time (cost/value) to restructure the project.
This is borne out by almost every response he's ever made in every site, forum, channel that I've encountered him. He can't help it.
If MyBB, Id recommend MyBB Integrator by Dave :- http://phpdave.com/MyBBIntegrator/
While we're at it, what do I call this? $foo = &gt;&gt;&gt;HTML &lt;span&gt;some html&lt;/span&gt; HTML;
&gt; Zend Framework - Built and maintained by the company behind PHP. Never used it, but the main criticism I hear about it is that it's overly complicated. Yes and no. Matthew Weir O'Phinney does the Zend Framework and is employed by Zend solely to perform this function. Given Zend's other offerings level of quality compared to the level of quality of the Zend Framework, I would say that no, Zend Framework is not produced by Zend rather it is *funded* by Zend :P It's not more complicated than the other frameworks (compared to Symphony and other "magic" frameworks, magic == does things for you rather than having to be explicitly told, it most certainly isn't). It's just very hands on and very patterns-oriented. Once you get to know it, it's very powerful and flexible (I use it for my large-scale projects due to its flexibility). However I don't know if I'd recommend it for someone new to MVC in general due to the fact that there is next to no automation in setting it up. &gt; CakePHP - Feels a lot like a port of Rails for PHP. This is a full-featured MVC framework. It should, that was it's original intent was a Rails port.
heredoc [here document](http://en.wikipedia.org/wiki/Here_document)
Fast on pointless benchmarks. Speed of execution is the least of your concerns when you start hitting the requirements of a large website. Speed of your PROGRAMMERS is the absolute most important factor (as long as the framework is reasonably fast). When you scale, looking at framework performance is micro-optimization, a misdirection from the true bottle necks who, when fixed, actually net you a statistically significant amount of performance (disk I/O, database calls, etc).
Sweet thanks! It also looks like I messed up the syntax a little...
I dunno Tara.. I guess if I wasn't so lazy I would have fini
I dunno, that's what I am thinking. This is just for a few backend files that create JSON which the AJAX calls to. Each file has this much code that's being replicated: * Including a common file containing DB and built in functions * creates the JSON array * Checks if user is logged in * Checks if the passed values are set. But this is where the code starts to differ. * Finally at the end: output JSON
Excellently explained. Have yourself an upvote, Sir.
COBOL and assembly aren't almost always the wrong answer either.. I'm not sure if you're refuting my point or agreeing. I have never measured, for I have no compelling need to. I am fully able to make a prudent decision regarding frameworks and new projects without the need to benchmark. And if you didn't assert that frameworks lead to failure, you damn sure implied it. By the way, there isn't such a thing "framework fanboy" anymore than there are "function library fanboys" and "C Standard Library fanboys" ... it's just a standardized way of organizing your applications, broadening the pool of labor available to support it. 
Make sure not to confuse this: =&gt; With this -&gt; which is for accessing members of a class.
You could have googled: php foreach
That doesn't sound entirely unreasonable to me, if you've abstracted things like checking login status and validating form data out into other functions that you're just calling as-needed. Sure, you could possibly combine things further and handle multiple different AJAX requests in a single file. You may, for instance, want to put all AJAX requests for users in one file, all requests for articles in another, etc. I would rather do that than have every AJAX request for the entire app in one place. Some separation is good, when it's done logically. It keeps things easy to read, easy to maintain, and makes it easier to add new features to individual components in the future. DRY is a good coding principle, Mostly DRY is often more practical. 
Quick, if you're following Textmate 2 development, please stop.
This.
Never even heard of it, sorry :(
number of WTFs per minute - the tried and tested way of measuring code quality.
&gt; COBOL and assembly aren't almost always the wrong answer either. The germane observation is that the number of situations where they're actually the right thing to do is actually vanishingly small and requires justification, something which one doesn't learn until one has built a site that has had to scale under user load and extension. I don't understand why you're putting in the effort of restructuring an entire application around a library to get out of writing a single line in mod_rewrite. It's like you've completely failed to even consider that there are alternative approaches with merit. &gt; I have never measured, for I have no compelling need to. ... *oh*. Got it. &gt; And if you didn't assert that frameworks lead to failure, you damn sure implied it. No, I didn't. I don't even believe it to be true. I even use them, on rare occasion, myself - just not blindly, and not for stupid reasons. Their costs are high. Kind of the other way around, actually. I believe failure leads to framework use. Those who can do. Those who can't get jQuery, and never learn to do it right, and thereby are limited to what jQuery can do. It's the old line about blub. Surely you know this tune; it gets fellated on proggit weekly. &gt; By the way, there isn't such a thing "framework fanboy" anymore than there are "function library fanboys" and "C Standard Library fanboys" Yeah, the other two exist too. Admittedly in this day and age the latter is rare, but whatever. Function library fanboys are pretty damned common. Ever heard a jQuery or Dojo or Scriptaculous or Prototype or Palib or Behavior or Google Gears or OpenLaszlo fan say anything at all ever? &gt; it's just a standardized way of organizing your applications Yep. And waterfall is a standardized way of organizing your projects. And Gantt Charts are a standard way to allocate work. And assembly lines are a standard way of making your product. The germane understanding is that there are better ways, and that these standard ways have high costs, and if you don't understand or face those costs you'll end up building a factory to make paintings. Just because a standard exists doesn't mean it's the right tool for the job, and often, even that it's a good tool. &gt; broadening the pool of labor available to support it. When you get into justifying making technical choices for a single project in terms of broadening labor pools, it becomes clear that you have completely forgotten what the discussion was, and are just dropping talking points to sound sophisticated without even considering how ridiculously unimportant they are in context. You were explaining why restructuring an entire application around a framework library was a better idea than writing a single line in mod_rewrite, and without actually choosing a framework library. Speaking as someone who's actually written some of these libraries, I'd like to ask you why you think rewriting an entire application around a tool you haven't even put in the effort to choose from among peers is a better idea than writing a single line of mod_rewrite. Please be specific, since you seem so certain that this is the technically legitimate thing to do.
Just before I took my current job (first RoR position), I had just done 3 small to mid-size projects in Cake. I have to say it prepared me well to moving over to Ruby on Rails. Rails definitely has a lot more polish, but you can very clearly see the parallels. I'm also diggin' Ruby quite a bit. That said ... I'm doing a side-project in Kohana right now, primarily to keep my PHP chops up.
Not meaning to be rude, but I'm curious as to why you posted this in /r/php as opposed to /r/programming.
Comparing Drupal to COBOL ... interesting. You have quite a gift for hyperbole. ...and I didn't downvote you. I don't downvote people for differing opinions. I didn't *upvote* you either, but might have if you hadn't taken a "comic book guy" tone... 
&gt; Comparing Drupal to COBOL ... interesting. You have quite a gift for hyperbole. You might find it less surprising if you took the time to understand what I was saying, instead of settling for the first, least plausible interpretation that comes to mind.
That's the associative array associate-operator. &lt;?php $prices = array('apple'=&gt;'0.79', 'banana'=&gt;0.59, 'goldbar'=&gt;'over 9000'); foreach ($prices as $item =&gt; $valuePerPound) { echo "$item costs $valuePerPound per pound.&lt;br/&gt;\n"; } ?&gt;
That is a totally awesome term.
You were trying to suggest that Drupal is as outdated as COBOL ... I got that. Don't agree ... but I got it. That said ... why focus on that one little point in my post with such venom? Don't like Drupal ... cool don't use it. I'm actually not all that keen on Drupal myself, but it does have its place ... and it's far from dead. It's got a large installed base, and a fairly thriving cottage industry surrounding and supporting it.
&gt; You were trying to suggest that Drupal is as outdated as COBOL ... I got that. I was trying to suggest no such thing. Please stop trying so hard to see messages between the lines. &gt; That said ... why focus on that one little point in my post with such venom? You still haven't even figured out what I was saying. Please save the melodramatic misrepresentations of venom, while you're at it. Way to ignore what was said and what you were asked, though. I think we're pretty done here.
You're a lonely, lonely man ... aren't you
You sure do like personal attacks.
Strike a nerve?
Blink and remember to get up and stretch every now and then too. I've got a few friends that are developing dreaded programmers hump from being slumped over coding at work all day with no rest.
when reading code allowed in your head the =&gt; can be read as "maps to" or "mapping to" e.g For each $_POST as $response_id mapping to $response 
I've no idea what you're working on, so maybe I'm out of line here, but isn't it typically really bad to use clientside script to replace serverside functionality? Like, if the client had JS switched off, your website wouldn't work. Alongside a plethora of other reasons that may or may not apply.
&gt; Rebuilding the entire website in an MVC framework is not an ideal solution. Especially with so much of the site having already been built. This is like the business man who, when asked why he uses $CRAPPY_SOLUTION, answers "Well, I paid so much money for it". Previous cost (in time or money) is *never* an appropriate justification for poor software design. Good programmers have no problem throwing out code. They tend to throw out a lot, because they experiment a lot.
Dude, it's not the message, it's the delivery.
what about new fuelphp? 
&gt; I cannot seem to be able to add the results from $difference into an array that I can use outside of the while statement. Well, first of all, you don't show any attempt in your code to assign $difference to an array, so if you had an error, we can't tell you what it was. Some notes... - Variable variables, ugh. - Start array indexes at 0. Be consistent. It'll help in the long run. - "foreach ($coords as $coords)", I do believe you're overwriting your array here. Ah hell, just take a look at: http://paste2.org/p/1229499 It's late, so I'm sure some other critics can pick this apart. I wouldn't normally echo out html like that, but it's an example. Once you take a look at the table, you'll realize you're making double the necessary comparisons, I'll leave that as an exercise for you...
*object
Why are you using ${"c".$count} = ... and not building a valid array like $newArray[$count] = ... Creating a var from a var is generaly a bad practice as it makes the code hader to read. Also, adding $diff[$i][$x] = $difference; After echo "Difference between coords Works fine in your code - http://szczecinski.eu/test.php
I've heard it referred to as "big comma" when I was studying Perl, but maybe I'm not supposed to talk about that here ;-)
rtfm 
Thanks shawncplus, it just works as a charm after some regexp changes. 
Although your writing is a bit annoying and condescending, as others have said, I did not have anyone to personally reply to in this thread. "Replying" to this comment was the best choice.
Interesting read! I've seen a lot of node.js hype and specifically "non-blocking" being mentioned which I haven't really understood until this: &gt; "In any non event-driven environment, your application sits around doing nothing for the time it takes to get the contents of the file before it can send the contents back to the client. In event-driven server-side environments (node.js), your application can get a request for a file, and make the file system call to retrieve the file, declaring an event (function) to occur when the file system is done (usually sending back the data). However, in the time between receiving the request for the file, and sending it back, your application is free to do other things (like send how long the server has been running). You are effectively allowed to not care about the blocking calls you make until those calls return. (After the file-system has finally figured out WTF example.html actually contains)." Small typo in the article: "but the other **even** has already been handled." which I assume should be event. 
" = PDO" lolwut
sha256 ftw
Non blocking means it won't hog the cpu. That's hardly at the web dev level though. If a PHP thread on apache needs to wait for DB access it should release the lock.
&gt;Sometimes the best way to learn is to re-build the exact same functionality, but this time with a solid vision of what the end objectives are and what some of the tricky technical obstacles are going to be. Hit the nail on the head. I've redesigned a platform(using CI) that I use to roll out websites quickly 3 times over the last 2 years. Each time learned countless things about bottlenecks in code and how to backport/deprecate functions properly so that legacy code doesn't break. It's also fun when you have a clear goal in mind and you get to the end and look back at what you've built. My fun: The first iteration of my platform had page load times of about 1.8 seconds and most of my queries were taking 0.8 seconds or more. I'm now down under 1 second and my queries are all sitting around 0.00x seconds.
You need to learn how to find your way around the PHP documentation. The operator is being used here in a foreach statement, so a good place to start looking is the foreach statement. Google for "php foreach" and [this](http://php.net/manual/en/control-structures.foreach.php) is the first page you get back. Lots of examples and explanations in there.
The sign of the beast.
Brilliant! I'm stealing that.
Did you even read the thing you just replied to? 
No, strangers complaining at me in public don't strike a nerve. I'm just bored of watching you complain, like I'm supposed to be interested. Why do you believe people care what you think?
&gt; Although your writing is a bit annoying and condescending And this is where I stopped reading.
Thanks bud! This is great, but its giving me problem with this line: $sth-&gt;execute(array( "Parse error: syntax error, unexpected T_VARIABLE "
Oh hey, I forgot a semicolon. See edit.
Meine bad, was pretty tired.
I love how wiki essentially breaks the back button on my phone.
It sounds like he did that first.
Same problem still.... hmmm
it doesnt like: $sth-&gt;execute(array(':mdpass' =&gt; md5($unewpass), ':uemail' =&gt; $uemail));
Read them all. Chances are no single tutorial covers everything.
For learning general OOP PHP, this is by far the best I have ever done... http://www.killerphp.com/tutorials/object-oriented-php/ there are also some video tutorials...
THANK YOU... I'm gonna grab some food and watch it all!
That css-tricks tutorial just won't die... I wish the author would remove it. http://www.reddit.com/r/PHP/comments/f9k7y/30_awesome_php_tutorials/c1ebce0?context=3 &gt; Yuck, I remember this one: http://css-tricks.com/php-for-beginners-building-your-first-simple-cms/ I remember it because it was posted on Digg a long time ago and after it made the front page and people figured out it was full of security holes (SQL injection and XSS) they had a field day with it because he posted the code up as an example on his site, which he later took down for obvious reasons. Good times... Edit: This is why you should read all "blog"-ish programming tutorials with extreme **caution**. It's funny how a blog and a domain name can make a very bad programmer think they're an expert.
I didn't get a chance to watch all of them but I really enjoyed what I saw as well.
Then why do you continue to reply? If this is so boring to you, why don't you beg off and do something interesting. &gt;Why do you believe people care what you think? I'm not a "you people" like Karmanaut. I'm a single individual who couldn't give a rats ass what you care about. At this point, I'm just entertaining myself watching you be a pompous ass.
Blimey, go easy on the downvotes. If you Google php foreach you get the php manual page for foreach which clearly explains whats going on... I would consider that helpful info...
&gt; I'm not a "you people" like Karmanaut. Mmm hmm. :) Later on, unnecessarily judgemental stranger.
Copy paste your whole code, I'll see if I can get it to run :) What version of PHP are you running? Shouldn't affect it as far as I know but it's good to be running 5.3+ Also, don't use MD5, it's an utterly weak and bad hash.
I said the same as this but perhaps a little terser and got downvoted! Bah, fickle people...
Have a Mac? Try Sequel Pro. 
No, I just go around and reply to random posts cuz that's how I roll. &gt;&gt; You do NOT downvote people for their opinion. &gt; I'm aware of this [...] Go yell at people who are doing that to me right now, please. I'm just pointing out that people do not downvote you for what you've to say, certainly you're knowledgeable individual, they downvote you for the way you talk to people, being arrogant prick with assholery diploma. I don't care if you like to be that way or that's just result of psychological drama, if you can't be polite, just keep your mouth shut, please. &gt;&gt; You do NOT downvote people for their opinion. &gt; I have not done that. My comment wasn't downvoted until you replied to it, so yeah...
grep for exec, system, `, and shell_ exec. Matching any of those might mean a backdoor. Aside from that, you'll have to go line by like to see if he has something in like, the login script, to make someone admin automaticly or something.
Don't learn OOP from an online tutorial. Start reading books. Specifically, this one: http://www.amazon.com/PHP-Object-Oriented-Solutions-David-Powers/dp/1430210117
I do this ALL the time. Sometimes, I've had to develop sites on external servers - I would get my 50% up-front but I am always ready just incase they try and shut me out once the site is completed. It has come in handy, many clients tried to break ties with me once the site was live and not pay... I had very good ways on removing all my work, even without ftp/shell access. My tip: Sorry bud, but line by line ;) I'm tricky, and I'm sure there are others more tricky than me.
Automatic admin - grep for a single equals and 'if' on the same line. Of course that only proves that there's no backdoor that's been obfuscated using assignment instead of comparison on the same line. Like someone else mentioned, it's line by line for absolute proof.
Yeah, line-by-line is correct. PHP has a *lot* of neat ways to obfuscate code to make it hard to grep for things like backdoors. Any programmer worth hiring will be able to think of a bunch of them.
Not to the server, just the code itself... and its needed some times, I've needed it quite a few times to get paid. Theres plenty of clients who will try to screw you over and I've seen it for years - so either I do it and have a backup, or I don't and risk not getting paid (or go through a costly lawsuit). Like thaumaturgy said, any programmer worth hiring will be able to think of a bunch of ways to have a backdoor - because they're experienced and know the difference. You hire some 'noobie' to do a project, you won't see a backdoor, but that noobie will eventually get screwed, and *then* they will start to use backdoors; one bad client will create a habit.
Because otherwise you might have code lying around that uses spaces to indent, which is awful. They don't copy-and-paste right. They are difficult to work with on many of the curses-based editors that you find yourself using on ssh sessions. They can't (in most editors) be dynamically adjusted to change the indent width, so everyone who works on the code is forced to use the same style even if it's harder for some of them to read. Using spaces to indent is like using a double-space after a period - it's a pointless holdover from typewriter days that somehow refuses to die.
I'll add eval to that list (hopefully not finding any false positives ;)), and also base64, and other related encoding/decoding functions that could be used to hide backdoor code.
Also `unlink()`
Also don't forget simple things like a special username/pw combo in the db with full access, also change the FTP, cpanel, database, SSL server passwords etc. If I were OP I'd FTP into server and make a backup of all files and the DB, so if they do nuke it you can restore it after you've removed the backdoor from the code. A backdoor removal page would be pretty simple though, could be a random file when run just drops the DB and deletes/overwrites the files in the web root dir. You'd need to check all the files to be completely sure.
Backdoors are unethical and unnecessary. Get them to pay in smaller installments e.g 10% for 10% completion. If they miss a payment then stop work and they only get what they've paid for. At worst case you lose 10%. Big companies charge hourly rates for big projects and bill the client weekly or fortnightly for what's been done. 
The only way to be sure is to go through line by line. However, this tool: http://sourceforge.net/projects/rips-scanner/ can scan for potential vunerabilities and other problems, and is a good way to start.
If only it worked that way. Sure, for a big company that's reliable you can do that, but local work, small businesses, mid level guys, you just never know. You have to have a means to protect yourself. I've done the same things before, just write a random script that when accessed adds a user to the db, so that you can access their db if they try to lock you out, etc etc. You don't LEAVE it there, but until someone pays you for your work it's YOUR code not theirs, and you have a right to take measures to protect yourself. 
Particularly in relation to websites 1. Host it on your server and don't give them shell/FTP access 2. *Always* get a deposit before starting on a project 3. Only give them shell/FTP access/the software once they've paid in full. You don't need to use a backdoor, which I agree is unethical. The fact that you would add them to your projects is abhorrent. There are more reasons to hosting things for clients than just the passive income generated by doing so and it's definitely something every developer worth the bottom of their socks should be doing.
Grep for any base64 encodes, too.
&gt;1. Host it on your server and don't give them shell/FTP access If you are in the situation where your clients website is hosted on their own server, then make sure you **physically remove the entire website off their ftp server** until they have completed payment. I had a client who refused to pay the remaining 50% because we apparently did not fulfill our obligations. On the contract (signed by him) it stated exactly what we were doing (upgrading site code structure to make the website google-friendly - the site was full of tables + no text anywhere, only text on images). So, fast forward a few months, the project is completed and his site is no1 on google for quite a few of the search terms (bear in mind nowhere in the contract did we mention anything about google results, SEO or keywords - this was just an added bonus thanks to the xhtml and proper code etc). Client claims we did not fulfill our side because he is not no1 for *insert very general search term here* (**leather couches** to be exact). We take him to court - provide a shitload of evidence + contract that he signed. I removed his admin access to the CMS during this time. Client also called another development company in the area (my previous 9-5 job, ironically) to ask them if it was possible to log in to a website if you do not have the password. Client goes crazy when employee of 9-5 (a friend of mine) refused saying he will not partake in illegal activities such as hacking into a site. Fast forward, We lose. But not because we did not fulfill our part of the contract, but because **the website files had been on his ftp site for longer than XX weeks, so the site automatically became his property so he did not need to pay us the remaining 50%**. Basically a squatters right law. If your clients are not paying, remove the entire site off their ftp servers - do not just block access to it. **tl;dr** If client refuses to pay your remaining 50% and website is hosted on their servers - delete the entire site until payment is made. I lost a case due to the fact that the website was squatting on his server for quite a while even though I had blocked his admin access to it, which means he now owns the site. ** tl;dr tl;dr** Squatters rights can be exercised on websites.
&gt; and I personally would never ever work with someone that does this. What a coincidence... you don't have to. Whether you agree with it, or even understand the need for it, is completely unimportant.
&gt; Backdoors are unethical and unnecessary That's just, like, your *opinion*, man. &gt; Get them to pay in smaller installments e.g 10% for 10% completion. Idealistically, yes, you are correct. &gt; At worst case you lose 10%. 10% of a very large sum can be a very large dollar amount, and reflect a very large amount of work. Some of us would prefer to lose 0, instead.
That's insane. I feel for you man... I just can't believe the courts would rule against you like that!
http://thedailywtf.com/Articles/Maybe-I-Needing-Later.aspx
You get what you pay for I guess!
Perhaps you could try: Account has an owner Properties have an owner Look up the owner by doing a select on the owner_id, stored inside the account. (Foreign Key) Look up the properties by doing a select on the owner_id, stored inside the property. (Foreign Key) Perhaps if you pastebin your code we can look at it and give pointers, you need to be more specific with your problem.
there's alot of code and quite a bit of it is a mess, i'm rewriting large portions to be cleaner (remove redundant code, etc) but i'll try and be more specific. the website is for bed and breakfasts in my city. each bed and breakfast owner has an account (login details and access levels), each account has a single owner, and each owner can have multiple properties. i need to be able to look up a property based on it's id for the front end, where visitors to the website can look up properties to decide if they want to book a visit there. i need to be able to go property-&gt;owner-&gt;account for this section because i need to post owner information on the front end for visitors to contact the owner, and account information to see what kind of information should be posted. (different account access levels allow varying levels of information to be posted, and some of the lower levels restrict booking) from the back end, i think i need to be able to do account-&gt;owner-&gt;properties. honestly as im thinking about it now, the only reason i really need it is to validate log in. if there is another way i can do that section i can get around my problem. 
Are you assigning the "owner" object as a _property_ of the "property" object?, as in `$property-&gt;owner`; and the "account" object as a _property_ of the "owner" object, as in `$property-&gt;owner-&gt;account` ? If that's the way you're doing things, trying to do a backward lookup will quickly lead to a mess of circular references. Instead, store the owner ID (an integer) as a property of the "property" object. Now add a method, `getOwner()`, which queries the DB, instantiates an "owner" object, and returns it. The "owner" object itself does not need to be stored inside the "property" object. Likewise, add a `getProperties()` method to owners. Since PHP 5 supports method chaining, you can still do things like `$property-&gt;getOwner()-&gt;getAccount()-&gt;hasPaidUp()` or something like that. Edit: Or you could use a good ORM, which would take care of most situations like that.
Do not actually store the object references in your objects. You aren't using an ORM, so you can't try to shoe horn that kind of functionality on there. Just look it up from the database, for example, to get an owner of a property, in my example schema, do a select on the owner_id stored in the property. example: $owner = Owner::get_owner_by_property($property);
&gt; I've had to develop sites on external servers Which implies you're putting the code on their server, therefore you're planting back doors on their server. You can downvote me but I'm sure you'll reconsider doing this when you get sued.
Association - Class A sends messages to class B Aggregation - Class A has a class B - one to many Composition - Class A has a class B - one to one (implies ownership) Dependency - Class A depends on Class B Inheritance - Class A inherits from class B They're your main relationships. If you want you can map them out on paper using a UML class diagram. Ultimately though, practise makes perfect.
these
You should simply **backup the filesystem and any databases regularily** (i.e. nightly) and run **PHP in safe mode**. Then you will only have to check for vulnerabilities if something actually happens and no (minimal) real harm is done.
This is the pragmatic answer. Do they really need to be related? 
I've been working the field for a couple of years now, and have been 'screwed' once or twice. I'm still not planting any backdoors though. If I'd ever find one in code I review you'd be fired instantly.
&gt;It installs ok, but when I try to post a new event from the Manager page, it redirects back to the form and the event is not posted. seriously?
Why would you post this without any further explanation or suggestion?
I can only imagine that the OP is indeed serious, considering they created a post about it.
I wonder if you were an employee of a US DOD contractor working on some state of the art ICBM launch/Satellite Laser platform or whatever and you decided to put a few back-doors in the code. You know in case the government decides to not pay. I wonder what would happen if they found out about it, probably accuse you of being a spy and throw you in Guantánamo Bay while waterboarding you every day for the rest of your life.
&gt; Whether you agree with it, or even understand the need for it, is completely unimportant. There is never a need to plant back doors on someones server without their knowledge. Ever. It's unethical and it's a good way to get your ass sued and a great way to make sure nobody ever hires you again.
I hear that argument made quite often. Citation?
Am I able to make moral decisions based on various variables and conditions? Yes. Or, were you asking something else in a half ass sort of way?
I'm very bored of strangers swearing at me. You behave much worse than you're complaining about.
[Sunk costs](http://en.wikipedia.org/wiki/Sunk_costs).
All good here http://i.imgur.com/TMCOM.png OS X 10.6, built in PHP &amp; Apache. Ports mysql5. I couldn't figure out how to add a sponser so I just re-did the install with the sample sponsers. 
I think you'll probably find that the consensus here is "go with a framework". Codeigniter is probably the most accessible. Start with the database, add models to access and manipulate it, then add controllers and views (the GUI) to access the models. 
I agree, CI is very friendly to those who aren't familiar with the MVC design pattern. However, I felt that CI was not as nice as Kohana and have since made the switch. I have yet to try out CI 2, though. 
What kind of project? Is this just going to be a blog or small business website something? If so, use a CMS like Joomla or Silverstripe or Wordpress. Or is it going to be a web application? If this is the case, you are going to have to get over the difficulty. Making web applications is hard - don't expect to just have a site materialize from nothing. If you think making a site with Kohana is hard, try making one WITHOUT a framework and then pay the price halfway down the line.
I started with CodeIgniter, and I think I get the grip of it, but apparantly the new 2.0 version changed a few things, so the tutorial I followed didn't "work". Couldn't find a lot of documentation for 2.0 either. My gut says I shouldn't go with an older version, so I tried Kohana instead and found some tutorials for that, but it seems harder than CodeIgniter. I've developed PHP applications before, but instead of MVC I just placed functions in a PHP file (eg. list_users()) and called them as needed.
CodeIgniter is a good start if you're having trouble jumping into a framework but after I dove in w/ it, I soon found it lacking. 
Would be educational to consider an OOP approach.
If the tutorial is going to be that basic, consider also describing, or at least linking to how to set up MAMP or XAMP or even your own LAMP stack. Other than that, your file description is off. You say there is an index.php to download "zipped" when it's actually in rar format. I've only skimmed over it, but in the end, reconsider your scope. If you're going to assume people know PHP basics (i.e. echo) skip over explaining it. If you're interested in explaining the $_SESSION system, there's a good chance they've figured out echo.
Kohana's 3.x documentation is lacking. I use the 2.3.4 version because the documentation is very thorough (2.4 uses the same documentation too).
I will start to get into that in the next one. The problem a lot of people who want to learn programming but aren't sure how is generally get stuck on OOP and what it entails. I'm starting by giving them the basics and having them construct what is essentially an object (the player) and I will put things together from there. The plan is to have each tutorial build on the previous one until we have a full game engine framework that they have built from the ground up.
Good point.
Whoops, thanks! I had the links in there but must not have saved it. I actually had a one liner for the echo command and linked to the php.net page for it. I will also link to Tizag since I like the easy style of the site. I don't want to make too many assumptions other than they have a web server running and know basic HTML. Thanks again for the link tip, I totally forgot.
:) Keep it up! Good to see game dev on blogs in php
I'm currently using codeigniter and loving it. What did you find lacking, and what did you switch to? I would be interested to check out other options.
That's my opinion too. MVC was a bit confusing at first for me too. I found there were some times where I had to stop and think "does this go in the view? or in the controller?". But in the end, I have really appreciated the logical consistency in brings to what I'm building. FWIW, I'm using codeigniter. I originally was using codeigniter and Doctrine, as there were some great tutorials out there, but have since moved back to using plain codeigniter.
Once I started getting into Jquery stuff &amp; designing my UI, I started to wish I went w/ a framework that wasn't so bare. I hadn't jumped into OO PHP yet but I've done OO programming in the past so the farther I got into my project, the more hacky the framework felt. I'm looking into Zen at the moment but the documentation kinda sucks &amp; converting my code over seems like it's taking longer than it should given that I'm now a little familiar w/ MVC.
I definitely think this is the right approach. As a novice PHP dev myself, I think it's much more rewarding to be able to make something simple/fun than to learn all the theory and shit involved in great programming. Once I get to a point where I'm getting bored doing the same simple stuff, then I'd like to learn about how to streamline that process with an OOP approach and design patterns. But right now, basic functions is fun/engaging. Good stuff OrganicCat! Keep it up!
Interesting. Everytime I have looked into zend, it seems to have a pretty passionate "anti-following" regarding how bloated it is. To me, some of the listed features seem handy. But I haven't researched it much. Thanks for the insight.
On your blog you come across as quite a personable guy, but it seems every interaction you ever have with anybody on reddit consists of you replying to somebody's post telling them what an idiot they are. That's usually followed by your disgust that they're also a *rude* idiot, when they fail to take your own incredible rudeness well. You like to complain that /r/programming has gone downhill. Nobody on here's been programming for longer than five years. Everybody's a stupid noob. Nobody can compare to your mighty wealth of experience. Why not then, as you so often say yourself, find somebody else to talk to? To be clear here, nobody's questioning your knowledge. You're *usually* right, in fact. But damn if you aren't the most arrogant person I've ever seen in my entire life.
&gt; but it seems every interaction you ever have with anybody on reddit consists of Oh, please. You haven't read every interaction with me. If you had, you'd notice that in the last two weeks I've had five helpful comments voted above the 250 threshhold, 20+ public thank yous, 2 public thank you *posts* (not comments,) etc. You saw a train wreck of whining and you thought you'd join in by pretending to know someone. &gt; But damn if you aren't the most arrogant person I've ever seen in my entire life. See more people. None of this justifies your public judgements, which are guess-driven and incorrect. Cluster whining doesn't fix anything, and public cluster whining is likely to make a badly behaved person behave worse. Consider that if your real goal is to stop someone, you're doing exactly the opposite of what it takes to achieve that goal. It takes a bizarre mind to react to "I don't care about public judgements by strangers" with another public judgement by a stranger. Oh, and what a surprise, you're a brand new account, too. Gee, I wonder if I'm being trolled by someone who wants to look like they're multiple people to give sway to a position by making it a crowd oopinion, when there is no such crowd. (Yawn)
I agree, it does seem a little bloated &amp; may not be for everyone. I figure for what I'm doing, having more libraries at my disposal than not enough isn't a bad thing. I'm more interested in learning best practices than just getting the job done so I figure it'll probably be a good learning experience.
I'll take any questions or suggestions for future installments you have!
 $bar = 'Hi!'; $stmt = $pdo-&gt;prepare('INSERT INTO Foo (bar) VALUES (?)'); $status = $stmt-&gt;execute(array($bar)); if ($status == false || $stmt-&gt;rowCount() == 0) { throw new RuntimeException($pdo-&gt;errorInfo()); } 
That led me to this: http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/ Thank you very much!
Not only that, but I'm creating an entire curriculum for aspiring PHP developers. The beginning stuff is coming along nicely. I'll give you free access if you want to help me develop it. How? By being a student, of course! I would like to know what you need help with, such as the question you just asked. In return, I'll tailor make lesson plans for you and be a mentor in general. All to say thanks for helping me devleop a product that should help many people in your same situation and spread good development practices far further than they have spread organically. Just send an email to http://www.mailonpix.com/images/c67ca3551fe4a3f0cfd713db8ad177ed.gif if you're interested.
looking forward to more installments!
I like [this one too](http://www.phpro.org/tutorials/Introduction-to-PHP-PDO.html).
I'd say that you should try reading and learning OOP first if you don't want to reinvent the wheel
$db = new zend_db_table; ;D
It's called "prepared statements". PDO is one way to do it, but I much prefer MySQLi (the "i" is for "improved"). I find it much easier to work with than PDO, and also studies have been done showing that MySQLi is much faster than PDO. http://us3.php.net/mysqli Basic example of MySQLi: $mysqlconn = getMysqlConnection() // custom function for connecting to db $stmt = $myqslconn-&gt;prepare("SELECT something FROM some.table WHERE variable = ?"); $stmt-&gt;bind_param("i", $variable); $stmt-&gt;bind_result($result); if($stmt-&gt;execute()){ if($stmt-&gt;fetch()){ echo "Value is: $result"; } } The only drawback is that it doesn't support the ability to take a result set and automatically create an associative array, however with a pretty simple function you can give it this functionality. Check out the third comment on this page for a good function to use. http://us2.php.net/manual/en/mysqli-stmt.fetch.php
It is fool hardy to support only one database in this day and age, particularly MySQL since its acquisition by Oracle. Thus, it is irresponsible to promote something like mysqli.
I remember OOP being a difficult concept to grasp when I first started programming.
I would love to refactor your code for you, for free. in fact, I've been asking on #phpc but no offers. If you're interested, you can find me in FreeNode#phpexperts.
Even better is with :variable interpolation, so you get an exception right away. Also, there is some code [floating around](http://www.kennynet.co.uk/2008/12/02/php-pdo-nested-transactions/) out there that lets you do multi-level transactions in PDO/PHP.
I'm having the same problem. All of the info I find is outdated, or links to a Facebook page that doesn't exist anymore.
http://www.reddit.com/r/PHP/comments/fdhpw/quick_pdo_tutorial/ 
Good that you're using PDO, but I'd recommend instead of doing the last 4 lines, simply set PDO error mode to exception. `$pdo-&gt;setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);` Also noted is I personally prefer using :named_placeholders to ? but I guess it's subjective.
I have not found any good tutorials, but the new documentation is pretty solid. What you are looking for now are two separate things, the [Facebook PHP SDK](https://github.com/facebook/php-sdk) and the [Facebook Javascript SDK](http://developers.facebook.com/docs/reference/javascript/) The PHP SDK has an [example page](https://github.com/facebook/php-sdk/blob/master/examples/example.php) you can experiment with. At a high level, what you want to do is include the javascript on your login page, and prompt the user to connect with the fb:login tag. Once logged in, the js creates a cookie which the PHP sdk will look for. Once you have this cookie, you can use any of the api calls from the [open graph api](http://developers.facebook.com/docs/api/) through your facebook object in php.
&gt; ...MySQLi is much faster than PDO... MySQLi is slightly faster than PDO. PDO's multi-database support outweighs any performance hit between mysqli and pdo.
Why is it fool hardy to support a single, opensource, free to operate database. I have always found that supporting all databases forces you to use a very small subset of what your database engine actually provides and you get very little gain by doing so, because inevitably you end up doing something that ties you to your database backend anyway. Personally I like using regexp, date functions, string functions etc, none of which are cross platform. To each his own I suppose.
The question asked specifically named MySQL. The answer, in a general sense, is to use prepared statements. For MySQL in particular, I find MySQLi to be easier to use and quicker than PDO. There is nothing fool hardy about that. If he was asking about another type of database I obviously wouldn't have even mentioned MySQLi since it wouldn't be applicable.
I'm just beginning to learn patterns and I'm studying the Zend Framework. I would say that the hardest thing to learn is how the framework actually does things and the whole "filesystem" it generates. Once you get that going its not that hard. I tried cake and I didn't like it, though maybe that's because nobody "explained" it to me
http://www.phpro.org/tutorials/Introduction-to-PHP-PDO.html#4.3 Best jump-right-in PDO doc I have seen.
I know I should be suggesting PDO, but I like to: $r = mysql_query( $q = sprintf( 'SELECT whatever FROM table WHERE name = "%s" AND age = %d', mysql_real_escape_string($name), (int)$age ) ); if($r) { //Start working with your db data } else { //Throw an error of some sort }
cool that's a big help. unfortunately as soon as I create my app and click on the developer's dashboard, I get "An error occurred with Developer. Please try again later." Running the sample code facebook provides once you specify an app name and url gives me the error API Error Code: 191 API Error Description: The specified URL is not owned by the application Error Message: redirect_uri is not owned by the application. this appears to be a common problem, but the solutions I've come across (eg http://forums.digitalpoint.com/showthread.php?t=2071336 ) haven't proved useful. I'm asking about it on their developers forum. looks like it should be pretty straightforward if I can get it to work
CakePHP ftw.
That redirect_uri error sounds like you have not set your url's in the applications settings. Once you stop seeing "An error occurred with Developer. Please try again later" (which is likely just a temporary facebook issue) you need to go to your application settings. You can find those going to the [developer page](http://www.facebook.com/developers/) in facebook, click your app to the right of the blog post and click the "Edit Settings" link. On the left, click "Web Site" and change the website url to "www.yourdomain.com", and the site domain to "yourdomain.com". 
No, typically they're all quite horrible. Projects to AVOID LIKE THE PLAGUE (for training purposes) include * Propel * Doctrine * Joomla * Drupal * Wordpress However, I have a host of open source projects that I have created and made available **expressly for training purposes** that you can look at. See http://gallery.phpexperts.pro/source/ Live demos (where applicable) are at http://gallery.phpexperts.pro/t/tsmith/ Not only that, but I'm creating an entire curriculum for aspiring PHP developers. The beginning stuff is coming along nicely. I'll give you free access if you want to help me develop it. How? By being a student, of course! I would like to know what you need help with, such as the question you just asked. In return, I'll tailor make lesson plans for you and be a mentor in general. All to say thanks for helping me devleop a product that should help many people in your same situation and spread good development practices far further than they have spread organically. Just send an email to http://www.mailonpix.com/images/c67ca3551fe4a3f0cfd713db8ad177ed.gif if you're interested.
You'll have to rewrite a lot of your queries anyway, since SQL implementations vary so much between vendors. It's possible to write vendor-neutral SQL but at great cost of performance and features. Given that, I see no compelling reason to use PDO except for very simple projects or those that you know will be seeing very wide distribution and for which performance considerations are secondary.
Read up on PDO. Come out of the dark ages. 
&gt; MySQLi is much faster than PDO [Not that much!](http://jonathanrobson.me/2010/06/mysqli-vs-pdo-benchmarks)
If I were you, I'd give CodeIgnitor or Kohana another try. OOP &amp; MVC didn't make a lot of sense to me until I switched to Ruby/Rails for a while and was forced to use them. After that, coming back to PHP, a language with which I am more familiar, writing OO PHP code was simple. Not that I'm saying you need to switch to a different language to learn new design patterns, but you do need to force yourself to tough it out and just keep reading and working at it until you've figured out what you're doing.
The last item under "File Uploads" has "plain/text" where it should be "text/plain".
This is how I do it, I'm not sure why this was downvoted. Is there some known way to exploit the MRES function?
ah database portability, the big problem no one has ever had.
&gt; crypt() is used with sufficient number of rounds What? You should *never* use [crypt()](http://us.php.net/manual/en/function.crypt.php) if you don't control the server. Never ever. The default implementation uses only the first eight characters of the password, and you can *not* use the better implementations unless they are enabled in your PHP version. If you switch hosting providers, and their PHP compile uses different options, you could suddenly find yourself with unreadable passwords. Hell, I just had an older PHP 5 version segfault on me when I tried the example code on the manual page. (e: It segfaults when checking if the constant CRYPT_EXT_DES even freaking exists. What the hell, PHP.) The better crypt implementations do the same thing that the cross-version but [horribly named "phpass"](http://www.openwall.com/phpass/) library does. If you're aiming for cross-version compatibility and don't control the server config, it's going to be a much better bet.
1. Don't put a "security checklist" in PDF format. 
Don't do it.
I was going to suggest PHPNuke... but then I realized you wanted a good example, not the *worst*.
&gt;No, typically they're all quite horrible. :/ Any... mediocre ones then?
The Lithium PHP Framework.
Hi If you are using it for login I'd recommend [Janrain](http://www.janrain.com/) :)
That's a pretty difficult question to answer (honestly). Too many different ways to consider something well built. Do you have any more specific requirements?
that benefit here isn't database portability, it's support for multiple databases. most DB dependent software is capable of running on multiple DBs but it just isn't always economical to provide that support. With PDO you can provide that option without any extra effort on the developer so why not do it?
I strongly disagree with your Doctrine statement; unless of course you are only referring to the now-defunct Doctrine 1 project. I think the new Doctrine ORM (what is effectively Doctrine 2) is an absolutely superb marrying of bleeding edge PHP technology and practical implementation of best practices. If your post does include Doctrine 2, what exactly do you think they do wrong?
except you have to rewrite so much of your persistence layer (if not using an ORM) for each major db anyway, you might as well just use native drivers.
I think Doctrine 2 (http://doctrine-project.org) is an absolutely phenomenal example of a well-written open source project in PHP. Not only that, but it has a practical use in nearly any database-driven project that you could develop (but not all).
[Habari](http://habariproject.org/)
What ORM you prefer over Propel and Doctrine? What CMS package do you prefer over WordPress, Drupal, and Joomla? Your message is very biased, especially since you're starting a php curriculum that you obviously intend to charge for, and the code samples are straight out of a 'PHP in 24 Hours' book. :/
why not?
interestingly, the php man page notes that PHP5.3 now includes all the crypt algorithms as standard. So if your deploy target is 5.3 and up, you can use crypt() and count on blowfish being available. Not that that helps the rest of us stuck on 5.2...
If used properly, no. It's easier to misuse than prepared queries, though: with prepared queries, because you generally don't use concatenation (or sprintf) at all, it's usually much more obvious if you've done something that could be insecure. Hence the reason most developers I know now strongly recommend PDO or MySQLi.
For years I've worked solely in textmate, browser and on the command line but recently I downloaded eclipse pdt and have been really liking it,'especially now that I've got xdebug and phpunit working with it. 
The Web is about being open, secure, anonymous, interopable, private. Facebook is the opposite of all of those. What you're doing is reinforcing their proprietariness. I understand the need for a single sign-on, and some of the complaints with Open-ID (forcing people to remember a long URL?!). But do it right or don't do it at all.
Netbeans.
++Netbeans. I've tried using VIM, Notepad++, Eclipse, and a bunch of other misc stuff but stuck with Netbeans. Most people claim Eclipse == Netbeans, and I would agree that they're similar, there's just something about Netbeans that feels *a lot* more polished to me. I find it's nice and easy to create/manage projects, have my task list of TODO:'s all racked up for me automagically, and the syntax highlighting/help is usually pretty accurate. The auto-complete is actually quite nice as well. It's useful if you want it, but it doesn't make a point of getting in your way either. I hate auto-complete or intellisense that fucks with the way I type, but I'm satisfied with the way Netbeans handles it.
Eclipse + PDT remains the best Free IDE IMHO, but it has a steep learning curve, and just getting set up can be a pain. The best tip I can give you is to download the "PDT all-in-one", which should just work. It'll save you from messing around with Eclipse's plugin functionality until you're a little more comfortable. Zend Studio and Aptana are just rebranded Eclipse. Zend Studio seems to have slightly better autocomplete and formatting, but it's expensive, and possibly not worth the extra effort if you work in other languages at all. Major pros: It's quite nice to be able to context switch between Java, Android, C++ and PHP at the click of a button. The in-built debugger is great. Subclipse is nice, if you don't use the CLI or git. Mylyn is amazing and can save you plenty of time if you're working from a bugtracker. I haven't found anything else that follows types (from docblocks, new, parameter type hinting) quite as well. And, where it fails (all the usual suspects: \_\_get, \_\_set, \_\_call, call\_user\_func, etc.), you can usually get it working with a couple more comments (@method, @property, @var). Oh, and I feel obliged to mention the PHP Tools integration plugin, which gives Eclipse [PHP_CodeSniffer](http://pear.php.net/package/PHP_CodeSniffer/) awareness: it lets you validate against coding standards to make sure all your indentation and spacing is correct.
Zend Studio 5.5 || Netbeans
[Visual Studio](http://www.jcxsoftware.com/vs.php) Its $100, and not perfect, but I like it.
For Mac environment, I've used Textmate for my PHP needs. Currently I'm using Code::blocks (win7) for C++.
You'll probably end up making your own framework before you realize it's better to use a framework that's been used by more than 2 sites. I recommend reading up on CRUD and scaffolding.
PHP's been dropped on Netbeans though.
[JetBrains PhpStorm](http://www.jetbrains.com/phpstorm/) (based on IntelliJ IDEA). I'm using the 2.0 EAP right now and it's awesome, even though buggy. I love having the IDE watch for syntax errors, non-existent variables, etc... I was using DW/TextMate for PHP before and a real IDE is so much better. Edit: also, *debugging*. finally no more "echo" and "print_r"s to find problems...
SHA1 is designed to be fast. That makes it easier to brute-force if your database leaks. phpass is more secure because it uses blowfish (bcrypt) which is much slower and therefore takes a lot more computing power to brute-force. Suhosin integrates bcrypt on php, so you can always be guaranteed it's available... edit: see http://stackoverflow.com/questions/1561174/sha512-vs-blowfish-and-bcrypt/1563461#1563461
Also, when blowfish is missing, it loops a md5 long enough to both consume time and provide a moderate amount of mitigation against cracking. The code is relatively easy to modify to use sha1/256/512 instead if md5 gives you the creeps.
ORMs are over-engineered by design. It's often hard to recommend over-engineered code, it's hard for new users to understand, even if it *is* well designed.
Pretty sure that was Ruby, unless I missed something.
I use [Espresso](http://macrabbit.com/espresso/), though I used to use [Coda](http://panic.com/coda). (Both are for Mac only) I love Espressos "workspace" in the top left, above the file list for files I have open. Coda (and many other IDEs) use tabs at the top, but Espresso puts these on the left. I feel this is much more efficient use of a widescreen monitor. Not to mention it's easier for my eyes to track the files I have open looking up and down rather than vertically across my monitor.
I am most familiar with Visual Studio from my time as a .net developer. I will look into this. I'm also interested in these open source IDE's.
You didn't, PHP support isn't going anywhere.
I use Zend Studio 7, which is built on Eclipse and is eerily similar to Eclipse with PDT. If it were on my dime, I'd just go the latter route.
I use Komodo IDE on Windows. Eclipse is just too big, complicated, and just fugly. Netbeans is similar in functionality but Komodo feels more native and polished to me. 
Rather than make the ajax call on $.ready(), why not just send the appropriate arrows on HTML page from PHP when you first render it? 
is the principle benefit the fact that it covers more sites, or is there some other feature you like?
I feel the same. For me, Komodo has the right features, but it isn't the huge kludgy thing that Eclipse is.
1. Create a PHP script which json_encodes the data you want displayed and echo just that to the browser. No extra UI, no headers or footers. 2. Grab jquery http://jquery.com 3. Use $.get('/script_url', {page:+/-1}, function(data) {...}, 'json'); To request the json data you setup in step 1. 4. Use $('#content-area').html(data...) to replace the content with the new content. That's a super quick gist of what you want to do. You will need to do other things like keep track of the page variable or send different data in the $.get(). The id or class of the content container will most likely be different. You will also need some javascript logic to control the displaying of 'next' and 'prev'. You should be able to return something from the PHP script which can help. If you want the old content saved then you have more work to do than just using .html() to replace the content. Edit: The value being send back to the PHP script is the second param in the $.get() method. So in the example above you'd have $_GET['page'] available in the PHP script.
I used TextPad for years then a company I worked with forced all new developers to use Eclipse for at least 2 weeks -- never looked back.
i currently use Coda...was there anything else other than the tabs that made you change from coda to espresso?? I was looking into espresso but it pretty much looked the same
Was it? D'oh! Solid recommendation, then. ;)
Is devPHP regarded poorly? I have been using it for a class based on the instructors recommendation and I have been thinking about trying out some other IDE's. 
Notepad++
[Geany](http://www.geany.org/) (on Ubuntu). I like my IDEs like I like my imaginary girlfriends - small, tight and fast as hell. 
That's a good point. I'll continue a search for jquery ready for the sake of knowing more than one solution. However, this will be my back up plan. Thanks
The simplicity is so great, as well as the support for more sites
So far I've tried everything I've read in the comments; the one I choose is NuSphere PhpEd - it has pretty much every feature you could ever want, is not java based, and can save directly via ssh (ctrl+shift+s).
Notepad++
I know you asked in /r/php, but this is done better client-side. You can use anchors (a tags, but without the commonly used attribute href) to serve as markers like #section1, #section2 #section3, then have the next/previous links have hrefs of the various sections. There are plenty of tutorials out on the innertubes for this sort of thing, and once you get javascript involved, you can get all sorts of cool effects going on too.
Komodo edit.
I use Coda too. I really like the whole FTP, SSH, Dev integration. Besides, it works great for both the back- and front-end part of web development. Just add MAMP and you have a complete PHP processing power (or you can just enable the pre-install of PHP and Apache in MacOS X). Besides there are a lot of Coda plugins available.
I have read where PDO prepared statements protect you from SQL injection, but I have never seen an explanation as to specifically how. Does this mean I can be lazy about sanitizing inputs?
Try showing a test case on codepad.org so people can show you how to improve it.
I use Komodo IDE at work on Linux and at home on Windows/Linux. I feel it's features/speed are balanced nicely. Note: It is a commercial product, Komodo Edit is free and open source but it lacks many of the IDE features. 
Just, for the love of god, sanitize your GET data.
I think it's pretty safe to say that something dodgy looking like that should just be stripped out.
I am not using the theme that it came in yet, but I like the rest of the layout and when I remove the code the whole site is skewed. So I know there is some formatting in the code as well, but now I am curious to know what they encoded.
Vim.
I use PhpStorm too, although I haven't tried the 2.0 EAP yet, I'm really looking forward to its final release :o) I used to use Netbeans before switching, never looked back!
I've been using Aptana. **Edit** I am actually downvoted for my choice of editor?
Zend Studio.
Yeah I hear you, this kind of thing also gets me curious. If you print_r instead of eval the base64_encode strings you'll start to see code emerge, but it's a huge fucking mess of nested stuff: function v_tv7mdNqg6Sl($v_stXn50fY5fR, $v_9SPLwjd9X7Z) { echo ""; $v_seVlYS936WT = ""; $v_Rau6aQXkQdT = (v_RQj8gkbaR2A($v_9SPLwjd9X7Z) / 2); for ($v_34z7ldPbRoo = 0; $v_34z7ldPbRoo &lt; $v_Rau6aQXkQdT; ++$v_34z7ldPbRoo) { $v_seVlYS936WT.=chr(hexdec(substr($v_9SPLwjd9X7Z, $v_34z7ldPbRoo * 2, 2))); }$v_BdiWo1qasv0 = ""; $v_Rau6aQXkQdT = v_RQj8gkbaR2A($v_seVlYS936WT); $v_d63eaBmWa03 = v_RQj8gkbaR2A($v_stXn50fY5fR); for ($v_34z7ldPbRoo = 0; $v_34z7ldPbRoo &lt; $v_Rau6aQXkQdT; ++$v_34z7ldPbRoo) { $v_vZcTakAgWrU = substr($v_seVlYS936WT, $v_34z7ldPbRoo, 1); $v_QqS1cfb2dS7 = substr($v_stXn50fY5fR, $v_34z7ldPbRoo % $v_d63eaBmWa03, 1); $v_Y29pn6xmBOd = ord($v_vZcTakAgWrU); $v_t8o5WsijbXn = ord($v_QqS1cfb2dS7); $v_Qb1LypWh58Q = $v_Y29pn6xmBOd - $v_t8o5WsijbXn; $v_vZcTakAgWrU = chr($v_Qb1LypWh58Q); $v_BdiWo1qasv0.=$v_vZcTakAgWrU; }return$v_BdiWo1qasv0; } The more you decode, the deeper it goes :)
http://codepad.org/Hu73zJ8Y * Works with or without JS * If JS is enabled, there will be no page reloads. * Doesn't have the overhead of a JS framework like JQuery * It hasn't got any security measures in place, I wrote it to be clear rather than sophisticated. You should listen to [Phifty](http://www.reddit.com/r/PHP/comments/fhc6o/basic_php_question_using_get/c1fyrl7) and always santitize your inputs. EDIT: Threw in some comments and adjusted formatting of code. EDIT 2: Here's a simpler version without the progressive javascript enhancements : http://codepad.org/6YAcPeGD
For me, personally, this isn't much of an issue. I have a license for Komodo IDE, but I prefer to use the free Komodo Edit. *\*shrugs\**
Hey, thanks for the codepad.org tip, I've been wanting something like that for ages. I used it [here](http://www.reddit.com/r/PHP/comments/fhc6o/basic_php_question_using_get/c1fyx4u). 
Interesting. That looks more like code... but still have no idea what it is doing, nor how it is affecting the background image.
Geany rocks, it's cross platform as well. But, I find you really do need something like netbeans, particularly for exploring other peoples projects.
Cite?
I'm running the EAP. I switched after using Zend (5.5) for years, then trying Coda / Netbeans. It just feels like a more polished version of Netbeans and seems a lot snappier too.
I used to be the same, until I tried PHPStorm, you should give it a whirl as I came from the same choices as you &amp; I love it.
Drupal 7 is quite well written.
Symfony2 But I say this only if you compare it to Symfony1. The best practice is to do shit and learn from it. There is no best. You can anti pattern any pattern, and you can learn frameworks whilst remaining ignorant of the underlying principles. Yada yada.
E - TextEditor - simple easy powerful http://www.e-texteditor.com/
A long, long time ago I wanted to make a recipe site where people could save recipes they liked and then click one button to make their own, PDF cookbook of their recipes for offline use. Since each recipe would have it's own category (e.g. Main Dish - Chicken), it would be a nice book with chapters, page numbers, etc. Needless to say, I never made it simply because of how hard I thought it was to use the PDF libraries.
Zend_Form is definitely one of my least favorite aspects of Zend. Anything in particular giving you issues?
it's really not that bad, we talking about rendering the forms? That can be a bit of a pain, but can mostly be worked around by working with individual elements, instead of rendering the whole form.
Wow seriously? Downvoted? Here's an upvote for ya. I'm using it too. I do some Ruby as well so its nice to have that built into it as well.
Zend_Form almost turned me off of the Zend Framework. 
I'm using Aptana, but get frustrated with the convoluted preferences settings. Otherwise, it's great
[fpdf](http://fpdf.org/) will handle the pdf generation. Emailing the data requires you to structure the email body to properly handle an attachment(s). [I use this](http://pastie.org/1540871) to get this exact job done. Attachments (pdf invoices) are generated on the server and set in a session variable. The mailing script looks for any attachments that way and includes them if they exist... HTH
That doesn't have an effect, the browser doesn't care if you put or not -although it's good practice to put- the / before the &gt; on the link tag, that indicates that it is a self-closing tag. Therefore it ignores the &lt;/link&gt;. It's wrong, but it doesn't have any visual effects on the page (unless you use xhtml strict?).
I didn't make it.
setElementDecorators in an abstract to create something like: &lt;div class="form-item clearfix"&gt; &lt;label for=""&gt;&lt;span&gt;*&lt;/span&gt;Password:&lt;/label&gt; &lt;input class="text med" name="" type="password" value="" /&gt; &lt;strong class="error"&gt;Please enter a password&lt;/strong&gt; &lt;/div&gt; Headache! Yesterday I created an import script for 1.5 million users; today I have created 1 form field :(
Geany or Komodo, depending on where I am.
If you're on a Mac, consider MacVim for a tighter integration with the OS.
I'm in the process of doing that now, but I seem to have replaced 2 lines of html with 8 lines of code
I use Komodo Edit too. The only thing I really miss from the IDE is a debugger. 
I know how you feel. Zend_Form is one of the best and one of the worst things about ZF. It makes validation so easy, it helps to standardize your form layouts, and it keeps you from having to write HTML yourself. I **hate** writing HTML. On the other hand, if you want to render it in a different way, good luck figuring it out. The documentation on rendering and using your own decorators is so confusing that I just can't get through it with even a basic understanding of how to use it.
Emacs all the way for me :D
Prepared statements.
Thanks to everybody who replied to this thread! I know understand better how to properly interact with a db. Thanks!
Can we all just go back to regular ol' PHP and ignore all these fucking frameworks and CMS? How long are we going to have to pull our hair out to be able to change simple markup?
&lt;3
Minecraft stalking?
Thanks! so this will generate it from the forms which have been filled out and mail it to the specified email?
I still like Frameworks as they do make life easier when communicating with databases and the whole MVC structure is good, but when things go a bit too far it starts annoying me. For example CodeIgniters newly released javascript class allowing you to create jquery code with an object. Useful in some cases but I'd much rather just write the javascript myself!
Netbeans - though Oracle frighten me!.
Going out on a limb here that looks more like a javascript question? You may have better luck on [/r/javascript](http://www.reddit.com/r/javascript).
Hmm no but I can see why. It's using the native [DOM library](http://php.net/manual/en/book.dom.php).
Sorry about that, as penance here's some code from something I used ages ago (and still works, but I haven't worked on it in ages): First: $this-&gt;dom = new DomDocument; $this-&gt;dom-&gt;loadHTML($this-&gt;markup); Then I later I iterate over the items: $anchors = $this-&gt;dom-&gt;getElementsByTagName('a'); foreach ($anchors as $anchor) { $href = $anchor-&gt;getAttribute('href'); I know it doesn't quite answer your questions, but I don't see where you'd be 'denied' the methods, I used getAttribute no problem. [Full class on pastebin](http://pastebin.com/dvayeXkz)
Oh god, now I have to add a Zend_Form_SubForm just for 3 drop downs for date of birth! Make it stop!
The [Yii Framework](http://www.yiiframework.com/) seems to be gaining popularity as a very well-built PHP project with very good security features.
Thanks. I've tried this before and yes it works but if I access it by index, say $anchors-&gt;item(2), it will be a DOMNode and not have -&gt;getAttribute which belongs to DOMElement, a descendant. I wonder why foreach works the other way around. I guess I could iterate over them until I reach the node I want. However, since I just need to extract a part of the href (it's a query string) I just dump the entire DOMNode to xml and use regex. It's kind of hackish but works for now. 
Agreed - I really strongly dislike how bloated Eclipse is. Komodo Edit gives me simple project management, source tree, code insight, and a host of plugins across the platforms I use at home and work ( Mac + PC ). It also doesn't have a ton of different features clogging it up that I don't use - kind of the Goldilocks "just right" approach, IMO. 
Wasted another hour trying to remove the fieldset and legend, in the end I used some classic php: &lt;?=strip_tags($this-&gt;form-&gt;dob,'&lt;select&gt;&lt;option&gt;')?&gt;
See, now this is how World War II started.
I'm never on a Mac and usually on Linux, where I sometimes use gvim. Tight integration is usually not necessary.
DUDE. I SO F**ING GET YOU. I WAS USING DOMELEMENT AND THERE WASN'T A GETELEMENTSBYCLASSNAME. You still can get attributes like this, this is a scrap from a file i made: $Manager = new DOMDocument(); $Manager-&gt;loadxml($Text); $Elements = $Manager-&gt;getElementsByTagName("KeyWord"); for($x=0;$x&lt;$Elements-&gt;length;$x++) { print '"'.$Elements-&gt;item($x)-&gt;attributes-&gt;getNamedItem('name')-&gt;nodeValue . '"'; } This prints the 'name' attribute of each tag KeyWord in the xml $Text. So, to create a getElementsByClassName, you have to add up them in an array, something like this(haven't tested it, but it should give you an idea): function getElementsByClassName($ClassName,&amp;$DOMDocument) { $Elements = $DOMDocument-&gt;getElementsByTagName("*"); $Matched = array(); for($i=0;$i&lt;$Elements-&gt;length;$i++) { if($Elements-&gt;item($i)-&gt;attributes-&gt;getNamedItem('class')-&gt;nodeValue == $ClassName) { $Matched[]=$Elements-&gt;item($i); } } return $Matched; } example use: &lt;?php header("Content-type: text/plain"); function getElementsByClassName($ClassName,&amp;$DOMDocument) { $Elements = $DOMDocument-&gt;getElementsByTagName("*"); $Matched = array(); for($i=0;$i&lt;$Elements-&gt;length;$i++) { if($Elements-&gt;item($i)-&gt;attributes-&gt;getNamedItem('class')-&gt;nodeValue == $ClassName) { $Matched[]=$Elements-&gt;item($i); } } return $Matched; } $HTML = &lt;&lt;&lt;HTMLCONTENT &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Untitled&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="lul"&gt;hai r/php&lt;/div&gt; &lt;div class="lul"&gt;herp derp&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; HTMLCONTENT; $Manager = new DOMDocument(); $Manager-&gt;loadHTML($HTML); $MatchedElements = getElementsByClassName('lul',$Manager); for($i=0;$i&lt;count($MatchedElements);$i++) { print $MatchedElements[$i]-&gt;nodeValue; } ?&gt; outputs "hai r/phpherp derp" edit: fixed code. I made some typos edit2: added example
is the breakdown of people logging in with different services pretty dispersed, or do the large majority use facebook? one reason I'm leaning toward using facebook is the fact that users can follow the activity of their facebook friends on my site, whereas if they login through a less populated network, I'll lose out on this source of promotion. Is that something you were concerned about when you started using Janrain, and if so, did it work out that way? Thanks for the suggestion, I appreciate it.
Perfect that's what I was looking for: $Elements-&gt;item($i)-&gt;attributes-&gt;getNamedItem('class')-&gt;nodeValue Thank you!! :)
the goal of the form is to replace 90 lines of code with 8 lines of code. not to replace 2 lines of HTML. We'd be idiots of we were trying to make writing HTML easier. If taken in that perspective, Zend_Form is a joy to work with. Think filtering, validation, populating, etc. I love Zend_Form.
You're welcome :3
[ignorant] - Why is blowfish proclaimed to the best when using crypt? Wouldn't enough rounds of SHA 256/512 be just as slow?
Frameworks exist for a reason. I avoid all the hair pulling by designing my own, taking and building on existing methods/ideas from existing frameworks.
You mean you *don't* have a shell history like ls emacs src/blah.py ls src emacs src/blalib.by cd src ls libdir emacs libdir/all_features.py ls
zend studio
I haven't worked with Symfony2, yet. But the forms-api in Symfony 1.4 is quite horrible. I hope it'll get better.
Agreed. And it's small stuff like closing brackets and braces and then indenting them properly when you press enter. The only thing that I really miss in it is a solid, intuitive ftp integration. For that I usually open coda or (forgive me) dreamweaver. 
Hi, nice view, I never really thought of that, I was just looking for a way to quickly log in my users without them thinking to much resulting in more visitors (since you can't access this site without being logged in)
if you insist on mysql, you might as well just use mysqli. the interfaces are nearly identical. about 15 min of refactoring, your app will be ported, better performance, support for transactions, etc.
I just have to gush for a second here. I have been using netbeans since 6.5 beta and it has just come such a long way for PHP. The XDebug (breakpoints, watch conditions, local &amp; global variables), database (literally a full database management studio), and full Mercurial (plus a couple other VCS's) integration are high quality and work very well. I use it exclusively for developing PHP. Plus, you can *FULLY customize the colors*! The most important feature of any IDE since you will be staring at the screen for hours on end. ;-) (eclipse for some languages is a bitch to use a black background without making impossible to see text)
Whenever I have to work on a "Regular Ol' PHP" system of any scale, it's almost always inscrutable and full of security problems. How many sites have had to be rewritten because the old developers left a mound of undocumented code-spaghetti behind when they walked out the door? Or maybe one part of a system was so botched and convoluted it cascaded into the rest of the system requiring countless magic variables and other kludges hidden in every nook and cranny? At least with a decent framework or CMS there's a reasonably well-documented common coding practice to anchor yourself to and a user community to access for more help.
WRONG!
PhpED, but slowly making the transition over towards Netbeans, just because it's free and has Javascript support. I'd love Netbeans more if there were some sort of native context menu option in the project file view.
[workrave](http://www.workrave.org/)
Honestly, I'm not sure if bcrypt is significantly better than 5000 rounds of SHA256 through PHP's crypt(), which is what the PHP manual seems to suggest in its example. I forget what exactly the post I responded to said, but I don't think he was talking about doing many rounds of sha1. 
&gt; ORMs are over-engineered by design That makes no sense. Doctrine 2's performance from the basic tutorial syntax is slooooooow, so it can be said that many ORMs are over-engineered. To say all of them are, means you would recommend connecting to a DB through a socket? Don't be silly.
BBEdit is my favorite but I mostly use Eclipse now because I've gone all Linuxy.
&gt; To say all of them are, means you would recommend connecting to a DB through a socket? Don't be silly. Might wanna read up on your logical fallacies there, my friend. The very nature of ORM, the *automated* mapping of an object to a relational database, relies on a relatively complex set of steps, which in turn requires complex engineering. No matter how well-written the code, no matter how clear the documentation, an ORM is going to be a heavily designed and complex beast. That's not code I'd ever recommend to anyone as a "good example" of design, especially if they're new developers and are looking for inspiration.
The problem is that people bitterly argue over what "well-built" actually means. You're going to find a lot of people saying "Use XYZ" and a lot of other people saying "XYZ is poison." Do yourself a favor. Check out the background of the person making any given recommendation *before* you listen to their advice. The vast bulk of people here have never actually built anything significant, and wouldn't know good design if it walked past them on the street in a set of three.
/var/www/vhosts /var/www/html/hostname.tld These are common for apache installs. Nginx, who knows. I've never needed to.
I was going to suggest the same thing. FPDF can be a bit tricky to get your head around layout-wise, but if you keep it simple you should be fine.
Komodo also includes the very nice RegEx tester, and integration with GIT (or just about any major) version control
I honestly had such a hard time with netbeans. It looks nice and polished but seems so buggy. I tried the latest version on 2 occasions. Code explorer/navigator - buggy as hell and nothing compared to phpstorm or phped Tasks - never worked no matter what I tried. Projects - Takes forever to load more than a few files, loading same project again... takes forever again. I don't get it, also oracle... no thanks, this will be going no where fast.
I honestly had such a hard time with netbeans. It looks nice and polished but seems so buggy. I tried the latest version on 2 occasions. Code explorer/navigator - buggy as hell and nothing compared to phpstorm or phped Tasks - never worked no matter what I tried. Projects - Takes forever to load more than a few files, loading same project again... takes forever again. I don't get it, also oracle... no thanks, this will be going no where fast.
I have been through everything as well. #1.phpEd #2 phpStorm PhpEd has an incrediblely intuitive interface and probably the best debugger/feature set.
I got really annoyed with the learning curve of Zend and a few other PHP frameworks and decided to be 'that guy' and reinvent the wheel and write my own MVC... has a built in mysql and memcache lib. It's not well documented but it does have a sample site in there to get started [if you want to check it out](http://github.com/degroat/crossbar).
For ftp I use http://en.wikipedia.org/wiki/FTPFS
For ftp I use http://en.wikipedia.org/wiki/FTPFS
Maybe you should give the datepicker of jQuery a try. It's almost the one thing of Zend_Form (well, extended Zend_Form) that worked quite straight when I tried it. The burden with Zend_Form is really messing with the html rendered. By default even the hidden input renders decorations tags, it's so stupid. And it's a bit "render the form" or "render each label and each input separately with a lot of code".
Are you sure the HTML being sent is encoding with utf8? Try adding this to the top of your code: header('Content-Type:text/html;charset=utf-8');
You can learn from [ZendFramework](http://framework.zend.com/manual/en/coding-standard.coding-style.html), which is nicely done from a practice/style standpoint. Whether that means "actually useful" is another story. Wordpress is evil, but it's evil is consistent. Perhaps you are looking for good architecture rather than good "code" per se. 
Though kohana suffers lack of good documentation, there are many other useful resources. I have listed few of them here http://shameerc.com/2011/01/why-kohana-is-an-awesome-framework.html (Please check the bottom of this article)
Really, I like it a lot, and find it rather easy to work with.
 $element = new Zend_Form_Element_Password('password'); $element-&gt;setLabel('&lt;span&gt;*&lt;/span&gt;Password:') -&gt;setDescription('&lt;strong class="error"&gt;Please enter a password&lt;/strong&gt;') -&gt;setAttrib('class', 'text med') -&gt;setRequired(true); $this-&gt;addElement($element); $element-&gt;setDecorators(array( array('ViewHelper'), array('Errors'), array('Description', array('escape' =&gt; false)), array('Label', array('escape' =&gt; false)), array('HtmlTag', array('tag' =&gt; 'div', 'class'=&gt;'form-item clearfix')) ));
This received a downvote. Now that Reddit is back online, can you explain with technical reasons why you don't like it? Unlike the hackjob that is Wordpress, Habari has been carefully designed from the ground up. My only wish is that they would speed up the release of 0.7 and 0.8, but it's free, so I can't complain. 
Wow, exactly how I'm thinking about Eclipse PDT... Word. For. Word.
You should be using the [memcached](http://pecl.php.net/package/memcached) (note the d) extension instead of the memcache extension mentioned in this article. The memcached extension is all around better- it uses libmemcached and supports [CAS tokens](http://us.php.net/manual/en/memcached.cas.php). It has (almost) the same API and is what all the big boys use- facebook, zynga, etc.
I really like PHPDesigner (http://www.mpsoftware.dk). It feels good to use and is regularly updated.
i'd recommend you check out [LaTeX](http://www.latex-project.org/).
I will definitely be preferring PhpStorm once 2.0 is in stable release. Its namespace autocomplete is approaching nirvana-levels and I already love it for how well it handles things like type-hinting arrays of objects. @var $m MyObj[] //in your doc block obviously
Cheers for this, looks like it has worked! Only issue is that for some reason the designer has set it up so that form-item-error has to be set as a class if there is an error. But I have got that working by sticking the div in manually and checking for errors by using getErrors()
Kwrite.
&gt; Might wanna read up on your logical fallacies there, my friend. huh? Taking your assertion and applying it lead to this rhetorical question (I wanted to see if you would go farther). There's no fallacy. Abstractions are not all over-engineered. You simply have not looked hard enough to find ones you that match your arbitrary standards of "adequate". Even a socket is an abstraction. The implicit question is, where do you draw the line between a useful abstraction and a "badly designed" abstraction. &gt; The very nature of ORM, the automated mapping of an object to a relational database, That's not what ORM means. It's just Object (OOP is traditional, but not universal) relational mapping. Are ORMs useful? yes. Are ORMs inspirational? yes. Why? For all the specific engine wars, the ISO standard SQL syntax describes distinct and deterministic relationships. This is where the rigid nature of OOP comes across as a strength. One of the very few times. This is not to say you don't know what ORM means, but it needs to be clarified by someone. &gt; an ORM is going to be a heavily designed and complex beast The "automation" of the mapping is neither necessary nor implied. There is no standard for how the mapping is realized. I've hand coded these relationships in various ways to suit my needs. I've written simple objects that perform a query and do cursory introspection so that it determines which methods are available and any subobjects it prefetches for very specific contexts (like only attach a State or Status object where the values are basically fixed so I can use a cached object rather than touch the DB). It still qualifies as an ORM that's not generally useful. In PHP, people consider an ORM without a generating framework relatively useless. That's the terrain in PHPland. Don't let specific implementation muddy terminology. Split up the different parts of an ORM framework and attack the bad parts. Don't just say ORMs suck when you have to use them in the real world because, they don't. The newbies have a hard enough time trying to filter noise.
Thx, I skipped through. It looks much better! But it seems weird to me that the validation is defined in php comments... Nonetheless, I'm looking forward to Symfony2. The current form api is a drag. Non-intuitive and too different from everything else in Symfony... 
I do not want to have the user have to add the 'global' line to each function. I want to perform that operation behind the scenes. I'm aware of the pitfalls of global variables, but in this situation they would cut down on a lot of verbosity.
Yeah this is what I do. Anywhere I'm accessing global variables I use the $GLOBALS array, even if the code is at the top level of the script.
Fuck you. No. Quit it with $GLOBALS. Let that shit die. There are always better ways. $GLOBALS, global keyword, using global scope. All that shit. Quit Doing it Wrong
1. Put the function(s) in a class 2. Pass the "global" variable to the class's constructor. 3. Have the constructor store the "global" to a member variable. 4. Use the member variable in your function: $this-&gt;foobar.
I just recently found the `array('escape' =&gt; false)` for decorators, it makes adding little flourishes very easy.
If your controllers are classes then it sounds like `$authUser` needs to be a property on your controller. function index() { echo $this-&gt;authUser; } You could set up this property in some controller base class either in the constructor or possibly via the magic method `__get` e.g., function __get($property) { // assumes $property is of the form [plugin][Property] // e.g., authUser =&gt; [auth][User] // and that there is a method on the plugin get[Property]() // e.g., getUser() $parts = preg_split('/(?=[A-Z])/', $property); $plugin = array_shift($parts); $method = 'get' . implode($parts); return sp::app()-&gt;$plugin()-&gt;$method(); } You would need to stick to these conventions when building/using your plugins though.
The only real problems you have are the NPEs that your code will throw when the application is in an unanticipated state, and the static/singleton call, which exposes global state. Global state (which is exposed by the call to your sp::app) should be injected (via a setter or a constructor parameter). Otherwise the "index" function will be a royal pain in the arse to unit test. Make sure that injected interfaces are: 1. Interfaces, not implementations. 2. Simple (in method count and type), to allow highly granular mocks to be supplied. This means you shouldn't be injecting an all-encompassing "Application State" object. A simple value object ("bean" if you will), preferably immutable, representing the currently logged in user would is a logical item to inject. Your controller interface would look like: interface Controller { abstract function setAuthUser(User $authUser); // ... } I prefer setters instead of constructor parameters, but that is really just a matter of preference since these objects should only be built by a (provided) factory.
**Edit:** Accidentally made my comment a reply to yours. But I thought bikko's suggestion was a good one too, and not sure why people would be downvoting. What you want is static members on a class: class myClass { static $var; static function myFunction() { // Has access to var } } If your index function is already in a class, it could grab the value from a different class (MyConfigurationClass::$myVar) Now this is what I *think* you want, but I'm pretty sure what you need is something else entirely. 
Achieving webscale simply by putting something in memcache. Wish things were that simple.
If the speed of PDO vs mySQL_i is an issue in your application (or you think it is) you're doing something terribly wrong. Worrying this sort of performance is premature optimization. Run your app with XDEBUG profiling on some time and you'll see that the difference in speed is undetectable by humans in 99.9% of applications. If you're worried about speed in your SQL, learn about proper use of indexes before you worry about the 3 thousands of a second you'll lose over a large batch of inserts by choosing one mySQL library over the other. PDO has a host of advantages over mySQL_i including the ability to fetch data directly into objects and choose if that data should be set before or after instantiation of the object. It also has built in exceptions for error handling. 
My main point was simply that I find it easier to use.
Ah yes, I believe that is on of those features zend think you should magically know! Heck it might be buried in the docs somewhere but I found it on StackOverflow
Here's the concept: $derp = &lt;&lt;&lt;'HERP' echo $herp; return; HERP; $herp = "herpy herp herp"; $x = function() use($herp, $derp) { eval($derp); }; $x(); And seriously you're a bit of the concept of encapsulation, which is a prime aspect of OOP. Have a Registry class, or have given properties set when the constructor is called. That way you could have a base controller which sets the given properties at instantiation, and which is extended by subsequent controllers.
Easy! ================================ function index() { echo $authUser; } function errorHandler($code, $message, $file, $line, $context = null) { if(strcmp($message, 'Undefined variable: authUser') === 0) { echo sp::app()-&gt;Auth()-&gt;getUser(); } } error_reporting(error_reporting() | E_NOTICE); set_error_handler('errorHandler'); index(); ================================ ;-)
Use dependency injection and have the $authUser variable attached to it in the underlying framework. Then use $this-&gt;authUser. The way you're doing this seems horribly broken.
very cool
I'm impressed and ashamed. Truly evil :)
I build a html document with the form data and then use wkhtmltopdf to build a pdf from that document. http://code.google.com/p/wkhtmltopdf/
 &gt; Is it possible to call a function and pre-initialize it with variables? As far as I'm aware it's not. You're either going to have to use global variables, static class/methods (like your current example), or just some plain old boring inheritance like this: class MyPlugin extends MyFrameWork { public function index() { echo $this-&gt;authUser; } } **Edit:** Actually, I think you could do it with [runkit](http://www.php.net/manual/en/book.runkit.php) by injecting the variables as arguments to the function at runtime. Of course it's a terrible, terrible idea.
KomodoEdit. It's not the coolest or flashiest editor, but it starts fast, can do what I need it to do, and I can use it for more than just PHP.
If I love Komodo Edit, is Komodo IDE worth the money?
MySQL is not the issue. Your code is borked. Post some code and maybe we can help you out.
Came here to say this. Run your SQL straight in MySQL and see what your results are or if you aren't familiar with command line just count your results before you display them.
$result = mysql_query("SELECT * FROM members WHERE LEFT(SUBSTRING_INDEX(lastname, ' ', -1), 1) = '$letter1' AND activated='Y' OR LEFT(SUBSTRING_INDEX(lastname, ' ', -1), 1) = '$letter2' AND activated='Y' ORDER BY lastname"); while($row = mysql_fetch_array($result)) { if (($row['somefield']) == Y) { echo "&lt;li class=\"f\"&gt;"; } if (($row['somefield']) == N) { echo "&lt;li class=\"t\"&gt;"; } echo "&lt;h6&gt;&lt;b&gt;{$row['firstname']} {$row['lastname']}&lt;/b&gt; "; echo "&lt;/p&gt;&lt;/li&gt;"; }
The field in question is 'lastname'
oh my god, I think I see it now.......... See, someone put last name as "Smith (Walker)" as in they used to be Walker. Is the substring_index thing chopping off the wrong spot to look for the first letter? What that's supposed to do is help with the letter sort.
Seriously, all your problems will probably go away if you just post the code of how a) you add the record; and b) how you display the record. Otherwise, the reddit world is just guessing.
&gt; Whereas I would like my plugin to be able to register a variable so that inside my function I could access it with Not possible. Your only options are `globals` keyword, `$_GLOBAL` array, a `define`d global constant, or a static class property, constant, or method.
Holy shit this internets must be serious! What the fuck are we all to do before it kills us all?!
No, not really. I wouldn't miss any of the features of IDE if I didn't have them. 
Same here, thats my choice on Windows; it provides an integrated FTP/SFTP plugin as well :) Linux I like to use Kate.
Try this: $db-&gt;select()-&gt;from('advertisercontest') -&gt;joinLeft('advertiseraccount', 'advertiseraccount.loginid = advertisercontest.loginid', array('avertiserid', 'companyname')) -&gt;where('advertisercontest.golive is not NULL'); You can see the Zend_Db_Select JOIN examples starting around Example #11 [here](http://framework.zend.com/manual/en/zend.db.select.html).
Thanks for the reply: I used this: $rows = $this-&gt;select()-&gt;from('advertisercontest') -&gt;joinLeft('advertisercontest', 'advertiseraccount.loginid = advertisercontest.loginid', array('advertiserid', 'companyname')) -&gt;where('advertisercontest.golive is not NULL'); and I get this error: Message: Mysqli prepare error: Unknown column 'advertiseraccount.loginid' in 'on clause' But the advertiseraccount.loginid does exist.
Did you mistype the first parameter of joinLeft(...)? It looks like it's supposed to be 'advertiseraccount'.
I tried that and got this message: Message: Select query cannot join with another table However I do want to left join the advertisercontest table. I'm trying to get the list of advertisercontest
I figured the problem: This: array('advertiserid', 'companyname') has to be changed to this: array('advertisercontest.*') However, you were right. It is: joinLeft('advertiseraccount',.. Thanks a lot for your help!!
I dunno what you've been coding but I've the feeling that redditors have been coding your project for you. That's my thoughts about your posts.
New version online: better performances, 2 new languages, new doc. format.
TIL about netbeans, and it was good. EDIT: actually, nvrmind; too much shit. Going back to nano.
I love PDO, but somewhere I started pronouncing it in my head as "pedo" :-/. Now all I can imagine is pedobear doing my queries for me.
I think you might be new to PHP? $_GET is just an array of variables that have been passed by the URL: index.php?x=5 $_GET['x'] will have the value of 5. Like someone else mentioned: what you're trying to do should be done on the client side, with Javascript and CSS.
Wow, I guess I'm the only one here against frameworks? Make your own fucking 'framework'. It should, by definition, cater completely to your own site. Fuck, doesn't take that long, and it'll be way sweeter. If you need a CMS... ya, I don't want to code that shit, get one. But other than that, just make the whole thing from scratch.
This. This is why frameworks blow. WTF? If you just made your own shit, the concept of "the way I code doesn't work anymore" does not exist.
Sucks that you're being downvoted. This subreddit is plagued with framework fanfags. Have my upvote.
Replicating 5 - 10 lines is fine. Make sure those 5 - 10 lines are require_once()s and class instantiations or singletons.
google : zend db __toString()
You could try installing a couple of vim addons like NERDTree, Project or comandT and not forgetting taglist. I find :set wildmenu does the job for most of my needs but a mixture of the above might solve your problems without needing to leave vim. Failing that I like the look of http://www.jetbrains.com/idea/features/php_editor.html IntelliJ was always always my favorite Java IDE 
Thanks.
This is what he was missing.
I developed all of the code samples from scratch. That you think they came from a book is a good thing. Thanks!
Do they use classes yet?
Don't worry, when I pointed out Drupal and Wordpress sucked here, i got downvoted to -10 ;-) On /r/php, it's best to look at the most downvoted people on any thread, as they are usually the most knowledgeable. In this thread, that'd be myself, StoneCypher, tintub, and kronso.
That's so true. On /r/php, it's best to look at the most downvoted people on any thread, as they are usually the most knowledgeable. In this thread, that'd be myself, StoneCypher, tintub, and kronso.
The two go hand in hand, bro! "The only good code is clean code. The only great code is well-designed and clean code."
ORMs suck. Except for one or two micro-ORMs that I forgot the name of. I can out-code ORM monkeys using raw SQL *ANY* day, and my SQL **will** be faster, more elegant and more portable across different languages, servers, and frameworks.
I second this!
Why the downvotes??!
If you are going to keep that in your URL at all times just check the var and load the correct sheet in your header with fallback to a default. If not, set a cookie / set it on your users account and include the correct sheet in your header. 
PHPed is pretty damn good, too.
You're joking about coding in Nano, right??? right????
27 Jan 2011: NetBeans removes Ruby on Rails support. http://netbeans.org/community/news/show/1507.html
you can just get the php to open/write a .css depending on your triggers and then include it. Or just have it printed into your template between the &lt;php? echo "&lt;style type='text/css'&gt;$css&lt;/style&gt;"; ?&gt; I'm not sure if that's what you meant. 
Ah, yes. You may have had to include the column you're joining on in the array of columns you want from the joined table (i.e. the third parameter to joinLeft would be: array('loginid', 'advertiserid', 'companyname') but array('advertisercontest.*') works too). Glad you got it sorted!
I can't speak about the quality because I've never tried it, but I personally try to stay away from pay-ware IDE's. I use MS Visual Studio simply because I still get MSDNAA access for being a student.
did you just ask without even trying anything? :) index.php &lt;link rel="stylesheet" href="theme.php?h1=red" type="text/css" /&gt; theme.php h1 { color : &lt;?php echo $_GET['h1']; ?&gt; } edit: downvotes for replying with exactly what was asked for? haha.
Alternative to the solution of parent: &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;link type="text/css" rel="stylesheet" href="&lt;?php echo $css-file-name ?&gt;" /&gt; &lt;!-- ... --&gt; where $css-file-name is the path to the css file of the selected theme.
That's easy! Just write a php file off to the side somewhere, and include in in your header. &lt;link rel="stylesheet" href="/css/theme.php?theme=red"&gt; Then, in your php file, you can put the content type at the beginning somewhere: header('Content-type: text/css'); After this, just use some branching for each of your theme-specific CSS rules: if($_GET['theme'] == 'red') { // some CSS rules to make the theme red } else { // default theme settings } If you want the user to select a theme (that is, not hard-code it), you could also use something like $_SESSION['theme'] or $_COOKIE['theme'] to store a user's preference. EDIT: Fixed PHP error.
You are correct for the most -basic- scenario, but there are many solid memcache use-cases- * DB Cache's are limited to one database node/shard/slave and typically limited in size. With memcache you can have terabytes of shared cache spread over thousands of servers. This makes a huge difference if you have multiple read-only database servers (i.e, mySQL or pgSQL replication). * DB Cache's normally expires queries from its cache as soon as the table changes. This means it doesn't really work well on a table with a high-write frequency.
Don't. You should never need to do this. Tell the HTML which CSS file to load, not the PHP.
Don't do this without sanitizing. In fact, don't do this at all. Have the styles preset.
[This site](http://www.conditional-css.com/) will help you out immensely. If you read the source, it will also show you how to do it.
I think this is definitely the right approach. I try to keep PHP out of my view layer as much as possible. Especially out of my JS and CSS files. It gets to be messy and caching them is more complicated if they are "dynamic" than if they are just separate "static" css/js files.
I think it's better to use the Cascading property of CSS to manage this. Have a "base.css" that sets up all of your layout and has some default colors and then include another stylesheet that *only* applies colors. This also has the advantage of being much friendlier to your webserver; serving static content will always be faster than running it through FCGI or mod_php. edit: [Here is an example](http://pilu.github.com/web-app-theme/)
This file should be called something like, mystyle.css.php (or just mystyle.php) and link to it in the usual way... or, if you need to, you can pass parameters like this: &lt;link type="text/css" rel="stylesheet" href="mystyle.php?colourscheme=theme1" /&gt; &lt;?php header('Content-type: text/css'); $var = "#FF0000"; ?&gt; body{ margin:0px; background-color:&lt;?php echo $var;?&gt;; }
I have yet to see a really clear example of both on the same "top" open source project.
Because osCommerce is the worst. *ta dump, tissh*
This might not work, you should set the headers properly.
The problem here is that OP is looking for an application he can study, not a framework.
There's many reasons why you may want to do this. It's quite reasonable. 
You just said what I'm thinking about doing.
If it's possible to do this, do it. I'm not going to say generating CSS in PHP is wrong, but I feel like it's usually a less elegant solution to a simple problem. The example by jlogsdon is exactly what I'm talking about. It uses CSS the way it was intended to provide this without a dynamic CSS file.
Don't do it yourself. Someone's already done the hard work for you. [Check out lessphp](http://leafo.net/lessphp/), an implementation of [LESS](http://lesscss.org/), a CSS preprocessor written in Ruby. 
Blogspam.
then don't use it zend framework isn't exactly a great thing to use unless used very sparingly.
Really, what if I want 100,000 different color schemes based upon the colors that my users pick? I doubt I want 100,000 files.
That's a different use-case. He wants color schemes that *he* sets up, not his users.
Why ?????????
No its not. Its a perfectly valid post with unique content. 
He probably mean linkjack blogspam. The actual article is [here](http://www.geekword.net/howto-add-weather-to-your-website/). The link on Reddit is to a crappy synopsis of the article with a "continue reading" link.
Just noticed a few things. But awesome job!!! * "persistiting" =&gt; Spelling * "You get also do $_GET variables" =&gt; Sentence structure * "Unlike session variables a form variable" =&gt; Need a comma after variables
He said you never should do this. But there are clearly reasons you may want to do it.
Thats a point, I never noticed it
And this is why "never" should never be used :)
try simple html dom, it's much friendlier. I was trying DOMDocument then found simple and life was good. http://simplehtmldom.sourceforge.net/
copy what stackoverflow.com does. they use http://code.google.com/p/openid-selector/ on the front end and http://code.google.com/p/dotnetopenid/ . you can use lightopenid or janrain on php they modified openid-selector slightly to use facebook. see stack's main login page 
Yep, thanks, for sure a static variable and static functions are probably more in line with what the OP wants... I didn't think that all the way through. It's funny, using a class like that is essentially a hack to emulate a closure, right? http://php.net/manual/en/functions.anonymous.php I'm pretty darn sure they were added only in PHP 5.3.
Sooooo gross. But points for, uh, thinking outside of the box... :)
it's because you are setting $data = $row; in your while loop in the query function. Rather you want a line like this: ` $data[] = $row; ` That will append each row onto an array. The way you are doing it now overwrites $data with $row everytime instead of making $data an array of rows. Note: You probably have stuff using this already so we need to maintain backwards compatibility. Change your query function to this: public function query($sql,$type='single'){ if (($result = $this-&gt;mysql-&gt;query($sql)) != NULL) { while($row = $result-&gt;fetch_assoc()){ if ($type == 'single') { $data = $row; } else { $data[] = $row; } } return $data; }else{ return false; } } Then you can call query like this: $rows = $db-&gt;query($q,'multiple'); when you want multiple rows returned, and all of your old query function calls will work because $type will be single by default.
That did the trick. Thanks so much! I was under the impression that an array could be stored in a variable (such as $data) without the need for brackets.
Unfortunately, it requires thinking.
It can be but you can't just do an = or you're just doing a single assign. The way I probably would have done it is: array_push($data, $row); That way it doesn't matter what $row is.
That would be dumb and should be handled by javascript, not PHP.
Wow, don't give anyone on here advice with comments like that. 
&lt;body id="red"&gt; or &lt;link rel="&lt;?=$theme?&gt;.css"/&gt; 
StoneCypher is really knowledgable yet I always see him downvoted. I don't think it is so much because of what he says but rather the way he writes it. **edit** Apparently someone disagreed with me so they downvoted me.
While this works I wouldn't recommend that he maintains backwards compatibly as he's relying on a bug within his program as a feature. You should be writing sql queriers to return single rows rather than relying on this returning the last row.
No ideas?
With advice like yours you won't, either.
That's why I went to reddit, to keep away from stupidity.
just for reference there is [mysqli fetch all](http://ca2.php.net/manual/en/mysqli-result.fetch-all.php) available if you are using mysqli which would actually return all rows without requiring looping. but that's a whole other discussion.
I noticed it was not pulling all the information I needed so I added more columns: $rows = $this-&gt;select()-&gt;from('advertisercontest', '*') -&gt;joinLeft('advertiseraccount', 'advertiseraccount.loginid = advertisercontest.loginid', array('advertiseraccount.advertiserid', 'advertiseraccount.companyname')) -&gt;where('advertisercontest.golive is not NULL') -&gt;order('advertisercontestid DESC'); I'm extending Zend_Db_Table_Abstract and it did not work. So I rewrote it like this: $db = Zend_Db_Table::getDefaultAdapter(); $select = $db-&gt;select(); $select-&gt;from('advertisercontest', '*') -&gt;joinLeft( 'advertiseraccount', 'advertiseraccount.loginid = advertisercontest.loginid', array('advertiseraccount.advertiserid', 'advertiseraccount.companyname') ) -&gt;where('advertisercontest.golive is not NULL'); And it work but I'm not sure why this one work over the other?
In the mean time you can be lazy. If it's an object and you're using PHP5+ use the __get method. Example: class Owner { private $Property = NULL, $_settings = array('owner_id' =&gt; 0,'propert_id' =&gt; 0); public function __get($key) { if($key==='Property'): if($this-&gt;Property===NULL) $this-&gt;Property = new Property($this-&gt;_settings['property_id'); return $this-&gt;Property; endif; } } Which in essence will only declare $Owner-&gt;Property when you need it (and then do the same vice versa). *Edit:* The other additional benefit of doing it this way is you only call Property when you need it, say you're iterating through a bunch of Owners and only want their names, no need to initiate an extra Property every single iteration.
You're right. I probably won't learn anything from my own advice. Thanks anyway.
I agree here. I've been using phpDesigner for quite some time now (the video on the front page is mine. Michael Pham, the creator, gave me a free license for promoting his product in my YouTube PHP tutorials)
It doesn't really look like the SUBSTRING_INDEX should be there at all? I assume $letter1 is e.g. "S", meaning that you want to find all people whose surname begins with "S"? Also, your "OR"s are broken because you aren't added parentheses around the pairs. I'm guessing you want to try this: SELECT * FROM members WHERE ( LEFT(lastname, 1) = '$letter1' OR LEFT(lastname, 1) = '$letter2' ) AND activated='Y' ORDER BY lastname Another option for the $letter check would be to use an IN(), e.g.: WHERE LEFT(lastname, 1) IN ($letter1, $letter2) Also, with regards to your code, assuming you are doing this within an HTML file, this may be more legible: &lt;?php while($row = mysql_fetch_array($result)) { ?&gt; &lt;li class="&lt;?php echo $row['somefield'] == 'Y' ? 'f' : 't'; ?&gt;"&gt; &lt;h6&gt;&lt;b&gt;&lt;?php echo $row['firstname'] . ' ' . $row['lastname']; ?&gt;&lt;/b&gt; &lt;/li&gt; &lt;?php } ?&gt; The &lt;li&gt; class part would probably change if you added a third class possibility. BTW, when you do an == check on a string, you should enclose the string in quotes; e.g. $var == 'Y' rather than $var == Y.
Also if you look to the right you will see r/phphelp. This isn't a noob advice forum.
Curious, what is your reasoning for this? On the fly, sure, JS can do some nice theme changes, however what about state and and suchs nots, wouldn't that have to be stored on the server side anyways? So sending either a PHP generated JSON back or a PHP generated CSS back, the CSS sounds better. Say you run a site and allow your users to customize their themes. A simple lightweight CSS file can handle the color changes for you and call it dynamically via .htaccess ('/themes/'.$user_id.'.css' -&gt; '/themes.php?user_id='.$user_id). Then themes grabs the relevant colors and returns it back. Maybe even add some validation to it to make sure people aren't putting dark text on a dark background, which is quick and efficient to do in PHP. So, please elaborate, thanks. Edit: Not to mention error handling, content-type, and gzipping right from there.
Yep. This is the method to use if your users can specify whatever colors they want on the page. Use a base CSS file to decrease load then generate your dynamic CSS.
&gt; I can out-code ORM monkeys using raw SQL ANY day Whatever that means. Raw SQL can be utilized and dumped from most ORM frameworks, so I'm not sure why it matters how fast individual statements run...unless there's a serious need...I mean do you run unit tests to benchmark every statement to ensure they are always running to a specific performance marker? How do you know what's fast enough vs faster vs fastest when your datasets change? I can only guess at why you bring up performance markers when it's so arbitrary. There's a lot more than sql syntax to consider including, but not limited to: Which statements to cache and when Which results to cache and when Complex dataset accessors (cross-relationships that include collections) How to handle validation in and out for which datatypes and which specific contexts Prefetching/batching and how/when to specify on demand based on triggers Naming and Namespacing Exception handling for remote datasources in concurrent processing ... ORMs also have the benefit of being developed by dedicated DB admins who have a financial interest in keeping up to date with the latest and upcoming changes to the multiple DB technology stacks. I can't keep up with everything Oracle, Postgres and MS does and I really have no vested interest unless I have a specific problem. You get the applied knowledge for free through a commercially supported ORM (I include Doctrine) in most cases. So no. ORMs don't suck. They may not always give the performance you want, which is fine. I don't care much about that and can always hand-code when I need it, while still being able to mix and match toward the concerns that ARE difficult to manage. Edit: To be fair, my concerns aren't everyone's concerns. I like having a framework that collects and addresses a lot of these concerns (which is why I like Doctrine over Propel) in one place that has evolved from people who care about them. There is overhead, there are other ways to do things, there isn't a "right" answer. I like having tools that I use and they've done a good job. Is Doctrine a shining example of code for a beginner to study? I would have to say no.
Barf.
Sweet, finally got the source code for those damn lyrics!
More efficient: &lt;?php echo "Work it Make it Do it Makes Us Harder Better Faster Stronger More than Hour Our Never Ever After Work is Over Work it Make it Do it Makes Us Harder Better Faster Stronger Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Do it Faster More than ever Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over"; ?&gt;
You could also do... `$obj-&gt;index = create_function('', "echo $authUser;");` Or `$obj-&gt;index = function() use ($authUser) {echo $authUser;};` But yeah, besides that, not possible. 
Not really. In fact, I still use Coda for some direct editing via FTP. FTP in Espresso is a little wonky. Most of my development is local though, so Espresso does great.
You strike me as a young person, so good luck. Do you have a blog? When will your website be finished?
I think this may be the only *worthwhile* example of the dreaded for/switch paradigm that has ever been created.
The decorators are a pita, but I like the rest of the api.
Consider using a wrapper library like the classes available from Flourish (http://flourishlib.com/) to ease things for you. Helps ensure that you're avoiding SQL Injections.
Now only if we could get source for Technologic...
Solid answer. Really nice code design.
No, to be efficient, you need to use single quotes. Every PHP *programmer* knows that! (EDIT: I accidentally a word)
I'm a PHP and so can you!
Docco is a quick-and-dirty, hundred-line-long, literate-programming-style documentation generator. It produces HTML that displays your comments alongside your code. Comments are passed through Markdown, and code is passed through Pygments syntax highlighting. This page is the result of running Docco against its own source file. Pocco is a sort-of Docco, you can choose your markup language: Creole(default) or Markdown(+Extras). 
 &lt;?php for($i=0; $i&lt;72; $i++) print "Around the world, around the world"; ?&gt;
i will write it for $500
Why don't you use operation based methods in your db class? select($table,$where,$orderby) {} insert($table,$cols,$values) {} update($table,$recordid,$cols,$values) {} delete($table,$recordid) {} So your select would be: $db-&gt;select('table','where','orderby');
That's not really what the original poster asked. Drupal themes handle it using a colour picker: http://drupal.org/project/ad_blueprint There's no need for extra httpd calls unless you need to. Passing the CSS files through a minification script would be the only acceptable time to do this. Use a third party script unless you really know what you're doing.
http://codepad.org/9gb7LeuM
Why are single quotes more efficient? I'm guessing because it takes the string literally, as opposed to double quotes, which interpret variables?
I actually laughed out loud at your comment because I pictured you being completely serious and missing the point.
Well, my post was meant to be sarcastic. You might get a performance improvement by using single quotes (for the reasons you outline), but it's so ridiculously insignificant, especially compared to the other performance factors (DB access, ...) that you really shouldn't bother with it.
This was quite what I wanted, thanks. :) But I'll use a switch to switch between the colour schemes and if no scheme is find with the name sent with it, use default.
Yea. I was guessing that my choice of quotes would be the least of my worries. Still: It's interesting to know/ponder over what performs faster, even if that increase in performance is insignificant. 
Take a look at: http://www.doctrine-project.org/projects/orm/1.2/docs/manual/working-with-models/en#dealing-with-relations:retrieving-related-records This does more or less what you want. The factory should be a method that takes a string. Use the string to determin the object you are building e.g: $users = $this-&gt;create('user')-&gt;from('users')-&gt;where('.... etc inside create (of 'factory') you can dynamically load object user and pass in the query you have built. I'd use Doctrine if I were you :) HTH
 3c3 print "Around the world, around the world"; --- print "Around the world, around the world.\n"; Version 2.0. 
Security. Understand and understand how to prevent: cross-site scripting (XSS), cross-site request forgeries (XSRF), SQL injection (generalized to injection of any kind, when going from one domain to another). Understand how to properly store passwords (never in plain text) using hashing/encryption and salts. Take the Gizmodo/Lifehacker debacle as a lesson.
When you get halfway through the project and can't believe the shit storm mess you got yourself into remember these words of advice: &gt; "Don't start crying now, it's all gotta go in."
ive seen people research this and post their results to reddit. Dont feel like digging it up, but a few blogs out there have covered your question, and the require_once vs include debate
Granted, yet I'm replying to your reply due to curiosity, not to the original poster's. In particular your &gt;Don't. You should never need to do this. &gt;Tell the HTML which CSS file to load, not the PHP. and &gt;There are no reasonable reasons of why you would want to do this. Why not have the HTML point to a PHP file that parses, gzips, and sends back the CSS? Especially for themes which was referenced in the post before yours. &gt;That would be dumb and should be handled by javascript, not PHP. In reply to 100,000 CSS files question. There are definitely good uses to use PHP to return back CSS. There's also bad uses, yet thats the case with any tool.
To put it simply: * Question: How do I write a dynamic css with php? * Answer: You don't. If the question was about minifying the css then the answer would be different.
No, seriously, different browsers will treat this file differently. You should defo use the header() function to specificity css headers.
I have to seriously disagree with your answer, especially considering you haven't given a valid alternative or reasoning. Doing this server side you have more options, less JavaScript, and the ability to save state. E.g. /css/theme.$theme_id.css could -&gt; /css/theme.php?theme_id=$theme_id, which you can grab $theme_id's state from a database or a generated text file that's been created via a palette chooser. Comes in handy when you have users and they wish to customize the colors of their profile. Not to mention doing it this way you can also make sure colors aren't working against each other (dark text on a dark background). To do the same not on the server side would be unnecessarily cumbersome and less reliable (say you store it via cookies and they clear there cache, state is gone).
You could go with something like [OpenX](http://www.openx.org/publisher/open-source-ad-server). But you're probably better off going with a hosted solution, like [DFP](https://www.google.com/dfp/info/sb/index.html#tab-how) or [OpenX OnRamp](http://www.openx.org/publishers/community-ad-server). Less hassle that way.
Avoid the host your own version of Openx like the plague. It works but is ungodly expensive to maintain and or add new features to.
* You don't need to pass a css file through PHP to load a different css file. * You don't need PHP to dynamically load a css file. The alternatives are: * NOT pass it through PHP, just tell it which file to load (for a few choices) * Use javascript instead (for many choices) Note: I've had enough of half baked questions, I simply won't answer them anymore.
I'm sorry, but anyone using a for-next loop to seed switch statements to trigger echo statements like that needs to be stabbed in their soul, repeatedly.... joke or not.
Even more efficient and now, without the PHP requirement: Work it Make it Do it Makes Us Harder Better Faster Stronger More than Hour Our Never Ever After Work is Over Work it Make it Do it Makes Us Harder Better Faster Stronger Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over Work it Harder Do it Faster More than ever Our Work Is Never Over Work it Harder Make it Better Do it Faster Makes us Stronger More than ever Hour After Our Work Is Never Over
&gt;You don't need to pass a css file through PHP to load a different css file. &gt;You don't need PHP to dynamically load a css file. &gt; &gt;The alternatives are: &gt;NOT pass it through PHP, just tell it which file to load (for a few choices) &gt;Use javascript instead (for many choices) Your example depends on static data and is not dynamic in the slightest other then being able to 'dynamically' change the CSS to a different static CSS. If you want the CSS to be dynamic and have a state that is stored you'll definitely need to use server side coding, there is no way around that. Which is exactly the case when you have users choosing their own styles for their own profile pages. This method can also be deployed to your own site if you want to work with just colors in a UI and not have to worry about copy + pasting files around. Dynamic helps speed maintenance up in the future as well as you'll only need to edit a single .CSS file in order to change all of your different themes (you want to change #main_div to #main-div, only one file needs to be changed). &gt;Note: I've had enough of half baked questions, I simply won't answer &gt;them anymore. Note: Fair enough, considering you gave half baked answers anyway without providing reasoning or merit for them.
The point is, you shouldn't ever need dynamic css files.
I guess we'll just have to disagree here. Although I think we'd both agree on not having dynamic format\structural CSS files. A color only dynamic css file though, I'm totally for. Back to work for me I suppose, enjoy the rest of your day and good luck with your rglob().
See http://www.w3.org/People/Bos/CSS-variables
Interesting read yet it doesn't support your claim. Actually it even links to five sources dealing with exactly what I'm talking about. What this essay is about is to not make CSS a functional programming language and leave it as is, it doesn't say not to use functional programming to generate CSS and send it out. The scope of that essay I completely agree with. Variables\Constants do not have a place in CSS, that's what text parsing languages are for so there is no extra overhead for front end users.
Reasonably modern PHP versions have [RecursiveDirectoryIterator](http://us3.php.net/manual/en/class.recursivedirectoryiterator.php) built in. I suppose it comes down to whether you prefer filtering file names through glob pattern matching or a regex.
&gt; Optimize images - don't use a 20 KB image for a repeating background. My site used a 96.7 KB image as its background. It's a 1600x2090 jpeg and compressed within an inch of its life. I upped the quality a little to remove some of the more hideous artefacts and now it's 147 KB. Considering that it's static content and browsers should cache it for a long time, I don't consider it too much of a problem.
I still don't think you ever need dynamic css files which is one reason css doesn't need variables. If you think otherwise, well, that article shows you how it should be done. But let's not take this out of context. Variables is not what this guy wanted, he wanted to load different CSS files THROUGH PHP. For that, [I stand by my original statement](http://www.reddit.com/r/PHP/comments/fis30/how_do_i_write_a_dynamic_css_with_php/c1g8hug).
Lifehacker was hacked because someone with admin rights had a weak password. The user passwords were properly salted with each password using a unique salt. The only passwords that got decrypted were passwords like "password" and "12345". Besides, once you have access to the database you can just change the verification e-mail, copy your password hash over another user's, figure out how the hashing is being done etc.
I recommend SublimeText (http://www.sublimetext.com) - It's incredibly fast, snappy, etc. It does lack tooltips, etc but they aren't things I use anyways. I've been using TextMate lately as well and in the past have recommended UEStudio for Windows.
Sorry to bother again but.. this doesn't prevent users that does not fill up all the required skills to be excluded. I've been googling some when i got some time over but i can't get it to work. Any clues?
I has the dumb ... can you give me an example where this type of function would be used?
I've been coding for years now and this checklist is going on the wall at my desk. Thanks!
Global variables are global.
A couple of possible ways: SELECT user_id, count(*) AS skill_count WHERE skill_id IN (required_skills, ...) GROUP BY user_id HAVING skill_count = &lt;number of skills required&gt; SELECT DISTINCT s1.user_id FROM user_skill s1 JOIN user_skill s2 WHERE s1.user_id = s2.user_id AND s2.skill_id = &lt;skill_id&gt; JOIN user_skill s3 WHERE s1.user_id = s3.user_id AND s3.skill_id = &lt;skill_id_2&gt; .. and repeat as necessary. The first one will require a Temporary table and filesort because of the SUM, the second one may only require a Temporary table (as described by EXPLAIN).
In other languages, global variables must be 'declared' in each scope where you want their values to be accessible?
You don't actually have to declare them with `global` to access them because they are available regardless of scope with the $GLOBAL superglobal (just like $\_GET, $\_POST and other superglobals). The reason it works like this is because if you declare variable `$var` and then assign `$var` to something else outside of its scope (inside a function/method) it would overwrite it and this would cause massive issues with your app if you didn't intend to overwrite the global `$var`, so you have to declare it first (or access it from $GLOBAL) before you overwrite or have access to it outside of its scope. They are extremely frowned upon mostly because of security issues with `register_globals`. Even with `register_globals` being disabled on most servers now days they are still frowned upon because there are better more clean ways of achieving what globals do (like using static class vars or constants) without polluting the already polluted global namespace or becoming a security risk.
In PHP, global variables are just variables defined in the default scope (i.e. outside of any function). As simple as that. To access them from within a function, you can either say "global $var", or "$GLOBALS['var']". Yes, their use is frowned upon. This has nothing to do with PHP, it applies to all languages. See [the wikipedia article](http://en.wikipedia.org/wiki/Global_variables) for a brief rundown on why.
A global is a variable defined in the global or "root" scope of a PHP application. A variable is NOT global if it's defined within the scope of a function or class. However a global variable is not automatically defined within the scope of a function or class. They must be explicitly referenced from one of two methods: 1) global $name; // Make $name refer to the global $name for this scope 2) $GLOBALS['name'] // A direct reference to $name in the global scope Functions and class methods can share access to variables that are defined in the global scope through one of these two approaches. The reliance on global variables is frowned on because it makes applications easier to break. If two disparate functions have different intentions for the variable $GLOBALS['db'] then it will almost certainly cause bugs in the application. However, if each function defines and maintains $db within its own scope, they will both continue to function properly when run side-by-side.
I've done some pretty big sites in Nano :)
Nano is my coding environment of choice, too.
glob() matches files based on a pattern within a single directory. rglob() matches files based on a pattern recursively, so it does so in the specified directory *and* within child directories. If you wanted to get a list of all .png or .jpg files in a directory, where they might not be all in the top level, you would use a recursive glob.
what script is it? Not sure why they would need ssh? not all the rest unless they are performing a installation for you?
if the company is legit, I wouldn't worry in the least. If you're that paranoid, just change the passwords after they're done. If they went as far as installing a back-door, you'll see them in court, and that will be the end of their business. I always ask for ssh and database. Ftp is a waste of time.
There's `main`, and then there's everything else. Though PHP doesn't have a `main` per se, think of the `$GLOBALS` array or `globals` keyword as containing or allowing access to all variables declared in `main`. `main` in PHP's case is just the direct scope of the currently running script file, either ran directly by name from the server or directly from CLI. `$GLOBALS` always contains the _live_ and _current_ state of all globally declared or accessible variables, including `_GET` and `_POST`. Any `includes` in your script called from main scope will become part of `main`. Functions and classes have their own little private scope. To bridge the gap, use `$GLOBALS` array, `globals` keyword, global constants, static class, or static object property. Using `$GLOBALS` is all fine and dandy, as long as you keep track of globalized variables in all your classes, objects, and functions to avoid accidentally overwriting them or calling on them when they don't actually exist. You can add values directly to `$GLOBALS` array as you could any normal array. It is safe as long as `register_globals` is off. It's a juggling act though. So just be sure to document every possible fork in your code. 
Well, technically, NoSalt is right on PHP's grounds. If it's `global`, it's global.
Just my personal opinion, but you might want to use caution with this type of DB query approach. It just doesn't seem like it would work well with any sort of database that has a possible changing schema as time and requirements change, need for complex joins, or which has indexes already set.
Alright. What does global mean? Global doesn't mean exists in all scopes, just in the 'root' scope, but not in "sub"-scopes of root, like functions? Why do I find variables being declared global $var; in every script and function where they're being used as globals? A kind of programming note?
http://www.php.net/manual/en/language.variables.scope.php It even has some examples.
So to summarize: "Global" scope does not permeate through all scope; it's just a root scope. To draw in variables from global scope into a sub-scope, one must declare the variables as "global". However $_GLOBALS is a super-global, meaning it permeates all scope, just like $_POST, $_GET, etc.
I just started using Sublime Text when the Linux alpha came out a few weeks ago and so far I really like it. If I'm on the Mac, I use Textmate, but I may switch to Sublime there, as well. I don't do a lot of coding on my laptop, though, so I just haven't bothered to install it.
Tons of useful tips in one page. Thanks!
I think the problem is not the job itself but the method (building a factory). At first I thought the same and suggested another way, but get downwoted...
http://wordpress.pastebin.ca/2044498 : 500 - Internal Server Error
I'm willing to bet that wordpress is the most widely used PHP based application on the planet.
Frameworks make their own for a number of reasons. Usually because they want to be the best and most comprehensive framework. There's nothing wrong with using PEAR::Auth, use it.
Most PEAR packages are built for PHP5 now. Actually, the best way to install a PEAR is whichever suits you. You don't need to be root to use a package, you just download it and include it like you would any library.
True, and these days with broadband connections, most people will not blink at a download like that. Especially since it will only happen once. Sometimes you have to sacrifice image size for quality. The latter may be the reason you make or break a sale, most end users really only care about how things look.
Drop the user id and the hash into a cookie. Drop a loader file to check if the cookie exists, if so authenticate as usual, else boot to login. If your paranoid hash the hash with a separate key.
The only thing you should be storing in the cookie is a hash of some data that will not be easily guessable (this can include the user ID, the current microtime, a random value, etc.). This hash should also be found in the user record in the database. It should be the ONLY cookie used for validating the user. Putting anything else in the cookie (outside of the hash) accomplishes nothing as far as security is concerned, and leaves it open to manipulation. If an unauthorized person can gain access to part of a cookie, they can gain access to _all_ of it, so stuffing more information in there is not going to help. And if you are going to restrict logins to an individual IP address, you should give the user an option to do so. Otherwise your site will be unusable for anyone whose IP changes frequently-- whether they're behind Tor, browsing on their laptop in multiple locations, whatever. EDIT: Re-reading your post, I see you are making the IP address part optional. I'll leave the above paragraph in place in case it helps anyone else out. EDIT 2: By the way, it's not inherently a "big security issue" because users are logging in without their password. In fact, on every single request after they've logged in, they're re-logging in without their password. That's essentially how a session works-- it provides a hash to the server by means of a cookie, and the server trusts that only the authorized user will have access to this hash. You could make all authentication cookie-based instead of session-based, and you'd be accomplishing the same exact thing, with just a bit more work. EDIT 3 (last one, I promise): You could also do a check before saving the cookie to ensure that the hash does not already exist in the database. While being an iron-clad solution, the database hit isn't generally worth it, considering the chances of the hash already existing are astronomically small.
But if I only store a hash in the cookie that directly corresponds with a database entry. Isn't that less secure than a hash to verify the data, and a userid to log in? If this field is leaked one way or an other (maybe I made a mistake somewhere and someone uses sql-injection to change the hash), you can put it in a cookie and get admin-rights. My method adds a second layer of security by needing that key stored in the config file.
I want to add to this that allowing access to a portion of the site via this method doesn't mean you need to allow access to all the site. Simply request the password again before allowing access to anything that needs the extra security, like changing a password or viewing credit card information.
Yes, hashing the hash for the database record would be a good idea. Don't bother storing a user ID though. All that's effectively accomplishing is adding another few bits of data for the hacker to guess, and adding it in a predictable way that is completely unobscured and unencoded.
But then how would I be able to check which user is visiting the site? Getting all the hashes out of the database, rehashing them and checking against the hash in the cookie is way too inefficient. Maybe I should look into encryption algorithms for this instead of hashing?
The use of he ID to look up data on the database certainly must be protected from SQL injection. The cookie content should be treated like any other user-supplied data, and nevertrusted.
User sends you the hash. You hash it. You look for a record in the database with this hash. Don't use encryption. One-way is better than 2-way whenever you can get away with it.
Kind of goes without saying that you should protect all user-supplied data against injection.
Ah. I get it now. I put a double-hashed salt in the database, and put the single-hashed salt in the cookie. (of course using hmac or otherwise extra-salted method) Good idea, thanks, I'll do that.
session_start(). And really look at the options. Don't reinvent the wheel. 
Webuilder 2010- fast loading and rich featured :)
Exactly what code are you using and what, exactly, are you trying to display? The sentence "I am able to have the information display as plain text, but I'm trying to have the URL of the post of the "Top 3" arguments display instead of the regular text." is confusing to me. Do you mean the information is displayed with no css styling? Like there is an error in the displaying of the text so it's just plain text being output? You say you are trying to filter the top 3 arguments but you are trying to have the URL of a specific post display? Does this mean there is a single post called "Top 3 Arguments" or that you want to display three separate arguments? What are you using to determine the top three arguments (assuming you want three posts and not one url to a single post)? Please give specific code examples and explicit output examples. 
Yes, I assign variables in conditionals all the time. Don't get carried away though as you did here. There should be another line there just for readability.
Yeah, to me, that reads: `if false is somehow assigned the value of DB::safeExecute(), then fetch everything anyway or else don't, up to you`. Sometimes parentheses help.
agreed, generally i would, but i just thought it was funny even the ternary operator works in the conditional.
actually, it's saying, if safeExecute() then return fetchAll() into $result, else false. if !$result, die(). i agree the code is confusing. i guess the beauty/shits about php is that it evalutes so promiscuously
$result isn't initialized?
it's initialized when it gets assigned to after the ternary operator is finished. then it has scope within the entire function even though it's declared in the conditional
Right. Right-side first. But still it helps to add parentheses around parts of long statements help the user point out right away that `this` is _meant_ to happen before `that` in your code. Not a big deal though, just something to notice.
&gt; what other language can you depend on to evaluate a ternary operator and assign all within a conditional? Errr... C ?
It is. That is what the first line of code does; it sets $result.
yeah, i was thinking c too maybe though i'm not that familiar.. though in c i believe you would still have &gt;problems here with scoping on $result.
Umm, Perl, Java, Javascript, C/C#/C++ just off the top of my head.
I see, thanks.
Its shit like this that gives php a bad name in readability.
I apologize, this is very new to me. I am able to "pull" the information in the "database" that stores the vote data, I think. I want to display the Top 3 arguments like -&gt; Argument 1, Argument 2, Argument 3. Right now it shows the arguments, but it's just text data, it's not linking to the actual url. &lt;?php $items = ThumbsUp::items('')-&gt;orderby('votes_up desc')-&gt;limit(3)-&gt;get(); $url = get_permalink($post-&gt;id); echo '&lt;a href="'.substr($items[1]['name'],0,100).'...&lt;br&gt;&lt;span class="top5articlesub"&gt;'.$url.'"&gt;'; echo '&lt;a href="'.substr($items[2]['name'],0,100).'...&lt;br&gt;&lt;span class="top5articlesub"&gt;'.$url.'"&gt;'; echo '&lt;a href="'.substr($items[3]['name'],0,100).'...&lt;br&gt;&lt;span class="top5articlesub"&gt;'.$url.'"&gt;'; ?&gt; displays this: http://beingadadrocks.com/2010/11/20/argument-28/"&gt;http://beingadadrocks.com/2010/11/20/argument-28/"&gt;http://beingadadrocks.com/2010/11/20/argument-28/"&gt; You can see this currently at: http://beingadadrocks.com **edit**: I know the issue is with the $url code.. I just have no clue how to make it work with the URL.
If languages were considered "awesome" by the number of different ways you could write the same code, I think Perl would win.
didn't realize that could be done in C#. hmm i guess i've just never tried it before.
well, result in C would be available inside the whole block where you declared it, which would be inside your condition as well as outside it (the print_r), just as in PHP.
Seriously go look at the top post session_start() is what you want
WTF! An assigning ternary operator in a if clause? Are you mad?! Just because PHP enables you to do such thing, does not mean you will do any good doing it.
Even though collisions would be slim to none and you are using sha512.. I still wouldn't salt with an ipaddr because what if a lot of your users are at a college and sharing the same id? Still, very slim chance but I'd go with uniqid($username).
cool. as i said, i haven't used c much, but from what i've seen it's actually not as strict as i thought, though it allows you to make all sorts of catastrophic mistakes.
lol. i agree. i guess i just got a kick out of being able to do something so ugly. sorry for evoking your disgust.
You are formatting your anchor tag incorrectly, it is: &lt;a href="http://www.google.com"&gt;Anchor Text goes here&lt;/a&gt; so, echo '&lt;a href="'.$url.'"&gt;'.substr($items[1]['name'],0,100).'&lt;/a&gt;'; Interesting site, I like it! 
I don't see anything like the link you reference: http://beingadadrocks.com/2010/11/20/argument-28/"&gt;http://beingadadrocks.com/2010/11/20/argument-28/"&gt;http://beingadadrocks.com/2010/11/20/argument-28/"&gt; I see: "asdfasdasdfasdfasdfasdasdfasdf" repeated over and over. The code example you provided looks like it is returning exactly what you are telling it to so... I'm still not clear on what the problem is. Sorry. From the code it looks like $items will be an array of three items, taken from... somewhere... that will be ordered by the data from the votes_up field and presented in descending order. $url will be the permalink of one, specific post. How that post is determined I cannot tell from the code. Where is ThumbsUp getting the data from? Which table(s) is it accessing? Also, $url is getting the permalink of a certain post's id.... which post? Where is $post coming from because as it stands, it looks like $post-&gt;id will never change. ------------------ Suggestion... what do you get when you stick the following under $items: $items = ThumbsUp::items('')-&gt;orderby('votes_up desc')-&gt;limit(3)-&gt;get(); echo '&lt;pre&gt;'; var_dump($items); echo '&lt;/pre&gt;';
Actually, AFAIK, in older versions of C, you couldn't declare variables inside a conditional. Not only that, but even in newer versions, you can't use the variable you've declared in complex expressions. That's what [this](http://stackoverflow.com/questions/1516919/declaring-and-initializing-a-variable-in-a-conditional-or-control-statement-in-c) seems to indicate, anyway. And even if you're using C++ or a newer version of C, declaring the variable within the conditional will mean it's scoped to that block, I believe. That would mean the last line (printing the result) wouldn't compile either. I know the OP doesn't mention declaration, just assignment. But he does mention scoping...
really? admittedly off-the-cuff, quick and dirty code samples that seek to show a curiosity of the language are what gives php a bad name? i thought it was the soup of PHP4/DB/HTML code that gets barfed up every time you google for php code examples. but jeez i guess i should go shoot myself.
yes really. that is a fuck nut of a conditional.
This formats it correctly, but it looks like the $url is just displaying the CURRENT url, not the url of the page it should. Forgive me... I understand that [name] = name of the argument, but now I need it to display the url of the [name]. 
I need the $url to display the url of the post that it's being accessed from. When I ran that script, it gave a table of all the information. I have left it on my site, please take a look. I'm sure that this: $url = get_permalink($post-&gt;id); is totally invalid, that's where I need the help. How can I get that to be the ID of the actual post?
fine. fair enough.
As you said, OP didn't mention declaration. And yeah, in old C you had to declare your variables before you used them.
Try this: $items = ThumbsUp::items('')-&gt;orderby('votes_up desc')-&gt;limit(3)-&gt;get(); foreach($items as $item) { $url = get_permalink($item["id"]); echo '&lt;p&gt;&lt;a href="'.$url.'"&gt;&lt;span class="top5articlesub"&gt;'.$item["name"].'&lt;/a&gt;&lt;/p&gt;'; }
I've never understood the less lines is good thing. To me, if it doesn't affect performance then readability and maintainability is infinitely more important. 
Yep, C just assumes you know what you're doing, so if you try to read from 0x00000000 it just does it (it assumes that if you didn't, you would check whether a point is NULL or not before using it). PHP's syntax has a lot to do with C's syntax too (ternaries, curls, multiple variable assignments, &amp; for references, etc). 
This displays the current page that I'm on. 
The maker of the plugin is also trying to help me. He said the following should work, but again.. I'm lost: &gt; Okay, so you are only using the post title as thumbsup item name. &gt;You should include the ID of the post too in the name. For example: $name = '[post '.get_the_ID().'] '.get_the_title(); echo ThumbsUp::item($name)-&gt;... &gt;That way you can use a simple regular expression to extract the ID out of the name. preg_match('/^\[post\s+(\d+)\]/', $name, $matches); $post_id = $matches[1]; $link = get_permalink($post_id); &gt; I hope you get the idea.
I don't get the idea.
yup. as you may know, php started as a set of c templates for helping the creator work with his web home page, hence its acronym PHP (Personal Home Page). However now it has been revised to the the recurs-acronym PHP Hypertext Preprocessor. With the PHP CLI, PHP is becoming more of a general purpose language so probably the PHP acronym will cease to mean anything in the future, similar to .. shit i forget
Are you certain you typed it exactly as I did because it looks like you did not? Try this so I can see the output of the var_dump and compare it to what is in the foreach loop output: $items = ThumbsUp::items('')-&gt;orderby('votes_up desc')-&gt;limit(3)-&gt;get(); echo '&lt;pre&gt;'; var_dump($items); echo '&lt;/pre&gt;'; foreach($items as $item) { $url = get_permalink($item["id"]); echo '&lt;p&gt;&lt;a href="'.$url.'"&gt;&lt;span class="top5articlesub"&gt;'.$item["name"].'&lt;/a&gt;&lt;/p&gt;'; }
It looks like the argument urls are set up like http://beingadadrocks.com/YEAR/MONTH/DAY/ALIAS/ I don't know exactly how the database is set up (is it wordpress-based?) but I would guess something like this would work for the url $url = 'http://beingadadrocks.com/'.date("Y/m/d",$items[1]['date_created']).'/'.$items[1]['alias'].'/'; I don't know the field names for your table's date or alias fields, you might have to look and see what they are, I'm just guessing. So to put it all together try $url = 'http://beingadadrocks.com/'.date("Y/m/d",$items[1]['date_created']).'/'.$items[1]['alias'].'/'; echo '&lt;a href="'.$url.'"&gt;'.substr($items[1]['name'],0,100).'&lt;/a&gt;'; I'm also not sure if it goes month/day or day/month... 
I &lt;3 C89
I rather like Javascript and Python, where you could do: result = DB::safeExecute($stmt) and stmt-&gt;fetchAll(PDO::FETCH_ASSOC) or false Yes, "a and b" returns b, not true.
There is no reason to make it this complicated; if the cookie is leaked, the information needed is already in the hand of the attacker. Create a random string of a proper length (32-64-128 bytes - it'll do the trick anyways). Save the random string to the database together with the user_id (and the ip the value is valid for, if you want to have the ip check). If you're not attempting to avoid hitting the DB at all for such a request, this will work (and if you're unable to resolve the secret, simply unset the cookie in the client so subsequent requests doesn't get a lookup). 
very cool. i was trying to wrap my mind around this in python the other day and this makes perfect sense to me. i didn't know that was the behavior in javascript as well. thanks!
http://openid.net/add-openid/
I'm using this for convenience, and by no means am I making it the only way to query the database. Right now I'm mainly using it to populate lists, so I could have either done (I'm using codeigniter): $query = $this-&gt;db-&gt;where('foo', 'bar')-&gt;get('users'); $users = (!$query-&gt;num_rows()) ? array() : $query-&gt;result(); foreach ($users as $row) { $user = new User($row); // print a row or whatever } or with my factory I do $users = $this-&gt;factory-&gt;where('foo','bar')-&gt;get('users')-&gt;result(); // Each item in $users is now a User object 
This doesn't make the results instances of their respective Model classes
Perhaps this? $object = mysql_fetch_object($fetched_item, get_class($this)); I'd say the mysql_fetch_object is constructing a new instance of your class.
I agree that it's non-obvious, but that's simply because it's a non-standard pattern. It's not unusual to do assignments in conditionals, and I think most experienced coders understand ternary.
Just like the provided way to interact with computer hardware is with assembly code? Ergo, we should all write assembly code and ignore any higher-level _abstracted_ language.....right?
Afraid it does need to be said, because many projects I have seen do not take this into account. They assume the cookies simply operate "behind the scenes" out of the reach of end users. Just seen it so often, it needs to be restated. I found just such an assumption only this week in a client's inherited CMS code-base, leaving the website wide open to abuse, even though GET and POST data was nicely validated and cleaned.
 if (!($result = DB::safeExecute($stmt)) { die('Error or something'); } $result = $stmt-&gt;fetchAll(PDO::FETCH_ASSOC); print_r($result); Just sayin'.
Java, JavaScript, most other curly brace languages...
Just saying what? That $result can be assigned to in the conditional just for the hell of it?
I believe this is correct, i change it to mysql_fetch_assoc and you should be good.
The problem is that these type of tricks while can be understood or commented so they are understood are missing the real point: why try and write a couple less lines of code but sacrifice readability? The actual gain of the less verbose method is essentially a circle jerk: "look how awesome I am it's only 2 lines of code and does all this!"
No those are a huge issue too, didn't mean to imply this was php's only issue 
I'm confused. Where's the database? My server or yours? Is this something that I'd sign up for, then add a bit of javascript to my page and it would generate itself and do the rest, a full blown web app that requires installation with db access, or something else I'm missing?
While all PEAR packages *can* be locally installed, that doesn't solve the licensing/distribution issue.
Well, the big advantage I see is in the lack of variable assignment. Rather than making temporary variables to hold function call boolean results and doing a bunch of separate comparisons, you are doing all of the comparisons in a single statement, only assigning the important result. Having to trace the logic around a bunch of foobar variables is just as frustrating, or more frustrating, than taking a moment to unravel the ternary logic in an optimized statement.
What I'd consider here is not allowing the user to download your code directly, and host everything on a server you write. They could either embed the form via an iframe (low customization) or JavaScript injection (high customization - they could simply define styles that match the form's rules). This way you maintain some control over what data's coming in, it remains easy to use (like adding a Facebook Social Plugin) and it's still customizable. By the way, this is off the top of my head, so I'm sure there are some security concerns with this approach. Also, have you checked out [wufoo](http://www.wufoo.com)?
I completely disagree. For one your assuming a developer making stupidly named variables is why a more verbose method is bad. I think any developer here worth anything can agree that properly named functions and variables are extremely important to code readability. That said a well written verbose statement is infinitely more readable and understandable than ternary assignment inside a conditional
i love both of you! &lt;3 lol thanks. that was driving me insane, i narrowed it down to the method itself causing the problem, but i couldn't for the life of me figure out why, it makes sense why, now that i see what was causing the problem. public function getFromID($id){ $id = mysql_real_escape_string($id); $fetched_item = mysql_query("SELECT * FROM $this-&gt;table WHERE id = '$id'"); if(mysql_num_rows($fetched_item)&gt;0){ $object = mysql_fetch_assoc($fetched_item); $array = (array) $object; foreach($array as $var =&gt; $value) { $this-&gt;$var = $value; } }else{ $class = get_class($this); Base::errorWindow('Invalid ID','Error: Invalid '.$class.' ID','No '.$class.' Found With ID #'.$id.'&lt;br /&gt;&lt;a href="index.php"&gt;Return to Login Page.&lt;/a&gt;'); } return; } this is my new function and it works, but is there any better way i can do this?
Trenary operators, assignment in conditions are a great mix, but I think in this case it's superfluous. [sli's](http://www.reddit.com/r/PHP/comments/fk7e3/why_php_is_awesome/c1gk87a) version without the assignment in the condition is the most readable, IMHO. Also, singletons are now the resident evil, they're hard to [unit test](http://www.youtube.com/watch?v=XcT4yYu_TTs) and instead you should use dependency injection and [service containers](http://www.slideshare.net/fabpot/dependency-injection-with-php-53) to hide complexity and verbosity.
The version does the same thing and it's easier to read. I just kept the assignment-in-conditional because it was in the original version.
The only time I can see this as acceptable is if you are evaluating multiple conditions in an *if* statement, with one of the later ones being a database query, which is then also used as a condition right after in the same *if* statement. Assuming you order the conditions optimally, this would save you from querying the db before the *if* statement (which means it would otherwise always be queried) and then checking its value within the *if* statement. This has the benefit of saving a query if conditions fail, which means the query will not run (opposed to always running if the db was queried before the *if* statement, as mentioned). For example: if ($mail_message != '' &amp;&amp; validate_string(1, 11, $thread_id) &amp;&amp; validate_md5_string($ASK__post) &amp;&amp; $ASK__post == $ASK__db &amp;&amp; count($thread_members = get_thread_members($thread_id)) &gt; 0 // **db request** &amp;&amp; in_array($user_id, $thread_members) &amp;&amp; get_thread_delete_status($user_id, $thread_id) != 2) // **db request** { // we got you covered. } 
Sorry, I had got caught up with something tonight. It's currently enabled like this.
Yes, wordpress based. The alias would work.. but there's spaces in the [name], so I'm not sure how to get that to work.
Another option would be to create an api, so you could accept requests from a variety of languages. They would pass you a list of parameters, either by a query string, post, json, and your program would return a response that they could process (via something like json or curl). This allows them to style and integrate into their site easily. Then in the integration portion of your site, you could put up examples of how to do so in php, python, ruby etc. You could then additionally have a downloadable widget or two, so those that just want a plug and play option can do so.
get_permalink($item["id"]); should return the permalink of a post with whatever ID is passed to it. If there is no post with that ID Wordpress will simply return nothing which is what is happening here. So, the ID being returned by ThumbsUp does not match a Wordpress post ID. Since I don't know the database structure you have I can't say how to grab the ID you need. Something like a SQL statement that can match the ThumbsUp entry to the Wordpress entry using some element they have in common is what you need. I recommend looking again at the link you posted that shows how to integrate ThumbsUp with Wordpress... that looks like it's more what you'd need.
Really? I didn't find that unreadable at all. Perl, now there's an unreadable language.
ever heard of unset()?
Apologies. I was drunk when I wrote that, I wasn't being constructive. It really depends who you are coding for. There are three cases in my mind. 1) If it is just you who will be maintaining the code then if you are happy with it, use it. 2) If you are writing code that a team looks after, then this kind of conditional slows down reading of the code and shouldn't be used. 3) If you are writing code that you will release under a public license (GPL, BSD, MIT et al) then no. 2 applies also. However this usage scenario has other things to mention. Other people will at some point try to use your code and in order to make it easy for them to follow and understand (documentation aside) it should be as readable as possible. Not only this it would demonstrate to any potential employer that you can write clean understandable code which is very important. Those things aside, you learn by mistakes. If I take a look at the code I was writing many moons ago, I cringe and I'm sure I'll do the same about the stuff I am writing now in a few years time.
The alias field should not have spaces in it. It is something that is automatically generated by Wordpress usually, based on the title but URL friendly. 
Why the downvotes? session_start() is the answer.
You're contradicting yourself. While it's worth writing a framework from scratch at least once (I'd guess that most of us have done it multiple times; it's worth it for the experience it gives you), I rarely believe a single developer can rarely create a brilliant framework that does everything perfectly. Sure, you can develop one that meets immediate requirements (specific database, specific caching mechanism etc), but it'll be a pain in the ass to grow unless you work on exactly the same platform every time. If you have a project that is very specific (i.e. "I need a website that does X, Y &amp; Z") and has a tight deadline, you'd rarely start from scratch writing a framework that did database handling, error logging, caching, templating, internationalization, DAO/ActiveRecord, authentication etc - you'd be mental. Maybe 5 years ago, it was more common that people did this. Now a days, there are so many solid, well supported frameworks out there you're only hurting yourself by not investing time into learning an existing framework or 3. 
Thank you very much for the assistance.. I'm trying to work with the maker of the "ThumbsUp" plugin as well. He told me to make these changes and all my votes got reset, so I had to put it back to what I had before. This is what the code was that he told me to use function thumbsup() { ?&gt; &lt;div class="thumbsup"&gt; &lt;?php if (is_home() || is_single()) { $name = '[post '.get_the_ID().'] '.get_the_title(); echo ThumbsUp::item($name)-&gt;template('thumbs_up_down')-&gt;options('align=left')-&gt;format('{UP}||{DOWN}'); } ?&gt; &lt;/div&gt; &lt;?php } function Top_3(){ ?&gt; &lt;div class="Top_3"&gt; &lt;?php $items = ThumbsUp::items('')-&gt;orderby('votes_up desc')-&gt;limit(3)-&gt;get(); // Loop over all three items foreach ($items as $item) { // Extract post ID out of item name preg_match('/^\[post\s++(\d++)\]/i', $item['name'], $matches); $post_id = $matches[1]; // Echo a link to the post $link_url = get_permalink($post_id); $link_text = preg_replace('/^\[post\s++\d++\]\s*/i', '', $item['name']); // Remove "[post X]" prefix from name echo '&lt;a href="'.$link_url.'"&gt;'.$link_text.'&lt;/a&gt;'; } ?&gt; &lt;/div&gt; &lt;?php } add_action('thesis_hook_after_sidebar_1','Top_3'); This would display the following text: “Take The Baby With You!!” Husband wants me to call out sick so he can watch football. How to Clean Dishes It gets linked to a single article: http://isthewiferight.com/2011/01/26/my-wife-wanted-me-to-change-a-photo-of-us-with-me-wearing-a-shirt-with-obama-and-martin-luther-king-jr-she-said-to-photoshop-it-and-remove-obama-and-mlk-for-a-book-i-am-making-for-her-grandmother-w/ I'm at a loss.
Assuming you are using PHP 5, you need to make sure that you are getting the $item by reference. Right now, you are simply saving over a copy of the item. foreach ($array as &amp;$item) { } You can find the complete details of this in the php documentation: http://php.net/foreach Edit: Removed us-specific mirror from manual link
It's because $item is scoped to the foreach, and is being thrown away each time. Try making it a reference. foreach (&amp;$array as &amp;$item) { ... } That'll do what you expect. In the meantime, it's poor form to use names like "string" and "array", as in the future, when you come back to this code, you're going to forget subtleties in what you meant. Even on seemingly trivial code, sooner or later this'll bite you in the ass during maintenance.
The same is true in all PHPs, actually, going back as far as FI.
I know I can use session_set_cookie_params() &amp; gc to make a session last longer than the default browserclose / 1440 seconds, but I choose not to: * What if a users uses multiple computers (on at home &amp; one at work), He will have multiple sessions open and data can get out of sync. This is solved by logging in again or reloading variables when there was more than 30 minutes between the pageloads. But that feels more like a workaround than a solution. * I have to call this session_set_cookie_params() on every page load, before session_start. How can I efficiently make a difference between guests and users who checked the 'remember me' box? * The number of sessions stored on the server will get very, VERY high. With a lot of unused data.
What does manual garbage collection have to do with basic code logic?
I named them that so you would see better since it was a small piece of code. However I did it as: **foreach**($array as $item) { list($att, $value) = explode(':', $item); $table[$att] = $value; }
http://www.php.net/manual/en/function.session-set-save-handler.php Use PHP sessions but customize them. If a user logs in, use the session handler to link their sessions. You may have to make some database or some table in your database to handle it, but you can tie together all of one user's sessions. I don't have any kind of custom session handling to show you but this is definitely the way to go. You might be able to find some kind of custom handling already set up on your favorite PHP forum.
*It's because $item is scoped to the foreach* Actually it's overwritten each time in the foreach's as -part. It is not unset automatically. just try to add an print_r($item) after the foreach.
nice i just made a pretty simple facebook app using cake, anyone want me to open source it? just throw me a reply, and i'll github it
So then what's the value of $table? Because that's where you are storing the key value pairs, not in $array.
Absolutely. To me it feels much easier to visually scan a file when written in this style. Also shortens the total height of a file which also contributes to quicker scanning. if ($PS) { echo 'P.S. I didn\'t know what you were referring to at first and had to look it up.'; } if ($edit) { echo 'Edited code samples.&lt;br&gt;'; echo 'Escaped apostrophe in first code sample.'; }
for this kind of thing I usually use JSON encoding.
Im not saying that php is unreadable all the time just when you write stuff the way OP did.
THat's what explode and implode are for, check out this article on array functions: http://devlup.com/programming/php/4-array-functions-you-should-know-in-php/1307/
Agreed. "next line" feels like it's wasting space and disconnects from the statement that it's matched to.
I googled it, found [the relevant Stack Overflow thread](http://stackoverflow.com/questions/2349378/new-programming-jargon-you-coined), but I still don't actually *see* the connection between the brackets and the Egyptian drawing. Anyway — I hate Egyptian brackets. They just feel asymmetrical and unbalanced.
TIL there's a name for same-line brackets. I originally used them at a place that was pretty strict on the [Zend Coding Standard](http://framework.zend.com/manual/en/coding-standard.coding-style.html) and got very used to it. It comes naturally now.
YES! if (true) { // this drives me nuts }
$value is a new array.
Apology accepted. We all have our "I was drunk when I wrote/said/broke/crashed/fucked that" moments. That said, I think you are exactly right in what you say. What I posted above was "first-pass code", meaning it was a one liner out quick and dirty script to import some custom csv files into a db. I had just 'discovered' you could do something as ugly as putting a ternary in a conditional along with assignment, and it kinda made me smile, so I had to post it.
Same here. I've worked a lot with lua, which has no brackets. Take this for instance: function doStuff(a, b, c) if (a ~= b) then print(c) end end Short, simple, elegant, and clean. If you take this example and tweak it to use the "standard braces" in PHP -- function doStuff($a, $b, $c) { if ($a != $b) { print($c) } } I can't even visually parse that at a glance. This is an incredibly simple example, so the difference doesn't seem that extreme. However, when you get to a large if/else brick, or even just several different if statements, the added (useless) whitespace just grows to the extreme. My eyes aren't looking for brackets, my eyes are looking for indentations. The brackets are useless! I'm very curious if other people who use other languages that aren't constrained to brackets think in a similar fashion.
Same line brackets for me, definitely. PHP, as well as any other language with C-syntax: *I HATE YOU* if you don't use brackets at all. Just because you can have an if/foreach/while without brackets NEVER means you should.
Yes, yes so much http://en.wikipedia.org/wiki/Indent_style#BSD_KNF_style
I'm saying in your self-post text you are doing: print_r($array); instead of print_r($table);
It's all in what you're used to. I started working for a company who had chosen the standard before I got there, therefore I spent 8 years looking and coding in next-line brackets. So to me, next line brackets are easier to read. They chose that standard because each block of code starts and stops on the same line. As long as you tab properly, it's easy to scroll through and see where one if statement starts and stops, this is VERY helpful when you have if statements, loops, and functions all together. I agree with them on this. That being said, when doing jQuery, egyptian brackets are easier to read... again, because when I was learning it, that's what was used, and it's just familiar.
oh, I changed the names of the variables in the OP before posting to not make you confused over my namings, sorry about that.
I would post your code exactly as it is, it's going to be impossible to debug your code if you are not actually posting it.
Yes. I used to like standard brackets and lots of whitespace better, but over the years I've grown to prefer my code more compact.
Actually if there is really just one command after the if I would just do this: if ($edit) echo 'Edited code samples.'; 
My OCD and habit forces me to put each bracket on its own line. But I must admit I'm warming to this style, which until now I didn't know the name of.
I'd never heard them called Egyptian brackets until today; I've always known it as the [One True Brace Style](http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS)
THIS! K&amp;R style brackets drive me crazy.
No, I think this style generally results in lots of unreadable spaghetti code. It's better if you're always using brackets but I still find it hard to read. Case in point: WordPress.
Why not: $edit &amp;&amp; echo 'Edited code samples.';
One bracket above and to the right, one bracket below and to the left. Now look at the Egyptian's hands.
Does this help? http://imgur.com/4AiZ3 I also made this alternate version because it looks silly :P But it doesn't really demonstrate the Egyptian brackets properly. http://imgur.com/at1wF
It depends. On an if statement and a for loop with a small amount of code in the brackets I usually prefer same line brackets. In functions, switches, non-for loops, and if statements with lots of code in the brackets and so on I usually prefer starting a new line. This is useful so when I'm scanning through the code I can easily find major points in the code easily because there is mostly blank line to mark off where it starts. Quick if statements or for loops usually indicate minor pieces of code which I don't want to have a spacer line for.
1TB is excellent. It reminds me more of python - in my editor my brackets are a colour such that they are barely visible. Currently working on some code written with whitesmith's style. My god it's awful.
 function forFunctionsClassMethodEtcIDo () { $this; } // but for ($control = 0, $statements =0 ; $i &lt; $do; $this++) { $this-&gt;isTypical(); $i = $see + $this-&gt;alot('I love my alot'); } try { run($ningThis($code), $itWontWork[$i][$promise][$you]); } finally { if ($u === $read) $this-&gt;entireComment($youreAsBoredAsMe); }
Cool. I'd never thought of using this syntax. Tempted to start using it but I suppose an 'if' statement is clearer.
Yes, please use an if statement. Syntax like the above, while it might be cool and short, is not standard and can be a pain to debug for anyone who doesn't already know what it's supposed to do. It's sort of exploiting the short-circuited nature of &amp;&amp;.
This is what most C programmers use, and I don't understand the point of it. If you're going to use a bracket style, why not use the same one for all control structures?
Touché. I'm guessing you aren't serious about using that, but just in case... I do agree with the comments that an 'if' statement is clearer.
Ah, yes. Thanks :) I'm an idiot, I was looking at the right hand and the left *foot*.
First, you have the historical reason for having function brackets on a different line. See http://en.wikipedia.org/wiki/Indent_style for more information on that. Second, it's that functions, methods, classes, etc, are not control structures in the same way if/for/switch are. The former compartmentalize the code and logic, while the later control the flow of execution. This makes perfect sense to me. It creates a clear block around the code that is being sectioned off, as well as clearly separating scope. Placing the function declaration next to code working on the parameters essentially places two very different things next to one another that really have no bearing on one another. Essentially, it's the same reason people put the closing bracket on a line on it's own. It's to separate the previous code from the following code. To show the ending. Regardless, I like some white space, not too much, but enough. I mean, if we want to get crazy, we can eliminate the unnecessary ending bracket on the last line and just move it to the previous line. function wtf($param){ $bracketDiscussionsAreAsUsefulAsLanguageOrEditorWars = 'Yes, yes they are'; if (true===$param) { return $bracketDiscussionsAreAsUsefulAsLanguageOrEditorWars;}} } else { return "omg I had a pregnant";} echo wtf(true); Granted, that's bad for obvious reason above. So, call my reasons historical and division of labor, and just liking a bit of white space. =) Edit: I should point out I'm not against people's use of any structure, as long as their is thought and reason behind it, and they stick to it. At work we use a slightly modified Zend Standard, so that follows me to my personal work. The only thing that really raises my ire is if ($jason-&gt;sees($this)) { $jason-&gt;will($rewriteTheDamnCode); } else { $jason-&gt;will($killSomeone); } Seriously. }\nelse\n{ should DIAF. There should be a name for that. Something like BRACKETS FROM HELL THAT SHOULD DIE IN A FIRE! Code might be crashing servers from a simple bug, but I will rewrite those brackets first, damnit! =)
I've found that one line if statements have a tendency to become two or more lines, and not including the curlies leads to errors, so by default all flow control blocks get the braces included.
I use that syntax, but with 'or'. It feels better: fopen(...) or die("Argh");
` $string = "Attribut 1: Värde 1;Attribut 2: Värde 2;Attribut 3: Värde 3"; $array = explode(";", $string); $newArray = array(); foreach($array as $item) { $item = explode(':', $item); $key = trim($item[0]); $value = trim($item[1]); $newArray[$key] = $value; } print_r($newArray); `
I agree. I love me some whitespace and clean, readable code, but new line brackets like that don't add valuable whitespace. They just make things feel disjointed and disrupt the flow of the code, making it harder to skim through. 
You forgot to escape the apostrophe.
[Allman style](http://en.wikipedia.org/wiki/Indent_style#Allman_style_.28bsd_in_Emacs.29) for me, with tabs that equal two spaces, but use the tab character. if ($peanut) { $butter = true; } I wasn't actually aware this was the normal way, though. I've read more Egyptian style than anything else. 
"Egyptian"? *twitch, old man jargon Nazi mode on* Kids, it's called 1TBS, or K&amp;R style. Zend framework uses them: http://framework.zend.com/manual/en/coding-standard.coding-style.html I like it, as I came from a C background where it made sense to get more actual lines of code on screen instead of syntatic sugar. One reason why python's indentation appeals to me as well. Similar code density, minus the brackets.
Never heard of Egyptian brackets. I think you are referring to [1TBS](http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS) And yes, it is the ONLY way.
It's a common shell and Perlism. For some reason people don't appear to use it much in C or C++ or php.
You'll be glad to know [Zend](http://framework.zend.com/manual/en/coding-standard.coding-style.html) hates that... whoever Zend is anyway. But `Egyptian` is just for `if/else/while/for/etc`, not functions.
Personally, it's the 4 spaces vs tab thing for me. Sure, it's all good if 3 spaces means drop the database, and 2 spaces means insert a record as your language depends on it. But for languages that don't give a damn about white-space, why not just a tab or two? Programming takes enough keystrokes as it is.
I suppose i'm going to get downvoted to hell here, But I like the style you used in your second example. The braces line up, and you can easily see scope.
Just screwing around, and I'm sure there's a function to add in here, but... $s = 'Attribut 1: Värde 1;Attribut 2: Värde 2;Attribut 3: Värde 3'; preg_match_all('/(?P&lt;keys&gt;[^:;]+)[:](?P&lt;vals&gt;[^;]+)+/', $s, $matches); $array = array_flip($matches['keys']); foreach ($array as &amp;$val) $val = $matches['vals'][$val]; 
Awesome. That was actually my post in Stack Overflow (Angus McPresley is my alter ego) and accounts for exactly all of my karma points there. Thanks for the updated picture, I LOLed. When I explain the term to someone, it's usually followed by the obvious hand gesture without the foot up...
I suppose you could return $array. That way you can say $Row = $MyClass-&gt;getFromID($id); As far as suggestions for other approaches to take.... When I do database work, I have a class I wrote called MyDB. It has a few functions that help me write my DB code a little quicker. For example, say we have user account information stored in a table called Users. Lets say the table has four fields: UserID, Username, FullName, and Age. We want to write the values of the fields Username and FullName to a page: // just an arbitrary value, in reality you'd probably set $UserID to a value stored in the $_SESSION or $_REQUEST array... $UserID = 3; // this variable isn't actually used in this example code... $MinimumAge = 18; // initiates the connection to the mysql server when we create our class instance... $DB = new MyDB(); // Executes the equivalent to the SQL statement "SELECT * FROM Users WHERE UserID = 3"... $DB-&gt;TableQuery("Users", "UserID = $UserID"); // iterate through each result row (if there are one or more rows to iterate through)... while ($Row = $DB-&gt;Row()) { // print out something like "SlimFastForYou (John Smith)" on a new line for each row echo $Row["Username"] . " (" . $Row["FullName"] . ")&lt;br /&gt;\r\n"; } Our query as-is will only return one row for this example. If you only expect one row, may as well write the "if" keyword rather than the "while". Consider though if we want to find all users 18 or older... Our TableQuery line would then be: $DB-&gt;TableQuery("Users", "Age &gt; $MinimumAge"); (the SQL being "SELECT * FROM Users WHERE Age &gt; 18") // we then go on to print out each listing from our while loop ... If you're interested, I could post the class code. You could probably write the class yourself, and write other functions that help you with common queries.
... because that's how the DOM standard says it should work. Stupid, yes; standards based; yes.
 &lt;?php $str = 'Attribut 1: Värde 1;Attribut 2: Värde 2;Attribut 3: Värde 3'; $data = array(); array_map( function($pair) use (&amp;$data) { $kv = array_map('trim', explode(':', $pair)); $data[$kv[0]] = $kv[1]; }, explode(';', $str) ); print_r($data); (Closure bandwagon remix, just wanted to see how legible/wtf it'd look in comparison. I think foreach wins this round.)
Did you mean to have two closing braces at the end of the first return statement? 
This. Emphatically. 
It's not much in style, but I prefer: function doThisSomething(){ if($this): return $that; endif; }
But if you were to do it "egyptian style" then the second brace would still line up with the function declaration, which just as easily allows you to see the scope and thus the { on it's own line becomes redundant.
Yes, I agree and always argue this point. Can't even begin to count the number of times I've been altering someone's code and I've had to turn their one line if into a multiple line one and wished they'd done it "properly" in the first place. One that bugs me even more is: if(somethingIsTrue) doSomethingElse(); Because if you open it in another editor the tabs may be different and when scanning the code you don't always realize it's a single line statement. I end up with weird parsing errors in my head (just like when someone uses an opening bracket and doesn't close it.
I am: I happen to be on this side of the planet this month anyway, and the timing worked out well. It's my first PHP conference, and I'm quite looking forward to it — bar PyCon AU last year, all the other conferences I've been to have been more generalist.
TITS || GTFO();
The alternate syntax is useful in html views, for example: &lt;?php if($thing): ?&gt; &lt;p&gt;Thers is a thing&lt;/p&gt; &lt;?php endif; ?&gt;
I've just moved back to London. If I can be of help to anyone, let me know.
May I ask why it's too much overhead to do a write for each message? What sort of concurrency are you looking at?
Why the jesus is this guy getting voted down? This is a logical point. Do not favour this magical "write once, run anywhere" thing, because it *never* works.
Well, I was hoping to find some way to cache that information or just look a completely different direction. I suppose it's no more server-intensive than anything else, but it seems so redundant.
github it? Do you use Ruby by any chance?
Particularly in that you may often need to add logging or debugging code in there, so you might as well already have the brackets in place.
Do not query the db for new messages on each page load -- that gets too intensive once you have millions of messages and user IDs. Instead write out some sort of flat cache -- like a memcached key -- when a new message is entered into the system. You need to reverse your thinking on when to find data. Do not look for data on each page load, rather do the query once when the new data is written and leave it at that. "Push" the data update rather than "pull" it.
You could cache all the user's messages, writing each read_status change to the cache, then flushing the cache back to the database at some point. This might get expensive (in terms of memory) if your users have lots of messages. It might be more viable if you are showing them a page of 20 messages at a time, flushing back to the database every time the page changes. In general, though, as long as your users are reading messages no faster than one every few seconds, any small site should cope. For larger sites, perhaps look at sharding the messages table over multiple database servers. Any good?
Screenshot?
Assuming the messages are meant solely for one person then what you've already got there will work fine on the back end. Just make sure to properly index the read_status column. You shouldn't run into too much of a performance hit if the scale of your application is small. Beyond that, the caching solution you want all depends on the implementation. Do you want the user to see new message counts in realtime? Or is a 1-2 minute lag acceptable? If you want realtime, then what will notify the cache of invalidations? Will you do it via triggers or via your app code? Yada, yada. It really boils down to the type, scale, and performance requirements of the app.
I thought I will rely on automated screen shot, apparently does not work. http://fromitroom.imgur.com/redditphp
I am worried if and when somebody sees me writing a function function I_RAPE_CATS()
When a message is delivered to someone's inbox, set the flag that says they have new messages, so you don't have to scan the inbox for new messages all the time. When they read their messages, if the flag was set, clear it. I don't think you're going to get it any more efficient than that.
Python's got even fewer redundant characters involved: def doStuff(a, b, c): if a != b: print c Unfortunately the lack of braces seems to be quite a system shock to some and it's quite difficult to get people into it. I use python for most scripting tasks (still PHP for most deployed web code tho').
/r/php
Wait? Microsoft are sponsoring?
Try using a real protocol like IMAP.
`function Holla_for_that_dolla()` nearly made me choke on my coffee. Edit: corrected code space
Are you sure? The manual specifically says that this functionality exists "As of PHP 5".
Alternately a slightly sloppier way to do it is to put a field in the User table like "unreadMessageCount" and then update that field when a new message is entered. Assuming you pull the user data with each page load anyway this prevents you from having to query the message table, too. (Push instead of pull -- know when it is appropriate to denormalize for efficiency and speed.)
I'm going to try to get there. It's a bit pricey, but there are tons of interesting lectures. Did you go last year? 
Pretty cool! Could the title be integrated in the function body?
Microsoft sponsor a lot of the PHP conferences. They like to woo the open source community, and besides, WAMP is still a popular platform.
Know any good bars near the venue?
Does that also mean that the closing brace is redundant - seeing as we are lining up the function dec anyway? function doStuff($a, $b, $c){ if ($a != $b){ print($c);}}
I would hate to maintain that
My budget didn't allow me to go last year.
It's just aesthetics. I prefer two spaces instead of a tab, not for any particular reason other than I think the code looks nicer to me. But then, I'm not collaborating on big projects with dozens of programmers; the only person who ever sees my code is me.
I too enjoy my Notepad++. I also really like EditPlus though it's not free and only because I got use too it a year back. I use WinSCP + Notepad++ for 99.9% of my work.
From here on out, I am naming all my functions after reddit usernames. This is brilliant.
Scoping rules, I meant.
Yeah I use winSCP too because I like how you can edit the files with Notepad++ as well... only draw back is its not threaded, it sucks for big uploads.
Yeah that does slow me down a little but it's a small price to pay for the convenience.
Hah, is this a "hide reddit for work" thing, or just for fun?
I went last year and it was awesome; nearly as good as the Manchester one! Can't go this year as I'm going to be abroad, otherwise would be nailed on.
I don't think I can go unless they get more sponsors. Platinum sponsors, gold sponsors, silver sponsors, bronze sponsors, media partners, community partners and travel partners simply isn't enough.
What's the guesstimated (or even better expected) traffic? Caching is pointless if you're in for low traffic. Someone got down-voted below for the obvious, but less elegant: a column works fine, unless you're heading into hundreds of thousands of users. Caching is exciting but pointless for 99.9% of web applications. You probably have way too much to do before sweating about that.
Oh and you would only have to write to the column once anyway. A simple update column=1 where created_on &lt; now() and read is null. The already read messages would be unaffected and you should be using a storage engine that supports row locking anyway. If you're still sweating over performance, you should be able to do an insert delayed in most RDBMS.
I use my own, which is in http://scutil.com/ . It's erlang, not php, but it's simple enough that you should be able to convert it. Look in /erl/src/sc_bayes.erl . Bayes is bayes. If it's correct and it isn't an efficiency problem, it's Good Enough (tm). ---- Edit: Unfortunately the moron squad has started pretending I said things I didn't say. Here's the code that Tyler Menezes was too delicate to look up: likelihood(Event, Given, Data) -&gt; likelihood_worker(Event, Given, 0, 0, Data). likelihood_worker(_Event,_Given, EventAndGivenCount, GivenCount, []) -&gt; EventAndGivenCount / GivenCount; likelihood_worker( Event, Given, EventAndGivenCount, GivenCount, [Data|Rem]) -&gt; { NextGivenCount, NextEventAndGivenCount } = case lists:member(Given, Data) of true -&gt; case lists:member(Event, Data) of true -&gt; { EventAndGivenCount+1, GivenCount+1 }; false -&gt; { EventAndGivenCount, GivenCount+1 }; end; false -&gt; { EventAndGivenCount, GivenCount }; end, likelihood_worker(Event, Given, NextEventAndGivenCount, NextGivenCount, Rem). Apparently giving you that code for free and saying "converting this to PHP is trivial, especially by comparison to testing and integrating a much larger and more complex lib for this single function" is worth a pile of downvotes, some screeching that I had demanded someone rewrite my entire library, and a bunch of belly-aching about my choice of a liberal license. If someone can't translate that into PHP, then they aren't really ready for this kind of work. Proggit's punishment fetish is getting out of control.
Well, first question should be: Does this need to scale to millions of messages and users? If so, I agree, you need to be smart about it if you wish to scale. If not, who cares, it's not going to be a big problem :)
I've seen a few people actually throw the entire user object into memcache as well. Most of that data doesn't change often enough to pull on each page load.
If you were writing python, sure. With that said, where the closing bracket is mandatory, you would eventually wind up with something like: print($c);}}}}}}}}} Which is not the goal, so no -- closing brace is not redundant (which closing brace are you using?).