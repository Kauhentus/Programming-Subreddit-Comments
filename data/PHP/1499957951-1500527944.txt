I shit on their favorite programming language
We were looking at bitbucket pipelines at work, but it seems there's no actual access control on who can use them. For example we might want lead devs to be able to deploy code but not Junior devs. Are we missing something?
No, $handlerName is a name. Say, a string. You don't instantiate the handler, you instantiate the module. The module instantiates the handler. And all handlers in a module typically are given the same Context object, which is specific to the module, and contains the dependencies they need (or in some cases the there is a Context object for all handlers, which is a subset of the Context the modules gets, but that's not a major complication - one more object). So things magically simplify. The key realization is that one handler is not an application in itself, it's not even a complete component. It's a part of a component. It's pointless to manage dependencies for it separately from the other handlers that, as a group, form one cohesive unit. Because the dependencies are instantiated lazily through the Context, no dependencies are created and wasted.
 extension=bz extension=php_bz2.dll extension=bz2.so extension=bz2.sl Shouldn't that first example be "bz2"?
Usually I will ignore it. If I feel argumentative I will question what version they last used, and ask what features their language of choice was missing X amount of versions ago. PHP is my first language so it makes sense to me. Me and my colleagues have a lot of hate for JS because we find some the functionality backwards. I'm sure for somebody who learnt JS as a first language would argue that PHP/ Any other language has functionality that is backwards or confusing. 
The validity of arguments can change over time. The statement could have been invalid in the past, but could also be true now or in the future.
Okay so taking your example... First of all, in auto-wiring, every service definition you want to be auto-wireable has to be a class name, so you won't be able to use the benefits of auto-wiring if you define services as regular keys like in your example. But say that we do define them as class names. And that a class of ours type-hints for a RegExpValidatorInterface. In that case, autowire would indeed not know which validator to inject. Basically autowiring isn't about autowiring _everything_, but rather just everything that's possible; and interfaces are not automatically auto-wireable. Does this make sense?
The new feature allows you to misspell the extension name.
&gt; Has it affected you psychologically? Do you eventually get in the hate wagon and wake up self loathing for choosing it? How about at work? Does it make you less motivated? I recognize PHP hate as a social phenomenon that's not based on facts. PHP is on par with JavaScript, Ruby and Python. It's not more flawed, it's not less flawed, it's about on par. Also I recognize myself as a programmer, who finds PHP useful for parts of specific projects. I'm not PHP, so why would I "self-loathe"? The trick is to stop identifying with the things you use. They're just the things you use. Do you get results? Yes? Then job well done.
For example: * If your IDE has plugins for polymorphism based on the class string passed to another class, it could infer the instance type that you request for; with config keys, you're only able to get this benefit if you use a plugin specialized for the container e.g. the Symfony plugin for Symfony projects. * You'll never know for sure just based on your code what class is actually involved with the service in question; you have to look up the configuration class to be sure.
Uhmm, you and /u/Jake_Jeremy should know that PHP developers are the lowest paid programmers in the industry. I suspect all the WordPress and Drupal code monkeys are dragging us down, but regardless, saying you'll be "relaxing on your boat" is unintentionally hilarious given the stats. PHP doesn't mean you'll be poor, but *on average*, you'll be relaxing in... a chair on your balcony, perhaps.
We're really on different pages here. I'm asking what's the downside of naming your factory methods according to the purpose of the object, vs. naming it after an interface. Manual DI is very simple. You write a factory method, it returns an object. The IDE knows what type it is, because it sees what you return, you can also have a return typehint. There are **no strings, no config keys, no plugins required**. To see what class is involved... you can then hover your mouse pointer over the variable where you fetched the result, or CTRL+click to the relevant factory method that *you just invoked*. And within a client object (one receiving injections) you shouldn't care what concrete class you're using, as you depend on the abstraction you asked about, not on the concrete object you were given by the root. So with this in mind, what are the downsides again?
I've started working with Magento fairly recently, but I don't mind it. Despite what I've heard everything is pretty straight forward. I mean, the coding standards are trash and I'll be happy to move to M2, but it's not nearly as bad as people make it out to be so far.
If you have 100 factories then you usually don't need 100 handlers, but that's another topic so nevermind. Let's assume unlikely scenario that logging is part of business logic overlooked in earlier dev stage and it can't be handled uniformly on infrastructure level (with single wrapper/middleware). Having 100 rewrites in factories seems painful, but it's nothing compared to rewriting 100 handlers' logic. What's important is the second part of assumptions - recreate (once) each of these 100 use case structures (don't forget runtime dependencies in those handlers btw, because probably that's the reason for having so many of them). For nicely crafted yet auto-wired compositions it's a couple of days work I think, while changing 2 lines in 100 factories would take couple of hours tops and those structures are already there.
As is said in another community that I am a part of, go do average elsewhere. 
You don't have to do it that way, and when I teach classes on Docker and PHP I never encourage it. Pointless overhead. Check out phusion/baseimage. We run nginx, php, new relic daemon, and a dns cache all in one container. Works extremely well and it's still not really violating the spirit of Docker. That combo is one "unit" of our app. 
Now I feel confused. I though by factories we were talking about the definitions for services for a container. When requesting a service from a container, you don't even get to see the factory, so it doesn't matter how you name your factory or anything, all you see in your code is the name of the service you request for. (no, this does not mean I advocate for service location in case that's what you're thinking) I know you _can_ ctrl+click and find the definition, but you can't do that just from the file itself, e.g. if you view it on Github. Also you can't ctrl+click on the definition at all unless there's a specific plugin for the type of container you are using (e.g. Symfony's). &gt; And within a client object (one receiving injections) you shouldn't care what concrete class you're using, as you depend on the abstraction you asked about, not on the concrete object you were given by the root. Yes, but based on just the service key, you won't know neither the concrete class nor the abstraction based on just looking.
PHP means that I can be a freelance backend web application developer, controlling my own hours, working for clients who cannot afford an internal development team or a proprietary solution. 
It's been a serious language for over 10 years. What, does the argument become invalid because it's often used or something? PHP 5 was released in 2004. It had more than enough for serious OOP development. PHP 5.3 was released in 2009. Namespaces, closures. Even better.
Using a MEAN stack will absolutely make you join the hate wagon because you'll write so much less code that does so much more so much more efficiently. At the same time, PHP/MVC was genuinely the best stack for web applications for many years, it gets the job done, and it's as easy as it is tedious. If you've ever had to do a project in C# you'll gain a new appreciation for PHP, Ruby was only hot because of RAILS, which was a good pattern to just implement in PHP. Wordpress, Joomla and Drupal are cancers on the world, and the reason for a lot of PHP hate. It's easy to do a narrow range of things, but get out of that scope and you're totally doomed. Basically, nobody should ever choose PHP for a new project, but there are plenty of companies that will continue to have success with PHP for years to come.
A container can be (and for me *is*) just a class with methods returning objects. No strings, no indirection. So all the issues you're talking about disappear. So if those are the drawbacks you thought my approach has, I guess now turns out there aren't any drawbacks. It's all that takes. A plain object. With methods. People are really good at turning simple issues into complex issues though, as most DI frameworks demonstrate.
I'm confused are you saying that the Drupal and Wordpress developers are dragging the vanilla/framework developers down? I can't speak for vanilla/framework developers but Drupal developers get paid very well and have good job security.
This is funny to me considering I **literally** purchased a boat this summer. So in about 2 hours I will be on my boat relaxing thinking about your comment and how it's not impossible to enjoy a boat while working with PHP.
Join the dark side.
Thanks, I'll check it out. I've only done Node and Go with docker in production, but they are much simpler imo.
Sure but from what I have read of your posts, you seem to imply that manually configuring services would still have the same sort of problems as autowire. Something about needing to create factories for manually wiring. If we agree that manually wiring services is fine then great.
Aaand proceeding to step 2.... ;-)
You're welcome to think whatever you want, and congrats on your boat. But I didn't say it's impossible to enjoy a boat while working with PHP. I said the opposite, I said "PHP doesn't mean you'll be poor", and I said "on average, you'll be relaxing in... a chair on your balcony". The keyword is "on average". Despite what you think (and the geniuses downvoting me up there), I don't make those stats. 
+1 for beer
I got promoted to head of web development after doing a takeover and complete refactoring of a PHP project that was already in death march mode. I guess PHP is part of that happening. You can do good or bad, with any language..
I'm rather saying that autowire doesn't bring about problems as much as people think. I'm just trying to defend auto-wiring from misunderstandings. Both manual and auto wiring is fine.
I mean, you can throw "on average" in front of anything and be technically correct... So I really don't understand what you're trying to accomplish with your post, then.
I was pointing out that bragging about how PHP brings in the money, so it's better than other languages is unintentionally hilarious, as most of the languages it's compared with bring *more money per capita*. There are always outliers. But you can't use anecdotal examples to prove a systematic rule, like "I bought a boat, so PHP brings in more money". No, we've invented statistics for this purpose. And the stats say, PHP brings less money than other languages. Again, as I said, I have my theories why that is, but that's a whole other conversation.
I keep having this pattern unfold. I'm reading /r/PHP and see a thoughtful comment. I look up to the user name to see who would write such a comment and often end up seeing "LtAramaki". Be gilded, good sir or madam.
Thank you :-) and glad you like my comments.
Second.
you mean C++ ? i though php is all about C and C++ or c++ already like C# :D ? idk
yeah i use voyager too but the many to many relationship config was weird in the documentation then i went to the github and i saw alot of people talking about that ended up a bug in voyager it self and they fixed it 
I think he's talking about them dragging down the average pay
PHP is the best programming language for web development in 2017. It's been the best for over a decade. It will probably be the best for at least 3 years from now. There are some reasons to use other languages for web development, but if someone's bashing PHP they don't know what those reasons are.
AFAIK it's still in testing ( https://blogs.msdn.microsoft.com/wsl/ ) 
Back when I used it the documentation was basically non-existent. Oh, you want to change some behaviour! Dig through countless XMLs and try stuff until it works, because it's really difficult to make a non-enterprise-y plugin system!
&gt; saving you ***a few*** lines of code for small applications maybe.
Yes, it should. :D Edit: Cal has fixed this. Thanks for spotting!
I've heard buzzfeed is still looking for extra people to write articles including their utterly useless clickbaity article titles.
So if I have an admin-panel module (wich contains many handlers for CRUD data stuff and some interactions with other services) I should give it one context object that contains all the dependencies of all the handlers? That sound a little bit like just passing a slimmed down version of the DI-container (now a service locator) to the module. If I want to avoid using a service locator, auto wiring and instantiating my instances myself, at some point I will have to write manual config for each handler right?
This was my experience. The whole XML thing really turned me off and not soley because its XML, it was just goofy and convoluted. Heavily over-engineered, which would've been okay if it could do basic things out of the box, but it couldn't without paying for additional plugins. Just left a really bad taste in my mouth.
Corollary: Don't knock a language unless you have actively programmed in it. If it hasn't been in the last few years, qualify the knock to the year you last touched it.
I don’t think it’s PHP per se, but programmers who in 2017 write shitty procedural code like it’s 2004. And that’s where most of the PHP hate comes from. When looking at superb written stuff like Symfony or Laravel one must really try hard to hate the language. That said, looking at the Wordpress codebase, which is pretty much one of the worst things to look at, yeah. It’s not the language. It is what you do with ist. 
It's [underway with Ale](https://github.com/w0rp/ale/issues/517#issuecomment-313967935) - although the initial version will just be diagnostics. The author is also poking at [completion](https://github.com/w0rp/ale/issues/517#issuecomment-312461337). Once all of the core async and messaging infrastructure is there (it's getting close), the rest is in theory relatively easy, assuming the underlying LSP supports the functionality. Ale, and probably anything else, requires vim8 for the async stuff. You could also try reaching out to the nvim plugin authors to support both.
&gt; Without caching the performance is not very good Isn't the whole point of symfony container that it's compiled/dumped to plain php code and thus cached?
I can see opcache being unfun with that.
I just sit here making CRUD apps and making money. Who cares about everything else. This isn't my religion, it's a paycheck.
opcache would miss only if the file has changed. the signature check could happen also only then
What basic things are you referring to?
What form of protection are we talking about? Public entry points can keep away a lot of load away from your system but all solutions will have trade offs and none is perfect. Usually this is filtering, i.e. rate limiting by IP to name a simple one. There are also public caching solutions. Some load will get through which you need to sustain. Behind the front line the strategies will be a bit different. Mostly caching for reads and back pressure for writes. Caching is fine, but think about what happens if your cache is cold and the circumstances when you may/have need to delete it. For serious DDoS, back pressure is much more important because they will aim for requests that internally create the highest load (writes). You have to limit threads, processes and memory to values that your apps can sustain. If the limit is reached there should be some clear indicator for it (alerting), then you can decide if you need to scale up or sit it out.
Simple: I'm not a PHP developer, I'm a developer that sometimes chooses to use PHP. All languages have problems. PHP has more than some and less than others. Reading the criticism is actually a great way of learning about other languages and programming theory. Don't get overly attached to any language. All the programmers I see with employment problems from the previous generation are the ones that clung to the technologies they were comfortable with and never broadened their horizons. Anyway - once you've tried out a bunch of languages and become proficient in them, you'll know how to handle any criticism you find unfair. If you've never become proficient in other languages, then how would you know if PHP really did suck?
The documentation is still pretty much nonexistent, at least for 1.x. Alan Storm has a good blog but many of the articles were up back on 1.3, not exactly new. A few things have obviously changed since then but the general concepts are the same. The process of writing extensions hasn't really changed, but with a couple of examples it's easy to dig into. Any time I've found something not working the way I thought it would xdebug has cleared things up pretty quickly. I'm certainly don't think it's perfect but I've definitely worked with worse.
http://wiki.c2.com/?BlubParadox
This week I had to do some work in Wordpress for the first time. Now I understand where the hate comes from. Still love me some PHP if it has absolutely nothing to do with Wordpress though!
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Not by default. [Dumping the configuration for performance](https://symfony.com/doc/current/components/dependency_injection/compilation.html#dumping-the-configuration-for-performance) must be implemented manually. You also have to configure the cache for the prod-server and disable it on the development machine. Dumping/caching the container into a php file will benefit from the PHP internal opcache of course but could cause caching issues. PS: If you have a plugin-architecture (with dynamic objects) a fixed cache (and autowiring) is also not the best solution. 
Are you using AWS or some other cloud provider? In AWS this can be done by setting up a security group for the webservers/databases to only allow traffic from the load balancer or other internal servers. This way the only public endpoint should be your load balancer so all traffic should have to flow through it, i.e. need DDoS protection. 
Hi, this is a fine response and I appreciate it. **However it doesn't answer my specific question**. It rather offers additional advice for how to mitigate other aspects behind the lines. I'm talking about front line here. My question was rather simple as it is something I'm still unclear about: Whether do we need to add DDoS protection to 'internal' servers as well, the ones that are not publicly assigned with a DNS. I am simply asking whether there is a way to detect and attack our internal servers directly, instead of through the primary entry point. They are firewalled and only communicating among themselves (via http and MySQL ssl) and with the balancer, but otherwise not opened to the outside world. Suppose I have a Linode network of servers in my config. Linode does not offer DDoS protection, then this must be purchased from elsewhere. If you don't have it they nullroute your servers. I am asking whether a DDoS protected entry point will suffice, like a OVH or RamNode Nginx balancer(s) (not talking about Layer 7 here). OR, do we need to protect all the servers as they can still get to them via their own IP's. I just want to be sure how we need to configure this. As for your specific response, how to mitigate the Layer7 aspects of it, here is our current status: - Public caching solutions won't help us much. Our application is a B2B product where each and every pageload is dynamic and different. Few are cacheable externally but those aren't going to be the main load. Just some resources can be cached, images and stuff, we don't use much, hardly a DDoS subject. - Fortunately our application is designed to sustain heavy load, we have always considered this when building it from scratch. While the pageload can't be cached externally, there are lots of internal caches that are used to compile the pageload. We also have a very specific low-impact DB approach that helps further. We think we can mitigate it. There is also an ever-growing internal mechanism for mitigating and auto-blocking excessive requests. &gt; For serious DDoS, back pressure is much more important because they will aim for requests that internally create the highest load (writes). Makes sense, we expect that, and in some ways we are prepared. Otherwise there's still a lot of work ahead. &gt; You have to limit threads, processes and memory to values that your apps can sustain. If the limit is reached there should be some clear indicator for it (alerting), then you can decide if you need to scale up or sit it out. Correct. This is also an ongoing concern and will be monitored 24/7 and continuously improved whenever possible. Do you also have a response for my specific question? Thanks!
Hi, For certain specific reasons we can't use AWS. We tested AWS, Google Cloud, DO. We then switched to Linode and now testing RamNode. Also, as far as I have read AWS does not offer DDoS protection. Now as you likely already know, DDoS is one thing and security-based access and firewalling is another. For example we can secure our internal servers as well at Linode with IP-based rules and whatever. But that's not DDoS protection. Your response however seems to suggest that as long as you secure your internal servers' communication, you should be fine with DDoS protection only for the main entry point. Because that's what you would have via the AWS security. You still need a DDoS protective layer like Cloudflare for example on that one though. Edit: I now understand better your response - if those are **internal** IP's then they are simply not accessible from outside. Unfortunately each of our servers will also have a public IP as well, it's needed in the configuration, we use a distributed approach where some servers are in different geographical locations.
Take a look at [AWS Shield](https://aws.amazon.com/shield/) - the Advanced version is probably more what you are looking for. With the Advanced version you also get the WAF for free, which is pretty cool. 
Thanks, checking it out. Edit: I took a quick look, we can't use it since it is AWS-only solution. For specific reasons we are unable to use AWS.
Gotcha. May be overkill to route it through then if the pricing isn't competitive, but with CloudFront you can use an external server as a source as well, not just an internal resource. Internet -&gt; Shield -&gt; CloudFront -&gt; External Server. 
This is one of the best answers in the thread. Don't be a PHP developer, be developer. Know when to use PHP and when to use other options. We theoretically could use PHP for every system at my current place. But by doing that, we'd have about 6x the number of servers, much slower processing and more technical debt. I love to code in PHP, but I realize that it's not always the best language choice for the job at hand.
 &gt; PHP is the best programming language for web development in 2017. Can you elaborate on best for web development? What type of sites are you talking about? A mom and pop site for their store? I'd agree, PHP is a great choice. A single page application with a React front end? I'd argue that node would be a better choice since it's Javascript on the front and back and allows the front end developer to read more into the code. An API? If it has background processing, I'd say Go would be a great choice. Something that needs a bunch of Lambda functions? You aren't going to use PHP for that. A site that requires a lot of mass inserting and pulling reports? Unless you want to set up a bunch of queue systems and supervisor, there are much better options.
&gt; But I can't do this: &gt; interface ExactMapper implements AbstractMapper { public function objectToArray(Product $object); } The reason he can't do that is because: 1. `ExactMapper` is promising it can fill all the roles that `AbstractMapper`can fill. 1. `AbstractMapper` has promised its function will accept **any kind** of`ActiveRecordBase` 1. So indirectly, `ExactMapper` has to do the same thing: Accept **any** `ActiveRecordBase`. 1. But in the body of the interface, `ExactMapper` tries to undo that promise, and says: "I will only accept **one subcategory** `ActiveRecordBase`, I will not accept all of them." 1. This creates a logical contradiction. 
I don't give a fuck. I'm on a team of C++14 devs and PHP is a subject of perennial jokes especially now that I'm RM for 7.2... Ya know what? I joke right along. Because PHP is full of WTFs and bad design decisions (some of which were my bad designs). Heck I even run an FB page poking fun at PHP: https://m.facebook.com/profile.php?id=147594855443853 In the end, however, every joke ends like this: https://www.reddit.com/r/ProgrammerHumor/comments/2usogj/but_you_have_heard_of_it/
&gt; CloudFront It's always good to learn, I wasn't fully aware of it. However again this is an option only as an external DDoS solution, I will keep it in the stack of primary protection options. There are many others, some more expensive other cheaper, like RamNode and OVH servers, then Incapsula, CloudFlare and the one you suggested. My question is again not necessarily about what primary protection to use. It's just about the internal config and dangers for the private network when each private server also has a public IP as well.
Each server with public IPs will need its own protection. You can probably avoid some problems with restrictive firewalls if possible. If you don't need public access you can also use VPN. But honestly I cannot give you a complete and reliable advice as I am not a borderline network guy.
Shrug. I used to program in Cobol. It's a cakewalk after that. :-) But seriously the way I look at it there's no good or bad languages, just good and bad coders. A good coder knows the strengths and weakness of the language. So for example one of the big criticism of PHP (and indeed JS) is that they're weakly typed. Coming from Cobol I found that amazing liberating, sure it can trip you up if you're not careful (as the whiners love to point out) but it makes life so much easier. 
Thanks. Well maybe someone else can still enlighten me (some borderline network guy). I'm also currently asking the cloud support guys as well with this question, maybe they will be so kind to give some answer here. For the moment we're considering having all of them protected (better safe than sorry), but if we don't need this, it would be far better NOT to have it - not for cost reductions, but for the fact that it allows us to be more flexible in our configuration.
I'm not a flaming PHP hater but "best programming language for web development in 2017" would be Typescript/Javascript (React + Node + SSR). The era of generating HTML on the server with a templating language and bolting on javascript on top is over. I don't say that because I'm a "fan" of those things. But because they operate under a different model that is much more reliable and sound at the algorithm level than the older way of doing things.
 &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt; Try adding a quote after the text/html value and before the utf8 value. Content and charset are [two different parameters](https://www.w3schools.com/tags/tag_meta.asp). I just tried this myself, and I got it work even without my suggestion. Mine didn't really want to cooperate until I had these exact use statements: use Dompdf\Adapter\CPDF; use Dompdf\Dompdf;
Any serious setup will have all application servers in a virtual network with no public access directly. (You'll have to VPN in), the load balancer(s) would have the public access interface and the internal virtual network interface. Not only does it protect you DDoS wise on the application servers, it also gives you additional security. AWS, GCP or Azure (probably a few others) make it easy to create virtual networks at the VM level with tons of configuration. Other providers have the option too like DigitalOcean but its nowhere near as configurable. Linode doesn't have it I think (you have to setup your own thing with OpenVPN) But then once you got a virtual network you can do whatever you want with IPs, certain subnets for certain types of servers, so you can make inter-server ip based rules easier to write by using blocks, etc.
This package is already compatible with PHP 5.6 :)
As much as he generally trolls every post, he is correct in this situation, PHP on average is much lower paid compared to other languages 
Not once did I say he was wrong.... I simply posted an amusing anecdote.
Well, this is indeed the first response that answers my specific question, thanks. I've read your comment and couldn't agree more about private, virtual networking. But there is an additional problem we have to mitigate, and a big one. You know, it always depends on the type of product you are creating. Products and platforms are never the same. In our case, we simply can't use AWS, GCP or Azure. Our application is so demanding, that using these 3 major providers is not going to work, cost-wise. We've done the math long time ago and still redoing it and it still doesn't check out by a large margin. For other apps we are planning, they would work. Not for this one. The math checks out with though with many other providers. We can use Linode, RamNode, OVH, Vultr and a few others. Of course none offer the simplicity and flexibility of AWS. But with AWS, we would lose money instead of making. AWS was the first we tested and the one I still like most (who wouldn't, it is so simple to use). Unfortunately it doesn't check out in our case. Then, DigitalOcean has virtual networking, but it doesn't have DDoS protection. This takes it out of the question as well. So we're back to square one. Linode has private IP's (not necessarily the same thing) but again no DDoS. We are currently using RamNode with protected IP's, but they don't have private networking. You can configure DDoS protection per server, but no private networking. Also Vultr has a much lower DDoS protection bandwith so we are probably going to stay away from it. Under the circumstances it appears we have just two options remaining: - Either use RamNode with DDoS for each server (as it is now), OR - switch to OVH and get their vRack private network. It appears that OVH is the only one offering both and having a good bandwidth margin. It's difficult to tell though which exactly is the best solution in our case. 
Looks like the​ author corrected it. 
&gt; I suspect all the WordPress and Drupal code monkeys are dragging us down No lie. You sound like a little bitch that is quick to throw others under the bus, for sake of self-gratification and 1-up-manship.
No one else has said it so I will. The two best days in a boat owner's life: 1. The day they buy the boat 1. The day they sell the boat
I'd be really interested to see the "adjusted for WordPress" version of these stats. I don't have a boat, but I have no reason for complaints either. 
Don't feed the trolls. They'll fund something else shiny soon. 
Damnit, why'd you tell me that! I'm still in my honeymoon phase. Really nice to just be able to pull out from the dock and just float around out there and drink some beer.
[Float on](https://thumbs.dreamstime.com/b/man-rubber-ring-21949338.jpg).
I remember reporting being seriously lacking. The product attributes options were lacking as well. We needed to buy a plugin for the types of product attributes we needed. This was also 4 years ago so I can't remember much specifics.
Yes, IMHO Dice is conceptually sound and fast DI. 
Unlike PHP critics, who criticize PHP without having used it, I've had to deal with Drupal and WordPress, and I've learned enough to stay away from that part of the PHP industry. I believe that a certain amount of knowledge and self-respect demands that people don't stay in a job that produces unending amount of unstable, slow, subpar crap, and would look for better opportunities (of which there are plenty). If you are a WordPress developer, I'm sorry for the harsh words, but try to make lemonade out of lemons - use this as an opportunity for reassessment. 
No, surprisingly I had [big applications in mind](https://www.reddit.com/r/PHP/comments/6mx206/standalone_autowiring_di_container/dk60von/).
&gt; That sound a little bit like just passing a slimmed down version of the DI-container (now a service locator) to the module. It's important to analyze architecture for what it *is*, not what it *may sound like*. What I described doesn't have any of the drawbacks associated with service locators. If you think it does, name some of them, and lets separate facts from superstition. &gt; If I want to avoid using a service locator, auto wiring and instantiating my instances myself, at some point I will have to write manual config for each handler right? It's not a service locator. Which you'll find if you try to name a locator drawback and notice it doesn't apply here (try it, I'll explain).
DigitalOcean does limited ddos protection in general themselveshttps://www.digitalocean.com/community/questions/ddos-protection-at-digital-ocean-datacenter Have you looked into using CloudFlare? $200/month gets you their per domain plan and they are serious. I don't think RamNode can match them. Quite often the smaller guys offering "Ddos protection" will just kick you off if you get hit enough as they don't actually have the infrastructure to handle it long term, it isnt cheap. There's a reason DigitalOcean and Linode don't offer it, isn't not a easy thing to do. With CloudFlare you can use any host. You should be worried about security implications instead of just DDoS. If you are going to leave the app servers exposed, SSH must be via keys only (should already be), all ports except the application port should be blocked, a regular maintenance schedule must be adhered to so the servers aren't left out of date. TLS between application and load balancer is required. Any other applications like mysql must be forced to use TLS connections at all times. If you use redis and want to replicate it for example, you must manually create an SSH tunnel for it as it has no encryption option. If your application is so demanding and its from sort of processing step, I hope you look into using something way more performant than PHP to save cpu cycles if possible. Using the right language for the job does go a long way to cost reduction when you scale. Also becareful, a host like Ramnode in their client agreement says they can suspend you for using too much CPU on a VPS regardless of the fact you buy a "core". You need the "VDS" from them where the core is 100% yours to max out. 
Ah yes, I'll be sitting here for days reminiscing the good times I had in the 1400000000's...
3 years and 2 months ago, in case anyone was wondering.
It looks like you're looking for a framework to *save you from writing a foreach loop*? foreach ($array as $name =&gt; $type) { $form-&gt;addItem($name, $type); } No matter what you use, you will have one format of data that already exists, and another format to translate to. Whether the target format is array or method calls is irrelevant for the amount of code you'll write. Loop and branch, job done.
TIL that symfony's container can be used without dumping it.... &gt; If you have a plugin-architecture (with dynamic objects) a fixed cache (and autowiring) is also not the best solution. If your code doesn't change in prod, then I don't see a problem. This can be harder for CMSs, true. About autowiring - I don't see how cached vs uncached container makes a difference. Autowiring is about manual vs automatic configuration of services in container. If you have a cached container and want to add a new class/service manually (without autowiring) you still have to re-build the container
@rubysown Unfortunatelly, it still doesn't work. But anyway, the html document must be valid even without that line. Yet, it still does not work, the same exception is thrown.
&gt; use case for such functionality Developers are lazy and in order to have maintainable system we need more smaller objects. Wiring all the things by hands leads developers to break down responsibilities of this objects less. Less refactoring. Autowiring help with that, by allowing more frequently changing code. As for "magic" part - symfony compiles container, no runtime magic (almost). If you need to know all your dependencies - `container:debug`.
oh come on the only real timezone is UTC and anyone who lives elsewhere is ok because the world is a big place with lots of timezones and I hope you're all having a good day. php &gt; echo time() &gt; 1500000000; 1 php &gt; // woot!
You basically ask, is there a form builder and/or validator that is not Drupal but understands Drupal format? I don't think so - each such tool has its own way of doing things. You will have to write some adapter, but it shouldn't be a problem.
Why is it new era? 
Everything looks good in text, but I need to see that code. Especially for this bit which I did look into a bit: &gt; Each of those modules needs a specific subset of your Services to work with, which it passes to the controllers. You pass those when you construct the module, **and I prefer to pass services "lazily" in the form of Context objects (you can look it up)**, which from the PoV of the module is a simple interface enumerating their dependencies and required settings, and from the PoV of the composition root, they're short and neat anonymous classes that implement said interfaces. Which I keep reading is an anti pattern. Edit: And the stuff I'm reading is saying java's context object pattern is just as bad as a service locator. 
See ya in 2020!
&gt; Everything looks good in text, but I need to see that code. I would've supplied code, if it was necessary to explain something text can't. So let me know which part is unclear, and requires code, and I'll give you code. As it is, things are pretty clear: 1. A module asks for an interface in its constructor. 2. The constructor has a set of getters, each of which returns a dependency this module needs. 3. The same interface is not used for other modules. Anything unclear? I need to honestly spend the time to write a class + interface of basic getters for you? &gt; Which I keep reading is an anti pattern. "Context" is being described as an anti-pattern when it's passed to too many clients in unrelated parts of the application. When it passed to one client, and it only conditionally distributes parts of it to its subordinate objects, none of the effects you read apply. In any case "it's an anti-pattern" by itself is not a valid critique. Explain why you think it's an anti-pattern, and I'll respond to that. I know what you've read, and if you read more carefully you'll notice none of it applies here.
&gt; DigitalOcean does limited ddos protection in general themselveshttps://www.digitalocean.com/community/questions/ddos-protection-at-digital-ocean-datacenter They do blackholing. Not DDoS protection where your server is still up and accessible for your users during the attack. &gt; Have you looked into using CloudFlare? $200/month gets you their per domain plan and they are serious. I don't think RamNode can match them. I am fully aware of CloudFlare. It is good for certain systems but has a lot of different issues that you're going to find out about if you research more, like increased access time, commonly blocking users out of access... We're not going to use them, they are not for us. &gt; With CloudFlare you can use any host. Yes but it goes against my question's principle of hardening the whole thing at all ends, if you want. When using CloudFlare if your unprotected IP gets discovered for any reason, you're a dead boat in the water. &gt; Quite often the smaller guys offering "Ddos protection" will just kick you off if you get hit enough as they don't actually have the infrastructure to handle it long term, it isnt cheap. There's a reason DigitalOcean and Linode don't offer it, isn't not a easy thing to do. You're right on that, however it depends. You will find countless stories online from users that have survived attacks when using services of the smaller guys. RamNode has 100Gbps protection and OVH has between 220 and 470 in Europe where we are. That's some serious protection that you can count on (we accidentally tested them due to our high-speed bandwidth servers and a particular type of requests). They pay for it because it's one of the reasons they get a lot of users. Of course, you get it for a fee with RamNode. We're probably leaning towards OVH now &gt;You should be worried about security implications instead of just DDoS. If you are going to leave the app servers exposed, SSH must be via keys only (should already be), all ports except the application port should be blocked, a regular maintenance schedule must be adhered to so the servers aren't left out of date. TLS between application and load balancer is required. Any other applications like mysql must be forced to use TLS connections at all times. If you use redis and want to replicate it for example, you must manually create an SSH tunnel for it as it has no encryption option. These are already in place, thanks for your suggestion but we are fully aware. There are of course thousands of other such aspects to handle, security is a never-ending story. &gt;If your application is so demanding and its from sort of processing step, I hope you look into using something way more performant than PHP to save cpu cycles if possible. Using the right language for the job does go a long way to cost reduction when you scale. Well again it depends on the design. We can't truly convert this to anything else right now. This is a huge application that has been designed over many years, and translating it into something else would take a LOT of time, impossible now. However we are going to improve CPU cycles via some compiled libraries next. Side note, our PHP design is also resource cost minimizing, it doesn't generate by far the usual loads common frameworks and applications do (we use our own lightweight framework and CMS). It's designed to have the minimal execution route for each particular request, and it can still be further improved of course. So we're reasonably good on that. Another point is that we are using more RAM than CPU. This is by design, and we leverage the large RAM offers these providers have. &gt; Also becareful, a host like Ramnode in their client agreement says they can suspend you for using too much CPU on a VPS regardless of the fact you buy a "core". You need the "VDS" from them where the core is 100% yours to max out. We know about this issue, it's in their TOS. We are being careful, thanks - and likely using the VDS option if we decide to stay with them (we still have a little room left to reconfigure).
http://i1.kym-cdn.com/entries/icons/facebook/000/017/886/download.jpg
&gt; So let me know which part is unclear, and requires code, and I'll give you code. I want to see the part I quoted regarding the context that you are lazily passing to the controller. Edit: &gt; Explain why you think it's an anti-pattern I already explained that above.
Not sure how I feel about this because there's some big projects that aren't worth reading at all. Got any recommendations on projects you think are worth checking out, I'm always up for bettering myself.
You don't have to write your entire app in PHP. If another language would be a better choice for one component of the app, go write a service in that language and have the PHP call it via an API.
Oh snap! I was actually looking at timestamps today thinking I should check when 1,5B was coming along. (in my defense I was looking at JS timestamps, which are in milliseconds so they are more difficult to 'feel' when there is a roll over)
&gt; for choosing it I didn't chose it, my firm chose it and pay me money for writing in it. Also I don't write *everything* in PHP, large amounts of Javascript for starters and whatever language is the best choice for the job.
The unix timestamp (which many systems and programmers use) is defined as 'the amount of seconds since January 1 1970, GMT'. It just today hit 1.5 billion seconds. Similar events only happen every 100 million seconds (last time was May 13, 2014, 16:53:20 GMT, when it hit 1.4 Billion). 
&gt; I want to see the part I quoted regarding the context that you are lazily passing to the controller. The context is not passed lazily. The dependencies are passed lazily *via* the context, which means the receiver only calls a method to retrieve a dependency when it needs it, because methods allow that. While passing dependencies as individual arguments doesn't allow that, everything should be instantiated in advance (one workaround is proxy objects, but those have lots of shortcomings - they have bad performance, require code analysis and code generation, etc.). Here's the issue without lazily created dependencies: function __construct(A $a, B $b) { $this-&gt;a = $a; $this-&gt;b = $b; } function foobar() { $a = $this-&gt;a; // B is never executed in the "else" branch, but the constructor requires it to be instantiated anyway if (!$a-&gt;isAvailable()) { $b = $this-&gt;b; $b-&gt;doSomething(); } else { $a-&gt;doSomething(); } } And here's the solution: function __construct(Context $ctx) { $this-&gt;ctx = $ctx; } function foobar() { $ctx = $this-&gt;ctx; $a = $ctx-&gt;getA(); if (!$a-&gt;isAvailable()) { $b = $ctx-&gt;getB(); $b-&gt;doSomething(); } else { $a-&gt;doSomething(); } } So that's "lazily passed dependencies" via a context object. Or via a factory, if you will, which is more or less what the context is. &gt; &gt; Explain why you think it's an anti-pattern &gt; I already explained that above. I'm afraid you didn't explain anything. Here are your two statements: - I read somewhere context is bad. - I read somewhere that's as bad as service locator. Regarding the first... it's so void of information, there's nothing here for me to respond to. Regarding the second, none of the drawbacks ascribed to service locators are relevant here. There is no global mutable object where services register and are read back. This is a completely different workflow. If you think the issues with service locators are relevant here, I'm looking forward to you citing **even one** such issue that applies here. Please put in the effort to have a precise and specific point to make, because "I read somewhere that's bad" is miles away from being precise and specific.
He was very good in War for the planet of the phps
Another couple of aesthetic unix timestamps: * 1515151515: 01/05/2018 @ 11:25am (UTC) * 1516171819: 01/17/2018 @ 6:50am (UTC)
Those were the seconds
&gt; Explain why you think it's an anti-pattern That's the thing, I never said context object pattern was an anti-pattern, as written in my first response since it was the first time I heard of it. Now if you read what I wrote, I said _I read_ that people consider this an anti-pattern which lists links to [this](http://wiki.c2.com/?ContextObjectsAreEvil), [this](https://en.wikipedia.org/wiki/Law_of_Demeter), [this](https://en.wikipedia.org/wiki/God_object) and a ton of more articles and the lists goes on. Which brings me to why does your example resemble a service locator based on that example. &gt; Regarding the second, none of the drawbacks ascribed to service locators are relevant here. There is no global mutable object where services register and are read back. This is a completely different workflow. Show me the workflow, because that's looking awfully like a service locator. You can call it whatever you like, but that example is screaming service locator.
I have never heard about this but it really sounds exciting. Although now I am curious about this: &gt; PHP TestFest aims to improve the code coverage of the test suite for the PHP programming language Does it mean that there are not enough test cases with the **PHP** team?? I have never looked at PHP source code and have no idea about test cases so I could be wrong. 
Well, that's better than their first attempt, but I'm still a bit confused. The meat of it seems to consist, solely, of this: &gt; The actions that led me to ask Larry to resign involve a woman who attended Drupal community events with Larry, and was "allowed" to contribute by him. I originally characterized these actions as 'beliefs,' which was inaccurate on my part. To be clear, potential legal and ethical questions were raised by various people, including the Drupal Association lawyers, that this person could be vulnerable and may have been subject to exploitation, which raised the risk of substantial damage to the project. First off, I am amused that a sentence that starts with "To be clear" contains some badly mangled syntax. (I'm pretty sure he meant that *actual questions* were raised about *potential issues*, not that *potential questions* were raised.) In any case, fine: Some actions caused "various people" to raise "potential legal and ethical questions". What were these "questions" (or "potential questions)? More to the point, what were the *answers*? Because if there's more to this than the fact than someone, somewhere speculated that, you know, it's *POSSIBLE* that Larry had done something bad, I'm missing it. I mean, it's *POSSIBLE* Dries likes to kick puppies. I mean, I have no reason to think he does, but apparently that's not a critical element in the process. The one thing I was waiting for is the bit where Dries went "...and so we investigated the rumours and found them to be true. Larry was exploiting a vulnerable woman and we obviously can't be associated with people that do such horrible things." But...no. Apparently Drupal just can't be associated with people that anonymous other people raise unspecified "potential questions" about. You don't need to have done something, someone just needs to ask you if you did something (you don't even need to specify what it is), and boom, you're out. It's an odd question where the answer isn't relevant. Sorry, but I rate this as 1/10 desperate wibbling. They still won't go on record and say "hey, we think Larry did X, we think X is bad, so we booted him". No sale.
I remember celebrating s1b (1,000,000,000) Two days later airplanes were flown into the world trade center. Enjoy your milestone....
Nice ! I admit i never thought abt that! Well, happy new timestamp 
More double-speak and intellectual dishonesty. Dries and Megan fucked up, but because they can't possibly be the ones at fault, it must be Larry who is the problem. Since the kink angle didn't work out, they're trying the mental health angle. Rephrasing Larry's efforts to enable a friend to excel as somehow exploiting someone capable of making adult decisions regarding consent. ~~he wasn't even in a D/s relationship with.~~ How dare he encourage a woman to get into programming! **Edit:** to remove the relationship status. I misunderstood that part of my conversations with Larry.
It honestly doesn't bother me. I don't entertain arguments about who's hammer can put the wall up better.
&gt; I said I read that people consider this an anti-pattern which lists links to this, this, this and a ton of more articles and the lists goes on. In your three links, only first one is talking about Context objects, and it's not a conclusive "Contexts are bad", but a discussion where people go back and forth about pros/cons of Context. You'd notice that if you bothered to read past the title, which I somewhat doubt, considering your conclusions. The very first sentence in that post says this: *"A ContextObject binds all subsystems together because one object is referencing everything else. This is a CodeSmell."* That's not what I described, the context doesn't "reference everything else", it only provides what would otherwise be a direct constructor argument. And the cons mentioned there are in reference to Contexts shared among unrelated recipients, which [I already stated is not the case here](https://www.reddit.com/r/PHP/comments/6mx206/standalone_autowiring_di_container/dk7fbu6/). The Law of Demeter is not violated here, unless you read it extremely superficially, and if you like C2, [you can read more about it here](http://wiki.c2.com/?LawOfDemeterIsHardToUnderstand). The God Object anti-pattern link seems to be entirely arbitrarily thrown in here - Context serves one purpose: provide dependencies/settings to one module. In what way does such an object "do or know too much"? Without qualifying your argument, this seems like nonsense. You're playing too fast and loose with your references, and I'm afraid as the result this discussion is one of very low quality. I don't intend to play "whack-a-mole" with such lazy and spurious statements anymore. Produce a coherent argument regarding the concrete worfklow I described. &gt; Show me the workflow, because that's looking awfully like a service locator. You can call it whatever you like, but that example is screaming service locator. I already demonstrated the workflow [here](https://www.reddit.com/r/PHP/comments/6mx206/standalone_autowiring_di_container/dk7fbu6/) and [here](https://www.reddit.com/r/PHP/comments/6mx206/standalone_autowiring_di_container/dk60von/). I was quite detailed. I also provided code to your request [here](https://www.reddit.com/r/PHP/comments/6mx206/standalone_autowiring_di_container/dk7hcq7/). What remains unclear to you is at this point a mystery. The idea is exceptionally simple. But if you ask a concrete question, I'll answer it. And for the last time... ask *specific questions*, and make *specific points*. You're trying your best to be vague, and I'm starting to lose any hope that you have a real point to make here. What name you call it and what name I call it, doesn't mean a thing. The **name** doesn't lose or win an argument of **architecture**. What matters is if you can take the drawbacks of "Service Locator" and apply them to a Context, as I'm using it here - to configure a concrete module. And you've persistently failed to produce such a drawback that applies. It's very interesting that you seem to have three mutually exclusive things going on your comments: - You keep asking me to show my workflow (despite I did), showing you don't understand what I'm doing. - You are very sure what I do is wrong, despite you don't understand what I'm doing (see previous point). - You are very sure what I do is wrong, despite you can't produce a single concrete argument, but only link to barely related, or outright unrelated articles. Gather your thoughts, and make your point.
You are putting your own spin on this story just as hard as they are.
&gt; Basically as long as you use one of argon, bcrypt or pbkdf2, you're doing good and choosing one of them over another makes very little difference This is key, a lot of the time it's the implementation that is the weak spot rather than the algorithm itself. The 3 mentioned above do have differences but using them correctly via the password_hash function will give you a solid hash regardless of the algorithm used.
Truth is a pretty hard spin, yeah.
Larry himself said he was in a D/s relationship with her: "We were very open about her autism (at her request, her logic being "I'm not broken, just autistic"), but of course didn't mention the D/s part because, well, that's nobody else's business." - https://www.garfieldtech.com/blog/tmi-part-2 "Those with Autism tend to fixate on a particular topic or idea, and hers is on a specific person, specifically in the context of D/s relationship. That's been who she is for her entire life." - https://www.garfieldtech.com/blog/tmi-part-2 Larry himself even uses the phrase "allowed her to contribute". Yet you have somehow spun all this to some narrative about Dries not wanting to encourage women to program. Lol.
The only point that remains clear is that it was allowed for Larry to be discriminated against.
Wow, there's a lot to unpack here. &gt; However Larry’s blogs led people to think that I, and the Drupal Association, doxxed, bullied, and discriminated against him, which we did not. His blog posts led many to think that people who are into kink are not welcome in our community, which is not true. That remains to be seen. An assertion does not make it true, only actions can give weight to such a claim. &gt; I was concerned not only about this person’s well-being, but I also had legal concerns about her ability to give informed consent or whether she was being exploited. The Drupal Association recognizes that Larry did not use the accurate medical terms to describe this person and we also recognize that most vulnerable people have the ability to consent. However, in this case, given the information we received about this person, we were concerned that it was possible that she could not consent. You run an open source software project, and are not a mental health care professional. You are woefully unqualified to make those judgments, and probably should have minded your own business. &gt; I sought input from board members and from professional experts, including legal counsel Legal counsel -&gt; "We wanted to make sure our own ass was covered" &gt; who expressed concern that Larry’s action in his leadership roles created **possible legal risk to the organization.** See? Ass-covering. Your legal counsel's job isn't to help guide you to make ethical, fair judgments. Their job is to make sure you're at a lower risk of prosecution or lawsuit, even at the expense of fairness or ethics. &gt; I learned about these issues just as the DrupalCon Baltimore sessions were about to be announced, and in order to give myself time to evaluate the risks, I ended Larry’s role as track chair and removed his session for only DrupalCon Baltimore. Translation: Megan overreacted, out of reflex. That's a very human thing to do. When a person is stressed, they tend not to think, only to react. This was knee-jerk. Don't pretend that this was a well thought out decision, it was a reactionary mistake. Own your mistake, correct it, and don't repeat it in the future. That's how we learn. That's how we grow as humans. It gets worse though: &gt; Larry's subsequent blog posts harmed the community and had a material impact on the Drupal Association, including membership cancellations from those who believed we doxed, bullied, and discriminated against Larry as well as significant staff disruption. Due to the harm caused, the Drupal Association is removing Larry Garfield from leadership roles that we are responsible for, effective today. So, in sum, you aren't kicking Larry out just for being into Gorean BSDM (which is a kink everyone is free to have their own opinions about but please keep them to yourself), you're kicking him out for having a difficult to understand relationship with an autistic woman and then **daring to speak up when you tried to compromise his professional life** which he had invested a significant portion into the community that keeps your organization successful and relevant? At this point, I'm convinced that Larry is better off without the Drupal Association, as is everyone else in the community.
As to the phrase "allowed her to contribute", he's using it in the context of enabling, or facilitating. This is an unfortunate shortcoming of the English language. Edit: Unless you're talking about this sentence: "I allowed her to help me with some small Drupal core patches." In which case I'd recommend stretching exercises if you're going to reach like that. Guy slows down his own work to let a junior dev pair program with him and you think he's dominating her? I'd recommend taking some time to work through whatever causes you to think this way.
As to Dries not wanting women to contribute. Yes, that's my spin, and I don't deny it. I don't actually believe Dries is anti-woman, but he is willing to throw one woman under the bus in his effort to smear Larry in defense of himself.
Why do you say "Get some therapy" as an insult, as if that is something to be ashamed or insulted over?
I didn't. Why did you take it as one?
Sunday, September 13, 2020 at 12:26:40 UTC
15,000 but there could always be more, especially as new features are added.
Well, that got dark quickly.
I created this framework that writes almost exactly as ExpressJS (one of the most used NodeJS framework). You have templates engines (Jade/Pug, Mustache). You can easily create APIs, create routes with callbacks, you have cookies, redirects and other useful helpers. (I'm looking for creating a documentation page with all its functions). I'll keep uploading new features, but for now it is already very useful and I implemented it in two projects. https://github.com/aeberdinelli/express-php
Yes, Eloquent is an implementation of ActiveRecord, which for lack of a better way of putting it, is dumb, and you are expected to manually define the migration of your tables. This differs from Doctrine where it's aware of how your entity is related to your database, because you've defined the mapping in your Entity, yaml, or xml. Because of this it's able to diff the database for the difference and generate a migration from that. (❤️ you people that wrote this, saves me a bunch of time) If you want to bring the doctrine experience to Laravel, you can use [Laravel Doctrine](http://www.laraveldoctrine.org/).
Who knew... Unix timestamp in cahoots with Al Qaeda, SMH.
It's kinda stupid to hate an entire language, if you are a serious developer, you'll know which is the best language for the project or feature you're trying to implement.
&gt; it seems more idiomatic to construct a form array from a resultset then attempting to write builder code This is not a meaningful way to consider a problem. First, idiomatic assumes you're following some pattern of the language/framework/component that you're working in. If you aren't working in Drupal, following its patterns isn't idiomatic, it's just mimicking Drupal. The idiom you should follow is the code you are working in. Second, Drupal's pattern of everything being a deeply nested array is not that great. In my opinion, massed nested arrays don't count as architecture as all. They are anything-goes php at its worst. They're opaque to inspection, and they don't have anything suitable for static analysis. Their only redeeming quality is that they don't require constructing code, and so they take less time (savings in the short term), which is not a good thing for readability or maintainability (huge cost in the long term). Maybe they're good for simple cases where lots of data follows a similar structure; but that is more likely to be a symptom of badly structured data, or bad code, or both. Third, the correct course for your use case is entirely dependent on the details of the system you are building. You need to construct thousands of forms. Do they validate (besides pushing to the db and returning errors)? Do they show error messages at all? Might they make sense to users as forms that do not match one-to-one with the tables? If you answered yes at any of these, then you need to consider the forms individually and write business logic. If you answered no, maybe your users simply need a database client and write access.
So what I'm getting from this: Larry was in fact singled out due to a kink that caused people to raise ethical questions. That's fine, it's important to be concerned for the well-being of our most vulnerable. Without actually getting answers to those questions they acted by initially removing Larry as Track Chair and canceling his session at DrupualCon Baltimore. It's clear at this point it's all because of his specific kink which they didn't put in the effort to investigate. Larry was then asked to resign by Dries and Dries was then surprised when Larry wasn't interested in further open discussion. Now they're pouting saying that **Larry's** blog post has caused damage to Drupal. No, it wasn't members of the community doxxing Larry and sifting through his comments from years past on a board related to his kink, it wasn't Megan abruptly removing Larry from his position and canceling his talk because of his kink, it wasn't Dries asking him to resign because of his kink and Dries' inability to responsibly investigate the concerns, it wasn't because of Dries' and Megan's terrible initial communications and apparent subsequent silence, no... It was Larry's fault for openly telling his side of the story after he'd been made to feel(rightfully so) like he was being pushed out of his position due to his kink. What I would love is to have a time line associated with all of these decisions. I, as an individual developer responsible for considering solutions like Drupal for use with internal applications at a large company, will avoid Drupal due to the behavior of the leadership, the Executive Director of the Drupal Association, and the members of the community who have been allowed to collude and conspire against someone whose behavior in their personal life they found objectionable. None of this instills any a sense of confidence or reliability in me. **You** have damaged Drupal's reputation.
Sorry workflow was the incorrect word, I mean show me the code to your Context Object. I'm just here to see a real example to your workflow put in practice.
You want me to open-source my private projects or write an entire project in a Reddit comment for you so you can see how a simple factory class with getters is used in practice? I already described how it's used in practice. If you still don't undertstand, to the point you can't even ask a concrete question about it, that's fine. Not everyone gets it. But then also you can't claim that it "screams service locator", or is a "god object" and all the other random claims you made.
The phrasing "Get some therapy", at the end like that definitely reads as a dig/insult to me. If that wasn't your intent, maybe you should re-read it in a bit and make an edit to reflect what you truly meant. Its obvious this is a heated issue for some and we don't always clearly communicate our meaning properly in such situations. edit: Hey Sara, thanks for reading back over it. It feels much less accusatory with your re-write. I appreciate the willingness to re-evaluate.
Worked with a company maintaining a gigantic legacy monolith app. Dev was a pain if you weren't in the office, you basically had to VPN into the office network, then create a remote desktop connection to use your IDE. This is because the only "dev" server we had was actually an old, decommissioned "live" server that we all had Samba shares on. So one guy on our team spent some time setting up Docker containers for it. We cleaned up the database so it was small enough we could pull it in at creation time. Live still lives on it's own server without Docker, but at least dev is easier. Maybe it'll be moved to containers at some point, but the powers that be basically said "It ain't broke, why fix it?"
You're reaching over and over again. You are not dealing with facts, but with hyperboles. Sarah's phrase is spot on - you may need additional non-reddit help if you have complexes about self reflection. Reflect on your statements; no less, statements that do not speak directly for Larry yet, you feel fine reaching there over and over. 
lol, guess we can end this discussion then. 
Eh its a good start at least. Nothing off the top of my heas but ill keep it in mind and report back
Well put. I think that, whatever else is going on, this entire saga demonstrates that these people are amazingly bad at PR. Just the public part of this had dragged on for four months, and this is the best they could come up with?
Our server specifications: CPU: Intel Xeon E3-1225 V2 @ 3.20GHz HDD: 2x 1 TB RAM: 16 GB DDR3 1600MHz OS: CentOS 7.3-1611 (64bits) Note that we make extensive use of caching, the 1 million images per hour is derived from the analytics provided by CloudFlare. The server needs to resize 117.600 images per hour on average, and 781.000 images per hour peak. Average filesize pre-resize is 175 kB, average filesize after resize is 64 kB.
We didn't compare imaginary with our service. I will soon compare it with ours, but I don't think there would be much difference (because we both use libvips as image processor, the only difference is nginx versus net/http and PHP versus Golang).
I'm very glad not to be part of the Drupal community, if you can't trust the leadership to make the right decisions and play dirty, you should think twice about following them. 
OK, I don't mind. After all, I'm not the one whose apps need a heavy reflection-based container...
&gt; Am I completely misunderstanding Laravel/Eloquent? Yes. &gt; Is it really in the generated artisan make:migration class that I should define the properties? REALLY?? No. &gt; Am I not supposed to write mutators?? Yes - you are - in the Eloquent classes - not the migration. &gt; WHY IS THERE A hasColumn method?? Should I not know what columns my models contain. For migrations - because you might want to know depending on what migrations have already occured. It has nothing to do with Eloquent. &gt; Are my models supposed to be versioned? No? I'm not sure where you are getting that idea. Overall it seems you are confusing database migrations with Eloquent. They are **not** the same thing. These links should help clarify things: https://laravel.com/docs/5.4/eloquent &amp; https://laravel.com/docs/5.4/migrations Let me know if you need anything further.
So in exactly 19 years we will witness 2000000000?
That sounds about right! And we'll be that much closer to returning to the 20th century!
After reading the blog post my conclusion was pretty much the same. In short, according to "Executive Director of the Drupal Association and the Drupal Association Board" autistic people are not supposed to have relationships.
Out of curiosity, how does Doctrine handle when you change your entities? If you update a column/remove one/etc? I greatly prefer specifically handling migrations over the magic of having Doctrine(or anything else) manage my DDL. It seems the automatic schema management is great for rapid prototyping. Not a dig on Doctrine, just genuinely curious. I've been using Laravel Doctrine a bit and enjoy it so far.
Other ORMs handle this, so OP has the expectation that Eloquent will too. It doesn't. You manage your migrations separately (which you can also do in Doctrine.)
Honestly, I prefer letting it handle my migrations. It's means that I can make updates and generate the migration for a changeset later. I have yet to come across something it hasn't picked up. I will always review what it's generated though, there have been times where I've had to modify the generated content because there's a better way of doing it. E.G One time I had to completely switch out the OAuth schema because I was changing libraries, but doctrine generated code to deal with updating all existing tables to match the new ones. Instead I created my own migration that dropped the existing tables, and then generated another to re-create it and re-import data from the old ones. TL;DR Review the generated content and test it locally / in dev. It's faster than writing large migrations by hand, and always ensures you don't forget anything by manually modifying the database.
functions in the global namespace, `.class/interface.php`, `?&gt;` closing tags... Nope.
&gt; I want to avoid using Node, I would prefer to have all of the server side stuff running in PHP. You won't go far with that attitude.
the drupal leadership made a knee-jerk reaction in a state of moral panic driven by the broader social and political forces putting intense pressure on them in a specific way (political activists which view white men as inherently guilty of oppression, calls for ostracism and persecution against white men). they have since continued to dig deeper and deeper compounding their initial error with what appears to be ex post facto justifications and revisions of their prior stated reasoning. this is a bad look. it makes me believe that there is no real principled leadership at drupal and that drives me to avoid using the technology or participating in the community. 
Hey there, congrats on your new framework. I'd advise you consider PSR-4 as a file layout system, also when you make a claim something is fast, people expect benchmarks, as that's easy to measure, so you should post some :-) I mean, how can you know something is fast, unless you measure?
what attitude, I was looking into Node.js, it is just will not work well with my apps. I need to maintain security.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Thanks for the feedback ! Benchmarks are being done as we speak As for the PSR-4, I'm currently adding some features and I'll look into it when I finish
To all the WordPress / PHP haters out there: "WordPress is used by 59.2% of all the websites whose content management system we know. This is 28.3% of all websites." - https://w3techs.com/technologies/details/cm-wordpress/all/all "PHP is used by 82.7% of all the websites whose server-side programming language we know." - https://w3techs.com/technologies/details/pl-php/all/all So feel free to ignore a huge swath of the internet, but if you're a web developer that works on a variety of projects, chances are you'll encounter these technologies whether you like them or not. Chances are, there are plenty of opportunities to make money in the field as well.
bogus. whatever you run your websocket server with will be completely agnostic. &gt; the problem is how exactly to run a code that will update a specific cell in the table when the number changes. I know you can do something like document.getelementbyid("someid#").innerhtml = "the new number". that has absolutely nothing to do with websockets and is Javascript 101 have a look at [WAMP](http://wamp-proto.org/implementations/) *Horible naming choice, it's impossible to google and not get the devlopment stack)* TL;DR: Learn javascript. 
Websockets seems overkill for what you've described. Have you looked at using simple AJAX requests on the client side to retrieve values from an endpoint? e.g "api.mysite.com/get/myvalues" which outputs the values that local JS can then insert into the table.
Ajax don't work. and Ajax request hitting the server every 1 second causes extreme lag once you get to 100+ simultaneous users. Again was just an example, it is actually a great deal more complicated then that because there are about 1000 variables that are changing at the different times and this needs to happen in real time, sometimes several hundred divs can need to be updated by the client at any given time, and timeout with a 1 second delay is very resource intensive especially with all of the calculations that the server need to do each time the script in run
Luckily anyone worth being paid well doesn't identify as JUST a PHP developer.
You may want to reconsider the design of your config file. Right now, it has you committing your encryption key, api key, and DB credentials to source control, so they're visible to the public 
Something like 80+% of monetary transactions in the world pass through a COBOL codebase during their processing - that doesn't make COBOL a great language, it makes COBOL the language that was most popular when a whole lot of large financial institutions were getting into computerizing their workflows and now they don't want to replace their systems now that they've smoothed over all of their major issues. That and while PHP is definitely very widely used in terms of the number of sites using it: trying to measure market share without actually askking the site's operators what they use is going to be unfairly biased towards PHP because PHP is the 'loudest' language in that almost all PHP sites will have a header advertising their PHP usage, whereas most other languages/frameworks do not. There are entirely reasonable and good responses to PHP ITT, but either of these is, at best, unconvincing. 
If you wait until you finish to consider implementing any of the PSRs into your project, it will only create more work for you. 
Hi ! They are just dummy values, I'm actually going to create a generator and a framework set up page after I finish designing it.
It's still in early stages of development so I don't think it should be a big problem Cheers!
Yes, but say i make a project with your framework, and i use github for source control. I set it up with my values, commit and push. Now all those details are in public view. This is why Symfony's parameters.yml file is explicitly excluded by their .gitignore
As you add more classes, it will be a bigger problem if you need to rename them and possibly change directory structure later.
Question for the native English speakers: when talking about inclusion of handicapped people, we often use the term "erlauben" (to allow sth) in Germany. The meaning in this context is not that the allowing people gives the right to the handicapped person, but to give the possibility to participate. Has the English language the same dual meaning of this verb? Can the different understanding of this word in Larry's blog post lead to a misunderstanding?
Got ya. I've added it to the .gitignore file. Thank you !
I read the whole thing as; We thought he was enslaving someone, our legal council told us to kick him. Is that not a fair tldr; ?
Added the benchmarks ! -&gt; https://github.com/FastyPHP/fasty/blob/aec3ba7e8bec17b7c2167fee8a0619a91cebf84c/README.md#benchmarks 
I am very aware of that, that's why I'm considering updating it to PSR-4 while its still in early dev
Well that's not entirely true. You can run your websockets server with PHP using something like http://socketo.me/ and load your data models in PHP, removing a lot of overhead for having to write new code in another language.
I'm conflicted by you. Sometimes you say some stupid shit, sometimes you say good shit. This time you said good shit.
I don't identify with my tools. They're just a means of producing the end result. This is words I live by: https://twitter.com/joshmanders/status/884433866529878018
and I'm sorry that you got offended by me calling your god object a service locator. ✌
I like http://socketo.me/ Basically websockets is very different from how PHP normally runs, because it requires a long-running process, rather than very short one-per-request processes. You need to boot up the websocket server as a separate thing from your usual web server. You can use a reverse proxy in front of your stack to make it transparent, i.e. not needing to use a non-standard port, also gives you the ability to terminate TLS early to enable easy secure `wss`. I recommend https://caddyserver.com for lightweight, easy TLS, proxying and fastCGI (for php-fpm). If you use something like Ratchet (linked above), you can make your websocket server share the same codebase and models as your PHP app, saving a lot of development time. Basically what you want to implement is pub-sub, so you have the clients (browser's JS) connect to the websocket server, and subscribe to certain channels of data. Then the websocket server will add that client to a list of subscribed clients for that channel. You can use somekind of message tool like ZeroMQ or RabbitMQ or whatever from your PHP app to send a message to your websocket server to trigger a data push to the clients when something changes. That way, you have zero polling, you end up with only pushing new data down to the clients. It's a bit complicated, but once you have it working, it's a gigantic performance improvement over the usual AJAX polling methods. Read this for an explanation of the flow, and a good example: http://socketo.me/docs/push Edit: If you want to publish just for a specific user, then you need to track in your websocket server which user they are. One clever way to do that with Ratchet is to get the user's ID from session, which should be accessible because the session cookie is also passed along in the initial websocket connection. See http://socketo.me/docs/sessions for that. That way, you can get the authenticated user's ID. You can then drop that connection in a users bucket. When you want to send a message explicitly to that user, from your ZeroMQ message receive routing, you pick the connection out of the bucket and send the message via that connection. WAMP/pub-sub doesn't seem like what you actually want based on your question.
Yes, as /u/SaraMG explained upthread, in case you haven't seen it: https://www.reddit.com/r/PHP/comments/6n8gsy/comment/dk7m0eb?st=J545UTBA&amp;sh=abab84e8
Thanks. I really did not see it.
[removed]
I don't know of one off the top of my head, but why not grab the form builder/validator code from drupal and modify it into a standalone composer package? May take a bit of work but probably easier than rewriting all those forms.
I'm not offended because you're so far off the mark I can't even register it as anything else but someone throwing arbitrary words at me and hoping some stick. To call a simple special-purpose factory a god object and a service locator just communicates you don't know what you're talking about. 
IMO, Buytaert and the DA care not one bit for "community" or running a true open source project, they mostly care about Acquia's financials.
I switched to Node a year ago. I don't write that much less code than PHP ... but I do prefer it now.
Yes. For example if I had bad eyesight then eyeglasses would *allow* me to see more clearly.
I saw some sjw lady at Mozilla tweet at some Drupal community person complaining about the overabundance of white males in a photo at some Drupal conference a while back. When you've got sjws outside your community telling you how to run your community the sjw way, it's only a matter of time before they infiltrate you with members who couldn't give 2 shits about the actual project and only want to disrupt your too white or too male community.
Sorry, I misunderstood as you were waiting until much later to consider PSR4 
I don't really want to get bogged down in discussing this phenomenon, other than to note that yes, it is going on, and yes, there is a hostile activist community that is motivated to destroy institutions and communities that don't pass their own purity tests. What more is there to say? It's an ugly world. 
No problem !
Right? Seriously, fuck Drupal.
Well, it's a good thing this was totally not about beliefs. https://twitter.com/druconfessions/status/885883929718398980
The thing is, I am from a culture where it is not normal for the individual to seek the approval of the crowd. I have never felt the need to crowd-source my opinions. I couldn't care less if you or the community don't like my use of WordPress or Drupal. Nor have I ever felt the need to impart my opinions on others. Maybe this is a culture shock thing for me because it has invoked the same feeling of confused-awe as when I read developers asking "what is the best font" or "best text editor".
PHP-DI was fairly easy to get up and running. The documentation is fairly comprehensible.
I'm not sure what you think I'm trying to convince you of, I'm just stating a couple facts. I didn't say it was a great language (or that it isn't) just that it's widely used. You can debate the numbers all day, but if you are involved in a variety of different web projects, you are likely to encounter it still (and for a long time yet). This is regardless of whether you like it or not, this is regardless of whether it is a great language or not. COBOL may not be your cup of tea either, but given that it powers something like 80+% of monetary transactions, if you're going to work as a programmer for large financial institutions keeping up mainframes, well, you're likely to encounter COBOL. As a matter of fact, there are some really good opportunities around for programmers who know COBOL because it is still being used and relatively few new programmers are learning it. So to my original point, hate on COBOL and hate on PHP all you like, but they are tools that are currently being widely used regardless of the haters and there are still opportunities to make good money using those tools. As others have pointed out, use the right tools for the right job. If you're making a website for a small to medium-sized business on a budget that needs it to look good, have relatively standard features, and be able to be easily update the content by non-technical people in-house, Wordpress / PHP is a fantastic tool for the job. If it wasn't, it wouldn't power a huge percentage of the known internet.
More like 15 years and 10 months. We're on 1500000000 now, you're counting from 1400000000.
copy file first ?
While the Drupal community is overwhelmingly white men, people of every color are involved, women have held key roles (esp. webchick). There may be sjws inside &amp; outside of the community, but (until now?) it's pretty apolitical and just focused on developing great software.
&gt;In the end, however, every joke ends like this: https://www.reddit.com/r/ProgrammerHumor/comments/2usogj/but_you_have_heard_of_it/ That was absolutely beautiful. Thanks for a great laugh!
There is one crucial thing to add: they have demonstrated a willingness to violate everything they claim to stand for as long as it targets the 'right' people. Including blackmail, false flag attacks, censorship, entrapment, etc. So it's not just that they have ridiculous purity standards, it's that they've gaslighted themselves into a moral panic about things that never happened.
I'm not reading from a file, its a serial COM port. So it can block until whatever connected equipment is ready to feed it data. I want that period to timeout and still have control over my server execution and be able to send data back to the user (without getting the server to feed the user an internal server error message.)
You mean like Zend Framework forms? https://framework.zend.com/manual/2.0/en/modules/zend.form.quick-start.html#creation-via-factory
They're intentionally conflating the definition of the word "slave," as in slavery, with "slave" in D/S relationships in order to get people on their side. The difference between those two definitions is literally the provision of consent. They're digging themselves deeper with this line of reasoning. 
Set a timeout on the read?
Wait until these folks find out about total power exchange relationships. They'll go wild.
Quick, get your pitchforks ready for Redis (again) because it uses Masters and Slaves. 
It sounds like you're looking for something Firebase Realtime Database will do for you. My backend is PHP and I use firebase for parts of my code that needs to be syncd without raping the server with millions of fetch requests. 
I miss the good old days, when I could innocently assume that "gorean" was some sort of reference to the principles espoused by former Vice President Al Gore.
This whole incident is costing them way more than a potential hitpiece from the WSJ or Buzzfeed. 
FWIW Larry Garfield should just pull a Theo de Raadt and fork a Gorean-inspired version of Drupal. With a greater emphasis on auth{,z}.
This isn't possible on Windows with direct io.
The more I read about this the more confused I am - this girl is “acutely autistic” and yet she's able to contribute Drupal code? What? Everybody's dancing around words; does he have "Wendy the Slow Adult" chained up in his basement or not? 
Tue, 11 Sep 2001 9:37:46 EDT: Flight 77 crashes into the western side of The [Pentagon](https://www.google.ca/search?biw=1269&amp;bih=599&amp;tbm=isch&amp;sa=1&amp;q=pentagon+devil&amp;oq=pentagon+devil&amp;gs_l=img.3..35i39k1j0l2j0i24k1l2.2129.3257.0.3487.6.6.0.0.0.0.164.714.1j5.6.0....0...1.1.64.img..0.6.710...0i67k1.D_KPgc5FDFI) and starts a **violent fire.** Epoch timestamp: 1000222**666** The devil is coming. 
https://laravel.com/ It's the easiest PHP framework to pick up and has great documentation. Routing - Check Controller Auth - Check Models - Check ORM - Check Front end agnostic - Check Also as a bonus, here is an entirely free course if you need it: https://laracasts.com/series/laravel-from-scratch-2017
The popular framework choices at the moment would be Laravel or Symfony. Symfony's ORM is very similar to Java's hybernate, so you may already be familiar with it. Laravel was created by a former .NET developer so you may find some similarities there as well.
Thanks for the response! I'm familiar with Hibernate, so I'll use Symfony 
Thanks for the response! I think my manager at work has used Laravel in a past lifetime, so that _might_ be an added bonus as well
Well maybe I can express my thoughts better with code. Would you agree that this is a (very minimalistic) implementation / usage of a service locator? class ServiceLocator { private $mapping; public function add($name, $instance) { $this-&gt;mapping[$name] = $instance; } public function get($name) { return $this-&gt;mapping[$name]; } } class SomeClass { private $sl; public function __construct(ServiceLocator $sl) { $this-&gt;sl = $sl; } public function doStuff() { $db = $this-&gt;sl-&gt;get('db'); $db-&gt;query('...'); } } And would this be an implementation of your context that im passing to a module? class AdminContext { private $db; private $foo; private $bar; public function getDb() { return $this-&gt;db; } public function setDb($db) { $this-&gt;db = $db; } public function getFoo() { return $this-&gt;foo; } // and so on ... } class SomeAdminClass { private $context; public function __construct(AdminContext $context) { $this-&gt;context = $context; } public function doStuff() { $db = $this-&gt;context-&gt;getDb(); $db-&gt;query('...'); } } If its not, please correct me. But if it is, the only difference is, that one has a dynamic mapping and the other is static. So basically its get('db') vs getDb(). Which in my opinion is not that important since, once configured, the contents of your DI container (or SL in this case) wont change that often (just like with your context, if I understood it correctly).
It is crazy to propose it. No one would even consider such a change. They seem very enthusiastic that this change is good and can even be done. Meanwhile, every pillar of PHP goes against this massive level of change no matter the time-frame. Its not toxic thinking. It's logical thinking and keeping things focused on the larger picture.
From what I understand of websockets + php: 1. run your socket server as a system service, just like your webserver 2. client side javascript builds the websocket connection and connects to the socket server 3. your socket server discovers a update in the database, so it sends the data via socket to the client javascript 4. your client side javascript updates the document.
As seen [here](https://github.com/asyncphp/helpfulrobot/blob/0b3acd495312b73ea9bf30e0f61a6a97cb82b3a5/helpers.pre#L5-L34): exec("php path/to/script.php tag=unique_thing &gt; /dev/null 2&gt; /dev/null &amp;"); exec("ps -ax | grep '[t]ag=unique_thing'", $output); // get $pid from $output // wait desired amount of time exec("kill -9 {$pid}"); ...Just remember, `kill -9` is violent. Also, this kinda depends on a posix shell, so it's probably going to work better in Linux subsystem.
Yeah, there's no direct word I can think of that has that definition. "Open to participate" is the best I can phrase it, which admittedly is a little clunky.
I miss the good old days, when open source projects focused on software development and not "codes of conduct."
phpDrama.v2.1.9-Drupal.Edition 
Thanks. There is a better way of doing this with proc_open. However, this requires I spawn a new instance of php. The problem with this is that directly executing a controller apart of a webapp (especially if you use a MVC framework like codeigniter) isn't really possible/easy. An alternative would be to send a GET request to the webapp that way execution flows naturally, but then you get the same timeout issue. You could resolve this by waiting until just before you timeout: but the whole thing is clunky, fights with sever configuration and adds a silly layer of complexity for what should be a _very_ simple task. Php effectively does not even seem to consider blocking io in its design. Its insane. (On windows, there are some decent solutions on Linux)
GMT: Wednesday, May 18, 2033 3:33:20 AM
[removed]
Autistic people are often smarten than the average person, so your comment is somewhat not polite. Also, I read elsewhere that that lady is even married now, so I don't think she can have issues with consent. 
Topic Hijack; I notice Argon2 is literally ifdef shoved into password_*() functions. What do you think about working with me on an RFC for building out a password function abstraction layer (similar to the hash extension) so that 3rd party exts can provide custom algos. We could potentially allow userspace password functions, but that's not a goal afaic. Nor more than it being a goal for ext/hash and for similar reasons.
That sounds like a good idea. I'd like to be able to, for example, specify `Argon2id` instead of `Argon2i` or `Argon2d` in my own applications. Some people might need yescrypt, scrypt, battcrypt, or Catena support. If this helps make that easier, I'd be happy to help it happen.
Could someone please provide me ( a person not involved in the Drupal community) with a little background/context to what's going on here? It seems like quite the little soap opera and I'm interested.
The benchmarks you added aren't reliable. You don't state the setup process for the other frameworks you compared it with. It's not reproducible in any way.
You could look into 3rd party services like: https://pusher.com/ https://fanout.io/ https://www.pubnub.com/ Depending on your scale, something like Pusher might be free (50 concurrent users, millions of messages a day). They also have great docs: https://pusher.com/docs/javascript_quick_start
I'm still on my way home from my rally (currently in VA, I think). Write up an RFC and I can push a branch with an implementation tomorrow night.
In case you're interested, there's https://github.com/humbug/php-scoper which does a similar thing, although not aimed to be used as a plugin. I don't think this was for the same goal, but it might do what you want as well.
You rock, Sara! :)
You rock. ((This is how I get other people to do my paperwork))
Just no. 
No worries, I wasn't trying to be snarky!
https://www.inc.com/sonya-mann/drupal-larry-garfield-gor.html Note: didn't read this article, just looked for something that would put the links and TL;DR together. Hopefully it doesn't contain any bias.
Drupal has been big on diversity and inclusion, priding itself on being one of the biggest, friendliest open source communities around. As such, it has been a prime hotspot for activists to push feminist-flavored social justice rhetoric. They adopted a code of conduct, established a Community Working Group, and basically bend over backwards to satisfy the demands of those who see the open source world as a problematic place where meritocracy is used to justify gatekeeping and elitism. On top of this, there is a tangled web of commercial interests mixed in, with the project's 'benevolent dictator' Dries Buytaert being both chairman of the non-profit Drupal Association (which runs the DrupalCon conferences) and the founder of Acquia, a very large enterprise that employs many of the core people in the community. Combine this with a cottage industry of web shops serving small-and-medium-enterprises, and you get a lot of tug-of-war arguments over how the project should evolve. The project has already forked once over such disagreement. In March 2017, Larry Garfield, a high profile contributor, posted a blog post titled "[TMI about me](https://www.garfieldtech.com/blog/tmi-outing)", in which he revealed he had been asked to step down by Dries from the community, and had been removed as a speaker and track curator for DrupalCon. He revealed that he was into the kinky BDSM lifestyle known as Gor, and that someone had dug up a profile of his on a fetish dating site. Based on his statements about consensual master/slave relationships, the image had been created that he was a misogynist who considered women inferior. This whisper campaign had been going on since October. In the ensuing drama, a dossier was leaked, compiled by people on the diversity and inclusion channel on the Drupal Slack, featuring various tweets of his taken out of context, to further paint the image of Garfield as a chauvinistic wrongthinker. It also came out that he supposedly brought a woman to DrupalCon whom he was in dom/sub relationship with, and some people took offense at the implications that he had a female slave. It is alleged that this dossier was used to pressure the DA into action as a form of blackmail. The Drupal Association and Dries published a statement, and it went back and forth for a while between more of Larry's blogging and more statements. Many felt the DA was being evasive and disingenuous, contradicting itself on whether conduct or moral values were the issue. Others saw the Garfield case as a prime example of the problems they see all over open source and tech, and took the other side. A Drupal Confessions site was created where people published their objections to the drama, some by name, others anonymously, opposing the Association's inept handling and the witch-hunters' sense of moral superiority. Attempts were made to solicit feedback on community governance, and the drama mostly fizzed out the last few months. Now the DA has published a new statement out of the blue, suggesting it's the end result of talks behind closed doors between the affected parties, but once again deflecting blame away from them and onto Larry. It is anyone's guess why they feel the need to publicly draw this out again, but one can guess that this could be a pre-emptive defense to further legal proceedings against them.
Laravel is more opinionated, but for as long as you don't try to stray too far from its laravelisms it'll work just fine and get you up and running quickly. The downside is heavy vendor lock in and hazardous version upgrades, and its active record orm can become rather problematic on more complex schemas. It's easy to accumulate technical debt. Symfony is more open ended, and it comes with a steeper learning curve, but easier to maintain in the medium and longer term. Doctrine, its default orm, is similar to hybernate. Plenty of third party bundles for stuff like user management, admin, API, you name it. Its web debug tools are an order of magnitude better than Laravel's. I always learn towards Symfony if the choice is up to me and it's right for the team. 
I corroborated this: https://twitter.com/sonyaellenmann/status/885979479159349248 I disapprove of the tactic of revealing private communications without consent. But it's public now, so might as well have people know that it's accurate.
High level thoughts: Change $algo to a string name. We could stick to numerics, but that opens up weird cases where duplicate algos could get registered. If typehinting BC is an issue, we can support numeric aliasing for bcrypt/argo, but that should deprecate in 7.4, drop in 8.
This article: https://www.inc.com/sonya-mann/drupal-larry-garfield-gor.html And the follow-up: https://www.inc.com/sonya-mann/drupal-confessions-open-letter.html
I haven't seen that project before, so thanks for the link! One thing I noticed that it doesn't do, is handle strings that refer to namespaced. Actual namespace are prefixed very quickly though! EDIT: I just tried running it against a test project with `behat/mink-extension` as a dependency and it broke with a `maximum function nesting level` error. It seems it cannot handle large and/or complex dependencies very well. 
I used Ratchet to build an app 3 years ago. Not sure if situation has changed now, but back then I ran into performance issues when using MySQL DB. There was no good way to work with DB in async way, like you can in node frameworks, so any DB queries made all clients wait for them to finish before being able to do anything. There are work arounds, like moving DB work to workers, but this is something that's better keep in mind from the start.
Sorry I misread "Symfony's ORM" as "Symfony," thinking symfony is an ORM 
Thanks
Thanks for that. I found it helpful. 
&gt; the only difference is, that one has a dynamic mapping and the other is static. If I understand correctly, that's the biggest benefit. * Static provides a limited interface, proper type hinting, immutability (if desired) * Contexts are built individually based on the request. You don't need to bootstrap the entire container's dependencies. * You can understand the dependency tree at a glance
Thanks this is very similar to a Drupal $form array definition. I wasn't aware of any framework that supported a similar approach.
Added everything used in the tests: https://github.com/FastyPHP/fasty/blob/34a2f46bb9702bb17dfe8989f4957aeb1663c199/README.md#benchmarks
Amp has a proper MySQL package. https://github.com/amphp/mysql
Hmm, I guess I'll certainly have to do some research. If Laravel's opinions are similar to what I'm used to, then it would be okay. The 3rd party bundles of Symfony seem attractive. Thanks for the response! 
Wow, really? :/
My understanding means that i'd be able to run Symfony 2.x and 3.x alongside by namespacing them separately. Is that correct?
It's still under development yeah. I'm surprised by that error though I'll give it a try on `behat/mink-extension`, although `behat/behat` may be more appropriate. &gt;is handle strings that refer to namespaced Yes we are allowing that only in some cases for now: https://github.com/humbug/php-scoper/pull/74. It's possible to extend if the use case is legit. Also the doc is not really up to date yet :/ So definitely not a production ready tool but we're making good progress :)
I believe the framework creator was/is a .net developer and there are a lot of familiar concepts (e.g. blade templates look just like razor templates)
Thank you very much for this detailed response. I appreciate it. 
&gt; Out of curiosity, how does Doctrine handle when you change your entities? The way it handles this is by running a diff of your local (changed) entity mappings against a local production database schema. The basic process that I personally use is as follows; I make my changes in a local dev environment. I get an export of the schema of the production database (you don't need the database contents to diff except for the migrations history). I load this schema into a local database and I then run a diff with `bin/console doctrine:migrations:diff --env=prod` (I use Symfony rather than Laravel but that shouldn't make a difference). Notice the `--env=prod` flag? This means that I want to compare the local entity mappings against my production config, which points to the local schema of the production database. Doctrine will now create a migration in the designated directory. I check this migration, modify it if I have to etc. And then test the migration locally by running `bin/console doctrine:migrations:migrate --env=prod`. Again, notice the `--env=prod` flag which means I'm applying the latest migrations to the local production database. If I'm confident everything works it goes into the deployment pipeline and fingers crossed :) For me there is usually a lot of planning involved into running migrations on production depending on the severity. In some scenarios I have to take the entire system offline to prevent inconsistencies (i.e. users updating things while I'm running a migration). 
I think, "What kind of person sits around writing troll posts?" &amp; realize quickly it isn't even worth thinking about. That's the same for anything, not just php I look for people who actually work intimately with the subject they are criticizing, and read what genuinely valuable critiques they might be making.
I used ASP.NET Web API 2 at my last job. We use Laravel at my current job and the transition was really smooth. The built-in routing is easier to work with than Web API for handling front-end heavy sites. The ORM is much easier to use than Entity Framework.
Well we do have PHP 7 now, so things are definitely better, but yeah. Avoiding SQL is ideal. If you're just doing push with it via events and ZeroMQ, it'll be blazing fast with hardly any blocking. The most I do in mine is set a property in session with the connection ID, which currently is in file. I might need to change things later if I switch to Redis for session storage.
Very clean and easy to read/work with.
Yup, and unfortunately where I work its all windows servers :(
That sounds like a move towards the black-magicry of Java classloaders. 
Controllers are just functions, so my favorite implementation is the one where there is no implementation.
Indeed! My favorite framework routes to closures/anon functions. However, what happens when a project reaches a significant level of complexity? Surely there is some reusable logic that can be abstracted into a base class. I've built a brutish implementation, but am curious if any well-engineered frameworks have tackled this area.
I miss the old Kanye =(
Their main site btw: https://www.membersuite.com/
It's not the first time they've had this issue, [here's the patch](https://www.drupal.org/node/2275877) where they argue over and agree to remove "master/slave" terminology from their database module. I guess that's karma.
After the nightmare fuel designed by committee monstrosity that was the Drupal 7-8 development process, the entire php community is better off moving on from the spaghetti code nightmare they have created.
Wow what a deep thought :-)
This is the exactly the shit that gives PHP a bad rep...
Drupal gave lots of non-coders powerful tools. Those tools led to lots of bad code used by lots of people. Folks that wrote the bad code found it more important to speak at conferences for money than write good code. Decided to focus on SJW bullshit instead of fixing the monstrosity of spaghetti code they built, and then kicked out one of the few engineers of quality because he is into consensual bdsm and some third wave feminists got pissy.
Exactly, I give a shit about the code, not the code of conduct. Some real assholes have written brilliant code that made my life better. I don't want to drink with 'em at the bar.
That logic belongs in framework-provided services, which your controller functions can then use (or not) where relevant, like any of their other dependencies.
The thing is a pattern is defined by three things: 1. How it interacts with other objects. 2. What is its intent and purpose. 3. What is its implementation. We're missing the first two points here. I can take your class up there and ask "is this an implementation of a Facade?", "is this an implementation of a Bridge?", "it this an implementation of a Factory?", "is this an implementation of a Mediator?", "is this an implementation of a Servant?", "is this an implementation of a Strategy?", "is this an implementation of an Adapter?", and the answer can always be "yes, for all of the above" depending on how the class is used around the project. That said, the above is not a typical Context object, because it has setters - there's no reason for it to have setters in the baseline scenario. A Context implements an interface like this: interface AdminModuleContext { function getFoo(): Foo; function getBar(): Bar; function getBaz(): Baz; } class AdminModule { function __construct(AdminModuleContext $ctx) { ... } } It's nothing, but "constructor arguments, each wrapped in a method, so it can be called lazily". That's all. And the more important aspect of this are the first two points I mentioned above: 1. How it interacts with other objects. 2. What is its intent and purpose. And we can judge for this if we take a Service Locator problem and see if it applies here. Let's give it a shot. Give me one reason you avoid a Service Locator?
You could read this book, it's a great resource: https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;qid=1500085515&amp;sr=8-1&amp;keywords=clean+code
There's not a ton more info to be had; as an outsider the situation is inexplicable. 1. Larry Garfield is a very important member of the Drupal community. He also (it turns out) is into BDSM in his private life, but he kept that pretty private; you'd need to be a friend *or* do some focused digging to find it out. 2. Some other members of the Drupal community didn't like him, did some focused digging looking for dirt, found out he had unconventional (but consensual) romantic relationships, and started a whisper campaign against him with the Drupal leadership. 3. The whispers reached the people in charge of enforcing Drupal's Code of Conduct, but they just shrugged; his alleged actions were clearly not in violation of the Drupal communities rules. (The people behind the whisper campaign were, much later, punished under the CoC, since digging into someone's personal life so you can start whisper campaigns *is* against those rules, but it was too little too late to stop this mess.) 4. The whisper campaign kept going, and eventually reached Dries and Megan, who flipped, and booted Larry from every position he had in the Drupal community. It's not clear why exactly they did this, but it was presumably due to the whispers about him being into BDSM which again, had already elicited a shrug from the people in charge of enforcing the actual rules. 5. Larry (understandably) then went public with some blog posts explaining what had happened from his point of view, followed quickly by a very garbled blog post from Dries attempting to explain his side. 6. The community, evaluating the situation, then came down *heavily* on Larry's side, and Dries got a ton of criticism, so much so that he ended up deleting his post to give himself time to try and rewrite it in such a way that people would agree with him. Four months later, this is his latest attempt, and it's still not working. Frankly, the situation doesn't make a ton of sense. If Drupal leadership just really didn't like Larry, it wouldn't have been hard to sideline him over the course of a few months. Alternatively if they'd run across credible allegations of actual criminal or immoral conduct, they could have pointed to them as justification for booting him. But no... Dries' first attempt at an explanation focused closely on the fact that Larry practices "Gorean" BDSM, which I'll freely admit is pretty weird. (It's based on a series of horrible sci-fi books, and fans of it are, seriously, the geekiest people. Think the type of star trek fan that actually learns conversational klingon, except focused around sex. Fans like to say "be well" instead of goodbye, women often wear metal collars, in some cases women fans go so far as to avoid using personal pronouns, so eg "this girl is hungry", instead of "I am hungry", and of course they like to form kinky relationships with each other. Very 50 shades, except the Gor books had even worse writing. But it's all consensual, and because they know everyone else thinks they're painfully nerdy, they keep the weird shit private.) But if being into almost terminally nerdy hobbies was a bar to membership of PHP communities, most of us would be in danger, so that didn't fly. Dries' latest story is that it's all about Larry bringing a woman on the autism spectrum to a drupal event and enabling her to participate, which is...I dunno. Bad, apparently? Of course as someone who is also on the spectrum, I'm extremely unimpressed with any argument that starts with the idea that people like me need to be protected by people like Dries lest I accidentally end up as a *programmer*. Plus, if you read between the lines, Dries went out of his way to avoid suggesting that the woman was actually harmed; he just mentions that she exists as some sort of free floating fact that somehow makes booting Larry okay. I think Dries needs to just stop talking; he fucked up, his actions are not defensible, and the longer he tries to defend it the longer people will keep talking about *how he fucked up*.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
To be blunt, the allegation here is that: Larry had a friend who in polite terms is "on the spectrum", or in blunt terms is "autistic as fuck". Like a lot of autistic people, she's apparently smart, capable of making her own decisions, tends to obsess over things, and has got precisely zero social skills, along with a few other quirks. She started to obsess over learning programming, started taking online programming classes, and as a favour, Larry too her along to some Drupal conferences so she could find out more about programming, meet programmers, etc. It's not entirely clear, but Larry may or may not have had a sexual relationship with this woman at some point, although if ever did it has since ended and I believe she's now happily married. &gt; does he have "Wendy the Slow Adult" chained up in his basement or not No, that's not the allegation. But he did bring "Wendy the very weird adult" to a convention once, and who knows, maybe they were banging when he did it. Which is clearly Super Bad, for reasons so hard to explain that Dries hasn't managed to do it in 4 months of frantic waffling. Probably because saying that it's bad to bring a handicapped person to a convention is something 100 times worse than anything Larry has been accused of, so Dries can't say that, but saying it's bad to bring your girlfriend to a convention (if she even was) is so obviously dumb that Dries can't say that either. Sometimes it's hard to explain your actions when you take very bad actions.
That does seem to be the gist of it. Or maybe they *can*, but they're just can't go to Drupal conventions? (Which would be even worse, if that's what Dries thinks, of course...)
There's a subtext here that I think you are missing. There is a legal framework around consent and coercion in relationships. The implication is that this relationship strays well outside the lines from a legal point of view. It's not all autistic people, and it's not all relationships, it's these two people in this specific relationship that the DA is suggesting crosses legal lines. Edit - thanks for the downvotes, just responding to the absurd straw man in the comment above. 
From what I understand there is even quite a bit of doubt he had a sexual relationship with her. Further, you could really stand to do a few minutes of googling about autism and educate yourself a bit.
I know what autism is, but it's a wide spectrum. "Acutely autistic" makes it sound like she's severely disabled.
https://github.com/membersuite/sdk-php/blob/master/APISample/APIUsageExamples/CreateOrder.php: &gt; `if($response-&gt;aSuccess == 'true'){`
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [membersuite/sdk-php/.../**CreateOrder.php:** (master → 0d2dba6)](https://github.com/membersuite/sdk-php/blob/0d2dba647b283279c59378843d857007c0212a44/APISample/APIUsageExamples/CreateOrder.php:) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dk8qdd7.)^.
If someone has committed a crime, report it to law enforcement and **don't play the role of judge, jury, and executioner**. Really, what's so hard about that? The reason they decided to do anything is that they were reacting, not thinking. They're come from a place of fear. "*If we don't do this, we'll be hurt by it (most likely, financially)!*" is what our monkey brain might say, in different words. To err is to be human. To arrest one's own impulses and balance them against reason and understanding. To be more for your community and nothing unto yourself. To take the path of the greatest courage and uphold your personal integrity. That is what it means to be a leader. Neither Dries nor Megan apparently have these qualities. Most of us don't either. That's normally okay, until they're given the power to affect people's lives.
Thank you, I will take a look into it :-)
Oh horseshit. Legal counsel did what legal counsel does: booting Larry is less likely to lose a court case than admitting wrong. Keep him booted. Fuck this witch hunting hypocrisy.
Yeah, there *is* that implication. Which is what's making people upset with Dries, because he went to some lengths to carefully imply that, while carefully not actually making that claim. Probably because that's a factual claim, and according to Larry, it's one which is readily disproven. From Larry's post about this: &gt; We discussed it at length with both of the autism therapists I took her to see, both of whom were fully aware of all her details and saw no issue, but I am not at liberty to discuss those sessions, obviously. Nobody seems to be claiming that these therapists are wrong (or fictional). So when you say: &gt; it's these two people in this specific relationship that the DA is suggesting crosses legal lines. Yeah, they *are* suggesting that, and that's the problem, because nothing to support it has been provided. All we have is the suggestion of people who are not experts in the area, making suggestions about the relationships of a person they've never met, that maybe something *could* be wrong. I mean, I've never met Dries, but maybe he beats his partner (if he has one). If he does, that would cross legal lines, so does that mean he should be removed from his position? After all, as far as I can tell my sarcastic suggestion that Dries *might* beat his partner has as much grounding in reality as Dries' suggestion that Larry might be abusing this woman, and apparently a mere suggestion from someone with zero knowledge or evidence is all it takes!
I remember having a trait to implement __invoke in a controller and call a method of the same name as the given route param "action". Some routers implement this, but some don't, and then you can implement it in the controller itself as a reusable bit (I'd argue it's even better this way). You can also have a base controller do a check if the user is logged in, for pages that require login, or show the sign-in form. But aside from this I wouldn't say there's much to reuse in a controller. It's supposed to be a minimal piece of glue code, taking HTTP input, mapping it to service/model calls, and then mapping all that to view input. All of this is fairly specific to the project/controller in question. HTTP controllers should be simple, even without a lot of reusable logic built-in. If they're complex, maybe they're taking on more than they should (such as business logic).
I've seen worse (WordPress).
I'm not saying this is how they do it, but you could do this in one line with modulus. Let's take an example : 885433467 % 150
Severely disabled people can have relationships, attend conferences, and learn to program. What are you trying to say here?
Wordpress at least attempts to follow some PSR standards, this is just lazy.
Just by saying that I can tell you've never seen WordPress code. Which PSR standards do they follow, you think?
Thank you! That was the idea :)
&gt; then they would have a extremely strong moral imperative (and potentially a legal responsibility) to report this to the relevant authorities. &gt; We referred the situation to our legal counsel and followed their advice by removing Larry from leadership roles and we referred the matter to authorities. Did u bother to read it?
Hmm you should re-run the benchmarks on some more common Linux setup. PHP has very atypical behavior on Windows, which means the results aren't informative for 99% of the sites out there. Also don't forget to try the benchmark with and without opcache.
The parameter $portalUserName isn't ever used, instead $userName is called in the $this-&gt;login-&gt;LoginPortalUserWithHashRequest() which isn't ever defined. /// &lt;summary&gt; /// Allows you to log a portal user into MemberSuite using a saved hash /// &lt;/summary&gt; /// &lt;param name="portalUserName"&gt;The portal user's login ID/name&lt;/param&gt; /// &lt;param name="hash"&gt;The hash&lt;/param&gt; /// &lt;returns&gt;Success=true if the login is successful.&lt;/returns&gt; /// &lt;type&gt;Security&lt;/type&gt; /// &lt;remarks&gt;When ever you login, an &lt;object name="LoginResult.AutoLoginHash"/&gt; is returned. You /// can store this hash awway and allow the user to login automaticlaly in the future.&lt;/remarks&gt; public function LoginPortalUserWithHash($portalUserName,$hash){ $response = $this-&gt;login-&gt;LoginPortalUserWithHashRequest($this-&gt;accesskeyId, $this-&gt;associationId, $this-&gt;secretaccessId, $userName, $hash ); return $response; }
Wordpress at least has documentation and doesn't look like this: class GetSafeValue extends msIndividual { var $ID; var $Name; function __construct($datauser) { $dataarray = $this-&gt;object_to_array($datauser-&gt;bFields-&gt;bKeyValueOfstringanyType); $data = array(); foreach($dataarray as $result) { $data[$result['bKey']]=$result['bValue']; } if($data['FirstName']) { $this-&gt;FirstName =$data['FirstName']; } if($data['MiddleName']) { $this-&gt;MiddleName =$data['MiddleName']; } if($data['LastName']) { $this-&gt;LastName =$data['LastName']; } if($data['Nickname']) { $this-&gt;Nickname =$data['Nickname']; } if($data['DoNotEmail']) { $this-&gt;DoNotEmail =$data['DoNotEmail']; } if($data['OptOuts']) { $this-&gt;OptOuts =$data['OptOuts']; } if($data['DoNotFax']) { $this-&gt;DoNotFax =$data['DoNotFax']; } if($data['DoNotMail']) { $this-&gt;DoNotMail =$data['DoNotMail']; } if($data['Age']) { $this-&gt;Age =$data['Age']; } if($data['Type']) { $this-&gt;Type =$data['Type']; } if($data['DateOfBirth']) { $this-&gt;DateOfBirth =$data['DateOfBirth']; } if($data['EmailAddress2']) { $this-&gt;EmailAddress2 =$data['EmailAddress2']; } if($data['EmailAddress3']) { $this-&gt;EmailAddress3 =$data['EmailAddress3']; } if($data['Title']) { $this-&gt;Title =$data['Title']; } if($data['Prefix']) { $this-&gt;Prefix =$data['Prefix']; } if($data['Suffix']) { $this-&gt;Suffix =$data['Suffix']; } if($data['Designation']) { $this-&gt;Designation =$data['Designation']; } if($data['Company']) { $this-&gt;Company =$data['Company']; } if($data['SeasonalAddressStart']) { $this-&gt;SeasonalAddressStart =$data['SeasonalAddressStart']; } if($data['SeasonalAddressEnd']) { $this-&gt;SeasonalAddressEnd =$data['SeasonalAddressEnd']; } if(isset($data['LocalID'])) { $this-&gt;LocalID =$data['LocalID']; } if(isset($data['Name'])) { $this-&gt;Name =$data['Name']; } if(isset($data['ID'])) { $this-&gt;ID =$data['ID']; } } }
see me other posts. There are some examples of what I've been dealing with.
I'm integrating a Drupal 7 site with this MemberSuite SDK...
Why do you think Node wouldn't work with your apps or compromise security?
Your formatting doesn't match the source, BTW. Anyway, I think I'd take this over WordPress's mish-mash of arrays, globals and idiosyncratic functions. To fix this, you hit CTRL+ALT+L in PHPStorm, and it gets formatted. It's a brutally simple (if pointlessly verbose) constructor that sets values if they exist in the array. There's no key combo I can press in PHPStorm to unfuck WordPress.
Mysqli extension has support for async queries
I don't think you should query your app over sockets. The client subscribes to events and waits for the data, it doesn't ask or commands anything.
You mean Doctrine? 
1. Test your code, it always a good thing to have 2. Use PSR-4 for naming convention, just use `Cache.php` and not `Cache.class.php` or worse `welcome.controller.php` 3. Separating `core` into it's own repository is good too, so we could easily updates the core using `composer update` CMIIW
That would depend on what your app needs to do. You definitely can trigger events from client. I built something like Google Spreadsheets but less generic, for specific company needs. So multiple clients would edit cells of a spreadsheet at the same time. Updates were sent to all clients currently connected as you type and once editing the cell is over, its content would be written to DB.
You might was to check out Ilias, a full fledged LMS used by a lot of European universities and govt agencies. It's SCORM compliant, and offers a pretty good quiz/exam function that supports quite a few course progression methods. 
In this case the flow should be 1. client pushes event &gt; socket app queues the event to handler 2. queue handler executes commands 3. socket up listens for events from queue handler &gt; pushes the results to client instead of 1. client pushes event &gt; socket app handles the event &gt; responds to client
Thanks for the suggestions, really appreciate i ! I'll be converting it into PSR-4 in a day or two And for the core, we will see
Sure thing ! I'll run some benchmarks on a debian 8 setup and post them on github Cheers !
I always send this gif to someone who talks shit about PHP
Checkout if [`default_socket_timeout`](http://php.net/manual/en/filesystem.configuration.php#ini.default-socket-timeout) works for you. There's also a [`timeout`](http://php.net/manual/en/context.http.php) option for HTTP streams (you didn't mention which protocol you're reading). Alternatively if you're not restricted to Windows you could set an [alarm](http://php.net/manual/en/function.pcntl-alarm.php). This works however only if the blocking operation would indicate an error with its return value. Here is an [example](https://github.com/malkusch/lock/issues/6#issuecomment-261872452) of the pattern which adds a timeout to `flock()`. 
I'm not looking for a fight, but I don't think this contribution is very helpful. In this sub we have people with a wide range of views about social justice principles, and it should be far more nuanced than the binary analysis of "for" or "against". It's worth noting two themes that make the situation more complex. Firstly, Garfield, to my analysis, seems to sit on the social justice side of the fence, and he's certainly in favour of codes of conduct (CoC). Indeed, I suspect that what we are seeing now is legal ass-covering from the Drupal Association, rather than anything connected to, heh, "SJW" principles. Secondly, the situation has been seized upon by folks opposed to CoCs completely, as "proof" they cannot work. However, I think that enthusiasm may be premature - a CoC is intended to protect _everyone_, including summary dismissal from project positions. I think Garfield has made mention of that in one of his blog posts on this subject. We may therefore see an increase in enthusiasm for CoCs because of this fall-out. 
Yes, it seems pretty even-handed - thanks. 
Yay, production (maybe) credentials! *$config = array('AccessKeyId' =&gt; 'AAAAAPIA/UObVXfWokrswA', 'AssociationId' =&gt; '2537d8c3-0004-4ddb-b7e4-a6d76c09d3f9', 'SecretAccessKey' =&gt; 'PislBM1IXpWjshA/IQagSzrJ/FiXbuJu80zaKctvLO/CzHcZXYC9F8MbatI2jtFY4TZRU3TsmYflg3HsSYdWOQ==', 'SigningcertificateId' =&gt; 'AAAAAPMAnESfVm9oock2Kw', 'SigningcertificatePath' =&gt; 'bin/signingcertificate.xml', 'PortalUrl' =&gt; 'https://customer14517d3f9.portal.production.membersuite.com/' );* Looks to have been written by a company called SmartDataInc: http://www.smartdatainc.com/
If no-one has mentioned Slim Framework yet, I will. I like it because it is so quick to pick up. There's no model stuff though, but you've mentioned Doctrine, and you can certainly use that. 
That is such a load of crock. He's intentionally misusing the word "slave", and he's basically saying "every male dominant is misogynist!!".
In the US, there's this thing called Adult Protective Services. You call them if you have reason to believe that an elderly adult or an adult with disabilities is being abused or coerced. Many other countries have something similar. This will undoubtedly legally cover one's back.
 &gt;Basically websockets is very different from how PHP normally runs, because it requires a long-running process, rather than very short one-per-request processes. Polyglots will probably already know this, but PHP's difficulty with long-lived processes is an amusing reversal of what happens when you try to use certain languages (e. g. Java) to do short-lived web-requests. It definitely has echoes of "use the right tool for the job" to me. (Not that it's always an easy choice.) 
The controller is quite often problematic since it has to interact with a lot of services. You have multiple solutions : **1/ Inject the container inside the controller** This is what Symfony does, it injects the dependency container inside the controller class, then create some methods, like [render](https://github.com/symfony/framework-bundle/blob/v3.3.4/Controller/ControllerTrait.php#L209), to interact with it. You can later mock these methods to keep your controller testable or even inject a mocked container (more complex). The main problem with this solution is the fact you don't know what the controller need inside the container to work. **2/ Inject dependency inside the constructor** You could also inject the dependencies required by your actions inside your controller constructor (could also be done on [Symfony](http://symfony.com/doc/current/controller/service.html). Your controller constructor could end up bloated if you use a lots of services inside your actions. This is why some people ended up with creating a new pattern like ADR where they create a class per action (which generates a ton of lazy class). // You can see the problem here ;) public function __construct(RequestInterface $request, TableRepository $tableRepository, Mailer $mailer, ViewInterface $view) { // .... } **3/ Inject dependencies inside the method** This is a solution I quite like, that you could mix with the first one. The idea is to inject dependency into the methods. public function index(RequestInterface $request, UsersTable $usersTable, Mailer $mailer, ViewInterface $view): string { // .... return $view-&gt;render("page", compact("users)); } Then you can use a dependency injector (like php-di) to inject dependency when calling the method. I like this approach since it forces you to require less dependency inside your actions. public function index(RequestInterface $request, UserCreator $userCreator, ViewInterface $view): string { $user = $userCreator-&gt;create($request-&gt;getParsedBody()); return $view-&gt;render("page", compact("users)); } For my porject I use a mix of 1 and 3 * I use the container inside my "redirect", "render" methods (that will be later mocked for the TDD, I create a ControllerTestCase to do it automatically) * I use the method injection to inject Table or services that will be required for specific actions. 
CoC are a foot in the door to make it ok to soft police community members. Once you have that pretense taken care of, you can begin the politicking and finger wagging. Most of all, it establishes permanent positions that have nothing to do with the software at all, either in creating or supporting it, so it's an open invitation for the church ladies and commisars to move in and set up shop. None of this is new. Even back with Donglegate, almost everyone ignored her violating the code of conduct in posting a picture of the joker on Twitter. Coraline Ada, creator of the contributor covenant, was found violating her own rules and didn't care one bit. It isn't that CoCs can't work, it's that they actively increase friction and drama rather than reducing it, because of who's demanding them. They lack all the protections we consider essential in the legal system to avoid history's worst miscarriages of justice repeating themselves. So we end up with farce after farce. The vast majority of CoCs do not protect everyone, by design, for this very reason.
Yeah I was super excited about Voyager cause even going through these steps you have a powerful backend. The catch is that there are sooo many features and tons of open issues on github, so didn't feel like the framework is well supported. I ended up using spatie/laravel-permissions package
Well, if you want it random it's `rand()`.
You are asking about hashing. There are several hashing functions already built into php. On mobile so giving examples is a lot of work but a google search on the topic 'php hash string' should get you well on your way. Just be careful if you are doing the hashing for security reasons there are a lot of ways to do it wrong.
Voyager certainly has ... issues. After digging into it a bit deeper I'm impressed it made it to production! Thanks for the tip about Laracogs. Laravel Backpack requires a licensing fee for commercial use
Another thing ... some methods in Pascalcase and some in camel case https://github.com/FastyPHP/fasty/blob/master/core/Classes/config.class.php#L10-L22 and https://github.com/FastyPHP/fasty/blob/master/core/Classes/request.class.php .. You might want to consider using one style all the way through (camelcase obviously)
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [FastyPHP/fasty/.../**request.class.php** (master → 6ea9a66)](https://github.com/FastyPHP/fasty/blob/6ea9a6692b073629cfb3bd8227e738ce6a9e9b64/core/Classes/request.class.php) * [FastyPHP/fasty/.../**config.class.php#L10-L22** (master → 6ea9a66)](https://github.com/FastyPHP/fasty/blob/6ea9a6692b073629cfb3bd8227e738ce6a9e9b64/core/Classes/config.class.php#L10-L22) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dk928mk.)^.
Aside from misrepresenting the nuances of the social justice movement - which is a very broad church - I think you've misunderstood what caused this problem in the first place. I don't think Drupal were under "pressure" to implement a progressive approach to inclusion - they've done that for years. There is no indication they've been bounced into taking a "social justice" position against Garfield, who in fact is on the social justice side of the fence himself anyway. I think they got things wrong, and they found themselves chasing a ghost (abuse of vulnerable adult) that wasn't there. People from all over the political spectrum get things wrong, and that's understandable. What we need to see now is their holding their hands up and admitting it - though unfortunately it does seem like they're digging in. Incidentally, if you have questions about social justice, feel free to post them over at r/socialjustice101 - the question about "what's wrong about being a white male" is asked frequently. The short answer is there's nothing wrong with it, you'll be relieved to hear `:-)`. 
Just generate a hash value (message digest) with the hash() function: echo hash('sha512', 'a-string'); https://3v4l.org/Tkqkr
&gt; The vast majority of CoCs do not protect everyone I think that would need some supporting evidence. &gt; ... by design I think that would need some evidence too. Isn't that essentially suggesting that folks in favour of inclusion and fairness are secretly wanting to add drama to their projects, perhaps with the result of destroying those projects? Taken to its logical conclusion, that means that Dries - who has headed up an association with a progressive angle for years - wanted this mess all along. I think where you're coming unstuck is that you're disagreeing with my initial statement - that implementing social justice is not a binary question. These problems really do demand nuance - if you use the slippery slope argument to disagree with any changes at all, then it means that you're opposed to all attempts at being inclusionary. That's a valid political position, but fairly hard-line. Don't most people want to be more inclusionary? 
I think that OP needs an integer as a result. If that's the case, then [crc32()](http://us3.php.net/manual/en/function.crc32.php) could be a solution. Edit: typo
&gt;Has it affected you psychologically? No I was too busy being constantly employed for the last 15 years, building php apps. &gt;Do you eventually get in the hate wagon and wake up self loathing for choosing it? Again no. I **prefer** to use javascript/node and when playing with code I use that but not because I dislike PHP more because I want to improve my basic javascript (not using jquery for instance). In actual fact I've been enjoying php more and more since composer/packigist and, recently, 7.x being released &gt;How about at work? Does it make you less motivated? No, again I am too busy *working* than to be bothered by what some idiot who doesn't understand programming properly says on the web. Overall I'm definitely a "right tool for the job" kind of programmer and I like some languages over others due to personal preference, for instance I **personally** don't like coding in Python but I understand that if I want to write a good app for ubuntu, then Python is a good choice
Always thought the Symfony controller was a nice trade off between helper functions and too much responsibility. And it now comes in the form of a trait so no need for a base class. // helper functions generateUrl forward redirect redirectToRoute json // returns JsonResponse file // returns BinaryFileResponse stream // returns StreamPesponse addFlash // store a message which survives the next request isGranted denyAccessUnlessGranted renderView // returns rendered text render // returns Response containing the rendered text createNotFoundException createAccessDeniedException createForm createFormBuilder getUser isCsrfTokenValid getDoctrine The getDoctrine is the only one that really does not belong here because it ties the controller to Doctrine but I don't use it and it does make getting started easier.
What are you actually trying to achieve?
It's probably not what the OP wants.
The PHP Request for comments is a good place to start https://wiki.php.net/rfc
I keep up with most of it right here on /r/php You could also bookmark and watch the RFC page. There's also the source code on git where you can see what pull requests are being worked on and such: * [https://wiki.php.net/rfc](https://wiki.php.net/rfc) * [https://github.com/php/php-src](https://github.com/php/php-src)
You ask for a random number but give an example with a certain outcome. Are you trying to get a hash of the string or obfuscate the text?
Exactly what I want! Thanks!
There is a nice web interface to the internals mailing list at https://externals.io/
This is quite helpful, thanks!
What are some good sites/books where I can take my elementary understanding of PHP to the next level? I just got a job writing MVC apps and would love to be an overall better PHP developer. Thanks!
Yeah, Fasty will be using camelcase
Yeah, to add to this may guess is they convert whatever is after the forward slash into an integer by converting the string to their ansi values. Then they use the modulus on the int. 
Yes. Thanks to Sara, I've corrected it and a couple of other typos. :) 
If you don't have all the time in the world, and you want just the good stuff, all you need is the migration guides here: http://php.net/manual/en/appendices.php It contains a detailed enough list of deprecated, changed, removed and added features and other enhancements.
Probably. Don't do it.
* Converted Fasty to PSR-4, it now fully uses composer for autoloading core classes * Corrected pascalcase naming conventions to camelcase * Removed php close tags (?&gt;) in every core class * Controllers and languages no longer need the .controller and .language extensions https://github.com/FastyPHP/fasty Thanks again for all the good suggestions ! 
Yes, that's a workaround and it's better keep it in mind from the start as I said in my original comment. App handling event directly is easier to implement though and that's how node apps work.
HAHAHAHAHAHAH youre wrong.
&gt; Surely there is some reusable logic that can be abstracted into a base class. It's hard to be sure, but it sounds like you're doing something horribly wrong. For me a simple controller would look like: function getIndexPage() { return new HtmlResponse("&lt;html&gt;&lt;body&gt;hello world.&lt;/body&gt;&lt;html&gt;"); } Anything more, like being able to render templates would be passed in as a dependency. Any other common 'things' that need to be done in a controller, are almost certainly things I wouldn't approve of. 
Thanks for the suggestion. What about something like: function doRoute() { authUser(); if (inputIsInvalid()) redirect($errorRoute); else renderView($viewTemplate); } Is that not logic that would go in a controller? Is there not a framework that has already thought about what common tasks might be involved with business logic? Am I thinking of a different design pattern?
Thanks for the advice. Personally, I use something like 1. However, what I'm curious about is whether there exists a framework that's already thought of common dependencies and logic flows that would be useful for most controllers. For example, by default, the controller is injected with a user authenticator, input validator, and rerouting for various errors...
&gt; Is that not logic that would go in a controller? Most of it. As I like to have security for an application centralised, rather than distributed across all of an application, I'd almost certainly move the authUser() out to either a 'middleware' or just something run before the controller. But the rest of it, would be there and called from the controller, but just from services/objects passed in. function searchController(Input $input, Redirector $redirector, $templateRenderer) { list($searchOption, $errors) = $input-&gt;getSearchOptions(); if ($errors !== false) { return $redirector-&gt;redirectToErrorPage($errors); } return $templateRenderer-&gt;renderView($viewTemplate); } &gt; Is there not a framework that has already thought about what common tasks might be involved with business logic? .....you might really like Laravel. 
Many thanks for your helpful suggestions!
A sha-2 sum is a number, just in hexadecimal.
I don't think it's a good idea since you may want to have "naked controller" sometimes (for instance an API that simply return a JSON). A good middle ground, would be to improve on the #1 idea and import "helpers" method with traits. &lt;?php class PostController extends { use TwigViewAwareController; // add a render method use QueuAwareController; // add an enqueue method public function index () { $this-&gt;enqueue("send:mail", ["test@john.fr", "Hello"]); return $this-&gt;render("Hello"); } } This way you keep your root controller "dependency free" and you can use multiple traits for your project (2 controllers could use different template engines for instance). To be honest, I think dependency injection and controller doesn't mix well and I'm experiencing with multiple patterns, but I didn't found something that feels perfect. There is always some trade off.
Oh.... if you think that's bad look at QuickBooks SDK which they don't give shit about...
Maybe adding up the ordinal value of each char and using this as seed? Like this: $str = 'foobar'; $seed = 0; $len = strlen($str); for ($i = 0; $i &lt; $len; $i++){ $seed += ord($str[$i]); } mt_srand($seed); $rand = mt_rand(); echo 'Result: '.$rand.', seeded with '.$seed; Drawback: This modifies the global state, the current seed. The concrete usecase would be good to know.
Can you please explain it again? You're trying to extract the URL query, right? So when you have `&lt;host&gt;?page=2` you want to extract this `page` is `2` info. Can you please clarify? Also, it looks like you might be talking about something called an AJAX request, which is generally done using JavaScript and it might not be AngularJS' fault.
Thanks. Unfortunately, it is a windows server. I am reading over a COM port using direct-io (no timeout option, async IO is not supported on windows.) There are a dozen solutions for this on linux, and right now I am aware of 0 on windows that don't involve spawning a new instance of php.
I tried to fairly represent both sides, but some of the anti-Crell folks were upset with me after the article came out.
&gt; Don't most people want to be more inclusionary? something something supporting evidence. ;)
&gt; I think that would need some evidence too. Unfortunately, the people against the status quo (ie: no CoCs) should provide evidence of their effectiveness. &gt; Isn't that essentially suggesting that folks in favour of inclusion and fairness are secretly wanting to add drama to their projects, perhaps with the result of destroying those projects? Than you must do some research on "post modernism", "critical theory". There could be honest people advancing that agenda but they are called "useful idiots" &gt; Taken to its logical conclusion, that means that Dries - who has headed up an association with a progressive angle for years - wanted this mess all along. Doesn't follow. Also, usually these type of initiatives end up blowing up in the face of people that started them. This could give you a hint about their effectiveness and/or true purpose. &gt; Don't most people want to be more inclusionary? Software development is one of the most meritocratic domain of human activity. If you want to be more inclusive you can do some research of the effects of inclusionary policies in firefighting departments (ie: female firefighters that cannot carry a teenager). Again, the SJW must provide evidence on the effectiveness with the mention that feelings don't count as evidence.
Found out the error , php file having GET method should be included in main page , not in view .
I actually agree with you. The numeric version of an ASCII character is the worst of both worlds for code readability. When I assign numeric values to constants, I generally choose values which make sense as numbers. I wonder if this code segment was a poor translation from C (or a similar language) where there is a variable type for a single character which actually contains an integer specifying a character code.
Packagist.org
whats wrong about eloquent orm ? i find it pretty easy 
Great feedback. For a long time I am looking for reasonable objections against autowiring other than that it doesn't know what to do when you have multiple implementations. I am not using it but I am planning to start because it's too convenient and this is great list of things to watch out for.
There are several ways to integrate it nicely with a LAMP app. The easiest integration would be to serve the page via the LAMP app and then have all the chat features loaded via JavaScript directly connecting to your chat service. Not sure how important this feature is for the project but given chat is not a simple feature with PHP and there are several open source node.js chats out there it’s worth taking the time to give the node.js approach a try.
Don't use PHP for desktop applications. That's not what it's for.
I will admit that the Robot framework is really nice. It has no GUI but Codeception is very powerful for automated testing http://codeception.com/ It uses a pretty readable code convention too. For example: $I-&gt;canSee('home page'); Are there any specific features you like about Robot that you are trying to find in a PHP library or framwork? 
Have a look at https://cucumber.io/ Allegedly there's a PHP implementation for Cucumber as well called Behat, but I haven't personally played with it ~&gt; https://cucumber.io/docs/reference/behat
Nether is Python...
I think python is a more generalistic programing language, php was specifically designed for web development... 
Re: by design. The CoCs do not contain adequate protection against malicious and bad faith actors, as in the precedent I already cited. The climate around them means the accuser has the home team advantage. Those who do advocate for reasonable safeguards and scope restrictions, e.g. Fantasyland's code of professionalism, are rejected. CoCs are adopted to push a specific political and social agenda, by a small but vocal group of entryists. That others take their words at face value is a problem, and leads them in situations like Dries'. The amount of hypocrisy and doublethink associated with this means most of the people involved are not so much malicious as unwilling to apply to themselves what they demand of others. Above all, there's the example before us: evidence obtained by violating the code of conduct is not rejected on principle (it is in the legal system)... if the accused is found not to violate the CoC, the matter is not closed but merely escalated to less accountable channels, and now the rules are being handwaved away by some as not being iron rules after all. If that's the case, then it is not a set of rules but a set of optional justifications. Inclusivity and diversity are what is referred to as floating signifiers. By remaining vague and undefined, they allow people to project their own notions onto it, while the specific interpretation is shifted as needed to justify actions taken on other grounds entirely. This makes them excellent flags to rally people under, but also opens the door to stretching the meaning beyond reason. We see for example that a diverse sexual orientation applied to a non neurotypical individual is seen to nevertheless be grounds to exclude and demand adherence to narrow principles. This is only tenable if you twist these concepts around to fit other moral values entirely. Namely that some (i.e. White men) are automatic oppressors and women's ability to consent is always in doubt unless proven otherwise.
Except that PHP is having quite a few very interesting upgrades.
I tend to say that anyone using the acryonym "SJW" in a non-ironic fashion is probably at least a bit suspect, so consider your post retrospectively as having inadvertently hit a trip wire `:-)`. I am interested in what you think I should research though. What is it about critical theory and post-modernism that worries you? 
The idea of white men as automatic oppressors is a straw-man put forward by folks who are privileged by the existing social order. It isn't actually _true_, but I can see how it is helpful in discouraging attempts by well-meaning people to redress the balance. I tend to oppose the notion of meritocracy in the real world, since it does not reflect the theory of meritocracy. In terms of being accepted into a community, disadvantaged folks experience a symmetry with the "meritocracy" of capitalism: the rich get richer, the poor get poorer. I think we can do better than that. Quite _how_ we do that is open to discussion, but we should definitely try. 
Even taking your emoticon into account, I am trying to work out to the purpose of your comment. If I assert a truism like "most people want to be nice", then you could ask me to provide evidence for that if you really wanted to, but to do so would be daft, since if most people _don't_ want to be nice, we would probably agree that they _should_. Are you implying that most people _don't_ want to be inclusionary, on a conscious and deliberate basis?
Well this experiment has most definitely failed, all it has done is indeed, as you say, benefited those who are privileged by the current social order. Which currently includes the popularity of victim politics, and a culture of fear mongering in which one of the most accessible and identity blind communities is presented as being highly exclusionary. Those of us who grew up on the internet before social media, digital cameras and e-begging remember what it was like to enter a chat room as nothing but a handle you made up. Age, gender, sexuality, and so on, it didn't matter one bit. The idea that the open source communities that grew out of there are some of the most misogynist, racist and exclusionary environments is a thesis that requires extraordinary proof. In fact, it appears that the exact opposite is true: faced with accusations of bigotry, the meek techies took it for truth and tried to do as they were told. None of it has worked. All it's done is created a climate of fear. These efforts do not benefit women, or racial minorities, or lgbt, they benefit those who stand to make good coin off becoming professional victims and diversity officers in what looks more and more like a mafia shakedown: nice community/company/conference you have here, would be a shame if someone called you a bigot. With media contacts on speed dial ready to amplify the outrage, this is a misery machine where everyone loses. And it has nothing to do with serving the truly disadvantaged, who lack the social access to get in on this, and do not make for palatable interview subjects. Edit: BTW, the idea of white men as automatic oppressors is an ideology currently credibly being taught at top tier American universities. Look up some lectures on YouTube to see where all this is coming from (e.g. whiteness). An entire generation has been taught to see class inequality as an identity politics problem, leaving them with no useful tools to actually dismantle the systems they see as unfair. A true rational egalitarian should be appalled at how our teachers have failed their students.
you modify the entity, then run a diff, and it makes a migration file. You can modify the generated file if need be, but I've never had to. I use eloquent for most my projects (because I work with other laravel developers who only use eloquent) but this is one of the reasons I personally prefer using doctrine personally.
It's a good time to expand your toolset and learn Python, then.
I just hit up PHP.net frequently. Too many emails these days.
&gt; For example, by default, the controller is injected with a user authenticator, input validator, and rerouting for various errors... Most of the time these concerns should be handled prior to the controller. User authentication should probably sit in the middleware layer, as it is needed on most requests. Input validation could go in the controller, but you could also extract it to some kind of request object, like Laravel's `FormRequest`. Have a read of Laravel's documentation on [middleware](https://laravel.com/docs/5.4/middleware) and [FormRequest](https://laravel.com/docs/5.4/validation#form-request-validation). 
You could start your rabbit hole trip here: https://www.youtube.com/watch?v=eTmNWY0ZPfM&amp;t=1s 
Urgh, no thanks. Daft collapse of civilisation conspiracy theories, the completely wrong conflation of liberal with communist thought, and approving references to Breitbart. Can't we have this conversation without boosting alt-right talking points? Also from your recommended publisher: (((coded anti-semitic messages))), approving references to racists like Katie Hopkins and Enoch Powell, and videos on white-supremacy themes like "white genocide" and "miscegenation" (i.e. pollution of the white gene pool). Out of interest, are you coming from a fascist perspective? 
Disclaimer: I do not claim this is THE most comprehensive list, or the only source of truth. This is just my opinion. Nor is the reading alone sufficient, practice is actually much much more important.
I was just being humorous, friend. I agree with the things you say.
Ah, my apologies. I'd read a few too many folks coming from alt-right positions, and was probably a bit grumpy `:-)`. 
Problem here is developer snobbery. Laravel is cool hip and current right now and developers may not be truthful about their ecosystem. Personally I regularly develop in Wordpress Magento and Laravel but if I was asked which one I might be tempted to say the latter because its "cool". Despite this however I am pleased such an awesome framework is doing well!
funny part is that Symfony has like 860 000 000 more downloads than laraval but the usage is still less :)
[removed]
You can make a functional site without JS, but you'd have to reload the page any time you'd want to update/change/redraw anything in the front end. Javascript lets you manipulate html as well as send and retrieve data to/from the backend without reloading - which can make for a more seamless and "modern" experience. That's the basics, anyway.
Asynchronous requests and DOM manipulation make it worth learning.
Can you direct me to a good tutorial site? I used codeacedemy but the one there is buggy plus they are taking it down soon.
Thanks. I dont want a super fancy website but i guess ill have to put in the time to learn it because there are some things i want to reload without reloading the page entirely. 
Try Code schools: https://www.codeschool.com/learn/javascript
Thank you!
Honestly, i just learned from the jQuery docs. I know that sounds frustrating when you’re trying to learn, but I think it’s the easiest way. The way I learn frameworks and languages is by getting a basic concept of it’s design and syntax, and then asking “how do I do [the thing I want] in [framework]?”
watchandcode.com
Why is it funny?
That's because laravel uses symfony components from composer :)
&gt; 19% do not use testing frameworks / tools Great. 
I'd say compared to where it probably was 10 years ago, it really is great. Although I would be curious how it compares to the same question for other languages. 
yeah but Laravel has altogether 40 mil downloads while symfony 900 mil..so even if we take away the 40mil of Laravel ..it is still an enormous difference
I find it funny that Laravel is always on the first place while some real statistics shows otherwise..
Lets also not forget that a lot of other libraries use symfony as the basis for their code too. I think drupal uses a bunch as well.
You’re right. 19 percent is better than 75 percent in this case. 
yeah I know..but still if we would account all of that there is a huge difference..I do wonder how is that possible..it really is intriguing :)
Thats how i learned php. Thanks. Ill see if it works the same for me for jquery. :-)
Agreed! I'm a Java guy who is learning to program in PHP. For static sites, I find it very capable and much easier. 
I know people, who arent very good with JS and only work on PHP back-ends. But usually there are requitements for it anyway at some point. If you want to make whole websites - means front-end as well - you will need it 100%. It's not very hard, there are some differences to PHP (prototype language, closures catch every variable etc) but you will learn that along the way. Just watch our for the current JS trends - they go far beyond reason at some point. 
The way PSRs work at FIG, any update would have to be a new PSR. Existing PSRs can't be updates, as that will just wreck havoc on existing projects. And because FIG moves at a glacial pace, like any serious standards organization ^^/s don't expect new versions any time soon. And particularly don't expect new version that just add type-hints. It's not worth the trouble on its own. Also, just because PHP 7 has return typehints, doesn't mean everything has to instantly add return typehints. I have projects I'm starting now with 7.1+ compatibility, and I don't slap typehints on everything all the time.
I recommend you learn vanilla js instead. https://css-tricks.com/now-ever-might-not-need-jquery/
&gt; 96% of PHP developers select MySQL That high number is sad. As a comparison for other free databases, PostgreSQL is superior in so many ways but most developers simply don't know it (better).
The superiority of PostGres is marginal though. Its not like it's going to give you a 150% or more boost in performance. Majority of the time, SQL comes down to the way you've designed your DB structure and how you've written your query. Choosing between PostGres and MySQL is not going to help you if you don't know SQL that well. 
obviously many websites are running without js and it perfectly fine for sites which focus on delivering information for instance or are just plain presentational pages. If you want your site to be dynamic, have real time feeling, use animations that it is time for javascript
\Psr\71\.. would be perfect for PHP specific versions. Projects/Frameworks that require backwards compatibility can continue to use the existing implementations. PHP specific versions can go in their respective namespace which the project/framework can use that match their minimum requirements. Backwards compatibility is important, but not everyone needs it.
FIG exists to encourage interoperability. What you propose goes exactly the opposite, you propose every standard get forked with each new version of PHP, eliminating interoperability in the process. If you think "not everyone needs it", then you're welcome to fork the PSR yourself, and add types. Now you have more typehints, and zero interoperability - exactly what you need.
Sorry I haven't been updated to Wordpress community lately but is it really a framework now?
I personally think it's a requirement. I'm kind of in your shoes - learnt PHP, landed an intern. Currently have to learn ajax/jquery on the fly, because knowing PHP is not enough for building the front end of the website.
A minimum PHP version does not hinder interoperability at all as the minimum version is known. PHP-FIG will be 2 years behind PHP when 7.2 is released, 3 years when PHP 5.6 is no longer supported at all. I did not mean to state that \Psr\71 is the solution, I'm merely asking the question of when PHP-FIG will adopt PHP 7 as PHP 5.6 is no longer actively supported.
 &gt; Choosing between PostGres and MySQL is not going to help you if you don't know SQL that well. It actually does - just reading through the PostgreSQL documentation teaches you about incredible stuff such as partitioning, inheritances, materialised views, indexes on functions, etc. Just switching tools will make most PHP-ers better SQL developers.
When i was learning php while I was building the back end, i had errors telling me what was wrong. Those are easy to google and solve but this doesnt at all. Am i missing something?
&gt; A minimum PHP version does not hinder interoperability at all as the minimum version is known. You're not thinking this through. If I provide a PSR-7 implementation, that's over a dozen interfaces to implement, and I'm not counting the multiple stream implementations you'll provide etc. You're asking the maintainers to then double their work and write, test and maintain another over a dozen interface implementations, that is the same, but has type-hints... All the libraries that provide you with an HTTP request/response/body/stream/etc. then have to support multiple versions of *their* interfaces and classes that *accept or return* any of the interfaces defined in the respective PSR. This will also require runtime reflection in places, so they can identify, say, which version of a PSR-7 request is a web controller expecting, as the resulting mish-mash of interfaces will make it very non-interoperable to support just one of the interfaces, but it becomes unpredictable which version is every consumer consuming, and which version is each producer producing. So, yes, it does hinder interoperability a great deal. Especially since the current PSRs work just fine in PHP 7.1. You're solving a problem that doesn't exist, and creating one that goes against the core goals of FIG. So the answer to your question "when PHP-FIG will adopt PHP 7" is they've already support it, and you may see PHP7+ features in future PSRs, but the current ones will stay as-is, and there's no reason to rush for a replacement any time soon.
Sorry, not really sure what you mean - you mean JavaScript doesn't have errors or?
Yes. For instance, if i miss a ; in php, the error would pop up but if i miss that in the jquery stuff, nothing happens.
There have been discussions on the FIG list about this. As it turns out, naming is one of the hardest things. Personally, I would like to see a new major version of the interface packages, created via a new PSR to replace the current version. As always, if this is something you care about, organize a working group and start the process!
How is it superior? For me mysql is superiors because - community is way bigger --&gt; way more topics to google and find answers to - the tooling is way better --&gt; better desktop clients, etc. If postgres is like 20% faster in 2 specific usecases or something like that its not gonna beat the experience people have with mysql which is a lot more mature by now.
There is absolutely nothing stopping you from adding type hints to your code today, without breaking interop. The way I see it, standards should define the minimum boundaries and leave it upto the developer to build on top of it as necessary.
Drupal, Concrete5, Laravel, OctoberCMS, Joomla, Bolt, Grav, Magento, Silex, Lumen, PageKit, Thelia, Prestashop, Sylius are just a few that use Symfony components. Without realizing it so many people aren't aware that Symfony is the biggest game changer in PHP since I guess PHP5 came out.
An error should be logged in the browser console
&gt; Just watch our for the current JS trends - they go far beyond reason at some point. Best advice on this thread..
Are you comparing developing in Wordpress and Magento to developing in Laravel? I would say that Laravel offers 100x the experience that the first two do. 
I agree with this.. I learnt sql and all those db stuffs properly from PostgreSQL docs but I never used the db though :)
I mean, there is extensive documentation available for MySQL as well. The documentation however will not teach you how to design a database for your application, nor how best to write your queries for your database. To do that you need to understand the execution of the query, understand if you're missing indexes or not or if your indexes are even being used, etc. 
&gt; As always, if this is something you care about, organize a working group and start the process! That's the most amazing way to tell someone "go f*** yourself" :) I sometimes do this too. - User X: "You should implement this or that in your project, otherwise your project is crap" - Me: "I see you believe strongly in this and that. You should start your own project that focused on this and that, and absolutely destroy my crappy product. Good luck!"
Asking someone to spend time on something they are obviously passionate about is telling them to "go f*** yourself"? Really? FIG is much more democratic now that the 3.0 rules are enacted. Anyone care form a working group and produce a PSR, so long as you get buy in from one core member to sit on it.
&gt; Out of interest, are you coming from a fascist perspective? Thank you for your contribution to the exposure of how SJW think and behave. Good luck with your life and remember me when the shit will hit your fan :)
&gt; Asking someone to spend time on something they are obviously passionate about is telling them to "go f*** yourself"? Really? Yes, really, because when someone says "I want FIG to implement my wishlist", telling them "go make your own FIG" isn't what they're looking for, or they would've done that already. &gt; FIG is much more democratic now that the 3.0 rules are enacted. Anyone care form a working group and produce a PSR, so long as you get buy in from one core member to sit on it. Oh, wow, that sounds amazing. I can see so many people passionate about this procedure, waiting in line to go through every step of it.
I'm sad to say that WordPress development should indeed be compared to real frameworks such as Laravel or Symfony. I have no choice but to sometimes work on WordPress websites. Going as far as debugging a lot of stuff in paid "vendor packages" such as WooCommerce or certain themes. I'm baffled by the crap I've seen there. In paid codebases, with thousands, millions of users. It saddens me to see deeply, but there's no two ways about it: WordPress can and is used as a "framework" for plugins, and some of those plugins actually earn developers enough to make a living out of it. Imagine that: a company only making WordPress plugins and WordPress websites. Now I'm probably too young to fully understand why it's 2017 and we're still allowing such a big part of the web to be build on that utter crap. The only reasonable explanation I can think of is that in the earlier rise of the web, WordPress was indeed a very good solution. But because of "backwards compatibility", they've build upon that very old codebase, resulting in... this. Still popular because of its simplicity. When I think about how big a part of the web is powered by WordPress, I actually feel physical discomfort. But as long as there's a big pile of money to earn with it, who can stop it? I'm just a developer who deeply cares about "artisanal" code. But you don't earn a lot of money with that..
This very basic example shows that it is not possible: PHP Fatal error: Declaration of ....\Cache\Memcached::get(string $key, $default = NULL) must be compatible with Psr\SimpleCache\CacheInterface::get($key, $default = NULL) in /path/to/file....
[PholconPHP](https://phalconphp.com/en/) Is a good framework and it's a C extension so you should see no performance difference compared to your .net implementation. Since it's a C extension you won't have problems with dependency hell as most modern frameworks have atm that reach a decent size. Has everything you would need in a framework, Routing, ORM, Models, Events, Filtering/Validation, Volt template engine, Annotations, INI/JSON/YAML config loaders. And other features. It's as easy to learn as Laravel.
ahh yes I saw some cool info in the postgresql docs still, is very small documentation at least compared to mysql documentation, the sames apply to nginx compared to apache in documentation. In general the books of mysql performance, replication, etc helps to master the documentation just a reference 
So far, the PostgreSQL docs are a much better learning source than MySQL's, from my experience. Download the book, read through it and you will already *be* a better engineer. Even just knowing that a piece of technology exists or that something is possible is going to improve your architecture decision capabilities, and the Pgsql docs are full of that stuff. MySQL's docs (so far) are a place where to look up why something failed in MySQL.
I wouldn't choose postgresql on speed but on correctness and reliability. It's less forgiving of coding mistakes and data consistency is much better. But most of the time that doesn't matter, and MySQL is so widely available that you can be assured you it will be available anywhere php is available, and with the right choice of tools and techniques on the php side you can minimize any problems.
It doesn't. Symfony comes up with their 500,000,000 number by summing all of their components. When you compare the Symfony framework proper to Laravel framework proper, Laravel has more downloads all time and on a daily basis: https://packagist.org/packages/laravel/framework https://packagist.org/packages/symfony/symfony
Feel free to criticize individuals, and even insult the Drupal organization's decisions and procedures, but please refrain from making direct personal attacks (e.g. calling people idiots). It can only serve to reduce the quality of discourse.
They don't show otherwise: https://packagist.org/packages/symfony/symfony https://packagist.org/packages/laravel/framework
As much as I would assume kinder motivations on your part, it's best to leave out the suggestion that the person you're responding to seek therapy. It could reasonably be taken as a personal insult.
Materialized views are a life saver for our application. The search speed is wicked. I guess we could have used MySQL and Memcached but it's nice to have it within Postgresql. Fuzzystrmatch is awesome fairly powerful module we use. I suppose there is a work around for most sql dbs but postgresql just seems more sophisticated to me.
I think /u/trycat was trying to illustrate the disrespectful way that Dries and others acting against Larry have characterized this woman. The implication is that Larry's friend was a severely low-functioning autistic person being imprisoned, coerced, and abused by him. Obviously this *is* an extremely inappropriate characterization to make, and the people at Drupal should be ashamed of themselves for doing so, and continuing to do so even in light of evidence to the contrary.
https://symfony.com/500million
I didn't say "go make your own FIG" I said "go contribute to FIG". Big difference.
Framework is used broadly here I think
Take a look at Laracasts to learn Laravel (and the basics of a lot of other things like testing). Basically, a framework will work as a scaffolding, as a guidance for you. Remember all the stuff that has nothing to do with your app, like DB access, routing, templating? You don't have to do that anymore, a framework will do it for you. It will also give you structure, in that you should use a specific style (e. g. put these files in this folder, those files in that etc.), but most of the time without actually enforcing it.
Apart from docs, any good starter material for someone who's worked with only mysql for 12+ yrs?
Unfortunately until we see a new cms with close to as many quick to install plugins, we aren't going to see wp die off anytime soon 
I don't like `otherwise`, I much prefer `catch` from the Javascript world, is there a reason you went with `otherwise` ??
It is refreshing to see well made SDK. Have not seen them for a while.
19% don't test and 44% use Laravel. This is why the top companies struggle to find quality PHP developers.
The library utilizes "Guzzle Promises" https://github.com/guzzle/promises. I prefer the "catch" keyword as well.
Why is using Laravel bad exactly? 
You were recommending an explicitly fascist resource. I mean, if you want to recommend another resource about Cultural Marxism, and wish to make it plain that you're not knowingly recommending racist, sexist, anti-Semitic and white supremacy material, then I will be happy to believe you. I don't think you should be sweeping under the rug this material either, which is an endorsement of Hitler's nationalism, from the same publisher: &gt; An overview of the socio-economic policies in Germany from 1933 to 1939 considered as a set of nationalist stratagems against the foreign, internationalizing elements that were arrayed against her. This period can be best categorized as an attempt by central Europe to control its own cultural destiny, which had been essentially controlled after 1919. The crippling financial penalties assessed to the German people were unheard of in European history; many saw this as part of a plan to thwart German development as a cultural force, and Hitler's rise to power was an organic expression of this ethnic group's desire to be free of outside interference, particularly in the financial sphere. My social justice advocacy is not much left from the political centre, but your politics currently appear to be on the far right, if not actually knowingly fascist. It gives me no pleasure to place you on this scale - if I have placed you correctly, I don't think you know how dangerous these ideas actually are. &gt; the exposure of how SJW think and behave Your view that social justice advocates "all think the same" is also incorrect. I have [treated that subject](https://www.reddit.com/r/socialjustice101/comments/6ctjiq/is_this_a_theres_only_one_right_way_sub_serious/dhxewmp/) here, since it is a falsehood that is repeated an awful lot. 
Using Laravel isn't bad, I use it myself, it's an excellent framework, IF it's used with good coding practice. The problem with it is, it's far too easy to use poor coding practice (in fact it's practically encouraged in the docs). Similar to Wordpress, It's relative popularity means this is the first taste of development for a hell of a lot of people who through no fault of their own write shit code without knowing any better, and never get a taste for what you might call "enterprise" level software development.
True. People should first learn the language, and then a framework, not the other way round. 
That would be best in an ideal world, but I honestly think that if people took the hit on the learning curve with Symfony or Zend 2 right at the beginning, they would almost be forced to learn at least something close to good coding principles. After that, you can choose any framework you like and still keep up those good practices.
&gt; Unfortunately until we see a new cms with close to as many quick to install plugins It's worse than that, though, imo. The plugins themselves can't be 'classes' or require separation of logic and markup or anything else remotely conducive to 'clean' development. There are a number of alternative CMS out there, many of which have plugin architecture, but the ones I look at discourage mixing too much PHP with any markup, and want you to use some templating system. As clean as that is, it will not attract the large number of people wanting to quickly put together "plugins" for a CMS. Sort of chicken and egg problem, but unless you allow for (and possibly encourage) raw includes of whatever anyone wants, you won't get the numbers required to make headway in that market. 
Wasn't possible before PHP 7.0 without magic methods, because `catch` is a keyword.
It sounds like your mind is made up implacably, and I am sorry to see this is the case. I think CoCs are the way forward, and the bulk of the productive discussion is about how they should be worded and how they can operate. Personally, I think there is a great deal more fuss about them than they warrant. I've spoken to people who I trust, and they say that conference harassment is a real thing, and creating a range of tools to guard against it (and thus widen participation) has done a great deal more good than harm. We will have to agree to disagree. 
Well, I started developing with PHP at a time when no frameworks were around. I think people take most of their knowledge on how stuff is done with a framework from that framework’s documentation, so maintainers should have an eye on how they present their code in examples. 
First, do this: https://symfony.com/doc/current/create_framework/index.html Then, go Laracasts. 
read this post, and larry's blog. then look up gorean subculture.
Yes, but it is still a poor choice for working with desktop applications, which is the point.
Sources, always sources!
The problem you mention is illusory. It's merely saying "the learning curve isn't big enough", but worded differently, and it doesn't make sense. You're not going to argue that driving a car has to be harder so only the skilled ones can do it either. Easier tools do open the door for less skilled developers, but is that really an issue? It in turn leads to more people coding and eventually becoming good at it.
laravel warp for phpunit is great 
i looked a bit videos on youtube i saw wordpress coding its like the php is including the CSS/Html5shiv/Js thats it and other things done with mouse clicks how is that a framework ?
MySQL has "features" like [this](https://bugs.mysql.com/bug.php?id=11472) too. &gt; We should fix in 5.1, at the latest.
Awe I'm firmly entrenched in the minority using Netbeans and CakePHP.
Over what period? Symfony has been around much longer than Laravel. 
This is a rude and dumb thing to say.
Ahh yes I forgot about that.
A quick FYI, Magento 1 and Magento 2 are completely different beasts.
Depending on the application, I would consider using [jwt](https://jwt.io). You don't need to store them since you can put data inside them (e.g. user id)
I feel like a cms that has a gui for adding composer packages might be able to tackle this issue (then use some hooks for the package to be tied in). Maybe one day I'll be motivated and work on it 🤔
For design patterns, this book helped me a lot when I was fresh. https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124 Don't be fooled by the cover or the content, it is quirky on purpose to help make you remember it. 
[removed]
 i think laracast is good choice https://laracasts.com/
Do you choose your tools based on if it sound edible?
I guess so lol.
Chances that this gets negative attention from Facebook/Instagram?
No not comparing, merely stating that I regularly use all these platforms. But its precisely because Laravel offers 100x the experience that if I was asked which platform I regularly use I might say Laravel and disregard the rest, which would mean an invalid poll result potentially.
JWT are very easy to screw up and they bloat up the size of the request. Nothing beats the simplicity of a crypto-random string stored in a database (or otherwise stored on the server).
Well, was it?
Perhaps platform is a better word. I wouldn't class Magneto as a framework either, rather built upon the Zend framework.
&gt; Should there only be one token per user? Like, do you just add a auth_token column to the users table in the database? Or is it a many-to-one kind of thing, requiring a whole separate tokens table? There shouldn't be one token per user, there should be one token per (successful) authentication request. The same user may authenticate at a different level from different devices, and you might want to revoke/expire different tokens for the same user based on different criteria. It's best to have a `tokens` table. If you have one token per user, it'll still work, but you'll hit purely practical limitations, so it's best to stay flexible. You can still index the tokens by non-unique user column etc. if you need to have an overview of what a given user is doing. &gt; And do I need to do anything to secure these tokens? If the database got leaked then the attacker would have access to every account, no? So I'm guessing I need to mitigate this somehow? If the database of tokens gets leaked, you can just delete all the tokens. Unlike passwords, tokens are unique across services (as passwords should be, but we know people) and disposable. It would make the user have to sign-in again, which is a minor inconvenience. I personally don't hash/encrypt tokens, but if your application is sensitive, you may consider otherwise. &gt; And should tokens last indefinitely? Nothing should ever last indefinitely, but depending on your app, the expiration may be somewhere between "3 minutes of no new request being made with that token" and "1 year". Act according to the security needs of your app. Say, bank account apps expire their tokens very aggressively, others... not at all.
http://www.phptherightway.com is a great resource 
About a year ago, a poster in [this thread](https://www.reddit.com/r/PHP/comments/45y55s/is_there_still_future_with_smarty/) ("Is there still a future with Smarty?") suggested that &gt; Smarty is faster than Twig. This is well documented Well, no. It may have been in 2011, and it may have been with PHP 5.3. But good news: performance is no longer a good reason to choose Smarty as your templating language. (And if other benchmarks are anything to go by, it hasn't been faster since about 2012, or around the time PHP 5.4 was coming into use.) This is "good news" (and this is where my opinion comes into it) because I don't think you should be using a templating library that doesn't care enough about XSS vulnerabilities to enable output escaping by default. (This is what earns Smarty a big asterisk in "PHP: The Right Way".)
I appreciate the work that must have gone into this. Whose job was it to compile and double-check this: https://github.com/daveearley/Email-Validation-Tool/blob/master/src/data/email-providers.php
Will this allow me to pull in a list of photos with a certain tag? I know IG closed off that portion of their API a while back.
When people read benchmarks, they expect to see the code that was used in all cases.
LOL. digging yourself into a hole much?
Just download the PDF docs, bring them to the crapper, do whatever you want, but that's what you want to read through.
That's not what I'm saying. Using your own example, I'm saying Laravel is like someone teaching you to drive one specific car that comes with some ridiculous tools so you can drive with with just one hand, and then letting you figure the rest out. How many people would become excellent drivers of all the other types of car if that were the case? And of course it's an issue, "ease of use" has been an issue for as long as PHP has been around and there wouldn't be such a glut of shitty PHP devs if it wasn't. Now on top of this, there are frameworks (not just Laravel), that help you be shitty! Where is the impetus to learn proper coding principles if you're using a framework that actively encourages the opposite whilst making you believe that the opposite is right?
Besides case sensitivity, postgres is the SQL RDBMD with the least amount of "wtf moments". That's why it is superior (besides the much higher stability, both for its API and its data consistency). Speed is totally irrelevant.
Not seen that before, thanks for the tip
Just be careful not to start slapping patterns everywhere just because it feels good. More patterns doesn't automatically result in better code. You should be aware of what EXACTLY each pattern brings, what it takes away (yes, there are drawbacks) and where to use it.
I mean thats nice but that's not gonna convince anyone who used mysql for the past 5 years or something like that 
You know you're writing good code if the amount of times you ask "who the fuck wrote this shit?" is fewer than it was previously.
Well done, this is epic! :)
I have not used smarty anywhere near as much as twig, but so far I've been really happy with Twig and felt little incentive to let the eyes wander. Given how much you belabor the point about auto-escaping; with that turned off, what do the results look like?
IIRC smarty 3 was never faster than twig. It was smarty 2 that was supposed to be faster (Which doesn't even have the option for autoescaping and leaves the playing field immediately)
I remember when I worked for a previous employer, we found out the hard way that one of our sites was being hit with a SQL injection attack (fortunately it was automated and they didn't actually do any harm apart from increasing the load on the servers). On a hunch I decided to check if the frontend was vulnerable to any attacks, and you can guess which template engine my former coworker used. I had to go through the entire site and escape everything because said former coworker didn't bother to.
Much faster? It's only 2x difference. Both results are in the order of 0.1ms. Even with super big and complex templates, let's do 100x, we’re still only in the order of 10ms. For the big websites that are spending more than 10ms in their template engines, they most probably have much bigger problems (like DB-scaling) and should invest much more in caching blocks of rendered snippets (or full page) than trying to optimize their template engine. A good template engine would provide powerful and flexible caching layers, vastly outclassing its initial rendering speed. As always, don't optimize prematurely. As a side note, check out Varnish ESI using Smarty or Twig, it can achieve tremendous speeds.
Totally agreed. Instead of "performance is no longer a reason to pick Smarty", pretend I said "performance is a bad reason to pick *any* templating engine, but especially one that is no longer the best for other reasons (auto-escaping out of the box, issues list on GitHub, velocity of development, eyes on security issues, etc.)". But I'm really just stooping to the level of the arguments I found for it; if someone is convinced they need the fastest templating engine, sometimes it's enough to show them that theirs really isn't anyway. 
👍
I belabor that point because I think it's crucial, not because I know it makes any difference to the benchmark. I just didn't care enough to check: 99% of codebases should run with autoescaping on. But on a whim, and because you asked: the results are the same, with twig still twice as fast. (5 sec vs 11 sec, same specs as results in README)
Part of what drove me to prove my suspicion was not being able to leave a correction in the comments on http://umumble.com/blogs/php/Smarty-vs-Twig%3A-performance/ (500 error on registration/oauth) - that comes up really high in Google results for me, doesn't show its working, and is dangerously out-of-date. But it claims to be comparing with Smarty3. :(
I am working with Smarty2 and it's a PitA of Doom. After someone was suggesting to upgrade to 3, I was actually scared. I don't know if it improved, but what I know is that I either want to switch to Twig, Jade PHP or Blade, but not to S3 :/
It's possible but the request isn't implemented in the library yet. Open a issue I'll implement it :) /api/v1/tags/&lt;INSERT_TAG&gt;/related/?related_types=["location","hashtag"]&amp;visited=[{"id":"&lt;INSERT_TAG&gt;","type":"hashtag"}]
Interesting, even more of a relative advantage. (Gee I suppose if I weren't lazy I could have cloned it and run it myself...)
Wow. So now this guy got outed on his PERSONAL lifestyle. If true, that sucks.
Good, been waiting far too long for some PSRs
Not at all. I keep answering in good faith, and you give snarky replies that don't say anything at all. You are now clearly wasting my time, so - with regret - you're now on my blocklist. 
I used MySQL extensively for a dozen years before my first encounter with postgres - it is just that much better.
Check out all this high-octane bureaucracy action: &gt; ... we need to elect a secretary ... Samantha is moving to the Core Committee ... getting this election underway to bring us back up to a strong number of three secretaries ... a secretary election next month for these two positions ... post a formal email this week with regards to a timetable ... start seeking out people who might be interested in being nominated ... kickstart some with forming working groups ... entrance votes ... Formal Summit: There was talk of a formal summit in the Autumn of this year and I regret to say this is unlikely to happen ... once we have a full complement of secretaries, a suitable amount of time to plan and submit those proposals to member projects and the Core Committee, likely next year ... organise some more informal FIG get-togethers at conferences later this year ... setting up informal sub-groups of people to ease collaboration ... The PHP community can't wait for all those secretary elections, working groups, long-term planning, timetables, entrance procedures and Core Committee formal and informal gatherings to happen! 
Which is a stupid measurement, because even now Symfony promotes the usage of components over the full stack framework. Only depend on what you need, see flex. You'll never be able to compare Symfony and Laravel that way. Symfony's counter is correct, that's how wisely used it is, framework components.
Keep waiting. They'll maybe get to it in 3-4 years.
I've found this website to be quite a useful material: https://sourcemaking.com/design_patterns
I just imagined Dmitry Stogov starting all this shit instead of just doing actual tests and writing a code that finally led to PHPNG. We wouldn't have seen PHP7 even by now.
Here [the Test and Code Coverage Analysis page](http://gcov.php.net/) for PHP.
I bet the actual number is a lot higher.
Okay, and?
catch hasn't gone anywhere. So I assume it would still be the case. Its still very much a keyword.
Facebook isn't a company to attack developers who expose an undocumented API unless it posses a secure risk. As much as I hate Facebook (the platform) I love there developer ecosystem.
was going to post, but externals and the RFC already got posted :(
&gt; http://php.net/manual/en/appendices.php Thats a change log. Not internal development, discussions and proposals.
Yes, I said "if you don't have all the time in the world, and you want just the good stuff, all you need is the migration guides". But if you have all the time in the world, and you want to follow counter-productive mailing list drama and failing RFCs that go nowhere, then it's not a good source.
PLEASE mods, can we have a big banner every time you make a thread saying "phptherightway.com is probably what you're looking for"?
Besides other touted benefits, Postgres is just a lot more powerful than MySQL. It has a much richer set of data types available, for example.
How is this about premature optimization? Wether you want to or not, you need to pick a templating engine before you start writing templates, and better do so well informed (though ofcourse speed should not be the only factor). Also, almost 100% speed difference does qualify as much to me, and you don't need a big website for templating to take more than 10ms for an uncached response.
You're correct, if you execute code with a function named `catch()` you should get an `unexpected T_CATCH` syntax error in any version starting at 5.0.
&gt; confusing. &gt; Can someone explain what most common frameworks do and what I should be doing in the future? &gt; Thanks! Agreed, although if /u/drtweety initially struggles with the Symfony build-a-framework tutorial, I'd recommend flipping the order and learning Laravel first to get a better understanding of what a framework is and the terms that are commonly used when discussing them. At it's most basic a framework is simply a collection of utilities that solve common problems (e.g. parsing a URL and directing the request towards the appropriate code or storing and retrieving data from a database and mapping it to PHP objects) and usually provide some framework for you to build an application on top of. Laracasts have a free video series that takes you through creating a basic application with Laravel from first principles. I'd highly recommend it, even if you're not usually a fan of video tutorials, I've worked with a lot of junior people who have gained a huge amount from following Laracasts in combination with trying things out.
Hello again, You vey commonly reply to my comments. So I would like to show you recognition.
Just have a TOS stating you'll probably be burned if you play with fire. :)
In your opinion, what would work?
Surprising that 41% of developers don't use a debugger at all, I couldn't live without Xdebug.
This doesn't seem like a valid comparison, the FIG has never been about writing code or doing tests
Depends on what you thing the FIG should be doing. But it's hard to see what problem *this* is a solution for, unless your goal is to generate paperwork with no other outcome.
Hah, hello. :)
Funnily enough that bureaucracy (I'm talking about FIG v3) allows for a much saner work on PSRs. PSR-15 is advancing well through direct communications between the parties involved, which couldn't have been possible before because it was kind of "free for all" and it ended up slowing everything down. So it might look like a lot of nothing, but it's actually really helpful for those who actually want to get shit done.
- Flat group of members. Other responsibilities rotated randomly on a monthly basis. - Over half votes get you in or out. - Have a site form where people submit emerging / de-facto standards for consideration.^* - Members can propose PSRs based on the interop needs of two or more members (i.e. two or more projects need an interop interface). - Every weekend members review what people submit via the form, and check how things are going with existing PSR drafts. No need for formal: - Secretaries. - Working groups. - Sub-groups. - Discussion groups. - "Core Committee". - Any other committees. - Formal summits. - Formal "emails" with "timetables" about anything. What we see here is not a group of people eager to get PSRs done. We're witnessing a minority of people focused entirely on building little over-engineered castles of power where nothing useful will be accomplished. This is bullshit. ---------- ^\* De-facto standards like PSR-0, PSR-1, PSR-2, PSR-4, PSR-11, all of which existed in the wild before FIG "blessed" them, and those are arguably FIG's best work, because they just put a stamp on what's out there, and proven to be useful, rather than dropping over-complicated solutions on our heads like PSR-7, which is unlike anything anybody was having out in the wild.
&gt; Funnily enough that bureaucracy (I'm talking about FIG v3) allows for a much saner work on PSRs. Which is why we're sitting here and reading an email that says "sorry we didn't do anything for over a year". Why is any **individual's** inability to contribute tripping up the whole group for a year, if it's so much saner? Do Amanda and Michael **own** FIG? If yes, why does it purport to be a public, open organization? If not, what gives?
Yeah, that's the point exactly. The FIG was always about the self-organizing and governing its own existence only. You didn't get the analogy. ANY entity is supposed to share its resources between organizational issues and doing the actual job it is intended for. It could have been not Dmitry and a code, but Von Braun and a man on the Moon or Henry Ford and Model-T or anything. There is always a choice, whether you are actually doing your shit, or just planning and orgranizing your existence. PHP-FIG is supposed to produce PSRs. We haven't seen one in years. All we hear from PHP-FIG is news about expelling a member, electing a member, moving a member from one committee to another, organizing a meeting. All this stuff should be internal. Nobody interested in that. They are supposed to post RFCs, not lengthy reports about their internal bureucracy. 
Hmm by a quick review of the code, that lacks any unit tests, I think this code looks like php around 2001 and doesn't have a good architecture nor does it follow any best practice or design patterns. Just have a look at https://github.com/FastyPHP/fasty/blob/aec3ba7e8bec17b7c2167fee8a0619a91cebf84c/core/Classes/core.class.php and see what I mean. Why is there password hashing (using md5), validation and some other random stuff in this class? Separation of concerns? That "Link" object looks like a not so well done DI container object. Guess that was the intend at least. Why are there "core" classes inside the app? With is the app coupled with the "core"? Whats the difference between functions.php and helpers.php? Both contain a random set of functions. I can't see any logic in this. The comparison with other frameworks won't hold up either. This code does almost nothing compared to what other frameworks do. It's the best a random collection of some wrapper functions randomly distributed in classes and methods. Good luck with the project any way, guess you'll learn a lot based on the feedback you get. :) But I personally wouldn't recommend anyone to use this code for serious work.
Because the transition was painful and a lot of time was spent on PSR-11 (several members involved in PSR-15 were also involved on PSR-11, which explains the slow down). Also some members left before FIG v3 because of the chaos. And also life happens. For me PSR-11 was very exhausting and I guess I was not alone feeling that. I don't think it will be magical and all, but I see a good improvement and I'm happy with that. We'll see. Also I understand this specific email doesn't bring anything of value to you. I just want to make clear that under the facade of bureaucracy there are interesting things. Edit (since you edited your comment): I don't believe the FIG slowed down because Micheal or Amanda wasn't available (see the reasons I listed above).
&gt; This doesn't seem like a valid comparison, the FIG has never been about writing code or doing tests Which is actually pretty bad, because if you could lock down specifications by saying *MUST do this and that* in a PHPDoc, people wouldn't write unit tests. FIG should be providing reference implementations of their interfaces and tests for them. Not only to remove ambiguities, but also because there's a moral hazard in writing interfaces you don't have to them implement. A lot of bad interfaces are and will be written this way.
&gt; We haven't seen one in years Hem, PSR-11? &gt; All we hear from PHP-FIG is news about expelling a member, electing a member, moving a member from one committee to another, organizing a meeting. All this stuff should be internal. Nobody interested in that. They are supposed to post RFCs, not lengthy reports about their internal bureucracy. Because that's the only thing that gets posted here, but there are many interesting discussions and things happening (see PSR-11 for example).
And Blade? 
&gt; Because the transition was painful and a lot of time was spent on PSR-11 (several members involved in PSR-15 were also involved on PSR-11, which explains the slow down). Also some members left before FIG v3 because of the chaos. And also life happens. For me PSR-11 was very exhausting and I guess I was not alone feeling that. PSR-11 is a dumb read-only keyval store with two methods, `has($id)` and `get($id)`. Not to put down your work or anything (thanks for your contributions), but if a PSR so simple should be described as taking "a lot of time", and being "very exhausting", then that's not something to put forward as an example of a well-working system. Was creating the original "Container Interop" exhausting and slow for you? No? Well, it worked just as fine as PSR-11. What does that tell you? In a well-working system, PSR-11 should've taken a week or two, just enough for everyone to give you a hug and thank you for your work on creating Container Interop, and change the namespace to `Psr`.
Exactly, that's why the old crippled organization was replaced with FIG 3.0 which is very close to what container-interop was: FIG 3 is small groups of relevant people involved on a PSR, without the noise of the rest of the world. PSR-11 was in the old FIG workflow, which is why it was painful and exhausting.
Yeah, I can just tell from that email that everything in FIG 3.0 will be light and fast... We'll see...
OP here. When I first submitted Composercat here I got a suggestion to support package comments. It seemed like a good idea so here you go. :)
&gt; Hem, PSR-11? I really wonder if your container interop interface would've been less popular if it stayed standalone. It was already picked up by a number of libraries. You could've done nothing, saved yourself a lot of time and trouble, and ended with the same results.
This book helped me understand so many things with just some basic php knowledge I had. I'd recommend it to anyone!
To me it's just a bunch of elitist chest beating. Obviously there is a market for low skilled developers, you can't blame a framework for the ineptitude of its users. Nor can you blame a framework for not teaching you PHP, or doing something "the right way". What matters is readable working code that is easy to understand, and that's what popular frameworks usually have in common, not their ability to teach you the underlying language.
Happy reddit birthday. How old are you?
There are downsides to all possible solutions. Wouldnt throw away jwt because of request sizes. If it works for the use-case , consider using it.
This was the starting point for me https://github.com/domnikl/DesignPatternsPHP .. Highly recommended (and I still go through it every once in a while
I guess PHP files to Phars.
JWT is intended for transfer of auth information between parties which are trusted, but which can't communicate for logistic or performance reasons. Most JWT libraries are full of little traps, and it's easy to leave your users open to hacking. Or you can just use base64_encode(random_bytes(16)), and store it in a dumb table. So my advice is don't use JWT unless it's the last option that does what you want.
Thanks
&gt; Which editors or IDEs do you use the most? &gt; PHPStorm - 70% &gt; Sublime Text - 44% More than 100% is possible?
Why do you have such a chip on your shoulder about FIG?
Yes, people can use multiple editors.
I love Blade personally but have you ever tried using it outside of Laravel? It's horrible and hacky, I certainly wouldn't recommend using it outside of Laravel over something truly stand alone like Twig
What does the frontend have to do with sql injections?
&gt; in fact it's practically encouraged in the docs Which part of the docs are you referring to? Have you submitted a PR to fix the poor coding practices? They accepted them on the docs.
&gt; the minority using Netbeans This is a JetBrains sponsored survey, I'm surprised the use of other IDE's is so high considering the target audience this survey was promoted to (JetBrains customers) 
Usually nothing, which is why I checked the frontend for XSS vulnerabilities, rather than SQL injection vulnerabilities.
&gt; That high number is sad I can't believe that number of people are still using it after the dodgy license changes from Oracle. I'm not here to say database x is better than MySQL like most of the comments below but certainly here to say why the hell are these people not using MariaDB instead of MySQL
I'll be interested to see how quickly VSCode rises through the ranks for most used editor. 
I use PHPStorm and VSCode all the time, in this survey I would check both boxes.
I really like what slim offers: https://www.slimframework.com/docs/objects/router.html#using-an-invokable-class You don't really need any controller, if you have some code that can be reused in another action then you can create base action class or create some service and inject it to __constructor.
I'll give you one thing, you're right about the core class.. It's a real mess But that's about it You say it looks like 2001 code, but did php even have classes and namespaces back then ? Frameworks these days claim to be simple but are overly complicated where they shouldn't be Fasty does a good job at what it's aimed and that's to be simple and fast and not to limit the developers in any way Also thanks and cheers !
I like some of the things FIG has done in the past, particularly by people who have since left. But I can't help myself, all of this self-important bureaucratic talk reads like a parody of itself. And there's almost no substance in it, with regards to getting PSRs done.
what is the license? is it open source?
Anyone else notice the languages where JetBrains don't have a product or their product is hardly used they don't publish the "which IDE do you use" question. They only show the data where it's either favourable for them for the market is already dominated. Go Figure. 
I don't get it, Pug/Jade is so, but so much nicer to work with. I wonder if it's more or less performant than Smarty, Twig or EJS. Still I would love to see it used more widely. I believe 90% of the people who switch (and use it for a while) won't even find acceptable to use other template engines (which differ from that syntax).
For this reason I use Twig even in Laravel, unless it's a super simple build it and forget it type project. This way there is at least one consistent thing across my maintained projects. 
No, it's not open source (yet), but I've thought about it - I'll need to clean the code up a little first though or I wouldn't feel comfortable presenting it to the world (it's my first React project after all).
[/r/PHPhelp/](https://reddit.com/r/PHPhelp/)
Visit /r/PHPhelp/ this is more a news sub. You will also get better responses by posting your code. My initial thoughts are a) don't be storing images in the DB b) you've not set the enctype type on your form to multipart
No , I know that . What I need is after i crop it the image data changes from the one in input .So I put cropped image onto div and want to get the image put in div .
I'd say just release it. Choose a license first, so people can contribute. And then learn and grow with the help of others. Your code will never be "ready" for it to be open sourced, you'll always think that it's not there yet. But if you just put it out there with a short readme it's fine. People will contribute, if they feel it's a good product to help out with. If you don't want it to be open, then don't open it, that's also fine for most of the people, but there will be less trust in the application then.
It'll be interesting to see if they continue to have any influence after how thoroughly they poisoned the well with political in-fighting. I don't really take FIG seriously any more. They've done some good work, but as others have pointed out, they seem more interested in their own hierarchy and membership than contributing anything to the community.
We use mysql for everything, but there was one project I had to do spatial stuff with, and mysql wasn't cutting it, so I used PostreSQL for that project. Wow, is it so much better. Can't say so much about performance, as I didn't do any benchmarking, but the amount of features it has leaves a lot to be desired from mysql. I chatted with my coworker and he would like to switch to, but we are so ingrained with mysql it wouldn't be worth the effort of switching.
Bummer.
The FIG is such a joke. Please, please, please disband.
&gt; How is this about premature optimization? Because the "optimization" (of choosing Twig over Smarty) is negligible.
Container-interop had quite some leverage, it is true... but we have had Symfony AND Laravel support since it was turned into a PSR! (and this would probably not have happened with container-interop alone).
Looks very interesting, what are the benefits over the popular MoneyPHP library? (https://github.com/moneyphp/money)
What about volt and blade? this is very 2d.
I second every word in this comment. Came to suggest almost exactly the same :)
I like being able to use composer in a graphical manner, but I wish that I could also search available packages in composer cat.
Hi, this library hasn't all the features that MoneyPHP currently provides, but there are other goodies that are worth to be considered. For example, it's testing coverage is higher than what MoneyPHP is offering, and it's easier to share "global" settings through factory instances, in addition a better composition scheme that makes far much easier to test code that depends on this library. I think that the two main features that are not covered by this new library are "currency exchanges" and direct mathematical operations.
Give [this](https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid) a read.
You can use Doctrine in Laravel. Google for: "laravel doctrine". There are lots of results. IN my opinion, you should try Laravel(better documentation, lots of tutorials, friendlyer community) with Doctrine (since you came from Hibernate). And you can use Angular, React or VueJS for the frontend. If you know jQuery, it will be easy to integrate Vue. Good Luck! I'm probably going to be downvoted, but my vote is still for Laravel :) 
The op has little experience, I gather in php in general and the ecosystem in particular, hence why he's asking for an all encompassing solution that will get him or her up and running quickly. Switching orm in a framework that's wired around a different one isn't trivial. 
&gt; Jade Just checked this template engine out. From a distant pov (haven't worked with it) I would guess that it's slower than Twig/Smarty. Simply because it has to parse way more syntax and it seems like it's completely replacing HTML while Twig adds functionality to HTML. As I said, this is just an educated guess from looking at their syntax docs.
As someone who sits on the WG for PSR-15/17 I find &gt; political in-fighting very frustrating.
Uh , the solution was to use hidden inputs and put the binary data as a value. As my server has limited web space capacity I do it this way for now .
this is a bad idea :P you should not be mixing your HTML in PHP. \#1 there is no auto-escaping \#2 A new person is going to see this and not know they should be auto-escaping \#3 A tired senior is going to miss this on a peer review for #2 \#4 then there's a giant XSS attack on something
&gt; frameworks these days claim to be simple but are overly complicated Have you looked at Silex or Slim ? not all frameworks are big monoliths.
PHP 7.0 allows keywords as method names. https://3v4l.org/fmt7S
I have had the complete opposite experience - I evaluated Twig a couple of months ago as a replacement to Smarty 3 and found it to be 2-5x slower for our typical template loads. (I did a variety of tests, with and without caches/recompilation and with autoescape turned on - Twig was _always_ slower). I agree that performance shouldn't be the only metric you should be evaluating when picking a templating engine though. 
I'm not sure I understand exactly what you mean. Composercat does have a built-in search functionality (powered by Packagist).
Sure, makes total sense and I agree. Still, considering the pros and cons (at least for small-medium scale projects) I would pick it any day. (My background comes from Twig btw).
I've used this function before function distance($lat1, $lon1, $lat2, $lon2, $unit) { $theta = $lon1 - $lon2; $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) + cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta)); $dist = acos($dist); $dist = rad2deg($dist); $miles = $dist * 60 * 1.1515; $unit = strtoupper($unit); if ($unit == "K") { return ($miles * 1.609344); } else if ($unit == "N") { return ($miles * 0.8684); } else { return $miles; } }
Can you expand on that? I don't see how that's a constructive criticism without substantive detail. 
If you're talking about a non-trivial number of people, you almost certainly want to push this task out to the database so it can take advantage of indices. If you're using Postgres, I can offer specific pointers (not so much for other DBs). Ultimately the query ends up being as simple as `select * from users where location &lt;@&gt; point($long, $lat) &lt; $distance;`
&gt; Container-interop had quite some leverage, it is true... but we have had Symfony AND Laravel support since it was turned into a PSR! (and this would probably not have happened with container-interop alone). Wow, Symfony *AND* Laravel? That's a great achievement! To put this in context, here's a Container-Interop adapter for Pimple, that I wrote in under 2 minutes without looking at anything: class Whatever implements ContainerInterface { protected $pimple; function __construct($pimple) { $this-&gt;pimple = $pimple; } function has($id) { return isset($this-&gt;pimple[$id]) } function get($id) { try { return $this-&gt;pimple[$id]; } catch (UnknownIdentifierException $e) { throw NotFoundException(); } } } You can write one like this for Symfony and Laravel as well. So wow, **after a year** of hard work, sweat and pain, now we saved like... **4 minutes** in writing ourselves container adapters for those two frameworks! One step for man. Giant leap for bureaucracy.
I have a fairly efficient approach to do this in a query, however it only really works in small radii so please don't use it if the circle is large (it's fine for a small city, for example) * 0 - work out how many meters 1 degree of lat and 1 degree of lon is, in your area * 1 - figure out the square that fits inside the circle (hint - the distance from its centre to corner is your radius R) - people in this square are definitely in the set * 2 - figure out the square that sits outside the circle (hint - the distance from its centre to a face is radius R) - people in this square are definitely outside the set * 3 - for everyone between the squares you'll need to do some pythagoras to figure out if they're in our out of the set It'll be something like: SELECT * FROM ppl WHERE (ppl.lat &gt; 6 AND ppl.lat &lt; 8 AND ppl.lon &gt; 6 AND ppl.lon &lt; 8) # in the inner bounding box (1) OR (ppl.lat &gt; 5 AND ppl.lat &lt; 9 AND ppl.lon &gt; 5 AND ppl.lon &lt; 9) # OR in the outer bounding box (2) AND SQRT(pow(ppl.lat - 7, 2) + pow(ppl.lon - 7,2)) # AND within the radius (3) Note the last line because you're precomputing the radius it'll be cheaper to square it first but I used SQRT for clarity
Just use Postgres already :P
&gt; Imagine that: a company only making WordPress plugins and WordPress websites. this is incredibly snobby
Everyone here is giving you code solutions and implementations which is great, but what you are looking for in the general sense is the [haversine formula](https://rosettacode.org/wiki/Haversine_formula). The haversine formula is the de facto way of calculating the distance between two points on a sphere. If you have the coordinates of the two users, you can use the formula to calculate their distance from each other.
Let's don't ruin a benchmark just because you had real world experiences ;P
&gt; The haversine formula is the de facto way of calculating the distance between two points **on a sphere** 
Base64 is not url safe. Unless you are sure the identifier will never be used in an URL I would use base62 instead. Yes I know you can do a `strtr($base64, "+/", "-_")` to get url safe version. I just happen to dislike `-_` characters in an url.
Cheers! The free email were compiled by [@tbrianjones](https://gist.github.com/tbrianjones/5992856). That was the one place I forgot to add a credit, it's been added now. The list is a combination of various other lists so I'm not entirely sure how accurate it is, however, from doing some random checks it seems OK.
Good point, updated.
I completely agree. This book is so wonderful and has helped me a lot in the past year to better understand things that seemed complex at first. Apart from that: http://bestpractices.thecodingmachine.com/ does have some good stuff :)
[looks like I didn't try hard enough](http://i.imgur.com/tt4QRcQ.png)
After powering through the Learn PHP project on codecademy where do I move next to develop my skills. I have a general understanding of programming concepts as I have experience with Python and HTML/CSS. What resources do you recommend for intermediate programming? 
You should not store a static token and use it everywhere. It can be more vulnerable as a regular CSRF attack. Ideally, the tokens should be created from a CSPRNG, and delete when used. See `random_bytes()`. I'm working on a storage-less token generator (https://github.com/Ayesh/StatelessCSRF), that you provide a secret key, and add whatever data plus an expiration you need to validate. Library can generate a token, and validate that the data has not been tampered with. it does not prevent them from being decoded. [example](https://github.com/Ayesh/StatelessCSRF/blob/1a24854c7b4da11bcbad3de459e618468017b31f/tests/StatelessCSRFTest.php#L48-L63). 
Nice project. I can see the it is valuable especially for Windows people. Electron based? Tubli töö :)
Thank you. I know can google it properly.
I am at SQL but i will think about it.
Thanks, ill try it out!
Thanks, ill check this out :) I wonder, why it only works on smaller radiuses?
You're comparing the wrong numbers, to look at "usage" you'd want to be looking at the number of installs for the packages used to a create a new project via composer: * [laravel/laravel](https://packagist.org/packages/laravel/laravel): 5,402,638 installs * [symfony/framework-standard-edition](https://packagist.org/packages/symfony/framework-standard-edition): 1,261,924 installs
I have zero experience with it and only used sql so far. Is it a lot different? I am thinking about using it because this calculation is the base of the whole app - finding people near with similar attributes - and it should be solid and fast approach. 
You could use redis for storing your users' locations. The GEORADIUS command will give you an array of keys. 
At larger radii, the database has to do more math with more numbers. Also, at larger radii, the lines of longitude are less like a square. 
&gt; redis Interesting idea. Thanks, ill think about it. 
Jetbrains seems to recommend [this one for Symfony Standards](https://github.com/djoos/Symfony-coding-standard), but I doubt it's really complete. That being said, I'm planning on seeing if I can't combine different libraries and maybe make a few of my own to replicate the list of rules that [php-cs-fixer](https://github.com/FriendsOfPHP/PHP-CS-Fixer) has, and maybe make a tool for converting from their config to a php-cs ruleset
As I type, all the answers are talking about finding the distance between two people. Ok, use [haversine formula](http://www.movable-type.co.uk/scripts/latlong.html). Finding the distance is only part of the problem though. You are actually looking to find the closest X people from a list of Y people. The more people you need to look through the more a `foreach person do haversine formula` is gonna suck. Check out: https://www.scribd.com/presentation/2569355/Geo-Distance-Search-with-MySQL
\*cough\* *all* the answers?
MySql has this now too: https://www.percona.com/blog/2016/02/03/new-gis-features-in-mysql-5-7/
I reloaded the page, squinted, and will admit to being wrong. Postgresql built-in functions approach is good. :)
[This is the resource I use](https://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula). 
Right after the meeting and vote to investigate the pertinence and value of having meetings and votes...
There's no reason to avoid MySQL if you use the right tools. Of course, doing IO will always be slower than not doing any IO though. 
It's a tradeoff between rewriting code to work with async or increased operational complexity. 
&gt; Base64 is not url safe. Unless you are sure the identifier will never be used in an URL I would use base62 instead. That's a very strange concern... Tokens aren't to be sent via URLs. And if they are, then it's the concern of those who want to put arbitrary content in their URL, and not your concern to be second-guessing everyone if they may put this or that in a URL. &gt; Yes I know you can do a strtr($base64, "+/", "-\_") to get url safe version. I just happen to dislike -\_ characters in an url. Uhuh...
Magento 2 is purgatory to Magento 1's hell. It's decidedly okay. Ish. There are still some big issues with it and the architecture is better but still not amazing.
I have added initial support for the hashtag endpoint. I will finish it up tomorrow and create a new release.
http://edorian.github.io/php-coding-standard-generator/
Thank you! Yes, it's an Elecron app.
&gt; That's a very strange concern... Tokens aren't to be sent via URLs. I am pretty sure you have heard of [OAuth2 Implicit Grant](https://tools.ietf.org/html/rfc6749#section-4.2)...
Don't be afraid of some github stars.
Write one.
1. No one in this thread is discussing implementing OAuth2, so that's an arbitrary requirement. 2. The token in that OAuth2 workflow is sent in the #fragment, where both `+` and `/` (and even `=`) are valid characters that don't clash with any existing fragment semantics, as fragment semantics are client-defined as per RFC (and in this case, the client is by definition OAuth2-aware). You're stirring up a storm in a teacup over nothing... P.S.: Plus, I'm not that attached to Base64, it was a quick one-liner example, which I can't do for base62.
This was in 2005 so yeah use geographical types if your DB supports it
Because the map isn't actually a square grid at larger scales
&gt; maybe make a few of my own to replicate the list of rules that php-cs-fixer has, and maybe make a tool for converting from their config to a php-cs (I'm a member of the php-cs-fixer project so disclaimer ;) ) out of curiosity why would you want to combine different libraries to replicate the list of rules that php-cs-fixer and not use the fixer as is? We like to hear where we can improve :)
You joined the WG's as a volunteer. It must not frustrate you that much 
It comes down to lack of PhpStorm support. My co worker introduced GrumPHP which uses cs-fixer to reject commits, but the issue is that I can't see what will be rejected before I commit it (Ordered elements and pre-increment are now the bane of my life). Worse still, php-cs-fixer doesn't appear to report which lines the issues occur on, and apparently there's a PR that would change that that doesn't appear to be getting merged anytime soon. The result is that occasionally I'll be thrown out of my flow every so often for something I have no way of seeing before I attempt to commit, which is rather annoying. I use PhpStorms git integration mainly because it runs extra static analysis inspections before committing, so dropping down to CLI to fix this with no line numbers is rather annoying. Now, PhpStorm *does* have built in highlighting for when something doesn't work with phpcs, so does a really nice Vim plugin I use. So if I can make these two tools work together, I can get visual warnings of issues to fix before I hit commit. And that, to me, makes all the difference. It's the difference between a subtle hint that I can do better and a brick wall right when I'm in my groove. And if I've got that visual indicator and I still get denied because I didn't fix that, that's on me
&gt; It must not frustrate you enough to rage quit FTFY One can be frustrated in something while working towards changing and improving said something. 
Yeah, result could potentially be hundreds of people. Ill check the link out.
If php-cs-fixer reported problematic lines (And preferably character range if possible), I'd attempt to build a PhpStorm plugin, if it's even possible. I know that plugins and sandboxed file wise, but I'm not sure if they can execute external commands...
Lol, the guy should have chosen politics as a profession. Nobody needs this shit here. 
Yeah this is the one thing about Laravel that's been annoying me lately. I discover a neat component, then realise I can't use it on a separate non-Laravel site. 
It's not that different from MySQL, so you won't get too lost. There's a few things done differently, but in the end it's still mostly SQL. You have two strats to learn it: either read the doc and invest some time on it, or pick bits by bits as you need it.
You could create a new [command line tool](https://www.jetbrains.com/help/phpstorm/creating-a-command-line-tool.html) and execute it directly in the ide without having to drop down to a command line.
I use xdebug extensively for profiling, but there's still great use to be had from a good splattering of die(), print_f and my personal favourite, spamming the everloving bejesus out of x-log: headers.
Is this a unique idea of yours or is this common practice in other test suites. To me this is brilliant and makes total sense.. so much so that I'd vouch for it being a default configuration! Either way, good work!
https://divinglaravel.com/ too
if you made some php projects why not try laravel or symfony framework check laracasts.com too
You can to autofix your code, not to highlight problems. I heavily prefer highlighting 
these project are not all based in symfony they use some symfony components and they created something with it which is something entirely different, zend has some components too... and framework... I think everything get deprecated once a new cool project arrive 
Can Goreans join?
Your fatal flaw to this neat idea is object oriented programming. The class file you've changed may be inherited before being tested.
Tubli oleks töö siis, kui poleks kasutatud Electroni. Ainult mingi umbkeelne php/js kooder kasutaks seda saasta.
A dissent on defaults: When joining an existing team, you should consider running the tests before making any changes as well to make sure you have a compatible environment. "Build/Release the current version" is an excellent task for a joiner on day one. 
Have you got an example of this ? if a method is run the coverage stats also should be updated, As long as xdebug (the default driver for phpunit) can understand which method is running, there should be no problem with the tracking of that test. Its easier to use the --coverage-html option and hover over a line to see if xdebug has picked up the coverage for that line
Thanks :) I heard that google run only the necessary tests, though have never found a link explaining this. I have been working with diffs for other tools (phpmd for only new code for example) when I came up with selectively running the tests based on the diff, I am not aware of it being a setting in any other testing framework to output the information needed (the only two output options from phpunit which support this are coverage-php and coverage-html)
I'm sorry it feels that way. I have a huge amount of respect for WordPress developers, like one of my colleagues. What I cannot wrap my head around is WordPress as a platform. That's what I was referring to.
thanks for this..I am finally figuring it out..so Symfony still is the most used framework on the planet but not as a whole..mainly because everyone else is using their components..so if we check the http-foundation bundle it has over 40 mil downloads..but than again everyone uses it..and that is why Symfony components all together have over 900mil downloads
But what are the alternatives? While I completely with you on the status of FIG, they still hold a somewhat "superior" position because of what they have achieved in the past. You might actually be surprised as to how little developers actually know about all those stubbles. They just know of some PSRs. Which brings me to the question: can other groups also create PSRs? Groups like from within PHPs core developer team or something. The reason I ask is because the name "PSR" is a well known en trusted concept.
Proper unit test should only test one method and mock all its dependencies, so that would not be an issue. That's in theory though :-)
&gt; To me this is brilliant and makes total sense.. so much so that I'd vouch for it being a default configuration! Better not... When you change code, the coverage information becomes invalid, and at best an approximate heuristic about what each tests touches. You can't just blindly assume that code is not interconnected, because that's not the reality of your code. If this is a default, then you add the risk for absolutely everyone using PHPUnit to be committing code that actually doesn't pass all tests into the repository, and not even know about it.
It's a neat script. What I do instead is run the one test case that tests the unit being developed and before publishing upstream, I run the full test suite (likely only on CI). CI should always be running all tests though so speeding up the tests without skipping any would be preferable.
&gt; then realise I can't use it on a separate non-Laravel site You *can* it's just it becomes really messy and you have to pull in a huge number of packages and glue them all together until you reach a point where you've basically created Laravel again. It is really annoying how tightly coupled everything is
I have used Jade once in production (for a node site) and to be honest, I really didn't like it. For me I found it harder to read than normal HTML but that might just be a training thing as my eyes look for the tags instinctively 
Do you have the data published with these results anywhere?
You do need up an up to date diff, and also to be sure that the diff is from the point of time that the cover report was taken. If these are are correct then they diff filtered version of the tests should behave the same as the full tests. If you can find a case where this is not true let me know and I will fix it :) 
&gt; "Makes managing PHP dependencies and packages seem like child's play" I thought it already was?
I'm afraid it's very trivial to break your tool. Too many assumptions are being made, like "diff is always correct" (and it's not, especially for non-trivial code changes) and "coverage is always perfect" (and it's not, a bunch of statements are not included in coverage). For example, if you use Xdebug for code coverage: - It won't include class constant access in coverage. So I can change a bunch of constants and turn the behavior of my entire codebase upside down, but none of the tests will seem to be affected. - It won't include method declaration lines in coverage. So I can change the name of a method and break every single test in my codebase, but they won't be executed, as this line doesn't show in their coverage. - It won't include class declaration lines for any test, except for the first test to need the class, which triggered the class autoload. Same issue as above. Maybe you do some "smart processing" of code coverage information to account for the above and all other exceptions I can think of, but I highly, highly doubt you can account for all the situations where code coverage is incomplete or inaccurate. Coverage is not hard data you can use as a fact about what affects what. It's just statistics. A heuristic. An approximation. So the irony is you probably need to test your testing tool more, before you just assume it always works correctly.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Swiss army knife redis indeed has basic geo. Elasticsearch might be an option too. So, depending on how your stack looks like you can look into redis, elasticsearch or postgres. :) Note that time-complexity using redis grows linear with number of matches (but so does iterating and calculating using haversine).
If you want to combine distance with other properties in your query, an rdb (so: postgres) seems like a good fit. (Provided it fits your stack and can provide the throughput you need.)
I think the biggest issue is that controllers get abused, they are on the application... well you know..... to control the flow of the application. I see it time and time again people putting all sorts of business logic into a controller. For me the controller should be super simple and lightweight simply listing the instructions on how the application should behave to a request in order to generate a response
Another suggestion. If you like reading books, read the ones under mandatory list. They should provide enough theoretical background on SOLID and design patterns. http://www.phpdevbooks.com/p/suggested-reading-order.html Another great source for OOP design learning is the clean code video series by Robert C. Martin. https://cleancoders.com/ format is interesing to say the least. But it's gold. The author actually formulated the SOLID principles.
While the list of disposable email domains is quite impressive, it will be a lost battle 
I wonder why OP hasn't just Googled what a framework does. 
Neat video.
Interesting regression!
But what is Symfony if not a set of components? The Symfony Standard Edition AKA the Symfony framework is nothing but a skeleton with all the components installed + FrameworkBundle which is only a glue between the components and what the Symfony framework really is at its core
A framework is like a house you buy. Is has rooms that you can use, or leave unused. What you do in the room, is totally up to you. Each room has specifics, some have a view, some other specifications (like water), some are on another floor. Sometimes you can build a floor on top of the house. How you use the house, is up to you. I hope you see, that a framework is nothing more than a house. Which house is the best? A simple one, just to understand how a house can be of use to you.
One way we plan on bringing the line numbers is using `sebastianbergmann/diff` (https://github.com/sebastianbergmann/diff/commit/e4b493502e9a300d94c460655e4d4fd64202e578), one reason why it takes some time as that package is owned by others than the fixer, other reason is that is/was a lot of work. After that I hope to work on more easy integration with tooling. It is always of value to know how or why-not the tool is used. So thanks for the details!
I wrote 3 or 4 of my own frameworks. Now all I use is laravel. Every other framework sucks. I was in your boat - confused and didn't want to change. Just make a simple CRUD application for your first project and go from there.
1. /r/phphelp 2. you need to be more descriptive with your questions. Hint: there is a message body input.
&gt; you have to pull in a huge number of packages and glue them all together until you reach a point where you've basically created Laravel again Yes, that was my point. That is exactly why I can't use it.
No.
I'm sorry, your website is absolutely unviewable on mobile. Having 30% of the page covered in crap that's not content is bad. Floating things that obscure content and can't be clicked away also need to go. 
could you expand on what you mean by x-log headers? i tried google and there is nothing available or at least i couldn't find what the x-log used for
You're better off posting this in /r/webdev or something, this is not what /r/PHP is for.
It's an evil but highly effective bastardisation of a way to get logging information straight to your browser when you're doing things like ajax calls by dumping huge amounts of data into the headers. ` function hell_log(string $log) { static $debug_index = 0; header(sprintf('X-Log-%05d: %s', ++$debug_index, str_replace("\n", " ", $log)); } ` That way when you inspect the requests in your browser's network debug window, you can see all the per-request information you've dumped into the headers without having to change the format of your actual output. They come up as X-Log-00001, X-Log-00002 etc so most browsers will order them properly.
thats an awesome idea, thanks for sharing 
[Here](https://www.youtube.com/watch?v=pP9jw3fgrCU) is a recent video from their YouTube channel that quickly goes through a bunch of features and their use cases.
Oh Jesus don't use `sudo rm` on a symlink, it scares me and it should scare you. If you manage to fat finger or brain fart with a symlink'd directory you could delete something beneath the target. use `unlink` instead.
Good question! Both the frameworks (React and Vue) are ideal for creating additional user elements. But neither ReactJS nor VueJS can be called the full-scale framework. Vue is one of the fastest-growing libraries currently and is not only a utilitarian but also a quick and easy tool for applications and interfaces development. In this blog, I found the most detailed information: https://erminesoft.com/reactjs-or-vuejs-which-is-best-for-your-project/
I believe there was an attempt at a new group forming that would draw more from the early days of FIG instead of the mess it is now. It didn't get much traction at the time as far as I could tell. 
Php probably isn't the right tool. You probably would be better off using a real reverse proxy. 
Is it better then phpstorm? Would you recommend I try it out?
I know, but my problem is that I'm unable to use real reverse proxy. But I've found one script that fits my purpose : https://github.com/chricke/php5rp_ng and setup is very simple : &lt;?php @include __DIR__ . '/../proxy_lib/ProxyHandler.class.php'; $proxy = new ProxyHandler('http://localhost:8080'); $proxy-&gt;execute(); $proxy-&gt;close(); Along with `.htaccess` : RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-l [NC] RewriteCond %{REQUEST_FILENAME} !-f [NC] RewriteCond %{REQUEST_FILENAME} !-d [NC] RewriteCond %{REQUEST_URI} !^/index.php RewriteRule ^(.+)$ index.php/$1 [QSA] 
For PHP? No, not by a mile. In the end VSCode is a text editor not an IDE. I highly recommend it for use with general text editing/viewing. I use it for anything that I either don't have or need an IDE for. There's a ton of plugins as well. You should absolutely give it a try if you use something like Notepad++ or SublimeText as it's completely replaced those for me.
Another suggestion: Ray.Di https://github.com/ray-di/Ray.Di
Thanks for the detailed response! Yeah I currently use Sublime as my general text editor so maybe I'll check out vscode to replace that. Thanks!
Ray.Di generates raw factory code. It is almost as fast as if there was no injector. https://github.com/ray-di/Ray.Compiler
IMO you should become familiar with object orientated programming first (if you havent already). Frameworks will be object orientated. Although they do a lot of heavy lifting for the developer, a solid grasp of OOP will make you feel more comfortable in these environments.
Sounds like you havent set up path mapping. Edit. Or as others have said youve set it to break at first line. Though if memory serves thats only default behavior the above is true. 
It's not a bug. This one threw me for a loop as well. Under Settings-&gt;Languages &amp; Frameworks-&gt;PHP-&gt;Debug, uncheck the "Force Break at first line" options.
1. Go to Preferences &gt; Languages &amp; Frameworks &gt; PHP &gt; Debug 2. Uncheck both of the 'force break at the first line...' options 3. Apply and close 4. In the Run menu, uncheck 'Break at the first line in PHP scripts' Source: https://stackoverflow.com/a/19185093/1461181
This is not designed to replace running the entire suite, This is designed to shorten the feedback loop. Instead of running with --filter a bunch of times this attempts to do that automatically. Changing the method declaration would not be picked up but if you used the new parameter or removed the old one then the lines inside the function would change which would be picked up. I could make the logic more fuzzy to try and include the cases you describe. I will work on that. I have no doubt there are bugs in this, but when I find them I will do what I can to remove them. Again this is to shorted the feedback cycle of tests not a replacement for running the suite on a CI server. What this can do as well is speed up the coverage stats which can then be used by one of the other tools to get a % code coverage for the pull request. 
Great article thank's!
I wish you luck, but as I said I have my doubts this can be fixed and made reliable. I think if the "feedback loop" is too long, this in itself is a symptom that people don't factor their projects in "units" but are doing monolithic "big ball of mud" development. A unit is relatively small, say up to 10-20 classes at most, sometimes as little as one class, and it's isolated, so it has its own unit tests. So when you edit one unit, you can only run that unit's tests, which is easier to detect, as typically a unit is in its own namespace and so are its tests. Which means you can just run test suites for units whose code has been touched in a particular commit - no code coverage required. But when the unit is *the entire project*, then... the feedback loop being long is that developer's least issue.
a2enmod and a2dismod or the usage of those symlinks are not available on all distro's afaik. For ubuntu and debian it is I think, but at gentoo it's not available for as far I know.
* **typing your variables**: __get() &amp;&amp; __set() wrapping to strictly typed methods is "good enough" * **async**: sql queries joins &amp; unions is "good enough" (although after having used async/await in JS, async in PHP is something I'd probably find useful) * **collections**: `public function foo(string ...$bar)` is "good enough" * **xhp**: I have a stupid thing I wrote for work building documents from arrays instead of building html from strings, I suppose this might be useful for others.
DreamFactory REST API platform is built on Laravel. You can see some of the companies who use it from https://www.dreamfactory.com/stories
Laravel will not be faster and with Zend you can use Apigility which pretty much handles everything around your API..Zend framework is still the best framework out there..although they made it so hard to use and user unfriendly that it really is used by big enterprises only ..but as far as frameworks go it is far superior than Laravel but on the other hand it is really robust and heavy so for a smaller site not recomended
Zend Expressive is pretty nice to write an API, try it and you might like it. Or you want to convince him to use Laravel because you know it ? 
i think it would be enough to stop using code igniter :)
It makes perfect sense to me to keep the email templates out of the domain. The act of sending an email is a domain concern, but the actual email template feels like an implementation detail.
According to your example, you're still using includes in your code: ;-D " // note: includes omitted if ($_POST['name']) { echo Hello, {$_POST['name']}; } else { ... }"; I jest. + 1, Yeah, sure, typing variables is good and all. But the lack of it is also a major reason why PHP is so accessible and widely used. So having the option of both is better I think. + 2, Yeah, kind of the same. Async calls *could* also be really useful but the majority of projects/code bases really wouldn't benefit massively from it. Also, if you start a project writing asynchronously then I'd suggest you're probably pre-optimising. If, like your example, it's just a drop in replacement, then awesome...I'll be having a look at that. + 3, Collections. I like collections but it's the same as 1 I feel. If PHP didn't have array's to begin with, noone would be using it. Array's are easier to understand for a newbie. Ahh, the good old days of PHP4 when objects were arrays. + 4, HHVM. Hmm, 7+ is closing the speed gap....with more extensions. + 5, I like the idea of XHP, but it crosses the Logic/Presentation barrier. Some people are going to hate that. I could get used to it...mostly because errors are detected at parse time. Anyway, just my 2 cents. 
&gt; It seems like people have never heard of Hack, HHVM, XHP… People still largely seem to use require() and include() statements everywhere in their code. What. The. Fudge. I see occasional blog posts/tutorials about how to get started with HHVM, a few about Hack, and barely anything about XHP (other than "look! it's like JSX for PHP!"). It seems that PHP7's performance improvements took a lot of focus off of HHVM. Who, other than Facebook, actually uses HHVM and Hack in production?
Don't blame much on code quality I build this just as a try out if possible over afternoon/evening. Thinking on supporting long term as Symfony does not intend to release something like this for public.
I'm bored of frameworks, is everything that "developers" talk today? is not even programming, cause I wasted years configuring symfony websites and I can't say I code something, I can show clients "hey" look how I configured sonata and user bundle in this project, look how good it looks gentelella template integrated in admin section, or look how gmail api was integrated with doctrine and symfony, meh, this is not coding is just configurating, we are not better than sysadmin, 
 - You can have `await` in PHP: http://amphp.org/ + https://preprocess.io/#async - `string ...$bar` doesn't work with a function accepting two collections.
God what a shit article. So basically use all the non standard tools you like to use, because you know best? Right.
The various examples need to list which version of PHP they run on. I don't have a single production environment on 7+, and I've got one as old as 5.3...
So? Find another job then. Not using frameworks just to "be able to" do all the tedious work frameworks do for you is just wasting your time and your employee's money. It's actually great that we can accomplish so much nowadays solely by "configuring" stuff.
&gt; I don't think he is an experienced programmer, not even a programmer If it's true, the real problem is here. Business guy calling the shots in technical stuff are a train wreck. They can (**and should**) tell you their reservations and give insight on their context (team already knows framework X, etc.), but they shouldn't force you in some stack if you think it's a bad/worst idea. Even more if they base their idea on outdated info or whatever stupid thing. Ask him to back his claim with some evidence, or to trust you to make the right choice (**considering their obligations, obv.**). **I actually won't work for a business guy who think he can do my job better than me**. Do it yourself then. Unless it's Kent Beck or the likes, and even so, business relations need trust. **If you don't trust my abilities why the hell are you paying me.** --- &gt; He even claimed that Laravel is just for e-commerce website, not for medium + scale projects. Not the first time I hear it, never substentially backed up. It can scale. A lot. And TBH **a lot of business guys think that their app need facebook/google style scaling. They are usually false**. 10 000 request per second isn't that hard to achieve on medium/low end servers. Caching takes you a long way. Queuing tuff too. Dev time cost a lot more than ram these days. (I know servers cost ramp up with time, don't get me on that. Maintenance too.) --- &gt; However, as for mobile app backend development, do we really need to use Zend, since Laravel will be a faster and easier choice? TBH, Zend/Symfony/Laravel/Slim/etc can do it. Do you know one well ? Do you know some package to speed you up ? Did you do something similar in the past ? How much of a taylor made solution they need (a question they can't and absolutely shoudn't answer themselves btw, only give you enough context to know if it is or will become a very specific thing, or if it is the same old style api (or pompously said by a business guy, mobile backend)) ? These are the real questions.
So you suggest to stop writing PHP like it's 2009 and instead of using PHP 7+ with type hints and all that nice stuff you just suggest... switching languages? Sure, Hack is kind of a PHP-ish language, but it's _not_ PHP. And there are many good reasons to not use Hack. For example, Hack isn't nearly as widely supported as PHP and you run into a ton of problems if you just try to deploy your PHP code onto some webspace or not-owned-by-you-server.
&gt; Who, other than Facebook, actually uses HHVM and Hack in production? Wikipedia uses HHVM - though I presume not Hack: http://hhvm.com/blog/7205/wikipedia-on-hhvm 
&gt; Zend framework is still the best framework Bold claim. As the Entreprise Big Dog, I would probably put Symfony first. &gt; but as far as frameworks go it is far superior than Laravel Bold claim without any context or precisions. And we can't deduct much from OP's message. &gt; but on the other hand it is really robust and heavy so for a smaller site not recomended So is it a good choice or not ?
If you're just configuring a framework, the correct answer is usually to use a CMS. Your boss shouldn't have to pay you to code to solve a problem that's been solved a million times before. Find a new problem.
I'm not saying that I don't want to use frameworks to create a framework again, I'm saying that there are 0 programming task, at least in my projects
I don't know what you're doing with Symfony if you don't actually program a single line of businesslogic. Perhaps you should look for a job that doesn't just ship run of the mill ecommerce sites or blogging platforms.
I get the impression that your article is mainly about you having been a FacebookEngineer(tm), because you have surely noticed PHP 7 since you came back into the real world. It must've been cool to be accepted into a secret club where you helped build your own tree fort, while others were left out in the sun. But now the other kids are since living in air conditioned houses, they won't want to join you because your fort's got good ventilation in the summer.
&gt; `string ...$bar` doesn't work with a function accepting two collections. class Foo { public function GoodEnoughButProbablyBad(array $strings, array $ints) : void { $strings = $this-&gt;checkStrings(...$strings); $ints = $this-&gt;checkInts(...$ints); } public function checkStrings(string ...$strings) : array { return $strings; } public function checkInts(integer ...$ints) : array { return $ints; } }
HHVM: Yeah, it can run PHP, just as long as you don't run into any of the incompatibilities with [PHP 7](https://github.com/facebook/hhvm/issues?q=is%3Aissue+is%3Aopen+label%3A%22php7+incompatibility%22) and [PHP 5](https://github.com/facebook/hhvm/issues?utf8=%E2%9C%93&amp;q=is%3Aissue%20is%3Aopen%20label%3A%22php5%20incompatibility%22%20)
That's kinda sad. My recommendation stands: You should try to find a new job.
It's annoying when technical articles aren't dated. I suspect it's because they don't want their blog to look stale when they don't write for a while. I was thinking the article was a little outdated since PHP 7 wasn't mentioned, but I did find the date is listed in the 'Recent Post' section, and it was published today.
I mean I am intrigued by zend framework, as far as PHP goes I really believe it is the best framework out there..but as far as real world projects go, using it is costly, development time is much higher than with Laravel or Symfony and developer experience is not that great..even the authors said in some article that when they were moving away from ZF1 they were targeting enterprises and sites with million+ budget so yeah if anything I would go with Symfony and API Platform..that is currently the best option out there..although you still can connect Apigility to Symfony :)
I have spent years developing sites in Symfony..and not really used any of these fancy bundles..it happens quiet often that people lose themselves in trying to not reinvent the wheel and use all the fancy bundles..I don't think it is worth the effort. I really love symfony because of its architecture, following best practices, their service locator approach, the http foundation is a great thing and lot more..and yes they offer around 3000 bundles but that doesn't mean you have to use them. I mean if you go with a complex and huge bundle you will really spend more time configuring it than maybe doing it from scratch with just the features you need
Just FYI to anyone that cares, [it's broken on mobile](http://i.imgur.com/fjiQGks.png) and looks like there's no tutorials. Switching to the desktop site works fine. 
&gt; I mean I am intrigued by zend framework, as far as PHP goes I really believe it is the best framework out there..but as far as real world projects go, using it is costly, development time is much higher than with Laravel or Symfony and developer experience is not that great.. I don't follow you, then... What is so good about it for you to love it, if it is harder/longer, costs more, and is less enjoyable ? Is it just familiarity ? (honnest question)
This RFC was voted down 12:4 against https://wiki.php.net/rfc/unary_null_coalescing_operator
&gt;He even claimed that Laravel is just for e-commerce website, not for medium + scale projects. This isn't the case at all, either from a development or performance standpoint. A well written Laravel application can quite happily serve tens to hundreds of millions of requests a day on fairly minimal hardware. Unless you're dealing with billions of requests a day, I wouldn't pay too much attention to performance differences between the major frameworks (Symfony/Laravel/Zend), especially if you're building a fairly straightforward API. From a development stand point, a disciplined developer or team can quite easily scale up to hundreds of entities/tables and many complex services without running in to issues that you wouldn't also bump into with Zend. I'm a strong believer that the developers have a **far** greater impact on how well architected a project is and how easy it is to maintain than your choice of framework will (at least when considering the big three frameworks). &gt;Laravel does not offer as much flexibility as Zend (that's the old comparison isn't it?), which is quite true Is he able to say what flexibility you'd be missing out on and whether that would really have any impact on the project being proposed? Zend may be more flexible in places, but is it more flexible in any place that actually matters to the project? Many parts of Laravel can be swapped out without much difficulty, although you are more tightly coupled into some, like the container. I agree entirely with /u/Lelectrolux here, if they're hiring you to do this job you should be advising on the appropriate tools to do the job. In the majority of cases, if you already have some experience with the framework, you are going to produce much better results than using one you're unfamiliar with, even if it's marginally better in some areas. There are really *very* few projects that get carried out in the world of web development that couldn't be well implemented on top of one of the major PHP frameworks. And if you're working on one of those projects, you'd likely already know it and you'd probably not be working on your own, these are the projects that have many billions of requests a day, or require huge amounts of data processing and an infrastructure team to keep them running.
I cant seem to be getting the ($data['openNewTab']) condition true and i think my parenthesis are off, im close to finishing this lol thanks!
Just take user input from a form and run it directly against the database. If you're using a framework look for a Raw method in the ORM
"development time is much higher" is a common phrase used when the context is "we picked X so we didn't have to spend much time exploring the business domain - the framework glues everything together for us"
1. It's not always an issue/a bad idea. Context matters in this. 2. There is still costs, difficulty and enjoyability to adress, then.
I need a [sarcasm] tag to add to all my responses
After I saw that, I couldn't help but hope that Drupal Confessions is a satire account now.
There's a cool application called web goat built for this purpose, it walks users through how these attacks work by explaining how to exploit them. If you are looking for inspiration, this might be a good resource. If you're asking how to design an application like this, in the simplest explanation I know you should directly use the query string from the request without any escaping so that queries like "&amp;username=Jim OR 1=1" aren't removed. This page gives a brief explanation of what that code might look like https://www.w3schools.com/sql/sql_injection.asp
First, from the sidebar here: &gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC Second, you have a syntax error on the first line due to the commas. It's like you're trying to assign multiples items to the `$openUrlLink` variable, which you cannot do. You likely want to use full `if` statements instead, if you need to encapsulate multiple "actions" per condition.
The drupal shop I worked for was run by assholes who were in the back smoking pot often when I went looking for a little help. And fuck outing people for their bdsm interests. We dont fire people for being gay or lesbian. We dont fire people for being disabled or from a given religion. So fuck all you selfish drupal assholes who cant give your new coworker 5 seconds because you think you are so smart. 
Holy fuck... Don't take this as discouraging, but this is the worst piece of PHP code I have ever seen. It's quite evident that you lack fundamental PHP knowledge, since you have syntax errors in your first line (In the ternary operator). Read this: http://php.net/manual/en/language.expressions.php After you read that you should read the following 2 guides before writing any more PHP code. Seriously http://www.php-fig.org/psr/psr-1/ http://www.php-fig.org/psr/psr-2/ Bookmark http://www.php-fig.org, because if you plan on having a career using PHP (even a short-lived one), you should stick to industry standards. Using [alternative syntax](http://php.net/manual/en/control-structures.alternative-syntax.php) is generally frowned upon. You may choose to use it when embedding PHP straight into HTML or XML, but you should consider Template engines when you need more than a few lines of PHP embedded. Your code lacks consistency. Stick with brackets ( [ "key" =&gt; "value"] ) when dealing with arrays. Also, I think I figured out what you were trying to even do. Were you trying to use a variable as a portion of the arguments for a function call? That's not possible. You can build your arguments in an array and use [call_user_func()](http://php.net/manual/en/function.call-user-func.php). Having said that, I haven't really put too much thought into what your actual logic was. Good luck.
off the top of my head, you want to run raw queries, mysqli_query will probably be what you want instead of any kind of PDO. Personally, I would make a separate MySQL user with it's own database, that ONLY has permissions for anything on that database, just in case someone decides to get cute. I would also probably remove all drop permissions, so the people don't get any ideas. I would probably setup a few examples. A user login is pretty common/easy exploit. Throw in a ' OR 1=1 to the query, and watch you be able to login as anyone. Examples where data is presented based off a search term is also a good one. For instance, showing a user list? Constructing a query to use a union to show info that isn't supposed to be shown (such as email addresses). For example, say you can search a user list, and it has a select for profile id, and username. Searching for a username that doesn't exist, and appending UNION select id, email as username from users This is a good example of being able to display data from databases as you see fit
If it caused you to no longer be working with droop'le, then it's probably for the best...
/s would do. ---- [META Thought] :The longer I am on reddit the more I think implicit sarcasm should be bannned from written conversations between strangers. Context is almost always lost. Someone always end up missing it, and it causes so much lost time, angry responses and misunderstanding. Be my guest in friends/relatives circles thought, I, for one, couldn't live without sarcasm, rethoric battles and stupid banter.
``` 'SELECT * FROM `users` WHERE `login` = "' . $_GET['login'] . '"' ```
thx for your suggestion =) I will check it out
I read it a bit differently: Ew, did you see what Larry does in his spare time? Shit, it's not addressed in our CoC. Legal, can can you come up with a reason to kick him?
I am actually new to Zend, that's why I am trying to convince him to use something I more familiar with, such as Laravel. How would you think about Zend Expressive and Apigility?
Thx for your advice. I am actually quite new to Zend. I haven't actually use Zend in real world application, whereas, I am more familiar with Laravel, that's why I am trying to convince him. I have asked him to justify why do you insist on using Zend, and as I aforementioned, he just claimed "Laravel for e-Commerce, not for medium + scale! I have just seen a lot of e-Commerce websites, there no Laravel backend for mobile! Do you think Facebook can be done with Laravel? No, I don't think so". He is making me crazy.
Thanks for your advice. I will try to discuss with the client again. Hopefully he can understand the situation.
I think reading up , learning about sql injection is all you need. Its not hard. Once you figure that out.. tada!
I mean faster in term of development speed, not about the performance. I have seen Apigility, I think it is quite nice too. However, there is lack of solid information and tutorial on Apigility. The original documentation is just nothing. It can't inspire me to start working on it. And it is not yet fully supported in Zend 3 isn't it? 
I'm also friends IRL with person I replied too, so I was mostly fucking around 
Can we, as a group, make sure this kind of stuff doesn't keep making it to the top of this sub?
I know in JavaScript, the Jest testing framework has this feature built in. 
I would ask him when did he do his research on Laravel, and how fresh are his sources. Laravel went a long way in a few years, and in the best direction for your use case. If he looked into it more than 1.5 years ago (or if his source is that old), ask him to look again or trust you on that one. --- He put forth 3 points. Let's review those : &gt;Laravel for e-Commerce, not for medium + scale! Misinformed, because he doesn't know where the solution to the scaling problem is. Raw perf only get you so far. It's with caching, and clever queue that you scale, not with 50% raw perf increase. Laravel can do as well as any other framework on that. And even in raw perf, you can optimise laravel a lot. PHP e-commerce is usually not done in Laravel/Symfony/Zend, but in magento/prestashop and other mess. Not saying these frameworks can't or aren't suited for, but it's a false claim to reduce laravel to e-commerce. Never used it for e-commerce since I started using laravel 2.5 years ago. If he thinks about project structure and so, he is actually doing your job. Let him do it to the end, and back off, he won't ever be happy of what you did, because he somehow don't trust you to do a good job. And he is still wrong. You can have any architecture with Laravel, DDD/ADR/Modules/Plugins/Shinny thing I don't know about. &gt;I have just seen a lot of e-Commerce websites, there no Laravel backend for mobile! Already talked about the e-commerce side, won't repeat. Laravel backend for mobile is just a version of a laravel backend full stop, or any web API in fact. And goddamn Laravel has a lot to sell on that. Free Oauth with passport to start, preconf api routes and middleware stack, authentication/authorisation backed natively, consume own oauth api on your own site without oauth madness, search with scout, free websocket with echo... Of his claims, it's the most misinformed. Api dev in Laravel is a breeze. &gt;Do you think Facebook can be done with Laravel? No, I don't think so Facebook wouldn't be done in zend either. Its dishonest to count it as a flaw only to laravel. You are not Facebook and won't be. You probably can't imagine what facebook is really like today. And by the way they don't even use PHP today, but Hack on HHVM, and Haskell and Java, and REACT, and Scala and they have 10000 dev and sysadmins and 80000Petabytes of data to process by seconds, etc. Unless your boss want you to invent taylor made compilers and design new languages.... It's not that they don't want the basic 1 app 1 database 1 server thing to make it all work. If they could, oh lord it would be easier. It's that they can't anymore. Their app is that crazy complex. I know nothing about yours, but I confidently say yours is NOTHING compared to what they do today. A lot of people need to realize that. It's kind of a form of survivorship bias. And that they didn't plan for that, and that if they would have to do it know, they would probably not do the same choices. I am willing to bet 1000$ that 99% of companies who start with google or facebook actual system as a goal today fail. Side note, I've seen some of Facebook earliest code, I think 2nd version was on the web at some point (when still only for US universities), god it was ugly. --- Feel free to make your boss read this and ask any question he would have, I will answer to the best of my knowledge. And don't worry I have too much work already to poach your client from you. But tomorrow, my bed calls me.
What the fuck
What matters is proper architecture, proper use of design patterns, SOLID principles and TDD. Not using some framework. Everyone coding in php inside or outside of a framework really ought to read PM Jones' "refactoring legacy php applications." Along side A uncle bob's book on solid. Then maybe the art of unit testing. Key here is you learn to tie your shoes, before you get velcro shoes. Your parents have you learn how to tie your shoes, before they allow you to make the decision of getting rid of laces, or tucking them into your shoes, because you need to know how to do it first, then you make a conscious decision to be more flexible and opt into no laces. Loose laces lead to tripping, but if you know what your doing and make that decision, least it is an educated decision. People are writing shity code and leaving future developers in a worst situation, with feature creep and technical debt growth. Framework aint going to save you. You want to sit around making 30-50k a yr... go ahead, but i want 120k a yr. 
It's at the top of the sub because we, as a group, are upvoting it. So the answer to your question seems to be "yes, but we're not going to". Maybe you should try submitting some more interesting and relevant content to drive it down.
yeah I believe it doesn't support version 3 fully..I mean when I had a look at it there were a few good tutorials out there and the documentation was fine for me..but I am not using it in real world..I prefer Symfony :)
The way how it works with PHP, best practices, design patterns, the architecture of the framework..that is how you should do proper development(my opinion :))..obviously it is developed by the guys who develop PHP itself but in real world and PHP you don't necessarily want to have clean and nice code all the time you just want to get the project done and no one will want to pay additional costs for ZF
OWASP made an app for this purpose. https://www.owasp.org/index.php/Category:OWASP_Insecure_Web_App_Project I'm not sure I understand your requirement for not linking to another site because you want to demonstrate it or have other people work with it. You can run this application locally or on a shared environment. Otherwise, just download php5.3, and use the now deprecated mysql library using $_GET['someparam'] in the query string Edit: TIL it's called web goat. Thanks /u/FishyOS
**tl;dr =** Duh, keep templates separate from other code. Web templates, email templates, etc. ----------- BTW, &gt; especially for people transitioning out of **pseudo-MVC** toward ADR That's not pretentious at all, Paul :P
Not a good analogy. PHP7 has a long road ahead to walk, until it approaches what Hack has (typed properties, arrays, local variables, generics, async etc.). While we can't just drop everything and start writing Hack for compatibility reasons, we also shouldn't pretend as if PHP7 is better. 
You have a very low bar for "good enough", my friend.
If you'll be checking indirectly you don't need the methods at all. Might as well: public function GoodEnoughButProbablyBad(array $strings, array $ints) : void { // Verifies and casts in-place. Types::cast($strings, 'string[]', $ints, 'int[]'); } I use something like this for assertion checks in my libraries, when PHP types fall short. But the point of types isn't just this kind of indirect runtime check, but also a declarative static type for your IDE and analysis tools. PHP doesn't have that, and we shouldn't pretend that what we have is "good enough".
&gt; It also came out that he supposedly brought a woman to DrupalCon whom he was in dom/sub relationship with, and some people took offense at the implications that he had a female slave. Which of course is asinine since unless he actually purchased a woman what they mean to say when they say "female slave" is "woman demonstrating her personal agency by participating in a completely legal mutually consensual relationship, predicated on a shared interest in a completely legal series of sex acts." At which point their outrage over him owning salves becomes "how dare he have a private sex life that is both consensual &amp; legal that I as a moral busy body who has nothing to do with it haven't given my blessing to." reminds me of that old C.S Lewis Quote: &gt;Of all tyrannies, a tyranny exercised for the good of its victims may be the most oppressive. It may be better to live under robber barons than under omnipotent moral busybodies. The robber baron’s cruelty may sometimes sleep, his cupidity may at some point be satiated; but those who torment us for our own good will torment us without end for they do so with the approval of their own conscience. They may be more likely to go to Heaven yet at the same time likelier to make a Hell of earth. Their very kindness stings with intolerable insult. To be ‘cured’ against one’s will and cured of states which we may not regard as disease is to be put on a level of those who have not yet reached the age of reason or those who never will; to be classed with infants, imbeciles, and domestic animals.
&gt; The way how it works with PHP, [...] the architecture of the framework.. To each his own tastes. I don't like the module approach by default, and that way of doing routing in arrays drives me crazy (goes with the module approach I guess). To much nested arrays to my taste. I didn't like Yii either for the same kind of reasons. Feels a bit old school. &gt; best practices, design patterns Pretty sure you can have those with others too... Or am I missing something ? &gt; that is how you should do proper development(my opinion :)) And you have a right to hold that opinion. I don't deny that. As far as I'm concerned, I'm never conviced by purity's sake arguments, at least in PHP. LISP or Clojure I can be swayed, but the way those language are designed makes them beautiful (and hard to read to new eyes, I agree). To me languages are a mean to an end. As soon as purity/philosophical thougts aren't a valuable thing anymore to the project, I drop those. But some of it helps along the way, that's for sure. 
I think, this article is biased. Google trends shows searches on subjects like framework names (so it can mean that things people search because things are unclear). What I find a good number is to be found on the git-repo's: number of issues, commits, releases, contributors 
I hope mods aren't sleeping yet and will throw this shit off.
It is not an article. It's just a spam link from a spam account intended to promote a certain site
Missing the codeception part, especially on how to use various suites. (like: more than functional, acceptance &amp; unit) Since I can't get this to work... :-(
You're welcome!
Totally agree with you. Never use 'rm' unless until extremely critical and no other options are left.
I would suggest you read about the KISS principle. and don't try to oversimplify stuff, because this is what you get: unreadable crap (pardon my French). If you want ternary stuff, then practice on small readable parts first. see : https://www.abeautifulsite.net/how-to-use-the-php-ternary-operator https://mattstauffer.co/blog/even-shorter-ternary-operators-in-php-using http://www.hackingwithphp.com/3/12/4/the-ternary-operator and so on. (Google can be your friend sometimes) 
"works without faffing on with Hack"
Maybe throw in a "DON'T USE THIS UNLESS YOU INTENTIONALLY WANT KITTENS TO DIE" warning so that mindless copy-pasters won't end up using this.
It's a noble quest. I'm just thinking: - What if I make a change in the class being tested or a parent class? - What if I make a change in an interface implemented by the class or parent classes? - What if I change a trait used in the class or parent classes? Granted, these are corner cases. But corner cases can still break things.
The point of the example is that the language presently supports stupid ways of type checking collections without needing to write code to throw on failure; a TypeError would be thrown by virtue of using `string ...$strings` The ideal scenario is of course a relatively well-formatted exception message indicating the index (or indexes depending on the size of the collection) at which the type is incorrect.
&gt; The point of the example is that the language presently supports stupid ways of type checking collections without needing to write code to throw on failure. We both did things which the language supports (we called methods). I just noted you can make a decent API out of it, if you'll do it this way, instead of writing all this extra boilerplate. Nobody will give you a medal for only using built-in features, there's no point to it. The purpose of language types are introspection from IDEs, analysis tools, and documentation tools. Your solution doesn't achieve that goal, neither does mine, but mine's at least short, *and* the TypeError can be more on-point and specific, the way you describe it. In both cases, because the goals of introspection are not achieved, you can't say "the language supports it". It doesn't.
The class / parent class should be ok. This is based on execution. Interfaces I do not think will be tracked, as Xdebug does not include coverage information for it. Traits are exectuted code and can be tracked by xdebug. so again should be tracked correctly. Im hoping to cover some more edge cases in upcoming releases 
If you have python experience and a framework like Django, or Flask, then try to find a framework that reassembles that for easy startup. 
This isn't really a help forum check out /r/phphelp for that With that being said, just set html5 mode to true on your $locationProvider then you won't have a # in your URL to worry about
You should definitely change that. Move away from unsupported software.
Seen https://github.com/php/pecl-php-ffi ?
Isn't this very old? Last commit is 7 years ago, i assume the zend engine changed a lot since then, especially for php 7.
None is maintained anymore from what i have seen. Also, i believe such functionality should be in the core of the language rather than an external extension.
I tried with htlm5Mode but when the page is refreshed page changes . 
There was a recent-ish discussion on this on the internals mailing list: https://externals.io/message/98212 The discussion mentions a couple of alternative extensions. Possibly also related: https://externals.io/message/99366
I wonder if they regret​ that decision since PHP7 came along.
Yes, Sara tweeted recently about getting someone on it again (volunteers?)
Heh forgot I wrote that first thread. I might try to push for something in 7.3 core
&gt; The act of sending an email is a domain concern Sending email should be an application layer concern triggered by a domain event. It has nothing to do with your actual domain and doesn't belong in the domain layer.
What's your guys strategy to get familiar with a new project? Background: I've been set upon a legacy project that's making heavy use of Websockets and async handling of stuff. Also uses many patterns that I'm either not familiar with or that maybe are just badly named. It's only two years old, so it's not PHP4 bad, but it has been given to another guy about a year ago and apparently his dogma was "Unit tests have to only test a single function, so if I want to test that private function I have to make it public and let's just also make it static, for good measure". So many public static functions that are ONLY used in Unit-Tests. I'm trying to work through it, but I have a really hard time keeping it all together. That the only documentation is basically a flowchart where every object points arrows at every other object is not really helping. So, how do you guys get to grips with handling projects that are ... how shall I put it ... less then perfect?
What is this for? :-)
It's for custom recipes for Symfony4 as Symfony does not provide a way to have private repository for recipes. More about it here https://medium.com/@fabpot/symfony-4-a-quick-demo-da7d32be323
Probably, but there are things that do the thing... https://github.com/slince/spike
Not really PHP-related. Angular isn't doing the redirection though, so just drop the `#` or use a `$http.post` instead of an HTTP form.
&gt; mysqli_query will probably be what you want instead of any kind of PDO Why is this? You're perfectly capable of creating SQL injection vulnerabilities just as much as you are with mysqli. It's all about ensuring you bind parameters rather than the connection interface you use. Not binding params in either interface will open you up to SQL injection.
use logging, debugging, make a mindmap with the structure as you go along. If you have unittests : hurray, you can change stuff and see if it still works. 1st change: the unittests and the associated classes. 
A hash in a link refers to a inner link. see: http://www.yourhtmlsource.com/text/internallinks.html
Downvote for the misleading title - should be called "Why I Think Hack Is Better Than PHP." I was expecting a post about the new features in PHP7 and how to use them.
My solution was to use ajax request to send form to php file ,then redirect .
I recently rewrote the way emails were generated in a project, because a few classes were doing too many things, and there was no good workflow for our frontend developers to work on the templates. One of the emails had 2 attachments too; a generated pdf with an order-overview, and a iCal file for the delivery appointment. abstract class MailBuilder { public function __construct(Twig_Environment $twig, Emogrify $emogrify); public function setDefaults($subject = null, array $from = [], array $to = [], array $cc = [], array $bcc = []); protected function createDefaultMessage() : Swift_Message; protected function createBodyHtml(array $context); abstract public function createMessage(array $context) : Swift_Message { //create message with correct recipients, subject, body } abstract public function createResponse($context) : Response { //render body template } } class OrderConfirmationMailBuilder extends MailBuilder{ public function __construct(Twig_Environment $twig, Emogrify $emogrify, $template, $css); } We use the same structure for Pdf &amp; Ical generation. `$context` contains the domain object you want to create the specific mail for, same as you'd normally render a template/response. The controller (or preferably something like a order submission service) is in charge of calling all builders, adding the attachments to the main mail and actually submitting it. 2 months later we're still happy with this. Any feedback is welcome of course.
&gt; Please dont point me to other websites to use AKA &gt; Please don't point me to proper resources that give me what I'm asking for Check out https://www.vulnhub.com and download a VM that works for you. There are tons of PHP + SQL Injection boxes for you to use as a resoruce.
By other websites I meant ones that were set up to be attacked. I wanted to show the class the backend.
Ah, that clarification is pretty important. Definitely check out VulnHub then. I forget the name of it but theres a really good box that launches a web app that provides a bunch of different types of SQL injection vulnerabilities on different pages. The source for all of these are available in the VM and probably elswhere. Lots of them have walk throughs available as well.
If all you know is PHP, everything looks like a PHP problem. 
Although I agree with PHP needing this feature I'm also interested in knowing what it is you can't achieve in PHP natively that needs an external plugin in a different language?
Tbh, I doubt that this app will be too popular, why not just do it in Zend and make the guy happy? It will also give you a chance to learn a new framework, it would probably take you an hour tops to figure everything out. It's literally just figuring out where the routing is, then creating some controllers/services to handle all the logic, which you have done before with Laravel.
Tanks, I know you want to get a rise out of me, but it's just not possible for me to get angry at you. :-)
If one uses in production some random string from the topic one didn't even read a title - one must suffer and so be it
&gt; load our functions Sounds like they need to interface with existing C/C++ code.
My `Go to file...` window disappears right after becoming visible... Very frustrating bug! **Edit**: For anyone who wants to track the bug it is filed here: https://youtrack.jetbrains.com/issue/IDEA-176186
Well, i am using pcntl a lot for so many tasks that involve a lot of computations and giving the environment constraints i'd like to move some of this functionality to another language for example and see what gains i get by doing that from inside php. If PHP could do parallelization/concurrency easier/better most likely we woulnd't need this functionality...though even languages like go/rust can call C even if their are really fast so i guess ffi is a good thing to have regardless of the language or my personal requirements.
It's those Redhat versions where they backport security fixes to extend the supported lifespan of officially unsupported software, so "It's unsupported" isn't working with management.
I would find lots of use interfacing directly with various parts of netfilter, without having to shell out to iptables/tc/conntrack etc.
Last I heard the 2017 versions has some issues, so like others here I'm still using the latest 2016 version. Is it finally time to upgrade or should I stay where I am? 
The title of this post should be "Stop Writing PHP and Start Wiritng Hack"
I'm not getting anything. I'm giving feedback. You can ignore it and be pretentious all you want.
I've been on 2017.1 for a while. I'm not sure what the issues are supposed to be, but I haven't had any.
That's a very unhelpful list of update descriptions: &gt; Reworked polymorphic types support How do they behave differently? &gt; Better Refactoring for PHP 7/7.1 How is it better? &gt; New inspections Which ones? &gt; New formatting options Which ones?
They don't backport everything. They backport some of the vulnerabilities with fixes in supported versions.
Using Laravel to write a pure API project is like swatting a fly with a (poorly constructed) tank.
You can find all changes with their related ticket [here](https://confluence.jetbrains.com/display/PhpStorm/PhpStorm+2017.2+Release+Notes).
This page gives a better overview of the changes: https://www.jetbrains.com/phpstorm/whatsnew/
I'm using EAP 2017.1.1, I'm guessing that 2017.2 is my eap? I have some bugs with my EAP, which are: If I'm using a soft link to my web folder some files are not recognized as in the current project, Once I close a Project the debug configuration is lost they also call 2017.2 while when I extract the gz file I get the old naming PhpStorm-172.3317.83 
And that seems to be good enough for them, so... Oh well...
&gt; I'm not getting anything. You're right about that. ;-)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
just use PDO-&gt;query without santizing the inputs or using prepares statements for instance `$users = $pdo-&gt;query("SELECT ALL FROM users WHERE username = $_GET['username']");` Will be vulnerable. the second you move to prepared statements will be secure from most common attacks $query = $pdo-&gt;prepare("SELECT ALL FROM users WHERE username = :username"); $query-&gt;bindParam(':username', $_GET['username']); $users = $query-&gt;execute(); unset($query); Make sure you don't hash to passwords, because thats not fun. Waiting for rainbow tables to match is not a fun time when you have 2.1TB of rainbow tables. Also don't do anything on this site: http://www.phptherightway.com/ because you might not be writing vulnerable code. You may want to watch some Indian/middle-eastern youtube tutorial video, they are the best for vulnerabilities.
I've been learning Kotlin over the past 6 months making a few small apps and wouldn't mind putting towards a bigger project especially if it was PHP based. Doe's anyone knows if they offer an open source version that you can contribute to? I know they have IntelliJ IDEA but they make sure it doesn't have PHP support (or allow it in the official repos) and I would rather devote my time to something that would help the PHP community.
He said he doesn't want an app because he wants to write it him self and learn from it.
HEY! Stop writting php like its 2009, use HHVM. STFU, GTFO. Some of us have clients and legacy code/servers to support (I have 3 projects running on ezp_legacy that I must maintain to run on php 5.4), some of us release/sell software and would like it to run with at least some older php versions (I personally target 5.6 ATM, sometimes support 5.5 inadvertently but wouldn't recommend)
It's a high level overview of an update. If you want something more comprehensive, you can follow one of the three links they give you to see various levels of more information
I don't think even facebook even uses HHVM anymore.
The community version is the only version that they offer that's open source. That being said, you can always install the php plugin manually just by copying the php plugin over from PhpStorm. However, if you're really looking to contribute, I'd highly recommend checking out the [Php Inspections Extended](https://github.com/kalessil/phpinspectionsea) plugin. It's amazing, and I recommend it to everyone. They could always use some extra hands on board.
[mp4 link](https://i.giphy.com/EmB4QtACPVBpS.mp4) --- This mp4 version is 91.16% smaller than the gif (275.69 KB vs 3.05 MB). --- *Beep, I'm a bot.* [FAQ](https://np.reddit.com/r/anti_gif_bot/wiki/index) | [author](https://np.reddit.com/message/compose?to=MrWasdennnoch) | [source](https://github.com/wasdennnoch/reddit-anti-gif-bot) | v1.1.2
I stand corrected. We're working on the A/C. 
Goodie, updating right now!
Can we not become a meme thread ?
I didn't see anything about it in the rules so I hope I didn't break any. From the downvotes, it seems that it is reasonable to assume that memes are not welcome here. 
Honestly, just my experience. Perhaps my experience with mysqli_query is less than PDO, but I tend to see people not binding paramaters at all. This could just be bad functionality of people lazily upgrading from older mysql_queries. When I actually stop and think about it, I guess you're right
This is because anonymous function is called inside array_walk and documentation states: &gt;Function calls from within internal functions will not be affected by the strict_types declaration. http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration.strict Similar issue declared as not a bug: https://bugs.php.net/bug.php?id=72516
My issue is literally every Jetbrains Plugin is out of date and apparently the laravel extension breaks the php extension so neither start. 
I knew this was coming, but cool to see.
I used IntelliJ for YEARS with just about no issues. This last year I started used PHPStorm with a whole host of weird problems: Does anyone else experience: * phantom clicks? * another bizarre issue (that also happens to a coworker using same version) where, in a dialog box, each char is overridden by the next you type so you have only ever see one letter. it's almost like its adding a backspace after every letter? * When I close PHPStorm, one phantom pane stays open unless i KILL the application. Super frustrating, I would expect better from JetBrains. edited to add, this is on a Mac
&gt;Does anyone else Probably
Feel free to open an issue/bug report at: https://youtrack.jetbrains.com
so its Not Just Me?
Basically because two typing modes are a horrible idea and don't work with callbacks.
[removed]
I have these exact issues too. Also on a Mac machine. Recently swapped out my MacBook Air for a new MacBook Pro without a restore of my time machine backup but these issues are present at both laptops. My suspect is that a plugin is causing the issues, although I have nothing to back this up yet and haven’t looked up how to figure this out. Hopefully someone can point us in the right direction 
I wanted something like this for access to [OpenCV](http://opencv.org/) - granted I have *not* tried much yet, but this seems like a natural fit. Edit: *Typo*
Possibly not. There are a significant number of people who are using OPCache at 'scale' (i.e. with having huge numbers of source files, which presumably Wikimedia has.) who are seeing small but annoying stability issues with it, and you need to have OPCache running on PHP 7 to achieve all of the performance gains possible.
The phantom click thing was really freaking me out til I saw it happen on another Mac instance of PS. 
&gt; Similar issue declared as not a bug That doesn't mean the behaviour is good, it just means that it's working as it's always has and/or that's how it was specified in the relevant RFC. I personally agree it ought to be changed....and look forward to an RFC that proposes how to do that in a way that could get passed by people who didn't like the strict types. 
AITOO
Isset takes multiple parameters, and returns true when all are set, e.g., ‘isset($a, $b)’ returns true if a and b are set. 
OSX for work here, I've never had any of these issues. I did have an autocomplete problem I submitted a bug report for and they fixed it.
If you have an array that has random Boolean false values that you need to remove, call array_filter($array) with no callback supplied. Good for working with reading in CSVs and removing any false return vales in the CSV array. 
&gt; call array_filter($array) with no callback supplied That's my number one use of array_filter. Very handy. 
Thank you!
Stupid PHP Tricks: foreach ($arr as $key =&gt; $value) { $$key = $value; } 
&gt;another bizarre issue (that also happens to a coworker using same version) where, in a dialog box, each char is overridden by the next you type so you have only ever see one letter. it's almost like its adding a backspace after every letter? This is the behaviour that pressing the Insert key on the keyboard should cause. If you press the Insert key when in a dialog that's having this issue, does it fix it?
THANK YOU!
Woo, thank god. That was a terrible decision.
Does it understand the 2nd parameter to dirname() that was added in PHP 7?
Hasn't that been in a modal for a while now?
preg_match is fast as hell for [non-crazy](https://swtch.com/~rsc/regexp/regexp1.html) matches. It's pretty close to strpos and faster than mb_strpos for a match like `/red fox/` against "The quick red fox jumped over the lazy brown dog". The important thing is that they're all *so fast* that you should not worry about them *at all* unless your profiler tells you you're spending too much time in preg_match.
&gt; When I close PHPStorm, one phantom pane stays open unless i KILL the application. I get this all the time. Both OSX and Windows. Hoping the new version fixes this.
[`extract()`](http://php.net/manual/en/function.extract.php) can do that for you :)
Yes, it does.
I’ve been using the EAP of this for awhile purely because it now supports emoji in its terminal.
Ha ha
You should never do this. /u/colinodell gave you the preferred way *if* you were to do something like this, but I still don't even like using `extract()`. I can't count how many times I've had to look where something came from, only to fin a loop like yours or `extract()`, only to have to chase down the array supplied to it or firing up a debugger. One use I'm okay with `extract()` is something like when building a templating system, you can get an array of data into the local scope nicely. I'm sure there are other cases for this, too, but most cases I feel like `extract()` does more harm than good. If [this](https://wiki.php.net/rfc/short_list_syntax) RFC passes, that would completely eliminate the need for `extract()` in most cases. I feel like I saw this feature in 7.2 or something, but I was unable to find anything about that other than the RFC, so somebody tell me if I've flubbed this one!
Is it possible to unit-test doctrine queries without a database? I was hoping to load data into the entity manager using fixtures, run a given query and then perform assertions on the results. From what I've been able to find, it seems like a database connection is required for this.
To pass and respect this context in internal functions calling back will have a tangible negative effect on the complexity of the codebase and its performance. The best solution is to drop strict_types, and stop pretending like one language can have two type systems. It'll be a crazy amount of work to fix this and all other edge cases where the switch is inconsistent. For no reason at all, other than to appease some loudmouths on internals at the time scalar hints were introduced.
`preg_match` is also arguably easier to read and less gotcha-prone in some common use cases, e.g.: if (preg_match('/a/','aardvark')) ... vs if (mb_strpos('aardvark', 'a') !== FALSE) ... and increased legibility is usually more important than whatever minor time gain these little optimizations yield. Neither function signature will win an award for elegance, but `preg_match` is shorter and easier to grok.
I didn't know about extract(), or I would use that. I do agree with you that it's a bad idea in general, but in certain situations I like it. For example public function get_sub($db,$id){ $sql = "SELECT sname, slabel, svalue FROM tbl WHERE id= ?"; $stmt = $db-&gt;prepare($sql); $stmt-&gt;execute(array($id)); $gr = $stmt-&gt;fetch(\PDO::FETCH_ASSOC); return $gr; } Where this returns a small set of values I need to use in most other class functions. Anywhere it's needed, just $val_arr = $this-&gt;get_sub($id); extract($val_arr); // $sname,$slabel,$svalue 
 true['hello'] === NULL false['world'] === NULL I always thought that was funny. Useful to know if you're using `end()` on an array that may not contain any elements.
This is exactly one of those cases I don't like it. I will say, however, that the shorter the method is, the more acceptable the use of `extract` becomes. Even still, not a fan of this use case. PS: I'd suggest renaming `get_sub` to whatever "sub" really means here. 
I think you mean enforce strict types :D