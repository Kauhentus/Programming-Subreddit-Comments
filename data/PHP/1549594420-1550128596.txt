Sure is. They fully render your page, all assets, all javascript, all externals, all internals. The works. Everything gets counted towards or against your seo score. 
At this point, arguably no. It’s a false sense of security. It would stop someone with no determination at all, and that’s it. 
As a PHP fanboy I had something clear when parsing websites, PHP isn't the right tool for it, I learn all the DOM classes from memory, the Xpath syntax, everything, still learnt that Node + Cheerios is WAY faster &amp;#x200B; Use NodeJS + Puppeteer/Puppeteer-core + Cheerios (A jQuery like dom parser for Node) You can parse from PHP with an exec() call
Lol nooooobs downvoter
wtf thats not a script thats a website Stop simplifying what you want to do. You can't just use the word "script" to mean not having to do the work. This website needed a database, or at least a connection to an external api. As well as search functionality, multiple pages to view listings and event details. Its even got a login system and members can book tickets to the events. If you want all these things you have 3 options. 1. Off the shelf event software you can buy. (maybe a Drupal or WP plugin? Or maybe a stand alone application) 2. A SaaS which you can pay a subscription for. 3. Or actually do the work yourself and build the site. Including database, php code and front end. There is no "script" that can magically build a business for you ffs
So, are you still on PHP?
Maybe I don't care about appearing hip to others and I just use whatever is at hand / easier to work with overall? Linux is a no-brainer where there's server-side involvement, but for devs working on local, how exactly would Linux change my life? I've made more money than I can use with just git, XAMPP and VSCode. Popular framework written too, lots of products. It never stopped me. Stop giving in to your monkey instincts and just use whatever fits you, live and let live - everyone's using whatever's fit for them.
I care
Yes you are right I'd look at a stand alone app.. I already have mysql database and php LAMP setup for my drupal site. However I want to keep the app separate from my drupal software setup.
What the fuck.
Isn't Drupal a bit of an overkill for this kind of thing? All he wants is an entertainment site with ability to post events for which wordpress is more than sufficient?
You're right. The required content is not returned in file_get_contents. 
My free host doesn't support node. 
Looks interesting, thanks. 
UX
Then you won't be abble to process page that are building their DOM with js. (A lot are now) You need to have url fopen activated in php.ini, to allow file\_get\_content on remote files. Then, [DOM parser is in php core](http://php.net/manual/en/class.domdocument.php), you will have methods like getElementById, but again it works only on static pages. &amp;#x200B;
Be careful, make sure they arnt just going to take your code and tell you to fuck off
Is there an article or some tool to test that?
I don't recommend doing it that way. A better approach is to use something like Redis as a pub/sub provider. When a message appears in Redis on a subscribed channel, your ratchet server pulls it down and you can do whatever with it (broadcast it to all connections, etc). Many advantages to that approach. You have a layer of abstraction, so you can scale your websocket servers horizontally if you need to, using Redis as the data backend. There's a bunch of examples that do it this way, just do a bit more research. Take a look at laravel-websockets as an example, it mostly does things the right way.
Wtf does this have to do with PHP? Stop spamming reddit.
I have no clue what Redis is. Any resources on where I can get a quick start on Redis pub/subs? Again how would you bring the data from another database like mysql into Redis? 
Here is the full tested code you need, [Authenticating a user using mysqli and password_verify()](https://phpdelusions.net/mysqli/password_hash) As you can see, beside being safe from injection, prepared statements are much simpler than your current approach.
Redis is a generalized key-value data store. Basically a database, but best used for short-term data, like caches, session, all kinds of runtime data. Not ideal for long-term storage (which is what MySQL is excellent at doing) or relating pieces of data in the storage together. This page should explain pubsub pretty well: https://redis.io/topics/pubsub Basically in your app's backend wherever you were thinking of connecting to your websockets server, you would instead connect to Redis and publish a message on a certain channel. Your websocket server would be subscribed to that channel, and would receive the message right away. Redis acts as a message broker, a middleman for the data to be passed around. That way, the only networking you need to worry about it how both pieces (backend app and websocket app) connect to Redis, instead of how they would connect to eachother.
If your goal is to build n develop ticket selling system none of cms will fit, other than very early stages. Roll your own with Laravel or Symfony. 
You can use the webmaster tools to see how your page looks. Particularly useful for mobile rendering. I believe you have to have your domain registered in order to see it. They use the same tools when "viewing" your page for data
if rachet is serving websockets, check out Pawl [https://github.com/ratchetphp/Pawl](https://github.com/ratchetphp/Pawl) if it's a regular socket and you want to simply send a message to it, you can use the socket\_\* functions in php. you will create the socket, connect, and write to it &amp;#x200B;
jesus
But SEO for Business is about "Google SEO". That's the core of /u/tzfrs point. It's not about Your preference. It's about preference of majority of your target audience.
nice helpful...thanks
Yes. Did you? Ratchet is a websocket lib. He wants to broadcast a message to connected users. What I'm saying is that trying to have your MVC app connect as another client is an anti-pattern. You want a message broker to do this.
Sites building their content with js is even easier to scrape, since they have API you can just connect to
where did you get the idea that he wants to broadcast a message to connected users?
How does this differ from Nuxt, which I think is Vue's official server-side rendering tool? [https://nuxtjs.org/](https://nuxtjs.org/)
I ran a benchmark just for fun just now. Using [wrk](https://github.com/wg/wrk), the Go application (18000 req/s) is about 13 times as fast as the Symfony application (1400 req/s). That was to be expected, but I'm still quite happy to see the catch-up that PHP has done in terms of performance. When I benchmarked our Laravel application versus Go in 2017, Go was about 27 times as fast. Note that these numbers are just for fun; even the Symfony application already returns a response within 20ms so it's far easier / cheaper for us to shave off time in other aspects (using a CDN, caching database queries, etc). If needed (not right now).
Exactly! /u/tfidry I'm also using DuckDuckGo and not Google, but I would be kidding myself if I'd say that the web is optimized for it and not Google. Especially smaller businesses won't go the extra mile to make their page work on every search engine. Google is the most important. Many people don't even know there are others.
Because 99% of the time, that's the point of having your backend app send a message to the websocket server. So it can send it out to whoever is connected. They're obviously a beginner when it comes to websockets; it's likely they're trying to build a chat system of somekind. I've spent a lot of time working on and thinking about the best approach to these things, and I've written myself into a corner a couple times by trying to do this exact sort of thing, trying to figure out the best way to get data into the websocket service. Since it's async, it requires a different type of thinking than the rest of the PHP app. Connecting directly to the websocket server does not scale well. You're already limited to the number of users that can connect, and adding the overhead of opening and closing connections every time you want to push out a message is not ideal. With a message broker, you have a long-lived connection, no overhead of opening/closing, and you can receive messages very fast and precisely, and having horizontal scalability. If your service ever gets big enough that your one websocket server becomes not enough to support all the users, then you'll need to run more than one to scale it up. And if you do that, do you want to be connecting to each of those servers from your PHP app to push out your messages? What if you have N websocket servers? Bad plan. These are all design decisions that need to happen early on when building a system like this. Leading them down the wrong path is counterproductive.
What's wrong ?
What does it have to do with you , go sleep in your mamas bed
Everything.
&gt;I still do not understand why anyone who is a full-time PHP developer still uses Windows. Maybe because at work they don't have much choice...
Is written in PHP - this is the difference.
\&gt; I'd like to send a message to the socket server from the backend of a php mvc application. From this simple question, you're making the assumptions: 1. they're a beginner 2. he is using websockets. he only said 'socket' 3. they're trying to build a chat / broadcast system of some kind 4. connecting directly to the websocket server(s) doesn't scale well 5. a connection directly to the websocket server can't stay open indefinitely, it can only do that to a message broker 6. his app is conducive to persistent connections. if its happening in an http request, then it might not be 7. adding a message broker as a piece of infrastructure is the only good choice, especially when they have "never heard of redis" 8. they need to scale 9. a system without a message broker isn't horizontally scalable 10. scaling redis pub/sub is easy 11. redis will scale better than whatever system exists (redis is single threaded) I will generally agree that using a message broker is a good choice, but it completely missed the mark of the question
We're using a slightly customized version of [Selenium Webdriver](https://www.seleniumhq.org/) to automate headless testing but it's also a great tool for extracting anything from web pages. 
Because I can’t use fucking nuxt with php
1. Yes, they said so himself in their reply to me. 2. Like I said, ratchet is a websockets lib. 3. It's the most common usecase. Not my fault more information wasn't provided. If they want to clarify and elaborate, I'll be glad to answer. 4. It doesn't, when doing things server to server. You're doing a connection per message you want to send out. It's inefficient. Websocket connection handshakes aren't that lightweight. 5. He said he's doing this from an MVC application. That implies the standard request-per-process/thread flow that PHP implements (unless you write your server with swoole or reactphp, which I doubt is the case, as a beginner) the connection can't be persisted in that case, once the request ends. 6. See 5 7. I didn't say it's the only good choice, you're putting words in my mouth. I said it's what I recommend. Because I have experience with it and it's what I found introduces the least amount of tech debt. It's very flexible and efficient. 8. See 7. Tech debt is a thing. 9. That is flat out false. It's one pattern that is very helpful in achieving scalability. One that fits well in this situation. 10. It is, actually. 11. You'll need to scale your websocket servers way before you need to scale Redis. And if you ever get to that point, it's just a Redis issue and less-so an application issue at that point. Again, I made no implication of this being needed, you're putting words in my mouth. 12. No idea what you're talking about here. You can do whatever you need with the request before punishing the message to Redis.
Yeah but what if you need to rerender on every request because your data is different? Doesn't all this work make your requests really slow? Also it requires more resources and you depend on node.js which in many case is not an option because of where the company host their website.
Thanks for the feedback. Currently i dont know how fast v8js in php is and how much load it puts in your server. Also, it's an extra dependency which some developers cannot use because of the website needs to be hosted. If it's my only option because of {reasons}, then i'll probably use it. But i have my own reasons why this is bad idea.
If you want a clearly defined policy on how to divide up the money I'd model if after Larry Page's PageRank algorithm where you treat each dependency as a hyperlink between pages.
I would rather use $template = &lt;&lt;&lt;EOT &lt;div&gt; &lt;/div&gt; EOT; 
I would have suggested Twig, but Weirdpress is not PHP. Please write in /r/wordpress.
Good one.
I've always found this "server-side rendering" to be a bad idea. It's a bandaid for a bigger problem. There are far better ways to spit out the required text/html for your javascript app to render whatever it needs to render "the proper way™"
Lol, no. You have clearly no ideas of what you are talking about, so maybe **stfu**. Stay in your shit. \++ 
Super tasteless advertising.
With PHP Desktop you can develop native desktop GUI applications using web technologies such as PHP, HTML5, JavaScript and SQLite. To explain it in the simplest way: it is Electron with PHP support added. To get a better understanding of how PHP Desktop works see the project's [README](https://github.com/cztomczak/phpdesktop#php-desktop) file.
&gt; Also it requires more resources and you depend on node.js which in many case is not an option because of where the company host their website. Honestly, if you or your client have a complex enough website to warrant the usage of Vue.js and building an SPA then you or your client should have enough money to pay for hosting that supports Node.js. &gt; Yeah but what if you need to rerender on every request because your data is different? Doesn't all this work make your requests really slow? I don't really understand you. Why are you building an SPA if you intend to render on the server side for every request? The point of an SPA is that all the rendering is moved from the server to the client. Only initial requests would be rendered on a server to please the SEOsnake oil traders.
This may not be a popular thing to say, but whatever ... This RFC is in draft: That means the author has not yet fully formed their ideas and is not ready to discuss them at this time. As a matter of courtesy it would be nice to keep such documents away from prying eyes: The more time someone has to spend on reddit, twitter, or whatever defending far from fully formed ideas, the less time they have to form those ideas, and the longer it will take to see the feature being put up for discussion. I know, as a matter of fact, the author of this particular RFC agrees with me, and it would be nice to extend this courtesy to all future proposals.
I deleted the post.
Since one also need to know JavaScript to develop using this, what advantages does it offer over Electron?
That was extremely reasonable of you, thank you.
I just don't understand why people downvote a legitimate question that was asked respectfully. Even if the answer is "just because" that's fine, but there's nothing wrong with asking.
you can apply that logic to web development: *"Since one also need to know JavaScript to develop web pages, what advantages does php offer over Javascript?"* &amp;#x200B; Event-driven development doesn't make sense all the time for a desktop app. PHP and JS are different languages, for me make a lot of sense that some people might want to take the event-loop and async-programming out of their app/workflow/etc.
What about the fact that most I/O in PHP is blocking, would the UI be kept responsive?
When in doubt, write less, not more. Too many juniors get this weird idea that they're going to be paid by the line of code or something. Don't assume the question is too simply and you surely must write more. If you can meet the requirements with a clear, straightforward approach, then do so. I will say you should be a bit nervous whenever a question makes a specific request for a use of a framework/lib/API/whatever. You'll often find interviewers come in with some very specific ideas about how they should be used, and you can get penalised more for your conventions, preferences, and style not exactly matching the interviewers than for the quality of your work. If this company has anything open source, or the interviewer has some public repos on GitHub, read those to get a sense. Use their style guide, organize your code similarly, etc. It sounds a bit sycophantic, but the more your code reminds them of theirs, the more likely they'll hire you. 
Programmers have the worst holier than thou attitudes. But we deserve it :p 
Remember that a socket is just a file, but in a different location. So at a very basic level you can use `fsockopen`, then `fwrite` and `fclose` just as you would with a file (the only difference being fsockopen rather than fopen). https://secure.php.net/manual/en/function.fsockopen.php
A few more thoughts: I know that Java allows this kind of behaviour to add functionality to enums, though I'm still unsure whether is a good thing to do. It feels somewhat like violating SRP. I also looked at C#, which allows to write "enum extensions". These are separate classes which add functionality to enums. C# will "blend" these two together, allowing you to directly call the added functionality from the enum.
Wtf? Why do this? PHP better for web development. If you need a desktop app use native solutions not electron shits. Desktop and web development is a different things. That's two different worlds .... 
If you don't like it, don't use it. Simple.
Yes, as the UI is not written in PHP
Heres my legitimate real world, already been applied, answer for this question from the last time it came up. A lot of the work I do is creating custom reporting and table generating, using external or user inputted data, and out putting a spreadsheet file or a PDF. I already have these generators written, and using a framework like this I can easily take in my existing projects where applicable, and deploy them as standalone desktop applications for a client. This is useful for lawyers, and also civil engineers who have separate but equally valid reasons for either not having access to the internet, or not wanting that stuff on the internet. 
That you don't need to learn any more JavaScript to develop with PHP Desktop than with a regular browser. With Electron you more or less have to learn the whole node.js/npm ecosystem, all the tricks of how to avoid "callback hell" in javascript, Electron's API and how to program Electron's Main Process and the Renderer Process such that you don't block the Main Process. PHP Desktop's memory usage seems to be far lower that Electron's (on my desktop at least). If you can make a great web application using PHP+HTML5+CSS3+JS in a regular browser, you can within 10 minutes make a great desktop application with PHP Desktop. Composer and all the packages you are used to as a PHP developer play nicely with PHP Desktop.
Yes, in exactly the same way that your web browser keeps being responsive all though the web server is doing blocking I/O in a response to several requests from other users. There is no difference to this scenario with PHP Desktop.
I think this is already explained well in [README](https://github.com/cztomczak/phpdesktop#php-desktop). Have you read it?
The macos version, is that still in the planning?
I just want to build an event information page no commercial transactions 
Yes, you can also solve it by duplicating your templates. But it makes development slower and you have no garantee they are the same.
That's a great explaination. Web Assembly solves a lot of the memory and performance issues with Electron apps, but you still get some of the Chromium debt. Nothing...not even TypeScript addresses JavaScript callback hell.
Still no Mac release, but there is a good chance it will appear this year.
https://www.phpclasses.org?
But in JS the I/O operations \_are\_ non-blocking, whereas in PHP all the typical I/O stuff like \`file\_get\_contents()\`, \`$pdo-&gt;query(...)\` etc. all block until the operation is finished.
That and also https://sourceforge.net/
Can't believe its still a thing. Whats the use-case these days?
True, but the actual impact from the end user's perspective can be reduced to nearly nothing by importing that huge file or doing that slow PDO stuff via async javascript in the browser or letting php run that code in a background script on the server. I often miss non-blocking I/O in PHP too, but using blocking I/O where it makes no performance difference often makes for the most elegant, easily read and debugable code in the languages that I know of.
Packagist?
&gt; Desktop and web development is a different things. That's two different worlds .... Ideally they would be nearly exactly the same. This has been the goal since day 0. Achieved that lofty goal however ... Though I must say things like Electron are getting pretty damn close.
In case of SPA, you're correct. I'm not sure my package is the correct tool for SPA's though. Because the router would be in javascript and the PHP backend would have no idea what to prerender. Unless you have 2 routers.
This is totally insane and i love it.
Tell that to VSCode, Atom, Slack, Skype, and many more to come.
You could try to put the API response in some sort of Class. This creates a more prettier syntax (opinions might differ on this) but it would also help with some validation. For example, right now there are no checks to see if *$vacancyDetails\['records'\]\[0\]* is even set. You could create a separate file that only contains the HTML and *some* PHP. In the template you'll call the methods (or properties) from the created class to get the information. A small example: &lt;?php class VacancyDetails { protected $title; protected $vacancyID; protected $type; protected $owner; public function __construct($details) { $this-&gt;hydrate($details); } public function __get($name) { return property_exists($this, $name) ? $this-&gt;$name : null; } protected function hydrate($details) { // Do some logic to put the contents of $details // into their separate properties but also check // if $details contains the correct array keys. } } // Then you could do this: $vacancyDetails = new VacancyDetails($vacancyDetails); // require your separate template require __DIR__.'/some/directory/template.php'; // And in your template: &lt;h1&gt;&lt;?php echo $vacancyDetails-&gt;title; ?&gt;&lt;/h1&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;Vacancy ID&lt;/td&gt; &lt;td&gt;&lt;?php echo $vacancyDetails-&gt;vacancyID; ?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Type&lt;/td&gt; &lt;td&gt;&lt;?php echo $vacancyDetails-&gt;type; ?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Contact&lt;/td&gt; &lt;td&gt;&lt;?php echo $vacancyDetails-&gt;owner; ?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; I'm putting the information into protected properties and utilize the magic \_\_get() method to resolve the information from the property. This way the properties can only be set through the constructor. This prevents accidentally changing the value of a property when you're working with the object. &amp;#x200B; Of course there are many other solutions you could create, this is just an example.
Not async await, generators or promises ?
Personally I see callback hell as the cost of going fast. Async/await and promises, for me, are part of refactoring 
Personally, I don't believe that adding methods to enums that do fairly common enum things violates SRP. I do, however, think that you may be overengineering a solution to a fairly trivial problem. I think the mapping idea is ok, but to me, that actually defeats the purpose of an enum. You're essentially using your enum class as a *key* store rather than a *value* store, in which case you may just be better off using a collection or associative array. &gt; Sidenote: I know I could simply store the enum values as the amount of months, that would work in this example, but not in other cases. What "other cases" would this not be possible? Are you sure that those particular cases should even be using enums at all? Quite honestly, I think that's what you *should* be doing. The tricky part only comes when you want to figure out an enum's name from its value, which will involve reflection. [SplEnum](http://php.net/manual/en/class.splenum.php) does this behind the scenes with its `getConstList` method (sort of), and I'm fairly certain that C# does as well via `Enum.GetName`. Personally, I could see something like this working for most enum use-cases: abstract class SearchableEnum extends SplEnum { public function getName($value = null, bool $includeDefault = false) { $value = $value ?? (string)$this; return array_search($value, $this-&gt;getConstList($includeDefault)); } } class ContractDurationType extends SearchableEnum { const __default = self::ONE_MONTH; const ONE_MONTH = 1; const HALF_A_YEAR = 6; const ONE_YEAR = 12; } class Contract { private $duration; public function __construct(ContractDuractionType $duration) { $this-&gt;duration = $duration; } public function renew(int $duration = null) { $this-&gt;setContractDuration(new ContractDuractionType($duration)); echo sprintf('Contract renewed! Use duration code: %s', $this-&gt;duration-&gt;getName()); } public function fulfill() { echo sprintf('Contract has been fulfilled after %i month(s)', (int)$this-&gt;duration); } private function setContractDuration(ContractDurationType $duration){ $this-&gt;duration = $duration; } } $default = new ContractDurationType; $contract = new Contract($default); $contract-&gt;fulfill(); // Contract has been fulfilled after 1 month(s) $contract-&gt;renew(ContractDuractionType::ONE_YEAR); // Contract renewed! Use duration code: ONE_YEAR $contract-&gt;fulfill(); // Contract has been fulfilled after 12 month(s) $contract-&gt;renew(3); // Throws UnexpectedValueException The code is untested, but that should give you the gist of it.
Thank you. I’m just trying to build a notification system for an MVC app, i was thinking to use AJAX and do it the traditional way. The idea of a real time notification is really nice. I’m new to websockets, and I was stuck on what would be a proper implementation on with the above said case.
Yeah the array libs drive me crazy. The big thing that hack (RIP) got right that held PHP back, was really pushing interfaces for collection types. We only recently got the `iterable` type. Collection types were clearly the right way to do things (e.g. some collections could be Traversable, where you can go through an element at a time, but not have ArrayAcessible, because you can't jump ahead. ) Throw in associative arrays, and there's so much making those array_ methods' behaviour confusing af. If even array_walk and array_map used the same argument ordering, I could've been saved from many awful debugs over the years. 
Can i use this with Laravel, i got an app written in laravel, would it work with this? Can this thing run on win10? 
I had a look at Pawl, to me I feel that there’s a lack of good documentation to it and I cannot have pawl connect to my websocket server within an MVC controller.
I had a look at Pawl, to me I feel that there’s a lack of good documentation to it and I cannot have pawl connect to my websocket server within an MVC controller.
Create factory that decide which implementation to use based on enum. Make one implementation for each enum. Use subtyping or interface to get polymorphism. Either way, make sure that factory throws exception if it does not recognize the enum value. &amp;#x200B; Case closed ;)
Habit, laziness, or not knowing better?
This got me thinking: how many fps could you get from GD with some simple 2d graphic compared to JS or other solutions. I know that number will be tragic, no doubt, but just how *tragic*...
These routers have different jobs. vue-router is for selecting the Vue component in the frontend for specific routes. Something like Slim/Laravel/Lumen/Symfony (http-foundation) etc. is for dispatching the right methods on the right classes matching the current request. You'll need both.
THIS IS IT! Haha, thanks. &amp;#x200B; I was talking to my team and told them about the days before composer and what we had to do to get a site working. I remembered this site and using it but forgot the name. &amp;#x200B; Thanks again!
Does this do any... compiling? Or would the source still be available?
But promises are just as easy to use as callbacks...
Yes, it works with Laravel and it supports Win 10. The last time I've tested with Laravel 4.2.11, so there may be changes required to make it work with latest 5.x. See [https://github.com/cztomczak/phpdesktop/wiki/PHP-frameworks-support#laravel](https://github.com/cztomczak/phpdesktop/wiki/PHP-frameworks-support#laravel)
You can use PHP encoders to protect sources, see [https://github.com/cztomczak/phpdesktop/wiki/Knowledge-Base#how-do-i-protect-php-sources-in-the-www-directory](https://github.com/cztomczak/phpdesktop/wiki/Knowledge-Base#how-do-i-protect-php-sources-in-the-www-directory)
Can’t people just decode it? Sorry, I have no experience with this. 
Using AJAX will be heavier on both the client and server, because you'll need to poll every x seconds for updates. That might be fine for your usecase if you don't expect to scale too much. With that said, Websockets are definitely great tool to learn because it's much more efficient and fast. Good luck!
Even after decoding all they would get is a bunch of meaningless random characters instead of variable names and function names.
this still is alive? omg. updated design, but still looks terrible and almost unusable haha
Ahh, I see. Thanks 
Wow this site is top of the line UI/UX.
Tried this on Xubuntu 18.04. If you get an error run `sudo apt install libpq5` and retry.
The current EAP has a nasty bug where the project-wide search is broken. It will be fixed in the next release on 13th feb!
Callback hell is since quite some time not an issue anymore. You simply use promises everywhere in combination with async/await.
The default PHP binaries enable 'pgsql' and 'mysqli' extensions, so maybe I will just disable these. \`libpq5\` is a dependency for Postgresql (pgsql extension).
 &gt; and many more to come. What about it seems like a good thing to you? I'm not even opposed to the idea of Electron, just the implementation.
Fixed! I have updated the release with phpdesktop v72.1 binaries.
&gt; before composer
There's Timber do that, if I understand you correctly
Good bye callback hell, Hello promise hell
What’s wrong with the implementation? I personally think it’s bloated at the moment, but some of those bigger apps have been able to still get good performance. Overall, I think it’s awesome as a developer that I don’t need to even know native code to build desktop apps.
There is no such thing as promise hell with async/await.
Okay, then i am going to donate.
Phpclasses.com and hotscripts.com. Days gone. 😐
That depends on the level of interactivity of your page, I would say. You are certainly right that for your average blog that would be an overkill, assuming that users stay on a particular endpoint/article for a while until they move on. But looking at user-data for e-commerce suggest that navigation speed is important. And a Magento shop can quickly feel uncomfortably slow.
So then you’re basically talking cup of coffee money. In that case reach out to the developers yourself and ask how to contribute to them. If $1500/month is over budget for what value packages provide, you’re definitely not in the league to be asking how to support packages with any meaningful compensation.
For those planning doing bigger operations with this, there's a reason why I abandoned this thing, in Electron you have the option to open a file from the file system, for those of you that know Javascript, you guys should know that in javascript you cannot access for example a javascript absolute path, if I'm not mistaken you get something like C:\\fakepath\\file.png &lt;-- and you can use this with the readFile API, but you cannot read its absolute path, and you won't be able to do much with this if you need the path of certain file. &amp;#x200B; Let's say you want to build a code editor, or you want to modify a file and save the changes, you will be able to get that index.php file but you won't get that C:\\Windows\\Users\\Mike\\Documents\\www\\index.php path, you'll get C:\\fakepath\\index.php so your PHP won't know where it will write the file to. &amp;#x200B; Someone correct me if this has changed
This belongs is r/lolphp
I still remember when I made it to the top contributors of the week, those were the real motivations man
&gt;Wtf is "promise hell" in the context of async/await?
do you just do a bunch of post and return type of scripting? ie: Click a button (in a form) and it posts to your php script and your php script returns state change 
At first I thought this was an actual desktop, like a windows manager for linux or something. That would be kind of cool. 
Version 5.3 is for php 7.2 : [https://docs.microsoft.com/en-us/sql/connect/php/system-requirements-for-the-php-sql-driver?view=sql-server-2017](https://docs.microsoft.com/en-us/sql/connect/php/system-requirements-for-the-php-sql-driver?view=sql-server-2017) &amp;#x200B;
&gt; But looking at user-data for e-commerce suggest that navigation speed is important. And yet, no major online store actually uses a SPA. Funny, that.
It's hell when you don't know how to use them properly but try to anyway !
Awesome thank you! Now to figure out how to actually pull the data base!!
&gt; And yet, no major online store actually uses a SPA. Funny, that. Well, that is true to a certain extend. And next to SEO ease of tracking is a big reason for that. But Amazon for example uses a hybrid approach where most of the loading takes place asynchronously with JS on certain events (e.g. scrolling), trying hard to deliver all relevant information for the bot and the user (at least above the fold) as soon as possible. &gt; ...most sites that do have a SPA are really irritating to use Agreed. The problem lies in the authorability/maintainability of product pages in this case. But big corporations like Stripe are trying to tackle this issue (which is complex, but not as complex as one might think). The problem lies more in development patterns: workable solutions for a full hybrid would require a team of only full stack developers. Facing the fact that big shops like walmart or amazon have a lot of maintenance and legacy code, such a transition will simply take a while. With growing popularity of the idea to maintain one codebase that deploys into native apps as well as into web, this concept will become more and more relevant, though.
I'd rather use class constants with integer values, and a public static method for mapping those back to human-readable format, for the rare cases you have to do that e.g. an error message
I refer you to my earlier statement of "something is better than nothing". Also, are you saying if a contribution isn't meaningful, one shouldn't bother at all?
Great I will have to take a look. I wanted to use Electron originally but now i could use this. 
That sounds terribly familiar and I feel your pain. On the other hand: what can possibly override something like var_dump &amp; die? Normally I can handle myself through any codebase with that, if the mess is too big. As for the time-delay: there is no good solution. My team established daily 30 min meetings. So what you do is you collect your questions and fire them away during these meetings. It's not perfect, but it is better than sending ad hoc requests. You and your counterpart will automatically align your work accordingly after a while, providing at least some structure. Also, you will be able to forcast what you will tackle the next day, making it possible to request some explanation/documentation in advance.
Stay up late and have him get up early
Yeah I'm using var_dump() and stepping through code right now. One instance that I spent more time than i care to admit was when I was stepping through a foreach() and it worked, but the server threw a 500 error when everything seemed ok. Turns out one of the values I was processing through foreach () was null so it failed. Having a proper error log would've told me immediately. 
Yeah we've been doing that. Had several video calls late into the night, but I think I'm gonna burn out if it keeps going at this rate 
What I would do is agree with the Korean programmer that you will spend 2-3 days making a list of lots of questions, in a structured way that helps. Enough to keep you going for ideally a week or three. You basically diagnose the stuffing out of the app. Every obscurity and obfuscation you list and order by priority. Then you send it to him, and he spends a single day entirely dedicated to answering your questions. The next day, you should be unblocked for a good while in general terms. Meanwhile, every day you keep sending him your new questions, but this time you have a 3 day margin. As long as he keeps answering overnight, you should not have to spend a day waiting for him to do so, because you have a head start - and no one need cut on sleep. When you’re getting blocked again, stop to gather advance questions again, and then proceed. I would guess by the third iteration, you might be familiar enough with the “logic” (such as it is) that you will be less dependent on him. Finally, I find that sometimes rebuilding from scratch is faster and more efficient than refactoring. We pick our fights. So as long as you understand the specs, you might be able to rewrite a new element faster than fix an old one. A combo of this and the above approach should reduce your dependence on him. I guess I’m suggesting a human async interface!
I inherited an application that was outsourced to a remote developer. I made it clear to everyone on our team that the original developer was to continue to be the lead developer for the project. He has the best understanding of everything that is going on and how any new features or changes could affect other parts of the application. When I get a change request, I sometimes communicate what the goal is and what my approach will be to the developer. After doing the work, I send it for him to review and merge. Any work that is too risky (or confusing) to touch, I just assign for him to do the work. Even if the remote developer charges more, it can cost more and hold up other work from being done if you spend 4x the amount of time it would take the other developer to do it. And on top of the time you took to do the work, it could still require additional changes by the original developer. The risk of not doing it this way... is you've invested a lot of your time and still don't quite grasp all of the codebase. You make changes that have side-affects to the code and things break. Then everyone gets sour and mad and point fingers. A good way to help mitigate that is to write tests so that you know if you've done something that has unintended side-effects.
This is pretty good advice. Gonna try to do this more regularly. As for the rewrite vs refactor. I already got the greenlight from the guys that sign my checks to migrate this over to symfony or laravel. The problems usually occur not when I'm refactoring but when all the sudden a critical bug is spotted and I have to fix it on the spot(I.e a paying customer can't do xyz for some reason). I hate having to react to bugs rather than proactively eliminating them but that's the nature of the job right now I guess
I feel your pain. I am in the exact same place. Working for a start-up. Got a working product to market, that was coded in bits as money came in, by separate programmers, beginning with a very bright but still amateurish student. Finally they had investment to hire two devs. What we found is not a single framework, almost exclusively procedural code with a few OOP classes, a single app divided into 5-6 git repositories, 100+ select * queries having to make 6 joins to get at 5-6 selectors but pulling in 148 each time, etc. This means one of us is on rebuilding the app in a modular way using a repository pattern, and one of us (go me!) is on holding the v1 together, refactoring the code, and dealing with daily bugs until a new feature can replace an old one. And not a single unit test. My kingdom for some unit testing. So you are not alone. At least I don’t have to factor in time zones though!
Git and GitHub...
2019: year of the PHP desktop
That's where the time limit comes into play. Make it fifteen minutes, or thirty, but make it consistent! The consistency helps both sides body's adapt better to the stress. 
I ran sudo rm -R from root and forgot to add the folder to the end. Thank Jesus for backups. Had to spin up a new instance.
Setup xdebug In my experience, It will significantly improve your ability to understand and fix the spaghetti code which will translate in a reduced number of times where you find and issue you can't solve by yourself
Just curious - did you use any framework for go or wrote your own (based off the built-in http)
Take a jet to hk. Work there for a while, at least until you have the system dump the errors.
I am building an ADR application based off of [https://github.com/pmjones/adr-example](https://github.com/pmjones/adr-example) the examples are straightforward BUT the applications I am building often displays information outside of the typical payload response. In this repo the data pulled from the blog mapper/service and the page is displayed based on the success of the "command"/"service" but what would be the best method to add the rest of the data required by the page? Should responders list the mapper/repositories as dependencies and pull exactly what is needed for the page or should I create a service for each page that gathers all of the data and inject that into the actions?
&gt; properly There is no properly. So long as you (and your teammates if applicable) can reason about it practically, its fine.
Become nocturnal.
Becocturnal. *** ^(Bleep-bloop, I'm a bot. This )^[portmanteau](https://en.wikipedia.org/wiki/Portmanteau) ^( was created from the phrase 'Become nocturnal.'. To learn more about me, check out this )^[FAQ](https://www.reddit.com/78ilq0).
&gt; Nothing...not even TypeScript addresses JavaScript callback hell. Promises and async/await addresses callback hell. Callbacks are no longer needed.
I live in Japan an so do this all the time in reverse direction. A couple of the other posters were on the right track, but I would tweak their answers a little bit - It will need to be a constantly iterative process. You can't expect to "collect all your questions and then have him spend an entire day sitting down and answering them". He's not going to do that for you (spend a full day) &amp; you're not going to be productive trying to spend so much time in large blocks doing something you probably don't enjoy as much as writing code. It is going to depend on how responsive in general he is, but no matter how good or bad, \*you\* need to consider your day to be made up of 3 sections: 1) Identifying next tasks - he may do all or most of this for you, or you may need to do the heavy lifting. This is the "spec writing" or just grabbing issues from the icebox that should be fed into the pipeline. 2) Creating the actual code plan - using those tasks from #1, go into the code base, identify how you will make the changes, take lots of notes for later - BUT DON'T CODE YET. This is where you get clarification of any type from him. 3) Write code - things that have passed through #3 and you completely understand you can now sit down and just focus on coding All three of these things are happening \*every day\*. You are going to have to shift your mindset from the "one task until complete" way of thinking, but if you put some good tools &amp; a process in place, and try to draw some hard lines between those three, I think you'll end up feeling better about what you are accomplishing each day. &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
In PHP Desktop you have full access to the filesystem, thus you can build custom UI widgets with js/jquery. You can replace the native "Choose file" dialog with your own custom implementation using PHP and js/jquery code. You could reuse or base your code on some existing PHP library that allows you to browse files, see: [https://www.google.com/search?q=php+filesystem+browser](https://www.google.com/search?q=php+filesystem+browser) . Or just do something simple, I think implementing a custom "Choose file" dialog with jquery and PHP is a matter of a few hours.
Just ask for PRs instead of writing code. This doesn't really look active enough to need someone else as a maintainer. If someone really depends on it, they should be able to help maintain it. There hasn't been a substantive commit in over 4 years. I don't really know what you expect here.
Except you can use await with promises...
Still has active job postings
Ouch, man, what did we freelancers do to you? I don’t sweat labels, but I’ve been supporting my family working full time as a freelancer since 2011. I guess I’m blessed that my 5 long-standing clients don’t mind slumming it with an “amateur” like me.
Communicate through email but be through in your requests/responses. Don't ask peace meal queries but combine them into a bulleted list, be clear and precise. This approach has worked for me in my last company where the onsite client was based in UK and our team in India.
О́Я
So, in our team, members are spread across the globe. We have Western Europe as our leading timezone and Brazil often gets up a bit earlier, whereas Indonesia stays up a bit late. We try to have at least a 3 hour overlap between working hours and we all attend a daily scrum of 15 minutes, so there is enough time to discuss things. This works for everyone, because the members on either side of the globe work a few hours in the morning and a few hours in the evening, giving them time to go about their day in the afternoon. If you work as a real team, then you get a lot of benefits from this. If I want to quickly iterate on a story, I assign my pull request at the end of the day to a member in a time zone that starts their first shift while I sleep. Same thing for deploying applications in other time zones. You say you can't keep on doing video calls in their time, but why is that? Are you doing that on top of an already full working day? That's probably where you can make some improvements to keep a bit of overlap and still stay healthy. 
I mean what I said - some light lifting for someone who wants to learn about how to manage packages. maintaining packages is far more work than most people realize, which is why so many maintainers burn out. this is an easy way for someone to get their feet wet
There's no reason to use an if/elseif/else structure over a switch structure. If anything, the switch, by forcing only a single comparator, is cleaner. Consider this if/elseif/else, which couldn't be replicated as a switch, and is frankly a mess: if ($a == $b) { } elseif ($c == $d) { } else { } Having said that, a large switch or if/elseif/else is a code smell. It's *just possible* that with some redesign there *may* be a simpler way to do what you're trying to accomplish. An example where a switch is the best possible solution: in the heart of a state machine.
Two biggest issues: 1. It might suggest a code smell. Consider why you need to check a variable against so many different values to justify using a switch. Is there a better approach? 2. They can be error-prone. Accidentally omitting a `break` is an easy bug to make, and intentionally omitting a `break` makes the logic harder to follow. Switches do have their place, but it's rarely the first tool I reach for. I wouldn't worry about performance. Worry more about readability and maintainability than nanoseconds of difference. Choose whichever approach you find most readable (or alternatively, is considered more standard).
It’s not about whether you should use them, but _why_ you should use them. Without an example it’s impossible to say. That’s specific to your use-case. Just make sure to compare the same type within the switch.
Just use switch. Or use if/elseif Or use an associative array pointing to handler function or function closures. Unless for some reason you need to micro-optimise the bejesus out of it, just use whatever you feel gets the job done in the cleanest and most time efficient manner. Whichever road you go down, just try to avoid putting a metric shit ton of unrelated code inside the actual blocks. 
&gt; Just make sure to compare the same type within the switch. This is what I thought. You give up some type safety with PHP switch.
But you don't have to you can use promises the same way you used callbacks, then later refactor to use await
Well, the fundamental problem with switch statements is they use loose equality comparison if I recall. This is potentially a security risk. If you want to use strict equality `===` (which I strongly recommend, always), then you have to use `if/elseif` constructs instead.
Yes. http://php.net/manual/en/control-structures.switch.php &gt; Note that switch/case does [loose comparison](http://php.net/manual/en/types.comparisons.php#types.comparisions-loose).
To wet their feet in *what*? What's the attraction of maintaining a package you have no relation to? Will it give you a better job opportunity? I always had an impression that maintaining a package is not a hobby of its own. It just a supplement to having a package one actively uses in their everyday job. Or, feeling owing to people who are still using it, carrying this burden a bit further. But I don't really get why someone would voluntarily maintain a package they have no relation to. Don't take me wrong, I pay all due respect to people maintaining open source packages, the whole industry owes to them. But I am genuinely puzzled as to why someone would want such an experience. If they don't plan to have a package of their own, then simply why? If they do - why would they want to train on someone's else instead of starting with their own right away.
Wow. Didn't know that sub was so dead.
If someone cannot explain why something is wrong, then they have no idea on that. Just shrug it off. If someone says switch has performance issues, then they are an outright idiot, just never listen to what they say on any topic. You should seriously reconsider your peer reviewers. Generally speaking there is nothing wrong with switch per se, there is not even a fraction of an outcry that goto or global would arise. Of course any statement could be abused. But as long as someone is unable to provide a certain argument, not on the imaginary switch statement that could be potentially wrong in some distant universe, but on the particular switch you have at hand, just let it go.
Never heard people disliking Switch. I use it to capture $\_GET variables from the user and display info depending on what he has chosen. If i would do that with an IF ELSE it would be a huge mess. 
It's a code smell that results in writing lots of almost identical code. See https://sourcemaking.com/refactoring/smells/switch-statements for more details. There are circumstances where it's useful, but there are often better ways. I've found the best alternative is to use polymorphism. There's more details at https://sourcemaking.com/refactoring/replace-conditional-with-polymorphism
The comparison point is the only solid argument against switch statements I've ever heard. Some people compare them with if/else chains and mention performance but I'm pretty sure that most programming languages turn them into if/else chains when compiling anyway. I believe that PHP does this too. As a pro tip for OP, always include a break, and if you decide not to, put a comment that clearly states that the omission was intentional. Then just use switch statements or if statements, depending on which makes more semantic sense, or is more readable. Nothing wrong with switch statements apart from the comparison caveat.
&gt; Consider this if/elseif/else, which couldn't be replicated as a switch, and is frankly a mess: &gt; if ($a == $b) { } elseif ($c == $d) { } else { } I prefer using `switch(true)` in these rare cases, which actually does replicate the above code as a switch. switch(true) { case($a == $b): // Do something break; case($c == $d): // Do something else break; default: // Do something by default break; }
Are you interested in being a maintainer? Otherwise, kindly move on.
Apart from the things already mentioned, switch-statements are often used to violate the open/closed principle. Look up "inversion of control" to see how this can be avoided. However, this is not a problem with switch per se, if/else cascades would be just as bad.
If you are using a compiled or interpreted language does it really matter? The CPU doesn't care.
Pretty sure you're the anti-christ :) But hey, each to their own. I switch on arrays to express truth tables: switch (array($foo, $bar)) { case (array(FALSE, FALSE)): case (array(FALSE, TRUE)): case (array(TRUE, FALSE)): case (array(TRUE, TRUE)): }
Quickly searched for one of my projects for a real-world example, since I remembered using it somewhere. Here's a snippet of my Google Calendar handling code. // Determine token parameter to use (syncToken or pageToken) switch (true) { case $pageToken: $this-&gt;logger-&gt;debug(sprintf("Fetching page %d", $requestCount + 1)); $params["pageToken"] = $pageToken; break; case $syncToken: $this-&gt;logger-&gt;debug("Performing a partial event sync using syncToken."); $params["syncToken"] = $syncToken; break; default: $this-&gt;logger-&gt;notice("No syncToken provided. Performing full sync."); $isFullSync = true; break; } Now as a disclaimer I must mention that the code above is nested in a `do while` loop, which in itself is not something you see every day, but sometimes you just need to get the job done.
don't forget the foreach loop with switch may require break 2 or continue 2 in php 7.3 it throws warnings when you aren't specific!
You could use XAMPP or WAMP and install it to whatever computer you are using for teaching?
You make a very good point about enforcing strong equality comparisons. That would be my reason not to use a switch statement in the example that the OP gave (something about a webhook that gets called repeatedly makes me think it is taking in user input or is susceptible to a user modifying the input that get's passed to the webhook or something something, you get it). However, as a construct it's fine. A switch statement in PHP is fine if you control the values. The classic "basic calculator app" exercise of writing an app that does exactly what it's title implies would be well suited for using switch statements. It's just worth noting that it isn't a useless language construct by any means; just one that needs to be applied thoughtfully.
I don't see how is this different then bunch of ifs
This might be a valid case if the get parameter is just influencing minor differences in the way something is displayed for example. But if you are using it to call different classes or methods to generate completely different data or pages, then you are in dire need of a router. Using a switch or an if/else is definitely the wrong tool for that. Exchanging one for the other doesn't fix the problem.
its great to knw that you are doing great work i can share some hosting for you at 0$ cost.
Given your only other question and your grammar, I doubt you are really a teacher, sorry. Even from a developing country. Especially given one don't need a live site to teach php an mysql - a local web-server would do as well. 
I suppose you mistook my expression for some sort of hostility or attempt to unfairly slam someone. I don't hold one, that's just an observation. And in terms of software development, by itself, generally a 5+ freelancer will be equal to beginner-junior level "corporate", I'm not saturating here to make a point. That's common reality when hiring. And it's not to say that freelancers don't do a good job at what they are doing. Just what they are doing is not software development as much as it's managing clients and delivering "projects". And it's common that they don't even encounter whole plethora of problems software focused folk do due to small scale / requirements / per-project work flows.
000webhost It's crap but it's for free. 
I still use it because I can publish a github code in a snap. 
I am beginner in 'PHP' and had basic knowledge, I'm thinking about making a Web Based Voting System. The Problem is i do not know where to start? Should I start in Admin Dash Board with full privilege or user with limited access? Please Help me.
I am beginner in 'PHP' and had basic knowledge, I'm thinking about making a **Web Based Voting System**. **The Problem is i do not know where to start?** Should I start in Admin Dash Board with full privilege or user with limited access? Please Help me.
just start somewhere
If sou can use an if-else statement to replace a switch, don't use switch, that's not where its power ist. If someone tells you the performance is the issue ist just bullshit, if switch statements are you performance bottle neck, I salute you. Ok, when to use a switch? There are mainly two cases 1. You have more cases than actions to perform 2. You need to perform more than one action per state Case 1: `switch ($i) {` `case 0:` `case 1:` `case 2:` `oneActionForThreeCases;` `break;` `case 3:case 4:` `oneActionForThreeCases` `}` &amp;#x200B;
**We solve business needs** and it is how they (the business) value us. For example, let's say a car, it's composed of a motor and tires. Technically, both are vital, however, business speaking, the motor is more valued not only because of the costs but because how it feels to the business (it's build by a motor company, not a tires company). It is the same with packages, it's not about the number of packages but how each package generates incomes or they are valued in the business. So, is it possible to rank and sort (by importance) the top 10 packages?. 
just start somewhere
You could use a template system. I write an article about it. https://medium.com/cook-php/a-basic-catalog-of-products-made-with-php-b336988be58f In sum: * You will need composer (you already have it). Install a template library: &gt; composer require eftec/bladeone And let's say that you want to show a table. It is your actual code: 📝 table.php ```php &lt;?php // this header must be shared amongst other pages echo "&lt;h1&gt;It is the head&lt;/h1&gt;"; echo "&lt;hr&gt;"; // end of the header. $list=["cocacola","fanta","sprite"]; echo "&lt;table&gt;"; foreach($list as $drink) { echo "&lt;tr&gt;&lt;td&gt;".$drink."&lt;/td&gt;&lt;/tr&gt;"; } echo "&lt;/table&gt;"; ``` It breaks SRP. Using a template, you will need two files, one is the "controller" (or the name that you want to use), and the other is the view. 📝 productcontroller.php ```php &lt;?php use eftec\bladeone\BladeOne; include "vendor/autoload.php"; $list=["cocacola","fanta","sprite"]; $blade=new BladeOne(); echo $blade-&gt;run("productsviews",['list'=&gt;$list]); // it calls to views/productsview.blade.php ``` 📝 views/productsview.blade.php (views is a folder) ```php @include("header") &lt;?php &lt;table&gt; @foreach($list as $drink) &lt;tr&gt;&lt;td&gt;@$drink&lt;/td&gt;&lt;/tr&gt; @nexteach &lt;/table&gt; ``` 📝 views/header.blade.php This file could be added to each using the command @include("header") (or the command used by the template) ```php &lt;h1&gt;It is the head&lt;/h1&gt; &lt;hr&gt; ``` 
* Don't ill talks about anything, for example, don't talk about a past employer. * Just say what you know and if you don't know, then say it. * Use the words "willing to", i.e. "I am willing to learn something new". 
&gt; Unlike JSON Web Tokens (JWT), which gives developers more than enough rope with which to hang themselves lol. 
As described, $syncToken may be TRUE and that branch still not fire. IMO that's counter-intuitive and I would prefer to put something more obvious in front of future maintenance programmers.
Switch statements and if-else statement are two different things and people use if-else because they use it all the time and therefore understand and like it more. Switch statements can make code much more readable and there are things you cannot do with an if-else statement, but with switch. Thats why you should know and use it. (If switch statements are your performance bottle neck, I salute you - this argument is in most cases BS.) &amp;#x200B; Ok, when to use a switch? When you have more cases than actions to perform, to make it more readable, if-else statements get harder and harder to read with longer expressions, while the switch statements remains easy to read and to skim over. Like this: switch ($i) { case 0: case 1: case 2: threeCasesOneAction(); break; case 3: case 4: twoCasesOneAction(); break; case 5: case 6: case 7: case 8: case 9: case 10: twoCasesOneAction(); break; } &amp;#x200B; You also want to use a switch statement, if you have a process, but you the amount of steps you need execute depends on the state of the value. This is a little more advanced. switch ($i) { case 0: failed(); break; case 1: stepTwo(); case 2: stepThree(); case 3: stepFour(); case 4: stepFive(); case 5: stepSix(); } &amp;#x200B; In this case if `$i` is `3`, you would execute: `stepFour(), stepFive() and stepSix()`. Because the switch state meant will only stop executing code, after one case matched, when it hits either a break, or the end of the statement. It will ignore if the other cases will match, but still execute the code. This fall through behaviour is very powerful. If `$i` where `0` you would execute everything, you would just execute failed() and nothing else. &amp;#x200B; Lets extend the example: switch ($i) { case 0: failed(); break; case 1: stepTwo(); case 2: stepThree(); break; case 3: stepFour(); case 4: stepFive(); break; case 5: case 6: stepSix(); break(); default: failed(); } `$i = 0 = failed()` `$i = 1 = stepTwo() &amp;&amp; stepThree()` `$i = 2 = stepTwo()` `$i = 3 = stepFou() &amp;&amp; stepFive()` `$i = 4 = stepFive()` `$i = 5 = stepSix()` `$i = 6 = stepSix()` `$i &lt; 0 || $i &gt; 9 = failed()` &amp;#x200B; This is very power full, but also very open to absurd through complex and long constructs and I think this is the reason, people tell students and junior developers to not use it, because you need to know the behaviour and you need to apply good judgement. On the other side this is also true for crazy if-else constructs. &amp;#x200B;
Damn I actually like that a lot.
Personally I would ignore anyone who can't explain why the code you have written isn't fit for purpose. Just blindly following what people say will result in endlessly changing your code because...reasons, and not really progressing in your abilities. The switch statement does have sensible uses. The best way to explore what the uses are is to assess the quality of the code as written from first principles. The following comes with a pretty concrete caveat: you can spend forever trying to optimise your code and end up never finishing your project. Over optimisation is a genuine risk. This is similar to starting a business and spending too much time trying to really perfect your product before getting out there, selling it / doing your taxes / engaging with the market / etc. It is of course an important skill to be able to smell code that will cause you issues the future, or is causing a performance bottleneck or runs a security risk etc but spending your life worrying about switch statements could be a real roadblock and...frankly make writing code less fun and interesting. Code optimisation is often a trade-off between a lot of different things, some of which matter more or less now - for example if you have a product that has a serious security flaw that is being exploited then fix that first, just get it done and don't worry about anything else. Whenever I think about writing new, or improving existing code I think about the below, none of which are hard and fast rules, everything is a trade-off including how you choose to use your time: Does it make sense to me now, will it in six months time? Some code can be so conveluted in order to make it work that without spending a lot of time reading it and running through it line by line it is not clear what is going on. Code should be explainable to novice programmers and quickly understandable by you in future Am I polluting the global domain? Is my code well organised into sensible structures? For tiny projects using minimal structures (classes, abstractions, dependency injection, facades, APIs, libraries etc) is fine. But you will quickly find that in future you will cause problems. Organising your code well helps avoid this. What performance bottlenecks are there? It's important to understand the performance of each part of the code. There is zero point in gaining milliseconds by replacing a switch with some other decision making method if the webhook it taking 10 seconds to resolve. Basically, worry about the most important problems and push everything else down the list. Plan for the scale of the project and put your time in where you think it matters most. Personally, I have no problems with switch statements. From memory in PHP else if statements are very slightly faster in some circumstances. It is likely the compiler will crunch them down into virtually identical code anyways. Just go with what is most readable to you. I usually use them in situations where the decision has more then 4-5 options as it is clearer what is going on. I imagine someone much more skilled than I will have actual performance statistics available to compare the options but I can nearly guarantee in your case it doesn't really matter. 
You should check out https://0fees.us - it's pretty crap but it can get the job done
This is a really good point. Not a reason to avoid switches but an important thing to be aware of.
It's not a typical construction - it'll pull somebody up in the future. Use sparingly and document - maybe even put an ascii truth table in the comments.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/phphelp] [PHP Development Stages](https://www.reddit.com/r/PHPhelp/comments/aorks5/php_development_stages/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Switch statements or long if/else chains would be better represented with polymorphism https://refactoring.guru/replace-conditional-with-polymorphism
If switch can be used it is definitely better (more readable) than if-else constructs, but switch itself can be often replaced by more flexible/extensible mapping (to different strategies). That's all there is to say without context. The real issue isn't switch statement but the context it is often used that results in repeated (temporary) branching and destorying application modularity with hardcoded dependencies. Switch itself is "the reason to change" which is fine in factories or dispatching in outer application layers where you decide on wiring concrete objects. You might get away with it within leaf node objects (no dependencies), but it can turn into mess really quick when overlooked during next change. Nice example here: [Bob Martin on Open-Close Principle](https://youtu.be/TMuno5RZNeE?t=3725)
Im a beginner in php but i like your answer. Its true that i need to start somewhere. Hahaha
Your biggest problem is not starting. Start and then you start learning. 
Just what I wanted to suggest. Then maybe set up the router and some free dynamic DNS so that kids in remove villages can access the server.
I started the login &amp; registration section and i am wondering what should i do first. The admin panel or the user section. 
Ever thought that they might not be fluent in English because they are not living in an English speaking country? In Germany it is not uncommon to know little to no English as a teacher for arts or maths.
I doubt it really matters, you have to do both at some point. Focus only on what you *must* have. Really, just get a basic MVP working and then refine later.
thankyou all for responding i will try the suggestion 
The problem with switch or if/else is growing 1:m complexity. If your input argument is string/int, you can resolve that by isset keys with 1:1 complexity.
Thank you so much for answering my questions! I'm sorry for my late reply, I've been sick a lot so this project hasn't been on my mind as much. Your comment has given me the right pointers to find what I'm looking for, thanks a lot!
It is not only grammar. The overall style is such immature that you hardly believe someone responsible for a couple dozen kids would ever write it. 
Setup a forum? Depending on the team I'd go for that. With more familiar people I'd add a slack as well. I feel stuff such as threads could be very useful for documenting personal stances on specific subjects, as well as being a very easy way of organizing internal documentation.
There isn't a properly but there is an improperly! _Unhandled Promise Rejection_
I think, firstly start to analyze your project, how it's gonna happen? And then start to model of your db and find your theme, and then bind your datas
You want to make a voting system, so make a voting system. Login, registration, admin panel, user section... it's all stuff that is only indirectly related to voting. Start with the voting first, and then fill in the gaps later. You don't need to be able to login or register in order to vote. Those are things you will want to add in eventually, but they aren't the core idea of your app, so it doesn't make a whole lot of sense to start with them.
Logically it serves the same purpose, it’s just preference.
a car isn't useful without both motor &amp; tires. a more apt analogy is as follows: * a car is composed of an engine, a body, an interior, a dashboard, an exterior, and tires * Manufacturer A produces the engine &amp; body * Manufacturer B produces the interior &amp; exterior * Manufacturer C produces the dashboard * Manufacturer B provides the seats, but you opt for third-party seats from Manufacturer C * Manufacturer A specifies that the tires must adhere to a particular standard, suggests Manufacturers D, E &amp; F. You opt for Manufacturer F.
But that's exactly what `if elseif` does. If the first condition (in this case `$pageToken`) is true the second condition (`$syncToken`) will not fire regardless of whether it's true or not. What you're seeing is essentially `if($pageToken) {}, elseif($syncToken) {}, else {}` just written in a different way. It might make more sense in the full context.
In most languages, I prefer `if` if I'm using logic to decide what to do and `switch` when I'm just matching against pre-known values. E.g., if ($foo &gt; 3 &amp;&amp; $bar-&gt;isUseless()) { [...] } switch ($foo) { case 0: break; [...] } However, as someone else mentioned, PHP's switch does loose comparison, so I avoid it. Yay PHP... **sigh**
I agree, a car isn't useful without a motor and tires, and it is the same with the libraries, most of the libraries are required, even if they are small libraries. However, you can't put in the same degree of importance motor and tires. For example, let's say the Motor is the library **phpunit/phpunit**. Everybody knows about PHPUnit, and it is added to most projects. And let's say the Tire is the library **sebastian/exporter**. Do you know this library?. I don't, but it is a requisite of **phpunit/phpunit**. Can we remove it?. Nope (it's the same than the tires), however, we couldn't give the same level of importance than **phpunit/phpunit**. 
Entirely depends on what you’re attempting to do. Switch-case statements do raise your cyclomatic complexity, although that unit of measurement itself is contested. At the very least it’s not goto, and there are points where it just produces more code to write if-else blocks such as setting different variables for different environments (prod/dev) or whatever.
Yes. But the if/elseif/else construction is more common. Maintenance programmer wants to get in, fix, get out. Maintenance programmer doesn't want to see weird construction and be made to *think*. (Both constructions are bad, I think we've established that, but this one's bad and uncommon. All IMO, obviously).
I agree. switch statements are great for integers and basic strings. I am writing code to export for different versions of popular LMS. My controller loads different models based on which version we need to export in. A lot prettier than a bunch of if/else statements
No its just including different kind of forms from other PHP files depending on the get variable. Would never use it to call classes/methods.
There aren't that many frameworks in Go-land as we know them in PHP, especially 2-3 years ago. Most are taking care of a specific thing like routing, sessions, cookies, etc. Although nowadays there is Buffalo and perhaps something like Echo. I mostly used the standard library with help from [go-chi](https://github.com/go-chi/chi) and the [gorilla toolkit](http://www.gorillatoolkit.org/). No ORM either, although I did use [Meddler](https://github.com/russross/meddler) (which I now help maintain). 
you can use amazon ec2 free tier, but that is require setup environment by yourself. it’s easy with lamp or docker. 
`&lt;?php` `$trackers_array=array("https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best.txt",` `"https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all.txt",` `"https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all_udp.txt",` `"https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all_http.txt",` `"https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all_https.txt",` `"https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all_ws.txt",` `"https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best_ip.txt",` `"https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all_ip.txt");` `foreach ($trackers_array as $trackerlist) {` `$data = file_get_contents($trackerlist);` `$html_encoded = htmlentities($data);` `$trackers[] = $html_encoded;` `}` `$tracker_list = implode("", $trackers);` `$tr = preg_replace('/\s+/', ' ', $tracker_list);` `$tl = explode(' ', $tr);` `$final = array_unique($tl);` `foreach ($final as $resultados) {` `echo $resultados . '&lt;br&gt;';` `}` `?&gt;`
&gt;Would it be better if there was just if-elseif statement? Why is bad to use switch in the first place? For most uses to handle conditional flows it's best to only use IF statement, ditch the else part too. Other folk pointed out the problems with \`switch\` when used for condition control. &amp;#x200B;
the car analogy doesn't quite work. Otterfan got me thinking about the value of a package as being a function of distance from a project's own dependencies/dev-dependencies. Let's consider the two packages you mention, phpunit/phpunit &amp; sebastian/exporter: Say hypothetically, out of all packages that require both phpunit/phpunit &amp; sebastian/exporter, phpunit/phpunit is only referenced in require-dev so it doesn't get installed. This puts sebastian/exporter at a distance of n and phpunit/phpunit at a distance of n+1. Depending on how you feel about OSS compensation, you'd either say "sebastian/exporter should get a bigger share since it's considered useful to the packages I consider useful, but it's less useful overall", or "phpunit/phpunit shouldn't get any share as it isn't actually installed". Now let's say you require-dev phpunit- it's now at a distance of 0 (or 1 if you want to consider require-dev "less useful"). Is phpunit considered more useful than sebastian/exporter because it's got a shorter "distance" than sebastian/exporter, or does the usefulness depend more on how many other dependencies causes sebastian/exporter to be installed?
Hi there! This might be a good starting point: http://paul-m-jones.com/archives/6760 As for the individual questions: &gt; Should responders list mapper/repositories as dependencies and pull exactly what is needed for the page? No; as part of the presentation, Responders should not be interactive with the domain. &gt; Should I create a service for each page that gathers all of the data and inject that into the actions? Yes; cf. the above "Widget Problem" article. &gt; Since page data may change over time should Actions/Responders call the mappers or repositories directly, pull whats needed and add to view data? I would say that the Service should do that work, and return it in the Payload (again as per the above Widget Problem article.) Let me know if that helps!
What are you trying to achieve - as in what output is required? 
The output would be the the tracker lists without duplicates
Wait... what? First you create array of datas from downloaded resources then you smush array and remove spaces then explode it back then go unique on said array &amp;#x200B; Why doing this many array operations? first - instead of \`file\_get\_contents\` use \`file()\` and pass \`FILE\_IGNORE\_NEW\_LINES\` and \`FILE\_SKIP\_EMPTY\_LINES\` as flags. Use array\_merge to merge obtained data and then use \`array\_keys(array\_flip($array));\` to get super fast unique values. Last foreach is ok.
Thanks for the suggestion didn't knew i could do all with file
&gt; but I'm pretty sure that most programming languages turn them into if/else chains when compiling anyway. I believe that PHP does this too. At least historically in C a switch could be compiled to something more optimal than an if/else chain in some cases. (And that 'some case' was quite likely if you were switching on an enum value or some other common things) I imagine that for any reasonably modern compiler it can discern that a switch with a break in all cases and an if/else block over the same cases describe the same behaviour and therefore can be compiled identically. 
Ok, so Johnny_Bit beat me to it, but yeah like this: $github_prefix = 'https://raw.githubusercontent.com/ngosang/trackerslist/master/'; $github_suffix = [ 'trackers_best.txt', 'trackers_all.txt', 'trackers_all_udp.txt', 'trackers_all_http.txt', 'trackers_all_https.txt', 'trackers_best_ip.txt', 'trackers_all_ip.txt' ]; $trackers = []; while($suffix = array_pop($github_suffix)) { $trackers = array_merge($trackers, file($github_prefix . $suffix, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES)); } $trackers = array_keys(array_flip($trackers)); foreach ($trackers as $string) { echo $string . "&lt;br /&gt;"; }
amazon asked for Credit Card which i dnt have, thankyou for ur response
Thank to you both, this way it's way way more faster, than the one I was doing. . 
A good way of thinking is that if something is repeated more than twice, you should probably rework it to be more compact and reusable so you easily could add more items in the future.
Glad it helped, feel free to ask if there is something else
/r/phphelp/
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
No problem :) Speed wise - any optimization gained from not using preg* and all those array functions is so minor compared to the latency of file() pulling those text files from github - you're probably only gaining a few milliseconds. More importantly is readability and maintainability - if I was using this at work, I'd turn it into a function (more likely a private method in a class) and add some error handling in case github is down and file() fails. For readability I'd also probably breakup that while statement so it's clearer to others what's going on.
You can turn a spare computer at the school into a web server that can be accessed from the school only. Totally free, but you maintain it. :)
I would definetly start with the voring. Make it so you can vote and it get saved. Then add a way to add new polls, and then in the end add authentication / user dash. This is the way i would do this, and sounds the easiest to me. Always split your problem into tiny sections. This will keep it interesting, and you wont get lost as quickly.
It's not "bad", it's just not the first tool I reach for. The only time I've ever gone for them were in cases where my conditionals required more than 1 `elseif`s. But in the event that happens, I also look to see if my application can be architected better. When you have that many conditions to check for in one spot, it usually means that something should be improved.
The cool “new” way to do a switch is a hashtable full of classes that implement a certain common interface. You could even fake a default with magic methods! Even that is prone to loose == comparison, but at least you have yourself a certain degree of security that you or no one fucks up by adding a new case that screws it all. And by no one I mean yourself in a couple months.
You could use it locally. I suggest you take a look at [Laragon.org](https://Laragon.org) \- it's alternative of XAMPP and it's much easier to setup and use. There's also a portable version that will allow to be run from USB drive (no installation required). 
The OP’s question had nothing to do with code quality or type of work, but rather hours per week and expectations from management. I have 5 “managers” who live in 3 different time zones spanning the globe, any of whom can electronically “walk into my office” at any hour of the day with demands on my time. My entire professional life is having the discipline to do a great job without needing management to walk into the office, and learning to build relationships with managers such that they trust the work I’m doing without assuming that more hours == better production. I think that puts my experience, and that of others like me, squarely in the room with what the OP is facing. I happen to agree with the first reply, so I upvoted that and didn’t see the need to comment further until I saw your reference to people of my ilk. 
How about the node.js based ecommerce platforms ? Are they ready ? 
First, nowhere I've claimed that more hours == better production. What I've stated, that more hours is one of the main indicators that the person is actually dedicated. If the person is first to rise up from the desk at 5 o'clock, when that person cares more about his time, than doing the job. And while it makes perfect sense from person's perspective depending on personal goals, that usually is not in line with business goals. That's a problem when you're actually competing. People who put in 10% more time usually end up with 40% more, as not only you get paid 10% more, you're be first to be considered when new opportunities comes. And those scale progressively. I'm not entirely sure why are you taking this so personally. Stating that freelancers are generally less competent in software engineering, key words being "software engineering" is around the same as stating that sea water is salty. However, my primary point to exclude freelancers here, due to the fact that a lot of freelancers work for money as a mean to their personal ends. For example, travel a lot. And it's fine if that's persons thing. More power to you, enjoy your life. But there are people who take deep pleasure in climbing and competing. People who enjoy refining their craft. People who enjoy building something and seeing it work or battle out in the market. And this is way more compatible with business goals. So if you end up in such company's culture, it's not unfeasible that other people including the CTO may think that such person isn't a good fit. And perhaps it's even not a good fit for person in question too.
Woah - I wasn’t saying that you said that about hours. I was referencing the original question’s focus; that the OP is concerned that his management thinks that. Not to be too transparent, but I’ll answer your question about why I’m taking your comment personally: I’m one of those people who take deep pleasure in doing excellent work, in building products that my clients need to compete in their markets. So when someone comes along and blankly states that I don’t belong in the room with real professionals, then yes, I take I personally. Wouldn’t you? I don’t need you to tell me that somewhere out there are people who care deeply about their work and want to be the best at what they do. I’m one of those people whether you believe it or not. 
One reason your standard advice won't apply, is that this is a temporary problem. You're organising things so you don't need to deal with this guy eventually, not trying to build a team. I don't think it's too much to ask he be hired on support hours that go outside the normal workday - say pay for 10h of support from 8-10pm that you can use over the coming month. You'll pay a premium for it but it'll save you money vs losing entire days worth of your time. When it comes to migrating away from legacy code, you'll want to abstract their work out as much as possible. You don't want to care too much about how it works, because that's always going to be a mystery. Wrap what you can in classes that load and run their code. I'll often setup an autoloader as my first step, that knows how to grab classes from the legacy directory. e.g. if there's an old `User` class, you build your own `User` that knows how to load from `OrgName\Legacy\User`. grep around for `@` (error suppression) and every try catch. Definitely implement a custom exception handler too. If you haven't already, have a meeting with whomever's setting the requirements and figure out how much that this old code does you need to keep. There's likely a lot of cruft you can drop outright, or things that have hundreds of lines of complex nonsense you could replicate in a few lines or an existing lib from packagist.
I think we are being lost in translation here so to say. Freelancer who does web development or even smaller agencies which do web development for third party clients do different type of work than those who program in a bank for example. Scale, complexity, workflows are not on par. There exist different set of requirements for doing "excellent work" within those domains. And no I wouldn't take it personally if someone said I wouldn't make a good freelancer. Because, well, I'm not good at it.
That may sound as a bummer, but we do get people who been doing Laravel (not even wordpress) for 5+ years. And I don't a recall a single "mid-senior" freelancer who is fit for anything higher than junior position. And it's not done in demeaning way or "looking down" type of thing. Like any other company we can't afford the luxury to reject people on such stupid notions. It's just that they generally lack competence. Which can be addressed, but it takes time and not all are willing to start from "junior" given their alleged deep experience in the field.
All I was pushing back at was your declaration that freelancers don’t qualify as professionals. I’m more than willing to agree that what I do operates in a looser environment than some other avenues of software development, but that doesn’t mean that the “projects” I work on aren’t software or that I’m somehow undeserving of the title “professional”. All that aside, I come to this subreddit because this is my water cooler. I need interactions with other developers. The nature of my job involves a lot of isolation, and I know I need interactions with others to push me. I suppose I took your comment a little too personally, but it felt like you were petting me on the head as a little kid and saying, “Sorry, little buddy, but this conversation is for the real pros in the room; you go play with your PHP ‘projects’ over there in the corner with the other kiddies.” 
No “bummer” here. If I walked in for an interview I’d never expect my freelance experience to translate apples to apples with corporate experience. However, that doesn’t mean I deserve to be called “not professional”
And that's why I put "software engineer" as a qualifier to specify what I have in mind. People who dedicate and earn the living from specializing in that thing. Corporate environments allows for such specializations. While freelancing usually does not as one has to have other competence to get the gig going like efficiently engaging with clients, project management etc.
Fair enough. Maybe I’m just overly touchy from lack of sleep heading towards a new product launch.
There is also OpenShift, I believe. Its pretty decent and has a free tier too.
Perhaps I was too quick on the word choice. So apologies. As I've previously stated. I don't regard freelancer web developers as "lesser" or something. It's just different type of work with different set of requirements. And me personally, do not fulfill those requirements. I also think that there is something to learn for me from your type of work. And it has to do more with rapid-development skills. When you know when it's okey to cut corners and "get shit done". Rather than getting stuck over thinking of some abstraction when it's better just to write functional code, perhaps mark it as tech debt and move forward.
There must be still such motivating sites around, where do the CS students in need of motivation gather online these days?
If you can't afford https://www.vultr.com/pricing/'s $2.50/month plan, no matter where you are in the world, then I question your resolve.
0.o wow. I'm seeing my idea written exactly as I would o.0
I do sometimes have to leave TODO annotations and move on. Other times I have to convince my client that we can’t leave this as-is because it won’t scale. I absolutely do not mean this in a confrontational sense, but an honest question: are you saying that corporate software engineers never have to make such compromises and put something off until a future release?
I think you did not understand, let's say I want to create a text editor kinda like Atom or VSCode, let's say I open an index.php file, what am I going to pass from JS to PHP? What are the things I need? 1. File name 2. File content 3. File location (absolute path) So when I'm done modifying my file PHP has to write on it right? How does PHP know what file is it going to save? all they got was the file name of index.php and the content, and the worst part is... I am using linux and it still gave me that crappy windows thing of C:\\fakepath\\filename.index &amp;#x200B; This is why this hasn't taken off, try doing it yourself, maybe for an application that doesn't need to modify files outside the www folder itself it's okay, or for an application that has pre-defined paths, otherwise this doesn't look promising if I cannot have full access to a file absolute path through the javascript and what I used was vanilla javascript with a very simple input, I've used fileReader API, events to read directly from the file &amp;#x200B; There isn't much you can do with this man, you need to modify the CEF to return the full path &amp;#x200B; Try it by yourself: `&lt;input type="file" name="" onchange="readText(this)"&gt;` `&lt;script&gt;` `var reader = new FileReader();` `function readText(that){` `console.log("File path: ",that.value)` `if(that.files &amp;&amp; that.files[0]){` `var reader = new FileReader();` `reader.onload = function (e) {` `console.log(e)` `}` `reader.readAsText(that.files[0]);` `}` `}` `&lt;/script&gt;` &amp;#x200B; You came way late to the party and came without a very important feature, I've not yet checked the CEF source code to modify that and return the full path, maybe it has to be changed directly within the V8 engine, but in its current state this thing is very very limited, there's no way this thing has a real chance against Electron &amp;#x200B; If you want to know what I'm talking about watch this please: [https://imgur.com/a/sQ4H9JP](https://imgur.com/a/sQ4H9JP) 
Much has been said already bout switch, pitfalls like missing break, no/wrong default, etc. Facebook API developer, also dealing with Webhooks. For anyone familiar with the FB API, it has _a lot of variations_: the switch statement is appropriate for such cases, everything else makes matching 10+ different status items unreadable. For your conscience, it maybe would be good to abstract it in a single method, like `dispatchWebhook(array $item)` or something (it does one thing and it does it well).
We do need to make compromises too. I mean I wouldn't identify it as one of the areas where I could do better. But generally we don't need to put much effort in convincing the business over something. And pretty much all code which reaches production has to be written in way that is open for extension but closed for modification. It sounds cheesy as I'm quoting SOLID but that's really the case. Lets try a silly made up example to illustrate: You have to make a service which counts sold products. After a week new requirements, we also need to display not sold products. Now, you can't simply substract sold from total to get the number, what you gonna do is build separate service which returns you leftover products. Because doing the previous would introduce dependency on sold products, which if changes may break your second service too. Now ofc it's silly imaginary example. Because obviously just query the database, but I'm giving it just to illustrate a point. It's more time costly. But it's more robust.
I can set you up a database on my server and allow you access on my vps. Php7/MySQL 
I do `switch(true)` a lot :) It's nice to do strict comparison vs loose (even though the final `(true == result)` is loose it gives slightly tighter control. It's also much more pleasing to see: switch (true) { case option1: case option2: case option3: ... break; case other: .... } thank to see a massive `||` if statement IMO.
I have no idea, since Github doesn't have anything quite like this, I simply use private repos
Often, associative arrays provide a more readable alternative, with no risk of accidental fallthrough.
I can think of one case where this behaviour may be useful; if you have multiple event queues where one queue has to take precedence over another, then this construct would allow the higher precedence queue to be drained, after which the lower priority events would be serviced.
I understand your problem and I repeat it again: the things you try to do can be easily achieved with phpdesktop. You can't use the native input file or the FileReader API, but you can create a custom file widget and a custom replacement for FileReader API using Javascript and PHP. Yes, it requires additional coding, but it can be done. Since you've already made your mind I won't be trying to convince you, as I see that your main point is to prove that PHP Desktop is trash and that Electron is awesome.
Here's an example of a Github webhook controller I built a while ago: https://github.com/lancepioch/tree/blob/master/app/Http/Controllers/Webhooks/GithubPullRequestController.php I think you're fine.
&gt; I prefer using switch(true) I hope this is some sort of joke.
Care to provide a small code sample or you are just gonna retire with the "my product is capable of doing that because I say so, bye" statement? Maybe I'm doing something wrong, please provide a code sample where I can get a file full path?
Are you interested in constructive criticism? Otherwise, kindly don't post in a public forum.
Also phpstorm and ramp all inspections up, makes for great code
Yeah, next up is to switch back to phpstorm, since I've heard a lot of good things about it, and it apparently has a better support for all these tools. (I'm still hesitating because VSC is so snappy!)
I strictly exclusively use PHPStorm just for refactoring messy code based and easy code transversal. Highly recommend. 
It looks like I should give it a go more like sooner than later! Thanks!
&gt;switch statements are great for integers and basic strings. If, and only if, you're 100% sure you're comparing integers and basic strings. i.e. no user provided data.
The one thing you can't do with promises is to resolve multiple times, which **can** be useful in certain contexts.
It's ballsy, I'll give you that. But I believe it is true that NR are expensive - perhaps it would be good to have a new contender in this space? 
Thank you for the feedback. I began going down the route outlined in [http://paul-m-jones.com/archives/6760](http://paul-m-jones.com/archives/6760) after deleting the reddit post but I am doing things a little different and I would like your feedback. In my app the structure is as follows **services** use mappers as dependencies; services return payloads **mappers** use repositories as dependencies; mappers return records **repositories** interact with the data source ( redis, db, etc. ); repositories return data ( array, etc. ) The only change I have made is extracting the database interaction ( querybuilder, sql, redis ) into repository classes so I can handle cache rules etc. outside of mappers and change independently. In your 'adr-example' all service classes return payloads, so creating a "GameArticleService" that relies on other services requires extracting the data from each payload \`$payload-&gt;getResult()\` to build widgets for each page. So I created a class similar to your \`PageService\` example that pieces together the information required for the page, but the class uses mappers as dependencies instead of other services. Once the data is retrieved the payload data is passed to the view renderer instead of rendering each widget inside of the \`PageService\` class. I am using a view library that includes widgets and accepts data as a parameter to render them \`include('widget', $data)\` 
@rocketpastsix well, as i said i've wrote this base on a tutorial which i know, free tutorials are not giving free gold tips... i'm doing android development and doing for real work with all type of methods and etc... but when someone give me something to gave him any suggestion i know he's trying to learn. and what i've said here was all about learning my server side api for android app. i don't know why instead of help or trying to explain what should i go next, people trying to write like this. I've developed a real-world app base on this api, and i've got all kind of approve for my client-side(Native-Java), but all i knew (Also my company said) was that this api working, base on what i've did, but it's not a real-world api that's usable like your developed android app. This is why i've asked what should i do next. 
thanks for your response. i'll check it asap.
"I don't understand" !== constructive criticism. I have done this before. It has worked for me before. It makes sense to some people. This is a "job ad" of sorts. It doesn't require commentary.
CTRL+click is life changing.
i mean boilerplate code. if u wanna do a real good job, take a look at laravel. this is also a good thing that u can use it, some people suggest it to me and it was perfect, but it's not about admin panel or ... just check it: [https://github.com/mevdschee/php-crud-api](https://github.com/mevdschee/php-crud-api) \[ Single file PHP script that adds a REST API to a SQL database \] &amp;#x200B; Base on money people pay i'm using different languages, most of big companies will pay to get job with java, at medium or small, most of them going for php. i'm currently most of times going to use php frameworks laravel, codeigniter, which both was fine and all my clients was working and improving very easy and happy.
No doubt
What I'm missing from other answers, is validation of the tracker URL and a bit of resource efficiency (prevent filling memory with useless data). &amp;#x200B; Here is my take on the solution: &amp;#x200B; &lt;?php $trackerLists = [ 'https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best.txt', 'https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all.txt', 'https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all_udp.txt', 'https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all_http.txt', 'https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all_https.txt', 'https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all_ws.txt', 'https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best_ip.txt', 'https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all_ip.txt' ]; // Build a continuous iterator for all tracker lists. // This ensures only one tracker is in memory at-once when reading the resource. $trackerResource = array_reduce( $trackerLists, function (AppendIterator $carry, string $url): AppendIterator { // Add a resource for the tracker list, if it's (still) available. try { $carry-&gt;append( new SplFileObject($url, 'r') ); } finally { return $carry; } }, new AppendIterator() ); $trackers = []; foreach ($trackerResource as $tracker) { // Ensure only valid trackers pass. if (preg_match('#^(udp|tcp|wss|https?)://.+/announce$#', $tracker)) { $trackers[$tracker] = $tracker; } } foreach ($trackers as $tracker) { echo $tracker . PHP_EOL; } &amp;#x200B;
https://www.humblebundle.com/books/programming-cookbooks Full Link here. It has already been established that most of the books a quite dated and this bundle ist best skipped. 
&gt; I seriously tried everything I could to get this thing to log an error message but something is overriding it for some reason. Could you try to register a php shutdown function? it should always run when php is shutting down any you can get any current errors in the shutdown function with: `$error = error_get_last()`
Is there a list of additional plugins that people should install? Php Inespections EA is one of my favorites
Use a modern IDE that warns you if you forget a break; and you should be fine 
i tried EA and ended up removing it. the built-in inspections work for me. in the bottom right corner, click on the little dude with the top hat icon, edit inspections, and turn all the PHP checkboxes on. 
It says what version right on the results page..... &gt;PHP 7.3.0 (cli) (built: Dec 6 2018 12:47:18) ( NTS ) Copyright (c) 1997-2018 The PHP Group Zend Engine v3.3.0-dev, Copyright (c) 1998-2018 Zend Technologies &amp;#x200B;
In which case it would make more sense to use event emitters. 
I usually visit https://www.techempower.com/benchmarks/ they provide more real world examples and not so theoretical algorithms. 
I don't think that's really worth it if you only have a single type of event.
Yes, and as I said before, I also don't have the perfect solution for that. Our team tried to establish routine and process, handling tasks with agile methodology while trying to incorporate SCRUM. But at the end of the day, such a time difference is just a huge burden. Let me know if you find a miracle method.
Definitely.
I guess it depends on your machine, but PHPStorm is loghtening fast for me. The UI, inspections, even "search everywhere" which literally searches everywhere is pretty much instant. And that is in Magento, a massive codebase. When it has been slow it's normally a broken index or a never finishing index process. Invalidating the caches fixes it.
I have this on CTRL+b so I don't need to leave the keyboard.
I wasn’t talking to you. 
Come on, you are overreacting. User provided strings are as basic as anything else. There is nothing wrong in running a switch to determine an action a user choose. 
User provided data isn't necessarily a string unless you specifically typecast it to a string. [Please read up on comparison operators.](http://php.net/manual/en/language.operators.comparison.php)
I totally object to this statement. 2 of the larger development teams I have worked on in the past few years have implemented Phalcon in some way. It has its advantages
Phalcon is my preferred frame work of choice for API development. I have been working with it for years. The biggest thing you need to understand with Phalcon is the di container.
Okay, let's make it HTTP-form based data. It is always strings. But that's not the point. You are overreacting. Switch is all right when dealing with user input as long as there are no security implications. I perfectly understand the theoretical point you are trying to make. But it is simply irrelevant to the topic. To make this discussion less theoretical, could you provide an example of simple user input switch based handler that will result in fatal consequences for anyone other that user themself?
&gt;Okay, let's make it HTTP-form based data. It is always strings. Except when they're INTs and NULL. &gt;Switch is all right when dealing with user input as long as there are no security implications. User input is always a security implication. &gt;To make this discussion less theoretical, could you provide an example of simple user input switch based handler that will result in fatal consequences for anyone other that user themself? ...any switch statement that performs an operation that should not be performed given the wrong type of data? This is such a strange question. Your lack of understanding of basic security principals is dangerous. Please do not ever use loose comparison operations on data that you do not control entirely.
Wow. Surely you can show me how to send a null value through an HTTP-method based form (POST or GET). I am all intrigued. 
[You really aren't understanding how loose comparison works.](https://3v4l.org/ffFOG) 
Your assumptions are as bad as your inability to prove statements you make. 
I obviously used the try-finally wrong there. My apologies.
I thought that's what he is working on? https://blog.jetbrains.com/phpstorm/2019/01/nikita-popov-joins-phpstorm-team/ this says: &gt; Nikita is off to a quick start at JetBrains and is now working on finishing the Typed Properties implementation and fixing all the subtle bugs found in the process. Next, the plan is to continue working on new PHP core features, fixing some inconsistencies, and cleaning things up.
&gt; You are doing logic in SQL, that is not how things are done correctly. o_O https://books.google.ca/books/about/SQL_Design_Patterns.html?id=ZzxDGQAACAAJ&amp;source=kp_author_description&amp;redir_esc=y what 
After looking over the readme of the repository, to me it looks like all you'd want is to process this list: https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all_ip.txt It has all trackers, with the IP address already resolved, so that should be the most efficient. If you want to do domain resolving at runtime, simply just use https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all.txt Combining all other files will only add duplicates to what is already in there. Especially combining the IP and domain files, which makes you add every tracker twice, at the end of the road.
I was searching for something on stackoverflow and the guy was using switch statement and quite a few people was telling him to use something else than switch because the listed reasons So I searched a little more and found there are more people who dislike switches so I wanted to ask here. Thank you fit your answers
I would not have expected this to be a crypto library, from the title and description. I thought it would be a legal text library, but this is about generating software license keys. It is OpenSSL and is PHP 5.4 compatible, but I would much prefer something with libsodium, as that has no external dependencies in 7.2 and up. This library requires a bit too much manual setup to my taste.
This seems equally capable to the api-platform.com that I was recommended.
thankyou for ur response what inhave to do now
thankyou for responding, what i have to do to get it
Well, Stack Overflow is not an unblemished Oracle, answers are written by people, like you and me. There is only one case when one could possibly dislike a switch - when it could be substituted by a simple lookup table. All other cases you have seen are likely just prove the disliker's won ignorance. Either way, what is the link to Stack Overflow you are talking about?
Please do not ever do professional PHP work.
&gt; User provided data isn't necessarily a string unless you specifically typecast it to a string. is the (wrong) assumption you made. The rest of this thread is your (as bad) attempts to excuse yourself. And speaking of the professional work, you gave me an idea. 
ALT-F7 is life changing too. Also, for extra whizkid cred; go into the keymap and remap extract method, extract variable, extract constant etc. to any convenient keys of your choosing. Once you use these features more than once, you won’t be able to live without them!
Similar to u/johmanx10, I was thinking of something that would parse the legal licenses such as MIT or GPL. A few notes: \- Use \`OPENSSL\_PKCS1\_OAEP\_PADDING\` padding in encrypt/decrypt operations where applicable. Other \`PKCS1\` variants are vulnerable to Bleichenbacher. \- Instead of asking users to generate a private key via CLI \`openssl\`, perhaps it's easier if you generated one from the library itself. It can be a separate class too. \- Ideally, a complete license server/client implementation needs a revocation mechanism as well. But I see this tool is more of a bare bone approach.
Some package maintainers dont have a job as their package has become so mission critcal for some companies application they receive donations to live off of. &amp;#x200B; Something is better then nothing. But a stable income is better than no stable income. The maintainer you may be considering to donate to, May have no job and may not receive donations. They may have 1 or they may have both. Either way, if the package is mission critical to your application, that maintainer has the same value as an employee. 
How is it better than phpstan? We went with phpstan because psalm doesn't seem to offer support for the symfony container.
What's it do
ALT-F7 finds usages of anything you have selected within your entire codebase, which is very useful when renaming methods or to see why certain methods exist. Extract method lets you select code, for example in a big method, and to extract it into a smaller method within the same class, which lets you break up larger methods into smaller pieces. Extract variable does the same thing, but with variables. Very very useful.
\&gt; I'm about to refactor a huge messy code base If you're lazy, you can Rector do that :)
Hello, world! I'm having a horrible time trying to figure out how to integrate the Google Fit API with my company's website. I've been looking for information, tutorials and all kind of stuff for a week from now, allowing me to achieve something minimal. Until now, my only results are the following: + When the user wants to link his Google Account, to give us the permissions to access his Google Fit data, he clicks a button and the Google's sign in form pops up. + The user logs in and, after that, our front-end receives the `id_token` and `access_token.` As I understood, I can send the `id_token` to my back-end, verify it against Google servers, decoded it and store the user information in my database. On the other hand, I can't store the `access_token,` because it expires after an hour, so I won't be able to access the user data in the future again. My only question is the following: how can I use the `id_token` for accessing the user data in the future, without asking him to log in again and again, using the Google's PHP API client? If you want to ask me anything about my company's purposes or what are we doing with the user data, go ahead. Let me also know if I'm misunderstanding anything.
The built in inspections are close to useless though and won't detect code smell. 
For me it looks like Phan and PHPStan are very similar but I liked the former better because of its excellent VSCode support and because it's much faster than the latter. Both can point out weaknesses in your code and both has their points. The difference between Psalm and the other two is Psalm is really smart, it does a lot more than telling you there is an unused private variable in your class, for example: It cries out loud every time when it can only assign a `mixed` type to a variable (eg in a `foreach`). What you can do here, for example is to iterate through an iterable and errors are gone and you can be sure that loop works perfectly till the end of the world. Actually, if you try and fix all of its reports you'll end up with a highly error prone code. Later on you'll start writing code that complies even with Psalm's most strict rules so you'll be a better programmer (it may sound bold, but these rules can apply to any language).
Oh. My. God. Just figured out Rector was in my history but somehow overlooked it. Now I'll consider this as well. Thank you very much!
This. I've worked with plenty of competent Devs who , for some reason, are allergic to using xDebug.
are you suggesting resolving value by package then dividing value amongst maintainers/committers ?
I wonder who will be the first to come with migration set from Wordpress 4 to Wordpress 5 :)
While I'm using WordPress for years, I've just started getting frustrated about it's innards. No namespaces/autoloader, functions are everywhere in the global namespace, which is a nightmare to test or at least make the ide discover it. So I'm curious who'll have the balls to fork it and migrate it to a purely PHP7+ code base.
The text for the php book states that they rewrote the examples for php 5.5. Thats a skip right there 
Doesn't bode well when your demo is down... ``` $ curl 'https://returntrue.win/' -i HTTP/2 500 date: Sun, 10 Feb 2019 13:39:38 GMT content-type: application/json content-length: 0 set-cookie: __cfduid=da596f9760eca5eb04ad9e3f883a12a951549805977; expires=Mon, 10-Feb-20 13:39:37 GMT; path=/; domain=.returntrue.win; HttpOnly x-amzn-requestid: 4f572e50-2d39-11e9-b737-e1216f7115fb x-amz-apigw-id: U4twDHytoAMF4SQ= x-amzn-trace-id: Root=1-5c602999-d0496e283bfe2be06dd9aed8;Sampled=0 x-cache: Error from cloudfront via: 1.1 c1efe604ffd79a90be8f4d5002f8e908.cloudfront.net (CloudFront) x-amz-cf-id: ECdYRXrcQ-xlJqYBCWN8df-dtPDukm33Sg1C3_HbokesucTooeNJWg== expect-ct: max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct" server: cloudflare cf-ray: 4a6efba148debf6b-AMS ```
What are you using composer for?
ITT a lot of Johns
It's a matter of business, not a nice-to-have choice. When all plugins will support Wordpress 5+ only and you'll need all those plugins and to keep your code, this will be the only saint way to do it. &amp;#x200B; If it's PHP 5.3+ code and at least functions with unique names, you can add composer autoload for them, run Rector in Docker and refactor them instantly e.g. to MVC. classes to nice.
You are free to come up with any vendor and package combination you can imagine. But if you plan distribute you package using public repositories like [pakcagist.com](https://pakcagist.com) (composer default repository) you should use something unique and identifiable for the vendor prefix (eg. your company name, user handle, etc..). From [https://getcomposer.org/doc/02-libraries.md#every-project-is-a-package](https://getcomposer.org/doc/02-libraries.md#every-project-is-a-package) : &gt;If you don't know what to use as a vendor name, your GitHub username is usually a good bet. While package names are case insensitive, the convention is all lowercase and dashes for word separation. &amp;#x200B;
Maintain it yourself?
me too, and I just can't understand why would anyone refuse to use a debugger, not only in PHP but any programming language Heck, you don't even have to use it, only installing xdebug improves the output of `var_dump` by wraping the output in `&lt;pre&gt;` and there is a setting (`xdebug.scream`) to have the language engine ignore the "@" operator and show hidden errors and warnings 
That’s pretty awesome. I recently started working with running php in a lambda for work. I’ll keep an eye on this
Thank you, this is fixed.
Typically, you'll find the library on GitHub and in their readme, they'll give you the Composer package name.
Just to follow up on this one. PHP 8.0 is also announced here: https://www.reddit.com/r/PHP/comments/ap4lbe/phpfpm_80dev_eight_zero_sneak_preview_docker/
Why aren't you using xDebug? Using var_dump and die is quite amateurish tbh.
Get documentation, get specs, enforce coding standards, enforce pull requests and code reviews. There is no excuse for not doing these things when more than 1 person is involved.
Neat. Thanks!
Thanks to whoever just gave me reddit gold :-)
I tried any vendor or package name, I keep getting the same error; `the package name is invalid` ?
Awesome!! Thanks!
Codeception is a nice addition on top of PHPUnit. Judt saying.
Thanks! Re VS Code support: I’ve neglected this, especially on Windows, in favour of adding type system features. I hope to have some time today and tomorrow night to improve the VS Code plugin. Completion isn’t enabled at the moment - there are some issues to hammer out at the parser level. Phan uses a different parser that’s not as well-maintained, but designed from the ground up to allow completion.
I looked within the `readme.md` so far it worked.
&gt;api-platform.com amazing. u can also use, laravel/vue.js for backend panel. if it's just about api, go on and use api.
Probably because we don’t use it at Vimeo. But if you open a ticket describing what you want, I’m happy to create a plugin!
I fairly often see switch-case used in place of a polymorphic operation, which is one scenario where I see them as a code-smell. However there is value in using a switch-case rather than chained if-elseif statements and that's in communicating to the reader that one of many mutually exclusive operations will happen. I'm also a fan of the judicious use of `switch (true) case (expression):` - it's very useful in the above scenario where you're not switching based on a simple value. For example: ``` switch (true) { case $this-&gt;isSomethingTrue($val): // ... break case $this-&gt;isSomethingElseTrue($val): // ... break // ... and so on default: throw new \RuntimeException('No expressions true, something went very wrong...'); } ```
\&gt; Now I have a hard time how to introduce it in an easy way (on the aforementioned code base) to not make other devs angry (some of Psalm's recommendations does not make sense at first). You can always use a more permissive level (e.g. 5) \_and\_ a baseline file to make it super easy.
If I understood the problem correctly. I think this article will help you https://getcomposer.org/doc/05-repositories.md#using-private-repositories
I don't know life before composer. I did my own stuff locally with xampp then jumped to Slimframework, where I met composer, life has always been with composer. 
If its a team yea. I know Phalcon receives thousands each month in donations and they split it between the core 5 developers. They have been working really hard lately to get 4.0 ready for release.
If you're using the table in the Where Clause for anything but a IS NULL - then that left join is a performance hog. &gt; AND r.scored_start IS NOT NULL 
Yes, soon I'll play with different levels and try to set up baseline as well. This way I can make it more strict later on if everything else ironed out first.
You can access it at https://tecreations.ca. I’ll have to setup a database for you. You can use tecreations.ca/edit/edit6.php to edit files on the vps and if they are .java then to compile and execute them. It’s still very much a work in progress. I can help with programming if need be
I made the mistake of deleting a previous post before finding the full solution, short 3 comment thread can be found here [https://www.reddit.com/r/PHP/comments/aoohbe/where\_should\_view\_data\_be\_assembled\_in\_adr/](https://www.reddit.com/r/PHP/comments/aoohbe/where_should_view_data_be_assembled_in_adr/) *I was going to copy/past the specific question but a little context is required*
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; But why not. Well ... * there are no extensions outside core ready for PHP 8, the vast majority won't even compile, by putting PHP 8 out into the world, you are putting undue pressure on extension maintainers, we haven't had time to ready for 7.4 yet * there is no remarkable difference between PHP 8 and PHP 7.4 right now, only the aforementioned changes that break extensions - they have been distinct for about 5 minutes * for the wider community it's much more productive to test 7.4 than 8.0 right now * internals should be allowed to focus on the coming JIT, which none of us really understand very well These may not be popular things to say, and I'm very happy that you've put the time into preparing this for everyone, but it's at least a year too early ...
Because I read OP's post. And it mentioned not being able to debug through regular means. And the word amateurish in this context is a bit condescending. Depending on the codebase you are facing, you choose tools accordingly. A statement like "not using xDebug is amateurish" is amateurish.
OP here, feel free to ask questions or leave feedback
I dislike switch because it's a relic which only exists because it could be mapped efficiently to machine language from C. - the mentioned pitfalls about missing cases and forgetting break: - it clearly should have been an expression instead of a statement - its so inflexible it has very few good use cases - it is superseded by pattern matching in higher-level languages. Over time people have come up with some ingenious control flow for switch. But you can also write these using GOTO which can do much more. 
I'm fairly sure PHP mess detector could do this, but you'd have to cook up the textarea yourself. Why not let your IDE handle that?
Are you missing the opening &lt;?php tag? 
you need the "f" flag php -f this.php 
Really? On Linux it works without it. 
Let's say i have a set of datas, just short arrays of integers, all of the same length, coming from telemetry sensors. Got many set of them, say months of ten minutes intervals. I know already which sets are okay, and another set that are known to contain anomalies, but are not similar at all! How to detect to later watch live the sensors, and detect live anomalies. Basic use case I think. Currently, rolling some kinds of math tests in countless loops, no doubt that it can be improved. What direction should i follow for this goal with your library. Might be a noob question, as i should lookup in details your docs, *witch* are very well done! 
no, using -f, it printed out all my "echo" and the raw code. I needed the &lt;? and ?&gt; at the start and end.
Yes, I was. That was the problem! 
Just to be clear, you should always use &lt;?php for the opening tag not just &lt;? (although the latter may work). Unless you're using the &lt;?= echo short tag.
Great question There is a categorical of unsupervised learning called Anomaly Detection which Rubix handles natively [https://github.com/RubixML/RubixML#anomaly-detectors](https://github.com/RubixML/RubixML#anomaly-detectors) The process goes like this ... 1. Import your data (those fixed length telemetry vectors are exactly what you need) into an Unlabeled dataset object 2. Train an anomaly detector with the dataset 3. Use is to predict anomalies on unknown samples If you have some ground truth data you can use [Cross Validation](https://github.com/RubixML/RubixML#cross-validation) to test the performance of the detector If you are looking for a place to start I would start with [Isolation Forest](https://github.com/RubixML/RubixML#isolation-forest) because it is a good all around detector. In your case, you'll want to take particular note of the *contamination* hyper-parameter as this tells the learner how much anomalous samples are thought/known to already exist in the dataset. The best advice I can give you is try it out and ask questions when you get stuck
Thank you very much, that's a whole new world, definitely going to test and use, or at least learn from it!
I wrote a php web app for an election. Not for voting, but for keeping track of elections results two years ago, it could be a good place to start: &gt;https://gitlab.com/swsocialweb/lyra-presidential-app It is in php, using Symfony
First, I would offer these adjustments: - Services use any combination of repositories or mappers, and return payloads. - Repositories put together domain objects, composed using the any number of data-source mappers. - Mappers interact with the data source. &gt; each widget service will most likely return a payload Maybe? It might well be that Widgets are represented by Repositories, and the Service uses any number of Repositories, then composes the Widgets into a single Payload. You with me so far?
y tho
I think my idea of Services is what is causing the issue. I currently have the following code [http://prntscr.com/mjczf9](http://prntscr.com/mjczf9) in a service to create a new Game in db. Where would you put this logic? I am used to seeing something like this in a controller when working with CI or Laravel. On a previous refactor this was then placed in a Service and I have kept it there since. Are Services in ADR only in place to trigger a "command" and return payloads? If so that would mean my services are my issue. 
&lt;?php - don't use short codes, you will live to regret it!
Valid question Because, Machine Learning is arguably the most important technology of our present time. The ability to program with data has changed the way applications are built and I don't want PHP engineers to be left behind. Our ecosystem at the present moment is severely lacking. The goal of Rubix is to push PHP in the direction of ML, whether it be the de facto library or not. I built Rubix to solve many issues that weren't possible using the tools we had, it began providing immense value, and I decided to share it with you.
Could this be used to detect automated brute force login attempts or anomalous behavior by a user such as changing unusual information or deletions?
Absolutely
Great work. My only question is about performance. Php at the moment is not as fast when it comes to math as other languages. (being purely interpreted and all that). Of course that will change in a year+ when the JIT compiler will be implemented but how fast is compared to python for the same functionality?
This question comes up all the time PHP is actually faster than Python in terms of pure PHP vs Python code Some Python math operations are faster because of libraries like Tensorflow and numPY that are actually implemented in C or something else low level and are multi threaded I've made it a point to make it easy to swap in a faster linear algebra computation library when the time comes. I am currently communicating with an engineer working on a faster array implementation called CArray. I highly recommend checking the project out as well. Also, with FFI (Foreign Function Interface) in PHP 7.4, we can expect an interface to Tensorflow. Having that said, for most of the common use cases, single threaded PHP is not a problem. I've spent alot of time optimizing Rubix ML, it's faster than anything else out there for PHP. So the answer is, we're behind but getting better every day.
&gt; What "other cases" would this not be possible? Are you sure that those particular cases should even be using enums at all? Quite honestly, I think that's what you should be doing. I found it hard to give an example that didn't require me to explain part of the complex business of the project I'm working on. Here's what I think is a good and fairly simple example. Imagine a blog post which can have on of four states: draft, published, archived and removed. All of these states have a tiny bit of logic associated with them. For example: you can't change the state from draft to archived, you can't change the state from removed to published. Representing the "state" as some kind of enum makes sense to me, as this is how it is saved in the database: a string value. But it also makes sense to me to have every state represented by a class, which can provide the logic associated with each state. I'd like to ask a state "given this current state and stateful object, am I allowed to change the state of this object to you?" "you" being the state class we're asking the question to. I'd love to hear your thoughts on that. 
On key up, Ajax to a page that fetches the field based on "LIKE". Alternatively there could be some services out there that does this better. If it's a country look up then I would recommend a SELECT element and I'm certain there's an API that can fetch that for you. Just try some different bits and see how it helps.
I tried Ajax, but no data shown ever no queries was triggered (I was using profiler for debugging) you mean an API that get database info and connected to this filed, will it work with MSSQL or must be a MySQL
I've never tried using profiler to find my data, I always use Network and find the page I ajaxed off to so then I can echo the query in PHP and run it outside of the code in HeidiSQL or MySQL Workbench or whatever. Have you tried dumping the query it creates?
[removed]
No, even if you're using &lt;?=, don't use &lt;? . &lt;?= is enabled by default, &lt;? isn't (and is considered bad practice anyway)
&gt;php &gt;mssql oh god I am having war flashbacks. Good luck son.
He never said anything like that. you misunderstood. What he said is &lt;? is only justified in the for of &lt;?=
Really good work. Not only by the code itself but what in my opinion most of the libraries fault is... documentation.
No, I mean...doing ML with PHP is like cutting a piece of wood with a knife. You can do it, but it's extremely, extremely slow. Let's face it, ML is just advanced predictive analytics. And that shit is so resource hungry that the overhead that PHP imposes on you by default makes it magnitudes slower than C++. You know - you think out your models and so on in pyt...ah, pseudocode, then translate to C++. To be fair, at least with TensorFlow, the...fuck, it's a long talk, bottom line, that framework is fast - it's usually not worth switching to C++ in most cases because it's way easier to work with. PHP has too much overhead. Simple. Not saying this is a bad project, I love PHP and the fact that I can study this is great, but not sure what its real world applications are.
&gt; These may not be popular things to say, "Unpopular" feedback as you call it, if well reasoned is refreshing and should always be welcome. Where's all the learning otherwise. Besides I fully agree with your point that priority should be put into testing 7.4 first. It wasn't the purpose of that project to recommend differently. I've been building out of PHP's master since 7.3 was still in it and will probably still do when 8.0 is stable. That said I do think that raising the awareness of upcoming features/changes, even if a year ahead, could be beneficial. Knowing about JIT for instance way early could also influence your strategical plans as a company when it comes to choosing technology, such as not doing a two-year rewrite of your legacy application in Go, as there will potentially major performance improvements in PHP anyway (just an example). 
Presumably, you're the one who posted this comment: &gt; Thanks for the guide. Sadly, I can't build PHP due to pear.php.net having been hacked recently and now being offline. &gt; Connecting to pear.php.net (pear.php.net)|109.203.101.62|:443... failed: Connection refused. &gt; Makefile:494: recipe for target 'install-pear' failed &gt; make: *** [install-pear] Error 4 Just follow the guide, but add `--without-pear` to the `CONFIGURE_STRING` environment variable.
If you are planning on writing a threaded application, ask yourself, is PHP really the best tool for the job? In a world with Java, Go, Rust, maybe even C# if you are targeting Windows (though with Mono you could C# on Linux just as well), personally I don't think it's right to do threaded code in PHP. It's way too tricky. All the languages that I've listed abstract it really well. This post is not to shit on PHP, no. Just use its strengths where it makes sense.
I'm reluctant to talk about the JIT in public at the moment, there are far more questions I don't know the answer too, than questions I do know the answer too. But it seems necessary at this point to talk about it ... however uncomfortable that makes me ... &gt; That said I do think that raising the awareness of upcoming features/changes Well sure, but right now, there aren't actually any features to be aware of. There are the implementation details I talked about, and then things removed that were deprecated or will be deprecated in 7.4. Removals are obviously a thing effecting end users, but they can be made aware of them, if they aren't already aware, by running their code under 7.4. There's not any need for them to run PHP 8 for that purpose. &gt; Knowing about JIT for instance way early could also influence your strategical plans as a company JIT is not a done deal, we do not know which versions of PHP it will be merged into. JIT is not even finished. Building a strategy around something that doesn't exist doesn't seem like a good idea :) You could assume now that PHP 8 will get a JIT ... much like the authors and publishers of professional PHP 6 books assumed before PHP 6 was released, that would be a wildly premature assumption. It may be a waste of everyone's time and effort to start thinking about PHP 8, before we know what it and the version before it are going to look like. PHP 7.3 was one of the worst releases for stability in recent years, I would urge anyone with a platform, for the moment, to focus on 7.4 being stable when it comes out, and not to overlook it in favour of things that may not happen as you assume. There is, technically, a chance that 7.4 will even get the JIT, not a very big one, I hope, but it may happen. If you focus now on 7.4 images, regardless of when/if JIT is merged, that's extremely helpful; Doing anything else until we know what PHP 7.4 will look like doesn't make a whole lot of sense. There are people that should at least share their focus between 7.4 and 8.0, but those people are already aware of that, they don't need a docker image, and they aren't reading reddit for advice. When you speak on reddit, you are speaking to *everyone*, and the fact of the matter is, we do not need *everyone* to test PHP 8 right now, there's more pressing issues that require attention, such as a stable 7.4. Maybe, I was too hasty saying it's a year too early, while it technically is for any ordinary upcoming releases, things are moving fast and in a way that we haven't seen since NG. If you had made this post/image in a few months time, when we know for sure if 7.4 will have a JIT, I would have upvoted the thing and not said a word. But right now, I strongly feel that the only things that can come from PHP 8 getting attention that 7.4 is more deserving of, are bad things, I'm afraid. I totally get the excitement around a JIT, but stay grounded: JIT's are not magic sauce, they're one of the most complicated compiler strategies ever invented, possibly the most complicated ... ours was written by one person, it took him years, and it is not finished. We do not have the knowledge base within internals to push it forward at the same rate we could push NG forward once it was made public; To the vast majority of us, it's extremely alien. Unless you have experience not just in compilers, but very specifically in the JIT strategy, you cannot be really helpful right now. We need time to educate ourselves on this, and while you may not want to hear 7.4 might not have the JIT, I very much hope it doesn't, because we need every spare weekend between now and PHP 8 to learn. Let's also remember, by the admission of the author, you should not expect a remarkable increase in performance for the kinds of applications written today in PHP. First and foremost, PHP applications today are IO bound, increasing the speed of execution has only a tiny impact, measured to be in the realm of about 5%. This is so tiny, that I would wager the vast majority of people can achieve the same performance increase in their applications of today just by optimising that application and the infrastructure on which it depends.
What version a php you use?
FYI: You can reply to the reddit notification message and your reply will be sent to the anonymous donor.
not so much a matter of being better- psalm's support for templated types &amp; class-string pseudo-type makes psalm more useful to me.
&lt;?php to start. Don't use ?&gt; at the end. It is unnecessary and will cause problems if the file is included elsewhere.
~~is the bit of psalm that loads the [https://github.com/vimeo/psalm/tree/master/src/Psalm/Internal/Stubs](internal stubs) pluggable?~~ stubs plugin ala [psalm/plugin-phpunit](https://github.com/psalm/phpunit-psalm-plugin) ?
the "solution" there is to typehint the variable being iterated over, surely ?
I suggest some basic benchmarks first to back up your (possibly correct) intuitions about the slowness of PHP.
It's is slower, for now. I think once JIT is implemented in PHP the performance difference will be negligible. Correct me if I'm wrong.
Wow sorry, it's too early hahaha
Actually, I re-read it back and your interpretation is absolutely understandable. I'll re-word for clarity.
Browsing through the examples class ApplicationService { public function __call(string $method, array $params) { try { return $this-&gt;$method(...$params); } catch (Exception $e) { return $this-&gt;newPayload(Payload::STATUS_ERROR, [ 'method' =&gt; $method, 'params' =&gt; $params, 'exception' =&gt; $e, ]); } } protected function newPayload(string $status, array $result = []) : Payload { return new Payload($status, $result); } } *shudders*
Php CLI, in unix shells, as hashbang scripts, is faster than bash itself. But few knows it already, needs configuration. Maybe php4 with wordpress in cgi mode on your Windows machine, that lag. By default PHP allow only 128mo of Ram. Start your hasbang script as follow: !#/usr/bin/php -d memory_limit="2048M" This and multi processus, with **popen().** Faster than bash, got multiple proofs. [http://php.net/manual/fr/ini.list.php](http://php.net/manual/fr/ini.list.php) &amp;#x200B;
Look I read all this stuff and I agree PHP isn't the best at this but I decided to do it anyway when I built the app first time. I can't do a full port in the short time I only have for deployment. Please read the post before answering.
&gt; Presumably, you're the one who posted this comment: Wasn't me but it did give me the first clue that it wasn't my server messing up but the site itself. I'll go through the stuff you posted. Thanks.
While Unit Test is important but we mustn't forget that Unit test is not the end of the road, Unit Test is not QA, it is part of proper testing but it is not the whole process of testing. 
Well you know there’s a sane middle ground called python right 
Very interesting, thanks for sharing!
As I said, I threw an iterator around given array therefore it'll have a type when you iterate through it. You cannot cast type within the foreach.
I've never said what I'm about to say to anyone before ... it feels strange ... but the time has come ... If I said it wasn't the best tool, would you listen to me ? ... I wrote it :) pthreads was a technical exercise to prove some people on the internet wrong, and because I had a bit of time off regular work. When I wrote it, on my own, and put many hundreds of hours into it's development I believed in it, and for a short while it was a nice(ish) solution ... some years later now, and it's still being used in a few big projects and I occasionally commit too it, but other people really control it's development. It's grown into a monster, it's so hard to use, and the monster dies with a JIT, which is clearly coming at some point: pthreads won't be able to execute machine code as the JIT currently stands, and you can bet, I won't be making it do so. Parallel execution is still important to me, and I think valuable, but it's not valuable if you can go faster in one thread than in X threads ... we need a new solution ... Run your project, but keep your eye on the future, and heed my words ... don't write anything new that relies on pthreads ... I have another more elegant solution in the works and it'll be ready when the JIT is, I hope ...
This can also be a nice use case for Markov Chains, I implemented something similar and got really good results.
What is the difference with php-ai/php-ml ?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I'm really late but i watched to add that i really like switches for using enums. switch ($routeInfo[0]) { case \FastRoute\Dispatcher::NOT_FOUND: //... case \FastRoute\Dispatcher::METHOD_NOT_ALLOWED: //... case \FastRoute\Dispatcher::FOUND: //... }
var_dump? That's vrery unprofeccional. You can use https://craig.is/writing/chrome-logger
&gt; http://prntscr.com/mjczf9 That looks like Data Source work to me: you get some input, filter it, set defaults on it, and send it to the database, returning a Record on success. That sounds like work that goes in a Data Mapper. For my own part, using [Atlas](http://atlasphp.io), the filtering/validation/set-defaults work would be part of a TableEvents or MapperEvents class -- that keeps a relatively clean separation between "massaging the data" and "moving the data back and forth" without polluting the rest of the system. &gt; Are Services in ADR only in place to trigger a "command" and return payloads? I would say so, yes. Everything else in the Domain layer (into which the Application Service is an entry point) should be talking in Domain or Infrastructure terms; the Payload is only for returning results back to the User Interface (in this case the Action). Hope that makes sense.
I think I would put the rules that determine the state and allowed transitions (the business rules) in the blog post and the representation of the value as an enum. Imagine, a comment may also have a state, but with different rules for assigning the value. If you put the rules in the enum those rules cannot be different for posts and comments.
I think you would need to install the phpredis extension ([https://github.com/phpredis/phpredis](https://github.com/phpredis/phpredis)) and setup a cluster. You can control the sessions as seen on the bottom of this page: [https://github.com/phpredis/phpredis/blob/develop/cluster.markdown#readme](https://github.com/phpredis/phpredis/blob/develop/cluster.markdown#readme) &amp;#x200B; ### session.save_path The save path for cluster based session storage takes the form of a PHP GET request, and requires that you specify at least one seed node. Other options you can specify are as follows: * *timeout (double)*: The amount of time phpredis will wait when connecting or writing to the cluster. * *read\_timeout (double)*: The amount of time phpredis will wait for a result from the cluster. * *persistent*: Tells phpredis whether persistent connections should be used. * *distribute*: phpredis will randomly distribute session reads between masters and any attached slaves (load balancing). * *failover (string)*: How phpredis should distribute session reads between master and slave nodes. * *auth (string, empty by default)*: The password used to authenticate with the server prior to sending commands. * *none* : phpredis will only communicate with master nodes * *error*: phpredis will communicate with master nodes unless one failes, in which case an attempt will be made to read session information from a slave. &amp;#x200B;
Just out of curiosity: Why would you not want to let your slave handle sessions?
start then post your issues here. 
Perhaps a minor concern, but I would add 3. It reads like none of the rest of the language constructs, with the column, the break; statements and lack of enclosing brackets. When scanning code, it always irks me due to the difference in "texture" from the rest of the surrounding code.
Incredible work! I'll be letting my bosses know about this library as a potential lift to our marketing automation.
&gt; PHP Desktop is an open source project founded by Czarek Tomczak (available for contract work) imagine having that in the first line of your documentation
Good to hear that man. Thanks! Again, good work!
Because then it wouldn't give enough respect to it's master 
Please use /r/phphelp
Agreed. I can see this example code being just an example to show the concept, but not code someone should actually implement. Love your thinking here: &amp;#x200B; \&gt; you are hiding your API and you are breaking static analysis, code completion and refactoring tools...
Depending on the dataset size you are wrong. On just a dozen features and a few thousand rows you probably don't have much to worry about. Once you get to half a billion elements and need to run through that random forest a hundred times to tune your hyperparameters you are going to be in for a bad time. 
If you are creating your first composer.json simply to use Composer to bring in dependencies, the package name for your composer.json is not important. If you run `composer init` it will offer a suggestion for a package name. You can simply use that. If you are writing a composer.json from scratch, you can simply start with `{}` and that's it. It will work fine. You don't actually *need* a package name for your root package.
Switch ```php switch($number) { case 1: // do something; break; case 2: // do something; break; case 3: // do something; break; default: break; } ``` versus if ```php if ($number==1) { // do something } else { if($number==2) { // do something } else { if($number==3) { // do something } else { // do something } } } ``` Converting an instruction from "switch" to "if" with more than 5 entries will turn into an ugly code with 5 "if" chained one inside of other. So, using "switch" for this case is cleaner than "if". 
Upvoted
I'm pretty much going to agree with /u/rob_schluter. There are a number of ways of handling this, but state validation doesn't belong in an enum. That should go into either the Post object itself or a service class that performs all business logic against your Post objects. For the sake of brevity, I can give you an idea of what the former would look like: class ObjectStatus extends SplEnum { const __default = self::DRAFT; const DRAFT = 'Draft'; const SCHEDULED = 'Scheduled'; const PUBLISHED = 'Published'; const ARCHIVED = 'Deleted'; } class Post { private $title = 'Untitled'; private $status; public function __construct(string $title, ObjectStatus $status) { $this-&gt;title = $title; $this-&gt;status = $status; } public function changeStatus(ObjectStatus $status) : ObjectStatus { if((string)$this-&gt;status === (string)$status){ return $status; // Do nothing } if(!$this-&gt;validateStatus($status)) { throw new Exception(sprintf('Cannot change from "%s" status to "%s" status', (string)$this-&gt;status, (string)$status)); } $this-&gt;status = $status; return $status; } private function validateStatus(ObjectStatus $status) : bool { // Validate.... return $trueOrFalse; } } Hopefully that might clarify where my head is at in this specific scenario. It could probably be broken up further into service and validation classes, but the point is that your business logic concerning status validation should be kept outside of the enum itself and within the object that is responsible for enforcing a given workflow.
Yes, facade pattern indeed. 
Without wanting to click your attribution link... based on the title I think the best answer we can give you is: https://www.youtube.com/watch?v=iP6XpLQM2Cs
If someone around here wants to know more about the basics of Machine Learning, this article is highly recommended: https://vas3k.com/blog/machine_learning/ &gt;Machine Learning for Everyone :: In simple words. With real-world examples
Check out phpbrew. It's pretty awesome for this sort of thing.
&gt; you are hiding your API and you are breaking static analysis, code completion and refactoring tools Concur. I need to go back and revisit that example. Thanks for taking the time to critique!
On a completely unrelated note. Can we get an ALIAS magic constant for traits in 8.0. Please?
&gt; I have another more elegant solution in the works and it'll be ready when the JIT is, I hope ... Just the concept of this fills me with glee on a gloomy monday morning. 
Using a Redis slave to handle sessions isn't a good idea because a slave does cannot write to the datastore by default. If you do chose to enable write access on the slave, it will be overwritten by the master once communication between the two is restored.
I was trying to not have to go down the Redis cluster route because (from https://redis.io/topics/cluster-tutorial): &gt; Note that the minimal cluster that works as expected requires to contain at least three master nodes. For your first tests it is strongly suggested to start a six nodes cluster with three masters and three slaves. However I've heard of folks setting up 3 redis Daemons on the same server listening to different ports to hack their way around that requirement. Seems ugly but if there's no failover capability with phpredis without the full blown cluster, then I guess that's the road I must take.
I think you're looking for `ReflectionType::getName()`. Oddly, it's not documented.
Alt 36 is another option
You cannot create a variable without $
I don't do this, but... You could find a key that you don't use. Download a key mapping app to convert that single key stroke into a "$". Then get a sharpy a draw a "$" on the key. ;)
Huh, I didn't see that in the documentation or in the output of `php --rc ReflectionType`. Where did you find this method? Thanks btw!
You press CTRL over and over while we press shift over and over. This is a weird request...
The method is `ReflectionNamedType::getName()`. Currently you will always get a `ReflectionNamedType`, the distinction exists for forward compatibility with things like union types, where the type does not have a well-defined overall name.
*cries in Hungarian layout
Thanks for explaining this. The documentation should be updated to reflect that, how it currently reads is misleading. I'll see if I can contribute to the docs later after work.
Caps Lock seems to be a good candidate.
[https://aloneonahill.com/blog/if-php-were-british](https://aloneonahill.com/blog/if-php-were-british)
I think, without much conviction, that can be bypass using arrays, function/return and [call\_user\_func()](http://php.net/manual/en/function.call-user-func.php). :) That might be a mess!!
I mean, I’m assuming you have 2 hands, 8 fingers and 2 thumbs, and you’re worried about pressing 2 keys? 
The reflection docs are really poor, they need a lot of love.
The majority of applications for ML don't necessarily need to be fast. Otherwise Python wouldn't be so popular. I've seen lots of business needs come down to performing _something_ on data in batches, and then referencing those results from a database in another application. The ML part happens daily or weekly and the output is stored somewhere else. I think PHP can do that work just fine.
With reflection, of course 
[there's several options for typing up arrays](https://getpsalm.org/r/560926d8e0)- are these not suitable with your use-case?
Might want to rephrase the title. Sounded like a performance analysis and benchmarking, where this is just a installation guide 
Memcache does not compile for php 7+. There is an unofficial patch available here [https://github.com/websupport-sk/pecl-memcache](https://github.com/websupport-sk/pecl-memcache) You should stick with the Memcached extension if you have to use Memcache. I recommend Redis for its much more advanced features and huge community and support.
/r/phphelp
Do you see this? `MixedAssignment - 3:26 - Cannot assign $v to a mixed type`
Sane people just use a decent sql client instead.
Best advise I can give it to use literally any other tool that exists besides phpMyAdmin. MySQL Workbench, HeidiSQL, SequelPro, TeamSQL, and all those other ones. More features, better UI and in general just better. phpMyAdmin only exists because it was one of the first ones. Advance! It's like switching from Editor/Notepad to an proper IDE.
Several years ago I ditched phpmyadmin entirely and instead use local desktop clients for visualizing databases, like MySQL Workbench or my IDE's own MySQL visualization tools (in my case I use PHPStorm but this is to your preference). It's a more secure tool than having phpmyadmin running on your server anyway.
That or Adminer. Much easier to work with and I can easily slip it into a docker compose file and link to the database. https://hub.docker.com/_/adminer
I just kept using an old version of it until I was used to MySQL Workbench/HeidiSQL to be honest. I do still prefer PHPMA but the distros on my server won't play nice with the latest releases and it's a very big attack surface since it's so popular so I bit the bullet on migration. 
adminer is the better alternative: https://adminer.org
Thanks for introducing me to HeidiSQL. My Navicat version is getting old &amp; expensive...
It's not quite a direct equivalent to phpMyAdmin for obvious reasons, but the database functionality in JetBrains IDEs (PhpStorm, DataGrip, etc.) is really top-notch, and it's right there in my IDE to boot. I don't think I could ever go back to something more awkward. 
looks awesome. how can i contribute? just fork and PR?
I setup textexpander in OSX many years ago to convert `;lkj` and `;lk` and `lkj` and `kj` into `$`. So just any flick of my right hand fingers on the home row keys gives me a `$`... but I still just press the $ key most of the time.
I don't think I've used phpMyAdmin for at least 10 years, barring a few exceptions where I had no choice.
SQL client friend, stay away from that voodoo called phpmyadmin
like most things, there's a time and a place for a switch. and sometimes its better than if else blocks back to back. but sometimes, it's a hint that you should be extracting out to a certain design pattern. loose rule of thumb, if you have more than 2 if/elseif/else blocks, consider a switch. if you have much more than 5 or so, your code architechture might be better served by a design pattern like factory, strategy. but like others said, the equality checks that it uses is a loose comparison (like using `==` instead of `===`), so make sure you're not going to hit some gotchas here. a good example would be if there are 3 types of something ``` switch($user-&gt;level){ case "admin": $user-&gt;setCanEdit(true); $user-&gt;setCanRead(true); break; case"normal": $user-&gt;setCanEdit(false); $user-&gt;setCanRead(true); break; case "guest": $user-&gt;setCanEdit(false); $user-&gt;setCanRead(false); break; default: throw new Exception("Invalid user type: " . $user-&gt;level); } ```
Is this an elaborate troll? Are there really people with random "hated" letters and/or symbols? As in, "I hate letter K, find me a language without letter K thxbye" etc.?
HeidiSQL, Sequel Pro, and DBeaver are my free choices for working on Windows, osx, Linux, respectively
docker-composer can spin up a lamp stack (plus the technology is good to know and learn) wamp will also do this and is easy as a single click if you want to serve on the www, you could use a free host (probably has ads). here's an example: https://www.freehosting.com/. if you know your way around aws, you could try their free tier, or google cloud's free tier, although some might require a credit card i resell hosting so i could also consider offering up some pro-bono hosting, if we could come to an agreement (no spam, usage limits, etc)
i'd go to laravel and follow the tutorials. use the built in user auth. make a few endpoints that do the basic logic on a database - POST /surveys (create new survey) - POST /surveys/ID/votes (vote on a survey) - GET /surveys/ID (view survey and results)
you're not going to find it here, you might find one among your users. make a big header in your readme.md asking for new maintainer or just say accepting PRs
&gt; hotscripts.com this is the one that came to mind
If you're not a unix/linux beginner, learn some basic MySql command line commands so you can do some scripting.
anyway your code doesn't require a $. why is there a call_user_func?
On my webpage space, 7. On my Mac OS 10.5, not too sure, could be PHP 5. The Mac OS one is not good with dates!
Hey just wanted to say thank you for sharing that article!
&gt;Don't use ?&gt; at the end Really? I thought it was needed to close off the PHP when it's within HTML.
If you're on a mac, sequel pro is leagues more usable than any other tool
This should be over in /r/phphelp. When posting there, please include more detail about your question.
The PHP Script and HTML code for the form [https://github.com/Mstava/FreelancerProject/blob/master/formScript.php](https://github.com/Mstava/FreelancerProject/blob/master/formScript.php)
I would never use PhpMyAdmin. Timeouts, limits, lot of trouble. I use the integrated SQL feature in PHPStorm. Sometimes MySql Workbench.
I still use terminal for all mysql work. I know people will hate on me for it but if you master SQL as a language and make sure you have tab completion working it just works.
+1 for a adminer, switched a few years ago, never looked back 
Nobody sane has been using phpMyAdmin for a decade now.
I almost never use it, and when I do, it's for the minimum, so those problems haven't been an issue.
Does it work if you just access the file without the CMS? Is it a possibility that your CMS system is preventing your php code from running?
NO, my CMS is an HTML editor 
I really only use Phpmyadmin for the graphical tables and to execute select statements, as it’s a lot more convenient to browse tables like this. I always resort to mysql workbench or the terminal when doing database administration or update statements/transactional sql for exactly these reasons.
 [SQLyog](https://github.com/webyog/sqlyog-community/wiki/Downloads) works great for me.
Yes, only use it if you have HTML that you want to output afterwards. If you don't, then you don't need or want the closing tag.
&gt;MySQL Workbench It's hilariously absolute garbage though? Slow to sluggish, extremely bad UX, I can go on...
The shell is they way for 90% of this kind of work. 
I use Adminer, just Sql and just English and have never looked back. It's amazing.
The recent version 8 is actually much better than the previous version 6 releases. 
Do you do the math in one thread (1 CPU CORE), multiple threads (Multi CORE/CPU)? Or you can run it on the GPU? or load balance between multiple machines? via redis? 
If this wasn't the final nail in the coffin for pthreads, I don't know what is.
Why isn't your database server configured to only respond to requests from localhost or at least a private internal network?
HeidiSQL runs fine via Wine on OSX and Linux too. Looks a bit pants though. 
Anything repetitive I query the crap out of it. But with one-off changes to a helper table, phpMyAdmin seems to be making it as difficult as possible.
Yet it's the default MySQL manager included in WHM/cPanel. Or did I just confirm your opinion? :)
This.
There are a number of issues. Your CMS is expecting the content you put in the editor to be html and not php code. (probably also stripping out dangerous characters at the time you save it) Your form is posting to action_page.php which does not exist. Remove all the php from the page at acd-landing-2 and place it in a file named action_page.php in your web root. You'll need to re-work it a bit to make it do what you want if you intend to serve this page from the CMS. Like maybe redirect to a static thank you on success instead of rendering different content / performing different actions based on the request.
I agree with this statement. I've merely given enough options to choose from. There are people who really like workbench ;)
ctrl+C on a $ and then ctrl+v &amp;#x200B; If this drives you crazy, PHP will be hard for you ...
It is quite sad, really. All those DB tools lack feature I would use regularly. As in, looking at a table with fucking 200 columns and I'd love to be able to just type - preferably using a hotkey - to find that one column in the datagrid. Yet no tool has that. Surely I could write a query but that shouldn't even be necessary. Yet no tool - to my knowledge - has that feature :D
Actually only started using it with 8.0, I doubt I'd like to know the previous versions...
attached to a function named "fooBad", yes ¬_¬
How do you know it isn't and they aren't connecting over an SSH tunnel?
I actually prefer HeidiSQL with XP style on wine (on Linux, no experience with running it on macOS, though it's probably the same) - I believe it's because of better information density and overall readability, at least for me
&gt; WHM/cPanel Also things nobody sane has been using.
a Classic: Robert Sedgewick - Algorithms in C
I’m sure some of them are open source. Try and make a pull request for it. How hard can it be? (Famous last words)
So you can store values and call them back, just as a variable. Don't get mad, that works.. 
Has Anyone Really Been Far Even as Decided to Use Even Go Want to do Look More Like?
i used sequel pro in the beginning. then i switched to [querious](https://www.araelium.com/querious) (paid) and never looked back. now i'm fiddling around with [tableplus](https://tableplus.io/) and i kinda dig it.
Also take a look at datagrip
The output in the browser is coming from what looks like half-commented out PHP code. View Source on https://www.hochikiamerica.com/acd-landing-2 line 560 to begin. You can clearly see the output causing this, the HTML comment ends on line 598 and the rest is what is being output on your page. I can't tell you what's _causing_ this because I do not have the full context and source to look at, but I'm sure you can figure it out from there.
I didn't know Al Gore wrote about rythmic music.
By not using phpMyAdmin. PHPStorm. F JetBrain should pay me.
Querious is $49 for the lazy. 
Don’t forget adminer. It’s great for dropping on a remote server, but it’s also okay for local development.
I agree, komrade, $ is the symbol of The Capitalism and Capitalism is evil. -Marx. :-P (I'm joking). 
I love PhpStorm’s database features so much. MySQL Workbench is hot garbage and DBeaver isn’t much better, so even if PhpStorm sucked it would still be up there. However, its autocomplete is orders of magnitude quicker and smarter than those other two, and even though most queries I write now are via an ORM, we have a lot of legacy code with huge queries dumped throughout the code, and it’s invaluable to be able to get inline autocomplete and even run the queries right where they are. I think as a pure RDBMS I still prefer Sequel Pro, but as I don’t have a Mac at work PhpStorm is a life saver. 
Workbench 8 = the best 
I’d be interested in seeing some examples of these elusive edge cases and gaping holes mentioned in the article. 
It's paid for but Navicat works well for me
Interesting. I would like to see similar applications built with this and other light frameworks benchmarked. The bootstrapped application itself is fast, but so is `&lt;?php echo "1"; ?&gt;` if you get what I mean.
Those both looks really great! Will definitely try out tableplus
I won’t hate on you. Easiest way to script and automate things, fastest interaction, and it’s the most direct way to work with the database which minimizes the possibility of problems caused by any factor other than what you’re actually working on. 
Friends don't let friends use phpMyAdmin. Just...don't. There's a million *good* tools out there. phpMyAdmin has no advantages, only disadvantages. If it feels like it's the right solution, you haven't got a good grasp on the problem yet.
isnt adminer just renamed phpmyadmin?
Adminer is the way to go. A single PHP file you can include in the project itself and protect with .htpasswd or something.
Hi, thanks; although how do you run in a browser the HTML files as they are in a directory called `partials` ?
https://en.m.wikipedia.org/wiki/Introduction_to_Algorithms
I was in the same boat but it gets so tiring to type out the same SQL over and over. Sequel Pro lets you write a bunch of different queries into their little notepad and you can just reuse the queries by moving your cursor and hitting a button. Also it sucks when the output has blobs and one column takes up like 30 rows of your terminal screen so you can't even read the output anymore. It's good to be familiar with command line but man it's just not worth it for me anymore
Nope, entirely different software
What's more important than a JIT for ML is an optimized fixed array structure and BLAS (Basic Linear Algebra Subprograms) support which will most likely come sooner than a JIT anyway PHP is already faster than most scripting languages even without a JIT See slide 53 and 54 of this [slide deck](https://docs.google.com/presentation/d/1ZteG0Rf3siS_o-8x2r2AWw95ntcCggmmEHUfwQiuCnk/edit#slide=id.g42b614ce70_0_241)
Alot of the math is done with another library I wrote to support Rubix called [Tensor](https://github.com/RubixML/Tensor) which can be considered a single threaded polyfill for a future implementation of something like [numPY](http://www.numpy.org/) in PHP. Multi threading is a high priority of Rubix ML and there is already work being done in this area by Henrique Borba with his [CArray](https://github.com/phpsci/phpsci-ext) extension
Yes I'd love to get more contributors on board the project as it's such an important mission I wrote a contributing guide here [https://github.com/RubixML/RubixML/blob/master/CONTRIBUTING.md](https://github.com/RubixML/RubixML/blob/master/CONTRIBUTING.md) Check the project [Road Map](https://github.com/RubixML/RubixML/projects/1) for current backlog items and feel free to submit a feature or bug request issuing Github issues
This is very true, however, Rubix aims to be fast as well I'm also working on a server library that is capable of serving the models you train in Rubix ML so they can be queried in real-time [https://github.com/RubixML/Server](https://github.com/RubixML/Server)
How about "£"
Yeah but then I would have to be on a Mac
When you get to crunching the numbers, PHP is not much slower than C... To start the work it can be slower. And with this type of things, your start the script and execute math on a loop for a few minutes/hours, then end. So to don't lose much speed. You can't multi thread tho, and can't use the GPU... And that makes it "slow" for this type of math.
Can't wait to see how you access the GPU/multiple threads with PHP. It's like the only thing missing to make PHP good for back end stuff like this...
What are they using then ?
What do you mean broken? I use Ajax and phpmyadmin to manage databases just fine? 
[The Algoritm Design Manual](http://www.algorist.com/)
GPU support will most likely come once we get stable FFI in PHP 7.4 such that we can access TensorFlow from PHP ... Bonus TPU support as well
As recommended in other posts, drop that shit show and move to a real tool. I haven't used phpMyAdmin in almost a decade, and never looked back.
Or if you are using PHPStorm, IntelliJ or most of the other JetBrains productz, the same functions are built in to them.
FastRoute is a nice option. I didn't know it, but I liked it. Bookmarked. Do you know any router framework with "auto router" (which implements router function that allows receive any URI request and resolves it to controller/method/args - AND offers an option to specify some custom routes)? Thanks.
This right here. MySQL via SSH using pubkey auth is the only way I connect to any of my servers.
This. I have a Toolbox subscription so I use DataGrip for databases not linked to a specific project, but the built-in tools for specific projects.
Looks like Windows 95 phpMyAdmin. I'll give it a look but it may take away too many QoL features I've gotten used to in phpMyAdmin.
Time, resources, or brainpower are unavailable to learn enough of LAMP + mail + everything else to fully admin my own server. I run cPanel/WHM which still gives me root access and I can override anything I want. That said, it costs me a lot in higher server costs. Almost nobody is doing cPanel on increasingly price-attractive cloud hosting. Some day soon I will have to decide if the monthly premium is worth it. the control I would be giving up.
You're viewing table results. You want to edit one row and then come back to the results. It cannot be done. They have disabled everything that should make this possible. Right-clicking the "Edit" button doesn't work. Pressing the Back button in the browser after editing a row doesn't work. You must redo the search every time or rely on inline editing which doesn't work well in a large set of results and there's even a dialogue box that warns you of this, which makes you wonder why they broke all the other ways.
An empty line or two does wonders to code readability. 
Yea, no. Extremely subjective with the “best framework” tag. Personally, I tried Laravel so many times and it just never clicked to me. The black box of magic was terrible. Symfony on the other hand? Picked it up over a weekend and it’s been a dream since, and no, I don’t say Symfony is the “best framework” either.
Yii Framework is my choice :) Laravel is hugely popular. Symfony, on second place is about one third of Laravel's marketshare. Yii is third, about half the share of Symfony. At least Yii beats Cake (on fourth) :)
Similar, but DG is used for Stage and Prod server access while PHPStorm only connects to Dev and Local. Takes a conscious choice for me to open the extra app to muck with important data.
Not being facetious, but everything you just said has zero bearing on determining if something is the best...
That's exactly my point - well spotted :)
Oh I didn’t think you meant it any certain way, it was mainly for the people who do indeed think “best” is based on search rankings. Smh heh
I agree with the other response to put the script in another file, but not through an hrml editor, just as pure text. The HTML editor of your cms converts the php code useless. 
The new Material theme looks great. 
I tried the FFI, was way way to slow for my use case :(
I was surprised composer is not on the _initial_ list. However there's movement: https://github.com/semver/semver/issues/495
Come on, seriously responding to a half-assed blogspam? This exact shit is posted here every other day. Someone told the India-based companies that such an article would be good for SEO. So they just spam /r/php with this shit. Nothing to talk about. 
Everything on https://www.redblobgames.com/ is phenomenal. Doesn't cover as much as a book will, but explained in a much more accessible / less academic format than a textbook. Start with the [intro to graph theory](https://www.redblobgames.com/pathfinding/grids/graphs.html) then move on from there.
No joke. The domain is literally like “keywordsindomainnamesimpactseo.com”, not that it would load for me due to SSL error right now.
I'm using dbeaver but it's nowhere near as good as sequel pro, I wish there was a better alternative 
Interesting I've never even looked into it. What's difference between datagrip and sql functionality in phpstorm?
It's the exact same thing. For a while DataGrip had a single feature the other IDEs didn't (the Database Changes window), but these days there's no difference, other than DataGrip being more convenient if *all* you need is the database stuff.
It's a bold choice to decide to not support Symfony bundles, but one which will result in me never checking this framework. PHP frameworks are pretty much Symfony or Laravel for me. And the greatest advantage Symfony has over Laravel is its bundles which provides a neat way to expose a validated configuration and register services accordingly depending of that configuration without any overhead (since it's "compiled").
This. I've not used phpmyadmin in years. I get by with mysql cli most of the time. Mysql work bench is also good, once you get used to how the ui works. Time to broaden your toolset !
Everything clicks now, my old idea of services was getting in the way. I plan on exploring the rest of the atlas repo's once I finish the current refactor/upgrade of my app. Again thank you for the help. 
German motherfucker detected
I don't see the connection with agile web development. As far as I know, it has nothing to do with a framework. [http://agilemanifesto.org/principles.html](http://agilemanifesto.org/principles.html)
This is EXACTLY what i was thinking. Having worked with both Laravel en Symfony, i can say, sure you can have something whipped up quick and easy in laravel... but the code quality is appalling. No self respecting programmer should want to work in Laravel in my opinion, for any project. Symfony is clean, PSR compliant, Solid, backward compatibility is a thing, can do everything Laravel can and better. PS: im biased towards Symfony \_a lot\_
It's _always_ been terrible. They used to do one called "MySQL query browser" or something that was basically the same only it actually worked. No idea why they ditched it. I'll blame Oracle.
[Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne](https://algs4.cs.princeton.edu/)
I heard there is a short version somewhere...
Symlex focuses on simplicity and testability for technical excellence: &gt;Continuous attention to technical excellence and good design enhances agility. &gt; &gt;Simplicity--the art of maximizing the amount of work not done--is essential. &amp;#x200B;
Bundle config is only compiled in production mode and then it's still slower. I've seen apps using bundles who needed more than 60 seconds to display 15 rows from a database in development mode. This is really bad for developers and testers. Of course if you want to configure your app and not code or test, bundles are a great choice.
You might be interested by the "Dvorak for programming" keyboard layout: https://www.kaufmann.no/roland/dvorak/
If you don't use PHPStorm or Jetbrains IDE that contains Datagrip then adminer imo is a great way to go. 
My assumption is they only think user/pass is the way to access SQL on a server. 
Been a while since i did some OSS work, but then i'd rather stick to my PHP expertise and complain about the desktop tooling xD
That's kind of the idea of every framework, to speed up development :P
Looks neat!
Impressive
Technically allready approved now :)
Can't wait for laravel module to try it out! 
The REST benchmark on [phpbenchmarks](https://github.com/phpbenchmarks/symlex-common/blob/symlex_4_rest-api/src/Controller/RestController.php)[.com](https://phpbenchmarks.com) does much more than that, source code is public. Concerning the final performance of your app, testability is key as it enables you to refactor. If you have no tests but lots of external bundles added to your app, performance refactoring will be very hard. This is my business for over 20 years: First thing I do is write tests if there are none and then I throw away everything that is not needed.
Fantastic work. Really concise. Question on the annotations: I've never been crazy about putting functional code into comments. In practice I find it's hard to maintain, as there's no syntax validation and I'm essentially maintaining an expanded language spec that lives in comments. Did you give any thought to using interfaces instead to define some of these things? Eg instead of putting `/* @Type()` above the class, make it `class Foo implements Type` and generate the schema from that?
Interesting comment! Actually, we are really targeting annotations at the moment, but there is at least one part of GraphQLite that can use both annotations and interfaces: you can declare fields in a type using an interface instead of annotations: [https://graphqlite.thecodingmachine.io/docs/external\_type\_declaration#declaring-fields-dynamically-without-annotations](https://graphqlite.thecodingmachine.io/docs/external_type_declaration#declaring-fields-dynamically-without-annotations) &amp;#x200B; I could indeed consider using interfaces everywhere as an alternative to annotations, but it did not cross my mind until now. I'll think about it. &amp;#x200B; Note: if you have trouble with annotations, there are some pretty good IDE plugins to add support for them (like "PHP Annotations" in PHPStorm) that make using them a breaze.
We're on it!
Nice job, looks like a great way to remove boilerplate. Have you tested this with large schemas? It seems like running the reflection on every request might get slow as you approach &gt;100 fields. I am a maintainer of nuwave/lighthouse and can tell you that is a big issue we are having. webonyx provides capabilities for lazy-loading the schema, but we are still figuring out how we can utilize it.
This looks awesome. Well done.
&gt;Having worked with both Laravel en Symfony, i can say, sure you can have something whipped up quick and easy in laravel... but the code quality is appalling. Yeah, about that. The quality of the code depends more on the developer than the framework. I've worked with both Symfony and Laravel and the last two years almost exclusively with Laravel. I've seen horrible code in Symfony as well. And it isn't that hard to write beautiful clean code in Laravel. Although I'm not content with some of the choices in Laravel, Eloquent being an implementation of the ActiveRecord for example, Laravel is the framework to go these days. &gt;No self respecting programmer should want to work in Laravel in my opinion, for any project. I guess I'm not a self-respecting developer if this is true. Fortunately it isn't. If I have to start a new project as team lead in my current job, I would choose Laravel over Symfony for a few reasons. My colleagues know more of Laravel than Symfony, which makes them far more productive in Laravel than if they were to start over in Symfony and get familiar with the framework first. I'm not saying Symfony is a bad framework, in fact it's the opposite. Laravel is also still a very solid framework and there's no reason to state that any self-respecting developer should avoid Laravel like the plague. That should be WordPress or Joomla.
That looks awesome! Is there a way to put the annotations (\`@Query\`, \`@Type\`, \`@Field\`, etc.) in config files? Like in Doctrine where you can put your mapping in XML/YAML files instead of annotations? I don't really like to put infrastructure stuff into my business objects.
Just had a look at nuwave/lighthouse. It looks great too! Very different approach (type language first), but I like the way you leverage type language annotations. Pretty clever! &amp;#x200B; Regarding performance, we try to cache as much as possible. There is still room for improvement but we are already using webonyx lazy-loading features and it helps a lot. I have a project with thousands of fields and the average query takes about 200ms. The query to fetch all the metadata (query used by GraphiQL) takes a massive 5-6 seconds however.
If you want see horrible code for symfony, search OroCRM. For a paid "premium" product, its a horrid code base. I worked with a company whos boss was lulled into the trap. As the developer to work on it it was a nightmare.
Laravel has made a lot of (in my opinion) bad design decisions, like overusing facades, depending on active record, backward compatibility breaking with a minor version. These and other factors formed my opinion that it is not something i would ever want to use in a production website ever again.
How does it stands when you compare it with micro frameworks? Slim, Phalcon, Silex, Lumen, and even CodeIgniter? &amp;#x200B; I searched on your documentation from Middleware and I couldn't find anything. There's also caching, encryption, media libraries, queues, events and other functions that you can add. Will your framework still be that fast?
Shit code can be written in any Framework, it just feels to be that certain frameworks encourage bad code. Some developers can't be saved and will write shit code in any framework you can name, but some frameworks also just don't encourage good, clean code.
Ironically, that keyboard is missing the one key which sparked this thread.
Currently, no. That might come in a future release, but so far, I've really designed GraphQLite to be "annotation based". However, there is a way to declare your types without touching your business objects. You can declare types in dedicated classes: [https://graphqlite.thecodingmachine.io/docs/external\_type\_declaration](https://graphqlite.thecodingmachine.io/docs/external_type_declaration) If you are more into YAML files (and if you are using Symfony), the overblog/graphql-bundle is taking the configuration approach pretty far.
I agree with you regarding ActiveRecord. I don't feel like the backward compatibility is a big issue to me personally. It usually doesn't take me too long to process the changes when the framework upgrades. Regarding the Facades: you don't have to use them and I don't use them in my projects. (See [https://laravel.com/docs/5.7/contracts#contracts-vs-facades](https://laravel.com/docs/5.7/contracts#contracts-vs-facades)) In order to write testable, clean code, I always use the contracts and let the service container inject the dependencies where I need them.
Symlex used to be based on Silex, you'll find a few words on that in the docs. Think of it as a micro-framework with a standard Symfony service container instead of some plain PHP bootstrap file. You can use it with every PHP library, but it doesn't include a queue or an event system. It's simple and lean. I personally don't think you should couple your app's logic to a framework, so if you want to use a queue, just do it and don't wait for the framework to provide a Middleware or Bundle for this. The REST router is just 100 lines of code, really easy to understand and adapt even to the strangest requirements.
I disagree, yes Python is slow, but it would be never have become the de-facto standard for ML if it were not for all the specialised libraries written in C, Cython, using a JIT, etc that make it orders of magnitude more performant than something like PHP for machine learning. 
I understand, however my point was more, that symfony has this weird enterprise software ecosystem. and through my years of working with symfony (against my will) its ecosystem is just a bag a shit. That is the main problem with framesworks and tools created by companies. Its repeated all over the place with SensioLabs and Rouguewave. My company once paid a few thousand pound to send some developers to ez conference. Oh boy, I couldnt wait to leave. We paid alot of money to see sales pitches and advertisments. every talk about some product some company has made and why you should buy it. The only good talk there was the Blackfire talk a geniune talk about a free product (though also paid), how to use it, tips and tricks and stuff. But if you go to any other confrence like laracon, the talks are great, How to use new laravel features, how to incorperate certain tools into laravel, improving developement lifecycle. One that was an eye opener for me was the [advances git tips](https://www.youtube.com/watch?v=duqBHik7nRo). It improved me as a developer, not as a client. &amp;#x200B; Thats the difference between laravel and symfony I personally experiance. Using symfony I feel like a client, with laravel I am a developer not tied to some mess my boss paid for which is now my problem. 
That's quite demanding of you.
Is it based on sqlite? Just asking due to the name.
"Reduced Development Time" Idk I noticed I spent too much time scaffolding up a working environment for js than PHP 😂
Should this still be posted on the PHP subreddit?
Not supporting PHP anymore, not suit for Php sub
For other needs, this works ok: SELECT value FROM talo\_data WHERE position\_id = 8 AND time BETWEEN CURDATE() - INTERVAL 1 DAY AND CURDATE() ORDER BY id DESC LIMIT 0,1
Glad I could help, and good luck!
If you are getting *value* from a php variable you need to concatenate it into the string with the ' .' Operator. 
Was looking for this - We are also using lighthouse in production at the moment
you need to show some of your PHP code here if you want anyone to help you...
What's the point of hack nowadays? and hhvm dropped the ball on php so no right for it to be in php subreddit.
&gt;Another question: Wouldn't it be better for the PHP community if HHVM didn't exist? Hacklang is still somewhat a dialect of php. Something like Dart is to js. I think it is healthy to be having such a thing in a community.
/r/phphelp
In times before php 7 HHVM was nice idea. Now I don't see point in HHVM, especially now since it dropped php support. And current Hack language looks like somebody cross-eyed C++, PHP and Pascal then said "yeah, I want all of that" and went hacking ;)
I'm surprised you haven't heard of lighthouse or included in the landscape section of your article. I was under the impression it was the defacto for anyone using graphql with PHP these days. I really done like annotations so I'll probably be staying away. Although I'll be interested to see how well your caching works.
It's interesting to look at PHP through the eyes of a company running at Facebook's scale, and look at why they dislike certain features enough to end all support for them (esp array key string-to-int conversion).
Not entirely true as well, the web consists of 70% php based websites and applications.
Nope. they don't have to show anything here. but head directly towards /r/phphelp insttead. A special place where people are masochistic enough to answer questions from people who have no idea what are they doing
This is a blog of a Node.js consultancy shop. It's the equivalent of Coca Cola sponsoring a study that surprisingly concludes that sugar is good for you.
I moved this there, thanks.
&gt; According to Indeed’s hiring lab, job searches for Node.js rose 57% over the past year, putting the runtime environment among the top 10 tech skill searches, whereas PHP took only 14th place in that same ranking. Kind of funny that the table below this sentence is showing Magento at 4th place and Laravel 7th :D
:-P
You could provide some phpstan rules for the phpdoc maybe 
You can't blame Symfony when used by incompetent people. I will gladly demonstrate 100 million rows working instantly (i.e. &lt;100ms) in development mode. Bundle config is always compiled, even in dev. It is only when files are changed that it gets recompiled. The other speed diff is that log level is lower in dev so all deprecation notices (via reflection) are also logged. So no... Symfony is super-fast, it really is hard to make response slower than 200ms in prod mode and 300-400 in dev mode. 
There were two projects, Query Browser for SQL stuff (don't remember if the visual design was already in there back then) and MySQL Administrator for server/schema/user management, Workbench was supposed to merge the two. Never used Administrator, but Query Browser was decent and it worked, Workbench doesn't. I dragged on with it because I had some DB designs of old projects I have to maintain in it and didn't want to migrate to another tool just yet, but finally gave up on it when I had to manually remove all state files every time before starting it up because it would crash otherwise... and there are a lot of these quirks, bug reports are full of these kind of things, but the response usually is "we don't support environment X". I don't think MySQL Workbench is particularly well maintained, if it even is.
&gt;Another question: Wouldn't it be better for the PHP community if HHVM didn't exist? HHVM and Hack Lang motivated PHP core members to launch PHP7 with the performance as #1 aspect in mind and you can see it was a big milestone for PHP.
Not exactly, PHP devs should know that they can't trust in HHVM anymore. 
I recommend heading over to /r/cscareerquestions fot that kind of question
I loved it, but ever since I updated to mojave it crashes whenever I close a tab. The software no longer seems to be very supported, a proper update hasnt been done in a few years. I tried the "nightly" builds, and while it fixed the crash on exit, I dislike many of the new changes, nott o mention I have another bug where it looks like the charset gets all wonky on the table list. Time to find a new osx tool. Shame.
Damn is that a misleading article. I consider myself above the tribe-behavior and embrace technologies like NodeJS. But this article is just embarrassing. Does the author even understand what it means when there are more job-searches vs. job postings? And trying to "steal" the usage of JavaScript and attribute it to NodeJS is just too dumb to be taken seriously. What shall we learn from this article, OP? Is is here for amusement?
Blaming is never good and there are certainly many great use-cases for Symfony. This framework is for developers who want to work in a learner way and write fully testable code. From my observations, developers find it very hard to test functionality that is depending on (other) bundles as you need to bootstrap the kernel for that, even in tests. You can do it, but it's slow and awkward for many reasons. So you end up mocking dependencies. For that, you need to understand them. So you start digging into those bundles to provide the same objects and data. That's how Symlex was born. Think of it as a "testable Symfony" that doesn't use the original kernel and doesn't support bundles. Instead of using bundles, you might also want to try separating your app into different small &amp; fast micro-services. I think large apps that also render lots of HTML on the server are a thing of the past. Symlex is not well suited for that. The response time for Symlex apps is typically &lt; 50ms in development, ideally 1 to 20 ms on production.
Nope, it's pure PHP :) Just a pun with "GraphQL" and "-lite" to convey the meaning of a lib that is "light" to use.
As promised, I've posted a new article, and here's a link for you @punkpang https://blog.sarfas.codes/development-career-tips-and-tricks/
Good idea. Even better! We could work on PHPStan rules for any Doctrine Annotation that exists (annotations in GraphQLite are implemented using doctrine/annotation which is the de-facto standard)
Oh wow, thank you so much for the querious suggestion. I been fiddling around with this for a bit, and this is everything I wanted SequelPro to be. 
There are quite a few libraries out there. Don't know why I did not see Lighthouse (maybe because I'm very rarely using Laravel) I just added a link to it in the article.
Sounds even better 👍
[Writing a hello world app today](https://fr.dreamstime.com/photo-stock-patient-masculin-docteur-talking-to-unhappy-chambre-d-examen-image85193027) 
Ahhh damn! I was thinking that was an issue that only I was experiencing. Yeah same here, crashes after closing a tab. I've been using tableplus today at work and it's really nice. Trial limits you to 2 connection 2 tabs though
We are having a PHP project and its hustle to work as a team because we are sharing updated files through Google Drive and downloading it in order to update a lines of code. Seeking for guidance. TIA 
How to work as **a Team** on PHP PROJECT? "I pity the $fool!"? First, not every team are or work in the same way, but the classic way is to split the job. Agile is a nice approach but it is not for every team (most teams use a custom-agile framework). Also, your customer/product owner IS PART OF THE TEAM and of course, the management if any is also part, whatever he likes it or not. Let's say that your manager (if any) is a useless guy that he/she doesn't know about programming. It is not a problem, if he doesn't know then he should do other work, for example, **obtaining resources**, talking with the customers and so on. 
Firstly I would looking into using a version control system such as Git. 
* What is your experience working as a team?. * What has been your big team?. * How do you deal with conflictive personal? * How do you deal with vendors/contractor? * How do you deal with an angry customer?. 
I gave an honest feedback, the guy is promoting his product as an alternative to Electron, yet Electron can do this simple thing he isn't even willing to provide a sample code for
Most of the questions I have been asked fall into 3 categories - 1. How do you motivate your team to get the most out of them. 1. Dealing with conflict and various ideas among your team. 1. How do you teach programming concepts to team members. The first is probably the most subjective. The second is the most difficult for me, I think employers are just looking to hear about your past experiences. The 3rd lines up with technical interviews you've had your entire career, except now instead of explaining how you apply the concepts yourself, you now have to explain how you review &amp; help other team members learn them. 
I need real time cache invalidation and for that to be achieved I've decided to use taggable cache with the data in memcached and the tags in redis. The info in redis is sharded using twemproxy. Because of the shard the operations are not atomic anymore and on high load we sometimes lose some tags and the caches remain orphan. For the current implementation I've used [https://github.com/php-cache/taggable-cache](https://github.com/php-cache/taggable-cache). Do you have any other idea how I can build a system so I don't lose the tags anymore? Do you think that a lock in redis while saving/removing (on cache invalidate) the tags and data would fix the problem? Thanks
Looks neat! I've been thinking of moving our main GraphQL server at work from a Node.js solution (graphql-yoga) to PHP and have experimented with nuwave/lighthouse but not committed yet. Will check this out in detail later today. A big part of lighthouse I like is its use of standard Schema Definition Language, like I pasted in my yoga schema and it works perfectly. Of course if you're already writing PHP it feels pretty comfy to do it this way too. There's been movement in the Node sphere away from manually-written schemas with SDL and towards auto-generation of schemas from resolvers or objects that define the type and resolver together, is there anything like this happening in PHP world?
Using google drive is your problem. Go and make a free account on github, gitlab or something like that that provides version control and use that. Also go and read about branching and merging in git. That's what lets people work on things independently and combine them when they're finished.
But why would I test other bundles? And bootstrapping kernel is very easy, check the setup method in my bundle [https://github.com/zmitic/rewire-bundle/blob/master/Tests/Decorator/RouteDecoratorTest.php#L23](https://github.com/zmitic/rewire-bundle/blob/master/Tests/Decorator/RouteDecoratorTest.php#L23) Note that this is my first OSS bundle and code quality is not the best but it 100% unit tested. People using my bundle would never need to mock anything, I did that for them. Also, Symfony docs says you should do functional tests. Sure, you have to sometimes dig into unit testing but if my service depends on for example Gaufrette driver, I will configure dummy Gaugrette driver in services\_test.yaml and only test my service. I actually do that often, it is pretty simple. Working with real files would clutter my dev env so for tests, I set dummy folder that can be freely deleted.
Are you living in the stone ages?
So I've interviewed a few candidates for senior positions at two places, and mentorship was big at both of them. Being a Senior Developer meant that we needed two main skills: 1. A strong understanding of a wide range of design methodologies and patterns, with good knowledge of how to architecture an application. Basically Seniors are needed to set down a good backbone to build on top of 2. Willingness to mentor. You use your Seniors as a way to train and skill up your Juniors and Mid-levels. The extra 20-30% in salary is because you're a strong value-add to the other developers. Now, in both places we knew that most good candidates we were interviewing wouldn't necessarily have mentorship experience already. A lot of people work in small teams, and don't get the chance. What we were looking for was how they *felt* about mentoring. If the idea of teaching someone how to do better makes you happy, if you can talk about how you got satisfaction when you were teaching your coworkers about new methods/design patterns then that was good enough for us. Senior Developers who fit in are **hard to come by**, so if someone seemed like a cultural fit, seemed to be on the right skill level and *wanted* to mentor, a lack of metorship experience wouldn't have disqualified them
Im sorry if i offend you but i am a beginner. 
I think it's cool. It's good to know who is behind the project and that you can get professional paid support if you need any. If you have problem with that, well that's your problem.
I'm still somewhat new to interacting in /r/php but I believe you should take your questions to /r/PHPhelp. See the rules regarding "No help posts."
Yeah I been trying Querious, been really liking it. The UI is almost identical to SequelPro (and actually, it even imported all the connections from SequelPro automatically) with a lot more features.
Sure, it can be done even in less time. The only real issue is **what** you have learnt in those 2 years, time really is not a problem. Example: I have seen people with 10+ years experience not knowing what composite indexes are, never heard for nested set and don't see problems in Wordpress code. &amp;#x200B; One guy with about 3 years experience applied for senior position but never heard for *implode* and *explode* functions! Now that is confidence :) The worst of them is guy with 17 years of experience claiming that ORM should not be used on large tables as they somehow magically slows down the ORM. There is video of him on youtube but it is in Serbian, probably not very helpful. So don't worry about time you spent, it is completely irrelevant. If you are going into freelance world, my advice is to focus on upwork. 
thank you, any advice on where to start learning php?
Mentoring and managing are completely different things that require completely different skills. Your first paragraph says one while the second says the other. Given your context, I expect it’s the former. If you need to be a mentor, that’s mostly being technically skilled, approachable, and patient - approachable being the most important. Feedback (eg when asked questions or during code reviews) needs to come across as “it’s fine you haven’t learned this yet” and never “you’re dumb for not knowing this already”. So it’s more of a personality read on the whole interview, instead of a specific question they’d ask. The only thing I’ve been asked in this area was to do a sample code review.
Didn't you say you learn it for last 2 years?
sorry my bad, I meant: If I'm gonna be learning it for the next two years, is it easy to find a source of income via freelance project. sorry for the misunderstanding.
&gt; have seen people with 10+ years experience not knowing what composite indexes are Some people might not know the term "composite index" and what it relates to. I find it hard to believe that the guy in question didn't know or didn't use them in their career. Keep that in mind especially when you talk about people that are not native english speakers. I've hired decent guys with 0 english skills. Yeah it's a burden, since I have to translate technical docs and whatnot, and some motherfuckers just love to write long-ass technical docs, but for a grunt work they are perfect. 
Let's say you take 5 perfectly tested bundles and mix them together, then the result is not tested. Symfony docs (might) say you should do functional tests. I say you should still do unit tests as this is the only way to understand what the code is actually doing and refactor if needed. For me, this is the essence of agile development. I accept if others say their style is all about using pre-built bundles and do functional tests when everything is up and running. Why not? Bottom up development is old school, totally agree. To give a practical example: Symlex simply includes [twig.yml](https://github.com/symlex/symlex/blob/master/app/config/twig.yml) instead of using [TwigBundle](https://github.com/symfony/twig-bundle/blob/master/TwigBundle.php).
No problem. Yes, as I said, it can be done in much less time. My first freelance project was after 1 year and at that time (2008), there was no tutorials like there are now. But again, it all depends on what you will be learning. My first 9 months was wasted on some shitty code in the company I was working. The only thing I learnt is to write shitty code as well. After that, I made some crap that I called framework (now I know it was not) but I did use Doctrine for ORM and Smarty for template. The advantage of Doctrine is that at the time, you could use it for data validation as well (don't try to do that with Doctrine2). &amp;#x200B; But Doctrine thought me a lot about databases, typehinting and clean code. In 3 months, I got my first freelance project at $12/h. Client himself increased it to $16/h; pretty good for someone who just started. Now there are far more sites for learning PHP, you have composer for dependencies, stackoverflow for questions, powerful tools like annotations... You won't need years, but months. But you will need to search for those sites by yourself, I really can't help you with beginners questions. My advice is to focus on Symfony4 but don't get scared; it will **force** you to write clean code and teach you modern approach to web application development, but some of the things can scare beginners. After few days, that feeling will go away and you will be eager to learn more. And it is crucial not to try to make your own tools (like I did) because it will be waste of time and in reality, you won't be learning much. I say this from personal experience, what I made was nonsense when compared to real frameworks. &amp;#x200B;
The main thing that I've noticed when having 'what version should this be' discussions is the issue of changing dependencies. There's no real guidance on what to do if you need to introduce a breaking change by doing a major version change on dependencies. Ideally you'd only do a minor bump and let people using your package upgrade when they want to. However, I've noticed a few instances where your package is dependant on the same package as the project which requires your library. So for example; you're writing a library and use `symfony/yaml` `3.4`. Now any project which requires your library can't use symfony `4` as that requires `symfony/yaml` `4` or higher. So this should really be a major version bump otherwise you're stuck incrementing patch versions when doing minor changes. Maybe this is a problem that should be solved by instead installing different package versions for dependant packages where they differ, rather than a SemVer issue, but I'm not sure how this would be handled in composer.
&gt; mentoring and answering questions for a mostly junior to mid team of 5 developers. This is different than managing. I usually answer this question along the lines of "I have worked with and learned a lot from many good developers over the years and I always appreciate the opportunity to pay them back for their time by mentoring others."
&gt;Let's say you take 5 perfectly tested bundles and mix them together, then the result is not tested Of course it is not tested, one cannot expect random 5 bundles will do something by themself, you need to instruct them. Otherwise we would be closer to real AI :) &amp;#x200B; Like my example; some service depends of file reading/writing. I would write **unit** test for method FileExporter::exportToCsv($entities) but I will not test if gaufrette works; I know it does. And I would write test that will read that file FileExporter::createEntitiesFromCsv($filename); again not caring about gaufrette. That is my point, really. TwigBundle is not just a wrapper but adds more functions like {{ render(controller(...) }}, {{ path() }} etc... that only make sense when used inside Symfony framework. So you can't even use it. &amp;#x200B;
I assure you, they didn't. At first I though the expression is not clear but no; even UUID was something that most didn't hear about (some did). This all happened locally so language was not a problem. I kid you not, people applying for job were really that bad. But it could be local to my country; due to crap situation here, lots of developers are emigrating.
My first thought is that the issue you describe should not be a semver responsibility. After all, semver is meant to guide developers on how to version their software. However, your point is still a valid concern, at least for composer and other package managers. I do like how npm addresses this through [peer dependencies](https://nodejs.org/en/blog/npm/peer-dependencies/). It doesn’t solve the problem, but it instead lets the developer better dictate what peer software it’s compatible with. This is very useful for plugins so that they do not have to depend on the parent software. 
&gt;TwigBundle is not just a wrapper but adds more functions like {{ render(controller(...) }}, {{ path() }} etc... that only make sense when used inside Symfony framework. So you can't even use it. In other words: Everything might happen and you depend on the specific framework kernel to make it work. You won't be able to render this template outside of this context. It essentially is strong coupling.
thank you a lot for putting time and effort into this comprehensive reply
hard disagree. This is the last update that should mention PHP, thus the last HHVM related thing that should be shared with r/php.
Are people still using books to learn coding? Why? I'd recommend a getting started project with https://php.net. For example create a changelog like https://changelog.travis.com with admin panel.
pthreads is best tool for a job when you have large part of the logic written in PHP
[The Grumpy Programmer's PHPUnit Cookbook](https://leanpub.com/grumpy-phpunit) Because learning how to write unit tests leads to making your code easier to test, which leads to the code being simpler. Also the ability to change things and have your test suite tell you what broke is amazing.
From two weeks ago: [Why aren't there any modern beginner books on learning PHP?](https://www.reddit.com/r/PHP/comments/am33h9/why_arent_there_any_modern_beginner_books_on/) I really like [PHP Objects, Patterns, and Practice](https://www.apress.com/gp/book/9781484219959) Depends on what you want to focus on PHP The Right Way isn't bad, Modernizing Legacy Applications in PHP. Look for books by established authors published &gt; 2016, PHP 7 came out in December 2015. Modern PHP hasn't been updated since PHP 7 otherwise it wouldn't be a bad start (from author of PHP The Right Way). John Duckett has a book coming this year PHP &amp; MySQL: Server-side Web Development, his HTML, CSS and Javascript books have been great across multiple editions. There is a list of books at PHP Classes: https://www.phpclasses.org/blog/post/567-The-Best-PHP-Books-of-the-Year.html
There seems to be a valley of unknown betweens the hills of Symfony and Laravel, if a library is Laravel-first, it has less chance being known by Symfony devs and vice-versa.
Tableplus?
I've been working on a PHP library to allow myself to connect to multiple MySQL databases at once, primarily to solve the issue of scaling horizontally, and to make it easy for myself to scale. The way it works is that you pass in an array of connection strings and the class will make PDO objects for each connection string and set the attributes exactly the same for each one. You can use the class pretty much the same as normal PDO, for example doing: &amp;#x200B; $multiPDO-&gt;prepare("SELECT \* FROM...") ...and then doing: &amp;#x200B; $multiPDO-&gt;bindValue(":secure", $unsecureVariable); &amp;#x200B; A great thing about it is that when you bind a value to the class, it binds the same value to ALL pdo objects and prepares statements on ALL PDO objects in the class. For inserting data though it's a bit different, the way I've done it is that you can pass in 2 variables: &amp;#x200B; $insertMode = boolean $insertTable = string (name of the table you want to insert into) &amp;#x200B; If $insertMode is set to true, then it will prepare all PDO objects but only execute the insert query into 1 table, whichever has the lowest row count (checked with another query done in the function). This way if you have a table in one database with 57K rows, and you've just made another table in another database the same, with the same name it will insert new rows into the new table with the lowest amount of rows. It means you'll be able to scale, hopefully, if this goes to plan. &amp;#x200B; Does this look promising? Also, I'm interested in seeing whether a project like this has already been done and if any of you would be interested in using this, thanks.
Wow! Every sentence is misleading at best! &amp;#x200B; \&gt; With PHP, you will be forced to use HTML/CSS/JS for front \&gt; With Node.js, you can write solely in JS &amp;#x200B; Wait, why bring HTML and CSS into the loop for PHP and forget it immediately after for Node.js comparison? &amp;#x200B; Is it because selling a single technology vs 4 sells more than selling 3 vs 4?
There are many resources. While some enjoy video's, and others just read the language specifications and know it. My learning style is reading a book with confidence and excitement, doing lot's of exercises, and read the book again. Thanks for the tip though! 
Thank you!
TDD is not a requirement, but I do like it. Thanks for the tip
Test Driven Development is a specific methodology that uses unit tests, but unit tests != TDD.
Its few months old app. All he has to do is hook up whatever storage he has and provide a web API or whatever to his PHP to consume. &amp;#x200B; Still, queues &gt; pthreads. 
The main problem with SemVer is that the docs describe it as a simple Major.Minor.Patch so if you stop reading there you would have the wrong impression because it redefines the word "major" "minor" and "patch" after that. Because SemVer is really: breaking-change.addition.non-breaking-bugfix It was never: major.minor.patch
&gt; is it easy to find a source of income via freelance project No. It's not easy at all. But can you do it? Sure. For the most part because of the infrequency of paid work, you need to charge a premium for your services--which if you produce less than stellar work, people aren't going to pay for.
Also Mac only, I was referring to their not being a windows equivalent for Sequel Pro
You have no idea what OP is doing. Queues are something different with own drawbacks and advantages. It's not interchangable. And not sure how do you not see drawbacks being forced to write web APIs. Not having to write API which makes you throw all your intellisense and type safety guarantees is always preferable
I learn exclusively by doing, but use books later on to solidify or dive deeper when I feel stuck
The $ is in the top row the first key on the left?
It wouldn’t be better for PHP. HHVM was a great idea a few years ago and it still has neat features PHP doesn’t have(ie. Lambda and genetics). Also the existence of HHVM as a competitor/alternative is a good motivation/driving force for PHP to continue to improve and get better. Some ideas of HHVM can be borrowed and implemented in PHP as well to make it a nicer language. 
can you share youtube link?
Specifically [type annotations](http://docs.phpdoc.org/references/phpdoc/tags/var.html) . I think they originally come from PHPdoc, which is a tool to auto generate documentation for your code, but there also read by IDEs and static analysis tools.
I've seen those 10+ years experience in france... A web agency, doing quick shop for your local plumber or restaurant. They were still doing 90s style dev, no front controller, one script file per url, no templating whatsoever (even not include/require, header and footer were copy pasted in each file), sql in html, globals everywhere and a single functions.php file, everything in public folder, md5 passwords. And why use php 7.0, when php 5.1 did the job in his in house shared "hosting" server, mails sent always ended in spam... OOP, composer, frameworks, even pecl/pear, all were deemed to be overcomplicated java-style nonsense. Ha, I forgot, FTP/zip versionning and deployement. This was only 7 month ago. If you want to know how it happens : https://daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner/
This looks like a beautiful library. I'm concerned however that our industry/profession is advancing too rapidly. 4 or 5 years ago being a full stack web developer was a resume enhancement. Now I fear it's becoming a liability. At work our entire team is stretched too thin now, and what one full stack developer could build by himself 5 years ago now takes 3 developers of equal skill today. GraphQL is a great example of the problem - It was born out of the need for more flexible APIs because of the SPA craze. So here we were with Google screwing everyone over with their abandonment of AngularJS, practically forcing entire teams to learn most of it all over again. These teams began wondering why they left Knockout, Ember, and God forbid *gasp* jQuery for something that died as quickly as it arrived. So along comes a spider... Ahhh yes... That little atomic logo that we all call React. It's been crawling across the carpet for a few years now. Speak now, or forever hold your peace. Let's try it... Yay! Now we've got another framework option! Oh. It's only just a library. So WTF do we do now? We learn Node.js!Ahhh dammit! Now we gotta learn a new backend framework! Express, here we come! Huh? What's this? How come we never heard about this? This little green V is like manna from heaven! It means Vue for victory! Holy she!t, it's the answer! We can now go back to Laravel! Huh? Oh gosh dammit, it's had several major releases since we last used it on a new project. No matter! We can study and learn about the changes. Never fear! Oh for heavens sake, what now?!? Docker? WTF is that? How much do we need to change in our CI methodology to accommodate it? Everything? OK. Whatever... Now WTF is this Webpack thing? Use Rollup instead? WTF is that? Oh. So Webpack for our applications and Rollup for our libraries? Got it. And What's this about Gulp? So we don't need Grunt anymore? Got it. Beg pardon? Ah hem. Lose SASS and use what? WTF is PostCSS? What that?!? Did you just say we can't use PhantomJS anymore? Puppeteer it is then... WTF did you just say? REST is on it's way out the door? You've got to be kidding me... GraphQL? So now we have to learn another standardized form of communication? Oh, so Laravel can't do it natively yet? And we need to learn this now to stay ahead of the curve? With all due respect Mr boss an, it's been 10 years since we were ahead of the curve. Is this a marathon? No, my good dev, it's just another episode of Mary Noble Backstage Wife. I can't wait to hear how the next episode ends!
I'm sorry but that whole thread doesn't make any sense to me. &gt;Bundle config is only compiled in production mode and then it's still slower The container is compiled only once, this include interpreting and validating the bundles configurations. Once it's done, the dumped container is re-used so this whole overhead is gone. Since typically this is done during a cache warmup phase as opposed to the first request on production, it has zero overhead for the end-user (or even you in dev unless you changed a configuration requiring the container to be compiled again). This is the only reason why Symfony gets away with such complex set-up of configuration, validation and abstractions of services via definitions. Now before digging deeper in your other arguments: &gt;I've seen apps using bundles who needed more than 60 seconds to display 15 rows from a database in development mode Let's agree on something here: we are talking between reasonable developers developing reasonable code. How bad people can manage to do is off-topic since it's totally unrelated to the framework and the way the framework works. If someone wants to do poor and slow code, he/she will always find a way to do so regardless of the technology used. &gt;From my observations, developers find it very hard to test functionality that is depending on (other) bundles as you need to bootstrap the kernel for that, even in tests. You can do it, but it's slow and awkward for many reasons. So you end up mocking dependencies. For that, you need to understand them. So you start digging into those bundles to provide the same objects and data. That's how Symlex was born. Think of it as a "testable Symfony" that doesn't use the original kernel and doesn't support bundles. Instead of using bundles, you might also want to try separating your app into different small &amp; fast micro-services. I think large apps that also render lots of HTML on the server are a thing of the past. Symlex is not well suited for that. There is two things I want to break down here. &gt;Instead of using bundles, you might also want to try separating your app into different small &amp; fast micro-services. The first one is about what a bundle is about: it is nothing more than a bridge for Symfony. It: - exposes a configuration which has the benefit of: - being auto-discoverable - validated - register services - have an extension point on the application bootstrapping process The last part is arguably the most controversial since you can really mess things up. However it's worth mentioning that it's unlikely to be ever needed in 99% of the cases and the few attempts there were to remove this part were shut down because _there is_ valid cases. So it's a necessary evil of some sort. Anyway, if there was a part that could be debated over, I think it would be this one. I however don't see how any of the points above have to do with splitting an app. A bundle is not a core functionality of your application that brings the question of wether it should be part of the same app or in a separate app. Concrete example: I install a bundle to expose an HTTP client. How does it has anything to do with the monolith vs. micro-services topic? The second point is about testing and testability related to bundles. When you install a bundle, you configure it and may will influence how the registered services are configured. However what you are likely wishing to test is how you are integrating those services, not the bundle configuration. For example the installed bundle exposes the service `ServiceA`. In your application you either: - Accept the tight coupling with that bundle/dependency and use `ServiceA` directly. - Have an adapter using to some degree `ServiceA` In the first case, what you are likely wishing to test is that `ServiceA` is configured properly and does its job. You don't want to extensively test that service because those tests should already exists within the bundle/dependency tests. Of course if it turns out that bundle is under-tested, unstable or simply very critical, you might go an extra length and either contribute to the bundle tests or add tests for this in your app. In the second case, what you want to make sure is that your adapter is working as expected. For that there is no cutting it, if you mock `ServiceA` you are just going to blindly trust that `ServiceA` perfectly respects whatever contract it's API has. Since it's an API you have no control over neither do you on its implementations, it's a very risky and unreliable way to test your adapter. The best way to go is to have a proper integration test using your adapter from the container to ensure its configuration matches what you have from the app itself, not some set-up of what you expect it to be. You might argue it is slow, and I agree! However if you use the KernelTestCase properly, the app should only be booted once for the whole test suite (unless you are playing with dynamic parameters in which case you might want to do more things) so it's not that bad. In any case, at no point you should mock (except some parts of your test for some checks on the control flow for example) a third-party dependency. "Don't mock what you don't own" as they say. And much less all the configuration and bundle dependencies: if there is anything to do there, it's for the bundle itself (as in the bundle as part of its test suite), not your app.
Could you please explain the differences with your library and the other library php-ai/php-ml ? Thx
Principles of package design 
This caught me off guard, hence the post. Typedness, as per the attached note in the example, is based on strictness at the call side, meaning that even though I define strict typing and a typed function in my file functions like \`array\_map()\` are defined in a weak context, probably for backwards compatibility, and thus values are silently coerced.
"If statements work the same as they do in PHP" They don't entirely. Go if statements can start with a statement, i.e if a, err := somefunc(1); err != nil { .... would be in php: try { $a = somefunc(1); } catch(\\Throwable $err){ ...
I understand and share some of your frustrations, but staying idle is stagnation. Each tool you have mentioned has been a considerable evolution over the paradigms of the last with a shallower learning curve. I embrace the amazing tools we are given now, despite still having to maintain legacy applications that will never have the budget to be modernized. Being a full stack developer means that you need to embrace this too, or you will be left with the masses creating wordpress and laravel apps. &amp;#x200B;
I did not know this happens. Thank you.
This is one of the rough edges of `declare(strict_types=1)`, yes. You can't control the typing mode of where your callback is called, and internal functions (everything in the PHP manual) are in the default mode, weak. But you can do something like: &lt;?php declare(strict_types=1); function strictWrapper(callable $foo): \Closure { return function(...$args) use ($foo) { return $foo(...$args); }; } then do array_map(strictWrapper('myCallback'), [1, 2, 3]);
[https://github.com/bramus/router](https://github.com/bramus/router) maybe could be a good alternative. It has a simple implementation.
Yep, this is pretty much what I ended up thinking of doing after i posted... It has a bit of a "if you can't beat them..." feeling, but at least I'm back in control regarding my types :)
I still think Facebook dropped the ball when they abandoned the original HPHPc ( PHP to C compiler ). Plenty of possibility outside of Web hosting but we will never know where that road will have turned to. What is clear, that HHVM is a dead end for most companies, with everybody dropping support for HHVM.
Thanks. I've already reworded that into a canned response.
Yeah the job posting conflicts with the non-technical intro interview I had with HR. Both say a bit different things. Unfortunately, those are the only two things I can go off for now.
I don't mind learning new things when they actually make our jobs easier or result in a better product. That's why we went through this soap opera right? Of course it is! So thus far you and I are 100% in agreement. Here's where our paths diverge. Each one of those tools is a link in the chain, another step in the process, another jockstrap to support the boners we get when we put a new tool around our belt. But there's one thing you can't escape, nor expand, nor solve by putting your manhood in a wheelbarrow like they did in Southpark --- time! The number of skills needed to be a cutting edge full stack developer today is easily two or three times what it was a decade ago. This is expected. As technology increases so does the complexity of the things we can do with it. But it's reached a point where full stack devs aren't able to meet deadlines anymore. We're building SPAs that would have taken half the time to make if they were MPA. You know what comes next right? Yep! Sooner or later you'll be forced to cut corners. The unit tests start falling out of sync with the code base, the continuous integration starts becoming a headache, the QA checks start to become less frequent, and all the things you know shouldn't be happening all start happening because you didn't realize that Einstein's Theory of Relativity needs 186282 miles per second to be fully appreciated. Full stack cutting edge web development today is a total clusterphuk of build and deployment tools that no one will even remember how to use ten years.
What are your standards ? The website is clean, organized and easy to navigate. You have a documentation section, a download section and an updates section. Everything you need for this kind of app.
I’d suggest contacting the hiring manager for clarification, if for no other reason than it should help you prepare better. Plus you want to be sure it’s a position you actually *want*. 
- Logo scrolls on top of the header - Font is tiny and hard to read - Color choices are bad, horrible contrast between text and backgrounds, light grey images on an only slightly darker background - Extremely inconsistent line spacing - Entire sections are not properly centered or aligned to their containers - Little (!) icons everywhere which shouldn't be needed if the content was actually clear enough to explain wtf each thing is - Screenshots that aren't in a box, such that they look like they're part of the page and not a screenshot, buttons in the screenshot look like they're clickable because the share the same style with the section beside it - holy fuck my eyes
I still use Workbench as my model designer, but use HeidiSQL for any in-DB queries. What do you use to design your schema?
God Dammit
I'm assuming you read the error and validated the credentials you are using?
checked wp-config file but everything is the same. &amp;#x200B; \----this is what it suggests me to do--- This either means that the username and password information in your wp-config.php file is incorrect or we can’t contact the database server at localhost . 
And if you change your screen ?
People like you make this sub annoying. You didn't even ask a question dude. 
PHP Pandas is great for starters: https://daylerees.com/ PHP Design Patterns, O’Reilly, the one with the fish on it, is great too. 
What are you talking about
This is why it's good to use a type checker as well: [https://getpsalm.org/r/5743c5923c](https://getpsalm.org/r/5743c5923c)
Yeah
You ought to get an agreement with both the company employing you, and the employees you're meant to be mentoring, exactly how much time you will spend programming and how much time mentoring. &gt; for a mostly junior to mid team of 5 developers. Mentoring this many people sounds like a full-time job by itself, without any time for you to do your own programming. If you can set it up so that you're more just mentoring the mid-level developers, and they are the ones mentoring the juniors, you might have some time in the week to do _some_ programming, but probably less than 50% of your time still. If the company is expecting you to write all the code that a full-time developer would be expected to, and also mentor all the other staff, then their expectations are not very realistic, and you would be setting yourself up for a fail if you hadn't discussed expectations.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
There are plenty of places if you Google it, but make sure you are not learning version 5. For example. CodeCademy is a good one to start with. 
You might even be able to get simple projects or edits after only a few months. Local work training is especially helpful.
https://tomdemarco.com/Books/deadline.html It changed the way I think about software development. Also: everything about functional programming no OOP class dared to teach you. It changed the way I write code. 
You need a server environment that runs PHP. You can do this on a web server if you have access to one (most have PHP by default), or locally using a software bundle like MAMP or WAMP, both of which simulate an Apache web server environment on your own computer. There are plenty of tutorials out there showing how to set it up. Once things are up and running, open the script in a web browser to run it.
`return function(...$args) use ($f) {` # $f - is missing
I'm guessing you came from Python
/r/PHPhelp
Could also just install PHP locally and run the script.
[https://www.youtube.com/watch?v=c8-RERXHjxM&amp;feature=youtu.be&amp;t=36m41s](https://www.youtube.com/watch?v=c8-RERXHjxM&amp;feature=youtu.be&amp;t=36m41s) &amp;#x200B; It is around that time he starts talking about ORMs. Literally every sentence was wrong, so much that I am actually impressed, not insulted.
On Windows I find heidisql pretty decent (I somewhat prefer it to sequelpro) DBeaver is sure bulky and unintuitive at times but it does it as my needs are pretty basic
I'm curious as to what you do in your job, if you don't mind me asking? What sort of projects do you work on and what roles do you play when you're working on them?
This has honestly been my preferred way of making things for a while now. Although I tend to go more for the widget approach rather than the full page. 
No problem, feel free to ask. I work **only** on complex projects. Because this is subjective, in short it would be sites that work with lots of money, has **really** complex DB relations, millions or rows per table are expected etc. Before putting live, I test locally with crazy amounts of data to see if I forgot some index, set non-optimized relation, check lazy load setup... &amp;#x200B; No blogs or similar, irrelevant of how much money is offered. I work solo, only backend code. Templates has to be provided by client but they are very cheap to buy. But in all situations so far, client payed someone else for custom template that had to be built according to few specifications: &amp;#x200B; \- assets via npm/yarn \- no javascript except for bare minimum \- **most important**: form elements must have bootstrap HTML structure, no extra classes. The reason is that Symfony can render entire element with just one line, even entire form if needed; {{ form\_row(form) }} &amp;#x200B; It might sound harsh but in reality, all these rules are followed even w/o mentioning them. They serve only to filter people with low skills. You basically put rules to see if people even read the job description. &amp;#x200B; Most of project I do are rewrites. Clients look for cheap solution, ends with something that doesn't work and hires me to rewrite. I don't work on other peoples code unless it passes phpstan on max-level; so far, didn't see such project hence that's the reason I do rewrites. And it has to be Symfony. Until better FW comes up, this is non-negotiable. &amp;#x200B; &amp;#x200B;
Are you aware of the CAP theorem? What you asking for is not trivial in a distributed system. The question is how much data it needs to handle, what performance characteristics see required and how will the cache policies look like? It will be likely easier to use a DB that tackles CAP according to your needs or a non distributed system with failover. 
I'm amazed just how negative the PHP community is in general when it comes to discussing ideas that deviate from the mainstream. Also your response is completely not related to what I wrote. Agile development is not necessarily about speeding up, in fact many teams would benefit from slowing down. I can't count how many times PHP developers told me that "there is no time to write tests" and that framework X is best because "everyone is using it". &amp;#x200B;
Looking at your response gives everyone an idea just how complex all of this is. Most of us will never be able to explain this properly to a junior developer. I vote for more simplicity and that's why I published Symlex. I found that it gives developers a better chance to understand what is going on. By the way: Simplicity is also a reason developers decided to use PHP instead of Java. Now PHP becomes like Java. What an irony.
&gt;Looking at your response gives everyone an idea just how complex all of this is For whom? The hard complex part IMO is _developing_ a bundle. Because yes you need to dig out how a bundle is configured, how you declare the configuration, how you validated it, how you test it. From a user perspective, you have a simple self-documented autodiscoverable validated documentation that actually 99% you don't even have to touch.
With some of the code I inherited from past developers, I would say it's possible to get a permanent position without knowing PHP at all.
The thing is that in 99% of cases you don't care how internally Symfony works. People can start using it w/o knowing what compiled container is; it worked for me, it can work for anyone. &gt;By the way: Simplicity is also a reason developers decided to use PHP instead of Java. That's the one of the problems. You said that 15 DB rows took 60 seconds to render; the simplicity of PHP attracts non-developers to enter the market because of high pay. And to be honest, I really can't imagine how someone even managed to do something like that, unless they used sleep() or similar. &amp;#x200B; &gt;Now PHP becomes like Java And how is that a bad thing? I just wish PHP had generics, covariance and contravariance, typed properties (coming in 7.4), constructor propagation, real annotations (method parameter annotation as most important)... because when you work on complex projects, you really miss these things. Having them means we would probably never need to write a single yaml definition or compiler pass. I worked some time on Angular and was **amazed** with Typescript language but there is no Java/TS framework that can even remotely match Symfony in terms of features and flexibility. Just symfony/forms documentation is bigger than documentation for other frameworks, and not everything is still covered; luckily the code is clean and documented. You have to understand that PHP usage evolved from blogs to big, very complex web apps. We have phpstan to help us but there is still plenty of things missing.
&gt;I have no idea what i'm doing aw, how cute. Now get the hell out of here
Honest opinion. While it looks pretty good, The docs are confusing as hell. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
You're twisting my words. I never said Agile development is about speeding up. That said, I think PHP has a nice community. And I like that you are creating yet another framework, it's a good way to understand how more technically advanced concepts work.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
As much as I love static analysers like psalm sadly here they can actually give you a bad advice when your input is not known at compile time. Imagine you want to validate some incoming json structure. To avoid php's built-in higher-order functions like array\_map silently coercing your types the correct choice is to \_not\_ type hint function params used in HOFs but eg. psalm will suggest you to do it (MissingClosureParamType).
Looks like some self-taught beginner's personal notes on random security readings, but published in blog form. This should never have been shared with the rest of the world.
For the record. Let's say you want to find a job and you have two options: * A "9 to 5" work: (as a novice), usually the task is fairly straightforward, you don't pick the technology, language, and library and sometimes the work is done (and you must patch it). Also, you could get some help (if you are not working alone). And, let's say you commit a mistake, A mistake could happen, but you could be scolded but nothing else much. * A freelance job: Here, they don't count or care if you are a novice or not, the customer wants the product or service. So, the level of difficulty is usually high; you must estimate the times, costs, sometimes the technology and often you are alone. It's not rare to find students that work as a freelance, and I have seen the next situations: * An ethic freelance that sub-estimated the work, so he finally works several months for a penny. For example, I have seen freelance earning $5000 USD for a job that takes 4 months. * A freelance that takes the job and later he finds that he is not suitable for it, eventually he drop the job (he stop answering calls and emails). Some of them simply run with the customer's money and never deliver. 
That's company advertisement.
Classic indian blog spam. 
You still need to learn these things to write more reliable softwares. If you can have all control of your server, why not just use an alternative tool that are more suitable for javascript disable browser?
array_map is a convenience so thankfully it's not difficult to reimplement.
It's 5 years old and a subset of Symfony, previously in fact a Silex boilerplate for rapidly building REST services. See documentation. Telling other people their work is not "technically advanced" is in fact toxic and not helpful in any way.
I'm using PHP since 1998 and was previously working as senior consultant for Zend and SensioLabs. My observation is that juniors are not getting any better if you abstract them from implementation details by telling them to use a bundle. Also this creates framework lock-in, which of course is what vendors want. Tradeoffs are documented here: https://docs.symlex.org/en/latest/tradeoffs/
Again, stop twisting my words. I never said your work is not "technically advanced".
Maybe you could have given an example, sorry if I got this wrong. But either way, I think it's not helpful to think in terms of "technically advanced". Sometimes less is more. Many developers are way to focused on little details before understanding the fundamentals. Agile is very much related to simplicity and technical excellence. Complexity is your enemy. Bundles for example make it easy to create extremely high complexity in very little time.
It doesn't have to be a PHP type - `MissingClosureParamType` will disappear if you provide a docblock param type, too (even `@param mixed $foo`).
Did you miss the `function strictWrapper(callable $f): ` part? `$f` is one of the parameters, the only one really.
* They are referring to how PHP used to be, slow and without OO. * Easy to learn === easy to write ugly code. * People like to be using the cool thing. * Package management used to be awful.
PS: Scrum is officially sold as "twice the work in half the time". Likewise, frameworks are sold as tools to "speed up development". Independently of if this is what you meant, I can tell you that it sets wrong expectations and is toxic for developers as well as for managers who believe this nonsense.
PHP allows you to be unsafe and make mistakes, but there are also now plenty of ways to make your code safe. &amp;#x200B; Test everything using PHPUnit, use [a static analysis tool](https://github.com/vimeo/psalm) that [enforces types everywhere](https://github.com/vimeo/psalm/blob/master/docs/issues.md#mixedargument) and you'll be fine (disclaimer: I made that tool)
Because it makes them feel superior and because it used to be kind of true, mostly due to the low barrier of entry. It's gotten a lot better over the recent years though. &amp;#x200B; [PHP The Right Way](https://phptherightway.com/) is a great resource on how to do things "right" in PHP. [PHP The Wrong Way](http://www.phpthewrongway.com/) is a good counter / supplement argument.
Entry level for PHP programming is very low, which is good. PHP let's you do anything you want, which is good and bad. Good because you are not restricted like on other platforms and bad because bad habits don't get curbed. PHP is not per se insecure. The best way to learn PHP is to choose a well known and well maintained framework like Symfony, Zend, Laravel and adhere to their concepts. Pure PHP does not cut it anyway noawadays. People like to trash-talk PHP but in secret they admire PHP's flexibility (Java devs especially), that's my notion. And yes, PHP does have inconsistencies but that's not specific to PHP. Just my opinion.
It's mostly historic, and to do with: * Wordpress and how bad the code is (compared to modern standards) * How low the barrier to entry is for being able to produce things in PHP, coupled with how flexible it is (for example in terms of variable scope and type), allowing you to do all sorts of terrible things as a new developer starting out * The age of the language coupled with the availability of out-of-date advice and answers online Modern PHP development is a completely different environment to what it was even a couple of years ago, with Composer and the advent of more up-to-date frameworks, and as a result it's certainly viable option. Also it's basically a meme at this point to hate on PHP, it's mostly CS students or entry-level devs who have either never used PHP or not used it properly.
&gt; PHP &gt; allows &gt; you to be unsafe and make mistakes, but if you want to be safe you can do that, too. I dont get this when people claim it. You can be hell of a lot more unsafe in C/C++, it doesn't mean shit. Good developers will always strive to write good code regardless of language. I think when people hear about PHP they immediately think of the early days of PHP 4 and before. When you had no separation of logic and you had to include random files (or straight up copy-paste code) in your templates. This shit was hard to look at and I don't think that this stigma has gone away. And I understand everyone who had to deal with that shit and moved on to a more serious enterprise ready language/toolset. It took some 10-15 years for PHP to catch up. 
I agree. :)
Mostly due to this: [http://extrafabulouscomics.com/comic/200/](http://extrafabulouscomics.com/comic/200/)
Let's talk about WordPress plugins then :) OMG don't get me started. The quality is almost as bad as 10 years ago.
I agree that one can write perfectly good code without type checking or tests. It becomes unsafe (i.e bug-prone) the minute another developer touches it without fully understanding how it works. The very same is true of python and JavaScript, too.
Depends on the company really. I love working with frameworks because I don't want to reinvent the wheel, they make me focus and work on the aspects that matter. So yes, they speed up development; but if that results in writing less tests, then you really have to talk with your manager.
I honestly started learning it because I wanted to learn to code and everyone around me was gushing about JavaScript. I figured I'd learn a webdev language because I actually want to make some things to use it for, but after hearing all the hate for PHP I looked into it myself, fast forward a year and I'm enjoying learning it more and more. I'm currently building my own (simple) mvc, and attempting to integrate Ajax too. I was honestly getting annoyed with all the js love and PHP hate, and now I've forced myself to learn MVC and OOP in PHP, and have realized just how powerful php can be. Oh also the first time I used a while loop I crashed Apache and the error log was 2gb long. I laughed so hard. 
Does your phone have internet access? Does it contain a browser? If so try this radical experiment: copy/paste the title of your question into the browser search bar then spend a bit of time reading through the thousand or so results. If you still have questions then come on back.
Why do people post dramatic click bait questions in forums? It's not like you're getting paid per response.
I think a lot of people associate PHP to Wordpress and then just hate on PHP because of that association. Those who have done their research (as good developers would do) would know that you use the best tool for the problem you're trying to solve and would know that their are enterprise grade packages available based on PHP that help you do just that. 
Because PHP was similar to JS for a long time. &amp;#x200B; With JS, since ES6 and TypeScript, things have been going well. With PHP, since PHP7 things have been going well. &amp;#x200B; Both were released in 2015, not that too long ago if you've been in the industry for 15 years and used PHP and JS/jQuery extensively before 2015 until you eventually moved on. &amp;#x200B; Hence a lot of seasoned people in the business will say they are garbage because they haven't bothered to check it out again in recent enough time.
Because it's the coolest thing an edgy junior developer can do... 
The title were incorrect. Should use PHP: Hypertext Processor instead.
Sticking a clumsy band-aid on that adds needless overhead, that the vast majority of Symfony and Laravel devs will simply never use is not what I'd call "support". Which is why I asked about any declarations from the Symfony or Laravel that they are planning to switch to PSR-7 in the future, that would be actually supporting PSR-7. PSR is dead duck when the two biggest web frameworks, Doctrine, Guzzle, etc have all pulled out, as standards PSR are a joke when most of PHP devs use frameworks / libraries that refuse to switch to most of those "standards" and express outright hostility to most of the newer ones. 
There's no hate for PHP7+.
I love PHP as well. But I've been frustrated with it in some situations or another. But javascript has pissed me off before too. Maybe some people, not using frameworks, building from scratch, PHP can be a pain in the Assat the start. But if you follow good practice and once you learn a lot about PHP you start to love it again Unless you have already. You should work with native PHP one day and not someone's framework. You might understand why PHP, like any other can be a love hate relationship for a while. 
it's somewhat slow and clumsy compared to other languages. not hating though, i like php.
This doesn't seem right. Are you sure you installed and enabled phpiredis correctly? You need to pass additional config options to Predis to enable use of the extension (I'm on my phone now, I'll edit those in later). Also when building the extension, you need hiredis installed. If you have a too recent version of hiredis, it will fail - take a look at the most recent PRs on the phpiredis GitHub, they fix compatibility with the latest hiredis. Make sure to build with that patch applied.
I agree, after all I published a framework that does just what my customers need and doesn't interfere too much with application code e.g. no strong coupling and no lock-in. It's important for everyone in our business to understand the difference between fast and effective. &gt;It is fundamentally the confusion between effectiveness and efficiency that stands between doing the right things and doing things right. There is surely nothing quite so useless as doing with great efficiency what should not be done at all. — Peter Drucker &amp;#x200B;
&gt; Easy to learn === easy to write ugly code. False
I wouldn't focus on language specific books as they don't provide enough value, at least in my experience. They may be useful for absolute beginners who don't know any other languages, but you don't fit that bill. To be honest, I'd probably recommend Laracasts, especially given your RoR background (there are a couple of series about PHP as well, not only Laravel). Sorry if that didn't answer your question, but I feel it will give you the most value in the long run.
Hmm, never heard of igbinary before, probably need to take a look at that.
I always figured that it was bad developers that caused the security issues. However people I asked were insistent that it was the language. I'll have a look at those links after work, thanks ! 
It's basically an alternate binary serialization. It's technically less portable because the output is not compatible with the default serialization, but that's just a choice you make when building your app. Either you use this on all your tooling that runs PHP, or you don't.
I managed to make this post so your first to questions were redundant.. That's actually what I did. The problem is that you get so much poor information from biased sources. And yes, Reddit isn't perfect however I figured the PHP subreddit would have a more knowledgeable answer than a lot of other places. 
Magento makes me not like PHP sometimes. Wordpress is just so vulnerable. My first 3 sites all got hacked and had some sweet Russian propaganda. It’s like 70% of sites are built on Wordpress (no evidence to back that up but I know it is a huge amount). So I think now it is just a culture to hate on PHP 
Nice. Are there PSR-15 middlewares?
&gt;&gt; 2 months ago &lt;&lt;
"People" hate every language. PHP is not insecure but it does have a fairly low barrier to entry for a new programmer and programmers who don't quite know what they are doing are insecure no matter what language they use.
Because I genuinely want to know the answer. I don't want to me a developer contributing to bad code. I'm good at my job, but I wanted to know if it was the language (which the majority of sources I've looked at suggest it is). or if it was something else. I understand it's a little clickbait and dramatic. However, considering everytime I tell people I'm a PHP developer they assume I'm either unhappy at my job or a sh*t developer, I wanted to know why people think that from a PHP developers perspective. 
Its part of parameters of strictWrapper and thus available in lexical scope of strictWrapper **BUT** that lambda function inside it have a new scope, and PHP have what's called **explicit** closure, where each free variable have to explicitly enumerated in `use()` clause. I also see now that author edited their post and changed `use($)` into `use($f)`
While [this is an old article](https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/), it can shed some light on where is the hate stems from. Of course, most of the points in the article are already outdated, but still, it concluded many of the problems perfectly.
And?
&gt; So I'm just wondering, are these comments true? Objectively, No. PHP powers 75%+ of the web. &gt; Is PHP an insecure platform? No. Read above. &gt; what can I do to make sure I don't make mistakes? Don't roll your own crypto. Know what password_hash is. Use Prepared statements. Know what composer is and use it. Understand PSR-4 and PSR-2.
&gt; The age of the language A lot of criticisms I've heard come from C programmers though. A language that's about 50 years old at this point.
Because PHP was hacked together by many people without much care being put into good design, and because it still shows some 25 years later. There are many people (myself included) who have tried to improve it somewhat, but no other mainstream language, not even JavaScript, is quite as much of a pervasive mess as PHP.
Ignore it and keep delivering clean code. In spare time learn the basics of as many languages as you can to widen your perspective. 
I've seen a few people refer to this article recently, from way back when. As to why a lot of people hate PHP - https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/ Anyone know of any articles/posts that counter their arguments?
&gt;However people I asked were insistent that it was the language. Those people are idiots. There is nothing more secure / more insecure about PHP than any other language.
Wordpress havent really changed in last 10 years
[removed]
https://news.ycombinator.com/item?id=19136265
because it comes pre-installed with most web hosts and you can just upload a php file (low barrier to entry), so there was a lot of shit and unsecure code from beginners or lay people that got hacked often that gave it a bad name. another reason is that a lot of "web designers" turned into php developers without formal CS training, so there seems to be less knowledge about design patterns and coding practices which again, led to a lot of shit code the language itself is great, though
I had couple of encounters with it, and I try to stay away from that bloated piece of overengineered garbage. IMHO magento 2 is even worse than 1.x You need to put a lot of time and effort to become familiar with magento and you're basically a magento developer, not php developer at that point. Probably could make decent money, but totally not worth the hassle for one project.
Everyone has given their two cents so I might as well throw in. I mainly work in the “cool” languages/frameworks: python, react, and node. However I got my start working on Wordpress sites and let me tell you as a beginning dev that was sometimes unbelievably frustrating. Not knowing where to look in the spaghetti that is php coupled with annoyingly cryptic shorthand made for some long nights trying to get the site updated for my client. After nearly a year of working full time as a developer now, I have since gone back to some of the Wordpress stuff and more complex php scenarios. I now find it fairly straightforward and even enjoyable sometimes. That being said, it is still easy for me to mess up and wonder where the heck I’m supposed to go to debug.
Well, it's mostly because of the code-quality, that is produced by users of Laravel, CodeIgniter, Yii and Cake.
They're bad at it and can't remember if it's `needle` first or `haystack` first.
I did the research the other week: Of sites that use a CMS, Wordpress powers something like 60%. Of the entire web, that's 33%.
&gt;Easy to learn == easy to write ugly code. True
Damn, that’s cool. Great job!
Damn, that’s cool! Thanks again for your contributions towards PHPStan!
Don't bother. It's seven years old now. It's massively out of date. I never thought much of that article, even when it was current. Loads of the comments are really subjective, like the author's complaining that PHP doesn't work in the same way as some other language they've deemed to be "correct". Even in the cases where I agree with the author that the behaviour they're describing is objectively wrong, it's almost never something I've run into while coding. &amp;#x200B;
Thanks for the fact check! Knew I was high
PHP in 2019 is not bad. However, the legacy (mainly the stdlib) will always be with us and continues to make people butthurt. As a new developer you must be humble and realize that yes, there are better languages than PHP but those languages are not putting food on my table. To grasp the other side of the argument I encourage you to try out some well-designed languages like C# and Swift.
I mean most of these seem to just be nitpicking or just him pointing out he doesn't know things &gt;Despite how heavily PHP code relies on preserving key order: &gt; &gt;`array("foo", "bar") != array("bar", "foo")` &gt; &gt;`array("foo" =&gt; 1, "bar" =&gt; 2) == array("bar" =&gt; 2, "foo" =&gt; 1)` &gt; &gt;I leave it to the reader to figure out what happens if the arrays are mixed. (I don’t know.) &amp;#x200B; For instance, with this one, those two examples should equal false and true respectively as those two are the same using the `==` operator if they had the `===` operator they would not be equal to each other. &amp;#x200B;
&gt;needle first or haystack first. Well I've been coding PHP 10 years or so and that is still annoying me to be honest. Probably fine if it's the only language you code in, but I do a little in a lot of languages.
"if you ain't got nothing nice to say then don't say nothing" I'll leave it at this. 
With the addition of type hinting into PHP, much of the information contained within PHPDoc blocks has become redundant. Given the following method, this PHPDoc only restates everything that is now in the method signature. Is there any value do actually doing this? ``` /** * @param string $fileName * @param string $sourceDir * @param string $batchDir * @param int $batchSize * @return array */ public function splitFile(string $fileName, string $sourceDir, string $batchDir, int $batchSize) { ``` I've recently been working more in the Java space and have inherited a project that uses Javadoc a lot, but it faces the same problem of only being used to restate the method signature. Additional comments are rare, and some of the time the docblocks are rotten because they haven't been updated with code changes. I'm curious what the community's perspective now is on PHPDoc. How often do you use it? And why do you use it -- IDE assistance? Generate documentation pages? Habit?
Why don't you ask this on /r/askprogramming for a less biased answer?
Magento is fine once you become intimately familiar with it and understand how it works. It is very esoteric and arguably somewhat over engineered so it takes a lot of learning. As you've found to your cost with 1.9 if you're not living and breathing Magento then it's hard and it will bite you. Personally I don't think it's a platform that as a developer you can dip in and out of or just pick up quickly for a single project. It's just way too involved for that. However if you do become proficient in it then it can be very rewarding and a very marketable skillset.
We currently use it quite alot, especially to indicate who wrote the function/method, extra description what it does (PHPStorm actually detects this, which is quite neat). Its true that typehinting might make the @param and @return unnessesary most of the time, but also here, you can add additional information about those params. I'd say PHPDoc is still a usefull best practice to have
Slow? Look up some benchmarks.
I use it only for typed arrays like ``` /** @return User[] */ public function getFriends(): array {...} ```
why does everyone on reddit think they know something no one else knows. yes. it is slow as shit compared to languages like c and go.
I'm building my databases directly in code instead nowadays, didn't look for a model designer replacement just yet. But yes, the designer part of Workbench works OK most of the times, had a few crashes there as well, but most were when using it for SQL processing.
As do I. But, I let my tools do the work for me. I never have to memorize parameter order because I just hit ctrl+space, ctrl+q, or ctrl+p and PHPstorm does it for me.
Ah... so using them to fill in gaps in the information the method signature provides. Would you stop writing docblocks like this if you were able to use a generic-like system? e.g. public function getFriends(): array&lt;User&gt; {...}
If I could write an array-of-type return signature without doc blocks, I would only use them for methods which require explanation. If I were writing a library or package, I may use doc blocks more than if I were writing an application as description doc blocks can be more redundant in that context.
Yes! If PHP gets generics (or at least typed arrays), I would make all my code that way and require update of PHP. Not a single day later :) Comments of course stay as-is but this would finally allow me to get rid of those @return and @param annotations. &amp;#x200B;
Some web development platforms (such as [ASP.NET](https://ASP.NET) written in C#, whether using webforms or MVC) will pre-sanitize input before the developer's code ever has a chance to look at it. If everything is sanitized, you don't think to sanitize it yourself, or even think to validate it. Naturally, if you try to use the same habits from C# web development, you're going to be a "bad" PHP developer (despite being a great C# web developer). That comes at a trade-off. PHP is much closer to the raw HTTP... I asked some great C# web developers some questions about how [ASP.NET](https://ASP.NET) on IIS handles HTTP headers and just got blank stares in return. They knew the concept of an HTTP header, but had never actually looked at one. It's easy to do some specific stupid things in PHP... But any language and any web platform has that problem. The only question is, *which* stupid things are you most likely to see from a newb in that language? Compounding that, of course, are hundreds of thousands of tutorials on making applications in PHP that do absolutely no validation or sanitizing, that lets raw user input be spliced directly into SQL queries, and that suggest using unsalted MD5 hashes to store passwords (or worse (but not much worse), stores the password in plaintext)... Unfortunately it's easy to crank out horrifically unsafe tutorials. I can write a couple in a day, throw it on a site with ads, run a short ad campaign, and break even. Writing thorough, informative tutorials that highlight secure and professional development practices? That's a full time job that can only be done by people in the middle and upper ends of their careers.
I used to use it religiously, to the point where I made sure that all properties and methods were documented as part of my automated release process (and release was blocked on missing docblocks). With the advent of typehints, not so much any more; that, and its parsing capabilities are lagging behind PHP 7.x syntax. It reports syntax errors where there are none.
I tried it a while back and decided to pass on it. To me personally I stay away from that type of coding experience, where they are constant updates to the ecommerce system. Same with Woocommerce etc. I don't recommend them and don't use them. &amp;#x200B; But ecommerce is a must, so after many many trials I ended up in the [`ECWID.com`](http://open.ecwid.com/dVj9T) camp. They are a German based company who code and update all the time on THEIR end and I don;t have to worry about testing and if it will break. It just works. I just add the javascript code and it just works, even on WordPress sites. Easy to setup. I've been using it for like the last 8 years on all my clients new sites and there has never been an issue, not once that lead me to even think about leaving. They have simple gotten better over the years. They update the software seamlessly and I dont have to be concerned. &amp;#x200B; I pass on clients who want Magento or Woocommerce. 
Honestly PHP code just looks wrong without the phpDoc :) But I use phpStorm to auto-generate it for me and the occasional collection/typed array hinting. Also throw docs
Run Forest! Run!
You're comparing it to the language it's built on, compare it to it's competition.
Easy to learn === more noob coders writing iffy code
who cares.. that has nothing to do with my comment. even so, lots of web services are written in the c family and in go and all kinds of other low level languages.
Yes, that's true re docblock annotation. What I'm saying is that someone not knowing about the issue (most people I'd assume) would just type hint using php types based on psalm's suggestion which leads to silent type coercion. A potential solution would be if psalm would warn to only use docblock annotation for functions that are arguments for HOFs.
This question, which can kinda be rephrased as "why are they all so mean to me?" crops up all the time. And this is the right way to think about it! Those criticisms aren't really of the language, they're coded attacks on people who use the language. It's one step from "real men don't eat quiche". Everything in HTTP is a string. This means that how useful your (web) language is is basically a function of how well it handles strings and arrays. PHP is *great* at handling strings and arrays, it probably gives you the best set of primitives of any C-descended language, and it has a shallow learning curve, which lets inexperienced people learn just enough to be dangerous. This is **good** but it has some consequences - mostly, there's a lot of badly put together PHP out there. As I said, they're not complaining about the tool, they're gatekeeping their clique. Plus there are absolutely a few bad design decisions baked in there and some features missing. There's no point denying that. needle/haystack haystack/needle is the most obvious mis-step, and we're still single-threaded after all these years. Fashions change, and PHP's on an inevitable slow decline for lots of reasons, but that doesn't mean it won't be in demand for years to come.
Unless you're willing to devote your entire career to learning the intricacies and details of Magento, it's fine for very small stores that will never need updates. (As with any other web framework, keep up to date with upgrades for the core framework and any plugins that you use... if nothing else, than just for security purposes.)
I LUV PHP
Everything is hated by someone. PHP is currently used by what...70% of the internet? More? So your question "why do people hate PHP?" is flawed. It's only meant to incite passionate responses. If you really wanted a reasonable range of responses you might ask "what are the pros/cons of PHP vs. other languages" or something like that. Every forum is full of these kind of subject titles and it's tiresome. 
Ignorance
What? Why give irrelevant example in the first place?
The article is pretty much useless since it's not providing the actual script for benchmark nor it explains why is there such a difference. No number of calls made and what kind of calls.
I do however apologize for saying 'crap', that was uncalled for. I removed that, it's unkind and easy to throw out. Sorry about that. 
it was perfectly relevant. phps main competitor is probably dot net, which is c# and c++, and again both of which are quite a bit faster than php. I took your suggestion and looked at a benchmark and even python and node are faster than php7.
Like most of us, I only write minimal PHPDoc (to be fair, I let my IDE do the job). But the real added value lies in the descriptions or your classes, params, or return values. And yes, that's a lot of work! &amp;#x200B; Take a look at Doctrine or Symfony components: [https://www.doctrine-project.org/api/dbal/2.9/Doctrine/DBAL/Connection.html](https://www.doctrine-project.org/api/dbal/2.9/Doctrine/DBAL/Connection.html) [https://api.symfony.com/4.2/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.html](https://api.symfony.com/4.2/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.html) &amp;#x200B; In the Java world, I have seen quality tools that lower your code rating if no description is provided in javadoc.
I use fixer to remove useless \[docs\]([https://www.tomasvotruba.cz/blog/2017/12/17/new-in-symplify-3-doc-block-cleaner-fixer/](https://www.tomasvotruba.cz/blog/2017/12/17/new-in-symplify-3-doc-block-cleaner-fixer/))
And always, Store your passwords in plain text on the database or an easily accessible file on the server that can be downloaded via http. The convenience is a time saver. 
&gt; I'm wondering why people hate PHP. I would submit to you they (most developers) don't hate it. My evidence? It runs about 80% of the internet. Conversely, you may be thinking, why do many people loudly say they hate PHP? Some call it a "fractal of bad design". Like most things, it's a combination of a very vocal minority and identity politics. If you say PHP is awesome then some folks will call you a troglodyte. Again, identity politics. Further, when you ask those same folks what should I use instead, I always get the same answer about Go, Rust, or Python. An occasional Scala vote gets thrown in as well from time to time. Afterwards, I cruise on over to Indeed or Monster and quickly realize that there are relatively few jobs for those skill sets. When I do a search and see that within 50 miles there is one job for Scala I get annoyed by the obviously stupid advice I received. When you go back to those same folks and ask them WTF, they have no real answer. Then, when you post the exact same two message on two different subreddits and one gets massively upvoted and one is massively downvoted you quickly realize three things. First, identity politics sucks. Second, most posts/opinions on reddit are hot garbage. Third, I need to pay the mortgage for my wife and kids so I am going to pick what I know for a fact works really well and pays really well. 
I'd think long and hard about a Magento site in 2019. Magento 1 has been borderline abandoned for years (security updates only, with a ~janky~ strange patching process) and if you look at the folks who are successfully building Magento 2 systems they tend to be 1. Mid Sized Agencies with their own development teams or offshore masterty 2. With either deep connections to Magento Inc/Adobe For a solo developer looking to build something they can hand off to a smaller company with a minimal maintenance budget -- Magento's a hard sell. It's a system with it's own rewards but on a technical level it does require constant attention and a lot of eye rolling. 
I use it and it sucks compared to other languages but it gets things done. Nothing like uploading a procedural script for an small app and it just runs fine.
Looks can be deceiving. Adminer can be themed/skinned. https://www.adminer.org/#extras It also has plugins: https://www.adminer.org/en/plugins/ Because it's (released as) just one file, it can be started from your desktop computer, i.e: `php -S localhost:8888 -t ~/path_to_adminer_dir/` (Then something like: http://localhost:8888/adminer.php) It rocks. 
PHP had a rough start. In addition, it is very easy to write spaghetti that mixes business logic and presentation logic together. This includes writing JavaScript in your presentation logic that PHP is spitting out. It's an absolute nightmare of code and a lot of developers still do it. It used to be very easy to write code that was prone to SQL injection. PEAR was always clunky. Lastly, if you're going to have to learn javascript anyway, people are starting to gravitate towards it for server side code as well. I personally only use PHP for writing web services these days but I question if it's time to go to node/apollo.
I disagree with the idea that you need to devote 100% of your time to Magento in order to be a proficient developer with it. There is a learning curve because it's bloated and lives up to accusations of being over-engineered, but if you're proficient with PHP and have a decent understanding of object oriented design patterns, you'll pick up the framework without *too much* hassle. But there will be some. I think a lot of frustration comes from the lack of documentation for the 1.x branch, because it's virtually nonexistent. In contrast the documentation for Magento 2, however, is pretty thorough. I've noticed some areas where it's lacking but overall it's helped me through most problems I've needed to solve when working on a Magento 2 project.
I only use it to type hint the contents of arrays, exceptions, and methods that can't/don't have type hints for whatever reason (e.g. the argument takes a `resource`).
I kinda hate MySQL too. They're both a bit sloppy with accepting data and storing it, unless your code does that. Wordpress is also on my not favorite list. It's easy to get started there is still really terrible code out there, and new terrible code being created. After adding object oriented capabilities, PHP feels like it stumbled as far as advancing as a language. The things that have really redeemed it for me is the addition of composer, and that the language finally seems to be back on track with changes in PHP 7.x. Have to give a lot of credit some contributors, framework and package builders for hanging in there and creating great tools, static analysis, unit testing, etc. 
&gt; Easy to learn === easy to write ugly code. Parse error: syntax error, unexpected 'to' (T_STRING) in [...][...] on line 1
Can I jump in here to ask a really basic question on type hinting? Do you never write formulas that accept more than one type as an argument? I have these everywhere, and they are really useful on the use side and terrible behind the function call with so many if statements...
I've enjoyed version 2 more than version 1. I've seen M2 perform well with load balancers and multiple layers of cache. Like everyone else is saying, it's a bloated pig, but, I personally don't hate it. Magento jobs are probably the highest paying jobs in the PHP world. I work full time with Magento 2 , and I'm M2 Certified. 
Yep. I did some benchmarks about a year ago with the then-version of hiredis and there was a clear difference between with or without it in write time (I didn't benchmark the read times).
The job search point you made is one of my favourites. Frequently I've told to learn Go and Node because they're better and more popular. However most of my area are employing for PHP and .NET unless it's DevOps or frontend. 
On a sidenote maybe ask this on /r/webdev and you'll get some more diversified comments since /r/php is probably an echo chamber. At least I don't see a point in being here when you hate it, that's what /r/lolphp is there for. 
And yet reddit itself already has several hundreds questions (and I am not exaggerating) on this exact same topic. There is a new one every few weeks or so. Seems strange that you expect this one to only attract unbiased sources while the rest did not. Oh well.
Go is significantly faster. Php is decently fast on the 7 branch but is still beaten by other languages 
See the Adobe connection was one that I was wondering if it would pay off in the long run possibly. I know it has sucked and I haven't seen them do anything with it really yet (It's only been less than a year since the acquisition), but thought there could maybe be some promise there.
I only still use it where type hints and return types are lacking, for example an array of objects. 
Sure, the types are coerced silently at runtime. But if Psalm has already complained (as it would do with the code given) the user presumably is aware that there's a problem beforehand.
Not often. I only do that if I'm prepared to really accept any input as valid. Utility methods (like var\_dump()) seem like good candidates for taking any input. I usually find that a function that accepts many types of inputs without some restraint (e.g. Interface or parent/child class restrictions), then you often have to do a lot of type checks, and that's a code smell. It's better to have several small, customized functions that only interact with one type than have a large generalized function that handles several types. &amp;#x200B;
I cant really say much about magento (my colleagues are doin it mainly) but i had to do some fixing and some minor changes and my experience was pretty bad (magento 1 mainly). . Oh and i was at MeetMagento . . I mainly do symfony/Typo3 programming so seing their template files alone (phtml . . basically inline php) was pretty horrid. Combine this with the updating process which basically breaks something most of the time, we decided to drop most of these, since the just did way too much work afterwards . .Never use Magento for small scale shops. .WooCommerce with Wordpress is the better fit. Cant say too much about magento2. But at least i can say that developing it, takes so ****** long. "Change template -&gt; re init caches -&gt; wait 5 mins -&gt; lel, no thx " 
Hey man, I used to read your site all the time when I was doing magento development, it’s such an amazing resource. Just wanted to say thanks, and very glad I no longer do e-commerce development! 
&gt; Mid Sized Agencies with their own development teams or offshore masterty &gt; With either deep connections to Magento Inc/Adobe Those two lines, along with my own experiences, clearly identify you as an expert.
*Hey just noticed..* It's your **3rd Cakeday** NiemandWirklich! ^(hug)
May be you want to check [Gumlet](https://www.gumlet.com). It's cheaper and best compared to cloudinary or imgix.
I worked 4 years at a major online retailer that is known for selling children's clothing. I joined when they were about 300 total in the company and about 20 total engineers. At that point, they were about 2 years old or so and growing like crazy. &amp;#x200B; The first hire engineers decided that Magento would be their cart backend system. &amp;#x200B; The company very quickly realized it was the wrong decision as it could not scale with their growth, at all. But by then it was too late. Too much code had been written around it and the executive team does not like the word "rewrite" or "refactor", they know only the words "forward" and "more features." The next four years (the years I was pretty much there) were spent slowly un-f\*cking (un-magentoing) their code base. &amp;#x200B; Two lessons here: 1) Magento does not and cannot scale. 2) As a start-up, it is \*critical\* that the first hire engineers make the write tech-stack decisions or suffer the consequences for years. &amp;#x200B; Stay away from Magento.
Currently working with a Magento 2 code base. I had not touched Magento until about three months ago. Here are my thoughts: 1. It's reputation preceeds it. It is definitely a complicated piece of work. I also found there isn't much detailed/step-by-step documentation available for it. 2. There are some great resources, mostly paid, which do help make sense of how it works and how the different moving parts fit together. Once I understood how Dependency Injection works in Magento and how I can add and override default functionality, it started making a lot of sense. 3. Frontend development for Magento is super convoluted with KnockoutJS. I resorted to purchase a ready-made premium theme, created a child theme based on the purchased theme and now I just change CSS or override templates where needed. I'm happy with the overall layout of the purchased theme. 4. Magento is definitely scalable. The latest version makes it especially easy because you can break out caching (Redis) and search (Elastic). When scaling up horizontally, you will need to find a way to externalize the media/images folders so that they can be accessible by all instances. The current recommendation is to use a NFS share. I don't know what else to tell you. Give me a shout if you have questions.
Thank you for saying so, that's always nice to hear! Glad you were able to use Magento as a step up in your career. 
Anything is possible if you believe in yourself
With git history it is not that useful to use phpdoc to specify who wrote what.
Take a look at Capistrano for deployment or continuous integration if you want to deploy on the go
Lots of people still use them for SQL/DQL, as far as I know. In relation to the question you linked, though, I think we collectively learned a long time ago that the only maintainable way to deal with HTML is as a separate template/view layer, preferably with an actual template engine. Nobody (who knows what they're doing) writes code like that anymore.
The new flexible heredoc syntax went live in PHP 7.3. I mostly use it for legacy SQL, the new indention format will be nice. https://wiki.php.net/rfc/flexible_heredoc_nowdoc_syntaxes
thanks !!i will check it!
I'm about to start a new job being a Magento backend developer, so this is good to hear. I don't have any experience with the platform, but I'm a proficient PHP dev. How long would you say it takes to get to grips with M2? And how difficult are the certifications?
That makes at lot of sense then. Please understand that I mean no disrespect with the next part :) Almost anyone who is coming into Dev for the first time like OP, don't listen to zmitic. What he works on is the absolute edge case of Dev/PHP. Nobody will give a shit if you've never heard of the stuff he talks about and you'll most likely never encounter it in your life. Unless you're seeking out work like what zmitic described, you'll most likely start with an agency or a freelance job to build blogs, brochure sites, e-commerce sites, etc. They'll all be CMS/CMF based. This stuff is easy to get into and becomes easier to do, relatively quickly. When you get sick of that, then it's time to find work like what zmitic is describing :)
We use either heredocs or nowdocs for data installation scripts. Take a CMS page you've been developing locally and stick it into a heredoc for production insertion. Don't have to worry about escaping quotes or anything. &amp;#x200B;
... so how did that turn out?
I've never tried to use state machines before, but I bet they'd go really well with something like this! 
There are 4 framework packages available, so id be surprised if not
I use nowdoc for GraphQL queries. I hope IDEs add support for syntax highlighting based on the identifier. 
I use it. For instance in my tests to create json or xml strings.
Yes, please, oh my god
OP seems to be a beginner, don't think he'll be able to easily setup capistrano and migrate his db to an orm. @op, start by versioning your code with git, you can do it pretty easily with Github. If you have a ssh connection to your vps, you can pull all your modification in a single command. There's a bunch of tutorial online about that. For the database, it's a bit more complicated. As far as I know, there's no easy way to sync the structure of a database between servers without using an ORM like Doctrine or Eloquent that keeps every modification of your database in files and can rebuild it from it via c CLI. But I doubt that you have to push multiple modification between dev and prod. If you are using your vps as part of development, maybe you could use the vps database on your local environment.
…and officially accepted!
Truth be told, it weren’t for storm making it so easy, I probably wouldn’t do it.
You should learn about migrations, there are packages for projects without frameworks a good one is phinx
Honestly, just learn to use an ORM. There's so many things they do to make things easier/safer to work with DBs. Laravel's Eloquent ORM is quite easy to pick up as a beginner. You can use it in a standalone project: https://github.com/illuminate/database. You can always read through the source to learn how it does things. The code is quite well commented, so it shouldn't be too hard to understand what's doing what. You might go down some interesting rabbitholes which will probably reveal some things about PHP you've never learned about.
The abstraction doesn't usually go that way. In the Active Record pattern, there _is_ a class per table, but even it quickly offloads the work to other classes.
I would argue very, incredibly strongly *against* using an ORM. As for learning how to improve your PHP, yes, reading other people's code is quite educational. Tinkering with other languages will help, too. The most valuable thing for my career, though, has been code reviews. Specifically addressing what I've written, and how else I could approach a task.
Why are you against an ORM for someone in their position?
I’ve been meaning to look into things like this. Thanks for sharing. I’ve been making my own Query Building Functions/classes for projects then sent via PDO. And wondered if there were other options. 
There are (as it often happens) two questions in one. - The *improper overuse* of heredoc is indeed gone. Only a few people with Perl background are left, and others finally learned *many different possibilities* PHP offers to handle strings. Heredoc is usually clumsy compared to other methods like escaping from HTML or quoted strings. - At the same time surely a niche for heredoc still exists and it would be foolish to refuse it. When you need a huge chunk of text with complex formatting to be returned, heredoc is often the best choice.
i'm not that guy, but simply learning an ORM doesn't teach OP how to properly establish foreign key relationships. If we're talking about SQL database, that is... and if OP's going to use SQL databases, they need to straight up understand what a proper foreign key relationship is. Otherwise even Laravel's Eloquent won't prevent OP from having update/delete anomolies as a result of establishing a many-to-many relationship, for example. On some level, OP needs to straight up understand how databases work, and simply using an ORM won't do that. Plus, it really helps to understand how modern code works outside of frameworks. 
ssh into the server, got pull and then run the migrations
Dealing with SQL without an ORM doesn't teach how to properly design a database or how a database work.
Everything about this is bad. STOP THIS CRAP!
but it will help to teach OP the importance of things like serialize() also in my experience an orm such as laravel's eloquent abstracts away so many details behind how to write the scripts that create a the tables in a database, that it can be easy to believe that the ORM is sufficient to the task of learning about databases.
I was in your position maybe 10 years ago. Then I met someone who wrote his own PHP implementation of ActiveRecord which was miles ahead what was available at the time. We built many sites with it. Earlier this year I formalized the code. I broke out versioning and relationships functionality into separate traits mostly in an attempt to lower the complexity of the one file class. [ActiveRecord](https://github.com/Divergence/framework/blob/master/src/Models/ActiveRecord.php) [Trait: Relations](https://github.com/Divergence/framework/blob/master/src/Models/Relations.php) [Trait: Versioning](https://github.com/Divergence/framework/blob/master/src/Models/Versioning.php) [Documentation here](https://github.com/Divergence/docs/blob/master/orm.md#validation) How Validation Works: - [Runs ActiveRecord-&gt;validate in ActiveRecord-&gt;save function before save.](https://github.com/Divergence/framework/blob/master/src/Models/ActiveRecord.php#L704-L706) - [Instantiates a RecordValidator object (one per object) and then iterates over static::$validators](https://github.com/Divergence/framework/blob/master/src/Models/ActiveRecord.php#L1390-L1405) - You can see examples of validator configs [here]([https://github.com/Divergence/framework/blob/master/tests/Divergence/Models/RecordValidatorTest.php]) Basically you try catch $Model-&gt;save() and if there's an exception you pull the errors from $Model-&gt;validationErrors which will be a clean array of ['field'=&gt;$fieldName,'error'=&gt;'error message']. This lets you bubble this up to a JSON response at the controller level. By default all validations are off though.
Have you tested it with swoole though?
I would say that it does if the ORM's design doesn't babysit you but instead lets you run [full queries](https://github.com/hparadiz/technexus/blob/master/src/Controllers/Blog.php#L16). Another example of [having your cake and eating it too](https://github.com/hparadiz/technexus/blob/e650a16f31e93f0bcc80d68981c994cbbb931289/src/Controllers/Blog.php#L99-L107).
I just want to say that I love your question. This is probably my favorite topic of discussion with building out frameworks.
That sounds great! Will try it out later today. Thank you!
I really think you should learn the fundamentals, it will answer a lot of these questions. [PHP The Right Way](https://phptherightway.com/) is a good place to start. 
The active record antipattern, you mean
I second this. Learning Laravel taught me a lot about PHP and I've been working with PHP for years. I'm currently rewriting old programs with much better style because of how elegant the Laravel setup is.
**My** advise is don't use class but **Namespace + functions.** Of course unless you plan to make the same mystakes that have been made for years, and make use of php like if it's java and rewrite wordpress or drupal from scratch, ending to **12000** files to display a text. &gt;*In the PHP world, namespaces are designed to solve two problems that authors of libraries and applications encounter when creating re-usable code elements such as classes or functions:* &gt; &gt;*Name collisions between code you create, and internal PHP classes/functions/constants or third-party classes/functions/constants.* &gt; &gt; *Ability to alias (or shorten) Extra\_Long\_Names designed to alleviate the first problem, improving readability of source code.* I understand the need of classes, when working on huge projects with many developers. But unless that, this is definitely an overhead **and a mess**.
I remember, in my first year of school we needed the use that (from an old PHP book) and did not even work, after that never used it
"legacy SQL" or the normal sqls you would write for reporting but can't express with "SQL" builder of your ORM
One thing I noticed is the lack of prepared statements - the input variables are concatenated directly with the SQL. Have you considered adding support for prepared statements in your ORM?
Wait. What? Namespaced functions?
Like I said, it doesn't prevent you from doing other, not-standard-orm queries... it just abstracts away those details. either way learning to utilize a database properly means going outside of the ORM, which means the ORM isn't the end-all solution behind learning how to query the database.
Counting: One downvoter paid 10K years, to learn bullshit programming and think his money will be back by downvoting my message. How fun!
Good. You already know PHP syntax. Learn how OOP works and then what MVC is. If you understand both, you are ready to use a framework. A framework makes things a lot easier if you use it well. You don't have to think about preparing SQL statements as much because the framework will do it automatically for you. Therefore it makes your app also more secure. Laravel is one of the most used PHP frameworks. You could learn that through Laracasts. 
Yep, that one.
"especially to indicate who wrote the function/method" That's not a advice, that's a line for PSTD support group. Please consider using distributed version control systems. They show last person who changed a method (on per line basis!), with a command or even right click on the IDE editor.
 \Plot\categorize($OP,$DUMB++); &amp;#x200B;
We are not in 1999 anymore, please upgrade.
There is Magento 2, already, no? Why Magento 1 was choosen?