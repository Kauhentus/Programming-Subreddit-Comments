It's a good question. I don't see this is a replacement for a decent front-end stack, in apps that require a decent front-end stack. If you already need something like React or Vue, then that's what you should use. I see this kind of approach as an option for people who need to build apps, that require fairly simple front-end interactivity; and can't be bothered to set a front-end build chain up. As for whether it's production ready, in this state...I think there's a lot still to be done before I'd be comfortable putting it in front of anything important. It's not far off from where I'd want it for personal stuff, though.
Makes sense, thanks for the reply.
What's your goal here? As far as I know, no there's no directive for disabling specific stream wrappers. Do you think that stream_wrapper_unregister is hogging your system? If you are going purely based on optimization, there's no optimization to be had there. This call has nearly 0 cost. So it doesn't hog your system. You can benchmark it yourself if you'd like. 
Hey, at least it wasn't Joomla.
1. Codeigniter 2. Laravel 3. CakePHP Informative article... thanks for sharing the link... &amp;#x200B;
phar:// stream wrappers execute the code in the Phar's meta data. In a web server context, I don't want to use phar stream wrappers, and a php.ini directive is easy to set and forget. I can explicitly unregister it, yes, but a php.ini directive makes it more cleaner and I can have different php.ini for CLI (which I use phar stream wrappers) and FPM (which I would never use). 
I understand what you are saying, but I still think you should be solving this at the application level. You can figure out if you are in CLI environment or web server by using the `php_sapi_name` function and disable phar:// in all cases that are !== 'cli'
It is glorified bash aliases, you're right... but when you're using the same make commands across multiple projects that do things in slightly different ways or are written in different languages then it makes things much easier for the whole team - we all know to run make build to get a project up and running for example.
I was just curious. Phar has a read only setting (on my default), and it would've been nicer if I could just disable stream wrapper too. But like you said, it looks like I have to explicitly disable it in application level. 
Maybe the \`auto\_prepend\_file\` ini setting ?
It's amazing how people love JSX so much. 
\_Nitpick\_ it's SSE not SEE.
No, it's ok, I will not share the code. Write your own :) 
FullText search added for better results with Score rating. 
Oh, it seems you fancy your code something worthy. 
It's my pleasure. Stay in touch!
Wordpress is the most used and most security tested CMS. Correct me if I'm wrong. &amp;#x200B; You can't say that it's unsafe. Maybe the outdated or some poorly written plugins are unsafe. But WP is the most secure CMS by far.
not an ini setting per say, but you should be able to comment out the module
Permission is hereby granted, even though not asked for, and apology accepted - even though unnecessary, "Some guy on reddit" is more than I could have ever wished for :)
&gt; You can't say that it's unsafe. Maybe the outdated or some poorly written plugins are unsafe. But WP is the most secure CMS by far. It is the main problem with WP, WP is unsafe if it is not updated regularly. However, if the end-user updates the system then, it could break functionalities. It is the same with plugins, updating plugins is a good practice but it could affect the performance/ behavior of the page, so most customers never update. It is the same with PHP. I am using PHP 7.2 and some of my customers are still using PHP 5.x, they can't update without investing in changes in the system. 
It's not a PHP framework that follows all the rules, so it's hated by people who think they can code something better but have failed to do so.
I have a feeling that such blueprinted corporate websites for Bangalore-based outsourcing tech companies are coming with built-in blogspam feature. Have my downvote and report.
I agree, videos cut lots of corners. 
Wordpress has automatically security updates. I'm not talking here about module updates, I'm talking about wordpress. The problem here is that everyone is thinking about the modules, I'm referring to the Wordpress CMS Platform, which is very well tested and secure.
I will repeat myself, update break things even if it is the WordPress core and/or plugins, so it is a lose-lose situation, you could lose functionality by updating and you could lose security by not updating. 
The main problem with WP is people speaking about WP who have no clue about WP. Like yourself.
10,000's of millions of Websites prove you're incorrect.
My company (actually mine) is currently creating a CMS/full-stack tool for VPS users using PHP and Python, and we have had private netsec companies run security audits on the backend. It’s damn secure and there’s no reason why we couldn’t convert the front-end to a WP theme. Assuming no plugins, PHP 7.2+, and everything is updated, in my opinion, I strongly believe we would see no loss of security if we were to do a conversion. But playing devils advocate, you’re probably getting downvoted because WP is, by far, the most reported insecure CMS. However I think most people are failing to understanding the market share WP holds. Because WP is so common and its market is generally those who have no idea about development or even front-end development, they don’t update, run audits, etc. and you may be right stating “Wordpress is the most security tested” — but does that mean it’s the most secure? Probably not. Again, holding most of the online market would put WP in an easy spot to be the most tested, but because it’s the most tested doesn’t mean it’s the most secure. 
Looks good, nice job! \- Although I understand \`build.php\` wouldn't be used in production, it still does not properly validate the TLS handshake (turned off with curl settings). In most environments, curl can properly validate it, so don't explicitly turn it off. \- Wouldn't it be better to 2 separate classes, one containing the mime type information, and the other containing the accessors? This way, you have separated your logic and data. The data class can be composed into the accessor class. \- I would also think to use a tree pattern to store data. For example, \`$mimes = \['text' =&gt; \['html' =&gt; \[\], \['plain'\] =&gt; \[\]\]\`. This way, you can enable querying for all \`text/\*\` mime types without iterating. If one has to use a library to get mime types, they are likely to deal with a number of mime types, and grouping like this helps a lot. 
Thank you! This definitely sounds like a cleaner approach.
I update dozens of WordPress websites each month, and those updates rarely break things. If everything is properly built (child-theme or custom theme, proper use of core functions, no direct changes to files (plugins, themes and core)), then updates don't usually break things. Only some themes have this problem, but this usually only happens when many updates are applied at once. The most safe updates are actually the WordPress core updates, especially the minor updates. I've never had any of those break my websites, except one where the update itself included the direct problem and was followed by a fix within 24 hours. 
Thanks
Search for "best php frameworks [insert one year between 2015 - 2019]" The results are always the same.
I used to resize with own php library. But it was a long time ago (2009) so there are better libraries for this task nowadays.
Other than this wasn't WordPress.
1) I'm a Windows user, and it's not working so easily here, so it's easier to disable the handshake. Although i'll add platform check and enable that option on non-windows machines. 2) I've been thinking about separation but unable to come up with the file extensions class name that would represent the purpose of that class :D About accessor class - it suppose to make the clas non-static design (otherwise it has no sense), which will lead to need to create an instance each time to read which would be a incomfortable here. 3) Pretty interesting idea, but it has sense only for `::getSupportedMimes()` to become like `::getSupportedMimes(string $group = null)`. And it'll add useless merges when returning all the types (but i hardly can imagine sutuation when you'll need all the 2070 mimes at the same time).
My comment was clearly misunderstood. I agree. And it's a good idea. My contention was with his accusation that many developers don't use Makefiles properly. If you have an elaborate C project that uses Makefiles, it's actually pretty hard to do them well. What he's doing here is not a testament to his ability to use Makefiles well, so he shouldn't have made a disparaging comment about people's Makefile skills only to follow up with a Makefile that a third grader could have written.
I work with John and he is actually 8 years old so your comment is fair.
I would say We has the most exposure to eyeballs looking for security issues and bugs but also gets them fixed. A smaller CMS or built one is likely to have security issues unexposed publicly for much longer, this does not mean those issues are not being exploited though. Very little programming is perfect, period.
For Videos: Maybe should be combined with e.g. [https://github.com/dereuromark/media-embed](https://github.com/dereuromark/media-embed)? To leverage both the surrounding template generation with the actual content of the parsed video URLs? This way you can give any video URL of the known services and get a final result.
Maybe he is just smart and uses the more sane \[psr2r\]([https://github.com/php-fig-rectified/fig-rectified-standards/blob/master/PSR-2-R-coding-style-guide.md](https://github.com/php-fig-rectified/fig-rectified-standards/blob/master/PSR-2-R-coding-style-guide.md)) ruleset.
I agree. The less, code, imports, etc., the better. 
This is the CMS that had an SQL injection vulnerability last year because they refuse to use prepared statements. 
The battle begins. I hope their Will be no casualties.
It's not slow out-of-the-box. It's easy to get moderately-complicated websites loading in under a second on a decent server.
I think this is not the right place to ask, but I'm a noob in php. Made a couple of website with mysqli and php very simple. Was wondering if the Small measures i took to take precautions against sql injection or hacking are enough. I use simple reg expression to remove any special characters and where needed i use is_numeric to remove the injection to the code. Well these are the only two things i am using.
This is why people/companies have codereviews
Rather than using mysqli, I would recommend replacing mysqli with something called PDO, and PDO prepared statements. PDO automatically ensures that there are no sql injection attacks by properly encapsulating your input values. This sounds a bit complex, but it's actually really simple and should only take you 5 minutes to swap it out. A basic tutorial is here: https://websitebeaver.com/php-pdo-prepared-statements-to-prevent-sql-injection PDO has a lot of other benefits over mysqli, but since you're a beginner I won't complicate things and get in to them.
Thanks. I will surely look into it. I really appreciate it.
In addition to what u/6PhasesOfPeplau said, you should use htmlspecialchars() instead of regex in most cases.
Ex-employee.
The criteria why the mantioned framewroks are in the top 5 are not mentioned, as far as I can see, so this looks like a piece of opinionated "news"
I've not seen :cached before but looks like it would definitely work. I find the main issue with PHP projects is when the vendor folder is mounted into the container, which causes a read heavy
Let's me google this for you: wordpress update break About 88,000,000 results 
Let's me google this for you: wordpress update break About 88,000,000 results. ps: headshot!. 
I will disagree here wholeheartedly about: A) WordPress being a CMS (it is a blogging platform with CMS capabilities added on to remain competitive) B) WordPress being secure (I had a one-pager site hacked this time last year, was on PHP 7.1 and whatever WP 4.9.latest was at the point and no plugins yet as the person hadn’t provided more than the homepage content at that point)
Same with Ubuntu 16.04 till I believe 2021.
To clarify, /u/AsaPlaysMC is talking about when outputting the data, not when putting it in to your database. It's generally better to store what the user gives you, then wrap it in htmlspecialchars() (or htmlentities()) when outputting the data to the page.
WHAT ARE YOU SAYING? Practically all PHP developer earns money doing what you say that it is impossible (doing something better). 
Site unavailable :(
Technically it is (sometimes painful) slow because the queries are not optimized. A single query could link many times the wp_meta and wp_term tables. For example, a custom system could run as follow: &gt; select * from a topic where idtopic=x WordPress does this one &gt; select * from wp_posts inner join wp_postmeta .. inner join wp_postmeta.. Wordpress allows cache but it is not for free, also non-wordpress could cache and they do better too in an order of magnitude.
Try now :) just a flap
Mesmerising!! 😍
To clarify, this does not mean you should not sanitize user input on the way in! Either by use of prepared statements or mysqli_real_escape_string if using mysqli. 
I agree with everything except the "stop using wordpress" part. I think you lost your customer years ago because you did not understood his problems. Don't be focused on your problems (slow web, coding standards), focus on the client. Some customers will literally tell you to "do a cheap job" and it's okay for you to decline the offer. The good wordpress developers around there are being required because when you can pay $100 for a website it comes right back to bite you in the form of a slow, unusable, exploitable, expensive to change, piece of crap website. If a $100 website didn't cause problems we would be out of our jobs. Wordpress allows for ideas to become websites for cheap, but any successfully company will quickly outgrown it.
Ha, that's funny. You're responsing to a response to a response about using PDO prepared statements. :) "In addition to what u/6PhasesOfPeplau said," &lt;-- That was the original PDO comment. We seem to be a stuck in some sort of loop
You also have the most people trying to break in. Having the largest market share cuts both ways. 
break;
That's cool. I showed this to my colleagues who all thought it was cool too.
Cool 😏
Super fucking awesome
It is called blogspam. A half-assed copywriting which sole purpose is to create a link to the company's website. Do not expect anything meaningful from it. 
So, like every other major software in existence. I googled, "linux update crashed system" and got 83,900,000 results. Simple logic really....just a tiny bit works like a charm.
I'm saying PHP developers often get butt hurt over WordPress because it doesn't follow standards, structure, rules that they 'expect.' Thus anything WP related that comes up they fling poo at it, even when it has 100% nothing to do with WordPress..... as we can see in this thread.
Whoa, it was pretty cool when I was just dragging to rotate the view, then I realized you can move in space. Holy crap. &amp;#x200B; I wonder what npm would look like.
Implemented in v1.1.0
&gt; I wonder what npm would look like. A huge black hole called `leftpad` surrounded by millions of specks of space dust.
which books do you raccomand? :) I know about clean code, practical programmer and such, but I didn't read those yet.
Also see https://github.com/symfony/symfony/pull/29896. 
Whowa. Cannot upvote enough.
Jesus...
Awesome.
I don't normally downvote submissions, but this entire article is basically a thinly veiled advert for something called PHP Grid.
While the advice to use prepared statements is good, there is no need to switch to PDO. Mysqli has prepared statements as well: [http://php.net/mysqli\_prepare](http://php.net/mysqli_prepare) \- its much easier to use that than change the whole cod ebase to PDO, which has no real benefit (mysqli is actually better than PDO). @amrinderghumman regexp is not the right approach for preventing sql injection, the problem space is too complex, you probably never get the regexp right. 
I bite the bait like a "newfug". :-( Lesson learned, Wordpress is religion and I don't talk about religion or politic. 
Some of believed-to-be-distant constelations turned out to be some dust on my screen. It's awesome:)
https://anvaka.github.io/pm Here you go
Step one: Download our proprietary software in a zip file! Who needs composer, git, or open source? &amp;#x200B; And holy shit, I am too lazy to take this apart, but look at this beauty from their code: &amp;#x200B; \`\`\`php &lt;?php function bOknQdDMDmawtBsIFiXv($NBlqSGvlkO){$r=base64\_decode("Z3ppbmZsYXRlKGJhc2U2NF9kZWNvZGUoJE5CbHFTR3Zsa08pKQ==");return eval("return $r;");} eval('?&gt;'.bOknQdDMDmawtBsIFiXv('bZbXCvXGFYVfxRjDbyOI6lHBcYyko957uQmSjnrvJeTdc1Iuczl7YPYa1p5vzV//nKrpp2Ifsq0eh5922+DMTygxAi8sqaQ0UsD8+ks1+plHX6au/PaPX5Y/0mTNcezvnzwbP/mvP8foNKV9vEah3SmCXGWIh+g81caBfsSCN8pCdfi97lthZbntOinWH3/8/NvvS77ty/BTfiTdrz//b/HL8vt355//Lf74828//vJ/Bf1Y/GrygEXhD0g7cNmsl1Em7kXMHoCiN76utfvNRvoYJL2lM7TUu7O2gc+Ropmoc8yCFivZcRMeDFtyFLmxgUX+cHpRxBJDdZ+gfIehltLtecRKJLcxwKTunlhwG2KWKzWdMU2dsw8QCpSYrHB5xUs4dUbR7bvjnXD1Qp0DfG97d3NTxWNE62WB5Nae1008sSCSB31I19GhBpGbjguljWPOjZo3RQ1uud4Um+zrY5O5oSJG53pqmu5c+6TXl1pW2iFy2cLIm3dsPYJfs58MYDNFAYmXqL3t8V5pyjhwR7t2DCGCFru8bOWevkcFRHNrzxjEWNSuxnorGSDhUYlnsFEj4h6pG8578rgxMFowltPpnR/AcN+D2hsyaByqmkep5T7BitHzse2oFdSnScbWaij+5KH6di3SjWDroI1F+d73/OhHEgED2OH0RtKERrt8tICDmoTmDGuSiJWYuu4thsJy3j/MWrKJ4BxJe5iaXhDwUo2e+JUAvp/Fu55ISA2mq8f+TqWm1ym/E+gT2htvyvAzXna9lDBXLUVcvSGy7HPDVdIVYtlKjC/UFVV/TnapQDSB4F3RIISI+jq8pwQyeAEfIXEBAa57qdDw7FFpQluj6g4WnshsAtzr8esHm8kUyoEJXJVoNR8MWNJYWV0twtahOY3uq7Mx+nwmyZ3l33C1NQbqZDyzK3z69WoqVq34EOASbHtpoppyHoVB5I8kFe3K5cxZPzECFPUrFRMQDFVPIZwo1jHhmi67323sOEJ6yCyKxluyx+gy+5i00KXWLWtC7S4M9ChiN3bpNqswMjp+MX6qNnwFfk12u+UHopj4pDb01/wU89Di3lz6fBduJdytDnI6zYGR+ys/BD33+V5t2w/7VlmcCgfgiizHAdBdnCrhyU7zIqtnAISVy6BrueF0vKDTGNVS5cgUzo/bq6b3fvcZPgw9Km9uu7tKohASGGlfYR8ALO+9mUdY3j8UIjpzaAm8PxMJfKz7Ic039+pMKUC6GaV9VvGJBpfOnYeqgQ3vd5O85sAgHjjVcy4fxi6ceT+Sj2jUTLNBHHsl5K1V5fYDTlm9lGQoBkJREthqjRhMUDfMckyeU6OgGgfxRB1GCKgw3v288COBOndAdBSeSFyI8wXJma4fOIdddpBlMmE6NhXZq6nMyNJuqAS+L6OCjSyMQth58n0+VmMge77gdTXTDWov7Zgh9B73MUZ4j1fwSyikdD+2sDRE4eTGd4C7rFvHwpbjZ9/tPFHn7facB+I0rgDj1oVG0U5SaQozX+zD0KDfDRMjgZj1BaYwz7oNAi/2wNvqhQ7njJIgOZiWhIj0k/IZhsyd/Gaeiwk7alTO3ym7ZBHjF9N1vwNbZdLhBE3VyodQgraxeMOUcAxQx36gflFbsHcyMA7eon4EAaQf61Dn8GthSPItVkEO5mNr7czq2FgjICm1J7S/uPW+h8BuvtKX7bkTdbhYnsVW2dJhzekcpgALxylt3YDye0ricANVNg/O9RyURUCZShV1gl5NIfBECbKS1LnP5N9Py6myjQZZsbtfZV9lhbB8nAMJS2dbR8UTw2I+DwZ6dWegCnoUCG5FlwGtsBWLLfO7Ygt5f70r/649h+Urasc8Dzz50U5KoHOTKcDdoCjT4YlhE5bBDdgAcVSN4NN7V1wcVuipoKU2ephZIW1qVD6/WegUL5FUCtopotdLed7v2HyP7C4qRPdB501HiQzNUK3Lch+AJWXsQEbIB446v6BxAFDfJxSPRJcj6HwhP7om1lhiZ0DB7+FUbEFZRxfCfOFwvTe8QghLRMkS3BHmch0vZGtktDfWmtWwiWiIhnfk4kTijjyGPgnj8Bx8DNax9mhQ5gIULAmewi27J1HxhSqnSYURbCxwOgfYDIdZlhRUY2QwXuY5fQByqYCv+Wn7MJdYdFSpAarrvs7dxwAhn/RpXas9NV54FvAMnSXNbKY8OJo/YRNSbeCAC5+QJA9eW0rUeOs1g3fSDtkIdB+0DVyEH0bF98hiXFtytnZLb02RlkgWzh2iXIWD33udFh1Bdmlrc2FSMvzx7QPs5zrABRkSxi2iRZ24NsoqrxV/glwI9mMyvukfxpibDpSIpYymyhvk1/fyKeQSRC6Y1i82qhQ+zyTsiwGS1iLB5cvVNAW470r4YyvribI7gMAJVS9hMKGpvZ6FaEm3SmU+ZjonDydFsG0xVIgBWvvehC+W639OfV1vUhGckshvsesR/usIwg6e882PRAdZDopdLbf2N1bjUpsGcm1vEkN6dqFTAtL0S5yclfMxOhMkyUT2pbs4urWbE166AWwJvmEQa8a2N2F+e3Z1OOMTlJUYJM7Fvut4GyJ5F5hQ2HKDUwrOg+hNZFBGhNRiVqQvzcDrRGzxyNuqWF5SSTuPsfZPbVWyulR6KS93L653wyHgN2vePorL7tPIG9svoyU8WqhldiYLXBaJKDPIOx15NgUsQFybR8lrAM8T77dzWvITS7qaElzI2OlBvJrb0YpXwmdk78hkHOxD4AztDYlpo9AsqNyHnwJylRNN8vjtitVViBU90KXxVXXMnqAc4lUsS044GNx1BoLMsgztIKiCYQ4MmZp7dJuUkqooIlKgfofxC4zUsHpNXgOWx3VdE1mTyzlD/VprVa9NyFmgQoOTTEQ8SqXNyXypzBmfJDsqNugVs2lCITAoEhyT6AVSD/nHj9/+8uOv//kx//jt95/+/Nu/AA=='); &amp;#x200B; \`\`\`
Well .tpl files are a end output product from a view method, but i was more referring to zend_view_helpers like in the bottom part of this article. https://framework.zend.com/manual/1.11/en/performance.view.html
 &lt;style&gt; [data-is-vsent="yes"]{ color: green; font-size: 1.2em; } &lt;/style&gt; &lt;?php $is_vsent = (isset($_GET['vsent']) ? 'yes' : 'no'; ?&gt; &lt;textarea data-is-vsent="&lt;?php echo $is_vsent; ?&gt;" rows="8" cols="60"&gt; Hello, World! &lt;/textarea&gt;
Try on mobile - it moves in 3D space along with your phone. 
It's basically gzipped and json_encode-d a few times. I ran it through a deflate / decode loop and ended up getting this output: ```&lt;?php require_once('phpGrid.php'); if(!session_id()){ session_start();} $tpEtREuoXopBxmtsAtpN = isset($_GET['gn']) ? $_GET['gn'] : die('PHPGRID_ERROR: URL parameter "gn" is not defined'); $zLoBLSHgqvrvinVNTWwh = isset($_GET['sgn']) ? $_GET['sgn'] : die('PHPGRID_ERROR: URL parameter "sgn" is not defined'); $data_type = isset($_GET['dt']) ? $_GET['dt']:'json'; $KPMFjkoKRGfkVPqo = $_SESSION[GRID_SESSION_KEY.'_'.$tpEtREuoXopBxmtsAtpN.'_sql']; $zrXrgBcJRXotwTescYJA = unserialize($_SESSION[GRID_SESSION_KEY.'_'.$tpEtREuoXopBxmtsAtpN.'_sql_key']); $eaIqmgLgnItFsoWAEdnn = $_SESSION[GRID_SESSION_KEY.'_'.$tpEtREuoXopBxmtsAtpN.'_sql_fkey']; $scSszsDyqcqvyLtAFSSN = $_SESSION[GRID_SESSION_KEY.'_'.$tpEtREuoXopBxmtsAtpN.'_sql_table']; $sql_filter = $_SESSION[GRID_SESSION_KEY.'_'.$tpEtREuoXopBxmtsAtpN.'_sql_filter']; $db_connection = unserialize($_SESSION[GRID_SESSION_KEY.'_'.$tpEtREuoXopBxmtsAtpN.'_db_connection']); $lCVrHPGRhOddYMIS = $_SESSION[GRID_SESSION_KEY.'_'.$zLoBLSHgqvrvinVNTWwh.'_sql']; $yhTsnedDxpXYAWGzCajg = unserialize($_SESSION[GRID_SESSION_KEY.'_'.$zLoBLSHgqvrvinVNTWwh.'_sql_key']); $lmveDBtHTsqnLhBAquKg = $_SESSION[GRID_SESSION_KEY.'_'.$zLoBLSHgqvrvinVNTWwh.'_sql_fkey']; $DEQQXuxRBOVWefQVnU = $_SESSION[GRID_SESSION_KEY.'_'.$zLoBLSHgqvrvinVNTWwh.'_sql_table']; $HjGFptFeSKblCWVDKRiI = $_SESSION[GRID_SESSION_KEY.'_'.$zLoBLSHgqvrvinVNTWwh.'_sql_filter']; $ozyUixBqVoAWNyqPzsVr= unserialize($_SESSION[GRID_SESSION_KEY.'_'.$zLoBLSHgqvrvinVNTWwh.'_db_connection']); $sLyavZDiOpUZHiANLsbL = $db_connection; if(empty($sLyavZDiOpUZHiANLsbL)){ $db = new C_DataBase(PHPGRID_DB_HOSTNAME, PHPGRID_DB_USERNAME, PHPGRID_DB_PASSWORD, PHPGRID_DB_NAME, PHPGRID_DB_TYPE, PHPGRID_DB_CHARSET); } else { $db = new C_DataBase($sLyavZDiOpUZHiANLsbL["hostname"],$sLyavZDiOpUZHiANLsbL["username"],$sLyavZDiOpUZHiANLsbL["password"],$sLyavZDiOpUZHiANLsbL["dbname"],$sLyavZDiOpUZHiANLsbL["dbtype"],$sLyavZDiOpUZHiANLsbL["dbcharset"]); } $yswgjgpliEIjeAfgREqY = $lmveDBtHTsqnLhBAquKg; $aSQRDNPoFGGAKYGINxqd = $zrXrgBcJRXotwTescYJA; $pk_val = (isset($_GET[JQGRID_ROWID_KEY])) ? explode(',', urldecode($_GET[JQGRID_ROWID_KEY])) : null; $m_fkey = (isset($_GET['m_fkey'])) ? urldecode($_GET['m_fkey']) : -1; $rs = $db-&gt;wCcQTuVYgSckNyasyuoU($KPMFjkoKRGfkVPqo, 1, 1); $pk_val_new = $db-&gt;quote_fields($rs, $zrXrgBcJRXotwTescYJA, $pk_val); $sqlWhere = ' WHERE ('. implode(',', $zrXrgBcJRXotwTescYJA) .') IN ('. implode(',', $pk_val_new) .') '; $wpyaTSVOJRfhkRUsOxbI = 'SELECT '. $m_fkey .' FROM '. $scSszsDyqcqvyLtAFSSN .$sqlWhere; $result = $db-&gt;query_then_fetch_array_first($wpyaTSVOJRfhkRUsOxbI); $ZyfRBCTSabjxCEehYeMK = (!empty($result)) ? $result[$m_fkey] : null; $page = (isset($_GET['page']))?$_GET['page']:1; $NaMWpfkZjILrZVqeAZqH = (isset($_GET['rows']))?$_GET['rows']:20; $lLgGoqIUbEUcGROUaJbY = (isset($_GET['sord']))?$_GET['sord']:'asc'; $QEFGIaHxEknQKktDMPrY = (isset($_GET['sidx']))?$_GET['sidx']:""; $sqlWhere = ' WHERE '. $db-&gt;quote_field($lCVrHPGRhOddYMIS, $yswgjgpliEIjeAfgREqY, $ZyfRBCTSabjxCEehYeMK); $CUMceGNcCRrPlQJmVnGk = (!$QEFGIaHxEknQKktDMPrY) ? "" : " ORDER BY $QEFGIaHxEknQKktDMPrY $lLgGoqIUbEUcGROUaJbY"; if($HjGFptFeSKblCWVDKRiI != ''){ $IGTLZDyqjZdSqfzUPKna = $lCVrHPGRhOddYMIS. $sqlWhere .' AND '. $HjGFptFeSKblCWVDKRiI . $CUMceGNcCRrPlQJmVnGk; }else{ $IGTLZDyqjZdSqfzUPKna = $lCVrHPGRhOddYMIS. $sqlWhere . $CUMceGNcCRrPlQJmVnGk; } $rs = $db-&gt;EtrPEtuENDzSLqqlwjdu($IGTLZDyqjZdSqfzUPKna); $pYaBvVeTXiaThPOJVY = $db-&gt;UrubXhEWkKBpqgBEgzuK($rs); if( $pYaBvVeTXiaThPOJVY &gt; 0 &amp;&amp; $NaMWpfkZjILrZVqeAZqH &gt; 0) { $total_pages = ceil($pYaBvVeTXiaThPOJVY/$NaMWpfkZjILrZVqeAZqH); }else{ $total_pages = 0; } if ($page &gt; $total_pages) $page=$total_pages; $KwIJJPGByIGobONZejI = $NaMWpfkZjILrZVqeAZqH*$page - $NaMWpfkZjILrZVqeAZqH; if($KwIJJPGByIGobONZejI &lt;0) $KwIJJPGByIGobONZejI = 0; $db-&gt;db-&gt;SetFetchMode(ADODB_FETCH_BOTH); $result = $db-&gt;wCcQTuVYgSckNyasyuoU($IGTLZDyqjZdSqfzUPKna, $NaMWpfkZjILrZVqeAZqH, $KwIJJPGByIGobONZejI); switch($data_type) { case "xml": $data = "&lt;?xml version='1.0' encoding='utf-8'?&gt;"; $data .= "&lt;rows&gt;"; $data .= "&lt;page&gt;".$page."&lt;/page&gt;"; $data .= "&lt;total&gt;".$total_pages."&lt;/total&gt;"; $data .= "&lt;records&gt;".$pYaBvVeTXiaThPOJVY."&lt;/records&gt;"; $i = 0; while($MAWzRqoNSpGivaglBplV = $db-&gt;bBJkbvWCrHXMxILnqSyw($result)) { $data .= "&lt;row id='". C_Utility::gen_rowids($MAWzRqoNSpGivaglBplV, $yhTsnedDxpXYAWGzCajg) ."'&gt;"; for($i = 0; $i &lt; $db-&gt;num_fields($rs); $i++) { $EzmmHCfAcURpMWcxsfOx = $db-&gt;field_name($result, $i); $data .= "&lt;cell&gt;". $MAWzRqoNSpGivaglBplV[$EzmmHCfAcURpMWcxsfOx] ."&lt;/cell&gt;"; } $data .= "&lt;/row&gt;"; } $data .= "&lt;/rows&gt;"; header("Content-type: text/xml;charset=utf-8"); echo $data; break; case "json": $response = new stdClass(); $response-&gt;page = $page; $response-&gt;total = $total_pages; $response-&gt;records = $pYaBvVeTXiaThPOJVY; $i=0; $data = array(); while($MAWzRqoNSpGivaglBplV = $db-&gt;bBJkbvWCrHXMxILnqSyw($result)) { unset($data); $response-&gt;rows[$i][JQGRID_ROWID_KEY]=C_Utility::gen_rowids($MAWzRqoNSpGivaglBplV, $yhTsnedDxpXYAWGzCajg); for($j = 0; $j &lt; $db-&gt;num_fields($result); $j++) { $EzmmHCfAcURpMWcxsfOx = $db-&gt;field_name($result, $j); $data[] = $MAWzRqoNSpGivaglBplV[$EzmmHCfAcURpMWcxsfOx]; } $response-&gt;rows[$i]['cell'] = $data; $i++; } echo json_encode($response); break; } $db = null; ?&gt;``` First of all, is this some kind of security method? They try to encode the data so people can't read their code?
1) Not everyone uses Symfony (way more than not everyone, obviously) 2) Mime-db is more complete (2070 known mimes vs \~1400) 
Try it mobile. Nice
This is crazy. Should be crossposted to r/dataisbeautiful because this is stunning.
Worthiest click ever in this subreddit. I'm amazed.
&gt; CSS, with data attributes I'm actually interested in this CSS approach. Back in the game after a long break. how does this [data-is-vsent="yes"] actually work? I can see the logic between the php to the html, the css to the html, but not the php to the css. How does the CSS in your example get triggered by the php? Sorry for the obviously noob question. But i'm fascinated.
It's the level of attention to detail expected from WP plugin devs.
&gt; good wordpress developers Oxymoron.
&gt; most used Most heavy legacy of crap.
&gt; Was wondering if the Small measures i took to take precautions against sql injection or hacking are enough. No. Typically nothing you do will ever be enough. Which is why even after 30+ years my favorite saying of Murphy's law still holds true; &gt; If you make it idiot proof, they'll make a better idiot.
&gt; You can't say that it's unsafe. Literally anyone can make the claim that it's unsafe. And they wouldn't be entirely wrong, either. It's an entry level extensible CMS that's easily the most popular and widely known variant. Which means tech savvy and un-savvy use it alike. There are bound to be issues. But to say it's the most security tested? Not sure I'll give you that one. Many make the argument that Usenet is the oldest, largest, most used, and most security tested CMS--but it all depends on what you consider to be a CMS.
Thanks but I have tried it and it didn't
It's awesome!
No problem, glad to help!
How..what amazing thing this is.
awesome
You're wrong, so I'll correct you... WordPress still uses MD5 password hashing. Any script kiddy can hack it. If you know your way around PHP, you should really ditch WP for something like Laravel.
What makes you think it got hacked by a script kiddy? Try reading the full article instead of just the title...
Mind blasting!!!!!
&gt; What makes you think it got hacked by a script kiddy The fact they had full pwnage and only used it to do a dumb deface and blog post. They could have exploited thousands of sites but no, they weren't aware of what they had.
This should get more upvotes.
I don't like it, I abso-freakin-lutely love it!
Right. It was a (now ex-) employee. I make a good living as a WordPress dev. It’s a great platform in general. Don’t let a bad seed ruin the whole orchard. 
&gt; I make a good living as a WordPress dev So? &gt; It’s a great platform in general. Dunning Kruger?
Can I use this with phpunit to generate code coverage reports more quickly than with xdebug? Something like how pepple use phpdbg, I.e `phpdbg -qrr -d vendor/bin/phpunit --configuration phpunit.xml --coverage-clover coverage.xml` If yes, example please? If no, then what is this for? 
Amazing how smoothly this runs on my phone. Excellent work. 
Not so easy on the bus! I think I look like I’m trying to take a panoramic photo 
Even crazier that the last commit was three years ago. Can’t believe I’ve never seen this before. 
Do people really not know what a "text post" is on this subreddit?
Idiots.
I seldom comment but this is just too cool. Bringing it home for team PHP.
I have the exact same set of questions.
Looks like this could be really useful 
It does look like dust
Yes, it replaces phpdbg or xdebug as the driver for collecting code coverage in phpunit, and it's extremely fast - neither phpdbg or xdebug has a chance of being as efficient. It allows php-code-coverage to generate reports comparable to phpdbg, but not precisely the same because there are inconsistencies in the way phpdbg collects that are not present in pcov, phpdbg may be adjusted to fix the inconsistency, or the driver may be removed from phpdbg. You could run phpunit now, but you would need to patch php-code-coverage, and environment packages, because you cannot introduce a driver to php-code-coverage externally, the pull requests for the PHP parts of the driver are [open](https://github.com/sebastianbergmann/php-code-coverage/pull/661) and [waiting](https://github.com/sebastianbergmann/environment/pull/34). The inter-dependency of environment and php-code-coverage mean you can't even use composer hacks to test it ... [Here](https://gist.github.com/krakjoe/581ef348c0028ba3480781ec6a4fe27f) are some logs from running coverage on phpstan and the laravel framework that you may be interested to look at ... You won't really be able to use it easily unless those pull requests are merged, I think I've done all I can ...
Thank you for sharing! It warms my heart to know that people are liking this tiny tool. // the author
This is pretty awesome, but what exactly am I looking at? 
You have to pass the Interface of the Helperclass, so you can later change the Helperclass and dont got to look for hardcoded dependancies, you just have too implement the Interface in the new Helperclass and the dependancy inversion will do the job.
Thank you! I was actually wondering: is the data real time? Does it still update?
So I did
712765
I would say the firsg best practice you can apply is not using Helper classes. https://www.vojtechruzicka.com/avoid-utility-classes/
Consider that static methods are (nearly) equivalent to functions. As such, the only real way to make them directly injectable is to pass it in as a callable, I.e. `[StaticDependency::class, 'staticMethod']`. This drops a lot of type information on the floor (you can’t specify the signature of callables) with relatively little gain, unless you’re *actually* swapping out implementations. Passing an instantiated object just to call a static method also works, but as you note it’s also kind of awkward and weird. It’s probably closest to the “PHP way” if one exists at all, but makes absolutely no sense from an actual data flow perspective. 
That seems so crazy to do it that way, it's like finding out what a hammer is and now you want to use everything as a hammer. Dependency injection is useful sometimes, not here though. Injecting helper closures into some static namespace is bonkers. If you have a helper class that just has functionally pure methods that only calculate on their incoming parameters and you want to box it all under a `Helper::` static namespace resolution just do that. If you are going to make a vauge static helper class, don't make it complicated as all shit. Just add your list of functions, public static function(type $a) : type What you are doing is functionally the same as boxing all a list of functions under a namespace anyway. $x = \Helper::Add(1, 2); $x = \Helper\Add(1, 2); 
First question to ask is does it actually need to be dependency injected? You could in theory inject every single object/method/function your code uses but should you? Unless you are writing a library that needs to be very extensible, or you know you want to switch out that functionality in your application or unit tests then you probably don't. As I've found out working on larger projects you can actually spend a LOT of time doing dependency injection and the gain isn't always obvious. In fact I've noticed once you are dealing with a sufficiently large project that D.I can be such a large amount of work that people often don't (laziness) or can't (deadlines) and instantiate classes locally and once that starts to happen you might as well not bother injecting that dependency at all. I'm going to get a lot of hate for this but here's a real life story about DI... 7 years ago I started working on a project that was already 11 years old, large, complicated and full of globals. With my "good practice" bible in hand I thought this needs unit testing and to do that effectively we are going to have to actively move to DI. 7 years later and our small team have still failed to convert everything by a long way and our super important setting proxy/caching object has not been injected everywhere properly leading to massive amounts of unnecessary queries. We had failed and we don't have the time to go and solve this everywhere because it would take ages and this is the real world. Instead we asked ourselves do we ever need more than one instance of this object? Will that object be used in different contexts in the same request? Can we live with manually clearing the cache between unit tests? (side note: we're almost at 100k assertions having started from 0 :)) and you guessed it we changed it to a singleton pattern and have not looked back (booo hissss). The point of this story is not to convince you to switch everything to singletons (that'd be silly) but very carefully consider the usage and implications of each dependency and not just blindly inject everything. 
I actually wouldn't go for an utility class. Out of experience I know they tend to get messy and more often than not, you'll have basically duplicate functions written by different devs that just named them different. 
google chrome does not supports webgl yet?
I like the sound of this having read about phoenix liveview. It reduces the complexity of having to get two pieces of software to communicate, it reduces the need to learn a shit ton of js tools/libs, it solves the problem of the server having to communicate to the client how to build the page, how to translate everything etc. I can live with it not working offline and hopefully the latency is reasonable as well. Question: does phpstorm understand pre files? And if it doesn't can you achieve this approach manually with just vanilla php 
 Thanks for the feedback, and placeholders in place now. Didn't bother updating GIthub repo, but if you want: http://apex.envrin.com/mysql.txt Still uses the same placeholders I have in place to verify data types, then hashes the SQL statement via CRC32 and checks if it's already been prepared during that session. If not, prepares it, then executes upon querying the database. Will ensure to take out the SQL statement within the error message unless it's on the admin panel. If wanted, front-end features are more filled in now: Admin: http://apexdemo.envrin.com/admin/ Member Area: http://apexdemo.envrin.com/login 
This is a git repo right? That shows linked files etc ?
If you want to change ```StaticDependency::staticMethod()``` at run time (maybe for testing) make your method a higher order function and accept a callable, then "inject" your behaviour in at run time
&gt; I'm a Windows user, and it's not working so easily here, so it's easier to disable the handshake. Although i'll add platform check and enable that option on non-windows machines. No. No. No. No. No. Fix your environment: 1) Grab the latest cacert.pem file from https://curl.haxx.se/docs/caextract.html 2) Find the following line in your php.ini: `curl.cainfo` 3) Put the path to the cacert.pem in that setting 4) Restart your apache/nginx/fpm/whatever to ensure the ini is re-read 5) TLS will now work with curl in PHP. It's that simple. Really is! 
Use [Devilbox](http://devilbox.org), it's a docker LAMP development stack with valid https support. It's easy to install (you have to follow a max 3 minute tutorial) and changing the PHP version is just a one sec.
I would convert the images into WebP format, I've seen a 20-30% improvement in size compared to their JPEG version.
THis is the correct answer here. A helper class is a sign that your Domain Model lacks clear boundaries. Think about where your helper functions should `really` live. In your example, the `formatDate` function is probably better placed in the view layer. Probably as a filter that's formatting the date based on the user's locale, or some server parameters? In your templates (Twig, Blade, ...), you would have a filter like this: `{{ lastAccessed|localizedDate }}`.
FYI: https://externals.io/message/103774
FYI it's merged now and ready for 7.4: https://externals.io/message/103774
I know about that, i've disavled verification cause it's only out-of-the-box solution. Anyways, i'll remove it in closest patch where i'll rework the builder.
Great question. Pre code compiles to PHP code, so after the first "build" it can be indexed. It's also entirely possible to use pre/phpx-html without preprocessing; just by crafting the `render` calls by hand.
Community is rightfully averse to preprocessing because it introduces compilation step to interpreted language. This removes quick feedback loop which is huge advantage of PHP against other languages.
If quick feedback loop is the only argument, then we're talking about improving tooling speed, not avoiding tooling. It's not the only argument, though. Syntax highlighting and code completion and docs and buy-in could all see some improvement in this approach.
I'm aware of other issues. But feedback loop problem is something lot of people don't realize. This is making interpreted language to be compiled one. Compilation doesn't scale well in any language, nobody solved this. In huge software using compiled languages it takes days to compile. In PHP changes take immediate effect no matter the size.
Awesome! 
nice ! the code example sucks though, triggers an overflow-x and induces some complexity that feels unnecessary for this context, fixed it here : // The folloving lines are doing the same $foo = $foo?? 'value'; // Instead of repeating variables with long names, the equal coalesce operator is used $foo ??= 'value'; 
Generally, the best approach is to not use static methods. It's a real anti-pattern Laravel is following with their facades and global functions, Laravel does allow normal auto-wired dependency injection, though. If you want to wrap e.g. the IntlDateFormatter, have a service for it (You can still call it e.g. DateHelper) and inject it where you need it, but don't make it or its methods static. You can also use the [IntlDateFormatter](http://php.net/manual/de/class.intldateformatter.php), as you can actually pass it around through your DI container, then you don't even have a need for a date helper class (it is one, basically)
Damn and we need to wait whole year for this awesome features and then ~2 for companies to switch.
No, I disagree. There are plenty of examples in Java (where compile time is a huge concern) and even pre-compiled PHP projects I've looked at lately; where a compiler step is substituted for an interpreter step (in development) and the results are near as makes no difference to expected PHP runtime speeds. Just because you haven't seen it or had good experience with compilation feedback loops doesn't mean "nobody [has] solved this".
WAit what. Is it normal to just Willy nilly change operators like that between major versions? I’m assuming the ?? Syntax will remain?
Yes it's a new feature, the other syntax remains.
Webp would be nice, but sadly it does not have universal support
RUN ALPHA IN PRODUCTION 
this looks nice, usually i wrote the commands by hand, will definitely try this
`NetworkInformation.downlink` Thanks, didnt know of this one! will give it shot
&gt;Webp would be nice, but sadly it does not have universal support You can use the browsers accept header to check if the browser supports webp format and if accepts server webp else serve the original. For example: [https://github.com/vincentorback/WebP-images-with-htaccess](https://github.com/vincentorback/WebP-images-with-htaccess)
In short this means that in PHP 7.4 you can do: &amp;#x200B; `$someArray['key'] ??= 'someValue';` instead of `$someArray['key'] = $someArray['key'] ?? 'someValue';` &amp;#x200B; Can be useful at times, but personally I'm looking more forward to [typed properties](https://wiki.php.net/rfc/typed_properties_v2). &amp;#x200B;
Am I the only one that thinks these aren't \_awesome\_ features? \--- IMO it doesn't improve readability. &amp;#x200B; \&amp;nbsp; &amp;#x200B; I wanna bet $1 that you'll see code like this: &lt;?php if (!$foo) { $foo = bar(); } replaced with: &lt;?php $foo ??= bar(); Thinking it's exactly the same and then wondering where all the weird bugs come from.
They are not changing... They are just adding... 😅 😅 
I will try out the picture element (not supported in IE :surprised face: , but a polyfill probably exists) htaccess rules is something i am trying to avoid
This was confirmed for 7.2 as well but never finished, so here is the PR merge for PHP 7.4 https://github.com/php/php-src/pull/3747
In your first example, you will get a notice: `Notice: Undefined variable: foo`
To be fair PHP has had stuff that let you get into those sorts of predicaments forever. The amount of legacy stuff I come into contact with that uses `empty()` and `isset()` everywhere is horrifying. At the end of the day you’ve gotta trust that the developer is competent and knows the different between falsy, false, and null. Otherwise we might as well get rid of null coalescing and ternaries altogether. 
I'm using [this](https://scottjehl.github.io/picturefill/), and it works pretty well
That's interesting. Can you provide some references for these Java/PHP solutions?
PHP preprocessed: https://tht.help Java + Scala: https://www.playframework.com
**Yo check it out**: [https://kachbow.com/question/top-10-php-framework-in-2019](https://kachbow.com/question/top-10-php-framework-in-2019)
No MIME type for PHP itself. :( A lot of packages ignore PHP though as it doesn't have an official MIME applied to it. It's a shame that it doesn't have an official one - but I still like to see one included. This old post talks about what the most appropriate PHP MIME might be: https://cweiske.de/tagebuch/php-mimetype.htm
Why? Mixing PHP and HTML is a bad idea. You should leave the HTML to a templating language like twig, or at least move it to a separate file. But if want to understand and don't actually intend to use that examaple, read the http://php.net/manual/en/class.recursivearrayiterator.php and related pages in the manual, and maybe find a tutorial on Iterators in PHP.
Thank you for the clear example! When I started webdev with PHP 4 and jQuery was novel, I preferred PHP due to the loose typing (because I was new and it was easier). Now, a decade later, I prefer strictly typed properties (so 5 + 5 doesn't equal 55). Glad to see PHP making a collegiate effort!
Somehow I love it and hate it at the same time. Need to read more. Great work in any case, thanks for sharing!
I really like this change. Simple but easy to implement and will clean up a lot of things nicely for me. Nice work php team! 
Not sure about THT, since it seems nobody uses it, but here's what I found about Play at [https://www.reddit.com/r/java/comments/4w6qw0/do\_you\_use\_the\_play\_framework\_in\_production\_would/d65a54a/](https://www.reddit.com/r/java/comments/4w6qw0/do_you_use_the_play_framework_in_production_would/d65a54a/) &amp;#x200B; \&gt; The dark side of the automatic refresh. As long you're updating the classes or views managed by Play it works great. It just compiles the delta and only takes a few seconds. A lot of our common code, however, is shared libraries in jars that are deployed with our other services, so our Play project just references those. If something in one of those changes, Play has to recompile *the entire thing from scratch* which for only 150 classes and 70 views takes around 60 seconds. It's painful to wait a minute for a recompile because I tweaked one line in our shared FooUtils class. &amp;#x200B; I can imagine same problem will be with any solution in PHP. As soon as you reference anything outside the preprocessing framework, framework can no longer know if it does, or doesn't need to recompile the thing when dependency changes.
FYI, w3schools are dubbed as w3fools for a reason. This example is completely made up out of nowhere. Beside being overcomplicated and useless, it, as /u/Shinhan said, is also conceptually wrong. So it's better not to follow it at all but use a regular loop in a template. If you're interested in iterators in general, a better example would be traversing a directory structure, where recursive iterators are indeed useful. 
&gt; The amount of legacy stuff I come into contact with that uses `empty()` and `isset()` everywhere (and is buggy and inconsistent as a result) is horrifying. Am I understanding you right by thinking you're saying `empty` or `isset` checks are bad practice? Cause I really don't know what you'd propose otherwise.
Nobody uses THT != "nobody [has] solved [the problem]" :P I'd say that depends very much on whether the framework is opt-in or not. For example, Pre _can_ load files through PSR-4; but only if they are named `.pre` instead of `.php`. And, when you `composer du -o` Pre compiles everything once and thereafter disables itself; so production can build the autoloader once and use Opcache in perpetuity.
This is the null coalescing *assignment* operator, the existing one is just the null coalescing operator.
&gt; isset() will return FALSE if testing a variable that has been set to NULL. Also note that a null character ("\0") is not equivalent to the PHP NULL constant. 
&gt; The amount of legacy stuff I come into contact with that uses empty() and isset() everywhere Oh, honey. I work on legacy code that didn't know `isset` existed. Seriously, I don't know what you're trying to say here, that's actually the right tool for the job. (I agree that `empty` can be tricky but there's a time and a place where it's perfect)
Two things are happening at once there. Firstly the loop takes the value from "$result-&gt;fetch_assoc()" and stores it in "$row". Secondly the while loop looks to see if "$row" has a value that isn't false or null. "$result-&gt;fetch_assoc()" will [return null](https://secure.php.net/manual/en/mysqli-result.fetch-assoc.php#refsect1-mysqli-result.fetch-assoc-returnvalues) when there are no more rows to loop through. At that point it will store null in "$row" and the loop will stop.
The only rule I've tried to follow is that it needs to be easily testable. Usually, if I put the same input multiple times, I should always get the same output. Otherwise, it means I might need to go with the dependency injection pattern. In your specific case, I think that having a helper with a static function that changes the date would be good enough.
You are explaining MySQLi example, not PDO that was asked
Underrated comment
Thank you for this concretion, though what I saw there is not too objecty-compositiony, I may be wrong of course.
Like the outline of an idea with contexts, thank you for pointing this framework out for me. Though it appears (from the video) that an actual html formatting is contained in separate template files with implicit inheritance ("extends" directive, everything is similar to twig). So it is quite far from my subject. I might have not just expressed my question properly, sorry if that's the case.
Confuse-ception. That is how isset() works.
Just as an aside \`Cureated\` should be \`Curated\`
Wow it got it before javascript https://github.com/tc39/proposal-nullish-coalescing
I wish you could do $test = foo || bar;
I'm onboard with you but not with your alternatives. In Rust things like for example query parameters (`$_GET` in PHP, where traditionally `isset` checks were very common) are implemented as HashMaps. The `hash_map.get(your_key)` operation returns an `Option` object on which there is a `unwrap_or` operation which either returns the value you originally wanted or a default value that you passed to `unwrap_or`. See [example](https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or). I wished PHP arrays had a similar interface.
$test = foo ?: bar
Correct. I misread Therefore: The example shows you a way of pre-defining what happens when you loop (or iterate) over a set of data. In this case the Combination of RecursiveArrayIterator and RecursiveIteratorIterator make it so that you treat the results from $stmt-&gt;fetchAll() as if they were in a flat array. The beginChildren() and endChildren() methods contain logic that happens before and after each row. The current() places html tags around each value in each row as it gets echo'd out "echo $v;". It's not a surprise you've asked the question. This example does look quite bonkers when..... foreach ($stmt-&gt;fetchAll(PDO::FETCH_ASSOC) as $row) { echo "&lt;tr&gt;"; echo "&lt;td style='width:150px;border:1px solid black;'&gt;" . $row['id'] . "&lt;/td&gt;"; echo "&lt;td style='width:150px;border:1px solid black;'&gt;" . $row['firstname'] . "&lt;/td&gt;"; echo "&lt;td style='width:150px;border:1px solid black;'&gt;" . $row['lastname'] . "&lt;/td&gt;"; echo "&lt;/tr&gt;" . "\n"; } There are some [security flaws](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet#RULE_.231_-_HTML_Escape_Before_Inserting_Untrusted_Data_into_HTML_Element_Content) in this example that also need fixing but that I thinkgoes out of scope of the question.
In my experience they are often abused (not to mention the [common mistake](https://phpdelusions.net/articles/empty)). As a rule, PHP users take "Undefined variable" as a nuisance that got to be ridden off at any cost. Whereas, just like any other error, it is intended to help a programmer, not to bug them. So one should let it got there there is no reason to expect an undefined variable. For example, when assigning a text input value to a variable, often either isset or empty or null coalescing are used, whereas being superfluous or rather harmful. `$name = $_POST['name']` is enough, given the form has been submitted and "name" input is neither checkbox or radio. In this case, normally there would be no error, as such fields are always sent. And if there is an error, then it's a typo in the names or our form has been tampered with. In both cases there is no use in the further processing and an error thrown is the only proper scenario
&gt; $test = foo ?: bar That works. What is the operator called?
why are the smallest repos the biggest dots and vice versa?
oh no wtf its completely 3D they were just closer haha
&gt;Mixing PHP and HTML is a bad idea No it isn't
Shorthand ternary.
Mixing PHP code that opens &amp; queries a database in the same file as regular ^(echoed) HTML definitely is.
[Elvis](https://en.wikipedia.org/wiki/Elvis_operator)
Now I want `?:=`
PHP Internals have never cared about readability. They've blatantly copied HackLang for years and years, and now that they're on their own, they're going down the Dark Path again, with crazy things like `&lt;=&gt;` and `??=`, among others.
I can't even get 7.3.1 from segfaulting in production....
&gt;Also note that a null character ("\0") is not equivalent to the PHP NULL constant. Of course it isn't? Why would anyone think otherwise?
I like all these new features but man, there are gonna be *a lot* of question marks everywhere.
I’m being a bit unfair but it wouldn’t surprise me if php once upon a time didn’t knew the difference. 
Why does everyone have to mention typed properties in 7.4 in every other post? Seriously, we have function/method return types, function argument hinting and having typed properties LITERALLY won't turn shit code into a thing of beauty. 
What a stupid tutorial.
The simple solution is not to use static methods. As for your example such method is excessive. DateTime handles it already. If you need some specific formating, then that falls under business rules and deserves a separate service instance. Also naming word "Helper" is meaningless. Do you keep classes in your code which are not helpful? Can you name a few? Why you keep them? The whole thing is obviously hilarious.
Is this live? I can't find a package. It's really pretty though.
Yeah, that’s true. We still have to run our code before we know something is wrong. I’m excited about typed properties because it will improve type inference. This will result in a smarter IDE and better statical analysis.
Someone should start a PHP version. https://en.wikipedia.org/wiki/Obfuscated_Perl_Contest ``` # Third Place, Most Creative, 1 st Annual Obfuscated Perl Contest: David Powell, for a curses-based real-time skiing game. undef $/;open(_,$0);/ \dx([\dA-F]*)/while(&lt;_&gt;);@&amp;=split(//,$1);@/=@&amp;; $".=chr(hex(join("",splice(@&amp;,0,2))))while(@&amp;); eval$”; ($C,$_,@\)=(($a=$/[1]*4)*5+1, q| |x(0x20).q|\||.chr(32)x(0x10).q$*$. chr(0x20)x(0x10).(pack("CC",124,10)), sub{s/.\|(\s*?)(\S)./\|$1 $2/}, sub{s/\|(\s*?).(\S)/ \|$1$2 /}, sub{$2.$1.$3},sub{$tt=(3*$tt+7)%$C}, sub{$1.$3.$2}); while ($_) { select $/, undef, $/, $C/1E3; (sysread(STDIN, $k, 1),s/(.)(\*)(.)/(&amp;{$\[(ord($k)-44&amp;2)+2]})/e) if (select($a=chr(1),$/,$/,0)); print 0x75736520504F5349583B2024743D6E657720504F5349583A3A5465726D696F73 3B24742D3E676574617474722828303D3E2A5F3D5C2423292F32293B2024742D3E 365746C666C61672824742D3E6765746C666C6167267E284543484F7C4543484F4 7C4943414E4F4E29293B2024742D3E7365746363285654494D452C31293B24742D E7365746174747228302C544353414E4F57293B24643D224352415348215C6E223B0A; ($p?(/.{70}\|$/):(/^\|/))||(&amp;{$\[3]}&lt;$/[0])?($p=!$p):&amp;{$\[$p]}||die("$d"); (&amp;{$\[3]}&lt;$/[1])&amp;&amp;(s/ \|$/\|/); (/\|.*\*.*\|$/)||die("$d"); } ```
What I was saying is that OPs notion that this is a bad idea because developers might not pick up on the difference between false-y and null is sort of a moot point considering `empty()` and `isset()` both suffer from and encourage the exact same issues. 
I’m absolutely saying I think they’re bad practice. Be explicit in what you’re checking for. Might this value be null? Check if it’s null. Want to check if an array key is present? Use `array_key_exists()`, because `isset()` returns false if the key is present but the value is null. They’re not inherently bad, but they make it so easy for unintended behaviour to sneak into a codebase. Let the code tell me what values you’re expecting, and which cases you’re handling. Explicitness is pretty much always a benefit to anyone else that needs to work on or interact with your code. 
aka elvis skull operator
Thanks for noticing the error. It would be great if you could mention, where the error is. &amp;#x200B; Thanks
In your page header " Cureated by [Simplest Web](https://simplestweb.in/?utm_source=LaravelCollections.com&amp;utm_medium=referral&amp;utm_campaign=header)"
 In your page header " Cureated by [Simplest Web](https://simplestweb.in/?utm_source=LaravelCollections.com&amp;utm_medium=referral&amp;utm_campaign=header)" 
learn simple HTML... in HTML &lt;a name="error"&gt;&lt;/a&gt; url: www.www.www/form.php#error This is a HTML basic... This even works in textbased browsers or Mosaik (1993) ;)
Do your forms not have checkboxes?
Haha, love this comment.
Maybe i didn't make myself clear. I can display the messages with PHP. If i have a long page for instance and the form is at the bottom of the page, when i submit the form and the php validates and correctly displays the error message, the page re-loads through PHP_SELF and shows the top of the page, the user would have to scrolll down to see the form where i've shown the error message. I want to be able to load the page and have the page show the error message immediately in the field of view without the user having to scroll down the page. 
Indeed it's merged to PHP 7.4: https://www.reddit.com/r/PHP/comments/ailyd0/comment/eeorvks
That's not true. `isset` is safe, it checks for undefined and null. Nothing else. `empty` is basically `isset` and falsy.
&lt;a name="error"&gt;&lt;/a&gt; &lt;- one line above the ERROR in the HTML and the # part must always the last, end the URL
I do use !empty() on checkboxes. Probably should have expressed it more explicitly
can't, lol... but have many, many customers using it on servers :)
If your site primarily deals with large amounts of well structured data, Drupal can be a good option. Steep learning curve, though.
You could try craft cms
We've thought about using that quite a bit, have you used it?
That’s exactly what I’m saying. OP says a coalescing assignment operator is a bad idea because people might use it when null is not what they want to check for. `isset` and `empty` are the exact same class of problem in reverse: ambiguous “negative” states where you have no idea if the data you’re dealing with is null, false, or hasn’t even been defined.
I use only WordPress or laravel, no middle way
I haven't had the occasion to use it professionally yet, but I like the look of [Grav](https://getgrav.org/) for the sort of brochure sites I've used Wordpress for in the past.
Again, that's true of empty, but not isset. There's no ambiguity with isset.
Drupal from my experience. Takes a while to master, but Drupal is a beast. Why would you want to use anything other than Wordpress tho? It's still the best if you're not skimping on security.
Isn't that what null coalesce does or am I misunderstanding? ``` $article = $_GET['article'] ?? Article.createDefault(); ```
Just seems every time you want to do some custom stuff in the CMS, you either have to do hours of coding, or use a rubbish plugin.
I think there is at least one evidence of ambiguity, illustrated by /u/regretdeletingthat $foo['bar'] = null; var_dump(isset($foo['bar'])); When you need to know whether a variable has been explicitly set, isset my deceive you. 
``` if (! isset($a['index']) { doSomething(); } ``` Is `$a` defined? Is `$a['test']` defined? Is `$a['test']` null? For every single one of those conditions, `! isset`evaluates to true. I get that they have very well defined behaviour, but that doesn't stop people using `isset` and `empty` as lazy shortcuts when they don't care to find out what the data they're dealing with actually *is*.
Haven't encountered that issue so far
Using gitlab at work and for personal use. Loving the CI/CD. Keep up the great work!
That’s one thing PHP has going for it, 5 + 5 is never 55 no matter what types you use. 
Craft CMS seems a good choice: https://craftcms.com/
I added a spoiler for you :)
As a former Drupal dev, who switched to WordPress &amp; Laravel... here's what I think. It all depends what you're trying to accomplish. * When it comes to blogging, in my experience WP blogs by far outperform in SEO. Perhaps it's because Google's AI bot is understanding WP structure a lot better due to the popularity of WP. Also by default, WP has a good HTML structure to it, it comes with alt tags, Yoast plugin (SEO king), AMP support, plugins for rich schema. The backend is easy for people to manage. If I was to build a blog, I truly don't see a reason to move away from WP. * Drupal. I hope people find the room for discussion here. I've spent around 8 years in Drupal, starting with D6. Drupal is an amazing framework with one of the most committed group of devs. But, absolutely every company I worked with that used Drupal, struggled at some point. Absolutely no developer wanted to take on an existing project due to the complexity of the site. There used to be a great demand and pay for Drupal devs in US about 5 or so years ago. That demand is no longer there. Many have switched to Laravel, WordPress or just about anything else. * Laravel. If you're looking into making web applications, i.e. shipping app, tracking app, Q&amp;A forum, etc... look into Laravel. It's a light framework, easy to build on, with amazing community support and documentation. Alternatively, if you don't mind learning something completely new, NodeJS is awesome. It's especially great if you're building a server-heavy app like a crawler. So yeah, first choose the type of software you want to develop, then make the choice. Once you make the choice, stick with it and take it far. It doesn't have to be necessarily WP or Laravel, as long as you pick the right software for your field. &amp;#x200B;
This will shorten a lot of codebase :) 
That replace is not equal, since `$foo` can be `0`. Better use automated upgrade like this: https://github.com/rectorphp/rector/pull/979 
[This doesn't look free as in beer or free as in freedom](https://github.com/craftcms/cms/blob/develop/LICENSE.md)!
Looks awesome but very expensive in the context of my mostly micro business clients. 😞 Still.. may give the free version a go for my own site. Thanks for the tip! 😊
Grav perhaps? * it is modern * open source and free * support is decent, so is maturity * it is flexible due to having rather clean codebase * definitely developer-friendly * super lightweight, doesn't even use a database * can't speak for security, but I'd assume at least adequate * uses Twig for theming. Doesn't get better than that. * has all of that * i believe so
Maybe Kirby? V3 was just released. My experience is with v2, but it's very developer friendly and customizable. Only downside based on your list is that a paid license is required though is not expensive.
I guess, but I find it much more useful that it actually checks for null rather than not. The amount of situations I've ran into in which I need to check that case is very low. Easily solved with `array_key_exists` in that case. If it's a variable and not an array that you're checking against, then the code is bad anyways and needs refactoring.
Drupal (completely open source/free) is built ontop of the Symfony framework, very large ego system behind with lots of modules (plugins). ..but lots of ‘drupalisms’ and quirks to contend with when working with it. Coming from a Drupal developer for 4+ years
Well said, Nice one.
Let's take a super trivial sample: class Whatever { protected $prop; public function setProp(int $value): self { $this-&gt;prop = $value; return $this; } public function getProp(): int { return $this-&gt;prop; } } Voila. A much, much bigger feature hit us with 7.0, where you could typehint primitives in function declaration and use return types. But no, every *single* hipstard yaps on about typed properties, as if THAT is the next superb feature (it's not). Just use the tool you've got at your disposal, it's even **better** than typed properties. Seriously, this business is so full of fashionists that it's disgusting. 
JavaScript on the other hand...
To be honest, I've tried installing and using Xdebug on three different machines over the course of three years. Never once got an install and integration that made it useful for me. I'm sure somebody familiar could show me how to make use of it, but I gave up on Xdebug.
I will make an post about it soonish.
PEAR server is down A security breach has been found on the http://pear.php.net webserver, with a tainted go-pear.phar discovered. The PEAR website itself has been disabled until a known clean site can be rebuilt. A more detailed announcement will be on the PEAR Blog once it's back online. 
Has anyone else experienced their local php instance running up to 4 times faster while xdebug is running? For example normally when using xampp ill get maybe 450 ms to get a response on a query, with xdebug on it goes down to about 80ms.
I feel like xDebug performance does not even matter that much now if you set up your environment right. We just have two Docker container configurations - one using xDebug and one without it. this makes it trivial to just toggle xDebug on when you actually need it (which essentially boils down to debugging code / unit tests with PHPStorm for us). This can be done relatively easily with two docker-compose.yml files. That way, there is virtually no performance impact of any significance in our day-to-day usage and most definitely not on any of the actual servers. Code coverage creation is relatively slow, yes, but we found it speeds up significantly by setting *processUncoveredFilesFromWhitelist* to *true* in the PHPUnit configuration.
thanks
That’s the opposite of my experience, when I’m actively debugging it goes much slower. Maybe something Xampp related? I haven’t used any full stack programs like that in some time.
&lt;3 Our shop is 100% Linux and Jetbrains if that's useful.
[ExpressionEngine](https://expressionengine.com/) was recently open sourced under the Apache 2 license. It probably means that EllisLabs have moved on, but ExpressionEngine is tried and tested, and it looks to be a leaner version of Wordpress. It's a good option, I think. Although I haven't tried it myself (I don't really need a CMS).
Having typed properties is not an attack on argument and return type declarations. They complement each other. I didn't realize that increased type safety was a meme, guess I'll move to javascript now.
Can you share more on how you accomplish this. I’m trying to get a similar setup. 
The lack of easily accessible debugging for why xdebug integration in Phpstorm isn't firing can be quite frustrating.
If you have a customer who's savvy enough to know how SQL works, is it so hard to imagine them using proper software like SequelPro or MySQL Workbench? Both of which are far more robust and secure than exposing your MySQL instance over web requests.
I had a similar experience, finally got it working, but switched to [Psysh](https://psysh.org/). Maybe it's just coming from Ruby and using Pry all the time, but I got a lot more out of psysh's interactivity. Probably my fault rather than xDebug's.
I find that I don’t need xdebug. I just var_dump or write a print_r or the output of a Kint dump (https://github.com/kint-php/kint) to a file somewhere. It’s just way more trouble than it’s worth to try and get it all set up.
Im on mobile so I can’t show my exact setup but I followed this guide and tweaked from there https://jtreminio.com/blog/developing-at-full-speed-with-xdebug/
I can't visualise doing development without xdebug, it such a fundamental tool, that help me out massively during my career. At least I can contribute a bit back with Patreon.
Just a tip, you may want to work locally on your site and update your SSL cert, it exprires 2 months ago.
I would like to show the point each object can have a rendering engine and those object can be layered. (The video's template parts is not a good example, sorry.) Your question is perfect, sorry my poor English.
I sure do appreciate ya. Thanks for the lead.
I wrote my own and you can see it hosted here: https://technex.us/ Screenshot of the admin interface. https://imgur.com/LRnZ87E Entire source code here: https://github.com/hparadiz/technexus I'm not making money from this in any way and I don't care if you use it or not. It is a tech demo. I'm using TinyMCE just like Wordpress. Otherwise it's Smarty templates with a modern ORM I made myself: [Divergence/Framework](https://github.com/Divergence/framework). I have [92% unit test coverage](https://codecov.io/gh/Divergence/framework/src/master/src/Models/ActiveRecord.php) for the ORM. MySQL backend and [DB table created for you on first use](https://github.com/Divergence/framework/blob/master/src/Models/ActiveRecord.php#L1452-L1473) from the PHP models. I would not use it for client projects because no plugin system but if it's a personal blog it's so much faster, lighter, and more organized than Wordpress in every way. 
Thank you, will update it to the correct spelling.
My pleasure, psysh has helped me out quite a bit. Interactive debugging, lets you check documenation right inside the repl (lifesaver for PHP), easy to use. I have its require statement as an auto-snippet on my editor so I can throw it in my code in a second. Not as powerful as Ruby's Pry, but pretty good.
 this is code [https://licklink.net/OJ3Xa](https://licklink.net/OJ3Xa) and instruction fix error "We could not validate your license xxxxxx" [https://licklink.net/FgNZg](https://licklink.net/FgNZg) . it work! thank for wathching ! 
I've never heard of Psysh. It looks super interesting. Thanks!
[Yeehaw](https://www.reddit.com/r/ProgrammerHumor/comments/6xzcgb/is_n_in_javascript/)
Very large ego system indeed. Why learn Drupal for small websites? 
Xdebug can be a little tricky to set up for the first time, since, without an Xdebug-capable IDE, there are no messages to tell you if it is working (besides checking the PHP info to see Xdebug's config/whether it is enabled). Maybe before trying remote debugging or using it with virtualization options like Docker or Vagrant, just try installing PHP and the Xdebug extension directly on your machine, start the dev server in a directory with PHP scripts (`php -S localhost:8000`), and try to debug something.
&gt;Maybe it's just coming from Ruby and using Pry all the time, but &gt;I got a lot more out of psysh's interactivity. Here, let me make Psysh. In Xdebug: 1. Set a breakpoint 2. When that breakpoint is triggered, [run code from the IDE's REPL](https://www.jetbrains.com/help/phpstorm/debug-tool-window-console.html#32b18aed). This already exceeds Psysh's functionality. If you're not using a debugger, you're not debugging.
I've never had much luck with xdebug. Now, I recently moved from NetBeans where all my attempts were made to PHPStorm, so I should give it another go. But I am pretty darn adept at at just figuring things out with a die(). I literally have a code template for `pre` that outputs this: echo '&lt;pre&gt;' . __FILE__ . ':' . __LINE__; print_r(); echo '&lt;/pre&gt;'; die(); Pretty? God no. Elegant? Not even close. But effective, yes, its gotten me this far. Still, I'm going to give this xdebug thing one more shot tomorrow.
everything!
Unless Psysh lets you set breakpoints, step in/out of scopes, continue execution on demand, and view the entire state of the PHP environment at each line of code without modifying that code, this is not debugging, because it is not a debugger. I believe Pry has some of this functionality (if using the `pry-debugger` plugin). Psysh does not, and there is no potential for it to.
need more clue
absolutely the opposite, it's worth the pain to disable when not actually in use because it slows things down so much
https://octobercms.com/ perhaps? It's based on Laravel 
Yes, sorry, I'm trying to add text to the post but Reddit won't let me. Must be doing something wrong. This is my question: &amp;#x200B; I need to run a MySQL query where I set a variable, then use that variable in the following select. PHP prepared statements does not allow me to run multiple statements in the one prepared statement. The query looks something like this: &amp;#x200B; set @rand_img = (select filename from images order by rand() limit 1); select images.added_timestamp, images.submitter_id, members.nickname, images.filename, images.img_desc, (select vote from image_votes where image_votes.img_id = @rand_img and image_votes.user_id = ?) as self_vote, (select sum(vote) from image_votes where image_votes.img_id = @rand_img) as total_votes from images left join members on images.submitter_id = members.id where images.filename = @rand_img and not images.filename = ? The above works just fine, but I can't use it in PHP as a prepared statement. What would be the best way to go about this?
My primary gripe with wordpress is the marketing department, here's why: - You let them have free reign on it and 6 months later there are 50 plugins installed. - They have no idea what plugins are actively being used. - They do not update it, leaving it insecure. - Are the plugins even secure to begin with? For me I end up having to support the mess these kids leave. This is not WordPresses fault, it has several faults of its own such as the state of its internal code, but they can't held accountable for marketing departments across the globe. You really shouldn't need that many plugins either. If you're building a truly custom site based on wordpress the only plugins need are the following IMO: - Advanced Custom Fields PRO (Paid, but a Free version exists) - Akismet Anti-Spam (Free) - Configure SMTP - Expire Passwords - SSH SFTP Updater Support (No FTP ports allowed in my environment) - Whatever Cache and SEO plugin Most custom stuff can be accomplished with ACF Pro and your site will be faster and cleaner because of it. Also 99.999% of those paid for templates are trash. Forget about them, just have your designer do their HTML/SASS/CSS magic and then create a template from scratch using wp-bones or something like it. Next, don't let marketing have admin access, don't let them install plugins. Anything they want has to be approved. They can do what they want on a staging site, but anything else has to be approved for production. If you let them have free reign that thing is going to turn into a frat house and they are going to ask you to clean up the place on their behalf every week. Fucking marketing, am I right?
What stops you from just returning the value to PHP and sending it to the next statement? That's my typical approach. If I need to hold more temporary data than makes sense to pass back and forth by PHP, I would insert it into a temp table (which is visible only to that mysql connection)
Bug report: https://technex.us/topics/google%20chat
Advanced Custom Plugins is your friend. Gives your content a person for whatever specialized field or setting they need and you can pull in the value directly into the template. If you built your templates from scratch it should be pretty clean.
Also, I missed the "No help posts" in the rules. I'll create this in phphelp instead. My apologies.
I feel like that's an excellent opportunity for jetbrains to hire him, like they did with /u/nikic https://www.reddit.com/r/PHP/comments/aevddb/awesome_news_nikita_popov_joins_phpstorm_team_i/
Nothing I guess, but I want to use this approach mainly due to the performance benefits. Using subqueries/multiple statements in one query is significantly faster than fireing two seperate queries via PHP. I could use a temp table as well, but how would I do that within the same query? And since I should only end up with a single row, it feels like that approach would be over-engineering it? Might be wrong about that though
You have an order by rand() if you're really looking for places to improve performance. Premature optimization is the enemy of clean readable code, wait until you have a measurable performance problem to fix it. I personally use newrelic and datadog to figure out exactly where in my stack is slow, and I've almost always been surprised. So long as you're not doing a query in a loop in a loop you should be fine.
TYPO3. Highly scalable and extendible from smaller to large Enterprise websites. Has a bit of a learning curve, but if you know what you are doing, it becomes a really powerful cms tool.
I figured order by rand() would be the faster way over pulling a 20k row dataset and having PHP iterate through it to find a random row, but I'll admit I'm just guessing :-) Also, it feels cleaner to have mysql do all the work in a single query and return exactly what I need instead of having lots of added php code to get the same result? 
the fastest way is to pick a number between 1 and 20k and pick just that record with order by and limit. Especially if you only need one. It makes it just an index lookup. &amp;#x200B; I can't generate the query off the top of my head, but for this example i think you can do it literally in one query, if you start by just taking that select you want to assign, and joining the rest of the query to it on something degenerate (join on(1=1) or whatever), then updating it to the value of that column.
Having the extension even loaded, even if it is configured as a no-op, it chokes the interpreter significantly. Granted my company is running an old version of PHP and an even older version of Xdebug... but it definitely adds meaningful overhead.
https://getgrav.org/
You don’t have to use the Symfony framework to install a Symfony component. It’s just a standalone PHP lib, but with a battle-tested infrastructure, maintenance, release and security policy as well as a large maintainer team. Composer, Laravel, Magento, Doctrine and many other projects also cherry-pick some Symfony components without using the full-stack framework.
Will this be in person or online?
Thanks for sharing. I added my support via Patreon right now as it's a great tool and definitely deserves to be supported in order for further improvements. In case Derick reads my comment, I would like to suggest that he removes the $1 tier though and changes it to $5 as the minimum tier. I guess that might make more people support the project with more than just $1 and that's what the tool definitely deserves.
I don't know why are you downvoted. But, I'm with the same boat as you. It's hard to make use of XDebug.
That's a shame, because a lot of people are in your exact situation and assume that it's just not worth the effort. But in many situations XDebug can be a tremendous help. 
Being a person who never touched a framework I don't really understand, why do you prefer using a cms rather than a modern framework? I mean blogs/shops etc aren't that hard to build with symfony (or laravel), what advantages do you gain choosing to use WP for instance?
&gt; is significantly faster Who said you that?
I'm always open to the best tool for the job, but I was able to get up and running with PsySH in about half an hour this evening. I have it tucked in a little volumed Docker container so I can just sidecar it onto my projects. 
/u/nonfree please read this comment attentively. It says much more than you think at first. Basically you are barking the wrong tree, trying to save a dime while losing thousands of dollars. Basically al your concerns are imaginary. Never optimize any code based on the imaginary concerns. Always have a practical certain reason for any optimization. If you need one - profile your code and find out that your order by rand query takes millions tomes more time than a stupid extra db roundup.
What ide / environments are you using (docker, vagrant etc)? I've set it up with sublime and phpstorm with local, vagrant and docker. I'd be happy to see if I can help you set it up to see if it will help you?
Can't wait to debug this for decades to come! I just started fixing `&lt;=&gt;` misuses now out in the wild and 7.0 is barely a blip on the radar for legacy apps!
Also see https://www.reddit.com/r/PHP/comments/ailyd0/null_coalescing_assignment_operator_is_now/?st=JR8W1YXQ&amp;sh=7428a676. 
As someone who is very enthusiastic about good tooling, you’re very much missing out imo. With Xdebug you can: - Pause execution, inspect values, then continue execution without modifying the behaviour of the script (e.g. by printing something) - Set conditional breakpoints, so if you’ve got a tricky bug that only seems to occur when $x &gt;= 25 and $y &lt; 92, you can have it only pause when that is the case - For particularly horrible codebases where it’s difficult to even determine what execution path is being followed, you can just set a breakpoint in the entry script and step through line by line And that’s without even starting on the profiling and code coverage tooling it has. Honestly it might seem like you can achieve most of that with data dumping, but the benefit of being able to step through a loop one iteration at a time and watch how the values change in real time is incredible. Plus, there’s always the risk of accidentally leaving a dump in a rarely-used bit of code. It’s happened to us in the past. I’m not sure about NetBeans but I can tell you how to get it working in PhpStorm in about four steps, depending on what sort of environment you’re running PHP in (e.g. Docker vs a local installation). 
What I always find interesting about PHP is it seems to be one of the only languages where a large amount of the developers seem to have no interest in using a debugger. “This is pointless, I can just `var_dump`” seems to be an incredibly popular feeling in the PHP community. 
Did you have difficulty getting it working reliably, or just not find it useful? If the former, I can explain how to get it set up in PhpStorm (I notice you mentioned JetBrains below), and once you’ve done it once or twice it takes like 15 seconds any time you need to do it again. It only really varies slightly depending on whether you’re using something like Docker vs a local installation, but both are perfectly fine. 
awesome. can't wait.
These two courses should be good for a start. but you still have to review other developers code and someone review your code to make sure you applied what you have learned. &amp;#x200B; Clean Code tutorials [https://learning.oreilly.com/videos/clean-code-applied/9780134843810](https://learning.oreilly.com/videos/clean-code-applied/9780134843810) &amp;#x200B; Design patterns [https://learning.oreilly.com/videos/design-patterns-clean/9780135485965](https://learning.oreilly.com/videos/design-patterns-clean/9780135485965) &amp;#x200B; &amp;#x200B;
Since I work in SEO and Developement, I would say there isnt really a good alternative. Wordpress is a great blogging application its what its designed for and it doesnt try to be any thing else. Its great for quickly whipping up a blog, but the downfall of wordpress is the backend code. In my experiance if a client wants anything that is out the scope of wordpress we build a application for it, A blog isnt hard to build. What ever extra is needed is where you need to spend your time.
And I want ?-&gt;
I'll just leave this here: https://pimcore.com/en 
Thanks 
JavaScript too. It's because there's no real compiling, you can just throw a var_dump in and hit refresh. I got away with it for many years but started finding xdebug a lot more helpful when I moved into more complex sass platforms.
can you give an example of a misuse of both?
huh, how are you having trouble installing xdebug on linux? something along the lines as `sudo apt install php-xdebug` should do the trick?
phpstorm has a rather usefull xdebug configuration test feature though
It really is invaluable to be able to drop into the code a few lines above the suspect code, check the status of variables and objects, then step through the code until it takes an unexpected branch or a variable gets assigned potato.
If you're interested, I made a low tech alternative, I made an icon that sits in your systray, clicking on it gives you a few options, "Restart Apache" "Turn xdebug on" "Turn xdebug off" It reads your php.ini, and comments or uncomments the line that loads in your xdebug extension and then restarts Apache. Takes about ~5 seconds to restart on my machine, docker _may_ be faster, not sure.
&gt; without an Xdebug-capable IDE, there are no messages to tell you if it is working I usually use [`xdebug.remote_autostart`](https://xdebug.org/docs/all_settings#remote_host) and just run `nc` to see if anything tries to connect. Looking back on the documentation, ou could also pick a path for [`xdebug.remote_log`](https://xdebug.org/docs/all_settings#remote_log) and see what gets written, or use its [command line client now]https://xdebug.org/docs/install#debugclient).
You can misuse any programming construct. Fix your co-workers instead of blaming the programming language.
What platform do you run on? Linux, Mac, windows, docker, vm?... I run xdebug on Windows, and I've never seen performance _increase_. If you're not running on a weird platform, do you maybe have some xdebug setting in your php.ini that might be responsible for this speedup?
Regarding phpstorm+docker+xdebug, it's a bit out of date, but there's a [demo skeleton](https://github.com/DHager/docker-php-library-demo) that might help shed light on things.
&gt; continue execution without modifying the behaviour of the script Or, alternately, **do** flip some bits and change some variables, which can be very handy when trying to re-test rare errors or explore the behavior of the code.
&gt; running up to 4 times faster while xdebug is running? No, but in some configurations Xdebug can force separate PHP scripts/web-requests to run *sequentially* as they wait for their turn at the debugger. So one wild-ass theory is that it's preventing some kind of periodic "fight" between PHP processes that conflict over some shared resources.
&gt; wild ass-theory *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
I tried converting coworkers to Xdebug in many companies and I mostly failed so far. I even made a tutorial with screenshots and videos to setting it up and using in PhpStorm. Oh well.
Agreed, although Chrome Debug Protocol + sourcemaps changed my life. In the last couple of years I’ve worked on increasingly JavaScript-heavy projects and being able to break and step through them in much the same way as the backend code, even after running through Babel and Webpack, is great. 
@No-Voter: Why did you vote no?
Ruby has had a similar construct (`||=`) for years and it generally doesn't cause egregious bugs...
I havent noticed at the first time that it's been exported as a separate component. Anyways it has less mimes in list and different functionality.
Nah im running on windows 7 and code through VS Code and run the debugger with the PHP Debug extension and had to setup xdebug for it.
What do you mean?
How does missuse code look like?
I would say that it is not possible that when you have Xdebug enabled, things go faster. There \*must\* be another reason why this happens. As Xdebug hooks into the PHP engine, it always creates (some) overhead — sometimes too much too, but that I want to look at.
This does currently not work reliably, due to changes in the way PHP 7 handles variables. There is a [bug report](https://bugs.xdebug.org/view.php?id=1488) about this, which I need to resolve before this works reliably again.
That is correct, but then there are some config options to put in php.ini On my developer rig I open an ssh tunnel to my staging site which forwards port 9000. This means that there is no risk of the xdebug remote exploit because the port is only open when using the ssh tunnel. Yes my staging rig got hacked due to xdebug remote exploit once. Never forget ;)
Am I missing something or is this example kinda odd? ``` $array['key'] ??= computeDefault(); // is roughly equivalent to if (!isset($array['key'])) { $array['key'] = computeDefault(); } ``` Isn't that the same as: ``` $array['key'] = computeDefault(); ``` because there is no need for that isset?
I'm curious to hear what happened there!
&gt; Fix your co-workers instead of blaming the programming language. lol sorry this is OT but the "fix your co-workers" kinda sent me to PTSD We hired a java guy once. Friend of boss, came from a big name SV company, said he could pickup any language. He proceeded to "fix us" by writing java apps for all the tickets we gave him and show how easy it was because he blamed PHP for pretty much everything. He no longer works for us. I had to support those java apps until they could be rewritten in PHP. 
(Full disclosure, I am also a maintainer) But you can make the same arguments for the `style=` attribute in HTML. Sure, it allows you to "concisely express" the presentation rules in-place but at significant cost: You have to repeat this in-place logic everywhere you need it. As an example, populate a form from some data source (either $_POST for validation failures or from the database). With TSS, you can write this logic once: ``` //Find all textareas and look up the corresponding data from their value e.g. $_POST[$textAreaName] form textarea {content: data(attr(name))} //Find all text boxes and look up the corresponding data from their value e.g. $_POST[$textAreaName] form input[type="text"]:attr(value) {content: data(attr(name))} /* and the same for selects, radios, etc*/ ``` Of course it doesn't have to be $_POST, you bind the data to the template which can either come from POST, a database record, or wherever and can then re-use the logic on every single form you write. ``` form { bind: data(post); } // or form {bind: data(someObject); } @import 'form.tss'; // load the generic logic for loading a record into a form ``` Similarly, how often do you need the logic "if they're and admin hide this block?" With TSS you can express this logic once: ``` // remove the block from the template if they are not an admin .admin:data[user.admin=false] { display: none; } ``` and apply it to every template to remove any element with `class="admin"` if they are not logged in. If the logic changes so you now have moderators and admins you have one place to change it. So to answer your question: Yes, you have to write CSS like rules for every piece of data you want to include in the template, but not only is this logic reusable on different templates e.g. (write the user name to the element with the id `username`, ) but you do not couple this logic to the template. Your designer can redesign the template and as log as the element's class names/identifiers are still correct, the logic still gets applied correctly, much like using external CSS. Here a final example. Let's say you have a template for displaying a product: ``` &lt;div class="product"&gt; &lt;h2&gt;Title&lt;/h2&gt; &lt;p&gt;description&lt;/p&gt; &lt;em&gt;price&lt;/em&gt; &lt;/div&gt; ``` With a traditional template engine you need to add markers to this template for later str_replacing e.g. ``` &lt;div class="product"&gt; &lt;h2&gt;{{title}}&lt;/h2&gt; &lt;p&gt;{{description&gt;&lt;/p&gt; &lt;em&gt;{{price}}&lt;/em&gt; &lt;/div&gt; ``` The problem is, this is not reusable if you have a list of products. You need to add the `{{foreach}}` logic to the template to turn this into a product list (yes you can do it with partials but it becomes increasingly complex). With transphporm the logic is separated in such a way that the template can either be used to display a single product or used to display a list of products, because it doesn't need to contain the looping logic. ``` //Code for single product, product.tss .product h2 { content: data(price); } .product p { content: data(description); } .product em { content: data(price); } // Code for list of products: .product {repeat: data(productList); bind: iteration(); } @import 'product.tss'; ``` 
My rig got hacked in a way that resulted in an php process running at 100% CPU. When I killed the process it got executed again. Honestly I could not find an solution so I destroyed the machine and created a new one. Since then with the new measures it never happened again. If you google xdebug remote exploit or php 100% cpu load you will find various vague descriptions.
This actually makes me think. With issues like this why has NodeJS become so popular. I mean surely it has the same issue and these sorts of problems can be much more dangerous on back-end code than front-end
your boilerplate example should include on line 3 /** @var int $prop */ But, why are you against something like this? class Whatever { public int $prop; } If you don't _need_ getter/setters why is your boilerplate **better**? What is fashionist/hipstard about that? I've been using typed properties in other languages well before PHP7. This is **_old school_** stuff that makes PHP more feature complete. Hell, it even makes your example better class Whatever { protected int $prop; public function setProp(int $value): self { $this-&gt;prop = $value; return $this; } public function getProp(): int { return $this-&gt;prop; } } 
&gt; Remove my own component because "symfony now has one" is quite silly, dont you think? Nobody is asking to do that. Alternatives are fine!
Can you give an example where ??= isn’t a misuse? Every use I see for it is something like $foo['bar']['baz']['qux']['quux'] ??= 7 Which seems to encourage repeating those array keys all over your code which almost always better handled by storing the lookup to a local variable ala $local = $foo['bar']['baz']['qux']['quux'] ?? 7 
&gt; You can misuse any programming construct. Which is arguably why you should have as few as possible. Check out the wonderful things happening in the Go community.
Installing xdebug takes like 5 minn
yeah, you're just being ridiculous and your example still works and doesn't need fixing
Would this tutorial happen to be public anywhere? If not, would you consider making it public? I’m one of those `var_dump` peasants, although to be fair the framework I’m working with does have a pretty-print with collapsible fields when I dump an object, so it’s not all bad. The main reason I’m not using xdebug is that I found performance absolutely tanked when I enabled it, and I didn’t care enough to investigate why. I’d be happy to give it another shot if I was taught how to set it up properly :)
In what way am I being ridiculous? Doing the same lookup over and over again is a well established code smell better handled by a local variable.
Misuse by a client doesn't prove that it's not a good platform
I would suggest concrete5. It is under the MIT license, mature, documentation is OK. It is pretty easy to build themes and add-ons. It is not prefect but it gets the job done. 
its due to latest breach https://thehackernews.com/2019/01/php-pear-hacked.html
&gt; In what way am I being ridiculous? right here: &gt; Can you give an example where ??= isn’t a misuse? To go on, your example isnt even related to `??=`, you could substitute any operator in that example and your point would still hold true. And again the example is not a bug, it works as expected.
Someone Posted It Already Two Times In This Sub
I usually see 30ms going up to 5.5 seconds in some VM environments, so yeah, my experience is exactly the same. I always disable xdebug when not analyzing or debugging.
I am curious: who is using PEAR these days, and why? I quickly moved to Composer ages ago. Is there some things that PEAR / PEAR2 does better?
Also, one have to be very careful with Drupal and have a very strict and socially accepted sex life. I wouldn't pass the requirements to be a Drupal user or developer.
&gt; &lt;?= $page-&gt;title() ?&gt; Short tags? But... why? They are disabled by default in PHP.
Let me google it for you: https://www.google.com/search?php+Which+ways+can+I+use+to+restrict+access+to+a+website
&lt;?= is always enabled regardless of the short_open_tag settings
Why stop at Go and limit yourself to copy-pasting `if err != nil` when you could be writing pure, raw, beautiful, organic, hand-crafted binary instead, where the only "constructs" are `0` and `1`? I mean, what could go wrong? 
It's not that you hit a nerve, it's that you sound like you're fine with never improving the language and cleaning up a ton of boilerplate. The name calling and anger you seem to have for people posting their opinions on the internet seems like you might be the guy on a team that everyone rolls their eyes at behind their back.
Really? Huh. I never realized that. TIL. ¯\_(ツ)_/¯ 
Yikes. Woke up to 9 downvotes. 🤷‍♂️
Short tags are `&lt;?`, not `&lt;?=`
In v1.2.0 added more sources to fetch mimetypes (added around 600 more mimes). Now there are php's mimes.
In v1.2.0 security checks no longer disabled;
&lt;3 Sick. Thank you!
My goodness, my code is about to get SO much cleaner. Those lines get so long when you're writing out variables like $master_stats-&gt;commission_totals[$i]['2018'][$user_id]
I thought the latter was included with the former under the moniker of "short tags". I was wrong, it seems. Oh well. We live, we learn, we grow.
 I'm trying to create a good development environment for php but I'm having problems with Xdebug because I use Xampp, can you give me some advice? 
With these examples it looks very handy. But what I mean by heavy data dependent logic is cases like: - Nested layouts responding to nested lists based on their content in a non 1:1 manner; usually this requires temporary lists and other artifacts to be made for optimal data layout (to avoid duplicating too much conditional logic and cycles) - Based on collection of items, construct a layout best fitting these elements (like masonry, but in more general sense) - Child feedback: especially unclear on how to implement with cascading aproach to me, since it is making processing unidirectional (maybe you already have something for this) Most of such cases are one-time per project, possible duplication is hard to abstract away due to heavy customzation. With imperative view construction code and object-like composition of views it is usually trivial to implement (not necessarily to come up with though); but with declarative cascading? Of course this is all coming down to idividual's capabilities - I may not be just fit to use that yet, if will ever be.
Because it's easy, relatively fast and was already a skill many developers possessed. 
A lot of us commonly use those for templated content. E.g &lt;a href="&lt;?=$someVar?&gt;"&gt; &lt;?=$isReddit ? 'Reddit' : 'Something Else'?&gt; &lt;/a&gt; 
Interested to see how this holds up against Statamic 3 once it comes out, I'm making the assumption that Statamic is a lot more feature rich.
I'm getting downvoted like crazy in another thread because I said that I don't use XDebug. Here's the thread: https://www.reddit.com/r/PHP/comments/aisf1o/the_xdebug_experience/eeqfww7 I would ask someone in there, and not me lol
`01101110 01101111 01110100 01101000 01101001 01101110 01100111`
Right. I guess I forget that PHP is still used for templating, after so long using Twig, etc. There certainly is something beautiful about using pure PHP though, isn't there?
Yo estoy teniendo problemas para utilizar correctamente con xampp, podrías decirme algún tutorial o guía para instalarlo correctamente?
\&gt; The problem I encounter with almost any view approach is that inside a view it is not clear what is these "datum" and where they are coming from, what can they contain etc., which in turn requires one to search for usages of said view/template just to find this information out. I'm not seeing any help in this regard from such declarative views. &amp;#x200B; &amp;#x200B; From a practical perspective, this may be a problem if you're maintaining the code. From a Separation of Concerns perspective, this is a good thing: The view should not be concerned with where the data comes from, only that it is given data in the correct structure. &amp;#x200B; The bigger issue (and one I've written about a lot) is that in MVC, the View should have a contract with a Model. The model \*should\* provide an interface that the view uses so it knows what data is available. Someone else can write a model that follows the same interface and provide data from an additional source. &amp;#x200B; Here's my (now rather dated) views on the matter: [https://r.je/views-are-not-templates.html](https://r.je/views-are-not-templates.html)
&gt; I had to support those java apps until they could be rewritten in PHP. Woo... I understand this perspective. Signed, Guy supporting ColdFusion (you read that right) that was never rewritten.
This is confusing me as well. I always thought the logical thing was to check to see if the variable `isset()`. If it is set, then check to see if it is `empty()`. Is this not correct?
Sounds like you could've used a hug from your mom. 15 years ago.
Yes, xdebug should be the answer. you may try https://psysh.org/ as well, but it's probably not exactly what you're looking for.
Xdebug will tell you exactly how to get it installed on your machine. Follow the directions at https://xdebug.org/wizard.php
oh man, ColdFusion was my 1st "professional" language (paid student job at medical center for college). I did enjoy Fusebox framework... I think that's what it was called. 
It was changed with [PHP 5.4](http://php.net/ChangeLog-5.php#5.4.0) &gt;&lt;?= is now always available regardless of the short\_open\_tag setting. Until then it was indeed part short\_open\_tag setting
Ah! So I wasn't necessarily _wrong_, I was just out of date. Good to know. :-) 
Do you use PhpStorm? If so, have you tried following [their guide to getting it set up?](https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html). xdebug always has some performance issues (and it's downright horrible if you're trying to generate a coverage report), but if you follow the setup in that guide it has you set xdebug to only enable when told to, not for every request. There's various ways to enable it on each request through the browser, but xdebug shines best (imo) when you have Unit Tests in PhpStorm and you hit your debug breakpoints through that. And when you use it that way, PhpStorm will automatically enable xdebug when you run something in debug mode.
I can't really share as this is quite specific to our project and docker conf but there's many tutorials on the net and even the PhpStorm doc. It's confusing at first but ultimately not that hard!
&gt; I'm sure somebody familiar could show me how to make use of it I'm not up for writing a guide on it, but if you wanna give it another go I'm happy to walk you through any problems you have as you encounter them
This. Plus stuff like projecteuler.net to practice.
Does this affect people that installed/upgraded pear via the command line? Or just those that downloaded it from the website? 
True story. When I found KirbyCMS in the early 2010s (maybe 2011 or 2012) I instantly fell in love with it and proceeded to build numerous client sites using it, showing how all they had to do was edit text files to change their website. I bought 10 licenses for myself and my corporation and 40+ for clients. And I promoted it everywhere I could, for free, for several years. Just because I wanted Bastian to succeed. Then, in early 2016, I made [www.onlytrump.us](https://web.archive.org/web/20160805202128/https://www.onlytrump.us/) and www.standwithsanders.us, in order to let people semi-publicly expess their firm support for both candidates, to give them heads up in the primaries. The idea was that if you were ONLY going to vote for either candidate and NOT who won the Democrat or Republican primary, then put your name and face out there (via FB profile via FB auth). I asked one simple question to him, telling him what the site was, and received this email: On 3/8/2016 7:42 AM, Kirby wrote: &gt; &gt; Please remove "Made with Kirby" and any other form of connection to &gt; Kirby from this site immediately. We don't want to be related to such &gt; a project in any way. I also will not provide further support for a &gt; personal license and a project I find highly disturbing politically. &gt; &gt; Bastian, &gt; Kirby I responded with: &gt; ok done. &gt; I'm removing it from the pro-Bernie Sanders site, too. https://imgur.com/SQfaDN3 I had had taciturn approval from the Trump campaign who contacted me once it had 50,000+ signups in the first week, and a young woman who answered the phone at Sanders' campaign said the site I made for them was fine (it never took off, sadly). I ended up rewriting all but one site into using other tech after this incident, and he did, promptly, refund me $100 for the sanders and trump pro licenses I had bought. He told me he wanted nothing to do with me either professionally or personally, so I had to stop supporting his project. I just don't get it. Especially since neither person were real radicals and the person he destroyed our commercial relationship over is now the President of the United States.
When I found KirbyCMS in the early 2010s (maybe 2011 or 2012) I instantly fell in love with it and proceeded to build numerous client sites using it, showing how all they had to do was edit text files to change their website. I bought 10 licenses for myself and my corporation and 40+ for clients. And I promoted it everywhere I could, for free, for several years. Just because I wanted Bastian to succeed. Then, in early 2016, I made [www.onlytrump.us](https://web.archive.org/web/20160805202128/https://www.onlytrump.us/) and www.standwithsanders.us, in order to let people semi-publicly express their firm support for both candidates, to give them heads up in the primaries. The idea was that if you were ONLY going to vote for either candidate and NOT who won the Democrat or Republican primary, then put your name and face out there (via FB profile via FB auth). I asked one simple question to him, telling him what the site was, and received this email: On 3/8/2016 7:42 AM, Kirby wrote: &gt; &gt; Please remove "Made with Kirby" and any other form of connection to &gt; Kirby from this site immediately. We don't want to be related to such &gt; a project in any way. I also will not provide further support for a &gt; personal license and a project I find highly disturbing politically. &gt; &gt; Bastian, &gt; Kirby I responded with: &gt; ok done. &gt; I'm removing it from the pro-Bernie Sanders site, too. https://imgur.com/SQfaDN3 
\&gt; How should I test my website? For acceptance testing, I've had success with Behat. [http://behat.org/en/latest/](http://behat.org/en/latest/) \&gt; go-to tests? None. Try to tests as much as possible. \&gt; when to add tests? As early as possible. \&gt; Examples. Sylius has a crapton of Behat tests. [https://docs.sylius.com/en/1.3/contributing/code/bdd.html](https://docs.sylius.com/en/1.3/contributing/code/bdd.html) Here is one module example: [https://github.com/Sylius/InvoicingPlugin/tree/master/tests/Behat](https://github.com/Sylius/InvoicingPlugin/tree/master/tests/Behat) &amp;#x200B; Good luck. Behat can be tricky to setup, but once it's running, it goes fairly smooth. &amp;#x200B;
It's called integrative tests. If you can point me to an open sourced project of yours, I'll be more than happy to create at least one integrative PHPUnit test for you. The only thing it needs are a URL that posts and a URL that gets information.
There are not default or always go tests, your test should be according to the acceptance criteria, if you are going to use TDD as development methodology you need to check if you have well defined your goals. Answering your second question, every time you have a new feature or your requirements change. If you have a login screen you must have a test for all the scenarios: * Succesful login * Failed login * Reached the maximum attempts * No existing user First you start to coding all this tests and then continue with the functional code that is going to meet the test requirements
&gt;integrative Do you mean integration?
Null coalescing operator (??) is documented here http://php.net/manual/en/migration70.new-features.php both ?? and ??= perform an `isset()` 
Your core business functionality is a good place to start. Let's say you are a shop that sells one type of T-Shirt. Break that system down to things that are important to the business and are testable. 1. I can view the shop - HTTP 200 from a URL and /or product data appears 2. I can add a T-Shirt to my basket 3. I can make a payment 4. If a payment is successful, an order is generated (with the correct amount) Those 4 things will keep the lights of my T-Shirt business on. If I make a change in my code, I would LOVE to know those 4 things still work. That's why I would test those first. They might be a unit test, or an end to end "functional" test that hits a URL and scrapes the page for the products, but I want to know that the core of my business still works when I make changes.
I've never used ColdFusion, but I know of Fusebox. Apparently, someone ported it to PHP and a company I worked for years ago used it.
Happy to help, but "having issues" is not descriptive enough for us to do something with. If can share what the problems are that you're encountering, that could help.
Zing! Rampant and acceptable discrimination through forced diversity is what makes up the "values" shoved down the community's throat. Those who dissent dare to speak their minds. Come for the software, leave for the community.
Whelp that’s it. PHP is over. Time to pack up and head home everyone.
The answers by /u/mirdrack are on point. I'm a big fan of the outside in testing methodology, which is where you start at something like an end to end test. For symfony, laravel, cake, this means making a request to your application in your test, and asserting on the response and maybe checking database state, etc. [Growing Object Oriented Software Guided by Tests](https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627) was a huge help to me in understanding this. If videos are more your thing, Adam Wathan's [Test Driven Laravel](https://testdrivenlaravel.com) is a great resource. Sure, it's Larael specific, but the principles apply elsewhere. This course is very obviously inspired by the book I mentioned.
This.
It's not better but we still have to support legacy versions of our apps that use some old shit that's not available on composer.
I fixed it :)
Fair enough. Although I guess that it gets more and more difficult to actually find that old shit as time goes by. :)
The only time I did recently was for installing the Mosquitto-PHP extension, but I'm always using the pear package that comes from the official distro repositories.
I tried to use it for years ( since php 5.2.4 ), and have always went back to a var_dump approach 98% of the time... I only use or for performance enhancements... The whole restart your server all the time, recursion limit, performance degradation ( not always linear ), killing my SSDs (kachegrind files) and limited/iffy integration in all IDEs I tried over the years is the main cause. If you want to try converting me, give me a pm. Maybe something didn't click on my head, but for any big project/call stack, I could not use it. 
Are you okay?
I downloaded ```php_xdebug-2.7.0beta1-7.3-vc15-nts-x86_64.dll``` and my PHP version is 7.3.1 Then I put the xdebug.dll file in ```C:\xampp\php\ext``` and changed the php.ini file to include ```[XDebug] zend_extension = C:\xampp\php\ext\php_xdebug-2.7.0beta1-7.3-vc15-nts-x86_64.dll```. I ran the detailed install test and got [this](https://gyazo.com/3372a39e5876624d17df071701b304ec)
pecl install xdebug very complicated
yeah, as I said 
I had an exec who claimed he would do everyone's job but he "didn't have time". He knew just barely enough Python to believe he could program.
`??` is the best thing to happen to PHP in years. Change my mind.
`$someArray['key'] ??= 'someValue';` so this is saying set $someArray['key'] to 'someValue' only if it's null ? 
I found it in a SO reply. Fireing lots of seperate queries via PHP was outperformed by fireing the same statements in a single query using subqueries in mysql. But I see your point in your other reply. I was of the impression the difference would be far bigger than it is
I was using pear recently to install sql server PDO driver. With PEAR it was like a one cmd line process instead of downloading from microsoft.
Nah, you go, we'll be fine.
After a cursory 10 minute glance (sorry!)... You will probably get a few posts saying "why did you create a Microservice"... The best way to learn a language is to get to grips with how it's put together in my opinion. Hopefully this is constructive feedback... * First thing, take a look at [PSR Standards](https://www.php-fig.org/) \- namely PSR1/2 for coding standards. If you use PHPStorm you can set rules for auto-indentation etc. * Look into [namespaces](http://php.net/manual/en/language.namespaces.basics.php) \- it will help you with the next point... * Another PSR Standard (PSR-4) autoloading - Let [Composer](https://getcomposer.org/) take control of it. Not only can you autoload, but you can make creating new projects easier once you can create it via Composer. * Note, I see composer.json file in /system/libraries? * Comment your code! Seriously, it may seem monotonous, but it makes everyone else's (and yours) lives easier down the line. * Look into [Dependency Injection](https://en.wikipedia.org/wiki/Dependency_injection) \- Rather than use global variables within models etc. variables can be passed into the class. e.g. a construct function in Database class that injects the ip, user, pass etc. This makes it easier to test as well as swap between servers down the line * die function calls? Look into [Exceptions](http://php.net/manual/en/language.exceptions.php) * Config folder... Perhaps have a config\_data.example.php in source control. add the actual config file used to the gitignore so it doesn't go in source control. Passwords etc. shouldn't end up in source control * I do see a config.php (root dir) added to gitignore? Havn't delved enough to check if the config\_data is an example file that's copied there? * Look into [ORM](https://en.wikipedia.org/wiki/Object-relational_mapping) \- You will (hopefully) never write SQL again, making it agnostic to what type of DB you have &amp;#x200B; There's a few things like performance gains which I won't mention for now (e.g. if (false === something rather than if (!something)). &amp;#x200B; Hope the above pointers help!
If you want honest feedback, short answer is: don't waste time. I know it is fun to make own FW, I did the very same mistake but in the long run, you will waste time on something that no one will use, not even you. And by quick look at code, you are not using composer and private/protected/public properties but PHP4 syntax: var. I don't know if that even works anymore in PHP7. &amp;#x200B; Most people think that light frameworks have advantages but it is the opposite. The more advanced FW, the more advanced things you can build in less code. Less code=less places to make an error. Try Symfony, just for a week, and you will better understand my point. Not only it will force you to learn PHP better but also to write clean code, design patterns... Doctrine is the best ORM around and supports identity-map pattern, essential thing in any application. And it is really fast. Really, really fast and because of static container (google it), speed will not decrease with size of project. &amp;#x200B;
Quick! Someone hack NPM so they cannot take more PHP marketshare \[Cries in PHP\]
&gt; in past 6 months lol. I can't stop laughing. Is that bad?
&gt; I moved to Composer ages ago. Did you install it with a `wget` of a `http` URL piped direct to `bash` with no validation? I was disappointed to go there recently and see they've removed that suggested install method.
Yes, pretty long time to go unnoticed. 
I mean, is it bad that I can't stop laughing? ;-)
This is literally deja vu - same post, same post. What about PHP extensions? Those aren’t getting installed by composer.
I had to use PEAR for something a little while back. I don’t remember exactly which extension, maybe imap? It didn’t work on PHP 7.1/7.2, whatever was the latest version at the time. 
Doing isset + empty is redundant: &gt; empty() is essentially the concise equivalent to !isset($var) || $var == false.
PHP extensions are simply installed by means of the package manager of my distribution. I haven't come across any extensions that is not in the package repository (Void Linux).
Not really, no :) You can download [https://getcomposer.org/installer](https://getcomposer.org/installer) and then validate and install manually. [https://getcomposer.org/download/](https://getcomposer.org/download/) &amp;#x200B; Alternatively, you can grab the latest release from [https://github.com/composer/composer/releases](https://github.com/composer/composer/releases)
Now I'm legitimately curious. Will empty not return a notice for an undefined variable if it is used in such a circumstance?
Pretty standard setup for me. PHP 7.2, FPM, Apache, and Linux is my work station.
I love it, use it all the time now
Yeah PHP 7.x has done wonders for increasing the size of our company's coding standards / guide-line.
You're thinking of PECL. PEAR only contains libraries written in PHP which the Sql Server Driver is not.
You can install PHP extensions using PECL which was not compromised. The two are not the same. You can't even install extensions with PEAR since it only contains packages written in PHP itself.
Yeah noticed recently they've updated everything. I did it a couple of times but always cringed so hard at that piped bash.
Yes, we use docker in production. And we keep our databases in docker containers. 1 db - 1 container.
The official way to install PHP extensions is through [PECL](https://pecl.php.net/), which is totally unrelated to and unaffected by this compromise. PEAR is for packages containing PHP scripts.
Yep. We use composer to manage two containers: an nginx+PHP one, and a MySQL one. 
You need to decide what to use it for. Is it better than other FWs?
Another operator I will ignore because simple is easier. 
If you wanted to export the DB into an .sql, would that be as simple as if your DB was set up in a traditional way? Also, is there a risk that if server crashes etc, DB in container could get corrupted and unrecoverable or your lose data? I have this maybe irrational fear of setting up DB using docker sonc e it has to preserve the constant changes.
I'm always pleasantly surprised when I find out my clients have patched 5.4 all the way up. You're just living in the future, man.
Yes. One of my customers used mysql on docker for about 1 year. It was ok, but we changed it later to Azure MySQL SAAS because internship process
Anyone know where I can find the checksum matching my (or any) version of PEAR? I have PEAR on most of my computers, and I'm pretty sure we have it installed on almost if not all of our computers at work, and heck, probably even on the servers. Also, does anyone know whether the "apt-get" `php-pear` packages are affected? Or only the ones downloaded via the website? I _thiinkk_ I installed pear via apt-get on most of my machines, but I'm not certain :c
Did you try October cms? It's designed by Laravel.
Github
I always use a managed service for persistent data like databases because of backups. 
I use docker in production. We've tried experimenting with databases running in containers, but decided it'd just be easier to have fully dedicated DB servers without the docker in between them.
run it through virustotal.com it will show if infected!
Yes, in container in production four years running. MySQL/Maria and Postgres. 
Nice work on trying this out, you learn a lot trying stuff like this. require_once(MODEL."user/userModel.php"); I would start looking into namespaces and auto loaders using composer. loginController Session Your naming conventions don't seem normalized to me, is it PascalCase for your high level objects or not? $user["first_name"] If you have gone to all this work to have classes and objects and OOP whatever it seems like a loss to still have things be associative arrays. infoController{ $data = array(); $data["title"] = "Welcome"; It looks like you understand classes are a good idea but you don't really use them at all? /** @var array */ public $Data What i mean by this is you often don't use class property variables as seen above, you declare everything locally not even attached to the associated class. `password` = SHA1(CONCAT(salt, SHA1(CONCAT(salt, SHA1(:pass))))) Holy shit, don't do this stuff yourself you have helper functions in php to do these things for you and you just store the hashed and salted password: $hashedPassword = password_hash($password, PASSWORD_DEFAULT); 
I’m a big fan of [ProcessWire](https://processwire.com). Fast, free and flexible with a powerful and easy API. It focuses on custom templates with custom fields out of the box. The community is active and it has been growing and supported consistently for several years now. 
I haven’t used PEAR in like 5-10 years. Is it still used regularly or just for for legacy systems?
My first guess would be client friend content management. That’s usually the big reason I come across with my teams. 
You would probably want to mount a volume to your DB container and have MySQL use that for storage. This way containers can come and go, but the data can be it’s own thing.
[You can learn more about the infection here](https://www.youtube.com/watch?v=_88RnoYS8As)
K8S user here - DB is separate. The application containers run only their own services. One FPM, one nginx, one work queue backend, etc (ok, more than one of each, but that’s just scaling) If you ever have a single Docker image with PHP and MySQL both running in it, you’re doing something very wrong. Split them up and learn how docker-compose works (or some other tool that achieves the same goals) I have also deployed Dockerized databases, but only on personal projects because it cost me nothing extra. Dealing with stateful stuff is just annoying enough that I’m happy to pay someone else to do it when work is paying for servers. I have neither enough time nor a big enough team to act as a DBA, so managed services pay off quickly. 
It's cause function calls are slower then direct accessing that property.
Yes. Damn autocomplete.
When there are millions of wage-slave Indians churning out barely runable Ruby code, get back to me on the grave potential of misuses.
I travel the world fixing damaged projects on the verge of collapse. It's usually not my prerogative or even within my ability to influence the hiring decisions of the corporations who end up hiring me to save their projects. I consider what I do to be "reverse outsourcing". They hire the foreigners, the foreigners churn out shit, the project starts to fail, and then they pay me $200/hour to fix their mess.
6e 6f 74 68 69 6e 67
Biggest one I fixed was: if (!($a &lt;=&gt; $b)) { } Finding PHP 7.0 projects that have been placed in the hands of outsourcers is still Really Rare but I have been seeing it more and more.
He said change his mind, not enforce it :(
I'm porting a project over to Symfony framework and changing some reporting commands to use my new Doctrine-based ORM model, instead of straight PDO queries. I have a relatively complex set of relationships. I am performing a DQL query for an entity that has I think 5 relationships on it. All relationships are set to "EXTRA\_LAZY." I tossed in some debug code and verified that the actual SQL that gets generated and executed isn't joining any of those tables, and I'm not calling getters on any of those relationship fields that would cause it to perform additional queries for related objects. Still, doing a DQL query using object hydration takes FOREVER. The query returns almost immediately, but it spends 20 seconds hydrating 50 objects. If I change my hydration to array hydration, it returns immediately. I'm new to Doctrine so I feel like I must be missing something.
Why do you say that? So LAMP stack docker is wrong?
Putting the entire stack in one container is generally considered wrong. Break things down into smaller, purpose-built images. It makes logging, debugging, and scaling way easier. No fiddling with stupid supervisord-esque bootstrap tools to make sure everything is running in one giant image. No intermixed log messages. Way easier to use off-the-shelf images for many things. My rule of thumb: the only thing a Dockerfile should have to deal with is my application code, and any build dependencies it has. My nginx image is basically `FROM nginx:1.14-alpine COPY public/ .` My FPM image is similarly simple. Other services at work written in other languages, same deal. I run completely-uncustomized images for other services, such as gearmand, memcached, redis, mysql, and postgres (though the dbs are local only). I then have a docker-compose file that links up services for local dev work, and similar k8s manifests for production. Official guidelines: https://docs.docker.com/develop/develop-images/dockerfile_best-practices/ Good overview on SO: https://devops.stackexchange.com/a/451
Ummm OAuth 2?
For work, absolutely not. I’m fortunate enough to run tech for a division of my company that moves *significant* traffic. We use Aurora exclusively and have never once run a DB in a container in prod, and have no plans to. For my side project where I’m budget conscious on hosting and I’m not going to pay for dedicated RDS instances, for sure, I run MySQL in containers all the time and it works just nicely. Percona has documented that there is effectively no performance penalty for doing so even at scale. 
php-pear is present on all my Ubuntu (18.04) systems. I just install PHP through apt get. However, from what I've gathered, it seems only the package downloaded directly from their site was affected. Still may be good to check however
Here are the hashes for the last 1.5 years. If you got your Phar within the last 6 months and your hashes do match one of these, your Phar is likely tainted. | Filename | Date | Commit | MD5 | SHA-1 | - | - | - | - | - | `go-pear.phar` | 2017-06-27 | [`8dfd7ddd72`](https://github.com/pear/pearweb_phars/blob/8dfd7ddd72/go-pear.phar) | `6d06e715411cfb42ab212b0d3dfe0b36` | `47641a0ec036fb57e799ab4c20731e41fd88f8c0` | `go-pear.phar` | 2018-12-05 | [`90d6d40a17`](https://github.com/pear/pearweb_phars/blob/90d6d40a17/go-pear.phar) | `9b64f155bc7d2c309812ececcdd854b2` | `e14b6f6a06c5b769d00982e7cdd7a77b8128572f` | `go-pear.phar` | 2018-12-20 | [`d9de1f192e`](https://github.com/pear/pearweb_phars/blob/d9de1f192e/go-pear.phar) | `95ef294f47d21d8c27af75a34f055f16` | `324b6a5e2d97d2ac11a01660450baf26dd604fbd` | `install-pear-nozlib.phar` | 2017-06-27 | [`8dfd7ddd72`](https://github.com/pear/pearweb_phars/blob/8dfd7ddd72/install-pear-nozlib.phar) | `746dc5b681063e792152730770b36d21` | `f64f0dbb1b9d70bf068adc4f9b9310e0499cfd7a` | `install-pear-nozlib.phar` | 2018-12-05 | [`90d6d40a17`](https://github.com/pear/pearweb_phars/blob/90d6d40a17/install-pear-nozlib.phar) | `05ef6016b53271ab7c570d74866da392` | `bde8b624fe4fc1b5822b06a26a86ea71283cb878` | `install-pear-nozlib.phar` | 2018-12-20 | [`d9de1f192e`](https://github.com/pear/pearweb_phars/blob/d9de1f192e/install-pear-nozlib.phar) | `5b6d8559a132af409c5c9a299177a0c3` | `221fa95ecfa52dfa16ebdee2cc05611c4f406cc2` Unfortunately, the Internet Archive did not capture either Phar (history for [go-pear.phar](https://web.archive.org/web/*/pear.php.net/go-pear.phar), [install-pear-nozlib.phar](https://web.archive.org/web/*/pear.php.net/install-pear-nozlib.phar)) within the last 6 months but before December 5 (when the tainted file was replaced), so the info on what the tainted file looks like is likely not public information.
yes but a framework not a service
How many queries do you see being run in the symfony profiler? Changes are your reporting queries would be better off using PDO to select from a view. Doctrine wasn't really meant for reporting.
OAuth 2 is a specification that allows you access to the resources you’re after. Just implement the spec in literally any framework and you’re good. Laravel, Slim, Symphony, hell there’s a pure PSR driven implementation http://oauth2-client.thephpleague.com/ 
In my experience, yes. I have endpoints that (necessarily) serve hundreds to thousands of entities, and a *large* portion of the total request time is doctrine hydration. The total query time for everything along the way is under 20ms but the request still takes a second or two, and multiple profilers have confirmed it’s doctrine internals. No N+1 problems or stuff like that. I even got to the point of trying to bypass the hot paths (helped, but not enough to justify the maintenance), but realistically my only options are removing doctrine or switching to a different language entirely. Which I’ll likely end up doing, at least for the read API. Other things I noticed: if I stripped type information, especially on getters, it made a surprising difference. And generally speaking, JSON rendering gets expensive. 
You should consider implementing an error handler stack using set_exception_handler. This is sorta pseudo-code and a quick sketch to give you an idea of what I mean: ``` class ApexException extends \Exception { public function __construct($message) { $this-&gt;message = $message; } // report the error however is appropriate public function report() { apex::log('error occured: ' . $this-&gt;message); } // render the error to the browser however is appropriate public function render() { echo "some error happened: " . $this-&gt;message; } } class QueryError extends ApexException { } ``` If you need to throw an error anywhere, you can just: ``` throw new QueryError($sqlThatFailed); ``` Then in your boot section, you can: ``` set_exception_handler('handleExceptions'); handleExceptions(Exception $e) { if($e instanceOf ApexException) { $e-&gt;report(); //i'm making up the method isProduction() but consider something like that if(registry::isProduction()) { // render the generic 500 error page. } else { // render the error however you want $e-&gt;render(); } } } ``` This sort of method will make it easy to render errors in the local debug environment, but simply log the error a production environment. 
No, because I did exactly the same. Today in this world, it's uncommon to spread software and not beware of the evil outside world. If you can't deal with that you are naive or retarded. So I'm guessing pear people are naive (I hope)
It's always good to challenge yourself. But with stuff like this, you probably get "bruned" by others, and as long as you can handle the critique, you're good :-) You can learn the most from others, so look at their comments. Also look at other modern frameworks to see how they did stuf. Don't give up learning !!!!
You're most likely looking for a CMS.
Only use PECL, never used PEAR, so I confuse them. Is PECL ok?
It will not! It can do that because it's not a normal function but a special language construct.
Use the Symfony Profiler. It will be super easy to see what's happening during these 20 seconds. There's no way it should take more than 1 second to hydrate 50 items. Just be careful that these 50 items don't have N+1 nested stuff. You getter might get called when the JSON is generated and that could trigger super slow sub queries. No matter if you used EXTRA\_LAZY or not. Remember that EXTRA\_LAZY is only ever useful if you do a count field.
If you want to fetch those relationships, EXTRA LAZY is not the way to go, because as /u/Thommasc said, it will perform other queries to fetch those relationships once they are actually called. &amp;#x200B; If you're returning this as a body and will always use it, then eager might be the right approach instead. Or you could always use a repository to populate this using optimized DQL or straight up SQL.
This is exactly how I made this xdd, the encryption and some security stuff are taken from other projects
What's the benefit of doing all this work and setting it up? I'm struggling to understand what's the point when it comes to smaller apps, like a simple Laravel app with one mysql db.
\&gt;First thing, take a look at [PSR Standards](https://www.php-fig.org/) \- namely PSR1/2 for coding standards. If you use PHPStorm you can set rules for auto-indentation etc. \&gt;Look into [namespaces](http://php.net/manual/en/language.namespaces.basics.php) \- it will help you with the next point. I will, I already knew that exist, anyhow, I just require the import files and then execute a MVC structure, but I will check the PSR standars \&gt; Note, I see composer.json file in /system/libraries? Yes... I guess should be because of the gitignore I omit the libraries of composer ahha, I will fix it \&gt; Comment your code! Seriously, it may seem monotonous, but it makes everyone else's (and yours) lives easier down the line. Yes... personally I prefer the clean/shelf explained code so you don't need comments and write in the documentation all needed. \&gt; Look into [Dependency Injection](https://en.wikipedia.org/wiki/Dependency_injection) \- Rather than use global variables within models etc. variables can be passed into the class. e.g. a construct function in Database class that injects the ip, user, pass etc. This makes it easier to test as well as swap between servers down the line Laravel uses global variables for example \&gt; Config folder... Perhaps have a config\_data.example.php in source control. add the actual config file used to the gitignore so it doesn't go in source control. Passwords etc. shouldn't end up in source control Nice! I will haha \&gt;Look into [ORM](https://en.wikipedia.org/wiki/Object-relational_mapping) \- You will (hopefully) never write SQL again, making it agnostic to what type of DB you have I prefer to have control in SQL 🤷‍♀️ also it's a micro framework, so should be the most light possible Thanks for you feedback!
**Dependency injection** In software engineering, dependency injection is a technique whereby one object (or static method) supplies the dependencies of another object. A dependency is an object that can be used (a service). An injection is the passing of a dependency to a dependent object (a client) that would use it. The service is made part of the client's state. *** **Object-relational mapping** Object-relational mapping (ORM, O/RM, and O/R mapping tool) in computer science is a programming technique for converting data between incompatible type systems using object-oriented programming languages. This creates, in effect, a "virtual object database" that can be used from within the programming language. There are both free and commercial packages available that perform object-relational mapping, although some programmers opt to construct their own ORM tools. In object-oriented programming, data-management tasks act on objects that are almost always non-scalar values. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
October.
Thanks for the explanation. How about small projects . I think the overhead of managing multiple containers will be a lot of work 
Can you paste your DQL and all the SQL queries that are being executed? From my experience, hydration is very fast in Doctrine. Unless there is complex set of joins, you can easily hydrate thousands of records per second.
I can't imagine what sort of fucked up spaghetti shit you are debugging that you'd need breakpoints to see how your code behaves in comparison to ```var_dump()``` . This is PHP we're talking about here, not a freaking compiled language. I've tried XDebug many times over the years, and it has been mostly helpful when I've been given a project that I didn't write and it allowed me to figure what's what in that project relatively easy. But if I know the project? I don't know man, I'm either as fast with var_dump or faster than working with breakpoints. Suppose if majority of programmers here are freelancers and they jump from project to project all the time, XDebug sort of makes sense. But once you work on a long-term project like I have (for the past 4 years) I know perfectly well where to hit a dump to solve the problem at hand and move on. I wouldn't say I am not debugging, like you claim. Some bugs on the other hand are so weird that you need a logging system and I don't see how Xdebug or var_dump in that matter can help you out. 
You could also put more cpu into your system
What was the issue with the bash pipe?
If anyone here can tell us about their experience with docker in production that would be awesome. I'm very interested in knowing how people use this kind of technology for production.
OK. So there are two ways to get your code into the container. Add it at build time, or as a volume. Adding it as a volume is what you want. It's basically like a symlink from your local machine to the docker container. 
Without review in the middle you're blindly executing stuff. Without TLS it could be MiTM, while then without some kind of hash or checksum verification you could be running something compromised/modified. 
There is another topic I started last night, there are some production questions and answers: https://www.reddit.com/r/PHP/comments/aj5wwr/do_you_use_docker_in_production_if_so_how_do_you/
Laravel has both
So DB should always be as "volume" i presume, as in image you wouldn't be able to save all the changes? When It comes to PHP app, would you add it as volume on your local but then build and deploy an image on the server?
Ad 1. create image once, on local machine start it with `--volume` argument (eg `docker run --rm -it -v "$PWD:/some/src/on/docker" your_image`. This will bind your local directory to `/some/src/on/docker` (it should point to the directory where you store app files). Every change will be reflected in the container. Having that you'll need to build image only for deployment. Ad 2. this question is more general - Docker (or other virtualization tools like eg. Vagrant) allow to create an isolated environment only for your application. This becomes handy especially in a situation where you have multiple applications, where each of them requires a different version of PHP. Ad 3. it unifies your dev environment. Thanks to Docker you will be sure that every team member runs the application on the same env. You don't need to make changes inside Docker container (you should use `volume`). You don't need to push an image after every change, in fact, this should be handled by the Continous Deployment pipeline. Your team can recreate docker image using `Dockerfile` which should be stored somewhere in the applications repository. TL;DR 1. Docker allows unifying applications environment (both locally for development, as on staging/production) 1. Keep `Dockerfile` in the repository - this way every team member can create the image on a local host 1. Use `--volume` to bind local directory to the container - this way you can change the code locally, the changes will be reflected on a container 1. You probably should get familiar with `docker-compose` it helps a lot. 1. You can use Continous Delivery pipeline to build images automatically if that's not possible, build them only when ready to push to staging/production Hope this helps
In a container will run only one service (MySQL, PHP, Nginx, etc) . In a Dockerfile you describe the build prozess of a service (eg apt-get install php7.2-fpm). Some Dockerfile are ready to use from docker-hub. Your laravel-project will be sync from your host system in to the docker vm. You can use docker-compose to config it. To learn how to configurate a Docker-Project, you should see how other programmer configurate the project. I use this [Github-Repository](https://github.com/thhan/Docker-Builder) to start my project and if something is missing I'll edit this project. &amp;#x200B; If someone commit a change in your project you need only to pull this commit from the repository. The build-prozess muss only trigger if someone change something in the Dokerfiles. &amp;#x200B; I hope my answer is a little bit helpful.
You need add: build: context: ./ Docker files is files in your folder. When you change files and when docker working, you change files in docker. For teamwork you need use git and docker. Git - version control system. Docker provides the ability to package and run an application in a loosely isolated environment called a container. The isolation and security allow you to run many containers simultaneously on a given host.
I would suggest a simple CMS with authentication, HTML templated and server rendered frontend, and a RSS feed. This way you get grips with how data is handled (e.g. blog posts, users, etc.), how authentication works, and how to display data in various spots in various formats. Add commenting and guest accounts for spice.
1) Use volumes, it enables you to map local files inside a directory in your container while developing. 2) There's plenty of advantages, the biggest in my opinion is you can mimic your production environment locally and package your provisioning with the actual app as one self-contained unit. 3) I don't think docker plays a big role in your team's commit structure and workflow. It's the same as if you used xxamp. If someone modifies the Dockerfile, compose file or any config file for docker, then you would have to down your container and re-up it with --build option to get the latest provisioning. &amp;#x200B;
&gt;Other things I noticed: if I stripped type information, especially on getters Can you elaborate on this? Is this about typehints? Few months ago I created [RFC](https://externals.io/message/102831) that could allow disabling typehint checks if programmers wants to. Unfortunately, thread quickly went aside but I think it should be revisited. My **unrealistic** test made almost 30% difference. How much performance gain did you get by removing typehints?
In general, it's not a good idea to keep stateful containers (having VOLUME) on production. From my experience, Docker filesystem may not be stable enough to guarantee that the data will be safe. For staging envs we kept databases in containers, yet on the production database was always a separate instance. Same with files (uploads, etc) which we kept on S3.
PHP-FPM with different versions on different ports (e.g. 7.1 on 9071, 7.2 on 9072), then route to correct backends in Nginx/Apache. For CLI you can invoke `php7.2` instead of `php` to use a specific version. To install versions I use deb.sury.org PPA. To change default PHP version use $ sudo update-alternatives --set php /usr/bin/php7.2 There are some version managers for PHP but I have not seen the need for those with PHP as I am quite intimate with the PHP installation and configuration procedures. I use version managers with Python and Node though. Also check out Vagrant and Docker if you wish to create separate runtime environments inside virtual machines or containers. Steep learning curve but definitely worth it.
For small websites: I create a postgres/mysql service container in docker-compose with a data volume to keep the database data between container reboots. &amp;#x200B; For large/more critical websites: I create a postgres/mysql service container in docker-compose to help local development. In production, the app connects to a database service like on Amazon. &amp;#x200B;
Here's my docker-compose.yml `docker-webserver-app:` `image: nginx:alpine` `volumes:` `- .:/var/www/app` `- ./nginx.conf:/etc/nginx/conf.d/default.conf` `ports:` `- "80:80"` `environment:` `- APPLICATION_ENV=local` `links:` `- docker-php-fpm-app` `docker-php-fpm-app:` `image: devilbox/php-fpm:7.2-mods` `volumes:` `- .:/var/www/app` `- ./nginx.conf:/etc/nginx/conf.d/default.conf` `environment:` `- APPLICATION_ENV=local` `links:` `- db` `db:` `image: mysql:5.7` `volumes:` `- ./opt/mysql_data:/var/lib/mysql` `- ./mysql-init:/docker-entrypoint-initdb.d` `environment:` `MYSQL_ROOT_PASSWORD: password` `MYSQL_DATABASE: dbname` `MYSQL_USER: dbuser` `MYSQL_PASSWORD: password` `ports:` `- "9906:3306"` &amp;#x200B; So this brings together nginx php-fpm and mysql in a neat little box for you. You'll need the nginx.conf as normal The mysql-init folder has a mysql dump in it. That will run ONLY if your volume doesn't already exist, you won't lose data when you docker-compose down/up. Note my db usernames and passwords are in the yaml. That's because I'm lazy and this doesn't get put into source control.
So pcov is a driver that can be used _just_ for coverage without debugging tooling overhead?
If you indent your code with 4 spaces it will preserve white-space, which is quite important for YAML: docker-webserver-app: image: nginx:alpine volumes: - .:/var/www/app - ./nginx.conf:/etc/nginx/conf.d/default.conf ports: - "80:80" environment: - APPLICATION_ENV=local links: - docker-php-fpm-app docker-php-fpm-app: image: devilbox/php-fpm:7.2-mods volumes: - .:/var/www/app - ./nginx.conf:/etc/nginx/conf.d/default.conf environment: - APPLICATION_ENV=local links: - db db: image: mysql:5.7 volumes: - ./opt/mysql_data:/var/lib/mysql - ./mysql-init:/docker-entrypoint-initdb.d environment: MYSQL_ROOT_PASSWORD: password MYSQL_DATABASE: dbname MYSQL_USER: dbuser MYSQL_PASSWORD: password ports: - "9906:3306" 
What happens when I have `getFoo()` and `setFoo()`? Having `foo()` and `setFoo()` seems confusing to me. All in for dropping unnecessary `Interface`, `Exception`, and so on though. I try to name my interfaces as _behaviors_ instead of objects. So instead of `Vehicle` interface I have a few separate interfaces `HasWheels`, `Drivable`, `ConsumesGasoline`, etc. Then I can compose larger interfaces that can be objects with behaviors, e.g. `interface Vehicle implements HasWheels, Drivable, ConsumesGasoline { ... }`.
Also: hydration is generally a slow process. See https://ocramius.github.io/blog/doctrine-orm-optimization-hydration/
Ok, so I may or may not have installed PEAR on my ArchLinux dev machine before Dec 5. Let's assume that I have. What do I need to do? Just get a new version of PEAR or delete it? Do I need to nuke my machine?
No it seems it doesnt: https://twitter.com/pear/status/1088155252644372482 &gt; 1/5 What we know: the tainted go-pear.phar file was reported to us on 1/18 by the Paranoids FIRE Team. The last release of this file was done 12/20, so the taint occurred after that. The taint was verified by us on 1/19. Also: https://twitter.com/pear/status/1088155645965189122 &gt; 5/5 What we know: We cast a wide net by asking everyone to be concerned if they'd used the go-pear.phar file in the past six months. The server restoral is ongoing, by limited staff with timezone differences between the parties involved.
I mean I don't care if you use it or not ;) But are we talking about the debugging / breaking points or the profiling ? Anyway Xdebug integration in PhpStorm is quite good, as their documentation of it.
The size of the project doesn't matter. K8S (or any other equivalent orchestrator) needs to know if the container are healthy, i.e. if the processes are running fine, and shut them down at will. Putting a daemon like supervisord in the middle hides all that from K8S: if a process crashes he needs to know that! Also, logging: best practice is to log on stdout/stderr for easier aggregation, if you have multiple processes logging to the same container output it will become a mess pretty fast.
Is https://pear.php.net throwing a bad certificate for others as well?
If you keep everything separate, it's easier to make changes and updates without affecting the other pieces. It also makes everything very portable. Once you have the framework setup, it's very easy to bring someone new into the project when all they need to do is spin up some docker containers.
Docker for all environments from dev to prod, database in container for dev / testing / staging and AWS RDS Aurora for production.
They pointed the site to a mirror but didn't update the cert. It's been like that since this was first announced.
Check if you have an infected version, if you do, then you need to investigate the damage and rebuild. It would help if Pear told us what it was infected with.
 &gt; the biggest in my opinion is you can mimic your production environment locally and package your provisioning with the actual app as one self-contained unit. &gt; Docker (or other virtualization tools like eg. Vagrant) allow to create an isolated environment only for your application. maybe I'm missing something but all the advantages of docker I see listed so far come from using some sort of VM rather than installing php etc directly on your base OS, you get the same benefit from vagrant. I would be curious if someone could spell out specifically the benefit of docker over vagrant/virtualbox for local dev, because in my current team I use the latter and everyone else uses the former, and the only difference I've noticed is that every couple of weeks they lose a day or two of productivity to debugging some arcane nonsense, and I don't.
I mean maybe with the exception of Composer, if you can compromise the PHAR you are likely to be able to compromise the installation instruction as well in which case a checksum check won't be of any help...
There's some detail posted to the Twitter account (linked from both the article and the current holding page)
Not everyone works with PHP-FPM and other web/HTTP SAPIs, there are loads of things to be done in the CLI and desktop world for instance. Not saying PHP is the best choice outside web/HTTP though.
You'll have less overhead managing separate containers that talk to each other (think of that as "The Docker Way") versus trying to keep one uber-container with all your services running. This lets you do stuff like switch PHP versions without worrying about how it might affect your DB or another container. Or ... spin up an isolated elasticsearch container to prototype something which you might throw away later.
So this is correct? ```php (-1 * $a &lt;=&gt; $b) ($b &lt;=&gt; $a) ``` If so, you can automate that with Rector rule and just migrate all.
All 3. Main problem is: - once you get it enabled, even with it "off", your site is still very slow. So you end up with aliases like this: &gt; alias phpx='rm -f /tmp/cachegrind.out.*; cp /etc/php/7.2/cli/conf.d/20-xdebug.ini.off /etc/php/7.2/cli/conf.d/20-xdebug.ini; XDEBUG_CONFIG="profiler_enable=1" /usr/bin/php' For CLI, and stupid remove file, manual restart webserver all the time for web / restart all local job workers and so on. Also, if you have a site with dynamic domains, phpStorm won't go where to go when you run it an a web-server (locally/edit your hosts files) And can't find a way to see how how many times it called a certain line when profiling, it only counts the functions, or profile just a function, ignore the rest. There just to many things "wrong", and to much mental overhead when you start to use it, that a simple print_r will do the job most the time, so people find it faster.
We should ban posts like this
&gt; Laravel uses global variables for example Are your talking about facades? Lots of developers are uneasy about those. I think it is safe to say then quite a few Laravel developers chose not to use them.
Yeah I know but for small projects I still don’t see the need of having multiple containers. With one container I can spend less time managing docker compose file adjustments , multiple containers files , etc and focus more in the development. We need to be careful wasting more time managing than coding 
I don't use the profiler often (I guess the last time was like 3 years ago, my jobs since then had Blackfire) so I can't remember much. For debugging it's basically down to correctly mapping your local top folder to the the remote path in your server if you're using Vagrant/Docker etc. If your server is local usually I got it working without anything, it validates fine. I still agree usually this part makes people walk out (and that 's partly what this post link references).
From my experience using mostly Docker and a little bit less experience using Vagrant: \- **Ease** and **speed** of launch of docker containers with multiple nodes of containers. \- **Resource consumption** seems low with docker. Our microservice-based architecture is about 60 containers. I'll admit that I haven't tried launching 60 vagrant VMs on my 8GB laptop, but it doesn't sound pleasant. \- The container name-spacing is convenient when I want to quickly launch a dif version of our app to test something. Vagrant probably has similar features, I'm just unfamiliar with it.
Lol no debugging
I’d have to test it again. I think it was around 10% but that may have been on an isolated rendering test and not end-to-end. 
I'm using this image to build my containers [https://github.com/docker-library/php/blob/1eb2c0ab518d874ab8c114c514e16aa09394de14/7.3/alpine3.8/fpm/Dockerfile](https://github.com/docker-library/php/blob/1eb2c0ab518d874ab8c114c514e16aa09394de14/7.3/alpine3.8/fpm/Dockerfile) doing "php -v" gives me a 7.3.1 which is right, but then running "apk search php7" returns only php7.2 extensions. Would those be compatible with 7.3 ?
I was just replying with pretty much the same thing. Recently had to make changes to a project done in Laravel... with Facades... now I hate Laravel, but do understand why it's become so popular (such a low barrier for entry).
I'm using this image to build my containers [https://github.com/docker-library/php/blob/1eb2c0ab518d874ab8c114c514e16aa09394de14/7.3/alpine3.8/fpm/Dockerfile](https://github.com/docker-library/php/blob/1eb2c0ab518d874ab8c114c514e16aa09394de14/7.3/alpine3.8/fpm/Dockerfile) doing "php -v" gives me a 7.3.1 which is right, but then running "apk search php7" returns only php7.2 extensions. Would those be compatible with 7.3 ?
If you’re concerned about that, then don’t use Docker in production and just keep it for local development. You’ll cause more problems than you’ll fix by trying to force it to do something it was explicitly designed not to do. I spend about two minutes a month having to update Docker-related files now, and that’s usually just top-level version bumps. The initial setup (especially CI) was annoying, but most of that was because these tools suck at layer caching and one of our (non-PHP) apps would take three hours to build on every commit without it. 
Is there any way to get the compromised go-pear.phar ?
Serious question: Why? This was new and interesting to me (a PHP developer with intermediate experience). And feels like useful information. 
cool, cheers. seems like there are some goodies in there that my team isnt really exploiting. good to know
Sounds like you want to be able to execute a php script and see it's output? This extension may be your answer if so: [https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner) I use it for testing quick snippets of PHP, Python and other languages.
It's because the version of php inside that container doesn't come from the alpine package list. You will need to run this command to get it to install your packages: "docker-php-ext-install &lt;insert module here&gt;". Some packages wont install on their own because you will need to install it's dependencies from apk first. I recommend using the APK package search to find these out. e.g. https://pkgs.alpinelinux.org/package/v3.9/community/x86_64/php7-sodium &lt;-- you'll find a "Dependencies" tab on the right hand side. Personally this is why I don't recommend building off of the php docker images. I don't enjoy having to research a load of other stuff about my packages when: apk --no-cache add php7 php7-fpm php7-gd php7-sodium will also do fine. However 7.3 isn't available in the apk package list yet so you will have to wait for a 3.10/4.0 alpine release for that.
&gt; `$foo['bar']['baz']['qux']['quux']` ^ not a lookup
Kotlin does this right out of the box. Definitely good advice.
Hum, that explains it. Thanks a lot, I'll look into that 
yes. it is equivalent to $someArray['key'] = isset($someArray['key']) ? $someArray[$key] : 'someValue'
&gt; With one container I can spend less time managing docker compose file adjustments , multiple containers files , etc Honestly if that's a hassle you might be doing something wrong. docker-compose makes the whole process extremely simple. 
It's probably too soon. Based on their wording, Nikita is somewhat of an experiment on their collaboration with open source. I could be wrong, of course, as I have no insider knowledge. They could potentially hire him as a contractor to implement specific features, though.
Because it's just a re-explanation of https://secure.php.net/manual/en/language.types.string.php and doesn't add any new information.
This is not a PHP question. And this subreddit has this rule: &gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required). A good rule of thumb is that if you're asking how to do something, instead of why something's done, or how to better do what you're already doing, you're probably asking for support.
At first I agreed but then I read the post and it has some useful info about indentation improvements. The person clearly put legitimate effort into writing the article.
There's an example in this article where he states the following: ```` final class RegistrationService implements RegistrationServiceInterface final class EmailingRegistrationService implements RegistrationServiceInterface ``` I have a question about this, because I always did it differently, I did it this way ``` interface RegistrationServiceInterface final class RegistrationService implements RegistrationServiceInterface interface EmailingRegistrationServiceInterface extends RegistrationServiceInterface final class EmailingRegistrationService implements EmailingRegistrationServiceInterface ``` Do you think it's overkill to add an interface simply to extend another interface, without adding any other functionality? Because that's what I'm doing atm, every class has it's OWN interface. This doesn't mean, that I have multiple interfaces that declare the same functionality of course. Thanks. 
Re-explanations are nice and needed. Can't see the problem here. ;)
Quoting the article: &gt; flexibility comes from good abstractions, and not from inheritance While this is true, it presumes that you have a good abstraction in the first place. It is often the case that you may *think* you have one, but you do not. Similarly, you may be putting together an initial abstraction, but you won't know how good it is until you *and others* work with it for a while. It may be more useful to think of "final" as "finally, the abstraction is a good one; we can close this off now."
A million times "yes"! You can always remove the keyword later, but can't as easily add it after the fact.
Why adding an `EmailingRegistrationServiceInterface` ?
It would depend on whether you believe \`EmailingRegistrationServiceInterface\` provides any value on its own. It sounds like you might be doing this only because you've made a rule for yourself that every class needs its own interface. If you're doing anything simply for the sake of an arbitrary rule, whether it be "every class MUST have its own interface" or "every class MUST be final", you might want to reevaluate \*why\* you are doing it and whether it is contributing any meaningful value. And your answers might be different that others depending on your specific situation.
That goes against the principle of interfaces. Interface states that *this object provides these specific methods regardless of objects class (as long as it implements said interface)*. If your interfaces just mirror classes then you're locking yourself into using only that one specific class and no other. You can't switch one cache object for another for example. And if you're using only their common parent interface then why declare those more specific ones at all?
I can dig it. 
Yeah, seriously. Especially when they are taking a second to spotlight lesser known features that many users may be unfamiliar with. The idea that this subreddit should only be for people who have memorized the entirety of the PHP documentation seems a little silly to me. 
laravel it is!
Also see [`localheinz/phpstan-rules`](https://github.com/localheinz/phpstan-rules).
I've played with marking a lot more classes as final, but found that created extra hoops to jump through for creating mocks for testing that weren't worth it from a practical perspective.
It's not even an overkill. I'd probably argue that it's useless at best and actively harmful at worst.
Testing is the reason why I've decided to use final only in 2 cases - 1) concrete implementations of a contract, and 2) value objects which shouldn't be mocked anyway.
So I ran into a snag here. My code is running from a console command and the results don't seem to be captured by the profiler. Is that correct? So no biggy. I dropped a call into a page route and let it run. My best problem is that I'm running the web server, on windows, and it effectively works only one request at a time. So I can't actually view the results while its running. Very frustrating. There are obvious solutions to this that I just haven't gotten to yet (the API itself will run on Apache or Nginx, eventually). &amp;#x200B; I did run the code in debug mode in PHPStorm and, as far as I can see, only the main query is actually running, and its running very fast. It's definitely in the hydration step that the performance gets terrible. I am using annotations, not YAML, to define my model. So I know that's done internally using reflection, which is slow. For some insane reason would it be regenerating the proxy classes from the annotations model using for every single result? I would think not.
I agree with this article but I refuse to do it. I much prefer kotlin's approach of making all classes final unless they are explicitly declared as open. I don't like having to remember to add the word final everywhere and having tons of inconsistent code in places where I forget to use it. On top of that Doctrine entities can't be final and I'm pretty sure there are more examples of things in the Symfony ecosystem that are magically extended and break when you add the final word. IMO it's better to treat all classes as if they are final and avoid inheritance as much as possible.
Docker’s biggest advantages are infrastructure as code and reproducibility. While it maybe overkill for a very simple project, at scale it really shines. But, still a good learning exercise if that’s of interest to you.
That's exactly why I picked it up, to learn it an possibly introduce it at work. I work at a small dev studio along about 10 other developers, half of them .net and rest PHP. We mainly build internal systems, CRMs, mobile APIs, some bigger websites with extensive backend functionality. I can see docker being helpful as dev tool, but I get need to see it's viability as a production tool. We mainly host those projects either on digital ocean or customers own dedicated servers. 
Why \`Emailing\`? Do you mean \`MailingListRegistrationService\` as in service for registering for mailing list? Or is it \`EmailRegistrationService\` as in registration via email validation? &amp;#x200B; Those are separate concerns and should not be conflated within single "concept" (interface/inheritance hierarchy) but instead should be composable. &amp;#x200B; PS There is rarely a good reason to use \`Interface\` in a name of a interface. If you think about it, interface is THE think for the code that need that functionality, and specialized implementations should have their specific specialization reflected in their names - so \`Interface\` is totally superfluous. \*\*Treat interface as THE thing, and name it as such\*\* PSPS If \`Interface\` is "necessary" because "default" implementation will have exact same name without \`Interface\` then that's a mistake. Software change. What's "default" may became 2nd or 3rd choice in the future, or developers may simply forget which specialization is "default" and they will have to look up class definition when they see the name. "DoctrineRegistrationService" on the other hand is always obvious. What's more "DoctrineRegistrationService" and "InMemoryRegistrationService" and "OAuthRegistrationService" all are distinguishable from each other without looking inside them! \*\*Reflect specialization in class name, even if there is only one specialization implementation in the system\*\*
&gt;If your interfaces just mirror classes then you're locking yourself into using only that one specific class and no other. Interface "family" can always be extended with yet another implementation. I think, that what you are concerned about is that by always following 1 to 1 mapping, developers miss opportunity to find similarities in their code and thus they set themselves to fail at DRY principle.
Mock its interface then! If it's something that should be able to be swapped out, then it should have an interface.
What do you need? 
 PHP · HTML / CSS · JavaScript · MySQL · Working knowledge of key AWS services (EC2, Elastic Beanstalk, RDS) · Knowledge of MVC frameworks, ideally CakePHP · Experience with version control systems, ideally Git
Why do you need a Yorkshire dev?
I'm just not looking for someone to do remote working. Yorkshire is local to me
&gt; Interface "family" can always be extended with yet another implementation. I know. But that will lead to nonsensical class - interface relationships: class DbCache implements DbCacheInterface {...} class RedisCache implements RedisCacheInterface {...} and then you'll write public function setCache(DbCacheInterface $cache){...} Then now you can't use RedisCache unless you do class RedisCache implements RedisCacheInterface, DbCacheInterface which makes no sense (even though it would work) or you'll need to do public function setCache(CacheInterface $cache){...} thus rendering both of those interfaces redundant. It's just adding more complexity for no apparent reason. If the interface is empty then that's clear sign that it's probably not needed at all. 
Looks more like a mid or junior but you really can't tell without the years of experience attached to it as far as salary it depends on how much experience they expect you to have and what level it is and where the job is.
The job is in Doncaster, just being able to do the job is enough experience. They're not having much luck in recruiting for it. I thought maybe they were pricing themselves out of it? 
If it was mid or junior, what would you say a fair wage would be? 
If they got that far into the process and gave a few offers than maybe but I feel like that's unlikely. Depends I guess on who is also listing a similar job with better perks. Honestly could be anything though.
Seems like 25,000 £ is the minimum in that area probably would go between that and 30,000£
Oh well that's good, they're offering £35k. Maybe the problem is just the location - a lack of devs in South Yorkshire 
Yeah it makes much more sense for the to offer that because it's really a more mid level and yes probably a supply and demand issue.
Just leave this subreddit, you are not wanted.
This is the one. 
Lol Drupal... good one!
I don't see problem in article content but in the post. It's article url and nothing more. I don't know what I'll be reading, is this hidden advert or "hello world post"? A few worlds why I should be even remotely interested would not hurt anybody 
I've read the article and I cannot disagree but I was thinking more about how laconic this post is. 
Ah that looks great. I'm not sure about the ADD line in the Dockerfile because there's nothing to verify the content of the key (php-alpine.rsa.pub). Download it to wherever you're building from and add it from there.
To me it sounds like a generic role. Maybe it’s salary based on experience. Around Norfolk unless it’s senior will be 20-30k max We work with people doing that and more who are averaging at 27k The role itself is generic “full stack” for agency style jobs by the sounds of it
I remember when we had "that guy" forced us to use final on most classes because of these. All that ended up happening was we found ourselves constantly having to change final classes back to being non-final, because we always realized that that class needed to be mocked, and making a class as final does not allow mocking. Undesirably having our classes extended by teammates, on the otherhand, had been much less common (if ever) an issue. So in my experience, marking classes as final does more harm than good.
Hi there, I'm in Leeds. Are you looking for someone for a one-time project? Or an employee? 
Why don't you mock final classes instead and just enjoy final classes at the same time?
One explanation is not going to teach everyone, sometimes a different way of putting it is just right. Especially when it adds to the topic.
I suppose one could argue such. The best things I could say to this is: 1. Making a method that ought to be private, public, would cause far more damage than making a class not extendable. You would make it a lot harder to be able to make changes without them being breaking changes. The equivalent with final classes is less common. 2. It's pretty well accepted in the PHP community that private methods should never be directly tested, so people generally don't even think about it. And by the way, they could potentially be refactored into separate classes with public methods if you really need to test them.
&gt;OK. So there are two ways to get your code into the container. &gt;Add it at build time, or as a volume. Three: Runtime, like sending it to the container over SSH or having the container pull from an external source on startup. 
If you only take one thing from this learning experience. NEVER make your own password hashing with sha or md5. ONLY use the password_hash anything else and your putting users at risk
Employee, in Doncaster, £35k with the following skills: · PHP · HTML / CSS · JavaScript · MySQL · Working knowledge of key AWS services (EC2, Elastic Beanstalk, RDS) · Knowledge of MVC frameworks, ideally CakePHP · Experience with version control systems, ideally Git Benefits: · A relaxed work environment · Relaxed dress code · Progression opportunities · Yearly salary reviews · Ongoing Incentives · Working from home 1 day a week 
It looks very junior-mid to me, up Newcastle way you’d be on either side of £25k for it I’d think 
Not an agency job, like a price comparison service
Couple of notes for improvements. Use PSR0-2 for code styling these PSR make your code styling/indenting etc consistent. Then you can also use PSR4 for auto loading so you don’t need to do “require_once” etc and it will only load the files when needed Do not make your own password hashing, use php built it ones. Try to attach data to the classes, eg instead of having $data[username] make a variable on the class called $data or $username for example Run a tool like “phpstan” on the code and it will give you hints and tips for cleaning it up But never stop trying and learning :)
“General good all rounder” then xD
Perfect! Know any?! 😂 
Ha no! Is what we’re after! https://careers.selesti.com/o/web-developer-norwich
Similar to grav - but Statamic is another flat file cms. Perch is another popular one The question I might ask however.... what’s wrong with WordPress for you? What requirement is it not fulfilling?
What pay? If I come across anyone I'll let you know 
It is one of those “based on experience” - I’m not HR so don’t really know, however based on when I first started and what people have been on in the past it’s gonna be anywhere from 17-35k I imagine 
It would also be better, if properties would be 'private' by default, and you would only explicitly add 'protected' or 'private by default. We also have to remember to add 'declare' for strict type checking in each file. But in the end you can set all of this in your IDE templates, so it's bearable.
Yeah sounds about right. They seem to be in short supply! 
Old article. But totally worth upvoting.
&gt; extends breaks encapsulation This message is misguided, extends further defines encapsulation. You base class defines it's encapsulation by saying what it's not prepared to support. You extending class is defining that it's encapsulation is a business domain with slightly more responsibility than the core class. Just because someone does it in a messy way once does not make the whole idea "break encapsulation". The area in the article "Force the developer to think about user public API" is really bullshit. protected $db; Should have been made private, it's written that way to make a fake argument for the sake of the article. Think about it? why do we make values protected? so that inheriting classes have access to them directly so it's a bullshit example in a story about making classes final. If you want to get your point across, use legitimate examples and not fluffy made up ones. Because of this the rest of the article comes across like a cult member talking about final. It could have been one dot point. - We make classes final when we think we have a good abstraction.
It's still very rare to see out there. I hope in next 4 years this will change 
Great, you just picked architecture over testing tool limits. How could you do that for mocking?
To be honest I just label them as final when those classes aren't supposed to be mocked or extended. 
Thanksw this looks exactly like rules I follow for my code.
Having to mock classes is a hint your code could be designed better. I had trouble at first too, but with practice I'm now used to have both all my classes set as final and good tests. In what case do you have trouble?
[https://builtwith.com/](https://builtwith.com/)
&gt;www.pornpics.com Hi! Thank you, i have already tried with that website. &amp;#x200B; Is this custom script or? I would like to buy one..this is why am i asking..looking for source &amp;#x200B;
Just between it's porn-related doesn't mean the source will be easy to find.
Mocking isn't a valid reason to fuckup architecture, see: https://www.reddit.com/r/PHP/comments/ajdgx6/when_to_declare_classes_final/eevqmdo/
I know, mate &amp;#x200B; I am just looking for similar script..to create my own adult website..simple as that.. &amp;#x200B;
Depends what all you need to do. I am quite fond of Lumen, which is more or less a stripped down version of Laravel specifically for writing APIs.
I'm working on a simple pet project Android app and need to create an API for it. I've been looking into utilizing services such as Heroku/Hasura but since I'm trying to get back into development and may need some actual program eventually, I'd like to create my own API. All I need it to do to begin with is being a link between the app and an SQL database. A simple enough task, I started off creating the app in pure PHP as I like lightweight and fast apps, and have experience building relatively complex apps without a framework, but that was mostly console apps running in Docker containers rather than a REST API. At this point I'm setting up routing and thinking about properly sending responses and starting to think whether should I switch to a framework? I'm happy with simple PDO for the DB communication, and all I would want a framework to do at this point would be handling the http request and response properly eventually with authentication. Is it a recommended practice to bring a framework to the picture, or is it reasonable to create my own layer and hope it'll be simple enough to be as secure and robust as a framework?
See my description below, not sure where I went wrong but I couldn't put it in the post. I'm a reddit noob :(
After reading your description, I'd still probably recommend using something like Lumen. I'm sure you could achieve the same result without, but a framework will do a lot of the lifting for you so you can focus on the important stuff. My second choice would probably be using Symfony components for just the stuff you need. But I'm still partial to Laravel and Lumen. https://lumen.laravel.com/ 
After so many years developing with PHP I realize speed is overly obsessed in this field. Build thing fast and optimize later is always better than you over engineering your code to achieve the fastest performance while you suffered to reach a deadline. Use laravel or lumen to get your app up fast and then optimize it later if saving a few milliseconds is critical to your business need. These frameworks have went through tests and bug fixes that will always be more superior than your homemade router/db layer. Yes it's undeniably that pure PHP is very fast, and it's about a few milliseconds versus 50 to 100ms when lumen/laravel is in the picture, but out of the box you get so many goodies that you don't need to reinvent, and you can focus on getting your app implemented, not implementing how to fetch data from your database.
In 98 % of the cases in real projects this is not applicable IMHO. You are basically wasting time abstracting stuff which will never be changed during the lifetime of the project. Eg. Injecting a "registration service" when there is really just one way to register users. I never make classes final. What do I gain by making them final ? Literally nothing.
Looks all custom. 
Thanks for the suggestion, just doing some research on it and similar "micro" frameworks, looks like that might be the best way forward indeed. 
Takes like 5 seconds to set up Siler (not silex) for Routing and Redbean to talk to DB for dev purposes. or simple PDO connection and calls. 
Interfaces are not needed to mock of final classes, see https://www.reddit.com/r/PHP/comments/ajdgx6/comment/eevqmdo
I found his subfolder [https://www.pornpics.com/test1/](https://www.pornpics.com/test1/) It looks like different website (he tested script, then installed live on public\_html) i guess.. Still can't find anything similar to this
How is that ridiculous? No one showed me a legitimate use case that isn't a code smell.
Personally I found that if you are working on many different projects, at least a different one day, it can be a pain in the ass to maintain the debugger setup. In that case its easier to just use var\_dump and then set up xdebug when a particular nasty problem arises. However if I'm working on the same project for a month or more uninterrupted I set up the xdebug and use it consistently.
 if (!($a &lt;=&gt; $b)) { } That might actually be intentional, since `!($a &lt;=&gt; $b)` behaves exactly like `$a === $b` or '!($a !== $b)'
I recommend [http://www.slimframework.com/](http://www.slimframework.com/) really simple and straightforward but powerful if used correctly
Debatable.
Hi. Just do a normal install. Download WordPress, unzip it in eds-www/WordPress/ for example, open http://127.0.0.1/WordPress and follow the install process. Don't forgot to start the database server and to create a database for WordPress.
I can enforce declare strict with php-cs-fixer and my ci pipeline but the same does not count for final unfortunately. I agree with the private by default but this is something that my IDE can easily verify for me so I also have this covered. But forcing classes to be final when they can be is just not something any tools that I know about can enforce. 
What do you gain by making methods and properties private instead of public. Litteraly nothing. Just tons of useful functionality that you are artificially hiding away.
You can use Microweber CMS. They are open source, drag and drop website builder and are perfect for small and medium websites. If you know how to use HTML and CSS it will be great because they don't have much themes for now. Try them, I guess this is the next good one. &amp;#x200B; &amp;#x200B;
Hey thank you responding. I have already tried to follow the above mentioned method referring some blogs. something like this path the blogs suggested to follow - C:\Program Files\EasyPHP2.0b1\www But I didn't have that WWW directory at all. 
Just use flywheel. https://local.getflywheel.com/community/c/releases Easiest local wp env there is.
You version of EasyPHP is 15 years old. Wordpress won't work with such an old version. Use the last one : Devserver 17.0. And then put Wordpress in \`C:\\Program Files (x86)\\EasyPHP-Devserver-17\\eds-www\\WordPress\\\` and open the url \`http://127.0.0.1/WordPress/\`
yes got it. Thank you.
thank you. kind of fixed it.
Google Laragon. I went from EasyPHP to Laragon 3 .
I think this is more about soft-skills: A senior knows what he knows and what he does not know and communicates this. He knows how to get the knowledge to complete a task. He is able to manage expectations of himself and others. He communicates with those around him to achieve his goals. He takes responsibility for his tasks. He helps others that struggle and is able to pass his knowledge. He knows what he can and cannot say to a customer to ensure the companies interests. He is able to see the big picture.
Kind of? If your having issues there’s a step by step guide for the setup I use, devilbox. http://devilbox.org Install docker, clone repo, run docker-compose up then follow the wp install guide in the docs. Should take ~10 min to set up. 
it's working! :) thank you all for your inputs.
I'm not really concerned about time to set up, I'm more looking for a general opinion on the matter. I just took a 2 year break from years of programming in PHP and I'm trying to use the clean mind to go in depth and learn the options, best practices and write better code. I'll definitely look into Siler as well then, thank you! 
So how do you mock those final classes for unit tests? Because Mockery at least is not able to, because it needs to generate a class at runtime that extends the class that you want to mock.
Hell, what does dividing your code up in separate classes add? Literally nothing. It's far easier to have everything in one big file so you never have to search around which script does what bit. /s, in case people were thinking I was serious.
It's not really a years thing. For example it's possible to re iterate same year for multiple times. I wouldnt even dare to say that it's related to the toolset one is capable to use, although this correlates, the underlying reason is not tools themselves. Generally, beginniner: someone who doesnt understand the rules. Fundamental concepts are not understood and thus stumble constantly on simple requirements. Tools themselves seem to be the problem to be solved. Generally that's entry level folk. Advanced beginniner: folk who are already familiar with the tooling. Language and tools aren't the problem anymore. They can leverage things like Laravel, Redis, rabbitmq etc. However, rules how to compose the tools to solve the problem aren't clear. They still need suprevision for anything but basic tasks. They know the rules, like Solid for example, but attempt to test them constantly. End up in messy places. Write unscalable yet functioning code. That's your junior. A lot of seasoned freelancers who reiterate basic gigs get stuck here. Competent: rules are clear. They consiously think about the architecture and are few steps ahead. They can work without suprevision and write scalable code. Tools, like language are second nature. They still neen to think about how to apply the rules is mid programers. Proficient: folk who iternalized the rules. These are folk to whom you come with complex problem and they can imagine entire architecture and code to solve it from a meeting chair without looking at the code. These are mid - seniors. They lack only one thing. Expert: trancsended the rules. They think in different level. They make correct calls then rules need to be broken. The do not appeal to rules thought. Their thought process is hard to follow for anyone who is not atleast proficient. The individuals are rare.
I would choose phalcon. Fastest, easy to start by any developer level
pure PHP is not the way to go. You will regret choosing to implement all the things yourself for such a simple project (api). use symfony4 with only components (bundles) you need to, in other words, use symfony4 as a micro-framework. You may want to look at FOSRestBundle if you want to dive a bit deeper into building a nice api
I totally agree that there’s a learning curve much steeper than almost any other language’s debugger (mostly because of the client &lt;-&gt; server model). However I can set it up in about 30 seconds now. &gt; install and enable in the container/VM (via apt or whatever) &gt; xdebug.remote_enable=1 &gt; xdebug.remote_connect_back=1 &gt; set path mapping in my IDE to map the project root to (usually) /var/www And that’s it for 99% of cases.
This roughly how I break things down: * Junior dev has enough technical skills and competence to complete most simple tasks and bug fixes. It won't necessarily be performant, secure, or well written, but it will work. * As you gain experience, I would expect code quality to increase, with a thorough understanding of various performance and security concepts that relate to their work (e.g. how to avoid SQL injection, XSS, inefficient queries etc). A mid level developer should be concerned with more than just getting code to work. A mid level developer should also be able to take on a sizeable new feature by themselves and run with it if necessary. * A senior developer should effectively be able to do solutions architecture. Pick which tools to use, plan the architecture and assess risks for major overhauls, rewrites, or new features, establish patterns and best practices for the team. They should also have soft skills that pertain to leadership, and be able to lead a team of other developers to deliver new features. Senior devs should be able to make key technical decisions for the organization. Of course, there's no clean junior/mid/senior split. It's a spectrum.
You don't mock them. Use regular instances.
Somewhat related, I recommend [How Developers Stop Learning: Rise of the Expert Beginner](https://daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner/). 
API Platform
Years wont come into it at all in the real world. We've got a dev who's been with the company since its founding (~15 years) and he's very much a junior. Then we've got devs who've only been in the industry ~2 years and they are at a senior level. If you're prepared to learn in your own time, you stand a much higher chance of becoming a senior. Sadly lots of places put people in senior positions due to how long they've been in the industry, which means you end up with situations where your senior devs dont actually know all that much, so make terrible decisions that affect the team. In a nutshell - get learning. I'd expect a good senior to know architectural concepts, database design, decent server management skills (if its a web dev role), ideally a competent full stack developer, and able to lead AND listen to their developers. 
Do you run FPM on your local machine or inside a container/VM? Either way: 1. Install Xdebug on whatever is running FPM, via apt or yum or PECL or whatever is available. 2. Make sure it’s enabled. When you run `php -v` it should say “with Xdebug”. You might have to restart FPM first. If it doesn’t seem to be enabled, you’ll have to find wherever the package manager put the xdebug.so binary it downloaded/built and add `zend_extension=“/path/to/the/binary”` to the bottom of your php.ini, then restart FPM. 3. There’s a whole bunch of settings for Xdebug, but the default will suffice for most of them. All settings I mention from now on just go in php.ini. 4. The default connection port is 9000, so if you’re using a container or VM make sure 9000 is mapped between the container and your host machine. If you’re running locally you’ll probably need to change it because FPM uses 9000 too (seriously, how did that even happen?). You can achieve this by setting `xdebug.remote_port=9001` for example. 5. Next we need to configure the remote host, which is going to be your local machine that’s running your IDE (so remote from the perspective of the server). This defaults to localhost, which is fine if you’re running locally. However, because the Docker host IP is not known at build time it’s a pain in the arse to automate. So what I instead do is set `xdebug.remote_connect_back=1`. What this says is “whenever *anyone* connects to me, I will connect back to them to open a debug session”. As only you will be connecting to your development environment, this is okay. 6. Now all we need to do is turn it on. `xdebug.remote_enable=1` enables it, obviously. Then you’ve got two choices. You can either set `xdebug.remote_autostart=1` to always enable debugging, or you can go and download an “Xdebug helper” browser extension, which will give you a little widget in your browser to switch it on and off. For simple setups the former is fine; for more complicated setups where you’re running multiple sites at once you’ll want the browser extension. 7. Lastly just configure your IDE. If you changed the port in step three, there will be a setting in your IDE for what port to listen to; just make sure they match. And then you need to set up path mapping. If you’re running FPM locally I don’t *think* you actually have to do anything, but if you’re running a container you need to specify how the directory structure on the container maps to your machine. For me, 99.9% of the time this is a case of just mapping the project root to /var/www. In PhpStorm this is achieved in the PHP &gt; Servers area of the settings, which I’ve always found somewhat counterintuitive. It also asks you to specify the hostname and port, this will usually be either localhost or some variation of my-app.local, and then of course 80 or 443 (not the 9000 debugging port). And that should be it! Turn on “listen for Xdebug connections” or whatever your equivalent is, set a breakpoint in index.php to test, and you should be good to go. Also. PhpStorm has a super useful tool under Run &gt; Web Server Debug Validation. You tell it where to create a file such that it would be accessible via the browser, and it will run a script there to peek at your configuration and tell you if anything is wrong 
Has more to do with being able to manage others rather than being good at programming. A senior is able to manage a group and pull off a nice application. I myself am just as good a programmer as my senior collegues, just lack the softskills.
I think you are confusing something more specific like a tech lead with a senior developer. I have met and worked with plenty of senior developers with below average soft skills and I would still consider them senior because they were good software developers and architects in their specific field. Lack of social skills does not make them less of an expert, they were simply not fit to lead or extensively talk to clients or stakeholders. Also, maybe stop using “he” so much, I have worked with plenty of smart women in software and you are not doing them justice.
or you can read the manual. Not sure if I like posts which just describe what literally is stated in the official documentation. 
[https://fatfreeframework.com/3.6/home](https://fatfreeframework.com/3.6/home) is really light and does the job...
I believe it's all about how many mistakes you're made. Wrong code. Wrong algorithm. Wrong architecture. Wrong deployment. Losing a backup. Losing client data. If you come up with the right solutions for all possible bad outcome of your system. All of these mistakes will make you an expert instead of a junior. After that it's more about how specialized or all around you are. If you build backend stuff, can you build a good frontend app in Angular, VueJS or React ? If you build frontend stuff, can you do some devops ? Use AWS services ?
For me, there are just two gradations - a programmer and not a programmer. And main things that differentiate programmers from non-programmers: 1. Programmers don't build, they create. Many people using PHP are not programmers. They use PHP as a sort of Lego: "this block is used to get data from a database, this block is used to write to a file, etc". So they proceed to build a Great Wall of such existing bricks never trying to invent a brick of their own. Whereas a programmer has a natural disgust towards repetitions and always trying to optimize the code, to reduce repetitions, to improve the maintainability. 2. Programmers solve problems. Non-programmers just follow a routine, never giving a heed to the final goal, or thinking how their program is going to be used. - Programmers know they could be mistaken. Non-programmers always sure they know everything. And other gradations are just the amount of experience.
because they are in the RFC. you are assuming the core devs are nitwits who just implement any requested feature. a lot of thought goes into RFCs, do yourself a favour and read the php-internals discussions.
Anything specific? I've only seriously looked into Hasura which would probably work, I'm just trying to see all the options and looking for opinions, since I don't have many devs in my circles
Is there a book that you recommend learning these? 
Sounds reasonable.
if you want to disallow extending and require everything to be final and disallow abstract classes. are you sure you want to be using php at all? or is your exclusion list just gigantic?
I ❤️ PHP. I just haven't found the need in my projects to extend classes a lot.
I will sit down to it this weekend and follow your advice. Thanks for taking time to help, much appreciated. I really want to understand the value in Docker, hopefully roll it out in the office if we feel that it will speed up/help the development process
How can you be at a company / in the industry for __fifteen years__ and still be a junior? Like...not even a mid?!
Sounds like a bad company 
Hope you got that db container a persisted storage (i.e. volume).
Can we pls have inline heredoc/nowdoc \`preg\_match(&lt;&lt;&lt;RE/ no escape! /RE&gt;&gt;&gt;, $subject)\`? ktnxbye :P
Good code is code that is easy to delete In order to do a clean delete the code needs to tell you what it is responsible for &amp; the problem it's trying to solve and have very clear boundaries i.e. a pure function is very easy to delete, a class is hard to delete (partially or completely) because it groups functionality and often shares properties between methods 
 $client-&gt;on("receive", function($cli, $data){ echo "received: {$data}\n"; }); $client-&gt;on("error", function($cli){ echo "connect failed\n"; }); $client-&gt;on("clos... I know we don't have real enums for PHP but surely an abstract class of constant strings would be great? 1. Gain intellisense. 2. never spell anything wrong again with support of errors telling us about undefined class constants. abstract class event { const receive = "receive"; const error = "error"; const error = "close"; } $client-&gt;on(event::recieve, function($cli){ echo "connect failed\n"; }); How is this not better in every way?
Hey, Necromunger, just a quick heads-up: **recieve** is actually spelled **receive**. You can remember it by **e before i**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
delete
I think what he meant is that those developers always stay at the ame level of experience and don't even try to improve or learn new things. But i agree, just by working in this field you should build up some experience over time. 
If you are a senior, then you have more responsibilities, this includes meeting with the customers and with the whole team. It doesn't mean that any big mouth could be a senior, soft skill is an extra requisite, not the only requisite. Developers are like Pokemon; they must evolve. 
&gt; but you do not. If only there will be a way to change code without affecting behaviour of the system... I would call something like that - refactoring. Sad that there is no such thing. &gt; finally, the abstraction is a good one; we can close this off now. Or to enforce search for this abstraction. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
my api is close as follow: ```php $valid=validateToken(); if (!$valid) die('die'); $customer=CustomerDao::list(); echo json_encode($customer); ```
Unnecessary overhead maybe? Also, there's always the possibility of extending from `Client` and creating your own custom class with some custom events, those wouldn't be covered by the enum. Intellisense is kinda unnecessary once you have the docs open, and that thing about "never spell anything wrong" has a very low chance of happening IMO.
`swoole.com` redirects to this website, so yes.
...so now OP has downloaded PHP that has possibly been MitM attacked.
[removed]
yes, that I understand. but that's not the same as making extending forbidden :)
Recently I've been using [dg/bypass-finals](https://packagist.org/packages/dg/bypass-finals) in my PhpUnit tests. Unfortunately PhpStorm is not happy about it, but [maybe someday](https://youtrack.jetbrains.com/issue/WI-44799) I'll be able to supress it.
or just use golang
&gt;Intellisense is kinda unnecessary once you have the docs open its the other way around please: open the docs is not needed if autocomplete works
How do you recommend to refer to "developer"?
This is exactly how we see junior / mid / senior and the logic is applicable for every job.
I’ve seen people at a good company not develop their own skills. They do their own job very well, but are very much juniors. Not because the company doesn’t offer the opportunity to learn something new or get training, but the individual just doesn’t take it upon themselves. Again they are very good and consistent at their job, but nothing more. 
``` $http = new swoole_http_server("127.0.0.1", 9501); ``` What year is this? Do they not know about namespaces? And why is the class name in lower snake case?
I had the misfortune of being involved with the transformation of a *large tech company*; that would exclusively hire Junior Developers, and let them slowly progress. See the problem? Nobody progresses as there's no fresh ideas or experienced input. So if there's bad practices, they get distilled in to company practice without any real opposition. Having to manage a team and give workshops on basic OWASP stuff like CSRF, SQLi, and XSS was... enlightening. Especially to a group of people older than me with "more experience". That place was interesting.. *shudder*
You can just say "he or she", however I personally think it gets a bit annoying. In English you can just use "they" instead of "he" because that's just a neutral generic pronoun for a single person. It seems like a little thing but most women will definitely appreciate it, it's simply more accurate and it makes the workplace more inviting (which can be especially important if you are in a senior / leading position).
Been programming for a very long time and invested years into learning the craft. Over 15 years. In the early days I was mocked for not using libraries and frameworks. Today I feel like I've wasted so much time learning to use the frameworks and libraries that sit ontop of the language that I've neglected the language itself.
I totally agree with your description. This is roughly the guideline I use to assess myself too, and the reason why I consider myself more junior than my years in the industry seem to indicate : I have a very broad skillset and can get pretty much any job done given enough time. But I'm lacking in areas of knowledge like security, architecture, and even, admittedly, planning. And although I'm a very friendly person to work with, this doesn't necessarily translate to leadership. These are the areas where I want to spend time improving nowadays, instead of *just* focusing on the myriad new frameworks out there.
Unfortunately most of the popular languages these days promote depending on libraries even for smaller functions. &amp;#x200B; I have been using Go more and more and they have the opposite approach, they are promoting copying couple of lines of code inside your own code for the things you need rather than requiring a huge library for it. And even tho I mostly use PHP/React, because I really believe the Go approach, I am trying to minimize the 3rd party packages. &amp;#x200B; Even if you don't switch to some other language I strongly suggest just give Go a quick try. &amp;#x200B; On a side note, using Go and React also change my views about MVC patterns and now I am thinking and designing components rather than putting all Models in one place etc... 
It's just a direct result of the "internet age", everything is online and companies want their technology to be developed as quickly as possible to be first to market; developers don't want to have to reinvent the wheel for everything as this takes too much time so frameworks and package managers appeared to speed the process up. It happens in industries all over and isn't just limited to technology, efficiency drives cost down and "bespoke" products like websites, buildings, cars, phones, clothing cost much more money to create. Don't feel bad about it, frameworks and package managers are the norm now if you want to be a developer that's employed!
PSR, Composer, and namespaces. *Yawn* All three of them are over-emphasized to the point of hyperbole.
Sadly I find this to be the opposite, and what is really valued is someone who delivers quickly even if the solution is poor and hardly tested. I think I need a new job..,
I use [myclabs/php-enum](https://github.com/myclabs/php-enum) for this kind of stuff. /** * @method static Event RECEIVE() * @method static Event ERROR() */ final class Event extends Enum { public const RECEIVE = 0; public const ERROR = 1; } function foo(Event $event) { switch ($event-&gt;getValue()) { case Event::RECEIVE: // case Event::ERROR: // } } $event = Event::RECEIVE(); $event instanceof Event; // true $event-&gt;getValue(); // 0 $event-&gt;getKey(); // 'RECEIVE' $event-&gt;equals(Event::ERROR()); // false $event-&gt;equals(Event::RECEIVE()); // true foo($event); // OK foo(Event::ERROR()); // OK foo(Event::ERROR); // TypeError foo(0); // TypeError foo('ERROR'); // TypeError It's not quite the same as Enums in other languages, but at least it's typed.
I agree with you. From a companies perspective (both client, and developer) it allows for increased productivity and lower spending. And that makes complete sense. I've been able to launch applications very quickly using libraries and frameworks but I never have a sense of pride, or achievement, with those projects. I was coding for much of my younger years purely out of passion with no plans on seeking work (that'll be my autism). I'm unhappy as a developer with the way I have became reliant on using other peoples code instead of thinking about solving the problem myself before attempting to use a library. But on the flip side, as you say, you can't survive in the commercial world without using them.
I struggled with this for years. After ~5 years of full time professional development, I had, from scratch, developed an ecommerce system that handled roughly one billion dollars per year in sales, had set up and managed web servers (both NT and Linux, at the time), had also previously worked with OS/2, Lotus Notes and various other tech, was competent (and/or proficient) with PHP, Perl and ASP, and had worked either on my own or under a mentor on more than a dozen various projects (again, ecommerce and various other types of sites with forms, custom javascript, etc). I'd built a 'self-building' system: a tool that could generate full functioning sites based on templates and variables from INI files. I'd built bots that could connect to AIM and did custom interaction based on incoming data. I'd built a custom MVC framework that cut my dev and support time by around 70%. I'd built custom email systems to listen for incoming email, parse them out, pass to custom code to store, scan and reply with specific info (search dogpile, google, lycos, etc via email, for example). I was running a small consultancy at that point. I'd had to deal with data loss, email loss, develop disaster recovery strategies, plan for and deal with high volume traffic (worked with a client who was on Yahoo finance TV in their very early days, and he'd get moderate amounts of traffic - by today's standards - but 100mhz servers weren't terribly fast!) I say all that not to brag, but to say I still wrestled - honestly, and too much with those around me - as to whether I should put the word "senior" on my resume. I would look around at some people around me and see "well, he's done more than me, and she's got some skill that I don't have". Other people knew perl, flash, coldfusion, java, etc - more than me. They had 'more' skills than I did. I hesitated for *YEARS* to put 'senior' on. I look at job postings now sometimes I see "we need a senior dev for XYZ... must have 3+ years of ABC, XYZ, DEF, etc". and just sort of shake my head. I've learned that the 'what' (mechanics) were less important than the how and why. Knowing what questions to ask, knowing when to ask them, knowing when to code and when *not* to code, knowing when to reuse vs build from scratch, knowing when to delegate vs go solo vs collaborate - all of those 'soft' skills are, for me, the skills and signs that indicate senior. I don't think you can get those in a year or two, or possibly even 3 or 4 if you've only ever worked in one place on one project.
I noticed you mentioned gulp. Do they support we pack?
I've always been against frameworks, libraries etc for this very reason. I don't know how it happened, but programming suddenly turned from writing code into simply sticking lots of components together. So you end up with 20,000 LOC in 3,000 files, to do a job which only needs 200 LOC and a single file. It's happening with websites too. "Hey, want a search bar on your home page? Just install this handy search component! Only $10 a month, and a single Javascript file to link to!!" Then you find out that the JS code is buggy as hell, was originally written by a dodgy guy from Russia, and has also just been poisoned by a Chinese hacking collective. And all of your site's visitors are being exposed to it, and having their payment details intercepted. But it'll be 6 months until you find out. People! You're programmers! Go and write some code! 
Interesting title
Some people just want a job, I imagine. I worked with a guy who was doing the same set of basic tasks (relatively poorly) for 10 years, but he was happy because the job paid him a comfortable amount of money and he had 0 stress.
An entry (level 1) requires constant guidance and review. Until a task can be performed without too many questions you are an entry. N entry status should not last more than 2 years. 1 year is better. A junior (level 2) is a code monkey. They can write code to perform simple tasks such as isolated black box functions and bug fixes and, under the guidance of a mid, assist with new features. 3-5 years of experience should graduate you from a junior. A mid (level 3) is a standard contributed. They can build new features, fix bugs, and write good quality, easy to maintain code. They also, usually under the guidance of a senior, will lead larger features with small teams and train the underlings. Most developers, 80%ish will stop at this position which is totally acceptable. If they are very skilled at the leadership portion or dry food at designing new features they ma be a good candidate for level 4 assuming they have 10-20 years of experience depending on the complexity of the product. A senior (level 4) is a the primary architect, leader, and trainer. Level 4 is always part manager. They create high level strategies for the codebase and review and evaluate the other engineers work. A level 4 will spend more time in meetings, helping the level 3s build a good strategy, and training than doing development. They also prioritize and divy up tasks (sometimes in cooperation with a proper manager). They also should be able to contribute new ideas for the product and recommend a direction. A CTO or lead (level 5) is almost all manager but used to be an engineer/developer so knows how that stuff works more than your MBA types. Their role is to determine where the industry is going and point the company and architects I. That direction. They ultimately decide which features the product will gain next and what new product the company should develop. This position is only for companies with dev teams of 12 or larger. The architect will usually wear this hat in smaller companies. No one should be willing or able to fill this position without 20 or more years of experience. Some larger companies have level 6,7 or even 8 but these are just tiers of the level 5. 
They've just not got any desire to learn and are very set in their ways. It was a mission to get them off of dreamweaver and to accept things like coding standards and git years ago, and they still moan about how it was better when you could just FTP files up. For some it is absolutely just a job and they couldn't care less about new features or versions. I don't personally get why you'd willingly be a dinosaur. But each to their own I guess.
/r/nocontext
Sheffield here - going rate is £30k to £40k if you truly can do everything listed. It looks more mid level to me.
Cool. That's great then, we're pitching it at £35k so just a waiting game I guess. 
Might want to advertise a little out of Doncaster. In Sheffield and Leeds there are large PHP followings. Check out Sheffield Digital's slack channel, its full of developers (pretty sure Leeds have something similar).
ah right, yeah thats a fair wage, must just be a location issue 
What are you using in the said JSON API? we have encode and decode i vanilla.
Can you point to the said API?
I double checked the subreddit to try to understand where this was going.
Crazy how much of a difference the sub makes; in programming subs this doesn’t get a second thought, in /r/askreddit the comments would be wild. 
Upvote for the title.
the article doesn't really explain why inheritance is such a bad thing. The only argument I really see is vendor lock in. but you trade that in for convenience... the solution is to basically write all abstract classes 3rd parties provide you yourself. "what if you extended from the repo class and had `public function createQueryBuilder()`overriden? when the 3rd party code changes your code will break!". Any 3rd party code change that isn't backwards compatible will break your code, whether you use inheritance or composition does not change this fact... "make children in factory instead" this argument makes it seem as all changes would be confined to one class, but they conveniently leave out return types after the first example. these would still have to be changed in the "over 50 places". This entire point is also not influenced by any use of `final` or not. I'm all for composition over inheritance, but I've yet to see one article that makes a decent case for **using `final` everywhere by default**. Pragmatism always seems to get lost along the way. In practice I've had multiple 3rd party packages who implemented final for classes I wanted to extend. Resulting in a flat out copy and rename of the entire class in the project. So is that the better option then? Imho it's nearly impossible to design classes for all use cases, whether you choose to go full inheritance, full composition or take the middle road. but religiously pushing one over the other seems a bit overzealous.
While Years is not an exclusive or even hard requirement it is a very good piece of data to have. If you are still a jr and have 5 years experience you probably do not need to be a developer. Or maybe you just need to switch to a different type of development that more suits you. A Jr is a transient status.
&gt;Static Anal Uh wow
&gt; It's easier said than done, but the more parents you kill, the better you get at it. Today, we loon on 3 effective ways to kill them. /r/nocontext
&gt; Knowledge of MVC frameworks, ideally *CakePHP* Uh, that won't really attract good devs. 
No? I've never used it myself. Only laravel. 
it super simple you born as a leader or you born as a junior and thats it. :D
I just read this great article the other day about the [dependency problem](https://research.swtch.com/deps). It's a great perspective look into the growth of package ecosystems, the successes of achieving this technological tooling and the failures of developers blindly putting their faith in open source code. It puts a lot of suggestions out for investigating potential dependencies, watching for red flags and ultimately determining if a package is right for your project. My favorite part about the article is how it puts ownness on us, the developers who use packages so freely. It's very understanding that there's no way the ecosystem is going to change dramatically, but that there are mistakes which could be avoided from those who require other packages. Honestly, just give it a full read. It's a truly thoughtful article.
You might be interested in taking a look at [Wheel Factory](http://wiki.c2.com/?WheelFactory).
&gt; in /r/askreddit the comments would be wild LOL
Calm down, Mr. Menendez!
im kinda stuck this way, my own fault really for sticking with the same company for 10 years. We are a small shop, 2 developers, so I just dont have the team to bounce ideas off of and learn things from. My title says senior, but no way I could say it with a straight face. I wouldnt say I am a junior though either, but mid level.
Here I am looking at my corps homebrewed 150k LOC enterprise codebase wishing that it was built on top of some kind of standard framework and libraries...
Have you tried using [composition instead of inheritance](http://wiki.c2.com/?CompositionInsteadOfInheritance)?
Damn near killed 'em...
Shouldn't the fun be solving the project-specific problems rather than the basics like input validation? For that I much rather have well-tested and well-documented libraries. If the project grows or someone else has to take over it's just much easier if the project didn't DIY unnecessarily.
Great title. Great content. Been there and had to feel the pain of the extended Repository classes... 
PHP-FIG, Composer, and namespaces... The epitome of hyperbole.
Many people hate CodeIgniter but this is partly the reason why I loved it. No need for composer, you just get the framework, about 300 files, 2MB, no need to install hundreds of packages. Provides just enough to make things work very easily, while being very fast. Of course the code is considered ugly and does not follow the standards we are used to today, but I still consider it a handy tool in my toolbox and use it for small/hobby projects. Now waiting for CI4 release so that the code can be nice in there too.
I usually say "I'm a coder not a plugin configurer" and I get bashed for that but this here explains it perfectly
Try Flywheel Local, its great for wordpress dev. 
First question to me would be: Is this a problem? Is this a problem because... it uses more disk space than needed? it pulls in dependencies that you haven't reviewed? you feel it's fragile to rely on these packages? Or is it more personal? Do you feel like you're not a 'real' developer because you rely on these packages? Do you feel like you need to write your own input validation library instead of leveraging an existing one? In my work the goal is to complete a project. Many times after weighing my options it's simply a better choice to pull down some libraries instead of implementing the behavior myself. My goal is to implement the bits that our custom use cases require. But in personal projects I can get behind this. I'll often spend extra time implementing things that I don't fully understand instead of just pulling in a library to do it. I see some arguments here like the LOC count and I just don't get it. Unless you're REALLY tight on disk space or bandwidth what does the LOC even mean? It's some arbitrary metric that has no real impact in 99.999% of use cases at the end of the day. 
You're on a fbi watchlist now...
I have become very picky in choosing dependencies/packages because of this. But I also don’t really fancy writing the same code multiple times and I think my time is better spent writing domain specific code then specialistic code like parsing and formatting international phone numbers. 
Damn! Hats off to you sir. I am assuming it's a spaghetti mess?
&gt; Shouldn't the fun be solving the project-specific problems rather than the basics like input validation? Yes of course. After 10 years of using PHP I should by now have my own libraries that I reach for and be reusing my own code. Laziness and reliance on other peoples code is the reason why I'm not.
I'm totally biased, one of my legacy projects is still on CakePHP2 and I'm very bitter. Thus every time I see a reference to CakePHP, I die in agony. I'm so biased I even don't acknowledge that CakePHP3 or the upcoming 4 are better. Upgrading from 2 to 3 is like rewriting everything, at which point you can safely assume you're better of with something like Symfony or Laravel.
Yes. With years of hacks and workarounds. A mix of imperative, OO, and inline template PHP. Business logic everywhere from the interface to the SQL statements.
I think to get over you bitterness you should quit your current job, move to Doncaster, and face your demons by immersing yourself in this CakePHP project! 😂 For your benefit of course! 
 $client-&gt;onReceive(...) ? 
"just"
Imagine using JavaScript, that'd be ~10049295 dependencies more.
I think the difficulty of reviewing large dependency trees is the only real problem with the composer-first model of programming. However I haven't reviewed all the code for PHP or Linux or vim either, so adding a measly few 100k lines of code to the the millions of lines of code I haven't reviewed is probably not that big of a deal.
My old job had simplified it down to: * a Junior Developer requires a direction and guidance * an Intermediate Developer only requires a direction, and can provide guidance * a Senior Developer requires neither, and can provide both
No I'll have a go at that one later, thanks. But as I said, I'm pro composition over inheritance myself. I simply have a hard time with shunning inheritance over composition. What you effectively do with spreading the mantra **final everything yb default** The article you link though, ends on a much more sane note: &gt; I cannot prefer one method to other in general and I definitely don't want to miss any of these methods, since the usefulness depends on the use case. And with this I can wholeheartedly agree.
Being a little glib, but shorthand for a Junior Developer is a someone who thinks the most important thing about themselves as a developer is what programming language(s) they know. 
I've had it explained to me like this: frameworks solve budget problems, not programming problems. I find its become all to common to be afraid or hesitant to actually write script. Instead you of programming you end up just gluing and ductaping a bunch of someone elses code together. I dunno where the happy medium is but I know that it's almost entirely related to programming budgets and deadlines.
Private methods are used in other public methods in the class. By testing the public methods, you're testing the private methods by extension. If the private method is complex enough to require testing in isolation, it's complex enough to have its own class with public methods, and passed in as a dependency.
slow down there Menendez brothers
The API is for email subscriptions. Just like a regular API that returns JSON. PHP doesn't have anything native to handle routing and it's one case where I feel like Slim is lightweight enough to justify it's usage. But theoretically it's simple enough to do routing for small applications with nginx/apache.
As someone who regularly works in CI3 by force instead of by choice I can only assume you have this view because you don't have enough experience with anything better. Extending CodeIgniter with new features, improving it with existing ones, or just things as simple as creating new CRUD controllers takes 2 to 10 times longer than with a modern framework. God forbid you want to use some kind of new package with it - you'll have to make interfaces and repositories for all the models to avoid breaking them and shoehorn your superglobal instance variable into every single class just to get access to simple data.
I would have fired the junior. After 1-2 years you should know the system backwards and forwards in some compacity. 15 years and still being a junior means somethings seriously wrong unless hes the ceo and only codes sometimes. If he is an employee on the floor writing code and hes been in the same cubicle for 15 years i would cut him loose.
you get why your got down-voted right?
Oh, had no idea until you intervened. People don't like the harsh truth. 
I mean, frameworks help with speeding up the development process in most cases. Which is both good and bad. Good in that it helps meet deadlines....bad in that it helps meet deadlines, which can end up with even stricter deadlines. I'm making a POS for my work atm, for example. The API is just a simple Laravel app with no front-end, and the front end is VueJS consuming the API. Could I do that all from scratch? Sure, if my boss wanted to give me 3 years to complete it. But when I look at the requirements, especially for the front end, "I need routing... and two-way binding...and templating...etc", VueJS is the best tool for the job (or React, or Angular, etc, I just prefer Vue). In my own personal projects I try and do as much "from scratch" as I can to learn. (Usually with including at least Typescript lol). 
what you said wasn't harsh truth. it was "fake news"
I have found Klein to be a very capable light-weight router, if that's all you're needing. https://github.com/klein/klein.php
&gt; I'm all for composition over inheritance, but I've yet to see one article that makes a decent case for using final everywhere by default. Pragmatism always seems to get lost along the way. 100% Agree. Everything is `fine` in the right situation.
Step 2: at least pretend your someone else posting about your product on reddit, this website is really sensitive about self-promotion (ridiculously).
So be it. In theory everyone is a genius programmer here. In practice, if one takes a look at answers that are given to simple questions here or in /r/phphelp, the picture would be not that bright...
I'm not a grammer nazi. I notice things but I certainly don't care enough to "correct" someone. But I felt the need to say that whilst I'm 99% sure you meant "onus" instead on "ownness" I *much* prefer your spelling. I feel it should be the correct spelling for the word!
Haha, I'm now unsure whether I should be correction that or not!
I do have experience with Zend Framework from a few years ago and currently working with Laravel/Lumen as a full time developer, also seen (but did not develop much) Phalcon as well. I know CI is ugly, but it does not take me any longer to create an ugly controller and a model with a few functions in CI with about a 100 lines of code than creating a validation middleware, controller, request transformer&amp;model for the boundary layer, the service interface, the service, the repository interface, the repository, the eloquent model, the factories for testing, the response transformer&amp;model and the final fractal transformer that I usually have to do in Lumen at the office job. For me it works out perfectly for the mentioned small/hobby projects where no other developer will have to work with the code and there won't be any changes in what database or what concretes I use later on. It just does what it is supposed to do very simply. And I don't have to bicker around with caching or much optimization as it's still one of the fastest frameworks. I don't **have to** do things right in it, I can just do things. I have experience with better frameworks, that's why I'm waiting for CI4. Anyways, I perfectly understand your point, but for me there is still room for the old rusty CI.
I don't know anything about the rules here but this was interesting to check out, just to see how others work
Over-reliance on third party libraries can certainly be a problem (depending on the project I suppose). I feel in large part this is because the PHP standard library is weak. It's a web language that has heavily embraced OOP, but doesn't have anything natively better than super global arrays for requests. If you started PHP over today, you'd have a request class for certain. But that's hindsight. As a result, I certainly use libraries for things I would be foolish to re-invent. Things like http request/response or uri routing that others have done better than I would. Nobody's got time to re-invent that stuff... BUT I certainly see some junior developers over-relying on third party stuff that should be done natively. A few weeks ago someone added a library to a project at work for some sorting functions. In that case I removed it and worked with the developer to do it themselves (I blame NPM for this mindset ;-). It's a balance. If you have time and can do it well, then do it yourself. If you can't, then start looking at some of your smaller dependencies' code and figure out how to do it and wean yourself off the superfluous stuff. 
Docker compose fixes that. Believe me. Docker compose and the fact that literally everything that has any business running on a server has a docker image these days makes it easier to run every component in their own container than putting it all into one. 
&gt; Help me break this mindset Compare your code to a state of the art federated autonomous nanomachine cluster: Your body. It's a *fucking impossible* to make a clean build and there's legacy crap everywhere.
It is an example yes. But a bad one. You should definitely create an own registry to store and process your strategies. 
Those who were born to crawl shall never fly.
I honestly don't understand. Of course one could write their own request and response objects, their own http or json writer, their own database connection class, but why would you? Those are solved problems. Solved multiple times over in a multitude of ways for every taste on earth, and no matter how good a programmer you are, the likelihood that you would miss some weird one in a million edgecase is so much higher than with a battle tested implementation. I mean, you don't refine the gas for your car from crude oil either, do you? So why would you want to do that for your programs. 
"s/he" is enough or just do not use pronoun to begin with. Its too generic in most cases. "they" for singular is not natural, if it was you wouldn't need to "correct" for using 'he' instead of they. Now it became mark of an asshole who thinks one can determine what expression others must use to conform to one's interests. It's been creeping in software engineer circles in recent years, mostly through HR due to corrupt humanities and strong grasp the far left through critical theory (neo-marxism / frankfurt school) and Post modernism (the mostly adopted line of thinking is that is no way to determine what is actually correct due to multitude of interpretations, therefor everything is a power-game as per Derrida suggested) from were the brainwashed new blood came out to "make changes to society", with little to no competence or knowledge (as demonstrated by "grievence studies" papers, which have proven that gender-studies are deepak chopra level woo woos.) Along with the trend to undermine meritocracy under the guise of compassion, to bask in admiration one has not proven to deserve. We already lost Linus Torvalds who simply didn't want to have none of this bs and stepped down from Linux Kernel development lead position. James Damoore was fired from Google for giving feedback to specific group he was asked to give. Essentially writing a well researched paper on how to help involve women in software engineering. Providing some actually effective methods, but oh my god, he did that by recognizing that women and men vary in interest and that same methods which work for men may not work for women. Ends up being punished for his virtue because he thought as engineer rather than far-left shill / activist.
Hey, wherediditrun, just a quick heads-up: **therefor** is actually spelled **therefore**. You can remember it by **ends with -fore**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Don't know how I feel about the statics. &amp;#x200B;
I have updated the code. Is it better now?
I think the reason the people are downvoting is because you refer to banality. A lot of what you've said seem to contradict every day requirements of the industry, which makes your position look like you've copy pasted from some quote on the internet rather than point coming from experience. For example you claim: &gt;Programmers solve problems. However, this introduces contradiction to previously stated: &gt;Whereas a programmer has a natural disgust towards repetitions and always trying to optimize the code, to reduce repetitions, to improve the maintainability. Although it even contradicts to previously stated: &gt;So they proceed to build a Great Wall of such existing bricks never trying to invent a brick of their own. The bricks are the solution to repetition. It's like there is no other problems to solve so you can concern yourself with re-building a router. It's actually stupid endeavor, other than perhaps for exercise and yet you may find better way to spend your time if you want to improve. Chances are you won't make anything better than entire community managed through years of work, rigid usage and testing. You do sound like a person who was a freelancer making small gigs for small business clients and how just got into enterprise product based development and seen the light. And now trying to preach things which are quite.. well, obvious for the rest of us : l
There is no state. It is a class with helper functions.. like function library.. static is fine in such a case (in my book), because it is testable. BTW, congrats on your argumentation... I love it! ;-)
Maybe learn the paradigm before bashing it. Stateless services says hello. [https://en.wikipedia.org/wiki/Service\_statelessness\_principle](https://en.wikipedia.org/wiki/Service_statelessness_principle) relied heavily in OO.
Since you're changing the code while I'm writing an explanation I'll try to hurry: NO
Look, overall, I agree with your sentiment but I think you do your argument a disservice by using this argument: &gt; you don't refine the gas for your car from crude oil either People don't refine their gas because it requires specialized knowledge (expensive) and equipment (expensive) across multiple disciplines. Not because someone already did it.
Hey CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
Not sure if r/crusaderkings is not leaking
That is true. 
Why?? PHP is a template engine itself controller.php &lt;? $text="Hello"; $count=2; include("view.php"); ?&gt; view.php &lt;html&gt; &lt;head/&gt; &lt;body&gt; &lt;?=$text;?&gt; Counter &lt;?=$count;?&gt; &lt;/body&gt; &lt;/html&gt;
DEUS VUuuuuuul.... I mean Final Class
You could shrink this by at least two lines: &amp;#x200B; \`\`\`php public static render(string $template, array $data, array function = array()): string { return Template::renderChildren(Template::createSyntaxTree(Template::tokenize($template)), $data, $functions); } \`\`\`
Intended r/TitleGore
The only criticism I would have is that could use some sort of HTML library or template engine to build your HTML instead of having a bunch of strings in your code.
Hi, could you clarify what you mean with "HTML library or template engine"? &amp;#x200B;
Sorry dude, but I can't understand why you are promoting a github repo which contains a file with 2 functions. If you really want to start a project than structure it as oop and use guzzle as http request wrapper. 
Something like this: https://github.com/ellisgl/GeekLab-HTML (For the love of Jebus don't use this one!) or a template engine like Latte, Twig or even something like this: https://www.reddit.com/r/PHP/comments/ajue1y/php_templating_engine_in_165_lines/
Much better. I would further suggest a constructor in the registry to initialize it with an array of strategies. More over you can now use Dependency injection to initialize the strategy registry as service. 
Oh, alright. I'll definitely look into it, I just dont know how to code something like this right now ;P
This implementation is for user-defined templates. For security reasons you don't want your users to provide the PHP code to you. This templating language on the other hand is safe.
[*A parent may kill its children if the task assigned to them is no longer needed*](http://www.neobytesolutions.com/fun-truths-that-only-computer-programmers-know/)
I bet Google never indexes that
PEAR is a fossilized a piece of fruit that a dinosaur crapped out from the Cretaceous period. Legend has it that the dinosaur died shortly thereafter and it's fossilized remains were found never the pear poop. It'll never be safe to eat.
Title reminds me of &gt; [*“A parent may kill its children if the task assigned to them is no longer needed.”*](http://www.neobytesolutions.com/fun-truths-that-only-computer-programmers-know/) Looks like the children fought back!
Alright, thanks.
I've used mustache templates when I need users to build templates. Seems like similar syntax as well. 
You should check out PSR-2. That code is really hard to read.
Statics are probably fine, I also sometimes catch myself starting a static class while prototyping, but keep in mind: - "There is no state" is one of those things that change first once you start writing version 2, and you figure out what options and configurations you want your thing to have (for example: plugin tags and behaviors? cache config? etc.) - State is not the only purpose of OOP, but also behavior polymorphism. I.e. if you define the interface of your template library, you may find yourself reusing this interface with other similar engines (whether for the same syntax, or a subset or superset of it, or templates with different syntax etc.). So up to you, but it's as easy and performant to write a normal class, rather than make it static. So if there are only wins and no drawbacks, as there are honestly here, people tend to go with it. Static methods have their place in situations where you would truly never ever have state, like the infamous "string utils" class everyone has (which is either functions, or static methods) and all its variations (math functions, scientific functions, domain utilities etc.).
It's called the expert beginner, be careful not to be stuck in it [https://daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner/](https://daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner/)
If internals would let me on the list I can post this for review: https://github.com/ellisgl/PHP-RFC-Static-Class-Type
/r/tinycode/ =P
Whatever your point is. You missed it.
Yes but I'm pretty sure this wasn't the point, especially because there's some attempt at formatting even though it's messy.
Yeah, everything touching and different spacing is annoying. Mine comment was about the LOC. I think I've seen smaller, like: https://github.com/liuggio/sized140
In init_bootswatch_stylesheet(), no need to duplicate all of those lines. Do a function call + switch { ... } on theme, return the corresponding fragment to bootswatch path component or just return the literal value. As complexity grows either you deduplicate some of the redundant code or it becomes an unmaintainable mess. Also, based upon CODE_OF_CONDUCT.md I find my criticism ineligible because I tend to view code in its human form and right now that guy's gotta shave off some pounds. ^/s
Hmm frankly I'm not sure how that helps.
It's more of having the option to be more strict about code seperation of stateless procedural based code. 
I sound like a person who answered several thousand questions on stack overflow and knows what I am talking about. When it takes to just "rant" topics - oh, everyone is bright and genius. When it takes to practical matters when you need to know what are you talking about the situation is different. So as this is a rant topics, lets just agree to disagree. See you in a technical topic. Cheers.
However, there's no point to strictly separating it. You mention "separation of concerns" in your RFC and the "concerns" in that principle regard the domain, not the type of symbols and definitions you use in your code. What you want is akin to wanting a public-only class, or private-only class, or method-only class. It's not something that's really necessary. If you want to have less things in a class, have less things.
I thought other languages did have it. It appears that C# implements it this way: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-m If it gets a cold response, no biggy. As the doc says, we can sort of already do this. 
Just use Symfony components. Only the ones you need. Nothing more. Nothing less.
Also I have 2 others I want to propose. 1 being on the same level as static class and the other introducting the struct type. The struct type is definately something I would definately like to see.
Had two questions but answered them myself, function aliases to isolate from PHP and errors in the render for the user's convenience. You should've really put the purpose (use defined templates) in the title, as by default people perceive it as programmer defined and like wtf at first.
&gt; programming suddenly turned from writing code into simply sticking lots of components together. So you end up with 20,000 LOC in 3,000 files, to do a job which only needs 200 LOC and a single file. It's been that for quite literally decades - operating systems exist in large part to provide common components to help programs run and interoperate. PHP exists to tie together various external libraries' components and some internally-developed ones and offer it up for end-users. Linux provides components of all kinds. A Linux distribution takes the Linux kernel and pairs it up with a whole suite of other programs, libraries and components to create a proper OS that can offer the full feature set expected of a modern OS. PHP came to exist as a way to make it easier to interact with various external libraries rather than having to cobble it together in C yourself, and still today the PHP interpreter relies on third party libraries to provide various functionality. Trying to avoid unreliable dependencies like those that don't have a huge backing and/or proven track record is entirely fair, but being 'against frameworks, libraries, etc.' while using PHP (or basically any interpreted language, or any language at all with a big standard library, or basically anything that isn't a microcontroller) seems a lot like setting an arbitrary cutoff point for when tying together existing components stops being OK.
Changed a bit.
&gt; klein.php is a fast &amp; flexible router for PHP 5.3+ :/ 
&gt; email subscriptions Is that *all* you're doing? Why not push that off to mailchimp?
Well I don't have to read beyond the title. I'll get on it immediately safe in the knowledge the internet told me so ;-) In all seriousness though, "always use final" is like any other over-simplistic reasoning. There will be situations where it won't make sense and doing the right thing will bite you too.
Thank you.. fixed it.
Oof
Is there a reason you're not using something such as OAuth2? There are PHP libraries out there, that will get you up and running with API auth pretty quickly. 
* You should add examples and images. It is not clear what it does * You could add more documentation straight into the readme.md * You should remove the code of conduct, it is politic and we are developers. * Since it You must add your code inside a class with a proper namespace * You could add to composer / packagist For example, it is my git (amp template generator) https://github.com/EFTEC/AMPGeneratorOne The class is defined as follows: ``` &lt;?php namespace eftec\AmpGeneratorOne; // &lt;-- your namespace class AmpGeneratorOne {... } // &lt;-- the code inside of a class. ``` There is a file called composer.json, you could learn about it (it is about composer/packagist). When you have it, then you could add your project to https://packagist.org/ (it's for free) so devs could install your library using the next command: &gt; composer require amazonshitcarshow/bootstraphp 
If you aren't able to use something like JWT or OAuth2 (password grant client can be used to easily get started), then it sounds like a pretty decent solution. However, it'd still recommend using a standard such as JWT or OAuth2 as these have been tested thoroughly. IP lock may be a good idea anyhow if you want every safeguard at your disposal. It all really depends on how sensitive the data is.
Whatever you do, follow OpenApi Specification https://swagger.io/specification/ (formerly known as Swagger)
if $text is user input then it must be written as follow: ``` &lt;html&gt; &lt;head/&gt; &lt;body&gt; &lt;?=html_entities($text);?&gt; Counter &lt;?=$count;?&gt; &lt;/body&gt; &lt;/html&gt; ``` Why?. let's say that $text="&lt;script&gt;alert('hi');&lt;/script&gt;" 
Thanks
If I've learned anything, it's that years don't matter. What matters is your thought processes, speed at which you can learn and ability to solve complex problems. Some people will never be senior level, no matter how many years they have under their belt.
``` private static function applyFunctions(&amp;$value, &amp;$parts, &amp;$functions) { return $value; } ``` It's cringe not because the function is static (I'm ok with it) but because of the number of arguments passed by reference. * $value is returned as a reference and as a return value. why?. * $parts and $functions are not modified. 
It is exactly my problem with most libraries (and it is the reason why I don't use Laravel), they are bloated!. Also, dependency = bad. So I create a set of libraries that want to achieve the next task: a library in a single (or a few files) with no dependencies. My current project has 12 external libraries (only 32 PHP files) versus +300 that uses Laravel (for a simple hello world). 
Oauth2.0 framework are designed to share ressources with third party application. It seem to be a perfect use case for you.
It's not until 1/2 through is there PHP programming and its disappointing, piles of procedural code, echoing HTML code, 1000+ line files. The majority of this video is Python programming, so if your getting downvotes, this will be a reason why. 
&gt;$parts and $functions are not modified It is a performance optimization to pass a reference.
So I was tired of using monolithic "validation" classes to validate user input. The code usually smells when I do so. &amp;#x200B; I have tried putting together a library which creates immutable value objects out of your input data and uses specific validators to validate them using rules. You can simply include the VOs as data for your model classes. If the validation fails, it returns an InvalidArgumentException. &amp;#x200B; Any feedback/suggestions are greatly appreciated. Contributions are warmly welcomed!
Struct type, if it has pass by copy semantics like arrays - yes that would be a total game changer. 
Hi! Thanks a lot for your feedback! I have added some examples to the wiki section of the GitHub repo. Also, the code of conduct is only a thing because it was on GitHub's Community Score checklist. I have checked yesterday how to add the wrapper to composer and I think that's what im going to do today. (My username is a pun - it can be read as amazons hit car show [ref: The Grand Tour] and as amazon****carshow) :-P
Yeah I realized that too, thought the URLs would be different when I started work on that. Will simplify it asap.
You could probably manage the visibility of the menus in the template or the controller without going to the database. Probably have the menus link to screens showing details of what you’re providing analytics for? /s And you should probably post this in /r/phphelp or someplace similar. 
Not sure why the menu items are taken from a database. Do they change often? Either way, a menu item will generally link to yourcode.php?user=abc&amp;action=123. Your code then needs to verify that the user is indeed logged in as abc, and that user abc is the right permission level to be able to see page 123. Or the menu item will link straight to page123.php?user=abc, if you prefer. Then you just need to check the user and role before doing anything else. And yes, you need to check the user's logged-in status and role permission every time you load a page. So that's the first function you need to write, in order that you can call it every time. And not just on actual page loads, but also on transactional URLs. Eg, someone fills in a form to create a new record, which then leads to commit\_record.php. A malicious person who knows the URL for commit\_record.php could call it directly, without submitting the form, so that page needs to check security too. &amp;#x200B;
One thing I wish PHP had was single class being able to extend multiple classes (thus reducing the size of your parent class)
There is client side validation, done using HTML + JS, and there is server side validation, in your case using PHP. Which one to use depends on the form itself and the use case for the website. For example in PHP you can do a simple if statement... If($_POST['name'] != '' &amp;&amp; $_POST['email'] != ''){ //Process form }Else{ //Redirect with message } Now with HTML5 you can add 'required' to the most common input types and the browser will automatically highlight any empty field on submission saying that it must be filled in before they can submit the form. I usually do both client and server side validation just to be sure, if the front end ever changes and for some reason the client side validation disappears , you still have validation at some level.
Thank you it’s the one you have written above I believe but in my book I am seeing preg match being in name as well as test input something it just makes me so confused 
I would be careful with the IP-based lock. Several times happened to me that this caused many troubles - etc we had payment gateway, locked to the IP, we moved production server and developer doing that did not know it is locked to IP and payments stopped working :-). Another example, Heroku has dynamic IPs of dynos by default, so if API consuming client is run on Heroku, this might be a problem.
Final classes make unit-testing with mocked dependencies unnecessarily hard though. &amp;#x200B; [http://docs.mockery.io/en/latest/reference/final\_methods\_classes.html](http://docs.mockery.io/en/latest/reference/final_methods_classes.html)
Preg_match is just a regular expression testing function to find if a given variable matches your regular expression. I very rarely need to use these, see a lot of people using them to validate emails etc but one of the nice things I've discovered over the years in PHP are filters, check these out: http://php.net/manual/en/filter.filters.validate.php Now you can be sure you have a valid email by using if(filter_var($email, FILTER_VALIDATE_EMAIL)){ } To note though for client side... If the input type is email then the browser will not let the user submit without a valid email address 
I stand corrected about other languages. C# honestly has a lot of features that could be not there. Like partial classes. It adds a lot of complexity over time, they don't have the discipline to keep things simple. But maybe I'm wrong.
1. Be consistent everywhere. Use a unified request and response format, use json 2. Don't try and invent your own auth scheme 3. Before you write any code, write out your resource routes and methods 4. Try and make it RESTful 5. Use appropriate HTTP status codes for errors There's a great (short) book I'd recommend called "How to build APIs you wont hate" by Phil Sturgeon. Dedicate a day to read through it before you start, itll get you thinking about things you probably haven't considered yet. Good luck 
IP locks is a terrible idea. If your customers use a reasonable setup, they'll serve behind multiple addresses. Even multiple clouds if they're big retailers. If you're using laravel, make use of Laravel passport. Otherwise thephpleague/oauth2-server is the standard. Do make use of the oauth protocol. It is the web standard, and makes it a lot easier for other devs to understand.
Checkout [Laravel Lumen](https://lumen.laravel.com/). It's a great tool for developing API's...
and you've had no luck with sites like Indeed, monster, linkedin, workable or even github jobs ???
&gt; I sit here as I watch composer install thousands of files for a simple Slim JSON API. And then I realize I am completely dependent on frameworks and libraries. Help me break this mindset. First, there's no such thing as a (good) *simple* JSON api. There's a lot of moving parts, and a lot of ways for it to get wrong. I've worked on projects where people decided to roll their own router, request handing, validation, session handling, serialization, etc., etc., (never all of those at once, thankfully) and it's not a good time. I'm capable of implementing every one of those pieces pretty well, but I don't have the time to do that, and frankly, I wouldn't want to even if I could, because those sorts of things are (to me at least) really boring. Twig is a fine template library, I don't want to write my own, and I'm feeling bored just thinking about how tedious doing so would be. I absolutely recommend looking into what Slim (or your framework of choice) is doing, and maybe even trying to reimplement bits of it as a learning process; I think that'll help dispell the notion that it's "just a simple X, why do I need all these files and libraries". Second, a good framework (and Slim is pretty good) will be modular, and where possible, use relevant standards like PSRs. If you can drop in a replacement router, or PSR-7 implementation, or logger, or template engine, you're not really dependent on the framework. &gt; In the early days I was mocked for not using libraries and frameworks. Mocking doesn't sound productive, but *obviously* not using libraries and frameworks makes you vastly less productive and much more likely to ship basic bugs and security issues. If you're trying to do serious work, then this is simple not something you can afford to do. &gt; Today I feel like I've wasted so much time learning to use the frameworks and libraries that sit ontop of the language that I've neglected the language itself. &gt; Yesterday I dumped in the Respect Validation library to validate 4 pieces of data from a POST request. Basic validation. I realized what I was doing and ripped it out and write my own validation which was easy enough. So you spent some time solving the problem, then you spent even more time *re-solving* the problem. Was your custom solution...better? Faster? Do you have some reason to think that your hand rolled solution is more secure and reliable than the most popular validation library on Packagist? I mean, yes, if you can write some code to do something faster than it would take to grab it from Packagist, and your confident the end result will be as good or better, totally do that; libraries are there to make your life easier. But here you...seem to have made your life *harder*? Why? &gt; I don't know if it's just me, but this dependence has made programming less fun because I'm no longer solving problems (which is why I enjoy programming). It's more like piecing a jigsaw together and hoping it doesn't break. Bluntly, that description is objectively wrong. Not re-inventing the wheel over and over means you have the opportunity to solve *different*, higher level problems. Some people enjoy solving those high-level problems more (me!). Some people don't (you, perhaps?) But unfortunately, your employer almost certainly cares only about the high-level ones, so I would suggest you focus on trying to see the bigger picture. There's way more to this than piecing a jigsaw puzzle together; get a big better at that, and you start to just *assume* that you'll have a functioning validation library, or whatever, and then you can focus on solving the important problems that people will pay money to solve. Being a programming isn't really about installing a library from Packagist, and it's *certainly* not about re-implementing a library from Packagist. If you're feeling like you have a choice between these two paths, you're not seeing the forest for the trees.
If you're implementing an API check out this list about things to consider/implement: https://github.com/shieldfy/API-Security-Checklist
Really? It's not 2001 anymore.
That's....simply....wrong. If I was interviewing someone for my team, and they expressed that viewpoint, that would be a strong "no hire" recommendation from me. &gt; After 10 years of using PHP I should by now have my own libraries that I reach for and be reusing my own code. *God* no. That's not how programming works. Anywhere. For any language. And it's certainly not how it works in the corporate world. Where I work, we're not hiring people to badly re-implement their own Twig/FastRoute/Guzzle/Monolog/Doctrine/whatever. For one, we're already *using* those tools, and we need the people we hire to use them too; you can't have every dev on a project decide to use their own homebrewed library; if the project is using Doctrine, then just go ahead and use it; don't pull out your own custom ORM because 1) it's probably not as good and 2) even it it magically was, the next dev to work on this feature is going to be completely lost, because they're going to know Doctrine. Which brings me to the second point: We're hiring people solve problems. We need to process payments, take orders, display reports, &lt;insert business requirement here&gt;. Template libraries are a solved problem, so that's not something you're going to get paid to do. New hires will be expected to learn standards tools; senior hires will be expected to know (or be able to learn very quickly) standard tools. &gt; Laziness and reliance on other peoples code is the reason why I'm not. No, it's probably the fact that that's a ridiculous goal that would achieve nothing. "Man, after 10 years of driving, you'd think I'd know how to forge my own car out of iron ore, coal, sand, and rubber tree sap, and the only reason I don't is because I'm lazy!" No, actually, after 10 years of driving, I'd expect you to be really good at driving.
Lumen + Auth0 youll be laughing !
I suggest you [API Platform](https://api-platform.com/), so easy to use
Of course,sanitizing users inputs and outputs is essential,my point here was though to show how easy it is to use PHP as a template engine in two lines of code...
Don't do that. Php generally uses copy on write for these things, so you're just cluttering your code.
Trying all channels. The generic boards like monster and indeed aren't great for developers. 
Good point. Let me clean up the code!
Made me laugh, thanks :-) I _am_ immersed and in fact facing the daemons. For my salvation, I'm actively refactoring it constantly to get rid of it. Kind of like in Alien, breaking things up from the inside. For example, I realized I don't need to use the abomination which calls itself ORM, I installed Laravel (but only the database part) and rewriting things, giving me better performance and sleep. 🤡 I'l drink to that day I can get rid of that Framework out of my life 🍻 
Shoutout to Laravel and Passport which we also used for something similar, got up and running within 15 minutes it was so easy. 
IP ranges can also be used. Anyway - chances in our case for the customer using dynamic IPs are close to zero, we know what kind of solutions they use.
Thanks - but we can't switch or use Laravel, the whole project uses a bespoke framework. Going to explore it though for my own project.
Looks interesting, will check. 
Company and clients data is always sensitive. But not the credit card or health kind, just business data. We will be looking into both OAuth2 and JWT, I'm quite in favor of JWT but we'll see. Thank you!
I wasn't aware of the thephpleague/oauth2-server , looks really nice and easy to understand. Will dive into that. Thanks! 
Thanks! Will check the book. Anyway - it looks like for now we will be postponing the API. It's a massive project and it looks like we can't implement that straight away due to work time constraints. And it needs deeper analysis of the right solution. We will be using alternates for the moment - a downloadable orders CSV file that they can import manually later, and a custom web ping for new orders.
Laravel + passport. Laravel is great MVC framework for PHP and passport is a great Laravel package that gives you an oauth server. Works right out of the box. I highly recommend it. 
Yup and Laravel passport is built on top of the PHP league/oauth2-server
It is just Indian blog spam.
No particular reason not to use it, as of yet. (been also researching JWT a little) In our case it seems we might have to postpone the API as it is going to grow into a large project and needs to be tackled properly. Since most big platforms use OAuth2, at least for third party authorization we might need that which is what OAuth2 is built for. We do however have our own framework and authentication module so we have to see how to blend these together. For now we plan to offer downloadable CSV export of orders + a http ping that will allow our sellers a quick start, until the API is working. 
I've heard good things about that. However we so have our own bespoke framework and mixing that with another framework might not be the right solution.
Appreciate the info
Sounds like a very easy way to do it. The thing is we do have our own bespoke framework. This would mean using 2 frameworks at once, which might not be the right solution. We can, in theory, separate the API (it is a separate application anyway) and use your suggestion but we would prefer to explore options that would allow us to use existing framework and simply add the needed extensions to that, such as OAuth2. Otherwise yes, perhaps the quickest way to get it running.
Nice checklist, bookmarked and read, will get back to it.
The real question here is not how to but why should you? This is a terrible use case for php. There is no reason to make an http request when simple JavaScript can do the same thing 
Yeah in that case I would suggest checking out thephpleague/oauth2-server as [SnowyMovies](https://www.reddit.com/user/SnowyMovies) suggested.
For the moment at least, it seems indeed to be the most logical move.
Why #2? Checking a key inside a middleware isn’t that hard unless I am missing something? 
Well, I just copy in this case the code from Opencart, (I regard it as a safe project) so I don't see why it could be a risk, but I will take care of that
Just curious what kind of company is this for? I mean no offense but your experience in this topic seems so light I'd feel iffy trusting anything you come up with. If you have some budget an outside consultant may make sense to oversee or to train your team, not that I think it's a complicated subject but it's important to get right and without in house experience you're very likely to make a mistake. If this is a light small project where if things go wrong (either it not working well or security breaking) you can work with your vendors maybe you can tackle it, but if getting it wrong will cause hardships I highly recommend finding an experienced resource.
Just because something pre-exists does not make it good :) PHP made a function to do this as secure as possible, so developers should use it. Just because Donald Trump exists doesn’t make him worthy of president (just like custom password checks)
Without PSR 7 and no middlewear it definitely feels stuck in the 5.3 era. Glad I dumped it for Slim.
I don't get it, either. I don't want to write routing-request-response in every project I work. In the end, I will need a lib to do it, correctly, right and fast. I could write it by myself, for sure. But this isn't important for the project, the importance relies on business rules. So I don't have any problems on using Slim, for example, to handle it.
do you know for sure that your users will be accessing the API from static IP addresses? if your API is going to be consumed by automated users (i.e. scripts) there is a good chance the IP will change regularly. 
&gt;Vinish Kapoor is a Software Consultant, currently working in a reputed IT company in Noida and doing blogging on Oracle Forms, SQL and PLSQL topics. He is an author of an eBook Oracle Forms Recipes, which is available on Google play. nice
I'm guessing so its easy for 3rd party programmers to understand and make use of the API easily. 
&gt;public **static** function oh yes, I was expecting this
Because you said sandbox ... &lt;?php $sandbox = new \sandbox\Runtime(); echo $sandbox-&gt;enter(function($title, $greeting){ include ("template.phtml"); }, ["Hello Title", "Hello World"]); ?&gt; template.phtml: &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;?=$title; ?&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;&lt;?=$greeting; ?&gt;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; The sandbox in runkit is broken/not implemented for 7 ... [sandbox](https://github.com/krakjoe/sandbox) only supports ZTS builds of PHP, and so limits use ... 
Yes.
I perfectly understand your concerns, but it's not the case. In fact I expected this comment. We don't underestimate the depth of security issues (never did). Otherwise we would had trouble with production sites running for 10 years already. Full audits are also planned, so are various level of compliance, etc. But each thing at their time. I was merely looking for advice as to the best practices only for API, which we haven't yet tackled (for certain reasons, none of our projects required an API so far). That's where indeed there is little experience yet hence this post. But it is one thing to try to make things barely work (and risk a breach), and another to be aware of what your actual level of information is and become knowledgeable including seeking external assistance. Little knowledge is worse than no knowledge. Each person has their areas of knowledge and there might be boundaries but you move that boundary each time you get trained in a new zone. As to believing that there's little experience in anything else security related in this project, you're making an assumption there - and it's simply not true. But things have to be taken one step at a time. You get the MVP first, then beta, then... etc. You get casfhlow, extra investment, move to stage 2.0 and so on. For now we only work with a couple customers to begin with. We have strong relationships with about 20 large vendors. Most are willing to sign; as of today. They know what we're capable of. We're meeting a couple next week. We will be starting with 1-2 partners first, ones we know and have a strong relationship for about a decade. The next stages of customers will roll in gradually. They also don't need the API immediately. Once the sales start rolling, so will additional streams of revenue and that will simply ignite the project further and we will begin spending more in this area.
https://apigility.org/ Worth checking out apigility. You can create the basics very quickly indeed. I saw a talk on it at a php conference and it seemed good but I’ve not used it in the real world yet. 
Yes, we know that for sure. Side note an IP range might also work nicely.
Client side code should be handled by a client side language.
https://github.com/ellisgl/PHP-RFC-Stuct-Data-Type
&gt; I'm all for composition over inheritance, but I've yet to see one article that makes a decent case for using final everywhere by default. Pragmatism always seems to get lost along the way. What about instead of "use final everywhere by default", you thought about it as "favor final over not final"? Though preventing the use of inheritance is a side effect of making a class final, I've always understood the primary benefit of favoring final over not final is information hiding. I've found that making classes final helps to reduce complexity because it forces me to think about the problem at the interface level as opposed to implementation details. When I am designing my classes, it forces me to think about the interface of a class before implementing it because I know that it's my only extension point and that if I have to mock the class in a test, it's going to require an interface. &gt; In practice I've had multiple 3rd party packages who implemented final for classes I wanted to extend. Resulting in a flat out copy and rename of the entire class in the project. I've had this a couple times with third party code but with my own projects I run into it all the time, which I consider to be another benefit because it's an opportunity to practice my refactoring skills and iterative design process. 
This is a Zend product, right? Looks definitely interesting, like a short path to getting it done. I wonder though how this works in a distributed environment though.
I recomend https://github.com/mevdschee/php-crud-api a Single file PHP script that adds a REST API to a SQL database
Hmm, it's immutable. That's a significant drawback, I think. We can already have immutable structs as objects. But copy-on-write is impossible. A struct with this property would be a major win for PHP. Check how Swift does it, for example.
Since discussing with you, I went and checked the API docs of our biggest competitor. Was curious if they use OAuth and whatnot. I was in for a shock. There's no pro level authentication there, they use something like base64encode ($user.'|'.$pass) to make the request. Not even a goddamn token, separate API user id, scope, client type, whatever. Just straight use of login and pass in the request. 
I've worked with tons of companies directly often involved with sensitive user data and have seen some bad things like this. Again I meant no offense by suggesting you seek outside help, but it's all too likely to see horror shows like you just did. Without knowing anything about your team other than you've posted I think it's a suggesting I'm sticking with. Of course if you're confident you're free to ignore it but I always err for caution.
Well,If you stick to simple functions in your template you'd bei fine. 
Second this, I was skeptical of the magic, but it's the good kind of magic that easily easily tamed, easily extended and extremely fast to develop RESTful APIs with
&gt; I've worked with tons of companies directly often involved with sensitive user data and have seen some bad things like this. Again I meant no offense by suggesting you seek outside help, but it's all too likely to see horror shows like you just did. Without knowing anything about your team other than you've posted I think it's a suggestion I'm sticking with. Of course if you're confident you're free to ignore it, you know your team best. But I always err for caution. No worries. I'm with you on that and it's sensible advice. I have 30 years of coding behind, and I've worked with large firms in the past and seen my share of bad things as well. Was thinking about these guys. I think they actually see the risks as minimal. Note, this is a 2-party, not a 3-party scheme, meaning there is only the website+api and the client is usually the seller's CRM or stock inventory software (most firms use in-house standalone stuff). So there is no middleware involved. Due to this, they simply went with basic authentication, ssl on top of that, and that's it. The sellers who have access to API are approved manually and the IP ranges are also monitored. But still, damn, not even a bloody token there? 
Here is a series of questions I would ask to determine the right solution for the problem: 1. What kind of API is it going to be? Is it a data source for consumers? Do we have to accept or just serve data? If we have to accept information: what kind of? What do we have to do with it? 2. Who is the targeted audience of this API? The world? A limited set of consumers? Anyone who registers? 3. What are the operational constraints for the API? Performance? Security considerations? 4. Roadmap: do you have to provide something quickly? What's the plan with the API? Is it some quick solution which will be replaced with a more robust one in the future? &amp;#x200B; Answering these questions should lead you when choosing: * a format for your API: RPC, REST, whatever * authentication methods * framework Decisions you **shouldn't** make upfront: * Framework: Application hardwired into a framework is cancer. Don't do it. Design your application to be framework agnostic, then you can use whatever framework you want. It's easy to start with frameworks, but a year later will be considering suicide. * RESTful: you can't decide the format of the API before knowing your data and behavior you support. Most "RESTful" APIs are just RPC solutions called RESTful. Delay this decision If you need something quickly create the simplest version of everything. If you have a limited number of users, a hardcoded list of API tokens will do. Personally I don't like IP locks. It's comfortable for the provider, not so much for the consumer.
&gt; And if you stick to simple functions in your template you'd be fine (probably) You'd have to define those functions first, in the sandbox ... it has no access at all to the parents user code, none, no matter what tricks it tries to play ... because sandboxed :)
IMHO you are asking the wrong questions here. You should be asking: why do I need a framework? how does it help me? The problem should define the solution, not the other way around. This is exactly why every new software nowadays starts with installing a basic framework kit instead of drawing on a piece of paper. Before Composer or package managers bringing in a new dependency was a result of a careful decision. Today it is just a single command. It became so easy, we don't even think about it if it is necessary or not.
What could you possibly use that for? Terrible code.
Thanks. This is good advice and an useful roadmap. Will proceed accordingly; in fact we already figured this much, we need a proper plan in place. As to a quick simple version of everything, it's not a problem to build that if there's an urgent need. 
3 reasons: 1. Don't waste time reinventing the wheel 2. Don't risk a bad implementation being a risk for you or your api consumers 3. Ease of integration 
I've maintained OpenAPI specs for multiple projects in the past year, and I would not say that it's a must have. I can't let our client devs use the auto-generated libraries because there are some complex data relationships that can't be modeled properly with OpenAPI. (They also didn't want to use those, so it wasn't really an issue...) It's probably okay to use if your API is simple. The only reason I still use it is because I find it's faster to document with OpenAPI and display with Swagger UI than to write it out in a Sphinx doc.
Build a reusable method for both front and backend to check the permission level of the user. If you're firing off data in an API or Form ensure that before anything is submitted, you determine if that user is allowed to do it. For the front end just set up a permission system of some sort. Then check against that. Don't just use if statement checks all over the place. Look at something like an ACL Permission System. Makes it far easier than adding new conditions to all your if statements when something changes.
I was just about to say: You only validate user information for logins and registration but it is nice to see a way to create our own. &amp;#x200B; Question: Why an abstract class as apposed to an interface for extension and creation of our own validations?
I had a look at [speech.php](https://github.com/m-nathani/speech_to_text/blob/master/speech.php), you might be interested in [silly](https://github.com/mnapoli/silly) to simplify the definition of the Symfony command.
Additionally make sure errors messages are verbose
alright cool, i will work on that. thanks !
If you do IP based, allow them to specify more than one IP or IP range. Dev/staging servers arent always in the same subnet. Personally also would prefer to just specify specific servers only due to the plethora of things I have on my CIDR blocks.
You can easily set up a Laravel install with Passport inside to run alongside your existing application. This will only take a day or two to set up. If your DB is something that PDO has an adapter for, you can map your resources to Eloquent models, and you can easily return records or collections as API Resources. This is absolutely the better route to go: OAuth tokens will provide you and your consumers a much higher level of security and it really isn’t that complicated.
Sure, that makes sense. Also, perhaps even by hostname and resolving that. Some might want to use hostnames.
I wouldn't use IP white-listing, since the group at a client that knows about an IP change may not know about your API and vice versa. Black-listing an IP after a few fails would be a good compromise. For B2B stuff I've used either basic authentication with a separate API login, or an HTTP bearer token. With generated username/password pairs basic authentication is semantically the same thing as a bearer token. Some libraries have built-in properties to set basic authentication, so that might make your solution a little easier for the caller. A general musing on sales APIs: I've worked with Amazon MWS and Clover. In most every case, management wants a live feed of data but all the system offers is some form of polling. What you end up with is the client polling the living shit out of your API trying to get closer to real-time. The whole arrangement is inefficient on both sides - what you need is something event-based. I've used ActiveMQ in small inter-company setups before, but not in anything where I wasn't the coder on both sides. 
bro, silly is awesome.. i have updated the [speech.php](https://github.com/m-nathani/speech_to_text/blob/master/speech.php) , do check out :D . Thanks for the suggestion.
&gt; The API is for email subscriptions. If that's all it's doing do you even *need* a router? If the API only had a handful of RESTful endpoints and its not in danger of getting far more complex, I might just let PHP be PHP and implement my endpoints in a file-based methodology. If it's a RESTful API, just sniff the HTTP verb to decide what course of action to take in the requested entity. For me, I feel like request routing is a problem that others have solved far better than I can. If I really needed routing I'd choose one and go on with the business of making the rest of my project awesome. If I roll my own router then I've got to maintain it. Which may be a good mental exercise in some ways, but if I can't do it better than its already been done, I feel like I'm wasting my time and my client's money.
&gt; PHP is a templating language [Not a very good one.](http://fabien.potencier.org/templating-engines-in-php.html)
Do you any other programming knowledge?
Good resource is w3schools.com and if you want a place to try things out www.tutorialspoint.com/codingground.htm has some online test environments.
That is mainly for providing some sort of "backwards compatibility" which I do plan to remove in the future, there has been a lot of recent changes which do render the abstract class obsolete. When I did create the abstract class, I had something else in mind, which is solved after moving to the Result-Error approach. &amp;#x200B; You can still use the interfaces (recommended) to create your own validators. The abstract validator simply gives you the success() and failure() functions. 
Yii 2 made this rather easy in my past experience. Both for MVC and API
Of you're just starting learning, why would you pick php? 
I think I definitely understand where you're coming from. If you haven't spent time creating bootstraps for projects in modern frameworks, coming from something like CI it probably seems like 90% of your work is writing boilerplate. It's just that the way I see it, any small project can end up becoming a big project that I'll end up wishing I had used something more robust to start with.
I found w3schools pretty helpful with learning PHP. Though if you've got some extra cash around I also got a course of Udemy which was extremely helpful with learning as there was an instructor and Q&amp;A zone 
It's a good general purpose language accepted at most shared hosting platforms with minimal maintenance. In terms of personal skill building, its a good confidence booster with the plethora of simple tutorials that you can stitch together to form a working prototype or project.
If you have some baseline of programming knowledge, frameworks tend to have comprehensive documentation and tutorials. The framework I first used at work and learned PHP with was called CakePHP, which has they refer to as their [Cookbook](https://book.cakephp.org/3.0/en/intro.html), that is a very readable guide that walks you through all the steps of building an application, including connecting it to a database (which is separate from learning PHP). Some people in this subreddit may tell you that certain frameworks are better than others (e.g. Laravel is a really popular framework right now). I haven't used it so I cannot comment on it. But I'll say this: it doesn't matter which framework you learn, pick whichever one has a good enough tutorial to help you personally learn PHP and accomplish whatever task you want. Once you actually write some PHP and use the framework you have chosen you will have enough experience to go back to the internet and read about other frameworks. Don't sweat it before then.
If you can only add something like this, why bother?
I learnt PHP fluently through a YouTube channel called phpacademy, later renamed to codecourse. The guy who runs the tutorials is very easy to understand and stay on track with, and in the old days he used to make tutorials on full projects (e-commerce, image host, video host, social media etc)
Fifteen years of experience will make you a senior. The same year of experience repeated 15 times will not. :)
Make a PHP page that retrieves a random cat fact from an SQL database. That’s how I learned to use an API for a timeclock in PHP. It’s a silly fun project that is complex enough to give you a foundation in PHP that you can use but friendly enough that your Google-fu can be used to make it happen. 
You can then add other functions later to build your knowledge. My advice is to set small goals on what you want to achieve and learn, reach that point and get it working, then set a new goal and work towards that. Keep it simple to start with and just progress forward in steps. Least that’s how I have been doing it. PHP is one you can Google what you’re trying to do and you’ll usually find resources through various blogs and forums that will show you how to get there. The important bit is don’t just copy paste code, read it and read the PHP manual on the functions used and understand how the snips of code are working. It takes a while but eventually you’ll have something you’re trying to do and realise “hey, I saw something that used function x, I bet I can use it to do this”. 
CodeCademy has a nice PHP introduction. Not sure if it covers the database though. After learning the basics, I would learn the database side with a framework like laravel as it has a nice database abstraction.
While having a focus on Laravel, the PHP courses on https://laracats.com are great. Jeffrey is one of the best teachers and his video lessons are always to the point, without getting tiring or mundane. 
Nice idea, you could use gitlab also, there's good like a bitbucket, but me personally like more bitbucket because the pipelines isn't too hard do programmer, this is not means in gitlab is hard, but I already used at bitbucket
I'd argue that it's better to start by making stuff from scratch before jumping into any framework. It gives you a much better understanding of the language, the standard library, etc. At least that's how I started: 1. I made a bunch of plain PHP files, but thought it'd be neat to have some FURLs 2. I added them through .htaccess, but I didn't quite like the look of it 3. Thus, I redirected all to index and performed some URL splicing to get the route. Then I just ``require``d the appropriate file 4. I was missing parameters, amongst other things. When looking for a solution, I found AltoRouter 5. I thought "hey, why reimplement something that's been done?" and went with it And so on, and so forth. I went through a similar process with Twig, Parsedown, Whoops, and others. And each time I went through these steps, I learned. 
Thank you for your comment, much appreciated. The first part - makes a lot of sense and I can tell it's from experience. Going to use IP blacklisting with a notification to the client when a new IP/range has just entered the pool and/or blacklisted. Anyway a bearer token seems more appropriate to me. I'm also very thankful for the polling thing. Ive seen that others in our field use a severe case of rate limiting. I'm thinking of a more sensible approach: 1) Implement a rate limiting mechanism and limits 2) If they hit that rate limit, what they get will not be a "rate exceeded" but a "not modified" response with a 304 header. It's the same as giving a rate limiter response, from the load standpoint; but instead it also tells them that there are no changes. 3) Implement a caching mechanism that will significantly decrease the load, to support the above. We're often doing various types of caches, and I know we can cache this properly. The cache will expire by itself each say 5 or 10 minutes (should anything go south by mistake) BUT in a normal scenario it will also be refreshed when a record in the set is modified (the record update code will also trigger discarding the cache for that particular set affected by the call). This allows decreasing the load a LOT and basically I see no issues with client polling the hell out of it.
Learn to search first! Multiple questions like this here, same answers in each and every one. This skill will help you in the long run the most.
&gt; It may be more useful to think of "final" as "finally, the abstraction is a good one; we can close this off now." But before that happens clients did all kind of weird stuff by extending all your extendable classes, because they thought your unfinal classes were designed with extendability in mind. And they do so rightfully. Now could neither change the API nor declare them final at all, unless you plan to release a new Major version. Releasing a new major version is no issue at all, but doing so too often indicates an unstable API. So why not think before what you want to have part of your public API?
Which course did you do on Udemy? I found the Udemy courses really helpful and helped give me some better understanding. 