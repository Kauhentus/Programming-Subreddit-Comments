http://dev.lithify.me/drafts/source/en/00_quickstart/blog.wiki
I've used CVS, SVN and git - I'm beginning to think I'm stupid because none of them are in the least bit intuitive to me. I find git the most straightforward and use it with Eclipse but none of them are for casual users.
Php Objects Patterns and Practice gives a good introduction to OOP stuff that I'm guessing your course wouldn't have covered. If you don't know any other languages I'd concentrate on learning programming theory and application design more than PHP specifics. If you know how to approach problems it's not hard to look things up. It's not like anyone memorises the entire PHP docs anyway!
Some of the good points of Git are quite clear, but it's hard for many wanna-be converts (like myself) to understand why the versioning structure has to look the way it does and how the benefits are delivered. Having worked with CVS and SVN, I may be suffering from Stockholm syndrome, but nonetheless I feel that there's a lack of best practices with Git. If I'm wrong, please point me to the right resources.
http://ktown.kde.org/~zrusin/git/git-cheat-sheet-large.png
Give them [Tower](http://www.git-tower.com/) it is amazing :)
this is very handy and a nice find, thanks for posting!
Facebook had a hackathon at University of Waterloo a few months ago. The creater of PHP (Rasmus Lerdorf) was there. I think Facebook throws them at various universities every so often.
I agree. There are so many resources on the web...especially for php. Just dive in, don't worry about buying a book.
I agree, although I still like leafing through books. Look at php.net, click on functions where you don't know what they do or have never heard of before (there are a lot of them so this shouldn't be a problem). Most importantly write something, and look at other people's code.
That's the thing... git is so flexible and can be used in so many different ways that there are no "best practices". The best practices are what works for you and/or your team. I admit this makes it harder to learn as there's little in the way of use-case examples. You can use it like you use SVN if that is working fine for you, but git particularly shines in a team environment.
Sourceforge, really? Yikes. My guess is you are/were having more trouble setting up SSH then you were with git, this seems to be the issue most new comers have with git. Once you get it working it's incredibly easy to go from there and you'll wonder how you ever coded without it.
the whole fucking language.
Exactly. I read a tutorial on how to set everything up (git bash and gui) from an outside github site. I went back and followed the howto steps on github and everything worked out fine.
&gt;(The idea that the salt contents govern which algorithm is used is ... laughable, to be polite.) He may have inexactly referred to the entire function argument as the salt, but the string passed in - containing the salt - does in fact determine the algorithm used in [PHP's Crypt - See The Manual](http://php.net/crypt) &gt; Oh, the hilarity. Salts at the user side! There's nothing wrong with that. The salt is in the stored, hashed password. How is that "user side"? 
Why the downvotes? Even as a professional PHP dev, I find this hilarious.
cause php devs on here are whiny little bitches. edit: haha, first a lot of upvotes and now the whiny bitches found the post.
[Essential PHP Security](http://oreilly.com/catalog/9780596006563) Small book, but a good book just have to flip through and see what you don't know.
If you're interested in working on the PHP project itself then it has several places you can hack on. For example, the PHP manual [user comments](https://wiki.php.net/ideas/usercomments) system needs help. Questions? Let me know. Also, anyone can [edit the manual online](https://edit.php.net/) so that's something else to hack on.
On the contrary, I find subversion and cvs mindbogglingly complex, and git refreshingly simple and easy to use.
[*PHP and MySQL* by Welling and Thomson](http://www.amazon.com/PHP-MySQL-Web-Development-4th/dp/0672329166/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1308565320&amp;sr=1-1) is one of the best I've ever used. The old version was one of the first programming books that made sense to me.
[Please don't complain about downvotes](http://www.reddit.com/help/reddiquette). There's almost 9000 subscribers to this subreddit, there's bound to be a bunch that downvote a post. That being said, people should also stop [downvoting opinions just because they disagree with them](http://www.reddit.com/help/reddiquette) (same link as above).
Just a note, this software saves a copy of all it's outgoing mail. If you're backing up daily then you need to keep an eye on the space it's using and clear it out regularly. Or pass `-e "set nocopy"` to Mutt. &gt; "This variable controls whether or not copies of your outgoing messages will be saved for later references." 
As a professional PHP dev, I logged in just to upvote.
That's trick, isn't it? Find the time to learn how to use it, then decide if it better suits your particular project. Finding the time to learn it is the trick though.
PHP is also my daily bread and butter language. people need to get a sense of humor.
you can get the best of both worlds by 'tainting' the variables. You don't filter/change the value yet, but you mark them as 'unsafe' in some way. Only when the variable is used do you apply a filter. This way you have control over what kind of filter to use and when. I've written a simple class that does this for our CMS, it simply turns a string into an object with a toString method that filters the string with a configurable filter. The raw value can also be returned. The only drawback is that many PHP functions that expect a string cannot handle an object, even if it has a toString method. You'll need to manually typecast them to strings.
http://lithify.me/docs/manual
Observing that PHP chooses to return the algorithm's identifier serialized together with the salt is not the same as saying that the contents of the salt govern which algorithm is used. They're really quite critically different. &gt; The salt is in the stored, hashed password. How is that "user side"? It isn't. Read harder.
You can always just take the classes and never work toward the degree. I'm in a similar position and I really wish webdev or programming trade schools existed.
You should be able to learn about O notation and sorting algorithms on your own, I wouldn't recommend trying to enroll in classes for just that. If you have other more complicated topics then maybe. What do you know about algorithms or Big O notation already? I might be able to explain it to you if that is all you need. (Big O notation is just a way of counting the number of calls you make in a certain function (usually used for algorithms)) Wikipedia should do plenty good of a job teaching you about any individual sorting algorithm. Do you know about Insertion Sort at the very least? Insertion Sort, Merge Sort, Quicksort, Heapsort and Counting sort are all useful to know, and assuming you can read code going through loops and analyze what they are doing, you should be able to figure each one out.
**TL;DR:** Yes, there are tons of them out there (especially in NYC). Over the last year I have attended 5 different hackathons, and my 6th is coming up in the next month. While there are a few events out there that primarily focus on a single language or framework ([node knockout](http://nodeknockout.com/), [pyweek](http://www.pyweek.org/), [Django Dash](http://djangodash.com/), [Rails Rumble](http://www.railsrumble.com/), etc), a majority of the ones I have attended are language agnostic. Try looking for events that focus on either a single API or a set of them. Usually the only true rule at those types of events is that you must use one or more of the APIs that were presented. You will find that many people use PHP because there are a large number of libraries available and development is easy. Here is a list of some of the events I have attended that may help you get an idea of what you're looking for. All of these events allow you to use whatever language you want. They really just want you to develop something cool. * [HackNY](http://hackny.org/a/startups-2/) * [New England College Hackathon](http://www.nech2011.com/) * [Foursquare Hack Day](http://blog.foursquare.com/2011/02/22/stop-hacker-time/) * [hack.a.bit](http://blog.bitly.com/post/786142591/celebrate-2-years-of-bit-ly-at-our-hack-a-bit-hackathon) * [HackRU](http://hackru.org/) Hopefully that's enough to get you started! 
I would think those classes are required to advance to higher levels in the program and enroll in the more advanced classes
I've had a few people recommend some books to me. Most of the books I've read have been specific to PHP, so I think that expanding my selection to include general programming knowledge would probably help quite a bit.
Yes, that's the problem.
Most colleges either offer CLEP tests (which are somewhat expensive), or have a form to waive prerequisites. Generally bothering the dean of the department is enough to get prereqs waived especially if you've already filled out the form, and know what you want then you can just have to sign a form to make you go away. Community Colleges generally assume this is how you're doing things.
I'm in the same boat. You should check your community colleges in your area. Houston Community College has PHP that can be "a la carte." There is a requirement of CSS and Javascript, but if you show you've already taken these classes or well knowledged, they'll just let you in. It's pretty flexible. In fact, community colleges have more focused design without the fillers. Either check in Digital Media or Digital Communications when you go through their programs. 
Open source it all you want, but don't expect a lot out of that other than another notch on your project list. The real question is: what happens after that? Is there anything about your project that differentiates it significantly from the other eleventy-billion Open Source content management systems out there? Are you trying to get it adopted en-masse or is this just a side project for you? It seems like you wouldn't be asking your main question unless there was some other, hidden question. Please note, I'm not trying to be cynical here. But you should possibly consider if you have some other motive and then ask *that* question.
Forgot to add, it's also cheaper than universities! I would edit, but damn IE doesn't have edit function. 
If you don't want to get a degree, why enroll in the classes in the first place? Usually profs don't care when people not enrolled in the course sit in on lectures. If you go to a somewhat large school, they won't even notice your presence.
So you're suggesting stealing classes
It's not stealing. When you pay for college, you're paying for the degree. In fact, in Europe, it's common for professors to grade work material for students even if they're not enrolled in the class. No one's losing money by your sitting in; just don't attend if they're doing group assignments or a test, and don't attend if the classroom is over-full (which is never the case 1 week into the semester). I think MIT also offers lecture videos for free on YouTube, so you could check that out. **EDIT** [List of MIT Computer Science video lectures](http://ocw.mit.edu/courses/audio-video-courses/#electrical-engineering-and-computer-science) [Intro CS](http://www.youtube.com/watch?v=k6U-i4gXkLM) 
It's called "Auditing" classes. Many universities allow folks to sit in on classes for no charge. Of course... you also get no credit for those courses either should you later decide you want a degree.
Oh boy. If I were you, I'd release it and quickly disavow all knowledge of it other than being the author. For one, no CMS will fit anyone's needs out-of-the-box, and you're going to get 100's of feature requests, many of which won't jive with your vision of what it should do and many others that won't jive with rational human logic. You'll also get 100's of bug reports, with the same qualifications as the feature requests. Same goes for the security reports. If you plan to use this as a launching point for a freelancing career, and plan to iteratively improve the software anyways, then such user reports will be useful to you. However, if you care nothing about about user adoption and instead only want to get this out there as a portfolio project and have no plans on actually supporting it... then you should be careful how you release it. I made a free WoW-addon 3+ years ago, and although I relinquished control of the code long ago, my email is still in the source (credits), and because of that, I still get emails from time-to-time for bug reports / feature requests... In short, unless you want to spend the next 5-10 years of your life supporting a project with no direct revenue stream tied to it, go for it. Otherwise I'd "fire and forget" it to the OSS world, at best.
Community colleges suck. I went to one for a little bit several years ago and quite frankly you are surrounded by lazy ignorant people and the classes move very slowly and don't really teach the stuff you (the OP not everyone) are trying to learn.
Sometimes it is stealing. [Random example where it costs money to just sit in the class](http://www.pima.edu/registration/auditingclasses.shtml).
It's called "auditing a class." Most schools will let you, but serious upper tier schools (eg Harvard) generally won't, and this is rarely do-able in classes below 50.
&gt; All universities allow it. No, they don't. Harvard, Yale, Purdue and Stanford, for example do not. &gt; especially if you aren't going to pay for it Auditing is paid. &gt; You're also possibly going to ask questions. You're not allowed to ask questions as an auditor. That's the difference between auditing and being a student. It's quite clear you have never actually done this.
&gt; It's not stealing. The schools disagree. Auditing is paid. &gt; No one's losing money by your sitting in This isn't how economics work. This is the same false argument that warezers and media pirates make. You do not have the privilege of taking a thing merely because you imagine it isn't causing losses.
Then start with Knuth and CLRS.
I attended a few here in DFW. It felt like high school all over again... most of the students in the classes I was taking acted like they were their simply because they did not know what else to do.
Well if your school has an auditing program or if you think sitting in on a class might not be allowed, talk to the professor or course adviser. Personally I've never had a problem with it, but I don't live in the U.S.A. so I can understand it would be different. **EDIT** &gt; You do not have the privilege of taking a thing merely because you imagine it isn't causing losses. What exactly am I "taking"? Knowledge that is freely available on the internet or in the library? Slides that are available to anyone on the course website? A seat in an otherwise near-empty classroom? The professor's time, despite the fact that he'd be there with or without me? When you go to school, you are paying money for an accredited institution to say "this guy knows this stuff". Here's another analogy for you: have you ever watched cable TV or a movie at a friend's house? Do you feel that this is stealing or wrong? It's essentially the same principle.
http://ocw.mit.edu/courses/ Personally I hate the classroom environment. Moves too slowly while skipping areas I'm interested in and dwelling on stuff I'm not. I was a horrible student in high school too so it's no surprise I hated college too. You can learn more on google in 4 hours if you're motivated than you'll learn in an entire semester in a classroom.
Um PHPUniversity exists....
&gt; No, they don't. Harvard, Yale, Purdue and Stanford, for example do not. Out of curiosity, how do they prevent non-registered students from sitting in on a big lecture class? Or were you saying they don't allow formal auditing of courses? 
Thanks, I'll check some of those out!
Link?
I wouldn't go so far as to say "All" universities. After I posted this, I fact-checked myself. Most do allow it. Almost universally it requires the Professor's permission. Some schools will allow you to Audit for free, other charge anywhere from a nominal fee on up to regular tuition rates. Some schools will require that you be enrolled at the school, others don't care. There is still value in sitting in the classroom (even with no homework, etc...) vs. just going to the library or doing an MIT Open Courses thing. First, you have the benefit of the other student's questions and discusssion. Also, you have the benefit of that professor's take on the subject. Additionally, I'm sure that you could approach the prof. after class if you had any questions ... it'd be pretty hard for him to say, "Sorry, can't answer that, you're just auditing". Now if you abused that, he'd probably end your auditing privileges, but if you were judicious about it, there's valuable feedback to be had there.
&gt; I've had a couple students who audited classes in classes I've been in who ask questions and some professors have graded their assignments. Wow, so if a professor in a random case decides to do something kind, that means the definition of auditing changes! Or, maybe not. &gt; but its quite clear you have been to every single college in the world. I never said anything even remotely supporting your tone here. You, however, did. Your claim was that all colleges allow auditing, something that a person could only know if they had been to every single college in the world. I gave three correct and one incorrect counter-example, all of which you have used Google as a substitute for knowledge to incorrectly discuss. &gt; BTW, Stanford does offer a form of auditing: Stanford On iTunes ...as does Harvard ...Yale These are not auditing. &gt; ...Hey, Purdue distinctly tells how to officially audit a class! My mistake. They didn't used to allow it. &gt; Woa, someone looks wrong looking further with Harvard Nope. Now you're just being sloppy. Those instructions are on how Harvard students audit classes, not on how outsiders do it. The text is quite clear on the point that only in-school students are permitted to do this, which is in direct contrast to original poster's needs and to my phrasing. You are deliberately ignoring details to make yourself look correct to support a temper tantrum. &gt; Wait, Stanford also audits!? No, they don't, as a general rule, if you'd bother to read the page. What that actually says is "a professor is permitted if they want to to make an exception." The reason it says that is that the school doesn't allow it in general. The problem with just googling up answers and expecting them to show you to be correct is that you generally are not. &gt; JESUS F. CHRIST! THIS LOOK EXACTLY LIKE I DESCRIBED IT! In fact, the beginning of the page is dedicated to you being wrong. &gt; &gt; Auditors are not permitted in courses taught in Yale College except for persons in one of the categories described below. &gt; &gt; 1. Students enrolled full time in Yale College or in one of the graduate or professional schools of the University may audit courses without charge. The permission of the instructor is required. &gt; &gt; 2. Members of the Yale faculty and emeritus faculty may audit courses without charge. The permission of the instructor is required. &gt; &gt; 3. Spouses or partners of full-time Yale faculty members, or of emeritus faculty, or of students enrolled full time in the University may audit courses without charge. Permission is required of the instructor and of Dean William Whobrey. &gt; &gt; 4. Employees of the University and their spouses or partners may audit courses without charge in accordance with applicable personnel policies. Permission is required of the instructor, of the employee's supervisor, and of Dean William Whobrey. Funny how caps lock and certainty make people just look past the facts right in front of their faces. So, basically we're right back to where we were before: &gt; EXACTLY LIKE I DESCRIBED IT! &gt; &gt; &gt; All universities allow it. And three specific counter-examples, while you're hollering that someone else should feel ashamed for making a claim that requires omnipresence, when they did not, but when you did. Sometimes I wonder if people like you even understand that you do the things you accuse others of.
Trying to distinguish between formal auditing and informal auditing in the context of classes is like trying, in the context of ice or water, to distinguish between liquid water and solid water. There is no such thing as informal auditing. Auditing is formal presence and formal non-participation in a class. Otherwise it's either being a student or being in the room.
Reading *Art of Computer Programming* to teach yourself programming is kind of like reading the dictionary to teach yourself English.
&gt; If you look at my reply to him under yours, it outlines auditing IS allowed at every one of those colleges he listed No, it isn't. Don't pat yourself on the back too hard before the other person has had a chance to reply. &gt; Almost every college's policy Lol. The quote of yours I was responding to: &gt; &gt; All universities allow it. The thing you said in response: &gt; but its quite clear you have been to every single college in the world. And now, after being called on it, you're softening the universal stance you took, without admitting you took it, while pretending I took a universal stance I did not in fact take. Funny how your position keeps changing, and edit asterisks keep appearing next to what you say when called on your mistakes.
Lol, no it isn't. TAoCP is intended to teach. Dictionaries are intended as reference. Your criticism would have been correct with regards to the other book I named, CLRS. As stands, it's pretty clear that you've never actually read TAoCP, and are guessing.
I'll give it a go :) First off, it's a good thing that the data you are intending to present is consistent - but are these data the true information you want to present or do they need to be pre-processed before being used in your application. Okay, that's a bit cryptic, I know. What I'm trying to convey whether you will base your applications data on the raw data or if you need to process these data and store the result in a database which will in turn be used by your application? If you need to process the data first - and if it's a large amount of data, you might want to do this processing with something different than PHP although you aren't forced to this since you can easily do PHP CLI scripts. Perhaps you BASH-savy colleague can give some valuable input here. The part of the application which the user's will make use of, will it be focused on simply presenting the data to the user and nothing else? Will you need to handle data from your users? How is the data to be presented? Are we talking simple tables or do you need to do some plots?
If you use a LAMP stack, look into Bitnami so you can avoid all the craziness of building/compoiling. 
&gt; Are you really that mentally challenged (headpat) Let someone else know when you're done throwing the tantrum.
It's really not that difficult a metaphor.
Oddly enough, I used CLRS as a textbook and consult TAoCP as a reference.
I know this might be a question of preference, but I would highly avoid this. First, let me say that I make use of the Zend Server stack for local development. It's easy and convenient. However, in a production environment, I'd like to have a full understanding of what's going on. Preconfigured M/W/LAMP stacks have a tendency to come boasted with a lot of extras in order to suit the masses. This is junk which doesn't have any place in a production environment - it's consumes memory and, increases latency and possibly introduce unnecessary attack vectors on your server. I find it a valuable skill to be able to setup your server from scratch. And let's all be honest, on most Linux distros installing Apache, PHP and MySQL isn't really rocket science. This way, you're forced to learn and understand your setup. What kind of dependencies does your application have, how are they managed and what effect do they have on the setup as a whole? Please understand, I'm not bashing prebuilt stacks as a whole. As stated, I make use of them myself but **strictly** for local development only!
&gt; Where have I ever made a claim that an outsider can audit a class? In your response to an outsider wondering where he can take classes that he should audit and every college allows auditing. &gt; And with your logic of students not allowed to ask questions or get help as auditing means they're just there to listen and not be heard People auditing aren't students. If you want to be heard, then become a student. &gt; Fact remains: you claimed those schools don't allow auditing. You were wrong, they do allow auditing. What I *actually* said, instead of what you want to pretend that I said, was that most upper tier schools didn't allow outsiders to audit. Funny thing: that's what three of those four pages say. I admitted I was wrong on the case of Purdue. Why can't you admit that you're wrong on the other three? &gt; Listening to a lecture without being able to ask any questions is your definition of auditing No, it isn't. It's pretty pathetic when the only way you can discuss a thing is to announce what someone else believes, incorrectly, when they themselves haven't actually said as much. &gt; You tried saying I was wrong about Yale allowing auditing. They do. They spelled it out. (sigh) Try to keep up. You told someone who doesn't go to this school that they should audit because every school allows it. I said "most schools allow this for outsiders, but most upper tier schools don't allow outsiders to audit classes." You then threw a fit, and cut and pasted a bunch of links which agree with me. Now you're trying to pretend that the thing you threw a fit to, which I'm reminding you of, is something new, and different than what I was saying before. Don't correct people if you don't intend to figure out what they actually said.
To each his own. I've done it before, and it's infuriating when your PHPlib isn't compiled with the same version or configs as the MySQL instance you've downloaded. Frankly, I just don't have the time to fiddle around with tweaking config variables and hunting down the right version of some .so file. Bitnami, for the most part, is pretty clean. I've used it for years and it's awesome.
&gt; Wa... wait... what?! What the fuck are you saying?! That doesn't even make sense. Then stop wasting my time. &gt; Find me a school that doesn't allow auditing. When you catch up with what I actually said, you might understand why I'm so bored of your emotional, over the top melodramatic desperation to appear correct and look down on others. &gt; Where do you get, "we don't allow auditing" from that? I don't. It doesn't take much intelligence to realize that when the last response was "you didn't understand me correctly," to repeat the same criticism just makes you look stupid. &gt; My brain fucking hurts Obviously.
I confess I just don't believe you, given that one is an algorithm catalog sorted by utility and the other is a step by step "now the next step is X, and here's how we do it." I just don't believe you've read Knuth, given that you seem to think it's somehow equivalent to a dictionary. I've never seen a computer science text of which that criticism is less appropriate. Please stop informing me otherwise. I'm not going to suddenly start believing you.
Is ... there a reason you're not just putting them in a directory, then exposing the directory on the webserver? Not everything needs a script.
Came here to say this. I have a hack-a-thon every single day at work!
The point is well taken- thank you!
------------------------------- *The truth you may not want to hear* I too "work in science", but I know a reasonable amount about PHP. Let me *strongly* encourage you not to do this without a much clearer handle on what you want to do. If you are looking to manipulate your data (ie parse a CSV file and work with it) php is the wrong language to use. The right language is debatable but php is wrong. The other huge point is that once you parse the data you become responsible for maintaining data integrity. This is non trivial. If data is money you've got to ask "am I good enough to take responsibility for X $ of data." It took me years of working on data pipelines to answer that question yes and even now I get nervous sometimes. If you've got it in a good folder structure on a linux box as raw output and you've got a good bash guy then it seems to me all you need is a web server. Point the web root of the web server to /.../data, leave the default indexing on and let people get it that way. This won't be attractive but honestly real science rarely is. You'll waste minimal time setting it up and it will work very reliability. If you have some more complex publishing need define it very clearly before you try and build it and then build it as pragmatically as you can. Feel free to define it here and we can help you narrow your definition. I suspect this isn't what you wanted to hear. When I was starting out I was looking for a "real" project to learn on. This is almost never the right answer. It's bad for your skills and bad for your project. Instead get involved in another project where you learning won't harm your team and you'll have a mentor to help you learn faster. REDCap is a php based data collection system. They are funded by the CTSC system. If you are at a university that can join/has joined the consortium you can get involved that way. ------------------------------------------------------------------ *The answer you may have wanted* have a similar situation: * Data go onto a FeeNAS box in the lab from the instruments * That is moved over ssh by a cron job to a debian server on the intranet * That server has a python script that rebuilds a nice static index page for all the data and posts it's availability to our internal instance of laconica. I don't know much about wordpress however if you want to look into it you might start by looking at XML-RPC. edit: formatting
What is the size of the data? What is the life expectancy of the project? Can you work with other tools like SQL servers?
The data in the directory is actually the data that needs to be displayed- it is the result of a large amount of processing. The data is in this form: Top Folder named after the dataset. Inside: 1 XML file containing details about the job run. 1 TXT file containing a score given to the data set. 1 Folder of images of the same object from different angles. **In an ideal world:** $top_folder_name=post_name Folder of images=added to wordpress image gallery in the post $score= posted and tagged separately so I can manipulate it with CSS. XML file: each field converted to a variable and inserted into a labelled list inside the post. **My problems are:** *I can't figure out how to execute a script and have the resulting content delivered in a wordpress post.* *I can't figure out the mechanism that will trigger a new post's creation.* 
Any time.
&gt; The right language is debatable but php is wrong. PHP is a descendant of Perl, which exists for precisely this purpose: practical reporting and extraction. On what grounds do you make the unvarnished, undefended claim that PHP is "wrong?" As a scientist, doesn't making this sort of undefended claim bother you? As not-a-programmer, doesn't pretending to have viable opinions on something that isn't your field bother you? &gt; If you have some more complex publishing need define it very clearly before you try and build it and then build it as pragmatically as you can. Saying "build it pragmatically" is equivalent to saying "I read O'Reilly and PragProg all day and I have lost track of that the word 'pragmatic' has no meaning in this context." &gt; That is moved over ssh by a cron job to a debian server on the intranet In other news: you also shouldn't be a network admin. Go learn about rsync. &gt; I don't know much about wordpress however if you want to look into it you might start by looking at XML-RPC. ... what? XML remote procedure call within WordPress to ... expose ... some data? Because PHP is wrong, but WordPress, which is a PHP app ... somehow isn't? Please stick to science in the future, sir. This is not a field you're ready to give advice in.
&gt; I can't figure out how to execute a script and have the resulting content delivered in a wordpress post. 1) Write a plugin. 2) Call the API. 3) Realize that WordPress has no place in this plan.
1) Is it correct to assume you can get the full LAMP on by yourself (or with help) or that it's already up? If not (and not my intention to light a fire here) I like Ubuntu Servers. Really easy to get apache/php/mysql running and I'm on a very lazy streak here. The first time unless you have good help, it's gonna get you a couple of hours (unless you're lucky or unlucky depending on how you feel about learning to get a server running). 2) After that it's quite simple to get wordpress running there 3) You're gonna need some cronjobs to periodically run your php script dedicated to crawl the lab results or ask your bash-guru-friend to trigger the script when new data get's in the server. Depends on how the data gets in there. 4) You'll have to make sure you have defined a very clear directory structurem it won't hurt to store on the db the directories you already processed so you won't have to go thorugh all of them again (unless you're trigerring it on demand and getting the directory to crawl as parameter). 5) I personally prefer to process xml's with a good xml2array library, I can't remember now which one I use, but as soon as I find it, I'll post it. 6) You can try to get a plugin for Wordpress to force posts or you can try to force-feed the data to Wordpress, depends on the plugins you find and how easy it is to use them.
&gt; After I posted this, I fact-checked myself So, you and random012345, who actually posted this, are the same person?
When all you have is a hammer...
No ... I was responding to the person above me who deleted his post. I am not random012345. When I fact-checked, I found that what I had said roughly matched what I posted, so I didn't edit my post. However, when [deleted] challenged me, I posted further information that I had found while fact-checking. EDIT: I hadn't been back to this thread and seen that you and [the deleted dude] got into a bit of a battle. Your sub-thread was part of his response to my original statement. My "fact-check" post was in response to his response to me (which you then got into the battle with him about). I am 100% in agreement with everything you (StoneCypher) has said.
PHP is wrong because he's not working on log parsing (or data parsing) or web dev for shared hosts. Given that his task reduces to moving files around I think the "glue" language aspect of Perl c. 1999 may be more relevant than cgi aspect; as such, Python, not php is the relevant spiritual successor to Perl. Additionally, Numpy/Scipy/Pylab and the bridge to R make it the winner for someone who's going to do a mix of data ranging / analysis / system scripting; however, asserting that Python is right for scientific computing is much harder than asserting that php is wrong thus I didn't do it. I suggested he build it pragmatically because it sounds like he really just needs to move crap around on a *nix box. I agree with you that the word is over used in the practitioner press; however, it still has a real meaning in English that's helpful in this case: specifically that, all of this should be irrelevant because he's got a "bash guy" and just needs to move files around. If he'd asked for book suggestion mine would have been: http://www.amazon.com/Scientific-Programming-Computational-Science-Engineering/dp/3642024742 but he didn't so ... The real problem with building something pragmatically isn't that the word is over used it's that often time we want to solve imaginary problems because they are fun. Most of science is the result of this exact behavior so I suggested that he look at remote procedure calls as a way of posting to WordPress programmatically. Wrong, maybe, but qualified, and more importantly in the context of a comment the point of which was just write a bash script instead. Just because php isn't great for numerical computing and seems to have been eclipsed by others as a system glue language doesn't mean it isn't ideal for generating html in response to a web request. So I really had no problem suggesting a WP term he might have some luck googling or suggesting another php application that might be more appropriate for a php dev working in the sciences. Finally, If you go back you'll notice that I didn't say I transfer files with "ssh" (or even scp), but rather, "over" ssh. So I'd like to pose a question: When you rsync files to a remote server what transport mechanism do you use and how is it superior to ssh? While I'm asking questions can you comment on the source of your anger? Your's isn't the sort of delightful trolling that keeps reddit honest, it seems to be garden verity paralyzing anger.
&gt; When all you have is a hammer... Hammer? You've got a full LAMP stack and root right? You don't have a hammer, you've got the whole world of open source tools at your finger tips. StoneCypher may come off as a bit of a cock to me but I think he's quite right if the goal is really just to publish the raw data. If you want to make a full on website presenting your research that is automatically updated then that is a horse of a different color and wordpress may be relevant otherwise you just have static content in search of an httpd.
I am comfortable with administrating the LAMP stack, and learning development. I'm comfortable enough with HTML/CSS to handle rendering and design, but only able to do PHP on the most elementary level. I figured Wordpress would be handy because things like RSS, timestamp, authorship, comments, etc. were out of the box.
Check out community colleges in your area. Tuition is much cheaper, and you probably won't have to declare a major.
I like using short tags: &lt;? echo $foo ?&gt; But I only dislike: &lt;?=$foo ?&gt; ...because my IDE has a hard time parsing/color coding it.
Why not just use: $obj = (object) array( 'first_name' =&gt; 'foo', 'last_name' =&gt; 'bar' ); echo $obj-&gt;first_name; ?
I was about to post this, but had to see if common sense was buried down here.
I assume you're interested in university (as opposed to self-taught) because of the whole "unknown unknowns" thing (that is, university can teach you stuff you didn't even know you didn't know)? If so, have you considered any of the open or online options? Something like [Khan Academy](http://www.khanacademy.org/), Reddit's [UniversityOfReddit](http://www.reddit.com/r/UniversityofReddit/) (there's actually an offer for programming best practices right now) or even just forums+IRC+textbooks. The flexibility might be more suited to your busy life (full time job, family, etc). There's also "distance" education from qualified/esteemed providers, though obviously this might not be suitable for you, and more importantly, isn't free. There's also sitting in on classes without enrolling ("auditing"), but that's raised a huge ethical dilemma ITT .
Look into the non-credit courses offered through either the continuing education or extended studies section of your university
So, are males unwelcomed applicants or are we going to have to change your company name here? :P Also: Version control tools of what flavor? DCVS branching is a different animal than SVN. Good luck with the hunt!
Males are welcome. General knowledge of how version control systems work in general is good. 
Is Lady Geek hot? If so, I'm interested
pay for me to move from Canada? I can be your PHP lead (as in, I have a lot of experience and looking for a change of scenery)
well, it's on an intranet. So why not just have a shared drive on the network since it amounts to the same thing, only less cumbersome. I'm guessing the OP wants some kind of additional functionality to go along with it (searching, visual representation of CSV data, etc) that goes above and beyond what a simple file listing can do.
I'm looking for the same, except in Los Angeles: http://losangeles.craigslist.org/lac/web/2445452665.html
 I have nothing against Python, but PHP CLI scripts work wonderfully for moving files around, massaging data, and outputting other files, be it HTML, CSV, XML, JSON, whatever. What precisely makes Python better for this job in your opinion? Please be specific. * Data goes onto a FeeNAS box in the lab from the instruments * That is moved over ssh by a cron job to a server on the intranet * That server has a php script that rebuilds a nice static index page for all the data and posts it's availability to our internal instance of laconica. I am asking because I am curious what you view as disadvantages here. 
I felt the same the first time I tried using git. After a few months, I gave it another go by following github's help after reading "Git from the bottom up". It's much easier once you understand how it works, and the benefits are there. Dropbox is not a VCS. All it does is keep a remote backup, and this is entirely different. I use Dropbox and Rsync to keep everything backed up, but you will need to learn version control systems if you ever want to work with other people. I suggest you relax and come back at it in a few months, because you will need it.
In this use case nothing at all. It was selected here because we don't use php internally and of R, fortran, matlab, C and python it seemed like the right choice. Php would be just as capable of generating our index pages and posting via the laconica api. As for why python has become the defacto unix glue scripting language I don't know. It's got nice semantics, the right amount of syntactic sugar, a great underlying data model, amazing standard library and community that tends to have reasonably high standards. What's cause and effect there I cannot say. I guess you could ask the arch/mint/ubuntu/etc teams. Tangled up in that quagmire of cause and effect is the breadth of interests in the python community. In our case that means the large scientific computing community around python. I'm not aware of another dynamic language that can come close to scipy/numpy/matplotlib/rpy/nltk/biopython etc in terms of scientific library options. The iPython/pylab environment is excellent for data exploration (every bit as good if not better than that found in expensive / DSL-ish offerings). On top of all that the seamless C and Java interop is hugely valuable at times. So in short good tools, good people, plays well with others. On a totally subjective level I like that the language is converging on a seductive blend of ABC/C syntactic sugar glazing a LISPy homoiconicicity. I find the combo of the holly __dict__ and higher order functions make metaprogramming obviously correct instead of complex or magical. Generators are a *tremendously* valuable language feature when dealing with big data. This is not to say python is perfect: concurrency, web deployment v. php, odd behavior from (im)mutable type differences, implementation idiosyncratic etc...
The way I do it is that I set a few variables prior to my include. One for the page title, and a slug to determine the active page. If my $slug == "home", then I add "active" in the home item's HTML class. In CSS, I put some special markup for active items.
Wordpress is also in PHP, so it helps. What you can do is set up a cron event which runs a PHP script and checks for new files against a local database/text-file of items already found. If a new file is found, a post is pushed through Wordpress or by a SQL entry into the Wordpress database (might be easier than trying to work out the syntax/variables in the wordpress code). You can easily extract file name and folder with your PHP script and use those as tags/categories etc. Just seems like a lot of effort, but it is possible.
Uh, why Cake vs. other MVC frameworks? What if database denormalization is just what you need on a particular kind of task, in order to optimize? As in, less tables, with the side effect of yes, some data redundancy and the app layer must handled the data integrity in such cases. Imagine a call center -- all those table joins just to display the right popdown listbox -- that can slow down a call enter. So, database denormalization is also suitable in some cases, but not necessarily for all the tables in a given database. It's sort of like "caching", in a sense. Version control tools. What do you do when a guy says he uploaded code and he can't find it? What do you do when two people work on the same project and now must work with the 'diff' command to find the difference between some very long files, or dozens and dozens of files? What's the Flash for on your project? 
Yes - Other frameworks are available. Do not get hung up about that fact.
Yes she is... But that's probably the wrong response.
Send your cv! Check the email at the end.
node.js, mongodb. dont wanna hate on php, i use it everday but for some things nosql and evented io is just better.
I love LAMP.
Coming from a computer science major at a top 20 uni who also works in PHP web development, you won't find most of what you learn in university-level CS very useful. After learning OOP and patterns (especially MVC)...you really don't need to take an algorithms class. You don't need to learn the intricacies Big-O notation for web dev, especially using a hacked up language like PHP -- just use common sense in knowing how optimize an algorithm. If you want to take classes just for the knowledge, take a data structures class that's focused on inheritance/object orientation, as well as a patterns class. I think you can do this without a formal setting, though. How much do you not know? It seems to me there are just a couple things you didn't learn formally, and have been intimidated to try. Best of luck
I'm not sure if there are security implications (though I've seen a number of high-profile websites that do this, so it can't be a terrible thing to do), but from a user experience perspective, I'd highly recommend this. It's one less username for the user to remember, and an email ID is anyway something people identify themselves with. If your site is something non-technical people use a lot, I'd recommend labeling the password field as "Password for &lt;your-site-name&gt;" rather than simply Password. This would clarify that you're not asking for their email password, but asking to make up a new password. Also, have you looked at Google auth or OpenID? That would reduce the registration hassle a lot. 
Are you in the uk?
Do try and use an existing authentication system. It takes a lot of worries off your hands, can generally be trusted (as long as you go with legit providers, such as openID, Google, Facebook etc) and as a user, you save the hassle of registering yet another account. This is a good article about the issue: [http://www.codinghorror.com/blog/2010/11/your-internet-drivers-license.html](http://www.codinghorror.com/blog/2010/11/your-internet-drivers-license.html)
No. :(
Ah. The reason I thought that is that those [deleted]s are actually three different accounts, all of whom agreed with "each other," and all of whom deleted their posts within the same 30 second span after I laughed at random012345 for sending mail saying he felt he wasn't wrong but he was going to apologize in private for public behavior anyway. All three also have a record of every single post being voted up to three the second it's made, and suspiciously high vote counts for things that don't make sense (there's a 140 upvote for a reply containing the single word "Agree" down there.) Sometimes I wonder why people take pride in fake karma. Anyway, I apologize for lumping you in with the group incorrectly.
Usernames are handy if you're planning on having a bulletin board or forum of some type on your site. It lets them have some anonymity from the other users on the forum. I allow login with username or email but that's because I'm going to have a help/chat forum or something, haven't decided yet.
What do you need the zip code for?
If at any point you're going to publicly display users for any reason, use usernames. You don't want email address facing outward at any point whatsoever. If not, emails are perfectly acceptable and will work no problem. Second, why do you need their zip? If users dont think you really need their zip code they'll tend to just throw whatever value they want in the field.
why not let them supply one or the other? *Enter your username or email address* There's not really much difference between using either one. Having a username is more convenient since you don't have to type a @domain.com but either one will work fine
Don't use email addresses as usernames. People change their email addresses all the time. Some of them foolishly use their ISP's email addresses and then change ISPs. Some of them get their email accounts hijacked. Some of them outgrow superpenis@example.com. Some of them foolishly get shared email accounts with their significant others and then break up with them. Don't make a poor kid stick with his @aol.com account just to stay in your website. And think about using surrogate keys instead of natural keys. This is a matter of choice, of course. But it is something to think about.
Given a thousand users signing up with their email addresses, you will find half of those addresses are dead in 18 months time. The yoof of today just don't value continuity. Perhaps allow email addresses as a means to log in, but don't make it an unchangeable primary key. And as said elsewhere on this thread, make sure the usernames are not exposed publicly or to other users, if you are going to be using email addresses as IDs.
I think [this is the reason](http://xkcd.com/386/). :)
Agreed, I dont think I'd ever give out my actual Postal Code unless I was expecting an item to be shipped to my door.
One huge pet peeve I have about this is when I come back a month later and try and login and it says "Enter username and password" when it really wants your **email** and password. I'll sit there trying every password and my typical username and finally click the button for when you can't login only to find out it wanted me email and not my username. Arg.
I'll have to send my CV as well. Working in the UK would be pretty awesome. Plus as far as I remember I don't need a VISA due to ancestry or something.
what about like a dating site that needs your location in order to give you the best results? 
StoneCypher is the resident troll. You'll see this behavior from him pretty much every time. He does not know how to engage in civil discussion. He prefers to be an insufferable douche to random strangers probably in an effort to sound superior. Hence he resorts to personal attacks while trying to make his point. This behavior os completely unprovoked. He thrives on confrontation. If you try to engage with him civilly, he will not respond in kind. When you finally take the gloves off, he will start whining that you are being rude to him. When you prove him wrong, he will become even more enraged and irrational. He will focus on inconsequential things like the words you used in your post. Then he will claim dishonesty on your part. Finally he will keep responding to your posts while screaming that you are bothering him and that he wants to be done with the discussion. Pretty much an attention whore. Good on you for pwning him.
GeoIP
Just because their username is an email address doesn't mean they still need to use that email address to log in, they just need to remember it's their username for the site. As long as the OP uses a verification mail on the email address on registration, and provides a "change email/username" option, there's no problems with using an outdated email address as a unique user identifier. Well, no problems that you wouldn't also have to deal with if the user also had to pick a user name while registering with their soon to be outgrown email address.
haha that's a good point, but i think it would creep me out a little more for them to just have my location than me giving it to them (esp. for something like i mentioned where location is necessary) 
Thanks guys, I am in the process of implementing Google OpenID with OAuth and Facebook OpenID. Also, I'm not using the username as the primary key, I am still generating a unique numeric ID in the database so that email addresses can be changed etc.
&gt; Just because their username is an email address doesn't mean they still need to use that email address to log in, they just need to remember it's their username for the site. If they're going to have to remember something anyway, why constrain it to a username?
Since we're on the PHP subreddit i'm going forward with the php solution, and I'm sticking with what you want and not judging (though you may skip Wordpress :P). You should be having the reference at hand: http://www.php.net/manual/en/ in particular the functions reference. You have several file manipulation functions, and the first issue to attack is how to recognize the already processed directories from the non-processed ones (unless you can tie the uploading event of the directory to the execution of the script). The second issue is to get all the information sorted out, I always prefer to convert xml's to arrays, php is great with arrays and I never liked any other alternatives. Careful with this one and try a few of the libs around for this until you get this one right. The third issue is to stick all your data into a wordpress post. Right here you should look for plugins to enable you to auto-post, or to force-insert the post directly on the db or even build an rss-feed with the data you gathered and use one of the WP plugins that imports rss feeds. Any more details than this and I will start writing code :P If you have any specific questions: shoot!
So sick of software projects that don't have demos or give screenshots. Do they really expect the user to download, install, and configure the software just to see what it's going to look like? Next...
&gt; If they're going to have to remember something anyway, why constrain it to a username? They already know their email address, why ask them to create and remember something new?
This is a framework not an application. That's why I don't really understand what screenshots or a demo should show? However there do exist example applications built on Lithium like the [pastebin](https://github.com/UnionOfRAD/lithium_bin) also powering [Pastium](http://pastium.org). As for installing and configuring... this whole thing boils down to 2 steps. *Granted you've already got a working local PHP dev setup and given your htdocs directory is served as the docroot on localhost.* 1. git clone --recursive git@github.com:UnionOfRAD/framework.git /path/to/htdocs/framework 2. Point your browser to http://localhost/framework - you should be greeted with http://flic.kr/p/9R2Aib That's it, no further configuration necessary!
Not to mention ZIP's don't exist outside of the US, so the audience is potentially limited.
Well, people usually don't forget an email address, you can let the user change the email any time in case they want to
I've done this before from perl - using the WordPress module from cpan... Pretty much you just need to post to the site using XMLRPC - here is a long article about posting to wordpress using XMLRPC in PHP; http://life.mysiteonline.org/archives/161-Automatic-Post-Creation-with-Wordpress,-PHP,-and-XML-RPC.html
My plan was/is, when a user logs in via OpenID as part of the authentication I request an email address from the OpenID provider. I would then strip everything after the @ sign and use the part before it as the users "display" name. If there wasn't an existing account for that email address in the users database then I would create one with a null password. This way a user can login with their OpenID, or, they can request a password reset and have a random one sent to their email address.
&gt; This is a framework not an application. That's why I don't really understand what screenshots or a demo should show? How about showing off some of the highly-touted features? Features [with special thank you to PHP 5.3] * Integrated Unit Testing (speed, quality) [thank you: closures, iterators] * Aspect Inspired Filter System (flexibility) [thank you: closures, lambdas, iterators] * Document Oriented Data Sources (speed, flexibility) [thank you: couchdb, mongodb] * Automatic output escaping (quality) [thank you: stream wrappers] * Extensible plugin support (flexibility) [thank you: namespaces] * Static Models with Object Oriented Results (speed, flexibility) [thank you: late static binding, iterators] * More, More, More.... So many features! By what good are they to me? * Show me how the integrated UT works, or how I would leverage it in day-to-day coding. * "Aspect Inspired Filter System"? I wouldn't know what that was if it broadsided me on my commute home, so I sure as hell have no idea why I'd ever want it in a framework. * "Document Oriented Data Sources"....again, no clue what this is. Is this simply a .xml or .json file? Is this annotations within PHP userland code? No idea why this would be beneficial to me. * "Static Models with Object Oriented Results"....no clue.... Also, some of the _Plugins_ and _Applications_ sound interesting, but again, clicking through takes me to text, text and more text, but not a single demonstration of what they actually are or do. "lithium_qa : sanity checks for your code" sounds badass, but the page for it simply gives the git source tree? Really, you couldn't show me even the tiniest bit of how this works? Please understand that I'm not trying to just bash the project -- I'm actually fairly interested in it. However, I couldn't be bothered enough to go to the trouble of getting it running just to play with it. If the Lithium team **wants** me to use the framework, or in the very least give it serious consideration, then they've done a very poor job of convincing me why I should do so. If you don't care about who uses it then carry on as you were...
That's OK, we'll all just put 90210.
Thank you for not being condescending, and pushing me in the right direction. I will poke around XMLRPC!
Then it's time to go get a screwdriver. That's a warning about a toxic mindset that you're reciting as a justification. You were already given a better approach. You have things that aren't hammers. You just like nails.
&gt; StoneCypher may come off as a bit of a cock to me but I think he's quite right Things like this are why I wish reddit had ignore.
&gt; PHP is wrong because he's not working on log parsing (or data parsing) or web dev for shared hosts And if you think these are the only two things PHP is good for, then enjoy your rails ghetto. I have no intention of having a conversation with you, because you're off badmouthing me to third parties. &gt; I suggested he build it pragmatically because it sounds like he really just needs to move crap around on a *nix box. Which, again, suggests that you have no idea what the word pragmatic means. &gt; Just because php isn't great for numerical computing and seems to have been eclipsed by others as a system glue language doesn't mean it isn't ideal for generating html in response to a web request You don't even understand what I said to the guy. &gt; I suggested that he look at remote procedure calls as a way of posting to WordPress programmatically. Wrong, maybe, but qualified Yes. It's the less bad kind of wrong. (cough) And that's a reason why I shouldn't have told him the right thing. &gt; So I'd like to pose a question: When you rsync files to a remote server what transport mechanism do you use and how is it superior to ssh? Uh huh. And when people ask you how you get web pages, you tell them you get them by ARP. Clearly, mentioning a protocol way down the stack, instead of the defining protocol, is a reasonable way to do things that isn't the exact opposite of what everyone else does, and isn't a sign that you're trying to pretend your mistake wasn't a mistake. &gt; While I'm asking questions can you comment on the source of your anger? I wasn't angry until you started using personal attacks as a way to justify a bunch of opinions presented as facts without actual defenses. Note for example that when you're asked why PHP is the wrong tool, you mention two tasks that aren't its primary use, then say because this isn't either of those then it's the wrong tool (which is nonsense, since a knife's two big uses aren't cutting coconuts, yet you still use a knife to cut coconuts.) You didn't actually show why it was the wrong tool; merely why it wasn't your first choice. Then you go on to hassle me about how when I suggest using the webserver to serve web documents, that's because blah blah something about PHP not being good for numerical computing (god knows where that came from,) completely missing the point of the thing that I said to someone who isn't you. And hassling me because the thing you incorrectly saw in what I said is nonsense, and somehow it doesn't click for you that what you're criticizing is your understanding of what I said, *not* *actually* *what* *I* *said*. So I wasn't actually angry originally, but now what's got me mildly annoyed is the combination of cluelessness presented as fact by someone whose idea of having a conversation is a bunch of personal attacks, and the fact that you're off badmouthing me in another thread - ostensibly for the false claims you've made about my behavior here - while saying out of the other side of your mouth that you actually agree with me. Which is why it's actually obvious that this whole thing is a little piece of show you're putting on so that you can pretend to have the opinion I put forth - the obvious simple correct one - while also telling yourself that the person who put it forth is a dick and you were never wrong in the first place. &gt; Your's isn't the sort of delightful trolling that keeps reddit honest It's not trolling at all. It's also not my problem if you think anyone who has a different opinion than yours is trolling. Have someone whose opinion you trust explain to you who threw the first insult, who's giving explanations of their criticisms, who's being aggressive, etc. This really wouldn't be that difficult if you could just be honest with yourself, instead of making up a bunch of bullshit to argue with that I never said, then vocally laughing at me for how dumb the things that come entirely out of your own imagination are.
That might work too. I guess it comes down to where it needs to be easily accessable from.
Yeah, I've got someone in another thread telling everyone I'm a dick but he agrees with me ... about the thing I corrected him on, which in that thread he's arguing is wrong. People are dumb.
Head First books are terrible. I personally can't stand writing that mimics speaking. A good book is [Learning PHP and MySQL](http://www.amazon.com/Learning-PHP-MySQL-Michele-Davis/dp/0596101104).
&gt; I would then strip everything after the @ sign and use the part before it as the users "display" name. That doesn't work, many people would have the same display name, and for many peope it'd have their real name in it too, or just look daft. Let people choose their own display names.
[PHP Proxy](http://sourceforge.net/projects/poxy/) may be of interest. It's sort of an all-in-one proxy, but does everything you need.
Looking at your code on git. clean, simple, smart. Nice work!
OK, thanks for taking the time to elaborate more on your original comment. Such input is very valuable and will be taken into account. It became clear you're pointing out a problem of _advertising_. Despite it not being my favorite topic I totally get your point. Maybe this can be solved by exposing the resources that are [already](http://www.slideshare.net/search/slideshow?type=presentations&amp;q=lithium+framework&amp;searchfrom=basic) [available](http://lithify.me/en/presents) much more? Maybe we didn't answer the questions in the right place? Maybe we just need a features page with a short explanation? Maybe it'd be interesting to try and visualize such abstract features? 
thanks!
My god man, this has just saved me hours as I was just in e process of going through a stylesheet in order to replace the colours with dynamic values! I wish I could upvote you more than once! One thing I did notice was that capitalised com ours (eg FFF) are treated as separate colours to uncapitalised ones (eg fff), but that should be a 2 minute fix. Excellent!
$60,000/yr. In Hollywood, CA? HAHAHAHAHAHAHAHAAH Folks, you can make $75,000 EASY in Texas, have 0% state income tax, a **far** lower cost of living *and* a much shorter commute.
Both the code and the idea are simple and stylish, love it :)
Not really sure why you bothered to make this OO. You don't even use the constructor and then there is only one method, there really isn't a point. When you click the generate button even on the same site it just continually adds more colors to the palette. It's a pretty cool idea, I think a different sorting would make it more useful and appealing. Something else I would suggest too is to turn each of the color values into an integer to check for equality. Right now #FFF and #FFFFFF will show up right next to each other which really isn't that useful. This could be easily put into the class however, my issue with your class is that it doesn't need to be an instance. Your class could be completely static as it is now because you're doing the logic in process.php and just calling a class method with that information. You could do something like this that might be easier: class Processor { protected $styles; private $colors; function __construct( $styles ){ $this-&gt;styles = $styles; $this-&gt;process(); } public static function fromURL( $url ){ $contents = file_get_contents( $url ); $tmp = new self( $contents ); return $tmp; } public static function fromPaste( $styles ){ $tmp = new self( $styles ); return $tmp; } private function process(){ // $this-&gt;colors = preg_match $this-&gt;removeDupes(); // etc } public function getPalette(){ return json_encode( $this-&gt;colors ); } } Leaving you with either $P = Processor::fromURL('http://google.com'); Or $P = Processor::fromPaste( $_POST['css'] ); // or something idk Then you can just do $P-&gt;getPallete(); Or alternatively just pass those arguments right to the constructor instead of the static methods. 
Would be sweet if you could enter a HTML url and it would find embedded styles and externally linked CSS files automatically. Nice work.
I'd recommend de-duping the list. E.g., "#000" and "#000000" are equiv, as well as "#F7F7F7" and "#f7f7f7". Pretty handy tool!
Yeah, I think we're getting on the same page now. PHP Frameworks are a dime-a-dozen, so just _saying_ that you're better and giving a few bullet points isn't enough to convince me that I should expend any more resources investigating it. I agree, I hate marketing too, but it serves a purpose. Perhaps it's merely a side-effect of the environment we're in -- you're developers after all, not designers -- but when I go to the Lithium site, pretty much every page I go to I'm hit with a wall-o'-text that'd make any unix man page proud. That's good for documentation, but as marketing literature it's overwhelming (IMHO). Fewer words (talk less, say more), a few graphics of some key high-level concepts perhaps demonstrating some areas where you differ from conventional frameworks, with a specific emphasis on how your technique is better, etc. OTOH, the [ZF home](http://framework.zend.com/) is much more inviting; prominent links for just about every visitor, from the "what is ZF and why do I care?" to "I heard ZF is cool, tell me more!" to "Yeah, I need some help with ZF, let me see the docs and/or issue tracker". And while Agavi's home page doesn't provide much info at all, their [docs](http://www.agavi.org/documentation/tutorial) provides a great deal of "newbie" info. No offense, but your home page comes off as if you expect that every visitor has already been following your project since it's inception, and the vibe I get is that you guys are saying _you should know why you're here already_ and _you should already know all of this jargon that we're going to throw around_ (e.g. "Aspect Inspired Filter System"). I admit, you have quite a few very interesting features, many of which I listed in my 1st reply but also things like the custom app integration (for which there is also a lack of info). p.s. the black bar at the top of the page is _very_ annoying the way it flashes each time that a page loads.
Yeah I know I didn't need to do it the way I did, it was just the first way that popped into my head so I went with it. I like the idea of turning the values into something that I could check for dupes with. I'll refactor the code in a bit when I get a chance, taking your changes into account. Thanks for the tips!
Yeah not a problem. I'm definitely all for setting something like this up OO so that you can add stuff to it in the future but it's really important to have a good base to start with!
this
Only wished I had the two years of professional experience and knowledge of Flash :(. I do hope you find someone who fits your requirements however.
PHP is the main skill. If you have 2 years of PHP then feel free to apply. Sorry to have been so vague. 
removing the duplicates is harder than I expected, haha 
Came up with something like this quickly to convert colors to allow you to check for dupes: function convertColor( $str ){ $str = strtoupper( $str ); $len = strlen( $str ); if($len === 6){ return $str; }else if($len === 3){ $out = ''; $str = str_split( $str ); for($i=0; $i&lt;3; $i++) $out .= str_repeat( $str[$i], 2 ); return $out; }else{ // Probably not a color return false; } } echo convertColor( '3Ab' ); echo convertColor( 'FFfFFF' ); 
See, this is actually kinda useful. A couple of ideas for possible improvements: How about also having an ajax interface to allow you to click on each colour and see the particular lines in the css file (and surrounding lines - maybe highlight the line in question in yellow and have that appear in the middle of say 10 lines of css) which apply to that colour? I thought of something else pretty awesome too, but this would require significantly more work - you could show a screenshot of the website in question, with areas where each colour is used highlighted on the image. I know it would be possible, but it's not something you could do in a couple of hours (well, I know I couldn't anyway). Anyway, I like this. It's a nice idea. Good work :-)
Anyway, when that's done breaking, let us know, and we'll show you how to replace your plan with something far, far simpler and easier to tool.
I've added some duplication testing, refactored based on isometriks suggestions, take a look and let me know what you think!
 $P = Processor::fromURL('http://google.com'); In process.php should be $url from the previous line!
Landing pages get criticized easily. They are offering so much potential and it's the first thing you actually see. That's banal but true. Independent from your suggestions: I'm pretty proud of our current homepage and while I'm not anti-marketing as that would be entirely stupid. But -- my personal opinion is that -- as developers we should behave like developers and do stuff the way developers do at the same time make that page useful, inviting, pragmatic and accessible. It's OK to be edgy -- if at all this is still a mild form of it. To be clear I also enjoy changing my perspective and look on things in all possible ways. We don't need _solutions_ but information and direction. Information we already have can be restructured and show a way for newcomers. Behind the scenes we're currently working on building up the manual, enhancing the API even further docs plus migrating wiki documents to the new github presence. When this is done I can imagine we'll revisit the site. In case you're interested to help with further suggestions, mocks or want to write up a small RFC feel free to contact one of us team members on #li3-core or #li3 on freenode. 
Sir. You are pissing StoneCypher off royally. He has accused me of being sockpuppet account of yours. Clearly, while one person might dislike him, the very idea that *two* people would both mock him is clearly an absurdity. &gt; When you finally take the gloves off, he will start whining that you are being rude to him. That's nice. Why don't you try reading a dictionary next time before spouting off words in an attempt to sound like you know what you're talking about? &gt; Pretty much an attention whore. (sigh). Did you even read my post? I've tried twice now to explain to you that you don't understand what that word means and still you insist. Go and find someone else to talk to. (ps this is a very fun and easy style to write in I enjoyed it and would rate this post 9/10)
I'm like 90% sure this is giving me the exact same results no matter what address I type in.
With SSH or VPN, there shouldn't be a reason to discount telecommuting... aside from taxes and interstate payroll laws I suppose. Would you object to an out-of-state employee?
I definitely don't object to telecommuting, but our CEO does. It's because she's from 1982.
Fantastic. Maybe she's an original [Tron](http://en.wikipedia.org/wiki/Tron_%28film%29) fan and can actually relate to technological progress...?
the only "hack-around" I could figure out so far (and it's not pretty considering and ORM is supposed to spare me some pain) is this one: $modelCountries = array(); $entity = new User(); $entity-&gt;email = $user['email']; $entity-&gt;responsable = $user['responsable']; $entity-&gt;password = $this-&gt;createPass($user['password']); $entity-&gt;url = $user['url']; $entity-&gt;role = $user['role']; foreach ($user['countries'] as $country) { $p = new Countries(); $p-&gt;countryName = $country; $p-&gt;user = $entity; $modelCountries[] = $p; } $entity-&gt;countries = $modelCountries; But if anyone knows the "Doctrine way" to do this...please...be my guest...
[Young America, MN](http://maps.google.com/maps?hl=en&amp;q=zip+code+55555) also works.
&gt; Landing pages get criticized easily. They are offering so much potential and it's the first thing you actually see. That's banal but true. Not sure what you're saying here. Are you against the general idea of a landing page? &gt; as developers we should behave like developers and do stuff the way developers do at the same time make that page useful, inviting, pragmatic and accessible I would disagree here, although I know others might agree with you. Just to be clear, the "man page" reference wasn't intended to be a compliment, but it seems you may see it as such :) I disagree with you because, _as developers_, we're still human and all of the psychological factors that go into a good, compelling design are still at play. It's my opinion that your site is nowhere near inviting; rather, I saw all the text, read 2-3 sentences on a couple pages looking for some more info, but then closed the tab when I realized that I'd have to read through a novella of vanilla text to possibly find anything of use. Anyways... you're still a young project, and I know how that goes -- you don't want to put the cart [website] before the horse [Li]. I don't have the time for any more projects right now, but good luck and I'll be sure to check out 1.0!
Does "make" include making sure it works, or just the first draft?
lol, lets assuming a functioning crud, not just theoretical crud.
CRUD functions for a single table. About 5 minutes. After this little example, it should take less. Tools - Windows XP, MySQL, PhpMyAdmin, Doctrine, Kohana Create table in MySQL Query Browser. Export schema, add to migrations (whatever process you have for that). Run a script, if necessary, to regenerate your ORM. 1 minute max. Most of that is fiddling with MySQL QB Log in to PhpMyAdmin and choose what fields to list in dropdowns when using foreign keys (structure-&gt;relation fields) - 10 sec Using Kohana's Controller_REST, I already have 4 actions. Determine json Message formats: { 'entity':'newTable' ,'id':1 //orwhatever ,'fields':[ {'name':'fieldname','value':'fieldvalue} ,{'name':'fieldname','value':'fieldvalue} ... ]} } Response json Format: { 'success':true ,'error':'msg' } the action code looks like (depending on your needs and this is just the update, which is the most work): public function action_POST(){ $json = json_decode(Input::request('json','',true)); $success = true; try{ $table = Doctrine::getTable($json['entity'])-&gt;findOneById($json['id']); foreach($json['fields'] as $tuple){ $table-&gt;$tuple['name'] = $tuple['value']; } $table-&gt;save(); }catch(Exception $e){ $err_msg = "Exception"; $success = false; } $response = array('success' =&gt; $success, 'error' =&gt; $err_msg); echo json_encode($response); } Took 3 min. EDIT: See $json = json_decode(Input::request('json','',true));
TIL about the triple equal operator in php. For those interested: http://www.jonlee.ca/the-triple-equals-in-php/
Is the json back and forth a kohana thing?
Well, then you'd have to factor in time to write a driver program so you can actually test this code. Assuming 1 table, and nothing too crazy in terms of number of columns or data-types, I'd say 4 hours.
No, it's just the fastest way to pass variable structure table data. You see I just parse the json to put into a Doctrine object and manually create a response. That has nothing to do with Kohana, per se. Kohana handles the routing and splitting of basic operations. My CRUD operations have nothing to do with the frontend (what creates the CRUD requests and what happens when it succeeds or fails). Maybe the frontend is Sencha/ExtJS, maybe it's a hand-crafted HTML framework from 1996, maybe it's Java Struts. I don't care. JSON is a better choice for serialization than most other solutions, imo. It's important to note that there is ALWAYS some kind of contract (message format) that needs to be agreed upon per action for the front end &lt;---&gt; back end. EDIT: Whoops, forgot something that should clear it up.
From a usability standpoint I keep finding myself clicking the web address button and trying to paste or type the URL into that menu bar thinking that the menu bar is the actual Text Field. Maybe either make that a URL input bar or make the buttons more pronounced as buttons and a menu rather than text input. On a side note I like that layout and style of it! Nicely done!
i'm going to have to read up on this, seems very quick and makes a lot of sense
Indeed. I would convert all 3 hex colors to 6 and then convert the string to lowercase. I love my lowercase.
Overpasses or bridges, catch em before they jump. No, I kid.
Also: Show the colors in order of hue. Does it grab rgba values?
how about crud via drupal ?
Weeeeell. We have ZIP's in Sweden.
Low/no pay? Hard long hours? Unlikely chance of success? Sounds like a fucking dream come true. Can i use it in my resume? Please please can I?
Awesome! 
This is a typical job request from someone who hasn't coded much. How long would it take a good programmer from any language to pick up something as basic as MVC? I've moved from C#, c, c++, java, php, python, perl. Non of those transitions took long. Sure it takes a few months to learn all the little nuance of the language, but asking for lots of experience in Yii is the sounding of a very loud alarm bell warning programmers away. Good luck with the start up. Do we get a hint of your game changing plan? :)
At first I thought you were crazy. Then I realized you are correct.
Useful!
*browsing trough belinda's photo stream on flickr*
I tried it on my site and it seems that some colours are missing from the list. If I use Chrome's Inspect Element, it clearly shows the colour in the stylesheet which is missing. I'm talking about a simple background-color...
I'd look into single courses rather than a whole programme. Not sure about USA but here in Sweden we can just freely pick what courses we want. It won't lead to a degree but it leads to more knowledge of the things you like.
It seems you are correct, I will look into it!
I wouldn't know. I haven't done Drupal.
I'd advise against judging entries by speed - that's hardly an indicator of good code.
Try to find a high school kid who has the time to waste on pipe dreams. The rest of us actually need income and job security.
Speed != good code. That I am fully aware of. I'd try judging with several factors in mind. Speed will be a factor but I rather pick an easily read/understandable code snippet as a winner over a one-liner that does the same thing faster.
Just FYI, the answers you get here will be in programmer time. So take what they say and multiply it by a factor of 5 to 10.
Very cool.
im going to add this later today
Also against judging by speed, but usually because it might be dependent of other factors than the running code and might vary within the same competition depending on the external factors. The point of competitions are usually not beautiful code. :-) We've usually had to go with code length as it's unambiguous (.. and you pick up quite a few neat tricks that you won't use in any serious setting, but are good brain teasers). You can find a collection of possible problems at [projecteuler](http://projecteuler.net/) or [phpgolf](http://www.phpgolf.org/).
It is particularly useful for a lot of built in functions. You will find it in the PHP reference on things like `readdir`, and `strpos`. `strpos` will return a number if it finds the string, but false if not. However, say it found it at the very first position. Which would be 0. If you were using the '==' operator then a 0 would give you false even though the string was found!
Maybe not the speed at which they're completed but run time should definitely be a factor, IMHO.
Totally disagree. If you implement an algorithm in `O(n^ 3)` when it can be implemented in say `O(nlogn)` then speed differences are going to differ drastically. They may yield similar results with a small `n` but running the same code, no matter how "beautiful" will be incredibly slow. 
Why not submit it to non-programmers and whomever's code is understood the most by the most people wins? 
This is too much of scratching the surface for views. Someone should make a better one with indepth example.
yep, I thought i changed that at first haha :/
Ramen!
Cool bored project! One possible improvement might be to use proper DOM parsing to find the relevant CSS references in place of regex (which many will point out is a [bad approach](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags)). A marginally useful feature that you could add would be a sort on the result set of colors; since they're all essentially hex values, you should be able to sort on that. For example, start with `0x000000` and end with `0xffffff`. That would also make the result look kind of neat.
In before "OMG YOU HACKER!!". Short answer, yes. Long answer, it can be done but it's also possible for the form owner to prevent it.
Very cool and helpful utility. It would be interesting if you could include the number of times the color occurred in the code as well.
"ZIP" codes exist everywhere, they may just go by a different name. The problem is that they all have different validation (ex. US ZIP codes are always 5 numbers, while Canadian postal codes are numbers and letters). Either way, if you're interested in location it's better to either geolocate based off of IP (effectively automatic, though less precise) or ask for state / country.
Make the contest about real world problems? API access, parsing files, sanitizing output, etc. Make it more challenging by requiring use of specific functions for API access e.g. file() curl functions or fsock functions (all can be used to perform the same tasks with varying degrees of success, difficulty and speed depending on the server configuration). Use public APIs like the reddit, wikipedia or iTunes.
Yea, I do this all the time. Look into [cURL](http://us2.php.net/cURL) Before MLS had any APIs, I wrote an app for a real estate office that would log in to their site and fill out forms to add properties. It even uploaded images and everything. When adding a property, they had to input it to MLS and 2 local directories, so I wrote an app that collected all the info in 1 form, the automatically submitted to all 3 locations by filling out forms just like you appear to be requesting. Keep in mind though, when companies don't know you're doing that, they'll change the form without telling you. I had to write a script that would just monitor the form for changes, and alert me if a change happened then I'd have to go modify the script. If they don't *want* you to do that, it's really easy to block them, so chances are, if you're doing something shady, you're going to spend a lot of time building this and will get blocked really quick.
snoopy, curl, node.js (http.client), selenium, etc.
races! i've done races. you can take a section of ugly poor code, put that in lane A, and clean it up and optimise it and put it in lane B. then run both a thousand times and see which is fastest. then for another race, put new code in each lane, and make bets on which will go fastest. competitors might be substr operations versus sorting or something.
Yes, but that can be stopped short by a captcha.
Thanks for the reply, I really like the sound of this. What I am looking at doing is exporting my gmail phone contacts and putting them into my phone providers database where I get free SMS. This would be really handy!
I guess what I'm asking about is what spam bots do (which is not what i'm doing [I'm doing this.](http://www.reddit.com/r/PHP/comments/i6a4a/is_it_possible_to_write_a_script_to_log_into_an/c218ucq)) My goto language is php, is there anything better suited for this type of stuff.
In that case you might want to check Google out for APIs. http://code.google.com/apis/contacts/ Usually you can find APIs for things like this.
That would certainly make things much easier! Thanks!
I think he's needing to fill out forms to get them *into* his provider's DB.
this might save you some time: http://mail.google.com/support/bin/answer.py?answer=24911 I don't know what provider you have, but they might have some kind of bulk upload feature. At the very least, you could put them straight on your phone in vcard format or something.
Reason #1: face-to-face meetings are always better. Reason #2: Screen sharing is much easier than any other way when one developer in a team needs help from another developer in a team (see reason #1) Reason #3: Telecommuting implies a significant amount of trust in the person who never shows up to the office. What if they keep getting distracted and don't get any work done? 
Selenium might be the easiest way to do this, as with the browser plugin you can 'record' actions in the browser and then repeat them. I've done this numerous times in ruby though, for cases where you need to run them via cron or something. The project I had needed to fill out forms for various things in the database and go through the 7 steps of web forms to get to the data which is then scraped. Not especially fun... The script I did used the mechanize library from ruby, which works ok but had no javascript support, which can make things challenging depending on the site. Selenium is a better alternative if you have to deal with js, however it also requires a real browser running which doesn't work so well if you're trying to go through thousands of submissions via a cron job on a linux server...
i do this with google voice so i can send and receive SMS from my php app. https://github.com/shnhrrsn/Google-Voice-PHP-API
It's quite easy, actually. http://php.net/curl/
Yep, that's the second half of the project!
Thank you, it's always helpful to see how other people handle things!
fixed :)
I've done this quite a few times for connecting business logic to client sites that didn't have any kind of API. Unfortunately I've come across third party forms that constantly changed field names, so it became necessary to then create a form parser. I've hit some forms that are structured in a multi-pathway wizard type of thing, which responded to each post with multiple redirects. It was a nightmare. And then I once had to do it for a site where they had some weird Javascript that dynamically changed the form and form logic. Javascript interpreter? No, fuck that. At that point you have to get in contact with the site and beg them to create an API and join the 21st century. But like you said, even under the best cases, these forms can and will change on you, so it's best to steer clear of this kind of data interchange if at all possible.
Yeah, because reddit has the best documented API.
cURL is great for something where you need to make some simple post or get requests. However, it can get painful when you need more than that (say you need to log into a remote site, save the cookie, navigate to a page, fill out a form, submit the form, choose from 3 download links, etc). If it's more complicated than just posting data to a URL, I'd suggest checking out the mechanize library (available for php/ruby/perl and probably others). The various versions are all ports but work nicely for automating a browser session, without an actual browser.
I actually found the exact opposite to be true. Setting cookies was actually super easy, it's just one line per cookie I had to add. And the posting of data using cURL was also easy, it was all the formatting and getting field names right that was a pain in the ass for me. I had hundreds of fields I had to post, so it was a lot of me viewing source, copying tons of poorly named element names, and using those.
&gt;Unfortunately I've come across third party forms that constantly changed field names, so it became necessary to then create a form parser. I eventually resorted to that. It'd alert us if a field changed. The client was aware they did this, so it was all billable work for us. It was actually good. MLS had an API in the works at the time, but wasn't expected to be out for a while, so this was *supposed* to be temporary... well MLS ended up being like 3 YEARS late on that API, so this ended up being used for a lot longer than we anticipated.
Um, well done? Do you know what it is? I do wonder if you even understood my comment if that's all you could add. Anyway, I'm sorry to pop your little self important little bubble, but next time could you add a comment with some value in it?
I wrote that on my phone. Sorry its tedious. MVC is a design pattern where there are three parts: model, view, and controller.
https://github.com/reddit/reddit/wiki &lt;- It's all well documented right here.
Are you a fucking idiot? We all know that. Stop talking to me.
Typed in http://facebook.com and got: &lt;br /&gt; &lt;b&gt;Warning&lt;/b&gt;: array_unique() [&lt;a href='function.array-unique'&gt;function.array-unique&lt;/a&gt;]: The argument should be an array in &lt;b&gt;/home/evilernie/magicmarkker.com/colorPalette/Processor.class.php&lt;/b&gt; on line &lt;b&gt;36&lt;/b&gt;&lt;br /&gt; &lt;br /&gt; &lt;b&gt;Warning&lt;/b&gt;: Invalid argument supplied for foreach() in &lt;b&gt;/home/evilernie/magicmarkker.com/colorPalette/Processor.class.php&lt;/b&gt; on line &lt;b&gt;43&lt;/b&gt;&lt;br /&gt; []
because http://facebook.com is not a url to a .css file... I'll try to add in functionality for just a url that then grabs all the css files from the site, but until then you need the link to a css file
When was that created? Last time I checked the API outside of specifying how to log in I had to reverse engineer the rest.
[AutoIT Script](http://www.autoitscript.com/site/) might be of use if you're on Windows. If CAPTCHA is a problem, you could still get your script to do the heavy lifting in a Browser and prompt you when you were needed.
If the site does not utilize a form token for posting, then I suppose you can write your own javascript to post values to the server repeatedly.
&gt; You are pissing StoneCypher off royally No, he isn't. 
done
You are the one who is displaying absurdity, sir. You are an uncouth person and absurd comes from the Latin *absurdus* which means uncouth. This is what happens when you read the dictionary and think you know English. Frankly, armchair linguists like you annoy me. &gt;That's nice. Why don't you try reading a dictionary next time before spouting off words in an attempt to sound like you know what you're talking about? (headpat) Did you look that up on Wikipedia? &gt;(sigh). Did you even read my post? I've tried twice now to explain to you that you don't understand what that word means and still you insist. That's just fine Dolores. Keep harping on an obviously incorrect point while you make it seem like I am the one who is wrong. &gt;Go and find someone else to talk to. Keep it up, chuckles. At this point I feel that you are simply being dishonest and unwilling to admit your own personal failures. Please stop replying to my posts. (You're right. This *is* fun!)
Looking good, sir. Bookmarked :)
i agree. i do unit testing but never hooked it up to jenkins because i didn't have a whole day to devote to hacking up a solution. hopefully this leads to better articles on the matter
That looks like a pretty good first-line screening tool. Thanks for the link.
Yeah about 3-6 hours. Followed by 3 months to make it secure, lightweight, cacheable, consistent, feature-rich, easy to use, templateable, ...
It's got a lot of problems, and it pushes some things to make the count fit, but it's a starting point at least.
I'd 2nd cURL where ever possible but if you need a more robust solution or the page you're logging into doesn't cooperate with cURL for whatever reason then there's SimpleTest php framework. Read over these two pages for more information: http://www.simpletest.org/en/web_tester_documentation.html http://www.simpletest.org/en/form_testing_documentation.html
This is never going to show up in /r/php huh.
I'll throw in Zend Framework's Zend_Http_Client too -- easy to use, nice OO interface, will take care of cookies and stuff for you.
If I were to ask them to implement a known sorting algorithm I'd let some one whom makes quicksort win over someone that finishes a bubblesort algoritm obviously ;)
The idea behind a contest like this is to invite beginners and experts, I believe programming readable code will help beginners understand all solutions more easily. Creating a one-liner is of course fun but it wouldn't teach a beginner anything useful!
I like the idea behind of that, there's loads of free information that can be connected together to display results. 
Does it really matter whether I wrote PHP or php? You just seem a bit nitpicky. Even the PHP-logo writes it *php* and even if that's not correct I believe everyone understands what I'm talking about?
Unless they want to add captcha or any type of verification it just seems like a lot of work for blocking expert users from your website. It doesn't really give you any unfair advantage compared to e.g a bot in a game that instantly e.g attacks or creates units for you.
You've never had a form attacked by a spam bot before have you? I created a form for a client one time that paid a another firm to provide leads. This firm turned out to be unscrupulous and wrote a script to auto submit my form. Their programmer and I had a coding battle for about a week before we we're able to prove it was them. Since the OP didn't really give much info on the purpose of the form, I figured a fair warning might be in order.
Point taken, just me that's used to spam bots attacking open forms only (registration, commenting a bog etc). Never had trouble with targeted spam attacks. 
While predicting the time to do something varies a lot (a lot!) it's still an interesting topic. I should have a book at work with estimations for php. Hardly exact science but having a basic understanding of project size you can give a time estimate that should be "somewhat" accurate. 
Is this a one time task or something that will have to happen often? If it is a one time task then really speed and memory do not matter that much.
Question: what type of projects are you doing? I've had friends doing really repetitive jobs over and over. What makes your job offer interesting for a php developer that wants a challenge? If one were to assume there's more projects after this one 
"scraper"
You need a ~~pivot~~ junction table. So, something like: members memberid membername bands bandid bandname band_members id bandid memberid Edit: This may help with further explanation: http://www.wellho.net/solutions/mysql-many-to-many-table-mapping-pivot-tables.html Edit again: So the query to get all the bands a member is in (let's pretend the member's ID number is 2): SELECT * FROM bands as b INNER JOIN band_members as bm ON b.bandid = bm.bandid WHERE bm.memberid = 2 The query to get all the members in a band (where band's ID is 5) SELECT * FROM members as m INNER JOIN band_members as bm ON m.memberid = bm.memberid WHERE bm.bandid = 5
What's the relationship between bands and members? Many-to-many? i.e. bands can have many members and members can belong many bands? Or One-to-many? i.e. bands can have many members, but members can only belong to one band? If the former is true, then jb2386's solution will work.
Looking at his picture, I assumed it was many-to-many which is why he was having a bit of trouble coming up with the table structure. But I concur, if it's one-to-many, my solution is a bit too much.
The given example is certainly many-to-many. Members are in multiple bands, and each band has multiple members.
Sorry, I should have been clearer about that. It's many-to-many, in that bands can have many members and members belong to many bands.
Thankyou very much, that's very helpful; exactly the kind of explanation I needed! Wish I had more upvotes! [edit: to give! I wish I had more upvotes *to give*.]
you do not need a cross table at all. This would be a one-to-many, unless members have many bands. All that is needed is bands and members. Bands(id, name) and Members(id, name) putting band or member as a prefix for the table fields is redundant.
I believe it's a many-to-many relationship, otherwise I wouldn't have suggested it. You're right on the column names though, I sorta just banged that out without foresight of the queries.
BTW, if Curl or Google APIs won't get you there, consider building a Google Chrome Extension.
You already have the answer, but I would recommend reading up on [database normalisation](http://en.wikipedia.org/wiki/Database_normalisation) and, if you're slightly masochistic but enjoy the history of the relational model, [Codd's 12 rules](http://en.wikipedia.org/wiki/Codd%27s_12_rules)(there are 13 of them). Learning how to properly structure databases is an art form, but one well worth learning as it will save you a *lot* of pain in the future.
Good answer, but that's a [junction table](http://en.wikipedia.org/wiki/Junction_table). A [pivot table](http://en.wikipedia.org/wiki/Pivot_table) is something entirely different. And yes, the author of that article is mistaken as well. (If terminology is important to you; if not, disregard)
It was a joke - you asked for a beginners competition. I suggested something simple!
Alright, my bad :-)
Sorry, I should have been clearer. I couldn't think of how to express it at the time. I want it possible for bands to have many members, and also for members to be in many bands, so it is a "many-to-many" relationship (apparently... I'm only just learning this :p) jb2386's solution does seem to be exactly what I needed, but thanks for your input!
Ah whoops. I was thinking it wasn't the right word, but the image of a pivot worked in my head and I couldn't find the correct word! Thanks. :)
A rough estimate given by the book: Determine the effort of your project in person-months of effort by multiplying your lines of code (in thousands) by 1.4 Which means, 1000 lines of code would require 1 person 1.4 months to code. For this estimate to be any where near useful you'd assume pure code lines, no blank lines and so on.
&gt; unless members have many bands Welcome to the real world. Let's assume it does happen, and let the OP tell us he does not want to support that possibility before concluding that a joining table is not needed.
Whenever you find yourself adding the same entities (e.g. people) to many different columns on a single table (person1, person2, etc.) then the first question always has to be, "am I missing a table here?", because you likely will be. It is the many-to-many joining table in this case.
I am begging you please to read up on relational database design before continuing with this project, especially if there's a chance someone else will inherit your code. Other people have already pointed out the insanity of your proposals, so I'll just leave you with this mantra: A good programmer is someone who reads more than he writes. 20 minutes of reading can save you 2 hours of coding, and less code = less bugs. KISS and go look at other people's code.
&gt; putting band or member as a prefix for the table fields is redundant. I often use &lt;table name&gt;\_id for the primary key because it makes writing join queries more intuitive. You don't have to think about which side is id and which is &lt;table name&gt;\_id as they are both always the same.
There is no general standard, people tend to follow what they like. E.g http://codeigniter.com/user_guide/general/styleguide.html#variable_names http://framework.zend.com/manual/en/coding-standard.coding-style.html etc; as long as YoU_dONtwriTE like this you should be golden.
I don't believe there is a standard to which all PHP devs follow - it's usually in house, or consistency per project you'll find. However, if you want to follow some kind of standard personally, it'll be the coding style used in the Zend framework. If you follow their standard, then at least you code to the "Zend standard".
I used to underscore, but since realising that frameworks are the future I code to Zend Standards. After a few months of camelCase variables I don't ever want to go back.
There are many different coding standards out there - so there is no general standard but rather it's a matter of personal taste. However, if you use a certain framework than it is recommended to use the framework's coding standards for consistency's sake. Personally I referer in my own projects to the Zend Framework Coding Standard for PHP. But IMHO you shouldn't worry too much about it. No project will fail because of the preferred method of variabe naming. It's far more important to be consistent. Btw, there are some great tools out there that check your code for style consistency, e.g. http://pear.php.net/package/PHP_CodeSniffer . 
Why do people who ask for help in /r/sql always thank the guy that gives the wrong answer :(
That's actually a bridge table. The problem with learning SQL from wikipedia is it's written by people like you and jb2386. Also, it's not a bridge table until there are foreign keys in both directions. Right now, it's just a pair of convenient joins.
Neither could he. It's a "bridge table," not a junction table, and it doesn't become a bridge table until there are foreign keys in both directions. 
Keep in mind a few things: * PHP's style is underscores for functions * most frameworks use camelCase for functions (CI, Zend) * if you join an existing project use whatever they use * if you make your own project, use whatever you like Of course, everybody uses PascalCase for class names.
Please stop wasting precious bandwidth.
So when these goons are done talking about many to many and calling bridge tables various wrong things, here's how you *really* do it. create table Bands(id integer not null, name varchar(100) not null); create table People(id integer not null, name varchar(100) not null); create table Membership(bandId integer not null, peopleId integer not null, startDate date not null, endDate date not null, foreign key(bandId) references Bands(id), foreign key(peopleId) references People(id)); Because of course, these guys who keep talking about normalization produced abnormal tables each in the first normal, second normal and sixth normal sense. The louder the begging someone to learn to do it right, the lower chance the speaker actually knows how. You *need* the foreign keys, and you *should* *have* the time records. If you skip the time records, later you will wish you hadn't.
&gt; You already have the answer And yet none of the answers here when you said that were correct. &gt; but I would recommend reading up on database normalisation None of the answers here were correctly normalized or keyed. &gt; Codd's 12 rules (there are 13 of them) No, there aren't. Rule 0 is not a rule for the worker, and Codd points out that it should not be counted, in the book you haven't read. Stop learning SQL from wikipedia. Incidentally, you patted on the back answers which ignore most of those rules, because they aren't correctly leveraging 3, 8, 9, or 10. But hey, why don't you just cut and paste a link you don't understand, in order to look smart? Yes yes, let's make relational schema in relational databases, then not actually make the relations, then point to the document which guarantees relations as evidence of how right you're doing it. (facepalm) &gt; Learning how to properly structure databases is an art form You have no idea what proper database structure is.
The basic answer was "you need a joining table" which is the pointer he needed to get started. The rest is fun reading and a good introduction to database basics and history. I make an excellent living knowing what a proper database structure is, thank you.
endDate not null? startDate not null? So they can't have a membership until you know when they're leaving the band? And they can't have a membership unless you know the date they joined?
Use camel case under all circumstances - otherwise every line of code will fail and planes will fall out of the sky. Even if you're just writing a program to add two variables together - planes will fall out of the sky.
&gt;Today, a plane crashed in the Atlantic Ocean because aaarrrggh didn't use camel case on a PHP contact form that he made.
Yes, I camel case or I underscore. I just follow what has come before me, so it varies from one project to another.
Who said anything about learning SQL from Wikipedia? The links were merely put there to show him the basic differences. You know what they say about assume. I actually say bridge table but I called it junction table there because it lines up with the Wiki stub. But the terms are interchangeable and both have been used by industry experts and db engineers. But by all means if you claim overriding authority on the matter then let's hear it. 
&gt; Wikipedia &gt; book you haven't read &gt; You have no idea what proper database structure is. I don't normally get angry on the internet, but I'm going to invent a machine which punches arrogant little shites like you in the face over the internet. I know Stuart. Stuart knows his shit. Probably far more than you do. Stop trolling every single fucking post on /r/php.
&gt; I don't normally get angry on the internet That's nice. &gt; I know Stuart. Stuart knows his shit. And yet, those errors stand. Oh, well.
You just can't help it can you? You have to fucking troll. SG didn't make errors, he just didn't go in to any great detail. You, on the other hand, attempted a complete answer, AND YOU FUCKED IT UP! Who do you think I have more respect for?
&gt; Who said anything about learning SQL from Wikipedia? Me, because the Wikipedia page on these topics makes these errors, and no edited SQL book does. &gt; You know what they say about assume. Yes. For example, when you assume that someone doesn't have a valid reason for his belief, you make an ass out of yourself. Not out of me, though. &gt; I actually say bridge table "I got it wrong here, but normally I get it right." &gt; I called it junction table there because it lines up with the Wiki stub. Short term memory, huh? &gt; But the terms are interchangeable No, they aren't. This is why I believe you learned it from Wikipedia: I can't think of any legitimate source that makes this mistake, but Wikipedia does. Go read Celko. &gt; and both have been used by industry experts and db engineers. Yes. To mean different things. &gt; But by all means if you claim overriding authority on the matter then let's hear it. SQL for smarties actually devotes half a page to the difference. But hey, you know what they say about snide sentences about assuming: they make the person not want to help you. Maybe you should have remembered the last two times you said thank you to me before taking that tone. Those worked quite a bit better.
&gt; So they can't have a membership until you know when they're leaving the band? Sorry, endDate shouldn't be not null. You're right: I shouldn't do SQL before coffee. Thank you for catching my mistake. :) &gt; And they can't have a membership unless you know the date they joined? It had not occurred to me that you might be writing a database design to cope with incorrect or incomplete data. This is a very uncommon thing and should be mentioned. Frankly, unless you're tracking third parties over which you have no data control, or historic data where the data is permanently lost, yes, your database design should require complete, correct data. That's one of the purposes of an RDBMS. Are you really coping with incomplete data without mentioning it?
&gt; The basic answer was "you need a joining table" which is the pointer he needed to get started. Repeating this does not make it correct. What he needed was a bridge table, not two ad-hoc relationships under the wrong title. &gt; The rest is fun reading and a good introduction to database basics and history. Yes, if you have a well edited SQL book. Unfortunately, you pointed him to Wikipedia, which makes three critical errors on the topic, one of which you are currently repeating. &gt; I make an excellent living knowing what a proper database structure is, thank you. And the people who made NYC's payroll system did too. It turns out that being employed is not in fact evidence of competence. Being able to admit your errors, however, usually is. C'est la vie. Anyway, you or your random coworker cheerleader are playing mass-downvote, in standard-issue ignorance of rediquette, because anger is apparently more important than the rules, and you don't appear to actually have a technical point, any reference to defend yourself, or anything new to say other than "waaah." So unless you start showing yourself to actually be correct with something stronger than community written reference when both Celko and Karwin say you're wrong, then I'm not going to bother replying anymore. For someone who made demonstrable errors that you won't admit to (and who is now editing their posts to simply remove them,) you sure are trying to take the correctness high ground.
&gt; You have to fucking troll. Pretty boring for a troll to scream troll. You're adding nothing. Complain somewhere else. &gt; SG didn't make errors, he just didn't go in to any great detail. No, he made errors. You just don't know what you're talking about, and can't identify them. &gt; You, on the other hand, attempted a complete answer, AND YOU FUCKED IT UP! I made a small error. Your friend made three serious errors. I admitted mine. He won't admit his. But yeah, you're understanding this correctly. :) &gt; Who do you think I have more respect for? (shrugs) I really don't care. Seriously, you're wasting your time screeching and mass downvoting this way. I enjoy watching you do this, because if you really believed your friend was correct, you wouldn't be this angry.
I used to camelCase due to my Microsoft training. After years of PHP I no longer do and it just looks weird. All the PHP function use underscores, as do most developers I've worked with, so it just makes sense for me to do the same.
You do appreciate we live in the real world where many people are restricted by their provider to using MySQL with MyISAM which doesn't support foreign keys, right? At the minute, he doesn't need an in depth study of different storage engines, he needs to understand the absolute basics of many to many relationships. Some light reading on the topic via Wikipedia is more than enough to get started with and, unless planning to make a living from database design, is accurate enough without having to buy a relational database bible.
I used to use camelCase, then I started using Kohana and my methods have changed completely to under_score.
You know your stuff. There's no denying it and I'm quite sure if your attitude didn't absolutely stink we could learn a lot from each other through discussion, debate, criticism etc. But, sadly, your attitude *does* stink. You always know best, even when you're wrong (which you just gloss over and carry on with your attacks elsewhere), and you assume everyone else here knows nothing, which is quite clearly not true. I'm no cheerleader... I've watched you mock and deride just about every contributer to this subreddit, only it's just pure coincidence that this time you attacked somebody whose username I happened to recognize as somebody I know and therefor I have first hand experience that you're wrong in your accusations. I have a real problem with your assumption that SG (or anyone else here) doesn't have the knowledge to enter a civilsed discussion, and so you mock him instead. What the fuck gives you the right to do that? Would you do it face to face? I read most posts and comments on /r/php and contribute where I can, and nobody, not one other contributor, has ever made it an unpleasant place to be or stood out in any way. And yet *every damned time* I read an obnoxious, mocking or unhelpful comment I just know that when I check the username it'll be you. You just cannot be civil to anyone. You cannot correct somebody without patronising them. You cannot help an OP without deriding everyone else who has previously tried. You seemingly cannot contribute civilly in any way to this community. THAT's why you're getting downvoted right now, and I'm going to keep downvoting every post you make which has even a hint of sarcasm or derision in it, regardless of whether there's any facts to be found in your content. My upvotes await any change in attitude. I'm not a mod, or some sort of forum police, so I'm not going to report or start campaigning for a ban. I'll just downvote you until you cheer up or fuck off. Either is fine with me.
I used to use underscore, but prefer camelCase now.
I generally camelCase just about everything except ClassNames. I learned via frameworks (currently using symfony), so it's what comes natural.
&gt; I'm quite sure You seem to have missed the "I don't care" part. Rage harder. Really, it's great reading. :) &gt; I'll just downvote you until you cheer up or fuck off. Enjoy breaking the reddit rules.
You started with the tone. "The problem with learning SQL from wikipedia is it's written by people like you" No that's not insulting or anything. &gt; I can't think of any legitimate source that makes this mistake, but Wikipedia does. Go read Celko. &gt; SQL for smarties actually devotes half a page to the difference. [SQL for smarties excerpt](http://books.google.com/books?id=Hi9fMnOoRtAC&amp;pg=PA18&amp;lpg=PA18&amp;dq=%22sql+for+smarties%22+%22junction+table%22&amp;source=bl&amp;ots=tt4V_cW4Yl&amp;sig=pv_uRhmxYVy-hgMfvjIelIIstro&amp;hl=en&amp;ei=QjoDTq_TOsm20AHfi4GIDg&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=1&amp;ved=0CBYQ6AEwAA) "One of the basic tricks in SQL is representing a one-to-one or many-to-many relationship with a table that references the two (or more) entity tables involved in their primary keys. This third table has several popular names, such as 'junction table', or 'join table'." Oddly enough searching the book for the string "bridge table" returns no results. "Bridge" only returns one and it has nothing to do with it. That's the whole book online btw. Anyway, I have work to do.
I use under_score as a I roughly follow PEP 8, even though it's made for Python, it's a standard of some description.
I use under_score for PHP, camelCase for Java.
Oh, you totally care. Your mom told me last night. Ha! *feels better now*
PHP I tend to underscore. However, I keep code consistent with other code (if working with frameworks, APIs, or another coder's stuff and they use camelCase then I do too). JS is pure camelCase though. Language standards use them and it helps my mind jump between PHP and JS (and instantly remember things like string concatenation +/.).
I find I use underscores, but I also add an `_underscore_to_the_beginning` to really denote the local meaning of it, it also allows you to do things like use the same name for two variables with a small difference, for easier readability, ie: `function changeName($_name){ $this-&gt;name = $_name; }`
Yes I do
I've slowly moved from pascal and camel case to lowercase underscored everything: new namespaced/class/name; function_call(); $my_variable; 
And you think I'm the troll.
&gt; You started with the tone. "The problem with learning SQL from wikipedia is it's written by people like you" No that's not insulting or anything. It's supposed to give you an idea of why you're not supposed to be using reference written by amateurs. It's only insulting if you think there's something wrong with not being a world class expert with an editorial team. That can *only* be insulting if you have a serious unwarranted ego problem. &gt; SQL for smarties excerpt The problem with exerpts is that when you cut the rest of the text away, explaining in detail what it is, you remove the thing that distinguishes it both from what you're trying to talk about *and* from what you wrote. I would explain, but you're stuck downvoting the guy you usually thank. (You won't have an opportunity to thank him anymore.) &gt; Oddly enough searching the book for the string "bridge table" returns no results Wow, and that's the only book he's ever written! Oh wait, no, it isn't. Funny how first you said they were the same thing, now you find something that talks about one but not the other, and instead of understanding that that means they're different things, now you think one doesn't exist. It's like you're struggling to come up with any explanation that doesn't involve you admitting that you don't actually know the difference between the two terms you used to claim were synonyms. &gt; Anyway, I have work to do. That's nice. That won't change that you're incorrect, that the reference you pretended you agreed with says something different than you're currently saying, that the legitimate reference you just checked has a list of synonyms for one, but does not list the other as a synonym, and that you are failing to come to the obvious conclusion: that they're both real, and they're different things. But yeah, go feel correct, instead of saying thank you again to the person who just pointed out yet another thing you needed to learn about. Incidentally? &gt; You started with the tone. Funny: when you said "this isn't correct, this other thing is, the author of that article is mistaken," you expected to be taken seriously. When I said the same thing, but underscored why this article shouldn't have been taken seriously in the first place, you took offense. Why? Because I suggested you weren't a world class SQL author with an editing team. And you find that insulting. Even with the evidence in front of you as clear as day, you can't admit your error, and you can't stop complaining about the perceived offense in being told that you aren't a pro tech author. Your ego is stupendous. 
in this case just doing $str = str_replace('\'', '"', $str); $str = str_replace('[[', '[', $str); $str = str_replace(']]', ']', $str); with the $str being the json, gives you a valid array of the google data, instead of that regex. it'd need pre-sanitising to ensure there arent any more " inside though
You were a dick. I got angry with you. You laughed it off. I explain why you're being a dick. You're not interested. So, fine, no longer shall I be taking this seriously. If you can't beat 'em, join 'em. Now please excuse me while I go INSERT INTO your mom again.
Way off the mark, again. And nope, I haven't downvoted you once. I actually abide by reddiquette. Having read the rest of this thread it's clear that you're either an aspiring troll, have some sort of psychosocial illness, or really really poor reading comprehension skills. It's entertaining watching you get systematically vilified by everybody you reply to, but at the same time kinda sad. I feel bad for you. Take care
&gt; Having read the rest of this thread it's clear that you're either an aspiring troll, have some sort of psychosocial illness There should be some kind of award for people who can't cope with disagreement to the point that they publically speculate mental illness in another person. &gt; It's entertaining watching you get systematically vilified by everybody you reply to Yeah, that's exactly what happens. &gt; I feel bad for you. Yes, that's the best way to refuse to admit error. :) Doesn't it embarrass you to say this to someone you've thanked for their help in the past?
awesome, Thanks for this. I'll give it a try tonight. Edit: You were very close. Backslashes were throwing it off, so what I ended up needing was: $content = str_replace('\'', '"', $content); $content = str_replace('[[', '[', $content); $content = str_replace(']]', ']', $content); $content = str_replace('\\', '\\\\', $content); Thanks for the nudge in the right direction Edit 2: Or the more simplified version: $search = array('\'', '[[', ']]', '\\'); $replacement = array('"', '[', ']', '\\\\'); $content = str_replace($search, $replacement, $content);
&gt; I got angry with you. You laughed it off. Yep. I still am, too. &gt; If you can't beat 'em, join 'em. It's cute that you think making "your mom" jokes is joining someone making legitimate technical points defended by reference, and all.
I mostly code in Python so I tend to use the relevent bits of PEP8 when coding in languages without their own standards (such as PHP or Javascript). So in this case underscores. I'd imagine Java/C# coders often use camelCase for the same reason when they use PHP. (And the reason for coding stuff in PHP despite it not being my language of choice is hosting. Some stuff shouldn't require a VPS)
It should be noted that the Zend Standard is almost exactly the same as the PEAR standard (with a few exceptions). So in this instance following the PEAR standard is just as valid as the Zend standard. Honestly just follow whatever suits you best. The main thing is consistency. 
By habit these days I do what the few languages I have which require certain capitalization want: the prolog/erlang standard of underscored lower case for values, atoms, labels and names, and FullOnStudlyCaps for variables.
[CodeIgniter uses underscores for classes, functions and variables.](http://codeigniter.com/user_guide/general/styleguide.html#class_and_method_naming)
Correction, making legitimate technical points *in the most dickish way possible*. My whole case is with your attitude, not your technical skills, or can't you understand that simple fact, you useless gimp? That *was* fun, you're totally on to something here... Oh, gotta run, your mom's regained consciousness.
There's been an enormous gap, in my experience, between how long it takes someone to do something and how long that person believes it will take them. My opinion is that you should carefully note that you're measuring people's beliefs, because my experience is that people's beliefs rarely have much to do with how long a thing actually takes. Typically, naive amateurs will simply multiply the number they receive by some fixed constant; that's usually a good rule of how wrong that individual personally usually is. . If they were professionals, they'd have measurements, their measurements would have changed over time, and they wouldn't be saying "multiply it by two to three" like a 50% variance isn't evidence that the estimation is garbage.
Bought this not too long ago. I found it useful. It mostly confirmed a lot of things I did already but I picked up some important new stuff too.
&gt; Correction You haven't gotten one of these right yet. &gt; My whole case is with your attitude And *still* nobody cares. Doesn't it embarrass you that now fully 75% of your entire contribution to Reddit is belly-aching at one man who's laughing at you? Nobody cares. Really. &gt; or can't you understand that simple fact, you useless gimp? I understand. I just don't care. (Incidentally, your attitude is actually quite a bit worse than mine, not that you're likely to catch onto that.) Enough with your insults while you complain about other people's attitudes. If you had a point you'd have made it by now. I get it: you're angry and you're butthurt and you think that means that throwing a tantrum in public is a reasonable and important thing to do. Never in your worldview does it appear to have occurred to you that the opinion of an anonymous stranger who doesn't know what he's talking about, isn't honest and changes his statement every time an error is pointed out to him does not and never will matter. Go troll someone else. You just aren't important to me. Your opinion is worth less than Zimbabwean currency. Indeed, knowing that it makes you angry, at this point, is an encouragement.
You've really got an obsessive focus on that thanking thing. That's one of the reasons I'm thinking mental illness. That and you're completely blind to your own errors and being a douche to everybody. Your arguments are contradictory or don't follow logically or in order. Normally I'd just think you were a troll but even trolls get bored after awhile and pick new targets. I rarely do this but I'm gonna have to add you to my reddit filter to resist the temptation to reply to you further. Here's a [link](http://userscripts.org/scripts/show/33419); I urge you to do the same. Good luck and take care.
75% of my contribution on this old unused reddit account, yes. I won't be needing it again. I just didn't want to flag my main account to an IRL acquaintance. &gt; I get it: you're angry No you don't. I *was* annoyed. It passed very quickly when I realised you're a sad, lonely socially-crippled friendless code-monkey who just winds people up to make himself feel better about life, or lack thereof. &gt;Nobody cares. Really. You sure talk a lot for somebody who doesn't care. Your mom does too, but I can't understand a word for all the slobbering and sucking noises.
&gt; 75% of my contribution on this old unused reddit account, yes. I won't be needing it again Ah, so inbetween all your abusing the rules, you're also multi-account voting. &gt; I just didn't want to flag my main account to an IRL acquaintance. Yeah, behavior like this isn't something you can hide. He knows perfectly well who you are if the group is smaller than around 25. That you even know your behavior is so bad that you have to hide your identity before you start is evidence who the real troll is here. &gt; &gt; I get it: you're angry &gt; No you don't. I was annoyed. Okay, so now you're just trolling. I really don't care. &gt; when I realised you're a sad, lonely socially-crippled friendless code-monkey Ah, fan-fiction, the last gasp of the desperate: just make shit up, and when you're laughed at, emphasize that your psychic powers allow you to discern life details from text just because you don't like the author. (headpat) &gt; Your mom does too, but I can't understand a word for all the slobbering and sucking noises. I'm beginning to believe this sort of thing is the pinnacle of your debate skills. How pathetic.
&gt; You've really got an obsessive focus More armchair amateur psychology. You're almost as good at it as you are at SQL. &gt; That's one of the reasons I'm thinking mental illness. Well, that and not knowing what you're talking about. &gt; I rarely do this but I'm gonna have to add you to my reddit filter. I urge you to do the same. No. When you're wrong and giving advice, I'm going to tell your victims. If you can't cope with that without ignore, that's fine. However, I have no need of hiding you from my view; you're just another guy who blows up on people he owes things to when it's his turn to admit he's wrong. It's really not that difficult.
I use the same standards a Symfony - camel cased, control structures have brace on the same lin, etc: namespace Vendor\Module\Path; class MySampleClass { protected $var; public function getVar() { return $this-&gt;var; } public function setVar($value) { if (!is_int($value)) { throw new \InvalidArgumentException('Value must be numeric'); } $this-&gt;var = $value; return $this; } }
Camel if it's in OOP code, underscores if it's in procedural code.
&gt; You do appreciate we live in the real world where many people are restricted by their provider to using MySQL with MyISAM which doesn't support foreign keys, right? Can you name even one host which offers MySQL limited to MyISAM? I haven't seen a MySQL host without at least InnoDB support for more than ten years. I don't appreciate this. In fact I think it's not correct, and I defy you to give an example. &gt; At the minute, he doesn't need an in depth study of different storage engines Luckily, nobody gave one. Non-sequiturs do not make your case. &gt; he needs to understand the absolute basics of many to many relationships Which, in RDBMS, in the ruleset you gave and under the normalcy you were talking about, means actually creating the relationship. And that's done with a foreign key. &gt; Some light reading on the topic via Wikipedia Will end up with him not knowing what he's talking about, because on this topic, as I've already pointed out and given concrete examples of, Wikipedia is not correct. &gt; is accurate enough without having to buy a relational database bible. Nobody advocated anyone buying a bible. Stop inventing things to melodramatize. What I actually did was say "it's not correct code until you create the foreign key." That is correct, even if you mysteriously limit the situation to a single storage engine, then observe that that storage engine doesn't enforce one part of the code, then complain about all the talk of storage engines. Stop complaining about things only you are doing, sir, and stop pretending that artificial limitations exist which do not, *and* stop pretending that just because one fake artificial limtiation could exist which would mean one vendor didn't enforce it, that a rudimentary SQL topic should not be explained or understood.
I started with PHP, but had a fling with Java and fell in love with their conventions, so I'm definitely a huge camelCase supporter. However, when it comes to my database tables and column names, I use underscores. I do this because MySQL isn't case-sensitive on column names and I've caught my developers getting loose in their queries and it makes things a bit more difficult to read, so I've preferred to force their hand than to have to babysit their capitalization.
^ This. Troll resorts to personal attacks. Typical behavior. Notice how he starts with the insulting tone. Your standard troll is also a hypocrite who will whine and bitch when the same tactics are used against him/her.
You won't believe me, but I'm not downvoting you at all. I have a policy of not downvoting direct replies to my comments. If somebody, right or wrong, takes the time to respond to me personally, I leave it neutral at worst, or upvote if it adds something. As promised, I *will* be downvoting every post I see in future **where you are rude to any other redditor**. That's a legit reason to downvote, so your accusations of breaking reddiquette don't bother me. I will also happily upvote any post you make (as I have done in the past many times) where you manage to get a point across without upsetting anyone. Look through your history. See all those downvotes? Very few of them were me. You piss people off, fact. As for anonymity, I have a lot more than 25 friends, and I don't see SG much these days anyway, but he'd know me from my main account. I'm not hiding anything, just maintaining my reddit anonymity which is not against the rules and is something most people do. It could be something as simple as a gonewild post that made me flip to another username. Don't read too much into it. There's no conspiracy here. If my fan-fiction is so wide of the mark, give me one good reason why you need to put everyone down all the time, if not because it feels good to you? Nobody here knows you, nobody will ever meet you, no reward will come of doing it. The only logical conclusion is that you insult other people because it makes you feel good. If it made you feel bad, you'd have stopped doing it by now. The fact that you can repeatedly insult people and not ask yourself, "Am I being a bit of a dick here?" tells me all I need to know about you. Remember, I've watched you behave like this in /r/php for a while. Go ahead, tell me **honestly** that you are not the person I described. Tell me that you are in a happy relationship, have a lot of friends or even a few really close ones, don't have any social anxiety, and don't spend all day sat at a desk getting more and more miserable. Tell me that straight up, right now, and I'll believe you. Just type the words, and I'll take it all back. &gt; your debate skills I thought I was the one advocating civilsed debate earlier? Didn't work, so I've lowered myself down to your troll level. I wouldn't sully my main account with this behaviour, but I'm free to do as I please now. If you want to stop shouting at everyone and start talking to me like I'm not some piece of shit on your shoe, then just say so, and I'll stop doing your mom and play nice. 
StoneCypher is the resident trollish cunt. It is impossible to have a civil discussion with him. He will insult you and then claim that it's not an insult. He's a hypocrite and a douche. It's totally ok for him to insult you, but try doing that to him and he'll scream like he accidentally shot soap up his vagina. His lack of personal successes is why he resorts to being a douche to people on the internet. It's so that he can feel smarter. He doesn't limit himself to reddit, by the way. Here's an example of him being [schooled](http://www.pixelcoders.com/2010/02/27/embedded-no-exceptions/) by someone who knows more than him. Of course, he ran away like a coward. Also notice how he started off with an insult.
Quit whining, troll.
^ This. Troll takes a parting shot and makes a personal attack, despite having claimed high moral and personal standards before. Hypocrite extraordinaire. 
&gt;Your ego is stupendous. LOLWUT. ^ This. Troll gets schooled; still can't admit he's wrong.
^ This. Troll is a complete douche without reason. Insults the parent without provocation. There are polite ways to tell people they are wrong (if they are wrong).
This is because StoneCypher is a trollish cunt. He does have valid points at times, but because he's an insufferable douche it negates everything he has to say. He does this to make up for a lack of personal successes and for generally being a loser. It's easy to be a dick to strangers on the internet and by doing that he somehow feels that he's better than them. He deserves our pity.
No love for camel_Score? (no I'm not serious haha). Personally I use camel for variables, and underscore for functions. Pascal for classes of course.
&gt;No you don't. I was annoyed. It passed very quickly when I realised you're a sad, lonely socially-crippled friendless code-monkey who just winds people up to make himself feel better about life, or lack thereof. You hit the nail right on the head! Upboats for you.
&gt;As promised, I will be downvoting every post I see in future where you are rude to any other redditor. Thank you. This is what I do as well.
Noted, thanks. I honestly think he has a deeper psychosocial disorder. It's one thing to troll but to be so persistent for so long takes a certain type of cognitive disability.
^ This. 
^ This. Troll whines because he got called out. As always.
THIS is how you respond to someone's mistakes correctly. By not being a douche.
^ Troll would do himself a favor by learning how to answer civilly. Compare StuartGibson's answer to StoneCypher's trolling answers where he resorts to personal insults.
I completely agree. Just take a look at his posts on reddit and just on the web in general. This is just how he behaves. I don't understand how a person can be so douchey and mean. I don't know if it's a lack of social skills, or a mental disability (as you mentioned).
Well I hope your novelty account works in returning the favor to the trolls. Love it. But man, you've got a lot of ground to cover.
I know what you're saying, but I feel slightly different about him.. He's not like other trolls. Other trolls do it regardless of what they can bring to the table. StoneCypher is an anomaly. He's smart and has a lot to offer, and he knows his shit. Yet he STILL trolls. All his winding people up is through his inability to get a point across without upsetting people. It's not the main aim. His first post on a thread is often helpful. Then it all spirals out of control when the discussion starts... He probably won't see this post as it's not a direct reply to him so I can honestly say I'd like nothing more than for him to step up and talk about himself and why he thinks he pisses people off so much, because then I suspect we'd have a pretty awesome contributor, and /r/php *does* need quality input. I just keep thinking how I'd handle him if he was on my team IRL. I'd have to deal with the attitude, but I wouldn't fire his ass straight up. I'd rather mentor him, or buddy him, or something. Fuck knows why; he's never done anything for me except get my blood pressure up. It's not pity or anything, and I'm not being condescending. I'm not claiming some moral high-ground here. I just think that if we met in a pub we'd all have a fucking good chat and he wouldn't say half the things he says on here. /r/php Y U NO ALL GET ALONG?
&gt; You won't believe me, but I'm not downvoting you at all. You're right: I don't. &gt; As for anonymity, I have a lot more than 25 friends What does this have to do with your hiding your behavior because you know how bad it is? &gt; Go ahead, tell me honestly that you are not the person I described. I'm not. &gt; I thought I was the one advocating civilsed debate earlier? I'm sure you thought that. &gt; and I'll stop doing your mom and play nice. (rolls eyes)
&gt;What does this have to do with your hiding your behavior because you know how bad it is? I've explained my reasons for switching account, and they are nothing to do with my behaviour after the switch and everything to do with personal information in my main account. You have no case, especially as I've freely admitted I'm behaving like a dick. &gt;&gt;Go ahead, tell me honestly that you are not the person I described. &gt;I'm not. Then I take that back. I retract all related comments. You have answered this though... &gt;...give me one good reason why you need to put everyone down all the time, if not because it feels good to you? Why do you do it? Serious question, no mom jokes. PM me the answer if you like. 
I completely agree. There's also something else. Sometimes I think that he's not even aware that he's even trolling. Perhaps this is just how he behaves. Perhaps its cognitive dissonance and he tries to get rid of that feeling by justifying and denying. He also makes rather grandiose claims and then fails to back them up. For example, he claimed that he was involved in writing PHP (creating the language). If he's just responding and providing an answer to something then he is usually helpful. Things get out of hand when someone corrects him, or if he spots a mistake in someone else's post. Then he just goes out of his way to insult them. It's not just reddit either. I posted this in another response, but here is an [example](http://www.pixelcoders.com/2010/02/27/embedded-no-exceptions/) of him being a douche to someone on their blog. He gets schooled and of course doesn't come back. Here's another [example](http://www.typophile.com/node/61920) of him signing up on a forum just to berate and be a dick to a member on that board (just search for his handle on the page). I also wonder how he'd be IRL. He might be a nice guy. Who knows? It might also be a manifestation of GIFT (Greater Internet Fuckwad Theory). But the thing that nullifies that argument is that he doesn't keep his identify a secret. 
I commend you for not responding in kind, in spite of StoneCypher's immature and trollish behavior. You show amazing restraint.
i find myself doing this
 * PascalCase for classes and class methods (perhaps the latter is unorthodox) * under_score variables &amp; class attributes * under_score() functions * UPPER_CASE_UNDER_SCORE constants and class constants
i camelCase.
Personally I do variables (including std class storage objects) as $under_score, function/method naming camelCase, and classes PascalCase. PHP internal function naming is all lowercase, but whether or not there is an underscore is inconsistent, so I would not try to use php's function naming as a template when decide your naming scheme for your own functions and classes.
Unbelievable. Just read those links and a bit of his blog. I'm no mental health professional, but the dude surely needs help.
You hit the nail on the head when you said that he was lonely and miserable. This is probably the only outlet for his frustration. Most intelligent people are driven to that when they feel victimized by the world. Then they feel that the only thing they have to hold over everyone else is their intelligence. They don't realize that they're dragging themselves down to the same level. Pretty soon instead of using intelligence as a weapon against idiots, they end up being dicks just to everyone else. In their vision the world is their enemy, and they're merely victims. They don't realize that they've become the very thing they hate. I'm pretty sure this is how Evil Scientists are created.
&gt; I've explained my reasons for switching account Yes. And they don't disagree with me: you feel the need to hide your behavior, because your behavior is disgusting. Look at who agrees with you. &gt; Then I take that back. I retract all related comments. Meh. &gt; ...give me one good reason why you need to put everyone down all the time, if not because it feels good to you? The reason I don't answer that question is because it's simply not correct. I do not put everyone down all the time. Please stop wasting my time soon with these questions where you imagine that just because I laugh at you for standing up an anonymous account and throwing a tantrum means that you imagine that my response to you is my entire life. Your desperation to turn your single experience into someone else's entire life is pathetic. Stop trying to justify your behavior in terms of what you imagine about others. Since I started talking to you, even things like "what you're looking for is called sixth form normalcy; reply if you need more information" from several days ago have been downvoted. Look what you're encouraging. The cancer that's killing reddit: a bunch of people who make things up about other people, and encourage breaking the rules as some kind of fake mob justice to salve their own egos because they don't want to admit they logged into a conversation for the sole purpose of picking a fight, and that that makes them a troll. Look at you doing exactly what you're trying to make someone else feel bad over. Pathetic. &gt; ...give me one good reason why you need to put everyone down all the time, if not because it feels good to you? Lemme guess: you won't answer your own question about your behavior today, right? Mabye you should offer to stop the mom jokes inbetween complaining about insults again, and expect that that means suddenly you'll be taken seriously. Look how many posts full of verifiable, correct information, containing nothing you can even stretch into an insult, are downvoted as a direct result of your tantrum. Look how you're bitching about things you do, and you've got someone who does nothing but that cheering you on, cutting and pasting the exact same thing all over the thread, then using his various puppet accounts to upvote them in ridiculously small time-frames. Do you genuinely not understand what it says that someone like that is cheering you on? Do you really, honestly not understand that what you are doing is classic trolling? Logging on from an account where nobody can identify you because you don't want people to know you're who behaves this way? It's a shame you can't admit to yourself that you were embarrassed of your own behavior before you even began. If you would, you could get out of the loop you're stuck in. You might even learn your SQL basics, while you were at it. Oh, well.
You'd have to be a moron to converse with this guy after moaning about insults and unverified data. Given that you're still stuck on pretending you're a mental health professional, I guess I've come to understand, though, that while you tell yourself out of one side of your face that you're apologizing in private, in public you carry on the same self serving behavior. Seriously, just look at his comment history. The entire purpose of the account you're having a chat with is to troll me personally. The man you're chatting with is who you think I am. If you'd make even the most cursory examination, you'd know that. And yet, here you are falling for it, because it gives you a way to feel like you aren't logging in for the sole purpose of picking a fight. Surely, if someone laughs at you for yelling at them, they're mentally ill! Why, after all, their blog says stuff like "adobe did a good job on this installer" and "yay IE9 does SVG" and "Here's how you do X in SQL" and "Here's my list of Civ5 defects." Clearly, signs of mental disease. It's quite clear why you don't want anyone you know to see you behaving this way. Funny thing: you're off repeating the same fan-fiction you just pretended to apologize for and retract. Guess honesty is hard.
I do exactly the same, underscores for local variable names, but camelCase for method/function names. Sometimes I use a bit of both, for instance in Java if I want to return the same variable in a different format I might do something like this. public Date getTheDate(){ //returns a Date object return the_date; } public String getTheDate_s(){ //returns a String representing the formatted Date object return date_format.format(the_date); } This is a pretty specific case where I'm basically just appending "_s" to the function name to show that the function sorta-kinda-overloaded. Also, date formatting in PHP is super easy (and it's not a strongly typed language) I never use it in PHP, this has only popped up in Java so far. Another instance where this gets a little silly (again, only encountered this in Java) is when you're working with a framework that requires very specific function names. For instance in Struts (or at least the old ass version I'm using) you are required to name the accessors/mutators exactly like this "getVariable" and "setVariable" (with "Variable" being the name of the corresponding form field, starting with an upper case), so if your variable is called "the_variable" then you get things like "getThe_variable" and "setThe_variable". I could just use camelCase field names, but I just don't like them.
I reserve camelCase for naming my turds. Everything else gets underscores so I can, you know, read it. In addition to being fundamentally harder to read, camelCase becomes even more absurd when you are dealing with acronyms and one-letter words (e.g., a). allocateADMABuffer() anyone?
&gt; All his winding people up is through his inability to get a point across without upsetting people. Man you sure do like inventing fiction. &gt; He probably won't see this post as it's not a direct reply to him The troll you're talking to sent it to me in private mail because he thinks you agree with him now. &gt; I just keep thinking how I'd handle him if he was on my team IRL. I'd have to deal with the attitude, but I wouldn't fire his ass straight up. I'd rather mentor him, or buddy him, or something. Fuck knows why It's because, for all your screeching about how awful I am, you can't give a single actual quote of my saying anything wrong, whereas the converse isn't actually true. It's also because deep down, you know my technical commentary is correct. But don't worry: you'll never have the problem of employing, let alone the opportunity to mentor, someone like me. &gt; I just think that if we met in a pub we'd all have a fucking good chat and he wouldn't say half the things he says on here. Those things you can't quote. I love how, inbetween all the "I'm fucking your mother" stuff, you still manage to think you're the victim and that I've said crass things to you, *then* you say you're not taking a high ground. (Kind of like how you say you want to mentor me, but you're not being condescending.) The reason this wouldn't happen in a bar is that you would be able to see everyone sitting around the table looking at you uncomfortably as you dipped further and further into self-indulgent dishonesty to keep from facing what you did. &gt; /r/php Y U NO ALL GET ALONG? "I logged on with a different account to pick a fight in a conversation that didn't involve me because I didn't want anyone who knows me to see me behave this way. WHY ARE YOU SUCH A JERK? I fucked your mom. Why are you saying all these bad things?" Delusional, like the person you're chatting with.
(It's because he can't answer the questions he's asked without showing that he's wrong, not restraint.)
The reason for this is that PHP is a bit of a mongrel of multiple languages, its procedural side being influenced largely by C (underscores), and its OOP side largely by Java (camelCase).
If you want to try something slightly different and will be reading more than writing, you could rethink your data structure for searching rather than grouping by relational types. You can then simplify and reduce the number of queries needed for a simple search. Example structure: bands: (entity) _id name (for display) version (of data) alt_name (used for sorting as well [ex. Johnnies, The]) data: (data1-data4 = most important and indexed data) _id entity_id (or band_id if you want) mimetype (name, member,album,track,video,concert,etc. basically the type of data in the row) version_data (version of this type/row's data) data1 (display of whatever the type of data) data2 (varies based on type, for name should be given name) data3 (varies based on type, for name should be family name) data4 (varies based on type, for name should be middle name) data5 (varies based on type, for name should be prefix) data6 (varies based on type, for name should be suffix) data7-15 (varies) Example query: "select &lt;column names&gt; from bands &lt;join statement&gt; where value in (data1,data2,data3,data4)" Real world uses: Android contacts, similar to Google App Engine usage (see BigTable and tablets of data) 
Answer his question. &gt; ..give me one good reason why you need to put everyone down all the time, if not because it feels good to you? 
Prescient.
&gt; Answer his question. I did. The answer is "I don't do that."
Dear god you really came in with your guns blazing this time didn't you? No wonder there was such a shitstorm over this post. I'm really heartened by the growing backlash against your attitude problem.
Look at the start of this thread: &gt; You already have the answer, but I would recommend reading up on database normalisation and, if you're slightly masochistic but enjoy the history of the relational model, Codd's 12 rules(there are 13 of them). &gt; Learning how to properly structure databases is an art form, but one well worth learning as it will save you a lot of pain in the future. &gt;&gt; Stop learning SQL from wikipedia. &gt;&gt; why don't you just cut and paste a link you don't understand, in order to look smart? &gt;&gt; (facepalm) &gt;&gt; You have no idea what proper database structure is. 
&gt; Dear god you really came in with your guns blazing this time didn't you? Are you done? &gt; I'm really heartened by the growing backlash against your attitude problem. No such growing backlash exists. It's the same troll I've had for six months, plus the guy I showed the mistake he made, plus "his coworker" he claims, an account that's been inactive for a year, which he admits he has another. Are you really falling for this? When you're done telling me that I have an attitude problem, go count the number of times that guy said he was fucking my mother, and explain why you think I'm the troll, when I'm giving actual technical points, and referring to the actual cited points in the guy's link that he's just wrong about. It's one guy being melodramatic because he doesn't want to admit he's wrong. He even admitted that he didn't want to log into his real account because he was embarrassed over his own behavior. (yawn) I'm really not interested in your next response, where you tell me that even though I haven't used a single insult, and even though there's a technical basis for all my claims, when I merely repeated the thing the other guy said back to him, I have an attitude problem. The word "gulliable" comes to mind.
(headpat)
Yes, just carefully edit it. That'll make you correct. As long as you remove all the technical points, then there won't be any! Dishonesty. It's what's for dinner.
Don't change the subject. We're not talking about technical points. We're talking about you laying into some guy who posted a perfectly inoffensive comment pointing somebody towards some theory he thought might help.
&gt; Don't change the subject. We're not talking about technical points. I'm not really interested in what you want to complain about. &gt; We're talking about you laying into some guy who posted a perfectly inoffensive comment Not we. You. I'm not actually conversing with you, because you've lost track of the technical discussion, and only want to complain. This is yet another case of you doing what you want to be angry at me about. You're laying into somebody because you find what they said offensive. I find someone giving incorrect technical advice to a stranger offensive. I don't care if you agree. If you want to get to the technical matter, fine. If you want to talk about what I said without editing it heavily, fine. If not, go talk to TrollPointerOuter. I have no interest in your anger.
Of all the things in your post that I disagreed with, this was the one I disagreed with the most: &gt; I'm not actually conversing with you Here's the thing I disagreed with second most: &gt; incorrect technical advice What was so offensively incorrect that you had to call in to question the guy's knowledge and reason for posting?
All you have to do is read the text. It's spelled out in crystal clear text. I even number which rules in his source document he's got wrong. You didn't even read the text you're complaining about, did you? I am not going to repeat myself merely because you want to argue with a discussion that didn't involve you.
Oh, I see. Very minor factual errors on Wikipedia piss you off. No wonder you're so angry all the time.
The class naming is mental though. Capital first letter then underscores?!
The error is not "very minor" merely because you do not understand it. Also, there are six of them. It's a little boring for a two-month redditor to keep referring to "this post and the other one I noticed" as "all the time." Someone who's angry all the time doesn't end up with positive karma.
I camel-case my method names and underscore my variable names The only exception is when creating web service APIs then I use camel-case since the variable names are exposed and camel-case looks a little cleaner than underscores, especially if being consumed by .NET clients when using their IDE auto-complete.
Another thing that you always do is to trot out your high karma score as some sort of mathematical proof that you're not a dick. Fact is nobody really downvotes all that much, at least not anywhere near as much as they upvote. I've had other accounts, by the way.
It all depends on what the ultimate goal is. Much to the dismay of clients and managers, large projects tend to start off very slow,and end very quickly. "Basic CRUD functions" could very well mean that you have to write a lot of code to handle connectivity to an outside service which could take a while, but then everything that depends on it will go by very quickly.
Exactly. Creating project on something so unpredictable is just childish. Fast Flip is in labs, it may be changed or removed anytime. 
&gt; Another thing that you always do is to trot out your high karma score Lol. "You're always a jerk." Contrary evidence. "Also you always give evidence." &gt; Fact is nobody really downvotes all that much Funny, just one quick look at this story proves that quite wrong. &gt; I've had other accounts, by the way. No doubt. Are you done yet?
&gt; Here's an example of him being schooled by someone who knows more than him. Of course, he ran away like a coward. Actually, the blog author just won't allow me to post a reply giving standards points. There's no "running away" involed, and you shouldn't be so gulliable to believe an account like this.
PEAR coding standards: http://pear.php.net/manual/en/standards.php I also name my variables this way: $oObject; $sString; $nNumber; $aArray; $bBooleanVariable;
True story.
Try Debug Backtrace: http://php.net/manual/en/function.debug-backtrace.php It won't tell you everything which is included, but it's a good start to see how you got to the place you're currently at (if that makes any sense at all...) This gets all included files: http://php.net/manual/en/function.get-included-files.php which will show you all files which have been included. Combine the 2 and it should hopefully save you a lot of time!
You can use xdebug to profile your code. http://www.xdebug.org/docs/profiler 
I camelCase functions, and underscore variables. Except for library functions that are supposed to act like built in php functions, in which case I underscore those to try to look a bit consistent.
Couple this [webgrind](http://code.google.com/p/webgrind/) for an easy to use web interface.
I can see where your coming from. This is not a "project." It was me playing with code. I do not plan on using this for anything that any user would touch. I pull the data for a personal home page that is used by me alone. Should Google change the way they are serving the data, or stop serving it all together (as seems to be the case since I think FastFlip is getting shut down) then there is no harm to me. It is interesting data that I like to have. It is no different then CURLing each page to pull back the image urls. I'm just doing it in a less bandwidth intensive way.
You can use [Debug Kit](https://github.com/cakephp/debug_kit).
Look, I'm really sorry about the way I've been behaving today. I don't know what came over me. &gt; Funny, just one quick look at this story proves that quite wrong. (sigh) To be totally honest with you, the real reason I keep replying to your posts is that I've got kind of a crush on you. I don't know what it is, there's something about you, you exude this effortless self-confidence that's just irresistible. &gt; Are you done yet? Please don't be freaked out by this, I know it's stupid. I'll get over it and I hope we can keep hanging out and stuff. I just had to get this off my chest.
&gt; Look, I'm really sorry about the way I've been behaving today. You know, I don't know whether you're being serious. I had written a "thank you for the gesture," but then that bit about the crush, and the "can keep hanging out" bit, I honestly can't tell if you're joking. I'm not trying to be a jerk. I am unable to decide whether I think it's meant as dry humor, or if the first line was sarcastic. If it's genuine, I appreciate the gesture. If it isn't, it's also not particularly humorous, so maybe let it go? I don't really know.
Whereas there are better answers than mine which other people gave you, and which are situationally specific, I wanted to point out that you also have a less good option which works everywhere, rather than only in this situation. Emit an HTML comment.
The reason most businesses discount telecommuting is that telecommuters' work usually suffers without face to face access to coworkers.
If you're really desperate you could dump [get_included_files()](http://php.net/manual/en/function.get-included-files.php) at the end of your code run.
Dude, I win. I've read your blog. You're not even a reddit troll as I assumed; you're just a complete shit to anyone and everyone about anything. It's who you are, and it's pathetic. Oh, and for the love of all that is masculine, get a fucking haircut.
I follow the coding conventions of whatever environment I am in. If I am coding a custom framework, its lowercase and underscores to match PHP's conventions.
Time sequence of posts. I retract my retraction. You're actually just a cunt.
He's taking the piss, you jackass. You have absolutely no social skills, do you?
I &lt;3 webgrind
What version of symfony are you on? Have you leapt to 2 yet?
I hate camel case
You.....just blindly installed something on a live site?
Have you considered [parse_url](http://pt2.php.net/manual/en/function.parse-url.php) instead of regex?
 $url_parts = parse_url('http://example.com/AS3qR'); if($url_parts !== false) { echo 'Path: ' . $url_parts['path']; echo 'Everything after the hostname: ' . $url_parts['path'] . $url_parts['query'] . $url_parts['fragment']; // This is just for a really quick example. I'm ignoring a lot of other details here. } Link: [parse_url](http://php.net/manual/en/function.parse-url.php) If you really really really want to do it the regex way then [have a look here](http://mathiasbynens.be/demo/url-regex) for some examples but you'd be a lot better off with parse_url().
I used to use the underscore notation. I also used to put a curly brace on the same line as a method declaration; and I used to ignore the need for whitespace eg `$var=myFunc();` vs `$var = myFunc();` 
As other people have told you, `parse_url()` is the right tool for that job. That said, if you really do want the last part after the slash in a regex then: .*/[^/]* Will do that. Note that a / is a regex delimiter, so either escape it or pick a different one. You should also look at `dirname()` and `basename()`
This looks cool, from a [talk Rasmus gave somewhere](http://vimeo.com/5174186) http://talks.php.net/show/houston09/17 I haven't had time to look into how to set that stuff up though... I've never used cakephp (zend 4 life) but if there is a folder naming convention like in zend and in how you mentioned above, then how could it get easier?
I definitely use lowercase and underscore for column and table names in SQL. Faster to type and I think it makes the names stand out from the Upper case SQL syntax.
camelCase for everything but class names (obviously)
Honestly, dude, if you can't stop bellowing about how you win, at least put in a little more effort. I got better insults in grade school.
&gt; Time sequence of posts. I retract my retraction. Yep. Just change your story wherever it suits you. &gt; You're actually just a cunt. Says the guy whose only point is about abusive behavior.
Are you done yet?
People use the underscore first when referencing a private variable, even in PHP 5. If you're doing that and they're not private it could be confusing. 
 basename("http://example.com/AS3qR");
Then view with kcachegrind for [windows](http://sourceforge.net/projects/precompiledbin/) or linux (check you package manager, it'll be there)
We're using 1.4.9 and Doctrine 1.2, and that's probably what we'll stick with for this project. We've been watching 2 for a few months, and we're not sold on it yet. When we tested it out (about 3 months ago), the code and instructions in the tutorials were wrong and following them resulted in a non-working framework - not a good sign. We'll give it a shot when Sensio puts out a stable release though.
Hmm, I see. Zend can do that to `$this-&gt;view-&gt;render('blah.phtml'/*or something like this*/)` now that I think about it. Try greping the html ids?
Actually with preg_match you can use other characters as the delimiter such as @(.*)@i Also if you wanted to make sure the url was valid you would either want to use a character class of [a-zA-Z0-9] or just use `:alnum:` 
Zend uses capitalized underscored class names class Zend_Service_ReCaptcha extends Zend_Service_Abstract As they map to the folder structure /Zend/Service/ReCaptcha.php Which makes it a pain in the ass for using other library's classes which have underscored class names unless you take out all of the underscores in it.
I hate camel casing but I do it for class names, function/method names, javascript stuff... variable names I always do underscore. For css I do #this_is_an_id .this-is-a-class Now indent style, that's a [whole 'nother ballgame](http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS)
If there's tricky-dick shenanigans going on in Cake, app/config/routes.php is a good place to investigate.
Now I have, thanks.
I think I do need regex, as I want to match the last random string from the example (AS3qR), but for example I don't want "index.php" to be matched. How's this accomplished?
debugger + step through. Breakpoints. I'm surprised people aren't suggesting one, there's nothing more enlightening than putting a break point in index.php then just step through every line of code.
read the PEAR guidelines.
&gt; have an e-mail notify them that there is a message Why don't you just answer the question directly to the user in the email? All the communication after the order can be via email. Why the extra hassle with a plugin?
Haircut.
Haircut.
Haircut.
(popcorn) Oh look, another person who wanted to scream troll has taken off the mask.
This book will definitely help you to understand, how to write good OOP-code and how to build good architecture of application: http://www.amazon.com/Objects-Patterns-Practice-Matt-Zandstra/dp/1590599098 (I think it's possible to find this book in pdf, but be sure - this book worth its price). Also, it's easier to begin with frameworks - so use them. But only after reading that book. CMS it's not a way for studying.
I suggest [this book](http://books.google.com/books?id=2T7F7AslMukC&amp;lpg=PA160&amp;dq=php%20oop&amp;pg=PA135#v=onepage&amp;q=php%20oop&amp;f=false) - some of it can be read on Google Books. It is/was pretty helpful for me.
Make sure you use the correct version of debug kit for the version of Cake that you are using.
best framework for real oop in php would be lithium. as resource php.net manual (read th comments!) is awesome. i never read a book on it... so im not a big help with suggestions. i even migrated from php and mysql after 10 years (including a cvs account @php.net) to node.js and mongodb because its just so much nicer oop. i still use php for most tasks but completely got rid of mysql. (i started in 1997)
I will go for wordpress. You definitely could have subscribed users, and I'm pretty sure you can set some pages to be seeing only by users that are subscribed. Put there a form and you are done. They will have to login in order to send the form. They could probably stay login though, which I assume it will not be a problem. Wordpress is very flexible, and will allow you to customize the site a lot to comply with the request of your friend. Sorry for my english, not native here. 
I will go for wordpress. You definitely could have subscribed users, and I'm pretty sure you can set some pages to be seeing only by users that are subscribed. Put there a form and you are done. They will have to login in order to send the form. They could probably stay login though, which I assume it will not be a problem. Wordpress is very flexible, and will allow you to customize the site a lot to comply with the request of your friend. Sorry for my english, not native here. 
I will go for wordpress. You definitely could have subscribed users, and I'm pretty sure you can set some pages to be seeing only by users that are subscribed. Put there a form and you are done. They will have to login in order to send the form. They could probably stay login though, which I assume it will not be a problem. Wordpress is very flexible, and will allow you to customize the site a lot to comply with the request of your friend. Sorry for my english, not native here. 
Thanks, I'll check out lithium. Migrating to any other way of creating dynamic database driven websites scares the bejesus out of me right now, so I'll settle with improving what I have for now. What about codeigniter? Looking around, it seems to be fairly "lite", which would match my expected use of it.
I will go for wordpress. You definitely could have subscribed users, and I'm pretty sure you can set some pages to be seeing only by users that are subscribed. Put there a form and you are done. They will have to login in order to send the form. They could probably stay login though, which I assume it will not be a problem. Wordpress is very flexible, and will allow you to customize the site a lot to comply with the request of your friend. Sorry for my english, not native here. 
I will go for wordpress. You definitely could have subscribed users, and I'm pretty sure you can set some pages to be seeing only by users that are subscribed. Put there a form and you are done. They will have to login in order to send the form. They could probably stay login though, which I assume it will not be a problem. Wordpress is very flexible, and will allow you to customize the site a lot to comply with the request of your friend. Sorry for my english, not native here. 
yeah try codeignitor. its fairly good. speed wise better than cake etc, lithium might be a bit too raw. right now im using lithium or slim. both pretty neat but give you not much.
Oh god I love you. I've been looking sooo long for a windows kcachegrind program.
All these identical replies and I'm wrecking my brain why you chose this one?
Spoken like a programmer who truly doesn't know how to have fun. Not everything is for commercial product development, you know
Yeah we're using 1.4.11 and Doctrine 1.2 (Just switched over from Propel and glad we did). I agree about 2.0, doesn't feel stable enough yet. You guys using it for projects in general or just this one?
I hid a subliminal ascii cock inside this one
Buddy, if you are doing this for a pharmacy you need to be aware of [HIPAA compliance](http://www.hhs.gov/ocr/privacy/) for medical information security...
The underscores are to represent some kind of namespacing structure.
We only have one project at the moment, but it's big enough that it'll keep us busy for a long time. I still don't really know why we started out with symfony. I suspect that our lead at the time just wanted it on his resume.
First things first, learn SQL injection and how to protect yourself against it, this is vital and cannot wait. When you have that down secure all of your current projects, again vital. MySQLi or PDO with prepared statements will help. After that, check out XSS and XSRF based attacks. This is way more important than worrying about OOP right now. OOP is for your personal benefit, security is for everybody's.
Thanks. Forgive my ignorance, I believed that switching to OOP using PDO would essentially give me the security I need to protect against, for example, SQL injection. No?
Author wrote that "I hope this helps someone with a project they are working on" but he hasn't mentioned any potential dangers of doing so. That's the only part I'm worried about.
If you're using prepared statements then yes, (unless your prepared statement would have variables inserted, e.g. $SQL-&gt;prepare("SELECT name FROM ".$table." WHERE id=?"); $table could still be insecure). However, you don't need to use OOP to use MySQLi\PDO, you can call them right now in your procedural code so I'd suggest you clean up all queries first, then work on OOP. Besides that, depending on what your site does, XSS and XSRF should also be checked out.
I was always a fan of [Schenectady, NY](http://www.google.com/search?btnG=Google+Search&amp;q=zip+code+12345)
There's one thing you should understand. Switching all your code from procedural to OOP won't inherently make your apps secure (and not just from SQL injection). With enough work you can make a very secure app writing most of your code in a procedural way or you can completely spread your legs on a poorly written object oriented chunk of code. So first (and I'm not talking about becoming a guru) understand what are the most obvious attacks/vulnerabilities and roughly how they work. THEN some research about the most standard ways of defending. And THEN decide how you want to program. Personally I've been using a framework MVC (which is a pattern I think adjusts to most of my apps): CodeIgniter. It's small, very little overhead with the stuff I don't want overhead. With CodeIgniter I'm solving part of my security concerns (ie: I have csrf tokens to prevent cross domain posting, XSS protection). I'm adding overhead because I use Doctrine (1.2), it's an ORM/DBAL, that means that I get a layer on top of PDO (and yes PDO and prepared statements helps you prevent SQL Injection attacks) and I get the data mapped as objects, with their relations. It also means that the data I end up providing to the DB gets pretty cleaned up by the time a real SQL query is executed. Using a solid framework will help you to add security because most of the good ones already have it integrated, but still try to learn about the kind of vulnerabilites and attacks. There's no magic on switching from a coding style to another in terms of adding security. At most you get better tools, libraries and cleaner code with less bugs, but it's entirely up to you.
502, it went through; 504, try once more.
&gt; Recently I got a a scare when a site I worked on was easily compromised and the database was wide open. Looks like I finally need to switch to OOP. OOP has basically nothing to do with database injections. &gt; Basically, I need help in getting started and also in choosing a route to take. Read the manual. There's a reason that's the canonical answer. Don't screw around with libraries, frameworks, tutorials, any of it. Just read the manual. Once you've done that, you'll realize that your talk about OOP is largely the result of not having a sufficient skepticism filter for the well-meaning but generally incorrect programming crowd on the internet. OOP is just a packaging mechanism to keep things from getting too interconnected in your own code, so that it's easier to maintain. (Seriously, that's all it is. There's historical proof, despite the hysterical disagreement I'm about to get from some golden hammer squad member.) No, don't use a framework: the same holes will be present, and you won't learn how to fix them. Really. Just knuckle down and read the manual. Once you've learned the language, *then* and *only* *then* may you begin to worry about security; if you don't speak the language you have essentially no chance of preventing defects. When it's that time, go get started at OWASP, and once you've got that learned, mail me and I'll get you more details. But seriously. [Start here](http://php.net/manual/en/langref.php).
&gt; I believed that switching to OOP using PDO would essentially give me the security I need to protect against Nope. And until you've learned the language, the above good advice will essentially fall on deaf ears. Those things that guy told you are great things that you need to do, but first you need to learn the language.
I'd suggest starting by asking in an appropriate subreddit. http://www.reddit.com/r/rails
Thanks for your answer and the one above. I don't meant this to sound ungrateful, but while you are undoubtedly correct, it doesn't really help me progress. I know you'll beat me around the head for this answer, but I regularly dip into php.net and find I get lost pretty quickly. The comments are not always well-explained and the language used in the actual manual is, well, very efficient. They certainly don't give allowances to non-techies. As I mentioned in my original post, I learnt all code organically (as one would learn an actual language) and have no formal training. I understand that this is far from ideal, but reading and understanding the entire php manual sounds like overkill. I'm not questioning the rationale behind your advice (it's absolutely sound) but I also have to be practical and match my education to both my abilities and my expected use. So my aim isn't to be a php wizard, but I do want to be competent, use best practice and write secure code to a level that can be reasonably expected. If you tell me I can only do that once I have read and understood the entire manual, honestly, I will be tempted to think you are being a purist. For example, quite different from my PHP skillz, I consider myself advanced in HTML and CSS. Have I read the whole W3C HTML spec? Nope. Would I tell a budding web designer that the first thing they have to do is read a 300 page, dry and overly-technical document? Nope. It will only put them off for starters and half of it may never be relevant to them. Can you maybe point me in the direction of something that will ease me into learning about the dangers of SQL injection, XSS etc. and solid practices for filtering and escaping php as well as some general best practice rules for structuring php? Maybe somewhere has tutorials I can follow with example code? I learn much better through doing, than through the abstract approach of reading about it on php.net Thanks in advance! 
Thanks for this :-). Pretty much just needs some type of online communication to make refills easier for his customers. I will read up on it!
&gt; I don't meant this to sound ungrateful, but while you are undoubtedly correct, it doesn't really help me progress. Kay. &gt; I know you'll beat me around the head for this answer Nah. &gt; but I regularly dip into php.net and find I get lost pretty quickly. The comments are not always well-explained and the language used in the actual manual is, well, very efficient. First off, skip the comments. You're reading the manual, not people's reactions to it. Second off - yeah, the writing isn't the best, but there's a lot worse out there. Third, it kind of sounds like you aren't reading it in order. If that's the case, that'd cause a big part of the problem. Is that happening here? &gt; As I mentioned in my original post, I learnt all code organically (as one would learn an actual language) and have no formal training. That was the case for me back when I picked PHP up, too. &gt; I understand that this is far from ideal, but reading and understanding the entire php manual sounds like overkill. Nope. You really need to learn the language. Notice that I pointed you at the language reference - that's not the entire set of documentation. It does not cover the function reference, which is actually the big piece. It's just the "these are operators, these are classes, this is a function." Stuff like that. And no, you really need to know the whole thing; it isn't overkill. Printed, it's about 30 pages, if you ignore the comments. It's really not that much. &gt; I'm not questioning the rationale behind your advice (it's absolutely sound) but I also have to be practical and match my education to both my abilities and my expected use. Yeah, PHP isn't a complicated language. If you were talking Haskell or OCaml, then I'd totally be with you, but PHP you don't really need an education to learn; it's pretty simple stuff when you sit down and just take it on directly. &gt; So my aim isn't to be a php wizard, but I do want to be competent Right. And competency is found in speaking the language. Thirty pages of reading isn't really that much for competency, and it's maybe 5% of the total documentation. &gt; consider myself advanced in HTML and CSS. Have I read the whole W3C HTML spec? Nope. Then I think you're a little confused about what advanced means. It's nothing personal, but if you don't even know what's in the language, how can you possibly be something other than a novice? For example, if you're advanced at CSS, it should be a relatively simple matter to vertically center something without tables and without knowing its height, but I think that you'll find you aren't able to without looking up tutorials online. &gt; Would I tell a budding web designer that the first thing they have to do is read a 300 page, dry and overly-technical document? Nobody asked you to read 300 pages. &gt; Can you maybe point me in the direction of something that will ease me into learning about the dangers of SQL injection, XSS etc. I did. Read the rest of my comment. That said, it's not worth your time yet, because they're going to expect you to understand the consequences of the code they're showing you. &gt; solid practices for filtering and escaping php I did. That's actually in the manual. &gt; Maybe somewhere has tutorials I can follow with example code? The manual does. &gt; I learn much better through doing, than through the abstract approach of reading about it on php.net Then do, while you read the manual. I don't mean to be rude, but literally everything you're requesting is in the document you were given, and it appears that the only reason you won't give it a shot is that you imagine it's ten times longer than it actually is, and comes from the vendor.
I mentioned the same thing. My idea was a simple wordpress site with information and a contact form page that is treated as an order page (since all the variables would be inputted by the user)... but he wants to communicate through the site to force people to come on it.
This was my original idea until he told me he wants to be able to communicate with the users directly through a mailbox system on the website. No one can message anyone else, just the orders would be logged with the user account and the admin can reply directly online. So that an ID can be linked to the account or what not with their address and name verified/validated when the account was created (which is where my development knowledge ended).
Yes, sorry, I was thinking that what you meant was to read and comprehend all the documentation on php.net. My mistake, I realise now the language reference isn't too onerous. I will definitely start here and refresh and improve upon what I think I know. You're quite right about dipping in and out of the php manual leading to confusion. Invariably, I call upon it when I'm struggling with a function and php.net is my first port of call, but I find it very dense. Thanks for your further reply, your patience and your persistence. I'll report back once I've read the language reference stuff. 
Hey, no problem. Feel free to ask me for help, private or public, though expect slow replies during the EST workday.
My advice is that there's no magic answer or URL. You should probably try to get to grips with OOP because for all intents and purposes PHP is an OO language. Functions are allowed and used, but object orientation is a necessary skill for professional PHP developers. If you're doing PHP development you *definitely* need to get comfortable with object orientation. The only way to do that is to read as much material as you can find and to write lots of code. Also, don't think of it as 'switching'. There's nothing wrong with having an OO codebase that also has some procedural. Sometimes writing a function is the right thing to do.
Just put a link to his order history / control panel / whatever in the email. Forcing the user to go through the site while in reality communicating via email will just piss people off.
Kohana may be worth considering, too. It is very similar to codeigniter. [kohanaframework.org](http://kohanaframework.org/)
I agree. I'll 're-suggest it'. I feel like it would be easier to do it that way as well. I'm concerned with how to tackle the whole {login/register -&gt; save address under account -&gt; 'order form' (with ability to select saved address that was used when signing up) -&gt; e-mail sent to admin with account credentials (which would probably be his personal e-mail).} I'm just not sure which platform would be the best to go about this. Joomla might seem like a bit overload and I'm not sure how to work with the modules very well + Drupal was a bit hard for me when trying it last year. I feel very comfortable with Wordpress, but didn't know whether it would be a viable option. Stumped. Too much Googling but not getting anything. I set aside the whole weekend to try and figure out a solution :-/. 
&gt;Also, don't think of it as 'switching'. There's nothing wrong with having an OO codebase that also has some procedural. Sometimes writing a function is the right thing to do. Hear, here! I want to second this. One way to increase overall security is to stop copy / pasting code and re-factor it into classes for common things. (After all, who among us has never written a kitchen-sink library called "Util" in their chosen OO language?) When the re-useable code is in its own module, it becomes easier to maintain, streamline, and push out to legacy projects so that fixes are backported. There's no reason to not start doing this now - bit by bit.
I have to disagree with StoneCypher, which around here, isn't a big surprise. The PHP manual is a great resource but it's descriptive not prescriptive. It doesn't tell you what to do. Now, you probably do need the read the manual but you also need more than that. Many of the concepts you want to learn aren't specific to PHP -- they're general programming concepts that could apply to any language. The PHP manual doesn't talk about XSS or SQL injection, which database API to use, or how to structure your projects. What you really need a resource that shows you how to develop web software. Many frameworks come with tutorials that cover how to build a small application from end to end.
$_SERVER['PATH_INFO'] sounds like it may be of interest to you here. Also, maybe use explode: &lt;?php $tests = array( 'http://example.com/AS3qR', 'http://example.com/index.php/AS3qR', ); foreach ($tests as $test) { $bits = explode('/', $test); print_r($bits); echo end($bits), "\n"; } Output: Array ( [0] =&gt; http: [1] =&gt; [2] =&gt; example.com [3] =&gt; AS3qR ) AS3qR Array ( [0] =&gt; http: [1] =&gt; [2] =&gt; example.com [3] =&gt; index.php [4] =&gt; AS3qR ) AS3qR
We use [DebugKit for CakePHP](http://cakebaker.42dh.com/2008/10/30/debugkit-for-cakephp/) - it's perfect for the job! 
Interesting, had never considered using `basename()` in this context, but it looks like a good use of the function!
[**Some people, when confronted with a problem, think “I know, I'll use regular expressions.”**](http://regex.info/blog/2006-09-15/247) [**Now they have two problems.**](http://regex.info/blog/2006-09-15/247)
i recommend looking into frameworks and sticking with one.. this way all of your code you can write as modules under that framework and easily import them / copypaste them from project to project fwiw i use and really like cakephp.org read book.cakephp.org to get started, but other people have gotten a lot of mileage out of a lot of other frameworks
This is easily fixed. I added a note.
If you dont' have the skills to do it yourself, then you have no choice but to contract out the work. Have the other person sign an NDA before you start. Otherwise, learn and do it yourself without worrying about IP.
The most important concept to grasp is the concept of prepared statements and paramterized queries. In a nutshell traditionally you put variables into your SQL queries by concatenating strings together, as such: $query = "SELECT * FROM users WHERE username = '" . $username . "' AND password = '" . $password . "'"; mysql_query($query) or die(); Whereas with prepared statements and parameterized queries you create an object representing the query statement and provide parameters for the SQL engine to use. Naturally people who write SQL engines know how to protect against SQL injection so it's best to leave it up to the engine to paste the variables into the query statement. For example: $pdo = new PDO($your_connection_details); $statement = $pdo-&gt;prepare("SELECT * FROM users WHERE username = :username AND password = :password"); $statement-&gt;execute(array(":username" =&gt; $username, ":password" =&gt; $password));
It will be hard to do this without giving away an idea, but one way you might be able to do it is to contract out only *very small chunks* at a time. So that no one person can figure out what it is about. Examples: - You contract out someone to design a database, you could give them a similar scenario that will fit what you're trying to come up with. And "simply" change the table/column names when they are done. Depending on complexity it may be a fair bit more involved than this. - If you contract out for a design, again you could give a similar idea for them to work with, along with letting them know which colours and layout you want. You will probably want to hire someone separately to do a logo. - For the programmers, you could hire individual programmers to just implement a single *class*, giving them some specifications of what functions it will need and letting them do the rest. So some of the work will need to be done by you, but it will stop them from seeing the "big picture". This is the only way I can really think of, other than going the NDA route. *Edit: Downvotes? Whatever man.*
Yea, this is actually very common. That's what an NDA is for. That being said, OP kind of sounds like one of those people that goes on craigslist and says "I have a great idea, it'll be bigger than Facebook, program it for me and do all the work and I'll give you a cut" If you want someone to sign an NDA and actually do work, you're going to *have* to pay them. No one works for free.
I second CI. Just finishing my First decent sized app with it and I'm not a PHP guru, but found it much easier to work with than Drupal Joomla etc. 
&gt; Keep in mind though that everyone and their dog has the next great startup idea "woof woof Woof! woo-woof woof! woof woof!" *Translation: How about something like facebook but with a focus on sun tanning. It has a pacific islander theme with css drop shadows! Shit people are gonna love this. Hmm, this looks like a good spot to pee. Squirrel!!* 
My honest opinion as a web developer is that your idea just isn't that special. Hire someone to build it for you and launch it. No one wants to steal your idea because most ideas are worthless. Development and marketing are what matter. As someone else has said here, you use money to acquire the development and marketing of your idea. If you don't have money, I suggest you get a job. To end on an even more depressing note, your idea is probably already patented by a big company like Microsoft or Apple. Good luck.
I think I half-understand what you're getting at. Can you expand a bit for someone who (ashamedly) doesn't even have a clear concept of what a class or module is? I know functions and includes and that's about it.
Yes, I think you may have hit the nail on the head - that's precisely what I need: to kind of take a step back and understand the logic of programming, before I relearn everything I've picked up over the years. Today I've been looking at codeigniter, but I got scared off because it seemed "too easy". It felt like I could dive in and start making a website by copying and pasting classes and never really understand what was going on. I want to understand the basics and build on that, so right now I feel like a framework will make me too reliant on that particular framework. Am I wrong in thinking that way? Should I really just bite the bullet and subscribe to one particular framework for the foreseeable future? 
Thanks for your advice. I'm grasping it in a "woah, these are all totally new concepts but also make sense" kind of way. One thing I'm struggling to understand is how a tainted variable in a prepared statement is more secure than one that is placed directly into an sql query?
&gt;Lack of funds That may be a bit of a problem. Not many devs are going to work on something for free, especially when this is their livelihood. As much as you would like to get free work, it's rare that it happens and actually works out for the developer's benefit. Take some time, save money back. That gives you time to get everything else together as far as the to-do list, etc. Once you have a decent amount of money, hire a developer to construct the site. 
i will say from my own experience is that contracting the site development its a guarantee of failure there are probably examples on the contrary but its must be a ratio of 1:100000 against my argument good luck
You may also be interested in [Alloy Framework](http://alloyframework.org/). It's a very lightweight HMVC framework.
This is very important: your idea is not worth keeping secret. Facebook did not have the idea for a social network. YouTube did not have the idea for videos online. Few sites are successful because of an idea. It is your execution alone that has value. So yes, you can do an NDA, but really, you don't need to. Furthermore, it may make it more difficult to find an experienced developer to work with: I know plenty of people that won't take a job that requires an NDA because it's rarely worth the hassle. 
Thanks for your reply. How much do you guys think it will cost (domain name, server hosting, designing, programming, databasing, etc) to build Reddit? I live near Boston, MA. I know that these costs vary, but I just want a ballpark figure. Also, any suggestions on finding a sponsor? Thanks again!
Thanks for your response, but could you please elaborate on "contracting the site development is a guarantee of failure"? You mean hiring someone else on a contract to build the website will lead to the failure of the website?
Wasn't me who downvoted you. Thanks for your suggestion and the time you took to write it out for me! Upvote
ballpark: $32,816.45 sponsor: google might do it, give them a call.
Thats how they made the cube and hyper cube. Watch out for this. First its a web page, then the world.
The general idea to take away from an SQL injection vulnerability is that the attacker can manipulate the vulnerable SQL query such that they could execute their own logic (or function) within the query, specifically by escaping the quotes (either " or ', depending on your preference). For instance for this query: $query = "SELECT * FROM users WHERE username = '" . $username . "' AND password = '" . $password . "'"; If they were to enter as their username: ' OR 1=1 -- The resulting query executed would be: SELECT * FROM users WHERE username = '' OR 1=1 -- AND password = '' Where the `--` bit is the comment start sign (and the rest of the query would be ignored). What does this do? Since we're logging in we will likely be retrieving the first user in the users database (likely based on the user ID, numeric or otherwise), and for all intents and purposes it will likely be an administrative user. The attacker now has bypassed user authentication! At this point we can guess that the user they are now logged in as is acting as a website administrator. The attacker now has escalated their authorization! Most web applications have administrator accounts so that they can quickly and easily manage the website (users, content, or otherwise) and they can probably change user's email addresses or passwords or anything else. If your web application exposes passwords in plaintext to website administrators then this security breach will turn into another kind of nightmare, and if they find out the website administrator password they can probably use the username and password to log into your server administration itself (either through a web UI -- if you're using plesk or something to that effect -- or through SSH or anything else). This is all speculation but you get the idea. Separation of authorization mechanisms (different usernames and passwords for different systems) is just one step -- controlling access -- in computer security. The [CIA triad](http://en.wikipedia.org/wiki/CIA_triad) is an excellent icon of information security. EDIT: grammar
6 pack of beer. Copy -&gt; paste. https://github.com/reddit/reddit/wiki
Thanks, it may not be the best advice according to others but I was just trying to offer my opinion and help :) good luck!
Looks neat. Any documentation?
The humorous thing is that Facebook was involved in a multi million lawsuit that ran for years where the accusing party said the idea for Facebook was stolen from them.
The whole way you go about this actually makes me believe that you shouldn't even be developing this as you're setting yourself up for failure. You're not really bringing anything to the table at all. You have an idea, but an idea itself is worthless. It's the product and execution which is ultimately worth something. Which brings me to my point. And idea needs to be validated and refined. When you get an idea the first thing you do is talk to your friend about it, then you talk to your family, then you go talk to your neighbour. Even if they aren't in your target audience you'll get a very quick gauge of how people react to it, do they see the potential etc. After that you'll want to refine the idea by doing market studies and pitching it to your target audience. In short, when you keep an idea to yourself it's almost always guaranteed to fail, even if you could develop it yourself you'd get key aspects wrong and it'd most likely never get traction. You'd basically be relying on luck, and most of the time people don't get lucky.
This is probably semi-facetious (I get from the OP that Reddit is just an example, not necessarily similar to his project) but looking around at open source components that you can use is a good idea. There are probably wheels in your project and you don't need to reinvent them. 
Cofounders and even employees have a good reason to care about the long-term future of your project. Contractors not as much, usually. If you pay a flat fee for the project, their incentive is to get it done as quickly as possible with less regard for overall quality. If you pay by the hour, their incentive is to drag it out and charge more money than maybe you (and your project) can afford. Not that all contractors are out to scam you, but it's something to keep an eye out for. 
Is there a way you can pare down "Reddit" to the minimum possible feature set? E.g., don't build Reddit as it is now with all its fancy features, but build a site where you can submit a link, comment on the link and vote on comments and links? No self-posts, no markup, no subreddits, no sidebar, no search, no related posts, no orangereds, etc. I know that I have a bad habit of wanting to add everything and a kitchen sink to every project, and this was even worse when I was a newbie. If you have a basic project, you can bounce it off all sorts of people -- people who have the skills to make it better, people who have money to invest, potential customers, etc. Right now you are the "idea guy". You can't contribute money, connections, marketing or technical skills, just an idea in the ether, and a lot of developers are jaded by that kind of thing and with good reason (Facebook for dogs). I think you'd get a lot more interest if you had a working prototype. Even if the code is crap, it shows you're serious and you understand their work enough to have a bit of respect for what they do. You can keep adding features to it as you go, but start with the basic thing. Worst-case scenario, nobody takes interest but you already have Reddit v0.1...v0.2...v0.3... and if one of your early prototypes is actually marketable, you can make a little cash off it to pay for some help. 
EDIT2: This is something of a rant. I'll stand by it, but I'm editing to be somewhat more constructive. Here's what you do: figure out what you can bring to the table besides your idea. Stop being paranoid about sharing your idea. You don't need to go posting it on reddit, but don't worry about NDAs. If it's a good idea, it's probably to do with some niche or another, that you have a personal passion for. Find some smart folks who know how to build stuff, and some other smart folks with some money. Sell them on your idea. Be prepared to own significantly less than 50% of the venture. If your idea is actually good, and you find the right people, you might succeed. DO NOT, UNDER ANY CIRCUMSTANCES try to scrounge up some funds and have a firm or freelancer build something for you. You need either a technical partner or an investor with serious cash to hire tech help. Either way, any investor (either cash or sweat), if they're worth your time, will be demanding at least 50%. They're taking a bigger risk than you are (their time/money vs. you idea, and whatever busywork you can come up with for yourself to do). /END EDIT2 ----- Not to be negative, but this is *so tired*. Let's say I live in a town, and there's an empty retail space in a little strip mall at the corner of Herp St and Derp Ave. I have an epiphany. It would be the perfect spot for a brewpub! Let's say you're a guy who works with restaurants or pubs. Maybe you're a brewer, or have a decade or more experience as a GM, or you own a few places already, or maybe you're just filthy rich from running some unrelated business. Now, I'm so excited about my awesome idea for HerpDerpPub, which I know nobody else has thought of, because the space has been for rent for like, 19 months! But! I don't have any money. I also don't know how to brew beer. Nor do I know how to manage a restaurant. All I have is an idea. But WHAT an idea! I'm convinced we'll be rich. I come to you. I won't tell you my idea, because I perceive it to be so fucking revoluationary or whatever, even though I know jack shit about the business. WAT DO? I'll tell you what! You say "Dude, there's no way I can give you any reasonable guidance unless you give me details". I say "no can do, bro! This is going to be BIG! I can't have you stealing my awesome idea that I'm pretty sure a hundred people haven't also had!" You say: ... The End. ----- The Almost-Fairy-Tale Ending: You're bored and/or desperate for a new venture. Maybe I convince you that my idea is really good without telling you my idea. Or maybe you're just having a bout of stupidity. You sign the NDA. I tell you that I think a brew pub at the corner of Herp &amp; Derp would be a sure thing. You, miraculously, agree! That **is** a pretty good idea. So, I've got my idea. You've got some combination of skill, experience, money, and balls of steel. So we start to negotiate a deal. I insist on keeping 51%. "Since it was my idea" You politely tell me to fuck off. ----- I'm not trying to patronize you (much). But for some reason reasonable people think that, unlike everywhere else, Idea Guys get to run the show when it comes to the internet. But at the end of the day, ideas are like assholes. If you want anyone to pay attention to you, you need to bring something of actual value to the table. Without support to execute it, your idea is worthless. Epilogue: I say: "Just sign this Non-Disclosure agreement. It will protect my idea, since if you use it, I can sue you!" Now, I have this idea, but no money, or relevant skills and experience. You have skills, or experience, or whatever. The reason you have those things is that this **what you do for a living**. Now, here I am, asking you to take on a liability (the possibility of getting sued), and offering no consideration. Considering that I have near-or-actually-zero experience in food/beverage service in the greater Derpville metro area, my idea might be something obvious. You might already have that idea in development Or maybe someone you know, like, and trust, will come to you with a similar project next week. Of course, the only way for you to find out is to sign the NDA and take on the liability. You politely tell me "no thanks, fuck off". I spend the rest of my days wondering why nobody took me seriously. EDIT: Minor point of clarity. 
There are some people who will fall for the "I'll give you equity" ploy, but these people are generally at the very bottom of the development ladder. Hiring one will more or less guarantee failure. edit: Unless it's actually a brilliantly unique idea and you give up a LOT of equity.
Without knowing the scope of the project theres no way to estimate. Thats like asking how much it would cost to build a house with no more info. Way too many variables. Seriously.... it could be anywhere from $150 to $150,000
Can someone tell me why the author decided to implement his own versions of strlen, strpos, substr etc.? All I can see is that he's trying to make sure the string is in UTF, but why not just use mb_* functions?
not a single comment or line of documentation, does not give me faith in the quality of the code.
A class is in it's simplest form a wrapper around a few functions, think of it like a parent / child relationship where the child is the function and instead of calling it directly you ask the parent to do it. eg: class String { public function my_string_function($text) { return $text." hello world"; } } In the procedural world you'd just call my_string_function("Goodbye"); When using classes it's almost identical, we just ask the class to do it. String::my_string_function("Goodbye"); That's the absolute basic use case of a class, but it's enough to get you started, even if it's just organising your existing functions into classes so they are easier to maintain.
I second this. Lack of documentation is a bummer, we can't really see its potential. Also seems un-organised or crowded into one file (just IMO)... why not split the classes up into individual files and a nice directory structure and make a Phar archive out it? Would be easy for contributes to browse the source.
&gt; The only logical conclusion is that you insult other people because it makes you feel good. I believe it's because it gets him attention, which makes him feel good. This is born out by simple experimentation. &gt; SC: because your behavior is disgusting. &gt; SC: hiding your behavior because you know how bad it is SC has an interesting value system. It's twisted, relating to anonymous posting on a public website in any fashion. He often mentions it offends (him?) directly. "Disgusting" is a term he commonly uses. It has a specific meaning for him. It's not uncommon for SC to argue specific meaning, as if he is the great arbiter of language usage. This ties into... There's a lot of misanthropy in everything he posts, but also a clear message of "I'm important by virtue of X" (it usually takes more than 1 post, in a thread, for us to find out which he is trying to extol). SC also claims to not care about the karma, yet mentions people downvoting as if it's some kind of indictment. Don't worry about it, he just wishes that one day someone will reward him playing the victim.
yeah the more i look the more i'm thinking this is in fact just a bunch of utility functions someone has dumped in a file, it's not what I'd call a framework. I'm also taking objection to methods with 9 parameters. 
Couldn't agree more. These days it's in your best interest to publicize your idea as much as possible. Tell everyone about it, post it everywhere. Try to get people excited, try to find people who want to get involved. Ideas are a dime a dozen. Developers don't care about your idea and aren't going to steal it. As a developer I get NDA proposals all the time. I used to sign them, and have signed probably 50 or so in the past. Every single one of them was stupid. I don't sign them any more. Tell me your idea, if it's genuinely interesting and you have some capital maybe we can work together, if it's not interesting then I'm not going to work on it and I'm certainly not going to steal it. Edit: Also, when you start telling people your idea, you'll start getting advice, which is going to help you tremendously. 
No documentation. Bunch of classes in one file. WTF WTF WTF!!!!!
If that would be the case, he would be trying to use the mb_* functions, the way he implemented his function makes me think he had no idea about those. Or maybe he tried to make it backward compatible with PHP versions that do not have the mb extension.
This is all just my opinion and not based on years of experience etc, but I'm in a very similar position so thought I would share my experiences and conclusions with you. I'm not a coder or a database expert, I'm a sysadmin and technical architect, but I have an idea that I think will fill a gap in the market and could turn out to be something big. For me it's slow going, what would take an experienced PHP dev half an hour takes me a whole evening of looking up the syntax, reading articles about the correct way to implement whatever it is I'm trying to do. Then a few hours of hair pulling trying to work out why it fails until I discover a missing close bracket (last night with a SQL query that was causing me to despair). Yes I would love to find finance from somewhere or have a skilled PHP/MySQL/JScript dev do most of the work for me. But the reality is it isn't going to happen. Here's the point though. If your idea really is that good, then you should be willing to spend all your evenings, weekends, sick days, holiday time, punching away at it yourself. If you have a wife or significant other, if your idea is that good, they will have brought into it and understand and support you with it. If they don't then either you made a bad choice of partner or your idea isn't as good as you think and they've just been too polite to tell you. If you're like me, you probably have a list of stuff you want the final product to do and it keeps growing. Stop. What is the absolute, core minimum you need to get a working base model? Focus on that, not the extra stuff that gives your product the unique selling point, that stuff can come later, one feature at a time. Modularise everything you're writing as much as possible, this way you can come back and rewrite the really crappy parts of the code later, and by the way, if your site/app/product is successful, by the time you reach anywhere near 1000 users/members/whatevers you will probably have written your entire code base a few times over. Sorry for rambling.
It has some really concise utility methods (SMS, PayPal, OpenID, etc). It also has this gem: public static function Voodoo($data) but yeah, other then that, docs would help immensely. 
you dont see it now, but a site has to adapt everyday and if you dont understand those changes you will wonder if everything is ok, and trying to avoid doing things that you need to do
That looks a little more interesting than this phunction framework. And it's got documentation.
I'm sure people laugh, but I've had a client that wanted me to make a Facebook type site for a specific sport. The idea was fairly absurd.
All I have to say is good luck both hiding the purpose of the application, and getting someone that can put all of the pieces together (which is certainly going to be a pain in the ass). Essentially what you are suggesting is that a person lacking experience do the most important part - the design, then farm out small bits of that. If he had what it takes to design the site he would not need to farm it out IMO.
Did you charge the fuck out of them to go setup a facebook group/fanpage/whatever the fuck FB calls it? Isn't that essentially what they want?
"If you go to VC firms with a brilliant idea that you'll tell them about if they sign a nondisclosure agreement, most will tell you to get lost. That shows how much a mere idea is worth. The market price is less than the inconvenience of signing an NDA." - Paul Graham Seriously. The chances that your idea is unique or special are almost zero. The chance that you will implement it well with a complete lack of experience is also almost zero. Its nice to think you have an idea, and to play pretend so to speak, but that's all it is - playing. If you were both serious and thought it was a good idea, you'd do whatever it took (work a second job at McDonalds for 6 months etc.) to build up 10k to get a proof of concept up and going, so that you could market the idea at that point. All of this is just pointless conjecture of something that will never happen, or if it does its going to be pretty much a waste of space. Don't get me wrong its good to have projects and ideas because they are great for LEARNING, but you are so overprotective of your idea that I doubt even that is going to happen. This sort of thing to me also reeks of a get rich quick scheme. Some people without tech skills who have no interest in gaining tech skills for some reason think their idea is going to be great. The reality of it is that as soon as you find out what the idea is you can point to 10 companies that already do exactly what your idea does, but have already dumped 7 figures into it as well.
1. You wont find a sponsor 2. It would be expensive as shit to try to build reddit On #2, sure you may find a few guys that barely know PHP that can hack out a slightly working "product" but that's not going to be sustainable. If your idea had merit, it would be enough to get you funding.
I agree that idea guys are like assholes. It gets proven over and over again IMO that its not really the idea that gets you where you need to go (unless its an industry first, then you have to evolve to fight of people that do it better). The implementation is what makes something stellar. Stackexchange is what it is because its done so well IMO. There are TONS of sites dedicated to providing help for people with some sort of feedback system, but many are poorly implemented. I think some people are just stuck in the 90s where you could cobble together a simple site, have it overvalued, and make a ton of money off of it.
IMO people tend to ignore sound advice. Its like Kitchen Nightmares. Ramsey is famous for what he does, but at the end of the day the show is pretty formulaic: 1. Keep a clean restaurant 2. Serve fresh food (if you want microwave food you can get that at home) 3. Coordinate the menu and dont have 18 pages of dishes 4. Don't be a pizza place right next to 15 other pizza places (have a niche) 5. Set quality standards high These are so obvious, yet so many people obviously ignore them. I've found this to be true in every aspect of life. People always say "Oh, I know that's a good idea but I'm different"
Do it locally. Using xampp. Or some other dev server.
unfortunately, this is true of about 95% of situations.
It wasn't just the idea, it was also some of their source code. Either way, they got $60 million dollars and are going back for more.
Exactly. How is the guy who can't do the basic development going to be responsible for making sure little pieces built by a variety of third parties play nice together and achieve his intended goal?
I have yet to see a real world working example that can bypass addslashes using a western character set if the sql query is quoted correctly. &gt;For instance for this query: $query = "SELECT * FROM users WHERE username = '" . $username . "' AND password = '" . $password . "'"; * Don't use double-quotes (") in your PHP strings, the engine will try to interpret them. * Always quote the values you're passing ex. WHERE age &lt; "18" '; * Use addslashes(). * Always set the pages UTF character set. edit: formatting 
Exactly, I don't know who said it first but it's a mantra every entrepreneur should know: **[Ideas are worthless, execution is everything](http://www.google.co.uk/search?q=ideas+are+worthless+execution+is+everything)** This is even more evident in software development, where it is very easy to make a crap product.
No, we declined the job. At a certain point we just have to say no when we cant possibly meet a clients expectations given the expected budget. This is a client that we have worked with previously and their budget is typically 1k - 3k so yeah.
* Nothing wrong with double-quotes * Nothing wrong with not quoting numeric values * [See here about defeating addslashes()](http://old.justinshattuck.com/2007/01/18/mysql-injection-cheat-sheet/) * UTF is wonderful
Meh, I think its just a bunch of idiots that either don't do programming of any sort, or who have totally lost perspective on how poor the average persons technical skills are. That in combination with just seeing the latest Die Hard movie. Or any other movie where the plot is to have a bunch of little guys make parts of something that they don't understand. This has been a fairly common movie plot, but even in the movies the guys at the top are very competent and just farming out small bits where an extreme amount of expertise is needed.
Wow. That has nothing to do with what we're talking about. 
Seconded. CodeIgniter is an lovely framework. Used it recently to create an interface for a unit tracking system with high demands for proper security since data stored is worth quite much. 
It's certainly one of the [cooler micro frameworks](http://matrix.include-once.org/framework/view.php?name=phunction). The feature set isn't that big, so I wouldn't miss comprehensive documentation. It's clearly optimized to be lean instead of Symfony/CI-bloated. It's also very likeable that it uses a more hybrid coding style instead of pretend-OOP, while the many redundant internal `=== true` identity checks and some exotic php functions usage (json_encode/decode for filtering) look odd. Haven't used it in a real project yet, but it's obviosuly very apt to simplify typical chores. Especially the -&gt;DB() interface is heaps more clever than the commonplace PDO wrappers. Albeit you probably want to combine it with a mini-ORM or use it in conjunction with a utility library like Flourish anyway.
Lawyer up, you'll have to NDA your staff if you really want to protect your idea. But to be honest, I wouldn't bother. From experience NDAs are only really effective to stop staff employees blabbing about internal opps.
&gt; Nothing wrong with double-quotes Strings created with double quotes will be parsed by PHP. Basically you're making PHP evaluate every single word in your query until you escape out to concatenate. &gt; Nothing wrong with not quoting numeric values If you don't quote numeric values you allow an attacker to use any vector which doesn't require quotes. Force the attacker to have to use quotes and apply addslashes() to make sure the user doesn't double escape. Consider this SQL query: $vector = '10 OR 1=1--'; $query = "SELECT * FROM users WHERE id=". $vector; *SELECT * FROM users WHERE id=10 OR 1=1-- // valid $query = 'SELECT * FROM users WHERE id="'. $vector.'"'; *SELECT * FROM users WHERE id="10 OR 1=1--" // not valid Using double escape: $vector = '10" OR "1"="1'; $query = 'SELECT * FROM users WHERE id="'. $vector.'"'; *SELECT * FROM users WHERE id="10" OR "1"="1" // valid $query = 'SELECT * FROM users WHERE id="'. addslashes($vector).'"'; *SELECT * FROM users WHERE id="10/" OR /"1/"=/"1/" // not valid &gt; See here about defeating addslashes() All of those examples require the query to not be quotes to work. ex $vector ='CONCAT(CHAR(97),CHAR(100),CHAR(109),CHAR(105),CHAR(110))'; $query = 'SELECT * FROM users WHERE level = "'. $vector.'"'; *SELECT * FROM users WHERE level = admin // valid $query = 'SELECT * FROM users WHERE level = "'. addslashes($vector).'"'; *SELECT * FROM users WHERE level = "CONCAT(CHAR(97),CHAR(100),CHAR(109),CHAR(105),CHAR(110))" // not valid &gt; UTF is wonderful The reason I say you have to enforce it is that it's the only way to [escape addslashes](http://shiflett.org/blog/2006/jan/addslashes-versus-mysql-real-escape-string). &gt; This type of attack is possible with any character encoding where there is a valid multi-byte character that ends in 0x5c, because addslashes() can be tricked into creating a valid multi-byte character instead of escaping the single quote that follows. UTF-8 does not fit this description. Thanks for the reply it made me go dig through some things to find some answers. :)
[MySQL Documentation](http://dev.mysql.com/doc/refman/5.0/en/security-guidelines.html) &gt;A common mistake is to protect only string data values. Remember to check numeric data as well. If an application generates a query such as SELECT * FROM table WHERE ID=234 when a user enters the value 234, the user can enter the value 234 OR 1=1 to cause the application to generate the query SELECT * FROM table WHERE ID=234 OR 1=1. As a result, the server retrieves every row in the table. This exposes every row and causes excessive server load. The simplest way to protect from this type of attack is to use single quotation marks around the numeric constants: SELECT * FROM table WHERE ID='234'. If the user enters extra information, it all becomes part of the string. In a numeric context, MySQL automatically converts this string to a number and strips any trailing nonnumeric characters from it. 
&gt;with no knowledge of the business or programming skills required to do so, what advices would you give to this newbie? go get a sandwich and forget about this idea? when it comes down to it, if you are looking for a co-founder you need to be able to pull your weight. You need to either be the business mind or the technical mind, but you can't just have an idea. You have no funds. You are not going to get funding for an idea, even the wildest angel investors look at what the founders or founding team can bring to the table before investing. Since we are pretending here, let's pretend you just watched "The Social Network" and thought "shit I would love to be a billionaire, I gotta come up with an idea!" you missed the point. It wasn't that the idea was revolutionary, it was that the deployment of the site and the way it was developed were executed pretty well. But we are just pretending. If you want someone to work for free or little to no money, the final product will reflect that. you are learning html, css, and php keep learning until you can do it yourself. The best way to teach yourself something is to solve a problem. So now you can go "super amazing site idea" needs to do this, this and this. Let me find out how to program this, this, and this. It might seem like i am being an asshole, but i assure you i am not. 
my case ( yet another ). I was/am mediocre wannabe programmer at best. -&gt; wake up with a fantastic website idea in my head! -&gt; spend months just thinking about it, learning php. -&gt; finally started building it, slowly, step by step. -&gt; day comes when its ready. Unbelievable :) -&gt; spend another month tweaking it, building some anti spam , security concerns etc. I could launch it tomorrow. but I am too .. too shy/scared to do it. I am an idiot. **Suggestions:** -&gt;talk with trusted people , demand honest opinions about the idea to see if its really any good. -&gt; I couldn't have made the site without [this lynda.com tutorial](http://www.lynda.com/PHP-tutorials/php-with-mysql-essential-training/435-2.html) . Its better than any book. it doesn't just teach php/mysql. It guides you through building a whole CMS. Covers security/best practises, things no book can do. Its fantastic. i don't have anything to do with lynda.com btw. Get it from piratebay if you are cheap. 
Edit: deleted several paragraphs of pointless bitching. Who the fuck cares what I think.
You're the fucking spammer you asshole. Stop posting affiliate links to amazon
Learn to program. Besides, your idea has been thought of already.
I read the OP and thought that this was better suited to /r/craigslist, yes. OP: In lieu of equity, you could get them to monetize your site and keep a percentage of profits till the agreed upon price is recovered. Keep in mind, most folks won't agree to that.
I'm not denying that, it was just an idea..
the correct path would be to build a business model, and a business proposal. Part of that will be finding out how much he needs to get started. For example, getting the site built, advertising, yearly hosting and upkeep, physical supplies, etc. Then, find investors. If he doesn't have money, he can go to a bank or he can rustle up investors. Programmers are never investors, they can almost *never* afford to work for free. In order to get a good programmer or team of programmers, it's going to cost money up front, and that's why he needs investors.
The problem is, and why the idea will never work, it won't stand up to the scrutiny of a business plan and investor review. I posted to the guy that I'd take a look at it under an NDA, since they're just 2 minutes in right signature and its the weekend. I'm afraid, honestly, that it'll be another "facebook for cats," and the person won't have enough experience in business to even talk to their banker about a business loan.
&gt;I'm afraid, honestly, that it'll be another "facebook for cats," and the person won't have enough experience in business to even talk to their banker about a business loan. I got that from the fact that he was hoping he could get people to work on it for free.
It doesnt cost more than 100$ to build reddit. To scale for sub 10000 users. If you do it all yourself.
I'm going to assume that you are joking, unless you don't understand what opportunity cost is.
Yeah, I had gotten the facebook "work on it for free" vibe, but I did want to give the person the benefit of the doubt. I mean, they figured out how to post a self.post on /r/php.
&gt; How much do you guys think it will cost (domain name, server hosting, designing, programming, databasing, etc) to build Reddit? There were no other costs considered. GoDaddy/Gandi/whatever Linode Designing? Use reddit's theme, make a logo (google happy cat), tweak color scheme in the very public css. Done. 0$, you're welcome. *Programming. Apache, PHP, MySQL, Git/SVN. DIY, you take a framework (I like Kohana), put the features in your want (routing, actions, etc) which can be designed up front. Your javascript is really the bulk of the work. *Databasing. A schema isn't too hard to figure out, given the relationships. Location has nothing to do with development costs as long as you can get a shell to the linode and have a browser to test. Again, doesn't take much at all. It's a lot of WORK to set it up and to decide what features to support. It can easily be done by 1 person. *Heck if you are stuck, https://github.com/reddit/ - Python isn't exactly hard to understand or learn enough to figure what's going on. I build stuff, answer questions, etc for free to see if I can. Valuation of another person's time is not my business.
I guess there is reality, and then there is "It costs $100 to build reddit" whatever "build" means in this context. Valuation of another persons time may not be any of your business, but time is part of the cost and failing to consider that is poor. It makes the assumption that time you spend yourself is "free". Its kind of like saying "Oh, building a house shouldn't cost more than $100, if you make your own tools and refine your own materials"
You know, you're kind of an asshole. Stop it you douche bag. Seriously... fuck off 
&gt; Valuation of another persons time may not be any of your business, but time is part of the cost and failing to consider that is poor. That information wasn't given. Poor is an interesting word, when it has no scale to compare. I think it's spot-on. Where does that fit? &gt; It makes the assumption that time you spend yourself is "free" So if you understood the assumption, poor is not a good analogue to "accurate". There are lots of assumptions made. It assumes the OP: [] understands english [] meant webpage and not house [] is capable of understanding what Reddit "is" from a technical standpoint [] is interested in a cost in US dollars etc...so what? All he inquired about were technical costs. Whatever you're getting at, it isn't the OPs question. &gt; Its kind of like saying "Oh, building a house shouldn't cost more than $100, if you make your own tools and refine your own materials" I think you meant "building a house shouldn't cost more than..." then giving a list of costs that are fixed, and totalling them. It's more than 100$ for hiring the county certified engineer to do the framing. I didn't say create a VM kernel or webserver (tools)...I said, if you do all the electrical, plumbing, carpentry, etc. I even gave some tips as to how to simplify them as they sound much scarier when you think of them as a major undertaking, without considering the simplest cases. A common problem of overthinking.
There are *plenty* of books that could teach you as much, or more than that tutorial. *Edit: Also, that tutorial is 4 years old. Completely disregard it.
Sounds like a pretty pointless horrible idea, but that doesn't make it any different from half the shit clients have me do so I cant say I feel to bad about it. Sounds like he just wants to have an audience for his blog.
You're being downvoted because unless you've got several modifiers, no bank is going to back your SBA-guaranteed loan unless you have business education (college level) and business experience (usually C-level.) Or, you have equity in the full amount of the loan that you can use as collateral. Need a 100 grand SBA loan? GIVE US YOUR HOUSE.
So if an electrician / plumber bills at $50/hr, and they decide to spend 15 hours doing the electrical or plumbing for their house, you are saying that's "free"? I think we simply have different definitions of the word free. Opportunity cost cannot be ignored. Also, "cost" has more meaning than simply a dollar amount. "The consideration of opportunity costs is one of the key differences between the concepts of economic cost and accounting cost. Assessing opportunity costs is fundamental to assessing the true cost of any course of action. In the case where there is no explicit accounting or monetary cost (price) attached to a course of action, or the explicit accounting or monetary cost is low, then, ignoring opportunity costs may produce the illusion that its benefits cost nothing at all. The unseen opportunity costs then become the implicit hidden costs of that course of action."
It costs less than 100$, itemized more or less. Everything else is variable, so assumed best case is 0.
I asked a million times whether there would be updates more than once a month on the site and haven't really received an actual reply. I'm still stumped on how I'm going to tackle this, but I don't have a choice but to figure out some type of solution. It does sound pretty weird to me as well. I don't know why he would want to force people to come to the site... I feel like he'll just be calling in a month or so (if people actually start visiting the site) and pay me extra to 'change it' so I'm not too bothered. I started thinking of 'osTicket' open source PHP support ticket type site where I can just edit it with random things like 'When was your last refill?' and make it work, but I need to somehow make it work in a CMS type environment. The problem is the Joomla themes are somewhat what I had in mind... that's why I even considered it. It's such a simple damn thing that I know I can have something working in a couple hours. I don't know PHP from scratch, but I can edit open source type systems such as Wordpress and make it work... Argh. 
&gt; tutorial is 4 years old. Completely disregard it. why exactly ? honestly want to know.. Also it only 2.5 years old &gt;[This course has been updated as of November 2008.](http://www.lynda.com/PHP-tutorials/php-with-mysql-essential-training/435-2.html)
Great, I'm happy you cleared this up. Cheers!
Our government loan program is run by the Small Business Administration, which relies on partner banks to make loan decisions. NGOs really wouldn't give a shit unless the guy's idea was useful to the UN or a way to ban starving children. Angel Investors really won't give a shit till this guy can bring something to the table. They don't throw money away, they invest in people who have the business management experience to use it effectively. Basically, unless the County Welfare Office ordered you to apply for SBA loans and gave you free business classes, no one is going to give a shit about your idea until you can cough up 10k yourself. Be that real estate, cash, or collateral, if you don't have the money, you can fuck right off.
Scott Adams?
You only need their email, you can email them the password and/or one-time-login-URL to change their password.
Now streamline function calls and names pls :)
And yet, an awful lot more entrepreneurship nevertheless manages to occur.
&gt; For the programmers, you could hire individual programmers to just implement a single class, giving them some specifications of what functions it will need and letting them do the rest. So some of the work will need to be done by you, but it will stop them from seeing the "big picture". The only problem with this is that it is completely preposterous. If the person managing the project doesn't understand development, they are never going to come up with sufficiently tight specs to end up with anything interoperable. Even if he did, it's still unlikely in the real world if people can't test against each other's work.
They don't even have to be out to scam you to have conflicting incentives. If I'm billing on a project basis, I am not going to fuck my client around, but I am also not going to go beyond the contracted requirements unless I feel it's absolutely necessary for the viability of the project.
&gt; Use addslashes(). Use mysql_real_escape_string(), which deals with various encoding issues that addslashes doesn't know anything about. &gt; using a western character set I didn't realize anyone was using anything other than UTF8 for new development on the web anymore.
&gt; Strings created with double quotes will be parsed by PHP. Basically you're making PHP evaluate every single word in your query until you escape out to concatenate. Not really, it's just looking for three characters: { $ \ That's fast, and real-world tests show that single vs double quotes makes a trivial difference. The reason I choose to use single sometimes and double other times is as a reminder to myself of whether I had anything in the string for PHP to interpolate.
Not really a fan of the UI/UX myself. Take a look at: http://poll.cm/. The UI of that poll web app is very simple.
I liked the UI just fine, but I was wondering if there was a way for the poll creator to get get data results somehow or do they just keep going back and reloading the page?
Yeah right now the only way is to refresh the page to check for updates... I saw that poll.cm site has realtime updates, so that may be something to look into as well though :)
Which would you like to see added?
It looks nice, but forms were not intuitive and validation was not user friendly.
That's some angry code right there. You have a few weird things, correctly indented the main block looks like: $queery = mysql_query("SELECT * FROM links"); while ($row = mysql_fetch_array($queery)) { $id = $row['id']; $wut = 1; while($wut &lt; $id &amp;&amp; $id &lt; 4) { $fetch = mysql_query("SELECT title FROM links WHERE id=$id"); while ($row = mysql_fetch_array($fetch)) $link = $row['link']; //read the feed $channel = new SimpleXMLELement ($link,NULL,true); foreach ($channel -&gt; channel -&gt; item as $item) { //insert everything into db } } //closing the connection to save dat processing power and save da planet from dem greenhouses if(isset($connection)) { mysql_close($connection); } } First thing - you said you have one table, which looks like: +-----------------------------+ | id | title | +----+------------------------+ | 1 | http://reddit.com/.rss | +----+------------------------| Your first query, `SELECT * FROM links`, selects `*` (all) fields for each row, hence each row array will look like: array ( [0] =&gt; 1, ["id"] =&gt; 1, [1] =&gt; "http://reddit.com/.rss", ["title"] =&gt; "http://reddit.com/.rss" ) So when you iterate over this query (your first while loop) you don't need to ask the server again for the title - you already have it. That shortens this piece of code: while ($row = mysql_fetch_array($queery)) { $id = $row['id']; $wut = 1; while($wut &lt; $id &amp;&amp; $id &lt; 4) { $fetch = mysql_query("SELECT title FROM links WHERE id=$id"); while ($row = mysql_fetch_array($fetch)) $link = $row['link']; //read the feed $channel = new SimpleXMLELement ($link,NULL,true); foreach ($channel -&gt; channel -&gt; item as $item) { //insert everything into db } } Down to this: while ($row = mysql_fetch_array($queery)) { $id = $row["id"]; $title = $row["title"]; //read the feed $channel = new SimpleXMLELement ($link,NULL,true); foreach ($channel -&gt; channel -&gt; item as $item) { //insert everything into db } Next part is the close connection code which, if you haven't cut bits out of the code sample before posting it, is clsoing the connection after fetching each row. That should be moved outside of the while loop, at the end of the script. So to finish, your code should look more like: $queery = mysql_query("SELECT * FROM links"); while ($row = mysql_fetch_array($queery)) { // fields for each row $id = $row["id"]; $title = $row["title"]; //read the feed $channel = new SimpleXMLELement ($link,NULL,true); foreach ($channel -&gt; channel -&gt; item as $item) { //insert everything into db } } // moved to the end, outside of the while loop //closing the connection to save dat processing power and save da planet from dem greenhouses if(isset($connection)) { mysql_close($connection); }
I think it's because you are reusing $row inside both while. Also it would help if you tell us what's exactly the problem :) Oh, and i don't see where you are increasing $wut, so that may cause and endless loop.
I like the ability to choose unique colours. The result page looks a little cluttered though.
I guess especially the dropdowns may be a bit too clunky. With validation do you mean you'd like to see as-you-type javascript validation?
The last time I used mysql_query , I passed in the connection resource. api [link](http://www.php.net/manual/en/function.mysql-query.php) . I also used mysql_fetch_assoc instead of msyql_fetch_array. I've been using frameworks for a few years, so I can't say I've used mysql_query recently.
"Embed in your website" error: &gt; src="http://**localhost**/digillusions/embed/?request=emb_get_poll&amp;id=TfGgnQ" I liked it
Whoops... that is pretty embarrassing :/ Rest assured that's been updated now ^^
We've all done that before!
Too many sharing buttons, Digg is on there. :)
Its perfectly productive, for those who have the money to develop experience in handling business operations through college and moving up in management positions. Or, you could leverage your house and your cars on your business, pray it works, and then go bankrupt and/or homeless if it fails.
None of your mysql_query() calls are being passed the connection handle, but according to the docs it should just use the last handle you made. Still, that's probably not helping things. while ($row = mysql_fetch_array($fetch)) $link = $row['link']; Is there a purpose to that code? Are you just trying to get the last record? There's better ways to do that, if so.
You don't have to use mysql_close, at the end of script execution PHP closes it.
That takes simple to a new level - pretty nice.
This reply does not answer the immediate question, but please consider using [pdo_mysql](http://php.net/pdo_mysql) or [ext/mysqli](http://php.net/mysqli) instead of [ext/mysql](http://php.net/mysql). Granted the PHP manual is not clear about this, but it will be soonish. The old ext/mysql API is essentially dead.
I had no idea that php had anonymous functions. Perhaps it has issues with arrays.
Why not use an object?
 &gt; php -C &lt;?php $foo = array(); $foo['foo'] = function() { echo 'foo'; }; $foo['foo'](); returns 'foo' on 5.3.3. closures aren't available before 5.3.0. You won't be able to access any other array members unless you define and access them globally, or pass them through to the function like this: &lt;?php $foo = array(); $foo['bar'] = 'baz'; $foo['foo'] = function() use ($foo) { print_r($foo); }; $foo['baz'] = 'bar'; $foo['foo'](); This returns Array ( [bar] =&gt; baz ) You will see anything that was in the array at the time it was assigned with "use ($foo)". Anything that happens to it after that, such as the assignment of the function itself, is invisible. edit: Format
Not terrible so don't take offense, but it's too dark for my tastes. I think the black UI looks good but is difficult to pull off. Also, if you hadn't told us it was a survey site I don't think I would have have known very quickly. Kind of hard to tell what the site is for at first glance. Also, the massive comcast advertisement in the top right is distracting. Having said that, I think you are on the right track with some refinement and a little more work that could be a pretty cool concept.
You could use a closure. $Test['func'] = function() use ($test) { return $test[0][1]; } echo $Test['func'](); Edit: but as others have suggested, you really should just use an object instead.
Looks like you have some XSS vulnerabilities: http://digillusions.com/cw2Wv7 http://digillusions.com/cJio70
Do something with anonymous functions. They're new to PHP and should weed out people who aren't following the latest developments in the language.
Already, posting here has been more than worth it :) Thanks, that vulnerability should be gone
I believe you can do $foo['foo'] = function() use (&amp;$foo) { print_r($foo); }; to use the current value of $foo instead of the value that was assigned when 'use' was called.
I hate to be *that guy*, but... &gt; this idea has **piqued** my curiosity FTFY
&gt; **tl;dr:** Anonymous functions are the shit. Yes they are :D especially if you're someone that spends a lot of time in functional languages (Haskell, CL, Scheme..), you very quickly learn to make the most of them :D
I think you could do it in one pass instead of {number of filters}. And I believe without anonymous functions your code could have been shorter and more readable (Edit: possibly also faster) for this particular task. Also, method_exists() is a better alternative to get_class_methods()/in_array(). And finally, I'm sorry but even though there is nothing wrong about this: return $pilot-&gt;$method() == $value ? true : false; in programming it's usually written as: return $pilot-&gt;$method() == $value; Congrats on the insight with anonymous functions though, it always feels nice to get something done with them.
Ah yes, I haven't used them in PHP just yet because most projects I've been on require a lot of backward compatibility. We only really dropped PHP 4 support :/ Anyway, does anyone know what the performance of these are like? I for some reason assume they would be slow, but I could be wildly wrong.
Yes, anonymous functions are indeed the shit. Many web developers who also work in javascript know this and it's a feature I've been waiting for in PHP.
You need to use sessions for keeping track of your users. Just save timer values in the session or a database connected to it, and check them every time you load a new part of the quiz. As for not doing the test twice, you need to uniquely identify your visitors and save the ones who have already made the test. If they log in and have a unique id, that's easy. If there's no login, it's a bit trickier since you have to go by their ip adress and that can be shared. You can't absolutely rely on cookies. I guess it depends on how strict you want to be with not showing the test twice.
It's no problem :) Glad you got it working.
Mm, that's what Google says, but I've heard it come out of other people's mouths so I figured I'd rather not misquote it :)
It's one thing to correct grammar, but when someone thinks one word is another, I don't think it's rude to correct them. 
You loose the name of the input once you have typed in a value, which makes it difficult to review the form. The validation for the first part of the form appears after you have submitted the form (which is on the second part of the form). Obviously js validation would be better, but if not, the validation of the parts should be immediate before moving on.
&gt; I an so excited that this worked, and stunned by the simplicity and elegance of it. I don't think it's simple or elegant, to be blunt. It's incredibly dynamic, not at all explicit about what it's doing and, at a first glance, it's relatively hard to tell what it's doing. Compare with this solution, on the other hand: /** * Takes an array of properties (and values for those properties) and only returns the * pilots who have the passed properties with the specified values. **/ private function filterPilots($filter) { $return = array(); foreach($this-&gt;pilots as $pilot) { $valid = true; foreach($filter as $property =&gt; $value) { $methodName = 'get' . ucfirst($property); if(method_exists($pilot, $methodName)) { $pVal = $pilot-&gt;$methodName(); if($pVal != $value) { $valid = false; } } else if (isset($pilot-&gt;$property)) { if($pilot-&gt;$property != $value) { $valid = false; } } else { $valid = false; } } if($valid) { $return[] = $pilot; } } return $return; } I believe this approach is better because it's a single method that doesn't rely on dynamically generated dynamic functions, so it's much easier to read. It's also a pretty common code pattern. I think anonymous functions are an absolute necessity and useful, but I don't think this example is a good use of them at all and a lot of cases where I see people use them would be better expressed as a more succinct single method. In cases like this, they're just serving to obfuscate the algorithm from the developer(s) and there's no value added for their use when there's a very clear decrease in code readability. That cost has to have some benefit and in cases where anonymous functions are used to implement DI or modules, I think it's justified. In cases where they're being used for the sake of being used, like this one, I wouldn't ever sign off on saying they're the best solution. They don't add anything to the algorithm here. One final note: You should never, ever throw generic Exceptions. Either use a predefined subclass or subclass it youself, but throwing an Exception means that someone has to catch an Exception type and that is terrible practice. When you throw Exceptions, you force this to happen: try { doSomethingWithYourCode(); doSomethingElse(); } catch(SomeException $e) { //do something specific to SomeException } catch(SomeOtherException $e) { //do something specific to SomeOtherException } catch(Exception $e) { //do something specific with the known Exception thrown... } At first glance, that doesn't seem that bad, but later when somone changes the try body in the future to add another exception type that needs to be caught and forgets to add a catch body (the IDE won't warn them because you've already caught it in your final catch block!), then that Exception **won't be handled correctly.** Throwing generic Exceptions is more or less a guarantee that your Exception handling is going to be wrong somewhere in your application.
Javascript can be edited client-side, so it is not a safe way of doing any form of security. Basically what HertzaHaeon said was correct, you should store the time of a users entry in a session, and then check that time against the time of the completed form.
I think this is pretty great, congrats. One thing I think could be improved is the colors / style of the text inputs for creating a poll. In my opinion, they are too solid and dark so they look more like buttons that text inputs. Also, the add and remove poll options UI could be simplified. maybe adding a delete button next to each option, and a plus sign at the bottom? Anyway, good job, the site is very reponsive and easy to use
You're getting into details now that are hard to say anything about without the code. You can do the same with javascript, sure. There are time functions in javascript too. But you shouldn't rely on javascript for time limits, since you can disable or change javascript on the client. If you load the quiz in parts as php pages, for every part you could add the time since the last part was loaded to a total sum, and check that it doesn't exceed your limit. That's how I would do it. When someone finishes the test, store their user id in a database table. When you check whether to show the test to a user, check if their user id is in the table first.
I just noticed that the validation happens for step 1 happens after completing steps 1 and 2. That could also be improved.
Thanks for the feedback; and yeah I'll start looking into improving the validation, that seems to be a much heard complaint so far :)
&gt; return $return; &amp;#3232;\_&amp;#3232; 
&gt;$array &amp;#3232;\_&amp;#3232; 
&gt;**It's OnE thIng tO cOrrEct grAmmAr, bUt whEn sOmEOnE thInks OnE wOrd Is AnOthEr, I dOn't thInk It's rUdE tO cOrrEct thEm.** 
That's the joke
I upvoted you, but hey, at least it's not Hungarian notation.
Thanks for the reply. Your solution is the first thing I came up with when I was writing this, but it felt somehow awkward. I've never been a fan of using flags to determine what to do at the end of a loop (though I do understand their usefulness), so I decided to try it a different way. The generic Exception was not meant to stay, I simply have not created an appropriate Exception Subclass yet. Perhaps I didn't not stress 'finger vomit' enough, this was just a first pass on the code.
I typically do things like this during the first pass of coding, so I can keep track of what I will be returning throughout the function. I then later go back and change the name to better reflect the contents. I will most likely change $return to $pilots. Same thing with $array. There is procedural code below the function call that I have not displayed here, I am simply using $array to remind myself of what I am dealing with. Yes, it looks funny, no it doesn't stay that way, and yes it helps me.
I assume your solution would be along the lines of [oorza's?](http://www.reddit.com/r/PHP/comments/ia3p8/i_just_fell_in_love_with_anonymous_functions/c224wqi) Or do you have an idea for a better solution? I'll keep in mind method_exists(), thanks. Also it was 3am or so when I wrote return $pilot-&gt;$method() == $value ? true : false; it just seems silly now huh?
Glad I could help :)
yet another example why anonymous functions lead to lazy (aka bad) code! I bet your original code didn't work because you do not 100% understand how to code should work and execute...
Sure. My (limited) understanding is that classes and modules are more-or-less interchangeable, but it depends on the rules of the language. The way I see it, a module is a separate file (analagous to a library) which holds the definitions for one or more classes. A class defines an object and its methods. In your running code, a class may be *instantiated* by calling its `new()` method. A class may define instance methods or static methods. A static method may be called without an instance (note that the following are all made up and do not accurately reflect any real language): Date::Parse($somestring) But an instance method only makes sense when called in the context of a concrete instance of that object: $db_handle = DBI::new($connection_string) $db_handle-&gt;execute($query) $result = $db_handle-&gt;fetch_result() So, when OOP is typically taught, they tell you to design your application around these object which have instance methods. So you might make your date object, your database connection object, etc. That's all well and good, and having a catch-all "Util" class is actually an anti-pattern. But in your case (and I've been there) I think it makes sense. You have one file that collects all your handy functions in one place as methods of your "Util" class. It's a bit of a kitchen sink class, but on the other hand, you're the only person using it, and it's a transitional technique to help you consolidate a collection of code that you're currently reusing without any way of maintaining it. So you might have something like this: class Schwejk extends Object { String mail_regex = ""; /* regex for validating an email address */ public static Boolean is_mail{} /* returns true for valid email addresses */ /* I really should replace this with a PEAR module: never build your own encyption! */ public static String encrypt{} /* implements my custom passwd hashing */ public static String decrypt{} }
It's the same, for all intends and porpoises.
Don't go for weird tricks that depend on intimate knowledge of any languages particular quirks. Write something that's easy to read, well commented and lends itself to testing (include the tests). Edit: And I dont mean hiding knowledge of the language, just dont turn it into an obfuscated programming contest.
What kind of company is it? It'd be nice to show them something relevant.
What the... I'm pretty sure I haven't seen any pornographic polls created yet :p
Thanks; about websense though, do those blacklists change per company or is there some central database that we're categorized as pornography in? If the latter is the case I may have to contact someone to re-evaluate the site, I think...
This is why it's good to code for fun outside of work. I've put together my own lightweight MVC/templating/object relational mapper/helper package in PHP to learn some new tricks and to speed up quick projects. I would show that.
maybe he would have preferred return (array) $arrReturn; ?
Addition to the OP's question: How large should something like this be?
that's a good point
&lt;?php for ($x = 1; $x &lt; 101; $x++) { echo "{$x} bottles of beer on the wall\n"; } echo "Once I'm hired I'll turn on the wall -&gt; hand/mouth/stomach interface.\n"; echo "Interview complete.\n" ?&gt;
Thanks for this, I've tried days to get this thing to work with php, but I'm losing hope. I think I need to use rewrite for this. The problem is, I have no idea how to classify the last random part only, nothing else, and rewrite that as /upload?id=$1. If anyone could point me to some reference how to do the regex part, then I believe I can manage to work it out myself.
At the same time, make sure you make use of the language's idioms and best practices. You wouldn't write Java exactly like you would PHP.
Isn't it supposed to go from 100 to zero not the other way around. Still, awesome though. 
for ($x = 100; $x &gt;= 0; $x--) { 
I'm also not a fan of using flags to determine the end of loops, so I rewrote oorza's example to make it even smaller and remove the flags: /** * Takes an array of properties (and values for those properties) and only returns the * pilots who have the passed properties with the specified values. **/ private function filterPilots($filter) { $result = array(); foreach($this-&gt;pilots as $pilot) { foreach($filter as $property =&gt; $value) { $methodName = 'get' . ucfirst($property); if (method_exists($pilot, $methodName)) { if ($pilot-&gt;$methodName() != $value) continue 2; } elseif (property_exists($pilot, $property) { if($pilot-&gt;$property != $value) continue 2; } else continue 2; } $result[] = $pilot; } return $result; } 
\&gt; - 1 for a slight performance boost
Just have fun playing around with GD. Make it clean and nice. Although I guess it really depends on what the job is, a financial firm probably doesn't care about fun visual stuff.
Actually incorrect, sorry. 5 iterations of 1,00,000 to 0: Average 0.19384288787842 seconds for &gt; -1 Average 0.18906879425049 seconds for &gt;= 0 
I think you break out of the loops once too many times. No matter what you do you continue. Should be: } else $result[] = $pilot;
I hope you don't write code like that in real life =/
Turn off gzip compression in your options file on both the MyBB config and apache config (httpd.conf) Start from there. Source: Had a similar problem on bad versions of php/apache servers or random misconfigurations. Saw very similar output and disabling gzip output compression was the solution (temporary) until I fixed whatever was wrong.
The first continue is hit if the get-method exists but the value doesn't match. The second continue if hit if the property exists and the value doesn't match. The third continue is hit if neither the get-method nor the property exists. If none of those condition are met (i.e. the pilot matches the filter) then it falls through and is added to the result array. 
Oh I see, the first continue is inside the nested if. This is why I like using brackets, or at least newlines and tabs. :D
http://www.reddit.com/user/elli_lisetta account exists solely to spam.
I don't bother with brackets if the entire if-statement can fit on one short line. 
I'd suggest using that first as a joke and then show the actual awesome code :)
Flags are much better than "goto" solutions, IMO. "continue 2" is just syntactical sugar for goto and it's not always easy to find where it's going.
It's not exactly awesome, but this might what they're looking for: for ($i = 1; $i &lt;= 100; $i++) { if ($i % 15 == 0) print "FizzBuzz"; elseif ($i % 3 == 0) print "Fizz"; elseif ($i % 5 == 0) print "Buzz"; else print $i; print "\n"; } http://www.geekschool.org/programming/fizzbuzz/
Your example doesn't need brackets at all, then. Either use brackets all the time or only when they're explicitly necessary - it's too hard to figure out what other rules you use when someone else is reading/editing your code.
Have you tried opening a file from the backup to check the contents look alright? If you want me to take a look send me a message.
SO what worked? I see your site is up? A bit broken still though.
Flags add so much more complexity to the whole thing. This is weird example though, I rarely (if ever) use flags for this purpose but I also rarely (if ever) use "continue 2". I imagine if I was coding this from scratch, it would be structured differently. 
If you understand the syntax of language, there's nothing difficult to understand. It's not even being explicitly difficult to follow as code with misplaced indentation, etc, can be. 
It's not about being able to understand the code, it's about being able to read what's been written and come to a determination where to use brackets or not. I suppose it's possible to not care at all about consistency in code style within a project, but I certainly can't not care! I find a policy of "brackets always" is the easiest to remember and use regularly - I don't think leaving them out adds anything and it makes for more complicated style rules to remember. Super compact code like you have above is much harder to read, too, IMO. Compare: if (method_exists($pilot, $methodName)) { if ($pilot-&gt;$methodName() != $value) continue 2; } elseif (property_exists($pilot, $property) { if($pilot-&gt;$property != $value) continue 2; } else continue 2; with: if (method_exists($pilot, $methodName)) { if ($pilot-&gt;$methodName() != $value) { continue 2; } } elseif (property_exists($pilot, $property) { if($pilot-&gt;$property != $value) { continue 2; } } else { continue 2; } Which one is easier to scan and determine what's happening?
If you were going to do it from scratch, how would you do it then?
I haven't run the benchmark but why would you expect this to improve performance? Is it because you think it is really doing ($x &gt; 0 || $x == 0)? &gt;, &gt;=, ==, etc all have their own instruction in the CPU (at least all the ones I'm aware of) so there should be no performance hit.
 1 bottles of beer on the wall 2 bottles of beer on the wall 3 bottles of beer on the wall 4 bottles of beer on the wall 5 bottles of beer on the wall 6 bottles of beer on the wall 7 bottles of beer on the wall 8 bottles of beer on the wall 9 bottles of beer on the wall 10 bottles of beer on the wall 11 bottles of beer on the wall 12 bottles of beer on the wall 13 bottles of beer on the wall 14 bottles of beer on the wall 15 bottles of beer on the wall 16 bottles of beer on the wall 17 bottles of beer on the wall 18 bottles of beer on the wall 19 bottles of beer on the wall 20 bottles of beer on the wall 21 bottles of beer on the wall 22 bottles of beer on the wall 23 bottles of beer on the wall 24 bottles of beer on the wall 25 bottles of beer on the wall 26 bottles of beer on the wall 27 bottles of beer on the wall 28 bottles of beer on the wall 29 bottles of beer on the wall 30 bottles of beer on the wall 31 bottles of beer on the wall 32 bottles of beer on the wall 33 bottles of beer on the wall 34 bottles of beer on the wall 35 bottles of beer on the wall 36 bottles of beer on the wall 37 bottles of beer on the wall 38 bottles of beer on the wall 39 bottles of beer on the wall 40 bottles of beer on the wall 41 bottles of beer on the wall 42 bottles of beer on the wall 43 bottles of beer on the wall 44 bottles of beer on the wall 45 bottles of beer on the wall 46 bottles of beer on the wall 47 bottles of beer on the wall 48 bottles of beer on the wall 49 bottles of beer on the wall 50 bottles of beer on the wall 51 bottles of beer on the wall 52 bottles of beer on the wall 53 bottles of beer on the wall 54 bottles of beer on the wall 55 bottles of beer on the wall 56 bottles of beer on the wall 57 bottles of beer on the wall 58 bottles of beer on the wall 59 bottles of beer on the wall 60 bottles of beer on the wall 61 bottles of beer on the wall 62 bottles of beer on the wall 63 bottles of beer on the wall 64 bottles of beer on the wall 65 bottles of beer on the wall 66 bottles of beer on the wall 67 bottles of beer on the wall 68 bottles of beer on the wall 69 bottles of beer on the wall 70 bottles of beer on the wall 71 bottles of beer on the wall 72 bottles of beer on the wall 73 bottles of beer on the wall 74 bottles of beer on the wall 75 bottles of beer on the wall 76 bottles of beer on the wall 77 bottles of beer on the wall 78 bottles of beer on the wall 79 bottles of beer on the wall 80 bottles of beer on the wall 81 bottles of beer on the wall 82 bottles of beer on the wall 83 bottles of beer on the wall 84 bottles of beer on the wall 85 bottles of beer on the wall 86 bottles of beer on the wall 87 bottles of beer on the wall 88 bottles of beer on the wall 89 bottles of beer on the wall 90 bottles of beer on the wall 91 bottles of beer on the wall 92 bottles of beer on the wall 93 bottles of beer on the wall 94 bottles of beer on the wall 95 bottles of beer on the wall 96 bottles of beer on the wall 97 bottles of beer on the wall 98 bottles of beer on the wall 99 bottles of beer on the wall 100 bottles of beer on the wall Once I'm hired I'll turn on the wall -&gt; hand/mouth/stomach interface. Interview complete. 
&gt; a module is a separate file (analagous to a library) which holds the definitions for one or more classes Just one thing: it's one class per file. Putting one class in each file makes for nice simple (autoloading)[http://php.net/manual/en/language.oop5.autoload.php] &gt; You have one file that collects all your handy functions in one place as methods of your "Util" class Autoloading is another good argument in favour of having a Util class. If you use functions then you have to make sure they're included as needed. If you put them in a Utility class then the autoloader can load it only if it's needed.
&gt; I suppose it's possible to not care at all about consistency in code style within a project I care very much about consistency and making sure that code is easy to read and understand. Indenting as well as breaking up code with line breaks and comments is all very important. &gt; I find a policy of "brackets always" is the easiest to remember and use regularly - I don't think leaving them out adds anything I find it to be visually messy and takes away from the total meaning of the code if the brackets are only wrapping a small block of code. For example, I might have big block of preconditions testing the parameters at the start of a function that looks something like this: if (!precondition1($param1)) return false; if (!precondition2($param2)) return false; if (!precondition3($param3)) return false; if (!precondition4($param4)) return false; Expanded out with brackets, that would go from 4 lines of code to 12 lines of code.. that's 300% larger and consisting of nothing but line noise! It further distracts from the main body of the function. &gt; Which one is easier to scan and determine what's happening? Actually, I found the longer version much harder to scan and determine what is happening. Now that might be just because I'm used to it but I find the extra level of indentation for just a single statement makes me feel the whole thing is more complicated than it actually is. 
I'd probably add another method called `testPilot()` that returns true or false if the pilot is valid and then use that in the main loop body to determine who to put in the result array. Perhaps `test()` would even be a method on the pilot class instead of whatever class this is. Although, further to that, the starting conditions of this problem aren't like anything I would normally come up with on my own. 
The biggest problem I have with lines like this: if (!precondition2($param2)) return false; is that it breaks the tenet of "one statement per line" which is absolutely a code readability axiom. I might be okay with something like this: if (!precondition2($param2)) return false; but I would never be okay with two statements on the same line. It's objectively less readable because you have to start doing a deeper inspection of what a line contains to determine if and where there are multiple statements on a line, it hurts debugging, etc. etc. In a case like your example, it's not that big of a deal, but imagine something like this: if(foo() == 1) bar(); if(foo() == 2) baz(); if(foo() == 3) boom(); if(foo() == 4) bloop(); Much more difficult to debug if something goes wrong, two statements on each line (including function invocations!)... it's terrible. As far as leaving off brackets, it's an issue that's been discussed for decades and the consensus seems to be that it's dangerous to leave them off, because it creates a mistake vector that would otherwise not exist - which, of course, is why modern languages like Go require them in all cases. I also don't accept your claim of "line noise" being a good reason to have compact code like that - you don't have a single line of whitespace, even when it would be useful and increase readability to have some (e.g. before the primary if inside the nested foreach)!
&gt; is that it breaks the tenet of "one statement per line" which is absolutely a code readability axiom. Actually, it **is** all one statement. How many semicolons are reading on those lines? An `if` by itself is just half a statement. It compares well with English: "if this then do this". Simple. &gt;I might be okay with something like this: &gt; &gt; if (!precondition2($param2)) &gt; return false; That's a definite no-no. Then you get people adding new lines to that without adding the necessary brackets. &gt; It's objectively less readable because you have to start doing a deeper inspection of what a line contains to determine if and where there are multiple statements on a line You see an if and you see what it does all in one statement. How exactly does splitting into multiple lines make it more readable? If look at each line individually, you still have to know that the statement on line 102 is contained within the statement on line 101. Put them all on one line and you have less to think about. Your terrible debugging example is terrible even with multiple lines and brackets so that's not helpful. 
&gt; Actually, it is all one statement. How many semicolons are reading on those lines? An if by itself is just half a statement. It compares well with English: "if this then do this". Simple. In PHP, your lines are most certainly two statements: if( STATEMENT ) STATEMENT If isn't "half a statement," it's an operator that *takes a statement as an argument* and coerces the return value of that expression into a boolean value. Any valid PHP statement is valid to be evaluated inside an if - so it's most definitely two statements on a single line. A semicolon does not a statement make! In your English both instances of "this" are perfectly valid PHP statements. The fact that it's rather simple statements (equality checks, function invocation) that tend to get put inside an if() doesn't change the fact that they're perfectly valid statements. Take this example: if(($e = fread(...)) != -1) { //do something } Are you prepared to say "$e = fread(...)" isn't a statement just because it's inside an if? Of course not. You don't put two statements on the same line - you don't put if's condition and body on the same line!
A single-linked list might be interesting, as it shows you have an understanding of OOP. Double-linked list would also be interesting.
&gt; In PHP, your lines are most certainly two statements: &gt; if( STATEMENT ) STATEMENT Wrong, it's `if ( EXPRESSION ) STATEMENT`; The semicolon is the statement terminator and only appears after statements. This is all by definition. You can't say `if (echo '5') {}` so yes statements and expressions are different although, like most C-based languages, in PHP most statements are also expressions. &gt; The fact that it's rather simple statements (equality checks, function invocation) that tend to get put inside an if() doesn't change the fact that they're perfectly valid statements. What I don't understand is that you have no problem with any level of complex expressions being inside the parenthesis of an `if` but as soon as put a tiny statement on the same line after the parenthesis somehow a line of understanding is crossed. 
couldn't you skip the first if statement? since you're adding a new line at the end of the if/else block, just drop the else statements and use solely if to check for %3, then %5. 15 would print Fizz first then Buzz right after followed by the newline.
 for ($x = 100; $x &gt;= 0; $x--) { $bottle_str = ($x==1) ? "bottle" : "bottles"; echo "{$x} {$bottle_str} of beer on the wall\n"; }
 &lt;?php $i = 99; for (;$i &gt; 0;) { $x = $i; $i = --$i &gt; 0 ? $i : 'No more'; printf('%1$s bottles of beer on the wall, %1$s bottles of beer. Take one down and pass it around, %2$s bottles of beer on the wall.&lt;br /&gt;', $x, $i); } I like the bit with the one bottles of beer.
Hungarian notation.
Nope, we should all be students at heart. :)
Write a slow-ass 3D rendering engine. That's what I did, got me the job.
 for ($i = 0; $i &lt;= 100; $i++) { if ($i % 3 == 0) echo 'Fizz'; if ($i % 5 == 0) echo 'Buzz'; if ($i % 3 &amp;&amp; $i % 5) echo $i; echo PHP_EOL; } Braces skipped for brevity...
I've always wondered why people never write it that way and just explain: "Yea, if the the requirement for both matches was a different word output then it would need changed... but this is a clean and arguably more readable implementation of the current task".
A polynomial time clique solution. That'd show 'em!
 for ($x = 100; $x &gt; 1; $x--) { echo "{$x} bottles of beer on the wall\n"; } echo "1 bottle of beer on the wall\n0 bottles of beer on the wall"; O(ptimised)TFY
Wait, that's possible in PHP!? Brb, googling
Yeah, it's just math and shapes drawn with the GD library. It takes my engine about 100-200ms to render an object. Very slow, but it works.
A CMS is always relevant, and converting an image to a wav/spectrogram landed me my most recent job. (think aphex twin)
Interesting, might need to give this a go. AFter I learn to use the GD library of course. :\
Server Error 500 - Internal server error. There is a problem with the resource you are looking for, and it cannot be displayed.
doesnt like arrays http://digillusions.com/[] 404 instead of usual error 
Thanks for the help, will definitely fix that :) Also, the 500 error is probably caused by the database backup which takes 30 seconds max - we still need to add a nice "check back shortly" page..
Thanks for your help. I'm half-way through a seriously intensive reading list and it's beginning to make sense. I *think* I've been trying to do something approaching OOP already with proceedural code. I use different includes and groups of nested functions to try and automate common actions like updating the database. It only works with my custom code of course, but is this the idea behind OOP - separating out the function from the content, as it were? In that case, what's wrong with a large Util class?
write an algorithm that queries a database and returns items in order of closest to furthest from your location
that's what she said
You could be a smart ass and point them to jQuery or the Android SDK. You didn't say it had to be _your_ awesome code.
Clearly you've never seen how I write Java.
Printed out if its more than a page then its probably over complicated and unnecessary. I manage a development team and when I analyze code to hire people I read between the lines. Its not so much what the code does that interests me but how it is put together. Do they document? do they prevent duplicity? Do they really understand OO Programming methodologies. 
I'd imagine it's to demonstrate that %15 and %3 are explicitly different conditions. Might make the code easier to read and maintain.
In python: def filter_pilots(query): return lambda data: filter(lambda row: all([getattr(row,k, None) == v for k,v in query.iteritems()]),data) So much easier in a language actually designed for functional programming. To break it down: 1. filter_pilots() is a function that 2. returns a lambda (function) that takes a single argument called data 3. The data array is iterated over (once!), and a new array is built contain objects that match the predicate... 4. all - true if and only if all items in the argument sequence are true when evaluated in a boolean context 5. The arguments are built using a list comprehension over the query array 6. For each item in the input query, a check is made using getattr against the object being tested, with a default value of none. The equivalent in php would be something like if (($obj-&gt;$key || NULL) == $value) To use it you'd do something like: age_18 = filter_pilots({'age':18}) age_18_pilots = age_18(pilots) The query parameter is bundled into the function itself - a real closure - no need to bundle it up into an object. 
Bother. I have a bunch of code that uses that. Will it ever be depreciated or is it just static?
Write a piece of php code that will output javascript code, that once run on a browser will display the original php code on the web. 
Can you make the colors a bit less similar? I'm not sure which of the 3 green-bluey hues I am.
They did :P
I think I might go with this, it's cool in a silly way and eay/fast to make
The code is so commonly used that removing this extension from PHP is a challenge. The first step is education, with the next providing a [most likely userland] wrapper, then eventually moving it to PECL. So in the case of ext/mysql, it'll probably exist for a long time.
&gt;if ($i % 3 &amp;&amp; $i % 5) echo $i; if ($i % 3 !== 0 || $i % 5 !== 0) echo $i; EDIT: I'm an idiot, that should be &amp;&amp;
are you wondeirng why I didn't code it the first time? I was being super lazy and thought I could explain it in a few words. Then spent more time trying to explain it in english than I would've if I had just coded it. Lesson hopefully learned.
Or how I write PHP.
Completely unnecessary identity check. It's a mathematical expression that can only return integers, so ===/!== has no purpose. You could use ==/!= if you really wanted to be specific however it's not needed, because any non-(zero/null/empty-string/empty-array) value is true.
I did it for you, notice the "use" statement after the function() &lt;?php $Test = array(); $Test['col0'][] = 0; $Test['col0'][] = 1; $Test['col0'][] = 2; $Test['col0'][] = 'n'; $Test['func'] = function() use ($Test) { return $Test['col0'][3]; }; var_dump( $Test['func']() );
Thanks! That's good to hear, both that I need to start using mysqli and that my existing code will work for a long while. Thanks.
I dont think its ever rude to correct someone, its more of a "You'll sound smarter later" thing. IDGAF if the person isn't receptive.
GD is just like any other set of functions in php, painfully easy.
Hey all, I updated this to use a regular site url instead of a url to a .css file. So it'll grab any css files that are linked with &lt;link&gt;. Next up i'll try and get @imports as well
y r u typng like dis?
Having a catch-all class such as a "Util" is considered a sign of sloppy thinking (or just poor organization) - in the examples I gave, each of those methods should be part of a data access object, an encryption or authentication object, a message delivery or string parsing object, etc. I didn't have this reference handy when I first saw your post, but now that I do, I'd recommend [Applying UML and Patterns by Craig Larman](http://www.craiglarman.com/wiki/index.php?title=Books_by_Craig_Larman#Applying_UML_and_Patterns). It's highly readable.
$return is clearly what the method is going to return. If you can't figure that out in a method that is just 8 lines long, then I dunno man... something is wrong.
CamelCase, under_scores whatever, we can all read code. This pedantry on coding style is like comparing two accents of the same spoken language. If you can speak english, then you should be fine in Louisiana, Canada, the UK, and NYC. As long as you are consistent, the rest doesn't really matter. Code readability becomes an issue when you don't organize your code properly, not when you chose underscores over camel case or vice versa.
I made this a while ago but never garnered any users. Feedback would be great, but I think for it to be actually used a move to SQL is needed.
Some commentary on the changes: I'm pleased to see a few legacy things get wiped in this version. The break/continue $var functionality wasn't often used, but it introduced code path ambiguity when it was. Safe mode's getting the boot, which is spectacular, because it introduced a false sense of security, and just caused problems. register_globals, import_request_variables() and session_register being removed is great. They caused a lot of security issues. The old sqlite extension is being moved to PECL, because it was purely SQLite v2, whereas SQLite v3 is available through the sqlite3 extension. "Changed default value of "default_charset" php.ini option from ISO-8859-1 to UTF-8." This concerns me a bit, because it may break some code, and people might not understand why. Not sure in what cases that will happen. The change to preg_match_all() is very welcome, as it was inefficient to store the matches when you just wanted a match count. I am very, very pleased to see that the inclusion of shorthand echo has gone through. For those unaware, this is where you use something like &lt;?=$variable;?&gt; to echo a variable into a page. Otherwise, you had to use &lt;?php echo $variable;?&gt; , which was cumbersome. I'm surprised that the inclusion of Traits support hasn't had greater fanfare. It is an OOP concept where you create a collection of methods, and can apply that collection to any class, without inheritance. It's like an interface or an abstract inheritance, but better. "Added support for storing upload progress feedback in session data." I'm really curious to see how this works. It sounds wonderful.
Just to clarify, short echo tags means this: `&lt;?=$foo?&gt;` is now always on by default, but this: `&lt;? echo $foo ?&gt;` is not - they've been separated from each other, and one does not affect the other.
Indeed. For those interested, the reason why short open tags in general are not always enabled is due to compatibility with XML. XML also uses the &lt;? ?&gt; tags for its header (&lt;?xml version="1.0"?&gt;), so if you were, for whatever reason, handling XML documents with the PHP engine, you would get errors due to that header.
Fair enough. I seriously swear read your code with an equality check in it. We make a good case for pair programming.
I love CakePHP and all its facilities: ACL, Ajax, templates and overall the big CakePHP community. But I think all MVC frameworks are good.
Really looking forward to playing around with traits. I've yet to use them on any other language, but at a first glance it seems like they may provide some interesting functionality. The inclusion of the shorthand echo is also a big plus in my book - I've been using it in all my personal projects.
[Here](https://wiki.php.net/rfc/horizontalreuse) is some information on how Traits will be used.
Personally I do not think that that is a valid argument. If you want to print out XML tags in a PHP file, simply do `&lt;?php echo '&lt;?xml version="1.0"?&gt;' ?&gt;`.
The issue isn't really related to outputting XML. That's a different matter entirely. The issue occurs when you add a line to your Apache configuration which invokes the PHP engine to handle XML files. Ordinarily, PHP is only invoked by Apache for application/x-httpd-php, but you can enable any mimetype to be processed. If you have short_open_tags enabled, and you process XML files, you will get numerous errors, or you will have to make special considerations in every single XML file you serve.
No, I was agreeing with your original question and cryptographite's code. I think doing it that way is cleaner and encourages discussing the thought process and alternative implementations in the interview. For instance, you can bring up that a similar odd/even check can be done a third way by checking a single bit rather than doing a modulus: for ($i = 0; $i &lt;= 100; $i++) { // If the last bit is set it's odd | otherwise it's even; echo ($i &amp; 1 == 1) ? 'Odd' : 'Even'; echo PHP_EOL; } Which then encourages further conversation on "premature optimization", ternary operator, bitwise code... etc.
Bottom line is: PHP has has no right to claim &lt;? as its own, because it clashes with named PI tags like &lt;?xml and &lt;?foo. 
I made an error in registration (password too short) and it lost all my form data. Then when I registered, this error appeared on the top: &gt; Warning: mkdir() [function.mkdir]: File exists in /home/sysode/public_html/common.inc.php on line 44 Once I added a project, I tried to add someone else to the project (admin); it just refreshed with no feedback on what happened.
You need to call session_start() on any page that uses sessions. I don't see it in the first section of code. 
Sorry I did not originally include all of the source code for the first block. I didn't want to make this post too big, but I'll include it all. 
Hmm I'll look into it, thanks.
Np. Keep on keeping on.
"break/continue $var syntax" Is that like foreach($set as $item) { // stuff switch($item) { case 1: continue 2; // break out of the entire loop case 2: break; } // stuff skipped in case of 1 } I actually use that. What's a better way to do it?
Using int literals is the intended use of break/continue. The problem is with using variables, instead of literals. By doing so, you introduce a potential for an arbitrary number of break levels or continue iterations. An example of this would be: foreach($set as $item) { if($item["continues"] == true) continue $item["count"]; ... } Of course, that's a very lame example, but there are very few legitimate reasons to use computed breaks or continues. I admit to having used it in the past, but that was in a very, very specific scenario where I was parsing the contents of a binary file format, and had very specific information about how many items in the collection I could skip over. Even then, it was purely an optimization, rather than it being required functionality.
Ah, ok. I don't think I've use variables, just 1/2/3, etc levels of "breaking out" needed. Glad it's not going away entirely, that would have seemed sort of a step backwards. I'm not entirely clear why a variable there is bad either though. Outside of introducing parse errors (like break $a where $a == 'joe', or -1 or 3.4, etc). Is an optimization thing where break/continuing using vars has some kind of seriously adverse affect or unpredictable behavior? 
&gt; . Added array dereferencing support. (Felipe) Finaly! That's one of the coolest things I was waiting for.
[From the manual:](http://au2.php.net/continue) &lt;?php for ($i = 0; $i &lt; 5; ++$i) { if ($i == 2) continue print "$i\n"; } ?&gt; People really have done this, and it turned out to be something that was easier to misuse than it was actually useful.
When I talked earlier about introducing ambiguity into the code paths, what I'm speaking of is a matter that only really exists on the bytecode compiler level. That is, when your PHP code is broken down into the code that the PHP engine understands. When PHP "compiles" your code before runtime, it does an optimization called code path generation. What it's doing is basically figuring out what your code is going to do, and what it *could* do, and then generates the instructions for each possible "path". By introducing a variable into that part of your code, the engine is unable to compute any reliable set of paths that your code could take, and therefore has to leave that section of code alone, opting for "just in time" behaviour. "Just-in-time" behaviour is *much* slower than predetermined code paths, so you lose out on a whackload of potential optimization by introducing ambiguity into your code. This is also why things like create_function are really, really slow. The engine has to figure out what it's doing as it goes along, instead of figuring it all out beforehand.
what does print_r($_SESSION) show in the &lt;body&gt; section? If it is empty, then either: 1) The server started a new session, in which case you can verify by looking at the cookie. 2) You havn't started the session with session_start() in that section of code.
 Changed $_SERVER['REQUEST_TIME'] to include microsecond precision. (Ilia) Damnit, that's going to break a few things, personally i'd have preferred $_SERVER['REQUEST_MICROTIME']
Take a look at netbeans and the xdebug, this will help you solve these problems yourself :)
PHP came before XML (1995 vs 1996)
&gt; "Changed default value of "default_charset" php.ini option from ISO-8859-1 to UTF-8." &gt; This concerns me a bit, because it may break some code, and people might not understand why. Not sure in what cases that will happen. What could it break? Won't it just garble output?
Actually, it was [yesterday](https://twitter.com/#!/eugeniyoz/status/85651024714547200) :) &gt; . Added support for Traits. (Stefan) It's a new step of OOP-evolution in PHP.
I worded that too strongly, but don't see a need to assume control over &lt;?. Just use &lt;?php or &lt;?=, because the former has been suggested for many years now, and this topic isn't fun to debate.
Agreed, but at least it's a float.
You should more than probably, release this as open source. and ask for donations then. since no one can actually be sure about the security of the source before it gets peer review'd. Ideas are in a bunch, execution is crucial. dont be afraid of opensourcing, use github and make it social.
It's just syntax sugar :) Traits - it's a new powerful thing!
I don't think PHP has any concept of a "unicode string" like Python (where exceptions are thrown when a character outside of the charset is used) so we shouldn't have errors, just garbled output.
Not only syntax suagar - if implemented right can save memory. No more $arr = whatver(); echo $arr[0]; Now it's just _whatever()[0]_ no need for new var. But yes, traits look fun.
2 quick things, don't call session_regenerate_id() and $member['$login'] is wrong, it'll set $_SESSION['SESS_LOGID'] to null or "". Also, save yourself the hastle of cleaning query params: &lt;?php function addFlash($message, $type="WARN") { if ($type === "") { triggger_error("addFlash MESSAGE and TYPE required"); return false; } if ( ! isset($_SESSION) || ! is_array($_SESSION) || ! array_key_exists("flash", $_SESSION) || ! is_array($_SESSION{"flash"})) { $_SESSION{"flash"} = array(); } if (! array_key_exists($type, $_SESSION{"flash"}) || ! is_array($_SESSION{"flash"}{$type})) { $_SESSION{"flash"}{$type} = array(); } $_SESSION{"flash"}{$type}[] = $message; } function checkFlashState($type="ERROR") { // return true for errors/false for no errors if ( isset($_SESSION) &amp;&amp; is_array($_SESSION) &amp;&amp; array_key_exists("flash", $_SESSION) &amp;&amp; is_array($_SESSION{"flash"}) &amp;&amp; array_key_exists($type, $_SESSION{"flash"}) &amp;&amp; is_array($_SESSION{"flash"}{$type}) &amp;&amp; count($_SESSION{"flash"}{$type}) &gt;= 1) { return true; } else { return false; } } try { $link = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_DATABASE, DB_USER, DB_PASSWORD); } catch (PDOException $e) { $error = "ERROR: " . $e-&gt;getMessage(); trigger_error($error); print "$error\n"; exit; } if ( ! ( isset($_POST) &amp;&amp; is_array(_$POST) ) ) { addFlash('Invalid Login', "ERROR"); } if ( ! ( array_key_exists("login", $_POST) &amp;&amp; $_POST{"login"} != "" ) ) { addFlash('Login Required', "ERROR"); } if ( ! ( array_key_exists("password", $_POST) &amp;&amp; $_POST{"password"} != "" ) ) { addFlash('Password Required', "ERROR"); } if (checkFlashState("ERROR")) { header("Location: login-form.php"); flush(); exit; } try { $sth = $link-&gt;prepare("select * from members where login = ? and password = ?"); $return = $sth-&gt;execute(array($_POST{"login"}, md5($_POST{"password"}))); $result = $sth-&gt;fetch(PDO::FETCH_ASSOC); } catch (PDOException $e) { trigger_error("Invalid Login"); addFlash("Invalid Login", "ERROR"); header("Location: login-failed.php"); flush(); exit; } if (isset($result) &amp;&amp; is_array($result) &amp;&amp; array_key_exists("login", $result)) { // why use session_regenerate_id()? $_SESSION{"SESS_MEMBER_ID"} = $result{"member_id"}; $_SESSION{"SESS_FIRST_NAME"} = $result{"firstname"}; $_SESSION{"SESS_LAST_NAME"} = $result{"lastname"}; // this was broken, you had ['$login'] $_SESSION{"SESS_LOGID"} = $result{"login"} addFlash("Login Successful", "NOTICE"); header("Location: index-login.php"); flush(); exit; } else { addFlash("Invalid Login", "ERROR"); header("Location: login-failed.php"); flush(); exit; } 
What if instead of an array of string values for your filter criteria, your defined your filter as an anonymous function itself? $array = From($this-&gt;_pilots) -&gt;where(function($p){ return $p-&gt;getShip() == 'Guardian' &amp;&amp; $p-&gt;getLogilevel() == '4'; };) -&gt;toArray(); 
Or maybe he was talking about his curiosity level throughout the day and it hit a "peak" when he came across this problem? 
Just make sure that you do not trust anything the user agent sends you eg. I might use my firefox console to change 'entity':'newtable' to entity:'users' and {name:fieldname,value:fieldvalue} to {name:'isadmin', value:true}. 
if using 5.3 goutte is quite nice alternative to raw curl https://github.com/fabpot/Goutte
Nice Mitch Hedberg reference on the FAQ page :)
You can read about the upload progress in the session data here: https://wiki.php.net/rfc/session_upload_progress
This may help - http://stackoverflow.com/questions/4105928/protecting-a-zip-through-php-sql
Yup, the send-file is probably you best bet.
How often does that happen? seriously?
What about this! $arr = 'whatever'; echo $arr()[0]; This "feature" is really an antipattern. Professionals will be cleaning this clutter up in a few years; watch.
I doubt - array deref. is standard in JS for long years and I love it there.
Where are all the other posters getting "low pay" from? I went to work for this type of start up and not only got a slightly above average salary, but a small slice of equity. 
Cumbersome if you have many processing instructions in your XML file. They should just use &lt;% %&gt; which is almost a universal standard now outside of PHP.
write a script that is an interface to working with a database (can be mysql specific to start). Using your database interface create a class that handles news items. Define it however you want, but a basic template is Date/Time, Title, Summary, Body. Test it by inserting and deleting several rows. Using your news class write a view (a script that only handles displaying things) to output some html. Finally write an admin tool so that you can insert/edit/delete news items (now you don't have to manually enter them in the database, using mysql cmd line, or phpmyadmin) As an experienced php programmer I did all of these tasks in an hour or two. Normally using a framework would be much faster of course, but this is a good exercise in understanding MVC, OOP, and writing separate pieces of a project that eventually have to work together.
Good ider, I started with a REALLY simple page: http://pastie.org/2140529 this is my install/index/config.php; any tips?
I don't believe /r/PHP is for demo'g your app. Ideally, you would bring either your architecture and/or code for us to critique, but just because a site is made with PHP doesn't mean that you should be posting it to /r/PHP.
Can you install mod_xsendfile? Much more efficient than trying to read the file in PHP, and you get the same security control.
[readfile()](http://us.php.net/manual/en/function.readfile.php) EDIT: At least own up and comment if you're going to downvote, this was a serious attempt to help. I was originally going to suggest [fpassthru](http://us.php.net/manual/en/function.fpassthru.php), but as the manual page says for that: &gt; If you just want to dump the contents of a file to the output buffer, without first modifying it or seeking to a particular offset, you may want to use the readfile(), which saves you the fopen() call. No, I didn't do much reading or research on the issue, but I was trying to be helpful by pointing out a function that perhaps hadn't been explored.
Often enough that there was a collective decision to disable short open tags by default. We're all accustomed to serving HTML primarily, so we don't always recognize the other uses of PHP. For instance, if you're using PHP to operate a SOAP service, you might be serving XML *primarily*. So, you might use .xml for all of your file extensions, as many use .html instead of .php.
Actually, PHP is soon going to have native unicode support. It's primarily aimed at "PHP 6", but right now there is no roadmap for development, so giving any version number would be futile.
Yep, I know it will have it eventually but that will be far in never and probably ballsed up too :)
FYI readfile reads *the entire file* into memory, which means files must be less than &lt;4GB (and should honestly be *much* less than that).
Ok, for some reason I thought it was basically a subcall to the OS that wouldn't incur any PHP overhead. Thanks for replying, at least.
I know it's not really a solution for your problem, but an upcoming version of PHP will include support for 64-bit integers on even 32-bit systems, so that may solve the problem in the future. I'm going to ask some people about this issue, though, as it seems to be a bug, rather than a limitation. Edit: [Here](https://bugs.php.net/bug.php?id=27792) is the relevant bug for this issue. Apparently, it's being worked on (LFS support), and may come in a not-too-distant version. Edit2: [This debian bug](http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=359686) seems to indicate that this problem can be remedied by compiling PHP with "-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64", as well as Apache and its PHP module. I think PHP itself may already support 64-bit file pointers through LFS, but it's usually not compiled to have glibc include that support.
I've not used mod_xsendfile myself, but I'm curious as to why you can't do: &lt;?php $fp = fopen('mylargefile.zip'); while(!feof($fp)) echo fread($fp,1024); fclose($fp); ?&gt; ?
Even with fread it will crap out at 4 gigs, the pointer value exceeds 32bit unsigned int
hmm... split the file like a bittorrent, fread each split? oh, just so we're clear, I'm just mental masturbating
try session_regenerate_id(true); instead of session_regenerate_id();
Honestly, if someone submitted a quine as impressive code at a job interview, I'd write their name down in a list of resumes never to look at again. You're not supposed to be showing things that are easy, fast and silly. You're supposed to be impressing them. Show them the most technically challenging thing you've written, whatever it is. Don't toss something cute and breezy at them, or they'll know that's all you've got.
Apparently you missed the part where he wanted to get the job.
&gt; A single-linked list might be interesting, as it shows you have an understanding of OOP. Thanks for getting coffee on my keyboard. I haven't had an office belly laugh like that in weeks.
Jesus christ, dude. 1) Displaying fizzbuzz when you're trying to show off is basically admitting you're a rank amateur. The entire purpose of FizzBuzz is that it's the very simplest test the original author was able to think of. 2) Especially when you do that poor a job. 
&gt; I'd imagine it's to demonstrate that %15 and %3 are explicitly different conditions. And if this were correct, then it wouldn't make us giggle. However, when you're doing modulo 3 and modulo 5 already, 15 is *not* a different condition. &gt; Might make the code easier to read and maintain. No, introducing logical errors does not improve maintainability.
So basically, you didn't even run your solution? Does it embarrass you to give samples that incorrect?
&gt; We make a good case for pair programming. Given that the solution you're ceding to is wrong, it's not pair programming the two of you are making a case for; it's unit testing, manual verification and the lack of hubris. I mean seriously.
It prints the for all the variables: first name, last name, username, and password
Actually, what you're saying is that *you* didn't run it, because it runs fine. Perhaps you just don't understand the code. When using %, something that's equally divisible returns a 0. Thus the "== 0". Something that's not equally divisible returns the remainder, which is why "($i % 3 &amp;&amp; $i % 5)" means "not equally divisible by three or five".
"I mean seriously"... are you just an idiot, or what? You're making a case for actually running code before opening your mouth and inserting your foot.
&gt; Actually, what you're saying is that you didn't run it, because it runs fine. Perhaps you just don't understand the code. Listen, try to keep up. Your code does what you thought it should do, *not* what is correct. Just because you don't know you're wrong doesn't mean you should respond "no you're wrong." Try going and reading the problem description.
&gt; are you just an idiot, or what? No, pointing out that you're wrong then watching you not understand the mistake is not evidence that I am an idiot. Just because you built code that does what you expect doesn't mean you've solved the problem correctly. &gt; You're making a case for actually running code before opening your mouth and inserting your foot. Yes. Yes, I am. Explicitly. I know you think you're trying to lambast me for putting my foot in my mouth, but you've already made this mistake once and defended it twice. In general, it's not a good idea to respond to someone saying you got something wrong by calling them an idiot until *after* you've checked if you're actually wrong.
Yeah it does not display that, just the values the user put in when he/she registers, so it output: [firstname] =&gt; John, [lastname] =&gt; Smith, [username] =&gt; jSmith, [password] =&gt; hashed password. That would make sense that it sets it to NULL though, since it's not displaying anything. Would omitting this line cause any problems, though? Or should I be replacing it with something? Sorry, I'm not relatively new to php but I'm still learning.
&gt; which is why "($i % 3 &amp;&amp; $i % 5)" means "not equally divisible by three or five". Lol. (headpat) Maybe you should read up on the difference between remainder and modulus, and stop believing the PHP manual when it says which one it supports. Maybe you should actually check it.
 print the numbers from 1 to 100 Check (yes, I started at zero, but so do several of the final code examples on the page itself) for multiples of 3 print “Fizz” instead of the number Check for multiples of 5 print “Buzz” instead of the number Check for multiples of 3 and 5 print “FizzBuzz” instead of the number Check ... so, again, it fulfills every requirement, in the most concise manner. Again, you obviously haven't tried running the code, and you're just choosing to be an ass for no reason.
Don't worry, if you just screech hard enough without asking what the mistake is, the guy who said there's a mistake will go away, and you can feel correct. (It's not even clear to me whether you've given an honest look for it.) Hey look, it worked! The easiest way to sort out an amateur programmer from a professional is to tell them they made a mistake. If they're a professional, they'll ask where. If they're an amateur, first they'll tell you you're wrong, then they'll insult you, then when you say "so you didn't notice it?," they'll recite their expectations, declare them the complete nature of the task, and continue insulting you. Have fun with that, champ.
Given the fact that I've been developing PHP both commercially and for OSS on a daily basis for more than ten years and I'm a ZCE, I already know quite well what I'm talking about. I'm sorry that you continue to be confused by such a simple programming task. All you've done is shout "you're wrong" without presenting any proof of failure or corrected solution.
&gt; Given the fact that I've been developing PHP both commercially and for OSS on a daily basis for more than ten years and I'm a ZCE Honestly all this gets you up to is a luke-warm amateur. &gt; I already know quite well what I'm talking about. And yet you still don't see the error, even with a clear-as-day signpost to its nature, and you still follow the behaviors one expects of an amateur, namely to ignore when someone else says you're wrong and just insist, based on for how long you've been working, that you couldn't possibly be wrong. There's a difference between being employed and being a professional. You exemplify that difference. &gt; All you've done is shout "you're wrong" This is, of course, simply false. &gt; without presenting any proof of failure Failing to understand the criticism does not mean the criticism doesn't exist; it only means that after more than ten years of being employed you still don't get basic range math correct, and are too busy being angry to even admit the possibility that you're wrong long enough to ask. Enjoy being angry. I'm done giving you chances to ask.
&gt; Given the fact that I've been developing PHP both commercially and for OSS on a daily basis for more than ten years and I'm a ZCE Honestly all this gets you up to is a luke-warm amateur. &gt; I already know quite well what I'm talking about. And yet you still don't see the error, even with a clear-as-day signpost to its nature, and you still follow the behaviors one expects of an amateur, namely to ignore when someone else says you're wrong and just insist, based on for how long you've been working, that you couldn't possibly be wrong. There's a difference between being employed and being a professional. You exemplify that difference. &gt; All you've done is shout "you're wrong" This is, of course, simply false. &gt; without presenting any proof of failure Failing to understand the criticism does not mean the criticism doesn't exist; it only means that after more than ten years of being employed you still don't get basic range math correct, and are too busy being angry to even admit the possibility that you're wrong long enough to ask. Enjoy being angry. I'm done giving you chances to ask.
&gt; Given the fact that I've been developing PHP both commercially and for OSS on a daily basis for more than ten years and I'm a ZCE Honestly all this gets you up to is a luke-warm amateur. &gt; I already know quite well what I'm talking about. And yet you still don't see the error, even with a clear-as-day signpost to its nature, and you still follow the behaviors one expects of an amateur, namely to ignore when someone else says you're wrong and just insist, based on for how long you've been working, that you couldn't possibly be wrong. There's a difference between being employed and being a professional. You exemplify that difference. &gt; All you've done is shout "you're wrong" This is, of course, simply false. &gt; without presenting any proof of failure Failing to understand the criticism does not mean the criticism doesn't exist; it only means that after more than ten years of being employed you still don't get basic range math correct, and are too busy being angry to even admit the possibility that you're wrong long enough to ask. Enjoy being angry. I'm done giving you chances to ask.
The fact that your first response was &gt;So basically, you didn't even run your solution? &gt;Does it embarrass you to give samples that incorrect? proves that you're nothing more than a common troll. Anyone else would have explained a problem in the first place. The requirements are met exactly, and the output is correct, and you still haven't shown anything to the contrary.
I guess I should have actually read that link. 
&gt; The fact that your first response was ... proves that you're nothing more than a common troll. Keep slinging around insults while complaining about how you've been insulted, buddy. &gt; Anyone else would have explained a problem in the first place. Not most of the professional developers I know, since most of us want to give people the choice between attempting to figure it out or to be decent and ask what the problem is. But hey, as long as you keep insisting you're correct... &gt; and you still haven't shown anything to the contrary. Yes yes, I said "you should ask what the problem is" twice, then gave up, and *after* that, you started harping on how I hadn't explained the problem to you. Because pointing out the difference between modulo and remainder apparently wasn't enough for you. Keep trying to get the last word in! All this complaining is really helping the conversation along, and you saying "troll," "jerk" and "asshole" sure does prove how, after ten years of being some kind of employed and having passed a famously easy exam, you imagine you are now immune to errors. (cough) But yeah, tell me I'm a troll again, after all that swearing and insulting. :)
Well, at least you aren't off insisting you can't make errors because you've had a programming job for ten years. :)
In regards to #2, I think returning the return value is pretty descriptive. It makes it pretty clear inside of a large function/method where the returned value is stored. Also, if you really hate people for doing this, you need to take a break from coding for a bit so you aren't taking it so seriously. edit: Apparently I can't read numbers.
Perhaps a tact to try next time would be pointing out the proper way to not commit some of these problems. Might lead to fewer downvotes and might actually help someone produce better code.
1) I have *no* idea why this would make you hate someone. 2) I disagree. In a function called "get_full_name($person_id)" *return $return* seems perfectly fine. If you can't understand what's being returned from a function called "get_full_name" I probably don't want you coding on my projects anyway. 3 &amp; 4) Again, if you have a problem with this I *really* wouldn't want you working on any of my projects. Good luck finding a job where you *never* work on legacy code.
It's sooooooooooooooooooo important to know. Thank you!
&lt;&lt;?php ?&gt;?xml version="1.0"?&gt;
your link didn't work
fixed; sorry
What happened to #3?
you didn't make a database interface class. There is a great benefit to using one, they can be super simple to write. You won't duplicate error handling, looping through results, all that kind of stuff. I recommend building a class that handles connecting to the db, getting all results from a query, getting the first row from a query, and selecting a database. Whenever you have a new need that your class doesn't cover, add it to the db interface class and don't hardcode. why do you use 'or' instead of ||? It has a lower precedence, i suppose it's ok as long as you don't ever mix or and || together, but honestly I've always seen people use &amp;&amp; and ||. Your code is very procedural. While that isn't necessarily a bad thing, learning to write good loosely coupled, modular oop code has a lot of benefits. Code reuse to start.
That was from something else I was doing to learn, I'm starting new with oop; I'm just working through classes, refreshing my php.
you use memcache for caching.
Your comments always seem to make me chuckle, bravo and keep up the good work! 
**The good:** &gt; `header('X-SendFile: ' . $filePath); //` [`mod_xsendfile`](https://tn123.org/mod_xsendfile/) **The bad:** &gt; `passthru('cat ' . escapeshellarg($filePath));` **The ugly:** &gt; `die('Herp Derp File too big! Trolololo');` 
Not sure why this is downvoted. 10 seconds looking at superglobals and this becomes much more obvious.
People don't want to learn, they just want ANSWERS! Damn it! Lol. Who'd ever thunk that people would attempt to program without a debugger? And then get offended that we suggest a quicker debugging method than reddit.com? Not all down votes are made equal, some are from 'programmers' who 'code' in HTML and CSS lolololzzzz. When you mention Turing complete they look at you. Blank.
this
disagree. redis can be used as a more advanced memory cache store (and optionally persistant). if configured correctly, it can run just as fast as memcache and offers a ton of awesome features.
this is a good start, but the example configuration is not configured optimally (as a cache server. redis can also be used as a semi-persistant or fully-persistant database) the vm should be disabled (vm-enabled no). if you're cache is swapping to disk, you're doing it wrong. you will also want to think about configuring maxmemory-policy.
Just one question for you - how many large scale projects have you done? Seems like a lot of theory, but lack of "real world" practice.
Hmm, not to be picky, but I don't see an anonymous function being used here? You could almost call returnCallback an anonymous function bc no one will have a clue what it does :P
key-value store with lists/queues and pub/sub, not database.
Anonymous Function/Closure, basically the same thing in PHP. I have simply assigned a closure to a variable. It's still considered an anonymous function.
just because redis is not relational doesn't mean it's not a database. a persistant k/v store is still a database, atleast by my definition.
.....and I hate people that act like I did 5 years ago ;) Yup, graduation ceremonies are officially over and new grads are now working their first rounds of bug reports, so we shouldn't be surprised to see this type of comment. I love when we get a fresh grad at my job, they're always so idealistic and sure of themselves, until they get to real problems that require thinking above what their average group project required, and then they slowly start to realize that in the real world, _shit just isn't as cut &amp; dry as it is in a textbook or worksheet_. 1) I hate people who write unnecessary, redundant, cruft code. You do know that form values are all passed to PHP via the $_POST/$_GET/$_REQUEST superglobals and that **all** of this data are strings? Sure, you can do: if (18 === (int) $_POST['age']) ...but it really is no different than: if (18 == $_POST['age']) ...other than it requires more characters. 2) I hate people who don't know how to use docblocks or common sense. 3) I hate people who can't hold a train of thought long enough to create a valid ordered list. 4) I hate people who adhere too closely to fads and think that their way is the only way. Tomorrow you'll likely be bitching about people who use the framework that you're using today, but since you're a PHP hipster and have moved onto _The Next Big Thing_, it still won't be good enough for you. 5) I hate people who work in a tiny corner of the world but think that their work is a sound representation of what everyone else in the industry is doing. I've done work for the government, whereby it literally would take the equivalent of an act of Congress to get environmental versions updated. Needless to say, when you win a contract, you don't get to dictate to the one who awarded the contract, the terms of said contract. The same goes for any sort of institution or corporation; **they are paying you, not the other way around**, so you _will_ concede to their demands (unless your legal team can get them to agree otherwise in the contract).
As fast? It runs faster actually. As of today there is absolutely no valid reason to run Memcached instead of Redis. It does everything better, it does more and it's evolving fast.
Hmm, still doesn't seem to be working, but what you posted makes complete sense. And I just found this out, but when I save any .html as a .php where I want this to work, it actually does it. I am able to echo any of the session variables. But when I upload and test the original .html when it isn't converted to a php file it wont work. In other words it sounds like I'm missing something really obvious but I don't know what it is. Is there some fundamental rule I don't know about? --Edit-- *facepalm* I realized what I just posted but I"m leaving it up. 
agreed. my only complaint is that client support for redis is not as strong as memcache across all languages
CI was a big turnoff for me because of lack of support for PDO, PHP 4 support, and lastly, I had trouble getting it to say "Hello, world!" out of the box as it would cough up errors and whatnot. This was about 6 months ago. I gave up and never looked back on CI after that. I personally like Kohana, but Zend and Yii are pretty popular.
I was meaning to bring up that it uses a flatfile database for everything. Once I fix it up, I'll be moving over to open source it.
The latest version of CI does not have PHP 4 support. 
Be sure to repost it then so we can rip you a new one for using a flatfile (unless you've discovered one of the .0001% times that it's acceptable to use) :P
If you're having problems getting it to say "Hello, world!" right out of the box, you're doing it wrong.
I use [my own](https://github.com/ChiperSoft/phPit). Sure, it lacks peer review, but at least I always know exactly what it's doing.
CodeIgniter is great. Fast, lots of libraries available and it doesn't try to do too much. I like to know what's going on and it abstracts away all the boring stuff like form validation, database etc. Really extensible too.
I've been pretty happy with CakePHP. It had a pretty medium learning curve and I'm really liking the User Authentication component wrapped into it.
I like CodeIgniter, it has good documentation and is a powerful and spiffy framework. It's quite easy to get started with. OOP purists might not like it, in which case you might want to look at kohana which was once forked from CI but has been living it's own life for quite a while. There are plenty more but I haven't played with them. The few things I've seen in Zend Framework I didn't like but for job opportunities it's worth knowing I believe.
[Agavi](http://www.agavi.org) 
Curious to know the answer to this question as well. How is Zend?