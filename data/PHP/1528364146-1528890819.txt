[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [fab2s/call_user_func/.../**README.md** (master → e895a4f)](https://github.com/fab2s/call_user_func/blob/e895a4fbbca8cc193d3145b6edcaacd7714f03b4/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e09cf6u.)
Isn't there a Doctrine plugin for phpstan?
That would be one. A legacy project I often work on would be another.
This guy Laravels
Where is the search if fuzzy option? Or is it on by default
What does your debug toolbar for symfony say now? (Total time / init time) Not having the vendor on the host is not a good option :\-)
Agreed. It’s not perfect yet. It would be ideal if you could have a sort of `composer-dev.json` that overrides parts of the main `composer.json` and never writes anything to `composer.lock`. That way you could ignore the dev-only file.
That looks great! Thanks for sharing. I will investigate this and update the post.
&gt; Cmd Macfag detected.
Any manual changes in `vendor` stand a good chance of getting blown away. IMO it’s safer to use a `path` repository that symlinks for that and handle the annoyances around the json/lock files manually.
You don't know what you are talking about. Read about the [EAV model](https://en.wikipedia.org/wiki/Entity–attribute–value_model)
**Entity–attribute–value model** Entity–attribute–value model (EAV) is a data model to encode, in a space-efficient manner, entities where the number of attributes (properties, parameters) that can be used to describe them is potentially vast, but the number that will actually apply to a given entity is relatively modest. Such entities correspond to the mathematical notion of a sparse matrix. EAV is also known as object–attribute–value model, vertical database model and open schema. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
I’d like to interject for a moment. I don’t expect trolls on reddit to say anything remotely relevant.
you are the air
Delusional.
&gt; I am reasonably certain daily repository migration rate rate will continue to increase. You'd have to be a pretty delusional fanboy to think otherwise. It's not even been a week from when you posted this, and your comment is already aging terribly.
You can also [override composer autoloading through PHP code](https://www.reddit.com/r/PHP/comments/8apjpr/developing_in_vendor_directories/dx262mh/).
"Some plugins are shitty…", especially those that throw everything into the options table (my latest frustration). I don't know how people can create such complex plugins yet not be able to work correctly with databases!
This is full of redundancy with PHP core functions and oversights in implementations of array indexes and pointers. Coupled with zero type hinting it'll likely bring more annoyance than using core PHP functions. You'll have to look up the functions in the README.md file many times repeatedly instead of simply reading the code and hints through an IDE.
I’ll give that a go at some point too. Thanks!
[I’d like to interject for a moment.](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR31gXMOcI5X3i1qAi0O_Md_qmhcJgBc_zHrF8WhZpb9MZvlFTt)
For 7.1.2 on that page, one bullet per result table: * `call_user_func(...)` is best (still behind `$instance-&gt;methodTest(...)`) * `call_user_func(...)` and almost all other methods are within few percents (still behind `StaticTest::methodTest(...)`) * `call_user_func(...)` is best, far ahead of anything else (still behind `functionTest($param)`) * `$lambda(...)` is 6.3% faster than `call_user_func(...)`, the rest is considerably slower * `$closure(...)` is 6.3% faster than `call_user_func(...)` * last table IMHO is incorrect, because it averages different `call_user_func(...)` tests but does not average all `direct*()` tests, etc. So, in worst case scenario `call_user_func(...)` is 6.3% slower, in best case it is ~60% faster. I'd say `call_user_func(...)` is safe choice if you need to perform dynamic calls, unless you expect to encounter `$lambda(...)` or `$closure(...)` cases much more often (and in this case you'll get max 6% gain, I'd say negligible).
There's also the IUS repository that's sponsored by Rackspace that solves this \- [https://ius.io/GettingStarted/](https://ius.io/GettingStarted/).
Thanks these look promising
I don't know what I am talking about because there is the EAV Model? What does it have to do with WordPress? Are you saying it's the most efficient pattern to create a dynamic CMS? Or that when WordPress was created the authors sat together and decided "Hey, let's use the EAV model to represent our data most efficiently!" professionally? Did you take a look at WordPress and how the majority of plugins basically **rape** the posts and posts meta data table and store huge JSON blobs everywhere, which get corrupted with every single update any plugin ever does? It's simple. That's all. But it's untestable and the data is corrupted easily. The WordPress architecture and database design is basically a huge load of sideffects coming together, hoping it will spit out a working template in the end. Please take a look at how modern PHP application architectures are laid out. And then tell me WordPress is a shining example of it.
I disagree. I have recently inherited a project built in native PHP which is not OOP and it is a nightmare to maintain. It is an API where everything sits in functions.php. if his boss cares about his code not being "append only" at some point, he should implement OOP. I've seen a lot of money lost because working on a project required double the hours because of shitty, old fashioned functional programming. It's not about getting something to work, that's simple. It's all about being able to give your code to another programmer, and that programmer knowing straight away what's what. That's why we have design patterns.
By all means, let's support custom content types and their sparse metadata by adding database tables for each type, and columns for each metadata, and additional columns for every possible variation, and then we just need to leave unused options blank! Please keep on ranting, that's hilarious.
That's not what I was saying. I was talking about huge JSON blobs and serialized data stored in there that gets destroyed or corrupted constantly. There are many ways to design a CMS database (or any database, for that matter) without creating nullable collumns, hundreds of tables and without creating the need for plugins to store serialized data in it. If you haven't mastered these yet, it's not my fault. If you want that, you're probably better off with using NoSQL databases. WordPress would be, too. Call it "rant" or whatever you think this is, I can only give you these two things on your way: \- Have fun with the\_loop() \- Have fun testing 
Don't use it with undefined variables.
From the [Symfony website](https://symfony.com/legacy/doc/gentle-introduction/1_4/en/02-Exploring-Symfony-s-Code): &gt; Symfony is based on the classic web design pattern known as the MVC architecture, which consists of three levels: Okay okay. It's a Symfony 1 quote but still, you have to wonder why it was possible back in 2005 to do MVC but not now? Especially since the same person inspired both frameworks. And yes I'm just trolling you. I happen to agree that MVC in a web app context is meaningless. On the other hand, there are thousands of articles and books, some of which are written by well respected developers such as Fabien, which disagree with you. 
I really have not used **compact** in 17 years... I wonder why you should.
&gt; Any manual changes in vendor stand a good chance of getting blown away. Why? How?
A better question is *why* would anyone try that? You're casting an array manually as a object. What is the real world use case for doing that and trying to use array_column? If you were providing an *actual* class object, array_column can still be used, the class just has have __isset and __get methods.
People learn over time, but articles don't change. Also, people are reading your replies and the "trolling" part is not necessary, if you're not serious about it, why bother replying? &gt;**Is Symfony2 an MVC framework?** &gt; &gt;If you look around, every single framework seems to implement the MVC pattern. And most of them are advertised as MVC frameworks... but not Symfony2. Have a look at the documentation, and you will see that the MVC pattern is only mentioned once or twice, but Symfony2 is never defined as being an MVC framework. Why? &gt; &gt;Because I really don't care whether Symfony2 is MVC or not. Probably because the MVC word is so overloaded and because nobody implements exactly the same MVC pattern anyway. The *separation of concerns* is all I care about. And if you like to call Symfony2 an MVC framework, then you should know that Symfony2 is really about providing the tools for the Controller part, the View part, but not the Model part. It's up to you to create your model by hand or use any other tool, like an ORM. Of course, tight integration exists for the most well known ORMs like Doctrine2 and Propel; but they are optional dependencies. The Symfony2 core features do not and will never rely on any ORM. [http://fabien.potencier.org/what\-is\-symfony2.html](http://fabien.potencier.org/what-is-symfony2.html) &gt; On the other hand, there are thousands of articles and books, some of which are written by well respected developers such as Fabien, which disagree with you. There are also a lot of of people respected for something they "know" (e.g. religion), doesn't mean they are right.
Been very happy with the PHP IUS repositories, very good at getting more recent versions of software, Apache with HTTP/2 support anyone?
The overall average has `$func()` at 40-60% faster than `call_user_func`. At best I'd say the results are inconclusive since it seems to vary widely. 
For me personally it has been helpful to have the tests a different color. They show as that color in the tabs which is useful when I have multiple files open.
Why is this being down voted? This is exactly what /r/php is for.
Well first of all, how are the tests performed and what code is running?
[Better link to only see php](https://www.techempower.com/benchmarks/#section=data-r16&amp;hw=ph&amp;test=fortune&amp;l=hr9zpb) [PHP5 Dockerfile] (https://github.com/TechEmpower/FrameworkBenchmarks/blob/master/frameworks/PHP/php/php-php5-raw.dockerfile) [PHP7 Dockerfile](https://github.com/TechEmpower/FrameworkBenchmarks/blob/master/frameworks/PHP/php/php-raw7.dockerfile) [PHP Code for both.] (https://github.com/TechEmpower/FrameworkBenchmarks/blob/master/frameworks/PHP/php/fortune.php) --- Personal opinion: This test is more about the speed of the Database adapter. [Till more scenarios](https://github.com/TechEmpower/FrameworkBenchmarks/issues/133) are implemented, the whole list isn't really helpful.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [TechEmpower/FrameworkBenchmarks/.../**fortune.php** (master → 27eb965)](https://github.com/TechEmpower/FrameworkBenchmarks/blob/27eb965d1fab8886ce9113a94e620f7b94407d05/frameworks/PHP/php/fortune.php) * [TechEmpower/FrameworkBenchmarks/.../**php-raw7.dockerfile** (master → 27eb965)](https://github.com/TechEmpower/FrameworkBenchmarks/blob/27eb965d1fab8886ce9113a94e620f7b94407d05/frameworks/PHP/php/php-raw7.dockerfile) * [TechEmpower/FrameworkBenchmarks/.../**php-php5-raw.dockerfile** (master → 27eb965)](https://github.com/TechEmpower/FrameworkBenchmarks/blob/27eb965d1fab8886ce9113a94e620f7b94407d05/frameworks/PHP/php/php-php5-raw.dockerfile) ---- 
Its by default
This is awesome. What else you got? I feel like I've been probably missing out on a few things I should know about
I would rather say wordpress is like a reliant robin...
Or just use the cli, emacs, and grep
Here you go: https://www.stitcher.io/blog/phpstorm-tips-for-power-users
In case of DDD: quiet often
If a method/function can throw lots of different exception classes then something is wrong with it. Either the original developer has made too many exception classes or the method/function is doing too much.
Could be overhead from ORMs. &gt; The row should be converted to an object using an object-relational mapping (ORM) tool. Tests that do not use an ORM will be classified as "raw" meaning they use the platform's raw database connectivity.
thanks!
Hello guys! I just released a php caching library. I would like to hear any thoughts about the library. Design flaws maybe or could it be even utilized as a cache solution in an environment. The repository is on: [https://github.com/dude920228/php\-cache](https://github.com/dude920228/php-cache) And: [https://packagist.org/packages/kdudas/php\-cache](https://packagist.org/packages/kdudas/php-cache)
Depends on what it's doing but I would question if perhaps the method itself is trying to be a hero function and do too much. Maybe *that* is why there are a lot of exceptions that could be thrown?
Elasticsearch is one that does it. While you don't call the `process4xxError()` directly, they are unhandled exceptions that bubblel up when running a `search`, which can also throw additional exceptions including all the `process5xxError()` and other non http error related ones. https://github.com/elastic/elasticsearch-php/blob/562ec31a80a46157b9f5f87dc5b637d4d3486c5d/src/Elasticsearch/Connections/Connection.php#L588
While it could possibly hint at code smell, I think it's fine, as long as they all extend a base Library\Exception so you can at least catch all exceptions from that library in a single catch.
I'm guessing now, but perhaps they all extend one exception call... maybe a `ProcessError` or similar? You could try to catch that instead, thus encompassing lots at once.
But the benchmark indicated both raw php 5 and 7. I am very confused by this. Really throws the whole test into question IMO.
Shouldn't 'config' be a different colour than app?
at least on the surface, that seems like a bad approach to me as well. I'm inclined to say that should be a single HttpClientException, with the code and message set accordingly. However, in Elastic's specific case, you may want to do different things for each one of those errors. If so, your handler code is probably cleaner/more readable as a try/catch/catch/... series than a switch/case type setup checking for the code value: try { $es-&gt;search(); } catch (AlreadyExpiredException $e) { handleExpired(); } catch (Forbidden403Exception $e) { authenticate(); } ... versus try { $es-&gt;search(); } catch (HttpClientException $e) { switch ($e-&gt;getCode()) { case 400: handleExpired(); break case 403: authenticate(); break; ... } }
I use validation exceptions for when there's lots of possible bad input values. After a (called) validation function, any other exception (like DB not available or whatever) should be limited to dependency chain problems hand handled by the appropriate resource allocation function. It's very rare that a function would have its own custom exception. Yes, this explodes the number of validation functions (in most cases), but it's better than being sprinkled throughout the caller function.
Maybe use a PSR-7 Http Message Interface.
Composer update normally alerts you that file(s) in packages are altered and whether you want to discard them, unless you have discard-changes set to true in the config part of composer.json.
There is also this https://github.com/franzliedke/studio
When I write a library, I prefer to throw different exceptions for different cases. I think the exception class itself should tell you what went wrong, roughly. But on the other hand, I don't expect someone to handle each case separately, so I'll extend them all from a base exception, something like `LibraryNameException`. I expect people to catch that base exception and then log the actual one that comes through. There are some exceptions I expect people to look out for. They'll usually be something like `AuthenticationException`, but I don't think people should be handling each individual exceptions that come through. After all, they're **exceptions** to your code flow, not the expected state. If you absolutely do need to recover, find a base exception. But otherwise, let it log and move on.
&gt; grep If you like grep, check out ag (silver searcher). 
For reference, this is the code being run by both versions of PHP: ``` &lt;?php // // Database Test // // Database connection // http://www.php.net/manual/en/ref.pdo-mysql.php $pdo = new PDO('mysql:host=tfb-database;dbname=hello_world', 'benchmarkdbuser', 'benchmarkdbpass', array( PDO::ATTR_PERSISTENT =&gt; true )); // Define query $statement = $pdo-&gt;query( 'SELECT id, message FROM Fortune' ); // Store result in array. $arr = $statement-&gt;fetchAll(PDO::FETCH_KEY_PAIR); $arr[0] = 'Additional fortune added at request time.'; asort($arr); ?&gt; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Fortunes&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;message&lt;/th&gt;&lt;/tr&gt; &lt;?php foreach ( $arr as $id =&gt; $fortune ) : ?&gt; &lt;tr&gt;&lt;td&gt;&lt;?php echo $id ?&gt;&lt;/td&gt;&lt;td&gt;&lt;?php echo htmlspecialchars($fortune, ENT_QUOTES, 'UTF-8') ?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;?php endforeach ?&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt; ```
ooo interesting, thanks for the tip
What are your performance issues? Swoole isn't going to help if your database is slow or you don't have any cache. It's also not simple to just throw on top of an existing application, you have to write the app with aysnc in mind from the start.
Heh, it's a common experience. My suggestion of CR and CD was a bit tongue-in-cheek, in fact - they are good things, but I am aware it is usually politics and perception that prevent them being used. Given all the ropey code out there, and the fact that start-ups and showcase technology is not the norm, I'd suggest that 90% of the world's production code is probably not reviewed before it is published. 
That's not the answer. That's a repo that may be defunct. There may be a mailing list where it was established they moved, etc. The lack of critical thinking is not helpful.
I think as long as people's feedback is not intending to be dismissive, it _is_ possible to take a generalised view about devs from country X without being discriminatory. It's just necessary to be careful, for obvious reasons. India has a growing middle class and there's a genuine desire amongst young people to do better than their parents' generation, which was often held back by poverty and colonialism. It's also obviously an enormous country, which must make managing its educational systems a serious headache, and first world economies have a dreadfully unfair head-start. I imagine that if a country exports several million developers, some of them are going to be bad, and so the country's reputation is unfairly tarnished that way too. I do find it interesting that people from a certain country can share common traits, which is possibly what makes sweeping generalisations so tempting. On the positive side, Indians tend to be enthusiastic entrepreneurs, and on the negative side, I've seen many Indians struggle with abstract problem solving, preferring to solve issues by rote. I expect their educational systems produce these common cultural artefacts. 
Thanks I saw that. I have been using the search thing all wrong. I was using the shift shift search box instead of the command o one which searches specific file names. Already helped a lot!
I stopped creating new exceptions for every possible thing that can happen. Originally my thought pattern was that if an exception is different it should have an exception defined for it. After many many years though I found that I never changed anything in the new exception other than it's name. In other words I started using an exception name as a "Primary Key" mapped to a message instead of just providing the message! So now no more of that. Just throw an exception with a message.
Consider this alternative: just pick the next server from the cluster at random. That way, there's no state to keep track of. You'll get an even distribution of hits to the servers in the cluster and it should be even faster since you don't have to reach out to a file or other server.
In my lab, I used a rpi3 and a bunch of sensors with a PHP7 app in docker on it. It was really pleasant to work with. Backend reads data from the temp and pressure sensors, and records to the database. Front end gives a web view with data visualizations, and monitor logs (that send email alerts if anything's wonky). I do like python, but I already had so many custom libraries in PHP that it was faster in my use cases for rapid prototyping. 
Interesting, we do something similar at work with Magento. It boils down really to mounting only a subset of files as volumes from the host. Composer dependencies are pulled in on docker build and live in the container, composer operations are all done inside the container as this replicates production environments. Our vendor directory is pulled to the host using docker cp. We built a tool around the whole process which provides cli commands to wrap everything 👌
If by DDD you mean badly applied layerd architecture only... I can't imagine situation where I need to work in a different scopes at the same time. Basically I don't see any profit from coloring scopes (but I have different coloring for tests for example).
Distinguish between tests and code that we are testing is useful indeed. 
You can google about "in memory db" and it should perfectly fit in your needs
Oh, honey.
&gt; I do not like writing and opening same file hundreds of times in a minute Why? Are you worried it will get tired?
A database is likely just fine for hundreds of times per minute, but I would suggest you look into using memcached. Since you're already using the file based process, make it so that you can fall back to the file if memcached dies/doesn't contain any cached data.
Well, "hundreds of times per minute" comes down to a few times per second, that's quite low traffic, opening and writing a file that much is no issue for any system, however if you need a shared cache\-like storage, then memcached is the fastest (however you lose all data when it is restarted or crashes), then comes Redis with optional persistence which can help after a failure, then newer versions of MySQL also has a memcached interface (however I heard it's not that great performance\-wise, but more than enough for your load), however I feel like what you are doing is routing the same client to the same server in the cluster, an nginx webserver with proper configuration can do that for you more efficiently. Maybe tell us more, so we can provide better solutions for you.
I am using ReactPHP so I can talk about async PHP, but not Swoole. I am looking into Swoole as I am having issues with not ReactPHP but the event loop extensions (I've tried them all). My primary issues are tiny memory leaks (either native PHP or extension related) and file descriptors not being always released (extension related), the only stable event loop library is ExtLibeventLoop (which is only PHP 5.x). Here are some thing to keep in mind. Swoole has its own extension which is why I am looking into it. - Keep persistent connections out of your event loops. It's not worth the headache. For example, there are async MySQL libraries that do pooling, yes its async but it holds onto the connection to use for later on, forget it. Fire a database connection up, do your work, and close it. It can be async, just don't keep it connected. - Shared persistent memory access is very important. While PHP has grown, to expect something to go wrong, segment fault, of your own code causing some fatal error. Your application needs to crash with minimal effects. Redis is a good start for shared memory. - On par with crashing, think about recovery. On a restart, all connections will flood the server to reconnect. Hope the clients have backoff code. - Poor network conditions cause a lot of issues. There is a very little you can do in PHP, but if you're using Linux then there are a lot of nobs to tweak for TCP performance and network related issues. PHP was used to quickly prototype a server, if I was to do it again, sure but long-term support has been hell. Trust me I tried many, the one platform I've had a success with, under a higher load than NodeJS and ReactPHP is Vert.X. It has the concept of blocking workers and event loops. Vert.X can be written in Java, JavaScript, Ruby, Scala, Kotlin, and Groovy. Its important to understand the difference between prototyping because you want to test a business idea and using the same method on a business idea that works, you just need it to work better. I'd start to look at typed languages, and platforms that are more geared towards your particular needs. While I am not the biggest fan of the JVM, throwing down a few grand to get industry leading tools and support may be worth it. 
Awesome! Checkout cmd+shift+o to search only file names and cmd+opt+o to search only symbols if you haven't already.
Yeah exactly. I discovered those two today as well when looking around the menus! I keep forgetting and instinctively doing shift shift, but I'm trying to use those two commands more often. Thanks for the tips!
we have also tested swoole for an api, benchmarks compare to nodejs were good for simple setup(hello) until we added redis and mysql async, we dropped off 50-70% of req/sec compare to nodejs. You also have to manage yourself a connection pool for databases and can't use PDO for async reason. That was a big turn off for our team, so we decide to go with nodejs-express. I hope maybe next major version of Swoole will improve those areas, but for now, i feel that swoole is not yet there comparing to nodejs.
Last time I checked docker for mac even with cached volumes, performance was worse than what I found in dingny (NFS). And there are also projects like docker-sync, which will allow you to have native linux performance on macosx with very small cost of additional compose file.
Bad bot
This doesn't answer your question but have you looked at jquery, uhm, i mean HAProxy. It was made to do exactly this. 
&gt; we dropped off 50-70% of req/sec compare to nodejs Then you didn't correctly setup the async code and were doing sync calls.
What I was trying to convey was that they ought to provide newer and officially supported versions of PHP in the repos they ship by default with the minor point versions of CentOS 7 as they release. By the time a major version of CentOS approaches end of life, much of the supported software is over a decade old. For some software that is perfectly fine, but it really starts to get problematic with others (especially programming languages and runtimes).
If scopes allowed something like a file tab background to be applied to subfolders of a project they would be immensely useful. We have a small set of related laravel projects. They don't share code, but some of the names overlap. When working across them sometimes it becomes hard to distinguish. I'm sure this is very useful, it just doesn't solve the specific need I have.
Extend core exceptions when writing a library, so the custom exceptions can be handled in detail or more broadly; this is left to the client.
Although all the other answers here are the right ones, I'll just throw in that since 7.1 you can specify multiple exception types for a single catch statement (pipe delimited) as well.
or maybe the method is really simple and lets all the underlying exceptions bubble up...
Interesting, I always have it open.
See if the comparing the concurrency helps you [Imgur](https://i.imgur.com/8R8Jg3N.png)
I split exceptions into 3 types: * Real - when something I can't control affect my code execution (race conditions on shared resources, connection timeouts...) * Defensive - being result of programming mistake (API misuse, malformed strings...) * Control flow - used in poorly designed classes (can't return because type won't match) First kind I always catch as close to the source as possible. Second only with pokemon style exception handler/logger. Third would have to appear in pretty unique library if i'm going to use it, but has to be handled, so I'd catch those right away.
Thank you. I've managed to make it work with GitHub Desktop and Atom.
`pokemon` exceptions? I don't know what that means, but I like it. :D
Did not know this, thanks!
Thanks all! There's some pretty constructive feedback here to make for a better developer experience with the library I'm working on.
&gt; Composer doesn’t recommend adding the vendor folder to git, but I figured that’s the easiest way to keep deployments the same. This is what a lock file is for instead. Commit your lock file and it should ensure that any `composer install` done on the same branch will have the same dependencies installed.
Just curious: Where would this be useful?
Awesome!
"Not working" means a lot of different things. Error messages and error logs are useful
It's your standard try/catch block... Pokemon, *try* to *catch* them all.
Iv been working on a project and have been using the latest PDO methods and all that sort of thing. Over time iv been finding it disgusting to keep all this SQL in prepare statements. $stmt = $this-&gt;Connection-&gt;prepare(' Select Name FROM Member WHERE ID = :ID '); Is there a nicer way i can keep all my SQL data in actual SQL files? Maybe file_get_contents from outside the web project in a Queries folder? That might even be its own mess with all of the queries in one folder. I just want to find a neater way to manage my queries that are long.
I could see using this along side a deployment script for an application that uses git tagging for releases, notifying a monitoring service such as New Relic of the version number being released. Or notifying a third party app like slack or hipchat.
I tried to introduce PHAN into my project and it was pretty retarded to be honest. It has no understanding of how traits work and threw me all these errors about undefined members being declared by traits. I dropped it within the same day.
Not sure what your talking about, its perfectly possible. Make ajax requests from your front end to a php layer that returns content type json that it reads from a database layer. Inputs from your user go to your php service manager and are parsed and input into database. Your view sent a message to your controller to update your model.
Also curious - why write this particular piece of code? There are dozens of them on packagist already, including the one Composer itself uses. 
That’s up to you! 
Did you install and configure PHP? What about MySQL? If MySQL and PHP are properly configured, did you migrate you database properly? Can you get a simple test PHP file to echo something out? From the database? Why are you using IIS if you can't even write your own version or at least find a native version of very common rewrite rules? Maybe start by looking at the errors presented to you and go from there? If you do that I'm sure a few Google searches will get you going. If you don't know how to see/read the errors. Head over to godaddy and get yourself a managed hosting account. Preferably linux based. 
who writes their string concatenation like that? $ x. = $ y 
That whole paragraph is filled with weird code (or typos) $ x. = $ y. $ z; echo $ x;
an oop exercise
that's what lockfiles are for
Programmers
Head over to r/phphelp to seek help. This is not a support forum. &gt; my project is not working You have to be specific and provide more details than that, as "not working" could mean any number of things, if you want anyone to be able to help you. But again, not in this sub.
Run it with xdebug and get a trace, that should clear up if the issue is actually the db wrapper.
Save for the obvious typos there is nothing wrong with this notation. It doesn't make too much point to discuss this article, though. Just markit as spam and move on
Create a scope containing that project and it’s subfolders and it will do exactly what you need.
I have a project where we run three different applications based on the same core, so there are 4 scopes there (3 for apps and 1 for the core). The apps are similar and share 50% of the naming, so color coding is *great* to distinguish them. If you modify the core, you need to make sure the applications don’t break, so you need to work in all 4 scopes. I think we just use scopes differently.
Just another hint: only use colors from the provided palette, so they will adapt for both dark and light IDE themes, and you can share the configuration with your team.
Or you just go with Go. Pun intended. As we decided.
You might add to the readme what options and benefits it offers over the built-in [version_compare()](http://php.net/manual/en/function.version-compare.php)
Oh, there you gave me the idea for a third use case. Excellent!
I was just thinking that this would be a good simple kata to do for practicing TDD. It is simple yet complex enough to do that it would be a great learning tool. Do it in a bunch of different languages. 
How do you mean that, exactly? How does scoping influence indexing?
r/phphelp is not working as I couldn't add my question to that sub-reddit that's why I added here. Not working means I could not redirect to specified page. That means routing issue. 
Here's a sneak peek of /r/PHPhelp using the [top posts](https://np.reddit.com/r/PHPhelp/top/?sort=top&amp;t=year) of the year! \#1: [Join the battle for Net Neutrality! The FCC plans to kill Net Neutrality and it will affect everyone unless YOU fight for it!](https://www.battleforthenet.com/) | [4 comments](https://np.reddit.com/r/PHPhelp/comments/7eoq2o/join_the_battle_for_net_neutrality_the_fcc_plans/) \#2: [Making /r/PHPHelp better, Pt 2.](https://np.reddit.com/r/PHPhelp/comments/8jejyf/making_rphphelp_better_pt_2/) \#3: [Tutorial on getting xdebug to work with phpstorm?](https://np.reddit.com/r/PHPhelp/comments/70ho0c/tutorial_on_getting_xdebug_to_work_with_phpstorm/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
That is technically not a php issue. Read up on how url rewriting works on IIS. 
That is technically not a php issue. Read up on how url rewriting works on IIS. 
Prioritizing and better code completion.
I keep learning new things. I'll see what I can find in the documentation, thanks for pointing it out!
Have a look at http://docker-sync.io/. This provides a simple way to manage and synchronize Docker volumes with your file system, and results in a much better performance as you described.
You just can't replace PHP with GO. You can rewrite some services in GO, but that's all. Comparing PHP with GO is like comparing apples with pears.
But that's the entire point of CentOS/RHEL. And yes, as a programmer, it's a pain. But the default repos should continue to provide the same version throughout the entire supported lifetime of the OS, including backporting security patches even when upstream no longer support that version. I agree that it's way more useful to provide a source for updated versions, but they should be opt-in - which is exactly how it works with SCL and the like. Otherwise, I could have a PHP app that works on one centos X installation, and doesn't work on another, based solely on the date that the OS was installed. Which is pretty much exactly what you use CentOS to avoid. Otherwise, why not just use Fedora et al?
Ok
Maybe not useful for you but PhpStorm has syntax highlighting for SQL if it detects it in PHP string. If you define a database connection in PhpStorm it will even automplete and error check against this database. 
"HTTP ERROR 403.14 - Forbidden. The Web server is configured to not list the contents of this directory. " It's showing possible solution is to Enable directory browsing page. But directory browsing page enables user to view all directories and files from project. So enabling directory browser page option is not the solution. 
I tried docker-sync but I ended up having syncing and permissions issues more often than it just working. YMMV I guess.
Most likely it's due to try catch block. It might not be able to "figure" out that it will be caught. 
&gt;Make ajax requests from your front end to a php layer that returns content type json that it reads from a database layer. \&gt; Make ajax requests from your front end to a php layer that returns content type json that it reads from a database layer. Ajax is done using javascript, so there's no way php can be MVC, because PHP != javascript. Now there are exceptions of course. There are Tools to make desktop apps with PHP where you \_can\_ use MVC. Not on the web though. You can make an Application that uses MVC, which combines javascript (or webassembly in the future?) and a webserver with language X. But I stand correct that PHP can't be MVC in on the web.
I like php. I admit it.
Because `$e-&gt;getMessage()` could also be null, then `isset` would return false and you don't have a result.
This. Simple solution would be to define `$result` before the try/catch. $result = null; try { .... }
 &lt;?php function a () { $result = new stdClass(); try { $result-&gt;status = "success"; } catch (\Exception $exception) { $result-&gt;status = "error"; } return $result; } 
I know the code in the OP is made up, but can't help it but rewrite placing if() statement's contents into catch block. The problem solved and the code is back to sanity. 
A comment section at the bottom would be nice, other than that it looks pretty good :)
This is not how it works. new stdClass(); here is a mock for a real payload and cannot be outside the try.
[removed]
So, you have written a script that does the job of a loadbalancer? Why not put a load balancer infront of the servers and be done with it? If you're on AWS, the ELB should do the trick nicely. Then aggregate logs from the servers themselves to find out how often they're used.
Yeah I posted a straight solution as a direct reply to op too.
Yeah, it's an example. $result could just as well be null. The point is to declare the variable before the try/catch.
In a world where some dare say anything good about JS (and Node) I couldn't give a shit what anyone says about PHP.
how about using blackfire for comparison?
What's so terribly bad about people saying good things about JS and Node?
The whiny typical purist nonsense from general purpose developers angry that the JS ecosystem is the hottest/most creative scene in development right now and them being upset that JS is being used to do things it shouldn't do. There's no difference between a JS dev using the V8 engine as virtual machine than a C# dev using the .NET environment.
If you're a bullied PHP programmer you have to find someone else to pick on.
Is this also valid for 4\+ digit semvers? Afaik those would be valid version numbers: [2.3.4.5](https://2.3.4.5) (I call that framework or vendor based semver for example) Same for even crazier sub ones as 2.3.4.5.6 \- which your Version class as such cannot work with \- right? PS: 2.3.4 \&lt; [2.3.4.5](https://2.3.4.5) \&lt; 2.3.5 etc 
I’m not near a PC right now, but in the meantime you should Google “codeigniter Web.config”
You are not understanding what im telling you. .NET also uses javascript to send messages to its API layer. Sounds like your stuck in a loop.
JS hurts to use at every step. Now, I am aware you have received the typical "hurr he's a butthurt php dev" replies, but for a real answer it occurred to me today that I've wasted so many hours on something seriously minor and stupid in JS... and on the other hand have managed to code and debug a friends C# project from across the globe without any IDE *and I've never written C# before in my life*. This suggests to me that there's either something fundamentally broken with me, or something fundamentally broken with JS. My money is deep on the JS. Yet we live in a world where people claim to enjoy JS, and build all kinds of monsters with it. This world simply doesn't make any sense. Thus, at this point in time PHP-haters can suck a fuck because apparently anything goes these days, including JS.
Of course I can. You can replace the PHP with anything you want even with C/C\+\+ if you like pain. But GO is better at this job (as C/C\+\+).
I'm understanding what you're saying just fine. You're saying that you can make MVC applications, you are right. But you can't say that a language specific framework is MVC, because javascript is not part of this language specific framework, unless it's javascript.
1. This is not a support sub 2. This is a php sub, not MS Excel sub. If you looking for php code that does what you want, consider [reading the docs](http://php.net/manual/en/function.array-multisort.php), search the web, or ask on r/phphelp.
Thank you very much and sorry for misunderstanding!
So he will find them and ban forever
I &lt;? PHP
As Garethp mentioned, all exceptions thrown by a (good) library will extend a base exception. For example, all exceptions in elasticsearch\-php implement [ElasticsearchException interface](https://github.com/elastic/elasticsearch-php/blob/master/src/Elasticsearch/Common/Exceptions/ElasticsearchException.php) Another example, where I like the structure of exceptions is [Guzzle](http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions), and all of these exceptions implement [GuzzleException interface](https://github.com/guzzle/guzzle/blob/master/src/Exception/GuzzleException.php). Ideally you will catch specific exceptions only if you need to handle special cases differently, otherwise you just catch the base exception.
There's no such thing, the specification requires only three numbers, extensions are after a dash so to have more numbers it would be 1.2.3-5 https://semver.org/ 
Fundamentally, the async model makes life harder than it has to be for something that just spits out an HTML document. 
Then check if the variable exists before returning, else return false. 
🤦‍♂️
BAD REDDITOR
To me, the idea is an object is always to be returned. I could be wrong though
PHPStorm's Inspections are really useful most of the time but this is an anomaly. Because your $results variable is declared inside a try block and an if block PHPStorm cannot say with certainty that the variable is declared. Even though the if block will be executed upon an error being caught. PHPStorm's inspections don't have the ability to parse conditional blocks. You can suppress these messages. Or declare $results at the top of your a function to get rid of it.
This makes sense, but it is not because of this - even if you put hard coded value in the $error, it is the same. It probably what @buratinas said.
Then you're doing it wrong. Split the initialization from the action. While you're at it, don't use exceptions for normal behavior. That seems like a Java holdover. 
I find it rather unproductive to argue over a code which is deliberately made up. I can only observe that in PHP7 exceptions are thrown regardless of your opinion on them.
I TOO LESS THAN LOVE PHP FELLOW HUMAN
What ever happened to the "different purpose different language" concept? I'm certain Javascript outperforms C# or PHP in some aspects, equally certain of the fact that PHP outperforms them in different aspects and the same goes for C# (which I have no experience in by the way). And as far as I'm concerned, I use PHP and JS together, all the time (Laravel and Vue/React, little bit of Node.js for my chat apps), and I absolutely enjoy using them both aswell for the things they excell at. Also, I kind of like a world where "anything goes" experimentation is absolutely necessary in the IT world.
This is because not all Throwables are catched by your catch block (even when they would not be thrown by the code executed in your try block). ```php try { $result = 'smtn'; throw new Error(); } catch (Exception $exception) { // Error is not catched here, so your $error variable is not set. } ```
That should be a t-shirt
Wordpress as the second most used php framework????
 https://imgur.com/gallery/Gn3CnfQ there you go
SHUT UP AND TAKE MY MONEY
the first assignment of $result is an evaluation inside a try block, and an evaluation could throw an exception. PHPStorm doesn't try to figure out whether the specific evaluation could *actually* ever throw an exception. If you assign a literal to $result first, even inside the try, the inspection is happy. and the second assignment is inside a conditional.
JS has some true weirdness in its core. For a modern language, its form of OOP is very hard to understand. Its handling of types is sometimes [mindblowingly convoluted](https://i.redditmedia.com/6lRqDLj2ub5zQRM8H1R_xA493mMDiKH8eVmNup0pIFU.jpg?w=320&amp;s=cad84dc88c516400f211f9bdb6162b93) and seemingly unfinished. Part of the difficulty comes from running in the constrained environment of the browser, but other parts are just about it being a bizarre language that masquerades as being "C\-like" syntactically, but isn't at all.
&gt; hottest/most creative scene in development right now That doesnt stop the entire ecosystem and language being a complete shitshow. NPM is a pile of crap, and there are so many damn people rewriting things every 5 seconds that nobody has a hope in hell of knowing whats really going on.
Nothing overly surprising (good to see, that the trend towards 7.0 seems to be steady). What really threw me for a loop were the database stats. 56% use MySql and 28% still use phpMyAdmin. WTF people? 
okay
You should use a spellchecker.
I guess it's time for me to come out of the closet... I'm a php developer and I'm proud of it.
&gt; 56% use MySql What's the problem with MySQL?
&gt; https://imgur.com/gallery/Gn3CnfQ I'm not even joking! Make this happen, I needs it!
Came out wrong. I didn't mean to criticize the use of MySql, but that people would still use phpMyAdmin to administer it.
nvm ;) JS does suck honestly. But, it does help on the front\-end. I'll be damned if you ever see me using a node backend though. No way in hell, unless I have to. Will stick with my Django. :)
Thanks to phostorm it is easier debug with xdebug
That is a really cool proj. Thanks man 
As mentioned before. The IDE is 100% correct to point this out, since \Exception is no longer the top most throwable you can catch. Use `Throwable` or combine your catch with multiple exception or error types ``` catch(\Exception | \Throwable $e) ```
I love PHP. Javascript is just the Justin Bieber of languages
you're welcome)
Stop posting here. Your articles are not what this subreddit is looking for.
Why isn't this a purchasable item..
Customers don't care what the website is built in. So long as it works.
I would re-evaluate your directory structure. Right now, it looks like your project root is the entry point for your app, but typically that is the `public` folder. It should include only your front controller (index.php) and your css/js/img assets. The code for your app (controllers, services, views) should live in `src`.
Your link got hugged to death or something, so I can't see it to know exactly what you're talking about, but why not just add the package to whatever git repository that you're using as a separate project and then include it in your composer.json file in a way that inserts it into your vendor folder? If you're making it a composer package, you're going to want to develop it as a reusable project, right?
[Full list of changes in this release](https://github.com/php/php-src/blob/php-7.3.0alpha1/NEWS).
The only thing that has me even partially excited is the flexible HEREDOC syntax... But then I saw that support for my favorite OS is being removed. Even if I haven't used it in 15 years, I will greatly miss BeOS.
This is great, will do! Thank you.
&gt; The only thing that has me even partially excited PHP releases are starting to get _boring_, and that's a good thing.
Couldn't stay away from Reddit eh, FD? Me neither, I guess `;-)`. 
I can't wait! You're my PHP hero. Well, reddit can be fun and friendly at times. :D 
Fuck. I am in cinema and movie is about to start and now I can only think about the shirt
Fuck. I am in cinema and movie is about to start and now I can only think about the shirt
[phostorm](https://www.urbandictionary.com/define.php?term=pho%20storm)
That + for OOP experience change all files in `public/controller/*.php`to classes and just use them instead of requiring them in index.php file ;)
For me personally the main changes would be: * Flexible heredoc/nowdoc syntax. Allows you to indent heredocs and no longer requires semicolon or newline after the ending delimiter. * GC performance improved, in particular there should no longer be pathological cases. * Mbstring performance improved. I might be somewhat biased though ;)
No probs! I've added some updates. 
PUT YOUR PHONE AWAY. 
Well, I have a redbubble account and quick tossed together one. Granted you would all be giving me like a dollar a piece, but if you really want it, here's a just white version. https://www.redbubble.com/people/brakkum/works/32139669-i-php?asc=u&amp;p=t-shirt
minor versions should be boring, especially when they are released annually
I would have hated to have to wait until 8.0 to get nullable return types, though.
It's actually amazing this isn't a thing.
Awesome, I put all model, view, and controller files in `src`, moved the directory, renamed to `Database.php`. Will work on the router next...
please ellaborate! do you think thats not boring?
No, I was super excited about nullable return types in 7.1! Was going on your statement that minor versions should be boring, so maybe they shouldn't have exciting features. My original statement meant that PHP has implemented quite a few glaring omissions and the list is growing smaller each release so there's not so much left of the "oh god yes finally!"
&gt; but it does help on the front end There is literally no other option
There are definitely people who go through and downvote a post and all comments in it (especially in this sub, I feel), so I wouldn't take it too personally! Thanks for the advice, and I have applied it already if you'd like to take a look.
Gladly! https://www.redbubble.com/people/brakkum/works/32139669
Okay, first of all, this is awesome, thank you so much! Here's what I did: ``` // Autoload config and classes require $root . '/vendor/autoload.php'; session_start(); // Routing $redirect = $_SERVER['REDIRECT_URL']; $controllerName = ltrim($redirect, '/'); $controllerPath = $root . "/src/controller/$controllerName.php"; if ($controllerName === '') { require $root . '/src/controller/index.php'; } elseif (file_exists($controllerPath)) { require $root . "/src/controller/$controllerName.php"; } else { require $root . '/src/controller/404.php'; } ``` 1. There were a few things I needed to do here to get the files from the parent directory and check if they exist, but this is now routing everything properly, which is awesome. (The `file_exists` was checking the name instead of the path, and the `===` was `=` thus reassigning, but I assume you just wrote it really fast.) I feel much better about this not being so repetitious now. 2. Thanks! 3. I will work on the namespace next. Haven't used them outside of some AWS stuff, but it seems to be the standard. 4. Thank you! Well, I think it's good for where I'm at, but I've been destroyed on this sub before, so I just wanted to set the precedence that I don't think I know everything, but you are quite correct. 5. Good point. 6. Will look into that! 7. Will look into integrating PHP Unit. Thank you again! 
Any GUI alternatives? Or do you work exclusively in CLI for database management? 
HeidiSQL works like a charm, however phpMyAdmin makes a good web alternative.
PHP may be looking past this, but`$result` was never defined in the scope of where you are returning it. Add `$result = null;` above the try/catch block.
I think each language has it's own porpose.
Thanx
I really wish their was. I thought Web Assembly might break this wide open but it isn't allowed to directly access to DOM; it has to go through JS.
no, read more at: [https://semver.org/](https://semver.org/) "Given a version number MAJOR.MINOR.PATCH, increment the: 1. MAJOR version when you make incompatible API changes, 2. MINOR version when you add functionality in a backwards\-compatible manner, and 3. PATCH version when you make backwards\-compatible bug fixes. Additional labels for pre\-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format."
I swear on HeidiSQL. It's very easy to use, allows for ssh tunneling, makes administration a breeze. No problem copying tables between databases, creating backups etc. 
 &lt;?php // // Database Test // // Database connection // http://www.php.net/manual/en/ref.pdo-mysql.php $pdo = new PDO('mysql:host=tfb-database;dbname=hello_world', 'benchmarkdbuser', 'benchmarkdbpass', array( PDO::ATTR_PERSISTENT =&gt; true )); // Define query $statement = $pdo-&gt;query( 'SELECT id, message FROM Fortune' ); // Store result in array. $arr = $statement-&gt;fetchAll(PDO::FETCH_KEY_PAIR); $arr[0] = 'Additional fortune added at request time.'; asort($arr); ?&gt; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Fortunes&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;message&lt;/th&gt;&lt;/tr&gt; &lt;?php foreach ( $arr as $id =&gt; $fortune ) : ?&gt; &lt;tr&gt;&lt;td&gt;&lt;?php echo $id ?&gt;&lt;/td&gt;&lt;td&gt;&lt;?php echo htmlspecialchars($fortune, ENT_QUOTES, 'UTF-8') ?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;?php endforeach ?&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;
What about [english?](https://duckduckgo.com/?q=porpose&amp;t=ffab&amp;iax=images&amp;ia=images) 
Is heidisql for windoz only?
One of us.
I guess I'm the only one who is irked by having a character on the left side of that symbol.
&gt; GC performance improved, in particular there should no longer be pathological cases. Can you expand on this? Sounds like you might've resolved some fun edge cases.
Did OP just C&amp;P from word in here?
You never defined it at the top of the function.
Came here to say this... and you beat me to it. RIP BeOS!
The enhancements to heredoc are particularly welcome given the popularity of third party template engines. Every so often I mention that I prefer heredoc over say Twig and usually get puzzled looks or questions about my mental health. Just wish there was an easier way to automatically escape variables which might contain special html characters.
Agreed... the more boring the release the more mature/stable it is. Perl's annual releases are pretty dull these days. If you've got a language that's got 30 years of history it get mature and "just works".
Honest, non trolling question: why? Purely academic/for fun? 
Would you be able to make a pull request against your own "genesis" commit? I'd be able to provide a line-by-line review tomorrow, maybe as workshop exercise for my students :-)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/lolphp] [The comments in this thread](https://www.reddit.com/r/lolphp/comments/8pm80q/the_comments_in_this_thread/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I want to create tools that increase programmers ability to work with big codebases. I tried to write a utility that visualizes call graph, and I did not find decent PHP parser written in Go. Speed is vital to parse big projects with their dependencies. It is why I have chosen Golang instead of PHP.
We need a php pride event, like gay pride but for php. :D
&gt; NPM is a pile of crap Why do so many people in PHP repeat this sentiment, then turn around and use composer/packagist and pretend it's different..? It's the same thing!
Ahh, you must have missed the days of bits of php code right there in html markup. 
No.. That's the thing. This is giving me flashbacks
I’m sorry, I don’t quite understand. Do you just want another duplicate branch? Couldn’t you just fork the repo?
&gt; Speed is vital to parse big projects with their dependencies. It is why I have chosen Golang instead of PHP. So why not use php-ast extension for PHP7+ ? https://github.com/nikic/php-ast
I personally can't wait for covariance/contravariance. I hope it makes it to PHP 8.
Perhaps, but there's still so many features I'd love to see in PHP. At least knowing that they're on the horizon would be good. Here's my list: * Method overloading. Come on, I would kill for this * Typed arrays. The only reason I'd want generics is so I can have typed arrays. * Some nice async would be cool * Everything as an object. `'string'-&gt;length();` please * Oooh, can we have a LINQ like C#? And yeah, I know we're likely to never get a fair few of those. But they'd be really nice. And quite frankly I just don't know enough to try and contribute them myself.
Some customers do. 
There a two kinds of programming languages: the ones people complain about, and the ones nobody uses. 
Why would anyone even need to say they love PHP? Seriously, PHP developers are not a minority in the world, its still one of the biggest and most used languages out there.. Conservatively speaking, over 50% of websites out there will run PHP. Yet, somehow PHP developers need to be ashamed? Because Javascript is sooo much better and makes so much more sense! Node.JS is a perfect platform of purity that never ever has any problems, and the javascript language has zero quirks! Java is great! If you like servers that constantly run out of diskspace because of the multi decigigagbyte log files that they produce for some retarded reason.. Also its really great if you like it when a restart of your site takes 2,5 hours.. Its great when you want slow molasses experiences on your website! I'm not even mentioning java on desktop *shudder*.. I edit PHP with komodo edit. It has its flaws, like any system, but it works pretty well.. One of my employees uses PHP storm, which apparently uses Java and on his core I7 8700 with 16GB memory and SSD its dragging its feet.. Checking top, I see Java taking 50% CPU and 20% memory while he is literally not doing anything.. Seriously, wtf? Anybody that shits on PHP because of any of the typical dumb reasons that people come up with are sad little losers that can stuff their opinion there where the sun can't reach..
Yeah, I can do it as well and then poke you there - will see if I manage to do it :-)
It is good advice, thank you, I did not consider this variant. But there is one more reason \- Golang compiles to the binary that does not require installed PHP at target OS. It is easier to distribute command line utils that don't have dependencies.
I kinda want the &lt;? to be in red though. /difficult customer
easy fix: https://www.redbubble.com/people/brakkum/works/32144331-i-php?asc=u&amp;p=t-shirt
no performance numbers to backup the claims?
&gt; The file_exists was checking the name instead of the path Yep, oops! &gt; and the === was = thus reassigning Ah, good spot - yes, I meant to use `==`. Triple equals is good too. &gt; } elseif (file_exists($controllerPath)) { Watch out here - this looks like it might be susceptible to the `$controllerPath` containing `..` directory traversal devices. For example, what would happen if your name was this? ../../../../etc/passwd That would mean your full path was thus: /var/www/src/controller/../../../../etc/passwd Now, there would hopefully be permission issues, but that would try doing this: require '/etc/passwd'; In other words, it would dump the system accounts file into the HTML output. Don't risk it - check that your controller name is safe first. Either have a character whitelist (regex) or have a string whitelist (array). 
Unfortunately, yes. Sequel Pro is a really good alternative on OSX.
Oh thanks. Actually on Debian 
JS isn't a complete OOP language (since it only has prototypical inheritance), but I honestly count that as a good thing. The JS community is leaning more and more to the FP side of things, which JS is really good for - I miss the capabilities when working with PHP. If you need type handling like the one in your link, you're doing something wrong. Just use explicit comparisons and you are fine.
They aren't really needed. The article could be summed up as: If your requirement isn't the absolute edge of speed then choose Redis. If your requirements are absolutely based on speed then the benchmarks would be largely useless since you'd have to run your own to find meaningful variances.
-Reddit silver 
Composer has been stable pretty much since its inception and shipped with lockfiles from the very start. It doesn't even have a company backing it and it's still a far better piece of software. That's quite different from NPM.
I thought WordPress devs would mostly use ms word, so 2nd place is fairly good for a phpstorm survey
Nice! But I think it would work better with a monospaced font.
php artisan make:auth lol
function head($items) { return reset($items); } I'm sorry, but that is just stupid. "Lets just make a function alias because reasons!"
I want an array that isn’t also a dictionary. 
There is, just like modern SPAs and using the virtual DOM. WASM has some frameworks out in various languages like Rust, C#, and more. Like: Rust: https://github.com/DenisKolodin/yew https://github.com/anowell/quasar C# https://github.com/aspnet/Blazor
I throw Error for anything that should be fatal, not caught. For the rest, I tend to combine related conditions under one exception with multiple codes.
It's actually a thing i'm making and selling locally.
I know this does not help you but it would be really good to push to use Swoole in production, because currently that is what Swoole in my opinion needs, it needs exposure in the western world, the more people use it in production, the better it can become. More support. Join the Swoole slack if you have questions.
HeidiSQL crashes a lot. That being said, I haven't found a better alternative so I continue to use it. Although on my Mac at home I use SQL Pro
I'm currently using PhpStorm with 5 files opened and the project directory contains more than 1000 files ( including /vendor/ ) , and its consuming only 380MB ram and actually 1% CPU ( Core I5-4200U ). 
I'm not sure if this is what u/mbadolato does, or if it is the best answer – but the first thing that comes to my mind, is [the custom error code parameter](http://php.net/manual/en/class.exception.php#exception.props) that is on the base `Exception` class. Personally, I think that what he does, combined with utilizing the error code parameter, is just fine. Sticking with the `BadFile` example; You would catch the `BadFile` exception type, and use a simple `if...elseif` or `switch` to handle the individual error codes. Further, these error codes could be abstracted with class constants on the `BadFile` exception, e.g., const FILE_NOT_FOUND = 1; const PARSER_NOT_FOUND = 2; const MIME_NOT_FOUND = 3; Hopefully that clears up some confusion on the catching side. :)
&gt;still no async primitives (fibers) &gt;not even short function syntax Colour me asleep.
...no.
Have I got news for you: http://php.net/manual/en/spl.datastructures.php
When you run that command, do you have a complete understanding of what components are generated, configured, and how they all interact to provide security? This user wasn’t trying to develop a solid proven security system, they were trying to get a better understand PHP. Your comment isn’t very helpful
Great. How do I tell if an array is an array? Let’s ask `is_array(ArrayAccess)` ...what’s that? It only works on primitive types? But `count(Countable)`does the right thing? Ugh.
&gt; suck a fuck Stop being 12.
&gt;each language has it's own porpose &gt;each language has it is own porpose
I just climbed in bed at 2:30am... having spent the last 12 hours trying to write a code-generator that can somehow teach phpstorm to understand array-of-type return values using late binding... and I'm still no closer. If PHP supported generics it would be a 5 minute job. $200 to the person who adds proper generics to PHP. 
MySQL Workbench. If you pick up and older version it works with MariaDB too.
this surprises you
Good comment. Top effort. Glad you swung by, boss.
&gt; so I can't see it to know exactly what you're talking about He's talking about exactly the reasons why you wouldn't want to do what you're suggesting.
Having just been battling exactly this most the evening... I resorted to having a command prompt open that robocopy'd the entire source tree of the package into the relevant (already existing) vendor directory whenever a file watcher detected a change. Kinda infuriating.
So I use Typescript, not JavaScript directly but I view it like any other strongly-typed language. It feels exactly like Java to me, and my recent project is Spring on the backend, which has (so far) not been too hard to work on, once I figured out how to get it running the first time. 
Sooo I'm kind of new to programming... why is PHP so disliked? I thought JS was the language everyone hates
This. If there's a version with a proper monospace font, instant buy from me.
Usually the ones who require 5 years of experience with a technology which came out 2 years ago.
I got you. https://www.alekseykorzun.com/post/53283070010/benchmarking-memcached-and-redis-clients
No. 
Do you have benchmarks vs PHP Parser on a large ugly file such as [https://raw.githubusercontent.com/vimeo/psalm/master/src/Psalm/Checker/Statements/Block/IfChecker.php](https://raw.githubusercontent.com/vimeo/psalm/master/src/Psalm/Checker/Statements/Block/IfChecker.php)?
No.
What would be the downside?
What would be the downside?
Polluting the global namespace. Now your turn, what would be the upside? And don't com back with "consistency". You don't use this language for its consistency.
Since you posed this question twice, I'll respond by phrasing my second answer as "Duplication", followed by a winky emoji like this one 😜.
My god the time put into this beautiful comment. 
Polluting the name, with functions *exactly* the same, but different style as an alternative. That's your argument? Why would someone name a custom function the same as an existing snakecased one, but in camelcase form. Your turn to answer this question. You clearly didn't think this through, amirite? &gt; Now your turn, what would be the upside? And don't com back with "consistency". You don't use this language for its consistency. TIL u/SaraMG decides why people use PHP. Here's a cool concept. Wait for it...languages can evolve overtime and improve. PHP has down this extensively, as it simply started out as a templating language of sorts (though a bad one). It also evolved from being in a procedural language, into a OOP one, modeled after Java. I hope you understand that languages can change over time, and this is one of the biggest complaints people have over PHP.
Ah, of course, because those old functions would vanish, obviously. We'd throw backwards compatibility out the window so that you don't break a nail typing an underscore. Glad you've fixed that. You clearly don't think things through, am I correct? But please, tell me more about the language I've been helping to build for the past decade and a half, I would ever so love to hear about it.
Didn't say a thing about getting rid of them. I think they should be kept as aliases for legacy purposes. But this would just give the option for people to have the ability to use PHP in a consistent manner, while allowing you to still use the old snakecased or nocased version.
Sequel Pro on Mac. Haven’t found a tool on any other OS or even for a different database that I like nearly as much. 
Hey SaraMG! Could you elaborate please on polluting the global namespace? I am curious why this would be such a bad thing. Any performance drawbacks?
You refuted namespace pollution though. But I see we are talking about different things. The more functions there are, the heavier that weighs on the interpreter. And yes, aliases count as functions. The BEST solution to this "problem" is a userspace library. It gives people exactly what they want (I assure you, whatever names were chosen, someone would hate them) and works on any arbitrarily old/released version of PHP. The fact that so few attempts at doing this in userspace are even /started/, let alone finished, says a great deal about how little they're really wanted as opposed to being a frivolous bugbear that's been coming up perennially since PHP 3.
It's one of the biggest complaints because it's the first thing that's noticeable but after some time you learn to accept it and realize it is a hugely insignificant part of building an application. I'm extremely grateful I didn't have to do two greps across a million line codebase for two different functions with two different signatures when I was migrating an application that was written in PHP 4, upgraded to PHP 5.3 then it was my turn to migrate to PHP 7. The PHP team have been working on things that are actually important to building robust, performant and adaptable systems, all while making that upgrade path as simple as possible. Things like this would create friction, not streamline.
Yes, because no offense, it's not a great argument. How many people have made a custom function called `strToLower()`? And even if they did, every new PHP version has aspects you may need to change in older code. It's such an unlikely scenario in the first place, and would be easy for the ten people in the world who have done something foolish like this. That's all I'm saying, and I respect your opinion.
That's a complicated answer, but the short version is "yes". Is the perf impact minuscule? Yes. So is any potential benefit. It would literally just be a crutch to not have to look up a function that you don't use often enough to remember off hand (and would therefore have to lookup anyway). So while the impact on perf is small, is there a payout for it? No. And let's not forget implementing it. I don't see imany php-src PRs. Or documentation. PHP has one of the best manuals of any language of its type. That manual is written by people. People who won't get excited to duplicate their previous efforts to document new functions that replicate old ones (even copying the old file and changing the name is work when you consider the number of functions impacted and the number of languages the manual is translated into. Oh, and did I mention the manual is in SVN. *shudder* It's not free, and it's of ridiculously dubious value. But hey, you wanna step up, go for it.
No. CamelCaseSucks.
There's an rfc open for this. Maybe you can help make that one pass?
I assume that this is the exact reason why this behavior is not supporter by Composer. The expected workflow is to develop a package - typically standalone or with a test project - and in that workflow there is no need to commit a different composer.json file. I use the path repo a lot when integration testing packages. But that is exactly the scenario: testing. No need to commit the composer.json file.
I feel like everyone has these strong, emotional opinions about which languages they prefer. They all have flaws and benefits, some more than others. But emotional tirades don’t serve to inform or create discussion.
Thanks for your explanation it makes sense! I really didn't mean to start a war with this question just asked by curiosity :)
&gt; stable &gt; far better piece of software Meaning what, exactly? NPM's official bin didn't automatically output a lockfile for a long time, that's true. It was optional. &gt; It doesn't even have a company backing it Isn't Packagist backed by a company? Look, I don't claim the NPM repository/bin is all that great. I'm claiming it's the same thing as Packagist. Or Cargo. Or any other package repo, basically. It's just got bad rep in _this_ sub because PHP programmers want something to pile up on and hate, the way they've been getting hate from other languages. I mean, the most vocal JS/NPM haters I've seen on reddit are Java programmers. Java's tooling's got adware out-of-the-box from its official download site. Or C++ programmers, who see package tooling as "unnecessary". It's not rational.
&gt; Method overloading I wish, but that's never gonna happen 
Well, PHP is widely used, easy to get started with, and "quick enough", so it looks great on the surface. And granted, its slowly becoming better (type hints, return value type hints.. etc). But, the language design... I'm going to let this blog post from 2012 explain it.. [http://me.veekun.com/blog/2012/04/09/php\-a\-fractal\-of\-bad\-design/](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/)
&gt; When you run that command, do you have a complete understanding of what components are generated, configured, and how they all interact to provide security? Yes lol
Same.
&gt; but after some time you learn to accept it You learn to accept that it's more work to fight it. There's no reason to blind yourself to the blatant laziness of not changing it in a major release.
I get that point, this is still a trade-off (static vs dynamic linking) but for this kind of (dev/integration) tool this is totally suitable. Note that php-ast is also distributed through PECL. 
Oh! I took the 403 error as evidence that my chmodding of the folder was serving as a deterrent to keep attackers away from the files - in short, I thought the code was working. Was that really not it? I will have to read more about chmod and file permissions. Per your suggestion I actually started looking at examples last night of classes to manage databases. Looked tough. But it would be cool if RLC came with that option.
I, too, use Typescript. It's the only thing that makes the whole show bearable. But stop and think about how we need Typescript to make JS sane. What other mainstream language has this?
I think people shit on php because it’s the worst designed language in history. You say 50% of websites are PHP like it makes PHP worthy of some regard - remember that massive record breaking DDOS Attack on GitHub? You can thank PHP for that - the majority of hacked servers that comprised the botnet run PHP and were vulnerable because of just how shitty/insecure PHP is unless you pull a Facebook and just rewrite the language from scratch. Being proud of liking PHP is like wearing a badge that says “I make poor decisions and don’t know what I’m doing.” JavaScript has tons of issues, but ECMAScript is actually a very elegant language. Unlike PHP, the ecosystem is actually improving instead of just putting a band aid over the cancer tumor like PHP 7. 
Assembly?
It is the same *concept* as Packagist and Cargo/Crates, I agree with that. It's the execution I've been sceptical against. NPM has had so many bugs (automatically upgrading to prereleses which contains bugs that breaks your entire filesystem...) and quirks and recommending bad practices (like `chown`ing /usr to your own user, which was in the official documentation for quite some time) that makes me really not want to trust it. It's not like it's just me, just look at Yarn's popularity for validation (even though it also has flaws, obviously). That being said I still think NPM is better than Python's pip, Go's ecosystem is a total disaster, and Java's is bloated and confusing.
What language transpiles to assembly?
Then the customer is an idiot who is going to get screwed by stupid developers who want to use PHP and then their server ends up being part of a botnet that attacks Gihub because PHP sucks and has a default setting of “lol what is security”.
&gt; it looks great on the surface Only if you think deformed swamp monsters with brain damage look great :)
Except lisp. It’s porpoises have porpoises. 🐬 
I’m calling the police
Welcome to PHP!
I disagree, it isn't laziness or an embarrassment, it's a language that started in a different place to languages such as ruby or python and those quirks are a necessity for backwards compatibility and smooth migrations. An example I've brought up before is all the subtle cleaning up for python 3 that is still an issue nearly ten years later. It's a minor issue that would increase complexity of migration, complexity of implementation, cause mass confusion and as SaraMG pointed out there hasn't been many attempts by the community to drive an implementation. If there was, for example, a PSR and a popular implementation then I'm sure the core devs would consider it, but the reality is that when attempts have been made people soon realize the effort isn't worth it. I personally would much rather the core devs focused on things that actually matter to me, which is exactly what they've been doing.
Tough? Come on, a database makes your live much easier. The code below is a working example, you can copy and run it as is. Compare the amount of code you need to load your json user (the code is clipped of course, but just to get you an idea) class User { protected $db; public function __construct(\PDO $pdo){ $this-&gt;db = $pdo; } public function load($username) { $stmt = $this-&gt;db-&gt;prepare("SELECT * FROM commenter where username=?"); $stmt-&gt;execute([$username]); $stmt-&gt;setFetchMode(PDO::FETCH_INTO, $this); $stmt-&gt;fetch(); } } $pdo = new PDO('sqlite::memory:', null, null, [PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION]); $pdo-&gt;query("create table commenter (username varchar(255), passwordHash varchar(255), isMod tinyint(1), isBanned tinyint(1), karma int)"); $pdo-&gt;query("INSERT INTO commenter VALUES ('someone', '', 1,0,0)"); $user = new User($pdo); $user-&gt;load('someone'); var_dump($user); As of 403, chmodding actually has nothing to do with protection. Your web-server would be unable to serve a file if it doesn't have an access to it, so it should always have. Means you cannot ptotect a web-accessible file by means of file permissions.
Sounds like a PHP developer
&gt; Oh, and did I mention the manual is in SVN. *shudder* Out of interest, are there any plans to move the documentation to github? There's been a few times where I've wanted to contrib to documentation, but the current faff of process just put me off. I'd have much rather been able to fork, alter, and then raise a PR on github.
I think part of the bad perception of PHP results of unskilled people particularly prone to XY problems and a unusually high disregard for proper application building. Nowadays it's improved a lot, because some very tough brains have been working hard to produce high level libraries and frameworks that forces you to be more considerate with what you are doing. But in the past, not so long ago, the norm was PHP files mixed HTML lines - very unreadable, more importantly though almost impossible to reason in terms of infrastructure. Whenever a non-PHP developer interacted with PHP code, they would always get this bad feeling of walking into a labyrinth with no end. Also, the interactions with PHP delevopers were, and mostly are, pretty bad: if you asked why they chose to build in that confusing way, you'd just get back something along the line "I just sit and code" while smiling about how competent and hard working they were. 
That's Pascal case! :) you meant camelCaseSucks What you really meant is kebab\-case\-is\-awesome What is even better is I had to convert between the two and I named the function camelToKebab
&gt; It's just got bad rep in this sub because PHP programmers want something to pile up on and hate I hate NPM. I'm a PHP developer, I'm a Frontend/JS developer and I'm a (react) mobile developer. I think its fair to say the hate is absolutely bugger all to do with what language someone writes, given in the same post you've blamed it on php developers and then on java developers. NPM as a whole is buggy and unpredictable. Thats not my opinion, thats how it is. Hence why so many people get pissed off with it.
When I load in a package with composer, I dont get 50+ other packages tacked on because the developer was too lazy to write a 4 line function to do something.
I found docker sync was really good most of the time. Like what op said I also had a brief issue with file permissions. But the main issue I had was when I was switching branches with many file changes, docker sync would sometimes silently fail and refuse to sync host with the sync volume. It kind of put me off of it for now. This was using the unison sync strategy and I saw others had the same problem. 
Counterpoint: Use is_iterable() / typehint "iterable" if you don't care about the implementation, or instanceof X / typehint X if the concrete type matters.
Haha damn, I had a lot of fun when I learned some basic PHP some time ago :p What would you say is the best alternative? Python?
Isn't that a feature that could go in a minor 7.x release as well? Or is there a compatibility break I'm overlooking?
I mean Java is harder to write than Groovy or Kotlin, that example comes to mind. Also some things develop imperfectly but if we have TS to make the dev experience great, then why does it matter if JS has extra baggage? If you can get your work done, I guess I feel like it’s all good, no matter how we got there. 
No, at least not that I know of. They rejected the variance/contravariance part of the [object-typehint RFC](https://wiki.php.net/rfc/object-typehint), don't know why. Now there's [this new one](https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters); let's hope it gets implemented.
I used HeidiSQL on Wine a few years ago. Worked pretty well !
The upside would be that it is easier to teach to new programmers. #1 complaint I get is that "I always forget what it's called" followed by, "I always forget what order the parameters are in" (looking at array_map vs array_filter, Grr).
looks like it
Why not? 
It’s not the most performant thing in the world, but I use YaLinqo which adds LINQ-like functionality to PHP.
Hello, I gave you some tips in the other thread (in r/codereview, *I was using my second account), but thought it might be more helpful if I show you real example. I forked your repo and fixed(???) it. You can see what I have done here: https://github.com/DvDty/laconia Also I created pull request into your repo, if you want to get those changes. Note: I have left the password resetting untouched, so you can give it a shot a try yourself. Hope I helped!
I had problems like this in the past, what i found out was that some applications not just want the proper headers, but want that you allow exactly what they asked for. So i updated the api side to look for the request headers and if they are present, just mirror them back in the response: * Origin -&gt; Access-Control-Allow-Origin * Access-Control-Request-Method -&gt; Access-Control-Allow-Methods * Access-Control-Request-Headers -&gt; Access-Control-Allow-Headers
This is what I have now, this is included on every page: ``` header("Access-Control-Allow-Origin: *"); header("Access-Control-Allow-Headers: *"); header("Access-Control-Allow-Methods: *"); header("Access-Control-Request-Method: POST"); header("Access-Control-Request-Headers: *"); header("Access-Control-Request-Origin: *"); ``` But it's still not working... I'm pulling my hair out at this point.
&gt; header("Access-Control-Request-Method: POST"); &gt; header("Access-Control-Request-Headers: *"); &gt; header("Access-Control-Request-Origin: *"); These are request header, your mobile app sends them and you have to read them on the api side and send them back with the proper response headers. Like this: if (isset($_SERVER['HTTP_ORIGIN'])) { header('Access-Control-Allow-Origin: '.$_SERVER['HTTP_ORIGIN']); } 
To build call graph I used [ircmaxell/php\-cfg](https://github.com/ircmaxell/php-cfg) but it work with [nikic/PHP\-Parser](https://github.com/nikic/PHP-Parser) only. I am going to implement CFG also.
[Here](https://imgur.com/a/WzvrwtI) is what I see inside of safari inspector when I send a request. It's still not going through.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/fYZ8iLL.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20e0dtmrg) 
In that image it shows at the bottom "No response headers", so for some reason your api does not send "Access-Control-Allow-Origin", "Access-Control-Allow-Headers" and "Access-Control-Allow-Methods" headers.
It definitely does because when posting using Postman, I see them come through. It's only when I run using Cordova that it gives this issue. 
That's not why you get 50+ other packages. You get 50+ other packages because of the `devDependencies`.
No this idea sucks. Inconsistency across code bases, I'd still use str_replace, while the other half of my team uses strReplace or stringReplace or whatever the new version is called. Adding these camelcase versions does nothing. I'd rather keep what we have and treat more things like objects if you're actually going to make a change. $myString = "hi world"; $string-&gt;replace("hi", "hello");
Try with Charles, and see what you api is sending back 
[This](https://benjaminhorn.io/code/setting-cors-cross-origin-resource-sharing-on-apache-with-correct-response-headers-allowing-everything-through/) article solved it for me. Thanks for you help!
So it was OPTIONS call right? With Charles you might had seen it too 
Yeah, I'll have to look into that... I hate CORS lol
In theory, the thing getting in our way is translations. We track the state of every non-English doc page against the commit Id of the English version it's based on. git uses completely different IDs. The problem is making the tooling work on both sides of the transition and updating ALL the translators (who are an extremely distributed bunch).
Maybe its the options call that occurs before the initial request.
The whole point of it is to be consistent. Older functions would just be there for legacy purposes. This would give you the option to have a consistent function names on your entire code base.
The question wasn't directed towards you. But sure, continue to act like a petty jerk online. Whatever suits you.
Yup, that's what it was
I haven't used heredoc in years, is there a use case for heredoc that doesn't make your code look malformed? 
At least not before functions/methods are changed to be case-sensitive, which probably won't happen anytime soon. It's always awkward using camelCase conventions when setStop() and setsTop() are the same function.
I want threads damnit, real threads, not the hacks we use or CLI only.
Lol your load times and cache stampede 
&gt; PHP has one of the best manuals of any language of its type. This is something that is not appreciated enough. I haven't seen any other documentation for any other language that is so simple to read and understand as PHP's documentation is.
&gt; is_iterable() __(PHP 7 &gt;= 7.1.0)__ Better two whole version numbers late than never, amirite?
Cross domain requires a preflight - the preflight is an automated OPTIONS request that checks if it can do what it wants to do in the request that follows. Now that this is fresh in your mind - what do you feel would have helped you most? What search terms did you use? How can we prevent someone from making the same investment of time the next time around?
Then make a class string or str (string is probably a reserved word) and make a static public function replace. You call it str::replace($subject, $search, $replace)
The new RFC's author explained the difficulty here (basically, out of order class definitions): https://www.reddit.com/r/PHP/comments/3x9d9v/questions_about_php_7s_return_types/cy2tmxs/
Why ? Not everyone is using camelCase. It's been_that_way for years in PHP there is no reason to change it. There are useless wrappers that exist that already to something similar: Arrays::merge($a1, $a2) Beautiful right? Longer to type, adds overheard, love it.
weird
That was pretty informative. At least it's a matter of when, and not if.
Actively seeking contributors and people wanting to join the core development team. 
You would only reach consistency by dumping the old names, which will cause a thousandfold more disadvantages than advantages. If you leave the old names in, you’re only adding to the problem of inconsistency with this idea. Don’t fix what ain’t broken!
You’re mixing up direct messages and public forum messages and you are taking this way too personally. It’s a bad idea and people are trying to explain to you why. Be thankful and learn. 
I've heard of putting makeup on a pig, but putting stuffing **** in ****? (Down votes in 3..2..1..) I've seen people make simple "mvc" plugins for WP.
It is no longer posible to have both libraries running at the same time. You might want to try the Wordpress api, or use Corcel, etc... In the end I chose to create a basic template based on the main site design. Ymmv.
lll give you that the language Java itself is quite nice. That also is the only positive thing there is to say about it. lt's a resource hugging piece of crap. Looks like you have missed the talk about why PHP is the way it is.. l'll agree that a good number of function calls in PHP are far from nicely done. This grew the way it is during the time that PHP was growing up, and unlike other languages out there, PHP will not try to break every project out there to better itself. So PHP has quirks. Show me the language that doesn't. lf languages are cancerous because of quirks, then javascript is effin Deadpool, its full of cancer and just somehow never wants to die. The vast majority of DDoS attacks in the history of DDoS attacks come from microsoft crap, have they already managed to write an operating system that doesn't have a "welcome!" mat for intruders? How many microsoft botnets are still out there? The quality and safety of a website does NOT rely on the language, it relies on the programmer. So again, you can stuff your "Ow PHP sucks because somebody made a bad website with it" argument there where the sun doesn't shine, l'm a PHP developer and l'm proud of it.
Discord Server: [https://discord.gg/WyVb2uM](https://discord.gg/WyVb2uM) Demo Site: [https://unit3d.org](https://unit3d.org/) (Username and Password is UNIT3D)
I've successfully lead a project where we integrated Symfony components into a WordPress plugin. The client had a giant monolithic code base, and rewriting from scratch is never a good idea, so we slowly hollowed it out and replaced components with Symfony parts and services, splitting up the monolith. From a developer experience, it looks like a Symfony project. From the perspective of Wordpress, it's a simple plugin. It's doable if you know what you're doing.
Actually looks pretty great. Too bad I've completely hopped on the GraphQL bandwagon so I don't see a use case for this.
Thanks, I started looking briefly at WordPress REST API and just looked at Corcel but they don't seem to have a way to pull the header/footer but more for content from posts/pages, etc. Maybe building outside of WP and theming to match is a better approach? That's why I'm inquiring as to what people are doing nowadays.
I’ve used a Laravel api to feed data into WordPress. Great way to extend the CMS without muddying the waters too much.
No, it was question for the original guy who posted this. Guess he was only capable of writing a two-worded response. I didn't see the purpose of the mocking reply by u/SaraMG. It was a failed attempt at humor. &gt; Be thankful and learn. What exactly did I learn? That one person has an opinion that it would be because it would pollute the global namespace? That person clearly didn't think her opinion thoroughly, as it's a meaningless concern. Very few people would have likely made a custom function with the *exact* same name as its snakecase built-in function name. And even so, every version has a migration guide, and it's not like it would be difficult to do. This just gives people an option to be consistent. 
There's also Themosis, if you want to tackle this issue in the other end https://framework.themosis.com/
The mocking is happening in your brain only. Chill out, dude. She is not just a random person and when a majority disagrees with you it’s not always group think. They might have a point but you are for some reason not open to seeing it. 
There are a bunch of ways to do it, but definitely not just making all the old functions camel case.
You're going to make things even more inconsistent with just adding camel case versions. http://php.net/manual/en/indexes.functions.php Look at all the functions PHP has. Are you just going to do array and string ones? Or every single function that has an underscore? You're just going to end up confusing people. Everyone already knows the underscore function names, yeah they aren't how you would name them, but they work. People complain more about their names than what they actually do. What are you going to do with ones like asort()? are you going to change it to aSort()? It's unclear from a naming perspective and is still going to be confusing. Does sizeof() become sizeOf() or stay sizeof() since it never had a underscores? Just keep it the way it is, if you're struggling with this it means you have a bad IDE.
Stumbled upon [koselig](https://koselig.github.io/documentation/) a few months ago when I almost ended up working on WP myself. I can say I happily dodged the whole project, but it might interest you.
I don't like camel case so I would rather this not be implemented, as an alias would be the first step to eventual deprecation.
Check out [Type Rocket](https://typerocket.com). Excellent framework for making WordPress easier. Also integrates well with Laravel. 
It's an unusual kebab meat, but I'd have to try. 
I like this idea the most so far as it avoids the complexities of "integration" as well as being able to develop and test the API separately. Thanks!
Have you thought about using Docker?
never used or even explored it.....ill have to look into it.
I'm actually quite chilled, thank you very much. Then what was the purpose of that extraneous comment? Yes, and I'm open to hearing another side. But I also have every right to disagree if I don't feel the points made are strong enough, no? Or am I obligated to always agree with people offering opposing views?
You don't find it compelling because you misunderstood it. If you still think it's meaningless, then I look forward to your pull request to update php-src (in a way which doesn't negatively impact performance), phpdoc, and all the translations. Thanks for volunteering!
I used to do this ages ago with Codeigniter (don't use it today) - its actually pretty trivial to use it in any framework. - all you need to do is load the WP Loader into your bootstrap and the entire API (code, not REST) is available to you. You can call the WP_Query, access the user object, and even call the header/footer rendering and menus/widgets. Just move WP to a folder (if you want your other Framework to take the load) - or your laravel/whatever into a folder if you want WP to take the routing - and just add this to your bootstrap require_once('../wp/core/wp-load.php'); You can't map Eloquent to the DB because WP like to be creative with their schemas, but its trivial to do a WP Query in a collection and map the results to a standard model
It's like Vagrant (which you may be familiar with because of Laravel Homestead) with the caveat that it can and often is used in production environments (unlike Vagrant). It's basically versioning for your environment and it'd eliminate the need for the 90% of your README.md to be dedicated to how to set up the environment.
The solution without generics was horrific =\ I ended up having to scan every class, looking for those which derived from the ORM base, and then generated a trait which can then be use'd to override the function and allow static analysis to pick up the correct return type. Nightmare! 
Not really an option. Much like the English language we're talking in, PHP has a rich amount of vocabulary borrowed from multiple sources over its long history, you might see it as a flaw, but it's a big part of what made the language so successful that it's the #1 server-side language on the web today.
I’m a JavaScript developer and I love vanilla JavaScript but the ecosystem is shit.
I'd like to see a proper Swagger implementation in PHP.
&gt; Polluting the global namespace What exactly did I misunderstand? You said the issue was polluting the global namespace. Now you're switching your argument to performance, when you know very well the difference would be far too minuscule. 
I plan on implementing generics but I need to make a pit stop at contravariant parameter and covariant return types.
No, PHP became the #1 server-side language on the web for its ease of use. It borrowed a lot of its functions from different languages, sure. But that has nothing to do with its popularity. I'm merely suggesting to add it as an option. PHP is heavily modeling itself after Java's OOP and JavaScript for most things in general. New functions in PHP and most modern plugins/libraries use camelCase. It would make sense to keep the old ways as aliases who will always want to stick with it. But now PHP will feel more predictable to users. Yes, a good IDE doesn't make it so bad, but it still would like cleaner from a readability perspective as well.
It's not that hard. Wordpress is still PHP just in a global namespace. Not too hard to inject your own code into the autoloader.
Is it a dedicated server or a vps? Which controlpanel is running on it? And what kind of OS?
I said borrowing was *a big part*, I never said it was the *only* part. "Ease of use" is 100% right, but "ease of use" only happens after a thousand different things finally come together and work right together.
It is hosted on AWS EC2 and OS is ubuntu 14.04 Also edited the main post to include these details
You already have lots of answers. Just wanted to add: even in code review without IDE reporting me this I would require explicit initialization 
If you know your code runs on 7.2, there’s no reason to use a version older than that. 
Yes, you have every right to believe that a bad idea is a wonderful one. The thing is, you think it’s wonderful because it’s yours. Think about it. Why would group think make us say that this is a bad idea? We all love consistency, you can be sure about that. There are much, much better reasons to dismiss it. Number one being that your idea would either break PHP’s backward compatibility or lead to more inconsistency, not less. But hey, if you don’t want to see that, sure, blame the crowd and feel right. Whatever floats your boat. 
You can install composer locally in project direcfory. Take look into composer docs
If you upload the vendor/ directory, AND have the same platform (php version and necessary extensions) then it will just work fine if you upload everything over ftp.
When you want to go live or initialize a new staging for example, you would only need the composer.json file &amp; run *composer install* to start downloading all needed packages located in vendor directory.
That, or he could turn notices on and get an idea where incompatibilities are.
I recommend you doing following: - User composer to manage your dependencies (check) - Check in composer.json and composer.lock into your repository - Don't check in the vendor folder! - Use a deployment tool like deployer, which uploads files via SSH or FTP and also does things like composer install - If thats not possible, only upload your application files and SSH into the server and do a composer install - If thats not possible you have to use FTP, but I don't recommend that, as it takes quite a long time to upload, and you probably gonna miss some files when you do a composer update locally.
TLDR: Fusio covers all important aspects of the API lifecycle so you can concentrate on building the actual business logic of your API. * **Versioning** It is possible to define different versions of your endpoint. A concrete version can be requested through the Accept header i.e. application/vnd.acme.v1\+json * **Documentation** Fusio generates automatically a documentation of the API endpoints based on the provided schema definitions. * **Validation** Fusio uses the standard JSONSchema to validate incoming request data. * **Authorization** Fusio uses OAuth2 for API authorization. Each app can be limited to scopes to request only specific endpoints of the API. * **Analytics** Fusio monitors all API activities and shows them on a dashboard so you always know what is happening with your API. * **Rate limiting** It is possible to limit the requests to a specific threshold. * **Specifications** Fusio generates different specification formats for the defined API endpoints i.e. OAI (Swagger), RAML. * **User management** Fusio provides an API where new users can login or register a new account through GitHub, Google, Facebook or through normal email registration. * **Logging** All errors which occur in your endpoint are logged and are visible at the backend including all information from the request. * **Connection** Fusio provides an [adapter](http://www.fusio-project.org/adapter) system to connect to external services. By default we provide the HTTP and SQL connection type but there are many other types available i.e. MongoDB, Amqp, Cassandra. * **Migration** Fusio has a migration system which allows you to change the database schema on deployment. * **Testing** Fusio provides an api test case wherewith you can test every endpoint response without setting up a local web server.
Merge your project over to a beta domain and have that run on PHP7, switch on error reporting, fix the issues and then switch it back to the original domain and upgrade the PHP version. 
Perhaps [PHP Inspections EA](https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-) can help with that? It parses code for exceptions thrown, and hints you for uncaught exceptions. You can either catch them or allow to bubble them by annotating that exceptions are thrown. It helped me a lot with legacy libraries that did not do documentation that well.
Apparently I already starred the repo, thanks for the reminder! Might need an API soon, this will be one of the options to consider. 🙂
How about taking a look at the [corresponding question and answer on Stack Overflow](https://stackoverflow.com/a/21921309/1172545)?
How about taking a look at the [corresponding question and answer on Stack Overflow](https://stackoverflow.com/a/21921309/1172545)?
Pit stop all you need, my friend. We all certainly appreciate all the time you've already put into both of them. I regret I don't have the time available to learn the C internals to a level that I could contribute directly. 
This works fine *until* the server is on a different version of PHP, or there are developer dependencies that shouldn't be installed on production, or composer optimized autoloader should be generated, or... Actually it doesn't work at all. Do the right thing and run composer on the server that will be hosting. (Or a build server. Baby steps.)
Laravel 5.5 (5.4?) brought a group of new i18n functions/helpers, which are named like several Wordpress functions. It is actually possible to have both running at the same time. Wordpress should be bootstrapped first: https://www.adampatterson.ca/2017/building-an-api-using-laravel-and-wordpress-part-1/
Could you elaborate a bit more on "doesn't work at all"? If you are correct then um-teen thousands of apps currently in production will suddenly stop working. Which would be bad.
&gt; AND have the same platform Is a bit gotcha. This assumes a whole bunch of things: same OS and PHP version being the two biggest ones. Attempting to copy the `vendor/` directory between a development machine and a production machine is asking for trouble. The correct deployment strategy is to install composer on the host server (or build server) and run `composer install` on it. One of the most worrying situations would be if `require-dev` dependencies were copied to a production server, as has [happened in the past](http://phpunit.vulnbusters.com/).
Unless he runs a controlpanel on the production server that has issues with the new php version... If you are not using a controlpanel you should be able to upgrade without problems.
Looks interesting, if only the proposer could figure out a more descriptive name than "fiber".
You want them to invent their own term, rather than using the standard one? https://en.wikipedia.org/wiki/Fiber_(computer_science)
Thanks, was unaware.
Cool proj, nice work
Not switching my argument. Also, not responsible for explaining how virtual machines work to a rando on reddit. Particularly one who'd rather troll by picking out individual lines when the context for such lines are available in the same post. I'm done with you, troll boy.
This would be excellent. Finally some lightweight concurrency in php. 
Not my fault you essentially defeated yourself with contradicting ideas. &gt; I'm done with you, troll boy. Ah, I see the pot is calling the kettle black.
&gt; Why would group think make us say that this is a bad idea? That is an odd phenomenon on Reddit, I agree. &gt; Number one being that your idea would either break PHP’s backward compatibility I already explained this several times, as it's a not a practical threat. And of the 0.001% of users who weirdly chose to make a custom function with the *exact* same name, but in camelCase can either follow a migration guide (like in every version) or not, as the alias would still exist. Now let's here number 2, 3 and 4.
I added to do this, then there were hickups on the production nodes when trying to install the vendor files... So now I keep all nodes the same ( php, packages, etc) , and push the vendor folder and everything over.
factorial without using loop : [https://gist.github.com/azjezz/d4a468396dccea3b594836778908a5e2](https://gist.github.com/azjezz/d4a468396dccea3b594836778908a5e2)
thank you
holy sht thanks!
Yeah its definitely possible. I recently had to work on an legacy wordpress system, so i integrated the symfony framework. After that i moved more and more functions of the application to symfony. Just do it step by step and you will be fine
This. Remember, PHP was an HTML templating engine before it turned into an actual multi-purpose programming language.
Is there one image on the page or multiple? Why not use cURL?
I think /r/phphelp is better suited for this. I would try your question there to be honest.
Oh sorry I didn't think about that I'm gonna move thread
You’re not understanding the issue, nor the points made by me and others. Now I’m not blaming you for that. But I do blame you for not even trying to understand. Your self confidence is completely misplaced. Read back the comments in this thread a few times if you really want to understand why your proposal is a bad idea. And if you don’t, well, there’s really no point in talking to you. You should be a bit more modest and accept that maybe, once in a while, you’re mistaken or failing to understand something. No biggy. 
Let's see what happens to a node.js system when a few terabytes per second of requests are thrown at it before we say 'this would never happen to javascript because javascript is better'
I would guess they are aiming for a simple recursive function. Should be something like \&lt; 10 lines all in all. Have fun. :)
Have you seen [PHP: The Right Way](https://www.phptherightway.com) yet?
Yes, interesting to see that it has simultaneous bidirectionality.
Might be better to use a build server and deploy artifacts from it.
I would say they want to see a simple recursive function, not a loop in disguise using a function like array\_walk.
I've got that in a browser tab and it's number one on my reading list. Just wondering if there was any other resource. Or perhaps a framework that's easier to transition to than jumping straight into symfony/laravel. ( would starting out with codeigniter be a good idea? )
I really like the _idea_ behind this, but am bothered by the pointlessly abstract example. Seeing an actual real-world example (likely involving network access or disk i/o) from the people making the proposal would make me feel a lot better before potentially cementing the interface in the language. I also strongly disagree with this bit at the bottom: &gt;&gt; Why not introduce helper like Fiber::alive(),Fiber::running()? &gt; &gt; And as a language feature, Fiber should only offer the essential API. User can implement these methods in user land code easily. This just guarantees a bunch of inconsistent user-land wrappers with slightly different semantics, then a bunch of debate via the PSR folks and a community standard somewhere around PHP7.6. For those APIs specifically, there's no documented way to access the state (looking at the actual patch, there appears to be a `status()` method on the class). This would get a no vote from me in its current state if I had voting rights. But it (most likely) wouldn't take a whole lot to change that.
I think it’s best to decouple yourself (and the applications you build) from a specific framework. Frameworks come and go. If you limit the influence of a framework on how you build an application, that’s a huge win. 
I'm pretty decoupled already, lol. My framework just handles error display tracking, database calls, the header and footer of a page, and has a couple helper functions. That's all i've found i need. The rest is just big function libraries that get loaded depending on the task. Probably the smallest framework you'll ever see. I'm more concerned that i'll superficially write code in a frameworked system and start doing things like write the database call right before the line of code that needs it, which is what i currently do today because it's easy to go 'oh, we got that data, then we do that' while visually scanning the code from top to bottom. But it's my understanding that modern php programming is based on distributing elements across files and abstractions rather than flowing everything from top to bottom, so.. I'd like to 'get' why the industry seems to be going the OO / MVC / framework way and adapt.
I would stay away far far away from Laravel (possobly Symfony, i dont have any experience with it as a ftame work) due to bad programming pratices.
I don't get why you are getting downvoted. This is an interesting thread.
Can someone maybe ELI5 what this can be used for? I read the usage demo and the explanation, but I really didn't catch what this is actually useful for or how it should be used.
Would you mind elaborating on why? I think i like symfony better because the documentation and marketing seems more oriented towards programmers than 'web artisans'. Appeals to 'right brain' thinkers is a pretty big turnoff. But most of the shops are looking for laravel experience.
Ok, then explain it to me. All you've done here is make extraneous remarks. Read back a few comments in this thread and you'll realize it too.
This is exactly the kind of project that my book, [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp), was written for. The book will show you how to modernize your application by extracting and replacing its legacy artifacts. It uses a step-by-step approach, moving slowly and methodically, to improve your application from the ground up.
well, i don't know why i didn't think about it in the beginning, but i have added a recursive method. 
check the recursive method. i guess its more efficient, thanks @philiplb [https://gist.github.com/azjezz/d4a468396dccea3b594836778908a5e2#file\-recursive\-php\-L4](https://gist.github.com/azjezz/d4a468396dccea3b594836778908a5e2#file-recursive-php-L4)
So for Laravel, it breaks SOLID all over the place. Statics everywhere, which to make it testable, the extra layers needed can slow down automated testing. Let's not get started on their push for their active record pdo (I know, I can use whatever I want to use and bypass it, just the constant push of it). Improper naming of patterns (they are not facades). And there are just some things that make me personally make me sigh, but not technical issues, just personal prefrences. As for Symphony, I've only used some of their modules. I like the no framework idea, which is where you build your framework from components from composer. See https://github.com/PatrickLouys/no-framework-tutorial
I'm not convinced of the use case within PHP but I too would like to see a more concrete need. I'm also concerned that the reasoning is based more upon the fact that it's clearly stated that this is copied from Ruby and Lua. First, just because another language defines an interface a certain way does not mean every language should clone that interface. It should be evaluated on it's own in the terms of the value it brings in solving problems and saving time. I'm not trying to harp on the work, I think it's good progress, but I'm concerned this is a language copying a feature of another language just to say they can. I'd like to see more consideration put towards whether they should.
You might be interested in taking a look at [Hexagonal Architecture](http://wiki.c2.com/?HexagonalArchitecture). 
Fibers do what's called "cooperative multitasking". After reading this blurb from Wikipedia, tell me that this would not be a **very dangerous** addition to PHP, seeing how poorly developed it frequently is: &gt; Early multitasking systems used applications that voluntarily ceded time to one another. This approach, which was eventually supported by many computer operating systems, is known today as cooperative multitasking. Although it is now rarely used in larger systems except for specific applications such as CICS or the JES2 subsystem, cooperative multitasking was once the only scheduling scheme employed by Microsoft Windows and Classic Mac OS to enable multiple applications to run simultaneously. Cooperative multitasking is still used today on RISC OS systems.[3] As a cooperatively multitasked system relies on each process regularly giving up time to other processes on the system, one poorly designed program can consume all of the CPU time for itself, either by performing extensive calculations or by busy waiting; both would cause the whole system to hang. In a server environment, this is a hazard that makes the entire environment unacceptably fragile. 
Exactly this, and why languages like Go that have it as a first class citizen spent and spends a lot of time getting their scheduler optimized.
My job made a extension based on corcel to build laravel website's [https://github.com/WP4Laravel](https://github.com/WP4Laravel) which is pretty cool and easy. or you can use corcel to build a connection to let laravel use the wp database 
Well, it's really been well explained throughout this thread, by myself and by others. But here you go, a summary just for you ;) So there's a whole bunch of functions with their names in snake_case in PHP. You are proposing adding their CamelCase variants, with the goal of increasing consistency. I don't know what is inherently more consistent about CamelCase than about snake_case, but let's consider your proposal. I hope we can agree that we have to consider the cost vs. the gains to decide whether it's worth it. If we already disagree on this, do let me know. If we do what you propose, we can choose to leave in or leave out the legacy snake_case functions. You proposed leaving them in, but let's also consider the option of throwing them out so we really think well about your proposal. First off, the costs. - As /u/SaraMG pointed out, it is a big job to make this change. Not just the programming, also updating all documentation. This is a big cost in both cases (but also as she pointed out, you can do this job on your own if you're convinced it's worth it). - If we throw out the old snake_case functions (which, really, we should, if this is all about consistency), this now means that at least 50% (but probably closer to 80%) of the web can not easily upgrade to the next version of PHP. This is a huge price to pay. Not only will it cost a lot of hours for programmers worldwide to upgrade to the nextVersion (economic damage), also a large portion of them simply *won't*, so they're stuck on an old version of PHP, keeping them open to security vulnerabilities (or should we maintain two versions of PHP?), decreasing consistency between PHP projects worldwide and risking the adoption of the new PHP altogether. Altogether, this is a huge, huge cost. But to be fair, you didn't propose this. You wanted to keep the old snake_case functions as well. - If we keep the old snake_case functions as you propose, the number of function names in the global namespace doubles, while the quantity of functionality remains the same. Your programmer intuition should tell you that this is not progress. Also, this has a small performance impact on PHP (which, on its scale of use, still amounts to a significant amount of extra CO2 in the environment) and is what SaraMG referred to as global namespace pollution. But above all, as /u/domdomdom2 pointed out, this proposal is illogical because it goes directly _against_ what you want to reach, namely, consistency: we can now *choose* between snake_case and CamelCase versions. Some projects will use one version, some will use the other. Within a project, some programmers will also make different decisions. You can say what you want about the whole world adopting CamelCase all of a sudden, but you *know* it won't happen, even less in existing projects. So, this option effectively _decreases_ the consistency of PHP and therefore does not bring us any closer to the goal you stated to begin with. The proposal in itself is illogical. This is the argument I mentioned in one of my comments. Now, the gains: - We now have the same functionality as before, only in CamelCase instead of in snake_case I'm not really sure how this is an advantage, but I accepted the premise that your proposal had value, so I guess this would be a gain. Any programmer with a sane mind and an understanding of PHP's popularity would see that this is not a viable option by any means given the huge costs and risks incurred. Let me add something: in another thread in your post history, I see you scoffing at 'programming correctness' (w.r.t. the discussion about the use of empty()). This, and your statements in this thread, signal to me that your understanding of programming is nowhere near high enough to be making the statements that you are making to the people in this subreddit. Please note that I have only made use of arguments already given in this thread (I have given references) - you could have puzzled my summary together easily if you had been open to it. I'm sorry to say it so roughly, but you seem to lack the competence to see the limits of your own competence. And that is OK, we've all been there, and *are* all still there, at different points, I think. Therefore, it would behoove you to take a stance a tad more modest in the light of the development you have ahead of you. As do I. But I'm not here blaming smart, friendly and honest people of groupthink when they're trying to help me improve.
It doesn’t get much easier than laravel in my experience. I would read up on design patterns and read the laravel documentation top to bottom then just start building something. It might be helpful to look over some open source projects to see how other people are doing things as well. Have you tried doing something simple with oop with no framework as well (for a learning experience)? Also checkout laracasts and I remember tutsplus having some decent oop videos and challenges. Good luck
Fibers cooperate within a single process. Your quote is about cooperative multitasking between processes. Apples and oranges.
in single quotes php does not parse the string for variables. in double quotes it searches for hidden variables. of course we knew this fact but never ever realized the speed aspect
Why did you break
your post in half?
the speed aspect doesnt matter
This is a micro-optimization that shows now real impact on an application.
Adminer.php I love it, x-platform because it's programmed in php. It's like the younger brother of phpmyadmin, except it's faster, more efficient and straight to the point.
&gt; I'm sorry to say it so roughly, but you seem to lack the competence to see the limits of your own competence. Considering your behavior starting from your initial comment, you are certainly not sorry. You stuck your nose into this only to make ad hominem attacks on me. In fact every single one of them contains at least one personal attack. I suppose logical debates aren't for everyone. Let's get to your arguments. Too time consuming? That's a preposterous justification and an erroneous claim, as I'm literally just talking about adding an alias. &gt; If we throw out the old snakecase functions Your words, not mine. I want to keep these as aliases indefinitely, until people feel comfortable migrating. Next. &gt; which, on its scale of use, still amounts to a significant amount of extra CO2 in the environment I literally have no idea what you're even talking about. &gt; Within a project, some programmers will also make different decisions There's this thing called a style guide, ever heard of it. Projects will either follow something like PSR or agree to a consistent one for the project. Not very hard. Said this in a different comment, but PHP is heavily modeling itself after Java's OOP and JavaScript for most things in general. New functions in PHP and most modern plugins/libraries/frameworks use camelCase. It would make sense to keep the old ways as aliases for people who will always want to stick with it. But now PHP will feel more predictable to users. Yes, a good IDE doesn't make it so bad, but it still would like cleaner from a readability perspective as well. &gt; But I'm not here blaming smart, friendly and honest people of groupthink when they're trying to help me improve. You and I have very different interpretations of friendly then. This whole thread is filled with people like yourself giving opinions in a smug way, but somehow are delusional. Someone writing simply "no" and then another person copying and pasting it as a duplicate comment is certainly not "smart". &gt; signal to me that your understanding of programming is nowhere near high enough to be making the statements that you are making to the people in this subreddit Keep the personal attacks coming, while ironically having a holier-than-thou attitude. It's really helping your argument 
Next up, print vs echo. 
die() vs ded()
This reminds me of rubies fibres. I like it
dd() vs die()
&gt; you are certainly not sorry. I really am. It just seems you're beyond reason :(. &gt; That's a preposterous justification and an erroneous claim You're ignoring SaraMG's comment. As a PHP developer for 15 years, she will know better than you, I am sure. &gt; I want to keep these as aliases indefinitely, until people feel comfortable migrating. Next. Which is really even worse than throwing the old ones out, if this is really about consistency. &gt; *(w.r.t. CO2)* I literally have no idea what you're even talking about. Servers use energy, which (until all energy is CO2-neutral) causes CO2 going into the environment. Less efficiency = more CO2 for the same workload. You think I'm talking bullshit? PHP is HUGE, so this stuff matters. Right now, PHP7 adoption is at 5%. Compared to PHP5, his has caused a saving of 375 million kilograms of CO2 per year already. At 100%, this will be 7.5 billion kilograms. That is a lot. So efficiency matters, every little bit counts. ([source](https://youtu.be/rKXFgWP-2xQ?t=15m45s)) &gt; Someone writing simply "no" and then another person copying and pasting it as a duplicate comment is certainly not "smart". I wrote a whole lot more than 'no' and only duplicated when you asked me to. My argument is 100% rational and logical, yet you still won't accept it, because apparently it's very important to you to be right. I honestly don't know how further to respond to that. &gt; not everyone will have the same opinion. Crazy, right??? Here's another crazy thing: some things are a matter of fact, and not of opinion. If your opinion says that introducing an extra possibility somehow creates more consistency, your opinion simply makes no sense. It *would* make sense if you wanted to throw out the old functions, but you won't even think about that or respond to that. I'm leaving it here, I did what I could. Best of luck to you!
See http://www.phpbench.com. 
Looks like a terrible idea with even more terrible API. Why was it made to be "static methods"? Down we have namespaces for that now?!
It seems like you're a broken record. You seem to continue with your ad hominem remarks consistently, however. Hahahaa your concern is that a few aliases will cause major changes in CO2. Cute, but arguments like that aren't going to fly in logical debates. The performance difference is obviously too minuscule to make outlandish claims like this. The "no" comment was in regards to the two original commenters, not you. Yes you provided your view, and you I felt they weren't strong point. It's ok that someone doesn't agree with you. I'm sorry you live in a fantasy world where everyone needs to have the same opinion as you. &gt; It would make sense if you wanted to throw out the old functions, but you won't even think about that or respond to that. Yes, the ultimate goal would be to eventually only have one consistent style of camelCase. The only reason I believe it should keep the older version for a while is for an easier migration. This is an issue because of PHP's troubled past of not having the foresight to have a consistent style. My solution of keeping them until programmers feel comfortable seems reasonable in my opinion. But again, unlike some people, I respect people's opinions. Best of luck to you!
This, I second this motion. Fibre is different than these use cases.
Ruby has fibres? Well now I think I need to devote some time to Ruby. 
Through ReactPhp, an async library based on an ongoing event loop and sockets to listen for requests. Essentially, you make a tiny server.php page and inside it you start a loop that goes indefinitely. Before starting the loop, you also define the 'events' to listen to and the 'reactions' to those events. It's a single process worker (or multiple, actually) that you just run and let it do it's work. After that, you tell Nginx (or other webserver) to act as a proxy for the requests, but instead of channeling php requests to PHP-FPM, you point them to the sockets you opened with your server.php. Et voilà, you made the simplest of the php servers. It's (a lot) faster than PHP-FPM, mainly because you don't spawn a process every time but you use the same one(s) again and again. And this is also the downside, if you don't code well enough you'll run out of memory reaaaaaally soon (perma-process == no fresh memory reallocation) To address the async part, ReactPHP is itself async through it's event loop and stream components, so if you have to wait for I/O operations (disc write/read, external requests of any kind, ...) It goes on doing the rest of the work. It's asynchronous, NOT parallel. Unless you spawn more than 1 worker, in which case it's actually parallel, with some Nginx tweaking to load balance the requests. Pretty neat stuff actually.
Adminer.php and you are a godsend. Thanks for the tip!
That just means it would be inappropriate for shared hosting where each user could 'fight' for resources. It isn't relevant for modern systems where the whole server is owned by a single company. 
https://www.tentacode.net/ultimate-print-vs-echo-benchmark :3
Haha. 
What makes this different from coroutines?
Keywords "Laravel" and "WordPress" basically.
If we can’t review your “fast and simple” framework then we can’t convince you why another approach might be better. A big reason for open source OO frameworks is not so much the OO part, but the publicly reviewed and improved by many people part.
&gt;one poorly designed program **can consume all of the CPU time for itself** Any language who has multitasking/concurrency where this doesn't happens? Please, stop doing this and give me the knives!
http://phptherightway.com is a very good resource to start with
Thanks! Looks like a decent starting point.
That problem can easily be solved by finally nuking translations \o/
This is the most important reason that &gt; Providing it as an optional extension, just doesn't make sense. is just wrong.
Read all the migration guides starting with the last version you used. In combination they list all important language changes: http://php.net/manual/en/appendices.php
The main reason I use it is because I don't have to hold shift to type it.
https://laracasts.com/
Hey! Wow, I've actually read through your PDO site before! I thought I even had one page bookmarked, but now I can't find it. It was super helpful for me when I was getting a MySQL database working with another site. Thank you so much for putting all that information out there. It's really well done. And thank you for your example here! I'll keep at it, to try to have a database option with the RLC code. I really like your sqlite suggestion, because it relies on file writes and reads (if I understand that right) but I guess it's not default enabled in most PHP versions; that makes me wonder if I should lean toward MySQL since that seems more common. Anyways, I'm really grateful for your help!
&gt; Seeing an actual real-world example (likely involving network access or disk i/o) from the people making the proposal would make me feel a lot better before potentially cementing the interface in the language. This is why I will vote no if it doesn't get withdrawn soon (it's honestly not ready and I don't mind it being withdrawn). Until several higher-level tools have been designed *and* built on the fiber I can't consider the design of the low-level fiber sound. This is really important to get right in this case. This isn't some arbitrary `array_*` function; this would become the foundation of all `async`/`await` code.
Hi! Thank you so much. I’ll take a look and try to implement your changes myself so I understand them!
DataGrip, part of JetBrains' software suite. Works with other databases including MySQL.
Very sure that your having issue with connection pooling. This is Swoole with connection pooling: https://www.techempower.com/benchmarks/#section=test&amp;runid=a7f29eb8-862b-49ce-9789-ff72a6410800 Its the fasted MySQL framework for fortunes. Without connection pooling the Mysql database started to reject connections because swoole was too fast in requesting new connections. Lets compare Swoole vs NodeJS: swoole 277,501 nodejs-mysql 91,885 ... sorry but no way that your results are 50 to 70% lower then NodeJS without a issue in your code base. If you look at the Single query / Multiple queries there it is still slow because the prepare statement is also hitting Mysql limits ( solved in the next test run). Swoole is a system that you need to know the tricks for. Connection pooling, prepare statement pre-pooling, ... If you do not do that, you will hit the database limits and time out. Not Swoole its fault. If you do not know these issues, then yes, your results will suffer. Swoole is not your typical PHP way of thinking.
Well, i have already started the project in nodejs, but i still want to try swoole for another futur project. I problably did something wrong as you said but i didn't had the time to investigate and swoole documentation is kind of lacking about those subjects. There is a lot of useful infos there &gt; [https://github.com/swoole/swoole-src/issues/1594](https://github.com/swoole/swoole-src/issues/1594) and subject like connection pooling, prepare statement, pre-pooling, etc should be addressed in the official documentation. Also, my problem was with redis, not mysql. I still think Swoole have a bright futur but in the end of the day, i have to ship something at my job, and nodejs and npm package like ioredis and mysql already have connection pooling system out of the box.
Interesting, this is my first post to this subreddit so not as familiar with the “culture” here yet. I’m grateful for all the replies and insight so far. I’m just here to learn so thanks everyone.
Is php open source if yes does have it github page to see whats going to change?
It is a building block for async/await style code. For instance you could start up a fiber to issue a non-blocking IO function like a read or write, and then yield for the caller to do something while you wait for the read or write to finish. There are some details that make them different from generators but this is sort already possible today with generators so it makes you wonder how valuable fibers would be in their current form.
Can you automate with php? 
No. Not it's not. It makes a negligible difference during COMPILE time, but it makes zero difference at RUN time. You're running with opcache enabled right? If not, then you have much bigger problems. And same with print. Print with an unused return value IS echo.
[removed]
Your next reading assignment is "Premature optimization is the root of all evil".
I wouldn't use Laravel because of its non existing performance.
https://github.com/php/php-src
[removed]
Spread the love, brother!
I've did it several times (and still using it for simple tasks). It depends. What's your goal?
HeidiSQL on windows, Sequel Pro on mac (it's free) and DBeaver on linux, windows and mac.
Hi guys, I started working on an automation site designed especially for developers (and I will probably start with a php stack, the reason I'm posting here first), that will allow devs to easily and rapidly configure a new VPS with whatever stack they need with whatever versions or settings they need with a few select boxes or trough the API. In a few words, you will allow access to the new/empty vps trough a ssh key, select what php version you want, apache/nginx, composer and so on, specify the project git link and specify any custom commands that should run on deploy, our software will do the rest and you will get a fully functional machine with the project deployed within minutes. In the future, the plan is to allow you to create even the virtual machines/services from all major cloud providers and even setup a fully HA stack with a few clicks. Any thoughts or feedback would be greatly appreciated. Thanks.
Hello :) I helped to launch a very large private torrent community many years ago (*in October of 2007, if that gives you an idea of the tracker). These type projects are great. I do know that to grow many more users, we had to start using memcached and some other tricks. Fortunately we had a lot of great minds on the team (I just did a lot of the launch stuff, and my PHP and other skills back then were absolute shit, but still got the job done). &lt;3 best of luck and anything I can do to help, just let me know.
Is there any books i could read to train my skills, when I’m not on the computer ? 
Jeffrey is the king. 
What type of books are you looking for? Something PHP specific or language agnostic?
This is not even a micro optimization. There is no optimization at all
Your homework is to think on what PHP is searching for in single quotes. And then to think does it matter what to search for
This is the most stupid site in the world, measuring how long does it take to do nothing
Something that can help me learn to code better. Not sure if that’s specific enough
I often find myself writing shell scripts in PHP, especially tasks for your project, like install and deploy scripts 
What helped me a lot understanding modern PHP was writing an own framework, then using a modern Framework (Symfony), then trying to write an own framework again. Not to actually use it, but to understand the principles. Generally, writing and publishing some small libraries, regardless of what they are, gives a good understanding of how modern PHP applications work. Write Unit Tests with 100% coverage to understand „Testability“ Deploy a Symfony or Laravel application to AWS to understand „Scalability“
Sqlite is as well as default as mysql, so you can safely rely on it. Moreover, SQLite is largely compatible with mysql, so you can even try to make a cross-database solution, that works wither with sqlite and mysql. It isn't like it will work out of the box but at least you can make it with sqlite and see it it can be ported to mysql
docker?
And this is exactly why you shouldn't go to wikipedia for your information. You're comparing operating system scheduling to in-process multitasking. 
If it isn't already, it will probably be removed from the voting phase according to the mailing list: [https://externals.io/message/102214](https://externals.io/message/102214)
`"Hello $person!"` is actually faster then `'Hello ' . $person .'!'` the last time I checked.
si senior everybody parlez deutsche
Just a tiny nit-pick. You're probably transitioning from procedural programming to object oriented programming. Functional programming usually refers to the style of programming used in languages like Haskell, Scala and Erlang.
Check robo.li or phing.info
Thanks 
Why not just keep it as an extension?
Not in the first iteration, but for sure after the MVP, especially if many users request it.
Ansible?
Did you have a look at your "competitors"? What will you do better than them?
The backend automation, yes.
Not aware of any competitor that allows such configuration especially with your own server. If you know any, please share, would love to look them over.
Docker?
still dont get it. keeps me bothering even tho i dont need the answer anymore :/
I'm don't think this will work. Given that: * Most VPS providers already have an API allowing you to create new instances. * There are proven tools like Ansible and Puppet that can create provisioning scripts. This means that: * Large businesses won't use your service. They'll use established things like Ansible Tower or Docker on &lt;CLOUD_PROVIDER&gt; because reliability is critical. * Small businesses won't use your service. They'll combine the first and second points to (for free) to do what your product can do (at a cost). Also, there are already free Docker, Vagrant, Ansible and Puppet online config tools that almost do what you're describing: https://puphpet.com/#frontpage https://phpdocker.io/generator http://phansible.com/ All a developer has to do is run them against a freshly configured instance. 
Factorial without using loop anyone knows how?
What kind of stuff should I be expected to know, inside and out, as a "senior" dev? I've been doing PHP and various other languages and software dev for years and feel a bit stagnant in my skills and knowledge.
Kubernetes / [platform.sh](https://platform.sh) / Stuff like that I think...
Can i use plain PHP without any framework like Laravel, with VueJs ?
1. yes, they have an api, but they only create the machine, they don't configure it with everything you need so this is not something that "hurts" this idea. 2. Yes, there is puppet and ansible and other, but you need to know how to use them, you need to write the playbooks and setup all the necessary vars, basically you need to know what you are doing and you need time to do it, and that's where this project is supposed to come in, just select a few things like in phansible and it will do the rest for you. The main difference between those listed by you and what we want to achieve is the level of control (you can even edit php.ini values for example), the fact that it will be a full service (from creating the virtual machine, configuring it according to what you want and deploying your application from git/s3). 3. Don't get me wrong, I am completely aware this will be a niche service and everything done by it can be done by anybody with enough technical knowledge, however don't you think most people will rather pay 1\-2$ and have everything up and running in minutes rather than wasting hours if not days to learn ansible/puppet and setting up everything ? I know a few developers that would pay a lot more to just develop and have the necessary env available easily and not worry about it. Also, need to mention that even if I plan to start with a php stack, the idea is to do it for all major stacks like node, ruby, java and so on, and at least as far as I know there isn't such a thing on the market. Thank you for the constructive comment, really appreciate it.
I've been reading [The Object-Oriented Though Process](https://www.amazon.com/Object-Oriented-Thought-Process-Developers-Library/dp/0321861272). I have been predominately coding procedurally since I started (5 years ago) and the book is for people who want to transition into the OOP paradigm from a procedural background. The book doesn't even mention PHP (mostly uses Java/C# for examples) but the concepts are basically all the same, the author is not too heavy on syntax and is more about the concept of OOP. I haven't finished it yet but I like it so far and would recommend.
On a second thought, - how many servers you have to deploy in a given period of time? - 1? 2? Does it worth a hassle? Why read docs for your custom script instead of reading docs for the industry standard tools? Installing the latter will give you better understanding on the things you'd have to maintain. - a dozen? each with different configuration? Seriously? Are you a dev at all? - skilled admins configure a new serer in a matter similar to your few clicks - devs seldom configure their own servers - the deployment only *starts* the game. Would your fancy gui app provide support as well? - the devil in the details and there always will be a a service not covered by your clicks - in the age of containerization, virtualization and cloudization the demand for bare VPS is on decline
Assuming you're using an elastic IP with that? Bonus points if you're using an RDS for your database. If not, you might want to address that ahead of time. 1. Spin up a new server with 18.04 (I assume its stable by now?) and PHP7.x. 2. Deploy your code on it and test it with debugging enabled, do this on a clone of the db to start with in case of any crazy errors. 3. Fix any errors. Crazy or otherwise. 4. Repoint the 7.x instance to the live DB (that is hopefully on an RDS, to enable you to do this) 5. Reallocate the elastic IP to the new server, and run smoke tests to ensure all is well. 6. If A\-OK, stop the old instance. If not, reallocate the elastic IP back to the old instance, and go back to #3 And you've upgraded PHP in a live environment, with no downtime and no risk of lengthy rollbacks.
better report on the repo https://github.com/hirak/prestissimo directly and if no answer ping someone from the composer team, looks very odd indeed
Serverpilot does this already
https://herbertograca.com/dev-theory-articles-listing/ ^^ contains a summary of very valuable programming knowledge.
Renaming `str_replace` to `str::replace` is exactly the same thing as renaming it to `strReplace` - it changes nothing except maybe (**maybe**) make things slightly more consistent two major versions from now when `str_replace` can be removed (and while we wait for that, we'll have literally two times as many functions, and because this would be a good moment to iron out needle&lt;&gt;haystack situations, two functions for the *exact same thing* may not even have their arguments in the same order). $myString = "hi, world"; echo $myString-&gt;replace("hi", "hello")-&gt;ucWords()-&gt;append(", this is awesome!"); Now that, I can get behind. :)
I think there is nothing to be worried about. I believe packagist gets flooded with spam/fakes. Part of composer is to download a json list of packages - which contains the suspicious lines you highlighted.
If it's a first install, why is it using the cached files ? Does it improve after clearing the cache ? Also [the mentioned file](http://packagist.org/p/provider-latest%242e973ca28de4b85083ced2a7c65cbc1a404bfa8ca8e66ef17f8273ee493f4b17.json) does not contain any of the URLs you captured How much do you trust your network and DNS, your system ? 
It's downloading index files from packagist, so these are just packages on packagist.org with very funky names. See [https://packagist.org/?query=0123\-mov](https://packagist.org/?query=0123-mov) (also posted on your [github](https://github.com/hirak/prestissimo/issues/175) issue)
I just downloaded the 0.3.7 release as a ZIP and used `grep -r` to search through its contents. I tried a few of the keywords in your screenshot and found nothing. I'm not sure if this proves anything though... 
/r/PHPhelp 
This. I used to lurk the browse page of packagist a lot and these came by occasionally in the new packages feed. Nothing to worry about.
Thanks
I would prefer the other way around: public ReturnType functionName(Type1 $var1, Type2 $var2, Type3 $var3) { ... }
Use a recursive definition in which the function calls itself.
Why do you have to sign up?
It's not downloading those packages, it's downloading a list of all packages on packagist
Okay, cool. I'll be working toward an sqlite thing then, when I can. Thank you again for your help.
You do know PHP lacks exactly the same transitive consistency, and adds new ones, right? As an example: "foo" == TRUE , and "foo" == 0 … but, of course, TRUE != 0 Also: [http://phpsadness.com/sad/52](http://phpsadness.com/sad/52)
An online IDE is a place where users can run arbitrary code and consequently they can perform malicious attacks to third parties — which they do. Besides the technical means we mount to diffuse such usage, requesting users to sign up with a valid email address has proven to be of a great measure to increase the quality of the usage of our product. Besides a valid email address and a unique username, we ask no other info for you to give it a try. We think it's fair.
Of course you can, but it is not recommended: [https://symfony.com/why\-use\-a\-framework](https://symfony.com/why-use-a-framework)
Although Laravel is an extremely powerful tool, you absolutely do not need to learn it if you don't want to. However, I would caution you to take all these comments with a grain of salt, and decide for yourself. In any event, what companies are really asking is \- 1. Do you understand the MVC paradigms in the context of its web adaptation (which is object oriented by nature). 2. Can you use a package manager (composer) to effectively manage dependencies. 3. Can you write testable code. (AKA Dependency injection). If you can show that you understand those 3 things, you absolutely do not need to know the framework de jur. 
^The linked tweet was tweeted by [@dEnergy_dTime](https://twitter.com/dEnergy_dTime) on Jun 10, 2018 11:34:07 UTC (1037 Retweets | 1990 Favorites) ------------------------------------------------- Sunday horror code: md5('240610708') == md5('QNKCDZO') The two strings have different hashes. PHP just converts the strings, which both start with "0e" to floating point numbers of value 0.0; and these are equal. \#PHP \#LongestRunningJokeInWebHistory ------------------------------------------------- ^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •
Would be nice with a demo account for those you're asking to give feedback.
I think /u/colshrapnel was saying: You're possibly re-implementing something that every developer already has readily available at their fingertips, which is Docker. How do you differentiate your solution from Docker? Also, be aware that several competitors already offer what you describe. Have a look at [Clever Cloud](https://www.clever-cloud.com/php-hosting), for example. This is not meant to discourage you, however. The idea is good, keep iterating. Also, just becasue something exists already is not a reason not to try and make it better.
because it doesn't like badly indented code ?
use === and stop whining
just tell me whats wrong with it beside that "it's not pretty enough for me" nonsense
Guessing it does not remove it. Try hard coding the $text field to a phrase with an “&amp;” and see if it works. If this works, then look at how you are passing the input over.
Seems like you're just trying to get new accounts to me
Are you actually looking at the value in the database? Or are you echoing it back out to a html document without properly escaping it? If the former, what client are you using to view the value (could it be a bug in that client, if it's web-based)? Also, what's the type and length of the `text` field and how long is the value you're inserting into it?
Are you tripping over `&amp;` not being URL-encoded? - text=abc&amp;def + text=abc%26def
This is old news. 1. You shouldn't be using MD5, flat out. 2. For purposes of comparing hashes (or MACs; e.g. HMAC-SHA256) you should be using `hash_equals()` not `==` or `===`.
Yes, PHP is an open sourced language. While development happens at: https://git.php.net ... There is a GitHub mirror at: https://github.com/php/php-src
I couldn't select a PHP version when creating a project. Also, adding payment info is mandatory before you can write a single line of code :/
Yep, and in addition to this, don't cross-post by default. You only posted your Stack Overflow question an hour before this one, so give it a day or two, and if that does not get you any help, cross-post at that point. 
Urgh, it was [already cross-posted to PHPhelp](https://www.reddit.com/r/PHPhelp/comments/8q7t1o/help_trying_to_make_a_roblox_group_payout_api/). 
Because you're not urlencoding your form submission, so its treating everything after the ampersand as a new parameter in $\_POST? Also, yuck.
This seems like the most minor of things to be bugged by. FWIW I actually prefer how it is now to your suggestion - everyone's different I guess. I doubt very much this will ever change though, so I can relax.
You should add a free account option, even if it's available for only 14/30 days.
Don't put words in my mouth please. Unindented code is ugly, difficult to read, and even a disrespect to those you need help from because you make their eyes bleed. Also using imperative mood isn't pretty either. https://stackoverflow.com/questions/27564981/ampersand-in-mysql-query-cuts-off-remaining-value 
apparently its the html textarea that is one that is causing this problem, so i think i'm in the wrong subreddit
&gt; As I explained, the rate will continue to increase. Well, one week has passed: https://monitor.gitlab.net/dashboard/db/github-importer?orgId=1&amp;from=1527516112924&amp;to=now As you explained, you're full of shit :/
did search on it still have no idea how to do it. i hate my brain
Does this have to be posted here once a month? :|
&gt;&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;/head&gt; &lt;body&gt; &lt;script type='text/javascript'&gt; function sendtext() { xmlhttp=new XMLHttpRequest(); var text=document.getElementById("text").value; xmlhttp.open("POST","r", true); xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded"); xmlhttp.send("text="+text); } &lt;/script&gt; &lt;div id ="adiv" class="adiv"&gt; &lt;/div&gt; &lt;div class="getremark"&gt; &lt;input class="C" type="submit" value="&gt;" onclick="reload('adiv', 'rr');"&gt;&lt;/br&gt; &lt;/div&gt; &lt;textarea style="width:750px;" method="GET" rows="2" cols="100" id="text" &gt;&lt;/textarea&gt;&lt;br&gt; &lt;button class="btn" method="GET" onclick="sendtext();"&gt;submit&lt;/button&gt; 
thanks!! i got it
thanks!! i got it
it turns out i didn't URL-encode it
it turns out i didn't URL-encode it 
it turns out i didn't URL-encode it 
Try to write a loop with an index counting down, and then write out the values your result takes after every time you loop. That might help you find a form that looks a lot more like the factorial function.
Yes it's old news, but: &gt; You shouldn't be using MD5, flat out. Why not? It's perfectly fine as a checksum for comparing file contents, say, or verifying integrity of data against accidental corruption. &gt; For purposes of comparing hashes (or MACs; e.g. HMAC-SHA256) you should be using hash_equals() not == or ===. See above. MD5 is used for many things; `e77eff0128d298f8b89668966e7db05e` doesn't necessarily imply a badly hashed password or outdated MAC.
He shouldn't be touching code at all if he does things like in his tweet. That's all there is to say.
&gt; Why not? https://natmchugh.blogspot.com/2015/02/create-your-own-md5-collisions.html MD5 should never be used anymore. BLAKE2 is faster than MD5 and at least as secure than SHA256, and is included with PHP 7.2 via `sodium_crypto_generichash()`. If the hash calculation isn't your bottleneck, SHA256 is fine.
What exactly does this composer plugin do? The readme doesn't seem very explicit and there's no documentation that I can find.
Again - I'm explicitly not talking about passwords or anything that needs to be cryptographically secure. CRC32 still has its uses after all. But interesting about BLAKE2 - if it's faster than MD5 then there's little reason not to use it instead (other than less universal support).
If you're explicitly not talking about any context where security matters, the issue raised by OP doesn't matter either because you also don't care about collision resistance.
&gt; Besides a valid email address and a unique username, we ask no other info for you to give it a try. We think it's fair. This is fair, but in the interest of transparency, your privacy policy states [a little bit more information is **collectable**](https://www.sourcelair.com/privacy#information-gathering-and-usage). I just signed up and nothing further than an email address was collected, but your policy allows you to collect more. Whether this is defensive legal writing or if there are other contexts in which you optionally collect further information isn't immediately clear to me. However, this is Reddit, and there's always at least one commentator that will read your TOS, Privacy Policy, EULA, etc. and excerpt it at whim, usually as ammo for an unflattering remark. (Juts something to keep in mind.) &gt; An online IDE is a place where users can run arbitrary code and consequently they can perform malicious attacks to third parties — which they do. This is also true of Travis CI, which developers will happily sign up for without blinking an eye.
http://php.net/manual/en/function.gmp-fact.php
it's literally addressed in the first paragraph...
I thought this was a known gotcha for a very, very long time.
didn't get that far
Those jerks don't understand business. It doesn't matter what your product is made in, your end user couldn't care less if they like your app. They won't pay less because it's made in PHP It's just the elitism of the tech industry. Ignore them, they'll be working for you one day.
Because, almost nobody installs extensions
Any progress on [https://externals.io/message/99366](https://externals.io/message/99366) (PCS) ?
What? I was just pointing out that your statement `You shouldn't be using MD5, flat out` is only correct in a security context. Outside of that context there are valid uses. OP's issue is irrelevant as a) it is old news that any developer with a month's experience should understand and b) it's nothing to do with md5; the same would be true for any hash algorithm - no matter how modern and secure - that produced a hex string as output. To reiterate: your comment made some absolute statements that were only true in a particular context, but which was never stated. That is all I was pointing out.
how can you do this in 1 to n without loop
Here's the context you're missing: Most people shouldn't use insecure cryptography algorithms for any context, lest they get in the habit of using those tools and accidentally use them where security is required. If you can sanely and coherently compartmentalize the use cases, congratulations, you're in the 1%. My Reddit comments are general advice.
We provide a free 30 day trial period to everyone. Did you run into any trouble with it?
That's true. The URL of the post is a preset that allows no configuration. It serves the purpose of creating a PHP 7.2 project easily. &gt; adding payment info is mandatory before you can write a single line of code :/ We do not ask for payment information, until you decide to buy a subscription. Can you please tell me what steps did you follow and it asked for your payment information? This should not happen implicitly.
We are sincerely trying to get some feedback, because we do not write PHP in SourceLair. We provide it only because customers ask for it. We are Python and JavaScript developers ourselves.
We provide a 30 day trial to everyone. We cannot share a demo account username and password publicly, as this poses security risks, since literally anyone could run arbitrary code on our infrastructure.
From that link: &lt;?php $fact1 = gmp_fact(5); // 5 * 4 * 3 * 2 * 1 echo gmp_strval($fact1) . "\n"; $fact2 = gmp_fact(50); // 50 * 49 * 48, ... etc echo gmp_strval($fact2) . "\n"; ?&gt; 
Looks like the RFC isn't ready for people to vote on.
&gt; This is fair, but in the interest of transparency, your privacy policy states a little bit more information is collectable. That's true, although as you found out we do not actually ask for such information 🙂. We value privacy a lot. We do not even ask for your name when you enter your payment details, in case you decide to purchase a subscription. &gt; However, this is Reddit, and there's always at least one commentator that will read your TOS, Privacy Policy, EULA, etc. That's totally OK and that's why we have this information publicly. Honestly, I am happy to see that there is at least one person in the planet that gave this page a look 😂. &gt; This is also true of Travis CI, which developers will happily sign up for without blinking an eye. Developers sign up for Travis exclusively via GitHub (this is an option in SourceLair too btw.), which requires a valid email address so it requires the same amount of information. On the other hand, I admit that our "Sign up with GitHub" option does not work "without blinking an eye" like Travis' and we have to do better work at it.
How exactly would a 30 day trial be more secure than a public demo?
wow. thank you kind sir!
Yes. 
This guy feedbacks
Hi all. Been a PHP dev for 2 years now. Came from a degree in aerospace engineering and a phd in robotics and AI. I find myself getting very bored with coding at the moment. All I'm doing at work is fixing little bugs while the rest of the team works on new stuff. I'm not sure if I'm getting fed up of easy boring work, or I'm getting fed up of coding in general. Anyone else experienced this?
Is there an easy way that I'm not aware of to go from RFC to relevant mailing list discussion? It'd be nice to easily jump to the discussion from a voting page.
For the lack of better terms, there are some "trigger" words or phrases that almost guarantee a downvote here. "Laravel", "WordPress", or anything posted by /u/sarciszewski seem to be the top 3.
Even though the previous poster is right in providing a library function for this as you do not need to reinvent the wheel for every project, it is equally important to understand how this function works if you want to become a better programmer. Here is a definition: function factorial($n) { if($n &lt;= 0) { return 1; } else { return $n * factorial($n - 1); }
&gt; There is a lot of useful infos there Who do you has been implementing Swoole in Techempower ( and trying to figure out the issues ). *lol* Maybe i misunderstood when you mentioned "mysql async". The issue is not so much the documentation. Swoole by default runs very well on a normal website. The issue with Techempower is that the test simply breaks frameworks and exposes issue because of the avalanche of requests. &gt; There is a lot of useful infos there The issue is, some of this information ( like the pooling requirement ) is available in the official documentation. But it is mentioned in the Chinese version. There is actually a mysql proxy ( that has pooling ) under the Swoole project but its all documented in Chinese so few people notice it. Other issues are a result of the change between working with synchronize code in PHP and going Async with Swoole. And add to this its permanent state. Those are things people need to learn and are harder to document / explain. &gt; I still think Swoole have a bright futur but in the end of the day, i have to ship something at my job True. Swoole is more risky for production because its less know and not so tested as NodeJS was. That was one of the reasons why i wanted to see Swoole in the Techempower benchmarks. A learning experience and also a test to see the stability under a extreme stress situation.
Rephrase that please. The “show” part confuses me.
If you're doing Ajax, it could go to table and the table has keys that determine the two (or more) people involved in the conversation. I don't know the scenario that you're thinking of using this for, but there's also technology out there like [WebRTC](https://webrtc.org/) that can be used for this.
`1080px-hd-watch-ffifty-shades-freed/online-full-free-2018` is actually a really helpful framework
Figured this would be one of the usual click-bait articles but it is actually well written and informative. It recommends using PDO over mysqli unless you need to use some of the advanced mysql specific bits of functionality. It dismisses the argument that PDO makes it easier to switch databases. And it even recommends using a PDO wrapper to simplify using common functionality such as WHERE IN clauses.
&gt; the problem is that PDO_MYSQL simply doesn't have all of the newest and most advanced features MySQLi does. I honestly don't understand why this is the case This is way over-simplified, but gets across the point I'm trying to make: PDO's author was part of the core team (contributing to it making it into the language at all). They no longer works with/for PHP and so no one is actively working on PDO. FWIW, Oracle recommends OCI8 over PDO_OCI for the same reasons.
Nice write up. Thanks for sharing OP
Haha ya there are a ton of those. I hope to improve this one more also. I feel like I see this question asked a lot, but people typically answer with, "just use PDO". Even articles that are supposed to be comparisons don't actually do that, but just say you should use PDO. While I don't find anything necessarily wrong with that, as most people should use PDO, I'm just not a fan of dogmatic statements like this. I tried to play the devil's advocate in a way, because no one ever highlights some of MySQLi's advanced features.
Depends on what you want to do mostly. I'd say; - Joomla - Drupal - Wordpress Or what do you mean with GUI?
I’ve build a chat room but when I log in as a user and write a message it saves into the database and the I load that message back into the div but when I log into someone else the message displays in the chat box, I want to know how to display the message only if I am in the user or the recipients account
Unfortunately I'm not aware of any progress in this direction. It certainly won't be part of PHP 7.3.
yes i understand. it just bothers me because in my tech interview this question was ask to me and the interviewer required me not to use a loop
This sort of quirk isn't new for dynamically typed languages. The [Stackoverflow question the tweet was taken from](https://stackoverflow.com/questions/22140204/why-md5240610708-is-equal-to-md5qnkcdzo) is four years old. That's why experienced developers will use the identical operator unless there's a compelling reason. Or better yet in this case, ```hash_equals()```.
Maybe I should write a blog post about this. The basic issue was that PHP used a fixed size buffer for storing GC roots. Anytime the buffer runs full, GC is triggered. That means that applications that have significantly more than 10000 objects (the size of the buffer) in the active working set are going to be running GC again and again, likely without ever freeing anything. In PHP 7.3 this buffer instead grows automatically if it seems that GC is ineffective. This is easier said than done, because we were using some very tightly packed data structures which did not allow for buffers larger than 16k. After we implemented the necessary changes, Dmitry also took the opportunity to implement some further GC improvements, in particular we switched from a double-linked list of root buffers to using a simple buffer together with two-finger compactions (Cheney's algorithm). There's still issues left here (e.g. I suspect we'll be seeing the reverse issue now -- GC doesn't run often enough), but we should be in a much better position to address them now. What I meant with the pathological cases is that sometimes the GC overhead due to the issue described got quite ridiculous. The specific instance that motivated getting this (long known) issue fixed was a PHP-Parser workload that was 15x slower when GC was enabled. The AST of a large file contains many, many objects and zero cycles, so it's something of a stress test.
It's fine. It downloads the composer requests in parallel instead of in series.
I always just assumed PDO was the 'safe' option when handling data tbh
Maybe I’m reading this all wrong, and this is far more complicated than I think.. Anyways the first thing that comes to mind, is the query that picks up the messages from the database is missing a constraint. I assume that when a user logs in they authenticate against a database and you get some identifier back I.e. row id from the “users” table. That id should be used to limit the messages you query from the database. If you are using SQL and messages are stored in a single table the where clause should include something along the lines of: WHERE receiving_user_id = $userId OR sending_user_id = $userId Again this seems too simple an answer, but maybe it helps... 
I just wish someone would explain why the old mysql_ API was removed?
A quick search would find plenty of articles explaining why. But the jist of it is that the functions were made years ago so were lacking in both performance and security.
Hey, KingTowel, just a quick heads-up: **jist** is actually spelled **gist**. You can remember it by **begins with g-**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
There have been plenty of explanations, see the section under "Why?" here: https://wiki.php.net/rfc/mysql_deprecation
I'd be happy to elaborate on this more. Thanks for your input!
Seeing all the comments here, it seems that the place where I read all this was another of those "dont believe everything on the internet" aah!
&gt; You can remember it by begins with g-. I appreciate where you're coming from, but I don't think that is going to help anyone remember it.
Research a pubsubhub implementation, also try websockets instead of Ajax 
Hey guys. I've been wrestling with something for a while and I can't quite figure out the best way to approach it. I'm interested in upgrading from mysql_* to PDO for my queries and am comfortable with the tutorials that I have. ([Like this one for example](https://www.thedevfiles.com/2014/08/moving-from-mysql-query-to-pdo/)). One thing that I can't wrap my mind around, however, is connecting to the database. More specifically, connecting to the database one time and then using that same connection several times, across several files, over the course of a page load. I figure that I'll connect to PDO in my header but how do I ensure that the connection stays open as I load the other template files that make up the body of my site. Typically I would run some queries in my header and then more queries in the body of my site... if the connection is coming from the header, though, I can't take advantage of it elsewhere. Long story short, what would be the simplest yet still responsible method for using the same PDO connection across several PHP files utilized in a single page load? I see something [like this](https://stackoverflow.com/questions/19194635/how-to-use-pdo-connection-object-in-different-files) but would that not involve building out separate PHP files (and requiring them) for each and every query I run? Thanks in advance for any insight!
 &gt; Will there ever be an update to make this consistent? Not needed - the functionality is there, and it works (important part). If the syntax is really the only bothering you about it: https://preprocess.io/
I think this bot is a joke. It always gives that same useless advice
gooood... pls.... noo..... 10 minutes debugging with no proper IDE [https://www.youtube.com/watch?v=\_72o39sA1O0&amp;feature=youtu.be&amp;t=6m38s](https://www.youtube.com/watch?v=_72o39sA1O0&amp;feature=youtu.be&amp;t=6m38s) [https://www.awesomegifs.com/wp\-content/uploads/no.gif](https://www.awesomegifs.com/wp-content/uploads/no.gif)
It seems to use that phrase for every misspelling. Worst part of that bot. Like saying "You can remember how it is spelled by remembering how it is spelt!"
What year is it?!
I learnt a lot contributing to open source projects, the code reviews of the pull requests are really thorough.
Those are all good. I would also run a cyclomatic complexity script on your code such as PHPMD. This will teach you to write readable code that is well broken out. That's a skill that is useful to have no matter the language. Set it up with CI and you begin to learn that type of stuff as well. After a while you catch 80% of bad CC scores yourself, meaning, you are naturally writing better code. Edit: I'm adding PHPUnit to your list as well. Enjoy the benefits of refactoring with less fear.
In the beginning i really liked laracasts.com jeff is great and not just for the laravel framework :)
I cannot know with certainty on this specific package, but there is plenty to worry about with the composer (or any package/library) landscape. There was a thread on this over at Hacker News many months back that scared me quiet a bit. I made it a priority to improve our client-side security. I see no reason why the same thing couldn't happen to a compromised github account or a seemingly legit composer package: https://news.ycombinator.com/item?id=16084575
Not to boohoo your comment but that is not a large project. My current open project is 43k PHP, 4k yml, etc. PHPStorm on larger projects can and definitely does grind to a halt at times.
&gt; It's somewhat ironic that more experienced PHP developers tend think PDO is the only acceptable option 100% of time, while beginners tend to use MySQLi. This is absolutely nutty from both ends. Of course most developers don't really need the extra advanced features MySQLi offers, but it certainly could be extremely useful for some, as previously mentioned. This in particular annoyed me to no end when I was starting out. I was doing tiny tasks on my own, and would sometimes pop around channels such as ##php on freenode. [insert deity of choice here] forbid you actually get a straight answer... Instead, responses were more akin to "WHY THE FUCK ARE YOU USING MYSQLI?! USE PDO!" (and that's among the nicer of the responses). No explanation of _why_ someone should use PDO instead of mysqli_. Just "USE PDO!" Because, you know, blindly following instructions without understanding the reason for them has a great track record.
* Check in composer.phar into your project as well so you can use it on your server without installing it.
The best way to learn those things is to use them. You can make something that's been made 1000 times before just to show that you know how to do it, honestly. You could implement all of those bullet points you wanted to learn by creating a CRUD application for say - classifieds listings or something. Make a craigslist clone and that'd cover it.
Man I feel bad for this bit. No one likes him
This is exactly my experience too lol. For some reason there's a tendency to view programming as correct or incorrect, without explaining anything. Just that you \*must\* do something this way because I told you so. Call me crazy, but that's not teaching, it's indoctrination.
Learning another language helps too My PHP style changed a lot after I learned Python Also look through code when you find a function you want to use, learn how it works, don’t just take their abstraction for granted Take breaks, not 5 minute breaks, like actual ‘I’m not going to be a serious coder this summer, I’m gonna focus on my family or my health’ It’s a lot more fun after a nice break, working in an office kills off the fun pretty fast
I think you mean *bot*. You can remember it by *has "o" instead of "i" in the middle*.
I'm kind of sick of this false dichotomy. I get that MySQL is popular but there are other databases out there. We use PDO for SQL Server, SQLite and MySQL connections. MySQLi is not even an option.
&gt; It dismisses the argument that PDO makes it easier to switch databases. It doesn't. This query: SELECT * FROM users LIMIT 5 is not compatible with SQL Server. You must instead write: SELECT TOP 5 * FROM users This is one of the simplest queries and there is tons of other incompatible syntax between database drivers. PDO does not in any way shape or form make switching between drivers easier.
Right, that's the point I'm making.
I see now. I originally thought it was said in a negative way... my bad.
PhpStorm doesn't open all files and keep them in memory and to be exact my project contains : 13,435 Files, 2,162 Folders =\&gt; 139 MB (146,460,672 bytes) 
Start by referring to yourself as a "Developer" and not a "PHP Developer". Then check out /r/programming/comments/8qbb2h/how_to_become_a_dramatically_better_programmer/
Each 30 day trial requires its own valid email address. A public demo, implies completely public and uncontrolled access, I guess?
&gt; I don't enjoy working in the agency environment anymore - no tests, copy and pasting code, poor quality and a rush to get code out the door. I'd love to work for some sort of SaaS company or a company that uses PHP for their main products and internal tooling. It would be amazing to have the freedom to work on new ideas and features without a deadline looming and constant pressure from clients, managers and whoever wants to stick their nose in! Boy do I feel that... sadly there's so much of the former and so little of the latter. My advice is simple: read and work with lots of other peoples code. Refactor it, extend it, do whatever. It doesn't matter if you make it worse it's just to understand how it works.
Ah, yeah you're technically right. What i mean is that i'm a procedural programmer, but i don't do dumb shit like use the goto statement :P
Ever seen [this](https://github.com/doctrine/mongodb-odm/blob/master/lib/Doctrine/ODM/MongoDB/Id/UuidGenerator.php)?
Completely understandable
Don’t be afraid to break stuff. You learn by fixing your mistakes.
Here is my advice (13-year veteran): - You don’t need a degree to write good code - a degree will give you: - general programming fundamentals (algos and theories) - looks good on a resume - a huge debt that’ll eat up $600+/mo of salary - learn [PSR-1](https://www.php-fig.org/psr/psr-1/) and [PSR-2](https://www.php-fig.org/psr/psr-2/) - memorize it as best you can - write your code to the standard as best you can - don’t sweat being perfect; the idea is to retrain you to community standards - hold off joining an OSS project - instead, create your own project - use your project it to experiment and try things out - Learn PHP 7.2 ([here](http://php.net/manual/en/migration70.new-features.php), [here](http://php.net/manual/en/migration71.new-features.php), and [here](http://php.net/manual/en/migration72.new-features.php)) - Learn JavaScript ([jQuery](https://api.jquery.com), [Lodash](https://lodash.com), [Angular](https://angular.io), [React](https://reactjs.org) or whatever is popular in your area)
Thanks a lot!
I agree with this. There are a lot of bad practices that are prevalent in the PHP community. Learning another language and the practices that are commonly used in that language can definitely help you write better PHP.
True, Wez isn't active in PHP anymore, however there are other reasons: PDO aims at being a abstraction layer, the more database-specific functionality you put in the less abstract it is. Also the design has issues, as all drivers are proxies through a `PDO` class instance and use a `__call()`-like mechanism instead of an interface which can be implemented. This makes it hard to identify which functions are available. With a database-specific extension there is some more free room.
Ever seen [this](https://github.com/ramsey/uuid)?
&gt; ext/mysql was built for MySQL 3.23 I don’t know why but this is weird to think about for me... PHP has come a long way
Hey, thanks for that. 
It is active right now, but we might not see this in PHP 7.3
I have been waiting to be able to indent heredocs for literally a decade!!! Thank you!
I think you should learn Laravel.
It’s not magic. It’s work. Dedicate your life to it. Lock yourself in a room and code code code. Read how others do it. SHARE. Others will comment. Some will be hurtful pricks about it. Block the pricks. Listen to the constructive feedback. Give up sleep, friends, sunlight and anything else that takes you away from coding. This will likely include food and bathroom breaks. That will help you to get rid of friends. Get a degree if you must, but don’t let that stop you from coding. Don’t be a one trick pony. Code every language, device and environment you can find. Hunt for new things to code. When you begin to dream in code you’ll know you’re now officially a coder.
I work for a SaaS company that uses PHP and it’s pretty awesome. There is hope out there 
raspberry pi
I'd choose Doctrine or Eloquent over using either directly. Then if I switch databases everything still works.
&gt; I was just pointing out that your statement "You shouldn't be using MD5, flat out is only correct in a security context." Outside of that context there are valid uses. Security matters in all contexts. Or should be treated as such, unless you have a very good reason not to. &gt; It's perfectly fine as a checksum for comparing file contents There are tons of obvious examples where you'd be comparing file contents in the context where security matters (ie, checking license files, checking if files have been tampered with, validating backups, etc.). Even if you're convinced you're not dealing with one of those situations, there's the very real risk another dev (or your future self) will re-use the code somewhere where it *does* matter. So I think *your* comment is also making some absolute statements that are true only in some unstated contexts.
Learn PHP by looking on new features of 7? That might be not enough. I would recommend: http://phptherightway.com/
I saw this earlier and tried looking for it again but couldn't find it. I search webdev for "pdo mysqli API" and didn't even come close to finding it. Now I find it randomly. Why tho.
What if you start reading the Readme of the package? 😋😋😋
Features inversion of control like you've never seen before.
I had the same problem. Uninstalled that theme and installed this [Material UI theme](https://github.com/equinusocio/material-theme) instead. 
And different language communities tend to have different things they focus on. Python projects, for instance, tend to have a really high bar for documentation. Ruby tends to have god-awful docs but everything unit-tested. Spending time in these communities will teach you to appreciate the things they care about and leave you with some good habits.
By far one of the things that has helped me the most was working with people better than me. Find a company that cares for their developers, and they'll likely appreciate your willingness to learn and take you on and grow you.
You do know that malicious people could, will and do create fake email addresses right?
That's something that's addressed in the article, as well.
PHP, due to its simplicity and freedom, gives a lot of people who are mere programmers the feel that they are software engineers. No offense to programmers, we all have been and/or still are. 
Okay. Thanks
It works fine for me on Webstorm. Make sure that you are using the most recent version of PhpStorm.
I prefer to use the mysqli functions as they provide very explicit and granular access to mysql/mariadb without the abstraction.
Voting phase canceled. Back to discussion. It was expected :-).
Yes
You're right. But I haven't noticed it on the Pricing page because it was written with a smaller font, and was added on the bottom of the page. All I saw was that there were two packages and that both of them require payment. First impression matters. My feedback: Add the "Free" package near the "Basic" and "Pro". I'm sure that this will increase the number of registrations.
Absolutely it is. Simplest way would be to have a 2d array to hold the values. On the html side each square would submit it's value in the matrix. The array could be stored in the session. 
Can you suggest me some tutorial for it? I Have low skills on php but I want to try to create it
Thank you very much for pointing this out. You are totally right and I will pass this to our team. If you give SourceLair a try and like it, we would love to extend the trial for you. It's the least we can do for the time you put to share your feedback. Thanks again 🙏.
Google is your friend, http://design1online.com/php-tutorial-2-player-tic-tac-toe-game-no-database-required/ This is what I was suggesting I learnt php from a book, it was a few years ago, but depending on how you best learn, some people like videos more.
ok thanks for the tip :)
Good rewording of my articles. I would like yo see an acknowledgement, but knowing your attitude I don't expect it.
I'm glad they mentioned async queries, since in my work that's pretty much _the_ reason to use mysqli. My app used to be completely synchronous, but as the world's become more async, I've started using guzzlehttp promises (via coroutines) as my default for most of my code (mainly graphql objects). Now, PDO isn't really that bad (I can always start my async stuff, do some PDO queries, then wait for the async things to finish), but anyone who has done enough work in node knows how much nicer it is when everything can be async.
No, that's what I'm reading in the OP as well \- he needs to include user\_from and user\_to when creating new messages in some way, shape or form.
That URL .. renders the HTML from the examples instead of showing the markup. That will be very confusing for beginners. 
Here you go, a lot of general and modern development/programming knowledge: https://herbertograca.com/dev-theory-articles-listing/ This guy also has some nice book notes: https://herbertograca.com/category/development/book-notes/
This is not a homework support thread.
Oh, I am taking my words back. Examples are *all* messed up. 
There's an assumption in there which may not be accurate. 
That's a theme for sublime text?
Let's define the assumption as "most likely correct".
Didn't even notice, was checking it out on my phone. Good lesson on why to escape HTML
https://i.imgur.com/DK1ckG8.png
I'm a self taught dev, and working as a lead developer now. I just keep learning, reinvented the wheel a million times now, just for learning. Someone already mentioned contributing to open source, which is a really good advice. It shows project structure, and the feedback you will receive is awesome!
what?
https://i.imgur.com/DK1ckG8.png
I think you assumed correctly. Prepared and executed statements with bound parameters don’t need to be escaped or cleansed. I wouldn’t let a junior dev using mysqli anywhere near my code. Yeah, some things can be done better with raw SQL, but the rookies probably aren’t working on those use cases.
You misspelled jizzed.
Creating an email address and verifying it to use your SourceLair account requires a bit of time investment. You would get surprised at how many people are NOT willing to spend this time just to run a DoS attack script. There is no way to prevent a service from every malicious person, but additional steps that prevent malicious usage technically and make it not worth to spend your time is a good combination and TBH works just fine for us.
Just git gud. But in all seriousness put in the work and do a couple of different projects with it!
What this lib is imo missing is generation of uuid's instead of just formatting. Now consumers have to bother passing in there "seed" manually every time.
Your comment is quite confused. One could make from it that mysqli doesn't support executed statements with bound parameters. Also, the term raw queries is usually doesn't make a distinction between prepared and non-prepared queries, it is used to oppose raw SQL to ORMs/Query builders, none of which PDO is.
The fact the heredoc formatting changes already broke phpunit is a worry
Is this the sort of case that was causing Composer performance issues a few years back?
*Gitlab
I have similar experience. I learned PHP, then a framework and I thought "I'm quite good". But then I got into open-source, contributing to Symfony, creating own packages, getting feedback from PHP community all over the world. So my advice would be: - create a package for your favorite framework - publish it, get feedback, spread it - iterate 
1. https://i.imgur.com/DK1ckG8.png 2. mysql*_data_seek() is the most useless function out of the whole API. If you need it, your design is screwed up (or, rather, your code is ancient fossil from 1900-x).
I did have issues with it quite a while ago, but i ended up blowing away all my settings on accident and the problem fixed itself when i reinstalled everything and no issues since.
Make a curl request to a webhook endpoint that writes to a queue which then makes soap call to amazons simple message service that broadcasts a push notification that says do you want an X? 
no redis or mongo? what kind of old school approach is this?
Entirely in PHP without Javascript - no. Even if you use some sort of a event-driven async solution like Swoole, you'd still need Javascript to either a) implement websockets b) AJAX updates c) constant page refresh. That's for multiplayer. If you are thinking of doing tic-tac-toe on a single computer, you can easily do it even with an HTML form, with 9 buttons, each one submitting the said form. That would be the most HTML-ish way. You can then disable the already marked buttons. On the backend all this could be represented in an 2 dimensional array holding X and Y. Or you can do it in numeric array where the numbers from 0 to 8 represent a block on the table. There are other possibilities of course, but that's the fun of being a programmer. You get to play with that shit until you make it work. 
Everything about this is terrible. AngularJS should not be used for new projects and your PHP is amateur at best. Also, really loving the DATE LOCAL MOMS ad in the middle of a tech blog
&gt; Do you understand the MVC paradigms in the context of its web adaptation (/me coughs) [Action Domain Responder](https://github.com/pmjones/adr/blob/master/MVC-MODEL-2.md)
Correct, it's missing on purpose as random seed generation is an IO effect which should be pushed to the boundaries of an application. No IO makes the lib purely functional which in turn makes it safe to embed it into your domain model without worrying that it breaks anything.
That was kinda a “that guy” comment, but that was actually a good read so +1
It is better worded than in my articles but so much based on them that I would expect an acknowledgement. You want to review the examples section though, it is all messed up. 
Overall it looks OK, I was searching for something like this some time ago. You could add shortened version of uuid.
Audio is quite bad ( i can hear strange noises in background \- it is very annoying), and you speak too fast.
This. I was in exactly the same situation as OP (working in agency setting, no testing, just push push push), then I switched to a company that has an actual software project. In the first six months I learned more about PHP and programming in general then in the previous six years.
I will definitely try it. One more recommendation: Create "Integrations" page for each language that you support. This will offer you a better position in the search engines, will boost your SEO. You can edit the features page area called "Supported stacks" and create a separate page for each language. So when I'll click on the PHP logo I will be redirected to the PHP language page. I see that you have blog posts about Python, but I can't find many details related to Python on the Features page. Your development seems to be complete, you offer more than you describe. Please also add a "Supported languages" or "Integrations" page in the footer.
Wait, there are local moms that want to date me!? 
Click here to see local moms in YOUR AREA!
Truth. Another fun twist. I used to be a front end developer so I told this company I could still probably handle some stuff. Then I saw what real front end devs can do. Holy balls. Never mentioned it again because I couldn't hold a candle to this people.
&lt;meta refresh="3" /&gt;
It is a plugin for both editors. Search plugins for Material Theme UI in Phpstorm and you'll see it.
TIL don't support DevMountain because they sponsor the intersection of flame-bait and click-bait.
First thing is an advertisement for a coding bootcamp. Rest of the video is just a guy saying "I don't like PHP. This one job search website has less job listing for PHP than other languages. I don't like PHP, by the way. Look at the top 20 websites that you'll never work for, they don't run on PHP!" What a terrible video.
Regardless of your feelings about PHP, I think we can all come together as a group and agree that this video is an incoherent pile of flaming garbage.
The fuck is this shit
This guy has 100k subs but each video gets 1-5k views. :thinking:
That's actually normal for YouTube. Maybe slightly low, but I've seen people with 100k subscribers only get up to 5k views on average.
I use it in all the JetBrains IDEs I use and it works just fine.
Some idiot vlogger says PHP sucks but can only give his opinion rather than facts? Why should anyone care about this?
I recently did this and followed MS's official documentation. https://docs.microsoft.com/en-us/sql/connect/php/installation-tutorial-linux-mac?view=sql-server-2017#installing-the-drivers-on-ubuntu-1604-and-1710 Slightly different than your link and I didn't have any issues.
mmmm local moms. best served single.
Tell, don't ask.
I just lost 6 minutes of my life watching this pathetic advertisement.
Whats wrong with C&amp;P lol
Fair enough. However I've strayed away from using this tag back from the IE6 days when it was starting the counter way before the page finished loading. Back when the internet was slow.
There was another comment about that parameter binding was something which makes PDO more safe than MySQLi. I think it got explained to him that MySQLi also has those features. I'm not sure where it is pouring that PDO is 'safer' than MySQLi, the bottom line is you can bind parameters with both of them and you should check input lengths with both of them even if you bind them to query.
I BOLDLY USE MYSQLI AT ALL TIMES.
I'd be happy to give credit when credit is due, but what exactly did I copy from you? My examples are based off of my previous articles on [PDO](https://websitebeaver.com/php-pdo-prepared-statements-to-prevent-sql-injection) and [MySQLi](https://websitebeaver.com/prepared-statements-in-php-mysqli-to-prevent-sql-injection). Which part is incorrect in the examples section?
I've done it before to deal with supporting different dialects of SQL.
Just grabbed some random people I follow around similar sub counts Standard gaming / educational channels, 10% view rate https://www.youtube.com/user/Brackeys/videos - 500k, average 50-100k views (edu. content) https://www.youtube.com/user/destiny/videos - 100k, average 20-30k views https://www.youtube.com/user/RobertsSpaceInd/videos - 330k, average 30-50k Then there's channels which are more "engaged", which are 100% or higher https://www.youtube.com/channel/UC7-E5xhZBZdW-8d7V80mzfg - 261k, average 200k views https://www.youtube.com/channel/UChgpYoDiVUPGmL5Xyn0sg5Q - 6.8k, average 3-20k views 1% view rate from subs is absolutely *not* normal
I think PDO is hammered home because binding a core thing you learn, you know?. It's more of a thing that people don't do it rather than it cannot do it.
If you wrote a wrapper for the everyday use, it's would be a wise move indeed. But if you're using raw API calls, I wouldn't take so much pride from that. 
Also, make sure that Wrapper has an interface, and you work agains the interface at all times. That way, whenever you feel the need to switch from PDO to some other driver, you can simply write one against that interface. If you use dependency injection / service containers, you will probably just need to write the new implementation once, and make it available everywhere by changing one other line of code.
Would you still use it with only one SQL database?
I created something like this a while ago using jQuery and PHP. One of the issues with the way you're doing it is it's refreshing the div when it doesn't need to and fetching from the database when it doesn't need to. You seem to be counteracting this by having it refresh every 5 seconds rather than a smaller interval. This is not really a good interval as if you've got two people having a quick conversation it's going to get annoying. That and it means that if a person highlights one of there messages they're going to find there highlighting mysteriously disappear. Which they're going to find annoying. ------------------------- What you want to do is instead send the HTTP request with the number of messages there are in the chat. Then you have a count SQL request which will be much quicker than the SQL request to retrieve all the messages. You then see if these two numbers match and if they don't you THEN pull the messages from the database. Or you return false if not. Have an if statement of the JS side that checks if what is false or not. Then if it's not false THEN you load the messages.
Maybe it's just personal preference but I disagree. I like to just be able to call $this-&gt;db-&gt;fetchOne() or something instead of calling prepare and execute every time. I also think there's some merit in having a layer between PHP's native layer and the code base that interacts with the database so you have a central connectivity point you know you can manipulate if you ever need to do anything weird with your connection management or something. An example of this is if you added read slaves to your application later, you could map all the queries in this layer if they are fetching data. Maybe that's a bad example but that's my two cents. 
At this point, it's kinda like saying "don't waste your time with Jquery" . Sure, PHP is a little rough around the edges. It's not perfect; but, lots of people use it, and it works fine.
Cleaned than array_shift(array_keys($array)) and array_pop(array_keys($array))
I think it depends a lot on how large your project is. If you're only going to support a single database engine and you're not going to do unit tests it's okay to use it directly. As soon as you need to support a second database or want to perform unit testing on something that needs to access the database you'll wish you wrapped it in a class. 
PDO is too verbose for lots of basic things and it is useful to be able to go to one place in your code for things like query logging and caching. If you use PDO directly you won't be able to implement a caching system without a lot of extra effort on your part. I also like having utility methods for doing basic things like if I only need one record or if I only need one value from a select. Here's my wrapper: https://github.com/Divergence/framework/blob/master/src/IO/Database/MySQL.php
I'm always using it with only one SQL database... wrapping it in a class makes it portable.
PDO by itself doesn't do much, at least not from a business perspective. It can run for you SQL queries you manually wrote, give you a variety of ways to fetch data from the database, but that's pretty much it. PDO is only the basis for a database abstraction layer, but it doesn't carry much more. You would wrap PDO for adding new features, such as an SQL query builder, a business-oriented query builder, do some additional processing over result sets, etc, etc...
It's really simple. Two reasons: - until very recently, mysqli prepared statements were [almost unusable](https://twitter.com/ShrapnelCol/status/811554258927702016). When one have to write [a screenful of code](https://phpdelusions.net/pdo/mysqli_comparison) to run a query with unknown number of placeholders, and another screenful to get the query result as a familiar associative array, only a really tough guy would - due to that and to a lifelong habit, most users just used mysqli as a mere replacement for the familiar mysql_* functions So it can be called "less safe" unsafe technology-wise but rather usability-wise. 
I think this video is stupid in so many ways. But that's a personal opinion.
And more performant as it hasn't to walk over the complete array ;)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
We have a long story of communication in this sub (and many statements in your articles are from these conversations as well), so let's not start again. I am not expecting any sign of gratitude from you, nor I am planning to enter into any further discussion. I am just stating the fact. Half a year ago [your idea on mysqli was very poor](https://www.reddit.com/r/PHP/comments/7d6hnn/mysqli_prepared_statements_to_prevent_sql/) and it took the community a considerable effort to make you understand some basic principles like error reporting and prepared statements. Your [PDO article](https://www.reddit.com/r/PHP/comments/7g591r/pdo_prepared_statements_article/) is mostly my PDO tutorial slightly reworded. The structure and the information provided are almost identical. &gt; Which part is incorrect in the examples section? *Come on*, don't expect to leech on my expertize also in that :)
The main thing you'll see a `Database` class that composes any PDO for in my code is saving the connection as a static. WordPress, for example, does this the old fashioned (and clunky) way with `global $wpdb`. I'll usually have a `$dbh = MyNamespace\Resource\Database::getHandle();` that will make the connection if none exists, otherwise return the static one. There tends to be a lot of config and special logic around it too that I'll want controlled in my own code. Eg I can use the same class to get my connection handle in my phpunit code, my Phinx migrations, or if I just want to run `$ php -a` and start querying around from a clp. In terms of simple query building stuff, I tend to avoid that, as that should be the domain of an ORM. 
This is awesome. I hope it gets added.
Ditto. I basically create a wrapper class that does the following on instantiation: * Reads the credentials from my environment variables and creates the DSN * Configures PDO (PDO::ATTR_ERRMODE and PDO::ATTR_DEFAULT_FETCH_MODE) And then create a query method which does a prepare, execute and fetchAll. This means I only have to write one line of code instead of three everywhere. I normally end up creating an execute method as well which does the prepare and execute. This is for things where there is no result set. Sometimes I take it a step further and create specific insert, update, select and delete methods which return the created ID, the number of updated rows, the selected rows and the number of deleted rows. I guess ultimately it's just an abstraction to ensure you always create your PDO objects in the same way (with the same settings) and then creates a shorthand for you to interact with the PDO class.
That actually makes a lot of sense. 
 public static function escape($data) ... $data = static::getConnection()-&gt;quote($data); $data = substr($data, 1, strlen($data)-2); return $data; Seriously? 
I love how you’re snarky response to my snarky response got more upvotes. God bless Reddit
I love how you’re snarky response to my snarky response got more upvotes. God bless Reddit
&gt; it's handy in some cases to get the first or the last key of an array What cases?
&gt; I've seen that wrap PDO seem to make it harder to deal with and feel like repetition to me hmm... //Raw PDO: $stmt = $pdo-&gt;prepare("SELECT * FROM users WHERE id = ?"); $stmt-&gt;execute([$id]); $user = $stmt-&gt;fetch(); $stmt = $pdo-&gt;prepare("SELECT * FROM articles WHERE date = ?"); $stmt-&gt;execute([$date]); $articles = $stmt-&gt;fetchAll(); //Wrapper $user = $wrapper-&gt;run("SELECT * FROM users WHERE id = ?", [$id])-&gt;fetch(); $articles = $wrapper-&gt;run("SELECT * FROM articles WHERE id = ?", [$date])-&gt;fetchAll(); To me it's exactly the opposite. However I am partly agree: good wrappers are scarce, and most wrappers one can find are indeed make things rather worse than vanilla PDO. 
Yes
&gt; 1% view rate from subs is absolutely not normal. Maybe not for educational / gaming channels. From my informal analysis over the years, niche channels are probably more likely going to hit the 1% view rate without any funny business going on. Consider the following two channels (head's up, they're both part of the furry community): * https://www.youtube.com/channel/UCmmyGFIyEUHDsVTZwuW1BZA/videos - 103K subs, 2.5K - 40K views * https://www.youtube.com/user/kyleispurrfect/videos - 139k subs, 20K - 100K views What's the difference between these two accounts? * They're from the same subculture. * They have similar subscriber counts. * They produce very similar content, and in fact, often collaborate with each other. You might think the first channel was up to funny business to get their subscriber account artificially high, but the funny thing is that he received his Silver Play Button from YouTube, and the person who runs the second channel has not (despite getting consistently more views from his subscribers). What does it mean? The view:sub ratio probably isn't a very reliable heuristic in absence of context.
&gt; I would expect an acknowledgement You are quite literally asking for acknowledgement, yet you've failed to show any examples of plagiarism. &gt; I am just stating the fact. Your PDO article is mostly my PDO tutorial slightly reworded. Prove it to to me then ;) Otherwise, you're yet again creating pointless noise and simply acting like a bad a community member. And you wonder why you keep getting long bans on [Stack Overflow](https://stackoverflow.com/users/285587/your-common-sense). &gt; Come on, don't expect to leech on my expertize also in that :) No, you're just an egotistical maniac and this is clear from this thread and your history here (you happen to be wrong too lol).
Using stuff like ORMs allows you to switch databases easily without worrying about the underlying dialect. 
merits aside, there is just something about wrapping pdo in your own mini API that is irresistible. 
Where do you find this "community"? Nobody talks about php on gitter/discord/slack. 90% of forums are near death or full of the agency types the op mentioned.
That makes sense.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The cases where its handy.. I have a rather large project where I do exactly this on a number of occasions, but without taking a long stroll through the code I wouldn't be able to tell you the exact use case.. Do we really have to show this?
I would suggest not to do fetchAll() internally but return PDOStatement instead. It will make your wrapper 100x more flexible and easy to use. - it will let you to use a one-liner still by chaining the fetch method to the call. - it will make a distinct execute() function obsoleted - it will allow you to use all other return formats supported by PDO, from fetchColumn() to complex arrays like one from `PDO::FETCH_KEY_PAIRS`. An example of such approach can be seen [here](https://phpdelusions.net/pdo/pdo_wrapper)
New reddit is f'd up and not letting me post the body of my submission below the title. Anyway... I've adopted using Pimple and PSR\-11 containers for dependency injection and sharing resources within my projects. I love it. I'm finding that all my projects seem to follow the same boilerplate: 1. There's a project configuration in a config.php, config.json, config.xml, etc. 2. Config gets read into an array and registered in my DI container. 3. All of my services and resources are registered with the container via a ServiceProviderInterface that knows how to read their configs and build objects/connections. Just about every project I have does this with one or more PDO connections, an AMQP connection/queue, a transactional email service client (like SendGrid), and a Logger. I can build my own library to do these things. But it seems so common and boilerplate that I have to think I'm already reinventing wheels here. Does something like this exist already?
you can wrap PDO in a class with a well defined interface that has a better API (or what you prefer)
You’ve really never experienced a case where this would be handy?
Not sure I agree to be honest. &gt; It will let you to use a one-liner still by chaining the fetch method to the call. How is chaining two methods easier than calling one? &gt; It will make a distinct execute() function obsoleted Sometimes I want to issue a single command that doesn't return anything, such as `SET NAMES`. Now I have to employ chaining two methods to do what one can. &gt; It will allow you to use all other return formats supported by PDO As mentioned, I normally create specific insert, select, update and delete methods that return the specific types I want. I won't need to have the flexibility of one method with any return type if I create four methods with the appropriate return types. &gt; even rowCount() could be taken for DML queries as well See above. Specific insert, select, update and delete method fix this problem. Not trying to be a dick, but I don't agree with what you're saying.
"your code is ancient fossil from 1990-x" yeah thats about right 
Not that I would know of. How would such an interface look like? Maybe something for [https://www.php\-fig.org/psr/](https://www.php-fig.org/psr/) ?
Sorry, you missed the large part of my suggestion. Yes, it will be 2 functions to get a plain array, but still a one-liner. In return you will get a multitude of different return formats that are simply unavailable in your wrapper, making it (just like it said in the OP) less flexible than vanilla PDO. If you want to issue a single command that doesn't return anything, it's all right with the method that returns a PDOStatement. Just try it ;) Regarding your specific insert, select, update and delete I didn't see them so I am not addressing them, but a query method which does a prepare, execute and fetchAll you mentioned in your other comment. Cheers. 
So rewrite it in a more intelligent way. Write a loop to gather all the returned rows into array, and then loop over that array using foreach as much as you want. 
I don't think it makes sense, in fact. Usually when you start a project, you stick with one kind of db. To change such a big piece is a corner case. I love the Safemysql class, for example, it's just a comfortable wrapper around mysqli. Simple and easy.
Yes, but reset and end has worked perfect in that cases... 
Yesterday I was implementing a special case of priority queue. Two arrays, one holding identifier =&gt; obejct, second one identifier =&gt; priority. Upon sorting the priority array, I needed to get the first/last key to get the object. Yeah, could be useful.
While I see the benefit here, there are already one-liners that do the same. In a perfect world, everyone who runs PHP would be completely up to date, but we're not in a perfect world. So in order to save a few parenthesis, anyone who uses this will render their code unusable on still-supported versions of PHP. I'm not so sure that's a great tradeoff.
Also, such a basic function that runs a prepared query and returns a statement is a good base for the specific insert, select, update and delete methods, reducing the code duplication.
Your comment is somewhat confused :) Safemysql is a wrapper over mysqli, and naturally one would like to make a wrapper over PDO as well, regardless of the number of database types to be involved. 
Oh sure, usability is another beast.
I just unsubscribed from his channels. Here is what you do every time some idiot wants to bash PHP. Post this link: http://www.phptherightway.com/ http://www.phptherightway.com/images/banners/rect-180x150.png
yep that was me... lol my title made you cringe? why? I will try to do better next time :P 
PSR\-11 gives us ContainerInterface which provides an interface for interchangeable DI containers. Maybe it's out of scope for what PSR\-11 is for, but it doesn't specify how dependencies get into a container. So without a new spec I don't see a way of making my idea inter operable with PSR\-11. With Pimple you can register depenencies by registering a callable, like `$container = new Pimple\Container();` `$container['db'] = function() { return new PDO('connectionString'); };` Or you can write classes that implement ServiceProviderInterface and register them with the Container: `class ConnectionProvider implements ServiceProviderInterface` `{` `public function register(Container $container)` `{` `$container['db'] = function(Container $container) {` `return new PDO('connectionString');` `}` `}` `}` If you use Pimple as a DI container you'll pretty quickly end up writing a bunch of boilerplate ServiceProviderInterface implementations that create your application resources. I've used other DI containers in other languages (Ninject in C# for example) and there is always a similar process. Sure, most applications are going to have some unique or proprietary resources. But lots of projects need database connections, queue connections, configurations, etc. We're probably all reinventing the same wheels over and over. I'm just wondering if we can put our heads together and figure out a better way :)
I'll upvote you in hopes that anyone coming across this sees some good info, but OP is just a blog-spammer and isn't even listening.
&gt; So in order to save a few parenthesis, anyone who uses this will render their code unusable on still-supported versions of PHP. Not necessarily. It's not too uncommon to see frameworks do this: ``` if (!function_exists('foo')) { function foo($bar) { echo "Must have feature"; } } ```
Any case where it might be handy is a situation where you've invariably chosen the wrong data structure(s) for the requirements.
You don't have to do anything you don't want to do. The reason I even asked was primarily to open the door for discussion into why the cases where you find this handy are actually just cases where you've chosen the wrong data structure for the job.
If correlating object and priority is a requirement, then you should model that correlation in your data structure.
Actually C# doesn't run anything. Here you can read how .net work =). https://en.m.wikipedia.org/wiki/List_of_CLI_languages Allmost everyone use C# but F# is growing =)
Augh I agree. I know it's stupid. Originally this was a mysqli wrapper so I had to support escaping but since the way PDO does escaping is ass backwards (there's zero reason to require a database connections to escape a string) I had to hack it together. I'm planning to add a "setConnection" method to switch the global connection. I also want to add some kind of way to set an externally instantiated PDO connection so that you can use my ActiveRecord with third party frameworks. I just wanted to show examples like oneValue, oneRecord, allRecords, table, allValues, oneRecordCached, etc. I'm planning to switch the escape method to using this instead which is how MySQL does it internally. https://github.com/Divergence/framework/blob/81ff5247520b91045c559d32580ce50024500ae7/src/IO/Database/SQL.php#L32-L39
Non-Mobile link: https://en.wikipedia.org/wiki/List_of_CLI_languages *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^191890
GUYS! I know this thread it dead! But I might found out how PHP COULD implement the dynamic **CONSTANT** [https://i.imgur.com/Qz67Ot8.png](https://i.imgur.com/Qz67Ot8.png) Tell me your thoughts.
Quite an interesting blog but I am somewhat confused, if you are so good at bypassing the patches would it not have been better to advise the open source development team of the best fix for the issue?
It is not only stupid. It's very dangerous in the first place. While original quote() under no circumstances will allow an SQL injection, your escape() is asking for it. And now you are making it much worse. &gt; which is how MySQL does it internally. This is NOT how mysql does it internally, the process is much more complex, involving the information from the client on the incoming data encoding. This is why a connection is so essential. Let alone the fact that you need a complete quoting, not a half-ass escaping which is the main reason for the SQL injections. Be a good boy, leave PDO::quote() alone or better yet, use prepared statements.
I had an interesting experience with a previous dev on my team. At the time we were using the mysqli_* methods and this dev was adamant that we change to using PDO connections everywhere. I asked him to show me the difference - at the time there was a significant speed difference between the 2 connection setups (PDO was faster). &gt;Other Dev : "Now can we change all the queries to use PDO?" &gt;Me : "Why don't you change out the method contents in the code base's database abstraction class?" &gt;Other Dev : "...but" &gt;Me : "If you change it in that one place ALL of the queries across the whole project benefit instantly instead of re-writing each query one by one" &gt;Other Dev : &lt;grumble&gt;&lt;grumble&gt;&lt;grumble&gt;
The image shows all tabs having colors: [https://www.stitcher.io/resources/img/blog/phpstorm\-coloured\-scopes/tab\-colours\-1568x54.png](https://www.stitcher.io/resources/img/blog/phpstorm-coloured-scopes/tab-colours-1568x54.png) But for me, only the currently selected tab is colored, the others are plain white. How do I make even non\-selected tabs be colored?
https://i.imgur.com/DK1ckG8.png It means you must delete your question from here and ask in /r/phphelp
There's nothing here that would allow injections. It's still using PDO::quote() just getting rid of the silly quotes that are there for no reason. Furthermore my wrapper is clearly setting UTF-8 encoding and using that. According to the documentation for `mysql_real_escape_string`: &gt; mysql_real_escape_string() calls MySQL's library function mysql_real_escape_string, which prepends backslashes to the following characters: \x00, \n, \r, \, ', " and \x1a. Furthermore the security vulnerability only affects character encodings SJIS, BIG5 and GBK which I am happy to say I have never had the pleasure of using. Read more about it here: https://bugs.mysql.com/bug.php?id=8378 It's funny how riled up people get over a string escaping function not supporting some random 90s character encoding now replaced by unicode anyway.
&gt; silly quotes that are there for no reason Oh, man
Like I said before it's trying be an in-place replacement for code originally written for MySQLi, not PDO so when PDO is forcing it's quotes on me I get strings that look like this: `''mystring''`. Oh, man is right.
wut?
Every single change ever takes time until it is fully adopted.
There are no one-liners that do the same. Naive implementations of these functions are going to be O(n) rather than O(1). And while `array_first_key` can be implemented efficiently using `foreach`, I don't think there even exists an efficient implementation of `array_last_key`.
**Any case where it might be handy is a situation where you've invariably chosen the wrong data structure(s) for the requirements.**
The best fix for this issue is to create methods for each arithmetical operation and, using `strpos`, shepherd each question into the appropriate arithmetical method. 
The only class Ive ever used to wrap PDO is to make the db class a singleton object https://phpenthusiast.com/blog/the-singleton-design-pattern-in-php
I don’t think anyone else has brought up this point yet. If the PDO api changes, you only need to update your facade/wrapper class instead of searching for the API methods that were updated and changing them all across your code base.
By the way, in case you're still studying English, the opposite of "has/have to [verb]" is "does/do not have to [verb]". So, you would say "And more performant as it does not (or doesn't) have to walk over the complete array."
[This seems to work pretty well.](https://3v4l.org/i3UDk) Depending on php version, some times the big array key grab is faster than the small.
Generally, for beginners, people will recommend using frameworks (I do not really agree with this) and as you get more experience you start to use libraries to accomplish specific tasks part of a website. Frameworks are sets of tools that take opinionated decisions on your architecture so that you concentrate on shipping stuff (says frameworks advocators). I like creating an architecture, and do not need to be taken by the hand, and greatly prefer using libraries put together with composer. It is allowed to greatly question the impartiality of "it's not recommended to go without a framework" on the page of a framework ;)
Both reset and end modify the array. 
Why did this get down voted? What did I miss?
As you are running both cases only once, the difference is below the timer resolution. If you perform a few more iterations, you'll find that array_slice performs a full table scan, even if the offset is -1. It's not going to scan backwards or something like that.
Yeah, looking at the rest of the stuff it looks like he just copies and pastes bits of code and calls the "tutorials". Still, if anyone else needs to build something like this hopefully it'll help.
Or use shunting-yard parser like ircmaxwell/php-math-parser
title says github, not gitlab.
Ramsey's lib is straightforward, and while it has a lot of functionality, it doesnt take much to do ```Uuid::v4()```. You dont need to instantiate it or anything.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
They modify the pointer, not the array itself
It's a joke nigga ❤
&gt; It's a joke nigga ❤ You are truly a tool.
Those are the pricks you should block.
😪 Devs and sociability in a nutshell.
That is part of the array. 
Ok, haven't been a problem in my life... But yes, it's part of the internal pointer of the array. 
yea you lost that battle when you said ```nigga```
"battle" 😂😂😘
Well, open-source is on Github, so Github.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Not sure if it's useful, but it's useful to me. I'll be adding to it as I go. \[reichwebconsulting/common\-service\-providers\]([https://github.com/reichwebconsulting/common\-service\-providers](https://github.com/reichwebconsulting/common-service-providers))
PDO does not have a good API for handling connect, disconnect and reconnect, or if connection has a timeout. With a wrapper you can handle those situations.
I do it to keep connection inside a static property. This way I can call DB::$connection at any time. I don't like global variables either.
"Even if you're right I think you are still wrong".. okay..
I have a question regarding his citation of *PHP: A Fractal of Bad Design*, which is quite an old post. I've read it, but I'm not knowledgeable enough to know how much of it is still even relevant; is modern PHP still as busted? I only work in Symfony, Laravel, and Lumen, and for the most part it's quite pleasant. I suspect I'm not doing as much heavy lifting as some, though...
Genuine question: is it though? Vue.js and React.js are two super awesome alternatives to jQuery, and I don't see a lot of new libraries or development with jQuery anymore. But PHP has radical stuff like Swoole and Peachpie being built for it, which suggests to me that a lot of people really see future viability for it.
 // usage of a mixed array $array = ['a' =&gt; 1, 2 =&gt; 'b', 'c' =&gt; 3]; $firstKey = array_key_first($array); $lastKey = array_key_last($array); assert($firstKey === ?); // what happens here? assert($lastKey === ?); // what about with $array = [1 =&gt; 'a', 'b' =&gt; 2, 3 =&gt; 'c'];
[http://schema.org/](http://schema.org/) is probably the place you are looking for. Its an open industry specification consisting database schema for all kinds of things such as [Restaurants](http://schema.org/Restaurant), [Place](http://schema.org/Place) and [Person](http://schema.org/Person). You can also refer to various standards in [W3.org](https://www.w3.org/TR/) such as the [VCARD standard](https://www.w3.org/TR/vcard-rdf/).
Ah, interesting. Perhaps a dumb question, but why is that? And how would the proposed functions get around that?
I'm not sure why you're trying to twist and mangle my words into some sort of attack. You're on the defensive here for no reason. If you don't want to have a discussion about why this feature isn't already in the language (i.e. because its only use-cases are symptoms of underlying design problems), then we won't. That's fine.
If you're looking just to learn more about PHP maybe try the Zend Certification books. Even if you're not going for the certification they'll teach you bits about the language you might not know.
I would say it would work just like this ... function array_key_first($array) { return key($array); } function array_key_last($array) { end($array); return key($array); } 
[Array docs](http://php.net/manual/en/language.types.array.php) &gt; An array in PHP is actually an ordered map. 
From nikic's blog: https://nikic.github.io/2014/12/22/PHPs-new-hashtable-implementation.html The internals of PHP arrays (HsahTable) have a property `arData` which &gt; stores the elements in order of insertion. So the first array element will be stored in arData[0], the second in arData[1]... Use with HashTable's `nNumUsed` property get the last item in one go `ht-&gt;arData[ ht-&gt;nNumUsed - 1 ]`
I like adding several convenience methods, for example, instead of this: $selectStatement = $pdo-&gt;prepare($selectQuery); $selectStatement-&gt;execute($params); $results = $selectStatement-&gt;fetchAll($someOptionalFetchMode); $affectingStatement = $pdo-&gt;prepare($updateQuery); $affectingStatement-&gt;execute($params); $affectedCount = $affectingStatement-&gt;rowCount(); I can just call: $results = $wrapper-&gt;selectQuery($selectQuery, $params, $someOptionalFetchMode); $affectedCount = $wrapper-&gt;affectingQuery($updateQuery, $params); Plus, even a simple database wrapper lets me create an interface and implement things like caching that would be annoying to implement against PDO directly.
Same here. I also add some other ways of fetching things, like a fetchHash, so that I can do a SELECT id,name, and get an array of id=&gt;name.
I've been doing this in some form or another for the past couple of years with various legacy projects. It's a difficult but rewarding process. NOTE, this is a general overview as I'm not at my computer at the moment, but tomorrow I might be able to give you some more concrete guidance. 1. **Come up with a good suite of automated tests** - This may be tough if you're working with procedural PHP, but even if you don't move beyond this step it's enormously helpful. If unit tests are too painful, try starting with functional tests 2. **Extract your "business logic"\* code into service classes** - This means taking those procedural functions slowly pulling them together into classes based on their role and how closely they work together, while still keeping the code that does your business logic separate from database code and rendering code. Keep your tests up to date as you're doing this, though this usually means combining tests in relatively simple ways 3. **Take your extracted domain logic and turn it into a Composer Package** - This part is relatively easy once you've completed the first two steps. You'll probably be switching between your "package" and the framework you're integrating it into fairly frequently. To save time, include that package in your composer.json as the master branch\*\* instead of having to create a new version tag every time you want to test something. \* In this particular case, I'm referring to code that makes your application unique compared to another PHP application - the rules that are unique to the particular problem that you're solving. For example, "Can Student A register for Course G" or "When can a Discount Code be applied to a Product", stuff that doesn't have to do with HTML or databases. \*\* I don't remember how to do this offhand (again, not at my work computer) but some googling should get you the results you need
Except from reading that, if elements are removed from the array, your code won't work. It does effectively answer my question in that arData isn't necessarily contiguous. But it's mentioned that it could be made so, but not sure if that would have a higher "cost" than simply doing a scan and skipping undefined elements.
Not at all what I was looking for, but I don't hold that against you :) The new Reddit design was throwing JavaScript errors in my console left and right every time I tried to actually post a body to my submission. So I had to leave it in a comment, and I don't think anyone actually saw it. I'm not taking about "services" in the real-world. I'm talking about "service objects" in my software. Things like database connections, queue connections, and other objects that are often built via factories and pulled from dependency injection containers.
Right but the skip to the end part is the important bit, then skip IS_UNDEF entries. Found the source: https://github.com/php/php-src/blob/0b90cf85a6ace22abd0f9f86d5015a5b6db92387/Zend/zend_hash.c#L2180
Preface: Not a php developer, but I tinker (segued to JS in the interim). The laracasts are meant (if my memory serves me correct) for php developers, learning laravel. I'd start with the codecademy course, and then segue into a book like \`PHP &amp; MySQL web development\`, coupled with [http://www.phptherightway.com/](http://www.phptherightway.com/) Then, laracasts! :) 
You’ll get undoubtedly get some hand-wavy people in this thread- “well in my day we had to write a c++ compiler in Spanish before we could ever even THINK about a framework” . The truth is, starting with a framework makes it difficult to differentiate language constructs from framework constructs. So, if your going to go right into a framework, you need to train yourself to be really diligent about research when something seems like magic. Otherwise, have fun learning! 
Unless the data comes from something that isn't yours. Being an ideologue isn't helpful.
I don't want to learn a framework at this point. Right now I'm only interested in learning php and mysql so I can make dynamic websites. 
Oh. Well then yeah laracasts is like almost 100% tutorials on the laravel framework. 
If the data comes from something that isn't yours, you can (and should) mold it to fit your requirements.
thanks for the recommendations. I think I'll finish the laracasts php tutorial and skim through phptherightway, and mostly use the php documentation on their website when I try building projects or stack overflow. I haven't had good experiences with codecademy the book is too much, I'd rather learn from making projects. Reading around it seems that making stuff is the best way to learn and a lot of learning resources on this language aren't good. Laracasts is giving me a good enough walk through and I think by the end of it I'll be confident enough to start my own project. 
Fourth patch Unfortunately, we were not able to fully verify the completeness of the fourth patch due to time restrictions. We are going to update this blog post if this changes and of course notify the developers beforehand.
There's a series on Laracasts where you build your own mvc framework which is a pretty good learning experience for seeing the benefits of Laravel.
So like `PDO::FETCH_KEY_PAIR`
Moodle is an utter nightmare of spaghetti and bad practices. Having been forced to work on customizing it, I can heartily recommend burning any servers hosting it to the ground and running away screaming.
I'm not attacking or defending anything. I'm simply saying that -again- your argument is "I'm right because you are wrong".. You don't explain WHY you think its wrong, you simply state it as if it were a fact that, "hey this is only interesting to people who don't know how to do their job because they already are wrong to want it". That's not a valid argument
Your example modifies the internal state of the array though.
While I haven’t worked with Bolt before, anything using Symfony Forms is going to be a special kind of pain to debug. While most Symfony classes store their data and parameters normally, Forms make heavy use of the Factory, Builder and Flyweight patterns which can obscure where the actual code you need to debug is. The best advice I can give you is to look into the FormTypes - these are where the bulk of the logic behind the forms is located. You can also find all the FormTypes in use by running the container debug command at the CLI with private services enabled. Hope that helps
[removed]
Is the option "Use in editor tabs" checked? https://www.stitcher.io/resources/img/blog/phpstorm-coloured-scopes/file-colours-1976x774.png
That exists? Well, like the first comment in fetchAll documentation says, "I still don't understand why FETCH_KEY_PAIR is not documented here". Anyway, another one I made was some double-hash method, so that for a SELECT id1,id2,name, yields $arr[id1][id2]=name
That’s not true - Laracasts has tutorials on a lot besides the Laravel framework. For example there is a pretty decent intro to Object Oriented basics [here](https://laracasts.com/series/object-oriented-bootcamp-in-php). There are plenty of tutorials on modern CSS, JS etc. Not sure how basic the php goes but I would checkout the tutorials that aren’t Laravel specific, Jeffrey is a really good teacher.
This is not at all an anomaly. It doesn't provide clarity, because in a different try/catch block it would be possible an exception gets thrown before the variable gets assigned. Personally, I also just think it's best practice to only use a try/catch around the code that can actually fail with the exception you watch for in the catch. I fully agree with PHPStorm's evaluation here.
This is very wrong. Just because it has "Lara" in the name doesn't mean its only laravel. There are entire series dedicated to php only https://laracasts.com/skills/php
No, arrays are passed by value, including internal state. The real question is does this cause the array to be re-allocated. https://3v4l.org/e4DS6
Ya, I’m a beginner regarding Vue but not PHP so learning a framework to use Vue felt like another hassle. 
[https://phpdelusions.net/pdo/pdo\_wrapper](https://phpdelusions.net/pdo/pdo_wrapper)
Have a look at https://github.com/container-interop/service-provider maybe that is what you are looking for?
So you want it like Typescript? Maybe one day. But honestly I don't mind it how it is now. It didn't even register as being inconsistent to me. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Just found it out when installed Fedora 28 on my new dev PC. Among other outcomes, no more php_value in .htaccess, all options have to be moved into worker's conf file
Some times ago I created simple wrapper which allows me to write queries like `$this-&gt;database-&gt;getValue($table, $desiredValue, $where);` I personally found it much easier and faster to write, specially with general queries where you just fetch all the data or certain row/value. And even more complex queries are still shorter to write since you don't need to write whole prepare, bind, execute \-stuff in your code. PS. I know I probably should write own post for this, but since we already talk about database wrappers. If someone is interested to give feedback, I'm more than happy to get advises how to make that better. Link to my wrapper: [https://github.com/Jipsukka/database/](https://github.com/Jipsukka/database/)
Meh. I haven’t needed it enough that I can recall ever wishing for such a feature. Do it, don’t do it, I doubt it matters to me. If I had a vote I’d probably say do it because one of the things I love about PHP is the sheer abundance of features even if I don’t use most of them. ‘Cause when you need them and they are there it’s great.
Its the same on Ubuntu too since 16.04. The `php7.0` package (which the default metapackage `php` points to) has a direct dependency on `php7.0-fpm`. To install other alternatives, you'll have to explicitly specify them like `php7.0-cgi` or `php7.0-cli`
Thanks again for your suggestions. I passed this message to our team and will take it into account when building our new marketing website. For now, besides our guides you can read more about the supported stacks on SourceLair at https://help.sourcelair.com/stacks/. Hopefully it will land later during the summer.
 krakjoe@fiji:/opt/src/idbg$ bin/idbg Welcome to idbg v0.0.1dev: Inspector: v0.1.0dev Opcache: enabled, No Optimizations PHP: v7.2.7-dev idbg&gt; break array_key_last#3 idbg&gt; break file://test.php:9 idbg&gt; run file://test.php [7f1e9c2e0320] hit breakpoint #1 at array_key_last#3 (DO_ICALL) in /opt/src/idbg/test.php on line 5 :002 :003 $a = [1, 2, 3]; :004 function array_key_last($array) { =&gt; :005 end($array); :006 return key($array); :007 } idbg&gt; stack array 0x7f1e94b2e9d0 array(3) idbg&gt; n [7f1e9c2e0340] hit next at array_key_last#4 (INIT_FCALL) in /opt/src/idbg/test.php on line 6 :003 $a = [1, 2, 3]; :004 function array_key_last($array) { :005 end($array); =&gt; :006 return key($array); :007 } :008 var_dump(array_key_last($a)); idbg&gt; stack array 0x7f1e9c293780 array(3) idbg&gt; c int(2) [7f1e9c286900] hit breakpoint #2 at main()#8 (INIT_FCALL) in /opt/src/idbg/test.php on line 9 :006 return key($array); :007 } :008 var_dump(array_key_last($a)); idbg&gt; stack a 0x7f1e94b2e9d0 array(3) Copy-on-write ;)
... but their example uses 4th parameter, even though it's the same as DEFAULT :D
It's been the default on Debian since Jessie, which is the previous release. 
I think the ftp_get description in the PHP official doc went wrong....:-)
Note that all your query builder methods are prone to [SQL injection](https://phpdelusions.net/pdo/sql_injection_example). Also note that a code try { $stmt-&gt;execute(); } catch (PDOException $error) { trigger_error($error-&gt;getMessage()); } is superfluous. Just one line $stmt-&gt;execute(); is enough and will actually provide more information in case of error. Also, just curious, do you *really* find it easier to read something like $row $database-&gt;select("users", "id, name, password", ['age' =&gt; 16]); than $row = $database-&gt;query(SELECT id, name, password FROM users WHERE age = ?", [16]); Either way, I would suggest to have a basic function like this public function run($sql, $args = NULL) { if (!$args) { return $this-&gt;query($sql); } $stmt = $this-&gt;prepare($sql); $stmt-&gt;execute($args); return $stmt; } It will make some of your functions out of use and will make other functions less verbose, like public function getValue(string $table, string $data, array $where) { $query = $this-&gt;buildSelectQuery($table, $data, $where); $stmt = $this-&gt;run($query, $where); // Make sure that no more than one value is returned from query if ($stmt-&gt;rowCount() &gt; 1) { trigger_error('Database::getValue returns more than one result'); } return $stmt-&gt;fetchColumn(); }
Not only that. A full list of [PDO fetch modes](https://phpdelusions.net/pdo/fetch_modes)
Well, it says `[, int $mode = FTP_BINARY`, which means it defaults to that constant. Can't check the PHP source right now, but it seems like that would be the desired usage, so I think the doc is right and the code is buggy.
It's odd there is no array\_first and array\_last, but array\_key\_first and array\_key\_last is being added. Also, I would like to see a stop to introducing array\_\* functions and instead use traversable compliant ones
you could add a "watch" to get the result of a function
I believe the mode parameters have been made optional in PHP 7.3. Probably the signatures were updated in docs, but changelog entries weren't added. You should report a doc bug.
With a professional PHP development team of expert professionals, we have worked on many projects &amp; have achieved concrete results for our clients.Ntier infotech brings a wide range of website development services by utilizing the rich features and functionalities of PHP in a more cost-competitive way.Our team is flexible and progressive when you think of contemporary technologies and trends.
like most things, it will be overengineering 90% of the time. but each to his/her own.
Where can I report that doc bug? I think it should add the description to describe the mode parameters.
I found this issue when using the ```PHP 7.30``` in Ubuntu 16.04. Here is the PHP version message: PHP 7.0.30-0ubuntu0.16.04.1 (cli) ( NTS ) Copyright (c) 1997-2017 The PHP Group Zend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies with Zend OPcache v7.0.30-0ubuntu0.16.04.1, Copyright (c) 1999-2017, by Zend Technologies 
With a professional PHP development team of expert professionals, we have worked on many projects &amp; have achieved concrete results for our clients.Ntier infotech brings an extensive variety of site advancement benefits by using the rich highlights and functionalities of PHP in a more cost-aggressive way.Our group is adaptable and dynamic when you consider contemporary innovations and patterns.
I think Ramsey's lib is great and I have used it in the past. My reason for creating my own lib is twofold: 1. To make it purely functional, ie. get rid of the IO effect of having a PRNG baked in. 2. To make it minimalistic by only focusing on version 4 of the UUID spec. Now why on earth would I want these you might ask? Regarding #1: I, the library dev, can be sure it's not me when something like this happens: https://github.com/ramsey/uuid/issues/80 as the lib is not responsible for the PRNG. Regarding #2: Ramsey's lib has 1,431 lines of code + 554 lines from dependencies. Mine has 55. If I only need UUIDv4 then I only need 55 lines of code. 55 lines of code is trivial to understand/test/maintain. For a while now I've been moving towards minimalism in my work. I only want code in my apps that has purpose. It gives me Zen. The commercial app I'm currently working on can be characterised as a workflow management platform for a highly complex domain. Our current codebase is ~85K LoC. In comparison a vanilla Laravel install is ~389K LoC. 
Fair enough. I’ve been there a couple times and the I saw was mostly related to laravel. If that’s not the case then I stand corrected. 
Exactly that, especially given PDO already has a lot of useful features that just get reinvented in the wrapper. 
Porter is only responsible for the connection to the data provider (API). However, Porter with [Mapper](https://github.com/ScriptFUSION/Mapper) (via [MappingTransformer](https://github.com/Porter-transformers/MappingTransformer) plugin) will do what you want. Mapper is the part that translates each data source into a consistent format that you want.
Completely agree with this, Laravel has a habit of redefining internal functions with slightly different functionality, like the difference between getenv() and env()