There are companies searching for PHP developers and companies searching for NodedJS developers. NodeJS is cool and usefull, but not a gamebreaker. Javascript is very mighty and it is recommended to learn it, but you shouldn't throw away PHP. Just look if you personally like PHP and if you want to work in the future with it. Don't let haters ruin your experience. PHP is a very solid language and you can do nearly everything with it. Javascript and combinied with Node.JS is mighty too and you can do some fancy shit too. In the end it's your opinion which you like more. If you like Phyton more, then you can also develop in Phyton.. or Go.. C++.. Java.. what ever. These languages will never die. There will be new wheels, which will be replaced by other wheels, but the car stays the same. In the past I heard that term "moving towards XX" or "will be the future thing" way too often like Ruby &amp; Rails and that it will change everything.. today I hear nothing from it anymore. 
Thanks for that... I was looking for an excuse to learn PHP, since Wordpress runs on it. I guess the positive of being a beginner means I don't have any set habits in concrete, so I can sample everything out there. 
You can see from "outside" what it is. You don't have to open the file every time to know what it is. A "Bread" could be a class, a interface, a trait or whatever. A BreadInterface is immediately clear and unambiguous. 
A PSR-7 Response is a value object and not a reference object. A value object is represented by it's value and not by it's reference (instance). At the end the value (state) of $response has changed, despite the new reference. 
The node ecosystem is great and evolving fast, but I'm not that impressed with it as a server platform. I would note though that the vibrancy of js and some of its new platforms will likely significantly change what we do with php. It feels like things are moving to a place where you build your frontend with new, shiny node frameworks (react, vue), and then implement your backend via php or python and communicate via rest (or graphql in the long run). PHP is well-positioned for that future given how many microframework are available (lumen, silex), or how easy it is to put together your own. Pimple + eloquent and you're halfway there. 
The whole point of encapsulation is that you just do not have to know if it's class, interface or abstract class. It's just an instance with a special signature - the set of the methods and properties. So outside you see that it's "Bread" which can be spoiled, because it has a "spoil" method. The only reason I agree with is that you can see what exactly file contains: class, abstract class, interface or a trait. But my IDE already shows it. 
That's not what the rule is
&gt; Just starting to learn programming. well learn *programming* then There are things that are common for all languages like program architecture, database design, relational algebra, debugging, refactoring, profiling, software design patterns, object oriented design, regular expressions, unit testing, standard algorithms and many, many things more. Knowing all that you can pick up a new language in days. Without all that stuff you cannot call yourself a programmer at all. It's OK, though, if all your dream is to tinker with Wordpress themes.
&gt; since Wordpress runs on it There's a vast amount of existing infrastructure written in PHP, but once upon a time that was true of Perl. But a language that runs everywhere - from the web browser to the microcontroller - is a compelling proposition and the market *will* move that way. I believe Stanford just swapped to teaching its fundamentals course in Javascript? That's a bellweather IMO. &gt; I was looking for an excuse to learn PHP Learn the language you need to complete the task that's in front of you. 
Tinkering in Wordpress is not really a dream, so much as it would be a nice added benefit, since I work with some Wordpress themes that have incredibly slow development support teams. Not really sure where I am taking this; just seeing if my brain is capable of thinking like a programmer for now.
Never used it, will take a look at it, thanks!
Funny you should mention Perl. I learned Perl about 15 years ago to develop a website/shopping cart I was working on, and that was the last I'd ever needed to program, so I am just getting back up to speed. But was pretty cool to be able to Telnet from a script!
The “Horizontal Migration” sounds like a series of mini-big bangs.
I do not want to hurt anybody, it's my personal but honest opinion. nodeJS is nice for a lot of utility things and some cool stuff, but ecosystem (packages and so on) is raw and immature as shit. 
9 years experience with Symfony and 3 years experience with NodeJS. IMHO you should stick to the NodeJS ecosystem. PHP projects will be either legacy monoliths or CMS like Wordpress or worse. I see nothing I cannot deliver faster using npm instead of composer. And the ecosystem is much more powerful. Npm ecosystem is growing 100% each year. There is a nice video on youtube that explains this.
Thanks for the input. Have a link to this video?
If you don't mind a bigger signature, we can just pass all dependencies as arguments: Function MyHandlerFunction (FooService $foo, ResponseFactory $resFactory, TemplateBuilder $tplBuilder, string $id) { Keep in mind that this argument is mostly a thought exercise though.
 function setFoo($foo) { $this-&gt;foo = $foo; return $this; }
Who is the petty ass that downvoted?
There we go
This is extremely cool. It claims to be a "partial" reimplementation of the grammar (which I usually read as _"Coming soon in version 2 - support for joins!"_) but this correctly handled a query with a window function, correlated subquery, lateral left join and locking clause. Solid work.
&gt;&gt; implement an interface and call a particular method instead, like, say, doAction. &gt; &gt;This would break LSP since you will eventually have different signatures of this method &gt;&gt; have methods like doGet and doPost, answering to their respective HTTP verbs. &gt; &gt;What value you will get from such prefixes? Your handler's class name will be much more self-descriptive. These were mostly to build an argument that the idea of a class answering requests, as opposed to custom action methods in a controller class, reminded me of Java Servlets. Thanks for all your input, they're very constructive.
I'd argue that while the ecosystem on NPM has a large number of packages, it certainly isn't a a measure of how "powerful" it is. There are an enormous number of packages with very similar functionality, and many packages (see `left-pad`) that provide very trivial functionality, especially as the Node/JS ecosystem is tending to focus on a Unix philosophy of many small packages under the same umbrella (for example Babel splitting into a myriad of plug-ins). On the other hand, I've generally found modern PHP packages to on the whole be more stable and especially recently more comprehensively tested. Modern PHP projects are also becoming far more common if you're job hunting as companies switch to Symfony, Laravel, microframeworks and "frameworkless" stacks. Although this will be depend on where you live, it's definitely not just a case of legacy monoliths vs CMS systems.
This is where the Responder portion of [Action-Domain-Responder](http://pmjones.io/adr) shows up: the ResponseFactory &amp; TemplateBuilder get wrapped into a Responder, and the Responder gets injected into the Action (here called a RequestHandler). That leaves the Action with only three dependencies: the Request object, a Domain object (here FooService), and the Responder.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Thinking about this a bit further, you're going to have an issue with the way that PHP handles visibility as well. If you don't have visibility to a function, PHP internally uses __call(...) to see if something else should be done. So using this method you can override private and protected functions with your own functionality, which will be called *depending on where it's called from*: class Rawr { public function __call($name, $params){ echo 'call'; } private function notMe() { echo 'not me!'; } } $r = new Rawr(); $r-&gt;notMe(); The 'Macro' trait now provides a way to override internal functions!
"contract", "repository", "unit test"... That last one drives me insane, the tutorials on Laracasts for Unit tests are integration tests, often using sqlite as a testing database.
Hi, author here. While I agree with you that security should be something that is baked in your software and not something you get by installing some plugins, it is unfortunately almost never the case. I used to do pentesting for a living, and the amount of websites using outdated CMS or even just bad software development practices is staggering. Snuffleupagus is mainly aimed at those applications that cannot be updated of fixed for various reasons (main developper went under a bus, legacy stuff, "it works©, why bother updating ?",...). There is also another advantage: defense in depth. You can follow all the best practices, you can never guarantee that there is no vulnerabilities in your software. Snuffleupagus can also help here, by using basic rules to monitor strange activity on your website (for example, a call to move_uploaded_file with a target file ending with .php is never a good sign). I agree that blacklisting is not by any means a bulletproof approach, but as always in security, it's only a question of cost. If you can raise the cost of an attack just enough to deter bots and other low level script kiddies (which represents like 99% of all attacks), I think it's worth it.
This doesn't solve all use cases. The yml parser for instance could be used to parse docker files.
I'd be much more willing to develop with Node and NPM if the ecosystem seemed even remotely stable. As it stands it seems like frameworks and best practices bloom and die in months and trying to keep up without working *exclusively* in JS is torture.
PHP's magic methods are just "magic" because they're poorly designed.
Eh I guess it depends on context. In Symfony, I'm saying *this* controller. I know just by looking at it exactly what it is, and I can use go to declaration.
Yeah, that's it. People want to sound cool.
You can also self-host packagist.org, it is open source and provides a lot of features. Satis is only generating a single HTML page with some JS for searching, but it is much easier to setup, you only need the phar and a config file, then you host it with a webserver with http auth for some security (for composer you can put your credentials into $COMPOSER_HOME/auth.json).
I think maybe Jails is a way to do this. Maybe this article can help: https://blog.jessfraz.com/post/containers-zones-jails-vms/ Edit: maybe that article isn’t great at explaining a jail: https://en.m.wikipedia.org/wiki/FreeBSD_jail
In ten years very few people will choose to start a project in NodeJS. JavaScript will still be being used in the browser though. The whole NodeJS scene is a poorly designed ecosystem which introduces complicated caveats to programming. It has none of the ease of PHP yet none of the corporate safety of Java or C#. It's type system is disgusting and its breed of developers are worse than any other language I've come across. They rarely understand anything about traditional computer science or care to educate themselves further. The fact that everyone keeps inventing their own custom language which compiles to JavaScript should tell you that: 1. JavaScript doesn't have all the necessary language features 2. JavaScript is error prone. Don't even get me started on NPM. What a sack of shit! I'll let you draw your own conclusions about JavaScript's bad parts and its good parts from this image. http://thefunniestpictures.com/wp-content/uploads/2015/10/JavaScript-the-good-parts.jpg
Docker containers can only access server files if you bind volumes. If you copy your applications files into the container, or only bind the application directory, then they will not be able to access anything from other containers/applications. 
&gt; What the point of writing these getter/setter DTOs, let alone unit testing them, if they don't validate, don't behave in any way differently from a plain object with public properties? Validation rules will live separately and I'd guess be added over time. It's a contrived example and it asks instead of telling. `-&gt;getStock()` should be `-&gt;stockCount()` because that's what it's doing `-&gt;setStock()` should be `-&gt;receiveStock()` because that's what it's doing I don't understand why you've chosen the points you have to attack the article. The HTTP layer shouldn't be known about in a clean architecture, it's part of a plugin you'll use to run the system via HTTP instead of CLI, or some other implementation detail.
Cool! So you think Docker containers are the right way to go?
That's a good idea but it sounds like a lot of unfamiliar overhead. I'd rather do VMs.
The author has said, and I've addressed this above, that validation rules will be in the HTTP layer. So in that setup, if the domain requires an email address, the HTTP layer will decide what's an email address, validate it and the domain will just blindly trust it has a valid email. Then if you add another presentation/client layer, say a mobile app, it also will decide for the domain what an email is, and the domain will just blindly trust it. Do you see the problem? No, the domain layer doesn't *know* about the HTTP and so on layers, but it's utterly dependent on them for its own operation and ensuring its invariants. This is ***not*** how "Clean Architecture" is described and supposed to work. And "Clean Architecture" aside, it's just a basic architectural mistake in software in general, to intertwine domain and presentation like this.
I think someone else has been watching Uncle Bob &amp; Martin Fowler, but skipping bits :p You've chosen a very specific set of diagrams and processes. Why have you chosen to have 53 assertions in 15 tests? If you need 53 assertions, it will be easier to track things down in 53 places. * I'm pretty sure if one assertion fails you'll not see other failures in those cases so will have to run ***n*** times if something all assertions rest on is broken or multiple things are broken. * The setup work will make writing tests later easier Why not move object creation to helpers that you can pass output from other helpers from test-case data? You could use providers to then queue up tests and have test-cases run a few times with different inputs and results. It's not bad, but it's certainly not "clean". * `-&gt;getStock()` should be `-&gt;stockCount()` because that's what it's doing (verb) * `-&gt;setStock()` should be `-&gt;receiveStock()` because that's what it's doing (verb) don't ask your code what it's done, tell it to do things, and allow the implementation of the domain to decide how to do that. I'm actually fairly certain (both because I've never achieved, or seen achieved) clean architecture in PHP is not possible yet, but I'm glad to see it's not just me that thinks about ways to improve the code I use and write, and very pleased to see how far PHP has come from when I started with it in the 90's and almost everything was top-&gt;bottom, and then it started being broken up, and then code-bases for apps shrunk, and then apps became front-ends for libraries. I liked the article btw. I'll look out for the next one ;-) 
I think this is a great module! In a perfect world we would not need it, sure, but this is not a perfect world. If I host applications I simply do not trust (so all of them) this provides me a great way to reduce the attack surface and thus make successful attacks much less likely. If I notice that a certain setting breaks my application I can still decide to turn of this setting. The protection mechanisms all look pretty sane to me though.
Also try /r/sysadmin 
&gt; While I agree with you that security should be something that is baked in your software and not something you get by installing some plugins, it is unfortunately almost never the case. Maybe it's "almost never the case". But your solution is like observing people are unhappy, and trying to solve this by giving them smile stickers to stick on their faces. You can't fix the problem without fixing the underlying causes. I.e. you can't just filter a set of characters from shell commands and hope it prevents injections. First, it doesn't stop injections, second, far more likely it breaks working software which may *intentionally* be using those characters for more complex commands, third, *sometimes* plugins like yours, in combination with native injection prevention mechanisms actually open *new* loopholes for injection in the application (it's a bit like those firewalls that accidentally enable remote control attacks by hackers). One can't just recklessly modify data and logic in apps without knowing *exactly* the intent of the author in every line of code. This applies to every solution your plugin implements. You can't just decide to encrypt cookies by default with user agent and IP. First, there may be a JS application on the other side reading and setting those cookies - now that's broken. Second, with mobile Internet and roaming the client will be changing IP often as they browse - boom you broke their cookies! Your plugin makes terribly broad assumptions and paints with very large brush strokes. I understand that at the level of abstraction you have access to (i.e. no specific application knowledge, no specific developer intent knowledge) that's the best you can do. But just like them sticker smiles, sometimes "the best you can do" is worse than doing nothing.
[Not it's not](https://www.cvedetails.com/vulnerability-list/vendor_id-2337/product_id-4096/)
Yo won't be able to have different dockers running on same port, unless you have different ips... 
If you are just starting out and your programming mind is still malleable and not set to a C style syntax language, then I would recommend trying to learn the more intelligent languages before the other ones shape your mind in a negative way. Perhaps try learning to make websites in Elixir and Elm (Elixir runs on the server, Elm transpiles to JavaScript which runs in the browser). If you succeed in getting pretty good with those languages, then you might try learning Haskell for the server side. But definitely get good at Elm first, as it is much more beginner friendly than Haskell, but has a lot of similarities. If those prove too difficult to learn then maybe you should try Python on the server and TypeScript (transpiles to JavaScript) in the browser. Those are more elegant than PHP and JavaScript, but most programmers find them easier to understand than the functional languages I mentioned at the start. My other recommendation for someone who is just starting out is to either learn TDD/BDD (test driven developemnt / behavior driven development) or contract driven development. These will help you verify the code does what you think it does each step of the way, which, among other things, facilitates the learning process, and thus is great for beginners to use. Experts also use them. This is admittedly a stretch to consider it on topic, but I predict that in about 20 years the most effective programmers will be using a new style of programming that I am currently in the process of inventing. It is similar to contract driven development except the contracts are also the code. It is a way of programming on a higher level where you tell the computer what to do, not how. Here is my project where I am in the early stages of inventing this: https://github.com/still-dreaming-1/PurposefulPhp
Node is like Ruby to me. It's a cool and powerful language but the ecosystem isn't there, so it's a strange choice to make.
Sure in method scope lol
A little something I put together a little while back. https://github.com/Metrol/dbsql
Are you serious, or just trolling?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Whoa... hold your horses. I never said to couple the validation to HTTP or any other plugin though did I?
The author did. Hence I "attacked" that point of their article. You said you don't understand "why I've chosen the points to attack" in the article. So I explained. All clear :) ?
Two facts to help you decide: 1. 82%+ of the internet is running on PHP and still rising. 2. NodeJS/NPM leadership is a total mess and is more concerned about issues not related to programming than making a good product.
It's not exactly what either of us have said. &gt; *If the validation rules are a part of business requirements-* **it is a good idea to place it inside the application core.** What you could do is to use self-validating value objects which would throw an exception. Then you could catch them in your use case and respond properly (e.g. put fields in the response indicating that a field is not valid). ***In our case, however, we won’t worry about it and validate the incoming request inside the http layer.*** I think it was more of an admittance that it was just for demonstration purposes 
I take it as a usual "one way" query builder that creates SQL from the internal structure? What is interesting about the linked library, it can be used both ways, so you could create an internal structure out of SQL as well. Anyone who ever had to translate some complex SQL query into a query builder syntax would appreciate the ability. Not to mention the overall flexibility, when you can combine both QB methods and raw SQL.
I want to try and answer your question in an honest way. I used to write my own projects from scratch. In fact, pretty much everyone on this subreddit started by coding their own stuff. Most of us didn't use frameworks to start off with. So when we say we prefer frameworks (generally and broadly speaking), we're not trying to deceive you. **What people mean when they say don't reinvent the wheel** This expression is common, but a lot of people don't fully appreciate what it means. Let's say you've been asked to build a car. You could build the wheel yourself. You'll be proud of your wheel. It'll "feel nice" because it'll function exactly as you expect. But you've still go the rest of the car to go. John next door builds wheels which you could have just put on your car, but you've built your own. Okay, let's say you get pretty good at building your wheels. You build many cars. Each of them gets your special wheels. Great. Except, in 3 months time, you discover a problem with your wheels. You now have to go from car to car building new wheels. And you can't just have John's wheels *now*, because your wheels had to be special and your car doesn't fit other wheels. And we haven't even spoke about the engine, body, paint job, etc. John's wheels though, were tested by millions of people in millions of environments and corrected as they went. They're near flawless. **So, here're some questions for you.** - How many times have your written pagination code? And had to calculate how many pages there are and what page your on etc? - How many times have you written a database extraction layer? Or worse, just used the arrays that dump out of `mysql_fetch_assoc()`? - How many times have you written pretty-urls? Or worse, are you still using the `SEO-unfriendly ?page=home` ? - How many times have you manually built a database? - How many times have you had to `mysql_real_escape_string`? Or, if you've forgotten just left your app open to vulnerabilities? - How many times have you verified if a user is allowed to view a page using something like... if (in_array($_SESSION['user_group'], [1, 2])) { } - How many times have you got confused by inserting PHP directly into the HTML in messed up your indentation? At this point you're getting my point. Most frameworks will do all/most of these things in a single command. And if you've manually done any of them, how many times have you manually done them a bit differently in such a way that you can't remember exactly how you've done it? I used to have fun writing my own code. It made me good at debugging, to be honest. But you wanna know what really gives me a hard-on? Efficiency. I can deliver a small website in *hours* now. And I know when I have to go back to it to maintain it, restore it, whatever, that doing that is a couple of commands away. And I know that if I die someone can walk into my job, pick up where I left off and noones gonna think, "where the fuck did he put everything?"
If the server is compromised then it doesn't matter what you do in terms or Docker. The safest way would be to either run in separate servers or run a full virtualization stack such as KVM or vmware so each OS is completely isolated. If the only compromise you're worried about is someone using SQL injection or the alike then Docker should be okay but it's worth noting all large-scale data breaches recently have all come from accessing the server 
Have a docker container that has a loadbalancer in it which routes traffic to the other containers. Even a simple container with naught but [Caddy](https://caddyserver.com/) will do the trick *and* give all your sites free SSL ;D
I don't have a whole ton of love of docker containers... mainly because most developers I know want to overuse the shit out of them (hey, we're writing a tiny 1000 line application... let's create 4 docker containers to run it!) but for OPs case I think it's by far the simplest and probably most effective solution
without really really thorough documentation, this project will never be very popular. you need to have top notch documentation
I didn't have a chance to browse the docs thoroughly, but at first glance it [looks quite detailed](https://github.com/sad-spirit/pg-builder/wiki#user-guide). No?
I always learned that you don't access external services from your unit tests. If you do then its an integration test and you probably shouldn't run phpunit for that.
&gt;It's type system is disgusting and its breed of developers are worse than any other language I've come across. Many people using the same choice of words as you say the very same about PHP.
&gt;82%+ of the internet is running on PHP and still rising Which is not really due to PHP's qualities as a language and very much due to ease of deployment and fast progress as a beginner.
I agree. A lot of libs to develop a "hello world" haha
Yes. A possibility is to have one balancer like caddy or nginx and have N webserver in different internal IPs and nxing set the different backends to them. 
Indeed I am talking about functional\integration tests. What is wrong with using PHPUnit for that? 
On top of what is said, you would want to enforce process isolation between your different execution handlers. Each application should ideally have its own user on the OS, and then the request should run in the context of that user, if one application gets compromised that user should have no ability to read / modify any other parts of the system. Apache2 for example uses www-data as its server process, IIS uses virtual ApplicationPoolIdentity accounts. That said, if a compromised application can then be chained with another exploit, such as a local privilege escalation, you then have much bigger problems.
You can start this way. Create a user and a group for every app. Make every files and dirs of that app owned by user:group. Go with php-fpm and run it as user:group and chroot it to the app folder. You can simply use chroot/jail to chroot/jail the app folder. Use selinux.
Docker doesn't use YAML. What the fuck are you talking about?
Oddly, a language's quality is quite often inversely proportional to its how much it is used on the web. Further, the amount a language is used to solve problems is at least somewhat proportional to its general usefulness. Weirdly, can we therefore transitively say that the lower the quality of a language, the more useful it seems to be for the web? 
This looks kinda nice :) I don't really like the interface though.. the pg_wrapper is interesting too: https://github.com/sad-spirit/pg-wrapper I still can't believe the native postgres functionality is so crap in PHP, who the hell thought returning everything as strings sounded like a good idea? 0_o
I have a range of ToDo list apps :) 
That's pretty sweet, I just rolled in into a test suite i'm working on that touches an external API.
Node is great but its ecosystem is like php 10 years ago: without patterns. So, its very fragmented. Some people uses Typescript, others coffeescript, others something else. It's a complete mess. But it will get organized in the future.
Retry works, but slows down tests when an actual error occurs. It'd probably be better to be more explicit in the tests. Instead of retrying for *any* failure, retry only if the message isn't received yet. `@retry` may be a more reasonable option over complex retry code.
We can, and we don't even need the transitivity for that. One of the reasons for PHP's and JS' success is that they are perceived easy by newcomers. This perception is especially caused by the very same traits that make professionals consider those languages low-quality.
NodeJS: - VERY weak standard library - need to manage discarding state by yourself (PHP kills the chef) - programming error kills whole server process canceling tasks of all clients connected to it - blocking task blocks all other users using this server process too - no alternative to PHP extensions - no way to multi thread, except running whole process again - language lacking features, such as no typehinting, need to use transpilers - immature ecosystem, poor quality of packages and instability - immature leadership - poor design of npm, taking over IO nodes and killing performance of IDE - no standard autoloading - poor documentation
I've done major projects in both PHP and Node/Angular. The technologies are not mutually exclusive and you could even use both on the same site. However, I recommend learning PHP and vanilla JavaScript first to acquire some basic experience and confidence. Once you dive into the fractal of abstractions and build tools that have been piled on top of JavaScript, your risk of frustration and burnout will be much higher. PHP along with a good framework like Symfony is awesome for rapidly building a solid website that will only need occasional maintenance. The PHP documentation is solid, and functionality-breaking changes do not happen often. Modern JavaScript frameworks are good for single-page applications that require lots of asynchronous data transfer. Since Flash has been banished, it is the best that we've got for this sort of thing. JavaScript has been around for a long time, but the attempt to modernize it is still very young. There are a lot of "architecture astronauts" in the JS community constantly cranking out "improvements" and reinventing wheels, and you will be expected to keep up. Modern JavaScript apps require constant maintenance and study, functionality-breaking changes happen regularly, and it is difficult find accurate documentation or relevant answers to questions due to the rate of change. tl;dr advice: Learn a PHP framework and basic JS first, then learn Webpack and NPM. Learn Angular or React or FlavorOfTheMonth.js later if you have a specific project in mind for it. 
"CloudFlare - Tursted by... OKCupid"? How can anyone trust anyone or anything related to OKCupid? ;-P
# My opinion: If I was starting from scratch today, I'd want someone to recommend to me to start with Python. I don't regularly use Python, but it's a GREAT language that does a whole ton of things well. It's also extremely popular with scientists doing machine learning and has great libraries available. # Node.js: Node.js for several years now has been the "hip" technology that garnered much attention. However, that said, I'd argue it's reached its peak in terms of rate of growth and has lost some of it's luster. While it still has the whole "one language for both front and back-end" aspect going for it, its dominance in the other area that helped make it popular (asynchronous programming) has waned. The guy who created Node.js had this to say: &gt; That said, I think Node is not the best system to build a massive server web. I would definitely use Go for that. And honestly, that’s basically the reason why I left Node. It was the realization that: oh, actually, this is not the best server side system ever. Source: https://www.mappingthejourney.com/single-post/2017/08/31/episode-8-interview-with-ryan-dahl-creator-of-nodejs/ As he points out, newer languages such as Go do a better job at some of the things that used to be Node strengths. And if a quote by the guy that created Node isn't enough, there's also articles out there by businesses that ran into scaling problems when using Node in a demanding setting and ended up find better success with Go: https://medium.com/digg-data/the-way-of-the-gopher-6693db15ae1f So if we accept that Go is better at asynchronous http than Node, and that Python and PHP are more mature and easier to use, it kinda leaves a void where you wonder what the selling point is. I think the guy that created the tech having moved on to better technologies says a lot. Ok, looking beyond Node to talk about Javascript in general, most people I know don't "love" javascript. It's a decent language. Not great, not bad. Some of the pain points of the language have been slowly getting addressed at it matures. # PHP PHP is a mature language that is easy to learn and does a lot of things right. It wouldn't be my first choice for someone to learn primarily because most employers seem to be looking for other stuff. I believe you'd have a much easier time landing a job if you learned Python, Javascript, Go, or C# instead of PHP if that's your end goal. #realTalk 
I meant Docker Compose.
Dang, I wish we could have something like this in DBAL, but we need to support some horrible SQL dialects :-\
Add Object Oriented Programming and a framework like laravel to your list to have a look at 
What a monumental waste of time. Actually Go and do something productlive.
&gt; According to bloggers every ~~programming~~ community is toxic. 
There is PSR-12, an extension of PSR-2, its only DRAFT atm though, so it could change alot. https://github.com/php-fig/fig-standards/blob/master/proposed/extended-coding-style-guide.md
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [php-fig/fig-standards/.../**extended-coding-style-guide.md** (master → be8f2e2)](https://github.com/php-fig/fig-standards/blob/be8f2e200a5e0ef5646633aafb859789591d8a1c/proposed/extended-coding-style-guide.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dnjw34z.)^.
I do disagree (author here too). Filtering can be done on a file, function, file hash, parameter, regexp, … so if snuffleupagus is breaking your website, just write your own rule. We [explained in the FAQ](https://snuffleupagus.readthedocs.io/faq.html#who-are-you-and-why-did-you-write-snuffleupagus) why we wrote snuffleupagus, and what are our usecases. Filtering on ```[$|;`\n&amp;]``` will indeed kill several generic shell injections. If you're using those symbols in a legitimate way, no one is preventing you from writing an `allow` rule for them, and to narrow it down to a precise function/file/… Since we're dropping the request (like what suhosin is doing), there is no way that we could open loopholes (I have never seen such exploit/usage on suhosin, feel free to point me to one). We're not "encrypting cookies by default", as written in the [documentation]( https://snuffleupagus.readthedocs.io/config.html#cookie-encryption ), precisely because we thought about javascript applications: this is why you __have__ to specify your cookie's names. We're aware of the "per-ip" approach limitation, this is why someone [proposed a better way](https://github.com/nbs-system/snuffleupagus/issues/9) :) We're of course making assumptions, but I wouldn't call them "broad" (most of the features are deactivated by default), and we __do plan__ to use snuffleupagus on a web-hoster scale, so be assured that we absolutely do **not** want to break our customer's websites ♥ This is why most of the *generic mitigations* are deactivated, the only ones that are "on by default" are the hardening of `rand` and the killswitch for XXE. On a side-note, about "doing our best", modern exploit mitigation are most of the time running at "the level of abstraction they have access to": WAF has no ideas about the underlying context, ASLR and NX don't care about what you're running, CSP has no idea about your code, … It's often up to the developer to pay attention, or to the admin to carefully consider what to enable/use, and how. 
Everybody does it. I thought it was just me! hahaha
This is the best suggestion for performance, vms have a much higher overhead. Use Ansible to help you out
Very neat idea, this is perfect for something I'm working on. Thanks for sharing!
http://php.net/manual/en/ini.core.php#ini.open-basedir &gt; Limit the files that can be accessed by PHP to the specified directory-tree, including the file itself. This directive is NOT affected by whether Safe Mode is turned On or Off. 
Why would anyone downvote this?
No amount of php knowledge alleviates the time wasted trying to decipher insanely structured theme code if you get stuck with a bad one.
They're usually ass hats who haven't touched php since 2002. Yes php lacks things compared to something like Java but JS lacks even more and has only started trying to catch up in the last 3 years or so. 
Unix systems are multi user. They are designed around this already. Just set up each application in its own FPM pool with it's own user. Each user should have limited permissions which don't include access to anything else. Additionally, another good practice is for the application code to be owned by a different user than the FPM pool or web server. You grant read access to the code only. This prevents a code compromise from easily escalating to shell access.
Yeah no... Don't listen to this guy. If I wasnt on my phone I'd gladly go more into details but I'll answer some points. &gt;Very weak standard library I prefer it to a bloated standard library. It's all down to preference really. &gt;No alternative to php extensions You have native modules for node, that's as close you get without actually being a php extension... &gt;No way to multi thread except running whole process again. Correct me if I'm wrong but surely you've heard about the clusrer module that is built in? There are other ways to utilize multiple cores too. &gt;language lacking features such as type hinting So did php up until recently. Anyway, typescript is incredibly popular and lets you write strictly typed code. Sure it needs to be transpiled but that's not a problem. &gt;immature ecosystem, poor quality of packages and instability. I don't get this... All packages I'm using at work seem to be of very high quality. Also what is unstable? Your code? &gt;immature leadership And php doesn't have this? &gt;killing performance of IDE What do you even mean? How can node in of itself kill IDE performance? &gt;poor documentation I beg to differ. I find the documentation for both standard libraries and third parties to be of high quality. 
That's pretty sexy.
[this](https://i.imgflip.com/1wlcew.jpg)
&gt; Filtering can be done on a file, function, file hash, parameter, regexp, … so if snuffleupagus is breaking your website, just write your own rule. We explained in the FAQ why we wrote snuffleupagus, and what are our usecases. So instead of fixing our source code, we'd instead be writing elaborate rules to match a specific parameter of a specific function?! *Who* is this tool targeting at all? If it's targeting novices, who can't fix their source and need a blanket security solution, then expecting they would be sitting all day debugging the breakages from your tool and writing rules to avoid them is absolutely unwarranted. If it's targeting experts, who *can* fix their source in a way no generic "rule" can, then expecting them to split their logic across their source and a set of crude rules that sort-of-kind-of try to mitigate an issue instead of properly resolving it once and for all in the one best place for this (the source), is even more unwarranted. I just can't figure out who is this for?
Thanks for taking the time to write this. First I'd heard of Go... apparently the performance gains are quite good. I see that it has seen a dramatic increase in use over the past year. Is it easier to learn than PHP?
Yeah, I know. That said, it's a pretty legit solution for easily making relatively safe sandboxes for applications like the OP is looking for without going through the overhead hassle/maintenance of full VMs.
So you have only worked with the most bloated segmentation fault generating PHP framework and think PHP is bad?
How would the implementation of an interface break LSP, if the interface method definition is appropriately type-hinted? `public function doAction(RequestInterface $request): ResponseInterface` seems water-tight whereas expecting `__invoke` and hoping the return value is correct doesn't...
Just remember that if you're on a shared/cloud hosting platform you might be on a VM already, not all processors or vm providers support VMception.
Late to the conversation, but you have docker, VMs, chroot, jailing, user permissions and probably some other based on something similar.
My assumption was that you still will have middleware layer which could transform some parts of requests into ready-to-use objects. For example in my case before passing things as actions' arguments, I like to map request data to specialized request objects. So instead of `RequestInterface` I will have `RegisterUserRequest`. There are also many cases when I will prefer to resolve arguments via listeners/middlewares instead of manually resolve in request handlers. With such assumptions, your handlers will always have different signature, so won't have any chance to make an abstraction from this handlers which will not violate LSP. If my assumption is wrong, if request handlers should be responsible for next step argument resolution, then it has even less value than I thought. Or at least without real-life examples I don't see any value.
&gt; Or at least without real-life examples I don't see any value. :+1:
You can try this one: https://github.com/laracasts/Lets-Build-a-Forum-in-Laravel
"Clean architecture" should be not for sake of architecture. It has pretty much simple goal: apply changes faster. Things like repositories in context of active record, or services which acts as procedures which works with anemic model, will not make your code "clean". Especially if you don't understand ideas behind this. Also without knowing your context (what kind of projects you working on, how many developers, do you support your application in production, do you have your requirements changes? How you measure your productivity) it's not so simple to define what kind of solutions you need. Or at least describe what exactly you think you doing wrong? p.s. Do you understand SOLID principles? GRASP? LoD? Are you familiar with other options like CQRS?
Check out the source of Laravel Horizon.
PHP is easier to get a "hello world" page, but to build proper apps I'd say the amount of effort to learn it is the same as for node.js. The required effort to build apps in them is also comparable, and job prospects are determined more by your local job market than the technology (in my local job market PHP has a slight edge). It all comes down to personal preference. Don't limit yourself, you should eventually learn both. Which one you learn first doesn't really matter. As for being future-proof, don't bother. Pick something popular now, and learn whatever is tomorrow's fad tomorrow. A couple of years ago it seemed like ruby was going to dominate all of web dev, and running javascript on the server was just plain silly. Things evolve. As a developer you'll be retraining all your life.
What was the motivation to create this I wonder? I've only got 1 server and it's running .net and I've got a PHP application that's integral to my c# application.
Well, you are an ass hat who has probably not touched ES6+. Also, I touch PHP on a regular basis and I still find JS saner. Both are not what I’d call a quality language, but PHP has fucked with me way more often than JS. Also, this is not just about lacking stuff. I don’t miss much with either of those. It’s mainly about the quirks, the weak type system, the inconsistencies and at least until PHP 7 it was also the lack of static typing.
For the lazy: https://github.com/laravel/horizon
This ^ as a Junior with less than 7 months experience, I steal architecture ideas from this project the whole time Just be sure to understand what's actually going on
All very excellent advice! In OP's defense, sometimes when learning new things, it helps to see a finished product to help click all of the different parts that come together in a system. 
Nah. If I wanted to use another language instead of php, javascript would be very far down the list, and even then - why CGI?
I've found the rest api to be extremely slow and my response was to store json calls in flat files and then update them when necessary. Has anyone else done something similar or found the rest api to be slow?
https://www.youtube.com/watch?v=NdISMdSDIaw
&gt;[**NODE JS is EVERYWHERE [13:50]**](http://youtu.be/NdISMdSDIaw) &gt;&gt;The traditional full stack was web frontend development and cloud platform backend work, but if you talk to developers today this has vastly changed. A new full stack is emerging that includes the traditional web frontend and cloud platform backend, but also includes mobile phones and tablets, API services, desktop (who thought that would explode?) and IoT. Developers are tasked to build and manage one application that has to manage all of this. And, the program environment of choice for the full stack developer: Node.js. This presentation is delivered by the Node.js Foundation community manager, who talks a bit about the history of Node.js; why it's becoming the first choice for the full stack developer; and how Node.js functions everywhere from web frontend development to IoT to create a single platform for developers to create the herculean applications of today. &gt; [*^Coding ^Tech*](https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ) ^in ^Science ^&amp; ^Technology &gt;*^16,845 ^views ^since ^Sep ^2017* [^bot ^info](/r/youtubefactsbot/wiki/index)
Never had a serious issue with Symfony itself. I don't judge PHP on its features as a language, but the ecosystem with composer. I am switching back from NodeJS to Symfony for my new job and there are tons of bundles that are deprecated or unmaintained. For vital stuff. While with npm you would have 4/5 different implementations with weekly improvements. It's night and day. If you want to argue on the vitality of both ecosystem, I can go into details to prove you what's going wrong. I also noticed that while Symfony bundles are not actively maintained, Laravel has tons of plugins that are more up to date. But there's no way I will ever switch from Symfony to Laravel considering all the obvious architectural flaws of Laravel.
I would totally agree with your whole statement if we were in 2014. The NodeJS ecosystem has now bloomed and reached some maturity. Honestly, if you go back to what matters: "getting shit done" and keeping high velocity when you project grows in complexity. I can use both Symfony and ExpressJS to build a modern API for any Angular or React app. But NodeJS will have dependencies more up-to-date and actively developed.
You do need to keep your mind open to changes. But you can't possibly build anything in 2017 that's a bit complex without relying on at least 10/15 dependencies that you need to cherry pick and harmonize. I built simultaneously an API in Symfony and another one in NodeJS/ExpressJS and both frameworks delivered stable and quality code without any issue related to each framework. The only pain came from third parties. And in this case, NPM would win.
 - Useless spammy blogpost with 0 content - You haven't checked the post before posting? The code blocks are borked
&gt; We Samsyak Online are the best PHP Website development company in New Delhi Well thats not difficult is it
Anyone having to invalidate their phpstorm cache more often lately with 2017.2.4? It's getting very annoying lol.
Not sure about Apache, but with FastCGI (FPM), there is a [chroot](http://php.net/manual/en/install.fpm.configuration.php) option. That should be secure enough unless you run the FPM as root (hopefully you don't). It's simple, minimal overhead, although there are some limitations (you must link your system binaries in case you need them, usually you don't).
1. Bidirectional Interoperability 2. Performance boost 3. Security enhancement 4. .NET tooling (VS, VSTS etc), debugging, performance profiling etc. 5. Sourceless distribution of PHP 
Does anyone use peachpie in production? What are your experiences? (didn't watch the video)
Absolutely. Not even just beginners either. When I'm working with a new language, pattern, or framework it's invaluable for me to be able to have a reference project to see how things are structured and written. When the Symfony folks released [EnMarche](https://github.com/EnMarche/en-marche.fr) it really cleared a few concepts up for me. I can say 'Okay, I see X ways to tackle this part. Let's see if I can find something similar in EnMarche' and dig around looking for ideas.
&gt; You can simply use chroot/jail to chroot/jail the app folder. When I tried that, I found it doesn't work as easily as you might hope. The problem is that a lot of files need to be accessed that you aren't normally aware of e.g. when doing network address lookups. As these files aren't available inside the chroot by default, you have to spend a significant chunk of time tracking those files down, by using Strace to see which file accesses are failing. 
Thank you that was very helpful!
No. PHP is definitely easier for a beginner. Without going into technojargon Go is like a more friendly C with garbage collection.
&gt; If the only compromise you're worried about is someone using SQL injection or the alike then Docker should be okay How so? [If you get access to a single Docker on a server, then you have the whole server, not just the container](https://www.reddit.com/r/PHP/comments/5jw0ej/full_stack_webdevelopment_in_lamp_with_docker/dbjka42/). Docker makes no claim to providing a [secure isolation](https://gist.github.com/joepie91/1427c8fb172e07251a4bbc1974cdb9cd#secure-isolation). 
This is true (to a point), I made the assumption people wouldn't be running all their containers using the same user and the user having escalated privileges. &gt; if a container gets compromised, then all the data inside of that container is also compromised Each container has its own user is just the standard way I set things up the few times I'm forced to use Docker, from the little info the OP gave I'm under the understanding this is what he was going to be doing. If a container gets compromised then of course "all the data inside of that container is also compromised" but the entire point in using Docker is to have a custom stack for each application so I don't understand why you would be running multiple apps (having multiple sets of data) in a single container anyway. Either way, there is no silver bullet. The best approach as mentioned in my original post is to have separate servers or a full virtualization stack.
Why this get downvoted every time ? Peachpie is an interesting concept, be more open minded... if you can 
&gt; The best approach as mentioned in my original post is to have separate servers or a full virtualization stack. That's the part I totally agree on. The risk of someone getting control of a single docker is that they can then go laterally into other dockers on the same server. In short, when you want to let people run un-trusted code, docker doesn't help you isolate anything securely. It's a bit of a misnomer/misleading advice to suggest docker in this case.
A good set of tests would always be useful (Unit or any other form that properly exercises the framework)
NodeJS requires more RAM and there might occur memory leaks. In PHP there you won't have these problems.
I think there are bots crawling this subreddit that downvote every post containing the string "laravel"
Your public/index.php only includes the vendor autoload, how does anything execute? Your code overall makes too much use of `include` and it looks like you wrote your own controller autoloader rather than using PSR. Config files should be configuration data only, they should not include logic. Just my few cents.
I actually see no benefits in using query builders at all. Some reasons: - Depending on the implementation it's sometimes useless overhead. You create objects and call some functions to just build the query string. This will reduce the overall performance of your app. - It's harder to understand and optimize queries. - Sometimes you want to run a query on the DB directly to find an issue or just check what's the result for instance. Using a query builder you can not just copy it from the code.
Thanks for the throwback to ASP classic from over 20 years ago. Who the ef writes code like this anymore.. seriously. 
Using this particular builder, you, actually, can.
Yes, but unfortunately we cannot share who (at least for now). Phalanger, the older version of Peachpie, was used in production by several companies, such as Jadu or AMain with great results that you can Google. However, Peachpie is not yet in version 1.0, so it will not work out of the box. If you have something you would want to run in production you can contact us and we'll work from there. 
Oh nice! I really want to improve this project, would you mind to do a Pull Request?
I was more interested in experience from using this project (compared to traditional php development/deployment). Eg. how it feels to write PHP in visual studio? I'm not really interested in using it myself right now but I really like it for a couple of reasons: * Compiled (vs interpreted). I feel like this is quite an important feature that's missing from normal php (since code shouldn't really change in production) * Alternative to standard PHP (especially with HHVM going in other direction) Good luck to you guys!
Pretty hard to do considering the architecture of Laravel itself
Embrace, extend, and extinguish.
I'm sorry, I really don't have the time.
PHP in Visual Studio is quite cool, especially when you have all the debugging and performance profiling available. It's a colossus though, so VSCode is a great great alternative (although it doesn't have all the fancy diagnostics and profiling). Thank you!
I really don't like this all models in src folder structure. I'm actually using Laravel for my work, and I prefer to use "components" system, each component having a clearly defined goal. For example, I've a User component (quite obvious usage here) or Blog component (all the blog stuff) ... In each of this components, I've Http/Models/Providers/... directories.
Well, yea... chroot/jail [+ selinux] could be a little bit clumsy. The guy above, he's right :). But consider that it is the safest (as I know) method to host multiple applications onto the same machine. Nevertheless the cost and the performance gain worth it.
2edgy4me
Without taking docker into account of course.
have you tried the PrettyPrinter ? check out https://github.com/nikic/PHP-Parser/blob/441e6e1d310008f6d6af23a4bf83cb0c05cd61ba/doc/4_Code_generation.markdown
I'm just browsing a bit through this code base, and maybe I'm just looking at the wrong thing here, but; how exactly is this clean architecture? Everything seems to be hammered "into" the framework: https://github.com/laracasts/Lets-Build-a-Forum-in-Laravel/blob/master/app/Http/Controllers/ThreadsController.php#L59 Maybe I don't understand "clean architecture" (which is very well possible) but to me it means 1) layers and 2) separating your business logic from the web-tier framework. Neither of that seems to be happening here. Is clean architecture even possible with Laravel (i.e. Eloquent)? I mean, Eloquent is a framework and your models extend from this framework which means you have hard dependency on this framework. 
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [laracasts/Lets-Build-a-Forum-in-Laravel/.../**ThreadsController.php#L59** (master → 1d0da52)](https://github.com/laracasts/Lets-Build-a-Forum-in-Laravel/blob/1d0da52a898a55a4a95774636d488169d4de887a/app/Http/Controllers/ThreadsController.php#L59) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dnliazg.)^.
you are both wrong, if facebook could go and redo it again they would prob just build everything in ReasonML and Reflex!! 🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃
What do you guys think of my new style of video? Tried it out for the first time. Any feedback is welcome! :-)
What? You linked a store method on a resourceful controller. Nothing wrong there. What exactly do you think isn't clean?
The controller (web-tier) is validating the incoming information, creates the domain object (thead) and stores it in the database. I'm not saying it's not a valid way of doing this, it's just not what is considered "clean". In a clean architecture there would be at least a ThreadService that is responsible for anything regarding Thread domain objects. The controllers job would be to "distil" information from the request and pass this information to the ThreadService which validates it and creates the thread object and stores it in the database and finally returns it. 
As I'm seeing no restarts on that pic... have you checked if it's the owner processes that are being reset? Fastcgi doesn't always share between threads and when they cycle you reload the opcache.
So you'd tuck the logic under another class layer appended with "Service" and that somehow makes it "cleaner"? I'm not trying to be stand-offish, but I just don't understand why people seem to think unnecessary complexity === cleaner code.
Laravel IO is another good starting point: https://github.com/laravelio/portal
A layered architecture makes sense for large scale applications, think very enterprisey with a lot of moving parts. It doesn't translate well to small web-tier apps (like the example posted by the-coder-of-xxdeath, that's just a Rails style MVC CRUD app). When you encapsulate your business logic within a service that is independent from your web tier then a) you can now use this service also in a different context (i.e. a CLI command) and b) they become easier to test since you don't have to go through a web-tier to get access to the logic. 
This is down to not understanding the difference between memory allocated (true arg) and memory used (false arg). When php internal code "allocates" memory using emalloc(), PHP is actually mass-allocating a big chunk of memory (called a slab) using malloc, then portioning out smaller pieces of that memory to the emalloc callers. When the runtime code later calls efree(), it marks that subsection of the slab as available to be given out again, but doesn't actually return the whole slab to the system. For a number of reasons (which I'll save for another time), this extra allocator shoved in the middle, replicating the kernel's job, actually makes everything faster. So when you ask PHP "how much memory is really allocated from the system?" it truthfully tells you that there's a bunch of empty slabs sitting around doing nothing. That doesn't mean there's a leak, it means PHP expects you to want to use that memory again soon.
Sara, Awesome, thank you, and that would explain why gc_collect_cycles() had no impact as it was already correctly being freed, but not releasing the entire slab. And there's no way to force slab releasing, correct? In the meantime going to use a JSON streaming library to deal with these gigantic files.
[removed]
I love these kind of explanations!
I can't say that EnMarche example provided you example of solid, clean code... unfortunately... This is the main problem. I didn't seen anything useful (except maybe some libraries) on github from this perspective. Also harm of this way of understanding things is that you can't really tell at the beginning is something that you see is good or bad practice. Especially if bad practices putted into framework documentation, even if it just to simplify concepts.
Thanks for the reply - I get what you're saying; however this certainly isn't an enterprise application with a lot of moving parts. It's a forum which is made up of mostly cruddy logic. You still made the comment that the validation in controller isn't considered clean? And I really disagree with the testing part, feature testing all the way through an endpoint &gt; testing each piece of code in isolation. I just wish people would stop evaluating code like it's running a golden rocket ship or a pacemaker (not saying you personally).
Great. I already have a problem with interviewees doing tricks like memorizing the list of design patterns but not knowing how to create a singleton or factory. I think you're doing a disservice to the entire world here.
Please don't start the videos with "Hi Guys". It can have connotations of gender bias, and comes across as unprofessional as all the poor quality coding videos do it.
&gt; Please don't start the videos with "Hi Guys". It can have connotations of gender bias Are you serious or trolling?
Did you listen to the first part of the video? I mention you should not be memorising the answer or buzzwords. You should be looking into something if you don't know it. There are many videos/blog posts out there which list the questions and give a simple answer. I tried to go into detail to give the developer more information.
at first I liked the idea and went looking into my code to see what the impact could be. Then I let it sink in for one day, to see if I still thought it was a great idea. Then it hit me: splitting up classes, to have more classes just for the sake of SOLID? How about the routing? (that never can be SOLID) How about my repositories and services, do I need to multiply them as well, for SOLID sake? If SOLID is such a thing, why are there methods beneath __construct? I think SOLID is overrated, and as long as I program wisely, and follow KISS, I will be safe enough. What if there is some special route to something that is only going to happen on new years eve with a log file? Do I need a class with a name representing that request? SOLID says yes, and I say: no way Jose. Perhaps LIDO is the way, or even KISS-OLID. 
I think, this would be ideal for a blog. Making a video out of this is time consuming for you, and for all the "readers" A blog makes it easier for us to copy and past stuff (for example, if I have a comment on "duplicate code", I have to type it all myself, and yes: I'm lazy) Duplicate code removal doe not result in faster pages, unless that code is actually called in 1 page hit. Using an orm or plain sql can really make a difference. Caching can too, if used properly, but caching can hide a problem as well. How about a caching web proxy (like squid)? 
I think this is really a valid point. How about the galls watching? "Hey people" will do just fine.
No, not trolling. I appreciate this isn't the place for *that* discussion. So that aside, I still think it's just a bit of a tacky start for a video (and really overused). I think you can easily give a better impression of quality by just jumping straight into the topic. It feels more prepared.
This should be in the official PHP.net docs for PHP 7.2, not a private company website.
&gt; not a private company website. Sure, just fork https://github.com/paragonie/pecl-libsodium-doc and then import it into the php docs?
**K N O W L E D G E** **B O M B**
I agree that the "hello whatever, today we are going to blah blah blah *10 mins later* ok lets get to it" is annoying, but the gender bs, keep that on tumblr.
According to [the documentation](http://php.net/manual/en/timezones.php) it takes it from this file: http://pecl.php.net/get/timezonedb Seems to be stored as a c header file, no clue how to read the format, but m guessing you could update your old php version with a new version of the timezone database and be good to go. **EDIT** not related to PHP, but this wikipedia article is kind of interesting https://en.wikipedia.org/wiki/Tz_database
We're not worthy! We're not worthy!
Afaik, Turkey (and North Cyprus) is currently in TRT +3h all year round. I couldn't find any information relating to them switching back to EET/EEST. Do you have any sources for this change back?
To add to that, the database and OS each have their own timezone db, which can affect things depending on what you're doing. To update the rules: * OS tz updates are typically rolled into general updates on windows and a separate package on linux * DB tz updates usually can be installed separately (without upgrading the db). Consult your DB's documentation. * PHP tz info can be updated separately using "pecl install timezonedb"
[phpcs](https://github.com/squizlabs/PHP_CodeSniffer) and [phpmd](https://github.com/phpmd/phpmd) on top of PSR2
Hi Sara. You should extend this reply into a blog post titled: "PHP: Taking out the trash" and point out use case (examples) and the structs or portions of the Zend_MM that's relevant here. I see high value in your time being put into something like this. Additionally, you should set up one of those "Donate" buttons on your blog so that people can show appreciation for the detailed explanations you give on Blog/Reddit and the contributions you've made to PHP in the past few years. If anyone likes these idea(s) then upvote this reply to let Sara know you think it's a good idea. Just a thought. Pleasure, as always to read your stuff. Cheers, Dragoonis :-)
&gt; JSON streaming library can you share your experience?
There is a function called [gc_mem_caches()](https://secure.php.net/gc_mem_caches) … but seriously, its use cases are very specific...
http://www.ntv.com.tr/turkiye/danistaydan-yaz-saati-karari,hQTX7Z_8kUyXn3OFuObIZw?_ref=infinite Edit: it says that the executive order was canceled by the council of state because the temporary law didn't have end date. But probably it went something like this "We don't want to be seen like we have regretted. Please tell council of state to cancel the order".
[removed]
So you're saying that PHP is not performant, is insecure and ain't easy to debug? Why not switching to .NET entirely since you don't see any good reason to use PHP. The answer is simple, .NET doesn't have any good competitors to Wordpress/Drupal/Magento/Symfony/Laravel, that's why. Now you know why 82% websites are running on PHP instead of .NET :)
I don't think that a greeting is unprofessional at all, but I agree that it's one of those gender issues we end up doing until we think about it. "Hello everyone" seems fine to me :)
&gt; however this certainly isn't an enterprise application with a lot of moving parts. I know. The OP is asking for an example of clean architecture. The example given (and upvoted, for what ever reason) is just simple MVC CRUD. That's the point I'm trying to make. 
WOW, starting from your example I think I should create an extension that will allow running PHP code on a Ruby server that runs on a Python server that is installed on a go-lang server. Sorry for being mean, but this is USELESS
Changelog: https://github.com/php/php-src/blob/php-7.2.0RC3/NEWS Upgrade notes: https://github.com/php/php-src/blob/php-7.2.0RC3/UPGRADING
Am I the only one who reads it all, shrugs a bit, then wonders if I'll get a free performance boost if I upgrade? 
IMHO * Upgrade PHP * Try optimize the code * Upgrade hardware * Try to optimize harder * Rewrite all with Go * give up and move to asm
Wonder if the mods would make a sticky for Digital Ocean's [Hacktoberfest](https://hacktoberfest.digitalocean.com) where people share &amp; seek help on open source projects. /u/frozenfire /u/Daleeburg /u/Colonel-Rosa what do you guys think?
As far as I'm concerned, the manual on php.net can copy/paste/remix/whatever any part of the documentation without limit, restriction, or attribution. (For everyone else, I'd appreciate it if you adhered to the Creative Commons license for the text and MIT for the code snippets.)
most of what we do is CRUD stuff.
I *thought* there already was a blog post out there by Niki or somebody, but I'm having trouble finding it. You could get the general idea of slab allocators from wikipedia ( https://en.wikipedia.org/wiki/Slab_allocation ) or the jemalloc/tcmalloc docs. Though it does sound like a good enough blog post topic. ¯\\\_(ツ)_/¯
**Slab allocation** Slab allocation is a memory management mechanism intended for the efficient memory allocation of kernel objects. It eliminates fragmentation caused by allocations and deallocations. The technique is used to retain allocated memory that contains a data object of a certain type for reuse upon subsequent allocations of objects of the same type. It is analogous to an object pool, but only applies to memory, not other resources. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.27
Thanks but it's my own server :)
The future of NodeJS is strong, but so is PHP. They are both solid tools that I wouldn't want to develop today without. I jumped on the node train and prototyped porting a couple business apps from PHP. It went fairly well, but ultimately PHP 7 and Symfony won us back over for business apps. NodeJS just isn't there when it comes to mature OO frameworks, strong native typing, and the incredible developer experience available with PHPStorm. On the other hand, PHP has event libraries, but not quite as enjoyable to work with as Node. When event architecture makes sense, I'll reach for node. Typically just utility apps though. Then there's frameworks available that allow you to use node to build native mobile and desktop apps. Last thought is that even in a symfony app, node is used for the front-end build system. Node is just another tool in the toolbox. 
Interesting. Thank you for sharing that. I am working on freecodecamp.com, so I will have to work through nodeJS. I was going to take Codeacademy's PHP course, but they took it down. So it looks like I need to start out on node as my first language after all. Hope I don't pick up bad habits with the typing system (I barely even understand what that means yet hehe)
When I told you initially that this guy (and others) are spamming generic architecture articles (which have been covered like a bazillion times all over the web) I got downvoted to hell. That was few weeks ago. I'm curious if any of you on /r/php are starting to change their minds after they've seen the Onion Architecture, Layer Architecture, Column Architecture, Diagonal Architecture, Triangular Architecture, Dirty Architecture, Clean Architecture, and so on Architecture, or are you hungry for more? Because let me tell you, there's tons more Architecture coming your way if you want it. It'll never stop. Everyone wants to be Martin Fowler these days and document patterns and architectures. Every time someone sneezes, that's a new pattern to document. So enjoy. Just don't pay attention to the fact none of this actually helps you program any better in practice.
You just named the exact reason for the existence of this project, not sure what you're arguing here...If it weren't for the fact that 82% of sites run PHP and just about all mainstream CMSs are in PHP, there would be no point to Peachpie. 
TFW you're brushing up to write a blog post and you find a tiny, but deeply placed word alignment bug. https://github.com/php/php-src/commit/b5bc88c64ef241924b55162f9b5dc751be7e10f1
Sorry the pace of this was way too slow for me
If starting with node has to do with my comment that node is used as the front-end build system, consider it's more of a 'set it and forget it'. Technically, node is used for running webpack and installing front-end dependencies, but development of it is not really required. I would start with PHP myself. Good luck!
You forgot * Kill yourself in maintenance phase
thank you; my thoughts exactly.
Always be on the latest version of PHP. Make sure you're using Fast CGI with opcache enabled. If you're running plain CGI that reinitialises and recompile the PHP each time you're losing massive amounts of performance. Run a number of threads equal to your core count + 20% to account for the other processes waiting for blocking IO such as database queries. Make sure all of your third-party libraries are up-to-date as they may have performance fixes in them, as well as security, features etc. Profile your application, try and find where the performance bottlenecks are. If your database queries are taking 1/10th of a second to come back because your table doesn't have indexes for example, you might get a big perceptive-performance increase just by adding an index. Tools like xdebug and qcachegrind help enormously with profiling, but don't try to micro-optimise every function unless you're in an ultra-high-performance environment (sub millisecond response requirements etc), as chances are there's maybe 2 or 3 bottlenecks and the rest is fine. Plan to scale horizontally wherever possible. So long as you've coded it to work properly (e.g. distributed session handling) more servers can be preferable to more powerful servers (and you get the huge benefit of additional redundancy). Look into caching. Do you need to re-run those queries and page generation every time? Can you store the result in an in-memory cache such as APCu, Wincache or Redis and serve it from there? There's few web-based scenarios that PHP can't get pretty solid performance from. Obviously you're not going to want to do a lot of pixel-by-pixel graphics manipulation or complex mathematical modelling with it, as those all benefit enormously from optimizations that PHP doesn't have quite yet, but for all your common tasks, it's absolutely capable.
Depends on your definition of performance, but in general: Yes. https://www.phoronix.com/scan.php?page=news_item&amp;px=PHP-7.2-Beta-1
I'm disappointed the article didn't talk about the most efficient approach: the revolutionary "Middle-Out" migration.
https://github.com/mikecurry74/php-secure-framework
If only there were some available resources that explained this information in depth and accurately that were publicly available. Maybe we should all band together and create some sort of transferable medium that others could use to help them understand these concepts as explained by experts on the subject matter. Until then the best we can do is hope for is that these bloggers will continue to bless us with over simplified examples.
You should create packages and move your logic there, also look up the repository pattern doing db related stuff in your controllers shows lack of depth and knowledge.
I'm afraid if you have ambitions to create a secure framework, you need to have great understanding of security. The way you blindly trust proxy headers in your `is_ssl()` function implies you don't understand the dangers of reading proxy headers when you're not behind a proxy. And then there's this which... is anyone's guess what it does, because it's not documented, and it kind of makes no sense: function filter_url($url) { // remove characters we do not support return preg_replace('/[^A-Za-z0-9 ]/', '', $url); } What kind of a "URL" is alphanumeric with spaces and nothing else? Literally no URL. I recommend you read the materials on OWASP and keep practicing. Good luck. Also... do check out objects. ;-)
If you use Ubuntu there is a program called virtualmin that virtualizes server administration for you. I used to work for a hosting company managing 1000 domains on single server with this app.
Thanks for pointing that out, I'll get it addressed. As you can see, opening this up to the masses will only help out the project with comments like this, thanks! :) When I pulled this from my other past projects, I must not have taken the correct code that checks the port coming in. A lot of the project is not documented (as per the readme.md). There is some code around the project which I am refactoring. That particular function just ensures that the script being requested is only alphanumeric. i.e: http//yoursite.com/SCRIPT123 (SCRIPT123) gets pushed through that badly named function. 
Second to this. Plus, you need to think about what you're doing sometimes: ``` 'user_guid' =&gt; hash('sha512', uniqid('HSV', true) . '-' . random_bytes(32) . '-' . openssl_random_pseudo_bytes(64) . '-' . random_int(PHP_INT_MIN, PHP_INT_MAX)), ``` This is junk, just [generate a UUIDv4](https://paragonie.com/blog/2015/07/common-uses-for-csprngs-cryptographically-secure-pseudo-random-number-generators) using random_bytes (last example on that page). 
Unnecessary complexity most of the time.
This was the code I pulled out of something I was going to use an HSM for (was more of a place holder), I'll clean this up, thanks! 
It is slow yeah I agree. The session was for beginners (there are three levels in DrupalCon sessions), so had to make it a bit slow. 
Hello, please take my upvote. Thanks for the laugh.
Shouldn't error reporting be controlled by the .env config? Usually, if you care about security, you wouldn't want to have stack traces outputted so everyone could see them
I keep reading about this and I remember having the same issues with Eclipse PDT / Zend Studio before. Knock on wood, my PHPStorm isn't acting up yet. Damn, what's with IDEs and their inability to maintain their cache without corrupting it? BTW, I'm actually on PhpStorm 2017.2.2. When those patch updates are coming, I read what bugs they fix, and if it's not something I care about - I skip it. Looks like my strategy is paying off... You know modern software - fix one thing, break two things.
As someone who has interviewed a lot of people in the last year, this was so-so. Don't invent a scenario, because there are too many variables. Ask for the scenario. You want to be on the same page as the interviewer, and if you go off into lala land then that's not going to help you. The real key to this question (and more interview questions), is to *ask* questions. What kind of page? How many requests/time does it get? What platform? Etc. Benchmarking is a good idea, but is basically an assumption that I would make, if you didn't mention it, I wouldn't care. In order of importance, (for backend) I'd say it's: Cacheability (Can I cache the output) Queries (Add indexes? Cache?) Profiling / Code review (Where is the bottleneck?) Anything else (Non-programmer stuff) For front end, it would be Run Google PageSpeed Insights and fix whatever I could.
If it's for beginners, why is a focus of the presentation convincing your audience to upgrade from old PHP? That's not a scenario beginners have. Also I think introducing "what's new in PHP 7+" in 2017 is probably a bit stale as a topic. At this point either people know what's in PHP 7+ or they don't care, as people can get this information instantly from the migration guides PHP.net offers. No need to feel bad - you decided to talk about PHP 7+, you did, and it was OK, but next time I think your audience would appreciate much more if you base your talk around your personal insights and education-worthy experiences, rather than things which can be simply looked up on PHP.net.
Something will be in place shortly (it's in early development). I've never outputted any errors to the screen in any live project, only to a log file. I'll be following similar logic with the following code after logging is in place. # supress php errors php_flag display_startup_errors off php_flag display_errors off php_flag html_errors off php_value docref_root 0 php_value docref_ext 0 # enable PHP error logging php_flag log_errors on php_value error_log app/logs/[environment]-date-time.log 
Sara does have a Patreon, fyi, https://www.patreon.com/sgolemon
I've seen some shit.
Good stuff. Keep it coming. Don't let the naysayers get you down.
That I literally just set up in response to the above post. :p
If it's on php.net, then it has to be licensed under php.net's documentation license.
&gt; All PHP files MUST end with a non-blank line ehh... no thanks.
PHP.net can license their derivative work under whatever license they want. I'm giving it to them under WTFPL/CC0.
where the hell is my goddamned pipe operator
I'm most excited that this will upgrade the PHP docker container to Alpine 3.6
Thanks for pointing that out! This is definitely WIP.
 function is_admin() { if (is_logged_in()) { if (isset($_SESSION['user_record'])) { if (isset($_SESSION['user_record']['admin'])) { if ($_SESSION['user_record']['admin'] == true) { return true; } } } } return false; } 1) Storing the user record in the session? 2) Allowing admin access via a value stored in that session set to true? 
There are actually reasons for why you don't want to use the session for that check I am just wondering what you think the reason would be?
It's evolving: https://twitter.com/SaraMG/status/913123549774274565
Holy shit. Does no one actually read anything here? The OP is asking for an example of clean architecture. What the-coder-of-xxdeath posted is NOT an example of clean architecture. That's all I'm saying. 
The Main reason for me would be that since you're not checking the actual state of the user _now_, a previous admin who has had his privileges changed (in particular removed) would still have access as they had when they logged in. Not a good solution if you need to shut out a compromised / rogue account, but it works if you're the only one with administrative access. 
In addition the inner ifs could be replaced with a single !empty-statement. 
K. We agree. Although rogue / compromised accounts mean you would invalidate the entire session :-)
Not everyone lives in a place like that.
I don't understand. I think that code is over my head. What is evolving about it? Will it still just pipe data from one function to another?
All of those ifs can be combined into one. Look into short circuit evaluation
That's some ugly syntax. 
For those curious about the internal details of sodium_compat, the performance boost came with [this commit](https://github.com/paragonie/sodium_compat/commit/6ccb221862932409c3f67522a1c153d7e858de3a), which did a couple of things: 1. It allowed an upper bound to the number of iterations on our [constant-time integer multiplication](https://paragonie.com/blog/2017/02/cryptographically-secure-php-development#ctmul) loop, and made use of this upper bound to saved on needless computations when the number being multiplied is a constant. (If you were using `ParagonIE_Sodium_Compat::$fastMult` because you're 100% sure your processor is safe from side-channels here, this doesn't benefit you.) 2. It replaced a lot of `ParagonIE_Sodium_Core_Util::mul($a, 1 &lt;&lt; $n)` calls with `$a &lt;&lt; $n`, which gives you the same result in less operations. Doing less is faster. :) If anyone wants to use the Phar release option, [the README documents how to verify the .phar files](https://github.com/paragonie/sodium_compat#php-archives-phar-releases) using our GPG public key. If you're using Joomla 3.8, running `composer update` may give you 1.3.0. The jury's still out on whether WordPress or Drupal will support sodium_compat in the near future.
That's a rather... exciting syntax ;) I love the direction it's going though.
Ill say this is some kind of boilerplate not a framework, or im missing point?
This brings in a possible form of partial functions and short lambdas which make pipe op more powerful/usable. The core concept of pipeop hasn't changed. &amp;{foo($0)} is equivalent to: function ($0) { return foo($0); } The use of dollar-number indicates a parameter as passed to the closure. Numbered because there's no opportunity to provide a name. Combined with pipe-op, it allows tersely turning a function call (or any expression) into a callable taking one arg, so the output of LHS can "pipe" through to RHS.
Nothing is fixed, this is all pre-RFC yet, and the linked implementation is by NO measure what the final version will end up looking like. It's just proof-of-concept time.
Is that small change to the language grammar all that this actually requires? If so, that's pretty amazing. Even if not, it's showing huge potential for making lambdas way easier to work with!
So, the #1 problem with this project is the following phrase: &gt; Also expect that it is not as secure as it is to become. Software doesn't "become" secure. It is either designed securely from the ground up, or it's not - and if it's not, then it will never reach a point where you can call it "secure". This is probably one of the most common misunderstandings concerning security in programming, and is the root of nearly every security vulnerability found anywhere. Building on broken foundations will *inevitably* lead to security issues. The thing with security is that it isn't a feature, nor a checklist. There's no set of things that you do to make something "secure", there's nothing you can tack on after the fact. Instead, security is about understanding how your code works, what your adversaries and their incentives and capabilities are, and how they might use the functionality in your code in unintended ways. This can range from very generic vulnerability classes (eg. SQLi) to extremely obscure types of attacks that only exist in a single specific project. Therefore, the one and only way to write secure software is to __learn how to do threat modelling, and write optimally secure code from the very start__. Security isn't something you can package in a library or framework, nor something you can learn from a book. Fundamentally, it's a way of thinking about the design of your software (as well as your own errors and biases as a developer!), that comes down entirely to experience and the ability to apply the *process* of writing secure code to your specific requirements and projects. The common counterargument to this is "well, at least this provides a baseline" - but that is a very dangerous argument. This very approach is part of the problem, as it gives people the false impression that their software is secure simply because they've ticked off all the boxes on a list or used a specific framework. While there are certain good practices that should always be applied, these should be considered *in the context of threat modelling*, not as a checklist in and of itself. To be clear, I'm not saying that you shouldn't write a framework if that's what you like doing. But it's never going to be a good baseline for security, nor is your current approach ("start with a rough idea and make it secure over time") an approach that'll actually lead to secure software. I would therefore recommend dropping the "secure" bit, and just working on it as a framework in and of itself. That the framework code itself must be secure should be an unstated assumption in your development process, not a bulletpoint in the feature list or the project name.
I think you're right, and a very good point.
Actually gc_collect_cycles doesn't just seem to, well collect cycles. At least that was with 5.6. There's a difference between recognising something can be free and actually freeing it. I have a feeling PHP might defer frees. The json_decoder did completely change in 7. I remember it was particularly annoying as I had modified it to handle, you know, where people put invalid JSON (IE, that works with eval but not true JSON).
.. which isn't really something people do, as you don't manually hit the session store and remove active sessions for those accounts. I'm not sure if tracking uid =&gt; session_id identifier combinations is a standard thing to do.
Dang, that is awesome! Thanks! So we're thinking 7.3 now?
Maybe. We've got a year to flesh out the details...
Neat
Yeah, hopefully this gets addressed soon. Going to report it, well going to check if it's a report first then report it.
Thanks for the downvote, this was my feedback. You should appreciate feedbacks instead of downvote them. I'm sure the profiles who downvoted me are created by the same person. Thanks for manipulating votes and comments. Good luck with your project.
So you recognized that PHP is way below .NET and I'm still the one being downvoted? My suggestion is to post these "great" news on the .NET subreddit instead of trying to bring PHP folks to the .NET world. I like PHP the way it is, I'm sure it can be improved and starting with PHP 7 we're on a great path. But I don't go to ruby/python/C# subreddits to tell them that their beloved coding language sucks and recommend them to use PHP. This is not the way to advertise an open source project.
Good idea. Scott should be able to edit the PHP.net documentation regarding the Libsodium lib.
Wow, I just googled "wtfpl" and found this website: http://www.wtfpl.net/ . My respect for you just grew up :)
As someone working on tracing/profiling extensions myself I have to say this is very nice! The live output adds a new angle especially to CLI scripts that none of the existing Profilers has. Great work! How does the live output work when used with a web-request? i suppose it is appended to the webserver response at the end?
[There is help out there](http://lmgtfy.com/?q=mental+therapist)
Again, you're misunderstanding this completely. First of all I didn't downvote anything; secondly, what we are doing is the exact opposite of what you just described. We promote PHP as an extremely useful and valuable language and offer a way of providing an alternative runtime with security and performance benefits, the possibility of distributing your PHP code sourcelessly or as a NuGet package and most importantly we enable the .NET world to use PHP libraries in their code or vice versa. If anything, we are trying to point out how much good code there is in the PHP world, and so far you're almost the only PHP dev who seems upset about that. Nobody is saying that one language is better than the other, there are massive advantages to each and this project attempts to allow devs to get the best of both worlds. And finally, we didn't post this here as you can see.
FYI we have not downvoted your comment, but we appreciate the valuable feedback anyway.
Hi everyone (author here), Live refresh of flat profile is indeed currently only available for CLI. When profiling a web request, the profiler output (whatever its type) will replace the original page output. Thus with the flat profile (default output) will be output'd as plain/text HTTP response. You may think it is weird, and you may be right, but it is the decision I've made and things can change ! 
http://www.phptherightway.com is considered to be a goto resource
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Try with PHP Objects, Patterns, and Practice by Apress. 
hi i want to make a new website for my dad. Please you guide me how to i Devlope my father site 
Kudos, especially for the indepth documentation.
This is a cool extension. Have you considered adding headers to the response with profiling data instead of replacing the response? This could itself be triggered by a request header or a cookie, for session level control of whether you want the profiling headers or not. Then the data can be inspected using the regular browser dev tools, or visualized more nicely with a browser add-on or an in-page ui. A complete pipe dream would be the ability to hook it up to the stackexchange [miniprofiler](https://miniprofiler.com/) ui.
Little late to the party but as mentioned, take a look at [Knapsack](https://dusankasan.github.io/Knapsack/), it should do what you're looking for. 
Any code examples?
How can it be that a "seasoned" *anything* still doesn't know how to use search?
No books or anything like that but, coming from VS, you'll want to check out PHPStorm. Excellent IDE, even has out of the box settings to make it more like VS in terms of layout and key bindings.
I'm not sure I completely understand your point? What is "that"? I'm seasoned because I've been using .net since beta 1? Or are you questioning why I should pose such a stupid question and not just smash a hand full of PHP keywords into Google and hope I'm on the right track for professional, scalable PHP framework which embraces BDD and TDD workflows, in the limited time I have available to me? Just asking for a book, one of you might have found useful.
interesting. so all that was needed was someone to complain about their kid going school... there doesnt seem to be any date for the timezone switch tho. when will the clocks go back to +2?
&gt; hope I'm on the right track for professional, scalable PHP framework which embraces BDD and TDD workflows If that is what you want, that is what you should ask for. Other people cannot guess what is important to you. "Seasoned" doesn't in any way mean you know BDD and/or TDD or care about those things. (Yes, one would hope that everybody who calls themselves a seasoned developer understands the benefits of TDD, but sadly many don't.)
Any recommendations?
Thank you, ordered.
Thanks, seems to be down, is this a bad sign?
Nah. That website is made with PHP. That's normal
Glad I could help 
https://www.cnnturk.com/turkiye/enerji-bakani-berat-albayraktan-yaz-saati-aciklamasi
**Edit**: I didn't see it had been updated. My bad! That's from 2010. That may be useful if you have to support an old environment, but a any site caring about performance will be on 7.x and packages requiring it are becoming the norm. 
Get xdebug working in your dev environment. Install latest Symfony, WordPress, and Slim and step through some requests. The problem in PHP is that there are a million ways to make an app. Hope you work on a good one.
Actually it's just HTML, CSS and some JS - https://github.com/codeguy/php-the-right-way
https://i.imgur.com/axJmn.gif
http://www.phptherightway.com/ that Xymanek linked to is pretty good (and up right now :) ).
Just understand finally that unset != free memory in all cases, especially in php 7.
Thank you, yes I hope so too. I just don't want to go through the iterations of the "incorrect" way.
Yes, it's called symfony.
&gt; Have you considered adding headers to the response with profiling data instead of replacing the response? No, the web part is the less mature / designed. I am obviously open to any suggestion to improve usability. Also feel free to open an issue as a request for feature. And thanks you for these hints, I will investigate miniprofiler UI. If you have some other examples of browser side tools to analyze such profile data for a given HTTP request I am very interested ! 
TDD: https://phpunit.de/ BDD: http://behat.org/en/latest/ Scale: http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_PHP_eb.html
Looks interesting. Is anyone using this in production yet?
As you look into PHP, I recommend [Laragon](https://laragon.org/) as a quick, local, easy to configure environment to start out. It comes prepackaged with a lot of tools as well as Apache and a MySQL/Maria database. It allows on the fly switching of database and PHP versions. It's also very portable. Take a look at the 'Article' link on the Laragon page for a quick rundown. Also, I too recommend PHPStorm as your go to IDE. -for reference, I'm working the other way. Went from primarily a PHP developer into C#/.NET. You'll find a lot of similarities, especially with PHP 7+.
&gt; As someone working on tracing/profiling extensions myself Well, when I've first read that, I was far from imagining that you are the maintainer of tideways php ext (and other related &amp; interesting stuffs). Nice works too!
I think you're reading 375KB as 3.7MB. the number only has 6 digits in it. 7 digits means you're in megabytes. Granted, the number is still a little bit higher after the unset. But you'd have to keep doing it in a loop, or keep it running to see if it gets cleaned up by PHP. 
Hey man I'm also a c# developer. Been in .Net since 2005 and was stuck in my ways a bit. Have worked with Microsoft gold partners my entire career. I picked up Laravel, went to laracasts, watched a couple episodes,and the rest is history. Pretty easy transition from C#. I'd recommend it!
Thanks, the opensource version of the extension is massively based on Xhprof, so the code quality is suffering a bit from it not fully understanding Zend Engine. Our current closed source rewrite is much better in that regard. I glanced over the code of spx and it looks really good!
That look great, thanks man.
What is wrong with keeping email or username in session for authenticating? Sessions are stored in the server right? 
What about people who deploy 3rd-party applications they didn't write and can't patch themselves (i.e. the vast majority of people)? Of course it's always better to fix vulnerabilities at source-code level, but that's often not possible, and in such cases, people still need a way to secure their applications. 
"Routing is the trickiest part of all systems" Noted! Just kidding, this looks interesting and I'll take a look.
You heard the guy - you need to write rules on a file, function, file hash, parameter, regex basis. So for the "people who deploy 3rd-party applications they didn't write"... they're out of luck, this solution isn't for them. Turning things on blindly app-wide will just break the app in an infinite known and unknown ways. You can't apply software security like a sun lotion after the fact. Security doesn't work this way. And if you're suggesting that people who deploy software should sit down and study the entire 3rd party source, so they can configure this extension code properly... well I'd like to have whatever you're having so we can both be tripping and having fun together.
No problem! I'd recommend picking up PhpStorm from jetbrains. Similar to Visual Studio in a lot of ways, including having a visual studio hot key function. Worth every penny. For that matter, the jetbrains idea box worth it for webstorm and phpstorm. Both quality. Feel free to drop a line if you need any help with Laravel! Best of luck
PHP manual, a must read on the language section. It's not too big, easy to get through in a day. Learned PHP that way myself, best damn manual there is.
Which one is the worst? Mysql?
If I'm not mistaken, the creator of Laravel was a .NET developer before creating Laravel. Might be why a lot of C# devs who come into the PHP world tend to really enjoy the framework.
hehe ... thanks :) Let me know your feedback when you try it out.
SQL server
I'll be checking this out, but my too-good-to-be-true alarm is going nuts
We are :D ... there are also 2 companies that run their production backend on Webiny. But since we just launched, we expect more to come soon. Let me know if you give it a shoot, would be interested to hear your feedback.
Am I missing something here? [Here](https://github.com/mikecurry74/php-secure-framework/blob/5679ae8e330bd494c8255d13ea6eff06267293a5/app/ssl.php#L17) you just check if the `SERVER_PORT` is 443 and if it is you declare that the connection is over SSL. Simply using port 443 does not meant SSL is in play. I can run a MineCraft server on port 443 if I wanted, there's nothing to prevent non-SSL connections on port 443.
What I'm having is a job that proves me everyday that the use-case exists, and that the tool will be useful ;)
Hope the Standard environment will get updated too someday. It's still on PHP 5.5
I hope we don't disappoint :) We spent a lot of time building, documenting and testing the system. I'm curious to hear you feedback when you try it out. 
I'm pretty good with c# MVC, this is PHP websites only. But m trying to find good framework practices and parallels with nunit, and integrating CI.
They confirmed they are working on it for standard this week. ^Edit: ^it ^was ^confirmed ^being ^worked ^on ^this ^week ^not ^confirmed ^that ^it ^was ^coming ^this ^week.
OK, you know, try it, measure if it reduces hacks and doesn't break the apps, and then we'll see. That is unless what your use-case is applying placebos to clients that demand one. That tends to be the real use-case of most of these types of products. Someone somewhere demands a risk mitigation. A solution is rushed. Effect is not measured, but satisfying the demanding party - accomplished. 
Tkx man. There was some dude constantly complaining about my posts, but he was the only one and had what i considered ridiculous and untrue complaints. So i blocked him and don't receive his comments anymore, but i guess he continues to do it and influencing others, instead of blocking me and be happy. I guess some ppl just have nothing positive to do... I guess you have to put up with a lot of naysayers as well, you've been blogging for a long time...
Not specifically about how i think Uncle Bob implements Clean Architecture. I do have my own way of structuring a project and a standard way running the request/response, which i implemented and use in the company i work, in a quite big and complex application. But i will explain that in a later post, and provide some naive code examples.
The joke isn't funny if it's not even remotely true.
Jokes don't need to be true to be funny.
This is awesome! I was just looking at [phpunit-testlistener-xhprof](https://github.com/phpunit/phpunit-testlistener-xhprof), wishing it still worked. Is there any ability to control profiling during runtime, such that a PHPUnit listener like that one could be made to report on slow test methods? And if not currently, does the architecture allow for runtime control or is it only possible via external ENV vars? I also came across this project: http://opentracing.io/ Being able to generate/log Spans / Traces with this tool to something like [Zipkin](http://zipkin.io/) or [Jaeger](https://uber.github.io/jaeger/) would be pretty amazing. Thank you for making and sharing this awesome tool!
Nice, waiting for that
Codeigniter? Blast from the past.
Any source on this? Not that I don't believe you but I've been waiting on this announcement for ages
https://i.imgur.com/tK1jqeI.png This is from [#php](https://googlecloud-community.slack.com/messages/php/) on [GCP Slack](https://gcp-slack.appspot.com/) (Invite Link). Come join, there are literally almost a hundred of us ;)
Brilliant, thanks! Didn't know there was a #php channel. Will drop by!
Its a hidden gem :)
Provide an admin panel with WordPress, then write an application for it using Corcel. If you're super tight on money and time then maybe just do the WordPress thing if you know how to work with it.
I bought the study guide and have read through it a bit. Not a beefy guide IMO but it covers pretty much everything you'd need to know and works as a good reminder on how some of the less common language features work. All in all, it is not a book but a reference with some practice questions/problems.
Is there any &lt;button&gt; with a name of "submit" and a generated "value" attribute in the form? Something like &lt;button value="..." name="submit"&gt;&lt;/button&gt; From PHP's perspective, you can't find out which element the value is coming from by inspecting the request. But JS might help. You can prevent the "submit" event on the form and then look again at the form's elements. Something like var form = // document.querySelector or whatever form.addEventListener('submit', function (e) { console.log(this.elements); e.preventDefault(); }); Then look at your browser's console. 
Yes, there is a button for that. I've found the PHP snippet for it below in one of the files. I've search for "main_search", $adv_submit (found the corresponding PHP snippet), advanced_submit_2, but haven't quite found what I'm looking for. &lt;form method="get" id="main_search" action="&lt;?php print $adv_submit; ?&gt;" &gt; .... &lt;input name="submit" type="submit" class="btn-small" id="advanced_submit_2" value="Search"&gt;
&gt; Is there any ability to control profiling during runtime Not currently. There is no user land API (i.e. exposed PHP functions or classes). &gt; And if not currently, does the architecture allow for runtime control or is it only possible via external ENV vars? Yes absolutely, the architecture is ready for implementing such thing. The big part of the work will actually be designing API &amp; behaviors (start / stop functions, result data structure, thinking about possible corner cases...). If you think this kind of feature could beat a fairly large problem, I invite you to open an issue to have it tracked, and with its dedicated discussion space! &gt; I also came across this project: http://opentracing.io/ &gt; Being able to generate/log Spans / Traces with this tool to something like Zipkin or Jaeger would be pretty amazing. I am looking for such things, I mean inter-operable formats / protocols to be compatible with additional analysis tools. So, first, thanks you for dropping these keywords here. However, after digging a bit into open tracing, I have the feeling (I may be wrong) that it is sized for low granular tracing with manual instrumentation, which can reasonably be done with a PHP library, like the official one: https://github.com/opentracing/opentracing-php &gt; Thank you for making and sharing this awesome tool! Thanks you for your feedback!
&gt; I guess you have to put up with a lot of naysayers as well, you've been blogging for a long time... Welcome to the party. :-) 
Then that's your button. Or do you want to know when the button's value is changed? I guess whoever does it isn't nice enough to trigger a change or input event, so you need some black magic to trap the "value" property... You can try something like this: var input = document.querySelector('#advanced_submit_2'); var originalDescriptor = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value'); var newDescriptor = ({ get: originalDescriptor.get, set: function (value) { originalDescriptor.set.call(input, value); debugger; // Should Trigger the browser's debugger }, configurable: originalDescriptor.configurable, enumerable: originalDescriptor.enumerable, }); Object.defineProperty(input, 'value', newDescriptor); That should start the browser's debugger and give you a stack trace when the "value" is changed via JavaScript. (You need to have your dev tools open) 
I see. SqlServerPlatform really is the largest platform class in Doctrine, and that's not even mentioning the 3 child classes for 2005, 2008 and 2012... Were they just not following the SQL standard on purpose? Why did they invent custom syntax for everything? ... Is that even the problem you meant or is it worse than anyone could possibly imagine?
only if you want index not found errors... in your logs
its perfectly fine, storing the entire record is not so good (because of potential stale data)
If this is behind a proper https server, this is a non-issue.
Hi, this looks very promising indeed. Can you explain simply on what it consists? I don't know if get it all... For example, I usually build websites for clients, or apps (always php), how can Webiny help me? Thanks ;) 
session data is server side... so that is ok. Storing the entire record can cause stale issue problems.
&gt; low granular tracing with manual instrumentation While this is useful, it would be even more useful to have the automatic instrumentation a profiler provides. :) Given that a Span (as defined by opentracing) is essentially nested start and stop timestamps + metadata, it seems like a close match for what php-spx is already collecting and reporting. In my imagination, php-spx outputting trace data to Jaeger would look similar to parts of XHGui, Tideways, Blackfire, etc. This blog post shows some examples that may help show what I mean: [Take OpenTracing for a HotROD ride](https://medium.com/opentracing/take-opentracing-for-a-hotrod-ride-f6e3141f7941) I will open some tickets. :)
It is not just the grammar: the runtime behaviour and restricted are also super weird, like unique constraints and cursors.
Just seems strange to me to have a function meant to determine if we're using an SSL connection that doesn't do that with 100% certainty. In no situation would I, as a generally security minded developer, rely on the port number to determine if we're using a connection secured with SSL or not.
No? Why would that give you index not found errors? if (!empty($_SESSION['user_record']['admin'])) is the same as if (isset($_SESSION['user_record'])) { if (isset($_SESSION['user_record']['admin'])) { if ($_SESSION['user_record']['admin'] == true) { In fact, you could replace the whole function with: return is_logged_in() &amp;&amp; !empty($_SESSION['user_record']['admin']);
Those lines of code [has been lifted directly from Wordpress anyway](https://core.trac.wordpress.org/browser/tags/3.2.1/wp-includes/functions.php#L3612) - it's a final fallback for software that is meant to run on completely fscked up server configurations, and my guess it's only being used to know if the host should be prefixed with 'https' or 'http'. _If that is the case_, then it's good enough and a sensible fallback (i.e. it would never move a connection _down_ to http automagically, just break links by using https in a http setting).
If it is _behind_ an https server (i.e. the connection is terminated by a different process), then neither of those will be correct. You'll have to look at the X-Forwarded-Proto header or one of the other headers that terminating proxies can set. And since you can't trust those headers unless they are actually provided by your proxy server, configuration to use them for anything should usually be explicit.
It's a good question. So Webiny helps you by providing you with over 70 UI components, an API layer, several ready made apps and an admin layout, so in just few minutes you can start coding the actual logic for your app/project and not lose time on setting up things, finding all the right components that work together and all those pains in building an ACL and similar. We found that on some projects you can cut the development time in half. On our website (https://ww.webiny.com/) you will find the intro video which is quite explanatory and I hope it helps you identify at least some benefits in how you can potentially use Webiny on your next project. If you do, I would be glad to hear your feedback.
Yea i hadn't checked where it was used. The function name just implied a more general application.
Ignore that guy, he's the resident troll.
I'm assuming "Continuous Integration"
There are some PHP books mentioned on the "awesome PHP" list: https://github.com/ziadoz/awesome-php#php-books I can't give you any specific recommendations on them though, but awesome PHP is a curated list which I assume only adds quality material to their lists.
spx is a function profiler, tracking data to end up in jaeger or zipkin requires an entirely different data model (lets call it distributed tracing model). You can see in the tideways code, which contains both kinds of profilers, that they don't have anything in common. a function level profiler doesn't need to store the start and stop times, and can aggregate the wall times immediately, the distributed tracing model needs a datastructure for *every* function call. It is not a close match to what php-spx is collecting. In addition the memory overhead applying this to all PHP calls is too high, this is why it needs to be a "low granular tracing" as @noisebynorthwest mentions. A distributed tracing model based profiler usually requires access to the arguments of a function call, so that you need to write quite some custom code in a C extension to make this work for various APIs.
Looks good, is there any support for SAML? Or any form of SSO for users.
Couple months before 7.2 gets released.
its been changed.
Says in the description it has been updated for PHP 7 in 2016.
I'll tl;dr event loops for y'all: You call tick() in a loop. In tick() you check various buffers and message queues: anything in there? If yes, fire callbacks for every single thing in there, then empty them buffers and queues, repeat.
No worries - we'll have 7.2 out probably on the same day it goes live. New versions of runtime son on flex come out super fast (see Nodejs, Ruby, etc)
I can confirm that we're actively working on PHP 7 for standard. This one is just going to take a while sadly :(
I made this demo using the Hashtag Framework: [Random Chance Activity](https://bat.hashtagfoundation.org/lists/random/chance) I was wondering if you would be willing to recreate the simple demo using the language or framework of your choice?
Yes, I did order the updated version.
Why so picky about some words under your name in an email signature?
Vanity obviously. But I also don't want to be a 40 year old Sr. Software Engineer, or 50 year old one, etc...
I'll give you mine: DevOps Engineer IV. I don't do that much DevOps anymore.
Back story. Been working in the kitchen for 10 months, started out as weekend busboy prior. I've been with my current employer for about 3 months, this is a very small restaurant where I assume the following responsibilities: Wash dishes (and silverware, pots/pans) Restock clean dishes Ingredient courier Kitchen cleaning I put in a lot of hours here, wear a ton of different hats, "own" the sink, and have improved what we do in a ton of ways: Improved silverware sorting Fetch ice from ice machine Wash and dry used rags Clean huge soup pot Fetch things from walk-in fridge and freezer Wash glasses and mugs Prioritize multiple tasks Take out garbage Discard used cooking oil Yadda, Yadda I am considering requesting a title "boost" at my next review. Question is, given that this restaurant consists of only a handful of people, what title should I request? Currently listed as Part-Time Dishwasher. Is Head Chef a bit much? I don't do any cooking really and I think that title is a bit silly given what I do there, but I definitely feel like I do WAY more than my title indicates. Kitchen Lead would make more sense, but I don't necessarily lead anyone. Ultimately I'd like to try on that hat though. It's tough, last time I interviewed for a Sous Chef position the decision-maker was apprehensive about giving me that title due to my lack of experience in making food, they offered me a position, but changed the title to... Kitchen Assistant. I didn't take the bait &amp; switch and chose this restaurant over them. I'm definitely specialized in kitchen work, but have a knack for a lot of different things, I even help with filling the coffee maker for God's sake.
How did you improve silverware sorting?
Congrats on rolling this out, Sven! We chatted along time ago (via Bruno) about blogging/evangelizing this - glad to see it come to fruition!
Nobody cares about the title, you're not a salesman but a programmer. In my last job I had a title "Senior Grumpy Wizard" (yes, officially).
I don't think its PhpMyAdmin error. I would guess nginx / apache is directing that url to symfony or etc page and there isin't route / url to give you.
Not helpful, but anyway, adminer is IMHO a much better option than phpmyadmin as it comes in 1 file (easy to deploy) and works a lot (like a lot!) faster. Also, if this is a routing error as someone suggests, that wouldn't have happened with adminer. 
Whats wrong with the numbers there. 1., 3.,2. on mobile
Do you setup PMA at subdirectory? It seems that symfony router intercept the request. Either add routing directive at server level to exclude PMA, or setup it at different vhost
&gt;Damn, what's with IDEs and their inability to maintain their cache without corrupting it? There are two hard problems in computer science...
Not at the moment, but the security component is extendible. You would just need to create a SAML adapter for it and the system would take care of the rest. More info on the security component: https://github.com/Webiny/Security
He he ... just found that email, it was 1 Jul 2016 ... long time go. Thank you for your support - if you decide to give Webiny a try, I would like to hear your thoughts. 
Ooops ... seems we don't know how to count in mobile responsive :P. Will fix it shortly. Thanks for reporting it!
This error comes from Laravel. Chcek the virtual hodt configuration and logs as well as route.
I might be lacking sleep, but what exactly is this? ELI5 please.
https://pasteboard.co/GMK7VJ2.png
Some start-up companies (in London, UK at least) have started using the term "Principal Engineer". I'm not a huge fan of the term but I guess it suggests you're not a lead because you've got no one to lead, you're not a director either but you are in that general area in terms of responsibility and role. And your responsibility is more than a Senior Developer. Lots of people will tell you that a job title doesn't matter, and while you stay at your company it probably doesn't other than to maybe help your confidence. However, when/if you come to leave it really will matter, because titles matter to management/recruitment types. It'll help to move you up the pile of applications and get you a conversation with a decision maker. Whether or not you can actually do the job doesn't matter; it'll give you that chance. So make sure you've got the title you want before you come to leave the company, if ever. 
Long term, what are your goals? You wear a lot of hats now, what do you wish you had more time to focus on?
My best guess is your webserver config is set up wrong and is pointing you to your Laravel application rather than phpMyAdmin.
I've had full sleep and I'm none the wiser. 
If I was your boss I'd give you the title "Director of IT" in a company of "a handful of people". Then mock you mercilessly behind your back about it every opportunity I get.
This is indeed a Laravel error. It appears to don’t have a route setup for the GET request. 
Senior Software Engineer is a pretty good title. Why do you feel the need to change it? If/when you change jobs your responsibilities will be more important than your title anyway. Edit: upon re-reading, it seems you feel that all you do isn't sufficiently represented in your title. This is going to be true for basically any title when you're wearing many hats. The term DevOps Engineer has increased in popularity recently (and covers both coding / sysadmin roles in an extent), so maybe you could go for that. &gt;Is Director of I/T a bit much? Yes
I never write `if ($foo === null)` in such situations, I'd write the even less-specific `if (!$foo)`, which ironically wouldn't suffer from the issue the author fears (i.e. interpreting `false` as "the object is there"). I think the presented bug is a weak case for making code more verbose. You need to trust your own invariants, so when your invariant is "this is null or instance of Foo" you don't need to constantly check if the thing that's there is instance of Foo. The real problem is that something else broke the invariant and it should be fixed. The `end($orders)` situation is quite unlikely to happen in reality. No one selects a "last order" like this and defaults shouldn't be blindly fetched from a "last order" to begin with. They belong to the user profile.
My official title is "Software Scientist" which I think sounds pretty impressive even though I mostly just develop and support software. I even get to wear a lab coat once a year near the end of October. But the title I am most proud of is one I earned doing volunteer IT work for soccer tournaments: "Chief Mushroom".
I'm to the point now where I'd return a null object implementation. Doing this really cleans things up a lot.
[removed]
&gt; Senior Grumpy Wizard I am so talking to HR on Monday to make this mine as well.
In this particular example it doesn't, because the idea behind NOP (Null Object Pattern) is that it works indistinguishable from the real thing, so you don't *have* to detect something is a NOP implementation, you instead just use it like the real thing. This tends to work best for "write-only" objects (say Log objects, callback handlers etc.), and not for data sources that you're expecting will contain certain valid, required data. I.e. what should a NOP order return as "billing address"? Maybe it should return a NOP address object. Which if queried returns what? A NOP string object? I mean, the illusion will fall apart sooner or later, and in *this particular case* it's best it's sooner, rather than later. NOP is not suitable here, good old null always did the job, does the job and will continue to do the job. I don't understand why people insist on suddenly hating on well working solutions and replacing them with new shiny that offers no true benefits (in the context).
I use null objects for reading rather **all the time**. This lets you get away from "Can i call this method?" nonsense and let's you only care about what you need to care about: calling that method. Say you have a user object, with a defined relationship for posts. `$user-&gt;getPosts()`is ideally what we are concerned about, but we will first have to check if the user object is null or not. I'm just not a fan of this. I would rather make sure whatever gives me `$user` to **always** give me something that at least looks like a `User` object. This goes for `getPosts()`, too. I want that to return a list of posts. I don't want `getPosts()` to return null if no posts exist by the user.
Good but, to ask for "the last order" and to get an order object when the user may have never ordered would be just bad API design (well, basing defaults on the "last order" is already bad design, but this aside). This is why specifics matter. Your use case is not OP's use case. Dealing with users is not the same as dealing with orders. I do also have an "anonymous user" object, which is basically a NOP user. And *yet*, in many other situations, I just use null. NOP is useful in specific circumstances. It's *not* a general-purpose replacement of null (or other ways to express "lack of value") at all.
&gt; to get an order object when the user may have never ordered would be just bad API design I disagree. Why do you think this is bad design? I always base my defaults on NOP. This just simplifies things. I do agree that specifics matter, but I do not agree that they matter a lot in this case. Obviously users and orders are different, but in this case, they're just different names for a record coming back from a table in a database.
&gt; I disagree. Why do you think this is bad design? Are you serious? You're returning an order, when the user hasn't ordered. Also what exactly would that order contain? What products have been ordered? What amount was paid? What's the reference id of this payment? What's the status of this payment? What's the *billing address* subject of this example? You can't pay for items with no billing address, so do answer me what does a NOP order return for that. Sometimes NOP results in complex branching logic disappearing, and then it's good. In other cases, NOP would lead to a clusterfuck of NOP-ception where your application is juggling a bunch of "fake" NOP entities and second-guessing if they're real or not by their secondary traits. You're demonstrating silver bullet mentality here - one solution to rule them all. This is almost never the right attitude for a good engineer to have.
it's just a simple demo of processing records... every 3 reloads you get a new thing (agent). 10% chance per reload that the thing gets 1 of the 3 possible attributes that can lead to the agent being lost. each reload, all the attributes for each agent are processed to determine if the agent has been lost. that's it. i'm hoping some people would be willing to port this to their favorite framework or language, and then compare the source and performance of all the various solutions. 
I still don't understand what this proves, or why you built it? What is the reason for you having built this, and what is the real world implementation? What would you use this for?
Why stopped at empty list with `getPosts()`? It's not even null object yet. Why didn't you grab last null item's contents, so the UI could display nothing to edit? Sorry, but I cant see how NOP for (exposed) data structures could simplify things. You will evaluate that missing data eventually (even empty list would be replaced with "no posts found") - there's no point in pretending that nothing happens and pushing meaningless procedures into stack trace when in the use case context it makes no sense. The only options are: controll flow branch, exception or properly encapsulated type (last item from empty list might effectively be "Not Found" response).
I'd say that's either a problem of the `last` function, which should return null, or from whoever wrote that code, who should have checked the documentation to see that `last` returns false.
I'm using something similar in an online multiplayer game, but in general, this is just a demo. It could have just as well been adding items to a shopping cart, changing quantities, deleting items, and checking out... the randomization makes the requirements simpler to define. Please try and replicate the demo using the language or framework of your choice, then come back and compare the Hashtag Markup solution, and hopefully appreciate it and realize everything else Hashtag Markup could be used for. 
I realize this is text, but the sarcastic tone coming from your post doesn't seem constructive at all. This feels like you are being difficult just for the purpose of being difficult. That order would contain null or equivalent for each of public properties or methods. Products ordered? Empty list. Reference id? null. Billing address? Probably another null address object. Status of payment is probably the only one you need to decide what NOP would return here as that could lead to some interesting situations. However, I often use NOP to get around if checking when looking at data, and I've never had a case of "Go to this specific url to view this order, but if that order isn't found show the NOP". Most often, NOP comes into play when dealing with relationships.
I'm not sure I follow you here. &gt; You will evaluate that missing data eventually (even empty list would be replaced with "no posts found") I'm going out on a limb here and I feel like the inverse of this would be "10 posts found". If this is the case, then you'd have some sort of method to display the N posts found text (remember, if you're covering your bases, you'll have "1 post found"). So we have a "formatted posts found" method, in which case, a NOP implementation would read exactly what you put "No posts found". You're right, you can use control flow logic, or you can encapsulate that logic. I almost always prefer to get rid of those conditionals if they're only conditionals because of the way I chose to implement it. Besides, often times with conditionals, you end up having the same conditionals in multiple classes to handle multiple types of things. I'm not a fan of that **at all**.
[removed]
[removed]
Remember we're talking about conditionals on data level - you don't have any proper object that encapsulate it yet. These conditionals won't propagate after the object is created with it, but if you encapsulate missing data to pretend being valid then object that uses it won't magically work if this data is required. Null object should be created on top of missing data not instead of it. Example from OP doesn't get close to that scope. It fiddles with data structures instead, which is common for any ORM. Ps. That empty list evaluation case was stretched beyond model scope, but you've changed the context from list to number of items, where 0 is absolutely valid response - no need for special object/handling there (no need for list itself either). If you *need* a list to display items you can't just display nothing, so you evaluate that possibilty to answer differently.
Is it the hash-tag thingy that you want feedback on? I thought it was the random agent thingy.
Let's be honest, this isn't very good. But then again, don't stop trying. Who knows, in the future you might create the most popular framework of that time (although that seems so ever unlikely right now :). 
yes, exactly... the Hashtag Markup implementation. but, rather than just focus on that, i'd like to compare implementations from other modern frameworks to really highlight where the hashtag framework shines. if you were given these requirements for a web app, how would you build it? 
Just to be clear about what i'm looking for... assume these requirements for a Web App: * Every 3 reloads of a page, a thing is created in a list seen by all other users loading the page. * Every reload each thing has a 10% chance of obtaining a new attribute that brings a new chance of the thing being lost each reload. * There are 3 unique chance of loss attributes, that each apply an independent chance of loss per reload. That's it... so, given those requirements, how would you build a Web App that would solve those requirements? The Hashtag Markup used to solve the requirements is included at the bottom of the [Random Chance Activity Demo](https://bat.hashtagfoundation.org/lists/random/chance) page.
That’s the human element. Your tests and code are essentially the manifestation of your understanding of the problem. If you misunderstand the problem, that cascades through everything else.
You need to check if app works before you write unit test. If it does, you observe how it utilizes the unit you want to mock
https://martinfowler.com/bliki/TestPyramid.html Integration tests or UI tests are probably what you're looking for. Because testing at the top level of the pyramid is slow and cost prohibitive, a lot of places run Happy Path tests at those levels, meaning they only run integration or UI tests against critical functions of the app. In a CI/CD world, running higher level tests against all parts of an application and still maintaining a satisfactory deploy cadence is pretty tough, if not impossible. You might also want to look into BDD, testing based on acceptance criteria and user stories. Also ditto to what /u/JohnTesh said.
&gt; I realize this is text, but the sarcastic tone coming from your post doesn't seem constructive at all. This feels like you are being difficult just for the purpose of being difficult. Let's explore this assumption... &gt; That order would contain null or equivalent for each of public properties or methods. Products ordered? Empty list. Reference id? null. Billing address? Probably another null address object. See, this is why I'm being "difficult" because I want to demonstrate in clear terms that an order has no suitable NOP presentation. A NOP object should still be a *valid* object representing whatever its class/interface is representing. If the order is defined with the following invariants (which kind of are quite common for orders): - Has non-empty product list - Has numeric unique reference-id it can be looked up by - Has billing address with so and so string fields in so and so format. - etc. Then all you said turns the order into an invalid order object, and so you're implementing NOP incorrectly and thus missing on its value (i.e. to be an imperceptibly "neutral" implementation of an interface, in a way that doesn't break the illusion that the thing is not a real entity). Either this, or you need to start *changing and redefining your business logic* to appease the NOP pattern, i.e. "now reference-id can be null on **any** order", "now ordered item list can be empty on **any** order" etc. If you start doing this you're effectively eroding the integrity of your domain and opening countless new opportunities for bugs and complexity, just because you were stubbornly refusing to use null, where null was the best solution. If I'm helping you understand that shallow understanding of NOP is worse than not using NOP at all, then my post was quite constructive for you, actually.
Logistically speaking, you made the mistake of trying to replicate a test fake object of a dependency that you don't understand well. In programming and in management everyone is assigned to perform the tasks they have highest understanding and skills for. So in that context, who should be providing a test fake for that dependency? The people who wrote it. I'm not talking about a test-specific "expect method X, return Y" mock, naturally, I mean a more fleshed-out object that behaves like the real thing, but produces no side-effects outside the confines of a sandbox. Look at any bigger API out there and you'll see it comes with a "test mode" or "developer mode" or "sandbox accounts" etc. Those are the test fakes made by the makers if the thing being tested. Mocks should always be a last resort, they're the lowest quality way to satisfy a dependency. You're effectively testing if your own assumptions match your own assumptions... that's borderline worse than not testing at all. It's false security that *entrenches* incorrect or test-specific/implementation-specific behavior, instead of testing the component contract.
&gt; I don't want to have tons of integration tests duplicating my unit tests. Duplication in testing is fine and can be expected.
Since you want to take the hard stance on this "must be about an order", let's just go ahead and make it clear that the only time you are even looking at an order is one from the past. This gives you 2 options: 1) looking at a list of orders, 2) Looking at a specific order. First option is handled with an empty list. Simple enough. Second option, that URL should 404 if the given order ID is not found. So, that brings up the last question "What about the default values being based off the last order?" In this case, I think NOP is still **suitable enough**. All this is used for for is pre-filling some data, and NOP here is fine. Often times my NOP in this case will just be a new instance of said object that is not yet persisted to the database.
&gt; Since you want to take the hard stance on this "must be about an order" I'm not taking a "hard stance". We're in a thread discussing OP's example. You make a blanket statement that NOP always works as a better solution, including for OP's example. I demonstrate with OP's example that it's not the case, ergo you're wrong. It's that simple. &gt; First option is handled with an empty list. Simple enough. Second option, that URL should 404 if the given order ID is not found. Yeah, 404, the HTTP equivalent of returning null... I have no idea why you're talking about this, it doesn't exactly help you support your argument. &gt; So, that brings up the last question "What about the default values being based off the last order?" In this case, I think NOP is still suitable enough. I didn't ask about your feelings on whether NOP is suitable, I asked for a specific answer about how should a NOP order behave when it can't satisfy the invariants of an order object. Using NOP for orders implies one of two options: - Either all orders are relaxed to the point a valid order has no required attributes at all, or... - NOP should be an invalid order object, which is missing required attributes. So which is it? And how can you possibly find either of these two a "suitable enough" solution. That's sloppy as hell. 
&gt; Yeah, 404, the HTTP equivalent of returning null I disagree. Receiving **no** response from a server is the equivalent of null. Any status code is a lot better than no response (ie: null). &gt; I didn't ask about your feelings on whether NOP is suitable How about instead of focusing on one of your forced situations, you give me a (realistic) situation in which you need to null check an order **and** you are doing more than reading that data.
&gt; I disagree. Receiving no response from a server is the equivalent of null. Any status code is a lot better than no response (ie: null). The equivalent to receiving no HTTP response (i.e. the request/response cycle hangs) is a method that blocks indefinitely and doesn't return (i.e. program hangs). If we can't agree on basics that require nothing more than basic logical thought, then I guess we won't agree on the rest. &gt; How about instead That's the third time in a row you're dodging a basic question that you should have no problem answering. If you can't say how a NOP order should behave in a simple English sentence, you can't implement it in code either. So I have to conclude your entire "I always use NOP" tirade was a bluff, not supported by your actual practice. Don't waste people's time with imaginary solutions.
&gt; no HTTP response Point noted, however, 404 is still far from null as you get something worthy (the status code), response headers, and generally still a content body. &gt; That's the third time in a row you're dodging a basic question Dodging? No. I can't see a situation in which you would need a valid order that isn't already created, unless you just need to read some default data. If that situation does not exist, this argument is completely pointless and you are arguing just to argue. &gt; your entire "I always use NOP" tirade Whoa now, first, I I didn't say I always used NOP. The closest thing I said to that was that I base my default values off NOP which was already a few posts deep into the replies. In regards to my actual practice, I've actually been using NOP more in the past few weeks than I probably have in the past year.
&gt; Point noted, however, 404 is still far from null as you get something worthy (the status code), response headers, and generally still a content body. The content body is for people to see a visual representation of "nothing here, move along". APIs don't include a body in their 404's typically, unless that body explains why the thing being requested is not there. A 404's body is **most certainly** not a NOP result, i.e. if you ask for /orders/last/ and the result is 404, the body would *most certainly* not be formatted as an order and pretending it's an order. If the goal of 404 was to be NOP, the status wouldn't be 404, but 200, as NOP is to be indistinguishable from a real result. Also a null *is* something. It's a value whose semantics are "no result can be found/produced/computed". Same as 404. Also I have no idea why we're talking about this, this has no relation to topic we're discussing, it's just kind of informing me you don't quite know how to use null effectively based on your comparisons of what it corresponds to in HTTP. Either that or you may be uncertain how 404 is used, or how the concept of NOP differs from a "not found" result in any context, be it HTTP or not. **NOP is not intended to communicate "Not Found" to the caller.** In fact, quite the opposite: it's intended to **hide** the fact nothing was found. &gt; I can't see a situation in which you would need a valid order that isn't already created, unless you just need to read some default data. When some API like "getLastOrder()" returns NOP order, it can't know why the caller needs it, unless the method is called "getLastOrderForThePurposeOfFillingInDefaultsInTheCurrentOrder()". You can't have N different implementations of NOP with different use cases in mind, because objects get passed around and one object is used in different use-cases, all of which expect that an "Order instance" is an "Order instance" when it is, in fact, implemented as an "Order instance". So what you're saying basically amounts to dodging the question (4 times in a row now). You can't specify what you'll return and how it'll behave. The assumption the API knows the caller use case is also incorrect. &gt; I've actually been using NOP more in the past few weeks than I probably have in the past year. Based on what you've said so far I'm not convinced you're using NOP exactly. You're using something sort-of-like-it-but-not-quite. A NOP object, as I said, must be a valid implementation of the interface it implements, following all invariants the interface requires. If it doesn't, then it's not a NOP implementation of FooInterface, it's just a broken implementation of FooInterface. Also if you're new to NOP, as you seem to claim now, then you shouldn't have such strong opinions about it, as you don't have the experience to claim so.
So like, development driven tests?
&gt; How do you prevent misunderstanding an API and what it does and thus introducing such bugs? That's a human factor and cannot be completely prevented however probability and severity could be reduced with * using strongly typed interfaces for the components you mock and test against. PHP 7.0/7.1 is great for that. * test against real components early. Any spotted 'misunderstanding' is a subject to review and tune the interfaces. * communication.
It is difficult to understand because you use many unrefined concepts &gt; An Agent record is created every 3 reloads of this page. `Agent`? &gt; There is a 10% chance per reload for each Agent to obtain a random unique Attribute. `Agent`? `Attribute`? What `random` and `unique` mean in this context? &gt; There are 3 possible Attributes that each apply a chance of the Agent being lost: Small (20%), Medium (50%), and Large (80%). again `Agent`and `Attribute`? `lost`? 
As I see your site is served from Ireland (Google Cloud), and my average ping is 28ms to that IP, how is that the time to first byte is 470-570ms? So what I ask is, why would I use your framework if such easy task takes this much to be done?
Visual studio has an extension called php tools. It lets you use the full debugger on php code as well as having access to the call stack. Maybe that might help you out?
I think you need to understand coding style before considering security. Your code is a mess of different styles, really cringe-worthy.
 &gt; i'd like to compare implementations from ~~other~~ modern frameworks FTFY. Hashtag doesn't look like a modern framework. It looks sort of Cold Fusiony, so we're going back a couple of decades. I can see it's a labour of love for you, and this is just, like, my opinion man :) If I might offer a few suggestions * If it's open source, put the source on github. It looks like that was your intention, but the [repos are empty](https://github.com/hashtagfoundation). People want to see the licence, the code quality and the unit tests before investing any effort in evaluating it further. * It's clearly very opinionated, so I'd make your ['huh?'](https://hashtagfoundation.org/framework/huh) page front and centre. Take out the historical stuff, your audience don't need it. Your opinion is that spreading presentation, storage and business logic across multiple files is bad, and that Hashtag exists to provide a way to do everything in one file. A lot of people are going to be turned off by that. That's fine. Just explain your position and the situations you think it works better. Explain what kind of developer it should appeal to. * Detail how Hashtag apps can be unit tested, integration tested and deployed. Also cover security, CSRF, injection attacks etc. If you don't mention these things, the reader must assume they aren't covered. * Hire a designer. This might be the most useful thing you could do. Not just to make your site look better, but for the experience of why virtually everyone else prefers to separate the logic from the presentation. 
That's a really good way to describe programming. I'm going to remember that. 👍
I agree, this shines of cold fusion days. I'm still experience nightmares from that era. 
Documentation! Static languages can't rely on types for everything, and dynamic languages can't rely on tests for everything!
New rule: if you pepper your article with random "funny" GIFs, I'll check out the GIFs, skip the content and tell everyone about a new rule I made.
Hmm, you said this in the article: &gt; A meme is worth a thousand words So if we do the math: 3 GIFs &gt; 2000 words.
If it's unclear what I'm trying to say, it's that putting zero-value animated GIFs in your article body is very distracting.
To add to this: considering you already unit-tested your object, you just have to test the remaining behaviour. If you for example have a validator, you don't have to integration-test every possible behaviour, that's what unit-tests are for. Instead you should e. g. test whether the validator is used correctly by your form. By doing so you test your integration, and everything else is covered by your unit tests - since you integrate your unit into your site.
&gt; Duplication in testing is fine and can be expected. A small amount of duplication is likely to happen, but having 'tons' of integration tests that duplicate unit tests sounds wrong. In particular integrations tests should 'test' the edge of a system. Unit tests test the 'inside' of a system. If there is much overlap in those zones, something has probably gone horribly wrong with the design of the code. This talk https://vimeo.com/80533536 is a really good overview for how integration tests and unit tests should work to compliment (but not duplicate) each other.
This is a valiant attempt at creating a framework. It leaves much room for improvement. Look into PSR-4 namespaces. Take advantage of autoloading provided by Composer (made better with PSR-4 namespaces) Take advantage of a service like Scrutinizer for verifying your code coverage and helping you improve your code quality.
"Hi, I just posted some original content for everyone to take a look at and give me some feedback on. But I don't like your feedback so fuck you."
I wasn't expecting you to take me seriously. If I wanted you to take me seriously I'd have made technical remarks on the content of your article, such as it's absolutely pointless to CRC32 a UUID just so you can modulo it by the partition count to derive a partition. A UUID is already uniformly distributed as it's random (assuming UUIDv4 is used, as any other wouldn't be suitable for a high-volume entity identifier), so you can grab a byte or four out of it and modulo by that. I could also speak how you're spending a whole lot of time talking in very broad strokes about abstract problems and giving pointless code examples about how to select a partition, but you've neglected to address and solve the hard problems of partitioning, such as synchronization between partitions, or how to avoid querying all partitions for content which you can't identify the partition of (say search by an index you don't maintain), or using advanced fuzzy logic clustering analysis, so you can group items by use and not just by broad indicators like user id. I could also say how you're listing problems like: adding a partition breaks the existing grouping as the modulo base changes, but then you fail to list and describe the well-known solutions in sufficient detail as to be useful to your readers. The way you jump from topic to topic covering everything in superficial detail, but not in sufficient detail as to be useful to your readers seems like a waste of your readers' time and makes the article look like it's designed to make you look smart, instead of be truly informative. Anyway, I think the annoying GIFs were a more interesting point than the content of your article.
I haven't seen query graph in laravel debugbar. Is there one in it ? Otherwise I am using it now personally. Thanks
Rekt
&gt; But, there was a misunderstanding with how the other unit worked, so even though the test passed, the app didn't work. The unit tests for the other component should have fully explained how the component was intended to be used. So the first step in using it as a dependency would be to examine the unit tests themselves. Consider those tests to be the final api documentation. And if it turns out that the did not cover your particular use case then new tests need to be added. This is the key to preventing this sort of thing from happening again. So it's tests all the way down. 
Why do people have to delete their accounts and render reddit topics unreadable...
Essentially with the right amount of page reloads the Universe splits and something crazy changes in history, say like Trump ends up winning the elections in 2016.
Nah there's only one hard problem - naming. Everything else is easy compared :P
You burned him so hard his entire reddit account went up in flames.
&gt; A 404's body is most certainly not a NOP result I never said anything of the sort? &gt; Also I have no idea why we're talking about this Really? Let me remind you that **you** said 404 is the equivalent of null: &gt; Yeah, 404, the HTTP equivalent of returning null The context was that you **wouldn't** be looking at an order that doesn't exist, you'd instead see a 4o4, so NOP wouldn't actually come into play there. &gt; NOP is not intended to communicate "Not Found" to the caller. In fact, quite the opposite: it's intended to hide the fact nothing was found. Yeah, we're in agreement here. Again, I never said anything of the sort. &gt; When some API like "getLastOrder()" returns NOP order, it can't know why the caller needs it Of course not, but you could add the ability to instruct to get a NOP or not if you want. This might still end up having a single conditional of 'if this thing was null or not' but at least you abstract that away from everywhere else and nothing else needs to really care about it. &gt; So what you're saying basically amounts to dodging the question (4 times in a row now) I suppose we can stay in a stalemate because you'e yet to satisfy my proposed situation. Dodging has intent, whereas I simply can't think of a valid situation. You actually are dodging by conveniently ignoring it. &gt; The assumption the API knows the caller use case is also incorrect I never made this assumption, see above. These discussions would be much more constructive if you asked questions instead of made assumptions about what I might assume. &gt; Based on what you've said so far I'm not convinced you're using NOP exactly I'm using NOP as "an object that has the same public properties and methods as the thing it intends to replace". If this is missing some sort of qualification for NOP, so be it. It works in my use case. &gt; you shouldn't have such strong opinions about it I really didn't. This started with "this is a thing I do, really cleans things up a lot" and you went on a tirade (not unusual as you seem to do here) about how what I said was wrong. 
&gt; Of course not, but you could add the ability to instruct to get a NOP or not if you want. Oh, jeez. You know, sometimes when I use third party libraries, and I see something really *awful* in the API, something that's just *stupid*, and *pointlessly convoluted*, I often wonder how did that happen, what was the thought process that led to it. Well, I do now. &gt; I'm using NOP as "an object that has the same public properties and methods as the thing it intends to replace". If this is missing some sort of qualification for NOP, so be it. It works in my use case. So, once again, what would be the... - The non-empty product list. - The shipping and billing address. - The reference id. - The payment id. - The payment status. - The payment amount. ...of that NOP which has the same properties and methods as the thing it intends to replace?
&gt; How do you prevent misunderstanding an API and what it does and thus introducing such bugs? The snarky answer here is, "Hire a security consultant to audit your code. They'll find the misundertandings all right ;)", but only for a given class of misunderstanding. JohnTesh said it right. This is the human element.
&gt; just stupid, and pointlessly convoluted, I often wonder how did that happen Have you not seen the "withDefault" type methods existing in various libraries? It's not convoluted at all, and gives the developer the choice entirely to check for null or not be bothered with it. &gt; The non-empty product list. NOP order wouldn't have products. Thus this situation is invalid, and the product list **would be empty**. &gt; The shipping and billing address. NOPs for address &gt; The reference id. null, but reference to what, exactly? &gt; The payment id. Null &gt; The payment status. Unpaid, probably? More context is needed here. Can I create an order without paying for it? If so, that's likely the payment status for the NOP. &gt; The payment amount. 0 Now that I've played your game (and these were all obvious, imo), care to give me a situation in which you'd fetch "last order" and do more than use it for reading the data?
&gt; &gt; The non-empty product list. &gt; NOP order wouldn't have products. Thus this situation is invalid, and the product list would be empty. Strike #1, this makes it an invalid Order object. &gt; &gt; The shipping and billing address. &gt; NOPs for address And what do the NOP addresses return for their fields string values? State, city, zip, line1, line2? &gt; &gt; The reference id. &gt; null, but reference to what, exactly? Strike #2, this also makes it an invalid Order object. &gt; &gt; The payment id. &gt; null Strike #3, this also makes it an invalid Order object. ... Aaaand you're out now, I don't even need check how you'd mishandle the other properties of that poor Order. So what did we learn here: - You don't know how to implement NOP. You don't understand that a NOP order should abide by the same invariants and behavior as a real order. Having properties &amp; methods of the same name is **not** enough, if they return invalid values from what they're specified to return in a real Order. - You actually return "null" from a bunch of those properties/methods, so you also failed at avoiding null, too, kind of making the whole exercise pointless. 
I don't appreciate the unwelcoming and toxic tone of your message. Someone put effort into research and publication and you decide to shit all over it? Show some respect. I find it valuable that there are people studying architectural principles and patterns and publish their findings with explanations and comparisons. Furthermore, architectural knowledge is actually important in practice. It is the foundation that allows your application to grow, to scale, to stay true to the desired quality attributes. In fact, if more people would care about these things we'd spend less time cleaning up the hot, steamy, ill-architectured mess too commonly left behind by cowboy developers.
Given this response, I'm concluding you are being difficult **just to be difficult**. Not to mention you've now dodged 4 times (5? I lost count). I think we are in disagreement with what the point of NOP is. Until we agree on that, that makes the rest of this pointless. Given your response of "null values for these things make it an invalid object" - I'm beginning to think you disagree with the idea of NOP altogether. What authoritative source do you want to use for what a Null Object is and how it should act? [Wikipedia](https://en.wikipedia.org/wiki/Null_object_pattern#PHP)? [Sourcemaking](https://sourcemaking.com/design_patterns/null_object)? [PoEAA](https://books.google.com/books?id=vqTfNFDzzdIC&amp;pg=PA498&amp;lpg=PA498&amp;dq=patterns+of+enterprise+application+architecture+null+object&amp;source=bl&amp;ots=oTzmGxOQoy&amp;sig=VN_5mYqhJWz5FS2BqwYrkGpn7PE&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwjMg_i7mdDWAhXENiYKHfo-DnoQ6AEINzAD#v=onepage&amp;q=patterns%20of%20enterprise%20application%20architecture%20null%20object&amp;f=false)? I'll ask again, just because pointing out dodgy behavior (heh, see what I did there) is fun: In which situation would you fetch a last order and do more than read from it? 
Given this response, I'm concluding you are being difficult **just to be difficult**. Not to mention you've now dodged 4 times (5? I lost count). I think we are in disagreement with what the point of NOP is. Until we agree on that, that makes the rest of this pointless. Given your response of "null values for these things make it an invalid object" - I'm beginning to think you disagree with the idea of NOP altogether. What authoritative source do you want to use for what a Null Object is and how it should act? [Wikipedia](https://en.wikipedia.org/wiki/Null_object_pattern#PHP)? [Sourcemaking](https://sourcemaking.com/design_patterns/null_object)? [PoEAA](https://books.google.com/books?id=vqTfNFDzzdIC&amp;pg=PA498&amp;lpg=PA498&amp;dq=patterns+of+enterprise+application+architecture+null+object&amp;source=bl&amp;ots=oTzmGxOQoy&amp;sig=VN_5mYqhJWz5FS2BqwYrkGpn7PE&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwjMg_i7mdDWAhXENiYKHfo-DnoQ6AEINzAD#v=onepage&amp;q=patterns%20of%20enterprise%20application%20architecture%20null%20object&amp;f=false)? I'll ask again, just because pointing out dodgy behavior (heh, see what I did there) is fun: In which situation would you fetch a last order and do more than read from it? 
You see, you didn't understand me right. I care about architecture quite a lot, actually, and I realize its importance. And I also know that articles like these are absolutely useless in teaching you architecture. Articles like these give architecture a bad name. You can read the brief overview of a dozen architectures like this, and then you'd go back to your code and you'd be totally clueless how to implement any of this properly. Or even worse: you'll decide to mechanically start turning every listed architectural component into a class named after the component, and you'll try to convince yourself that this gets you there. You're an architect now, like the big guys! But nope, your software still ends up the same sad mess as before. Architectural discussion at depth by people who actually have experience in it? Give that to me anytime! Loosely copied article based on another article, based on a blog post, based on a video presentation, based on yet another blog post, based on another article, based on the marketing material for some consultant's book on how to do Agile with some mixed-in materials found on Bob Martin's and Martin Fowler's sites? No, we have enough of that shit. Quite enough, indeed.
These articles are clearly meant as a series. It builds out common patterns and definitions and summarizes and compares architectural styles *with references to source materials*. I would not be surprised if follow-up articles will be based on these foundations. The author is merely sharing his progress in researching architecture. Furthermore, if you did not mean to come across this snobistic or toxic, you might want to consider changing your tone. Let's try and make this community a little bit better.
&gt; Given this response, I'm concluding you are being difficult just to be difficult. Not to mention you've now dodged 4 times (5? I lost count). I've dodged what, genius? You didn't ask me anything that makes sense yet. My question was very simple, you refused to answer a few times, and when you finally did, you gave answers that demonstrate you don't know what you're talking about and you don't know how to implement NOP. &gt; Given your response of "null values for these things make it an invalid object" - I'm beginning to think you disagree with the idea of NOP altogether. It's invalid not because you return null in general, it's invalid because the Order object specifies those as non-null values, as I established waaaaaaaay up in the thread. A NOP object must be a valid implementation of what it implements. I already said that. If it doesn't it's just a broken implementation of an interface, not NOP. I already said that too. Now, from your own fucking links: - Wikipedia: "Instead of using a null reference to convey absence of an object (for instance, a non-existent customer), one uses an object which **implements the expected interface**" - Sourcemaking: "The intent of a Null Object is to encapsulate the absence of an object by providing a **substitutable alternative** that offers suitable default do nothing behavior." Not only is your "return null everywhere!" idea of NOP object incorrect, but it will literally be a type error in some cases. Let's say we have an Order defined like this: interface Order { /** Returns numeric unique reference id. */ function getReferenceId(): string; ... } The author of the interface has decided that every order **must** have a valid reference id. Now you come wobbling around and you have a *bright idea* "I know! I'll use NOP and return null for the reference id!". And behold, your NOP object throws a `TypeError`. Now what? Remember what I told you, again, waaaaaaaaaaaaaaaay up in the thread? Either you'll end up implementing Order incorrectly, which we just did, **or**... we need to start eroding our domain models by **relaxing constraints on all Orders** to appease the NOP version, and behold: interface Order { /** Returns numeric unique reference id, or null, although technically there's always a reference id actually, but NOP objects don't have any. Sigh. */ function getReferenceId(): ?string; ... } So now you can successfully implement NOP Order, but also you've opened the way to a bunch of **new bugs** because now **any** order may silently return null for 1) reference id 2) payment id 3) the product list which shouldn't be empty now can be empty etc. etc. etc. So you took a simple fucking problem, which was `getLastOrder(): ?Order; // Returns order or null if there are no orders` and you turned it into a clusterfuck. If you think my assessment is just me being difficult, if you're that blind to how horrible your solution is... then fuck it, it's not my problem, keep being ignorant. If you're actually willing to learn something today, you may have to stop clinging for your ego, take a step back and try to understand what I'm telling you. &gt; I'll ask again, just because pointing out dodgy behavior (heh, see what I did there) is fun: In which situation would you fetch a last order and do more than read from it? What does "more than read from it" even mean? This is barely English. Ask in an intelligible way and I'll answer.
thanks for your attempt at fixing things, but redefining words isn't helpful. your comparison to Cold Fusion is exactly why other historical references are important, and why i'm asking for other solutions to these arbitrary requirements, so the solutions can be compared. the 'huh?' article gets into the injection attack protections... and the default security settings get an A rating from mozilla's scanner. not really relevant to this simple demo. I've worked on teams of 50+ with many designers. i understand the issue of incorporating old logic into new presentation just fine, but there are many more issues to consider than just separating logic and presentation. Such as, the inevitable happens and requirements are changed for edge cases, and the only solution that can be done before deadline is merging some presentation with logic. it get's messy either way, but Hashtag Markup has Templates to integrate directly into the layout that a designer would provide. In those inevitable edge case hacks, the next developer has everything they need, without having to trace separate presentation layer stacks. If anyone is willing to take on the challenge, I think a great next step would be having a designer submit a new mockup that all other solutions must integrate. it would demonstrate your point well. then another step where the constants are changed, new attributes are added, old attributes are changed, and existing data must respect the old rules, would also very clearly demonstrate all the real world problems that often creep into data apps. Could you whip up a demo in the language of your choice, and share?
you know how people are born, get sick, and die? it's like that.
&gt; I've dodged what, genius? You don't seem to have reading comprehension issues, so I'll assume you're willfully ignoring this again. However, just for funsies: What realistic situation will you use a last order for more than reading the data? In the proposed situation, it was for filling in some defaults. NOP works just fine there. If you're on a "Most Recent Orders" page, the conditional makes perfect sense there as that's a business rule "show them their last order if they have one, otherwise tell them they don't have any orders". The article that started this entire chain doesn't actually show the order interface. Obviously if a method is to return a string, return empty string. You just now provided your idea of an interface, and obv I'd return a string if a method is supposed to return a string. From my own links, it's convenient you left out the part where the PoEAA book returns null from a getter. Intentional? I may never know! I'll give you the benefit of the doubt that it was the last link and you couldn't be bothered to open a 3rd ;) Obviously I understand what "suitable alternative" means. &gt; you've opened the way to a bunch of new bugs Why/how? Because a payment id can be empty, now you can't query on it, hit an API with that info, etc? &gt; stop clinging for your ego That's rich, coming from the person taking a hard line stance from the get go, who was also being super difficult (and has acted like this every other interaction I've had with you). At any rate, I **am** open to learning something, you just have a poor way of presenting your point without also sounding pissed off at the world and that us little peons can't possibly understand what you know. The more condescending you act, the less people are willing to listen. &gt; What does "more than read from it" even mean? This is barely English. Ask in an intelligible way and I'll answer. That is more than "barely" English. In fact, it's "only" English! Again, you're being difficult just to be difficult, and I already address what that means up above in this response.
Little difficult to understand some of the pattern matching syntax (if one is not familiar with Scala syntax), but otherwise looks neat. 
This is the ultimate question, and there are no simple, easy answers. All tests are somewhat a duplication of logic in the code being tested. This is really annoying. Ideally, we would not need them and be able to reason about the code well enough to know it works, but that is just not the case, so we duplicate the logic in tests. When you have a combination of unit and integration/acceptance tests, you have even more duplication, but sometimes this is necessary. Tests don't prove the absence of errors, they only prove the presence of them, so there is always the chance bugs will get passed your tests. In my opinion, these are your best strategies for fighting these problems: 1) Uncle Bob would say that you should not do mocking/stubbing except for hardware boundaries that are very difficult to test directly. He intentionally avoids using mocking/stubbing libraries in order to make it harder to do, so that he will do it more rarely. He wants you to have a clean architecture so that you can test everything separately. He does believe in having some tests that run through the whole system, string from the UI, but they don't duplicate testing the behavior of the code, they just make sure all the layers got glued together correctly and are communicating with each other. He has several books and videos where he explains these concepts, including a new book about clean architecture, called "Clean Architecture". He wants all your tests to run within a couple minutes, and for you to always to test driven development, so that you always trust the tests to tell you if you can ship or not. 2) Uncle Bob would also say that clean code helps with the problem of making your code simple and easy to reason about, which reduces the number of bugs that exist in the first place, as well as increase the chance you will find bugs just by looking at the code. He wrote an entire book about thinking really deeply about clean code called "Clean Code". 3) Take advantage of static analysis tools like PHPStan. 4) James Coplien, sounds crazy, but he does offer the "other" opinion that runs counter to Bob's. If you listen to him long enough, you will begin to understand what he is saying. The way I understand it, he is trying to come up with something better than what Uncle Bob promotes, and he does a really good job of describing why something better is necessary, but he is really bad at explaining how you actually do this. He wants you to design for the human factor. The code should be natural to reason about by fitting the way people think. If you fail to accomplish this, you cannot expect to be able to test quality into the code. The way the user interface allows the user to work with the system should match the users mental model of the system. In order for the code to not be too difficult to reason about, and not be too buggy, he says all the programmers should also be UI programmers. Otherwise you will not be programming the model of the system to match the mental model of how the user sees the system working. He says that decoupling is bad because the interesting parts are in the interrelationships between objects interacting with each other. If you removed all coupling, you would just have a bag of objects, not a system. Obviously there needs to be some balance here. He says that encapsulation is bad. If you pretend that you can ignore information, it ends up having to be worked in later anyways, but in a very unnatural way. He says instead of encapsulation we want compression, a collection and incorporation of knowledge, not a throwing of it away. As far as ways to actually achieve these lofty goals, here is what I am aware of: a) All programmers should also write the UI, no "backend only" or "front end only" people. b) Therefore all programmers should study and learn UX. c) Use a DCI (domain, context, interaction) library. This allows classes that map to the core of the domain to be reused all over the place without blowing up into God classes. DCI is designed to take some of the focus away from class oriented programming, and onto object oriented programming, by allowing objects to take on different roles. This makes it more natural to put to the use cases (think user stories) directly into the code as classes, which makes it easier to reason about and test the actual behavior of the program. DCI is also partly about not having to use as much polymorphism. He says that polymorphism is difficult to reason about and said that they are "intergalactic goto statements", or something like that. 5) I think DCI and programmers writing UIs solve some, but not all of the problems pointed out by James Coplien. He also promotes contract driven development, which has you writing contracts that get automatically exercised and run by random input generated by a program to automatically test your code. He says that writing automated tests is not lean. There are not 2 separate things, the tests and the code, there is just code. If you write tests, the tests themselves will also add to your total code, and therefore add to your total bug count. I think he is onto something, but this idea is still incomplete. I am working on a library that is still pre-alpha/not ready for release which hopes to take full advantage of this concept by letting the contracts be the code: https://github.com/still-dreaming-1/PurposefulPhp
&gt; https://imgur.com/gallery/1dYC2 Were do you think i set the route url
Most of the other pages on that BAT app are in the 28ms range, so i'll look into that. i'm guessing it's all the new cryptographically secure random number stuff, or transactions blocking. This does seem like an easy task, but i'd really encourage you to replicate the demo in the language of your choice, and then compare transaction times. If time to first byte is important, the report could be loaded externally using a service worker that loads instantly... but, i agree, the random activity process should take less time than it does. At the same time, i'm curious how other languages or frameworks could replicate the demo randomization, and maintain data integrity with ACID transactions. 
Regular code reviews are also very helpful for spotting these types of errors. Some teams only do pull requests, instead of pushes. Then the code has to be reviewed before the request is accepted and the code is pulled.
Thanks for the advice, exactly what I am looking for! I'll study PSR tonight. Have not heard about Scrutinzer, so I'll also check that out. Thanks!! :D
I'm holding off until it's PSR-9000 compliant 
How is this different from all the other minimal PSR-11 compliant containers?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This one is the smallest. 
Think of unit tests as a knowledge base that is automatically checked against. If you misunderstand how an API functions your unit tests can't and should not help. However the great thing about unit tests is once you do understand how the API works and you fix your unit test it will prevent you, or others having the same misunderstanding again in the future. Unit tests are the accumulated knowledge of how an application should and should not work. They key is you need to have the knowledge yourself first to write the tests.
&gt; What realistic situation will you use a last order for more than reading the data? In the proposed situation, it was for filling in some defaults. NOP works just fine there. If you're on a "Most Recent Orders" page, the conditional makes perfect sense there as that's a business rule "show them their last order if they have one, otherwise tell them they don't have any orders". You can't tell them they have "no orders" if the API always returns an Order. You answered your own question. The UI may also display a generic UI for an order, things like tracking the order, showing payment status, canceling an order, filing a ticket on an order, etc. *By the way those last few constitute a "more than read on an order"* to satisfy your broken English question up there. All of these operations makes absolutely no sense when you have *no order* to speak of, it'll just string along the user along more and more "null" interface that does nothing except mislead them. As for the interface, returning empty string where non-empty string is required is just as invalid as returning null where non-null is expected. You're *working around the rules of the PHP runtime*, but you're not solving the issue, you're just hiding it. You still have a NOP object that returns invalid data. If it says "unique reference id" and a reference id is "16-digit numeric string" then returning empty string means your NOP object is broken. Likewise for returning empty lists when the API says "returns non-empty lists". You need to **either** relax the Order interface **or** implement it incorrectly, which is a pretty obvious "WTF" to any decent software engineer there: don't implement incorrectly your own contracts, it's a recipe for a bug soup. But I've said this enough times, and it doesn't click for you. The most important thing that was repeated in all the links you pasted to me is that NOP is intended for situations where the object is a *collaborator* with other objects (i.e. Strategy pattern, Delegate pattern, Chain of Command pattern, etc.). A value object or entity that represents and entity in your domain such as an "order" is *not* a collaborator in that sense, so from the very beginning, suggesting NOP here was obviously the wrong solution. I know you don't understand this, it's been pretty evident. But I'm tired of trying to shove knowledge in your head, I don't care. You'll never correct yourself because at this point it's not about correctness, it's about demonstrating you won't change your position. It's about ego. Keep doing whatever you want. After all, I'm not the guy who can't design an API, I don't care about your problems. See ya.
[removed]
[removed]
Smallest in terms of what? Number of methods? Lines of code? If I'm looking for a DI container, my focus definitely won't be on which one is the smallest. My focus is on which one provides the best features for my use case, the one that is difficult to abuse as a service locator, and the one that has some guarantee of ongoing support. Please sell me on why I should use your DI container over all of the others, especially something such as Pimple.
The simplicity, it isn't bloated like some other DI containers. It just works. 
The article is quite painful to read (because of the gifs and a lot of theoretical talk), basically in your example you send all the messages of one user to the same worker to keep their order? If that's it, then that's a lot of words, the article could be clearer.
Pimple is also relatively simple, and just works, and is also backed by the same people who work on the Symfony framework. Why would I choose your library over one that has that kind of backing?
&gt; I heard integration tests for this, but that means testing the checks that the other unit is supposed to be doing. I feel like that is duplicating the tests at another layer. No you're not duplicating it. Integrations tests make sure that your components work together: https://www.appcoda.com/wp-content/uploads/2016/10/unittest-integrationtest.gif
Wish I would have that much time. :-) As I understand most of the tasks are about database actions, so it really comes down to DB performance, therefore I would implement the whole business logic in a stored procedure for best performance. If I would have to implement it in the application and consistency is a real deal, I would lock the db, retrieve, update states and update the db, release lock, then present - assuming there are only a few agents as in your demo, &lt;10. However as the task is to just display some random non-sense, I'm not sure ACID is a requirement. :-)
&gt; Furthermore, if you did not mean to come across this snobistic or toxic I meant it 🖕😄🖕
Let me elaborate: Strix is a single file container (2 files for exceptions), with only 4 functions. It depends on 1 package, the interface it extends. It's the smallest container that implements PSR-11. It doesn't have any backing, except for my own. If you need a package that is small, does what it needs to do, and just works, then Strix is for you.
Oh, poor guys, let me join you two so we can cry together. Who is this mean guy who is pestering you with facts and analysis so mercilessly?
Hi, see this guide on the [phptherightway](http://www.phptherightway.com/#mac_setup) website. Apart from that guide the website itself is a good place to learn some PHP
https://pasteboard.co/GMK7VJ2.png
Then why use a completely new syntax and "pre-pre-processor"? Your example can just as easily be done in plain PHP, guaranteed with less overhead and probably fewer lines of implementation code. I bet it would be a lot easier to read too if you just used plain PHP. Personally, if I had to chose between hash-tag and php, I'd go with plain PHP every day. I'm not saying that just because hash-tag isn't industry standard, it's because it adds unnecessary complexity and an entirely new syntax to something PHP does really fucking good on it's own.
How are people writing clean unit tests? When I'm writing unit tests, I use Mockery for mocking my dependencies, but I find all too often that my test methods are 100 lines of Mockery and the assertion is lost at the bottom. Is this just a symptom of my methods doing too much or is there something I'm missing? Help appreciated.
Hi, not trolling lol, why mongodb?
A common issue with PHP profilers is that they tend to overexaggerate overhead of function calls. What's the overhead of this profiler? Is it being accounted for? If yes, that's awesome.
why do you have to mock so much? You should perhaps brake your classes to smaller ones with less dependencies?
PHP doesn't automatically manage your database schema... maybe you don't want it to, but it doesn't. Hashtag does. PHP doesn't support templates for caching module content to decrease overhead. Hashtag does. Granted, Hashtag is written in PHP, so PHP can certainly be made to do these things, but it's much simpler in Hashtag. Lots of "probablys" and "i bets".... you seem excited to provide a PHP based solution, and i'm excited to see if you can really decrease the lines of implementation... GOOD LUCK! please also include all the database schema setup scripts you'll need to use. 
I'd be tempted to use the AWS SNS service, possibly with linked SQS if you need queuing, rather than bother to setup my own notification service. Unless you are scaling to a very large number of messages it should be nice an cheap, reasonable chance you will fall inside the free tier at first at least. In terms of messaging vs not messaging, I'm increasingly in favour of using messaging unless you have a solid performance reason not to do so. I'm bored to having to bodge APIs onto decade old applications.
Data consistency is part of the demo, even if it is just random nonsense. Part of the requirements are that the attributes must be unique, so ACID is a must. Come on... you've got time to respond, but no time to whip up the solution and share? It sounds like you've already got it all in your head... type it out! 
Ok challenge accepted. Please provide full source for your example, including install scripts, database managers, schema migration files, cache handlers, ioc, amount of configuration files, framework files etc. And I'll make the above solution work with plain PHP code to compare which is faster and easier to get going with. If you don't want to show the actual backend I can still replicate your example in plain PHP probably with less lines of code. **Edit** Actually, no, I decline the challenge on second thought. Since it would be too much of a shitstorm with automagic everywhere, and i don't want to be responsible for that. I was up for the task, but as soon as I sat down I got a bad taste in my mouth.
The framework is open-source and will be published soon... every piece of code relevant to the demo is included inline on each of the pages... that's really it. The purge links below the activity panel will drop the tables and create the initial attribute records.
:D ... we used MySQL for over 10 years, and 2-3 years back we decided to switch to mongodb and try it out on few projects. Overall our experience with mongo has been more than pleasant. It's fast, reliable and with proper object document mapper it's super easy to work with. Speaking of ODM, we wrote our own, which is also listed on the mongodb documentation page: https://docs.mongodb.com/ecosystem/drivers/php-libraries/#framework-integrations
That's not it. You need to show the code that makes it work.
There's nothing specifically in here that requires a queue. It sounds like you just need to build a HTTP api thats consumed by multiple services. 
I don't fully understand what your control panel is trying to do. You sound as though you've rushed off some features in mid air without really thinking about the data structure underneath it. I think you will end up using some combination of a RDBMS, a cache and a message queue. I've never been faced with building a sane web application that didn't use using some (or all) of those three services. Start by drawing a schema of what data you want to store and build on from that. Throw in some scheduled and queued jobs, maybe some object storage (although it doesn't sound like it's required this time) and *then* start writing your codebase. It is a lot easier to choose your services up front and then write your codebase around them than the other way round. If you've already started writing your codebase (and it sounds like you have) then that's okay. Still go through the exercise of drawing a schema. It will help you realise where you should be pointing. For a messaging queue you can use Redis. It has some blocking commands (such as BLPOP) which can be used to emulate a message queue.
&gt; Also, security is a thing.. I don't want to expose API endpoints for the world to see It's a good idea to always assume knowledge of all of your endpoints will be public at some point or another. Make sure each one has a solid security layer behind it, is only accessible via secure channels and so forth. Once that is in place, it's easier to consider the API route for your problem.
That is all of the code that makes it work. The framework will be published soon. I'm excited to see your solution!
Do you think php would benefit from Dart's [`Cascade Notation`](https://www.dartlang.org/guides/language/language-tour#cascade-notation-)? We already partially do this with method chaining, but only when you return `$this` and you can't assign public variable values. $post = $postRepository-&gt;find(10); $post-&gt;title = "sup" -&gt;content = "hi" -&gt;timestamp = time() -&gt;save(); Edit: clarification
&gt; your broken English I was giving you the benefit of the doubt that you didn't have comprehension issues. Since you repeatedly tell me I'm not speaking perfectly valid English, I guess I'll go ahead and assume your English comprehension is lacking a bit. For that, I apologize for any miscommunication that has been a result of our conversation. &gt; You can't tell them they have "no orders" if the API always returns an Order Well this is a convenient twist of the things I've said. &gt; By the way those last few constitute a "more than read on an order" I'm not sure how you define few, but I look to that number as at least 3, as a few is more than a couple and obviously a couple is 2. That means you're now embellishing "the last few" because "showing payment status" is (drum roll please) **reading** data. &gt; canceling an order Please show me a situation which you would "cancel your last order". Generally you are directly viewing an order and you would cancel it from there. &gt; filing a ticket on an order This one usually has 2 options: the same as above, or some sort of support system where you will be given a list of orders to tag. Again, that is only valid orders that are returned from the database, which would be an empty list if there aren't any. By the way, those are things you'd do with a current order, or maybe when displaying a list of orders, but I can't think of any situation I would file a ticket for, or cancel, my most recent order. I don't know how you got confused that I'm always going to return a null object. I even made it clear in a post above (in which you ridiculed) that sometimes you may not want one. &gt; As for the interface... then returning empty string means your NOP object is broken How is this not also true for a nullable return type that you set in the interface you sent here? &gt; Likewise for returning empty lists when the API says "returns non-empty lists". How do you even enforce this? I understand how you can force a list, but how do you ensure it's not empty? &gt; But I'm tired of trying to shove knowledge in your head, I don't care. That's obviously not true, otherwise you wouldn't spend your time replying. &gt; You'll never correct yourself because at this point it's not about correctness, it's about demonstrating you won't change your position Not true. You've just done a poor job of educating, but attempted to do a good job of ridiculing. You can't expect to do the latter, pretend it's the former, then call me stubborn. &gt; It's about ego lol again
To expand upon what CC said, imagine someone gets admin permissions, and then you want to stop them from having admin permissions. So long as they have that ['admin'] = true, there's not a lot you can do to remove them from it short of changing your source code or deleting all the session data. What you should have is $_SESSION['auth'] = [ 'id' =&gt; 1234, 'vcode' =&gt; 'abcdefghi' ]; 1234 is the row of the user record in your database, and 'abdefghi' is a randomly generated string also stored in your user record table, when you need to access user data you first look up the row by the user record ID, and then compare the check value in the session, to the one in the row, and if they don't match, you treat the request as if there was no session data. if (isset($_SESSION['auth'])) { if (($user = lookup_user($_SESSION['auth']['id'])) !== null) { if ($user-&gt;auth_code === $_SESSION['auth']['vcode']) { /* only now do you have a legit login */ } } } If you do need to kick a person off that user, such as on a password change, or known compromise, you just re-generate a new random authentication key. You can also use an incremented authentication version. An integer that gets incremented whenever you want to kick other people out, other than that it's the same. The benefit to the random string method is it's good practice for when you're using mechanisms the user can alter, such as when storing information in a COOKIE. If you only incremented an integer then a hostile actor could quite easily add 1 to the value (other than cookie encryption + hmac)
MQTT is mostly used in a pub/sub kinda fashion. If your consumers require that, it's not a bad idea - especially since there are many brokers out there you can easily use for free. But if you need a request/response pattern, just stick to HTTP.
You can already do this in PHP with things that return themselves after modification: For example, in Phinx: $this-&gt;table('whatever') -&gt;addColumn(...) -&gt;addColumn(...) -&gt;addIndex(...) -&gt;create(); 
 &lt;?php // configuration file $pdo = new PDO("mysql:host.....", "username", "password"); ?&gt; &lt;?php // installation file include 'config.php'; $pdo-&gt;query("create table if not exists agent ..."); $pdo-&gt;query("create table if not exists attributes ..."); $pdo-&gt;query("create table if not exists agent_attributes ..."); ?&gt; &lt;?php // demo file include 'config.php'; session_start(); ?&gt; &lt;div class="panel panel-primary" id="activity"&gt; &lt;div class="panel-heading"&gt; &lt;h4 class="panel-title text-center"&gt;Random Chance Activity&lt;/h4&gt; &lt;/div&gt; &lt;table class="table table-condensed text-center"&gt; &lt;?php $agents = $pdo-&gt;query("SELECT *, GROUP_CONCAT(attribute.name SEPARATOR ',') AS labels FROM agent INNER JOIN .... WHERE status = 'active'"); while($agent = $agents-&gt;fetch()) { // was lost if (rand(0,99) &lt; ($agent['loss_percent'] / 100) * 25) { // I'm not sure what you do here $pdo-&gt;exec("UPDATE agent SET ... WHERE id = {$agent['id']}"); // You show no prevention against injection, so i don't either ?&gt; &lt;tr&gt; &lt;td class="alert alert-danger"&gt; &lt;b&gt;&lt;?= $agent['name'] ?&gt;&lt;/b&gt; was lost.&amp;nbsp; Cause Attribute: &lt;span class="label label-danger"&gt;&lt;?= $agent['loss_cause'] ?&gt;&lt;/span&gt;&amp;nbsp; Final counter: &lt;b&gt;&lt;?= $agent['counter'] ?&gt;&lt;/b&gt;. &lt;/td&gt; &lt;/tr&gt; &lt;?php continue; } // Wasn't lost $pdo-&gt;exec("UPDATE agent SET counter = counter +1 WHERE id = {$agent['id']}"); ?&gt; &lt;tr&gt; &lt;td class="alert alert-success"&gt; &lt;b&gt;&lt;?= $agent['name'] ?&gt;&lt;/b&gt; &lt;span&gt;&lt;?= implode('&lt;/span&gt;&lt;span&gt;', explode(',', $agent['labels'])) ?&gt;&lt;/span&gt; was not lost.&amp;nbsp; Reload counter: &lt;b&gt;&lt;?= $agent['counter'] ?&gt;&lt;/b&gt;. &lt;/td&gt; &lt;/tr&gt; &lt;?php // apply chance of agent obtaining random unique attribute if (rand(0, 99) &lt; 10) { // I have no idea what this part does.... $attribute = "weird part"; $newAttr = $pdo-&gt;query("INSERT INTO agent_attributes (agent_id, attribute_id)..."); ?&gt; &lt;tr&gt; &lt;td class="alert alert-warning"&gt; &lt;b&gt;&lt;?= $agent['name'] ?&gt;&lt;/b&gt; got a new &lt;span class="label label-danger"&gt;&lt;?= $attribute ?&gt;&lt;/span&gt; chance of loss Attribute. &lt;/td&gt; &lt;/tr&gt; &lt;?php } if (!array_key_exists('agent_countdown', $_SESSION)) { ?&gt; &lt;tr&gt; &lt;td class="alert-success"&gt; New Agent!&amp;nbsp; Welcome, &lt;b&gt;&lt;#[new_agent.name as html]#&gt;&lt;/b&gt;! &lt;/td&gt; &lt;/tr&gt; &lt;?php } $_SESSION['agent_countdown'] = (!array_key_exists('agent_countdown', $_SESSION) || $_SESSION['agent_countdown'] == 0) ? 3 : $_SESSION['agent_countdown'] - 1; if ($_SESSION['agent_countdown'] == 0) { ?&gt; &lt;tr&gt; &lt;td class="alert-warning"&gt; Only &lt;b&gt;&lt;?= $_SESSION['agent_countdown'] ?&gt; reloads&lt;/b&gt; until a new Agent is created. &lt;/td&gt; &lt;/tr&gt; &lt;?php } else { // Double entry in your example.. what's the purpose of this? } } &lt;/table&gt; &lt;/div&gt; Some parts left out but you get the concept, that's all you need for that demo you show. Now show us the full framework and how it pieces everything together in less code. Note that i still don't know the purpose of the code, and what the real world implementation would be. Edit: I'm not proud of that code lol.
That's not all the code that makes it work. The code that makes it work is your framework, show that and how it does these things in less code than plain php, or any other framework for that matter.
It's mainly dependencies of dependencies. For example. If a method takes the Symfony request object and I use `$request-&gt;query` inside. I now need to mock, not just the Request, but also the parameter bag (or at least construct it). Same goes for repository methods with Doctrine. I know it feels wrong to test that sort of stuff at a unit level, but it's sometime useful to see if it's constructing the correct query without executing it. Doing that is even worse as you go down a giant rabbit hole. 
Nice start! there is no SQL injection possible in any of the Hashtag Markup record or list commands... the framework takes care of all of that. You're also not sanitizing the attribute names before you inject them in the HTML... the Hashtag Framework also makes that simple with the html context applied to the variables before they are injected. the double entry on the last message in my example was because the message changed... on days you get an agent, it says something like "Only 3 more reloads until *another* Agent..."... while on days you don't get an agent it says "Only 1 more day until *a new* Agent...". You left out the code to actually insert the new agents, and the code for selecting a random new attribute that they don't already have. You also left out the stuff that avoids messages like "1 more reloads" for "1 more reload". Could you get your solution running on a live host, and provide a link? 
well, that's the problem. You should never go down the rabbit hole and you should always mock only 1 level of your dependencies in unit tests. So if you're mocking Request class, then mock the query method, to return whatever you expecting.
&gt; How do you even enforce this? I understand how you can force a list, but how do you ensure it's not empty? An expectation like "the list of products is not empty" is called an [invariant](https://en.wikipedia.org/wiki/Invariant_%28computer_science%29). While some types of invariants are guaranteed by the parser or by the runtime, not all are. This is especially the case in a loose/dynamically typed script like PHP, where the type system is still quite rudimentary. But the expectation is nobody breaks agreed-upon invariants simply because they *can*, like you do, because it's just a stupid thing to do. An example of an invariant is "in this country you always drive on the right side of the road". - Can you up and go drive on the left side? Yes. - Will it severely increase the chance of an incident? Yes. - Will a cop *always* be there to stop you? No. So to assume "if you can't enforce this means it's OK to break it" is a sure sign you're new at this programming thing. Here's someone else talking about domain model invariants: &gt; Invariants are the essence of what it means for an entity to be an entity. We may ask our customers, can a Person be a Person (in our system) without a BirthDate? Yes, sometimes. How about without a Name? No, a Person in our system must have some identifying features, that together define this “Person”. An Order needs an OrderNumber and a Customer. If the business got a paper order form without customer information, they’d throw it out! Notice this is not validation, but something else entirely. We’re asking now, what does it mean for an Order to be an Order? Those are its invariants. [Source](https://lostechies.com/jimmybogard/2010/02/24/strengthening-your-domain-aggregate-construction/) So invariants are *the essential properties of an entity that make it what it is*. Of course the type system can't enforce all your entity invariants. No type system can, but the type system is *not* the only way to help enforce invariants. Other ways are: - Unit tests (and integration tests etc.). You test your API and see if you can make it break the agreed upon invariants. If you can, you don't commit the broken code. - Assertions. You place `assert()` statements within your source (not separate, like unit tests) that ensure data arrives and goes in the expected formats. For example in a place where you read orders you can type `$orders = $api-&gt;getLastOrder(); assert(count($orders-&gt;items) &gt; 0);` If this fails your program throws (or at least logs a warning, depending upon settings.) - Common sense. This is a heuristics-based system based on pattern recognition that can be trained in humans to help them avoid doing stupid things. Such as when you write "this list must not be empty" in a PHPDoc, then another developer won't intentionally break this rule to implement NOP. It's like a tingling sensation similar to what you get when you drive on the wrong side of the road. Unfortunately not enough people unit test, even less people assert, and you're a perfect example of someone who has a total lack of common sense. &gt; You've just done a poor job of educating I really have, but I just realized too late I'm dealing with a student with special needs here. I'm not good with those. Also I didn't read most of what you wrote this time. You're way too arrogant for how obviously inexperienced you are, and I don't give a damn about people like you. So, again - see ya.
**Invariant (computer science)** In computer science, an invariant is a condition that can be relied upon to be true during execution of a program, or during some portion of it. It is a logical assertion that is held to always be true during a certain phase of execution. For example, a loop invariant is a condition that is true at the beginning and end of every execution of a loop. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.27
I won't do any work for you. I'm not proving my solution works. I'm not proving you wrong. I'm not discussing this on a "i can do it better" level. You fail to show how much code makes your solution work. I showed you an **example** of how that example can be accomplished in plain PHP, and probably in way less code. If you fail to see how my example clearly have the potential to the exact same thing as your example, without an underlying framework - i've got some bad news for you. I didn't leave anything out. I did mock up code that wasn't meant to "run", it was meant to "show". I spent a full 2 minutes on that mock-up, I'm sure as hell aint gonna spend more time on it lol. Nah, you fail to see that what you're trying to do is dirty, and have already been tested, used, and rejected by the industry several times over the past 10-20 years. I'm not gonna sugar coat it anymore. **Edit** And for the love of fucking sanity, dont you ever "nice start" me again. lol
I will... I'm first looking for working alternate examples to compare to. I'm glad you've dropped the notion that you could replicate the demo in plain PHP using less code, but i'd really like to see your solution linked somewhere and running live.
Do it yourself. You have my example, should be very easy for you to just puzzle it together.
Yep I realized that 5 seconds after I posted. Want me to delete
terrible finish. why would you waste even 2 minutes on something that you had no intention of completing? If anything, you showed that the plain PHP version takes way *more* code. The same industry that you're claiming would reject the Hashtag Framework has also rejected PHP for the past 10-20 years. i showed you an *example* of why the industry might be wrong. Please finish what you set out to prove. 
I tried to golf mine down to the bare minimum too. [yuloh/container](https://github.com/yuloh/container) is 13 logical lines of code vs 22 for this library according to phploc. Some differences: - I [pass the container into the closure](https://github.com/yuloh/container/blob/master/src/Container.php#L20). It makes the container a lot more useful since you can lazily resolve dependencies when an entry is accessed. - I [bind everything as a singleton](https://github.com/yuloh/container/blob/master/src/Container.php#L38) by default. That is how pimple works too. It seems to make sense as a default and you can bind a factory for the times you don't want to reuse the same instance. - Rebinding is useful (like overriding a vendor default) so I don't throw when calling add again with the same key. - I only allow binding closures which makes invoking the factory with the container simpler. You can bind a scalar parameter by wrapping it in a closure.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [yuloh/container/.../**Container.php#L38** (master → 4d8f469)](https://github.com/yuloh/container/blob/4d8f469208faad02dfd6e4397a751fbb70feb7da/src/Container.php#L38) * [yuloh/container/.../**Container.php#L20** (master → 4d8f469)](https://github.com/yuloh/container/blob/4d8f469208faad02dfd6e4397a751fbb70feb7da/src/Container.php#L20) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dnswmth.)^.
It's already removed by mods
My god, how can we help burst your bubble and go on with our lives?
I'd rather not be accused of making the alternate solutions more complicated than they need to be, even though the Hashtag solution is providing the same levels of data integrity. My solution is done... let's see yours running live, and compare!
&gt; terrible finish. why would you waste even 2 minutes on something that you had no intention of completing? You asked for it.
&gt; I'm looking for volunteers to provide example solutions to replicate the demo using any other framework or language. Get your solution running live, it seems.
Thank you for this, I have been struggling with trying to write every use-case in my integration tests. This will help me clean up my tests.
I did that, when I was starting with ReactPHP. The result was 100% processor load because it then works as plain loop. So, in my opinion, doing something in each tick is not the way it should be used. 
ReactPHP has its own event loop so I'm unsure what you mean. When a tick yields nothing, many implementations will micro-sleep a small amount to avoid keeping the CPU from busy all the time. But those are small adjustments to make and doesn't change the nature of the loop.
Your description makes it sound like you want to use per-property messages in a message system, so you don't have to add properties to a model class in a traditional poll-to-get-entity system. That's a very bizarre reason, on the face of it, to introduce MQTT or similar. You don't have to made classes with fixed amount of properties in a polling API. Write down the list of your requirements and use-cases and see what's the simplest way to resolve them. As for us, we need (at least I need) more info to give sane advice.
&gt; If anything, you showed that the plain PHP version takes way more code. Prove it to me, show me the framework that makes it happen.
Your solution is not done. I tried copy/paste it into a PHP file on my end, it doesnt run. I guess I need something else to make the code run. All I get is markup errors and browser rendering issues.
&gt; So to assume "if you can't enforce this means it's OK to break it" is a sure sign you're new at this programming thing At which point did I say that? More importantly: &gt; "in this country you always drive on the right side of the road" Assuming you're talking about the US here, this statement is false. We **usually** drive on the right side of the road, with some allowed exceptions, such as passing. When reading some default values I think it's more than acceptable to use empty strings in the given context from the article that started this whole mess (I really hate that I have to specify that, but you seem to like to twist shit, so I feel like it's necessary). About assertions: are you really going to put these in your view layer where you are displaying default values? I highly doubt it. &gt; You're way too arrogant LOL again &gt; So, again - see ya. Just like last time, amirite? ;)
the framework is live and running the exact Hashtag Markup shown on the demo pages. please link to your solution running live, and we'll compare!
??? my solution is running live, and demonstrably works. your half-started solution is the one throwing markup errors... please complete it and submit a link to it running live, and we'll compare!
just add /index.php at the end ex. http://foo.bar/phpmyadmin/index.php
I'm talking about such scenario: class Worker { private $loop; public function start() { $this-&gt;initLoop(); $this-&gt;queueWork(); } private function queueWork() { $this-&gt;loop-&gt;futureTick(function() { $this-&gt;queueWork(); }); //check various buffers and message queues: anything in there? If yes, fire callbacks for every single thing in there, then empty them buffers and queues } } Then look at: https://github.com/reactphp/event-loop/blob/ed4b051967fe18c1730e8f85587f3f9287e82667/src/StreamSelectLoop.php#L154 If you have something in future tick queue than $timeout in waitForStreamActivity will be 0 - so it will be basically non-stop loop.
I don't feel we're on the same page at all, I'm not sure what your code demonstrates, and what your link is trying to demonstrate, and what you're objecting to in what I said.
Oook... I'm illustrating what you said in the first comment. If this is not what you said than I don't understand your comment. Code speaks better - so if you want to continue please provide one.
I'm giving up. You're too dense. I can't deal with you. Good luck with your stuff and I wish you all the best.
Yeah, it seems I've misunderstood your tl;dr. You tried to explain how event loop works. But you are not calling any tick(). You call run() once on an event loop and it fires an endless (until explicitly stopped) loop in which: callbacks added with futureTick() are fired, then callbacks added with addTimer() are fired, then stream activity is checked (with timeout or not) and their callbacks are fired. The article is too much focused on futureTick() which overused will make the event loop just plain, resource hungry, loop - as in my code. I hope I explained myself. Peace - out.
It's ok to admit that you underestimated the task, or the power of Hashtag Markup. Thanks for trying!
It's pretty dense to assume Hashtag Markup would run natively in a PHP file on your end...
Haha, whatever dude. The only thing I'm guilty of is overestimating your potential and argument capacity. (Just so you know, "hash-tag" won't happen - better focus on other things.)
My argument was to compare a replicated demo, which you started, but were unable to complete. My argument doesn't even start until the comparison has begun. Take another shot at it... unless you're scared.
Good point. Despite not documented, SPX puts great emphasis on accuracy. Accuracy is indeed the issue when we are speaking about overhead since such profilers can be seen as intrusive probe: they are consuming the resources they are measuring. This is also explained, from another angle with a focus on wall time resource by @beberlei [here](https://tideways.io/profiler/blog/profiling-overhead-and-php-7). So first the accuracy issue is unavoidable for this kind of profiler. But it can be minimized. About SPX: SPX profiling process is divided into 3 components: - the core profiler: the profiling infrastructure. - the metrics collector. - the reporting system: a reporter listen profiler events to output something useful (a flat profile, a callgrind file...). **The core** It focuses on having the lowest possible overhead (O(1) time &amp; memory, no such I/O, alloc or any syscall...). **The metric collector** You have to be aware that: - the more metrics you monitor, the more the overhead will be high and thus breaking accuracy. - some metrics have an order of magnitude higher overhead that other ones (e.g. I/O metrics). - the default setup ("wt,zm" -&gt; Wall Time + Zend Engine memory) has low overhead. **The reporting system** - While probing a reporter performs most of the time O(1) space/time simple operations, typically adding data to an internal buffer. - Rarely, say one out 16K times, (e.g. when its buffer is full), a reporter can perform very costful operations (e.g. format, write &amp; flush data to a gzip'd output stream). In this case, the reporter hints the core system so the core system can take it into account and thus subtract consumed resources within the active probing window. This is done in batch fashion to maximize accuracy. - Flat profile reporter does not perform heavy operations at all. I invite you to test it on a CPU bound script with cheap functions called in the inner loop, which is a stress test for this kind of profiler. First try with "SPX_OUTPUT=trace SPX_TRACE_SAFE=1" (trace is by far the heaviest reporter) and then with "SPX_OUTPUT=trace SPX_TRACE_SAFE=0". You will see the expected accuracy issue with safe mode, but also how SPX is able to maximize accuracy when safety is not a concern and despite stream gzip'ing events to a file.
Hey, I want to thank you for your help. I didn't know that I could trigger the debugger like that. Also, I came to find out that all the forms were fine. The problem, as this is a highly customized wordpress install, is that a plugin was incorrectly changing form submissions. Seriously, thank you for your help!
Actually, I'd like to try this out. Do you have a link or article that I can read to learn how to load everything in Visual Studio? For example, this PHP / MySQL software are all loaded on an Apache server. How do I integrate this with Visual Studio? Do I download all the PHP code and run everything, including the MySQL server, locally?
1. /r/phphelp. 2. You cannot do it this way and most likely should not want it at all.
sorry to hear about you dropping out of the challenge. perhaps you can now appreciate the simplicity of the Hashtag Markup solution.
to be fair, i asked that you complete it...
I agree with andrejguran that the "correct" answer is to keep your mocking 1 level deep for unit tests. You would mock the Request object to return a fixed set of data. This would isolate the method you are testing from any dependencies (as it should be for a unit test). Setting that aside, let me share a little bit about how I do some of my tests (including stuff that utilizes repositories) as maybe inspiration will come from it. I don't always setup unit tests for classes with dependencies, but rather (for the sake of time) tend to rely more on integration tests and trust that the lower level components are working correctly because I have separate unit tests in place for them. Note: I don't use Symfony or Doctrine, but the concepts for my framework and ORM should be similar. I use PHPUnit's built-in test double methods (https://phpunit.de/manual/current/en/test-doubles.html). ## Understanding my setup Aside from extremely simple objects that have no dependencies (such as Models), I avoid using the "new" operator in any classes. Instead, I create objects at the Controller level (the highest meaningful level of logic in my framework) and inject all the dependencies using constructor injection. In order to avoid the arduous task of doing all the dependency injection manually, I utilize an Injection Container in which I define how to create each object and it handles the injections for me. I then store this Injection Container as a data member in my Controller named "$this-&gt;app". That base understanding out of the way, I was recently in a situation where I had written a quasi banking app where participants would earn "company credit" based on their sales totals for specific types of products through my work's system. The injection definitions looked like this: &lt;?php // Create Injection Container $c = new Container(); // Define how to create our Bonus Funds class $c-&gt;{\Classes\BonusFunds::class} = function($c) { return new \Classes\BonusFunds( $c-&gt;{\Models\BonusFunds\Transaction::class}, // A repository $c-&gt;{\Models\BonusFunds\Credit::class}, // A repository $c-&gt;{\Models\BonusFunds\Rate::class}, // A repository $c-&gt;{\Models\Member::class}, // A repository $c-&gt;{\Classes\Sales\SpecificProduct::class} // Sales data class ); }; // Showing one of the other definitions. It also has its own dependencies that will get auto-injected... $c-&gt;{\Classes\Sales\SpecificProduct::class} = function($c) { return new \Classes\Sales\SpecificProduct($c-&gt;dependency1, $c-&gt;dependency2); }; // Below would be the definitions for the other resources... . . . When I run my tests, I have my tests extend a custom test case that looks something like this: &lt;?php class TestCase extends \PHPUnit_Framework_TestCase { protected $app; protected function setUp() { // Load container. include('includes/container.php'); // The container will be accessable from our tests using $this-&gt;app. $this-&gt;app = $c; } public static function setUpBeforeClass() { // Load container. include('includes/container.php'); // Designate we are running tests so test DB gets used $GLOBALS['appRunningTests'] = true; // Reset DB. $c-&gt;dbBuilder-&gt;reset(); } public static function tearDownAfterClass() { // Turn off testing mode $GLOBALS['appRunningTests'] = false; } public function loadFixture($name) { // code to load fixtures } } I do a few things here, but one of note is that I'm importing my injection container and making it available within my tests via $this-&gt;app in the same way I do for my controllers. Another thing I'll do, but that I left out above, is I'll stub out problem areas. See two new examples: protected function setUp() { // Load container. include('includes/container.php'); // The container will be accessable from our tests using $this-&gt;app. $this-&gt;app = $c; /** * Some classes we might want to use like Auth, use the Session class. * However, when testing we won't have a session, so let's stub it with * a class that just holds data and can function like the normal Session class. */ $this-&gt;app-&gt;session = function($c) { return $c-&gt;sessionStub; }; /** * Loop through all our email listeners and stub them all. * We don't want to be sending out emails during testing. */ foreach ($this-&gt;app-&gt;listeners-&gt;emails as $listener =&gt; $v) { $this-&gt;app-&gt;listeners-&gt;emails-&gt;$listener = function($c) { return $c-&gt;PHPUnit-&gt;getMockBuilder('\Cora\Listener')-&gt;getMock(); }; } } Now for most of my integration tests, I don't care if the database gets called (which I'll explain in a moment), but for testing that the correct % of funds from sales gets credited to a participant's account I didn't have testing data setup and didn't want to make it, so I decided to just stub that resource in the container so that when I fetch my Bonus Funds class out of it, the fake Sales Data class gets injected as its dependency: /** * * @test */ public function correctlyGivesFundsBasedOnSalesUploads() { // Redefine the class we get sales data from in the Container to be a testing double $this-&gt;app-&gt;{'\Classes\Sales\SpecificProduct'} = function($c) { $stub = $c-&gt;PHPUnit-&gt;getMockBuilder('\\Classes\\Sales\\SpecificProduct') -&gt;disableOriginalConstructor() -&gt;getMock(); $stub -&gt;method('getMemberTotalsByVendor') -&gt;will($this-&gt;returnCallback(function () { return [ ['vendor' =&gt; 'manufacturer1', 'sales' =&gt; 1000], ['vendor' =&gt; 'manufacturer2', 'sales' =&gt; 1000] ]; })); return $stub; }; // When our Bonus Funds class gets created, it will receive a fake Sales data class // as a dependecy because we redefined the resource as a double above. $bonusFunds = $this-&gt;app-&gt;{\Classes\BonusFunds::class}; // Do stuff $bonusFunds-&gt;processSales('2017-01-01'); // Check result $this-&gt;assertEquals(42, $bonusFunds-&gt;getFunds($this-&gt;member_id)); } Boy this is getting long... Ok, quickly to wrap up let me just touch on repositories and calling the database. I don't know how Doctrine works, but my ORM can work across multiple databases by defining multiple connections. When running tests, there's logic in place to tell my ORM to use the connection defined by "testOn" instead of the regular connection. $dbConfig['defaultConnection'] = 'MySQL'; $dbConfig['connections'] = [ 'MySQL' =&gt; [ 'adaptor' =&gt; 'MySQL', 'host' =&gt; '127.0.0.1', 'dbName' =&gt; DB_NAME, 'dbUser' =&gt; DB_USER, 'dbPass' =&gt; DB_PASSWORD, 'testOn' =&gt; 'MySQLTest' ], 'MySQLTest' =&gt; [ 'adaptor' =&gt; 'MySQL', 'host' =&gt; '127.0.0.1', 'dbName' =&gt; DB_NAME.'_test', 'dbUser' =&gt; DB_USER, 'dbPass' =&gt; DB_PASSWORD ] ]; When my tests start running, and often between individual tests, I completely reset that testing database to a completely empty state without any tables. My ORM then rebuilds the tables from scratch based on the model definitions. From there I can either insert and read data as needed from within my test in a completely sanitized environment or I can load fixtures in the form of pre-defined data to work with. 
... Continued from above... Test that resets DB and loads some fixture data: /** * * @test */ public function canFetchCreditsByMember() { $this-&gt;app-&gt;dbBuilder-&gt;reset(); $this-&gt;loadFixture('Bonus-Funds'); $bonusFunds = $this-&gt;app-&gt;{\Classes\BonusFunds::class}; $this-&gt;assertEquals(2, $bonusFunds-&gt;getCredits($this-&gt;member_id)-&gt;count()); } Fixture Example: // Setup repositories $credits = $this-&gt;app-&gt;{\Models\BonusFunds\Credit::class}; $rates = $this-&gt;app-&gt;{\Models\BonusFunds\Rate::class}; $transactions = $this-&gt;app-&gt;{\Models\BonusFunds\Transaction::class}; // Add some credits $creditsList = new Collection([ new \Models\BonusFunds\Credit($this-&gt;member_id, 1000), new \Models\BonusFunds\Credit($this-&gt;member_id, 2000), new \Models\BonusFunds\Credit(402, 1000) ]); $credits-&gt;save($creditsList); // Add some transactions $transactionsList = new Collection([ new \Models\BonusFunds\Transaction($this-&gt;member_id, 1000, '', 1, 'sales deposit', '2017-01-01', 1), new \Models\BonusFunds\Transaction($this-&gt;member_id, 2000, '', 2, 'sales deposit', '2017-02-01', 2), new \Models\BonusFunds\Transaction(402, 1000, '', 3, 'sales deposit', '2017-01-01', 3) ]); $transactions-&gt;save($transactionsList); // Add some rates $ratesList = new Collection([ new \Models\BonusFunds\Rate($this-&gt;member_id, '2016-01-01', '2018-01-01', 4.5, 'manufacturer1'), new \Models\BonusFunds\Rate($this-&gt;member_id, '2017-08-01', '2018-08-01', 3.5, 'manufacturer1'), new \Models\BonusFunds\Rate($this-&gt;member_id, '2017-01-01', '2018-01-01', 4, 'manufacturer2'), new \Models\BonusFunds\Rate(402, '2017-01-01', '2018-01-01', 4.5, 'manufacturer1'), new \Models\BonusFunds\Rate($this-&gt;member_id, '2016-06-01', '2018-02-01', 1, 'manufacturer3'), new \Models\BonusFunds\Rate($this-&gt;member_id, '2016-09-11', '2017-09-23', 3, 'manufacturer3') ]); $rates-&gt;save($ratesList); Alright that was way long, and I'm not even sure helpful. Sorry for the long winded comment. Maybe you'll find some inspiration hidden in there somewhere for ideas on what you can do with your own setup.
Rather than publishing every time you get a new property and forcing all the subscribers to keep their own state, why not just query for that data when you need it?
One of the plugins could be leaking memory and causing OOM. I'd start by disabling third-party/non-Jetbrains plugins.
I installed today a csv plugin but I already disabled 
-Xmx is the JVM param for maximum memory allowed. Was that your only plugin? How large is the project you're working on?
It's a basic wrapper over an array. IMHO too basic. And BTW it does not implement `ContainerInterface`. Have a look at [this line](https://github.com/php-fig/container/blob/master/src/ContainerInterface.php#L19) and try to pass `new \stdClass()` as a key.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [php-fig/container/.../**ContainerInterface.php#L19** (master → 2cc4a01)](https://github.com/php-fig/container/blob/2cc4a01788191489dc7459446ba832fa79a216a7/src/ContainerInterface.php#L19) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dntlhgs.)^.
Yeah, somewhat similar.
You need to get the main idea over container. It's really a factory. Consumers ask `get(CustomInterface::class)` and get an instance without knowing details how exactly it was created and whether it's a singleton or not. Now back to your implementation. Imagine your container with 100 resources. All of them must be created during configuration phase even if a loaded page/route uses only 5 of them. The only solution to overcome this issue is storing a `Closure` which kills the whole idea of hiding instantiation. If you add support for `Closures` you will get something very similar to Pimple in terms of simplicity and performance.
File systems are made for storing files, I'd advise against storing them in a database. Backups with that many files are always going to be trouble, you could try a different file system like ZFS, then your backup job would be to take a snapshot of the current FS state and `zfs send` it to your backup target (where it can be stored as a single file or `zfs receive`'d so it can be mounted there. 
The "offset into blob" idea sounds similar to what Facebook did for their Haystack photo storage system. https://code.facebook.com/posts/685565858139515/needle-in-a-haystack-efficient-storage-of-billions-of-photos/
CDN with image metadata stored in the DB for lookup 
Yes this is what I did on another project, similar to what Twitter is doing too with their "blobstore" (that's the name of the solution), but as a distributed solution. Here the need is much simpler, I don't need to replicate on X servers in Y datacenters, just being able to restore the data in a few hours after a crash should be enough. So I was wondering if there was a simpler solution for a small project.
&gt; as most backup software is struggling to back them up [...] Also this is mostly an append-only solution I'd wager that a lot of off-the-shelf backup tools aren't geared for your use-case, and are instead acting like they need to detect arbitrary changes in arbitrary subfolders. If it's possible to give all of your images a unique ascending sequence number, then it's possible to target things more narrowly at just items N through M which were created since the last backup.
yeah not possible, files are named using their SHA1 hash to have a correct sharding and deduplication.
Do you need them images to be shown on the same page? If so, that would be great solution. 
Images could be shown on multiple pages, but the main use is one page with multiple images that are not used on any other page.
Let's not go engineering by meme dropping, but [engineering by facts](https://www.sqlite.org/fasterthanfs.html). File systems are made for storing files in specific patterns that fall apart at scale. Or OP would not be talking about "directory sharding", a concrete example of file systems failing at storing files (with adequate performance). - SQLite reads and writes small blobs (for example, thumbnail images) 35% faster than the same blobs can be read from or written to individual files on disk using fread() or fwrite(). - A single SQLite database holding 10-kilobyte blobs uses about 20% less disk space than storing the blobs in individual files. Now, are there any other facts to cancel or offset these facts?
Not to repeat [everything I said here](https://www.reddit.com/r/PHP/comments/73xst5/storing_millions_of_images_with_billions_of_views/dnu23dk/), but I strongly recommend a hybrid solution where you store small files in SQLite, and larger files directly on the file system. You can maintain an easy index that points to where each file is. Using custom blobs is only extra work and risk of errors - SQLite will take care of storing blobs, editing blobs, deleting blobs and compacting the file afterwards (when you want to).
So with this technique you will save a lot of http requests from the same page as well, which makes it ultimate solution.
But doesn't "offset into blob" solution will reduce the number of HTTP requests as well, and thus reduce the response time and overall server load? Ultimately making all files large.
We're discussing a storage mechanism for small images, not a transmissions mechanism via HTTP. I can't make blind assumptions if the other side is ready to parse blobs at offset or not. If the goal is transmission efficiency then we can talk about things like image sprites and employing HTTP/2, both of which solve the problem in a standard way that any browser, say, already supports.
I think this simulation better illustrates what is going on... you can clearly see you'll be right 2 out of 3 for every case you switch, but only 1/3 when you don't switch. &lt;?php // don't switch $dont_switch_wins = 0; for($i=0; $i&lt;1000; $i++) { $correct = mt_rand(1,3); $pick = mt_rand(1,3); if($pick==$correct) { $dont_switch_wins++; } } // switch $switch_wins = 0; for($i=0; $i&lt;1000; $i++) { $correct = mt_rand(1,3); $pick = mt_rand(1,3); switch($correct) { case 1: switch($pick) { case 1: $pick = 2; // doesn't matter which of the 2 doors was removed... either choice will be wrong break; case 2: $pick = 1; // door 3 removed... switch to 1 break; case 3: $pick = 1; // door 2 removed... switch to 1 break; } break; case 2; switch($pick) { case 1: $pick = 2; // door 3 removed... switch to 2 break; case 2: $pick = 1; // doesn't matter which of the 2 doors was removed... either choice will be wrong break; case 3: $pick = 2; // door 1 removed... switch to 2 break; } break; case 3: switch($pick) { case 1: $pick = 3; // door 2 removed... switch to 3 break; case 2: $pick = 3; // door 1 removed... switch to 3 break; case 3: $pick = 1; // doesn't matter which of the 2 doors was removed... either choice will be wrong break; } break; } if($pick==$correct) { $switch_wins++; } } echo "don't switch wins: $dont_switch_wins.... switch wins: $switch_wins"; ?&gt;
GlusterFS if you want a parallel network file system. You build gluster "bricks" on your various servers, and tell it how you want them arranged with respect to file striping and file replication. From the web server perspective, you are still dealing with regular files. Or Ceph, if you want a complicated architecture with daemons that monitor other daemons.
Well on the other hand, speaking on the certain case, Nginx will cache the most used images in the memory and serve them without touching the disk at all.
- Storage size: that's irrelevant to what Nginx does. Less disk space is less disk space. It's a good thing. - Performance: storing in RAM helps only if you have well-pronounced "hot-spots", i.e. small number of images requested frequently, as you can't store all images in RAM, obviously. We don't know OP's viewer patterns to decide this solution applies.
Yeah SQLite sounds very attractive for that I have to say. File size is 80KB on average though, so a bit larger than your example. I guess I would need to do a benchmark to find out if SQLite is still a good solution for that size.
Yeah no image sprites and http/2 would be nice but images can be used on multiple pages, and it is often only one image per page, so there would not be a lot of improvement there.
What I mean is I'd look for backup systems that "understand" append-only behavior, so that you can just feed them an explicit list (if not sequential IDs, then specific hashes) rather than relying on some default "crawl the filesystem and detect all changes" tactics.
A hint: MD5 would take less space.
&gt; it is often only **one** image per page but few comments above &gt; but the main use is one page with **multiple** images that are not used on any other page. Dude, make your mind at last?
Ah ah yeah both statements are true :) I have about 40% of pages with only one image, and 60% with multiple images. And in most of those 60% it's only about 2 or 3 pictures in the page, so HTTP/2 or sprites or other ideas like that wouldn't help much, especially as an image can be used on multiple pages.
Ah yeah that's a good idea, that's mostly what I do with rsync, I just tell it to ignore changes and only take into account new files, but it's a bit of a pain to have to manage backups separately for this project.
If these pages are on the same site, then a big image would be cached and used across different pages. 
Look into using Amazon S3 to store and serve the files. You would only need to keep records of the file details locally, not the files themselves. The pricing might be higher, but if you figure in development, maintenance and such, it's pretty damn good. Edit. Reread your post. Did not catch the cost issue. Am tired. 
So you don't actually need a server, VS acts like the server so you just need to put the php code in there. https://www.devsense.com
On some projects I've worked on in the past I've been storing upwards of many hundreds of thousands of thumbnails (Twitter scraper) and I've found that personally a database with blobs works well. In terms of backups if you store an updated time against your blob you could then run a query and use an incremental backup script to write your new small files, say 20,000 at a time, into a zip archive, which is massively more convenient to move about for cold storage. 
I found it kind of funny how they went all out with the variations.
Thanks for that interesting read. However, I fail to see the calculations converting the blob back to a displayable image. This, of course, depends on the programming language. But let's stick with PHP. I'm sure it is very fast when handling thumbnail size images, because - well - they're small by comparison. But what about images with proportions of UHD?
I recently had to solve the same problem for a news publication site, here's how i went about it. BTW they are very happy with the results. Use hard disk drives to long-term store the images, using nginx [Cache Placement Strategies](https://www.nginx.com/blog/cache-placement-strategies-nginx-plus/) to place recently accessed images on SSD's for a few hours, extending the cache time each time the file is accessed. In addition to storing more popular files in memory for a couple of minutes, resetting the cache time each time the file is accessed.
To make it faster you could switch from apache to nginx and enable ram cache on static files (images for example) this will result in the images being loaded into ram the first time they are requested, and after that they will load blazingly fast because they are fetched from ram every time, until you change the file or restart nginx it will load "slow"/from disk the first time. Then it does not matter what filesystem you use Putting them into blobs in a db will most likely be slower (my guess, did not test) I dont know if you can do this with apache, never tried rsync for backups will work just fine with this many files, or ZFS with snapshots
Maybe my proposal is more clear in [this comment](https://www.reddit.com/r/PHP/comments/73xst5/storing_millions_of_images_with_billions_of_views/dnu2awz/). Storing images in SQLite is only efficient for small sizes, not big ones, so I suggest big ones stay as files, and small ones go into SQLite. Now, what's a "big one" frankly I don't have a hard number for this. But let's say as a rule of thumb that less than a MB is small, and over a MB is big (adjustment may be required). In the real world one size rarely fits all, so solutions need to be implemented in "tiers" as the variables (in this case filesize) change. Luckily this doesn't mean working with those images should become complicated, because abstraction takes care of all those pesky details, i.e. you can have `$images-&gt;getByName('foo.jpg')` and receive a generic `ImageFile` instance that you don't even know where it's stored, but it has all the convenience methods you required to display/edit/delete it. BTW, there's no conversion/calculations with BLOBs to speak of. BLOB simply means "a finite list of bytes", which in the case of an image means the literal image contents as-is. So you'd be reading them and dumping them as-is for display in your HTTP (or whatever) app.
That's an excellent idea to extract images to a zip file for cold backup, thanks.
I don't have any problem with access times, just the limits of the filesystem with listing and backing up but thanks.
&gt; It's pretty dense to assume How is that dense? I didn't assume your code worked without other codes, but **you said** all that is needed is the source code you show on that demo-page. You said there is no other codes that make this happen. You said; &gt; every piece of code relevant to the demo is included inline on each of the pages... that's really it. Then I said; &gt; That's not it. You need to show the code that makes it work. Again, you said; &gt; That is all of the code that makes it work. So I tried it out. Doesn't work.
If this thread keeps going like that, GitHub might run out of disk space.
Hello. What good libraries can I use for url generation / url routing? I looked at Symfony Routing component, and looks good in terms of features, but I heard that symfony is not the fastest library. I also heard a lot about nikic/FastRoute, but from what I saw it only handles routing, but no url generation. I am more interested in a fast library for url generation, than routing. Thank you in advance for your help
No, you asked for an example on how to replicate your thing. I showed you an example on how it would be pieced together in plain PHP, in less code. &gt; I'm looking for volunteers to provide example solutions to replicate the demo
SlimPHP uses this one: https://github.com/nikic/FastRoute
Thank you for your suggestion. In my research for a url generator I have encountered Slim framework. But I search for a library to integrate in my project, not a framework. And nikic/FastRoute handles the routing. I search for reverse routing library, the process where I know the route, and want to generate an url for that route.
 if( ! $input || empty( $input ) ) is a thing. You always expect something like this in a PHP related flash mob.
I would suggest you to find a good Object Storage service. I can recommend you OVH's object Storage: https://www.ovh.com/us/public-cloud/storage/object-storage/ . It got triple data replication (files are stored in three different datacenters). Or you can try Amazon S3 or even Digital Ocean's Object storage: https://www.digitalocean.com/products/object-storage/
Since I'm unfamiliar with reverse routing, can you enlighten me, and give an example where this can be of use?
This doesn't seem like a sufficient guarantee that $input is empty, we need to expand this a little: if( ! $input || empty( $input ) || $input == false || $input != true || (int) $input == 0 || in_array($input, [0, 0.0, false, null, '', '0', []], true) || /* Check again because of race conditions -&gt; */ ! $input )
There should be isset() as well. It's essential after both `! $input` and `empty( $input )` verifications!
I think best explained is here: [https://symfony.com/doc/current/routing.html#generating-urls](https://symfony.com/doc/current/routing.html#generating-urls) My atempt to explain the request (based on Yii framework approach): In my application I need to generate URL based on routes. An example of route is /article-&lt;slug:\w+&gt;-&lt;id:\d+&gt;-page-&lt;page:\d+&gt;/ A router resolves an url to parameters, an example from https://www.example.com/article-php-is-nice-123-page-2/ resolves to ['route' =&gt; '/site/article/index', 'slug' =&gt; 'php-is-nice', 'id' =&gt; '123', 'page' =&gt; 2] from this point a call would be made to action 'index' from the controller 'article' from the module 'site' with the parameters slug, id, page A Url generator, or reverse routing as an alternative name which I found, is an inverse function: I need to generate an URL. I know the route and the parameters. How do I do that? Something like generateAbsoluteUrl('/site/article/index', ['slug' =&gt; 'php-is-nice', 'id' =&gt; '123', 'page' =&gt; 2]) # result: https://www.example.com/article-php-is-nice-123-page-2/ generateUrl('/site/article/index', ['slug' =&gt; 'php-is-nice', 'id' =&gt; '123', 'page' =&gt; 2]) # result: /article-php-is-nice-123-page-2/ The context: I work in a legacy project, I cannot use a framework, but I need to implement a library to : define routes and build URL for that routes. The routing/resolving part is handled by an .htaccess file, so I need only the url-generation/reverse-routing part. The Symfony Routing seems to fit, but I have doubts regarding performance. Also I want to know if alternatives exists. Edit: formating
I think the directory sharding approach you've described is good. I wouldn't move to a database solution or memory-based. I also think your backup should be programmatically run via cron jobs that zip and then move big groups of small images directories with rsync to long-term storage. I'm not currently aware of a solution that does this, so you may have to have a developer do that for you or do it yourself. The way I'd set it up is to have a program that tracks the current file position in the directory structure and have it back 5-10 sets of 50,000 images at a time or so (might go up or down depending on the size of the images and how long it takes to zip the files and move the zip). Then the next time the program runs, it starts from the file position that it ended at last.
Aha. And you needs those urls to present on a page (in a menu /overview or something) and you want to make sure they exist. Is it possible to generate them at the same time you configure the routes? 
Excuse me I don't have any answer but curious what's your project? Description is very unusual
I assume many developers are using PHPStorm or Intellij. There u can simply install the php unit plugin. This comes with support for prophecy autocomplete. 
Why don't you use the date for the directory sharding? Each day you backup only the previous day's folder content
It may well be that reading a small file from database is faster than reading the same file from file system, but if you factor in the cpu and memory overhead from calling php and connecting the database, from my experience it's always worse than just serving static file directly with nginx, unless you need to invoke php and read the file for this request anyway.
Or `($input ?? false)` for each instance of `$input`.
We're effectively guessing. We don't know if OP has authorization requirements for this content and so if they can serve it as plain files at all. Additionally we don't know what is their cost structure and bottlenecks, i.e. if they care far more about storage requirements than serve performance. Everything you're saying is relevant in certain circumstances, but if they need extra performance it's not as if they can't read SQLite data in just about anything, including raw C, and get that extra performance. They're not locking themselves in to a PHP solution just because SQLite is used.
In this spam article: bunch of bald-faced lies.
I would ask around /r/sysadmin, possibly /r/DataHoarder 
Archiving of product catalogues from stores specials to see evolution of prices of products between years. On dozens of stores, all other the world. But this would probably apply to any large online store too, except they would have budget for it I hope :)
As I said, cloud based solutions are way too expensive for that thing.
Yeah this is why I'm not so inclined in storing in a database, it will save me issues with the filesystem but may introduce issues with serving the files which is also important because the CPU is very limited (dual core Atom, stuff you would find on a netbook from 2011-2012). If I did use SQLite I would probably do a small C HTTP server on top of SQLite with nginx as a reverse proxy on top to limit the issues with that.
Good idea! Though I already have good ideas from this discussion though. Thanks everyone!
Not convinced about this one but it depends entirely what you mean by *duplication*. You should not have a unit test and an integration test whose test scenarios are the same. However, it certainly is fine that two separate scenarios cover the same code.
&gt; you want to make sure they exist. Better said, I want to generate URL's strings in a consistent way, and not build them by hand, adhoc. Keeping the aforementioned article example, in an Yii app i use (1) &lt;?php $url = Yii::app()-&gt;createUrl('/site/article/index', ['slug' =&gt; $article-&gt;slug, 'id' =&gt; $article-&gt;id, 'page' =&gt; $currentPage]); ?&gt; &lt;a href="&lt;?php echo htmlspecialchars($url); "&gt; instead of building an url "adhoc" (2) &lt;?php $url = '/article-'. urlencode($article-&gt;slug). '-'. urlencode($article-&gt;id). '-page-'. urlencode($currentPage); ?&gt; &lt;a href="&lt;?php echo htmlspecialchars($url); "&gt; Using an URL generator has (at least) 2 great advantages: * a consistent way to generate urls. for (1) It is easy to find where in all the application URL are generated for a given resolurce. I just search for "/site/article/index". For (2) I have to search for 'article-', lots of false-positives. For other routes it doesn't work at all to search. * if the format of the url changes, only the UrlManager needs to change. If I use the (2) approach I need to search in all the sources where urls are generated, and made the change &gt; Is it possible to generate them at the same time you configure the routes? In Yii and Laravel the routes are declared (and cached) early in the request life. That way when an url string is required to be generated, the Url generator already knows how to do it. Edit: format
Store then in s3 with fastly caching based on the file path. Use server for routing only. I think that's the cheapest solution. Just reread. Budget is zero, yet you want to backup millions of images on another system without any additional CPU cost on your current servers. I'd be curious if you actually came up with a solution... 
Maybe part of the solution should be finding a revenue stream so you can utilize solutions that are above (even if only *slightly* above) zero cost. That's just my two cents.
I have a similar project, though at a smaller scale, hundreds of thousands of images with millions of accesses. Our current solution is the same as yours. It's spread across 4 servers which are exclusive for serving the images with the metadata stored in the DB as there is validation about whether or not those images can be retrieved. We have a single "master" server (not serving images), which the four other servers rsync every other minute. It's far from the best solution, but it's all we had time to implement at the time. My long term solution that I've been considering is this: storing the images in cloud storage (for master) and caching the images in Redis or some other cache-like store locally, accessing the cloud storage only if the image doesn't exist in the local cache. This would remove the hard file-based solution and allow everything to be scaled more easily and flexibly.
What version of PHP are you using? From php manual : htmlentities() takes an optional third argument encoding which defines encoding used in conversion. From PHP 5.6.0, default_charset value is used as default. From PHP 5.4.0, UTF-8 is the default. PHP prior to 5.4.0, ISO-8859-1 is used as the default.
You have to define the connection to your database as UTF-8: // Set up your connection $connection = mysql_connect('localhost', 'user', 'pw'); mysql_select_db('yourdb', $connection); mysql_query("SET NAMES 'utf8'", $connection); // Now you get UTF-8 encoded stuff $query = sprintf('SELECT * FROM mytable '); $result = mysql_query($query, $connection); $result = mysql_fetch_assoc($result);
I've run into an issue with output buffering and `ob_clean` - for some reason it removes the content-encoding header. Simplest example: &lt;?php ob_start('ob_gzhandler'); echo 'Should NOT be shown'; ob_clean(); echo 'Should be shown'; Instead of the text 'Should be shown' it outputs ' ‹ ÎÈ/ÍIQHJU(ÎÈ/ÏXlç' because the content-encoding header was lost (happens on 5.5, 7.0 and 7.1, Apache and Nginx). The only reference I can find anywhere is [this SO question](https://stackoverflow.com/questions/43768383/php-ob-startob-gzhandler-with-ob-clean-error) which seems quite hacky. Is this a PHP bug? Is there a better solution? 
This. - Ensure you `SET NAMES 'utf8`. - If you're on Windows, ensure the file, within which you attempt to print the strings, is UTF-8. - If displaying it as part of an HTML page, ensure the meta charset is UTF-8. If you need to use `utf8_encode` or `utf8_decode` to correctly print the characters, something is wrong.
&gt; First, I have everything I can think of set to UTF-8. Looks like I am using different Google than you, https://www.google.com/search?q=php+mysql+utf-8 Why a tutorial from 2009? Why not from 1909? 1809? The older the better you know.
Bravo. You managed to compile a complete set of straw planes PHP users worship to. - the file encoding has nothing to do with a database output - meta charset is useless as well, it's HTTP header that matters - there is a dedicated function. mysql_set_charset(), that should be used to set charset, instead of running a raw SQL query
PHP's implementation of UTF-8 stores each character as 1-4 bytes, depending on the plane. Mysql has a stock utf-8 charset that stores each character as 3 bytes. Mysql also has a separate utf-8 charset, utf8mb4, that stores each character as 4 bytes. https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-conversion.html I don't know that will solve your immediate problem, but should save you some pain sooner or later.
Ok, so you want to host everything on your computer? THis answer is what you're looking for: https://serverfault.com/a/95454
After mysql_select_db, fire the following two lines and it will work: mysql_query("SET NAMES utf8"); mysql_query("SET character_set_results=’utf8′"); 
and the ambiguous return type. Done all of it
Fuck Delaware. 
I don't know if it solves your problem: ob_start('ob_gzhandler'); echo 'Should NOT be shown'; ob_end_clean(); echo 'Should be shown'; From the documentation [http://php.net/manual/en/function.ob-clean.php](http://php.net/manual/en/function.ob-clean.php) &gt; This function does not destroy the output buffer like ob_end_clean() does. &gt; &gt; The output buffer must be started by ob_start() with PHP_OUTPUT_HANDLER_CLEANABLE flag. Otherwise ob_clean() will not work. I tested your code and the behavior you described happent to me also. I have changed **ob_clean** with **ob_end_clean**. With **ob_end_clean** the buffer is cleaned, and only the 'Should be shown' text is displayed. I never used **ob_clean**, only **ob_get_clean** and **ob_end_clean**
[Hi I'm in Delaware.](https://youtu.be/TK_FiRm6ZK8)
Sounds interesting and challenging. Good luck!
Stop backing up at file level and start backing up at block level... ie: backup the VM.
I think there are no solution which can help without both time and cost. You must invest time to install, manage an open source solution (take time) or you could just throw money into amazon s3 or similar cloud services
That works, but it removes the buffering entirely. I guess I can follow with another `ob_start('ob_gzhandler')` but again that'a a bit hacky. I'm still unsure whether this is expected behaviour or a bug in PHP.
This is such a great idea , damn
However, a solution (such as a SQLite database) built on filesystems like ZFS or BTRFS would benefit from block-level snapshots, with an append only workload being very efficient for doing an incremental backups via `send`. 
It's a neat thing, but questionable how valuable it is for OP. Incremental backups tend to be quite efficient as-is already, you can check how rsync works for example, for incremental sync. Snapshots are again, a **very** neat thing, but does OP need to maintain multiple snapshots? It wasn't mentioned I think. Also if it were me, personally, I'd probably have an event-sourced workflow for those images (probably, not 100%) and if that's the case, the incremental backup logic (at application level) literally writes itself.
I don't think many snapshots are needed, just to store the latest backup or two. Isn't rsync less effective at small file sizes (since it works at the file level and needs to compare the two copies)? 
If you are using fastroute you can wrap it to add named routes and then do url generation for those routes. I wrote my own and used [nikic's example](https://github.com/nikic/FastRoute/issues/66) from this thread as a starting point for the url generation. There are a lot of fastroute wrappers but I didn't find one that added url generation and named routes without pulling in a ton of other stuff I didn't want.
You really should prepend these statements with "The SQLite Team claims..." before you can call them facts.
uh... the demo is live... anything replicated would also be live. it's ok that you can't do it. not everyone can. you don't have to make excuses. 
but wait... i said all that was needed was the source code. why did you bring a computer into the mix? **i never said** to bring a computer into the mix. it's ok that you failed. pull yourself up, and maybe one day you'll finish something you set out to accomplish. that is, if you can get over this being completely dense thing.
I will read the article. Thank you!
They have benchmarks you can confirm yourself, that helps me call them "facts" with sufficient certainty.
I'm immediately skeptical because of the relative variation in the speed of direct filesystem reads between tests where the methodology of filesystem reads is unchanged. It means they haven't controlled their external environmental conditions well.
Hey man, you asked for comparison. I gave you a comparison with plain PHP. If you ask for feedback from the community you shouldn't be upset when someone gives you that exact thing. I told you that I could replicate what hash-tag does in about the same amount of code (even maybe less work depending on your configuration files and all the stuff around hash-tag). Even though I said I wouldn't provide this example I came through. You still have not shown the source behind hash-tag (the code that makes your example work) - so we have nothing to compare too. It's your turn to prove to me that hash-tag framework consists of less lines of code than my example. You don't have to take this defensive approach to arguments in comments from the community. I get it, you may have spent a long time on your beloved hash-tag framework, and it was probably good experience for you. Defensive "aggression" in comments online though is in no way a good thing. It only implies that you as a person have a very hard time accepting critique and maybe even cannot see past your own ego. You have to be willing to accept input. We're not doing this to be hostile, we're doing this so that you and everyone else can learn from it. This even applies to me. Final note; &gt; i never said to bring a computer into the mix. Neither did I. I wish you the best in the future, I'm done with this discussion.
would you like to compare lines of code in the operating system i'm using on my server? your denseness abounds. i get it... you can't do it. it's ok. you'd rather write 100s of lines of nonsense, claiming that you could do in no time at all. i get it. it's a defense mechanism. it's ok. you can still try again if you'd like... it wouldn't be the first time you said you were done and then came back. #dense
Old but gold, thanks for reminding! :D
Also, their own benchmarks have this caveat in them: &gt; By default, kvtest runs the database I/O measurements all within a single transaction. Use the --multitrans option to run each blob read or write in a separate transaction. The --multitrans option makes SQLite much slower, and uncompetitive with direct disk I/O. This option proves, yet again, that to get the most performance out of SQLite, you should group as much database interaction as possible within a single transaction. Basically unless the usecase of an average user is to request/replace multiple images in one go, it can be faster to do them from the filesystem. Being able to group database interaction might be impossible in his usecase, which is where all the 35% speed increase seems to come from.
I can offer [Aura.Router](https://github.com/auraphp/Aura.Router) as one option.
LOL gotta admit the first few posts came in handy at my last job
Thank you for the suggestion! I will take it into consideration.
&gt; you can't assign public variable values I ponder if you can make a call to __set? In fact, you can: https://3v4l.org/cGlHs So it should be possible?
 ini_set('allow_url_include', 1); // does not work has to be set in php.ini file directly, apparently (php 7.1) include('https://gist.githubusercontent.com/maxrice/2776900/raw/62861547aab23237de5fb2a13a38b52bf165f8cc/us-state-names-abbrevs.php'); var_dump($us_state_abbrevs_names); 
Why don't you use a simple approach and append images into a single file, each new image gets added at the end of this file, while you keep the filename, offset and image length on a database? Whenever you need to serve an image simply copy the byte chunk into a temporary file and serve that file. Because you're doing mostly reads, not writes (unless when appending new images) you can probably have thousands of concurrent reads simultaneously without file lock problems. This would also solve in part your backup issues. 
Try borgbackup too, it is quite good. Couple million files that I backup it does an incremental on them in 5 mins. Intel Atom right? Hella slow cpu and backups / hash verifications / compression sucks for CPU. Think about cpu upgrade.
- Not anywhere did I mention the importance of the encoding of the file that extracts the database contents. I specifically said the file within which it is printed. I.e. after having been extracted from the database. I take you've never been trolled by UTF-8 BOM and the like on Windows. It may prove it's actually not the database causing the missing characters. - Whether it's a `&lt;meta`&gt; tag in `&lt;head&gt;` or an HTTP header doesn't really matter. My point got across. You're just nitpicking for the sake of an argument. - [mysql_set_charset](http://php.net/manual/en/function.mysql-set-charset.php) - are you for real? Kind of a douche reply, to be honest. And strong red herring logic.
Won't your OS do this for you already? I know my file servers all have **huge** amounts of RAM dedicated to "buff/cache" when I check `free -h`.
What about [FileNotfound](https://thedailywtf.com/articles/What_Is_Truth_0x3f_)?
Try using the new emojis, like 🇨🇱. If they don't work, change "utf8" to "utf8mb4"
&gt; It may prove it's actually not the database causing the missing characters. Exactly like I said - just scary tales for children which you neither can confirm or even understand :) There is absolutely nothing mysterious or "trolling" in BOM, its behavior is plain and simple, and has nothing to do with database stuff. Your other claims are equally helpless. You need to read less tales from unsuspecting users and get more own experience. 
I wish I had gold to give because I think this is the best solution to my problem. I just started playing with Virtualmin after reading this and if I can get my security concerns down, then this is likely the best way to manage my web assets. Thank you very much u/petraeus81 
What I would use is Symfony with Sonata Admin. It can make quite decent admin page to edit any tables. 
I'd probably be better off just calling `__call` to be honest for example: https://3v4l.org/kEIKJ
You might want to take a look at [bolt cms](https://bolt.cm/) From the site: &gt; Bolt is an open source Content Management Tool, which strives to be as simple and straightforward as possible. It is quick to set up, easy to configure, uses elegant templates, and above all: It’s a joy to use. 
No SSR. No thanks.
If you're into Laravel, you should check out [October CMS](https://octobercms.com/) From the site: &gt; October is a free, open-source, self-hosted CMS platform based on the Laravel PHP Framework. A simple and modular CMS that grows with you, with a precise and beautiful interface that comes as second nature.
Yii2 has a CRUD generator.
Please don't use the deprecated family of mysql\_* functions, but use e.g. mysqli_* instead. From [the docs](http://php.net/manual/en/function.mysql-connect.php): &gt; This extension was deprecated in PHP 5.5.0, and it was removed in PHP 7.0.0. Instead, the MySQLi or PDO_MySQL extension should be used. [Choosing an API docs](http://php.net/manual/en/mysqlinfo.api.choosing.php): &gt; It is recommended to use either the mysqli or PDO_MySQL extensions. It is not recommended to use the old mysqlextension for new development, as it was deprecated in PHP 5.5.0 and was removed in PHP 7. 
Don't use `mysql_*`, it's been deprecated long ago. Use `mysqli_*` or PDO instead.
I have a simple rule: I don't use mocks. I *do* use test fakes, but not of the kind "expect... once... method... X... return... Y". I strongly believe that tests which specify dependencies like this are not only cumbersome to write, but also very brittle and very low quality as tests. They are intimately coupled to the way the tested unit uses the dependency, and every attempt at flexibility causes the test to fail. That's not what a test should do. It should test contracts, not transient implementation details. If you have dependencies in your units, you need to implement a test version that operates like the real thing, but eliminates unwanted side-effects. For example let's say you have a FileSystem dependency. Instead of instructing it what call to expect and what to return, implement InMemoryFileSystem once, which acts like the real thing, but uses plain PHP arrays and strings for storage. Then feed it the files you need for the test, and tada... your tests are now better and shorter. The benefit of such test objects is that you implement them once, and then use them for all tests, unlike mocks. So while it may be a bit more initial effort, it pays off countless times as the number of your tests grows.
Please don't use the deprecated family of mysql\_* functions, but use e.g. mysqli_* instead. From [the docs](http://php.net/manual/en/function.mysql-query.php): &gt; This extension was deprecated in PHP 5.5.0, and it was removed in PHP 7.0.0. Instead, the MySQLi or PDO_MySQL extension should be used. [Choosing an API docs](http://php.net/manual/en/mysqlinfo.api.choosing.php): &gt; It is recommended to use either the mysqli or PDO_MySQL extensions. It is not recommended to use the old mysqlextension for new development, as it was deprecated in PHP 5.5.0 and was removed in PHP 7.
I recive 404 not found, any suggestions?
What I really want is Swift-style named parameters. It'll save a *whole ton* of writing Builders and so on.
Wordpress.org
About to dive back into frameworks after 4 years of not using fully fledged frameworks and honestly it's looking like my only options are: Symfony, Expressive 2/Zend or Laravel. Can't really put my finger on it, but Cake &amp; yii2 just feels dated in ways that I can't express right now. Like for instance yii does this weird thing w/ behaviors by sticking them in the controller class directly and I guess that's easier to deal with than having say a file tailored specifically for behaviors. Something about that just seems out of place, but it's right in the center of the controller classes. Then there's a lot of weird configuration things in cake that I don't like. For cake it's things like `loadComponent` and `loadModel` right in the controllers. That's just strange to me personally, I mean even back then when I wasn't fully committed to SOLID it always pushed me away from CakePHP. Some of the upcoming frameworks like spiral or opulence are cool, but again another configuration taste thing that I don't like about certain aspects of those frameworks. Maybe I'm just too damn picky, but yeah.
your web root directory should be added to your include_path. this should already be done by your webserver, but maybe you are saying the /root/ directory is actually /web_root/root/... in that case you'd have to also add /web_root/root/ to the include path. then you would just use include('header.php')... this might already work, so you should try that first. [PHP - set_include_path](http://php.net/manual/en/function.set-include-path.php)
It's quite complex actually, but it's the simplest OP will get with custom repeatable fields.
This is /r/php, not /r/webdev But if you want simple-simple + 'custom fields', just grab a regular cms like wordpress and look for a "custom fields" plugin
Actually I found this useful. I also think that perhaps my issue is not PHP. I can load my headers file without the ../ but I still am not loading the javascript or css. Its as if I need an html equivalent of php's include_path function to load the scripts and styles.
Seems good enough, thanks!
Yeah, standalone would be easier and faster, but thanks.
Have fun building stuff 👍
That's more complex than bolt though... I'm referring to OP's description of "very small and minimal". On a technical level bolt's neither, but you won't find one that is with OP's requirements.
Oh hey, that's me. https://gist.github.com/maxrice/2776900#gistcomment-1652570
Ooh, I figured out a solution, from here https://stackoverflow.com/questions/12432913/how-to-use-relative-paths-for-included-files-such-as-css and then I just set the php include path in my global or header file and then set it using $_SERVER[''] Then from there I can use your solution on top of it inside the folders to include the php. Thanks!
I spent a long time looking at smaller CMS's to use instead of Drupal 8. I ended up choosing Grav https://getgrav.org/ and it's brilliant. It's designed in a very elegant way and runs extremely fast. No database, but not a static site generator. You basically have a twig template for layout and a markdown file for content that also has yaml 'front matter' like Jekyll. I highly recommend it. 
Just trying to help. The answer to most of these kind of questions is "it depends..." or "what are your skills". Not wanting to start a cms flamewar of "the best cms out there", i gave 3 options (bolt, october, wp+plugin). Summary: (S)he asked a question, i gave 3 possible solutions. "It depends..." is a great answer, but not a solution to a quick question.
ProcessWire, it's like if custom fields were turned into a CMS.
Statamic is awesome, easy setup and has lots of custom field options. You'll need to by a license though ($199) https://statamic.com/
We're going to need a bit more detail on this before being able to answer well. What kind of updates are you talking about and why would they run on "each page"? As it is, all that I can say is that each database call is a call to an external system or process, so it's faster to make one call than many. That said, trying to condense everything down into a single call could be murder on the maintainability of your code.
That's what you get for a €5 dedicated server, so no possibility to upgrade the CPU :) All things considered it is doing very well, it is also used for a couple thousand of other shared hosting websites as well.
Not a VM, but thanks.
Just throwing money at problems doesn't give me any fun :) and I don't want to host any data with "cloud" based solutions as they are mostly proprietary solutions and lock you in with that tech.
I welcome donations sure :)
yes, it is common, but generally where "several" means 100s... not really sure how many update round trips you're talking about, or how transactions fit in.
There is no way you can fit all the images into RAM, and we are talking about millions of images being requested every day, so there's not really a pattern of only some images receiving a lot of traffic, so not very useful. Also Apache is fast enough, nginx wouldn't solve anything at this point.
This is already what is done (directory sharding) as explained in my original post but thanks.
Can you do unencrypted backups with borg? Couldn't find it last time, that's why I didn't try it.
Regarding Yii and Laravel, here are my two cents: Regarding Yii: I work with Yii1 and I am content. For a framework it is robust, no-nonsense features. reliable. My coworkers tells me that Yii2 is similar . Behaviors are more like traits binded to an object at runtime. Quite useful in a few situations. Url management/routing is a charm. Regarding Laravel: Mixed feelings. I started with high hopes to work in a project based on Laravel (5.x). I liked the validators. Very nice to work with, better than the ones in Yii. After a while, A lot of things started to bother me working with Laravel. Routes are a pain. For every request a dedicated route has to be declared. After a period it becomes annoying and mundane. ORM is nice. Blade template is totally useless, I did not understand why a template system is required when php is a template system itself. All-in-all Laravel seems to have lots of bells and whistles but not a decisive feature to convince me. If I had to chose a framework for my next project I would chose Yii2
Yeah that was my idea, that's the concept of a "blob store" actually. Another idea would be to create a sparse file and mount it as a loopback, and use it for storage. You would get the performance benefits of a local filesystem, and could back up a single file, and as it is append-only the filesystem image wouldn't change too much. Eg. http://www.anthonyldechiaro.com/blog/2010/12/19/lvm-loopback-how-to/
This is a terrible, terrible idea. Not only will this be very slow, you are executing code that could be changed at any time, potentially to something malicious.
PHP 5.3 was EOL'd in *2014*.
*precisely* When states are renamed, like when Iowa moves to California, no change is needed: The gist will be updated, and your states will transition automatically. This is the perfect state machine. Plus I don't need the web to add something malicious to my code, I even do it unconsciously. Proof: my users find new bugs all the time!
Start as a junior developer 
if u dont have worthwhile input then just dont answer
PhpStorm does this: [Docs.](https://www.jetbrains.com/help/phpstorm/creating-imports.html)
asking how to game the test process isn't going to be helpful either... either you know your stuff or you don't, and no matter how much you study, if their test is built right, your actual skill level will shine through. for me, having the test is a giant red flag for the company. they are already treating you like a cog, and passing you off to a machine to evaluate you. can i ask what company it is?
Your edge case sounds exactly like what I need! I wish I didn't need it... but that's old enterprise data for you. 
Looking forward to trying this out!
Haven’t used Travis-CI in a while. Do they support Docker? If they do, you can set up a container with an image containing PHP 5.3.
As a lover of SQL, sell me on an ORM…
Oh my god...........
no i better not but i agree with the cog thing. I also agree if u know your stuff blah ... i'm only asking the question as i say cos im rusty - i've been doing JS for the past 12 months and Laravel the prior 12 .. so i think its natural to get that way - just figured some nice people might have some resources but not sure why i bothered cos clearly everyone is so nice
No preparation needed. Writing the tests comes first ;)
5.3 is dead
I'm a lover of SQL too, and have worked both with and without ORMs. Even so (quoting myself from an earlier Atlas announcement) ... &gt; Instead of an Active Record implementation, or Doctrine, I figured that it would be enough to use a Table Data Gateway on top of Aura.Sql and Aura.SqlQuery to retrieve rows, then map the rows over to domain objects. This was fine, for as far as it went, but the problem was “relationships.” Oh dear Codd, the relationships. &gt; &gt; Selecting one or many objects from a single table was no big deal, but doing multiple selections from multiple tables and building up the selection statements for those relationships was a tedious, tiresome, and time-consuming burden. (Wiring them up in memory once they’d been selected was not too bad, given Aura.Marshal, but it was still more effort than I’d’ve rather been expending.) &gt; &gt; So it all “worked,” but it was just not satisfying at all. The DDD portions, for their part, worked out great, as did the separation of the domain layer from the persistence layer, so I was pretty sure I was on something like the right track. You can read the rest at &lt;http://paul-m-jones.com/archives/6568&gt;.
Whether you can or not I don't think you should.. On the off chance somebody makes an inline-assignment and check the last thing you want is to return something entirely different than what they expected.
well, geez... i just realized i've been posting all over trying to get someone to write a php solution for a simple demo I made. [previous reddit post](https://www.reddit.com/r/webdev/comments/73d00i/demo_random_chance_activity/) are you up for it? 
Which plugin you have in mind? I only know https://plugins.jetbrains.com/plugin/7722-phpunit-autocomplete-assistant and it’s old, unsupported and has no Prophecy support.
To hell with wordpress. Way too complicated for my taste, standalone CMS is is simpler. Bolt however seems good enough.
What do u need
"PHPUnit Enhancement" is a fork of that old plugin, but it only works with immediate references, that is it's not working when prophecies are inherited (https://github.com/Haehnchen/idea-php-phpunit-plugin/issues/24), and it doesn't work with closures.
That depends on how much RAM you have.
OP was using mysql_* in his code, and i gave him the answer to solve his problem, in his code. not the best practice. You should also really use PDO, not mysqli_*
Happy hacking! If you get stuck, feel free to drop in on our slack channel (https://slack.bolt.cm/), and we can surely help you out! 
Awesome, will do! 
Thanks for the recommendation of Bolt! It always warms the cockles of my heart, when I wander into threads like these to see Bolt already mentioned! &lt;3
Are the images just displayed in a website? Use sprite sheets to bundle them together and minimize requests.
Yes, but all the tests are actually failing. 
Is there a real beginner-friendly docker tutorial? 
If you just run it at the end of the page, you ignore the possibility this update might fail, or cause a correctable error you can fix in context, but you'll have no chance to correct out of context. If you're aware of these limitations, what do you is called "write-behind" and it's a very common technique about doing writes in general. Read about its pitfalls, too, some of which I mentioned above. It's probably most suitable for "side" information not central to the application domain, for example logging.
Depending on your database schema, it might be better on way or another. The best way to answer your question is to benchmark both queries in your current situation. By definition, smaller is faster. 1 UPDATE vs X UPDATE.
You could redefine the `__DIR__` constant in your `header.php` file and then use that. So something like `define("ROOT", __DIR__);` then just use the `ROOT` constant wherever you include or require things.
You might want to check out a headless CMS. They provide all the back end content management stuff without forcing you into a templating style. They expose an API which you consume yourself using PHP. There's a thread here of someone looking for a PHP headless CMS. You might find it useful. https://www.reddit.com/r/webdev/comments/6cnbj5/headless_php_cms/
&gt; Whether you can or not I don't think you should I agree, it was more an idea to show that magic methods still work. [The Parent then made one that uses __call](https://www.reddit.com/r/PHP/comments/73pmkp/php_weekly_discussion_october/dnuyolt/), which is about as good as it'll get for adjusting public variable values. 
Until the server is down during the cron period and you miss a day.
You guys are so incompetent you forgot to link to your site in your own spam. What a great testament to your abilities.
I was looking at the docs: &lt;?php $success = $atlas-&gt;insert($thread); if ($success) { echo "Wrote the Record back to the database."; } else { echo "Did not write the Record: " . $atlas-&gt;getException(); } The `$atlas` object stores the last exception in its state. What about returning an object containing insertion information (status, exception) ? It would allow processing insertions results later. 
TL;DR: betteridge's law of headlines strikes again, so no. But yes, realpath cache is actually a huge issue, and it's why we moved away from using symlinked deploy directories. I did discuss this issue with/u/SaraMG at a PHPNW a few years back, and we did express surprise in PHP for not checking the inodes(? I think. It was a few years ago!). Something that might also resolve it is a graceful restart of php-fpm; graceful allows in-progress requests to finish before cycling the child out, which should reset the realpath cache (as it's per-process as you noted). 
&gt; Atlas lets you open and manage transactions across multiple connections simultaneously So basically it presents operations that are not atomic as atomic? If I'm getting this wrong, please correct me. Coordinating transactions across connections is a **very** complex problem (it's effectively implementing distributed transactions) and I assume /u/pmjones is aware of this and not just brushing up the possible race conditions and inconsistencies under the carpet. 
That is what i meant. Thanks. Didn't know of the inheritance problem tho. I don't even use this kind, that is why I didn't notice it ;) But anyway this is pretty good plugin to use which solves most of the "method" problems. I can see your effort in there to get the IDE to recognize every method. But I am not a huge fan of writing a wrapper for a framework, only to get the IDE "green". Besides that, wasn't it possible to integration your changes into prophecy directly?
&gt;billions of views &gt;zero revenue You fucked up.
We talked about that solution in the article; quote: &gt; [an atomic deployment strategy] could be reached for example using containers or more simply using a new isolated PHP-FPM memory pool for each deployed release. The last solution requires at least double the amount of memory, to keep more FPM pools up and running at the same time. In our case this was really not feasible since we have a big single pool of FPM workers on each server, shared between multiple projects; each deploy of each project would trigger that cycling, creating huge issues in resource consumption.
You know that some people are not interested in money and bombarding peoples screens with shitty ads but just want to have fun in life right?
You know some people just go on the Internet and lie, right?
On your last point of using the Apache mod_docreal module to resolve the canonical path to the current document root from a symlink can also be done with Nginx very easily in more recent versions via the $realpath_root variable. E.g. https://github.com/magnetikonline/nginxconfsnippets/blob/master/conf/phpfastcgiparam.conf#L12 Being able to pass a canonical path to PHP when doing symlink release switching basically makes your relapath issues vanish. 
I'm also curious.
If you look at the bottom of the article, we suggest the same ;)
Sounds good, I'll give a try soon !
Only skimmed the article, so apologies if I've missed something but: If you don't want to restart php-fpm on each deploy, then install this on your server(s) (https://github.com/gordalina/cachetool) and fire off an `opcache:reset` after you've updated your symlink. Been using this for deploys for a long time now with no issue
So you have! 
When using this tool and firing that command, what would happen to any worker that is still processing a request? BTW, it seems like a nice solution, but still not feasible for our specific needs, since we have multiple separated projects on the same server/pool.
We are also using symlinks, have the proper server config and I would like to emphasize that for every include/require \_\_DIR\_\_ . "/../whatever/x.php" should be used, never a relative path. :-) Also I'm not sure ln -sf is doing an atomic operation, at least when I developed our deployment system 5 years ago I found that mv is doing atomic operations, so we are doing the following: ln -s "$NEXT_VERSION" "$TMP_SYMLINK" mv -T "$TMP_SYMLINK" "$LIVE_SYMLINK"
All currently processing requests are completely unaffected as far as I can tell. We're in a similar situation, have a relatively small number of servers with lots of applications on deploying regularly and independently. I've had cachetool in production for well over a year and never seen it cause a request to be dropped during deploy. The only downside you'll see is that you'll get a flushed opcache on every deploy - but does that really cause you a huge issue? All that said, I'd still recommend pushing towards containerisation in production anyway rather than sharing php-fpm instances (and everything else) between applications. That's a much bigger topic not worth going into here though. 
You could create tar files and then extract them on reads into a "temp" folder for successive reads. You can also "append" files to an existing tar. [appending file](http://www.gnu.org/software/tar/manual/html_node/appending-files.html) [extracting 1 file](https://askubuntu.com/questions/168795/how-do-i-extract-a-specific-file-from-a-tar-archive). For backups, you could gzip the tars.
Nope? What's wrong with php? It's still being worked on its not like it's a dead language. 
Is just a joke... 
IMO, that was a great joke. 
I enjoy writing php, but this is great :D
I'm sure that joke is made every time Pornhub post a job on HN. Seen it a few times.
Yeah I know. Long time php dev here. I built a thick skin for these jabs but they do chip away.
I think it's because it's often a starting point for new programmers, and as such gets associated with them. 
If PHP's bad old reputation is keeping more experienced programmers out of the PHP contracting market - as an experienced PHP dev who likes high hourly rates and doesn't give a shit about rep - suits me fine. Hipsters can have their latest "more correct" languages of the day and limited jobs prospects + more limited 3rd party packages, I'll have the dolla dolla bills yall. I've also got the development pace advantage when working on my own projects.
C++ isn't dead either but you have rust fanbois running around saying everything needs to be rewritten in their dogma. PHP's just been the whipping boy for too long and it's not going away.
It's a good joke and you are overreacting. Relax
Works in Mexican pesos, too. 
[There's also b2 for 1/4 of the price.](https://www.backblaze.com/b2/cloud-storage-pricing.html) There's a few other competitors around now too.
I still haven't switched over from attic, but was never a problem then. Seems like you can... borg init --encryption=none http://borgbackup.readthedocs.io/en/stable/quickstart.html
For a place that prides itself on not being reddit, it's an awfully reddit-y joke in terms of 'ol switcheroo' and repetition.
It's because a lot of developers used it once like 10-15 years ago when it genuinely *was* shit, moved on to Ruby or Python, and kept shitting on PHP because they're ignorant about the current state of the language. PHP still has some quirks and shitty areas, but come on people. It's like me shitting on nodejs because of the relative clusterfuck Javascript was 10-15 years ago. It's just stupid.
&gt; I built a thick skin for these jabs Looks like you built it with PHP
I think the problem with PHP is a few crappy programmers have made uninformed people think the language is insecure.
I have php apps 10+ years old that are still running flawlessly. It wasn't shit then and it isn't now. The problem is the new age of programmers think everything has to be object oriented or else it's worthless.
Experienced programmers know PHP is great. If it keeps the shitty ones away, that's cool. 
Do you seriously not see problems with the language? Do you use it on a regular basis? https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/ is five years old now, so there are some things that have been fixed (yay!). And there are some things in it I didn't agree with in the first place (while the shared nothing architecture is crippling performance-wise, it makes a lot of logic much easier and reduces bugs). But that's still the best summary. You shouldn't be able to ask "what's wrong with X?" for *any* programming language that you use seriously, because you should already know. But this is especially the case for PHP.
topkek
The funny this is that I hear these types of comments most often from the JS community. They love to trash on PHP. And I always say, "Every PHP developer in 2017 has to also be fluent in Javascript". We write both languages, so we write server side in PHP and we don't need 2.5million node packages to do it. Plus then we go write client side in JS just like the cool kids.
Just a shame they want on-site developers. I'm happy to write good PHP at another high-scale site. Oh, and I'm looking for a new contract. http://available.contractors/u/alister
PHP dev here, PHP just has a bad reputation. First of, PHP was supposed to be actually terrible at, and before PHP 4.0. It was meant to make your own homepage and not much more. Hell, back than PHP stood for "Personal HomePage" before it became "PHP Hypertext Processing" That was the past, though. PHP matured a lot since. But of course there are still choices made in the distant past that affect the language to this day. Like inconsistency in under_score and camelCase, the order of parameters, that kind of stuff. It's a flexible language which means it's easy to get started with it. Don't understand OOP principles? Fine, don't use objects at all, nothing forcing you to work with objects. Of course it's so easy to get started with that it's easy to learn bad programming behaviours that you'd want to get rid of later. Again an example is OOP. While I don't think OOP is the end-all-be-all of programming it's definitely a good idea to get used to it.
&gt; Like inconsistency in under_score and camelCase, the order of parameters, that kind of stuff. Yes, and even worse is the needle/haystack order in the various array functions. This is why if I have to write PHP code, I always pull in the Illuminate\\Collection class from Laravel to keep my sanity.
In addition to some very good advices you read here - here are my 2 cents: MAYBE you want to consider embedding thumbnails (only!) in the rendered html files (which should be cached in compressed form anyways). If caching a file is not important (because the users run like on instagram) or because they can cache the whole html file (some kind of "index of a photo album") so they don't need to cache a separate image it MIGHT be ok. &lt;img class="thumbnail" src="data:&lt;?php echo base64_encode(file_get_contents($thumbnail)); ?&gt;" /&gt; But be aware: It is not a general advice but a niche solution. ;)
pretty much
Some of those things will be in most jobs. Poor documentation is sadly common, but so is real version control. Development environments, even staging environments are something you should come to *expect*. Require even. Proper customer management, actual planning for version upgrades and general support from your company are not just inherent to PHP Jobs. Yes, there is a lot of bad architecture design, but not as bad as what you're looking at. What you've got isn't a normal PHP job. It's a bad job. That simple
Give the techniques in /u/pmjones 's book [Modernizing Legacy Applications In PHP](https://leanpub.com/mlaphp) a try. It goes through all the tools you need to untangle the spaghetti of a legacy codebase. If your boss OK with you taking the time to do things right and properly organize the code base with namespaces, auto-loading, unit tests and packages thus making it easier to work on in the future then things should be fine. Good luck!
Best advice I can give you is: don't look for jobs on Craigslist. If someone is looking for employees on Craigslist, that in itself should be a huge red flag. For a few reasons: 1. Craigslist is not a professional recruiting website. 2. Craigslist ads are usually trying to bargain, and you probably don't want a low paying job with the skills you've got. 3. If this company couldn't find anyone on LinkedIn/Indeed/Monster etc.., what on Earth made you think this was a good place to work?
If you can afford it - yes, walk away. 
The funny part of that is that both PHP and JS have these problems. PHP and JS have many problems to complain about. But they’re often the same. Consistency, problematic typing, limited and broken stdlib, unexpected behaviour, etc.
Could be great to have some async support for multiple api calls etc. Nodejs is eating PHP for new projects at my company right now because of that.
When someone insults PHP in a forum I just picture them naked. 
No - not all PHP jobs are like this. However, from my experience, a lot of jobs are like this in general. Talk to anyone you know in any professional industry and I am sure each of them will have a story of inheriting a nightmare project, finding out the company is poorly managed, etc. Unfortunately for those of us who are passionate about what we do, we soon find out that the vast majority of "professionals" clock in and out every day and do the minimum to get by. Since everyone is at different levels professionally, some people's "minimum" is so absolutely terrible that it makes you lose all hope. To make matters worse, some people hate their jobs so much that they do everything in their power to make it a real nice slice of misery. For someone like you coming in, eager to get your feet wet, inheriting a project like that can be a real discouragement. The GOOD news is, that there are people like you who at least seem to have some moderate interest in doing things properly. There are plenty of good professional developers out there and a number of software jobs with great managers and coworkers. I have been lucky enough to stumble across such a job and I know others who have as well. The right job can be elusive, but based on your post, you shouldn't have too much trouble finding something significantly better. The only way the job as you described could get much worse is if you had a coworker or superior hellbent on making sure you don't advance in your career. I am not saying to quit, but if you have the luxury, you should get the hell out of there. If you need the job, then your best bet is to take this as a learning experience, take some initiative and try to convince your manager that the entire system needs to be rewritten or at least rearchitected. Other than that, [Modernizing Legacy Applications In PHP](https://leanpub.com/mlaphp) as mentioned by /u/fatalexe has a lot of great reviews.
The issue is that most people compare frameworks (node.js, etc.) vs core PHP... It's like comparing a banana split vs a single banana.
Before contributing to a project I test the water with a simple PR and see how much time it takes to get a reply. I sent this: https://github.com/phpspec/prophecy/pull/363. I'd like to add `willReturnSelf()` too. Then, we'll see if I can push a bigger change :)
I see we're still posting that old ass link lol. I usually can't take people serious when they reference that link.
Nobody in my area even uses Craigslist, but I thought maybe I could find some seasonal work on there. So far my curiosity has driven me to follow through and go to the interview, and come back and do a few hours of work (which I've been paid for). I'm thinking it's gone far enough, though. Indeed/Dice/Monster here are all full of tech recruiter spam; very few of the jobs are real. Guess I'll spruce up my LinkedIn.
Sounds like a true challenge. If you succeed running this chaotic mess on PHP7, you're a hero. Any time on a big legacy project seems daunting at first. Dive into it and after a few months you'll understand how you can move little pieces into a clean architecture and slowly migrate the remaining source code. Every time you touch anything, just add unit tests to ensure the system will do what it's supposed to. Your velocity will be terrible at the beginning, and then it will slowly speed up.
I had seen the video but forgot about it! I'll give that a look, thanks! 
I just use an ide where I don't have to think about that stuff. Unfortunate result of not deprecating decade old stdlib. 
Yeah, the stdlib should really have been done something about a long time ago. The language itself is not that bad, it's the stdlib that is horrible 
With all due respect… it's a programming language, people joking about it doesn't really matter.
If I'm not mistaken the only reason they haven't deprecated it was because they didn't want to stop supporting backwards compatibility as PHP is fairly large in the web space and the amount of websites that would break as they stop supporting older versions of PHP would be too drastic. So it's a lose/lose situation, but PHP's reputation will suffer in the end even though the language as a whole is improving in other areas. What they need to do is start to develop a new stdlib going forward with version 8. Then slowly start to deprecate things out over time which would give developers time to update their packages.
Well, that’s part of the problem with PHP. Just the core java language has almost all I’d ever need – and adding dependencies is even easier. With PHP and JS, the core is entirely broken.
"There are no solutions, only tradeoffs." So, I tried a few different things, and that was one of them. You get a sort of counterintuitive interaction with the call: it returns nothing on success, and something on failure, which is very UNIX-ish but not terribly PHP-ish: &lt;?php $failure = $atlas-&gt;insert($thread); if ($failure) { echo "Did not write the Record: " . $failure-&gt;getReason(); } else { echo "Wrote the Record back to the database."; } FWIW, I consider the Atlas arch-class to be there mostly for convenience purposes; it encapsulates the common operation of try/insert/catch and captures the specifics of the exception for you. You can avoid that completely and inject the appropriate Mapper class instead of the Atlas arch-class, then call the Mapper::insert() directly, wrapping it in a try/catch and capturing the exception yourself. (It's extra repetitive work that some would rather avoid, but it is available.)
True. Thanks for the reply. 
Much like Taco Bell and diarrhea jokes, or when something doesn't ring up right at the register and you say "Haha, guess it's free then ;-)" Classic comedy
&gt; We all have this problem from time to time, at least I'd hope I'm not the only one, where you make a simple mistake that stares you in the face and you just can't see it. So you add echo and print_r/var_dumps everywhere Yeah, I think you need this: https://xdebug.org/
Spoiler alert: it doesn't keep the shitty ones away
Thats why when I write PHP code I just mix under_score and camelCase depending on which way the wind blows. Its the way it was intended. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Yeah, not every bug can be caught by an IDE.
&gt; NSFW but not if you get the job That was the funny for me. 
ITT : super defensive PHP developers
You are right! ln -sf is not atomic because it unlinks the destination and then creates the desired symlink. Actually we do this: ln -s new_release current_tmp &amp;&amp; mv -Tf current_tmp current
While I also use simple dumps and debug statements from time to time, XDebug isn't an IDE, it's a step debugger, and if you can find the problem with debug statements, you can almost certainly find it with a step debugger, often faster.
lol.. true.. but "hey, Java is shinier.. go over there!"
realpath_cache is not cleaned with opcache reset. In the post we show that we also have our cache issue with opcache disabled.
When I worked as a cashier, after the three millionth time that joke was said one week, I was ready to start killing people. Especially since half our shit didn't ring up properly so 95% of people would throw that joke out.
Honestly I never understood it. Javascript has just as many problems as PHP but no one seems to constantly insult Javascript. 
Find new, enterprise development that is being done in PHP. Legacy rewrites and updates don't count. That's the problem with PHP. New development is interested in new paradigms. Old development is happy to stick with its investment. Imho, v7 was too late.
I realize that, and Zend includes that within the IDE for both within the Zend Studio and externally via Zend Server. Sometimes it is just easier to add in some echos.
Sounds like the joke is on you.
Oh, many people do. I love to insult both, and Android too. Personally, I want consistency. If I can't write a fully working program on paper by hand, then it's not a good language. Of course I don't do that, but I don't want to have to rely on autocompletion for everything. And, honestly, I love Kotlin over everything else.
Thank god for that 5%!
What I usually say about PHP (vs JS), after I trashed it for fun is: PHP is the Anarchy Javascript hopes to be. In the end, we use whichever language is best suited for the job and within our grasp. 
You're talking about hard to detect errors? These all happened to me: * Code copied from somewhere else with invisible UTF-8 character that fucks things up, until you paste it in some editor that shows them, you go back and change your IDE settings to see the bastards * Typos you fail to detect until you ask help from someone and they instantly point it to you, and that's why books have copy editors * Typos in variable or property names that PHP won't complain about, and that's why you should not ignore E_NOTICE * Editing code in the wrong file, it might take some time until you figure out you're not on the right place * Using + instead of . to concat because you've been using JS too much and forgot you're on PHP now (that was the motivation for this RFC: https://wiki.php.net/rfc/invalid_strings_in_arithmetic) * Errors caused by crazy side-effects, which should not be a problem if you work with well-written code * Errors caused by different settings on the production environment, which should not happen if you...guess what....use the same settings everywhere (VM, docker, or whatever) * Errors caused by misunderstanding the way a library/language/framework works, like all the PHP gotchas, which should not happen if you have experience/RTFM
nothing, its just a joke, chill and enjoy. 
Karma farming is serious business.
&gt; Relax Telling someone to chill is generally a dick move.
"Sounds like someone's got a case of the Mondays!"
&gt;The problem is the new age of programmers think everything has to be ***object oriented*** or else it's worthless. I hate to burst your bubble but it's "functional programming" now, apparently that's the new future of programming. 
Not what you are asking, but stuff like this is the reason I'm getting more and more into techniques that allow those types of errors to be explicitly caught and explained in detail by an error message. Linters, contracts checked at runtime, more statically typed languages that transpile into less statically typed ones, etc.
Haha, I've had a few of those. I swear I've had that invisible UTF-8 character situation before. I went through the file letter by letter and couldn't get it to run. Typed it out in a new file, and it worked. I eventually labeled the troubled file "wtf" and moved on.
What is the benefit of transpiling - and what language to what? Seems that it would lead to bloat and ultimately make things more complex than they need to be.
I did say that it was old, and some of those criticisms are no longer valid. But many of them are.
&gt; I love to insult both, and Android too. Okay. I love to create things people will use, but to each their own I guess.
Oh, I love creating things, too, but when you write code and it suddenly stops working on an edge case that’s not mentioned in any documentation, you start going insane. Like, [the CSS opacity of an object affectings its margins](https://gluu.kuschku.de/dl/videos/chrome_bug_opacity.2.mp4), like on Android "ab".split("") (similar to explode in PHP) returning ["", "a", "b"] instead of ["a", "b"] *sometimes*, but not always...
So then add a cron status table and track execution by start time, end time, and even if you want to, add in a kill switch that the cron watches for at intervals. Next the cron runs, if there was an issue, it runs the oldest date not yet processed.
Why in the world would you use explode with no needle to make a character array, instead of just using the array index feature that all strings have in PHP?
It's a joke. I've been working with PHP since late 3.x and by god it's always been a heaping pile of shit. It's gotten a lot better - it's a mature language with a strong ecosystem - but it hasn't been for that long. It's always going to have that reputation. Furthermore it's extremely accessible to newbies, which makes a ton of bad code the first thing anyone sees. Learn to take a joke.
The benefit is exactly what I just described, seeing the details of a mistake in an error message instead of being confused by why something is not working. The most popular languages to transpile into are JavaScript and CSS. I don't know much about transpiling into CSS, but for JavaScript, Elm and TypesScript are both excellent choices. Elm will take you longer to learn, but they have made it as beginner friendly as they possibly can by making the most amazing error messages I have ever seen. With Elm, JavaScript errors at runtime will become a very rare thing, the compiler will almost always catch them for you. TypeScript will feel less strange if you are not used to functional programming, but it won't catch as many errors for you. Linters can have a similar effect. All of this is about getting detailed/helpful errors as early as possible, ideally in front of a developer before the code is ever run. It is better for errors to be seen in front of a developer than in front of a user.
After 5 years it's still mostly up to date. I can't take serious ppl who work with PHP and can't see it's flaws. I work in PHP most of the time, I am productive with it, still, I am dying inside from time to time. 
&gt; no one seems to constantly insult Javascript. What. You've seriously missed the whole "node_modules is so large u guys" meme? Or the "there's a new js framework out every day!" meme? I'm impressed.
Other advantages of Elm and TypeScript is that they transpile into JavaScript code that is compatible with most web browsers. This takes away some of the burden of being overly cautious about which JavaScript features you take advantage of. Elm has other benefits as well. It offers a time traveling debugger, produces JavaScript code that runs very fast, and the language naturally encourages good code design, just by the nature of how the language works. TypeScript produces really nice JavaScript code, and has excellent support in the VSCode editor. It is hard to get completely away from transpiling with JavaScript because usually you will at least want to transpile from a newer version of the language to an older one in order to improve browser support.
Well, as mentioned, the case was on Android, and yes, it has an array indexing feature, but I needed to specifically split it like that. And it just didn’t work.
&gt; I needed to specifically split it like that. This doesn't sound much like misbehavior at edge cases as it does like the developer doing things wrong.
:')
Starting a new role can be very daunting. Communicate your concerns with your employer. Based on their reaction you can make a decision. Most employers of software developers usually understand that it can take quite a bit of time to get up and running, weeks, if not months. Try to find out how many other people have been working on this and why they left (i.e. see if there are any red flags with this particular employer, if they bad mouth previous devs you probably know where the real problem lies). Make your decision to leave or stay based on the employer, not the code base directly. If the employer is cool then the code base is simply an interesting challenge. If you do decide to take on the role then start by trying to fix specific bugs, then ease into adding features, then consider refactoring if it makes sense. 
Telling someone to move a dick, on the other hand, is generally a chill move... I think? No, never mind me, I'm just in a bit of a sleep deprived state and I went to bed early and slept for a couple of hours but then woke up again and now I've been awake for about an hour and a half and I'm browsing Reddit even though I don't want to. All I ever wanted was... well, what does it matter. I'll go back to not being on Reddit and to instead be unable to sleep and so to be anxious about my life and stuff.
Specifically, in Java, there’s a difference between Strings and Characters. I needed an array of Strings (iteration gives you an array of Characters), and there’s several ways to make them, but with String.split they all point at the same location in RAM. The Java Spec specifically specifies how this should work, and that this works. It works on every Java implementation – except older Android versions
And that's where the irony is. These whiners complain about PHP as a bad language, and their alternative is Javascript. They think they are in any position to make fun of PHP lol.
Not just Java, but also C, C++, Go, etc
Great article thanks for sharing :)
Thanks, I didn’t want to get too detailed, but yes, that’s correct.
You would also need to use the `stat:clear` command.
I should mention, it's for Fair Haven Beach, a state park (and public phone number). No private information in the image.
"I wouldn't say limited job prospects + more limited 3rd party packages". What hipster eco-system are *you* talkin' about?
Really? (1) I *think* I'm an experienced programmer; (2) PHP has its merits, particularly regarding deployment anywhere (free shared hosting, here we come!) But "know PHP is great"? I work in PHP professionally sometimes (atm in fact). Adequate, yes; great, not the first thought to pop in my head.
No, Java isn't shinier. Just more robust. * Generics; * Concurrency; * Data structures beyond a simple array (lists, dictionaries, trees, sets, stacks, queues, etc.); * Real data types (including unsigned ints and longs in J8 and J9!); * Actual UTF support (ok, UTF16, but it's better than `char` arrays); * Collections; * A great standard library. People who prefer PHP over Java probably haven't spent enough time writing Java.
&gt; Don't understand OOP principles? Fine, don't use objects at all I just started a PHP project. It's to replace an existing PHP project. The author of the original code base took your comment to heart. It's a component for an OO PHP framework, but look ma! No objects! 3,000 line functions, with nothing but `case` and `if elseif then` statements. And more functions. Thousands of them. It's mind-boggling how he ever got it to work originally, and even moreso how he managed to avoid reading the documentation of the OO framework he built it on. So don't know if it's such a feature that you can write procedural code in PHP...
Damn it, I can't keep up. I barely understand OOP. (Learned C, used C. Love C. This newfangled OOP stuff is weird and feels unnecessary most of the time)
Wow that is just impressive in all the wrong ways! Sounds like he created a special circle of hell all by himself.
I'll give Groovy a crack, but the verbosity of Java is something that doesn't interest me in the slightest. Turns out I haven't needed any of the things on that list for the past ~15 years, though if the need arises it's nice to know it's available.
Sleep is incredibly important for your health. Protect it.
The "new age" of programmers that think everything has to be OOP coincide with the release of Java, which was 22 years ago (maybe minus the couple years it took to become the standard language in most undergrad courses..) Are you a COBOL developer?
If you can't name a half dozen ways PHP is a crime against humanity, you're not an experienced PHP programmer. That's not to say it's not useful, or that you can't make a good living off of it, but objectively it's a poorly (un)designed language full of weird edge cases and unexpected behavior.
Look at codeception or similar php testing frameworks. They let you use a fake mock db for such tests. Otherwise you would have a dummy db for the test build. It's not uncommon to see testing db credentials stored with the real db creds.
id probably make my test pull the data back out the DB using a query which pulls the latest entry to the db, then compare what should have been in each field to what was actually there 
You can use the `import` namespace feature in java (similar to PHP) to avoid giving the full path (i.e., `import static java.lang.System.out; out.print("Hello!")` instead of `System.out.println`. PHP 7.2 adds return types, so static typing of parameters and returns will become an expected code standard soon. That leaves Java's requirement of specifying visibility (instead of having a default, like PHP) as the verbose part of the language *vis-a-vis* PHP. I can't imagine not having the tools I mentioned available. I use them all the time. I know Laravel has a decent collections implementation, and list structures in client code are adequate enough for what PHP is most often used for, but lack of efficient BST's in the standard library is horrible. PHP has no good answer for supporting websockets, and that is the future of the web. Also, Platform-as-a-Service hosting significantly erodes PHP's "deploy everywhere" advantages.
https://www.google.com/search?q=codeception+mock+database shows a few things. 
The weird thing is that the guy who wrote it is now more successful than I'll probably ever be, and everything he does is nearly as bad. He had a small development practice and just bought out a larger shop in the ecosystem of the OO PHP framework the project's in. Life's strange. At least I have a clear conscience about the work I do.
JS was my fav Lang for a long time and I’d way rather build a large system with PHP on the server. No contest, unless I needed non-blocking or websockets or something
It's the world of programming. One mans legacy code is another mans full time job.
This probably belongs over in /r/softwaregore 
Reddit is not unique. 
Yea dude. I actually thought it was funny 
I think you missed the point. He is acting like using php was more embarrassing than telling people he worked at a porn site. If it were just a flat out rip on php, then yea, it wouldn't be funny. This was in jest. 
I didn't say it wasn't funny.
&gt; Editing code in the wrong file, it might take some time until you figure out you're not on the right place Hah, I've done this so many times. Generally when copy and pasting from an old file into a new one... then accidentally make my changes in the old file. Fuck. [This is helping with that kind of shit though.](https://www.dell.com/en-us/shop/dell-43-ultra-hd-4k-multi-client-monitor-p4317q/apd/210-ahsq/monitors-monitor-accessories)
 T_PAAMAYIM_NEKUDOTAYIM Ah, of course!
...wut? PHP jobs pay significantly less than those in other languages. This entire post is factually challenged.
I know that on average by language PHP pays less. Wasn't saying otherwise. &gt; I'll have the dolla dolla bills yall. I guess you're focusing on that bit? That was more in reference to a wider market in general, so therefore there's also more highly paid contracts that are easy to find. Also all the well tested composer packages at our disposal for web APIs and stuff like that means we can build more in less time, and charge more.
Have you tried a find with -m for last backup date piped to a zip command. You can basically backup all files modified since last date in 1 zip file. 
It's misleading to describe it as a "place that prides itself on not being reddit." Rather, it prided itself on having an unusually substantial signal/noise level. This was more true in the past, when the user base was smaller and more closely affiliated with the SF startup scene. My belief is that for those who are actively involved with startups, especially West Coast startups, there is a greater investment in high-effort commentary, because people felt they were risking (and investing in) reputation and publicity. Commentary about a topic is still sometimes dominated by those who have to deal with it professionally.
In theory you would be using PHP 7.2 and you'd be using libsodium, which basically chooses the algorithm for you and doesn't let you choose it for yourself. If you're curious, however, here are the algorithms libsodium supports: - X25519 (Elliptic Curve Diffie-Hellman over Curve25519) - Ed25519 (Edwards-curve Digital Signature Algorithm over Curve25519) - Xsalsa20poly1305 (authenticated symmetric-key encryption that performs well in software and doesn't have cache-timing vulnerabilities like software AES) - BLAKE2 (based on the SHA3 finalist that performs faster than MD5 in software but is more secure than SHA256) - Argon2 (password hashing and key derivation function) - SipHash-2-4 (fast hash for hash tables and similar data structures) - ChaCha20-Poly1305 (authenticated encryption with associated data) But that said, none of that is really that relevant with the libsodium API. If you can't choose the algorithm the question of which one to pick is never an issue. Here's the API for libsodium, described in detail: https://paragonie.com/book/pecl-libsodium If you're using older versions of PHP take a look at this: https://github.com/paragonie/sodium_compat Finally, if you're curious as to what the best algorithms _OpenSSL_ offers then might I suggest posting in /r/crypto and not /r/php.
It just have you haven't worked on the type of projects where Java is good. That's fine. But to not recognize that every tool has its place will just keep you in the dark. Java is far better for things like networking, concurrency, large complicated applications, enterprisey things, etc. PHP is typically better suited for your every day web applications. They're both just tools within the toolbox. They both excel at different things.
PHP can easily support websockets with Ratchet.
There's nothing in PHP that I feel is a major bummer or drawback. All the little nitpicky bullshit that everyone complains about (like argument order) is complete non-issues for me. People just like to complain about things that don't matter.
What language do you think is great, and for what reasons?
Not necessarily. Depends on the area, the market, the developer, the job. PHP also has far more opportunities.
And the funniest part is that the JS ecosystem is a cluster fuck beyond belief.
Except that's not really true. Nobody just writes web apps in vanilla Java. They're going to use some framework such as Spark or Spring. This is because the standard library isn't really suited for web apps. PHP and JS, on the other hand, are both easily capable of handling pretty much any web app problem right out of the gate. 
That's a shitty argument. Do carpenters build houses by breaking boards over their knees, or do they opt for tools to help them? But since you mentioned it, you must not be very proficient at PHP if you have to rely on auto complete.
They could just alias the functions to the direction they want to go. But honestly, a fork in the road such as the one python took would not be that bad of a thing.
The thing is, none of the shit in that list is actually a problem. No real PHP developer struggles with any of that. 
What "flaws" do you find yourself struggling with regularly?
Sometimes you have to pick the best language for the job. We have a lot of PHP systems, but it's not the best for aggregation with Hive/Hadoop. It has longer response times for some critical frontend systems, so we had to use Go. It's a pain to set up workers/queues and parallel processing. It is also much slower for some ETL pipelines, so they needed to be written in Go/Java. There are places for PHP, but you should also pick the right language for the job and the scale.
No, it has nothing to do with everything having to be object-oriented. That complaint doesn't even apply to PHP as it is object-oriented. A language's quality is more than just if it works or not. Brainfuck works, does that mean it's not shit? PHP is plagued with inconsistent APIs, broken functions that won't be removed because they will break backwards compatibility, and some really stupid implementation details. Also, why the hell does the error suppression operator even exist? Why the hell do we have `real_escape_string` and `escape_string` (hint: `escape_string` is broken) Why the hell are the string.h functions even in the standard library? PHP doesn't even have pointers in a way that API makes sense. Why the hell do I have to reference callables as strings? The language is full of utter nonsense.
I have the same issues with verbosity. Might want to check out https://kotlinlang.org/
Bashing modules and frameworks is not the same as bashing the language itself
You can now save anonymous functions to a variable and use that instead of a string function name. The documentation discourages @ error suppression and linter screams about it. Nobody escapes strings for SQL anymore. Always use binding and prepared statements. http://www.phptherightway.com/
I'm proud of php, don't need to hide it like Facebook hhvm "hip hop"
I just want to encrypt few sentences with my password and keep it. I just want to make sure that let say after few years I try to decrypt that encrypted string that cipher method should be available at that time. I am not trying to encrypt some enterprise stuff so I am fine with built-in cipher methods.
&gt; But since you mentioned it, you must not be very proficient at PHP if you have to rely on auto complete. Then list me which of the functions that take a needle and haystack have the needle first, and which have it second. If you are saying that every good PHP dev has memorized them.
&gt; PHP and JS, on the other hand, are both easily capable of handling pretty much any web app problem right out of the gate. Ehm, not really. Neither of them can properly handle localized date time problems with timezones, and that’s just one of the most simple examples.
When a stupid post hits some carma, lots of idiots with irrelevant comments can be observed in the discussion. Luckily, stupid posts seldom get any carma in this sub, so we can live it off.
Adding a second check to guard against race conditions in ZTS builds is a good call.
"There's barely a stdlib so js devs have to use packages for everything!" PHP and JavaScript are like two bullied kids in a class that takes out their anger against each other instead of their bullies. I've seen a lot of Node hate here, people calling js tech that's soon a decade old "hipster" etc.
Who cares if people think php is bad or good. Reality is that it's not going anywhere in the near future. Write code, get paid, have fun. 
Node is a server side runtime, not a framework
PHP handles timezones and localized dates pretty well out of the box. Just have to use DateTime, IntlDateFormatter and the related classes. I never had Timezone issues.
That's not knowing what Node.js is.
I would tell them it's written poorly, and that you could try to work on it but most likely would be extremely time consuming and unprofitable objective for the company. They could try to hire and expert, but unless the company is making tons of money from this code, it's probably not worth keeping or maintaining anymore. If they don't trust your opinion, that is a sign to leave. If they want you to try, and they are willing to be patient, and the company is very profitable and can suffer several months of lost time trying to fix this up, you could go for it.
I’m not sure what you mean? You insinuate that Node is a framework and it is not.
Password-based encryption is a little more advanced than what PHP gives you out of the box. Quick solution: 1. Grab https://github.com/defuse/php-encryption 2. See https://github.com/defuse/php-encryption/blob/master/docs/Tutorial.md#scenario-2-encrypting-account-data-with-the-users-login-password You can do something similar with [Halite](https://github.com/paragonie/halite). &gt; I just want to make sure that let say after few years I try to decrypt that encrypted string that cipher method should be available at that time. &gt; &gt; I am not trying to encrypt some enterprise stuff so I am fine with built-in cipher methods. What's your threat model? Do you care if other people can decrypt it too? * Yes: Use a library. * No: http://www.cryptofails.com/post/75204435608/write-crypto-code-dont-publish-it
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [defuse/php-encryption/.../**Tutorial.md#scenario-2-encrypting-account-data-with-the-users-login-password** (master → 4da32ab)](https://github.com/defuse/php-encryption/blob/4da32ab19b3211594fdde5fc856a24340ea85aef/docs/Tutorial.md#scenario-2-encrypting-account-data-with-the-users-login-password) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dnxkt0l.)^.
/r/PHPhelp Also, the answer is pretty much directly at http://php.net/manual/en/function.array-search.php in the Return Values section. In certain cases, however, `foreach` is actually faster and/or more manageable than a chain of `array_search`, `array_map`, etc. calls.
Things you don’t understand tend to seem unnecessary. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Good articles! Thanks for sharing.
Sounds reasonable. You have my vote there :)
There are some pretty ridiculous things PHP still does. Arrays still have no base library or something similar to laravel collections or I assume what every framework has to add. Like how does a language just not have usable arrays? And then on top of it, no shorthand anonymous function syntax still kills me.