Personally I prefer xhProf: http://techportal.ibuildings.com/2009/12/01/profiling-with-xhprof/ You don't have to use some other app to look at your caches, either.
most requested files get moved into system cache (memory) anyway same with queries getting cached by query cache (if enabled) but memcache is what you want to use.
&gt;Serving a static HTML file instead if a dynamically generated one is always going to be faster. this is certainly true on its face, however.. if he were generating the content and then storing the same contents (that would be in a flat file) in something like memcached/redis/etc. it can certainly be faster than the associated disk i/o. this is way beyond the depth of the poster's question, but i just wanted to expand on that for anyone else reading.
i think apache 2.2 uses it by default if it's available, but make sure whatever httpd you use is taking advantage of sendfile().. (this requires a 2.4+ kernel) the event model can make a big difference too (epoll vs. select) if you haven't already, a little sysctl tuning you can probably increase that static benchmark significantly
at the risk of being one of those useless*+1* posts.. &gt;Relying on code comments for functionality feels so wrong. I couldn't agree more. Let's please not make this a "thing". That is a terrifying use of reflection, imho. edit: to clarify I'm speaking solely to the idea of parsing docblocks to determine behavior.
you're already -3 before my reply, so since no one else has asked- why?
Depends on the query you want to cache to file. If your query mainly uses primary key lookup then there won't be a difference between file based caching and direct db querying. Say if you query has "GROUP BY" and "LIMIT" clauses and the result set very large then you will certainly run into trouble. In this case I will cache all the result set and split the results in to multiple files (say 100 results per file). And when rendering page I will read the corresponding split file rather than accessing db. If you are on *inx system then you can save your cache files to /dev/shm(every thing get's stored in RAM). And get same or faster access times. It mainly depends on how you are organizing data inside your cache files. On my employers site and on my personal site I have implemented page wise caching with great success. This kind of caching is great for dynamic sites which needs lot's of concurrency as there is always a limit on number of concurrent connections to a db. 
Awesome. I wonder if I can make it work on NGINX.
I got it to work fine with NGINX, I didn't use append thing, did it manually in my script, which is fine for me as I use MVC (so everything goes through index.php)
Yes, this is true. Also if the file itself and it's assets were served off a global CDN (something like Level 3 for example), it would be even faster. We're getting into high level/volume optimizations here though, which is probably overkill for what OP is thinking of doing.
Hi, I'm doing a mini serie about installing and using Xdebug with Eclipse PDT on Mac OSX. Time to take your PHP debugging to the next level.
So, enabling the PHP-module, and making the virtualhost for the UI should do the trick?
**Edit: It's being a little funky when I try to drill down, I think my vhost config needs tweaking, but with simpler vhosts it should work 100%** Problem seems to stem from the fact that unless a filename is given, it goes straight to my index.php, so whilst `/xhprof/xhprof_html/index.php?run=4d6b86c73bab1` works fine, `/xhprof/xhprof_html/?run=4d6b86c73bab1` does not, so I'd recommend adding something in the server conf to handle /xhprof differently. I'll update later today with a fix **Edit2: FIXED Updated, with xhprof line in config** # Ok, my setup. Might be a little overkill for what you do, but it works. ## Vhost: server { listen 80; server_name trouble trouble.0xf.nl www.trouble.0xf.nl; root /var/www/vhosts/trouble/_wwwroot; access_log /var/www/vhosts/trouble/access.log; location /nginx_status { stub_status on; access_log off; allow 127.0.0.1; } location /xhprof/xhprof_html { try_files $request_uri /xhprof/xhprof_html/index.php$is_args$args; } location ~* \.ico$ { access_log off; error_log off; expires 30d; } location / { try_files $request_uri @rewrite; } location @rewrite { rewrite ^/(.*) /index.php?route=$1; } location ~ \.php$ { default_type text/html; error_page 404 = @nocache; if ($request_method != GET) { return 404; } set $memcached_key site:trouble:uri:$request_uri?; memcached_pass 127.0.0.1:11211; } location @nocache { include php5; } location ~ /\.ht { deny all; } } ## Web directory: james@li140-209:/var/www/vhosts/trouble/_wwwroot$ ll total 40 drwxrwxr-x 7 james www-data 4096 Feb 19 23:44 ./ drwxrwxr-x 10 james www-data 4096 Feb 20 00:36 ../ -rw-rw-r-- 1 james www-data 936 Feb 23 15:00 index.php (some files) drwxr-xr-x 2 james james 4096 Feb 15 11:58 xhprof/ james@li140-209:/var/www/vhosts/trouble/_wwwroot$ cd xhprof/ james@li140-209:/var/www/vhosts/trouble/_wwwroot/xhprof$ ll total 8 drwxr-xr-x 2 james james 4096 Feb 15 11:58 ./ drwxrwxr-x 7 james www-data 4096 Feb 19 23:44 ../ lrwxrwxrwx 1 james james 27 Feb 15 11:58 xhprof_html -&gt; /usr/share/php/xhprof_html// ## Config: james@li140-209:~$ sudo cat /etc/php5/fpm/conf.d/xhprof.ini [xhprof] extension=xhprof.so xhprof.output_dir="/var/tmp/xhprof" In my PHP script (index.php): james@li140-209:~$ cat /var/www/vhosts/trouble/_wwwroot/index.php &lt;?php if (extension_loaded('xhprof')) { include_once '/usr/share/php/xhprof_lib/utils/xhprof_lib.php'; include_once '/usr/share/php/xhprof_lib/utils/xhprof_runs.php'; xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY); } (IRRELEVANT CODE THAT DOES MY SCRIPT) if (extension_loaded('xhprof')) { $profiler_namespace = 'core'; // namespace for your application $xhprof_data = xhprof_disable(); $xhprof_runs = new XHProfRuns_Default(); $run_id = $xhprof_runs-&gt;save_run($xhprof_data, $profiler_namespace); // url to the XHProf UI libraries (change the host name and path) $profiler_url = sprintf('http://trouble.0xf.nl/xhprof/xhprof_html/index.php?run=%s&amp;source=%s', $run_id, $profiler_namespace); echo '&lt;a href="'. $profiler_url .'" target="_blank"&gt;Profiler output&lt;/a&gt;'; } **Try the output yourself** http://trouble.0xf.nl/xhprof/xhprof_html/index.php?run=4d6b85b59cf3c&amp;source=core
Thanks! I will try that later today. What is this line supposed to do? &gt; if ($request_method != GET) { return 404; } So if the client sends you POST-data, you would give him an 404. What kind of wizardry does this achieve?
The documentation have been updated, and is a lot clearer now. You are welcome to throw me in on the project, and I would find time to help you. I send my Google account in a message.
Look a couple of lines up. "404" is actually my @nocache. It's to prevent POST URLs from looking in the cache.
I don't really think the accusation of karma whoring here is justified. I have no idea of the relative merits of either Pligg or HotaruCMS as I have not used, nor know of anyone using either. That's why I made a light-hearted comment intended to suggest that it would be nice to know reasons for your assertion.
I think You don't need so much skills. It is 1st month I am working as PHP programmer and my first project is to update and add functionality for one old PHP website. So expect some "not fun" tasks =)
Use and abuse http://www.php.net like it's your own little dirty whore and you'll never be convicted for it.
While I don't know that I would use that wording exactly, I can't urge this enough!
It's nearly impossible to learn all PHP functions because there are too many of them.
Desire to learn, develop and try things! Speaking from the once trainee side of the fence I can say that my lack of knowledge at the time (even for a trainee) was overcome by my thirst for learning how every script I was presented with operated. Taking this attitude towards the language helped me keep the job which I am still at to this day. Also striking a balance between working solely on a problem and realising that you are probably spending too much time on something that for others in the office may be quite trivial and asking for help is important. Finally, testing. You can never do enough testing and the pressure to get things done quickly should never outweigh the quality of the code being written. 
I've added the PHP function search as a [keyworded search in Firefox](http://support.mozilla.com/en-US/kb/smart%20keywords). So instead of having to go to php.net or google, I type "php preg_match" in my address bar to jump straight to that page. 
Besides knowing how to use Google and knowing how to RTFM, the next thing I look for is knowing how to avoid [XSS](http://en.wikipedia.org/wiki/Cross-site_scripting), [SQL injection](http://en.wikipedia.org/wiki/SQL_injection) and [CSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) attacks. The techniques are simple and straight-forward, and knowing how to write secure code is a major, critical skill.
I just type uk.PHP.net/function_name because I am that sad :p
Williness to learn, and the ability to cope with drudgery and skunk work like moving hundreds of lines of hardcoded copy into a language file. If they can say "Ooo that's gonna suck. Okay, I'm on it!" you're good. If an entry level person comes in with nothing but finely-honed whining skills, tell them to GTFO.
I would expect them to know basic programming paradigms. For Loops, Switch Statements, If blocks, try catches. Also, I would expect them to know HTML. Syntax is easy to learn. "I need a switch statement here, let me see how PHP does that." 
Nothing worse than looking at code from a team member and seeing a blatant security issue due to one of those 3 issues... Also, avoid eval like it's the plague. Most likely there is a better way to do something then eval.
If you're even lazier (like me) and using vim, I recommend this: " F7 opens documentation for word under cursor, considering syntax function! BrowseDoc() if b:current_syntax == "php" ! firefox http://ch2.php.net/manual-lookup.php?pattern=&lt;cword&gt; elseif b:current_syntax == "perl" ! firefox http://perldoc.perl.org/search.html?q=&lt;cword&gt; else return endif endfunction map &lt;F7&gt; :call BrowseDoc() 
This. If you show that you want to learn that is the biggest thing. Also dont be afraid to ask questions about the codebase rather than just guessing, but dont be too needy. Try the problem yourself and if you have issues that you cant figure out then ask. What I recommend you do is pick a piece of the codebase each day and spend an hour reading it. Follow it from beginning to end and you will learn a lot about how the app is structured.
Yeah, I spent some time working on it this weekend. I also finished up the memcached handler and rewrote a bit of the sqlite one to make it a little more flexible. I added you to the google project, and I see you're already on the mailing list. I've got to head off to work, but we should chat later.
It's the argument order that gets me going back there all the time.
&gt; "Also striking a balance between working solely on a problem and realising that you are probably spending too much time on something that for others in the office may be quite trivial and asking for help is important." This is a big one. You have no idea how many times I've asked someone what they're doing only to hear "Oh, doing X by Y." when, if they had simply asked, I could have told them method Z would take a good couple DAYS less to accomplish their task. Someone recently spent an entire week importing a well-formatted excel document into an SQL table by hand. Either `load data infile` or a PHP script would've taken MUCH less time if they'd only have asked. (Which, I guess extends to being able to recognize easily automated tasks.)
A keen interest in web application security.
Were you aware that the machine you built on was not the end machine. If so were you made aware of the different spec, or if you weren't you should have asked. However if you did not know another machine was involved this would be outside the brief. Personally I would make it work for the sake of good will, but that really depends on how much there is to change and how much time it would take. It also really depends if you want to work for them again and what your established relationship is - or (more importantly) - what your contract with them says. 
&gt; Do I owe these guys anything? Yes. They paid you for a service, which for some reason does not now work. You should at least investigate to check if it is your mistake that's causing the problem. &gt; Should I start asking for pay for making my script work on a different server? Possibly - it depends on your original agreement. If you had no idea that it was going to be staged on a different server then probably yes. &gt; If I discover the original code on the original server was tampered, should I charge $$$ for the hassle, or take it as a learning experience? Again, it depends. If it's going to take more than a couple of hours, you should charge. Having said that, it depends on your present relationship with the agency, and the relationship you want in the future with them. Just be upfront and honest with them about it.
No contract. I did not know, and they never mentioned, that the script would be moved from the machine I was working on. Previous projects were done directly on client's machines. edit: No contract because in the grand scheme of things, this was a fairly small project that has absolutely no GUI. What are they going to do? Steal the confirmation message HTML that's displayed on successful execution*? *Before I get swarmed - I wrote this exactly to my client's specs (agency). They just wanted to be able to load this script in their browser, have everything run without them doing anything, and then displaying a confirmation message on success. They wanted it as braindead as possible to operate, and that's what I delivered.
I'm sure everyone has experienced this scenario. Take it as a learning experience, unless it takes you too much time to fix. Now I always handle the setting up of everything I do, and I try to avoid certain things in my code like exec function and such if I know this will probably get hosted on a hosting plan where we control nothing. (safe_mode on ... sad face) You should talk about hosting plans when you take on a project and try to be the guy setting up and possibly do some testing and debugging on the live setup before you ship your product.
If the PHP settings were 'silly' on the host then yes, you should charge for having to rewrite your code to accommodate the silly changes. Generally you should code your scripts to what deafult php.ini would be, and if it dont work on the client's host because they have an altered php.ini, then you should charge them for this.
I'm pretty much given up on the thought of charging them for the work I did on client's machine that turned out not to work at all. I will, however, proceed to look through the code residing on agency's machine and check to see if they've done any editing of the script since delivery and then decide whether to charge them. Honestly, they're a pain in the butt because I can't use my work for them on my portfolio, although they've always paid relatively on time (it's a shame that I have to list being paid around the time I ask to be paid as a positive).
What are the differences between the client's config and the subclient's configs?
chmod() is disabled on subclient's server, and it's needed because this is a script that automates creation of video thumbnails and moving files around. Server host claims up and down chmod() is enabled, but I have a sneaking suspicion that it's disabled, or that the PHP process for this user does not have access to it - something I shouldn't even have to think about other than telling the client to tell their host "enable chmod()".
I swear this happened to me last week with a different client: I coded a website with a custom backend for agency's client. Worked perfectly fine on my local server and on my online sandbox server. I even refrained from using the latest PHP tools available because I know most people aren't on server with the latest version. Upload to their server and everything appears to work fine... except they can't login. I spent some time trying to figure out what the hell was going on... turned out they were on a Windows server, and somehow someway the server had POST disabled. Attempting to POST a form resulted in simply loading up the ACTION page like no information was submitted. So I told them: Linux or no go. Switched them to a Linux server, tested and works perfectly. Sometimes I think it's me...
`chmod()` is disabled. Also, apparently I can't do nested `RecursiveDirectoryIterator` on new server so I rewrote all those parts to use `scandir()`. I am not a happy camper right now. Original server this all worked fine. I usually don't use contracts because I write all my code on my own server. What are they going to do? Steal the HTML/CSS? I hold off on uploading until full payment and then make sure everything works on client's machine. But now that they've moved it around, and *possibly* messed with my original code, everything's gone to hell.
Compromise? * State clearly that you designed the script for a default install of PHP. Note that they are at fault here and not you. * So, offer them an extra: Despite the problems, offer to check if you can make it work on just their server. * Note the specific requirements the apps has, and state clearly that any future customizations on their server or their clients will cost if they are not using the default PHP. * Additionally, offer them a support system where you will charge a fee to make it work on client's computers with weird settings. Note how you cannot offer this service for free, since it is extra work you must do each time: the script was designed for a specific setup and nothing more. (Remember, they need it to work more than they care about how things are setup, so they might like the idea of paying for the customizations as needed. However, if you don't offer this option, this really puts them at a disadvantage as what they have doesn't work for their business.)
I've never done this, but I think I would if this happened to me more than once or twice: what about setting up a quick little "environment diagnostic" script that you have them run on their server, that mails the results back to you? Output from phpinfo(), dump $_SERVER, that sort of thing.
&gt;What are they going to do? Steal the HTML/CSS? And what do you do if they don't pay? Just eat all the code you've written? That would blow. Always have a contract. The contract protects you and your client, makes you look more professional and lays out the terms of service and what the client should expect. It doesn't have to be 100 pages, a short and sweet couple of pages will be fine. It will save you time and effort in the future, gives the client a better understanding of project scope, what they are to expect and what they are paying for.
I've not started a single line of code before without having a very detailed explanation from client on what they want. This usually involves several back and forth emails, with me providing reference sites with what I think they are asking, and them confirming everything. But, you're right: I should have a pre-made contract. I'll search around here because I know I've seen posts with some great, compact contracts. 
I usually outline what plugins I'll need before beginning (ffmpeg, ffmpeg-php, safe-mode off for this client in particular). I'd simply never had come across a server that had POST disabled. I didn't even realize it was a possibility until now.
Disabling chmod() requires that they add that function in the disabled_functions line in php.ini, so it would be easy to argue that you haven't been provided with a default installation. On the other hand, it is a relatively common occurrence to see this function disabled. Most get around it by requiring that certain folders be manually chmodded via FTP, and use fileperms() to test whether it has proper permissions to write files. If the permissions have been set manually, then chmod is never called. 
What are you trying to accomplish? It's data coming from a html form? So you won't be getting any weird formatted data, and you just want the text to be somewhat safe to land in your inbox? just htmlentities() the entire block and be done with it.
Yeah, it's a big mess right now. `chmod()` is simply called in this context: if (!chmod($newFolder, 0777)) {//code} and that's really only the beginning. I also can't `rename()` folders to newly created folders. I pretty much stopped there because really, what the fuck. And yes, I even chmod'ed everything to 777 manually and still no go.
This is somewhat more a matter of customer management than PHP development. For my business, we will bend over backwards to make something right for any of our customers, and doubly so for good customers that we want to keep. Sometimes this means taking a loss on a project, but more often it means that the client is blown away by the way we handle things, and they go on to refer us to others, which is how we manage to stay in business. But, if you don't need or want to run your business that way, that works too. It sounds like you delivered according to what little specs they offered; you would be within your rights to charge for further changes to the code, because the spec is changing. Really it just depends on your relationship with the client and the kind of business you want to run.
Can you download the code from the subclient's server in its entirety and run it through a file comparison and differencing tool to see if they have made any changes? In addition to the client outright stealing your work, the contract also protects you from scope creep, either accidental or otherwise. I've worked for many clients who will continue to push the scope of the project until i specifically notify them that they have exceeded the scope of the contract. They'll never just come out and say "it looks good, send me an invoice." If there is no contract, then they can keep pushing and you'll have no recourse to stop them from doing so. 
Send an additional invoice with a memo of pebkac.
yes all of that and I don't want header injections.
I was wrong. It are ~200.000 rows. Is that more of a problem?
I think rehashing Passwords and things like this would be a problem for sql?
I'd chalk it up as a learning experience and keep good notes. You can't rely on chmod() to work as expected from server to server. The most common brain busting issue on shared hosting is they sometimes run suPHP for greater security. For that you usually have to set umask(0022) before attempting to create and modify files. A great time saver is to call the hosting company in question and ask them to look into it. They're usually very helpful. One thing I've learned from experience is that some hosting companies' gear is easier to work with than others. I guarantee my code runs on certain companies' set ups and I specifically don't guarantee it works on hosts not on that approved list. There are even a few hosting providers I will have nothing to do with. For those hosts not on my blacklist, I'll make the code work, but the costs of debugging even a small problem on a shared hosting account are typically about the same as simply hosting it somewhere else. If it's hosted on a VPS or they own/rent the whole server, I'll typically tweak the configuration to how I like it. Or have them do it if they already have staff for that. Anyhow, I think most of us have been there. It sucks to eat an overrun, but now you know one more thing to look out for at the start. Write it down so you don't forget.
Use PHP to create a directory and a file. If either of them is created with 700 permissions, it's a umask issue.
Don't reinvent the wheel! A quick google pulls up swiftmailer and phpmailer both of which look pretty decent -- swift even explicitly calls out addressing your concern about header injection.
Yes, if i just wanted a good email form I would use one of those. I am also teaching myself php by reinventing the wheel. I started from scratch not knowing any programing and through the good people here, stack overflow, phpfreaks, etc I have cobbled this together. Not to say that I have written everything I am using PEAR for the email validation. What I want to know is is this horribly bloated, overly paranoid, or good security?
Blind obedience. And a willingness to ignore blatant inconsistencies with their new beloved language.
This is why you always get a phpinfo() output from the production environment to know what you can and cannot use. A minor PHP version difference can totally break code. Recently ran into this with a misconfigured version of the PCRE (Perl-Compatible Regular Expressions) library that ships with Red Hat. Took me forever to figure out why my regex was failing ONLY on the production environment.
Whether you owe them is a function of the spec you wrote before you took the job. If you didn't write one, then whether you owe them is a function of whether you want more work from them. To be clear, if a script fails because of client settings, it *is* your fault. The script should be checking settings and either accomodating them or failing in a graceful manner which allows the client's client to adjust their server. ini_set(), etc.
Problem exists at developer who assumed settings.
How is the client at fault for a developer who assumed server settings and wrote a script which was dependant on them, and which also didn't check the server's settings and give controlled failures? It's not like it's hard to write a PHP script which is more durable than this.
Yeah, I would take full responsibility if the script had failed on agency's server, but since I did deliver a script that was working on agency's server, I don't feel so bad I guess. And yeah, my script is returning a "`Unable to chmod() blah/blah, please check settings`" on new server, so I knew what problem immediately was. Once I dove in, I simply found more and more problems that seem to be directly related to client's (agency's client) server config, which was not my original server target. I'll end up fixing it on both servers, most likely, since repeat customers are a nice thing to have.
I disagree. I have yet to do any test that finds a significant boost in performance for memcache (and often it's a slight decrease in performance). Memcache has a fair bit of overhead... Where you want memcache is for fast caching that can be accessed by several different application servers, or to cache individual query results that are fairly complex to load. When you are caching the html of an entire page on a single server, there is very little benefit to sticking it in memcache versus sticking it in an indexed cache table. And in fact, sticking it in a .html file is going to trump both in terms of minimizing system resources and boosting the number of pages you can serve.
aloud != allowed
&gt;I did not know, and they never mentioned, that the script would be moved from the machine I was working on. Previous projects were done directly on client's machines. You did exactly what you were paid for, anything they ask you to do beyond that needs to be compensated in addition to what they've already paid you. Do whatever you feel is best with regard to their client, but don't feel like you're under any legal or moral obligation to do it for free... that said, if you want work from this agency again, you need to at the very least make your position clear, and also indisputably putting all the facts on your side. The reason for a contract is to explicitly set the scope of the project so after-thought requests like this don't come up, or at least get handled correctly (can you please fix this despite not being in the contract vs we paid you, now make it work!)
&gt; but since I did deliver a script that was working on agency's server, I don't feel so bad I guess. You delivered a script which doesn't work everywhere. Therefore you are at fault. It's really that simple. When it comes down to it, the only way to be the best contractor there is is to take responsibility for every fault which you could have eliminated. I assume the best of you, which in my mind means that you want to do everything as close to ideally as you are able. This is my belief. Take it for whatever you find it to be worth.
Depending on the settings changed, things like openbase_dir, even versions installed and compiled features enabled/disabled (in the PHP world a change from say 5.2.1 to 5.2.2 can cause BC breaks), it's pretty easy to write a script that is not universal. While we can only assume, it's likely the OP was not given the specs on the client's client's machine (what version of PHP, what modules provided, environment, etc) as I imagine the OP's client didn't think it was necessary (and sadly the OP probably fell into the same trap, "oh all PHP is the same"). The OP is only responsible for ensuring their code runs on the machines specified or provided.
It is if they stopped allowing url fopen or file_get_content and they initially did. Granted you can always do a check and switch over to curl, but not everyone does that.
| "What would you do?" I would upload the backup of the original file I keep just for situations like this. No time involved. No need to charge. (/hassle)
&gt; it's pretty easy to write a script that is not universal. What does the ease of doing a sloppy job have to do with doing a good job? &gt; While we can only assume Uh, no, we can do a lot more than to assume. That was kind of my point: the reason the developer was in error was having assumed. &gt; The OP is only responsible for ensuring their code runs on the machines specified or provided. Well, then I won't be hiring you, because I don't hire people who write code that works on their machine then call it a day.
&gt; Granted you can always do a check This is what I believe is the difference between having delivered a project and having delivered a high quality project. &gt; but not everyone does that. Nope. They don't. This is part of what creates the skill gradient.
I've had success doing it strait up, but never through Zend. Something like: $conn = oci_connect($user,$password,$service_name); $query = "SELECT * FROM STUFF"; $resource = oci_parse($conn, $query) oci_execute($resource) while( $row = oci_fetch_assoc($resource) ) { //do stuff } 
Yours is broken. Theirs is bloated. Take your pick.
Yours is broken. Theirs is bloated. Take your pick.
Well for one it worked perfectly well for the programmer's client. Now, do you expect every piece of code to have fallbacks for every possible combination of modules, all previous versions of php, etc? If you do then you are either going to have code that uses no modern features of PHP or that is overly complex. Then of course there are system configurations that can screw with a script such as an overly locked down server, etc. Apparently the past history was also that the machine he was developing on was the machine it was going to run on. He was told no different in this case.
&gt; Well for one it worked perfectly well for the programmer's client. And not for their client in turn. Apparently the idea that a script which doesn't work everywhere is broken is foreign to you. &gt; Now, do you expect every piece of code to have fallbacks for every possible combination of modules No. Just the things it relies on. &gt; Apparently the past history was also that the machine he was developing on was the machine it was going to run on. I don't see this anywhere in the article text. You appear to have begun making assumptions in order to defend making assumptions as valid engineering practice. Read along with me. See if you can keep up. 1) Original poster made assumptions that Foo would be available. When the script went to production, Foo was not available. Client's customer was angry, so Client was embarrassed. 2) Client has learned that original poster's software is fragile in a way that makes their customers angry. See how easy that was? &gt; He was told no different in this case. Clients should not have to tell their contractors how to do the basics of their job. And yes, getting a script written so that it doesn't fall apart under valid alternative server configurations is a function of getting one's job basics right.
The database that runs out of the filesystem? Sometimes I don't know why people take other people's advice seriously. It's not like this would be hard to benchmark. Databases run under wildly differing conditions and at wildly differing speeds.
I mentioned in another comment reply that I coded this to work on my client's machine, which I thought was their client's machine. They then emailed me last week, after over a month, that the script did not work on new server. Also, I know of no other alternative to `chmod()` and `rename()` in the PHP toolset - I can do it via `system()` but that's disabled as well.
I don't think you should offer an alternative. I think you should check if the functions are enabled, and if they aren't, halt cleanly with a meaningful, explanatory error message.
You are only on the hook for clearly defining the environment settings in which your code is supposed to run. If your client can't admin a simple LAMP stack, then they shouldn't be in the internets business.
I didn't expect what you said to be taken so hard in this community. Maybe the last part rubbed some people the wrong way. 
parameter 1 for oci_parse should be your connection resource. The warning you are getting does not seem to have anything to do with the data type but with the connection not being correctly instantiated.
Nah. That's just how the proggit punishment fetish works. Happens Every Time (tm).
I feel bad asking this, but is it a windows host?
Elaborate?
It depends on what your hash method is. Most common hashing methods are easily implemented in the insert query and it will run faster than if you did it in PHP. Especially if you can set up the insert statement as a prepared statement.
The current subclient? No ... it's just an uncommonly configured Linux server.
I agree with you, but I don't really assign moral failings on the OP's part. But I do think he should, in good faith, make an effort to code some modifications to make the script more robust. That isn't to say he should devote 80 hours on the clean up, but a little bit of "client service" goes a long way toward additional contracts, favorable reviews, etc. From even a simple market point of view, it makes sense to give a few extra hours if there was legitimate miscommunication resulting in a bad product.
I think it's appropriate to ask what assumptions can be made about the PHP installation in the intended production environment.
If he or she assumed some ridiculous configuration was going to be in place then you'd have a point.
Think of the long-term game here, not just case in hand. If you keep the agency sweet now, they will hire you again in future. So being difficult now to save a few hours may cost you in thousands of dollars of future work. I would try to come up with a compromise, but subtly let them know that you're doing them a favour (without being an asshole), because it would have been a fair assumption that chmod() would have been installed on the server. Maybe ask if it is ok to bill them for an hour or so work as a token gesture? Bare in mind they are probably charging 2 or 3 times to their client for your time as they're paying you, so I'm sure a few hours of time won't damage their margin too much. As a side note, I personally refuse to work on non-dedicated servers because their configurations are so varied and inflexible. Not having chmod() is ridiculous.
It has to do with a misconfiguration where PCRE was built to support UTF-8 characters, but not with Unicode property support which was breaking some regex in CakePHP. This page has a good description of the problem: http://chrisjean.com/2009/01/31/unicode-support-on-centos-52-with-php-and-pcre/ This refers to CentOS, but the same problem was on RedHat
I've been using PHP since there's been a PHP and I still do this. 
If you find one I would really like to see it as well.
Have you even looked at Swift Mailer? As far as public project goes it's actually quite decent. It has a ton of code, but that's because it supports a ton of features, it does not load the code it does not use.
&gt; You delivered a script which doesn't work everywhere. Therefore you are at fault. It's really that simple. Nah, that's ridiculous. You can create custom build of PHP that has any and all functions disabled. Let's imagine that for whatever reason a client is running a version of PHP with substr() disabled, but they didn't tell you that or offer any way to test on their production system. Do you really think it's reasonable to expect a developer to be responsible for that situation? If you don't specify "work around these modifications to the core language" as a requirement for the project, then the programmer really shouldn't be held responsible. There are obviously situation where the developer is not at fault. This is like asking an author to write an English language book about fish. The author does so. The, after he is finished, you tell him, ok, that was pretty good, but you aren't allowed to use the words "marine, ocean, water, gills, red, orange." Please resubmit! How about... fuck you?
That's probably because PDO_OCI isn't the oci extension.
You might need to get to the underlying PDO object itself and [use it's wacky streams-based LOB reading mechanism](http://www.php.net/manual/en/pdo.lobs.php). Alternately, you can [use the other, non-PDO Oracle adapter](http://framework.zend.com/manual/en/zend.db.adapter.html). I'm not entirely sure how to go about doing that, the proper name isn't clear from the documentation. e: Sudden moment of clarity. You're connecting using PDO_OCI, but you're trying to use the non-PDO statement handler. Use the right classes and you should get the right behavior.
&gt;Apparently the idea that a script which doesn't work everywhere is broken is foreign to you. Apparently you think it's possible to write a script that works everywhere. Here in the real world, we've got to draw a line somewhere. &gt;And yes, getting a script written so that it doesn't fall apart under valid alternative server configurations is a function of getting one's job basics right. To a programming-ignorant client, what's the difference between a message saying they need to enable `chmod()` and fatal error saying they need to enable `chmod()`? If it's broken, it doesn't matter how the client sees it, because they don't care *why* it's broken— they just want it fixed. You can preach "you should have written every line of code to work on every single setup", but I'm not aware of *any* programmer who does that, nor am I aware of any client who would want to pay for that. Please try not to be completely wrong when you're so condescending.
one might ask why you use a database abstraction layer on top of a database abstraction layer. Are you a fan of the movie Inception by chance?
Well, it's a matter of how hard-line you want to be about it. Programming is hard and it's not possible to code for an unknown combination of hardware and software with a guaranteed 100% success rate. You coded for your client's particular configuration in good faith - assuming that their client's system would be set up in the same or a very similar way. It's not (entirely) your fault if it doesn't work on their client's system. They either needed to supply you with the specs and a phpinfo() dump of their client's system or you needed to supply them with a list of your code's requirements. Preferably both. As I see it, you need to find out exactly what requirements are vital for your code to run on any given configuration and specify that these must be available on any machine that has to run it (in your case chmod). I wouldn't bother rewriting code - it's a configuration issue - from the sounds of it, your code is okay. I would say that since neither of you exchanged the above details with each other at the beginning of the project, you probably both could have done things a little bit better. So I'd go some way to helping them configure their system properly (if you're able) and yes, do some tweaking to the code if this seems necessary (within reason). And I'd hold off on charging for it unless it comes to light that your code has been tampered with. But I'd try to diplomatically mention that you can't be held responsible if your client's staging server differs from their client's live server - that's something their sysadmin should have looked into. You're doing them a favour. As for charging, here's what I would do. I'd mention the fact that the unknown configuration differences between servers is what's causing the problems here - not your code. Say that you're happy to work with them and their client to get your code running on their machine. Because you're a nice fella, if you can't resolve the issue by system configuration alone and you need to alter your code to work around the configuration on the target machine - you're happy to wear the cost of the code changes up to 10% of the initial agreement - after which you'll need to start charging as the configuration of their client's machine is outside of your control. Honestly though, your problem doesn't sound like a dealbreaker and 10% (if the project doesn't run into the tens of thousands) is quite easy to wear and I'd be reassuring them that you probably won't rack up the whole 10% anyway. As freelancers I'm sure we're all used to delivering far more than waht we initially agreed upon anyway.
needle is usually before haystack, that always helps me remember for searchy functions
No money = No work. Simple. I don't like working for free anymore. Remember, if they are so desperate to get this script working, they WILL pay you. 
And next time, insist on at least a phpinfo() dump of their client's machine and say that you will work on the assumption that their staging server and their client's live server are as functionally identical as can be reasonably achieved. Also, quite often I build in a contingency for problems such as this when quoting - I learned this at my 9-to-5. And note that the contingency will not be charged for unless situations like this arise.
Just ask them to pay you your normal hourly rate to make the adjustments. Alternately, if this is normally a "good client" that brings you recurring business, and if its only a few hours, just give the time away. Treat your good clients well, fire the bad ones, and just ask everyone else to pay a fair price.
upvoted.
&gt; You delivered a script which doesn't work everywhere. Therefore you are at fault. It's really that simple. Wrong. The client didn't provide all the relevant information. OP may share some of the blame for not double-checking, but ultimately the software was deployed in an environment that did not match expectations. You can't go changing the spec after delivery and expect the software to magically conform. 
CI/Kohana, Symfony
I use DuckDuckGo !php fopen 
You may try codeigniter http://codeigniter.com/
I actually like the Zend Framework. I suppose it's because I have kind of written my own framework around it and been using that ever since.. I like the idea of that though, my own familiar system that uses what Zend has to offer.
After doing Zend, Drupal and Code Igniter for 3 years, Django feels like coming home after a long hard day at the asbestos factory!
using symfony2 right now and it fucking rocks. so much simpler than symfony 1.x, and i love symfony 1.x
Shit, it's not even like it's that difficult. Just use an existing wrapper that will automatically fall back and you've accomplished the task without adding any extra work. When I consulted/contracted I always asked for access to the machine, or at the very leas the output of phpinfo. With virtual machines being as easy as they are it really shouldn't be difficult to emulate settings.
Agree. Symfony was the first PHP framework I really liked, and 2 is looking like a big improvement.
I've only been using Kohana and it's great. I need to check out what else is out there as though.
I really like [CakePHP](http://cakephp.org/). It feels just right. Takes a bit to get used to it, but i found it much easier/clearer too learn than symphony and zend. 
https://encrypted.google.com/search?hl=en&amp;q=ubuntu%20maverick%20php-fpm%20nginx You are welcome.
Go with a (not yet finished) PHP 5.3 one: [Lithium (li3)](lithify.me), [Symfony2](http://symfony-reloaded.org/), [Fuel](http://fuelphp.com/), …
well, yeah, if it's truly static content (images/static js/css/etc.) it certainly makes sense to put it on a geo-targeted CDN like limelight or S3. in my experience developers/designers get lazy about moving new content out. so our build+deploy processes take everything from the public assets folder, closure compiles where possible, and uploads the results to a bucket at limelight and finally updates the local references accordingly.
IIRC for my FastCGI setup this is the guide I used http://blog.rubynginx.com/index.php/2010_01_21/installing-configuring-nginx-php-ruby/ and it's working brilliantly. If you need php5-fpm specifically you should be able to find plenty of stuff on google.
Cool. How are you automating it? I'm guessing git/svn post hooks.
I really like my own :) - http://github.com/leftnode/jolt Yes, sometimes I have a bit of NIH syndrome, but it's incredibly fast and lightweight, and I know the entire stack from routes to router to locator to controller to dispatcher to client. One of these days I'll eventually write some documentation for it and then kick all of the other frameworks asses :)
my own.
Not really. SQL supports PASSWORD('myPassword') or MD5('myPassword') (not recommended) and also many other string operations. It can do way more than your ordinary CRUD stuff. From what you're describing in your post it seems that fetching everything to PHP, doing stuff with it and then pushing it into another db is more complicated than just doing it directly in the database, especially if the db is on a remote server. However, if you're more comfortable with PHP than SQL you are probably better off doing it your way. In any way, 20,000 data sets isn't a lot.
Am I really the only one here using [Yii](http://www.yiiframework.com/)?
I'm amazed nobody's asked this yet. What is lacking in Zend?
I was using it, but its evolution was too slow. I switched to Kohana and never look back. 
Nope! I spent a long time reviewing frameworks, and Yii just stood out - exceptionally fast, heavily documented and consistently updated. Brilliant extensions and wiki articles that are constantly added to.
My issue with Kohana was that at the time I reviewed it, just over a year ago, the community were split. A lot of people were developing with v2, but v3 was just released - it looked amazing, but it had zero in the way of documentation and support. Have things improved?
I just started using Kohana and my take is that v3 has a pretty substantial hold. v2 still seems to be around but there is plenty of documentation on v3. Nearly all of the discussion on the forums is about v3.
This is an awesome idea and proof-of-concept. A comet-style long poll image request. Great, if you can convince your recipients to enable images.
yeah the only type of images visible in email nowadays are the mime-encoded images contained inside the email itself. Anything else has to be enabled the user (Gmail, Yahoo, Hotmail, etc) - so as awesome as it may be, it will only work in a very few cases.
&gt; I agree with you, but I don't really assign moral failings on the OP's part. Professional, not moral. The difference is that a professional failure can be an "oh, I never thought about it that way, I'll try that," and updated, and nothing was wrong. RAND won't put bolts in a rectangle, even though that's the strongest possible rigid arrangement, because one day they went "oh right, then it can be put on upside down." Their process improved, and though the resulting product was slightly less strong, it was radically less likely to be mis-assembled. Nobody's angry at RAND for not having done it that way before it was pointed out. Morals have no place in a professional discussion unless the question is whether the vendor knew they were doing it wrong and did it that way anyway.
Where, please?
The whole point is that you can't assume configuration. (That's also not a ridiculous or uncommon configuration.)
&gt; Have you even looked at Swift Mailer? Yes. &gt; As far as public project goes it's actually quite decent. I agree. It's also very, very bloated. What's your point?
I don't really like frameworks, just libraries. Perfect balance between control and re-usability :)
&gt; Nah, that's ridiculous. You can create custom build of PHP that has any and all functions disabled. Those aren't configurations. Apples and oranges. &gt; There are obviously situation where the developer is not at fault. You'll be hard pressed to find a customer who agrees that a valid, common configuration of a product which has not been modified causing a script to fail because the developer didn't include a one-line guard, or even instructions on what configuration their software required, isn't broken. Buyer's markets are hard for developers who won't consider other people's needs. &gt; This is like asking an author to write an English language book about fish. No, it isn't.
Thanks kindly.
&gt; Wrong. The client didn't provide all the relevant information. The relevant information is "it's a PHP script with a legal, valid configuration." &gt; but ultimately the software was deployed in an environment that did not match expectations. No, it wasn't. That's a PHP server with a legal, valid configuration. &gt; You can't go changing the spec What spec? &gt; expect the software to magically conform. Correct software is not a matter of conformity. It's a matter of the willingness, knowledge and experience to do a durable job. This is a *trivial* fix. Think about what you're arguing against. The script requires chmod. Chmod can be disabled from the ini. There's a function to check what's been disabled in the ini. Why are you arguing so hard against a painfully obvious one-liner? Maybe you didn't notice this, but for all your talk about what one must and must not do, he's losing business and making customers angry because he didn't do it. Your opinion won't change that this is money being taken out of his pocket. Managing customers is not an exercise in being reasonable. Managing customers is an exercise in preventing anything from being able to go wrong.
That'll work too, but I confess, hot configuration management always seemed safer to me, for when their config changed. But yeah, that'll work, and it's much faster and easier.
&gt; Apparently you think it's possible to write a script that works everywhere. I don't have much trouble with it. &gt; Here in the real world, we've got to draw a line somewhere. Writing one-line configuration guards or simple instructions saying "my work requires X, Y and Z" is not beyond any reasonable such line. Stop thinking in infinitives and start looking at the actual situation. "This script requires access to chmod()." &lt;-- HOLY CRAP AN UNBELIEVABLE AMOUNT OF WORK oh wait &gt; To a programming-ignorant client, what's the difference between a message saying they need to enable chmod() and fatal error saying they need to enable chmod()? One looks like a script blowing up, and means you have to go running to the vendor for a fix. The other looks like a script saying "hey, there's a misconfiguration," and means you go ask your ISP to change your PHP setup. Did you even think about this question before you asked it? &gt; You can preach "you should have written every line of code to work on every single setup", but I'm not aware of any programmer who does that Maybe that's because the ones of us who do it think it's such a basic, easy, obvious thing that we don't bother bringing it up? Maybe that's because you're not actually familiar with the code of many professionals? I just don't know what to tell you. You're staring me in the face saying you don't know anyone who does what I do. All of my staff do, and only two of them had to be taught it going in; the rest already did. There are people all over this thread talking about their alternative methods for coping with this, but you want to hold up your complete unawareness of anyone who does this as proof that nobody does this. The characteristic behavior of an amateur is to hold up their own ignorance as proof. Those of us who didn't learn recently from the internet have different worldviews than those of you who did. &gt; Please try not to be completely wrong Are you done? I don't like getting talked down to by obvious amateurs. &gt; Please try not to be completely wrong when you're so condescending. Wow. You just have no idea how well you match your own criticism, do you?
I haven't done anything with Symfony 2 yet, but reading the documents it seems that it's a big improvement on the already excellent Symfony 1. Whenever I need to make a web app, I will definitely use Symfony 2.
A lot of mistakes. PHP is easy to make in random ways, and hard to make concrete structure in, due to lack of formal records/structs and lack of type enforcement. Therefore, from trainees, I require extensive unit and stochastic testing. I realize you're asking for skills, and I'm talking about something I make them do instead, and even that it's something I'm willing to teach them, so this is not really a straightforward answer to your question. I could say something glib like "the ability to learn," but who doesn't look for that, or limits that to a trainee? A trainee is called a trainee because you expect to train them. Expect around half to two thirds of the skillset you expect from a junior, and expect weird random holes that you have to show them how to fill in. Manage them expecting failures, be constructive and happy and helpful, and teach them real process. Don't expect much at day one. Expect a lot at month six. Tell them that on day one. Give them resources and let them surprise you.
I realize you're advocating security, which is noble, but surely you don't put trainees in security-conscious contexts?
No need. After a week the awesomebar will pull up some php.net function by the time you've typed 'ph', and then end control-left control-left type.
The thing is, if I remove the $adapter-&gt;setStatementClass('Zend_Db_Statement_Oracle'); it will retrieve the data, but the clobs will be blank. 
I've never personally come across a machine where chmod isn't enabled and i've worked on many.
I know, right? If I had my way, we'd use something simpler, but we're married to Zend at this point and doing things the "right" way. 
Possibly a dumb question: Could the same thing be done without an image, but instead use a bit of text that has to come only after an email is opened?
I like Zend specifically because it doesn't tie you down as much CI or Cake and try to do everything for you. But Cake and CI are both nice.
My point is that it's not very bloated, you severely underestimate what's required to send mail.
That's one of the things I think is great about Zend. It's a framework but most of the parts work standalone too.
The technique they're using never actually sends any data. He left in a fopen that is never being closed or used... As to your question to do something similar with text you'd have to use javascript which I can almost guarantee you won't find a single current mail client that will allow javascript without it being explicitly turned on. This technique would've been useful about ten years ago but it's considerably less useful now.
I second this. I'm a CakePHP fan. The idea of convention over configuration is something I believe in strongly.
Considering that I've been a primary developer on several large deployment email centric customer hosted systems, one with in excess of 30,000 customers, I assure you, your guesswork about my estimates and the validity thereof is inappropriate.
It's not uncommon in locked down environments, especially SAS 70 environments, for everything that even smells like the filesystem to be shut off.
You're going to hit the maximum number of redirects pretty quick. How I would do it... actually send the image, a few bytes at a time.
Yes, I was just thinking that. You need to actually be sending some data or most browsers will probably stop following the redirects. I would do it like you say and stream a fake 1x1px image forever. Not that this technique is actually useful, since most people won't have images turned on these days.
Just because Cake has a lot of convention doesn't mean you can't be explicit if you need to. The convention is handy if your case suits it - and most cases will, but in the even you need to do something non-typical, you can override any of the conventions easily and be as explicit as you like.
Also like Cake, and the upcoming PHP 5.3 framework from former Cake devs, [Lithium](http://lithify.me). It seems when it comes to PHP frameworks, people are divided into two camps - convention vs configuration. However, one thing the configuration advocates usually fail to realize is that the convention frameworks (or rather Cake and Lithium specifically), allow you to override any of the convention-based functionality and you can be as explicit as you want or need. Convention-based frameworks provide nice shortcuts when your case fits, and (good) frameworks let you override those conventions when necessary. The only limitations I've ever run into when using something like Cake has been due to the MVC pattern itself - not anything to do with the architecture of the framework.
I expect someone who knows most of PHP's basic syntax, OOP fundamentals, and web development basics (sessions, cookies, GET/POST).
Got three Yii apps in production at the moment with more on the way. It's a very nice, smooth, easy to use framework.
That makes sense. Now the only question is how to get the PDO statement to get the clobs. 
&gt; Heavily documented Since when? Last time I checked it out (about a year ago) the docs made no sense to me.
Kohana http://kohanaframework.org/ It's well supported and has a great code base.
It would be of interest to many people, however the issue is (at least in my experience) they want to integrate it into their admin/etc apps. And when you start accounting for DB connections, use of an ORM like Doctrine, etc, it ends up being very difficult to build it flexible enough. If you were to go that route, building it embeddable will be key (everything happens in say a $report-&gt;generate() that I can pop into my app) to making it useful, as well as building it to accept any kind of DB connection from PDO to MySQL to MySQLi. If you were to even go so far as to accept ORM details (like say, have it be able to glean schema straight from the Doctrine ORM to better present relationships etc. for the reporting tool), you will have a golden product on your hand. And of course the downsides are you will be very limited in the libraries/dependencies you use, as well as being very careful to make sure your app doesn't export anything so as not to interfere with any application it's included with.
I haven't gotten into 2 yet. I'm interested to try, but reluctant to use it on a client's project. In your opinion, what's the learning curve for someone who is very familiar with 1.4?
Yes edit - I've been looking for the holy grail of php ad-hoc reporting for years now with no good results. Something with a nice datagrid view with entry/edit options and some nice looking visualization would be *fantastic*...
Yes. I type an extra p but avoid the end control-left control-left strokes.
I'm getting a lot of projects done with [Limonade](http://www.limonade-php.net/). It's one of the micro-frameworks like Fat-Free, Glue or Lithium. I'd think it sits between Glue and Fat-Free/Lithium in features. You get a router, controller and view support. The ORM and Model is up to you. I've been using a lightweight wrapper around PDO and some simple classes for my models which suits my needs. As odd as this may sound doing Rails all day for the day job it's a relief to work in Limonade for my contract jobs afterhours.
Of course there is interest, I have written my own subframework (dog bless Agavi) for generic reports. It would be really nice if there was a mature reporting system written in PHP. 
This is a dick thing to do IMO. Profitable, but dick.
Yup. Totes applicable for my current project, I'll be looking for software to do it once the data is in place.
Well, honestly, I'd have to say rails :) When I first got into more serious PHP programming it was all Zend Framework. Hated it. It's more a collection of tools rather than a framework and it often feels like the parts never really cohesively fit together. Plus, the model layer really sucks. I mostly used it with Doctrine (which has it's own issues) to get around that. It works, but it just never felt like a cohesive dev framework. After that I switched over to Cake. I like Cake. My only real gripes would be that it's annoying to use a rails like framework because you inevitably run into things rails does better, but that's not too big of a deal. The big issue I have with it is that it still supports PHP4, which really limits some of the things the model layer does (it's 2011, why is my ORM returning an array of arrays?). I do have hope for Lithium, however they really don't publish any info on their roadmap, what the current status is, or any other info to let you figure out if it's complete enough for you to use. Symphony2 shows some promise, Kohana is nice and all the Micro php frameworks are interesting. I generally stick with cake because it works, and because I often have to do quickie apps where the built in auth and ACl functionality is a timesaver. I'm still quite amazed that so many frameworks (including rails) don't include an authentication component... When it comes to a serious project that's going to be a long development cycle though, I generally turn to rails. While there is a lot I don't like about rails, there is more I do. Overall while I have no problems with PHP, at the end of the day I enjoy programming in ruby more. Just simple things like: myvar = 1 if myvar.blank? vs if ( ! isset( $myvar ) ) { $myvar = 1; } and the like...
530k mailing list. My e-penis is bigger than yours. If you consider Swift Mailer bloated I'm pretty convinced my guesswork about your estimates and the validity thereof is quite appropriate.
yes. reports are something that often get overlooked. however, some of the new jquery based reporting tools, for charts / graphs and nice looking grids are looking pretty cool and easy to do. you may want to look into that stuff before you start a whole new project for it. also, if you are looking for something open source, how about picking your favorite php framework ( zend, symfony, etc ) and writing some really cool plugins like a reporting plugin that incorporates the new jquery plugin stuff easily so people don't have to go through the work of doing it themselves just a thought.
&gt;"This script requires access to chmod()." &lt;-- HOLY CRAP AN UNBELIEVABLE AMOUNT OF WORK oh wait [](//) &gt;One looks like a script blowing up, and means you have to go running to the vendor for a fix. The other looks like a script saying "hey, there's a misconfiguration," and means you go ask your ISP to change your PHP setup. Again, do you think a client who doesn't know anything about server configuration or programming will be able to accurately follow those instructions? Or even care about it? Do you think they'll see a difference between "this script needs chmod()" and PHP's configuration errors? You apparently live in some alternate reality, because I've never met a client who could follow script error messages. &gt;I just don't know what to tell you. You're staring me in the face saying you don't know anyone who does what I do. All of my staff do, and only two of them had to be taught it going in; the rest already did. Sorry, I just don't believe that your staff wastes time coding for every server setup when it's completely unnecessary. Maybe you're inflating what your team actually does? &gt;There are people all over this thread talking about their alternative methods for coping with this, but you want to hold up your complete unawareness of anyone who does this as proof that nobody does this. No, they're talking about realistic alternatives. You're trying to argue that he should have foreseen any server misconfiguration which just doesn't happen. It's perfectly acceptable, for a small script, to code it only to the test server's configuration if he believed it would only be running on that machine. He's not releasing any code into the market, he's just doing a quick script for an agency, and I really doubt the agency would have paid him for the hours it would have taken to test on every single server configuration and operating system. &gt;The characteristic behavior of an amateur is to hold up their own ignorance as proof. Those of us who didn't learn recently from the internet have different worldviews than those of you who did. See, there you go with that condescending attitude. No where am I holding up my ignorance as proof— I'm stating what happens in the real world from my own experience working for multiple companies. If the code will never leave the server it was coded on, there's no reason to make sure every function has a fall-back. You're wasting time and energy doing so. &gt;Are you done? I don't like getting talked down to by obvious amateurs. Insults are indicative of someone running out of arguments. By the unrealistic expectations, childish insults, and arrogant statements you threw in this and previous posts, I'd wager you're somewhere in high school still? Maybe a sophomore? Once you graduate and get a real job somewhere, please come back and we can continue talking.
database wouldn't necessarily be an issue, if the reporting tool were told tables and fields, and given access to the database directly(via ip, and user/pass) it could query using it's own library instead of relying on what the system is already using. the problem is though that "reporting" is such a general term, it's very difficult to express that in a way that makes writing reports any easier using a 3rd party tool
Maybe that the script DIDN'T halt with a meaningful, explanatory error message? Just because it had one doesn't mean the client isn't going to complain.
Zend_Db is the worst thing, although since I replaced that with Dcotrine it isn't a problem. Outside that it's a perfectly fine framework minus the given issues with any kind of library. I'm just looking to branch out and get some opinions.
&gt; the problem is though that "reporting" is such a general term, it's very difficult to express that in a way that makes writing reports any easier using a 3rd party tool True, though usually 9 times out of 10 reporting is just the ability to run custom queries (that clients can build themselves) that aren't too terribly complicated (maybe a join or two, but for the most part just GROUP BY and aggregate functions). For that 1 out of 10 that need complicated reporting, those are built into the application by hand anyways and anyone building a 3rd party tool shouldn't concern themselves with.
&gt; "This script requires access to chmod()." &lt;-- HOLY CRAP AN UNBELIEVABLE AMOUNT OF WORK oh wait Where do you draw the line when listing built in features that can be disabled? You can disable basically every function of PHP. Maybe some stupid admin decided to disable some of the string processing functions for 'security reasons' or 'performance reasons'.
What type of reporting are we talking about?
http://www.jqplot.com/ http://www.fusioncharts.com/free/ I prefer jqplot, it's much easier to work with and doesn't use flash, but browser support on IE is not 100% certain. Also, there are no animations like in fusion charts, but I don't particularly care. http://sparkline.org/ Spark Line, like jqplot, is easy to use and specializes in small in-line graphs. As for generating data to feed to the charts, well that's an implementation detail
It depends on your e-mail campaign, but I have done some research into this and it ends up being about 65%. That is for messages though with actual information that people want to read. Less-useful marketing messages will likely be lower, and unsolicited will likely be nearly nothing.
PHP has short cuts too... isset($myvar) || $myvar = 1; 
I'm using Yii, too. It's the first framework I've really used, so I can't compare it to others (though I did a bit of research before settling on it). I really like it. 
If you stick with PDO, you should be able to accept any database that PDO supports. Plus if you use a DB wrapper that has a query builder, you won't need to worry about writing SQL that works on all databases. I would say go with PDO and just not support PHP 4.
&gt; Where do you draw the line when listing built in features that can be disabled? The ones you require are sufficient. &gt; Maybe some stupid admin decided to disable some of the string processing functions for 'security reasons' There is no such affordance in PHP. Next speculate that someone shut off for loops.
&gt; Maybe that the script DIDN'T halt with a meaningful, explanatory error message? Just because it had one doesn't mean the client isn't going to complain. Except they did complain, and this is exactly why. (sigh) This isn't a hypothetical, Jack.
&gt; Again, do you think a client who doesn't know anything about server configuration or programming will be able to accurately follow those instructions? Yes, I think a client can follow the instructions "this server's feature X has been turned off, either turn it on or call your sysadmin." Otherwise they wouldn't have a server. &gt; You apparently live in some alternate reality Oh cut it out. Not everything needs you to get up on a cross with your quiver full of lame insults. &gt; Sorry, I just don't believe that your staff wastes time coding for every server setup That's nice. Luckily, that isn't what I said they did. &gt; No, they're talking about realistic alternatives. Many of them are reciting what I said verbatim, sir. &gt; You're trying to argue that he should have foreseen any server misconfiguration No, I'm not. Are you done trying to tell me what I said? &gt; See, there you go with that condescending attitude. Look, if you're going to yell at me for things I haven't done, either meet your own standards or at least use the correct word. That isn't condescention. It's arrogance. You've been laying the insults on thick. Now you're reacting to my first as if it justifies you having been doing worse for quite some time. Find someone else to talk to if you expect so much better than you yourself can provide. &gt; Insults are indicative of someone running out of arguments. I haven't insulted you. Calling an amateur an amateur isn't an insult, and given that you're arguing with what I'm saying when you don't even appear to understand what my position is, well, it pretty much stands on its own. &gt; Once you graduate and get a real job somewhere Lol. Are you done slinging insults while complaining about insults you imagine went towards you, dear heart?
Yes it does. It doesn't flow the same though. One of my favorite things about ruby is the unless operator and the inline capability. do something unless something else it's nicer than if ( ! $somethingelse ) { } I'm not bashing PHP. I do most of my work in PHP, and tend to defend it amongst all the php bashers. It's a fine language. Sure it has it's quirks, they all do. And honestly, I really hate the anti-php attitude of most ruby developers (not to mention the whole "Rails Way" attitude). But at the end of the day, I find ruby more pleasant to work with.
&gt; 530k mailing list. That's nice. Did you write the software that sends it? No? Driving a bigger car than mine also doesn't make you a better automotive engineer. &gt; If you consider Swift Mailer bloated I'm pretty convinced my guesswork about your estimates and the validity thereof is quite appropriate. Yes, have fun bragging about your guesswork about my estimates, when you don't even know what my estimates are, while being super pleased with your understanding of the concerns of mail because you use software, and the other guy merely writes it. Done?
I've used Zend and Cake extensively, and I can't offhand think of anything that Cake does to tie you down. Cake follows the convention over configuration strategy. This does not mean you can't configure anything. Want to use Doctrine instead of Cake ORM? Go right ahead. Want to use a different template system? You can do that too. The big upside though is that when you don't want that stuff, you can get out of the box running much quicker.
I just have my own classes that clean up the code. No more figuring out if the function is camel case or with "_", other than those inconsistencies love PHP.
A contract that clearly explains no warranty, because you're not in control of the component pieces (e.g. PHP, Apache) and ultimate execution environment (someone else has 'root' on that server), is justified. Maybe next time. 
&gt; If you stick with PDO, you should be able to accept any database that PDO supports. Well, see that's the stickler. If you wish to embed it in a preexisting application (which would be the larger use case, integrating it into an existing administrative application), yeah you capture all the PDO connections. However, specifically in the case of MySQL, there is the MySQLi driver that is fairly common to see used (e.g. Drupal uses it by default) that many developers pick for feature support and performance reasons (if you know you're sticking to MySQL only, it makes a good amount of sense). Likely you'd pull a Doctrine and write a PDO-inspired toplayer and adapters for everything from MySQLi to PDO.
thanks. 
how is it broken?
What you can do with Zend that I don't think you can readily do with Cake is only use one or two classes as if they were standalone libraries -- dispensing with the framework altogether.
I said good day.
Ah that makes sense. Good call.
Care to expand on this? I'm not trying to defend Zend_Db, but I'm curious what irks you about it. It would be interesting from a comparative API design and developer preference standpoint. 
Yes, that's what people do when they won't face criticisms aimed at them.
God I wish there was *something* like this available. I've been tasked with creating this for my college and it's not going to be fun.
 foreach ($_POST as $k =&gt; $v){$$k = strip_tags($v);} Stop doing this, there's a reason register_globals is horrible, this, stop doing this. I can set any variable in your script to anything I want just by posting parameters (which I can do easily) Just because they don't show up in the URL doesn't mean they aren't spoofable. If you know the names of the variables you need set them manually
A recursive function would do the trick: function sanitize($array) { foreach ($array as $k =&gt; $v) { if (is_array($v)) { $array[$k] = sanitize($v) } else { $array[$k] = strip_tags($v); } } return $array; } $sanitized_data = sanitize($_POST); Or even better: $sanitized_data = filter_input_array(INPUT_POST, FILTER_SANITIZE_STRING); Don't use [variable variables](http://php.net/manual/en/language.variables.variable.php) for POST data (or any external data for that matter) as this would only simulate [register globals](http://php.net/manual/en/security.globals.php) and make your application potentially insecure. 
Unfortunately I have no choice, the boss demands we use his script. I do know all the names of the variables and am capable of setting them manually, but my hands are pretty tied because my boss demands we use his script. It's retarded, I know.
In the old days I used mysql_connect(...) or die(...); I never actually thought about it much, but You just made me realize, that I could have done this the whole time: isset($_GET['page']) or $_GET['page'] = 1; Ohh the amount of keystrokes I would had saved...
&gt; Unfortunately I have no choice Yes you do, tell your boss that it is a massive problem which it is. Your code shouldn't look like that. Period. If it was him who wrote it then take him down a peg for writing that. If I worked at a place and the boss forced me to use that code I'd quit without question. It's safer, works better to document the code and leads to less bugs like the one you just ran into. If your boss is so hell-bent on using that line of code instead of doing it right then tell him to do it.
Thank you! This is exactly what I was looking for. Knew I needed something in there to check whether or not a value was an array, just wasn't sure how to go about doing that. The variable variables were really screwing me up, as I had never seen that before and didn't know what the double dollar sign even meant. I don't understand how someone can program a script and demand their employees use that script, while knowing that the script is flawed.
Yeah he wrote the code. Unfortunately he's not just the boss, he owns the company, so there's nobody over his head that I can take the issue up with. I'd like to quit, but I need to pay my bills and eat. I'm working on finding a new company to work for.
Don't need to take it over his head just explain to him the issue with it. For one, no developer should get that attached to their code. Chances are he picked the code from some search result and is now too proud to admit that it sucks. He needs to understand that code is _not_ the correct solution.
You aren't offering any criticisms, just thinly-veiled insults and weak arguments trying to push unrealistic expectations. You offer no logical reasoning to support your claim that ["a script which doesn't work everywhere is broken"](http://www.reddit.com/r/PHP/comments/fuhrz/youre_hired_to_write_script_script_works_on/c1ir2la). Maybe you need some more experience? I don't know.
&gt;I don't understand how someone can program a script and demand their employees use that script, while knowing that the script is flawed. If he's aware of the flaw, then your boss is a retard. If he's not, point him to the documentation for [register globals](http://php.net/manual/en/security.globals.php). Anyway, why is your boss even involved in the coding process? The code is a development issue, not a management issue. He has no business dictating how the code should look like. (Unless of course you're referring to your team's lead developer as your boss, but that's a role he's clearly not competent for).
I explained it to him right away. This was the response he sent me: &gt; It's critical - especially since it's an email. This is one way we prevent people from adding recipients and sending spam through our form. We need to set up the checkboxes as individual fields. There's nothing that'll convince him that his code is wrong, especially coming from me. He believes I'm too inexperienced in PHP to know what I'm doing. I am very inexperienced in PHP, but I understand programming enough to figure out when and why things aren't working. I'll be out of this company in a pretty short time, so I'm not terribly concerned about it.
Well we are a small company. He is the only person who really knows PHP well enough to program the major apps. I have been teaching myself PHP as we go, but I still have a lot to learn. He's not the lead developer, he owns the company (inherited last year when his dad died). I keep telling them to hire someone who can code, but they keep trying to find someone who knows how to do both the design and the programming. Those people are extremely rare, and they certainly won't work here for the small salary he likes to pay. We have three designers on staff, I am the only one who is able to code as well as design. I'm proficient in HTML, CSS and jQuery, but still learning PHP. Of course I shouldn't have to bear the responsibility of all this programming in addition to designing and managing a staff of a couple other artists, but that's the way he likes to run his company. Sooner or later he is going to run his company right into the ground.
&gt; just thinly-veiled insults For someone who insults as openly and unnecessarily to criticize someone else for what they imagine to be veiled insults is rather ... hard to stomach. &gt; You offer no logical reasoning to support your claim that "a script which doesn't work everywhere is broken". There isn't need for logical reasoning to support a tautology. If it doesn't work, it's broken. That's what broken means. &gt; just thinly-veiled insults ... Maybe you need some more experience? I don't know. When you manage to live up to the standard you set for others, maybe you'll get some more interest from the people you came out of the woodwork to criticize, then criticized for being critical. Oh, wait, I forgot, the thing you say is a claim, which I say is a critique, is me not being critical. Right. (sigh) I'm quite bored of someone pretending I'm making insults when I'm not, insulting all throughout, then being complain-y about insults, then telling me that something I do every day at the real job he told me I needed to get (before complaining about insults) is unrealistic. Live up to your own standards, sir. I'm not particularly worried what you think of me.
I think it looks awesome, did you design it? Also I'd love to take a look at your sales app, we sell an invoicing application and were contemplating a new store app. Could you PM me a download link?
&gt;He is the only person who really knows PHP well enough to program the major apps. Uh. No he isn't. He's clearly demonstrated, both in code, and in argument, that he isn't capable of coding any web application at all. If that's the state of your code, then I could hack your site with both hands tied behind my back. &gt;but they keep trying to find someone who knows how to do both the design and the programming. Those people are extremely rare Sounds like I'm one of those rare people. &gt;and they certainly won't work here for the small salary he likes to pay. You're probably right about that. &gt;I'm [...] still learning PHP. With all due respect, if you do not have any past experience with PHP, then you probably shouldn't be writing code that is going to be used in a production environment. Educate yourself properly *before* taking the role of a PHP developer. &gt;Sooner or later he is going to run his company right into the ground. Sure sounds like it.
I agree with you completely. However, &gt; Educate yourself properly before taking the role of a PHP developer. I certainly wasn't hired here as any sort of developer. I was hired in as a graphic designer. Eventually they learned that I knew how to code HTML and CSS and gave me the responsibility of doing all the front-end programming (with no increase in pay). Then they fired their PHP developer and refused to hire another because the boss didn't want to pay anybody for something he thinks he can do himself. I started learning PHP on my own about a year ago. I'm certainly not clueless when it comes to PHP, but I do admit I have a lot to learn. Just the fact that I can understand why his script wasn't working, and that groups of checkboxes shouldn't all be processed individually, shows that maybe I understand PHP a bit better than my boss does. I'm no expert, but I understand what's going on and know where to look when I need help figuring something out (reddit is not that place - I posted to stack overflow first, reddit is just sometimes faster at providing a solution).
Thanks! I didn't design it. I learned very early on to team up with a designer. He's become a great friend and huge asset to making my stuff look professional. Sure, it's very basic, I'll give you some basic install docs too.
Does there need to be some sort of moderation of some kind?
not sure what you mean there, but digging through /r/php i found this solution - http://www.gentlesource.com/form-mail/ 
Awesome, would you be willing to pass on that designer's twitter/dribble/forrst contact details? I'm on the hunt for someone awesome right now. Thanks!
Not outside the context of training, and the guidance and code review that implies. Honestly, it'd be more impressive for a trainee to know about security concerns and how to mitigate them than an actual requirement. 
Fair enough, and I appreciate the answer. Vertically increased as watercraft.
&gt;I certainly wasn't hired here as any sort of developer. I was hired in as a graphic designer. Eventually they learned that I knew how to code HTML and CSS and gave me the responsibility of doing all the front-end programming (with no increase in pay) Definitely, but you really shouldn't do a job which you are not qualified for. You only end up deceiving your clients and end up delivering a bad product for which you later will feel ashamed of. &gt;I'm certainly not clueless when it comes to PHP, but I do admit I have a lot to learn. Just the fact that I can understand why his script wasn't working, and that groups of checkboxes shouldn't all be processed individually, shows that maybe I understand PHP a bit better than my boss does. And I agree. You are definitely better at PHP than what your boss is. However, that doesn't mean that you're qualified in working in this area. At least not yet. As a newbie programmer you do not yet have sufficient understanding of the [language](http://www.php.net/manual/en/langref.php) and the [APIs](http://www.php.net/manual/en/funcref.php), when to use what, and what constraints they have. You do not yet have a proper understanding of [design patterns](http://en.wikipedia.org/wiki/Category:Software_design_patterns), and how to use them in the proper context. You do not yet understand the [security](http://www.slideshare.net/joewalker/web-app-security) [considerations](http://en.wikipedia.org/wiki/Category:Web_security_exploits) [involved](http://en.wikipedia.org/wiki/Category:Injection_exploits) [in](http://www.php.net/manual/en/security.php) writing a web application. Truth be told, the web is a scary place unless you know what you're doing. I suggest you distance yourself from developing production code and instead concentrate on educating yourself in this area. One day you might be qualified working as a PHP developer if you feel passionate about it and study it hard, but until that day comes you should avoid having it as a profession. Good luck. 
&gt;There isn't need for logical reasoning to support a tautology. If it doesn't work, it's broken. That's what broken means. You're missing the point: no script works everywhere, and it's unreasonable to expect a script to work everywhere. You have to draw the support line somewhere or the most complex app you'll be able to build is a `print` statement. A script that's released with the intent to only work in PHP 5 isn't "broken". 
It is all built on top of a content management system. It simulates various abstract concepts like items, inventories, locations, markets, characters, and more! It has an integrated chat, and users have the ability to create bots that can interact with users and manipulate the state of the virtual world.
If using form-mail, make sure you go through the setup very carefully. Form-mail is notorious for being hijacked for spam. A spammer would use the script located on your site to send the spam, using YOUR bandwidth, and leaving you responsible for any repercussions. 
&gt; You're missing the point: no script works everywhere I'm not missing that. I simply don't think it matters. This script doesn't work on valid configurations, and it was an easy thing to prevent. &gt; it's unreasonable to expect a script to work everywhere. Well, that's not been my experience of how customers think. &gt; A script that's released with the intent to only work in PHP 5 isn't "broken". If the customer's machine is known to be running PHP5, I would agree. However, my opinion is that this is a metaphor which makes the actual failure in question appear to be something it isn't: a question of wanting the customer to keep up to date. My opinion is that a script should verify that the things it needs are turned on. I'm not saying it's a fact. I'm saying it's an opinion. I very much appreciate that there were no insults in that post. Thank you for the change in tone. :)
The problem with the JS-based ones is that things never seem to print reliably. 
I think you have the misunderstanding that my job is PHP developer. It isn't. The only things I really do with PHP for my job are this sort of thing. I build the form, then take the pre-built script and incorporate it into the form. My primary function is graphic design and front-end coding (HTML, CSS, jQuery). I am very proficient in those areas. I really don't have any interest in holding a job as a PHP developer, but I have enjoyed learning the language if nothing else for the ability of knowing what can and cannot be done. I've distanced myself as much as I can from it, but the way this company is run I have little choice but to jump into PHP once in a while.
any advice no preventing hijacking? i'm looking through the docs, but don't see many security enahcement suggestions. i'm planning on leaving the directory where script lives protected and adding captcha. anything i can beyond that?
Flex charting, which is free as of two years ago (wasn't initially,) does. It also looks quite good.
If you are *required* to use the script, then just use it and raise the bugs through the normal procedure. Don't forget to mention the security flaws around creating variables that the end user is able to put their own custom names to. Make it your bosses problem, and maybe he will see some sense. The "proper" way to process a series of checkboxes is whatever works. You can use arrays, or name them all uniquely. So long as the sending form and its processing engine are aware of what the names are, then that is what really matters. Oh, and using unique names is not the same as having to *type* lots of unique names; PHP can do the donkey work for you.
&gt; there's nobody over his head Yes there are! Hackers. He will get burned by them one day, using his script.
Make sure the referring server is explicitly set to your server so someone can't call the script from spams-r-us.com for example. tbh, I haven't used or looked at form-mail in at least a couple years. They may have improved on security issues. It may take a bit more work to set up and use, but [phpmailer](http://phpmailer.worxware.com/) works great for handling emails.
For sure. We've had it happen once or twice already. I'm tempted to give out the URLs to some of these forms, but I'll wait to do that until I'm no longer working here and won't have to help clean up the mess. ;)
You can have a perfectly clear error message (you were assuming there wasn't one) and people are going to complain when it shows up. Saying "Error: The function chmod() is required by this script and is not enabled on this server. Please contact your server administrator / web host." is still enough to make a lot of idiots think the script is broken even if it says 20 times in the documentation that chmod() is required and there will be an error if it is not available.
&gt; You can have a perfectly clear error message (you were assuming there wasn't one) No, I'm not. Original poster said so. &gt; Please contact your server administrator / web host." is still enough to make a lot of idiots think the script is broken In my experience with customers, a cryptic PHP function missing is interpreted very differently than a "this server needs to have a small piece of configuration changed for this script to work" message.
&gt; The ones you require are sufficient Then on a large project you end up with a large list like fopen, chmod, strtolower, strlen, mysqli, array, unset, echo, print_r, count, implode, explode, sha1, fread, chmod, array_merge, rand, mail, microtime, ereg, gd_info, getimagesize, &lt;half the other gd functions&gt;, and so on &gt; There is no such affordance in PHP. Next speculate that someone shut off for loops. Uh, there is a php configuration line to disable functions. I have also seen a few incompetent server admins abuse that thinking it would improve performance/security. &gt; disable_functions string &gt; This directive allows you to disable certain functions for security reasons. It takes on a comma-delimited list of function names. disable_functions is not affected by Safe Mode. Any and all built in classes can be disabled as well &gt; disable_classes string &gt; This directive allows you to disable certain classes for security reasons. It takes on a comma-delimited list of class names. disable_classes is not affected by Safe Mode. This directive must be set in php.ini For example, you cannot set this in httpd.conf
My modification works? i mean, someone installed my modification besides me?
Nobody else besides us has it installed to my knowledge. I haven't had a chance to incorporate any of your changes into my copy. Did you just replace all the short tags?
yes.. we need to test if that fixed the problem
Well.. it fixed the problem for you at least?
&gt;I think you have the misunderstanding that my job is PHP developer. No, I do not hold the misconception that you're hired as a PHP developer, however you *are* developing in PHP. All I am saying is that if you do not have the qualifications of a PHP developer, then you should not produce any code to be used in a production environment at all. &gt;but I have enjoyed learning the language if nothing else for the ability of knowing what can and cannot be done. And that's fine and dandy. However, you're new to PHP development, you do not have any qualifications and your "learning experience" should not be put into a production environment. Your code is most likely *wrong* and riddled with security holes. That is why your education should take place separately from the work you produce. If your boss put you in charge of that without proper qualifications, then he is wrong to have done so. Just because you can fold paper airplanes, it does not mean you're an airplane mechanic, so to speak. If you attempt it without having a proper understanding of what you are doing, your plane will crash and people will die.
I assume you mean like a free Crystal Reports? We've messed around with [Pentaho Community Edition](http://community.pentaho.com/) a little bit, but it has a wicked steep learning curve. I realize that it is java and not php, but I wanted to bring up the idea that complexity is almost as big a barrier as expense for report generation. Of course, the challenge becomes making things flexible while removing the complication. Side note: others should check out Pentaho. It is pretty cool if you take the time to set it up and learn it properly. **edit: added a link to Pentaho**
This site looks really good, but do not use blue for emphasis! All text that is blue should be a link, and (almost) all links should be blue. I thought the highlighted words in your intro paragraph were links, and when they were not, it made me wonder if your site is fully functional. Other than that, HOLY CRAP! your site looks good.
The [guide](http://www.yiiframework.com/doc/guide/) is pretty good at getting the basics across. The class reference is pretty nicely done, although there could be more examples.
I like the look of your site, but consider better contrast on the links at the bottom of the page. The thin white text on a light blue hurts my eyes :(
I am going to do the same this week, not all guides are up to date, or are missing something.
I agree with this comment. I think emphasis in blue is actually a pretty significant usability flaw. Otherwise, I think it looks good.
I wish there were a price for student.
Jasperserver + Ireport 
By default, checkboxes (using the most minimal syntax) will not appear in the submission unless they are checked. With all of the javascript and html options, you will see many different ways to handle checkboxes. I would recommend using a Form/Validation API , such as Zend_Form/Validate.
Looks really good, very professional site. Are you planning to add photo galleries?
I've heard people say this about Zend_Db before, and it's always from someone who has used an ORM with ZF. Both Propel and Doctrine provide an amazing API compared to a model class extending Zend_Db_Table. Zend_Db's API is syntax-heavy and weak compared to an ORM's. You just don't get a complete model with Zend_Db. It can be described as the difference between having simple rows of data or having a large set of inter-connected objects. The magic finders are amazing. Having the ability to control queries and filters between parent and child objects is pretty awesome too. I've spent most of the last 6 months working full time with ZF+Doctrine, Propel. I've done more with Zend_Db.. It's apples and oranges, but ORM's are awesome.
It looks great, but I would strongly suggest using proper URLs. Actions should not be GET parameters, they should be in the format /controller/action/, with the details of the action as GET parameters if necessary, though POST is preferable for things like adding items to a cart, so that going back in the history doesn't automatically add another item to the cart. RESTful design is especially important for ecommerce, as it ensures that your state is apparent to the user.
There appears to be absolutely no signs of a file naming convention. Looking at a few files: * buy_from_user.php * changeprofile.php * variablesAndFunctions.php * w.php What the hell? ----- Don't use MySQL or MySQLi, use a database abstraction layer like Doctrine so that it's available with almost any database. ----- The concept is OK, but the execution is terrible. Are you new to PHP?
I disagree and only for a marketing purpose. By using basic GET routes, you can have any page add something to the cart and not force redirection. This is good if you want to have a landing page and allow someone to add something to the cart, or deep link directly into the site to go to a non-cart page without using redirection. Edit: to be honest, I originally had the add to cart url as /cart/add/:product_id but decided to an action based parameter so any page can add something to the cart.
Yup, that's in the 1.2.0 release due out soon (hopefully!)
It's been about two years since I've done anything with it, but Zend_Db is very simplistic compared to something like Doctrine. For example, it doesn't generate models from the database, and it's a chore to deal with relationships. The system I work with is extremely dependent on relational data, so Zend_Db just doesn't cut it. I'm not saying it's some awful piece of crap, but it's a lot less powerful that what I need it to be.
Thanks for pointing this out. I'll be tweaking it tonight.
yes
Thanks! The designer I had build it will be really pleased. I'll be tweaking the colors tonight.
I like to try and use [Seagull Framework](http://seagullproject.org/) for all of my projects.
I'd be interested in the designer's info also -- I might be able to offer some work if he's interested. Your site looks great. incidentally you can only order a max of 5 licenses/hours of support, and it say 51% off when it's only 50%.
Funny story time. Two years ago my grandparents were going on vacation and were being very progressive and ordering their car rental online! Colour them confused, though, when they were asked to confirm their order of 14 rental cars. You see the car rental company used GET parameters and just so happened to print out the details of the order on the confirmation page. My grandparents wanted to save these details so they saved the page as their homepage and every time they started their browser a new order was made. People don't know how URLs and the web work, if you open even a small door for someone messing up then they'll find a way to do that. Not having RESTful design is actually a problem. If you want to have deep links or allow someone to add something to their cart then have a GET page with a button to confirm, which uses a POST request.
&gt; Then on a large project you end up with a large list like fopen, chmod, strtolower, strlen, mysqli, array, unset, echo, print_r, count, implode, explode, sha1, fread, chmod, array_merge, rand, mail, microtime, ereg, gd_info, getimagesize, &lt;half the other gd functions&gt;, and so on Almost none of these are disableable, and it's nonsense to want to do so. String to lower? Array merge? Microtime? C'mon, man, who are you kidding? You are stretching miles to cover for that a script whose entire purpose was to chmod a few files didn't check whether chmod, a common function to disable, was disabled. Who would shut off implode and explode? This is nonsense. I'm done.
This would have been executed far nicer with solid OOP. Extensible classes and interfaces would have allowed you to ensure classes adhered to the specification while hiding a lot of functionality from the user and allow them to implement on the bare minimum.
Maybe he just wants to keep his job. Not everyone can afford to tell their boss to fuck themselves and hire a damn developer.
Look into BIRT if you want a java crystal reports replacement. http://www.eclipse.org/birt/phoenix/
FUCK YES
Your boss is a dicksniffer. Tell him he should enable register_globals, because that little snippet essentially does that.
seriously, checkboxes blow goats.
More effective maybe: Just use a multi-part HTTP response, and continually send images down the pipe, keeping track of the time each part is sent at.
Looks interesting. I have a client in need of a site that would have some of the features this offers. I'm pointing him to your site so he can take a look and, if he goes ahead with it, I'll be the developer leading up the project so I hope your code is clean, object-oriented and modern (and I expect it is... looks very nice from what little I saw on the site)!
All of your call to action buttons ("Learn More", "Checkout with Paypal", and "Add to cart") need to be a higher contrast compared to the blue. The site looks good, but I'd suggest running some A/B tests on those buttons.
Yes this would be awesome. PHP needs something on par with Java's Jasper Reports. 
Yep true. But you can use your Zend classes within Cake :) Zend has a few nice classes that I use on occasion in other projects. But as a cohesive framework it just doesn't do it for me. Too big, too slow and a really lousy model layer...
Your links and headlines are the same color. That's very confusing - I kept trying to click on headlines and getting annoyed. Can't read the links at the bottom without squinting. White text on light blue background with a tiny shadow?
I downloaded the code with the intention of rewriting it to be cleaner, but it's too chaotic. I would split classes into a separate folder, separate the html output and php code as much as possible, and avoid things like the hardcoded references to "http://fancey.ca/antischismogenesis/". The system should auto detect which hostname it's running on and make the url available as a global variable. Maybe by implementing the registry pattern (here is one of the first results from google for that http://www.phppatterns.com/docs/design/the_registry - looks alright as an explanation) Things like addrelation.php look like they should be a method to a relation class, the function chatline should probably be a method addLine to the chat handling class. As others have mentioned, it would also benefit greatly from database abstraction, maybe with the default being SQLite, so it's instant to get it up and running for downloaders with some demo data (you could ship a demo db with the download) I'm trying be constructive here, let me know if you want anymore feedback since I have a few more ideas for improvements. 
A lot of the suggestions here would not happen in the real world. In general you won't have much control over client machines if you're a contractor for a contractor like this. Personally I've not been in this situation but I would just add checks in the init/config file of the script checking for PHP's safe mode (or other relevant options), if it was enabled, the script would throw an exception clearly stating the reason, and refusing to run any further. Wording the exception message clearly placing blame on server configuration and ensuring that it **DOES** run once that setting is fixed should solve your problem. It also sounds like you're quite inexperienced with PHP if you made many changes to the script in an attempt to fix it before realising the actual error, leaving the script in a poorer position than it started. Scripts like this end up as entries on dailywtf!
In addition to the issue that's now solved, you've missed a request variable being escaped in your code. A user can submit HTML in $_REQUEST["media"] and have it get through to the email. This could be used with the fact that the values of the other variables are not checked to spoof the format of the email. By that I mean that $_REQUEST["fName"] could be sent as "Adam\r\nEmail: blah@blah.com\r\nPhone: etc." because the check you do only escapes html chars.
I'd like to see the contract if you find a good one, too.
Yeah I'm changing the colors of the non-links. Thanks.
Absolutely, have you used any of the PHP A/B testing frameworks?
Yup, it's very clean. You can download some sample code to see what it looks like. I appreciate the referral!
My problem is with nginx rewrite rules for ko3.
Don't want to get in a huge fight, but RESTful doesn't mean just having pretty links. calling http://site.com/action.php?action=whatever&amp;id=1&amp;name=bob is a perfectly valid RESTful call (through GET, POST, PUT, DELETE). Any web app that uses sessions is not RESTful as well.
Thanks! He said hit him up on Twitter - http://twitter.com/#!/conceptualitis Thanks for finding the bug, I've fixed it.
beacons are classic spammer tactic - "how many of these million and one email addresses on this CD are worthwhile?" Expect to have your spam filter scores adjusted upwards. Also pretty sure lookOut and other desktop mail clients also need the user to confirm in order to load content from URL's, because it is a spammer tactic
I was being unclear with my wording of GET parameters. You can most certainly use query string parameters, the URI you POST to doesn't matter much so long as you actually POST and not GET. That way the browser knows not to resend the same request multiple times and will warn the user if they try to.
&gt; Almost none of these are disableable, and it's nonsense to want to do so. String to lower? Array merge? Microtime? Yes they can http://i.imgur.com/YjwJD.png The only ones I tried that couldn't be were array, echo, and unset which are understandable because they are not functions. &gt; C'mon, man, who are you kidding? You are stretching miles to cover for that a script whose entire purpose was to chmod a few files didn't check whether chmod, a common function to disable, was disabled. Nah, I am not trying to cover for this script at this point. I am just arguing about your point that any programmer that doesn't check any function that can be disabled before using it is incompetent. &gt; Who would shut off implode and explode? Did you miss where I said incompetent/stupid admins repeatedly and that I have seen some of them disabled in the past? Anyway, the point I was trying to make is it is very unpredictable what some admin is going to have disabled on the server. It could be a version of php where the function is broken, for some reason you could be on a read only filesystem, maybe suhoshin is installed and configured in a way that conflicts with your script (disabled functions there instead of php being one basic example), etc.
Thanks, but I quickly realized what the problem was and started working my way down the list of errors (due to the features I used not being available, so had to create workarounds) it was throwing. Then once I arrived at the `chmod()` issue I couldn't go any further. Thanks for throwing out that inexperienced jab, though.
&gt; Nah, I am not trying to cover for this script at this point. I am just arguing about your point that any programmer that doesn't check any function that can be disabled before using it is incompetent. Man, if only this is what I actually said. &gt; Did you miss where I said incompetent/stupid admins repeatedly and that I have seen some of them disabled in the past? Chmod is a *common* disable. He should have checked for it regardless of what comically moronic admins might do. The default suhosin install, for example, which was in several linux distros for years, which is your own example. I'm not arguing for checking for any little retarded detail. Just the obvious common ones on which you know your script is primarily dependant. Stop inflating what I said into a giant infinitive. Yes, when you change it that way it becomes absurd.
&gt; I'm not arguing for checking for any little retarded detail. Just the obvious common ones on which you know your script is primarily dependant. You never were that specific. Your response to 'which functions should you list' was 'the ones you need' (which would be every little function you used). &gt;&gt; Man, if only this is what I actually said. &gt; To be clear, if a script fails because of client settings, it is your fault. The script should be checking settings and either accomodating them or failing in a graceful manner which allows the client's client to adjust their server. &gt; You delivered a script which doesn't work everywhere. Therefore you are at fault. It's really that simple. &gt; Are you done? I don't like getting talked down to by obvious amateurs. I apologize that I misinterpreted your posts then.
I'm okay thanks I don't need to see one.
&gt; You never were that specific. Your response to 'which functions should you list' was 'the ones you need' (which would be every little function you used). I also frequently pointed out that chmod was a very common thing to disable. I also mocked checking things that never get turned off. I also pointed out that I was advocating supporting common standard configurations. Etc. &gt; I apologize that I misinterpreted your posts then. I appreciate your saying so. Upboated for the display of good faith.
whoops, I can't believe I didn't notice that I missed that on media. Thanks! I'm not too worried about people trying to maliciously spoof the form, because it's only used internally. Thanks for your help!
no worries, that's what i'm here for
It is a work in progress. I wrote the CMS portion on my first engineering work term, then left it alone for many years. I realize there are many imperfections. I wasn't releasing this as a final product or anything, it is more like an advanced prototype. I was certainly hoping to get help with its construction. When I started this project (with the old project), I decided on a policy to not modify code that was ugly but functional until after I had reached a plateau in the development of the game code. So, changeprofile and variablesandfunctions are holdovers from the old cms code, buy_from_user is game code using my current choice of naming convention, and "w.php" is a holdover from the minimalist chat I used as a starting point for mine. The code from variablesandfunctions has been slowly migrating to either within the CMS itself (so the site can edit itself) or to db_interactions. tldr: There is a lot of me thinking: "if it ain't broke don't fix it.. yet, because you probably don't know how best to fix it" going on, so I appreciate all the help.
Thank you for that. I would absolutely love help with this. I am certainly not the best programmer.
No method is fullproof but this one is about as close as it gets if this is something you really want to track.
I should mention that it is looking for jquery and magpierss in /apps, and that it stores a session variable for each site aspect to remember if the user wants it visible.
Certainly! This is quick and dirty.
Unless it's less than 500 lines, that is never an adequate excuse. Never.
I'm positive that MagpieRSS is **dead**. It was last updated in frackin 2005 and doesn't even support any RSS feeds any more. In 2008, when I was building http://www.redditmirror.cc/, Magpie couldn't even handle Reddit's pretty standard RSS feed, so I think ti's almost completely useless.
Will you ever forgive me?
Do you recommend a replacement?
I recommend rewriting it from scratch.
I disagree, I will continue to improve it.
If you don't already, use RSS. It is a far more efficient way to take in a lot of information quickly. These are my suggestions: * http://akrabat.com/feed * http://feeds.feedburner.com/shiflett * http://codeutopia.net/blog/feed * http://matthewturland.com/feed * http://blog.astrumfutura.com/feeds/index.rss2 * http://weierophinney.net/matthew/feeds/index.rss2 * http://www.phpdeveloper.org/feed * http://feeds.feedburner.com/sebastian-bergmann * http://ilia.ws/feeds/index.rss2 * http://www.planet-php.org/rss * http://epixa.com/feed (disclaimer, shameless self promotion) edit: I added the feed for planet php. I don't know how I forgot that... edit2: I added formatting to link list so they weren't all on the same line.
Or, if you dont mind a bit of noise: http://www.planet-php.net/ It's a collection of good PHP blogs, aggregated into an RSS feed, or just view them straight on the site.
Yes, if it didn't suck! I've never seen a good reporting tool at any price. They all try to do too much and fail miserably by making reports clunky to write and cumbersome to deploy. What I want to do should be so incredibly simple: Write a SQL query, add parameters that the user is prompted for, and output the report to HTML, CSV or Excel.
I'm sorry sir I will gladly give you a complete refund.
It is undergoing constant never-ending revision, I assure you.
It's possible for base64 to include characters that should be escaped. I use these functions to do urlsafe base64 encoding/decoding which helps when you are sending via GET like I see in your code: &lt;?php function urlsafe_b64encode($string) { $data = base64_encode($string); $data = str_replace(array('+', '/', '='), array('-', '_', ''), $data); return $data; } function urlsafe_b64decode($string) { $data = str_replace(array('-', '_'), array('+', '/'), $string); $mod4 = strlen($data) % 4; if ($mod4) { $data .= substr('====', $mod4); } return base64_decode($data); } ?&gt; I am not sure if this is the exact cause of your problems, but it very well could be if IE is acting differently with special characters. The other issue could be that IE is actually truncating the URL. Serializing and encoding can make the string quite long. I would also say it could be the server truncating, but if Chrome and FF work then this is probably not the case. If possible, you may have better results sending your 'pdf' parameter via POST.
The maximum URL in IE is 2037 characters. If your get request is too long, that's why it's breaking. Use POST or a cookie instead.
The client wants a link to the PDF in an email but not as an attachment. They also don't want to save the physical PDF on the drives. So doing a query string is my only option (and it is a Bill of Lading with a lot of data so not sure how to shorten the URL). Any ideas? A cookie or POST wouldn't really work as a link. Does tinyURL have an API? lol 
PHP-FPM is compiled in the maverick PHP5, so I don't think all the guides out there is right when they are compiling it themselves.
You could serialize the data and throw it into a MySQL table with an auto-increment id. Then you could just pass the id along to your script and retrieve the serialized data from the DB. Unfortunately, this would require potentially a lot of writes/updates to the DB for each email sent. However, if the data is less than 1MB, you could store the serialized data in memcache and make the md5 hash of the serialized data your cache key to pull. The only downside here is that items may be removed from memcache as it needs more memory so the link would only work for an unknown amount of time.
What environment are you running on? I've seen this happen before on shared hosting setups.
&gt; They also don't want to save the physical PDF on the drives. Store the serialized array either in a (persistent) sql database or in the filesystem, and then reference its ID/filename in your GET parameter. - it won't take up as much space as the generated PDFs.
Great ideas, thanks! I think I'll go the table route, mostly because it is not a high traffic site, and the link in the email goes to the admin notification email, so there will only be one guy looking at it / printing it off. Thanks for the tip, that was indeed the case, the URL that was breaking was 2107 characters long. 
check if your php was compiled with mysql... 
Dzone.com usually has a few good tidbits each day
As Phifty suggests, shared hosting or load balancing could possibly cause this, perhaps if one of the requests jumps to a server that isn't configured exactly like the rest.
Is only 1 server and is a dedicated server
Exactly. Please link to an phpinfo() -page or otherwise give some specifications of what kind of server setup you have. For example, version numbers for webserver, php and every plugin that php uses. Are you running under windows or linux?
Are you dl()'ing extensions?
Dying hard drive? Corrupted memory? Sounds hardware related to me.
I haven't used a PHP framework for that purpose. I have used Google Web Optimizer, which is amazingly simple, and pretty useful for smaller tests like this. 
Which OS, which httpd? I run a dedicated server with FreeBSD (and have previously done so with both debian and ubuntu Linux) and never ran across this problem. However, I always compile both PHP and apache myself, as opposed to installing from binaries. Are you running with safe_mode on? Just trying to brainstorm here.
APC or other opcode caching?
phpinfo please.
Would like to add a few I like * http://derickrethans.nl/feed.xml * http://blog.tabini.ca/feed/ * http://www.lornajane.net/rss.php?version=2.0 * http://blog.calevans.com/feed/ * http://caseysoftware.com/blog/feed * http://funkatron.com/site/rss_2.0/ Most of these are syndicated through phpdeveloper.org and other PHP news sites.
I also LOVE CakePHP. I've been using it for about six months, and my friend and I have already launched a complete site for [fun online games](http://befungames.com) :)
PHPDeveloper really needs to be at the top of this list, best way to get a curated digest of what's what.
This is a great addition to php's toolset. And for those, who want greater flexibility, https://github.com/indeyets/appserver-in-php is a Ruby-Rack/Python-WSGI style solution which gives you possibility to initialise objects, open db-connections, pre-warm caches, etc. before serving requests. Provides HTTP, SCGI and Mongrel2 interfaces
Can be anything from a DNS problem to a load balancer/cache issue. As a minimum, post phpinfo() output or better yet, show a live site that does this.
by the way, great discussion on Hacker News: http://news.ycombinator.com/item?id=2281724
My hat is off to you, as the MVC misimplementations in PHP world are a pet peeve of mine. It annoys me when people treat MVC as a cure for all diseases while having not even the slightest understanding what MVC *is* and perusing application frameworks that are, at best, blind Rails clones. I've made this argument quite loudly during PHPLondon 2008, and I still have to do this occasionally three years after. 
&gt; Many MVC frameworks get pretty unhappy if you don't have an associated view so you usually create stubs (empty files named correctly and in the correct place). This is by itself pretty reasonable. Because of the nature of HTTP, many frameworks have the HTTP request-response model hardcoded into the request processing chain. 
I've tried using Zend Studio four or five times now and it always just seems laggy and unresponsive even with a bunch of tweaks I've always given up on it. I'm back on Netbeans again. It's free, quick and supports most of what Zend studio does.
Great news! LAMP turns into LMP!
I wonder why it took so long, this should have been already there for a long time.
Make your session variable into an array. One entry for each tab that's open. When you draw the tab, send the array key as a hidden variable so it gets passed around through the process. Then each one can be managed independently.
&gt;$query = "update articles set modified = CURRENT_TIMESTAMP, username = '$this-&gt;username', url = '$this-&gt;url', title = '$this-&gt;title', description = '$this-&gt;description', points = '$this-&gt;points', ranking = '$this-&gt;ranking' where id = '$this-&gt;id' "; 
A) Why do you randomly double-quote out of the string sometimes but not others? B) We don't know what the column types are so it's hard to guess whether there are issues with, e.g., ranking. C) Are there apostrophes in any of the text values? Are you using mysql_real_escape_string() to deal with them? You may want to use mysqli and prepared statements to avoid this issue.
If one or more of the unquoted variables is empty (`false` or an empty string), then the query would look like this: points = , ranking = , where id = Which is obviously wrong. This could probably be averted by using prepared statements (which would at least not break the query) or quoting the values, even though they're integers (MySQL doesn't care that much).
With Sqlite built into PHP, all you need is LP!
Thanks for the kind words. :)
LNPP all the way. It would be insane to serve actual users with a PHP server.
I got into a huge argument on ##php because people didn't like this:-\
Because wampserver and xampp are SOOOO hard to install on Windows, Linux, and OSX; apt-get install apache php is *so* hard on other boxen.
On "Built in web server for PHP (wiki.php.net)" all of my comments are getting deleted. By the moderator???
that sounds like a good idea, but then how would i know which tab is supposed to use which entry in the array.
The key of the corresponding array element would be embedded in the form and in any links.
That is my least favorite thing about using python on web. Just give me a damn folder to drop my files in.
So it would pronounced like "limp"? Oh that sounds stable...
Says it's a request for comments, but I can't see where to leave any. If they're building a server from scratch, it should have UDP support.
Linux Nginx PostgreSQL Python? ;)
I think alot of people are missing the point of this addition. It's not there to replace Apache or any 'real' webserver. It's just really great for testing and development- not production! * Want to test some code you are writing? php -S * Some weird code in a branch? php -S * Run your branch and trunk at the same time? php -S There is no configuration. You just cd to the directory and you're ready to go. It's like WEBrick for Rails or django-admin.py for Django. Why this is better than setting up Apache for development- * No extra software to install * No configuration necessary- means you can don't need to think about setting up a new vhost to test the code in your branch or whatever * You can rapidly build/test multiple apps on your dev machine. With apache, you'd have to setup a new vhost for each app. In the end, it's just convenient. There's nothing that it can do that Apache cannot- but it makes working on multiple apps/codebases/branches really simple. If you don't like it, don't use it.
comments should be left on php-internals mailing list http://php.net/mailing-lists.php
I'd say the best thing this could possibly help is making it even easier for absolutely incompetent people to "learn" PHP. That's not what PHP needs.
Wouldn't you want your development server to be an exact replica of your production server? This is an okay feature, but it's really only useful for a small handful of users who want to test something without installing a web server and don't already have one installed. But even then, it's not hard to download WAMP or MAMP. Small web servers that ship with dev frameworks in other languages, like web2py's Rocket, have the added benefit of being useful in the real world: you can actually run a site on them. I don't see myself using this in a real world scenario.
Some guy recently came up here pimping his social network software for $49. It looked like a pretty decent system, and comes with the source code. It's called Kwolla IIRC. Yeah, here is is: http://kwolla.com
You are aware that there existing solutions in PHP to do that? http://pear.php.net/package/HTTP_Server or Nanoweb come to mind. They need some work to start them up as one-liner. But it's certainly an easier route than reimplementing an NIH webserver PHP builtin. In particular this route would better mimick what Ruby and Python have than a half-baked and inextensible solution. (Though the general idea for testing purposes is sound.)
One of my current projects has a requirement for a combination online directory and social network for school alumni. This looks like it would be a good starting point..! Can you shoot me a message with your contact information so i can bounce a few questions off of you?
I tried to love Zend Studio, I really did. I've spent the past year jumping around from IDE to IDE, and I honestly have to say that PHPStorm 2 is the best IDE I've tried to date. Integrated FTP (ZS doesn't have), integrated version control, debugger, great project management, easy syntax color settings, etc etc. I really can't believe that as expensive as Zend Studio is, that it doesn't come with an integrated, easy to use FTP client. I don't mean what it currently has, where it attempts to download all the files off the server your specify, but something similar to what Aptana Studio has (they're both Eclipse so it's possible!)
Word. That said I still use PHP5 with FPM as I have a fair bit of code in PHP. Also I use Memcached quite a bit, and I'm looking into using Redis for things :) At one point I was having PHP driven cached sites (so mostly static) output into memcached, and nginx reading directly from that, so getting 35,000+ requests/sec with httperf :D:D
Sure, hit me up at support@kwolla.com. I know it's a generic email, but I want to keep everything related to Kwolla under that email. Thanks!
Laziness, inertia, fear of "the new".
Where do you get the idea that Drupal is more content oriented? You really should look at Drupal + Organic Groups.
I'm just now getting into Python and I'm loving it. I really hope it overtakes PHP in terms of website development popularity. What made you choose Redis over something like Mongo? I was thinking about what I could use a key-val store for, but it wasn't much that I couldn't just use a normal relational database like PostgreSQL or SQLite.
[Social Engine](http://www.socialengine.net/) is pretty good. I have used it for a project once, it is pretty powerful, uses smarty templates, etc.
it's for bullshit rubyists who need their "beautiful language"'s framework's features to live I say they should go rot somewhere
Most webhosts are unwilling to compile their own php version and instead rely on the operating system's package manager. Many of those operating systems focus on stability, so they take a long time to do a hop from one major version to the next. PHP 5.3 may look like a minor update from 5.2 to 5.3, but since it incorporated a lot of the PHP 6 trunk it actually is a bigger change than you'd typically see in a minor update. As such it's taken a bit of time for many operating systems to update to it. The only reason I can image people using php4 is for legacy reasons. There are some specialty hosting companies that still offer it specifically for people with legacy apps, but there is no excuse for a regular hosting company to run it.
Cause things will break on occasion.
Drupal is too heavy for something that's expected to have lots of concurrent, authenticated users since Drupal's caching mechanisms become practically worthless. You can do it - and it's good for stuff like customer portals and extranets and stuff like that, but I wouldn't build a full on social network sort of site on it. It'd quickly cripple any typical hosting package.
Check out [Elgg](http://elgg.org) It's not a very compelling product out of the box, but I've found it to be an easy framework to build on.
Thanks! That's me. Hit me up, support@kwolla.com and I'll try to make it as painless as possible.
You're right, PHP should become a private language only open to current PHP xperts (read: elitists)... With XAMPP (and other similar packages) any idiot can already download and have LAMP up and running with a few clicks. You and I and everyone else were incompetent programmers at some point as well.
I present to you [Pressflow](http://pressflow.org/) + [Varnish](http://www.varnish-cache.org/) - handling more than 200K views per hour on a single server with 12GB of Ram. Takes approx. 2 hours to set up. If you think you can cripple that, take a whack at [Pantheon](http://getpantheon.com/) which we couldn't kill in load testing on a small AWS instance it still ran strong at more than 400K requests per hour. Of course, if you really don't want to examine that platform, you might want to check out SilverStripe (although you'll run into some major caching issues with them.)
I take your point, but that's clearly not what is meant here. Apache is a robust platform, but with much configuration and resources to take into consideration. This is simply a tool to quickly launch a server and develop / test some scripts.
Stop hosting with Godaddy (Or other major corporation) and go with one of the smaller hosts and you will most likely get an updated and sane environment.
...I said "typical hosting package", not "top of the line private server". The fact that you even would need to consider something like a server with 12GB of RAM to squeeze out only 200K views an hour kind of proves my point. You're also ignoring the "concurrent authenticated users" angle. Varnish is a caching layer that's going to perform best serving content to anonymous users. Don't get me wrong, I love Drupal, I just think it's poorly suited to this particular use case.
Ditto on trying Zend Studio repeatedly. Nowadays I use TextWrangler on OSX, which is very lightweight but does a great job of handling remote projects and has all of the editor options I could want.
The problem with these sort of things is that PHP's memory management (or lack thereof) and garbage collector are far too primitive to serve well for long running tasks. Even the PHP maintainers have gone on record as saying that long-running tasks is NOT what PHP is intended for and shouldn't be used as such.
&gt; Wouldn't you want your development server to be an exact replica of your production server? Precisely. And who will be doing PHP development without having such an environment set up on their dev machine anyway? I really have a hard time seeing the point of this.
&gt;The fact that you even would need to consider something like a server with 12GB of RAM to squeeze out only 200K views an hour kind of proves my point. You're also ignoring the "concurrent authenticated users" angle You have no idea what other data processing is going on that server. It is a community related to a desktop game processing results of close to 1M races per week, including detailed statistics on every competitor, the conditions of each race, the distances, the attendance, weather conditions, weights, etc. It handles our internal reporting and marketing systems and occasionally does some heavy lifting converting uploaded video through ffmpeg. Around 60% of the users at any given time are logged in. You're also making a major assumption as to what we have for server capacity, we are not remotely taxed to the hilt - If I build a Wal-Mart sized store and open shop, I can handle a lot more than the 12 customers per day that happen to stop in. 200K is what we happen to have in traffic, not what the server is capable of. We have 12GB because LiquidWeb gave us a free upgrade quite some time ago because of a problem on their end. A single dedicated server is not by any means atypical. Do you think you're going to build a social network on a $9.95 a month Dreamhost account or something? The load testing we had done for Pantheon was for a similar use case for the United Methodist Church, they get several million interactions per month on the site. That 400K were all concurrent authenticated users. I just hate to see the package disparaged by FUD. I provided an alternate suggestion to you, and by the AWS is free for a year if you want to go the route of actually having some control over your environment. 
Right, but just the fact that *you* are intelligent enough to realize that this isn't a production ready server doesn't mean that people aren't going to use it as such. PHP's history and community are littered with examples of people using things to do things they weren't intended to be used for and PHP's got a reputation - only partially deserved - for being only used by incompetent louts because of these things. Adding to the list of features that shouldn't be used in production, but are available anyway, is only going to exacerbate this situation. And even then, I don't agree with having a separate webserver for development and production. PHP isn't Java in that the entire operating system and stack it relies on isn't entirely abstracted away and there are bugs that are introduced migrating from Apache -&gt; nginx + FPM or any other webserver migration, at least in a really significant portion of PHP. This will, I think, increase development time because of that, especially since the only possible savings from this measure are in the time spent setting up a webserver (which honestly is no overhead at all, as your development environment should be a complete mirror of your production environment and there's no excuse to not have it that way that I'll buy). So you increase deployment complexity, which is a constant change in complexity, to save a few minutes at the front of a project. Not a good idea. As a side note, that I'm sure is gonna earn me a ton of downvotes from people that haven't bothered to read the PHP source, based on the quality of PHP's source (in C), I have absolutely no faith that they'll be able to develop a webserver that's suitable for much of anything.
But why would you use this instead of a clone of your production server? Certainly you're not developing on a completely different web server than what's in production. I could see it being useful if you need to load up a web server very quickly for a test or something, but when would you ever need to do that and not have Apache or another web server installed?
A few months ago I was actually hunting for a shared hosting plan that offered 5.3 - I found only one, Apis Networks. I swear that day I looked I must have asked close to 50 hosts if they offered 5.3. Hell, not even A Small Orange offers 5.3. Apis was great, but they're still on the original 5.3, and I've been wanting to incorporate some of the newer features into my own projects, so I've gone dedicated with NationalNet.
&gt; The problem with these sort of things is that PHP's memory management (or lack thereof) and garbage collector are far too primitive to serve well for long running tasks that's not true at least since 5.3 was introduced. PHP always head reference-counting based memory management and 5.3 added circular-references garbage collector. this combination works good and AiP (appserver-in-php) showed itself as a stable and fast solution. It is used in production on several projects without any issues
The fact that the garbage collector is functional doesn't mean that it's not primitive. It's still an iterative, stop-the-world garbage collector without limited pause times. Reference counting memory management with immediate OS-level (de)allocations is also incredibly primitive in the world of memory management. On top of all of that, it's presumably possible to have a GC pause that's unacceptably long - say 2-3 seconds. PHP also has a storied history of memory leaks in the core and, even worse, in various extensions. I'm not ready to trust that PHP is leak free. There's a reason the people who write SAPIs for PHP put periodic process restarts in their SAPI - because PHP does leak memory over time and a long running process should be able to run indefinitely without error (e.g. I've seen tomcat instances that have been alive for upwards of 2 years, I actually have access to a server where Apache hasn't been restarted in 3 years, etc). I don't see PHP's runtime (the Zend Engine) being stable enough for this, not now and probably not ever, because it's not a goal of the developers. AiP shoehorns PHP into a solution that it wasn't intended for. PHP has never been, nor never will be, developed to run anything but scripts in their execution model - run, then exit - and if that never changes, tools like AiP aren't ever going to be truly suited to the language they're written in. There are tools, like Quercus, that accomplish this (and PHP on the JVM is much, much faster than PHP on the ZE) already and that are much more secure, fast and stable than something written in PHP can offer.
lol, dude you need to relax. If you don't want people to assume, you should provide accurate information in the first place. You can hardly blame me for assuming the box was dedicated to the Drupal site when your comment implied exactly that. 99% of sites start on a shared hosting package then scale up... unless there is major money behind the project to attract users quickly, or an established community. Drupal murders most shared hosting packages once the authenticated users add up and will eat up a VPS really quickly too - far faster than a piece of specialized software that doesn't run 300+ queries to generate one page. Again, I'm not "disparaging" Drupal in any way. I haven't made any false claims. I consider Drupal to easily been the best CMS on the market - but if you're using it in a way that neuters the ability to cache effectively ( as is the case with social networks with many constant reads and writes with unique, personalized content on a per-user basis ), it's just not a great fit. That's not being a hater, it's being realistic. Drupal isn't the end-all, be-all solution to every problem. People who push Drupal onto everyone for everything are far more damaging to the reputation of the platform, IMO.
I disagree; instead, "stability". Like tedivm said, they want it to come from their distro. 
Well, shared hosts specialize in creating a platform and replicating it. They don't have very high margins so they need to keep their servers and consistent and secure. Installing via an OS package manager means someone else deals with security issues and they just update. Up until just recently most of the stable Linux distributions were still running 5.2 or even 5.1. Ubuntu may have been running 5.3, but that has to be updated every 6 months unless you run an LTS. For more conservative distros it takes longer until they get the new versions. CentOS 5 still ships PHP 5.1.6. Shared hosts probably are going to run almost every machine with the same configuration for as long as possible, so as soon as they get a stable config, they will probably stick with it. They aren't going to want to upgrade machine which already have users since there are bound to be a bunch of little edge cases where things break. Also, most control panels are pretty tied to specific versions of packages, making it harder to upgrade.
Another thing I forgot to mention here is that PHP has no support, to the best of my knowledge, for code versioning or code unloading, which makes the whole project kind of silly.
&gt; Reference counting memory management with immediate OS-level (de)allocations is also incredibly primitive in the world of memory management. PHP doesn't do OS-level (de)allocations. It uses dedicated memory-pools. &gt; On top of all of that, it's presumably possible to have a GC pause that's unacceptably long - say 2-3 seconds. true. that's why AiP explicitly calls GC between serving requests. That's not a guarantee, but it helps. and, as AiP is usually run in multi-processed mode pause in one of the handlers doesn't pause the whole "server" &gt; PHP also has a storied history of memory leaks in the core and, even worse, in various extensions. I'm not ready to trust that PHP is leak free. PHP's test-suite is regularly ran using valgrind. There are no known leaks in core for quite some time. Extensions can trigger leaks, but I didn't observe them on AiP installations. We don't have track-record of long uptime, because projects are updated quite often, but there are installations which have AiP processes running for 2 weeks under load. I understand, that I won't be able to persuade you. Just trying to say, that situation with PHP is not as bad as you remember from old times. It's still not perfect, but it gets better :)
There's no official solution for that. It is possible to implement some hacks, but no, nothing like Erlang :)
Took a quick peek. Well organized, looks PSR-0 compliant, throws exceptions. Looks good! I'll try it out soon, thanks. Unfortunately I'm an OSX guy as well, can't help with testing, sorry.
No worries, I just hope you find it useful.
Most scripts written for php 4 don't work on php 5. PHP really took off during the time of php4. SO we have loads of php4 apps and no one wants to spend the time or money to rewrite their code for php5 if all they need to do is use php4.
PHP's test suite has been run and run with valgrind for a long time, but still memory leaks get found. Having a test suite doesn't preclude memory leaks - especially since very few extensions are well tested. If there were known memory leaks, they'd be fixed - not knowing about them doesn't mean they don't exist! And given PHP's history, I have no qualms in believing that there are more problems with it. And it looks like you're using multi-process when multi-threading should be in use, but PHP doesn't support it. And you can't unload / reload code - meaning you have to constantly take your production server offline if you're going to follow a CI model. And PHP has, by far, the slowest managed runtime amongst popular languages. And I didn't mean to imply that PHP immediately allocated and de-allocates memory from the operating system, but to the best of my knowledge it just allocated in slabs (I can't remember the size) and keeps allocating (or deallocating) as necessary. There's no heap generations, no heap compactions, no heap heuristics, nothing of the sort that a sophisticated managed runtime's memory management strategy should have. And you can check [this post](http://www.reddit.com/r/programming/comments/fpxap/using_the_windows_com_component_object_model_in/c1hst0m) for some reasons why I don't believe PHP is well suited for long running tasks. I don't think what you're doing is entirely useless - I do enjoy Tomcat quite a bit! - but it's not something that's PHP is suited for and it's been done before, and much better (no offense, most of these problems are things you can't do anything about) by projects like Quercus. Also, I wouldn't say that PHP's situation is as bad, but it's certainly not good. The garbage collector that's implemented was hacked on as an afterthought - rather than being designed as part of a system - and is incredibly primitive (compared to other managed runtimes with good garbage collection, like the CLR, Mono, JVM, etc.) and slow, you have to rely on volatile IPC rather than something trivial to communicate between threads, and you get all the inherent instability in the PHP platform. I just can't see this ever being a good choice in any environment, especially not with Quercus as a viable option. 
Yeah Key Value store is interesting, it essentially means you're doing way more logic at app level. Redis, because it seemed so simple. I haven't really "chosen" as such, I've looked at Mongo and Cassandra and they're all seem pretty similar really.
Yeah Key Value store is interesting, it essentially means you're doing way more logic at app level. Redis, because it seemed so simple. I haven't really "chosen" as such, I've looked at Mongo and Cassandra and they're all seem pretty similar really.
Yeah Key Value store is interesting, it essentially means you're doing way more logic at app level. Redis, because it seemed so simple. I haven't really "chosen" as such, I've looked at Mongo and Cassandra and they're all seem pretty similar really.
Dreamhost has been offering 5.3 forever...
From a mid-sized hosting companies perspective, we don't typically because it breaks our customer's sites. I finally convinced operations here to upgrade to PHP 5.2.x and I had to fix a number of sites afterwards. I'm still pushing for 5.3.x, but it could be a while. For those who don't know, 5.3 throws a lot of deprecated notices for things like ereg and others that many developers used in the php4 and php 5.1.x era. http://php.net/manual/en/migration53.deprecated.php
Assuming you're willing to compile it yourself, along with many dependencies (then configure specific domains to use it). Otherwise you're stuck with 5.2.15
Joomla?
&gt; Walah! Voila! FTFY :o)
Not everyone uses the standard Apache / mod_php configuration
I'm sick of Redhat's 900 yearold version of PHP. Even their latest release is a version behind.
Use Codeigniter or CakePHP as your framework and develop your own CMS.
Eclipse has had integrated FTP support for years and years. It's there, you probably just didn't know it :)
Actually the panel currently has choice between 5.2/5.3 now when setting up hosting
Yeah, I know it has the remote systems browser (I think that's what it's called)... but sometimes I just want to hit CTRL + ALT + S/D and have the current working file either uploaded or downloaded.
A remote project is just that - remote. It downloads a locally cached copy, but that should be transparent to the end user (it has to, otherwise Eclipse's magic can't work). F5 refreshes and it's uploaded on save. I dunno how much easier you could want it &gt;_&gt; EDIT: It sounds like you didn't know you could create a remote project! Ohhhh, that's just a right-click from the RSE -&gt; "Create remote project"
Not sure what you're talking about. I'm able to choose PHP 5.3 from a dropdown when I create a site in the panel...
The vast majority of webhosts are running something like cPanel or Plesk. With cPanel it's possible to have the latest/greatest PHP 5.3 and PHP4 simultaneously installed. You should ask them to configure this as it's about 3 minutes worth of work and no knowledge of compiling *anything* is needed.
 sudo apt-get install php5 sudo apt-get install libapache2-mod-php5 sudo /etc/init.d/apache2 restart
looks interesting, I'll take a look at it on the windows build of php, since my only other os is debian.
Rackspot has PHP 5.3.
Buddypress for wordpress is an option. 
Looks interesting, I might try integrating it into my CodeIgniter application. Thanks for the share.
I did manage to get some testing done on Windows, but unfortunately the friend who was doing it for me hasn't fixed an issue he's having with phpunit.
I never really assumed so.
Do you have a demo working?
FTFY &gt; emerge dev-lang/php5
If you implemented sqlite, why didn't you do a mysql storage engine? And are you planning on some more complex storing and invalidation methods, like some with dependencies?
A mysql handler (or, more specifically, a PDO extension that can run mysql or other databases) is on the roadmap. The sqlite handler had to be built separate because it's the only one that needs to deal with files (creating, deleting, vacuuming, etc), so it's code is a bit more complex than would otherwise be needed. I build it before the PDO one because an app I was working on was slowed down by excessive database queries, so the PDO handler wouldn't have sped things up while the sqlite one did.
Touche. Computers used to be so much harder back in the day.
The next RHEL5 minor release will include a separate 5.3 version with different naming, in the same way that the current minor release ships Postgres 8.4.
That's good news. It's bugged me so much lately. Especially since a lot of the software we use requires 5.3
Installs 5.1.2 I believe currently.
I haven't tried this, but it looks right... http://sudarmuthu.com/blog/installing-php-5-3-x-in-ubuntu-through-apt-get-or-aptitude Also, if you have Cpanel WHM with Easy Apache, I think there's 5.3 support in there now. I haven't tried it though. 
I'm using a 3rd party RPM currently that works well.
This looks really good, thanks. I have a few projects that currently use some APC and a mix of my meddling, they all look like they could greatly benefit from this. I'll get back to you once I find some time to implement it.
Glad you like it! If you find any issues or have any questions please feel free to poke the mailing list or myself directly.
Yeah, I'll admit that it's a huge pain in the ass to find small updated hosts. As a small host I can tell you that it's just as difficult for us to find customers. :)
Looks cool! One thing it looks like it might need is a way to control stampedes. (Multiple clients all getting a cache miss and then all trying at the same time to run the complex op and recache the value.) I didn't look into the source code though or may have missed it in the documentation.
Drupal. - Calendar: http://drupal.org/project/calendar - Fields: http://groups.drupal.org/cck (or, built into version 7) - User system: built in. Throw in views module to present the data however you want. You can probably do all you need without a single line of code. Granted, if you have to do some custom code, you can do pretty much whatever you want although you're unlikely to enjoy it. Beyond that? Try CakePHP. Built in user system. Fields are just database columns. Has form helpers, etc. You'd be on your own for a calendar though... And obviously you'd have to piece together a lot more on your own. 
Most hosts stopped supporting PHP4 a long time ago. Now, being able to run 5.2 and 5.3 would be a different story relevant to today's hosts. 
Your first sentence is the exact reason why hosts aren't upgrading (it's why it took forever for a lot of hosts to even drop PHP 4 support). We put out a notice last month, giving customers 6 months advanced notification that we were upgrading to whatever the stable 5.3.x release will be at that time. They need this time because a lot of them don't run the latest versions of their software, so it isn't even compatible with 5.3 yet. 
&gt;Voila Voilà! FTFY B-!
I'm glad you think it looks cool! You may have missed it because it's listed under the [Features](http://code.google.com/p/stash/#Features) section of the front page- &gt;In order to reduce sudden spikes on a system Stash alters the expiration times by lowering the cache age a random amount, thus distributing the cache hits over a period of time. Basically the way it works is by calculating the expiration time (one hour, five hours, two weeks) and then picking a random value between the expiration and the expiration - 15%. So lets say you give it an expiration of two hours. Internally the expiration date will be a random time between 102 and 120 minutes, while a one day expiration would be between 1224 and 1440 minutes. This is handled by the main Stash class, the source code for it being [right here](http://code.google.com/p/stash/source/browse/trunk/Stash/Stash.class.php#476). That being said the best way to invalidate data isn't with the expiration. What you really want to do is is invalidate the cache when the data changes. Basically, if you have a save function for your data then you'll want it to invalidate the cache once it's done saving the new data. You can see what I mean from the [example](http://code.google.com/p/stash/#Example) on the project site.
Most PHP4 code I've ever seen worked flawlessly on PHP5. Worst I've had to do to get old code working is turn on the backwards compatibility hacks (register_long_vars, etc). The perception that PHP4 code will invariable explode under PHP5 is part of the reason that no one wants to upgrade. I upgraded our server from 4.x to 5.3. With over a hundred accounts on there, I didn't run into a single issue.
CPanel doesn't install 5.3 by default, but does have it available/supported through its 'easyapache' utility.
I think stackus here meant handling the situation where, say, 10 clients all look for the same value at the same time, getting a cache miss and all performing an expensive operation at the same time to generate the value and store it in cache. Basically - does the cache engine support a "hold on, it'll be here in a jiffy" flag for cached items? (which is an interesting problem in itself.) But it does look pretty neat!
Ah, I see. I'll have to think about how best to handle that, but honestly I'm not sure it should be handled on this level of the library. In order for the library to handle this it would have to know quite a bit about the data and the circumstances around it, as well as what it should return when the data is a miss. However, this is really simple to implement on top of stash. When the getData function is called the data is returned regardless of whether the cache has expired or not, giving the developer the option to use it under circumstances of their choosing. This isn't the only way to handle it either. I also built a javascript minifier called [jshrink](http://code.google.com/p/jshrink-/) that I've used with this caching library. The minification process is very intensive and can take a few seconds, and of course running it multiple times at once would not be a good thing at all. In this circumstance I restrict it to only running once by storing an "isProcessing" value in the cache and pushing out the raw, unminified javascript to other requests during that time.
&gt; With apache, you'd have to setup a new vhost for each app. Apache has the mass vhosting module. To set up a new virtual host, I make a folder. That's it. Done. It's something I already had to do, so it takes even less time than php -S.
And I bet 90% of them didn't do anything until receiving the second notice that it was happening next week.
The reason is because 5.3 breaks a lot of things on backwards compatibility and well, on shared servers, you have to ensure all 100,200, 500, 600 or so websites are not broken. I ramped up a new server and went for 5.3. Started putting some sites and migrating a few but had too many issues, so reverted back to 5.2. I now run a small VPS with 5.3 on it for my own needs (testing Pimcore CMS).
Hi, Could you give me some more details on what functionality your subframework incorporated? Did you include support for Databases or did you just allow the user to write the glue code? Also, how important is PDF export? I haven't been able to figure that out properly yet. Thanks,
Most of the stuff I'm referring to are large CMSes and stuff. short little scripts generally didn't matter.
Thank you for your response! I'm trying to pay the foremost attention to the design, and allowing developers to change the themes easily. Current prototypes are based on fluid960gs - so they look good out of the box, but we want to get great designers on board the project.
Hi, Thank you so much for your response! I've been spending a lot of time making sure the API design is clean, and we have great looking themes for reports out of the box.
Hi, I'm using FusionCharts right now. By means of a really neat workaround, it's perfectly possible to get the same look on the graphs - even while printing. If you're curious to know - if the Print button is pressed, All the flash charts in the report send pixel-level data to the server - where it's converted to an image and it replaces the flash chart - so the transition becomes seamless.
Hi, It's nice to know that there are a lot of people with the same problem, and I'm excited to try and offer a neat and nifty solution for it.
Hi, If you have some data in a database that you want to quickly generate interactive Tables and Drill-down enabled charts from. And you want it to look gorgeous and printer compatible. And you want to do this by just specifying what data goes where, and the rest of it is done by the software. That kind of reports.
Hi ninjaroach, That's exactly what is going to happen with our product. Either write a SQL query and point out parameters of interest - or just give raw data (if you're a mongodb user or have some exotic database) - and we'll give great looking reports right out. For me, good design, and an easy-to-use API is the most important components - not having huge amount of vertical integration and other functionality.
I prefer Walah! I'm actually going to use that from now on.
I like to use "Viola!"
This looks very interesting. I've written something very similar in terms of interchangeable storage engines. One thing I suggest you change is the way you encode your filesystem data. It is a lot simpler to use [var_export](http://php.net/manual/en/function.var-export.php) rather than your data looping mechanism. So all you would need to do is "\$data = ".var_export($data)."; I imagine it would be optimal in terms of memory consumption.
I find putting SQL keywords in capitals (as you'll often see in the documentation) can help make your queries easier to read. Words like SELECT, COUNT(), AS, SET, INSERT INTO etc. As for your query, we made need the actual SQL error you're getting
Well they have 5 months still. We will send a notice out every month and then every week until we start upgrading. Dedicated clients can opt-out, but only 2% actually have so far. But yeah, they'll wait until the last minute or complain after the fact. 
Whenever I am hired to create a script, I explicitly give the client a list of server software requirements and configuration to make the script work. This saves a lot of confusion and makes sure that the server the script was made for will work.
Yup, http://social.kwolla.com
+1 Agree. A friend came round yesterday to show me some code he'd written. He had http://www.easyphp.org on his USB drive. Bemused I watched him plug it into my laptop, browse to the folder, double click the icon and his site started working. I was like. Wow. Now I guess he can do the same thing without the 200meg apache lump sitting on his USB stick. I mean, fine, it's not server ready or industrial strength, but for school kids and hobbiests and sketchy intranet app development it sounds ideal.
We just did about a month ago and it broke all kinda of shit.
&gt;That's not being a hater, it's being realistic. Drupal isn't the end-all, be-all solution to every problem. People who push Drupal onto everyone for everything are far more damaging to the reputation of the platform, IMO. well said.
Well, when I started, you had to setup PHP on your dev machine from scratch and that weeded out quite a few of the noobs right there.
Sure, and I'd be more than happy to even implement it for you ;_) Replacement: LastRSS http://lastrss.oslab.net/ It's only horrible flaw is that it is licensed under the GPL, so it's out if you ever want to use it for anything commercially distributed.
I like it as well, it's going into my toolset :)
Elgg is a mess. They need a rewrite for version 2, wouldn't recommend this to anyone.
I slightly disagree as 90% of our clients are quite happy with their sites that run on PHP4 and have done for many years. The sites are for advertising holiday properties. They are little cash earners that just rake in money year after year. Why touch them? Just leave them alone :) I'm sure 1&amp;1, rackspace and all the others see a nice tidy profit from php4 sites that have run for years and will continue to run for years :)
Most are just lazy. It really depends on their target demographic. If a host is oriented towards developers then they will make the latest and greatest versions of PHP and other important software (Ruby, Perl, MySQL, Apache, etc.) available. The host I work for had PHP 6 available for a while before it was "scrapped". Basically if you're on one that doesn't do it, then you're on a bad host and there's much better ones available. I'd recommend moving your business elsewhere.
I would say it depends on your perspective. If you're looking from a "plug and play" perspective, I agree - it's a mess. None of the core modules are very good from a feature perspective, and most of the contrib plugins is a mess - especially between versions. However, the core framework is quite sound and is very optimized for grouping, and tagging, abstract sets of content. There's a lot of clever code at play in Elgg core, and is very query efficient and fast in my testing. If I were starting a largely custom social network concept site today, I could start with a generic framework, or I could start with Elgg core, toss most if not all the bundled plugins and start from there.
Not PSR-0 compliant. This would be a must for me
**WAIT**, let me throw my question here, too: Will my porn experience improve using your Stash?
The ole *looks* versus *is*, strikes again!
Alone on the internet at an ungodly hour?! *Yep, that's me*... 10AM work.
&gt; legacy apps
I don't see what reason you could have for not just running a Linode VPS or something and handling it yourself. :/
&gt;However, the core framework is quite sound and is very optimized for grouping, and tagging, abstract sets of content. There's a lot of clever code at play in Elgg core, and is very query efficient and fast in my testing. What you mean is that they use entities with key value data (and not in a very clever way). It's not efficient, it's the opposite of fast (90k of css ... wtf), and if you've actually poked around in the core you will see it's a complete fucking mess. Random points off the top of my head: * inconsistent naming * mixture of OO and procedural with the typical scenario being layer upon layer of functions wrapping objects * things being broken (like simple image sizing fixes) for **years** * retarded functions like isvalidemail that just check for an @ character * poor documentation (especially with regards to wrapping of multiple functions which just take an array of options) * shitty mvc implementation Things like Elgg are why the php world is frowned upon. It's people with no clue promoting software written by other people with no clue.
You've pretty much described almost every single open source PHP project available :P PHP isn't an object-oriented language. It has some OO features, but it's mostly faking it. PHP is, by nature, a procedural language and sometimes the best way to accomplish something in PHP is procedural, or passing big arrays around. What would you suggest instead? I haven't seen any suggestions by you in this thread so far.
Care to link any of your PHP4 websites? If they handle any card transactions then they will surely need a security audit.
Clearly those apps didn't use `register_globals` or call-time pass-by-reference variables. I've had the displeasure of being introduced to an application that broke in its entirety when moved to a php-5 environment. The former feature is disabled for obvious security reasons while the latter is deprecated for sanity reasons. I certainly hope you're not one of those developers that keeps `error_reporting` to nothing and has re-enabled `register_globals`.
&gt;You've pretty much described almost every single open source PHP project available Possibly, lets just say if there's a competition to do things badly, elgg is clearly ahead of the rest. &gt;It has some OO features, but it's mostly faking it ... best way to accomplish something in PHP is procedural I'm not arguing procedural vs OO I'm saying elgg is convoluted. They have objects which could do things, but then they wrap shit in procedures nested within procedures nested ... it's just really bad design. Also, while php isn't a native oo language, it certainly allows for oo methodology. &gt;What would you suggest instead For PHP I have nothing. I've worked with elgg, and I'd like to advise people to think heavily before committing. I'd like to check out kwolla, but it's not OSS (by most definitions at least, or someone could fork it and not charge $arbitraryprice for me to grab a copy). 
Fair enough. I never claimed Elgg was fantastic, but given the competition (BuddyPress? Joomla? Dolphin?), I figured it was a half-decent place to start and was easy enough to work with.
Why? Who ever did that? We've always used payment gateways.
Is it 5.3 only? If it is then allowing a callback to be passed in with the get() request could work. It would return the new cache value in the case of a cache miss. As for stampede protection one way to do it would be to have a recache value that defaults to 10 seconds less than the original TTL. The first client which requests the value inside of the recache time window, will immediately recache the value for an amount of time to keep other clients from attempting to recache (could use the original ttl) then the process will begin the complex op. When it is finished the new value is cached and everyone is happy. I think I am leaving out a detail or there may be a better way to handle it but that is how I remember writing the stampede control on a memcache wrapper class a long time ago. I don't recommend sleep()ing clients as a way to wait for the new value to show up. Too many issues with processes dying or then once the value shows up everyone is doing other things in sync and that just leads to more problems.
I'll be your first tester.
APC has some protection against cache slamming, at least in the newer versions.
This is how I learned to stop using shared hosting and love the VPS.
As much as I love Ubuntu for personal use, I would suggest Debian for a server that's available to the public. The latest stable even has support for PHP 5.3
For what it's worth, error reporting should never be enabled on a production server. It should however be used when developing, and you should attempt to fix all warnings and deprecation notices.
If you are just looking for a simple solution then try [iAddressbook](http://iaddressbook.org); it has been working well for our needs for years.
Stupid lazy sysadmins or managers that shouldn't have jobs... if it's in Debian stable it's time to upgrade,
[views](http://drupal.org/project/views) with exposed filters. get fancy and throw in [rules](http://drupal.org/project/rules)
&gt;Ubuntu What idiot runs a server on Ubuntu? That *DEBIAN CLONE WITH A FEW THEMES* is a pile of crap. Use a RESPECTABLE Linux distribution before you get laughed at by anyone who's been working with Linux for more than 3 seconds.
No Redhat-based distribution has *ever* used apt or anything like it. Only Debian and its themed clone Ubuntu use apt.
Make up your own mind. I am sick and tired of this stupid subreddit's community of herd minders. EVERYONE IS DIFFERENT. BE DIFFERENT.
Right back at ya, mate.
I remember when I had to port a site from 4 to 5, this was some years ago. That was one fine month....
I would just recommend getting a VPS.
You're referring to a time after 2.3.4 when some of the developers went on to create 2.4 but 3.0 was released first causing massive confusion for new people. That has mostly disappeared and 2.4 was largely abandoned. The developers are all focused now on 3.x 3.1.1.1 being the latest official release. Great framework IMO.
relax
There's nothing wrong with using frameworks. Don't reinvent the wheel. That's a blatant waste of time. That being said: * Take the time to learn about the libraries you're using. Don't treat it as a black box * Tweak and optimize when necessary * Like they teach you in health class, use don't abuse
Well if ancient packages is an issue you can try using Debian testing, or unstable if you like bleeding edge. The reason I suggest Debian to someone putting a server out for public consumption is their history of only releasing "when it's done". They don't put out half-baked releases, and everything is rock solid. The stable distro has had an incredible amount of work put into making sure it's absolutely stable, and they keep it updated with security patches regularly. Ubuntu on the other hand releases every 6 months. Regardless of whether it's really in shape or not. It's likely not a terrible release, and it's unlikely to cause issues, but for a publicly accessible server you need to be damn sure things are going to work. It's not a knock on Ubuntu, just a recommendation that for rock solid stability/security Debian is the way to go.
we use SVN, so yeah - post-commit hooks
Not to be argumentative, but what makes this better than something like [Zend_Cache](http://framework.zend.com/manual/en/zend.cache.html)?
Indeed, I was just about to make this point: not using a framework when it is a simple job, just another CMS, etc. is pretty ridiculous and hypocrisy if I am asking you to think and be unique. Thanks for your point.
Did you even read past the first paragraph? I was trying to make a relaxed and civilised (but ambitious) point.
You come off as if you are a victim. Do whatever, you want, it doesn't matter to anyone else, however there is several good reasons for using a framework: 1. Like someone said, you don't need to reinvent the wheel, it can handle a lot of features and functionality that would need to be re-implemented on every new site you are producing(such as user management). It also has a community and team working on fixing bugs, adding suggestions, and help and documentation while you work on just your site. 2. Typically with MVC frameworks it forces you to code in a cleaner and more manageable/scalable way. Of course you can do this without a framework but it puts some rules and restrictions in there for good practice. 3. It saves you a lot of time sometimes. When they can generate your CRUD/REST or base class code, you don't have to be the one investing that time every time especially for basic operations. For some people, saving time is very important. 4. (What I think is the MOST IMPORTANT reason) It allows people who have coded using that framework, or similar frameworks, to join your team or take over a project after you are gone. It also has the documentation and resources that I doubt you can provide for a new person to the team to be able to go out and learn how to work on your site. Following MVC practices also allows other team members to work independently on areas from everyone else, which can be a struggle with non MVC frameworks. Really the benefits of frameworks are for projects which have a team on them, which it sounds like yours do not. When you join somewhere and have to work with other people you may change your story. 
Haha, no doubt the hivemind will upvote your on your stupid point. I have been working with PHP for 4 or 5 years, and have handled a bunch of projects and read a bunch of books. I am not a noob. I imagine you think I am. Let me guess, ex-Ruby or ex-Python user? I smell you and can read you like a book. I know your type.
I said this a second ago. I can read you people like a book. I know all your points. You aren't clever in saying this, really: you're just reciting the mantra of thousands of others. The "team" argument. The "real world" argument. The "MVC is awesome!!1122" argument. I do not force my code down to acronyms. You're coming off like a brainless manager from the 80s.
I just want to break down a few more things. You said, specifically on git. "You use Git for version control, because it lets you work locally, even though that argument makes no frickin' sense." It absolutely does make sense. Firstly, what if you want to work on a plane, or a bus, etc and still keep your changes checked in separately for easy backing out(which svn you would have to check in everything as one large chunk when you are done). Also what if your SVN server goes down for whatever reason?(it happens). Alternatively what if you want to keep your changes local and not on the main trunk etc, or only push them to one other team member for some code review or checking before pushing them live. That is a large benefit to some teams. However the biggest benefit for git over svn I believe is the way it handles branching and merging, which is far superior to SVN. 
&gt; read a bunch of books. Well that settles it. No need to question your experience.
One more point: "It doesn't matter if it has features you don't need - let's stick that 100kb library in anyway!" Newer frameworks which are on top of php5, such as Yii, use lazy loading so you completely avoid this problem and only load what is needed when it is needed.
I apologise... I keep making my points awfully. I am the prime example of "it is better for people to wonder if you are stupid than to open your mouth and remove all doubt".
Aha. I did not realise. Although doesn't that create quite a few copies of your code? It's up to your team to make a "final" release outside of Git then, surely?
I'm a hobbyist. I'm not inexperienced, but I don't have 700 certificates or websites backing my points.
I would too but even then you are limited by what OS Templates the host company provides. Even if they have a new enough template for you to update it to the current version of PHP (or whatever), it's better still if they keep their templates up to date so you don't have to bother. That's why it's key to find a developer friendly host.
http://stackoverflow.com/questions/tagged/php?sort=active
you didnt do a good job
In my teams, "master" (trunk in SVN speak) is used for releasing. "staging" is code considered for release. Branches are used to develop a feature/bugfix before merging into staging.
Using a framework doesn't make you a good developer. Saying things like, "If you don't use a framework your code isn't secure" only shows that you don't know how to write secure code and assume no one else can either. Being able to write your own framework, and do so securely does make you a somewhat decent developer. A lot of you Zend fanboys have a long way to go.
You sound like a dick. Yes there are dumb dumbs in /r/php who vocally say "ALWAYS USE FRAMEWORKS GEEZ!" but they're not everybody. It's just that most of us can't be bothered to tell those guys to STFU. Whether to use a framework or not, or which framework to use, is a project by project decision, of course.
Interesting factoid: "Tarabukka" is Greek for "jackass".
Like I said though, if it feels out of date use the testing or unstable release. They're the latest and greatest, and are actually ahead of Ubuntu because they're frequently being updated in what's called a "rolling release". But really, unless you absolutely need the latest software (which is valid), just stick to what's stable and rock solid. Public facing web servers need stability more than shiny new features most of the time.
This article is crap. The author states, "Awful code is the accumulation of multiple small shortcuts or concessions". More often than not, awful code is written by developers who don't have a clue what they are doing. It's a fairly simple concept.
Copies of your code? No, it doesn't create copies of your code. Think of it this way, you can still make "checkins" like svn locally, so you have seperate revisions per "checkin" but without having to goto the server. So you can work without touching the main branch/trunk/branch, and even send your changes to another persons local machine without hitting the main server if you want to test something or do a code review. I don't know how to further explain it to you but there is a lot of advantages to git beyond this. But it doesn't have to do with having any extra copies of your code.
More blogspam. I stopped reading at the title 'Your a wang'. If you want to become a good PHP programmer read, inspect, pull apart, use and modify code from projects and frameworks such as Symfony2, Doctrine2 and Aura.
Firstly I am not a manager, and I was born in 84 so I don't know how I can sound like I am a brainless manager from the 80s. I am simply an engineer who has worked on a number of projects in php. Secondly, you responded to none of my reasons, and frankly you haven't provided a single reason against frameworks aside from saying that you have done projects that have worked without them. Well great, so have I, I didn't say it was impossible, I said there is a lot of reasons to use them. I am not reciting any mantra, I am looking at what has been useful in day to day activities, and how it has helped bring new members to our team where past projects have been overwhelming for new members. I do not know what this: "I do not force my code down to acronyms" means, I only used one acronym which is MVC in my entire argument I think. I am also not a fan of buzzwords about the latest and greatest but if there is a reason to use something then I am not going to ignore it. You seem to make judgements with very little information based on your knowledge of git, and like the other person said, I would dread working with you because of your egotistical nature.
It looked brilliant - it was that I had to start a new job and had to start developing on the first day. I chose Yii, because it had a more coherent community and documentation at the time. Thanks for the headsup - good to know.
&gt;awful code is written by developers who don't have a clue what they are doing. As an awful programmer, I can confirm this.
 function hi(){ echo "hello world"; } is way better than function hi() { echo "hello world"; }
With a vps you can always download the source and compile.
This is not always the case. Not all VPS give compiler access, and you might be missing all kinds of dependencies, etc. The OP was complaining about bad hosts, and you'd be surprised at all the ways a bad host can mess it up. Not all VPS are created equal.
http://i.imgur.com/GtSg0.png
Let me [help you out with that](http://iuscommunity.org/packages/). The IUS repository has been a godsend since I discovered it. They have updated PHP, MySQL, and Python packages for CentOS/RHEL and all the dependencies. They are named differently to avoid conflicts, and work very, very well.
I am confused. PHP runs on the server. If you want to change the contents of a textarea, you probably want javascript.
It's not argumentative at all, it's a good question! There are a lot of little differences, but the biggest is the way we invalidate groups of items in the cache. Stash uses a hierarchal method for storage- /models/users/$id/info for user storage allows you to clear one user (/models/users/$id) or all users (/models/users) or even all models (/models). Every storage handler in Stash completely supports this hierarchal system. Zend_Cache uses a tagging method for grouping items together. You could place a specific user's information in, tag it as "user" and "model", then if you delete the group "user" or "model" then the user's information will be cleared. Unfortunately for Zend_Cache most of their backends do not understand the tagging system. If you look at their documentation for their storage handlers (or backends) you'll see this tidbit quite a bit- &gt;Be careful : with this backend, "tags" are not supported for the moment as the "doNotTestCacheValidity=true" argument. If you want to use memcached, apc, or xcache then you are unable to delete things in groups- you can only delete things one item at a time. This means if you want to clear the cache for every user you're going to have to choose between manually doing it or clearing the entire cache. This is by far the single biggest reason why I wrote Stash rather than just using Zend_Cache. That being said there are a ton of little differences on top of this that add up to quite a bit, and if you want I can touch on some of those as well.
I would say use the [explode](http://php.net/manual/en/function.explode.php) function with a line break has the delimiter? That will put it into an array and you have a lot more flexibility to work with. [Array Functions](http://php.net/manual/en/ref.array.php)
The user inputs information into the textarea and submits it via the forms submit button. Then using PHP I'm using a series of string manipulation functions to alter what the user submitted. ie: $new_table = preg_replace($patterns, $replacements, $old_table); Now what I want to do is add a row of text every x number of lines to *$new_table*
I want to get this working in both 5.2 and 5.3. Once that occurs I'll maintain a bug-fix only line for 5.2, with the main line being 5.3 only. I actually have a full list of changes I plan on making- namespace support, late-static binding (which makes life so much easier, and will speed up the code a bit in some places), amongst others. The callback idea was something I was actually thinking about last night, and could work great. I also like the way you're thinking about this, and will certainly keep in mind when I implement this. If you're up for it you should join our mailing list, that way when I start this you can have feedback into how it's accomplished.
Unfortunately var_export has a number of issues that can cause it to break. From the manual- &gt;var_export() does not handle circular references as it would be close to impossible to generate parsable PHP code for that. If you want to do something with the full representation of an array or object, use serialize().
You do realize that even if you use payment gateways the transaction still occurs through your site? Unless you're redirecting them to the payment gateway. If someone hacks your site they'll easily be able to steal the credit cards, and considering the fact that security fixes for php4 are no longer being made there's a good chance you will get hacked at some point in the future.
Ah, good idea! Then I can just use a foreach and if statement.
If the porn sites use Stash then it will speed up their sites, so sure.
For it to be PSR-0 compliant it would have to support namespaces, which means it couldn't work with 5.2. Once I've gotten 5.2 tested and have a stable release for it I plan on adding a bunch of 5.3 features, such as namespaces. Once namespace support is added it will be completely PSR-0 compliant. Out of curiosity, why is it a deal breaker for you?
If you end up writing any sort of CI integration or plugin (I'm not too familiar with how CodeIgniter handles that) please let me know- if you're interested I can include it as part of the project. 
Glad to here it!
this is awesome! i was just browsing your site today and downloaded the Search module. Don't have any use in mind for Kwolla, but it would be good to go through your code.. maybe i'll learn a thing or two about php programming doing that! :)
It's a pretty site. 
Lifetime Free Upgrades, Would you keep that for us that download now?
&gt; Stash uses a hierarchal method for storage- /models/users/$id/info for user storage allows you to clear one user (/models/users/$id) or all users (/models/users) or even all models (/models). Every storage handler in Stash completely supports this hierarchal system. So this system works in memcached/apc/etc? &gt; That being said there are a ton of little differences on top of this that add up to quite a bit, and if you want I can touch on some of those as well. If you could go over some of them, that would be great. We're using Zend_Cache internally, but without memcache, etc. I'm looking for ways to improve.
Sweet! Yeah feel free to rip it apart.
I haven't decided. I'm currently working on releasing the version 1 series, so I'll probably do free upgrades on the version 1 line, and then make version 2 a paid upgrade.
Thank you!
I certainly will.
Yup I've been using IUS for at least 3 or 4 months now. Have an upvote people need to know about good alternative repos.
This is utter insanity. `display_errors` should rather be set to none and `error_reporting` should always be set to something reasonable.
I've been following jolt on github, and I'm not trying to troll here.. but how do you think those that have already paid the original ~$70 and then the reduced ~$30 will feel about this free release?
Not sure, if someone complains, I'd refund their purchase. I'm debating on whether to make it free forever and fully open source it and find another way to monetize it or only do that with the 1.0 series.
&gt;So this system works in memcached/apc/etc? Yes, Stash has complete support- including all of the hierarchal features- for memcached and apc. I don't consider a handler to be finished until it can pass the test suite completely, which includes all the hierarchal tests. &gt;If you could go over some of them, that would be great. We're using Zend_Cache internally, but without memcache, etc. I'm looking for ways to improve. As to some of the features Stash has that Zend_Cache doesn't- * Distributed Cache Misses - If you start with an empty cache and a default expiration fo one hour then with Zend_Cache you're going to have a lot of cache misses every hour. Stash distributes misses to spread out cache misses. * Intelligent Encoding - If you enable serialization with Zend_Cache (which is the only way to store arrays or objects) then it will serialize anything that isn't a string (assuming you have serialization enabled), while Stash tries to use the least intensive method possible for storing different data type. * No Limits On Stacked Handlers- Zend_Cache lets you use two handlers at once, while Stash lets you use as many as you want. * Request Only Caching - if you request data from Zend_Cache twice it will load it from the handler twice. Stash prevents that by having a request-only handler built directly into the main class. This also means you can run Stash without any handlers at all and still see significant performance gains. 
I think the only thing I see in Stash that I preferred in Zend_Cache *was* the tags. I liked the ability to give a datapoint a series of (for outsiders) non-connected pointers, and be able to expire keys based on any of those; for example, we have an ad server. Ads can go on a specific page, be for a specific client, and in a specific slot. I could give each ad these values, and then clear out only the ads that were for a specific client (for example). How would you propose I do something similar with Stash?
Honestly, without knowing a bit more about how you've programmed things I'm not sure how it would be managed. Could you go into a bit more detail on this?
Perhaps a free version with no support and lacking a few features (video conversion and a few modules, perhaps), and a premium version with free support and full functionality?
i highly recommend this. take a look at boonEx Dolphin of what you dont want to become. 
I've certainly thought about that, and give the ability to upgrade to the full version. Thanks for the suggestion.
Thanks, I have, and I won't become them :) I worked with Elgg a few years ago and it wasn't pleasurable either. Wait till you see the code quality in the next version, I pride myself in very high quality code. Edit: This is all code that I wrote before I was really into TDD and unit testing, which is why there aren't any unit tests.
Sorry, you're right. I had a brain fart and confused the two. error_reporting should definitely be on, and access to the error log should be given.
This is the most beautifully laid out PHP code I have ever seen. 
Ubuntu stable? You mean the LTS? Sorry, but it's already older than Debian stable is, and it's only upgraded every 3 years.
Can you please tell me what is wrong with Dolphin? Are you referring to the pricing? I thought it was free (with footer ad, which I think is fair enough)? Anything else that I should be aware of? I am new to Kwolla, and will definitely look into the code to see what it has to offer. Thanks *leftnode*.
You aren't obligated to refund to my best understanding. Think of it like I bought a book for $30, now it's on sale at the same shop for $20 - I can't demand a refund. You sound like a nice guy, so just thought I'd point this out, it's not morally wrong. You could offer some support or something if you wanted to be nice. Also, thoughts on monetization (which you've probably had already) * Packaged hosting * Support (obviously) and "hire an expert programmer" * Commercial plugins and themes * If you have traffic you can earn affiliate income * Donations 
And you didn't come out of the womb with this knowledge. You had to **learn** it at some point like everyone else. I like things being easier for me. I prefer entering a few simple commands `apt-get install php5 apache2 mysql-server ... etc` or running a built in PHP server and having my dev environment ready to go. It saves me hours of compiling code and headaches. That's time I'd rather spend writing code. Anything that makes developers more productive is welcomed if you ask me.
Can I ask why? Were the sales not what you wanted/expected? Or are you trying to generate a little buzz? I'm just curious. I took a peek at the code and it looks really nice and clean, was very pleasantly surprised. And good luck, hope it works out for you :)
Why not just give the paying customers version 2? (totally unloaded question)
They will get it, all paying customers get lifetime updates for free.
You were downvoted because you apparently didn't read the whole question. The issue isn't specific to mysql.
I think I agree with surfwax95 as well, though you could keep the free version a full version or point version behind at all times to entice those who are monetizing off of the project to pay you for the latest fixes, and then additionally offer a support contract for bonus $$.
Now that you've made your software free, consider [freeing your software](http://www.fsf.org/).
thanks for the notice, and yes i tend to read the first line and comment.
will you post again in about a month and let us know how giving it away worked out?
Absolutely. I'm building an open company. Check out http://blog.leftnode.com where I'm posting updates.
Yeah, I would rather give a refund than know I really upset someone. Thanks for the tips, I'm considering all of them.
Thanks! It's actually not up to my standard, which has recently changed. Check out http://github.com/leftnode/jolt for my new framework.
Thanks! I'll be posting a post morgen and a reason why on my blog - http://blog.leftnode.com
Release it open source free and create an app store where people can release addons and you take a cut of each sale. 
That's an idea I've toyed with as well. It takes a lot of traffic and time unfortunately.
people who advocate "rewriting from scratch" almost always never have a clue what they are doing. Seriously. The vast majority of such rewrites are failures. If you cant' refactor, you simply aren't a good coder, I don't care how bad the oriignal code is.
I would agree 100%. Elgg is a mess of spaghetti code and a terrible interface, both front and back end. I couldn't imagine showing it to a client, even after spending hours cleaning it up. You'd have to ditch everything but the core framework, and at that point you might as well write one from scratch. 
:D I'll be sure to PM you when I have my first prototype ready. It's already looking pretty nifty for a week's work.
How is this possible? Someone on Reddit linked to your website just yesterday -- I was looking at Kwolla and thought it was a deal even at $50. I just downloaded my copy and I'm looking forward to dissecting it. :]
Functionally and speed-wise, no, it's makes no difference. It's only just line breaks and indentations which may be easier to read by some coders over other styles - and that style war has never been won. K&amp;R Nazis will come for you by merely suggesting such things. I suggest you hide.
Awesome! I plan on releasing 1.1.1 tomorrow which is what is available on http://social.kwolla.com You'll be able to use the link in the receipt email to download it. I'll let everyone know when. Thanks!
So it works fine under PHP5. Just turn the backwards compatibility on per-site. (And no, I'm not one of those developers. I write my code with register_globals, magic_quotes, and all the other retarded never-should-have-been-implemented stuff off (and include code to handle servers that still have them on!). error_reporting is set to -1.)
The code I'm referring to in particular was an entire CMS.
drupal, codeigniter, cakephp...... many other frameworks and such... these all had to be redevelopd for php5 when it was released.
It has to do with namespaces. When you reference a class you reference it related to the current namespace you're in. So if you use your own namespaces for your own classes then you need to specify the absolute namespace path to classes not in your current one. All older PHP classes reside in the root \ namespace so that's why a class might be called as new \IteratorIterator()
This is pretty awesome. Downloading now :) I've been thinking about a site for college students for awhile but sort of dreaded doing all the social stuff that's already been done. This could be a great step forward. If/when you are taking payments again, make sure to let us know!
&gt;including all of the hierarchal features- for memcached The way I read the code you handle this in memcached by having a namespace key, when someone wants to delete a namespace you increment the key. Thus leaving the old namespace in memcached taking up space until it eventually slips off of the LRU list and causes an eviction. Is this correct or am I reading the code wrong?
Hi, I'm using your code mainly to learn from - it has a very clean architecture - something I can use for my framework.
Correct. The way I figure it, if someone allots X amount of memory for memcache then they expect it to use that much memory, and since the unreachable data is unreachable it'll get shifted off before anything in use is. This is the first version of this handler- just about two weeks old- so I do plan on making some improvement, although the way it runs won't change. The first improvement I plan on making is to clear out the item directly cleared on top of incrementing the key. This wouldn't clear out any sub-keys, but it would mean anyone not using the hierarchal features wouldn't have to worry about old stuff in the cache. The other thing I was planning on doing was implementing an (optional) autoextend feature. Since each handler can take it's own maximum expiration date this would allow developers to set a lower time in memcache to clear stale data out faster while still preventing cache misses by extending the time of commonly used items.
I really just wanted to know if you had figured out another way as currently it's pretty much the only way to implement namespaces in memcached. Problem with it is that it can hide an actual problem as it makes the evictions number sorta useless. Basically you have no way of knowing if you need to add more memory (or another memcached server to the cluster) There's really no good way to handle namespaces in memcached as it currently stands, there'll always be a trade-off of either a huge performance penalty to invalidate so many keys (and keeping track of them) or simply accepting to have data in the cache which will never be used.
We looked at Dolphin but a quick audit of the code showed a variety of issues ranging from v minor (no consistent coding standards, outdated DB access layer) to much more serious (deliberately obfuscated code &amp; SQL injection attack vectors). And that was only after a couple of hours of looking. Shame because it's very feature rich.
I wish there was another way, but yeah unfortunately it was the only way. On the statistics side though I actually plan on implementing some statistics into stash itself. I was thinking of creating a special statistics handler that can be loaded in front of others (using the MultiHandler handler), which can track hits, misses and other data. It won't help with the eviction rate, obviously, but it should give admins enough data to decide whether they need more memory or not.
OMG, questionable syntax additions might turn people away to more professional languages. Who would have thought?
Indeed Trends shows them all doing well in the job market. http://www.indeed.com/jobtrends?q=ruby%2C+php%2C+python&amp;l=
That's how namespaces are implemented in PHP 5.3, and despite a lot of furor surrounding the \ operator, I rather like how they've played out.
Thank you! The code is a bit older than my current stuff, but it's not horrible by any means :)
Without a doubt, thank you!
I'm not sure how that will help. Namespacing in memcached does not make the hits/miss rate any less accurate and it's really only the evictions number which is interesting.
&gt;I would also wager that in the case of PHP, the proliferation of frameworks mean fewer people are searching Google for "PHP." Instead, we are all busy searching for "Cake PHP", "Symphony" or "Zend Framework" php is still solid for some time to come, I think...
I wrote this function a while ago and thought I should share it :) 
The entire premise of the article is flawed. TOIBE isn't based on the number of search QUERIES. It's based on the number of search RESULTS. And yes, (yes and yes), that metric is a damn good measure of the install base, number of programmers/users, and number of applications. In any case, the main reason for the shuffling that has gone on this month is that TIOBE has modified its technique again last month (adding search engines and even other languages to its calculation). As far as Google Trends goes: remember that the chart isn't an absolute measure like query count. It's the ratio of those search terms vs ALL OTHER SEARCH TERMS. The steady decline of the ratio of "geeky" terms vs all other searches is almost completely due to the fact that more "laymen" are using Google to search for things (music, movies, etc...). If you do a trends look-up for these: recipe, porn, love, movies, xxx, lesbians...you'll notice that the "upticks" in these results corresponds to the "down-ticks" in your programming related results. That's Christmas break when all the morons go home from college and start looking up porn on their parent computers. No joke. The biggest issue that I had with the TIOBE index was that it was missing Assembler language, which is why I talked Paul into finally including it in the index last November. Glad I did too, because it appears to be a pretty important language.
The shortcoming of this approach is that this email address will pass: "this is a valid email@[]{}and it should be"@example.com but our mail server won't know how to use it. An email address that is formatted correctly per the RFC but unusable by the mail server is worthless. I really wish SMTP servers would offer a validation service that we could call.
The problem is that email validation is nothing more than making sure the user didn't typo. Anything other than two fields is actually harmful: providing a spell check on a non-spell checkable thing promotes a false sense of security. Anything more than that is useless (mailinator, etc).
Are you sure? I just put &gt; "this is a valid email@[]{}and it should be"@example.com into the function and it returned false.
You're using explode to split it on the first @ sign, and then you're doing a DNS check for the domain []{}and it should be"@example.com so it's returning false because that doesn't exist.
Two things: * fakeusername@gmail.com will pass * |??3. 55 v @gmail.com will pass You should definitely do a regex before you waste any bandwidth checking the DNS. If you're using php 5.2 or better, you can use filter_var to accomplish this. There is a small issue with filter_var where it validates email addresses that have no domain suffix (e.g. someuser@gmail), so you need to check for that as well. Then there's the issue of hitting the MTA to truly validate this email address. You can do this by opening a socket and sending HELO, MAIL FROM, RCPT TO requests, but more and more SMTP servers these days will block or redirect you because they think you are a spammer. But you definitely want to do as much local validation as possible before opening a socket to check a DNS. Edit: I seem to be completely illiterate as I looked again and saw you are using filter_var. Apologies for that mate.
It has been said by many people, and I am one of them: **Leave the checking to the MTA, it is a service created for the purpose of delivering mail, it will do the checking for you!** If it has at least one "@", try sending a mail to it. Done. Finished. Your approach is less retarded than the usual [a-z\\.]+@...-junk, but it is orders of magnitude more broken than what you are actually using to send the mail in the next step.
&gt; There is a small issue with filter_var where it validates email addresses that have no domain suffix (e.g. someuser@gmail), so you need to check for that as well. That's not a bug. user@localhost or user@tld can be valid addresses. It's either shut down or temporarily down, but http://to./ pointed to a website at some time. Not quite sure, but user@123.456.789.012 might be valid as well. 
I never knew this, but according to [wikipedia (Email address)](http://en.wikipedia.org/wiki/Email_address). _In addition, the domain part may be an IP address literal, surrounded by square braces, such as jsmith@\[192.168.2.1\], although this is rarely seen except in email spam._
Good call, he should be checking for the last occurrence of the @ symbol then?
My only suggestion for improvement is to get your mail server to expose a validation service so that it can decide what it will and won't accept as a valid email address.
http://stackoverflow.com/questions/5055458/how-to-check-email-address-entered-using-php
Sweet. Going to check out your code :) Good luck with the site!
Thank you. I'm getting ready to release version 1.1.1 and let all of my customers/downloaders know about it.
Would break on UK emails, e.g. "*@enterprise.cam.ac.uk", which is actually fairly common. My adjustment: https://gist.github.com/856497 Admittedly, this is a 10-second solution and doesn't account for numeric domains.
I second this theory. I'm experiencing the exact same problem after installing APC--however errors are fatal errors involving missing required files. It works once cached.
What's wrong with this? filter_var($emailAddress, FILTER_VALIDATE_EMAIL); // boolean
Lets say that we have 3 companies with ads, on 2 pages. When we make a change in our admin, we only want to clear out the appropriate ads; by using tags, and saying that ads on page 1 have changed, we can clear out the cache of ads only for page 1. Or, because we control where specifically an ad shows on the page, we can say that we want to clear out slot 'leaderboard', vs slot 'right rectangle 1'. With a hierarchical storage system, I don't think this can be easily done. Let me know if I'm mis-understanding.
I don't remember which bug that was (maybe [49576](http://bugs.php.net/49576)), but the above example does not pass as of PHP 5.3.3.
Really ... something like this is a final school project? What school is this? What is the class?
Note: 'someuser@gmail' will not pass FILTER_VALIDATE_EMAIL as of PHP 5.3.3. Basically, FILTER_VALIDATE_EMAIL contains several fixes as of 5.3.3. The 5_2 series is a different story, and I see strange results (passing as of 5.2.9...). Hmm...
If it doesn’t accept “plussed” email addresses, it is total bunk.
Everyone: I just released Version 1.1.1! You can use the same link in your receipt email to re-download version 1.1.1. Official emails and change logs soon to follow. Thanks for all of the great support, tips, and suggestions.
Wouldn't a &lt;pre&gt; tag be sufficient? Or is this question more complicated than it looks?
i'd rather not say which shool. it's a software design class.....why do you ask? 
That's verification, not validation.
If you want to make a forum similar to reddit's comment structure, you're basically looking at implementing some nested set behaviors. In the simplest form, you could have 2 database tables ie (topic, comment). The comment table would be recursive, meaning it would have a parentId which would join on its own commentId. Both Doctrine and Propel have built-in nested set behavior handling, which make it all too easy to build a forum. In fact, last week someone posted in /r/php that they released a module for Symfony that does everything I just mentioned. It's called [sfMarae](http://www.reddit.com/r/PHP/comments/fti56/sfmaraeplugin_threaded_forum_plugin_for_symfony/)
had no idea the &lt;pre&gt; tag existed....
&gt;Again, I'm not "disparaging" Drupal in any way. I haven't made any false claims. I consider Drupal to easily been the best CMS on the market - but if you're using it in a way that neuters the ability to cache effectively ( as is the case with social networks with many constant reads and writes with unique, personalized content on a per-user basis ), it's just not a great fit. That's not being a hater, it's being realistic. Drupal isn't the end-all, be-all solution to every problem. People who push Drupal onto everyone for everything are far more damaging to the reputation of the platform, IMO. I am a Drupal developer, lover, and purveyor, and despite this I very much support your statement. I will also admit to sometimes being too much of a pusher, myself. 
Assuming that the &lt;pre&gt; tag didn't exist for a moment.. For your own learning, and to give an answer to your question, this is the (simplistic) code you could use to output code to display while maintaining tabs and new lines in HTML. &lt;?php // read the text file into an array $lines = file_get_contents('/path/to/code.txt'); foreach($lines as $line) { // replace tabs with 4 html entity spaces, replace newlines with &lt;br /&gt; echo nl2br(str_replace("\t", "&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;",$line)); } ?&gt; Obviously the above approach will not provide syntax highlighting. For that, if the code you are accepting is PHP you should check out the [highlight_file](http://php.net/manual/en/function.highlight-file.php) function.
Not true actually.. Just prefix your classnames with a common 'namespace'. Pear1/ZF1-style. I've been looking for a decent caching package, with a couple of requirements.. one of which is to support coding standards / styles which are very common nowadays, and installable through the pear package manager.. 
All of my classnames are prefixed with a common namespace. Every single class in here starts with "Stash".
No, not done. You are only looking at one aspect of an email address - sending an email to it. Validating an email address is a REQUIREMENT for any web form. I could give you a dozen reasons why I would want to validate an email address being entered into a web form.
You're almost there.. Instead of StashHandlers it should be Stash_Handlers, and the file must be found in Stash/Handlers.php. Read up on it. I also maintain a library specifically for other programmers to integrate, and being compliant with these types of things really helps getting people to adopt.
Please do, I would love to see a dozen reasons for that. Checking that an email address is syntactically correct tells you absolutely nothing about the validity of it, passing it to your MTA takes care of the first step, and once the payload link is clicked it verifies the second. And unless you down the road of attempting (and most likely failing) to parse every valid email address structure there is somehow manage to achieve it, your validating form WILL infuriate users when you deem their perfectly valid addresses invalid. Edit: Uh, yeah, I accidentally half the sentence.
Man Nginx is where its at. We just rolled out a batch of web servers running Nginx, php-fpm and opcode caching. Really easy to configure and fast as lightning. Highly recommended.
I switched to Nginx a couple years ago and never looked back. It took a little while to figure out how to configure some things that were the equivalent in Apache but the documentation is getting better. The benefits though are worth it, it's just so much leaner than Apache. If you don't want to leave the comfort of running Apache, you can also run an in-between where you run both Nginx and Apache. The gist of it is that you set up Nginx to intercept any requests for static content (a.k.a nginx reverse proxy) while Apache will handle all the dynamic stuff.
Ah, touché.
If the names of the classes bother you enough where you can't use the library, well, sorry. My autoloader works just fine (hell, it's actually faster than those that have to do string searches to swap _ with /), and I think shoving underscores all over the place is one of the ugliest hacks in PHP that only happened because of the lack of namespace support. As I mentioned, once I add namespace support it will be PSR-0 compliant- StashHandlers will be Stash\Handlers, StashHandlersApc will be Stash\Handlers\Apc as well.
I'm sort of curious about this as well. I've neglected to seriously try nginx or lighty out of just being so used to apache. I'm particularly interested in any gotchas. My typical setup these days is apache (worker mpm) and php-fpm. Pretty plain vanilla apache, really, just rewrite and vhosts. Does anyone have any words of warning about switching to Nginx? Anything that might require serious reeingineering or hacking to make your typical moderately complex PHP-driven app work? Are there any major stick
These guys have it right, Nginx all the way baby. Stuff like rewrites and authentication have their own way of working on Nginx, but once you figure it out it's generally simpler on Nginx than Apache. But if you need help with any let us know :)
[LiteSpeed](http://www.litespeedtech.com/) is currently faster than both lighttpd and nginx and the standard edition is free.
Just to give us a rough guide, how old are you? We're just trying to judge whether it's an incredibly easy course, or if you're younger than we think and are actually doing a course that is a sensible difficulty for your age.
22...
It's closed-source and commercial, as well as *filled* with security vulnerabilities. Screw that.
What security vulnerabilities?
A couple of questions: 1. What are the server specs? 2. How many req/server can you handle? (dynamic content) 3. How stable is the setup? Thanks!
I'm gonna go ahead and assume you're full of shit unless you can provide some sort of supporting evidence - on Google, "drupal php5 rewrite", "codeigniter php5 rewrite" and "cakephp php5 rewrite" didn't turn up a single reference to having to rewrite any of them for PHP5. Not a single ticket, news release, or anything of the like. And downvoting an opposing viewpoint just makes yours look all the weaker.
When was the last time you modified nginx's source code? Just saying. Do tell about the security vulnerabilities.
http://www.exploit-db.com/search/?action=search&amp;filter_page=1&amp;filter_description=litespeed&amp;filter_exploit_text=&amp;filter_author=&amp;filter_platform=0&amp;filter_type=0&amp;filter_lang_id=0&amp;filter_port=&amp;filter_osvdb=&amp;filter_cve= is all I could find in my 10 second attempt.
Thanks.
Also, double check its [license](http://www.litespeedtech.com/docs/webserver/ent/), specifically what you can't host with their product. Maybe their web server is great, but I'll be damned if I let them tell me what I can't do with it.
since you have knowledge about rewrites wrt nginx can you please tell me how it handles dynamic page requests like: http://example.com/random-page-name.html =&gt; http://example.com/index.php?u=random-page-name as opposed to using mod_rewrite / mod_proxy in apache?
dude because im sure there are no blogs talking abuot rewriting it for php5. Just google shit like "codeiniter won't work on php 5" Additionally, if you were coding when php5 came out. then maybe you shouldn't talk about it.
Yep, nginx. While it's possible to tune Apache and make it run reasonably well, there's not really any point to it unless you specifically need one of its features. The nginx-&gt;php-fpm-&gt;apc stack is really common, and straightforward. Getting anything like it to work on Apache is not.
I agree the license isn't ideal, however performance wise it's top-notch.
It would probably look something like this: if (!-e $request_filename) { rewrite ^/(.+)\.html$ /index.php?u=$1 last; } First line would make sure to only redirect if the file doesn't already exist. The rest is basically just regex, with the `last` part indicating that it should do an internal redirect instead of a browser one (as far as I understand). I use a very similar rewrite for my blog (so that http://demonastery.org/49/ will internally redirect to http://demonastery.org/index.php?post=49).
What is it you need to do that apache is having trouble with? The first step would be to determine where apache is failing and use that to guide you to an alternative. Lots of people switch just for the heck of it, that's fine, but if we're talking about business usage here it's often better to fix what you have than to make an architectural shift. I personally run nginx, and mostly just for the heck of it. Well ok, I prefer the configuration syntax better. Realistically, apache would serve me just as well. Unless you're planning on dealing with 10,000 requests per second, the added performance of nginx is something you likely won't get any benefit from. And that's assuming static files, when you throw PHP into the mix you're not going to hit 10,000 requests per second. Another thing to keep in mind, nginx does use less memory and CPU than apache + mod_php. However, if you are serving up php pages with nginx + php-fpm it's likely to be a wash because all those php processes running in the background are going to be using CPU and memory as well. You'll have less load for serving up the static files, but overall based on my experience and that of others, if you have a php heavy web application you're not going to see much difference in load and memory usage with nginx/php-fpm versus apache/mod_php. You can do about whatever you can do with apache when using nginx. For example this is the rewrite rule I use for drupal based sites: if (!-e $request_filename) { rewrite ^/(.*)$ /index.php?q=$1 last; } Things can get more complicated though. One of the things I dislike about nginx is that it does not support dynamic modules. If you want upload progress support, you have to compile that into the core. If you want passenger support for rails apps, have to compile that in. This becomes a bit of a pain as different things may want different versions of nginx, which are likely different from the OS provided version. So to really run it, you'll have to compile and maintain it and not rely on your distro provided version (unless of course you don't want any added on functionality). The other issue I've had is that it requires a bit of tuning. When I first set up my nginx/php-fpm server I found it was slowing down horribly after a few days. It took me quite a bit of experimenting to find the settings for php and nginx to avoid this... I still like it. But realistically for the 90% of us who aren't serving up the next twitter, apache will do the job just as well. Nginx just happens to be pretty trendy at the moment (for good reason of course).
Also not allowed to host porn either, moral preaching in their license.
As long as you set up your rewrites, and vhosts (which are really easy to add too), then there shouldn't be any problems with any apps. I've installed SilverStripe and Wordpress on a local machine running Nginx and both work flawlessly. I think a lot of major apps are starting to come with Nginx rules these days too. And if not you can usually find them online somewhere.
awesome.. that code looks like some sweet Perl code. I've never seen an nginx config file before but now i have to investigate. thanks for the answer too!
Thank you
Hey sorry.. Classnames is not so much the point as it is (semi-)standards compliance. It's just my recommendation to stick with similar coding standards as the popular frameworks, as I think it can help adoption. So does having it pear installable. But I wish you good luck regardless, it was all in good spirit. 
Hey sorry.. Classnames is not so much the point as it is (semi-)standards compliance. It's just my recommendation to stick with similar coding standards as the popular frameworks, as I think it can help adoption. So does having it pear installable. But I wish you good luck regardless, it was all in good spirit. 
*Edit: Duh, forgot to link the config :P* http://pastebin.com/V1YG4UP7 No problem! I've uploaded a sample config for you and others to take a look at, that pretty much serves as the starting point for any site I host. I usually keep the config under the directory of the site (before htdocs), and link it to `/etc/nginx/sites-enabled/YOURDOMAINHERE.com`. The config shows how to handle domain aliases (domain, www.domain, *.domain), rewrite `domain.com/pagename/` to `domain.com/index.php?p=pagename` and have working PHP (using FastCGI). I even syntax highlighted it as Perl since that's probably the closest match available ;)
Actually, nginx does have a sad history of security issues but Litespeed has much more (especially more critical ones). Considering so many have been found and it is closed-source... I can't imagine how crappy it would be open-sourced.
Im heading out just now, but ill post this for you tomorrow. Is there any application in particular you would like me to run the benchmark against (Wordpress, drupal, phpbb, std phpinfo etc)?
Ah right - this is probably a fairly good project then, if it's being done by a single person.
You know what's also infuriating to users? Entering their information into a system, waiting around for some kind of authentication email, and then realizing they didn't enter their email address correctly. I've seen people enter all sorts of weird things into email address fields without realizing it. Preliminary validation of an email address is simple. It should always be done.
Not quite? There is no check that the user actually exists at the domain, just that the address (hopefully) passes the RFCs and that the domain exists.
I just started learning python today, it's a really bitch'n language and has a lot of features I wish PHP had. I just wish it could be embedded in HTML like PHP is.
OOP and FP (Functional Programming) are not mutually exclusive. Effective and Bigger are weasel words that have no specific metric or definition.
Do you even know what you're talking about? Lol. Do you even know what the gateway part of payment gateway means? Hahaha. Honestly, your new php5.3 will soon be crappy old 5.3. None of your code will explode and die, it'll keep working just the same. Just like php 4 does. Expecting all the millions of php4 sites to upgrade is pointless. Most hosting packages let you choose 4, 5 or 5.3 anyway, they must understand more than either of us.
I've never used ngunx, but after these posts I think we will be trying it in dev environment. That being said, we just saved 15% on resource usage by switching to lighttpd. Just kidding. We switched 16 months ago and saved more than 50% of resource usage. If you have control over the hrdware, definitely spend some time learning and testing lighted and ngonx before you deploy apache to see if they can work for you. Very much faster
Thanks for that info. Can you share any good open source (or cheap) alternatives in the market? Thanks.
This man has great wisdom. Apache is proven, reliable, and fairly fast. Here is a [link](http://blog.joefallon.net/2010/08/building-the-perfect-ubuntu-10-04-lamp-server/) for everyone that may want to know how to set up the perfect Apache server using Ubuntu 10.04 LTS. 
Not sure I understand the question. More code isn't necessarily a bad thing though.
[Payment Gateway](http://en.wikipedia.org/wiki/Payment_gateway), as defined by Wikipedia- &gt;A payment gateway is an e-commerce application service provider service that authorizes payments for e-businesses, online retailers, bricks and clicks, or traditional brick and mortar. It is the equivalent of a physical point of sale terminal located in most retail outlets. Payment gateways protect credit card details by encrypting sensitive information, such as credit card numbers, to ensure that information is passed securely between the customer and the merchant and also between merchant and the payment processor. Payment Gateways- such as Authorize.Net- give you an API to use to communicate with their servers (the gateway). While you don't have to store the information (and you shouldn't, of course) it does mean any exploit of the server or site could let a malicious user intercept those details. Even if you are using a difference website for transactions- like paypal- then you'd be an idiot to think you were immune to being hacked and exposing customer data. All someone who breaks into your site has to do is redirect the customers to a fake transaction page in order to grab the data. As to the php4 security issues- there is a huge difference between code written in php, and php itself. You seem stuck up on the code- obviously that isn't going to break if you don't change anything, but that also has nothing to do with the security issues. PHP itself is a program- a very complex one at that- and over time people discover new flaws with it. When that happens your code doesn't matter. The last php4 release was 2008-08-07, and it contained security fixes (a buffer overflow issue). In the last two years there have been other, unpatched, security issues and over time there are certainly going to be more. Not all of these are going to be important- particularly if they can't be accessed through the public interface at all- but some of them are going to be serious. This has nothing to do with your code and everything to do with the engine running it.
It really depends on what you're trying to accomplish. I've found that simpler scripts and sites do fine with procedural code, while OOP PHP makes building large sites that have to handle lots of models, datasets and such a lot easier. As Jack9 states it's possible to mix the two to make what's best for your needs.
apache is too legit to quit. lots of real world use to reference. its a very proven product used by very large sites. 
Since you are offering... Wordpress and, if you have one available, something built on Zend Framework. 
I recently switched from Apache on Ubuntu 8.10 to Nginx + Apache + APC on Ubuntu 10.04 LTS. I was able to cut my page load times by 60 - 80%. APC was responsible for about half of that improvement. Never tried lighty.
You know what's even more annoying? Having poorly written email "validators" tell me that a working email address is not valid.
That should be //No point in maintaining tabs if you don't also account for spaces str_replace(array("\t", " "), array("&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;", "&amp;nbsp;"), $line) Also, file_get_contents() returns a string, not an array. You could explode() on "\n", but that'd break nl2br().
nice. I'll try to keep up with it. like the idea of an open company.
Proper OOP is more manageable in large scale sites with multiple coders.
What about some simple php with text, just to get that php proces running. &lt;?php echo"Hello!"; ?&gt; Thanks!
[http://www.google.ca/search?sourceid=chrome&amp;ie=UTF-8&amp;q=codeigniter+won't+work+on+php5](http://www.google.ca/search?sourceid=chrome&amp;ie=UTF-8&amp;q=codeigniter+won't+work+on+php5) I don't see anything. Again, you're talking out of your ass until I see some sort of reference. Additionally, I'm not sure if your last sentence (or what should be one sentence - I'm confused by the full stop in the middle) was supposed to say "weren't" and imply I wasn't coding when PHP5 came out? I was coding then, and am still supporting legacy software from that era (CMSs, eCommerce stuff) that all works fine on PHP5.
So...how the hell do you get cherokee to work with php? So far all it does is just download the php files.
Put a confirmation field? Then the users are the idiots, not you. Simple.
I'm not a system administrator myself, but I'm responsible for a server that receives 10 days of extremely high traffic. The server runs a copy of ExpressionEngine CMS and during that time as much was cached as could possible be, including using static page caching for the most popular pages. During that 10 day period last year the server was timing out pretty regularly due to a pretty significant increase of traffic beyond what I had anticipated. Our host recommended a switch to LightHTTPD and I was skeptical because switching servers in the middle of our busiest time seemed like a really bad idea, but the switch over went very smoothly (they described it as a drop-in replacement) and our server could easily handle the load for the remainder of the period. I would easily chose LightHTTPD from the get-go on a future project.
Dude, like a 1/3 od those results are people having trouble with code igniter because theyre using the wrong version. Keep in mind the issue isn't just with the framework, it's also with what youre doig with it. So if you made something during the time of PHP4 with codeigniter, the chances of it working correctly on php5 is slim to none... I know this for a fact becasue I worked at a company for 2 years around the time that php5 was finally starting to get adapted (despite that it had been out for atleast a year or 2, it had a very low adoption rate). The company had a lot of old websites it wanted to keep online, but at the same time they had new websites that only worked in php5. It was an absolute bitch dealing with it all.
I like the idea of it, but it doesn't seem to support doing more advanced rewriting... For most drupal sites I deploy, I use the boost module which caches the output as plain old .html files (easy massive scaling without having to mess with a caching reverse proxy). But I don't think cherokee can do this. In nginx I can do it with this: try_files /cache/normal/$host/${uri}_.html /cache/perm/$host/${uri}_.css /cache/perm/$host/${uri}_.js /cache/$host/0$uri.html /cache/$host/0${uri}/index.html @drupal; which then passes on to the normal handler if it doesn't match. And with everything setup my vhosts are quite simple: server { server_name www.server.com; access_log /var/log/nginx/server.access.log; error_log /var/log/nginx/server.error.log; root /var/www/server; include drupal; } And nginx also supports reloading configuration or handling an update without any downtime. I do really dig the cherokee admin and the performance sounds impressive, but it seems like more of a pain to configure when you need something that isn't baked into the admin gui...
lighttpd for me.
Okay there are a few things you need to know up front about switching away from Apache. I can only give this advice from the point of Apache to Nginx as it's been years since I used Lighttpd and based on my experience back then I wouldn't touch it with a fire iron. The first thing you need to know is that you're moving into a completely different world. A world that has undergone large changes in the past 3 years and a world where there isn't always a set way of doing things, often with people recommending things that are outdated or can lead to instability. (Such as using ifs in some cases) You've got to realize that Nginx is about performance and it is coded for that. It does not have .htaccess like functionality that parses at runtime. It does not have dynamically included modules and it does not have the ability to embed dynamic scripting languages. These are **good** things. If you hear one of these things and think "I'll have to find a work-around for that" then go back to Apache, you'll be a lot happier there. The second thing you need to realize is that Nginx is not a magic bullet. It won't take Wordpress and bring it from 4 requests per second to 500. In fact. PHP is still PHP, regardless of whether you use Apache, Nginx or Lighttpd and it will still be as slow or fast as ever. The reason people sometimes think that Nginx will speed up PHP is due to how Apache and Nginx handle dynamic scripting languages and static files. If you want to get a bit more detailed explanation of this difference then I recommend [my blog about nginx and apache differences](http://blog.martinfjordvald.com/2011/02/nginx-primer-2-from-apache-to-nginx/). Apologies for linking my own blog but it covers exactly this and I'm not going to rewrite what I already have once before. But since I'm at it, if you want to get a basic understanding of how the [Nginx configuration file works](http://blog.martinfjordvald.com/2010/07/nginx-primer/) then I have a post on that as well. All this said. Nginx is amazing. It can take over things you'd normally handle in PHP such as GeoIP and upload progress tracking, it will run solidly for you with no crashes and it is very, very secure. If you do decide to run Nginx then your first step is to [read the Nginx wiki](http://wiki.nginx.org/Modules). It is a thorough documentation of the modules available and if you feel like you need more of an example instead of just documentation then join us in #nginx on freenode. I go under the name Seph there and you're welcome to ask a question any time. I might answer with a question, though, as I enjoy leading people in the right direction instead of giving them the answer.
Using [xdebug](http://www.xdebug.org/docs/profiler) and a [php script from the xdebug author](http://derickrethans.nl/xdebug-and-tracing-memory-usage.html) you can log where memory is being used.
Why is there a comma in your sentence? What do you mean "less effective"? And why does OO which emphasizes code re-use necessarily mean "bigger amount of code"?
I think he means procedural rather than FP. edit: though what you said applies to procedural and OOP too.
Code size isn't a great metric. Memory usage and speed are much more useful measures of code quality. In general OOP is slightly slower than procedural code, but for the tasks it's sensible to use PHP for, there's no real impact. With proper caching both approaches are perfectly valid. I am personally involved with a site that has tens of thousands of visits per day (hundreds of thousands of pageviews) which is built in OO PHP and is quite happy. The advantages are a highly organised, modularised, re-usable codebase, which makes new development easy and standardised.
1. PHP's filter_var function uses regular expressions internally anyway 2. a DNS could be down 3. doing a DNS check every time you want to validate an email address is not exactly efficient 4. as mentioned in other comments, your "splitting on the @ symbol" technique will cause it to invalidate some valid emails 5. as mentioned in another comment, this doesn't verify that the particular account actually exists on the given domain anyway I agree with the person who said doing any validation beyond using 2 inputs is over-kill. Making a fool-proof email address validation+verification method _is_ impossible, and trying to do so is only contributing to the problem. The _only_ fool-proof technique is to send them an email with a verification link.
&gt;looks like some sweet Perl code Yeah, because PREG is so incredibly hard to implement.
thank you, i apparently still need to find out where because i had another issue. do you know of any good tutorials on using xdebug?
I'd have a look at prettify, a google project. http://code.google.com/p/google-code-prettify/ Stackoverflow uses this - it's simple to implement. Dave 
Hi [here's](http://lmgtfy.com/?q=how+to+program+in+php) a great link to get you started
Posting that link was my first intention, but then I though I'll throw in some more hints like: URL rewrite and URL-dispatcher
This is called URL Rewriting, and involves both PHP and your webserver's configuration. On the PHP side, you need to generate your links correctly, in a consistent format. So you need to turn page.php?something=5 to /page/something/5/ or /page/5/ It's up to you. You then need to get your web server to re-write these links to their original form. This differs greatly depending on which server you are running, but there are plenty of tutorials for Apache: * http://www.addedbytes.com/for-beginners/url-rewriting-for-beginners/ - very thorough, but covers most possibilities * http://www.yourhtmlsource.com/sitemanagement/urlrewriting.html - A bit shorter, but still comprehensive If you're running IIS 7, the URL-Rewrite extension is all you need, and it has helpful tools for generating the rewrite rules automatically. * http://www.iis.net/download/urlrewrite
Sure, maybe he's actually after some htaccess fu ;)
Did you mean "fu**" or "fun"?
fu as in kung **fu**
But, isn't one of the main strengths of Apache exactly serving up static content?
Does anyone know if nginx have an equivalent to this: http://code.google.com/p/mod-auth-token/
websites use old php4 scripts
There are a bajillion ways to do this. The easiest, assuming you're running Apache, is using something called mod_rewrite. That takes a request for http://1, and uses a regex to transform it into http://2. We would do this secretly - the user at the other end only ever sees http://1. http://2 will be http://your.site/realpage.php?pageTheySee=1, which you can then get at from inside your script as $_GET['pageTheySee']. Use browser search to find "from static to dynamic". http://httpd.apache.org/docs/2.0/misc/rewriteguide.html
&gt;Myth: A plus sign is not valid in an email address I love that site!
Blah blah blah, like I don't know all this already? Nothing you have offered here is constructive, it is just a long post that strokes your own ego (+ a little fud)
After reading all the comments and trying out a few suggestions, I think I am going to go with a LAMP stack set up as per these directions. I've come to the conclusion that my bottleneck will be PHP and not necessarily Apache itself. In the future, once I get my site up and running, I may explore nginx as an alternative if I begin running into issues...but as ensiferous said, PHP is still PHP. Therefore, I will be staying with the devil I know...for now.
Your code is very nicely formatted, I am currently doing a social networking(ish) site (based on Drupal mostly because it allowed me to ramp up really fast and despite what people say Drupal *will* scale), our next project at work will be something similar so we (meaning I) might take a look at Kwolla.
That only checks the email addresses format, while the functions I put up also checks the the domain the email is from (e.g. gmail.com) is valid.
Awesome! Lemme know if you need any help.
RedditMirror.cc runs on Apache 2.2 and PHP 5.3 via FastCGI on a dual proc, quad xeon box, with 16 GB of RAM. It can, and has, support flash traffic up to 1,000,000 unique visitors/day with every hit writing to the DB (an off-server PostgreSQL 8.4 server). I've successfully used a stripped-down apache (no mods except mod_rewrite, mod_ssl and mod_auth_digest) across 2 apache servers on 1 GHz Xeons w/ 4 GB of RAM each (hey, it was several years ago), capable of supporting a nationwide event ticket website that supported, on peak demand, over 500,000 unique visitors per hour and over 20 synchronous orders per *second* (March Madness 2007 exclusive tickets, advertised on ESPN). That setup was 2 Apaches + 4 servers dedicated to PHP (PHP requests relayed via FastCGI), 5 MySQL servers (3 reads w/ 2 read/write). I'm sure I could ahndle the same traffic w/ 1/2 as many servers in 2011. The key is 1. disabling all but necessary Apache + PHP extensions, 2. putting Apache into multi-threaded mode, 3. setting up 2 FastCGI processes per core per server, 4. farming out PHP to servers NOT on the Apache boxes, 5. farming out DB requests to servers NOT on the Apache boxes (tho these can be shared on your SQL boxes if you use enough caching via memcached and APC). I did all that myself through trial and error.
You know, coral cache works great for small websites. I use them until they drop redditmirror.cc cuz of excessive load, but that only happens after something like 30 GB / day and 250 GB/month.
I bet if you went w/ Apache/threaded/mpm_worker + Mod_FastCGI + &gt;=PHP 5.2 + APC, it would be just as fast.
The entire reason why Apache + PHP is bad is because by the "old default" of non-threaded Apache (prefork) + mod_php is that PHP had to be loaded, inside memory, for every single process that Apache spawned, and Apache had to spawn a new process for every new connection. So if you have 30 users and 30 connections, if Apache took 20 MB and PHP took 20 MB of RAM, then that's 30 Apache processes w/ 40*30 = 1.2 GB of RAM, with about 80% shared, but still 240 MB of RAM. Since most modern browsers have (for years) defaulted to 8 connections per page, if you had 30 active users, that'd be 240 processes * 30 = 1.4-2 GB of RAM, which is why performance drops off tremendously w/ even moderately-busy sites. But let's take redditMirror.cc's example, using Apache multithreaded (mpm_worker) + PHP via FastCGI. I have 8 PHP processes running, ever, at 14.9 MB of RAM each (top says 95% of ram is shared), so that's 20.9 MB for all 8 instances, plus Apache's 4 processes at 25 MB each, so my memory usage is tremendously reduced and speed of execution is tremendously reduced. win/win 
LiteSpeed Server is a drop-in replacement for Apache (they actually ported apache vhost config + mod_rewrite, mod_auth and a lot of other modules) that runs LightHTTPD internally. That's probably what they used. http://www.litespeedtech.com/overview.html
&gt; The entire reason why Apache + PHP Stop. Right. There. Reread what I said. PHP has nothing to do with it.
As a developer I get completely flustered when people refer to models as having a relationship. A model is not a database table. It is a single entity designed to handle the domain of data from any sources. That could be a RSS feed, Database, XML document or otherwise. Any framework that makes relational data out of models is wrong and needs to go back to the drawing board.
Realy?? I thought all were VM with root and similar to a Dedicated server. 
&gt; Could you give me some more details on what functionality your subframework incorporated? Did you include support for Databases or did you just allow the user to write the glue code? [Agavi](http://www.agavi.org) itself (the framework) partially solves this problem by providing a database adapter infrastructure. The reporting subframework uses existing facilities to access data sources, although in our case everything is MySQL and so we didn't need to create something SQL-generic. Generally speaking, the reporting subframework is tightly integrated (and built over) Agavi facilities, using its authentication and authorization mechanisms, configuration, etc. It is a set of classes that implement reporting-specific functionality (e.g. a tweaked security filter, some reporting-specific validators, a RBAC configuration file that can be included into the global application configuration - Agavi is *rich* on that etc) and an actual Reporting module that carries actions, views, templates, styles etc. The primary intent was to have a simple reporting machine that can be reused in several Agavi applications. As of PDF exports, we never really had this necessity, but that is because of specifics of our business. I imagine PDF export would be pretty important for many people. Then again, we can implement this in a snap using the Agavi facilities. 
well the site is fine but the color contrast at the bottom of the page and the hyper links, which you placed over there - you might wanna think about them. 
Not exactly sure what this means.
Just a hunch: Since you seem to process large amounts of data, are you working with set_time_limit(0) ? Usually PHP is pretty tidy with its memory usage, but when you don't have a time limit and your script gets caught in an infinite loop during shutdown, i.e. by a logical error with calling destructors and error handlers, your script won't shutdown. A piece of advice: Re-evaluate if you really do need your destructors and what they do. Under normal circumstances, PHP handles the cleanup pretty well itself.
Nope. They vary just as much as any other product. A lot of VPS are called "Managed VPS" and they're basically a Shared package on steroids. A lot of the time root access is not granted by default on those packages, or sometimes available at all. Some providers will have an "Unmanaged VPS" which you have to get in order to have root access, basically so that when you break stuff they don't have to support it.
no, i haven't touched that. it's a pretty simple website, most pages just fetch objects relating to the page, and then display it. some objects have other objects as properties but i dont have any circular references. do you know of any programs that handle load testing? sometimes apache handles the memory issues fine, other times i get crashes, i think it may have something to do with the way im testing.
This is what sucks about PHP (and any other language), you can find poor tutorials/code snippets like this with no explanation of how they work and they get copied + pasted around everywhere (often repeatedly) across custom scripts.
Well,... not so long ago I read this: http://www.reddit.com/r/PHP/comments/f38tv/released_my_first_piece_of_commercial_software
 location / { try_files $uri $uri/ /index.php?u=$request_uri; } Edit: Note this doesn't take into account the .html. I just wanted to show that using `rewrite` is not always necessary.
I can't say that I'm an expert on that matter; I just thought that you might have stumbled upon some mistakes I made : ) 
What if the user is a spammer using a fake email to try and sell you stuff? Surely then checking the domain is legit server side is a good idea?
Not only the number of redirects is limited, but also the number of requests that a webserver can handle simultaneously. Say that email is open for a minute on average, it is likely that 20 users on a mailinglist open the email during that same minute - especially if the email has a lot of recipients. This will likely be enough to shut down your webserver..
[Reddit is open source.](https://github.com/reddit/reddit) (though it's written in python you should be able to get the design from it.) As for stack overflow there are plenty of clones out there, just do a Google search, I'm sure you'll find one.
lol, well i appreciate your suggestion anyways. thanks for taking the time to offer your help :)
I've downloaded it, but haven't looked in it yet. Just a future proof in case you change your mind :D Thanks, hope you'll get lots of karma for that.
Thanks, and I'm not reversing my decision on the version 1.0 line of code. I appreciate it.
Thanks. Any reason why?
I'm sending the emails out through mailchimp so there's no way I'd know of, aside from creating a new field on import, to include the original link. Edit: If you do find any security vulnerabilities, please let me know.
Why I gave it away free? Like I said in the link, sales were lagging and I wanted people to use my software.
That is completely different from verification, that's a filter.
This isn't exactly a bad thing... Python and Ruby are thought-out, elegant languages that actually had some planning go into their development. They are building more features onto a solid base rather than trying to make new features work on a weak base. Look at PHP: it's 16 years old, and still doesn't know what it wants to be. You can forget about it ever "revolutionizing" high-level programming when it can barely support basic OO principles. It has been playing catch-up for the last 5+ years, and will continue to do so until it goes the way of COBOL (dead, with only crummy maintenance jobs available). I was always hesitant to dump too much of my time into Ruby or Python because of the small number of jobs available compared to PHP. Now that the others are gaining some steam, maybe we can finally start moving away from this archaic language.
Are you receiving an up tick in the amount of paid support/customization business yet or at all?
Not yet, no one has paid for Premium Support since I made everything free. I imagine its because a lot of people haven't delved deeply into the software yet and are just downloading it because of the announcement. I imagine Premium Support will pick up in the near future.
I think it's worth mentioning again: Having given it away for free, consider giving it away [freely](http://www.gnu.org/philosophy/why-free.html).
Right, I understand, like I said in my post, at some point I'll attach an Open Source license. I want to choose the correct license, so probably MIT, but until then, it's not licensed as Open Source software.
Oh, sorry, I thought I'd seen the whole article....guess I skimmed past that bit. Well, good job for committing to it, but it should happen sooner rather than later!
I hope you make a lot of money out of this and keep up the good work
Thanks! Me too! Version 2 is going to be great. Here's a preview of the interface: http://blog.leftnode.com/entry/kwolla-1.2.0-preview (it was originally going to be 1.2.0 but I'm making it 2.0 now).
I REALLY HAVE NO CLUE, SORRY!
you deserve lots of kudos for giving away your software. the code looks good and i appreciate your work!
You decided sales were lagging after 2 months? Really? That's a terrible way to run a business; you needed to hire salespeople to sell your software, not make it free. Businesses take years to become profitable and expecting good sales in the first two months that software is available is a little bit insane. Good luck with your free + support model, but your prices don't inspire confidence in your ability to provide enterprise support. You get what you pay for and $50/hr is a tiny little amount of money.
Is anyone here running nginx on Windows (win32)? Please share your experience..
I dunno where to start. I guess I could hire sales people on a commission only basis, but there probably aren't too many out there willing to do that. They need *some* type of income, which I can't pay them since I'm boot strapping. Several other companies are making a lot of money doing paid support (who said anything about enterprise?), so there's definitely money to be made there. I'm making only Version 1.0 free, I haven't decided what I'll do with Version 2.0 and other future versions. Thanks for your kind words, they inspire confidence and warmth.
Do you have an affiliate program for promoting Kwolla? In case you have great.. if not you really need to look into this before launching v2 because having affiliates is a really easy and an awesome way to promote any business ( sales = commission, so no salary or hiring salespeople) edit: kudos for releasing it for free btw.. downloaded it and hope to have a look inside soon.
Sorry, this is /r/php, I assumed speaking abotu PHP was implicit.
The way you're approaching this, I'm not sure how much success you'll have. Even household company names, like Google and Microsoft, have sales forces - you can't expect potential customers to come to your software, you have to take your software to your potential clients. This means hiring salespeople; how you pay them is an entirely different matter - seek out investment and turn your software into a full fledged startup, find people willing to work only for commission and/or part of the business, however you can. Whether you go with a paid model or a free+support model, you're going to need sales teams. Do you think MySQL doesn't have a sales team for their professional support packages? Of course they do and they're one of the most widely known and used pieces of free software! And yes, there is money to be made there, but not without people going out and obtaining clients. If sales teams weren't necessary for a business to succeed, they wouldn't exist. And really, increase your support prices, you can't be taken seriously at $30/hr or $50/hr. I regularly bill twice what you're billing for software support to do trivial web development projects and people in the industry expect to pay for quality - if they're not paying, they're going to decide they're not getting quality. It's silly and ridiculous, but that's the way that corporate business works (which is also why free software has such a hard time breaking into the enterprise). You can, alternatively, not seek out investment or partners and try to organically grow a business. I used to work for some guys that did this and they were out selling their software *6 years* before they had enough clientele to work on it full time and one of the guys was a professional salesman who worked selling it 2 days a week for those entire six years - and they weren't underbilling themselves. Just understand that it takes money to make money and there's a measure of risk in every business, but if you really think that your software will sell and be worth paying for, you'd be willing to take those risks (second mortgage, cash loan, whatever it takes). The reason I continually bring up the enterprise is because that's where the money is and it's quickly becoming a trend that large corporations want special purposed social networks - you should be gunning for clients like that. Were I you, I'd adjust my prices and write it into the software that certain "versions" only support a certain number of users. Want 10 people? Pay price tier 1. Want 100 people? Pay price tier 2. Etc. etc. etc. This way, you can offer your software to small time clients (that might only need 10-50 people) at a really cheap rate and grow some profit that way and if and when you land a big business, you can charge them out the ass. In running a software business, writing great software is the easy part.
I am downloading it also just because of this announcement, most likely I will just install it to development server play around bit, mess with code and break it. As a student I don't have any intentions to use it on live site I just want to try it :P
Yes, large companies have large sales forces, I understand this. They probably didn't have large sales teams 2 months after they launched. I do think MySQL started off as a free open source product that people downloaded. As they needed support or other things they were willing to pay for, a business organically grew around it. Same thing for PHP, Zend grew from releasing a product. My business partner and I have tons of different ideas on how to monetize Kwolla: SaaS solution, download and install yourself, etc. Just rest well knowing I have this planned out and (hope) I know what I'm doing.
I'd be interested in seeing ZF benchmarks.
Free doesn't necessarily mean open source, and vice versa. You'll have to figure out a license that makes most sense for your plans. Open Sourcing the project could get some momentum behind it - especially if you host the code on GitHub and encourage contribution. However, if you're planning on changing the license for 2.0, many people might not bother. I think SaaS is a decent route - keep the codebase open source, build a business around SaaS. See [Drupal Gardens](http://drupalgardens.com) for an example of taking an open source platform into the SaaS. Drupal Gardens has several tools as part of the service like a visual theme builder which are proprietary to the service, but don't take away from the core open source project. Acquia, the company behind Gardens, is founded by the founder of Drupal. They've been very careful to build a business without alienating the open source community. In addition, Acquia sells enterprise support, hosting, search services and stuff like that as well.
I will certainly set it up and check it out. Do you accept donations via BitCoin by any chance?
I don't, I'll look into it though. Thank you.
Right, Drupal (Acquia) and Wordpress are the two large companies I can think of who have an open source PHP product and make good money. This is currently the number one route my partner and I are thinking about.
&gt; Yes, large companies have large sales forces, I understand this. They probably didn't have large sales teams 2 months after they launched. I didn't mean to imply that you needed a large sales force immediately, just a sales force, even if only one person. The fact that you made your product free after less than 3 months of it being a product implies that you've given up on monetizing it through that avenue, which is what I was saying was a bad decision. 3 months is hardly any time at all for a product to be in the market and having a good initial month, followed by a less good month doesn't really translate to a drop off in sales, yet that's how you interpreted it. Just seems like you've got your sites set on too small a time frame.
How many newsletters will you be sending? You may want to outsource it. If you don't want to do this, make a cronjob that uses mailer to send mails. Google that and it'll get you far. Also you might want to spend some time on your newsletter mockup, outlook is a bitch.
Ooh you have any codeigniter framework?
You've got a spelling mistake on the front page, it's "entrepreneurs". Perhaps suggest some ways people might actually use your software other than just saying "it's a social network" - is it particularly useful for distributed teams, or a certain kind of website? As it is, I was looking at the description and wondering what I'd do with it, and not coming up with much.
Thanks for the catch! As of right now, it doesn't have a targeted niche. I'll add a more detailed description about how it will let you build a social network. We're thinking there will be multiple version 2.0's: Business, Education, Startup, Private Group, etc. Not sure if that'll create confusion though.
Symfony2 is impressive. I just set up a sandbox with the latest download, and I'm digging the code. The cmdline interface to Doctrine is very useful. All of the code is using php's newest namespace. I can't wait to build a project with it!
The only reason I downloaded this was because I recently started learning PHP on my own (also a new subscriber to r/php). At this point I'm overwhelmed what to do with this, but if future me does indeed become a PHP master and this helped me along the way, you have yourself a customer if I need some social networking software.
I'd be much more interested if it were built with ZF or Symfony. 
[It looks like you're out of luck](http://dev.mysql.com/doc/refman/5.0/en/trigger-syntax.html): &gt; There are some limitations on what can appear in statements that a trigger executes when activated: &gt; &gt; The trigger cannot use the CALL statement to invoke stored procedures that return data to the client or that use dynamic SQL. (Stored procedures are permitted to return data to the trigger through OUT or INOUT parameters.) It happens that stored procedures would permit you to do almost exactly what you're trying to do, right down to the sytax. ("Almost" because you can't combine placeholders and the LIMIT clause -- you'd need to use `CONCAT()` to put that bit of SQL together.) I doubt it'll be realistic for you, but you really should consider a switch to PostgreSQL, which implements triggers as calls to stored procedures. [It uses a slightly different syntax](http://www.postgresql.org/docs/8.4/static/plpgsql-statements.html#PLPGSQL-STATEMENTS-EXECUTING-DYN) than MySQL's, but this is just one of the many things it can do that MySQL can't.
I've been using Symfony 1.2 and 1.4 for the past two years. I am really looking towards starting a new project on 2.0. And this time, I'm switching to Doctrine.
Just wondering, but how did you do the languages? I noticed them in the download and I'm really impressed as it seems you are by yourself and I've been there myself. Great job man.
Perhaps, but when it comes down to benchmarks, the numbers show that Nginx is better at it. "The results indicate that Nginx outperforms Apache when serving static content. Both servers performed best with a concurrency of 100. Apache used four worker processes (threaded mode), 30% CPU and 17MB of memory to serve 6,500 requests per second. Nginx used one worker, 15% CPU and 1MB of memory to serve 11,500 requests per second." - Source: http://www.linuxjournal.com/magazine/nginx-high-performance-web-server-and-reverse-proxy
[cursors?](http://dev.mysql.com/doc/refman/5.0/en/cursors.html)
Unfortunately I only started poking at triggers and stored procedures once we moved to Postgres at work, and then only a little. I do, unfortunately, know that MySQL doesn't have array-like variables. Postgres does! No help, I know. Maybe this can be done with a temporary table and breaking out of the loop at the right point?
Using Symfony2 for a side project &amp; it works pretty well. Its feature list is impressive: 5.3, namespaced (autoloading), Doctrine2, twig, web profiler, easly integrates with ZF2.0 or other libs. Once basics are figured out (documentation improving a lot lately), application development/maintenance is nice with it. Definitely worth the time installing &amp; learning it.
the last time i did it i went on fiver and got guys to do it for me. but I'm not the op. 
What sets Symfony apart from something like Zend Framework? I see people saying they like it but exactly why? You can use Doctrine or a templating language with ZF as well so what are some very specific advantages that it offers? I'm thinking about using it but currently spend all of my time in Zend Framework.
I'm in the same boat. I see people telling ZF is not a real framework blablabla. I checked symfony 2 and I don't see yet where it's more of a "real" framework. Anyway it looks real good and I'm looking forward to use it (yeaaah french project). I'm still a bit overwhelmed by the first steps needed to "get it". The thing I don't like much is Yaml, like in Doctrine. I usually try to use the default choices as much as possible but I'm still debating if I should follow this one (don't like xml either for configuration but there's still good ol' php).
I too would like to know this.
Personally I wouldn't go MIT. It means people can commercially re-distribute it and make money off you're work. I would stick with GPL. It allows people distribution but not to profit off it.
Check in services/translate.php and in public/locale/*. In the locale directory you'll see all of the .po files which are you files from gettext. Then I wrote a .po file parser which is what services/translate.php is. That parses the .po file, sends each string to Google Translate and then the .po language is compiled for that locale.
For anything I'm building that will potentially be the backbone of my company, I'm going to use my own framework.
Great! Thank you. I'd install it on my local machine and then do your best to break it. It's one of the best ways to learn.
People can sell GPL code too, as long as they redistribute the code with it too.
You should really be using PDO SQL prepared statements for queries nowadays which will look after the prevention of injection attacks for you. http://php.net/manual/en/pdo.prepared-statements.php
Ah yes. my-bad.
FYI, I would just like to say your open journey on launching this software has been fascinating. Thanks for posting the result to each stage. I too have downloaded it and will be going through it at some point. I've taken a quick look already. It's only been a quick skim, but the first thing I noticed is a lack of function and class doc comments. This would be the first thing I would look for when developing with an application. 
I am absolutely opposed to any and all doc blocks. Here's why: http://www.reddit.com/r/PHP/comments/eo1v1/zend_studio_80_quality_at_a_glance/c19mx9v Edit: You'll notice them in a few spots, primarily in Artisan because, like everyone else, I thought they made my code better when I wrote it.
Thanks, I will look further into PDO. I checked the code for ezSQL, it has sql injection prevention. function escape($str) { return mysql_escape_string(stripslashes($str)); }
Yii ftw.
What leads you to believe it's a cache issue? One thing to check is that you're not relying on &lt;button value="x" name="submitButton"&gt;Submit&lt;/button&gt; and expecting $_REQUEST['submitButton'] == x. IE submits the html content of the &lt;button&gt; as the value, so in this case would submit $_REQUEST['submitButton'] == 'Submit'. Firefox doesn't do this. If you are relying on that value and redirecting based on it, it is possible that is the reason for the 404. otherwise, I'd need more detail. What page is it redirecting to? is symfony set up to give a 404 when incorrect parameters are passed to the script? etc
For some extra info, I would use a hidden field to submit the value instead, if that was the case. That way it would also work correctly if return was pressed in any other input.
I've been using Netbeans for the past few days, it kicks ass. 
Hi, Thanks for your swift response. The reason I thought it was something to do with caching was that in Firefox it correctly finds the required actions without issue. Here's an example of a delete action, generated automatically by Symfony's admin generator. &lt;li class="sf_admin_action_delete"&gt;&lt;a onclick="if (confirm('Are you sure?')) { var f = document.createElement('form'); f.style.display = 'none'; this.parentNode.appendChild(f); f.method = 'post'; f.action = this.href;var m = document.createElement('input'); m.setAttribute('type', 'hidden'); m.setAttribute('name', 'sf_method'); m.setAttribute('value', 'delete'); f.appendChild(m);var m = document.createElement('input'); m.setAttribute('type', 'hidden'); m.setAttribute('name', '_csrf_token'); m.setAttribute('value', 'de4c6912775b27e01198eede485fa6eb'); f.appendChild(m);f.submit(); };return false;" href="/backend_dev.php/guard/users/3"&gt;Delete&lt;/a&gt;&lt;/li&gt; Half the time when I attempt this action it will correctly delete and redirect to the page. The other half of the time it will take me to the Symfony 404 page, saying "404 | Not Found | sfError404Exception. Action "users/3" does not exist." When submitting a form regularly without the JS, Symfony will (again, only sometimes) redirect back to the new form action prompting the user to fill in all the required fields, as is the default Symfony action. A regular form looks something like this: &lt;form action="/frontend_dev.php/en/weather" method="post" enctype="multipart/form-data"&gt; &lt;ul class="error_list"&gt; &lt;/ul&gt; &lt;a href="/frontend_dev.php/en/weather"&gt;Back to list&lt;/a&gt; &lt;tr&gt; &lt;th&gt;&lt;label for="daily_weather_business_line_location_weather_id"&gt;Business line location weather&lt;/label&gt;&lt;/th&gt; &lt;td&gt;&lt;select name="daily_weather[business_line_location_weather_id]" id="daily_weather_business_line_location_weather_id"&gt; &lt;option value="2"&gt;(removed)&lt;/option&gt; &lt;option value="3"&gt;(removed)&lt;/option&gt; &lt;option value="4"&gt;(removed)&lt;/option&gt; &lt;/select&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;label for="daily_weather_service_location_weather_id"&gt;Service location weather&lt;/label&gt;&lt;/th&gt; &lt;td&gt;&lt;select name="daily_weather[service_location_weather_id]" id="daily_weather_service_location_weather_id"&gt; &lt;option value="1"&gt;(removed)&lt;/option&gt; &lt;option value="2"&gt;(removed)&lt;/option&gt; &lt;option value="3"&gt;(removed)&lt;/option&gt; &lt;option value="4"&gt;(removed)&lt;/option&gt; &lt;option value="5"&gt;(removed)&lt;/option&gt; &lt;option value="6"&gt;(removed)&lt;/option&gt; &lt;/select&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;label for="daily_weather_status"&gt;Status&lt;/label&gt;&lt;/th&gt; &lt;td&gt;&lt;select name="daily_weather[status]" id="daily_weather_status"&gt; &lt;option value="No Issue."&gt;No Issue&lt;/option&gt; &lt;option value="Issue. No user impact."&gt;Issue. No user impact.&lt;/option&gt; &lt;option value="Outage."&gt;Outage.&lt;/option&gt; &lt;/select&gt;&lt;input type="hidden" name="daily_weather[id]" id="daily_weather_id" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;input type="submit" value="Save" /&gt; &lt;/form&gt; Any additional information I can give that would be helpful? Thanks alot, again, I appreciate all suggestions, I'm tearing my hair out. EDIT: formatting
Right, all frameworks will have that. First, mysql_escape_string() shouldn't be used, it should be mysql_real_escape_string(). Second, PDO uses prepared statements in which two calls are made to the server. One to prepare the query and the next to send the data. It can make things slightly slower (but faster if you continually call the query), but not noticeably so. Here's a basic overview: $pdo = new PDO('dsn information here'); // First database API call to prepare the query $statement = $pdo-&gt;prepare('SELECT * FROM user WHERE id = :id AND status = :status'); // Build some values to send to the server $statement-&gt;bindValue('id', 10, PDO::PARAM_INT); $statement-&gt;bindValue('status', 1, PDO::PARAM_INT); // Actually send the values to the server $statement-&gt;execute(); $user = $statement-&gt;fetchObject(); This way, your worry about injection attacks is diminished as the data is never actually part of the query. In summary, use PDO and prepared statements. End of story.
Thanks again! I will surely be reading more on this and using on my next project. I found [THIS](http://www.phpro.org/tutorials/Introduction-to-PHP-PDO.html). It seems to be the best of them.
Cool. Glad I could help :)
In addition to PDO there are also prepared statements with mysqli. http://www.php.net/manual/en/mysqli-stmt.bind-param.php
Thanks for stopping by. Please return to your cave.
Jesus. Just a bit of friendly banter. I've never used Symphony, so I've no opinion on it.
Looks great! Congrats, I'll keep track of this ;-)
Thank you, I appreciate it.
AWS is not free for a year. A micro instance and a certain amount of I/O etc are free. A micro is quite CPU limited from some testing I've done, and I'd not expect to do anything serious on it. Anyone that says otherwise has not used a micro, or does not realize that its the micro that is free instead of the small.
Back in 2006, I've been switching away from apache to lighttpd/fastcgi and we were constantly running into stability issues needing to restart servers here and then. This lead us to go back to apache. Now I'm using nginx in front of apache. Nginx is serving all static content (and stuff that can be served directly from memcache). Apache only gets to see the PHP requests. Also I've turned off keep-alive in apache as to not keep apaches around needlessly (nginx will do the keep-aliving). This is like using fast-cgi, but with the advantage of using the IMHO much more stable (due to being used more often) mod_php. (you could try nginx/php-fpm directly - I heard it's much more stable than the old FastCGI support, but nginx/apache works so well that I don't want to do any experiments any more)
But if you use PDO, you can have support for every database PDO supoprts, and more people know PDO than mysqli these days (me included), so there's really no reason to use mysqli in 2011.
You definitely should NOT go GPL with this. Why? Because, if I run a site, any site, and I want to use your app WITH it, I can't w/ the GPL, because Wordpress and Drupal have poisoned the legal waters to the point that if your program is considered a "plugin" to my site, then i become liable to release my entire site under teh GPL. I simply won't risk that, ever, nor will any sane person.
All of the articles are dated 2004 and 2005. This is before PHP 5.2 and are geared for PHP 4, a 10 year old language. You should avoid at all costs almost all of these lessons. Learn it right, get a mentor. I'm offering. 
Stripping and escaping don't work in all cases. Consider this common case (may not be syntactically valid PHP, but you get the point): $qry = "select * from users where userid=" + $_GET["userid"] The developer expects the userid parameter to contain an integer, so they don't wrap it in single-quotes. You may say "Oh, I'll just remember to always wrap parameters in single-quotes". This is what we call a fail-open design decision. If you forget, you are hosed. If somebody else on your team forgets, you are hosed. As a professional pentest/appsec guy, I am always looking for applications where the developer used a "lazy" solution. Often times that is how I get in. Go for the parameterized prepared statements. And teach yourself to be on guard for those fail-open design decisions. Authentication is another common failure area - "Oh, I'll just check that the user is logged on at the top of every page". You are human, your teammates are human, any time you base your security on the premise that nobody will make a mistake you have compromised your security.
While I remember the argument about themes being GPL, I'm not sure anyone could claim that Kwolla is a plugin when it shares literally no code with Drupal or Wordpress. Regardless, I'd probably release it under a less restrictive license.
While I remember the argument about themes being GPL, I'm not sure anyone could claim that Kwolla is a plugin when it shares literally no code with Drupal or Wordpress. Regardless, I'd probably release it under a less restrictive license.
While I remember the argument about themes being GPL, I'm not sure anyone could claim that Kwolla is a plugin when it shares literally no code with Drupal or Wordpress. Regardless, I'd probably release it under a less restrictive license.
While I remember the argument about themes being GPL, I'm not sure anyone could claim that Kwolla is a plugin when it shares literally no code with Drupal or Wordpress. Regardless, I'd probably release it under a less restrictive license.
Drupal is NOT a product of Acquia. Acquia is one of the companies basing their business on an EXISTING open source project, Drupal.
ZF is not a full stack framework: You're not forced to use the whole thing if all you really want is one part of it. I believe with Symfony, if you want to use any part of it, it's better to simply use the whole thing.
I'll take you up on that!
I don't know the answer to this, but aren't you calling the method from a non-static class? Which, at least IMHO, would cause it not to *actually* be called statically.
This kinda sounds to me like a bug.. parent::foo() is not called in static context because $this is defined. Did you try opening a bug report?
My knowledge of the underlying mechanisms isn't good enough to tell if it's a bug or a limitation. I'll report it now and see what response I get.
What would you suggest? What tutorial on the internet is more up to date? I'm reading the PHP manual. Is that up to date?
That's definitely a bug. The behavior makes no sense. You are not calling a static method anywhere. Output that I get: Called new foo Called an instance method 
That's definitely a bug. The behavior makes no sense. You are not calling a static method anywhere. Output that I get: Called new foo Called an instance method 
That's definitely a bug. The behavior makes no sense. You are not calling a static method anywhere. Output that I get: Called new foo Called an instance method 
That's definitely a bug. The behavior makes no sense. You are not calling a static method anywhere. Output that I get: Called new foo Called an instance method 
That's definitely a bug. The behavior makes no sense. You are not calling a static method anywhere. Output that I get: Called new foo Called an instance method 
What would you suggest? What tutorial on the internet is more up to date? I'm reading the PHP manual. Is that up to date?
What would you suggest? What tutorial on the internet is more up to date? I'm reading the PHP manual. Is that up to date?
It looks as though this may be a bug in PHP versions 5.3.2 and 5.3.3 only. Here is a bug report and it is apparently fixed in 5.3.5. [Bug #52713](http://bugs.php.net/bug.php?id=52713&amp;edit=2)
Whilst many of your reason are valid, and are fine in your own projects that you and your team manage, but it puts me off learning any app in depth because whilst well written and named code is easy to read I don't necessarily want to scan an entire code block to understand the function. It's much easier (and less time consuming) to scan a small sentence to get the gist of what the function does. This being said I'm not suggesting that you need comments on every line, however there are no comments in your models or views, which arguably is the most important part of a commercial application because these are the parts developers will primarily dive into to try to understand what is going on. Finally, IMO comments don't make code better, rather they make it easier for someone else to pickup from where you left off. 
Until the comments aren't maintained and are out of date and then they're even more damaging than having no comments.
IE is really bad about caching things it shouldn't. I'll often make a PHP [header()](http://php.net/manual/en/function.header.php) call to prevent caching in IE and other browsers on XMLHTTP requests. There's someone talking specifically about header() solutions to the IE 6/7 problem in [this post](http://www.php.net/manual/en/function.header.php#88875)
If you are implying you can't do development/try out AWS using a micro instance you're incorrect. A micro instance is far more than a typical $9.95 a month shared host gives you was the point.
&gt;in the controller send this: &gt; $data["fruits"] = $this-&gt;db-&gt;get('fruits')-&gt;result(); &amp;#3232;\_&amp;#3232; 
what are you trying to accomplish? fyi, in general triggers are bad form and to be avoided when possible. also, looping in sql is to be avoided for performance reasons. 
This is the part where I point out that frameworks always end up costing a lot more time than they save, and get voted into the ground for it.
It looks like it works if you remove the __callStatic method all together. I haven't tested this, but is it possible you can do something like the following? class A { private static function callStatic($method, $args) { echo "static"; } public function __call($method, $args) { if(isset($this)) { echo "instance"; } else { return $this-&gt;callStatic($method, $args); } } } EDIT: Nevermind, it seems __call is not invoked at all for static calls (I thought it was used for both pre-5.3).
I obviously was not implying that you can't do development on a micro. That's basically what they are for. Also, even though a micro has a bit more RAM than a shared host will provide access to, assuming you have enough traffic that being on a shared host would be a problem, you are definitely going to pay enough to get a small VPS from Dreamhost just in I/O and other ancillary charges. Just look at it like I was clarifying that it would be for development only.
You want this instead: http://php.net/manual/en/language.oop5.autoload.php 
Name a language you can't find bad code in on the internet.
Name a language you can't find bad code in on the internet.
Autoloading is definitely the route to take, but you should use spl_autoload_register rather than defining a single __autoload function: http://www.php.net/manual/en/function.spl-autoload-register.php Ideally, you should use a standardized autoloading method such as this: https://gist.github.com/221634
This is a language defect. In PHP4 static methods and magic methods did not exist. The extent of OO classes was they could be extended and referencing the parent was done via "parent::". When PHP5 came along they decided "::" was the reference for static and "-&gt;" remained the reference for instance. However they didn't want to break backwards compatibility so parent remained a keyword and you reference your parent through "parent::". PHP5.3 introduced __callStatic and you found this glaring problem with the language its self. When this was introduced, along with LSB, they added the "static::" keyword. IMO they should have re-worked "parent::" to first (maybe only) check for the parents instance method since "static::" will always attempt to call a static method (bottom up, not top down, like "parent::" though).
Any variable defined in the included file will only be available in the function you run the include/require in (as that's the scope it gets included in to). Something like a class declaration will be globally accessible. For example, the following code will work fine: **EDIT:** Oops. This won't work fine. See the reply by StoneCypher and my revised code in reply to his. **file1.php** function loadModule($module) { require($module.'.php'); } **hello.php** class Hello { public function greet() { echo "Hello, world!"; } } **index.php** require('file1.php'); loadModule('hello'); $h = new Hello(); $h-&gt;greet(); What I usually do is create some sort of base class that implements a singleton pattern (which you'd usually want for stuff like a data access layer anyway). So what you could do is something like: class Base { static private $_classes = array(); public static function loadDatabase() { require('Database.php'); self::$_classes['Database'] = new Database(); } public static function loadHeader() { require('Header.php'); self::$_classes['Header'] = new Header(); } public static function get($class) { if (isset(self::$_classes[$class])) return self::$_classes[$class]; else throw new Exception("Class not loaded: $class"); } } And then use it like so: require('Base.php'); Base::loadDatabase(); $database = Base::get('Database'); $database-&gt;query("SELECT * FROM `example_table`"); $header = Base::get('Header'); $header-&gt;show();
That's a bit like saying you're just going to have cheese because if you make a sandwich the bread will go out of date. Edit: Anyway it doesn't matter that much to me at the moment, I just wanted to express my opinion to you in case it may be of constructive help.
I used to see junk like that second one. It's as if the developer had no concept of negation. Either that, or decided to stub out a code block for if the condition is true, but neglected to put a comment in explaining why that otherwise empty code block exists and ultimately betters the project.
agreed. Plus for that matter ZF is a memory hog.
Much appreciated. :)
Which is why what you said was inappropriate.
I've heard a few people talking about using nginx with apache. How would I set up such a system? I've seen a few walkthroughs online, but have had no success.
I'm not OP, but I just posted on /r/mentors looking for a PHP/MySQL mentor. Any chance you could take on another mentee?
&gt;First, mysql_escape_string() shouldn't be used, it should be mysql_real_escape_string(). Why?
&gt; and I want to stick as close as I can to a classful design pattern This is nonsense text. There's no such thing as "classful" and that certainly is not a design pattern. &gt; In light of this, Instead of having a long sequence of includes at the top of my files, I wanted to develop some sort of "loader" object Yes, because why require something which requires the other things, when you can meaninglessly wrap it in a class, introducing opportunities for errors and security holes? Clearly this isn't what you want at all: includer.php &lt;?php for_each(array('foo.php', 'bar.php') as $src) { require_once($src); } ?&gt; other source require_once('includer.php'); &gt; or maybe even have functions that combine files to include such as: Have you never realized that when you do things like this, you're gaining nothing, and opening up opportunities for very real problems? &gt; My problem is that I think the requires and include are limited to the functions I put them in They aren't, and this isn't your problem besides. Include and requires just perform a full injection. a.php &lt;?php function ex($a) { include('b.php'); echo $a; } ex('foo'); ?&gt; b.php return 'I lied!'; } function j($a) { echo "lulz: $a&lt;br/&gt;"; } Stop trying to be so clever. You're wasting time on unimportant things and gaining nothing in the balance for it.
I just double checked, it appears the code in the article should work for &gt; test@enterprise.cam.ac.uk
This is not correct, sir. I apologize. ex.php } function b() { echo "was in B, because no scope&lt;br/&gt;\n"; test.php &lt;?php function a($x) { require('ex.php'); } b(); } ?&gt; If the require was scoped to its contents, then B would be an interior function, and scope would fail, and thus output would be "there is no such function b()". B executes because PHP's include and require, like basically all include and require, are fulltext insert, not any kind of language-level scoped anything.
The hell he does. Autoloading is a security nightmare. You might as well have just advised him to turn on magic quotes.
EzSQL: another tool written to solve a problem which creates more problems than it solves, that people mostly use because when other people recommend against it, punishment fetish kicks in and the downvote button goes into overdrive. Thoughts? Don't waste your time. It's no better than any of those garbage ORM libraries out there.
&gt; You may say "Oh, I'll just remember to always wrap parameters in single-quotes". This is what we call a fail-open design decision. That's actually what we call "a bad programmer trying to imitate other bad programmers by giving a solution which is wrong in order to justify their own wrong solution." The correct solution is to stop using the string interface, and switch to the parameterized interface, which is immune to inbound injections entirely. &gt; And teach yourself to be on guard for those fail-open design decisions. Looking at one right now.
Unless you're performance sensitive, at which point even when you stick with portable SQL, PDO costs you 50% or more, its own internal benchmarks notwithstanding, and occasionally radically more since it has no bulk insert syntax. If you're *really* performance sensitive, then you have to start using database native notations, at which point PDO completely falls apart. It doesn't matter who knows PDO or MySQLi. If they're worth a week's pay, they can pick up a query interface in three hours. Don't choose the right tool for the job on grounds of not wanting to figure out how to use the right tool for the job. Picking the right tool for the developer is almost never the right way to go.
How is autoloading a security nightmare? Chicken Little, the sky isn't always falling. 
Why are triggers bad form? They allow you to keep things about your application centralized, where dropped connects and the like won't cause you any issues.
Please elaborate. I wasn't aware autoloading caused any security problems.
They broke my brain.
Unfortunately your reply is incorrect also. He never mentioned scoped function-availability. He did mention variables, and therefore the symbol table being used.
Holy shit. It was an off-the-cuff comment. It hardly requires this level of offence to be taken. I'm so sorry to have hurt your delicate sensibilities. I'll be on my way and I won't be back. -frontpage
It does not, unless one is dynamically constructing or testing the existence of classes with malicious input. Which is extremely unlikely. But I would love to be proven wrong.
Some have answered your question already. Another alternative would be to use a frame work that provides these types things.
Don't be so condescending. And if you weren't trying to be condescending then you failed.
It takes the connections character set into consideration when escaping characters and allows you to escape binary data. It's been possible in the past to inject other unicode characters or other things not caught by mysql_escape_string() or addslashes(). But the point is moot: use PDO.
Again im pretty sure this has nothing to do with symfony. But I am by no means an expert and I could be wrong
How deep down the folder structure does this go? If I do an auto load function like the one in the first example, will it only search the local folder for the file or will it try all folders beneath as well?
You aren't the first person to tell me that. Its really an idea I should give more consideration to. My real problem with it, however, is that these php frameworks that I've been looking at all require me to first learn the framework and its idiosyncrasies, then stick religiously to MVC. I feel like they don't give me near enough "breathing room". do you have any ideas for some small and unobtrusive frameworks? Things like Zend, Symfony, and Codeigniter just seem so... BIG to me. 
You control that. Your autoload function just gets the class name requested and it's your job to transform that into a path and then require() it. My autoload function converts underscores into path separators and then loads the class from my library path. So "My_Long_Class_Name" is transformed in my code to something like "/path/to/library/My/Long/Class/Name.php" and then I require() the resulting path. 
I really like this method. I'm a bit confused though. Forgive my ignorance please; i'm still in school and don't have much experience. It seems like what you are doing in this line: self::$_classes['Database'] = new Database(); is creating the db object and then placing it into an associative array named "_classes". What I think I know about singletons is that they are objects that can only be created once. I'm not sure how that applies here though. Couldn't you do this: $database = Base-&gt;$_classes['Database']; instead of $database = Base::get('Database'); and achieve the same thing? My first thought as you said create a base class was to create an object that encapsulated all of the functionality I would need across pages and just use that object as necessary. i'm a little confused about the singleton thing, I've never used them before. 
I know you mentioned you don't prefer the video tutorials. But the tutsplus video tutorials series on CodeIgniter really helped me get up to speed with the framework very quickly. Besides, CodeIgniter has excellent documentation.
I'm not very experienced... still in school and trying to learn. I understand that most know more than I do and I need to be continuously open to suggestions and direction. I recognize that your suggestions will be improvements and I thank you for them. You are right, there is no such thing as classful design. It is called Object Oriented Programming. I think most understood what I meant by that. I do not believe that having a little extra code to organize things in the way that I like to see them organized is a negative. I do not see how it introduces security holes and I would like for you to elaborate. I do not think I was trying to be clever. I, honestly, am just trying to design a system correctly. I want to build something that is easily maintainable and configurable. I do not know if I somehow insulted you while asking my question. You remind me of a few of my professors. The tone of the response almost made asking the question not worth it. Here is a picture of how I felt after reading your response. http://i.imgur.com/ho9O4.png None the less, thank you for it. I will definitely take your points into consideration. 
OK ill look at them...are they 2.0 compatible though? CI 2.0 has good documentation in a general sense, but poor in a tutorial sense. It's like having everything you need from IKEA to build a desk but you're missing the paper that tells you where everything goes...
yeah see i tried getting going on 1.7, but literally a couple days after that 2.0 came out. And looking over 2.0, it seems rather different than 1.7? Am I wrong? 
Currently have to go with PHP.
Although Kohana docs are lacking quite a bit. The framework itself is extremely robust. The code is also extremely well documented. If your interested in getting down and dirty with the framework, and digging into the innards to really understand how the framework works. I would suggest Kohana. I have been using it for my latest project and it is absolutely wonderful!
yeah see everyone loves kohana - but i can't even figure out how to use it. it's useless to me. like having a jet fighter with no manual.
can kohana connect to oracle? i can't even figure THAT out from the documentation.
I'd say if he has no framework experience at all, the best route would be to dip his toes into this world with CodeIgniter, then move on to Yii - this is the route I've taken and it's made me understand how MVC works fairly well.
I'll look tomorrow then. Was banging my head against CI all day today. Just glancing at it, looks very config heavy? would you say that is true? I looked at symfony a few weeks back and got bogged down in configuration hell. Things didn't go smoothly, had trouble fixing it, just gave up - if i can't even get it up and running, how am I gonna learn it? Very frustrating. 
well ok then, back to the CI 2.0 - no tutorials exist yet problem. Should I bother with 1.7, since everyone seems to crap on it? Is it that bad? Trying to figure out what framework to even go with has been VERY confusing.
If you're having trouble with CI, you may need to step back and do some more general PHP studying.
Check out [Rob Allen's Zend Framework Tutorial](http://akrabat.com/zend-framework-tutorial/). He keeps it updated with each release and has had it running since I think the 1.0 release, maybe slightly later.
CI 2 doesn't work the same as CI 1.7 - so turns out, following the old stuff doesn't match, doesn't work. Documentation is not the same as tutorials. Again, should I go with CI 1.7 that everyone seems to hate, or what? I'm asking for advice. I get PHP. I'm having trouble with frameworks. I get that i'm not a supercoding genius, but I'm trying to learn something new. I passed the Zend PHP certification on the first try. I use php every day. I've built many php/oracle systems for a major medical institution. My point is, I get PHP. And I taught it to myself. So i'm trying to learn more. I'm trying to take the next step. :/
As a CI novice, you shouldn't notice much difference other than adding the prefix CI_ to the Model and Controller class. Also, if you have used a MY_Controller in the past, the location where CI expects the file to be has changed to the application/core/ directory. The biggest change from 1.7 to 2.0 is the requirement of php5, while php4 has been supported previously it is no longer. Most everything else falls into bug-fixes and tweaks.
I think I know what your issue is - you're trying to do too many things at once. Don't. Do this: Start with controllers and views. Completely understand how a controller relates to the URL. Then completely understand how calling views from a controller works. Pass variables to the view. Then do subviews (header/body/footer). Once you understand these completely, take a website you've already built and start replacing pieces here and there with CI code. Start with your forms. First, replace the form HTML with CI's form code, then do form verification. Then replace your `anchor` HTML tags with CI `anchor()` function. Little by little you go. Don't try to take everything in at once, you have to understand how every little piece fits together into a solid application. Once you understand these things, you can start using models - which do the heavy lifting like database interaction and they hold your larger methods. Recoding an existing website piece by piece with CI will be your best bet. Also: Ignore CI 1.7, use CI 2.0.
thank you, this is helpful. I will try and scale back my attack and go in smaller chunks.
I'll look it over, thanks for the tip.
This is amazing.
Listen, if you don't mind using an older version of CI to start off your journey, I wholeheartedly recommend this series: http://www.phpandstuff.com/articles/codeigniter-doctrine-from-scratch-day-1-install-and-setup Some things have changed between 1.7 and 2.0, but not enough that this tutorial isn't awesome! It teaches you to use CI with Doctrine ... but once I went through it twice and understood what was going on, I dropped Doctrine and use's CI's internal DB handler since it lets me fine-tune my queries and also let's me use CI's models as they were meant to be used - with plenty of good methods.